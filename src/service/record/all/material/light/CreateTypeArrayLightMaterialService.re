open Js.Typed_array;

open BufferLightMaterialService;

let createTypeArrays = (buffer, lightMaterialCount, textureCountPerMaterial) => (
  Uint32Array.fromBufferRange(
    WorkerType.sharedArrayBufferToArrayBuffer(buffer),
    ~offset=ShaderIndicesService.getShaderIndicesOffset(lightMaterialCount),
    ~length=ShaderIndicesService.getShaderIndicesLength(lightMaterialCount),
  ),
  Float32Array.fromBufferRange(
    WorkerType.sharedArrayBufferToArrayBuffer(buffer),
    ~offset=getDiffuseColorsOffset(lightMaterialCount),
    ~length=getDiffuseColorsLength(lightMaterialCount),
  ),
  Float32Array.fromBufferRange(
    WorkerType.sharedArrayBufferToArrayBuffer(buffer),
    ~offset=getSpecularColorsOffset(lightMaterialCount),
    ~length=getSpecularColorsLength(lightMaterialCount),
  ),
  Float32Array.fromBufferRange(
    WorkerType.sharedArrayBufferToArrayBuffer(buffer),
    ~offset=getShininessOffset(lightMaterialCount),
    ~length=getShininessLength(lightMaterialCount),
  ),
  Uint32Array.fromBufferRange(
    WorkerType.sharedArrayBufferToArrayBuffer(buffer),
    ~offset=
      getTextureIndicesOffset(lightMaterialCount, textureCountPerMaterial),
    ~length=
      getTextureIndicesLength(lightMaterialCount, textureCountPerMaterial),
  ),
  Uint8Array.fromBufferRange(
    WorkerType.sharedArrayBufferToArrayBuffer(buffer),
    ~offset=
      getDiffuseMapUnitsOffset(lightMaterialCount, textureCountPerMaterial),
    ~length=getDiffuseMapUnitsLength(lightMaterialCount),
  ),
  Uint8Array.fromBufferRange(
    WorkerType.sharedArrayBufferToArrayBuffer(buffer),
    ~offset=
      getSpecularMapUnitsOffset(lightMaterialCount, textureCountPerMaterial),
    ~length=getSpecularMapUnitsLength(lightMaterialCount),
  ),
  Uint32Array.fromBufferRange(
    WorkerType.sharedArrayBufferToArrayBuffer(buffer),
    ~offset=
      getCopiedShaderIndicesOffset(
        lightMaterialCount,
        textureCountPerMaterial,
      ),
    ~length=getCopiedShaderIndicesLength(lightMaterialCount),
  ),
  Float32Array.fromBufferRange(
    WorkerType.sharedArrayBufferToArrayBuffer(buffer),
    ~offset=
      getCopiedDiffuseColorsOffset(
        lightMaterialCount,
        textureCountPerMaterial,
      ),
    ~length=getCopiedDiffuseColorsLength(lightMaterialCount),
  ),
  Float32Array.fromBufferRange(
    WorkerType.sharedArrayBufferToArrayBuffer(buffer),
    ~offset=
      getCopiedSpecularColorsOffset(
        lightMaterialCount,
        textureCountPerMaterial,
      ),
    ~length=getCopiedSpecularColorsLength(lightMaterialCount),
  ),
  Float32Array.fromBufferRange(
    WorkerType.sharedArrayBufferToArrayBuffer(buffer),
    ~offset=
      getCopiedShininessOffset(lightMaterialCount, textureCountPerMaterial),
    ~length=getCopiedShininessLength(lightMaterialCount),
  ),
  Uint32Array.fromBufferRange(
    WorkerType.sharedArrayBufferToArrayBuffer(buffer),
    ~offset=
      getCopiedTextureIndicesOffset(
        lightMaterialCount,
        textureCountPerMaterial,
      ),
    ~length=
      getCopiedTextureIndicesLength(
        lightMaterialCount,
        textureCountPerMaterial,
      ),
  ),
  Uint8Array.fromBufferRange(
    WorkerType.sharedArrayBufferToArrayBuffer(buffer),
    ~offset=
      getCopiedDiffuseMapUnitsOffset(
        lightMaterialCount,
        textureCountPerMaterial,
      ),
    ~length=getCopiedDiffuseMapUnitsLength(lightMaterialCount),
  ),
  Uint8Array.fromBufferRange(
    WorkerType.sharedArrayBufferToArrayBuffer(buffer),
    ~offset=
      getCopiedSpecularMapUnitsOffset(
        lightMaterialCount,
        textureCountPerMaterial,
      ),
    ~length=getCopiedSpecularMapUnitsLength(lightMaterialCount),
  ),
);