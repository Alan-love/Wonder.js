// Generated by dts-bundle v0.7.2
// Dependencies for this module:
//   ../../immutable
//   ../../wonder-fantasy-land/dist/es2015/types/IO
//   ../../wonder-commonlib/dist/es2015/utils/DomQuery
//   ../../wonder-frp/dist/es2015/global/Operator
//   ../../wonder-commonlib/dist/es2015/Log

declare module 'wonder.js/dist/commonjs' {
    export { getCameraPMatrix, getCameraNear, setCameraNear, getCameraFar, setCameraFar } from "wonder.js/dist/commonjs/component/camera/Camera";
    export { CameraController, createCameraController, getCameraControllerGameObject } from "wonder.js/dist/commonjs/component/camera/CameraController";
    export { CameraControllerData } from "wonder.js/dist/commonjs/component/camera/CameraControllerData";
    export { CameraData } from "wonder.js/dist/commonjs/component/camera/CameraData";
    export { getPerspectiveCameraFovy, setPerspectiveCameraFovy, getPerspectiveCameraAspect, setPerspectiveCameraAspect } from "wonder.js/dist/commonjs/component/camera/PerspectiveCamera";
    export { PerspectiveCameraData } from "wonder.js/dist/commonjs/component/camera/PerspectiveCameraData";
    export { Component } from "wonder.js/dist/commonjs/component/Component";
    export { ComponentData } from "wonder.js/dist/commonjs/component/ComponentData";
    export { getTypeIDFromClass, getTypeIDFromComponent } from "wonder.js/dist/commonjs/component/ComponentTypeIDManager";
    export { BoxGeometry, createBoxGeometry, setBoxGeometryConfigData } from "wonder.js/dist/commonjs/component/geometry/BoxGeometry";
    export { CustomGeometry, createCustomGeometry, setCustomGeometryVertices, setCustomGeometryIndices } from "wonder.js/dist/commonjs/component/geometry/CustomGeometry";
    export { Geometry, getDrawMode, getVertices, getIndices, getGeometryConfigData, initGeometry, getGeometryGameObject } from "wonder.js/dist/commonjs/component/geometry/Geometry";
    export { GeometryData } from "wonder.js/dist/commonjs/component/geometry/GeometryData";
    export { BasicMaterial, createBasicMaterial } from "wonder.js/dist/commonjs/component/material/BasicMaterial";
    export { Material, getMaterialColor, setMaterialColor, getMaterialOpacity, setMaterialOpacity, getMaterialAlphaTest, setMaterialAlphaTest, getMaterialGameObject, initMaterial } from "wonder.js/dist/commonjs/component/material/Material";
    export { MaterialData } from "wonder.js/dist/commonjs/component/material/MaterialData";
    export { MeshRenderer, createMeshRenderer, getMeshRendererGameObject, getMeshRendererRenderList } from "wonder.js/dist/commonjs/component/renderer/MeshRenderer";
    export { MeshRendererData } from "wonder.js/dist/commonjs/component/renderer/MeshRendererData";
    export { Tag, createTag, addTag, removeTag, findGameObjectsByTag, getTagGameObject } from "wonder.js/dist/commonjs/component/tag/Tag";
    export { TagData } from "wonder.js/dist/commonjs/component/tag/TagData";
    export { LinkList, LinkNode } from "wonder.js/dist/commonjs/component/transform/LinkList";
    export { ThreeDTransform, createThreeDTransform, getThreeDTransformPosition, setThreeDTransformPosition, getThreeDTransformLocalToWorldMatrix, getThreeDTransformLocalPosition, setThreeDTransformLocalPosition, setThreeDTransformBatchTransformDatas, getThreeDTransformParent, setThreeDTransformParent, getThreeDTransformGameObject } from "wonder.js/dist/commonjs/component/transform/ThreeDTransform";
    export { ThreeDTransformData, ThreeDTransformRelationData } from "wonder.js/dist/commonjs/component/transform/ThreeDTransformData";
    export { getUID, isIndexUsed, getStartIndexInArrayBuffer } from "wonder.js/dist/commonjs/component/transform/utils";
    export { CompileConfig } from "wonder.js/dist/commonjs/config/CompileConfig";
    export { DataBufferConfig } from "wonder.js/dist/commonjs/config/DataBufferConfig";
    export { DebugConfig } from "wonder.js/dist/commonjs/config/DebugConfig";
    export { MemoryConfig } from "wonder.js/dist/commonjs/config/MemoryConfig";
    export { RenderWorkerConfig } from "wonder.js/dist/commonjs/config/RenderWorkerConfig";
    export { Director } from "wonder.js/dist/commonjs/core/Director";
    export { DirectorData } from "wonder.js/dist/commonjs/core/DirectorData";
    export { GameObject, createGameObject, addGameObjectComponent, disposeGameObject, initGameObject, disposeGameObjectComponent, getGameObjectComponent, getGameObjectTransform, hasGameObjectComponent, isGameObjectAlive, addGameObject, removeGameObject, hasGameObject, getGameObjectChildren, getGameObjectParent } from "wonder.js/dist/commonjs/core/entityObject/gameObject/GameObject";
    export { GameObjectData } from "wonder.js/dist/commonjs/core/entityObject/gameObject/GameObjectData";
    export { Scene, addSceneChild, removeSceneChild } from "wonder.js/dist/commonjs/core/entityObject/scene/Scene";
    export { SceneData } from "wonder.js/dist/commonjs/core/entityObject/scene/SceneData";
    export { Main } from "wonder.js/dist/commonjs/core/Main";
    export { MainData } from "wonder.js/dist/commonjs/core/MainData";
    export { Scheduler } from "wonder.js/dist/commonjs/core/Scheduler";
    export { GlobalTempData } from "wonder.js/dist/commonjs/definition/GlobalTempData";
    export { cache } from "wonder.js/dist/commonjs/definition/typescript/decorator/cache";
    export { assert, describe, it, requireCheck, requireCheckFunc, ensure, ensureFunc, requireGetterAndSetter, requireGetter, requireSetter, ensureGetterAndSetter, ensureGetter, ensureSetter, invariant } from "wonder.js/dist/commonjs/definition/typescript/decorator/contract";
    export { execOnlyOnce } from "wonder.js/dist/commonjs/definition/typescript/decorator/control";
    export { registerClass } from "wonder.js/dist/commonjs/definition/typescript/decorator/registerClass";
    export { singleton } from "wonder.js/dist/commonjs/definition/typescript/decorator/singleton";
    export { virtual } from "wonder.js/dist/commonjs/definition/typescript/decorator/virtual";
    export { root } from "wonder.js/dist/commonjs/definition/Variable";
    export { WorkerDetectData } from "wonder.js/dist/commonjs/device/WorkerDetectData";
    export { DEG_TO_RAD, RAD_TO_DEG } from "wonder.js/dist/commonjs/math/Global";
    export { Matrix3 } from "wonder.js/dist/commonjs/math/Matrix3";
    export { Matrix4 } from "wonder.js/dist/commonjs/math/Matrix4";
    export { Quaternion } from "wonder.js/dist/commonjs/math/Quaternion";
    export { Vector2 } from "wonder.js/dist/commonjs/math/Vector2";
    export { Vector3 } from "wonder.js/dist/commonjs/math/Vector3";
    export { Vector4 } from "wonder.js/dist/commonjs/math/Vector4";
    export { ArrayBufferData } from "wonder.js/dist/commonjs/renderer/buffer/ArrayBufferData";
    export { IndexBufferData } from "wonder.js/dist/commonjs/renderer/buffer/IndexBufferData";
    export { RenderCommandBufferData } from "wonder.js/dist/commonjs/renderer/command_buffer/RenderCommandBufferData";
    export { material_config } from "wonder.js/dist/commonjs/renderer/data/material_config";
    export { render_config } from "wonder.js/dist/commonjs/renderer/data/render_config";
    export { shaderLib_generator } from "wonder.js/dist/commonjs/renderer/data/shaderLib_generator";
    export { DeviceManager, setDeviceManagerGL } from "wonder.js/dist/commonjs/renderer/device/DeviceManager";
    export { DeviceManagerData } from "wonder.js/dist/commonjs/renderer/device/DeviceManagerData";
    export { EScreenSize } from "wonder.js/dist/commonjs/renderer/device/EScreenSize";
    export { GPUDetector, EGPUPrecision } from "wonder.js/dist/commonjs/renderer/device/GPUDetector";
    export { DrawRenderCommandBufferData } from "wonder.js/dist/commonjs/renderer/draw/DrawRenderCommandBufferData";
    export { EBufferType } from "wonder.js/dist/commonjs/renderer/enum/EBufferType";
    export { EDisposeDataOperateType } from "wonder.js/dist/commonjs/renderer/enum/EDisposeDataOperateType";
    export { EDrawMode } from "wonder.js/dist/commonjs/renderer/enum/EDrawMode";
    export { EGeometryWorkerDataOperateType } from "wonder.js/dist/commonjs/renderer/enum/EGeometryWorkerDataOperateType";
    export { EVariableType } from "wonder.js/dist/commonjs/renderer/enum/EVariableType";
    export { empty, NULL, basic_materialColor_fragment, end_basic_fragment, common_define, common_fragment, common_function, common_vertex, highp_fragment, lowp_fragment, mediump_fragment } from "wonder.js/dist/commonjs/renderer/shader/chunk/ShaderChunk";
    export { GLSLSenderData } from "wonder.js/dist/commonjs/renderer/shader/glslSender/GLSLSenderData";
    export { LocationData } from "wonder.js/dist/commonjs/renderer/shader/location/LocationData";
    export { ProgramData } from "wonder.js/dist/commonjs/renderer/shader/program/ProgramData";
    export { Shader } from "wonder.js/dist/commonjs/renderer/shader/Shader";
    export { ShaderData } from "wonder.js/dist/commonjs/renderer/shader/ShaderData";
    export { main_begin, main_end, setPos_mvp } from "wonder.js/dist/commonjs/renderer/shader/snippet/ShaderSnippet";
    export { DeviceManagerWorkerData } from "wonder.js/dist/commonjs/renderer/worker/both_file/device/DeviceManagerWorkerData";
    export { ERenderWorkerState } from "wonder.js/dist/commonjs/renderer/worker/both_file/ERenderWorkerState";
    export { EWorkerOperateType } from "wonder.js/dist/commonjs/renderer/worker/both_file/EWorkerOperateType";
    export { SendDrawRenderCommandBufferData } from "wonder.js/dist/commonjs/renderer/worker/logic_file/draw/SendDrawRenderCommandBufferData";
    export { WorkerInstanceData } from "wonder.js/dist/commonjs/renderer/worker/logic_file/worker_instance/WorkerInstanceData";
    export { ArrayBufferWorkerData } from "wonder.js/dist/commonjs/renderer/worker/render_file/buffer/ArrayBufferWorkerData";
    export { IndexBufferWorkerData } from "wonder.js/dist/commonjs/renderer/worker/render_file/buffer/IndexBufferWorkerData";
    export { DrawRenderCommandBufferWorkerData } from "wonder.js/dist/commonjs/renderer/worker/render_file/draw/DrawRenderCommandBufferWorkerData";
    export { GeometryWorkerData } from "wonder.js/dist/commonjs/renderer/worker/render_file/geometry/GeometryWorkerData";
    export { initGL } from "wonder.js/dist/commonjs/renderer/worker/render_file/initGL";
    export { MaterialWorkerData } from "wonder.js/dist/commonjs/renderer/worker/render_file/material/MaterialWorkerData";
    export { GLSLSenderWorkerData } from "wonder.js/dist/commonjs/renderer/worker/render_file/shader/glslSender/GLSLSenderWorkerData";
    export { LocationWorkerData } from "wonder.js/dist/commonjs/renderer/worker/render_file/shader/location/LocationWorkerData";
    export { ProgramWorkerData } from "wonder.js/dist/commonjs/renderer/worker/render_file/shader/program/ProgramWorkerData";
    export { StateData } from "wonder.js/dist/commonjs/renderer/worker/render_file/state/StateData";
    export { getState, setState } from "wonder.js/dist/commonjs/renderer/worker/render_file/state/StateSytem";
    export { Color } from "wonder.js/dist/commonjs/structure/Color";
    export { RectRegion } from "wonder.js/dist/commonjs/structure/RectRegion";
    export { View } from "wonder.js/dist/commonjs/structure/View";
    export { initDeviceManagerWorkerData, initProgramWorkerData } from "wonder.js/dist/commonjs/test/forRenderWorkerUnitTest";
    export { initThreeDTransformData, DomQuery, fromArray, initTagData, initGeometryData, initMaterialData, initShaderData, initProgramData, initLocationData, initGLSLSenderData, initMeshRendererData, initArrayBufferData, initIndexBufferData, initDeviceManagerData, initCameraControllerData, initGameObjectData, initSceneData, initRenderCommandBufferData, initDrawRenderCommandBufferData, createState, useProgram, sendAttributeData, sendUniformData, disableVertexAttribArray, setGeometryIndices, setGeometryVertices, hasGeometryIndices, getShaderIndex, updateSystem } from "wonder.js/dist/commonjs/test/forUnitTest";
    export { BufferUtilsForUnitTest } from "wonder.js/dist/commonjs/utils/BufferUtilsForUnitTest";
    export { Log } from "wonder.js/dist/commonjs/utils/Log";
    export { CommonTimeController } from "wonder.js/dist/commonjs/utils/time/CommonTimeController";
    export { DirectorTimeController } from "wonder.js/dist/commonjs/utils/time/DirectorTimeController";
    export { TimeController } from "wonder.js/dist/commonjs/utils/time/TimeController";
}

declare module 'wonder.js/dist/commonjs/component/camera/Camera' {
    import { CameraController } from "wonder.js/dist/commonjs/component/camera/CameraController";
    export var getCameraPMatrix: (cameraController: CameraController) => any;
    export var getCameraNear: (cameraController: CameraController) => any;
    export var setCameraNear: (cameraController: CameraController, near: number) => void;
    export var getCameraFar: (cameraController: CameraController) => any;
    export var setCameraFar: (cameraController: CameraController, far: number) => void;
}

declare module 'wonder.js/dist/commonjs/component/camera/CameraController' {
    import { Component } from "wonder.js/dist/commonjs/component/Component";
    import { GameObject } from "wonder.js/dist/commonjs/core/entityObject/gameObject/GameObject";
    export class CameraController extends Component {
    }
    export var createCameraController: () => any;
    export var getCameraControllerGameObject: (component: CameraController) => GameObject;
}

declare module 'wonder.js/dist/commonjs/component/camera/CameraControllerData' {
    import { ComponentGameObjectMap } from "wonder.js/dist/commonjs/component/ComponentData";
    import { Matrix4 } from "wonder.js/dist/commonjs/math/Matrix4";
    export class CameraControllerData {
        static index: number;
        static count: number;
        static dirtyIndexArray: Array<number>;
        static gameObjectMap: ComponentGameObjectMap;
        static worldToCameraMatrixCacheMap: WorldToCameraMatrixCacheMap;
    }
    export type WorldToCameraMatrixCacheMap = {
        [index: number]: Matrix4;
    };
}

declare module 'wonder.js/dist/commonjs/component/camera/CameraData' {
    import { Matrix4 } from "wonder.js/dist/commonjs/math/Matrix4";
    export class CameraData {
        static nearMap: NearMap;
        static farMap: FarMap;
        static worldToCameraMatrixMap: WorldToCameraMatrixMap;
        static pMatrixMap: PMatrixMap;
    }
    export type NearMap = {
        [cameraControllerIndex: number]: number;
    };
    export type FarMap = {
        [cameraControllerIndex: number]: number;
    };
    export type WorldToCameraMatrixMap = {
        [cameraControllerIndex: number]: Matrix4;
    };
    export type PMatrixMap = {
        [cameraControllerIndex: number]: Matrix4;
    };
}

declare module 'wonder.js/dist/commonjs/component/camera/PerspectiveCamera' {
    import { CameraController } from "wonder.js/dist/commonjs/component/camera/CameraController";
    export var getPerspectiveCameraFovy: (cameraController: CameraController) => any;
    export var setPerspectiveCameraFovy: (cameraController: CameraController, fovy: number) => void;
    export var getPerspectiveCameraAspect: (cameraController: CameraController) => any;
    export var setPerspectiveCameraAspect: (cameraController: CameraController, aspect: number) => void;
}

declare module 'wonder.js/dist/commonjs/component/camera/PerspectiveCameraData' {
    export class PerspectiveCameraData {
        static fovyMap: FovyMap;
        static aspectMap: AspectMap;
    }
    export type FovyMap = {
        [cameraControllerIndex: number]: number;
    };
    export type AspectMap = {
        [cameraControllerIndex: number]: number;
    };
}

declare module 'wonder.js/dist/commonjs/component/Component' {
    export class Component {
        index: number;
    }
}

declare module 'wonder.js/dist/commonjs/component/ComponentData' {
    import { Component } from "wonder.js/dist/commonjs/component/Component";
    import { GameObject } from "wonder.js/dist/commonjs/core/entityObject/gameObject/GameObject";
    import { Map as MapImmutable } from "immutable";
    export class ComponentData {
        static addComponentHandleMap: AddComponentHandleMap;
        static disposeHandleMap: DisposeHandleMap;
        static initHandleMap: InitHandleMap;
    }
    export type AddComponentHandleMap = {
        [typeID: string]: (component: Component, gameObject: GameObject) => void;
    };
    export type DisposeHandleMap = {
        [typeID: string]: (component: Component) => void;
    };
    export type InitHandleMap = {
        [typeID: string]: (index: number, state: MapImmutable<any, any>) => void;
    };
    export type ComponentGameObjectMap = {
        [index: number]: GameObject;
    };
}

declare module 'wonder.js/dist/commonjs/component/ComponentTypeIDManager' {
    import { Component } from "wonder.js/dist/commonjs/component/Component";
    export var getTypeIDFromClass: (_class: any) => any;
    export var getTypeIDFromComponent: (component: Component) => any;
}

declare module 'wonder.js/dist/commonjs/component/geometry/BoxGeometry' {
    import { Geometry } from "wonder.js/dist/commonjs/component/geometry/Geometry";
    export class BoxGeometry extends Geometry {
    }
    export var createBoxGeometry: () => BoxGeometry;
    export var setBoxGeometryConfigData: (geometry: BoxGeometry, data: BoxGeometryConfigData) => void;
    export type BoxGeometryConfigDataMap = {
        [index: number]: BoxGeometryConfigData;
    };
    export type BoxGeometryConfigData = {
        width?: number;
        height?: number;
        depth?: number;
        widthSegments?: number;
        heightSegments?: number;
        depthSegments?: number;
    };
}

declare module 'wonder.js/dist/commonjs/component/geometry/CustomGeometry' {
    import { Geometry } from "wonder.js/dist/commonjs/component/geometry/Geometry";
    export class CustomGeometry extends Geometry {
    }
    export var createCustomGeometry: () => any;
    export var setCustomGeometryVertices: (geometry: Geometry, vertices: Float32Array) => any;
    export var setCustomGeometryIndices: (geometry: Geometry, indices: Uint16Array | Uint32Array) => any;
}

declare module 'wonder.js/dist/commonjs/component/geometry/Geometry' {
    import { Component } from "wonder.js/dist/commonjs/component/Component";
    export abstract class Geometry extends Component {
    }
    export var getDrawMode: Function;
    export var getVertices: Function;
    export var getIndices: Function;
    export var getGeometryConfigData: Function;
    export var initGeometry: (geometry: Geometry) => void;
    export var getGeometryGameObject: Function;
}

declare module 'wonder.js/dist/commonjs/component/geometry/GeometryData' {
    import { EBufferType } from "wonder.js/dist/commonjs/renderer/enum/EBufferType";
    import { ComponentGameObjectMap } from "wonder.js/dist/commonjs/component/ComponentData";
    import { ComponentMap } from "wonder.js/dist/commonjs/component/ComponentSystem";
    import { GeometryIndicesCacheMap, GeometryInfoList, GeometryVerticesCacheMap, GeometryWorkerInfoList } from "wonder.js/dist/commonjs/definition/type/geometryType";
    export class GeometryData {
        static index: number;
        static count: number;
        static disposeCount: number;
        static maxDisposeIndex: number;
        static isReallocate: boolean;
        static buffer: SharedArrayBuffer;
        static verticesOffset: number;
        static indicesOffset: number;
        static verticesInfoList: GeometryInfoList;
        static indicesInfoList: GeometryInfoList;
        static isInit: boolean;
        static verticesWorkerInfoList: GeometryWorkerInfoList;
        static indicesWorkerInfoList: GeometryWorkerInfoList;
        static disposedGeometryIndexArray: Array<number>;
        static vertices: Float32Array;
        static indices: Uint16Array | Uint32Array;
        static verticesCacheMap: GeometryVerticesCacheMap;
        static indicesCacheMap: GeometryIndicesCacheMap;
        static indexType: EBufferType;
        static indexTypeSize: number;
        static configDataMap: object;
        static computeDataFuncMap: GeometryComputeDataFuncMap;
        static gameObjectMap: ComponentGameObjectMap;
        static geometryMap: ComponentMap;
    }
    export type GeometryComputeDataFuncMap = {
        [index: number]: (index: number, GeometryData: any) => GeometryComputeData;
    };
    export type GeometryComputeData = {
        vertices: Float32Array;
        indices: Uint16Array | Uint32Array;
    };
}

declare module 'wonder.js/dist/commonjs/component/material/BasicMaterial' {
    import { Material } from "wonder.js/dist/commonjs/component/material/Material";
    export class BasicMaterial extends Material {
    }
    export var createBasicMaterial: () => BasicMaterial;
}

declare module 'wonder.js/dist/commonjs/component/material/Material' {
    import { Component } from "wonder.js/dist/commonjs/component/Component";
    export class Material extends Component {
    }
    export var getMaterialColor: Function;
    export var setMaterialColor: Function;
    export var getMaterialOpacity: Function;
    export var setMaterialOpacity: Function;
    export var getMaterialAlphaTest: Function;
    export var setMaterialAlphaTest: Function;
    export var getMaterialGameObject: Function;
    export var initMaterial: (material: Material) => void;
}

declare module 'wonder.js/dist/commonjs/component/material/MaterialData' {
    import { MaterialClassNameTable, ShaderIndexTable } from "wonder.js/dist/commonjs/definition/type/materialType";
    import { GameObject } from "wonder.js/dist/commonjs/core/entityObject/gameObject/GameObject";
    import { Material } from "wonder.js/dist/commonjs/component/material/Material";
    export class MaterialData {
        static index: number;
        static count: number;
        static buffer: SharedArrayBuffer;
        static shaderIndices: Uint32Array;
        static colors: Float32Array;
        static opacities: Float32Array;
        static alphaTests: Float32Array;
        static defaultColorArr: Array<number>;
        static defaultOpacity: number;
        static defaultAlphaTest: number;
        static workerInitList: Array<number>;
        static materialClassNameTable: MaterialClassNameTable;
        static shaderIndexTable: ShaderIndexTable;
        static gameObjectMap: Array<GameObject>;
        static materialMap: Array<Material>;
    }
}

declare module 'wonder.js/dist/commonjs/component/renderer/MeshRenderer' {
    import { Component } from "wonder.js/dist/commonjs/component/Component";
    export class MeshRenderer extends Component {
    }
    export var createMeshRenderer: () => any;
    export var getMeshRendererGameObject: Function;
    export var getMeshRendererRenderList: () => any;
}

declare module 'wonder.js/dist/commonjs/component/renderer/MeshRendererData' {
    import { GameObject } from "wonder.js/dist/commonjs/core/entityObject/gameObject/GameObject";
    import { MeshRenderer } from "wonder.js/dist/commonjs/component/renderer/MeshRenderer";
    export class MeshRendererData {
        static renderGameObjectArray: Array<GameObject>;
        static gameObjectMap: Array<GameObject>;
        static meshRendererMap: Array<MeshRenderer>;
        static index: number;
        static count: number;
    }
}

declare module 'wonder.js/dist/commonjs/component/tag/Tag' {
    import { Component } from "wonder.js/dist/commonjs/component/Component";
    import { GameObject } from "wonder.js/dist/commonjs/core/entityObject/gameObject/GameObject";
    export class Tag extends Component {
    }
    export var createTag: (slotCount?: number) => any;
    export var addTag: Function;
    export var removeTag: Function;
    export var findGameObjectsByTag: (tag: string) => GameObject[];
    export var getTagGameObject: Function;
}

declare module 'wonder.js/dist/commonjs/component/tag/TagData' {
    import { ComponentGameObjectMap } from "wonder.js/dist/commonjs/component/ComponentData";
    import { Tag } from "wonder.js/dist/commonjs/component/tag/Tag";
    export class TagData {
        static tagArray: Array<string>;
        static slotCountMap: Array<number>;
        static usedSlotCountMap: Array<number>;
        static indexMap: Array<number>;
        static indexInTagArrayMap: Array<number>;
        static lastIndexInTagArray: number;
        static tagMap: TagMap;
        static gameObjectMap: ComponentGameObjectMap;
        static index: number;
        static count: number;
        static disposeCount: number;
    }
    export type TagMap = {
        [index: number]: Tag;
    };
}

declare module 'wonder.js/dist/commonjs/component/transform/LinkList' {
    export class LinkList<T> {
        static create(): LinkList<{}>;
        shift(): LinkNode<T>;
        push(node: LinkNode<T>): void;
    }
    export class LinkNode<T> {
        static create(val: any): LinkNode<any>;
        constructor(val: T);
        val: T;
        next: LinkNode<T>;
    }
}

declare module 'wonder.js/dist/commonjs/component/transform/ThreeDTransform' {
    import { Vector3 } from "wonder.js/dist/commonjs/math/Vector3";
    import { Component } from "wonder.js/dist/commonjs/component/Component";
    export class ThreeDTransform extends Component implements IThreeDTransform {
        uid: number;
    }
    export interface IThreeDTransform {
        index: number;
        uid: number;
    }
    export interface BatchTransformData {
        transform: ThreeDTransform;
        position: Vector3;
        localPosition: Vector3;
    }
    export var createThreeDTransform: () => any;
    export var getThreeDTransformPosition: Function;
    export var setThreeDTransformPosition: Function;
    export var getThreeDTransformLocalToWorldMatrix: Function;
    export var getThreeDTransformLocalPosition: Function;
    export var setThreeDTransformLocalPosition: Function;
    export var setThreeDTransformBatchTransformDatas: (batchData: BatchTransformData[]) => void;
    export var getThreeDTransformParent: Function;
    export var setThreeDTransformParent: Function;
    export var getThreeDTransformGameObject: Function;
}

declare module 'wonder.js/dist/commonjs/component/transform/ThreeDTransformData' {
    import { ThreeDTransform } from "wonder.js/dist/commonjs/component/transform/ThreeDTransform";
    import { GameObject } from "wonder.js/dist/commonjs/core/entityObject/gameObject/GameObject";
    import { Vector3 } from "wonder.js/dist/commonjs/math/Vector3";
    import { Matrix4 } from "wonder.js/dist/commonjs/math/Matrix4";
    import { LinkList } from "wonder.js/dist/commonjs/component/transform/LinkList";
    import { Quaternion } from "wonder.js/dist/commonjs/math/Quaternion";
    export class ThreeDTransformData {
        static readonly maxCount: number;
        static localToWorldMatrices: Float32Array;
        static localPositions: Float32Array;
        static localRotations: Float32Array;
        static localScales: Float32Array;
        static defaultPosition: Vector3;
        static defaultRotation: Quaternion;
        static defaultScale: Vector3;
        static defaultLocalToWorldMatrice: Matrix4;
        static firstDirtyIndex: number;
        static indexInArrayBuffer: number;
        static notUsedIndexLinkList: LinkList<number>;
        static isTranslateMap: any;
        static parentMap: ThreeDTransformParentMap;
        static childrenMap: ThreeDTransformChildrenMap;
        static cacheMap: ThreeDTransformCacheMap;
        static tempMap: ThreeDTransformTempMap;
        static transformMap: TransformMap;
        static count: number;
        static uid: number;
        static disposeCount: number;
        static isClearCacheMap: boolean;
        static gameObjectMap: ThreeDTransformGameObjectMap;
        static aliveUIDArray: Array<number>;
        static buffer: ArrayBuffer;
    }
    export class ThreeDTransformRelationData {
        static create(): ThreeDTransformRelationData;
        indexInArrayBuffer: number;
        parent: ThreeDTransformRelationData;
        children: Array<ThreeDTransformRelationData>;
    }
    export type ThreeDTransformParentMap = {
        [uid: number]: ThreeDTransform;
    };
    export type ThreeDTransformChildrenMap = {
        [uid: number]: Array<ThreeDTransform>;
    };
    export type ThreeDTransformGameObjectMap = Map<number, GameObject>;
    export type TransformMap = {
        [index: number]: ThreeDTransform;
    };
    export type ThreeDTransformCacheMap = {
        [uid: number]: ThreeDTransformCacheData;
    };
    export type ThreeDTransformCacheData = {
        position: Vector3;
        localPosition: Vector3;
        localToWorldMatrix: Matrix4;
    };
    export type ThreeDTransformTempMap = {
        [uid: number]: ThreeDTransformTempData;
    };
    export type ThreeDTransformTempData = {
        position: Vector3;
        localPosition: Vector3;
        localToWorldMatrix: Matrix4;
    };
    export type ThreeDTransformPositionMap = {
        [uid: number]: Vector3;
    };
    export type ThreeDTransformLocalPositionMap = {
        [uid: number]: Vector3;
    };
    export type ThreeDTransformLocalToWorldMatrixMap = {
        [uid: number]: Matrix4;
    };
}

declare module 'wonder.js/dist/commonjs/component/transform/utils' {
    export var getUID: Function;
    export var isIndexUsed: Function;
    export var getStartIndexInArrayBuffer: () => number;
}

declare module 'wonder.js/dist/commonjs/config/CompileConfig' {
    export const CompileConfig: {
        isCompileTest: boolean;
        closeContractTest: boolean;
    };
}

declare module 'wonder.js/dist/commonjs/config/DataBufferConfig' {
    export const DataBufferConfig: {
        transformDataBufferCount: number;
        geometryDataBufferCount: number;
        materialDataBufferCount: number;
        renderCommandBufferCount: number;
        geometryIndicesBufferBits: number;
    };
}

declare module 'wonder.js/dist/commonjs/config/DebugConfig' {
    export const DebugConfig: {
        isTest: boolean;
        debugCollision: boolean;
        showDebugPanel: boolean;
    };
}

declare module 'wonder.js/dist/commonjs/config/MemoryConfig' {
    export const MemoryConfig: {
        maxComponentDisposeCount: number;
    };
}

declare module 'wonder.js/dist/commonjs/config/RenderWorkerConfig' {
    export const RenderWorkerConfig: {
        useRenderWorker: boolean;
    };
}

declare module 'wonder.js/dist/commonjs/core/Director' {
    import "wonder-frp/dist/es2015/stream/ConcatStream";
    import "wonder-frp/dist/es2015/stream/IgnoreElementsStream";
    import "wonder-frp/dist/es2015/extend/root";
    import { Scene } from "wonder.js/dist/commonjs/core/entityObject/scene/Scene";
    import { Scheduler } from "wonder.js/dist/commonjs/core/Scheduler";
    export class Director {
        static getInstance(): any;
        readonly view: any;
        scene: Scene;
        scheduler: Scheduler;
        initWhenCreate(): void;
        start(): void;
    }
}

declare module 'wonder.js/dist/commonjs/core/DirectorData' {
    import { Map } from "immutable";
    export class DirectorData {
        static state: Map<any, any>;
    }
}

declare module 'wonder.js/dist/commonjs/core/entityObject/gameObject/GameObject' {
    export class GameObject implements IUIDEntity {
        uid: number;
    }
    export var createGameObject: () => any;
    export var addGameObjectComponent: Function;
    export var disposeGameObject: Function;
    export var initGameObject: Function;
    export var disposeGameObjectComponent: Function;
    export var getGameObjectComponent: Function;
    export var getGameObjectTransform: (gameObject: GameObject) => any;
    export var hasGameObjectComponent: Function;
    export var isGameObjectAlive: (gameObject: GameObject) => boolean;
    export var addGameObject: Function;
    export var removeGameObject: Function;
    export var hasGameObject: Function;
    export var getGameObjectChildren: Function;
    export var getGameObjectParent: Function;
    export interface IUIDEntity {
        uid: number;
    }
}

declare module 'wonder.js/dist/commonjs/core/entityObject/gameObject/GameObjectData' {
    import { GameObject } from "wonder.js/dist/commonjs/core/entityObject/gameObject/GameObject";
    import { Component } from "wonder.js/dist/commonjs/component/Component";
    export class GameObjectData {
        static uid: number;
        static disposeCount: number;
        static componentMap: GameObjectComponentMap;
        static parentMap: GameObjectParentMap;
        static childrenMap: GameObjectChildrenMap;
        static aliveUIDArray: Array<number>;
    }
    export type GameObjectComponentMap = {
        [uid: number]: GameObjectComponentData;
    };
    export type GameObjectComponentData = {
        [typeId: number]: Component;
    };
    export type GameObjectParentMap = {
        [uid: number]: GameObject;
    };
    export type GameObjectChildrenMap = {
        [uid: number]: Array<GameObject>;
    };
    export type GameObjectUIDMap = {
        [uid: number]: boolean;
    };
}

declare module 'wonder.js/dist/commonjs/core/entityObject/scene/Scene' {
    import { GameObject } from "wonder.js/dist/commonjs/core/entityObject/gameObject/GameObject";
    export class Scene extends GameObject {
    }
    export var addSceneChild: Function;
    export var removeSceneChild: Function;
}

declare module 'wonder.js/dist/commonjs/core/entityObject/scene/SceneData' {
    import { GameObject } from "wonder.js/dist/commonjs/core/entityObject/gameObject/GameObject";
    export class SceneData {
        static cameraArray: Array<GameObject>;
    }
}

declare module 'wonder.js/dist/commonjs/core/Main' {
    import { MainConfigData } from "wonder.js/dist/commonjs/definition/type/mainType";
    export class Main {
        static isTest: boolean;
        static setConfig(configState: MainConfigData): typeof Main;
        static init(): typeof Main;
    }
}

declare module 'wonder.js/dist/commonjs/core/MainData' {
    export class MainData {
        static isTest: boolean;
    }
}

declare module 'wonder.js/dist/commonjs/core/Scheduler' {
    export class Scheduler {
        static create(): Scheduler;
        update(elapsed: number): void;
        scheduleLoop(task: Function, args?: Array<any>): string;
        scheduleFrame(task: any, frame?: number, args?: any): string;
        scheduleInterval(task: any, time?: number, args?: any): string;
        scheduleTime(task: any, time?: number, args?: any): string;
        pause(scheduleId?: string): void;
        resume(scheduleId?: string): void;
        start(scheduleId?: string): void;
        stop(scheduleId?: string): void;
        has(scheduleId: string): boolean;
        remove(scheduleId: string): void;
        removeAll(): void;
    }
}

declare module 'wonder.js/dist/commonjs/definition/GlobalTempData' {
    import { Matrix4 } from "wonder.js/dist/commonjs/math/Matrix4";
    import { Vector3 } from "wonder.js/dist/commonjs/math/Vector3";
    import { Quaternion } from "wonder.js/dist/commonjs/math/Quaternion";
    export class GlobalTempData {
        static matrix4_1: Matrix4;
        static matrix4_2: Matrix4;
        static matrix4_3: Matrix4;
        static vector3_1: Vector3;
        static vector3_2: Vector3;
        static vector3_3: Vector3;
        static vector3_4: Vector3;
        static quaternion_1: Quaternion;
    }
}

declare module 'wonder.js/dist/commonjs/definition/typescript/decorator/cache' {
    export function cache(judgeFunc: any, returnCacheValueFunc: any, setCacheFunc: any): (target: any, name: any, descriptor: any) => any;
}

declare module 'wonder.js/dist/commonjs/definition/typescript/decorator/contract' {
    export function assert(cond: boolean, message?: string): void;
    export function describe(message: string, func: Function, preCondition?: Function, context?: any): void;
    export function it(message: string, func: Function, context?: any): void;
    export function requireCheck(inFunc: any): (target: any, name: any, descriptor: any) => any;
    export function requireCheckFunc(checkFunc: Function, bodyFunc: Function): Function;
    export function ensure(outFunc: any): (target: any, name: any, descriptor: any) => any;
    export function ensureFunc(checkFunc: Function, bodyFunc: Function): Function;
    export function requireGetterAndSetter(inGetterFunc: any, inSetterFunc: any): (target: any, name: any, descriptor: any) => any;
    export function requireGetter(inFunc: any): (target: any, name: any, descriptor: any) => any;
    export function requireSetter(inFunc: any): (target: any, name: any, descriptor: any) => any;
    export function ensureGetterAndSetter(outGetterFunc: any, outSetterFunc: any): (target: any, name: any, descriptor: any) => any;
    export function ensureGetter(outFunc: any): (target: any, name: any, descriptor: any) => any;
    export function ensureSetter(outFunc: any): (target: any, name: any, descriptor: any) => any;
    export function invariant(func: any): (target: any) => void;
}

declare module 'wonder.js/dist/commonjs/definition/typescript/decorator/control' {
    export function execOnlyOnce(flagName: string): (target: any, name: any, descriptor: any) => any;
}

declare module 'wonder.js/dist/commonjs/definition/typescript/decorator/registerClass' {
    export function registerClass(className: string): (_class: any) => void;
}

declare module 'wonder.js/dist/commonjs/definition/typescript/decorator/singleton' {
    export function singleton(isInitWhenCreate?: boolean): (target: any) => void;
}

declare module 'wonder.js/dist/commonjs/definition/typescript/decorator/virtual' {
    export function virtual(target: any, name: any, descriptor: any): any;
}

declare module 'wonder.js/dist/commonjs/definition/Variable' {
    export var root: any;
}

declare module 'wonder.js/dist/commonjs/device/WorkerDetectData' {
    export class WorkerDetectData {
        static isSupportRenderWorkerAndSharedArrayBuffer: boolean;
        static isSupportSharedArrayBuffer: boolean;
        static renderWorkerFileDir: string;
    }
}

declare module 'wonder.js/dist/commonjs/math/Global' {
    export const DEG_TO_RAD: number;
    export const RAD_TO_DEG: number;
}

declare module 'wonder.js/dist/commonjs/math/Matrix3' {
    import { Vector2 } from "wonder.js/dist/commonjs/math/Vector2";
    export class Matrix3 {
        static create(mat: Float32Array): Matrix3;
        static create(): Matrix3;
        constructor(mat: Float32Array);
        constructor();
        a: number;
        c: number;
        b: number;
        d: number;
        tx: number;
        ty: number;
        values: Float32Array;
        setIdentity(): Matrix3;
        invert(): Matrix3;
        multiplyScalar(s: number): this;
        multiplyVector2(vector: Vector2): Vector2;
        multiplyPoint(vector: Vector2): Vector2;
        multiply(matrix: Matrix3): this;
        transpose(): Matrix3;
        clone(): Matrix3;
        cloneToArray(array: Float32Array, offset?: number): Matrix3;
        set(matrix: Matrix3): this;
        setTS(t: Vector2, s: Vector2): void;
        rotate(angle: number): this;
        setRotation(angle: number): this;
        translate(x: number, y: number): void;
        setPosition(x: number, y: number): void;
        scale(x: number, y: number): this;
        setScale(x: number, y: number): this;
        getTranslation(): Vector2;
        getScale(): Vector2;
        getRotation(): number;
        getSkew(): Vector2;
    }
}

declare module 'wonder.js/dist/commonjs/math/Matrix4' {
    import { Matrix3 } from "wonder.js/dist/commonjs/math/Matrix3";
    import { Vector3 } from "wonder.js/dist/commonjs/math/Vector3";
    import { Vector4 } from "wonder.js/dist/commonjs/math/Vector4";
    import { Quaternion } from "wonder.js/dist/commonjs/math/Quaternion";
    export class Matrix4 {
        static create(mat: Float32Array): Matrix4;
        static create(): Matrix4;
        constructor(mat: Float32Array);
        constructor();
        values: Float32Array;
        set(initialM11: number, initialM12: number, initialM13: number, initialM14: number, initialM21: number, initialM22: number, initialM23: number, initialM24: number, initialM31: number, initialM32: number, initialM33: number, initialM34: number, initialM41: number, initialM42: number, initialM43: number, initialM44: number): this;
        setIdentity(): Matrix4;
        invert(): Matrix4;
        invertTo3x3(): Matrix3;
        transpose(): Matrix4;
        setTranslate(x: any, y: any, z: any): Matrix4;
        translate(x: any, y: any, z: any): Matrix4;
        setRotate(angle: number, x: number, y: number, z: number): Matrix4;
        rotate(angle: any, vector3: Vector3): Matrix4;
        rotate(angle: any, x: any, y: any, z: any): Matrix4;
        setScale(x: any, y: any, z: any): Matrix4;
        scale(x: any, y: any, z: any): Matrix4;
        setLookAt(eye: Vector3, center: Vector3, up: Vector3): Matrix4;
        setLookAt(eyeX: number, eyeY: number, eyeZ: number, centerX: number, centerY: number, centerZ: number, upX: number, upY: number, upZ: number): Matrix4;
        lookAt(eye: Vector3, center: Vector3, up: Vector3): Matrix4;
        lookAt(eyeX: number, eyeY: number, eyeZ: number, centerX: number, centerY: number, centerZ: number, upX: number, upY: number, upZ: number): Matrix4;
        setOrtho(left: number, right: number, bottom: number, top: number, near: number, far: number): Matrix4;
        ortho(left: number, right: number, bottom: number, top: number, near: number, far: number): Matrix4;
        setPerspective(fovy: number, aspect: number, near: number, far: number): Matrix4;
        perspective(fovy: number, aspect: number, near: number, far: number): Matrix4;
        applyMatrix(other: Matrix4, notChangeSelf?: boolean): Matrix4;
        multiply(matrix: Matrix4): Matrix4;
        multiply(matrix1: Matrix4, matrix2: Matrix4): Matrix4;
        multiplyVector4(vector: Vector4): Vector4;
        multiplyVector3(vector: Vector3): Vector3;
        multiplyPoint(vector: Vector3): Vector3;
        clone(): Matrix4;
        cloneToArray(array: Float32Array, offset?: number): Matrix4;
        getX(): Vector3;
        getY(): Vector3;
        getZ(): Vector3;
        getTranslation(): Vector3;
        getScale(): Vector3;
        getRotation(): Quaternion;
        getEulerAngles(): any;
        setTRS(t: Vector3, r: Quaternion, s: Vector3): this;
    }
}

declare module 'wonder.js/dist/commonjs/math/Quaternion' {
    import { Vector3 } from "wonder.js/dist/commonjs/math/Vector3";
    import { Matrix4 } from "wonder.js/dist/commonjs/math/Matrix4";
    export class Quaternion {
        static create(x?: number, y?: number, z?: number, w?: number): Quaternion;
        constructor(x?: number, y?: number, z?: number, w?: number);
        x: number;
        y: number;
        z: number;
        w: number;
        setFromEulerAngles(eulerAngles: Vector3): this;
        multiply(rhs: Quaternion): any;
        multiply(rhs1: Quaternion, rhs2: Quaternion): any;
        setFromMatrix(matrix: Matrix4): this;
        setFromAxisAngle(angle: number, axis: Vector3): this;
        invert(): this;
        conjugate(): this;
        clone(): Quaternion;
        normalize(): this;
        length(): any;
        multiplyVector3(vector: Vector3): Vector3;
        set(x: number, y: number, z: number, w: number): this;
        sub(quat: Quaternion): this;
        getEulerAngles(): any;
        slerp(left: Quaternion, right: Quaternion, amount: number): Quaternion;
    }
}

declare module 'wonder.js/dist/commonjs/math/Vector2' {
    export class Vector2 {
        static create(x: any, y: any): Vector2;
        static create(): Vector2;
        constructor(x: any, y: any);
        constructor();
        x: number;
        y: number;
        values: Float32Array;
        set(x: number, y: number): void;
        add(v: Vector2): this;
        mul(v: Vector2): this;
        isEqual(v: Vector2): boolean;
        clone(): Vector2;
    }
}

declare module 'wonder.js/dist/commonjs/math/Vector3' {
    import { Vector4 } from "wonder.js/dist/commonjs/math/Vector4";
    import { Matrix3 } from "wonder.js/dist/commonjs/math/Matrix3";
    import { Matrix4 } from "wonder.js/dist/commonjs/math/Matrix4";
    export class Vector3 {
        static up: any;
        static forward: any;
        static right: any;
        static create(x: number, y: number, z: number): Vector3;
        static create(): Vector3;
        constructor(x: number, y: number, z: number);
        constructor();
        x: number;
        y: number;
        z: number;
        values: Float32Array;
        normalize(): Vector3;
        isZero(): boolean;
        scale(scalar: number): any;
        scale(x: number, y: number, z: number): any;
        set(v: Vector3): any;
        set(x: number, y: number, z: number): any;
        sub(v: Vector3): Vector3;
        sub2(v1: Vector3, v2: Vector3): this;
        add(v: Vector3): this;
        add2(v1: Vector3, v2: Vector3): this;
        mul(v: Vector3): this;
        mul2(v1: Vector3, v2: Vector3): this;
        reverse(): Vector3;
        clone(): Vector3;
        toVector4(): Vector4;
        length(): any;
        cross(lhs: Vector3, rhs: Vector3): this;
        lerp(lhs: Vector3, rhs: Vector3, alpha: number): this;
        dot(rhs: any): number;
        calAngleCos(v1: Vector3): number;
        min(v: Vector3): this;
        max(v: Vector3): this;
        isEqual(v: Vector3): boolean;
        toArray(): number[];
        applyMatrix3(m: Matrix3): this;
        applyMatrix4(m: Matrix4): this;
        distanceTo(v: Vector3): any;
        distanceToSquared(v: Vector3): number;
    }
}

declare module 'wonder.js/dist/commonjs/math/Vector4' {
    import { Vector3 } from "wonder.js/dist/commonjs/math/Vector3";
    export class Vector4 {
        static create(x: any, y: any, z: any, w: any): any;
        static create(): any;
        constructor(x: any, y: any, z: any, w: any);
        constructor();
        x: number;
        y: number;
        z: number;
        w: number;
        values: Float32Array;
        normalize(): Vector4;
        isEqual(v: Vector4): boolean;
        clone(): Vector4;
        toVector3(): Vector3;
        lengthManhattan(): any;
        multiplyScalar(scalar: number): this;
        dot(v: Vector4): number;
        set(x: number, y: number, z: number, w: number): void;
        protected copyHelper(vector4: Vector4): any;
    }
}

declare module 'wonder.js/dist/commonjs/renderer/buffer/ArrayBufferData' {
    import { EBufferType } from "wonder.js/dist/commonjs/renderer/enum/EBufferType";
    export class ArrayBufferData {
        static buffers: Array<WebGLBuffer>;
        static bufferDataMap: ArrayBufferDataMap;
    }
    export type ArrayBufferDataMap = {
        [geometryIndex: number]: {
            size: number;
            type: EBufferType;
        };
    };
}

declare module 'wonder.js/dist/commonjs/renderer/buffer/IndexBufferData' {
    export class IndexBufferData {
        static buffers: Array<WebGLBuffer>;
    }
}

declare module 'wonder.js/dist/commonjs/renderer/command_buffer/RenderCommandBufferData' {
    export class RenderCommandBufferData {
        static buffer: SharedArrayBuffer;
        static mMatrices: Float32Array;
        static vMatrices: Float32Array;
        static pMatrices: Float32Array;
        static materialIndices: Uint32Array;
        static shaderIndices: Uint32Array;
        static geometryIndices: Uint32Array;
    }
}

declare module 'wonder.js/dist/commonjs/renderer/data/material_config' {
    export const material_config: {
        "BasicMaterial": {
            "shader": {
                "shaderLib": string[];
            };
        };
    };
    export interface IMaterialConfig {
        [materialClassName: string]: IMaterialContentConfig;
    }
    export interface IMaterialContentConfig {
        shader: IShaderConfig;
    }
    export interface IShaderConfig {
        shaderLib: MaterialShaderLibConfig;
    }
    export type MaterialShaderLibConfig = Array<string>;
}

declare module 'wonder.js/dist/commonjs/renderer/data/render_config' {
    import { Color } from "wonder.js/dist/commonjs/structure/Color";
    export const render_config: {
        "clearColor": Color;
    };
    export interface IRenderConfig {
        clearColor: Color;
    }
}

declare module 'wonder.js/dist/commonjs/renderer/data/shaderLib_generator' {
    import { GLSLChunk } from "wonder.js/dist/commonjs/renderer/shader/chunk/ShaderChunk";
    export const shaderLib_generator: {
        "shaderLibs": {
            "CommonShaderLib": {
                "glsl": {
                    "vs": {
                        "source": GLSLChunk;
                        "define": string;
                        "funcDefine": string;
                    };
                    "fs": {
                        "source": GLSLChunk;
                        "define": string;
                        "funcDefine": string;
                    };
                };
                "send": {
                    "uniform": {
                        "name": string;
                        "field": string;
                        "type": string;
                    }[];
                };
            };
            "VerticeCommonShaderLib": {
                "send": {
                    "attribute": {
                        "name": string;
                        "buffer": string;
                        "type": string;
                    }[];
                };
            };
            "BasicMaterialColorShaderLib": {
                "glsl": {
                    "fs": {
                        "source": GLSLChunk;
                    };
                };
                "send": {
                    "uniform": {
                        "name": string;
                        "from": string;
                        "field": string;
                        "type": string;
                    }[];
                };
            };
            "BasicShaderLib": {
                "glsl": {
                    "vs": {
                        "body": string;
                    };
                };
                "send": {
                    "uniform": {
                        "name": string;
                        "from": string;
                        "field": string;
                        "type": string;
                    }[];
                };
            };
            "EndBasicShaderLib": {
                "glsl": {
                    "func": (materialIndex: number, {getAlphaTest, isTestAlpha}: {
                        getAlphaTest: any;
                        isTestAlpha: any;
                    }, MaterialDataFromSystem: any) => {
                        "fs": {
                            "body": string;
                        };
                    };
                };
            };
            "EndShaderLib": {
                "glsl": {
                    "fs": {
                        "source": GLSLChunk;
                    };
                };
            };
        };
    };
    export interface IShaderLibGenerator {
        shaderLibs: IShaderLibContentGenerator;
    }
    export interface IShaderLibContentGenerator {
        [shaderLibName: string]: IShaderLibConfig;
    }
    export interface IShaderLibConfig {
        glsl?: {
            vs?: IGLSLConfig;
            fs?: IGLSLConfig;
            func?: (materialIndex: number) => IGLSLFuncConfig | null;
        };
        send?: IShaderLibSendConfig;
    }
    export interface IGLSLConfig {
        source?: GLSLChunk;
        top?: string;
        varDeclare?: string;
        funcDeclare?: string;
        funcDefine?: string;
        body?: string;
        define?: string;
    }
    export interface IGLSLFuncConfig {
        vs?: IGLSLFuncGLSLConfig;
        fs?: IGLSLFuncGLSLConfig;
    }
    export interface IGLSLFuncGLSLConfig {
        top?: string;
        varDeclare?: string;
        funcDeclare?: string;
        funcDefine?: string;
        body?: string;
        define?: string;
    }
    export interface IShaderLibSendConfig {
        attribute?: Array<ISendAttributeConfig>;
        uniform?: Array<ISendUniformConfig>;
    }
    export interface ISendAttributeConfig {
        name: string;
        buffer: string;
        type: "vec3";
    }
    export interface ISendUniformConfig {
        name: string;
        field: string;
        type: "float" | "vec3" | "mat4";
        from?: "cmd" | "material";
    }
}

declare module 'wonder.js/dist/commonjs/renderer/device/DeviceManager' {
    import { View } from "wonder.js/dist/commonjs/structure/View";
    import { ContextConfigData } from "wonder.js/dist/commonjs/definition/type/mainType";
    export class DeviceManager {
        static getInstance(): any;
        readonly gl: WebGLRenderingContext;
        readonly viewport: any;
        view: View;
        createGL(canvasId: string, contextConfig: ContextConfigData): any;
    }
    export var setDeviceManagerGL: (gl: WebGLRenderingContext) => any;
}

declare module 'wonder.js/dist/commonjs/renderer/device/DeviceManagerData' {
    import { Color } from "wonder.js/dist/commonjs/structure/Color";
    export class DeviceManagerData {
        static gl: WebGLRenderingContext;
        static clearColor: Color;
        static writeRed: boolean;
        static writeGreen: boolean;
        static writeBlue: boolean;
        static writeAlpha: boolean;
    }
}

declare module 'wonder.js/dist/commonjs/renderer/device/EScreenSize' {
    export enum EScreenSize {
        FULL = 0,
    }
}

declare module 'wonder.js/dist/commonjs/renderer/device/GPUDetector' {
    import { Map } from "immutable";
    export class GPUDetector {
        static getInstance(): any;
        maxTextureUnit: number;
        maxTextureSize: number;
        maxCubemapTextureSize: number;
        maxAnisotropy: number;
        maxBoneCount: number;
        extensionCompressedTextureS3TC: any;
        extensionTextureFilterAnisotropic: any;
        extensionInstancedArrays: any;
        extensionUintIndices: boolean;
        extensionDepthTexture: boolean;
        extensionVAO: any;
        extensionStandardDerivatives: boolean;
        precision: number;
        detect(state: Map<any, any>, getGL: Function, DeviceManagerDataFromSystem: any): Map<any, any>;
    }
    export enum EGPUPrecision {
        HIGHP = 0,
        MEDIUMP = 1,
        LOWP = 2,
    }
}

declare module 'wonder.js/dist/commonjs/renderer/draw/DrawRenderCommandBufferData' {
    export class DrawRenderCommandBufferData {
        static mMatrixFloatArrayForSend: Float32Array;
        static vMatrixFloatArrayForSend: Float32Array;
        static pMatrixFloatArrayForSend: Float32Array;
        static mMatrices: Float32Array;
        static vMatrices: Float32Array;
        static pMatrices: Float32Array;
        static materialIndices: Uint32Array;
        static shaderIndices: Uint32Array;
        static geometryIndices: Uint32Array;
    }
}

declare module 'wonder.js/dist/commonjs/renderer/enum/EBufferType' {
    export enum EBufferType {
        BYTE,
        UNSIGNED_BYTE,
        SHORT,
        UNSIGNED_SHORT,
        INT,
        UNSIGNED_INT,
        FLOAT,
    }
}

declare module 'wonder.js/dist/commonjs/renderer/enum/EDisposeDataOperateType' {
    export enum EDisposeDataOperateType {
        DISPOSE_BUFFER = 0,
    }
}

declare module 'wonder.js/dist/commonjs/renderer/enum/EDrawMode' {
    export enum EDrawMode {
        POINTS,
        LINES,
        LINE_LOOP,
        LINE_STRIP,
        TRIANGLES,
        TRIANGLE_STRIP,
        TRANGLE_FAN,
    }
}

declare module 'wonder.js/dist/commonjs/renderer/enum/EGeometryWorkerDataOperateType' {
    export enum EGeometryWorkerDataOperateType {
        ADD = 0,
        RESET = 1,
    }
}

declare module 'wonder.js/dist/commonjs/renderer/enum/EVariableType' {
    export enum EVariableType {
        FLOAT,
        VEC3,
        ARR3,
        MAT4,
    }
}

declare module 'wonder.js/dist/commonjs/renderer/shader/chunk/ShaderChunk' {
    export const empty: GLSLChunk;
    export const NULL: number;
    export const basic_materialColor_fragment: GLSLChunk;
    export const end_basic_fragment: GLSLChunk;
    export const common_define: GLSLChunk;
    export const common_fragment: GLSLChunk;
    export const common_function: GLSLChunk;
    export const common_vertex: GLSLChunk;
    export const highp_fragment: GLSLChunk;
    export const lowp_fragment: GLSLChunk;
    export const mediump_fragment: GLSLChunk;
    export type GLSLChunk = {
        top: string;
        define: string;
        varDeclare: string;
        funcDeclare: string;
        funcDefine: string;
        body: string;
    };
}

declare module 'wonder.js/dist/commonjs/renderer/shader/glslSender/GLSLSenderData' {
    import { SendAttributeConfigMap, SendUniformConfigMap, UniformCacheMap } from "wonder.js/dist/commonjs/renderer/type/dataType";
    export class GLSLSenderData {
        static uniformCacheMap: UniformCacheMap;
        static sendAttributeConfigMap: SendAttributeConfigMap;
        static sendUniformConfigMap: SendUniformConfigMap;
        static vertexAttribHistory: Array<boolean>;
    }
}

declare module 'wonder.js/dist/commonjs/renderer/shader/location/LocationData' {
    import { AttributeLocationMap, UniformLocationMap } from "wonder.js/dist/commonjs/renderer/type/dataType";
    export class LocationData {
        static attributeLocationMap: AttributeLocationMap;
        static uniformLocationMap: UniformLocationMap;
    }
}

declare module 'wonder.js/dist/commonjs/renderer/shader/program/ProgramData' {
    import { ProgramMap } from "wonder.js/dist/commonjs/renderer/type/dataType";
    export class ProgramData {
        static programMap: ProgramMap;
        static lastUsedProgram: WebGLProgram;
        static lastBindedArrayBuffer: WebGLBuffer;
        static lastBindedIndexBuffer: WebGLBuffer;
    }
}

declare module 'wonder.js/dist/commonjs/renderer/shader/Shader' {
    export class Shader {
        index: number;
    }
}

declare module 'wonder.js/dist/commonjs/renderer/shader/ShaderData' {
    import { Shader } from "wonder.js/dist/commonjs/renderer/shader/Shader";
    export class ShaderData {
        static index: number;
        static count: number;
        static shaderMap: ShaderShaderMap;
    }
    export type ShaderShaderMap = {
        [materialClassName: string]: Shader;
    };
}

declare module 'wonder.js/dist/commonjs/renderer/shader/snippet/ShaderSnippet' {
    export const main_begin: string;
    export const main_end: string;
    export const setPos_mvp: string;
}

declare module 'wonder.js/dist/commonjs/renderer/worker/both_file/device/DeviceManagerWorkerData' {
    import { Color } from "wonder.js/dist/commonjs/structure/Color";
    export class DeviceManagerWorkerData {
        static gl: WebGLRenderingContext;
        static clearColor: Color;
        static writeRed: boolean;
        static writeGreen: boolean;
        static writeBlue: boolean;
        static writeAlpha: boolean;
    }
}

declare module 'wonder.js/dist/commonjs/renderer/worker/both_file/ERenderWorkerState' {
    export enum ERenderWorkerState {
        DEFAULT = 0,
        DRAW_WAIT = 1,
        DRAW_COMPLETE = 2,
    }
}

declare module 'wonder.js/dist/commonjs/renderer/worker/both_file/EWorkerOperateType' {
    export enum EWorkerOperateType {
        INIT_GL = 0,
        INIT_MATERIAL_GEOMETRY = 1,
        DRAW = 2,
    }
}

declare module 'wonder.js/dist/commonjs/renderer/worker/logic_file/draw/SendDrawRenderCommandBufferData' {
    import { ERenderWorkerState } from "wonder.js/dist/commonjs/renderer/worker/both_file/ERenderWorkerState";
    export class SendDrawRenderCommandBufferData {
        static state: ERenderWorkerState;
    }
}

declare module 'wonder.js/dist/commonjs/renderer/worker/logic_file/worker_instance/WorkerInstanceData' {
    export class WorkerInstanceData {
        static renderWorker: Worker;
    }
}

declare module 'wonder.js/dist/commonjs/renderer/worker/render_file/buffer/ArrayBufferWorkerData' {
    import { ArrayBufferDataMap } from "wonder.js/dist/commonjs/renderer/type/dataType";
    export class ArrayBufferWorkerData {
        static buffers: Array<WebGLBuffer>;
        static bufferDataMap: ArrayBufferDataMap;
    }
}

declare module 'wonder.js/dist/commonjs/renderer/worker/render_file/buffer/IndexBufferWorkerData' {
    export class IndexBufferWorkerData {
        static buffers: Array<WebGLBuffer>;
    }
}

declare module 'wonder.js/dist/commonjs/renderer/worker/render_file/draw/DrawRenderCommandBufferWorkerData' {
    export class DrawRenderCommandBufferWorkerData {
        static mMatrixFloatArrayForSend: Float32Array;
        static vMatrixFloatArrayForSend: Float32Array;
        static pMatrixFloatArrayForSend: Float32Array;
        static mMatrices: Float32Array;
        static vMatrices: Float32Array;
        static pMatrices: Float32Array;
        static materialIndices: Uint32Array;
        static shaderIndices: Uint32Array;
        static geometryIndices: Uint32Array;
    }
}

declare module 'wonder.js/dist/commonjs/renderer/worker/render_file/geometry/GeometryWorkerData' {
    import { GeometryIndicesCacheMap, GeometryVerticesCacheMap } from "wonder.js/dist/commonjs/definition/type/geometryType";
    export class GeometryWorkerData {
        static verticesCacheMap: GeometryVerticesCacheMap;
        static indicesCacheMap: GeometryIndicesCacheMap;
        static vertices: Float32Array;
        static indices: Uint16Array | Uint32Array;
    }
}

declare module 'wonder.js/dist/commonjs/renderer/worker/render_file/initGL' {
    import { MessageInitGLData } from "wonder.js/dist/commonjs/renderer/type/messageDataType";
    export var initGL: (data: MessageInitGLData) => any;
}

declare module 'wonder.js/dist/commonjs/renderer/worker/render_file/material/MaterialWorkerData' {
    import { MaterialClassNameTable, ShaderIndexTable } from "wonder.js/dist/commonjs/definition/type/materialType";
    export class MaterialWorkerData {
        static shaderIndices: Uint32Array;
        static materialClassNameTable: MaterialClassNameTable;
        static shaderIndexTable: ShaderIndexTable;
        static colors: Float32Array;
        static opacities: Float32Array;
        static alphaTests: Float32Array;
    }
    export type MaterialInitWorkerData = {
        buffer: SharedArrayBuffer;
        materialCount: number;
        materialClassNameTable: MaterialClassNameTable;
        shaderIndexTable: ShaderIndexTable;
    };
    export type MaterialUpdateWorkerData = {
        buffer: SharedArrayBuffer;
        workerInitList: Array<number>;
    };
}

declare module 'wonder.js/dist/commonjs/renderer/worker/render_file/shader/glslSender/GLSLSenderWorkerData' {
    import { SendAttributeConfigMap, SendUniformConfigMap, UniformCacheMap } from "wonder.js/dist/commonjs/renderer/type/dataType";
    export class GLSLSenderWorkerData {
        static uniformCacheMap: UniformCacheMap;
        static sendAttributeConfigMap: SendAttributeConfigMap;
        static sendUniformConfigMap: SendUniformConfigMap;
        static vertexAttribHistory: Array<boolean>;
    }
}

declare module 'wonder.js/dist/commonjs/renderer/worker/render_file/shader/location/LocationWorkerData' {
    import { AttributeLocationMap, UniformLocationMap } from "wonder.js/dist/commonjs/renderer/type/dataType";
    export class LocationWorkerData {
        static attributeLocationMap: AttributeLocationMap;
        static uniformLocationMap: UniformLocationMap;
    }
}

declare module 'wonder.js/dist/commonjs/renderer/worker/render_file/shader/program/ProgramWorkerData' {
    import { ProgramMap } from "wonder.js/dist/commonjs/renderer/type/dataType";
    export class ProgramWorkerData {
        static programMap: ProgramMap;
        static lastUsedProgram: WebGLProgram;
        static lastBindedArrayBuffer: WebGLBuffer;
        static lastBindedIndexBuffer: WebGLBuffer;
    }
}

declare module 'wonder.js/dist/commonjs/renderer/worker/render_file/state/StateData' {
    import { Map } from "immutable";
    export class StateData {
        static state: Map<any, any>;
    }
}

declare module 'wonder.js/dist/commonjs/renderer/worker/render_file/state/StateSytem' {
    import { Map } from "immutable";
    import { IO } from "wonder-fantasy-land/dist/es2015/types/IO";
    export var getState: (StateData: any) => any;
    export var setState: (state: Map<any, any>, StateData: any) => IO;
}

declare module 'wonder.js/dist/commonjs/structure/Color' {
    import { Vector3 } from "wonder.js/dist/commonjs/math/Vector3";
    export class Color {
        static create(colorVal?: string): Color;
        dirty: boolean;
        r: number;
        g: number;
        b: number;
        a: number;
        initWhenCreate(colorVal?: string): void;
        toVector3(): Vector3;
        toVector4(): any;
        toString(): string;
        clone(): Color;
        isEqual(color: Color): boolean;
        setColorByNum(colorVal: string): this;
    }
}

declare module 'wonder.js/dist/commonjs/structure/RectRegion' {
    import { Vector4 } from "wonder.js/dist/commonjs/math/Vector4";
    export class RectRegion extends Vector4 {
        width: number;
        height: number;
        clone(): RectRegion;
        isNotEmpty(): boolean;
    }
}

declare module 'wonder.js/dist/commonjs/structure/View' {
    export class View {
        static create(): View;
        readonly dom: HTMLCanvasElement;
        readonly width: any;
        readonly height: any;
        readonly styleWidth: any;
        readonly styleHeight: any;
        readonly x: any;
        readonly y: any;
    }
}

declare module 'wonder.js/dist/commonjs/test/forRenderWorkerUnitTest' {
    export var initDeviceManagerWorkerData: (DeviceManagerDataFromSystem: any) => void;
    export var initProgramWorkerData: (ProgramDataFromSystem: any) => void;
}

declare module 'wonder.js/dist/commonjs/test/forUnitTest' {
    import { DomQuery as DomQueryFromCommonlib } from "wonder-commonlib/dist/es2015/utils/DomQuery";
    import { Operator } from "wonder-frp/dist/es2015/global/Operator";
    import { Map } from "immutable";
    export var initThreeDTransformData: (GlobalTempData: any, ThreeDTransformData: any) => void;
    export var DomQuery: typeof DomQueryFromCommonlib;
    export var fromArray: typeof Operator.fromArray;
    export var initTagData: (TagData: any) => void;
    export var initGeometryData: (DataBufferConfig: any, GeometryData: any) => void;
    export var initMaterialData: (MaterialData: any) => void;
    export var initShaderData: (ShaderData: any) => void;
    export var initProgramData: (ProgramDataFromSystem: any) => void;
    export var initLocationData: (LocationDataFromSystem: any) => void;
    export var initGLSLSenderData: (GLSLSenderDataFromSystem: any) => void;
    export var initMeshRendererData: (MeshRendererData: any) => void;
    export var initArrayBufferData: (ArrayBufferDataFromSystemFromSystem: any) => void;
    export var initIndexBufferData: (IndexBufferDataFromSystem: any) => void;
    export var initDeviceManagerData: (DeviceManagerDataFromSystem: any) => void;
    export var initCameraControllerData: (CameraControllerData: any, PerspectiveCameraData: any, CameraData: any) => void;
    export var initGameObjectData: (GameObjectData: any) => void;
    export var initSceneData: (SceneData: any) => void;
    export var initRenderCommandBufferData: (DataBufferConfig: any, RenderCommandBufferData: any) => void;
    export var initDrawRenderCommandBufferData: (DrawRenderCommandBufferDataFromSystem: any) => void;
    export var createState: () => Map<{}, {}>;
    export var useProgram: any;
    export var sendAttributeData: any;
    export var sendUniformData: any;
    export var disableVertexAttribArray: Function;
    export var setGeometryIndices: Function;
    export var setGeometryVertices: Function;
    export var hasGeometryIndices: any;
    export var getShaderIndex: (materialIndex: number, MaterialData: any) => any;
    export var updateSystem: (elapsed: number, state: Map<any, any>) => any;
}

declare module 'wonder.js/dist/commonjs/utils/BufferUtilsForUnitTest' {
    export class BufferUtilsForUnitTest {
        static isDrawRenderCommandBufferDataTypeArrayNotExist(DrawRenderCommandBufferDataFromSystem: any): boolean;
    }
}

declare module 'wonder.js/dist/commonjs/utils/Log' {
    import { Log as Log$ } from "wonder-commonlib/dist/es2015/Log";
    export class Log extends Log$ {
    }
}

declare module 'wonder.js/dist/commonjs/utils/time/CommonTimeController' {
    import { TimeController } from "wonder.js/dist/commonjs/utils/time/TimeController";
    export class CommonTimeController extends TimeController {
        static create(): CommonTimeController;
        protected getNow(): any;
    }
}

declare module 'wonder.js/dist/commonjs/utils/time/DirectorTimeController' {
    import { TimeController } from "wonder.js/dist/commonjs/utils/time/TimeController";
    export class DirectorTimeController extends TimeController {
        static create(): DirectorTimeController;
        gameTime: number;
        fps: number;
        isTimeChange: boolean;
        deltaTime: number;
        tick(time: number): void;
        start(): void;
        resume(): void;
        protected getNow(): any;
    }
}

declare module 'wonder.js/dist/commonjs/utils/time/TimeController' {
    export abstract class TimeController {
        elapsed: number;
        pauseElapsed: number;
        pauseTime: number;
        startTime: number;
        start(): void;
        stop(): void;
        pause(): void;
        resume(): void;
        computeElapseTime(time: number): number;
        protected abstract getNow(): any;
    }
}

declare module 'wonder.js/dist/commonjs/component/ComponentSystem' {
    import { ComponentGameObjectMap } from "wonder.js/dist/commonjs/component/ComponentData";
    import { Component } from "wonder.js/dist/commonjs/component/Component";
    import { GameObject } from "wonder.js/dist/commonjs/core/entityObject/gameObject/GameObject";
    import { Map as MapImmutable } from "immutable";
    export var addAddComponentHandle: (_class: any, handle: Function) => void;
    export var addDisposeHandle: (_class: any, handle: Function) => void;
    export var addInitHandle: (_class: any, handle: (index: number, state: MapImmutable<any, any>) => void) => void;
    export var execHandle: (component: Component, handleMapName: string, args?: any[]) => void;
    export var execInitHandle: (typeID: string, index: number, state: MapImmutable<any, any>) => void;
    export var checkComponentShouldAlive: (component: Component, data: any, isAlive: (component: Component, data: any) => boolean) => void;
    export var addComponentToGameObjectMap: Function;
    export var getComponentGameObject: (gameObjectMap: ComponentGameObjectMap | GameObject[], index: number) => GameObject;
    export var generateComponentIndex: (ComponentData: any) => number;
    export var deleteComponent: Function;
    export var deleteComponentBySwapArray: Function;
    export var markComponentIndexRemoved: (component: Component) => void;
    export var isComponentIndexNotRemoved: (component: Component) => boolean;
    export type ComponentMap = {
        [index: number]: Component;
    };
}

declare module 'wonder.js/dist/commonjs/definition/type/geometryType' {
    import { EBufferType } from "wonder.js/dist/commonjs/renderer/enum/EBufferType";
    import { EGeometryWorkerDataOperateType } from "wonder.js/dist/commonjs/renderer/enum/EGeometryWorkerDataOperateType";
    export type GeometryWorkerInfoList = Array<{
        index: number;
        startIndex: number;
        endIndex: number;
    }>;
    export type GeometryVerticesCacheMap = {
        [index: number]: Float32Array;
    };
    export type GeometryIndicesCacheMap = {
        [index: number]: Uint16Array | Uint32Array;
    };
    export type GeometryInitWorkerData = {
        buffer: SharedArrayBuffer;
        indexType: EBufferType;
        indexTypeSize: number;
        verticesInfoList: GeometryInfoList;
        indicesInfoList: GeometryInfoList;
    };
    export type GeometryUpdateWorkerData = {
        buffer: SharedArrayBuffer;
        type: EGeometryWorkerDataOperateType;
        verticesInfoList: GeometryWorkerInfoList;
        indicesInfoList: GeometryWorkerInfoList;
    };
    export type GeometryResetWorkerData = {
        buffer: SharedArrayBuffer;
        type: EGeometryWorkerDataOperateType;
        verticesInfoList: GeometryInfoList;
        indicesInfoList: GeometryInfoList;
    };
    export type GeometryInfoList = Array<GeometryInfo>;
    export type GeometryInfo = {
        startIndex: number;
        endIndex: number;
    };
}

declare module 'wonder.js/dist/commonjs/definition/type/materialType' {
    export type ShaderIndexTable = {
        [className: string]: number;
    };
    export type MaterialClassNameTable = {
        [shaderIndex: number]: string;
    };
}

declare module 'wonder.js/dist/commonjs/definition/type/mainType' {
    import { ContextConfigOptionsData } from "wonder.js/dist/commonjs/renderer/type/dataType";
    export type ContextConfigData = {
        options: ContextConfigOptionsData;
    };
    export type MainConfigData = {
        canvasId?: string;
        isTest?: boolean;
        screenSize?: any;
        useDevicePixelRatio?: boolean;
        contextConfig?: ContextConfigData;
        workerConfig?: WorkerConfigData;
    };
    export type WorkerConfigData = {
        renderWorkerFileDir: string;
    };
}

declare module 'wonder.js/dist/commonjs/renderer/type/dataType' {
    import { ISendAttributeConfig, ISendUniformConfig } from "wonder.js/dist/commonjs/renderer/data/shaderLib_generator";
    import { EBufferType } from "wonder.js/dist/commonjs/renderer/enum/EBufferType";
    export type ProgramMap = {
        [index: number]: WebGLProgram;
    };
    export type AttributeLocationMap = {
        [index: number]: AttributeShaderLocationMap;
    };
    export type UniformLocationMap = {
        [index: number]: UniformShaderLocationMap;
    };
    export type AttributeShaderLocationMap = {
        [name: string]: number;
    };
    export type UniformShaderLocationMap = {
        [name: string]: WebGLUniformLocation;
    };
    export type SendAttributeConfigMap = {
        [index: number]: Array<ISendAttributeConfig>;
    };
    export type SendUniformConfigMap = {
        [index: number]: Array<ISendUniformConfig>;
    };
    export type UniformCacheMap = {
        [index: number]: {
            [name: string]: any;
        };
    };
    export type ArrayBufferDataMap = {
        [geometryIndex: number]: {
            size: number;
            type: EBufferType;
        };
    };
    export type RenderCommandBufferWorkerData = {
        buffer: SharedArrayBuffer;
        count: number;
    };
    export type RenderCommandUniformData = {
        mMatrices: Float32Array;
        vMatrices: Float32Array;
        pMatrices: Float32Array;
        materialIndex: number;
    };
    export type ContextConfigOptionsData = {
        alpha: boolean;
        depth: boolean;
        stencil: boolean;
        antialias: boolean;
        premultipliedAlpha: boolean;
        preserveDrawingBuffer: boolean;
    };
    export type BuildGLSLSourceFuncFuncDataMap = {
        getAlphaTest: Function;
        isTestAlpha: Function;
    };
}

declare module 'wonder.js/dist/commonjs/renderer/type/messageDataType' {
    import { EWorkerOperateType } from "wonder.js/dist/commonjs/renderer/worker/both_file/EWorkerOperateType";
    import { ContextConfigOptionsData } from "wonder.js/dist/commonjs/renderer/type/dataType";
    export type MessageInitGLData = {
        operateType: EWorkerOperateType;
        canvas: HTMLCanvasElement;
        options: ContextConfigOptionsData;
        viewportData: ViewportData;
    };
    export type ScreenData = {
        x: number;
        y: number;
        width: number;
        height: number;
    };
    export type ViewportData = {
        x: number;
        y: number;
        width: number;
        height: number;
    };
}

