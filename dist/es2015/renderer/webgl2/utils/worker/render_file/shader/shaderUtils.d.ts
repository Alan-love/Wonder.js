import { IWebGL2ShaderLibContentGenerator } from "../../../../../worker/webgl2/both_file/data/shaderLib_generator";
import { InitShaderDataMap } from "../../../../../type/utilsType";
import { Map } from "immutable";
import { IMaterialConfig, IShaderLibItem } from "../../../../../data/material_config_interface";
import { IWebGL2InitShaderFuncDataMap } from "../interface/IUtils";
import { WebGLVertexArrayObject } from "../../../../../extend/interface";
import { VaoMap, VboArrayMap } from "../../../../../type/dataType";
export declare var getNoMaterialShaderIndex: (shaderName: string, ShaderDataFromSystem: any) => any;
export declare var initNoMaterialShader: (state: Map<any, any>, shaderName: string, materialShaderLibConfig: (string | IShaderLibItem)[], material_config: IMaterialConfig, shaderLib_generator: IWebGL2ShaderLibContentGenerator, initShaderFuncDataMap: IWebGL2InitShaderFuncDataMap, initShaderDataMap: InitShaderDataMap) => number;
export declare var initMaterialShader: (state: Map<any, any>, materialIndex: number, shaderName: string, material_config: IMaterialConfig, shaderLib_generator: IWebGL2ShaderLibContentGenerator, initShaderFuncDataMap: IWebGL2InitShaderFuncDataMap, initShaderDataMap: InitShaderDataMap) => number;
export declare var bindVao: (gl: WebGLRenderingContext, vao: WebGLVertexArrayObject, ProgramDataFromSystem: any) => void;
export declare var createAndInitVao: (gl: any, geometryIndex: number, vaoMap: VaoMap, vboArrayMap: VboArrayMap, {positionLocation, normalLocation, texCoordLocation, getVertices, getNormals, getTexCoords, getIndices}: {
    positionLocation: any;
    normalLocation: any;
    texCoordLocation: any;
    getVertices: any;
    getNormals: any;
    getTexCoords: any;
    getIndices: any;
}, GeometryDataFromSystem: any) => any;
export declare var initData: (ShaderDataFromSystem: any) => void;
