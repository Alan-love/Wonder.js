import { IWebGL1ShaderLibContentGenerator } from "../../../../../worker/webgl1/both_file/data/shaderLib_generator";
import { InitShaderDataMap } from "../../../../../type/utilsType";
import { Map } from "immutable";
import { IMaterialConfig, IShaderLibItem } from "../../../../../data/material_config_interface";
import { WebGL1InitShaderFuncDataMap } from "../../../../type/utilsType";
import { WebGLVertexArrayObject } from "../../../../../extend/interface";
import { VaoMap, VboArrayMap } from "../../../../../type/dataType";
export declare const initNoMaterialShader: (state: Map<any, any>, shaderName: string, materialShaderLibConfig: (string | IShaderLibItem)[], material_config: IMaterialConfig, shaderLib_generator: IWebGL1ShaderLibContentGenerator, initShaderFuncDataMap: WebGL1InitShaderFuncDataMap, initShaderDataMap: InitShaderDataMap) => void;
export declare const initMaterialShader: (state: Map<any, any>, materialIndex: number, shaderName: string, material_config: IMaterialConfig, shaderLib_generator: IWebGL1ShaderLibContentGenerator, initShaderFuncDataMap: WebGL1InitShaderFuncDataMap, initShaderDataMap: InitShaderDataMap) => number;
export declare const bindIndexBuffer: (gl: WebGLRenderingContext, geometryIndex: number, getIndicesFunc: Function, ProgramDataFromSystem: any, GeometryDataFromSystem: any, IndexBufferDataFromSystem: any) => void;
export declare const bindVao: (extension: any, vao: WebGLVertexArrayObject, ProgramDataFromSystem: any) => void;
export declare const createAndInitVao: (gl: any, extension: any, geometryIndex: number, vaoMap: VaoMap, vboArrayMap: VboArrayMap, {positionLocation, normalLocation, texCoordLocation, getVertices, getNormals, getTexCoords, getIndices}: {
    positionLocation: any;
    normalLocation: any;
    texCoordLocation: any;
    getVertices: any;
    getNormals: any;
    getTexCoords: any;
    getIndices: any;
}, GeometryDataFromSystem: any) => any;
export declare const initData: (ShaderDataFromSystem: any) => void;
