import { ComponentGameObjectMap } from "./ComponentData";
import { Component } from "./Component";
import { GameObject } from "../core/entityObject/gameObject/GameObject";
import { Map as MapImmutable } from "immutable";
import { IUIdEntity } from "../core/entityObject/gameObject/IUIdEntity";
export declare const addAddComponentHandle: (_class: any, handle: Function) => void;
export declare const addDisposeHandle: (_class: any, handle: Function) => void;
export declare const addInitHandle: (_class: any, handle: (index: number, state: MapImmutable<any, any>) => void) => void;
export declare const execHandle: (component: Component, handleMapName: string, args?: any[]) => void;
export declare const execInitHandle: (typeId: string, index: number, state: MapImmutable<any, any>) => void;
export declare const checkComponentShouldAlive: (component: Component, data: any, isAlive: (component: Component, data: any) => boolean) => void;
export declare const addComponentToGameObjectMap: Function;
export declare const getComponentGameObject: (gameObjectMap: ComponentGameObjectMap | GameObject[], index: number) => IUIdEntity;
export declare const generateComponentIndex: (ComponentData: any) => number;
export declare const deleteComponent: Function;
export declare const deleteComponentBySwapArray: Function;
export declare const markComponentIndexRemoved: (component: Component) => void;
export declare const isComponentIndexNotRemoved: (component: Component) => boolean;
export declare type ComponentMap = {
    [index: number]: Component;
};
