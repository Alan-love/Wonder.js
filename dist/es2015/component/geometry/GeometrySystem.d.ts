import { Geometry } from "./Geometry";
import { Map } from "immutable";
import { GameObject } from "../../core/entityObject/gameObject/GameObject";
import { EDrawMode } from "../../renderer/enum/EDrawMode";
export declare var addAddComponentHandle: (_class: any) => void;
export declare var addDisposeHandle: (_class: any) => void;
export declare var addInitHandle: (_class: any) => void;
export declare var create: Function;
export declare var init: (GeometryData: any, state: Map<any, any>) => Map<any, any>;
export declare var initGeometry: (index: number, state: Map<any, any>) => void;
export declare var getDrawMode: (index: number, GeometryData: any) => EDrawMode;
export declare var getVerticesCount: (index: number, GeometryData: any) => any;
export declare var getIndicesCount: (index: number, GeometryData: any) => any;
export declare var getIndexType: (GeometryData: any) => any;
export declare var getIndexTypeSize: (GeometryData: any) => any;
export declare var getVertices: (index: number, GeometryData: any) => any;
export declare var setVertices: Function;
export declare var getIndices: (index: number, GeometryData: any) => any;
export declare var setIndices: Function;
export declare var hasIndices: (index: number, GeometryData: any) => boolean;
export declare var addComponent: (component: Geometry, gameObject: GameObject) => void;
export declare var disposeComponent: Function;
export declare var getGameObject: (index: number, Data: any) => GameObject;
export declare var getConfigData: (index: number, GeometryData: any) => any;
export declare var initData: (DataBufferConfig: any, GeometryData: any) => void;
export declare var isIndicesBufferNeed32BitsByData: (GeometryData: any) => boolean;
export declare var convertVerticesArrayToTypeArray: (vertices: number[]) => Float32Array;
export declare var convertIndicesArrayToTypeArray: (indices: number[], GeometryData: any) => Uint16Array | Uint32Array;
