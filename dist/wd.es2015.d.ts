// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../../wonder-commonlib/dist/es2015/Hash
//   ../../immutable
//   ../../wonder-commonlib/dist/es2015/typescript/decorator/contract
//   ../../wonder-commonlib/dist/es2015/utils/DomQuery
//   ../../wonder-frp/dist/es2015/global/Operator
//   ../../wonder-commonlib/dist/es2015/Log

declare module 'wonder.js/dist/es2015' {
    export { loadAsset, getAsset, setTextureAsset } from "wonder.js/dist/es2015/asset/AssetDatabase";
    export { AssetDatabaseData } from "wonder.js/dist/es2015/asset/AssetDatabaseData";
    export { ImageTextureAsset } from "wonder.js/dist/es2015/asset/texture/ImageTextureAsset";
    export { TextureAsset } from "wonder.js/dist/es2015/asset/texture/TextureAsset";
    export { getCameraPMatrix, getCameraNear, setCameraNear, getCameraFar, setCameraFar } from "wonder.js/dist/es2015/component/camera/Camera";
    export { CameraController, createCameraController, getCameraControllerGameObject } from "wonder.js/dist/es2015/component/camera/CameraController";
    export { CameraControllerData } from "wonder.js/dist/es2015/component/camera/CameraControllerData";
    export { CameraData } from "wonder.js/dist/es2015/component/camera/CameraData";
    export { getPerspectiveCameraFovy, setPerspectiveCameraFovy, getPerspectiveCameraAspect, setPerspectiveCameraAspect } from "wonder.js/dist/es2015/component/camera/PerspectiveCamera";
    export { PerspectiveCameraData } from "wonder.js/dist/es2015/component/camera/PerspectiveCameraData";
    export { Component } from "wonder.js/dist/es2015/component/Component";
    export { getComponentIdFromClass, getComponentIdFromComponent } from "wonder.js/dist/es2015/component/ComponentComponentIdManager";
    export { ComponentData } from "wonder.js/dist/es2015/component/ComponentData";
    export { getTypeIdFromClass, getTypeIdFromComponent } from "wonder.js/dist/es2015/component/ComponentTypeIdManager";
    export { BoxGeometry, createBoxGeometry, setBoxGeometryConfigData } from "wonder.js/dist/es2015/component/geometry/BoxGeometry";
    export { CustomGeometry, createCustomGeometry, setCustomGeometryVertices, setCustomGeometryNormals, setCustomGeometryTexCoords, setCustomGeometryIndices } from "wonder.js/dist/es2015/component/geometry/CustomGeometry";
    export { Geometry, getDrawMode, getVertices, getNormals, getTexCoords, getIndices, getGeometryConfigData, initGeometry, getGeometryGameObject } from "wonder.js/dist/es2015/component/geometry/Geometry";
    export { GeometryData } from "wonder.js/dist/es2015/component/geometry/GeometryData";
    export { AmbientLight, createAmbientLight, getAmbientLightGameObject, getAmbientLightColor, setAmbientLightColor } from "wonder.js/dist/es2015/component/light/AmbientLight";
    export { AmbientLightData } from "wonder.js/dist/es2015/component/light/AmbientLightData";
    export { DirectionLight, createDirectionLight, getDirectionLightGameObject, getDirectionLightPosition, getDirectionLightColor, setDirectionLightColor, getDirectionLightIntensity, setDirectionLightIntensity } from "wonder.js/dist/es2015/component/light/DirectionLight";
    export { DirectionLightData } from "wonder.js/dist/es2015/component/light/DirectionLightData";
    export { Light, checkLightShouldAlive } from "wonder.js/dist/es2015/component/light/Light";
    export { PointLight, createPointLight, getPointLightGameObject, getPointLightPosition, getPointLightColor, setPointLightColor, getPointLightIntensity, setPointLightIntensity, getPointLightConstant, setPointLightConstant, getPointLightLinear, setPointLightLinear, getPointLightQuadratic, setPointLightQuadratic, getPointLightRange, setPointLightRange, setPointLightRangeLevel } from "wonder.js/dist/es2015/component/light/PointLight";
    export { PointLightData } from "wonder.js/dist/es2015/component/light/PointLightData";
    export { SpecifyLightData } from "wonder.js/dist/es2015/component/light/SpecifyLightData";
    export { BasicMaterial, createBasicMaterial, initBasicMaterial, getBasicMaterialColor, setBasicMaterialColor, getBasicMaterialOpacity, setBasicMaterialOpacity, getBasicMaterialAlphaTest, setBasicMaterialAlphaTest, setBasicMaterialMap } from "wonder.js/dist/es2015/component/material/BasicMaterial";
    export { BasicMaterialData } from "wonder.js/dist/es2015/component/material/BasicMaterialData";
    export { ELightModel } from "wonder.js/dist/es2015/component/material/ELightModel";
    export { EShading } from "wonder.js/dist/es2015/component/material/EShading";
    export { LightMaterial, createLightMaterial, initLightMaterial, getLightMaterialColor, setLightMaterialColor, getLightMaterialOpacity, setLightMaterialOpacity, getLightMaterialAlphaTest, setLightMaterialAlphaTest, getLightMaterialSpecularColor, setLightMaterialSpecularColor, getLightMaterialEmissionColor, setLightMaterialEmissionColor, getLightMaterialShininess, setLightMaterialShininess, getLightMaterialShading, setLightMaterialShading, getLightMaterialLightModel, setLightMaterialLightModel, setLightMaterialDiffuseMap, setLightMaterialSpecularMap } from "wonder.js/dist/es2015/component/material/LightMaterial";
    export { LightMaterialData } from "wonder.js/dist/es2015/component/material/LightMaterialData";
    export { Material, getMaterialGameObject, checkShouldAlive } from "wonder.js/dist/es2015/component/material/Material";
    export { MaterialData } from "wonder.js/dist/es2015/component/material/MaterialData";
    export { SpecifyMaterialData } from "wonder.js/dist/es2015/component/material/SpecifyMaterialData";
    export { MeshRenderer, createMeshRenderer, getMeshRendererGameObject, getMeshRendererRenderList } from "wonder.js/dist/es2015/component/renderer/MeshRenderer";
    export { MeshRendererData } from "wonder.js/dist/es2015/component/renderer/MeshRendererData";
    export { Tag, createTag, addTag, removeTag, findGameObjectsByTag, getTagGameObject } from "wonder.js/dist/es2015/component/tag/Tag";
    export { TagData } from "wonder.js/dist/es2015/component/tag/TagData";
    export { LinkList, LinkNode } from "wonder.js/dist/es2015/component/transform/LinkList";
    export { ThreeDTransform, createThreeDTransform, getThreeDTransformPosition, setThreeDTransformPosition, getThreeDTransformLocalToWorldMatrix, getThreeDTransformLocalPosition, setThreeDTransformLocalPosition, setThreeDTransformBatchTransformDatas, getThreeDTransformParent, setThreeDTransformParent, getThreeDTransformGameObject } from "wonder.js/dist/es2015/component/transform/ThreeDTransform";
    export { ThreeDTransformData, ThreeDTransformRelationData } from "wonder.js/dist/es2015/component/transform/ThreeDTransformData";
    export { getUId, isIndexUsed, getStartIndexInArrayBuffer } from "wonder.js/dist/es2015/component/transform/utils";
    export { CompileConfig } from "wonder.js/dist/es2015/config/CompileConfig";
    export { DataBufferConfig } from "wonder.js/dist/es2015/config/DataBufferConfig";
    export { DebugConfig } from "wonder.js/dist/es2015/config/DebugConfig";
    export { MemoryConfig } from "wonder.js/dist/es2015/config/MemoryConfig";
    export { RenderWorkerConfig } from "wonder.js/dist/es2015/config/RenderWorkerConfig";
    export { Director, isDirectorInit } from "wonder.js/dist/es2015/core/Director";
    export { DirectorData } from "wonder.js/dist/es2015/core/DirectorData";
    export { GameObject, createGameObject, addGameObjectComponent, disposeGameObject, initGameObject, disposeGameObjectComponent, getGameObjectComponent, getGameObjectTransform, getGameObjectMaterial, getGameObjectAllComponents, hasGameObjectComponent, isGameObjectAlive, addGameObject, addRemovedGameObject, removeGameObject, hasGameObject, getGameObjectChildren, getGameObjectParent, setGameObjectParent } from "wonder.js/dist/es2015/core/entityObject/gameObject/GameObject";
    export { GameObjectData } from "wonder.js/dist/es2015/core/entityObject/gameObject/GameObjectData";
    export { Scene, addSceneChild, removeSceneChild } from "wonder.js/dist/es2015/core/entityObject/scene/Scene";
    export { SceneData } from "wonder.js/dist/es2015/core/entityObject/scene/SceneData";
    export { Main, initAllData } from "wonder.js/dist/es2015/core/Main";
    export { Scheduler } from "wonder.js/dist/es2015/core/Scheduler";
    export { GlobalTempData } from "wonder.js/dist/es2015/definition/GlobalTempData";
    export { cache } from "wonder.js/dist/es2015/definition/typescript/decorator/cache";
    export { describe, it, requireCheck, requireCheckFunc, ensure, ensureFunc, ensureGetter } from "wonder.js/dist/es2015/definition/typescript/decorator/contract";
    export { execOnlyOnce } from "wonder.js/dist/es2015/definition/typescript/decorator/control";
    export { registerClass } from "wonder.js/dist/es2015/definition/typescript/decorator/registerClass";
    export { singleton } from "wonder.js/dist/es2015/definition/typescript/decorator/singleton";
    export { virtual } from "wonder.js/dist/es2015/definition/typescript/decorator/virtual";
    export { root } from "wonder.js/dist/es2015/definition/Variable";
    export { WorkerDetectData } from "wonder.js/dist/es2015/device/WorkerDetectData";
    export { DEG_TO_RAD, RAD_TO_DEG } from "wonder.js/dist/es2015/math/Global";
    export { Matrix3 } from "wonder.js/dist/es2015/math/Matrix3";
    export { Matrix4 } from "wonder.js/dist/es2015/math/Matrix4";
    export { Quaternion } from "wonder.js/dist/es2015/math/Quaternion";
    export { Vector2 } from "wonder.js/dist/es2015/math/Vector2";
    export { Vector3 } from "wonder.js/dist/es2015/math/Vector3";
    export { Vector4 } from "wonder.js/dist/es2015/math/Vector4";
    export { ArrayBufferData } from "wonder.js/dist/es2015/renderer/buffer/ArrayBufferData";
    export { IndexBufferData } from "wonder.js/dist/es2015/renderer/buffer/IndexBufferData";
    export { BasicRenderCommandBufferData } from "wonder.js/dist/es2015/renderer/command_buffer/BasicRenderCommandBufferData";
    export { LightRenderCommandBufferData } from "wonder.js/dist/es2015/renderer/command_buffer/LightRenderCommandBufferData";
    export { InitConfigData } from "wonder.js/dist/es2015/renderer/config/InitConfigData";
    export { getDeviceManagerGL, setDeviceManagerGL, getDeviceManagerViewport, getDeviceManagerClearColor, setDeviceManagerViewport, setDeviceManagerClearColor } from "wonder.js/dist/es2015/renderer/device/DeviceManager";
    export { DeviceManagerData } from "wonder.js/dist/es2015/renderer/device/DeviceManagerData";
    export { EScreenSize } from "wonder.js/dist/es2015/renderer/device/EScreenSize";
    export { GPUDetectData } from "wonder.js/dist/es2015/renderer/device/GPUDetectData";
    export { WebGLDetectData } from "wonder.js/dist/es2015/renderer/device/WebGLDetectData";
    export { BasicDrawRenderCommandBufferData } from "wonder.js/dist/es2015/renderer/draw/basic/BasicDrawRenderCommandBufferData";
    export { LightDrawRenderCommandBufferData } from "wonder.js/dist/es2015/renderer/draw/light/LightDrawRenderCommandBufferData";
    export { EBlendEquation } from "wonder.js/dist/es2015/renderer/enum/EBlendEquation";
    export { EBlendFunc } from "wonder.js/dist/es2015/renderer/enum/EBlendFunc";
    export { EBufferType } from "wonder.js/dist/es2015/renderer/enum/EBufferType";
    export { EDrawMode } from "wonder.js/dist/es2015/renderer/enum/EDrawMode";
    export { EGeometryWorkerDataOperateType } from "wonder.js/dist/es2015/renderer/enum/EGeometryWorkerDataOperateType";
    export { EGPUPrecision } from "wonder.js/dist/es2015/renderer/enum/EGPUPrecision";
    export { ELightWorkerDataOperateType } from "wonder.js/dist/es2015/renderer/enum/ELightWorkerDataOperateType";
    export { ESide } from "wonder.js/dist/es2015/renderer/enum/ESide";
    export { ETextureFilterMode } from "wonder.js/dist/es2015/renderer/enum/ETextureFilterMode";
    export { ETextureFormat } from "wonder.js/dist/es2015/renderer/enum/ETextureFormat";
    export { ETextureTarget } from "wonder.js/dist/es2015/renderer/enum/ETextureTarget";
    export { ETextureType } from "wonder.js/dist/es2015/renderer/enum/ETextureType";
    export { ETextureWrapMode } from "wonder.js/dist/es2015/renderer/enum/ETextureWrapMode";
    export { EVariableType } from "wonder.js/dist/es2015/renderer/enum/EVariableType";
    export { EWebGLVersion } from "wonder.js/dist/es2015/renderer/enum/EWebGLVersion";
    export { empty, NULL, common_define, common_fragment, common_function, common_vertex, highp_fragment, lowp_fragment, mediump_fragment, modelMatrix_noInstance_vertex, webgl1_noShadowMap_fragment, webgl1_basic_end_fragment, webgl1_basic_materialColor_fragment, frontLight_common, frontLight_common_fragment, frontLight_common_vertex, frontLight_end_fragment, frontLight_fragment, frontLight_setWorldPosition_vertex, frontLight_vertex, webgl1_normalMatrix_noInstance_vertex, webgl1_basic_map_fragment, webgl1_basic_map_vertex, webgl1_diffuseMap_fragment, webgl1_diffuseMap_vertex, webgl1_noDiffuseMap_fragment, webgl1_noEmissionMap_fragment, webgl1_noLightMap_fragment, webgl1_noNormalMap_fragment, webgl1_noNormalMap_vertex, webgl1_noSpecularMap_fragment, webgl1_specularMap_fragment, webgl1_specularMap_vertex, webgl2_deferLightPass_directionLight_noNormalMap_fragment, webgl2_deferLightPass_pointLight_noNormalMap_fragment, webgl2_noShadowMap_fragment, webgl2_basic_end_fragment, webgl2_basic_materialColor_fragment, webgl2_basic_vertex, ubo_light, ubo_camera, version, webgl2_common_define, webgl2_common_fragment, webgl2_common_function, webgl2_common_vertex, webgl2_basic_map_fragment, webgl2_basic_map_vertex, gbuffer_common_fragment, gbuffer_common_vertex, gbuffer_end_fragment, gbuffer_fragment, gbuffer_setWorldPosition_vertex, gbuffer_vertex, deferLightPass_common, deferLightPass_directionLight_pointLight_common, deferLightPass_end_fragment, deferLightPass_vertex, webgl2_normalMatrix_noInstance_vertex, webgl2_diffuseMap_fragment, webgl2_diffuseMap_vertex, webgl2_gbuffer_noNormalMap_fragment, webgl2_gbuffer_noNormalMap_vertex, webgl2_noDiffuseMap_fragment, webgl2_noSpecularMap_fragment, webgl2_specularMap_fragment, webgl2_specularMap_vertex, deferLightPass_ambientLight_fragment, ubo_ambientLight, deferLightPass_directionLight_common, deferLightPass_directionLight_fragment, ubo_directionLight, deferLightPass_pointLight_common, deferLightPass_pointLight_fragment, ubo_pointLight, webgl2_deferLightPass_noNormalMap_fragment, webgl2_noEmissionMap_fragment, webgl2_noLightMap_fragment } from "wonder.js/dist/es2015/renderer/shader/chunk/ShaderChunk";
    export { MapManagerData } from "wonder.js/dist/es2015/renderer/texture/MapManagerData";
    export { Texture, createTexture, initTexture, disposeTexture, getTextureSource, setTextureSource, getTextureWidth, setTextureWidth, getTextureHeight, setTextureHeight, getTextureIsNeedUpdate, setTextureIsNeedUpdate } from "wonder.js/dist/es2015/renderer/texture/Texture";
    export { TextureCacheData } from "wonder.js/dist/es2015/renderer/texture/TextureCacheData";
    export { TextureData } from "wonder.js/dist/es2015/renderer/texture/TextureData";
    export { DeviceManagerDataCommon } from "wonder.js/dist/es2015/renderer/utils/worker/render_file/device/DeviceManagerDataCommon";
    export { GPUDetectDataCommon } from "wonder.js/dist/es2015/renderer/utils/worker/render_file/device/GPUDetectDataCommon";
    export { VaoDataCommon } from "wonder.js/dist/es2015/renderer/utils/worker/render_file/vao/VaoDataCommon";
    export { VaoData } from "wonder.js/dist/es2015/renderer/vao/VaoData";
    export { WebGL1DirectionLightData } from "wonder.js/dist/es2015/renderer/webgl1/light/DirectionLightData";
    export { WebGL1PointLightData } from "wonder.js/dist/es2015/renderer/webgl1/light/PointLightData";
    export { WebGL1GLSLSenderData } from "wonder.js/dist/es2015/renderer/webgl1/shader/glslSender/GLSLSenderData";
    export { WebGL1LocationData } from "wonder.js/dist/es2015/renderer/webgl1/shader/location/LocationData";
    export { WebGL1ProgramData } from "wonder.js/dist/es2015/renderer/webgl1/shader/program/ProgramData";
    export { WebGL1ShaderData } from "wonder.js/dist/es2015/renderer/webgl1/shader/ShaderData";
    export { webgl1_main_begin, webgl1_main_end, webgl1_setPos_mvp } from "wonder.js/dist/es2015/renderer/webgl1/shader/snippet/ShaderSnippet";
    export { WebGL1GLSLSenderDataCommon } from "wonder.js/dist/es2015/renderer/webgl1/utils/worker/render_file/shader/glslSender/GLSLSenderDataCommon";
    export { WebGL1LocationDataCommon } from "wonder.js/dist/es2015/renderer/webgl1/utils/worker/render_file/shader/location/LocationDataCommon";
    export { WebGL1ProgramDataCommon } from "wonder.js/dist/es2015/renderer/webgl1/utils/worker/render_file/shader/program/ProgramDataCommon";
    export { WebGL1ShaderDataCommon } from "wonder.js/dist/es2015/renderer/webgl1/utils/worker/render_file/shader/ShaderDataCommon";
    export { WebGL2DirectionLightData } from "wonder.js/dist/es2015/renderer/webgl2/light/DirectionLightData";
    export { WebGL2PointLightData } from "wonder.js/dist/es2015/renderer/webgl2/light/PointLightData";
    export { GBufferData } from "wonder.js/dist/es2015/renderer/webgl2/render/light/defer/gbuffer/GBufferData";
    export { DeferAmbientLightPassData } from "wonder.js/dist/es2015/renderer/webgl2/render/light/defer/light/DeferAmbientLightPassData";
    export { DeferDirectionLightPassData } from "wonder.js/dist/es2015/renderer/webgl2/render/light/defer/light/DeferDirectionLightPassData";
    export { DeferPointLightPassData } from "wonder.js/dist/es2015/renderer/webgl2/render/light/defer/light/DeferPointLightPassData";
    export { WebGL2GLSLSenderData } from "wonder.js/dist/es2015/renderer/webgl2/shader/glslSender/GLSLSenderData";
    export { WebGL2LocationData } from "wonder.js/dist/es2015/renderer/webgl2/shader/location/LocationData";
    export { WebGL2ProgramData } from "wonder.js/dist/es2015/renderer/webgl2/shader/program/ProgramData";
    export { WebGL2ShaderData } from "wonder.js/dist/es2015/renderer/webgl2/shader/ShaderData";
    export { webgl2_main_begin, webgl2_main_end, webgl2_setPos_mvp } from "wonder.js/dist/es2015/renderer/webgl2/shader/snippet/ShaderSnippet";
    export { DeferAmbientLightPassDataCommon } from "wonder.js/dist/es2015/renderer/webgl2/utils/render/light/defer/light/DeferAmbientLightPassDataCommon";
    export { DeferDirectionLightPassDataCommon } from "wonder.js/dist/es2015/renderer/webgl2/utils/render/light/defer/light/DeferDirectionLightPassDataCommon";
    export { DeferPointLightPassDataCommon } from "wonder.js/dist/es2015/renderer/webgl2/utils/render/light/defer/light/DeferPointLightPassDataCommon";
    export { WebGL2GLSLSenderDataCommon } from "wonder.js/dist/es2015/renderer/webgl2/utils/worker/render_file/shader/glslSender/GLSLSenderDataCommon";
    export { WebGL2LocationDataCommon } from "wonder.js/dist/es2015/renderer/webgl2/utils/worker/render_file/shader/location/LocationDataCommon";
    export { WebGL2ProgramDataCommon } from "wonder.js/dist/es2015/renderer/webgl2/utils/worker/render_file/shader/program/ProgramDataCommon";
    export { WebGL2ShaderDataCommon } from "wonder.js/dist/es2015/renderer/webgl2/utils/worker/render_file/shader/ShaderDataCommon";
    export { render_config } from "wonder.js/dist/es2015/renderer/worker/both_file/data/render_config";
    export { DeviceManagerWorkerData } from "wonder.js/dist/es2015/renderer/worker/both_file/device/DeviceManagerWorkerData";
    export { ERenderWorkerState } from "wonder.js/dist/es2015/renderer/worker/both_file/ERenderWorkerState";
    export { EWorkerOperateType } from "wonder.js/dist/es2015/renderer/worker/both_file/EWorkerOperateType";
    export { SendDrawRenderCommandBufferData } from "wonder.js/dist/es2015/renderer/worker/logic_file/draw/SendDrawRenderCommandBufferData";
    export { ArrayBufferWorkerData } from "wonder.js/dist/es2015/renderer/worker/render_file/buffer/ArrayBufferWorkerData";
    export { IndexBufferWorkerData } from "wonder.js/dist/es2015/renderer/worker/render_file/buffer/IndexBufferWorkerData";
    export { BasicRenderCommandBufferWorkerData } from "wonder.js/dist/es2015/renderer/worker/render_file/command_buffer/BasicRenderCommandBufferWorkerData";
    export { LightRenderCommandBufferWorkerData } from "wonder.js/dist/es2015/renderer/worker/render_file/command_buffer/LightRenderCommandBufferWorkerData";
    export { InitConfigWorkerData } from "wonder.js/dist/es2015/renderer/worker/render_file/config/InitConfigWorkerData";
    export { GPUDetectWorkerData } from "wonder.js/dist/es2015/renderer/worker/render_file/device/GPUDetectWorkerData";
    export { WebGLDetectWorkerData } from "wonder.js/dist/es2015/renderer/worker/render_file/device/WebGLDetectWorkerData";
    export { BasicDrawRenderCommandBufferWorkerData } from "wonder.js/dist/es2015/renderer/worker/render_file/draw/basic/BasicDrawRenderCommandBufferWorkerData";
    export { LightDrawRenderCommandBufferWorkerData } from "wonder.js/dist/es2015/renderer/worker/render_file/draw/light/LightDrawRenderCommandBufferWorkerData";
    export { GeometryWorkerData } from "wonder.js/dist/es2015/renderer/worker/render_file/geometry/GeometryWorkerData";
    export { initGL } from "wonder.js/dist/es2015/renderer/worker/render_file/initGL";
    export { AmbientLightWorkerData } from "wonder.js/dist/es2015/renderer/worker/render_file/light/AmbientLightWorkerData";
    export { DirectionLightWorkerData } from "wonder.js/dist/es2015/renderer/worker/render_file/light/DirectionLightWorkerData";
    export { PointLightWorkerData } from "wonder.js/dist/es2015/renderer/worker/render_file/light/PointLightWorkerData";
    export { SpecifyLightWorkerData } from "wonder.js/dist/es2015/renderer/worker/render_file/light/SpecifyLightWorkerData";
    export { BasicMaterialWorkerData } from "wonder.js/dist/es2015/renderer/worker/render_file/material/BasicMaterialWorkerData";
    export { LightMaterialWorkerData } from "wonder.js/dist/es2015/renderer/worker/render_file/material/LightMaterialWorkerData";
    export { MaterialWorkerData } from "wonder.js/dist/es2015/renderer/worker/render_file/material/MaterialWorkerData";
    export { StateWorkerData } from "wonder.js/dist/es2015/renderer/worker/render_file/state/StateWorkerData";
    export { getState, setState } from "wonder.js/dist/es2015/renderer/worker/render_file/state/StateWorkerSytem";
    export { MapManagerWorkerData } from "wonder.js/dist/es2015/renderer/worker/render_file/texture/MapManagerWorkerData";
    export { TextureCacheWorkerData } from "wonder.js/dist/es2015/renderer/worker/render_file/texture/TextureCacheWorkerData";
    export { TextureWorkerData } from "wonder.js/dist/es2015/renderer/worker/render_file/texture/TextureWorkerData";
    export { VaoWorkerData } from "wonder.js/dist/es2015/renderer/worker/render_file/vao/VaoWorkerData";
    export { webgl1_material_config } from "wonder.js/dist/es2015/renderer/worker/webgl1/both_file/data/material_config";
    export { webgl1_shaderLib_generator } from "wonder.js/dist/es2015/renderer/worker/webgl1/both_file/data/shaderLib_generator";
    export { WebGL1DirectionLightWorkerData } from "wonder.js/dist/es2015/renderer/worker/webgl1/render_file/light/DirectionLightWorkerData";
    export { WebGL1PointLightWorkerData } from "wonder.js/dist/es2015/renderer/worker/webgl1/render_file/light/PointLightWorkerData";
    export { WebGL1GLSLSenderWorkerData } from "wonder.js/dist/es2015/renderer/worker/webgl1/render_file/shader/glslSender/GLSLSenderWorkerData";
    export { WebGL1LocationWorkerData } from "wonder.js/dist/es2015/renderer/worker/webgl1/render_file/shader/location/LocationWorkerData";
    export { WebGL1ProgramWorkerData } from "wonder.js/dist/es2015/renderer/worker/webgl1/render_file/shader/program/ProgramWorkerData";
    export { WebGL1ShaderWorkerData } from "wonder.js/dist/es2015/renderer/worker/webgl1/render_file/shader/ShaderWorkerData";
    export { webgl2_material_config } from "wonder.js/dist/es2015/renderer/worker/webgl2/both_file/data/material_config";
    export { webgl2_shaderLib_generator } from "wonder.js/dist/es2015/renderer/worker/webgl2/both_file/data/shaderLib_generator";
    export { WebGL2DirectionLightWorkerData } from "wonder.js/dist/es2015/renderer/worker/webgl2/render_file/light/DirectionLightWorkerData";
    export { WebGL2PointLightWorkerData } from "wonder.js/dist/es2015/renderer/worker/webgl2/render_file/light/PointLightWorkerData";
    export { GBufferWorkerData } from "wonder.js/dist/es2015/renderer/worker/webgl2/render_file/render/light/defer/gbuffer/GBufferWorkerData";
    export { DeferAmbientLightPassWorkerData } from "wonder.js/dist/es2015/renderer/worker/webgl2/render_file/render/light/defer/light/DeferAmbientLightPassWorkerData";
    export { DeferDirectionLightPassWorkerData } from "wonder.js/dist/es2015/renderer/worker/webgl2/render_file/render/light/defer/light/DeferDirectionLightPassWorkerData";
    export { DeferPointLightPassWorkerData } from "wonder.js/dist/es2015/renderer/worker/webgl2/render_file/render/light/defer/light/DeferPointLightPassWorkerData";
    export { WebGL2GLSLSenderWorkerData } from "wonder.js/dist/es2015/renderer/worker/webgl2/render_file/shader/glslSender/GLSLSenderWorkerData";
    export { WebGL2LocationWorkerData } from "wonder.js/dist/es2015/renderer/worker/webgl2/render_file/shader/location/LocationWorkerData";
    export { WebGL2ProgramWorkerData } from "wonder.js/dist/es2015/renderer/worker/webgl2/render_file/shader/program/ProgramWorkerData";
    export { WebGL2ShaderWorkerData } from "wonder.js/dist/es2015/renderer/worker/webgl2/render_file/shader/ShaderWorkerData";
    export { Color } from "wonder.js/dist/es2015/structure/Color";
    export { RectRegion } from "wonder.js/dist/es2015/structure/RectRegion";
    export { getCanvas, setCanvas, getCanvasLeft, setCanvasLeft, getCanvasTop, setCanvasTop, getCanvasWidth, setCanvasWidth, getCanvasHeight, setCanvasHeight, getCanvasStyleWidth, setCanvasStyleWidth, getCanvasStyleHeight, setCanvasStyleHeight } from "wonder.js/dist/es2015/structure/View";
    export { initDeviceManagerWorkerData, initProgramWorkerData, initWebGL1GLSLSenderWorkerData, initWebGL2GLSLSenderWorkerData, initWebGL1LocationWorkerData, initWebGL2LocationWorkerData, initWebGL1ShaderWorkerData, initWebGL2ShaderWorkerData, initWebGL1LightWorkerData, initWebGL2LightWorkerData, initDrawRenderCommandBufferWorkerData, initArrayBufferWorkerData, initIndexBufferWorkerData, initVaoWorkerData, initWorkerDataWhenInitGL, getDirectionLightPositionInShaderWorker, getPointLightPositionInShaderWorker, updateTextureWorker } from "wonder.js/dist/es2015/test/forRenderWorkerUnitTest";
    export { initThreeDTransformData, DomQuery, fromArray, initTagData, initGeometryData, initMaterialData, initWebGL1ShaderData, initWebGL2ShaderData, initProgramData, initWebGL1LocationData, initWebGL2LocationData, initWebGL1GLSLSenderData, initWebGL2GLSLSenderData, initMeshRendererData, initArrayBufferData, initIndexBufferData, initDeviceManagerData, initCameraControllerData, initWebGL1LightData, initWebGL2LightData, initGameObjectData, initSceneData, initRenderCommandBufferData, initDrawRenderCommandBufferData, initSendDrawRenderCommandBufferData, initVaoData, initDeferLightPassData, initWebGL1GPUDetectData, initWebGL2GPUDetectData, initData, createState, useProgram, sendWebGL1AttributeData, disableVertexAttribArray, setGeometryIndices, setGeometryVertices, hasGeometryIndices, getShaderIndex, updateSystem, getNormalMatrix, getWorldToCameraMatrix, getImageData, hasDiffuseMap, hasSpecularMap } from "wonder.js/dist/es2015/test/forUnitTest";
    export { BufferUtilsForUnitTest } from "wonder.js/dist/es2015/utils/BufferUtilsForUnitTest";
    export { Log } from "wonder.js/dist/es2015/utils/Log";
    export { CommonTimeController } from "wonder.js/dist/es2015/utils/time/CommonTimeController";
    export { DirectorTimeController } from "wonder.js/dist/es2015/utils/time/DirectorTimeController";
    export { TimeController } from "wonder.js/dist/es2015/utils/time/TimeController";
    export { WorkerInstanceData } from "wonder.js/dist/es2015/worker/WorkerInstanceData";
}

declare module 'wonder.js/dist/es2015/asset/AssetDatabase' {
    import { AssetData } from "wonder.js/dist/es2015/asset/dataType";
    export function loadAsset(url: string, timeout?: number): any;
    export function loadAsset(assetArr: Array<AssetData>, timeout?: number): any;
    export const getAsset: (id: string) => any;
    export function setTextureAsset(id: string, source: HTMLImageElement | HTMLCanvasElement, extname: string): void;
}

declare module 'wonder.js/dist/es2015/asset/AssetDatabaseData' {
    import { Hash } from "wonder-commonlib/dist/es2015/Hash";
    export class AssetDatabaseData {
        static container: Hash<any>;
        static totalAssertCount: number;
        static currentLoadedCount: number;
    }
}

declare module 'wonder.js/dist/es2015/asset/texture/ImageTextureAsset' {
    import { TextureAsset } from "wonder.js/dist/es2015/asset/texture/TextureAsset";
    import { Texture } from "wonder.js/dist/es2015/renderer/texture/Texture";
    export class ImageTextureAsset extends TextureAsset {
        static create(source: HTMLImageElement | HTMLCanvasElement): ImageTextureAsset;
        constructor(source: HTMLImageElement | HTMLCanvasElement);
        toTexture(): Texture;
    }
}

declare module 'wonder.js/dist/es2015/asset/texture/TextureAsset' {
    import { ETextureFormat } from "wonder.js/dist/es2015/renderer/enum/ETextureFormat";
    import { ETextureType } from "wonder.js/dist/es2015/renderer/enum/ETextureType";
    export abstract class TextureAsset {
        width: number;
        height: number;
        format: ETextureFormat;
        source: any;
        type: ETextureType;
        needUpdate: boolean;
        abstract toTexture(): any;
        protected cloneTo(textureIndex: number): void;
    }
}

declare module 'wonder.js/dist/es2015/component/camera/Camera' {
    import { CameraController } from "wonder.js/dist/es2015/component/camera/CameraController";
    export const getCameraPMatrix: (cameraController: CameraController) => any;
    export const getCameraNear: (cameraController: CameraController) => any;
    export const setCameraNear: (cameraController: CameraController, near: number) => void;
    export const getCameraFar: (cameraController: CameraController) => any;
    export const setCameraFar: (cameraController: CameraController, far: number) => void;
}

declare module 'wonder.js/dist/es2015/component/camera/CameraController' {
    import { Component } from "wonder.js/dist/es2015/component/Component";
    import { IUIdEntity } from "wonder.js/dist/es2015/core/entityObject/gameObject/IUIdEntity";
    export class CameraController extends Component {
    }
    export const createCameraController: () => any;
    export const getCameraControllerGameObject: (component: CameraController) => IUIdEntity;
}

declare module 'wonder.js/dist/es2015/component/camera/CameraControllerData' {
    import { ComponentGameObjectMap } from "wonder.js/dist/es2015/component/ComponentData";
    import { Matrix4 } from "wonder.js/dist/es2015/math/Matrix4";
    export class CameraControllerData {
        static index: number;
        static count: number;
        static dirtyIndexArray: Array<number>;
        static gameObjectMap: ComponentGameObjectMap;
        static worldToCameraMatrixCacheMap: WorldToCameraMatrixCacheMap;
    }
    export type WorldToCameraMatrixCacheMap = {
        [index: number]: Matrix4;
    };
}

declare module 'wonder.js/dist/es2015/component/camera/CameraData' {
    import { Matrix4 } from "wonder.js/dist/es2015/math/Matrix4";
    export class CameraData {
        static nearMap: NearMap;
        static farMap: FarMap;
        static worldToCameraMatrixMap: WorldToCameraMatrixMap;
        static pMatrixMap: PMatrixMap;
    }
    export type NearMap = {
        [cameraControllerIndex: number]: number;
    };
    export type FarMap = {
        [cameraControllerIndex: number]: number;
    };
    export type WorldToCameraMatrixMap = {
        [cameraControllerIndex: number]: Matrix4;
    };
    export type PMatrixMap = {
        [cameraControllerIndex: number]: Matrix4;
    };
}

declare module 'wonder.js/dist/es2015/component/camera/PerspectiveCamera' {
    import { CameraController } from "wonder.js/dist/es2015/component/camera/CameraController";
    export const getPerspectiveCameraFovy: (cameraController: CameraController) => any;
    export const setPerspectiveCameraFovy: (cameraController: CameraController, fovy: number) => void;
    export const getPerspectiveCameraAspect: (cameraController: CameraController) => any;
    export const setPerspectiveCameraAspect: (cameraController: CameraController, aspect: number) => void;
}

declare module 'wonder.js/dist/es2015/component/camera/PerspectiveCameraData' {
    export class PerspectiveCameraData {
        static fovyMap: FovyMap;
        static aspectMap: AspectMap;
    }
    export type FovyMap = {
        [cameraControllerIndex: number]: number;
    };
    export type AspectMap = {
        [cameraControllerIndex: number]: number;
    };
}

declare module 'wonder.js/dist/es2015/component/Component' {
    export class Component {
        index: number;
    }
}

declare module 'wonder.js/dist/es2015/component/ComponentComponentIdManager' {
    import { Component } from "wonder.js/dist/es2015/component/Component";
    export const getComponentIdFromClass: (_class: any) => any;
    export const getComponentIdFromComponent: (component: Component) => any;
}

declare module 'wonder.js/dist/es2015/component/ComponentData' {
    import { Component } from "wonder.js/dist/es2015/component/Component";
    import { Map as MapImmutable } from "immutable";
    import { IUIdEntity } from "wonder.js/dist/es2015/core/entityObject/gameObject/IUIdEntity";
    export class ComponentData {
        static addComponentHandleMap: AddComponentHandleMap;
        static disposeHandleMap: DisposeHandleMap;
        static initHandleMap: InitHandleMap;
    }
    export type AddComponentHandleMap = {
        [typeId: string]: (component: Component, gameObject: IUIdEntity) => void;
    };
    export type DisposeHandleMap = {
        [typeId: string]: (component: Component) => void;
    };
    export type InitHandleMap = {
        [typeId: string]: (index: number, state: MapImmutable<any, any>) => void;
    };
    export type ComponentGameObjectMap = {
        [index: number]: IUIdEntity;
    };
}

declare module 'wonder.js/dist/es2015/component/ComponentTypeIdManager' {
    import { Component } from "wonder.js/dist/es2015/component/Component";
    export const getTypeIdFromClass: (_class: any) => any;
    export const getTypeIdFromComponent: (component: Component) => any;
}

declare module 'wonder.js/dist/es2015/component/geometry/BoxGeometry' {
    import { Geometry } from "wonder.js/dist/es2015/component/geometry/Geometry";
    export class BoxGeometry extends Geometry {
    }
    export const createBoxGeometry: () => BoxGeometry;
    export const setBoxGeometryConfigData: (geometry: BoxGeometry, data: BoxGeometryConfigData) => void;
    export type BoxGeometryConfigDataMap = {
        [index: number]: BoxGeometryConfigData;
    };
    export type BoxGeometryConfigData = {
        width?: number;
        height?: number;
        depth?: number;
        widthSegments?: number;
        heightSegments?: number;
        depthSegments?: number;
    };
}

declare module 'wonder.js/dist/es2015/component/geometry/CustomGeometry' {
    import { Geometry } from "wonder.js/dist/es2015/component/geometry/Geometry";
    export class CustomGeometry extends Geometry {
    }
    export const createCustomGeometry: () => any;
    export const setCustomGeometryVertices: (geometry: Geometry, vertices: Float32Array) => any;
    export const setCustomGeometryNormals: (geometry: Geometry, normals: Float32Array) => any;
    export const setCustomGeometryTexCoords: (geometry: Geometry, texCoords: Float32Array) => any;
    export const setCustomGeometryIndices: (geometry: Geometry, indices: Uint16Array | Uint32Array) => any;
}

declare module 'wonder.js/dist/es2015/component/geometry/Geometry' {
    import { Component } from "wonder.js/dist/es2015/component/Component";
    export abstract class Geometry extends Component {
    }
    export const getDrawMode: Function;
    export const getVertices: Function;
    export const getNormals: Function;
    export const getTexCoords: Function;
    export const getIndices: Function;
    export const getGeometryConfigData: Function;
    export const initGeometry: (geometry: Geometry) => void;
    export const getGeometryGameObject: Function;
}

declare module 'wonder.js/dist/es2015/component/geometry/GeometryData' {
    import { EBufferType } from "wonder.js/dist/es2015/renderer/enum/EBufferType";
    import { ComponentGameObjectMap } from "wonder.js/dist/es2015/component/ComponentData";
    import { ComponentMap } from "wonder.js/dist/es2015/component/ComponentSystem";
    import { GeometryIndicesCacheMap, GeometryInfoList, GeometryNormalsCacheMap, GeometryVertexCacheMap, GeometryWorkerInfoList } from "wonder.js/dist/es2015/definition/type/geometryType";
    export class GeometryData {
        static index: number;
        static count: number;
        static disposeCount: number;
        static maxDisposeIndex: number;
        static isReallocate: boolean;
        static buffer: SharedArrayBuffer;
        static verticesOffset: number;
        static normalsOffset: number;
        static texCoordsOffset: number;
        static indicesOffset: number;
        static verticesInfoList: GeometryInfoList;
        static normalsInfoList: GeometryInfoList;
        static texCoordsInfoList: GeometryInfoList;
        static indicesInfoList: GeometryInfoList;
        static isInit: boolean;
        static verticesWorkerInfoList: GeometryWorkerInfoList;
        static normalsWorkerInfoList: GeometryWorkerInfoList;
        static texCoordsWorkerInfoList: GeometryWorkerInfoList;
        static indicesWorkerInfoList: GeometryWorkerInfoList;
        static disposedGeometryIndexArray: Array<number>;
        static vertices: Float32Array;
        static normals: Float32Array;
        static texCoords: Float32Array;
        static indices: Uint16Array | Uint32Array;
        static verticesCacheMap: GeometryVertexCacheMap;
        static normalsCacheMap: GeometryNormalsCacheMap;
        static texCoordsCacheMap: GeometryNormalsCacheMap;
        static indicesCacheMap: GeometryIndicesCacheMap;
        static indexType: EBufferType;
        static indexTypeSize: number;
        static configDataMap: object;
        static computeDataFuncMap: GeometryComputeDataFuncMap;
        static gameObjectMap: ComponentGameObjectMap;
        static geometryMap: ComponentMap;
    }
    export type GeometryComputeDataFuncMap = {
        [index: number]: (index: number, GeometryData: any) => GeometryComputeData;
    };
    export type GeometryComputeData = {
        vertices: Float32Array;
        normals: Float32Array;
        texCoords: Float32Array;
        indices: Uint16Array | Uint32Array;
    };
}

declare module 'wonder.js/dist/es2015/component/light/AmbientLight' {
    import { Light } from "wonder.js/dist/es2015/component/light/Light";
    import { Color } from "wonder.js/dist/es2015/structure/Color";
    export class AmbientLight extends Light {
    }
    export const createAmbientLight: () => any;
    export const getAmbientLightGameObject: Function;
    export const getAmbientLightColor: (light: AmbientLight) => Color;
    export const setAmbientLightColor: (light: AmbientLight, color: Color) => void;
}

declare module 'wonder.js/dist/es2015/component/light/AmbientLightData' {
    import { SpecifyLightData } from "wonder.js/dist/es2015/component/light/SpecifyLightData";
    export class AmbientLightData extends SpecifyLightData {
    }
}

declare module 'wonder.js/dist/es2015/component/light/DirectionLight' {
    import { Light } from "wonder.js/dist/es2015/component/light/Light";
    export class DirectionLight extends Light {
    }
    export var createDirectionLight: any;
    export var getDirectionLightGameObject: any;
    export var getDirectionLightPosition: any;
    export var getDirectionLightColor: any;
    export var setDirectionLightColor: any;
    export var getDirectionLightIntensity: any;
    export var setDirectionLightIntensity: any;
}

declare module 'wonder.js/dist/es2015/component/light/DirectionLightData' {
    import { SpecifyLightData } from "wonder.js/dist/es2015/component/light/SpecifyLightData";
    export abstract class DirectionLightData extends SpecifyLightData {
        static intensities: Float32Array;
        static isPositionDirtys: Uint8Array;
        static isIntensityDirtys: Uint8Array;
        static defaultIntensity: number;
    }
}

declare module 'wonder.js/dist/es2015/component/light/Light' {
    import { Component } from "wonder.js/dist/es2015/component/Component";
    export abstract class Light extends Component {
    }
    export const checkLightShouldAlive: (component: Light) => void;
}

declare module 'wonder.js/dist/es2015/component/light/PointLight' {
    import { Light } from "wonder.js/dist/es2015/component/light/Light";
    export class PointLight extends Light {
    }
    export var createPointLight: any;
    export var getPointLightGameObject: any;
    export var getPointLightPosition: any;
    export var getPointLightColor: any;
    export var setPointLightColor: any;
    export var getPointLightIntensity: any;
    export var setPointLightIntensity: any;
    export var getPointLightConstant: any;
    export var setPointLightConstant: any;
    export var getPointLightLinear: any;
    export var setPointLightLinear: any;
    export var getPointLightQuadratic: any;
    export var setPointLightQuadratic: any;
    export var getPointLightRange: any;
    export var setPointLightRange: any;
    export var setPointLightRangeLevel: any;
}

declare module 'wonder.js/dist/es2015/component/light/PointLightData' {
    import { SpecifyLightData } from "wonder.js/dist/es2015/component/light/SpecifyLightData";
    export abstract class PointLightData extends SpecifyLightData {
        static intensities: Float32Array;
        static constants: Float32Array;
        static linears: Float32Array;
        static quadratics: Float32Array;
        static ranges: Uint16Array;
        static isPositionDirtys: Uint8Array;
        static isIntensityDirtys: Uint8Array;
        static isAttenuationDirtys: Uint8Array;
        static defaultIntensity: number;
        static defaultConstant: number;
        static defaultLinear: number;
        static defaultQuadratic: number;
        static defaultRange: number;
    }
}

declare module 'wonder.js/dist/es2015/component/light/SpecifyLightData' {
    import { IUIdEntity } from "wonder.js/dist/es2015/core/entityObject/gameObject/IUIdEntity";
    import { Component } from "wonder.js/dist/es2015/component/Component";
    export class SpecifyLightData {
        static index: number;
        static count: number;
        static buffer: any;
        static colors: Float32Array;
        static isColorDirtys: Uint8Array;
        static gameObjectMap: Array<IUIdEntity>;
        static lightMap: Array<Component>;
        static defaultColorArr: Array<number>;
        static defaultDirty: number;
    }
}

declare module 'wonder.js/dist/es2015/component/material/BasicMaterial' {
    import { Material } from "wonder.js/dist/es2015/component/material/Material";
    export class BasicMaterial extends Material {
    }
    export var createBasicMaterial: any;
    export const initBasicMaterial: (material: BasicMaterial) => void;
    export const getBasicMaterialColor: Function;
    export const setBasicMaterialColor: Function;
    export const getBasicMaterialOpacity: Function;
    export const setBasicMaterialOpacity: Function;
    export const getBasicMaterialAlphaTest: Function;
    export const setBasicMaterialAlphaTest: Function;
    export const setBasicMaterialMap: Function;
}

declare module 'wonder.js/dist/es2015/component/material/BasicMaterialData' {
    import { SpecifyMaterialData } from "wonder.js/dist/es2015/component/material/SpecifyMaterialData";
    export class BasicMaterialData extends SpecifyMaterialData {
    }
}

declare module 'wonder.js/dist/es2015/component/material/ELightModel' {
    export enum ELightModel {
        BLINN = 1,
        PHONG = 2,
        CONSTANT = 3,
    }
}

declare module 'wonder.js/dist/es2015/component/material/EShading' {
    export enum EShading {
        FLAT = 0,
        SMOOTH = 1,
    }
}

declare module 'wonder.js/dist/es2015/component/material/LightMaterial' {
    import { Material } from "wonder.js/dist/es2015/component/material/Material";
    export class LightMaterial extends Material {
    }
    export var createLightMaterial: any;
    export const initLightMaterial: (material: LightMaterial) => void;
    export const getLightMaterialColor: Function;
    export const setLightMaterialColor: Function;
    export const getLightMaterialOpacity: Function;
    export const setLightMaterialOpacity: Function;
    export const getLightMaterialAlphaTest: Function;
    export const setLightMaterialAlphaTest: Function;
    export const getLightMaterialSpecularColor: Function;
    export const setLightMaterialSpecularColor: Function;
    export const getLightMaterialEmissionColor: Function;
    export const setLightMaterialEmissionColor: Function;
    export const getLightMaterialShininess: Function;
    export const setLightMaterialShininess: Function;
    export const getLightMaterialShading: Function;
    export const setLightMaterialShading: Function;
    export const getLightMaterialLightModel: Function;
    export const setLightMaterialLightModel: Function;
    export const setLightMaterialDiffuseMap: Function;
    export const setLightMaterialSpecularMap: Function;
}

declare module 'wonder.js/dist/es2015/component/material/LightMaterialData' {
    import { SpecifyMaterialData } from "wonder.js/dist/es2015/component/material/SpecifyMaterialData";
    import { Color } from "wonder.js/dist/es2015/structure/Color";
    export class LightMaterialData extends SpecifyMaterialData {
        static specularColors: Float32Array;
        static emissionColors: Float32Array;
        static shininess: Float32Array;
        static shadings: Uint8Array;
        static lightModels: Uint8Array;
        static hasDiffuseMaps: Uint8Array;
        static hasSpecularMaps: Uint8Array;
        static defaultShininess: number;
        static defaultShading: number;
        static defaultLightModel: number;
        static defaultHasMap: number;
        static emptyColor: Color;
        static emptyColorArr: Array<number>;
    }
}

declare module 'wonder.js/dist/es2015/component/material/Material' {
    import { Component } from "wonder.js/dist/es2015/component/Component";
    export abstract class Material extends Component {
    }
    export const getMaterialGameObject: Function;
    export const checkShouldAlive: (material: Material) => void;
}

declare module 'wonder.js/dist/es2015/component/material/MaterialData' {
    import { IUIdEntity } from "wonder.js/dist/es2015/core/entityObject/gameObject/IUIdEntity";
    import { Component } from "wonder.js/dist/es2015/component/Component";
    import { MaterialWorkerInitDataList } from "wonder.js/dist/es2015/renderer/type/dataType";
    export class MaterialData {
        static buffer: SharedArrayBuffer;
        static shaderIndices: Uint32Array;
        static colors: Float32Array;
        static opacities: Float32Array;
        static alphaTests: Float32Array;
        static defaultShaderIndex: number;
        static defaultColorArr: Array<number>;
        static defaultOpacity: number;
        static defaultAlphaTest: number;
        static gameObjectMap: Array<IUIdEntity>;
        static materialMap: Array<Component>;
        static workerInitList: MaterialWorkerInitDataList;
    }
}

declare module 'wonder.js/dist/es2015/component/material/SpecifyMaterialData' {
    export class SpecifyMaterialData {
        static index: number;
    }
}

declare module 'wonder.js/dist/es2015/component/renderer/MeshRenderer' {
    import { Component } from "wonder.js/dist/es2015/component/Component";
    export class MeshRenderer extends Component {
    }
    export const createMeshRenderer: () => any;
    export const getMeshRendererGameObject: Function;
    export const getMeshRendererRenderList: () => any;
}

declare module 'wonder.js/dist/es2015/component/renderer/MeshRendererData' {
    import { IUIdEntity } from "wonder.js/dist/es2015/core/entityObject/gameObject/IUIdEntity";
    import { Component } from "wonder.js/dist/es2015/component/Component";
    export class MeshRendererData {
        static renderGameObjectArray: Array<IUIdEntity>;
        static gameObjectMap: Array<IUIdEntity>;
        static meshRendererMap: Array<Component>;
        static index: number;
        static count: number;
    }
}

declare module 'wonder.js/dist/es2015/component/tag/Tag' {
    import { Component } from "wonder.js/dist/es2015/component/Component";
    import { GameObject } from "wonder.js/dist/es2015/core/entityObject/gameObject/GameObject";
    export class Tag extends Component {
    }
    export const createTag: (slotCount?: number) => any;
    export const addTag: Function;
    export const removeTag: Function;
    export const findGameObjectsByTag: (tag: string) => GameObject[];
    export const getTagGameObject: Function;
}

declare module 'wonder.js/dist/es2015/component/tag/TagData' {
    import { ComponentGameObjectMap } from "wonder.js/dist/es2015/component/ComponentData";
    import { Component } from "wonder.js/dist/es2015/component/Component";
    export class TagData {
        static tagArray: Array<string>;
        static slotCountMap: Array<number>;
        static usedSlotCountMap: Array<number>;
        static indexMap: Array<number>;
        static indexInTagArrayMap: Array<number>;
        static lastIndexInTagArray: number;
        static tagMap: TagMap;
        static gameObjectMap: ComponentGameObjectMap;
        static index: number;
        static count: number;
        static disposeCount: number;
    }
    export type TagMap = {
        [index: number]: Component;
    };
}

declare module 'wonder.js/dist/es2015/component/transform/LinkList' {
    export class LinkList<T> {
        static create(): LinkList<{}>;
        shift(): LinkNode<T>;
        push(node: LinkNode<T>): void;
        hasDuplicateNode(val: any): boolean;
    }
    export class LinkNode<T> {
        static create(val: any): LinkNode<any>;
        constructor(val: T);
        val: T;
        next: LinkNode<T>;
    }
}

declare module 'wonder.js/dist/es2015/component/transform/ThreeDTransform' {
    import { Vector3 } from "wonder.js/dist/es2015/math/Vector3";
    import { Component } from "wonder.js/dist/es2015/component/Component";
    export class ThreeDTransform extends Component implements IThreeDTransform {
        uid: number;
    }
    export interface IThreeDTransform {
        index: number;
        uid: number;
    }
    export interface BatchTransformData {
        transform: ThreeDTransform;
        position: Vector3;
        localPosition: Vector3;
    }
    export const createThreeDTransform: () => any;
    export const getThreeDTransformPosition: Function;
    export const setThreeDTransformPosition: Function;
    export const getThreeDTransformLocalToWorldMatrix: Function;
    export const getThreeDTransformLocalPosition: Function;
    export const setThreeDTransformLocalPosition: Function;
    export const setThreeDTransformBatchTransformDatas: (batchData: BatchTransformData[]) => void;
    export const getThreeDTransformParent: Function;
    export const setThreeDTransformParent: Function;
    export const getThreeDTransformGameObject: Function;
}

declare module 'wonder.js/dist/es2015/component/transform/ThreeDTransformData' {
    import { Vector3 } from "wonder.js/dist/es2015/math/Vector3";
    import { Matrix4 } from "wonder.js/dist/es2015/math/Matrix4";
    import { LinkList } from "wonder.js/dist/es2015/component/transform/LinkList";
    import { Quaternion } from "wonder.js/dist/es2015/math/Quaternion";
    import { Matrix3 } from "wonder.js/dist/es2015/math/Matrix3";
    import { Component } from "wonder.js/dist/es2015/component/Component";
    import { IUIdEntity } from "wonder.js/dist/es2015/core/entityObject/gameObject/IUIdEntity";
    export class ThreeDTransformData {
        static readonly maxCount: number;
        static localToWorldMatrices: Float32Array;
        static localPositions: Float32Array;
        static localRotations: Float32Array;
        static localScales: Float32Array;
        static defaultPosition: Vector3;
        static defaultRotation: Quaternion;
        static defaultScale: Vector3;
        static defaultLocalToWorldMatrice: Matrix4;
        static firstDirtyIndex: number;
        static index: number;
        static notUsedIndexLinkList: LinkList<number>;
        static isTranslateMap: any;
        static parentMap: ThreeDTransformParentMap;
        static childrenMap: ThreeDTransformChildrenMap;
        static cacheMap: ThreeDTransformCacheMap;
        static tempMap: ThreeDTransformTempMap;
        static transformMap: TransformMap;
        static count: number;
        static uid: number;
        static disposeCount: number;
        static isClearCacheMap: boolean;
        static gameObjectMap: ThreeDTransformGameObjectMap;
        static aliveUIdArray: Array<number>;
        static buffer: ArrayBuffer;
    }
    export class ThreeDTransformRelationData {
        static create(): ThreeDTransformRelationData;
        index: number;
        parent: ThreeDTransformRelationData;
        children: Array<ThreeDTransformRelationData>;
    }
    export type ThreeDTransformParentMap = {
        [uid: number]: Component;
    };
    export type ThreeDTransformChildrenMap = {
        [uid: number]: Array<Component>;
    };
    export type ThreeDTransformGameObjectMap = Map<number, IUIdEntity>;
    export type TransformMap = {
        [index: number]: Component;
    };
    export type ThreeDTransformCacheMap = {
        [uid: number]: ThreeDTransformCacheData;
    };
    export type ThreeDTransformCacheData = {
        position: Vector3;
        localPosition: Vector3;
        localToWorldMatrix: Matrix4;
        normalMatrix: Matrix3;
    };
    export type ThreeDTransformTempMap = {
        [uid: number]: ThreeDTransformTempData;
    };
    export type ThreeDTransformTempData = {
        position: Vector3;
        localPosition: Vector3;
        localToWorldMatrix: Matrix4;
    };
    export type ThreeDTransformPositionMap = {
        [uid: number]: Vector3;
    };
    export type ThreeDTransformLocalPositionMap = {
        [uid: number]: Vector3;
    };
    export type ThreeDTransformLocalToWorldMatrixMap = {
        [uid: number]: Matrix4;
    };
}

declare module 'wonder.js/dist/es2015/component/transform/utils' {
    export const getUId: Function;
    export const isIndexUsed: Function;
    export const getStartIndexInArrayBuffer: () => number;
}

declare module 'wonder.js/dist/es2015/config/CompileConfig' {
    export const CompileConfig: {
        isCompileTest: boolean;
        closeContractTest: boolean;
    };
}

declare module 'wonder.js/dist/es2015/config/DataBufferConfig' {
    export const DataBufferConfig: {
        transformDataBufferCount: number;
        geometryDataBufferCount: number;
        basicMaterialDataBufferCount: number;
        lightMaterialDataBufferCount: number;
        textureDataBufferCount: number;
        ambientLightDataBufferCount: number;
        directionLightDataBufferCount: number;
        pointLightDataBufferCount: number;
        frontAmbientLightCount: number;
        frontDirectionLightCount: number;
        frontPointLightCount: number;
        deferAmbientLightCount: number;
        deferDirectionLightCount: number;
        deferPointLightCount: number;
        renderCommandBufferCount: number;
        geometryIndicesBufferBits: number;
    };
}

declare module 'wonder.js/dist/es2015/config/DebugConfig' {
    export const DebugConfig: {
        isTest: boolean;
        debugCollision: boolean;
        showDebugPanel: boolean;
    };
}

declare module 'wonder.js/dist/es2015/config/MemoryConfig' {
    export const MemoryConfig: {
        maxComponentDisposeCount: number;
    };
}

declare module 'wonder.js/dist/es2015/config/RenderWorkerConfig' {
    export const RenderWorkerConfig: {
        useRenderWorker: boolean;
    };
}

declare module 'wonder.js/dist/es2015/core/Director' {
    import { Scene } from "wonder.js/dist/es2015/core/entityObject/scene/Scene";
    import { Scheduler } from "wonder.js/dist/es2015/core/Scheduler";
    export class Director {
        static getInstance(): any;
        scene: Scene;
        scheduler: Scheduler;
        initWhenCreate(): void;
        start(): void;
        init(): void;
        loopBody(time: number): void;
    }
    export const isDirectorInit: () => boolean;
}

declare module 'wonder.js/dist/es2015/core/DirectorData' {
    import { Map } from "immutable";
    export class DirectorData {
        static state: Map<any, any>;
        static isInit: boolean;
    }
}

declare module 'wonder.js/dist/es2015/core/entityObject/gameObject/GameObject' {
    import { IUIdEntity } from "wonder.js/dist/es2015/core/entityObject/gameObject/IUIdEntity";
    export class GameObject implements IUIdEntity {
        uid: number;
    }
    export const createGameObject: () => any;
    export const addGameObjectComponent: Function;
    export const disposeGameObject: Function;
    export const initGameObject: Function;
    export const disposeGameObjectComponent: Function;
    export const getGameObjectComponent: Function;
    export const getGameObjectTransform: Function;
    export const getGameObjectMaterial: Function;
    export const getGameObjectAllComponents: Function;
    export const hasGameObjectComponent: Function;
    export const isGameObjectAlive: (gameObject: GameObject) => boolean;
    export const addGameObject: Function;
    export const addRemovedGameObject: Function;
    export const removeGameObject: Function;
    export const hasGameObject: Function;
    export const getGameObjectChildren: Function;
    export const getGameObjectParent: Function;
    export const setGameObjectParent: Function;
}

declare module 'wonder.js/dist/es2015/core/entityObject/gameObject/GameObjectData' {
    import { Component } from "wonder.js/dist/es2015/component/Component";
    import { IUIdEntity } from "wonder.js/dist/es2015/core/entityObject/gameObject/IUIdEntity";
    export class GameObjectData {
        static uid: number;
        static disposeCount: number;
        static componentMap: GameObjectComponentMap;
        static parentMap: GameObjectParentMap;
        static childrenMap: GameObjectChildrenMap;
        static aliveUIdArray: Array<number>;
    }
    export type GameObjectComponentMap = {
        [uid: number]: GameObjectComponentData;
    };
    export type GameObjectComponentData = {
        [componentId: number]: Component;
    };
    export type GameObjectParentMap = {
        [uid: number]: IUIdEntity;
    };
    export type GameObjectChildrenMap = {
        [uid: number]: Array<IUIdEntity>;
    };
    export type GameObjectUIdMap = {
        [uid: number]: boolean;
    };
}

declare module 'wonder.js/dist/es2015/core/entityObject/scene/Scene' {
    import { GameObject } from "wonder.js/dist/es2015/core/entityObject/gameObject/GameObject";
    export class Scene extends GameObject {
    }
    export const addSceneChild: Function;
    export const removeSceneChild: Function;
}

declare module 'wonder.js/dist/es2015/core/entityObject/scene/SceneData' {
    import { GameObject } from "wonder.js/dist/es2015/core/entityObject/gameObject/GameObject";
    export class SceneData {
        static cameraArray: Array<GameObject>;
    }
}

declare module 'wonder.js/dist/es2015/core/Main' {
    import { MainConfigData } from "wonder.js/dist/es2015/definition/type/mainType";
    export class Main {
        static isTest: boolean;
        static setConfig(configState: MainConfigData): typeof Main;
        static init(): typeof Main;
    }
    export const initAllData: () => void;
}

declare module 'wonder.js/dist/es2015/core/Scheduler' {
    export class Scheduler {
        static create(): Scheduler;
        update(elapsed: number): void;
        scheduleLoop(task: Function, args?: Array<any>): string;
        scheduleFrame(task: any, frame?: number, args?: any): string;
        scheduleInterval(task: any, time?: number, args?: any): string;
        scheduleTime(task: any, time?: number, args?: any): string;
        pause(scheduleId?: string): void;
        resume(scheduleId?: string): void;
        start(scheduleId?: string): void;
        stop(scheduleId?: string): void;
        has(scheduleId: string): boolean;
        remove(scheduleId: string): void;
        removeAll(): void;
    }
}

declare module 'wonder.js/dist/es2015/definition/GlobalTempData' {
    import { Matrix4 } from "wonder.js/dist/es2015/math/Matrix4";
    import { Vector3 } from "wonder.js/dist/es2015/math/Vector3";
    import { Quaternion } from "wonder.js/dist/es2015/math/Quaternion";
    export class GlobalTempData {
        static matrix4_1: Matrix4;
        static matrix4_2: Matrix4;
        static matrix4_3: Matrix4;
        static vector3_1: Vector3;
        static vector3_2: Vector3;
        static vector3_3: Vector3;
        static vector3_4: Vector3;
        static quaternion_1: Quaternion;
    }
}

declare module 'wonder.js/dist/es2015/definition/typescript/decorator/cache' {
    export function cache(judgeFunc: any, returnCacheValueFunc: any, setCacheFunc: any): (target: any, name: any, descriptor: any) => any;
}

declare module 'wonder.js/dist/es2015/definition/typescript/decorator/contract' {
    import { describe as describeCommonLib, it as itCommonLib } from "wonder-commonlib/dist/es2015/typescript/decorator/contract";
    export const describe: typeof describeCommonLib;
    export const it: typeof itCommonLib;
    export function requireCheck(inFunc: any): (target: any, name: any, descriptor: any) => any;
    export function requireCheckFunc(checkFunc: Function, bodyFunc: Function): Function;
    export function ensure(outFunc: any): (target: any, name: any, descriptor: any) => any;
    export function ensureFunc(checkFunc: Function, bodyFunc: Function): Function;
    export function ensureGetter(outFunc: any): (target: any, name: any, descriptor: any) => any;
}

declare module 'wonder.js/dist/es2015/definition/typescript/decorator/control' {
    export function execOnlyOnce(flagName: string): (target: any, name: any, descriptor: any) => any;
}

declare module 'wonder.js/dist/es2015/definition/typescript/decorator/registerClass' {
    export function registerClass(className: string): (_class: any) => void;
}

declare module 'wonder.js/dist/es2015/definition/typescript/decorator/singleton' {
    export function singleton(isInitWhenCreate?: boolean): (target: any) => void;
}

declare module 'wonder.js/dist/es2015/definition/typescript/decorator/virtual' {
    export function virtual(target: any, name: any, descriptor: any): any;
}

declare module 'wonder.js/dist/es2015/definition/Variable' {
    export var root: any;
}

declare module 'wonder.js/dist/es2015/device/WorkerDetectData' {
    export class WorkerDetectData {
        static isSupportRenderWorkerAndSharedArrayBuffer: boolean;
        static isSupportSharedArrayBuffer: boolean;
        static renderWorkerFileDir: string;
    }
}

declare module 'wonder.js/dist/es2015/math/Global' {
    export const DEG_TO_RAD: number;
    export const RAD_TO_DEG: number;
}

declare module 'wonder.js/dist/es2015/math/Matrix3' {
    import { Vector2 } from "wonder.js/dist/es2015/math/Vector2";
    export class Matrix3 {
        static create(mat: Float32Array): Matrix3;
        static create(): Matrix3;
        constructor(mat: Float32Array);
        constructor();
        a: number;
        c: number;
        b: number;
        d: number;
        tx: number;
        ty: number;
        values: Float32Array;
        setIdentity(): Matrix3;
        invert(): Matrix3;
        multiplyScalar(s: number): this;
        multiplyVector2(vector: Vector2): Vector2;
        multiplyPoint(vector: Vector2): Vector2;
        multiply(matrix: Matrix3): this;
        transpose(): Matrix3;
        clone(): Matrix3;
        cloneToArray(array: Float32Array, offset?: number): Matrix3;
        set(matrix: Matrix3): this;
        setTS(t: Vector2, s: Vector2): void;
        rotate(angle: number): this;
        setRotation(angle: number): this;
        translate(x: number, y: number): void;
        setPosition(x: number, y: number): void;
        scale(x: number, y: number): this;
        setScale(x: number, y: number): this;
        getTranslation(): Vector2;
        getScale(): Vector2;
        getRotation(): number;
        getSkew(): Vector2;
    }
}

declare module 'wonder.js/dist/es2015/math/Matrix4' {
    import { Matrix3 } from "wonder.js/dist/es2015/math/Matrix3";
    import { Vector3 } from "wonder.js/dist/es2015/math/Vector3";
    import { Vector4 } from "wonder.js/dist/es2015/math/Vector4";
    import { Quaternion } from "wonder.js/dist/es2015/math/Quaternion";
    export class Matrix4 {
        static create(mat: Float32Array): Matrix4;
        static create(): Matrix4;
        constructor(mat: Float32Array);
        constructor();
        values: Float32Array;
        set(initialM11: number, initialM12: number, initialM13: number, initialM14: number, initialM21: number, initialM22: number, initialM23: number, initialM24: number, initialM31: number, initialM32: number, initialM33: number, initialM34: number, initialM41: number, initialM42: number, initialM43: number, initialM44: number): this;
        setIdentity(): Matrix4;
        invert(): Matrix4;
        invertTo3x3(): Matrix3;
        transpose(): Matrix4;
        setTranslate(x: any, y: any, z: any): Matrix4;
        translate(x: any, y: any, z: any, GlobalTempData: any): Matrix4;
        setRotate(angle: number, x: number, y: number, z: number): Matrix4;
        rotate(angle: any, vector3: Vector3, GlobalTempData: any): Matrix4;
        rotate(angle: any, x: any, y: any, z: any, GlobalTempData: any): Matrix4;
        setScale(x: any, y: any, z: any): Matrix4;
        scale(x: any, y: any, z: any, GlobalTempData: any): Matrix4;
        setOrtho(left: number, right: number, bottom: number, top: number, near: number, far: number): Matrix4;
        ortho(left: number, right: number, bottom: number, top: number, near: number, far: number, GlobalTempData: any): Matrix4;
        setPerspective(fovy: number, aspect: number, near: number, far: number): Matrix4;
        perspective(fovy: number, aspect: number, near: number, far: number, GlobalTempData: any): Matrix4;
        applyMatrix(other: Matrix4, GlobalTempData: any, notChangeSelf?: boolean): Matrix4;
        multiply(matrix: Matrix4): Matrix4;
        multiply(matrix1: Matrix4, matrix2: Matrix4): Matrix4;
        multiplyVector4(vector: Vector4, isChangeVector?: boolean): Vector4;
        multiplyVector3(vector: Vector3): Vector3;
        multiplyPoint(vector: Vector3): Vector3;
        clone(): Matrix4;
        cloneToArray(array: Float32Array, offset?: number): Matrix4;
        getX(): Vector3;
        getY(): Vector3;
        getZ(): Vector3;
        getTranslation(): Vector3;
        getScale(): Vector3;
        getRotation(): Quaternion;
        getEulerAngles(): any;
        setTRS(t: Vector3, r: Quaternion, s: Vector3): this;
    }
}

declare module 'wonder.js/dist/es2015/math/Quaternion' {
    import { Vector3 } from "wonder.js/dist/es2015/math/Vector3";
    import { Matrix4 } from "wonder.js/dist/es2015/math/Matrix4";
    export class Quaternion {
        static create(x?: number, y?: number, z?: number, w?: number): Quaternion;
        constructor(x?: number, y?: number, z?: number, w?: number);
        x: number;
        y: number;
        z: number;
        w: number;
        setFromEulerAngles(eulerAngles: Vector3): this;
        multiply(rhs: Quaternion): any;
        multiply(rhs1: Quaternion, rhs2: Quaternion): any;
        setFromMatrix(matrix: Matrix4): this;
        setFromAxisAngle(angle: number, axis: Vector3): this;
        invert(): this;
        conjugate(): this;
        clone(): Quaternion;
        normalize(): this;
        length(): any;
        multiplyVector3(vector: Vector3): Vector3;
        set(x: number, y: number, z: number, w: number): this;
        sub(quat: Quaternion): this;
        getEulerAngles(): any;
        slerp(left: Quaternion, right: Quaternion, amount: number): Quaternion;
    }
}

declare module 'wonder.js/dist/es2015/math/Vector2' {
    export class Vector2 {
        static create(x: any, y: any): Vector2;
        static create(): Vector2;
        constructor(x: any, y: any);
        constructor();
        x: number;
        y: number;
        values: Float32Array;
        set(x: number, y: number): void;
        add(v: Vector2): this;
        addScalar(s: number): this;
        multiplyScalar(s: number): this;
        mul(v: Vector2): this;
        isEqual(v: Vector2): boolean;
        clone(): Vector2;
    }
}

declare module 'wonder.js/dist/es2015/math/Vector3' {
    import { Vector4 } from "wonder.js/dist/es2015/math/Vector4";
    import { Matrix3 } from "wonder.js/dist/es2015/math/Matrix3";
    import { Matrix4 } from "wonder.js/dist/es2015/math/Matrix4";
    export class Vector3 {
        static up: any;
        static forward: any;
        static right: any;
        static create(x: number, y: number, z: number): Vector3;
        static create(): Vector3;
        constructor(x: number, y: number, z: number);
        constructor();
        x: number;
        y: number;
        z: number;
        values: Float32Array;
        normalize(): Vector3;
        isZero(): boolean;
        scale(scalar: number): any;
        scale(x: number, y: number, z: number): any;
        set(v: Vector3): any;
        set(x: number, y: number, z: number): any;
        sub(v: Vector3): Vector3;
        sub2(v1: Vector3, v2: Vector3): this;
        add(v: Vector3): this;
        add2(v1: Vector3, v2: Vector3): this;
        mul(v: Vector3): this;
        mul2(v1: Vector3, v2: Vector3): this;
        reverse(): Vector3;
        clone(): Vector3;
        toVector4(): Vector4;
        length(): any;
        cross(lhs: Vector3, rhs: Vector3): this;
        lerp(lhs: Vector3, rhs: Vector3, alpha: number): this;
        dot(rhs: any): number;
        calAngleCos(v1: Vector3): number;
        min(v: Vector3): this;
        max(v: Vector3): this;
        isEqual(v: Vector3): boolean;
        toArray(): number[];
        applyMatrix3(m: Matrix3): this;
        applyMatrix4(m: Matrix4): this;
        distanceTo(v: Vector3): any;
        distanceToSquared(v: Vector3): number;
    }
}

declare module 'wonder.js/dist/es2015/math/Vector4' {
    import { Vector3 } from "wonder.js/dist/es2015/math/Vector3";
    export class Vector4 {
        static create(x: any, y: any, z: any, w: any): any;
        static create(): any;
        constructor(x: any, y: any, z: any, w: any);
        constructor();
        x: number;
        y: number;
        z: number;
        w: number;
        values: Float32Array;
        normalize(): Vector4;
        isEqual(v: Vector4): boolean;
        clone(): Vector4;
        toVector3(): Vector3;
        lengthManhattan(): any;
        multiplyScalar(scalar: number): this;
        divideScalar(scalar: number): this;
        dot(v: Vector4): number;
        set(x: number, y: number, z: number, w: number): void;
        applyMatrix4(mat4Values: Float32Array, isChangeSelf?: boolean): Vector4;
        protected copyHelper(vector4: Vector4): any;
    }
}

declare module 'wonder.js/dist/es2015/renderer/buffer/ArrayBufferData' {
    export class ArrayBufferData {
        static vertexBuffers: Array<WebGLBuffer>;
        static normalBuffers: Array<WebGLBuffer>;
        static texCoordBuffers: Array<WebGLBuffer>;
    }
}

declare module 'wonder.js/dist/es2015/renderer/buffer/IndexBufferData' {
    export class IndexBufferData {
        static buffers: Array<WebGLBuffer>;
    }
}

declare module 'wonder.js/dist/es2015/renderer/command_buffer/BasicRenderCommandBufferData' {
    export class BasicRenderCommandBufferData {
        static buffer: SharedArrayBuffer;
        static mMatrices: Float32Array;
        static materialIndices: Uint32Array;
        static geometryIndices: Uint32Array;
    }
}

declare module 'wonder.js/dist/es2015/renderer/command_buffer/LightRenderCommandBufferData' {
    export class LightRenderCommandBufferData {
        static buffer: SharedArrayBuffer;
        static mMatrices: Float32Array;
        static materialIndices: Uint32Array;
        static geometryIndices: Uint32Array;
    }
}

declare module 'wonder.js/dist/es2015/renderer/config/InitConfigData' {
    export class InitConfigData {
        static isTest: boolean;
    }
}

declare module 'wonder.js/dist/es2015/renderer/device/DeviceManager' {
    export const getDeviceManagerGL: () => WebGLRenderingContext;
    export const setDeviceManagerGL: (gl: WebGLRenderingContext) => any;
    export const getDeviceManagerViewport: () => any;
    export const getDeviceManagerClearColor: () => any;
    export var setDeviceManagerViewport: any, setDeviceManagerClearColor: any;
}

declare module 'wonder.js/dist/es2015/renderer/device/DeviceManagerData' {
    import { EWebGLVersion } from "wonder.js/dist/es2015/renderer/enum/EWebGLVersion";
    import { DeviceManagerDataCommon } from "wonder.js/dist/es2015/renderer/utils/worker/render_file/device/DeviceManagerDataCommon";
    export class DeviceManagerData extends DeviceManagerDataCommon {
        static webglVersion: EWebGLVersion;
    }
}

declare module 'wonder.js/dist/es2015/renderer/device/EScreenSize' {
    export enum EScreenSize {
        FULL = 0,
    }
}

declare module 'wonder.js/dist/es2015/renderer/device/GPUDetectData' {
    import { GPUDetectDataCommon } from "wonder.js/dist/es2015/renderer/utils/worker/render_file/device/GPUDetectDataCommon";
    export class GPUDetectData extends GPUDetectDataCommon {
    }
}

declare module 'wonder.js/dist/es2015/renderer/device/WebGLDetectData' {
    import { EWebGLVersion } from "wonder.js/dist/es2015/renderer/enum/EWebGLVersion";
    export class WebGLDetectData {
        static version: EWebGLVersion;
    }
}

declare module 'wonder.js/dist/es2015/renderer/draw/basic/BasicDrawRenderCommandBufferData' {
    export class BasicDrawRenderCommandBufferData {
        static mMatrixFloatArrayForSend: Float32Array;
    }
}

declare module 'wonder.js/dist/es2015/renderer/draw/light/LightDrawRenderCommandBufferData' {
    export class LightDrawRenderCommandBufferData {
        static mMatrixFloatArrayForSend: Float32Array;
        static vMatrixFloatArrayForSend: Float32Array;
        static pMatrixFloatArrayForSend: Float32Array;
        static normalMatrixFloatArrayForSend: Float32Array;
        static cameraPositionForSend: Float32Array;
    }
}

declare module 'wonder.js/dist/es2015/renderer/enum/EBlendEquation' {
    export enum EBlendEquation {
        ADD = "FUNC_ADD",
        SUBTRACT = "FUNC_SUBTRACT",
        REVERSE_SUBTRAC = "FUNC_REVERSE_SUBTRACT",
    }
}

declare module 'wonder.js/dist/es2015/renderer/enum/EBlendFunc' {
    export enum EBlendFunc {
        ZERO = "ZEOR",
        ONE = "ONE",
        SRC_COLOR = "SRC_COLOR",
        ONE_MINUS_SRC_COLOR = "ONE_MINUS_SRC_COLOR",
        DST_COLOR = "DST_COLOR",
        ONE_MINUS_DST_COLOR = "ONE_MINUS_DST_COLOR",
        SRC_ALPHA = "SRC_ALPHA",
        SRC_ALPHA_SATURATE = "SRC_ALPHA_SATURATE",
        ONE_MINUS_SRC_ALPHA = "ONE_MINUS_SRC_ALPHA",
        DST_ALPHA = "DST_ALPHA",
        ONE_MINUS_DST_ALPH = "ONE_MINUS_DST_ALPHA",
    }
}

declare module 'wonder.js/dist/es2015/renderer/enum/EBufferType' {
    export enum EBufferType {
        BYTE = "BYTE",
        UNSIGNED_BYTE = "UNSIGNED_BYTE",
        SHORT = "SHORT",
        UNSIGNED_SHORT = "UNSIGNED_SHORT",
        INT = "INT",
        UNSIGNED_INT = "UNSIGNED_INT",
        FLOAT = "FLOAT",
    }
}

declare module 'wonder.js/dist/es2015/renderer/enum/EDrawMode' {
    export enum EDrawMode {
        POINTS = "POINTS",
        LINES = "LINES",
        LINE_LOOP = "LINE_LOOP",
        LINE_STRIP = "LINE_STRIP",
        TRIANGLES = "TRIANGLES",
        TRIANGLE_STRIP = "TRIANGLE_STRIP",
        TRANGLE_FAN = "TRIANGLE_FAN",
    }
}

declare module 'wonder.js/dist/es2015/renderer/enum/EGeometryWorkerDataOperateType' {
    export enum EGeometryWorkerDataOperateType {
        ADD = 0,
        RESET = 1,
    }
}

declare module 'wonder.js/dist/es2015/renderer/enum/EGPUPrecision' {
    export enum EGPUPrecision {
        HIGHP = 0,
        MEDIUMP = 1,
        LOWP = 2,
    }
}

declare module 'wonder.js/dist/es2015/renderer/enum/ELightWorkerDataOperateType' {
    export enum ELightWorkerDataOperateType {
        ADD = 0,
        EDIT = 1,
        DISPOSE = 2,
    }
}

declare module 'wonder.js/dist/es2015/renderer/enum/ESide' {
    export enum ESide {
        NONE = 0,
        BOTH = 1,
        BACK = 2,
        FRONT = 3,
    }
}

declare module 'wonder.js/dist/es2015/renderer/enum/ETextureFilterMode' {
    export enum ETextureFilterMode {
        NEAREST = "NEAREST",
        NEAREST_MIPMAP_MEAREST = "NEAREST_MIPMAP_MEAREST",
        NEAREST_MIPMAP_LINEAR = "NEAREST_MIPMAP_LINEAR",
        LINEAR = "LINEAR",
        LINEAR_MIPMAP_NEAREST = "LINEAR_MIPMAP_NEAREST",
        LINEAR_MIPMAP_LINEAR = "LINEAR_MIPMAP_LINEAR",
    }
}

declare module 'wonder.js/dist/es2015/renderer/enum/ETextureFormat' {
    export enum ETextureFormat {
        RGB = "RGB",
        RGBA = "RGBA",
        ALPHA = "ALPHA",
        LUMINANCE = "LUMINANCE",
        LUMINANCE_ALPHA = "LUMINANCE_ALPHA",
        RGB_S3TC_DXT1 = "RGB_S3TC_DXT1",
        RGBA_S3TC_DXT1 = "RGBA_S3TC_DXT1",
        RGBA_S3TC_DXT3 = "RGBA_S3TC_DXT3",
        RGBA_S3TC_DXT5 = "RGBA_S3TC_DXT5",
    }
}

declare module 'wonder.js/dist/es2015/renderer/enum/ETextureTarget' {
    export enum ETextureTarget {
        TEXTURE_2D = "TEXTURE_2D",
    }
}

declare module 'wonder.js/dist/es2015/renderer/enum/ETextureType' {
    export enum ETextureType {
        UNSIGNED_BYTE = "UNSIGNED_BYTE",
        UNSIGNED_SHORT_5_6_5 = "UNSIGNED_SHORT_5_6_5",
        UNSIGNED_SHORT_4_4_4_4 = "UNSIGNED_SHORT_4_4_4_4",
        UNSIGNED_SHORT_5_5_5_1 = "UNSIGNED_SHORT_5_5_5_1",
    }
}

declare module 'wonder.js/dist/es2015/renderer/enum/ETextureWrapMode' {
    export enum ETextureWrapMode {
        REPEAT = "REPEAT",
        MIRRORED_REPEAT = "MIRRORED_REPEAT",
        CLAMP_TO_EDGE = "CLAMP_TO_EDGE",
    }
}

declare module 'wonder.js/dist/es2015/renderer/enum/EVariableType' {
    export enum EVariableType {
        INT = "int",
        FLOAT = "float",
        FLOAT3 = "float3",
        VEC3 = "vec3",
        MAT3 = "mat3",
        MAT4 = "mat4",
        SAMPLER_2D = "sampler2D",
    }
}

declare module 'wonder.js/dist/es2015/renderer/enum/EWebGLVersion' {
    export enum EWebGLVersion {
        WEBGL1 = 0,
        WEBGL2 = 1,
    }
}

declare module 'wonder.js/dist/es2015/renderer/shader/chunk/ShaderChunk' {
    export const empty: GLSLChunk;
    export const NULL: number;
    export const common_define: GLSLChunk;
    export const common_fragment: GLSLChunk;
    export const common_function: GLSLChunk;
    export const common_vertex: GLSLChunk;
    export const highp_fragment: GLSLChunk;
    export const lowp_fragment: GLSLChunk;
    export const mediump_fragment: GLSLChunk;
    export const modelMatrix_noInstance_vertex: GLSLChunk;
    export const webgl1_noShadowMap_fragment: GLSLChunk;
    export const webgl1_basic_end_fragment: GLSLChunk;
    export const webgl1_basic_materialColor_fragment: GLSLChunk;
    export const frontLight_common: GLSLChunk;
    export const frontLight_common_fragment: GLSLChunk;
    export const frontLight_common_vertex: GLSLChunk;
    export const frontLight_end_fragment: GLSLChunk;
    export const frontLight_fragment: GLSLChunk;
    export const frontLight_setWorldPosition_vertex: GLSLChunk;
    export const frontLight_vertex: GLSLChunk;
    export const webgl1_normalMatrix_noInstance_vertex: GLSLChunk;
    export const webgl1_basic_map_fragment: GLSLChunk;
    export const webgl1_basic_map_vertex: GLSLChunk;
    export const webgl1_diffuseMap_fragment: GLSLChunk;
    export const webgl1_diffuseMap_vertex: GLSLChunk;
    export const webgl1_noDiffuseMap_fragment: GLSLChunk;
    export const webgl1_noEmissionMap_fragment: GLSLChunk;
    export const webgl1_noLightMap_fragment: GLSLChunk;
    export const webgl1_noNormalMap_fragment: GLSLChunk;
    export const webgl1_noNormalMap_vertex: GLSLChunk;
    export const webgl1_noSpecularMap_fragment: GLSLChunk;
    export const webgl1_specularMap_fragment: GLSLChunk;
    export const webgl1_specularMap_vertex: GLSLChunk;
    export const webgl2_deferLightPass_directionLight_noNormalMap_fragment: GLSLChunk;
    export const webgl2_deferLightPass_pointLight_noNormalMap_fragment: GLSLChunk;
    export const webgl2_noShadowMap_fragment: GLSLChunk;
    export const webgl2_basic_end_fragment: GLSLChunk;
    export const webgl2_basic_materialColor_fragment: GLSLChunk;
    export const webgl2_basic_vertex: GLSLChunk;
    export const ubo_light: GLSLChunk;
    export const ubo_camera: GLSLChunk;
    export const version: GLSLChunk;
    export const webgl2_common_define: GLSLChunk;
    export const webgl2_common_fragment: GLSLChunk;
    export const webgl2_common_function: GLSLChunk;
    export const webgl2_common_vertex: GLSLChunk;
    export const webgl2_basic_map_fragment: GLSLChunk;
    export const webgl2_basic_map_vertex: GLSLChunk;
    export const gbuffer_common_fragment: GLSLChunk;
    export const gbuffer_common_vertex: GLSLChunk;
    export const gbuffer_end_fragment: GLSLChunk;
    export const gbuffer_fragment: GLSLChunk;
    export const gbuffer_setWorldPosition_vertex: GLSLChunk;
    export const gbuffer_vertex: GLSLChunk;
    export const deferLightPass_common: GLSLChunk;
    export const deferLightPass_directionLight_pointLight_common: GLSLChunk;
    export const deferLightPass_end_fragment: GLSLChunk;
    export const deferLightPass_vertex: GLSLChunk;
    export const webgl2_normalMatrix_noInstance_vertex: GLSLChunk;
    export const webgl2_diffuseMap_fragment: GLSLChunk;
    export const webgl2_diffuseMap_vertex: GLSLChunk;
    export const webgl2_gbuffer_noNormalMap_fragment: GLSLChunk;
    export const webgl2_gbuffer_noNormalMap_vertex: GLSLChunk;
    export const webgl2_noDiffuseMap_fragment: GLSLChunk;
    export const webgl2_noSpecularMap_fragment: GLSLChunk;
    export const webgl2_specularMap_fragment: GLSLChunk;
    export const webgl2_specularMap_vertex: GLSLChunk;
    export const deferLightPass_ambientLight_fragment: GLSLChunk;
    export const ubo_ambientLight: GLSLChunk;
    export const deferLightPass_directionLight_common: GLSLChunk;
    export const deferLightPass_directionLight_fragment: GLSLChunk;
    export const ubo_directionLight: GLSLChunk;
    export const deferLightPass_pointLight_common: GLSLChunk;
    export const deferLightPass_pointLight_fragment: GLSLChunk;
    export const ubo_pointLight: GLSLChunk;
    export const webgl2_deferLightPass_noNormalMap_fragment: GLSLChunk;
    export const webgl2_noEmissionMap_fragment: GLSLChunk;
    export const webgl2_noLightMap_fragment: GLSLChunk;
    export type GLSLChunk = {
        top: string;
        define: string;
        varDeclare: string;
        funcDeclare: string;
        funcDefine: string;
        body: string;
    };
}

declare module 'wonder.js/dist/es2015/renderer/texture/MapManagerData' {
    import { MaterialTextureList, TextureOffsetMap } from "wonder.js/dist/es2015/renderer/type/dataType";
    export class MapManagerData {
        static buffer: SharedArrayBuffer;
        static textureIndices: Uint32Array;
        static textureCounts: Uint8Array;
        static materialTextureList: MaterialTextureList;
        static textureOffsetMap: TextureOffsetMap;
    }
}

declare module 'wonder.js/dist/es2015/renderer/texture/Texture' {
    import { ITexture } from "wonder.js/dist/es2015/renderer/interface/ITexture";
    export class Texture implements ITexture {
        index: number;
    }
    export const createTexture: () => any;
    export const initTexture: (texture: Texture) => void;
    export const disposeTexture: Function;
    export const getTextureSource: Function;
    export const setTextureSource: Function;
    export const getTextureWidth: Function;
    export const setTextureWidth: Function;
    export const getTextureHeight: Function;
    export const setTextureHeight: Function;
    export const getTextureIsNeedUpdate: Function;
    export const setTextureIsNeedUpdate: Function;
}

declare module 'wonder.js/dist/es2015/renderer/texture/TextureCacheData' {
    export class TextureCacheData {
        static bindTextureUnitCache: Array<number>;
    }
}

declare module 'wonder.js/dist/es2015/renderer/texture/TextureData' {
    import { DisposedTextureDataMap } from "wonder.js/dist/es2015/renderer/type/dataType";
    import { ITexture } from "wonder.js/dist/es2015/renderer/interface/ITexture";
    export class TextureData {
        static index: number;
        static glTextures: Array<WebGLTexture>;
        static sourceMap: Array<HTMLImageElement>;
        static textureMap: Array<ITexture>;
        static uniformSamplerNameMap: Array<string>;
        static buffer: SharedArrayBuffer;
        static widths: Float32Array;
        static heights: Float32Array;
        static isNeedUpdates: Uint8Array;
        static defaultWidth: number;
        static defaultHeight: number;
        static defaultIsNeedUpdate: number;
        static disposedTextureDataMap: DisposedTextureDataMap;
        static needInitedTextureIndexArr: Array<number>;
        static needAddedSourceArr: Array<HTMLImageElement>;
    }
}

declare module 'wonder.js/dist/es2015/renderer/utils/worker/render_file/device/DeviceManagerDataCommon' {
    import { Color } from "wonder.js/dist/es2015/structure/Color";
    import { ESide } from "wonder.js/dist/es2015/renderer/enum/ESide";
    import { EBlendFunc } from "wonder.js/dist/es2015/renderer/enum/EBlendFunc";
    import { EBlendEquation } from "wonder.js/dist/es2015/renderer/enum/EBlendEquation";
    export class DeviceManagerDataCommon {
        static gl: any;
        static clearColor: Color;
        static writeRed: boolean;
        static writeGreen: boolean;
        static writeBlue: boolean;
        static writeAlpha: boolean;
        static side: ESide;
        static depthWrite: boolean;
        static blend: boolean;
        static depthTest: boolean;
        static scissorTest: boolean;
        static blendSrc: EBlendFunc;
        static blendDst: EBlendFunc;
        static blendEquation: EBlendEquation;
        static blendFuncSeparate: Array<EBlendFunc>;
    }
}

declare module 'wonder.js/dist/es2015/renderer/utils/worker/render_file/device/GPUDetectDataCommon' {
    export class GPUDetectDataCommon {
        static maxTextureUnit: number;
        static maxTextureSize: number;
        static maxCubemapTextureSize: number;
        static maxAnisotropy: number;
        static maxBoneCount: number;
        static maxUniformBufferBindings: number;
        static extensionCompressedTextureS3TC: any;
        static extensionTextureFilterAnisotropic: any;
        static extensionInstancedArrays: any;
        static extensionUintIndices: boolean;
        static extensionDepthTexture: boolean;
        static extensionVao: any;
        static extensionStandardDerivatives: boolean;
        static extensionColorBufferFloat: boolean;
        static precision: number;
    }
}

declare module 'wonder.js/dist/es2015/renderer/utils/worker/render_file/vao/VaoDataCommon' {
    import { VaoMap, VboArrayMap } from "wonder.js/dist/es2015/renderer/type/dataType";
    export abstract class VaoDataCommon {
        static vaoMap: VaoMap;
        static vboArrayMap: VboArrayMap;
    }
}

declare module 'wonder.js/dist/es2015/renderer/vao/VaoData' {
    import { VaoDataCommon } from "wonder.js/dist/es2015/renderer/utils/worker/render_file/vao/VaoDataCommon";
    export class VaoData extends VaoDataCommon {
    }
}

declare module 'wonder.js/dist/es2015/renderer/webgl1/light/DirectionLightData' {
    import { DirectionLightGLSLDataStructure } from "wonder.js/dist/es2015/renderer/type/dataType";
    import { DirectionLightData } from "wonder.js/dist/es2015/component/light/DirectionLightData";
    export class WebGL1DirectionLightData extends DirectionLightData {
        static lightGLSLDataStructureMemberNameArr: Array<DirectionLightGLSLDataStructure>;
    }
}

declare module 'wonder.js/dist/es2015/renderer/webgl1/light/PointLightData' {
    import { PointLightGLSLDataStructure } from "wonder.js/dist/es2015/renderer/type/dataType";
    import { PointLightData } from "wonder.js/dist/es2015/component/light/PointLightData";
    export class WebGL1PointLightData extends PointLightData {
        static lightGLSLDataStructureMemberNameArr: Array<PointLightGLSLDataStructure>;
    }
}

declare module 'wonder.js/dist/es2015/renderer/webgl1/shader/glslSender/GLSLSenderData' {
    import { WebGL1GLSLSenderDataCommon } from "wonder.js/dist/es2015/renderer/webgl1/utils/worker/render_file/shader/glslSender/GLSLSenderDataCommon";
    export class WebGL1GLSLSenderData extends WebGL1GLSLSenderDataCommon {
    }
}

declare module 'wonder.js/dist/es2015/renderer/webgl1/shader/location/LocationData' {
    import { WebGL1LocationDataCommon } from "wonder.js/dist/es2015/renderer/webgl1/utils/worker/render_file/shader/location/LocationDataCommon";
    export class WebGL1LocationData extends WebGL1LocationDataCommon {
    }
}

declare module 'wonder.js/dist/es2015/renderer/webgl1/shader/program/ProgramData' {
    import { WebGL1ProgramDataCommon } from "wonder.js/dist/es2015/renderer/webgl1/utils/worker/render_file/shader/program/ProgramDataCommon";
    export class WebGL1ProgramData extends WebGL1ProgramDataCommon {
    }
}

declare module 'wonder.js/dist/es2015/renderer/webgl1/shader/ShaderData' {
    import { WebGL1ShaderDataCommon } from "wonder.js/dist/es2015/renderer/webgl1/utils/worker/render_file/shader/ShaderDataCommon";
    export class WebGL1ShaderData extends WebGL1ShaderDataCommon {
    }
}

declare module 'wonder.js/dist/es2015/renderer/webgl1/shader/snippet/ShaderSnippet' {
    export const webgl1_main_begin: string;
    export const webgl1_main_end: string;
    export const webgl1_setPos_mvp: string;
}

declare module 'wonder.js/dist/es2015/renderer/webgl1/utils/worker/render_file/shader/glslSender/GLSLSenderDataCommon' {
    import { AttributeLocationMap, SendAttributeConfigMap, SendUniformConfigMap, SendUniformFuncConfigMap, UniformCacheMap } from "wonder.js/dist/es2015/renderer/type/dataType";
    import { VaoConfigMap } from "wonder.js/dist/es2015/renderer/type/dataType";
    export class WebGL1GLSLSenderDataCommon {
        static vaoConfigMap: VaoConfigMap;
        static uniformCacheMap: UniformCacheMap;
        static attributeLocationMap: AttributeLocationMap;
        static sendAttributeConfigMap: SendAttributeConfigMap;
        static sendUniformConfigMap: SendUniformConfigMap;
        static sendUniformFuncConfigMap: SendUniformFuncConfigMap;
        static vertexAttribHistory: Array<boolean>;
    }
}

declare module 'wonder.js/dist/es2015/renderer/webgl1/utils/worker/render_file/shader/location/LocationDataCommon' {
    import { AttributeLocationMap, UniformLocationMap } from "wonder.js/dist/es2015/renderer/type/dataType";
    export abstract class WebGL1LocationDataCommon {
        static attributeLocationMap: AttributeLocationMap;
        static uniformLocationMap: UniformLocationMap;
    }
}

declare module 'wonder.js/dist/es2015/renderer/webgl1/utils/worker/render_file/shader/program/ProgramDataCommon' {
    import { ProgramMap } from "wonder.js/dist/es2015/renderer/type/dataType";
    export abstract class WebGL1ProgramDataCommon {
        static programMap: ProgramMap;
        static lastUsedProgram: WebGLProgram;
        static lastBindedArrayBuffer: WebGLBuffer;
        static lastBindedIndexBuffer: WebGLBuffer;
    }
}

declare module 'wonder.js/dist/es2015/renderer/webgl1/utils/worker/render_file/shader/ShaderDataCommon' {
    import { ShaderIndexMap, ShaderLibNameMap } from "wonder.js/dist/es2015/renderer/type/dataType";
    export abstract class WebGL1ShaderDataCommon {
        static index: number;
        static count: number;
        static shaderIndexMap: ShaderIndexMap;
        static shaderLibNameMap: ShaderLibNameMap;
    }
}

declare module 'wonder.js/dist/es2015/renderer/webgl2/light/DirectionLightData' {
    import { DirectionLightData } from "wonder.js/dist/es2015/component/light/DirectionLightData";
    export class WebGL2DirectionLightData extends DirectionLightData {
    }
}

declare module 'wonder.js/dist/es2015/renderer/webgl2/light/PointLightData' {
    import { PointLightData } from "wonder.js/dist/es2015/component/light/PointLightData";
    export class WebGL2PointLightData extends PointLightData {
    }
}

declare module 'wonder.js/dist/es2015/renderer/webgl2/render/light/defer/gbuffer/GBufferData' {
    export class GBufferData {
        static gBuffer: WebGLFramebuffer;
        static positionTarget: WebGLTexture;
        static normalTarget: WebGLTexture;
        static colorTarget: WebGLTexture;
        static depthTexture: WebGLTexture;
    }
}

declare module 'wonder.js/dist/es2015/renderer/webgl2/render/light/defer/light/DeferAmbientLightPassData' {
    import { DeferAmbientLightPassDataCommon } from "wonder.js/dist/es2015/renderer/webgl2/utils/render/light/defer/light/DeferAmbientLightPassDataCommon";
    export class DeferAmbientLightPassData extends DeferAmbientLightPassDataCommon {
    }
}

declare module 'wonder.js/dist/es2015/renderer/webgl2/render/light/defer/light/DeferDirectionLightPassData' {
    import { DeferDirectionLightPassDataCommon } from "wonder.js/dist/es2015/renderer/webgl2/utils/render/light/defer/light/DeferDirectionLightPassDataCommon";
    export class DeferDirectionLightPassData extends DeferDirectionLightPassDataCommon {
    }
}

declare module 'wonder.js/dist/es2015/renderer/webgl2/render/light/defer/light/DeferPointLightPassData' {
    import { DeferPointLightPassDataCommon } from "wonder.js/dist/es2015/renderer/webgl2/utils/render/light/defer/light/DeferPointLightPassDataCommon";
    export class DeferPointLightPassData extends DeferPointLightPassDataCommon {
    }
}

declare module 'wonder.js/dist/es2015/renderer/webgl2/shader/glslSender/GLSLSenderData' {
    import { WebGL2GLSLSenderDataCommon } from "wonder.js/dist/es2015/renderer/webgl2/utils/worker/render_file/shader/glslSender/GLSLSenderDataCommon";
    export class WebGL2GLSLSenderData extends WebGL2GLSLSenderDataCommon {
    }
}

declare module 'wonder.js/dist/es2015/renderer/webgl2/shader/location/LocationData' {
    import { WebGL2LocationDataCommon } from "wonder.js/dist/es2015/renderer/webgl2/utils/worker/render_file/shader/location/LocationDataCommon";
    export class WebGL2LocationData extends WebGL2LocationDataCommon {
    }
}

declare module 'wonder.js/dist/es2015/renderer/webgl2/shader/program/ProgramData' {
    import { WebGL2ProgramDataCommon } from "wonder.js/dist/es2015/renderer/webgl2/utils/worker/render_file/shader/program/ProgramDataCommon";
    export class WebGL2ProgramData extends WebGL2ProgramDataCommon {
    }
}

declare module 'wonder.js/dist/es2015/renderer/webgl2/shader/ShaderData' {
    import { WebGL2ShaderDataCommon } from "wonder.js/dist/es2015/renderer/webgl2/utils/worker/render_file/shader/ShaderDataCommon";
    export class WebGL2ShaderData extends WebGL2ShaderDataCommon {
    }
}

declare module 'wonder.js/dist/es2015/renderer/webgl2/shader/snippet/ShaderSnippet' {
    export const webgl2_main_begin: string;
    export const webgl2_main_end: string;
    export const webgl2_setPos_mvp: string;
}

declare module 'wonder.js/dist/es2015/renderer/webgl2/utils/render/light/defer/light/DeferAmbientLightPassDataCommon' {
    import { WebGLVertexArrayObject } from "wonder.js/dist/es2015/renderer/extend/interface";
    export abstract class DeferAmbientLightPassDataCommon {
        static fullScreenQuadVertexArray: WebGLVertexArrayObject;
        static fullScreenQuadIndicesCount: number;
    }
}

declare module 'wonder.js/dist/es2015/renderer/webgl2/utils/render/light/defer/light/DeferDirectionLightPassDataCommon' {
    import { WebGLVertexArrayObject } from "wonder.js/dist/es2015/renderer/extend/interface";
    export abstract class DeferDirectionLightPassDataCommon {
        static fullScreenQuadVertexArray: WebGLVertexArrayObject;
        static fullScreenQuadIndicesCount: number;
    }
}

declare module 'wonder.js/dist/es2015/renderer/webgl2/utils/render/light/defer/light/DeferPointLightPassDataCommon' {
    import { WebGLVertexArrayObject } from "wonder.js/dist/es2015/renderer/extend/interface";
    import { ScissorRegionArrayCacheMap } from "wonder.js/dist/es2015/renderer/webgl2/type/utilsType";
    export abstract class DeferPointLightPassDataCommon {
        static fullScreenQuadVertexArray: WebGLVertexArrayObject;
        static fullScreenQuadIndicesCount: number;
        static scissorRegionArrayCacheMap: ScissorRegionArrayCacheMap;
    }
}

declare module 'wonder.js/dist/es2015/renderer/webgl2/utils/worker/render_file/shader/glslSender/GLSLSenderDataCommon' {
    import { SendUniformConfigMap, SendUniformFuncConfigMap, UniformCacheMap, VaoConfigMap } from "wonder.js/dist/es2015/renderer/type/dataType";
    import { UboBindingPointMap, UboMultiBufferDataList, UboSingleBufferDataList } from "wonder.js/dist/es2015/renderer/webgl2/type/dataType";
    export class WebGL2GLSLSenderDataCommon {
        static vaoConfigMap: VaoConfigMap;
        static uniformCacheMap: UniformCacheMap;
        static sendUniformConfigMap: SendUniformConfigMap;
        static sendUniformFuncConfigMap: SendUniformFuncConfigMap;
        static vertexAttribHistory: Array<boolean>;
        static uboBindingPoint: number;
        static uboBindingPointMap: UboBindingPointMap;
        static oneUboDataList: UboSingleBufferDataList;
        static frameUboDataList: UboSingleBufferDataList;
        static ambientLightUboDataList: UboMultiBufferDataList;
        static directionLightUboDataList: UboMultiBufferDataList;
        static pointLightUboDataList: UboMultiBufferDataList;
    }
}

declare module 'wonder.js/dist/es2015/renderer/webgl2/utils/worker/render_file/shader/location/LocationDataCommon' {
    import { UniformLocationMap } from "wonder.js/dist/es2015/renderer/type/dataType";
    export abstract class WebGL2LocationDataCommon {
        static uniformLocationMap: UniformLocationMap;
    }
}

declare module 'wonder.js/dist/es2015/renderer/webgl2/utils/worker/render_file/shader/program/ProgramDataCommon' {
    import { ProgramMap } from "wonder.js/dist/es2015/renderer/type/dataType";
    export abstract class WebGL2ProgramDataCommon {
        static programMap: ProgramMap;
        static lastUsedProgram: WebGLProgram;
        static lastBindedVao: WebGLBuffer;
    }
}

declare module 'wonder.js/dist/es2015/renderer/webgl2/utils/worker/render_file/shader/ShaderDataCommon' {
    import { ShaderIndexByShaderNameMap, ShaderIndexMap, ShaderLibNameMap } from "wonder.js/dist/es2015/renderer/type/dataType";
    export abstract class WebGL2ShaderDataCommon {
        static index: number;
        static count: number;
        static shaderIndexMap: ShaderIndexMap;
        static shaderIndexByShaderNameMap: ShaderIndexByShaderNameMap;
        static shaderLibNameMap: ShaderLibNameMap;
    }
}

declare module 'wonder.js/dist/es2015/renderer/worker/both_file/data/render_config' {
    import { Color } from "wonder.js/dist/es2015/structure/Color";
    import { ELightModel } from "wonder.js/dist/es2015/component/material/ELightModel";
    export const render_config: {
        "clearColor": Color;
        "defer": {
            "lightModel": ELightModel;
        };
    };
    export interface IRenderConfig {
        clearColor: Color;
        defer: {
            lightModel: ELightModel;
        };
    }
}

declare module 'wonder.js/dist/es2015/renderer/worker/both_file/device/DeviceManagerWorkerData' {
    import { DeviceManagerDataCommon } from "wonder.js/dist/es2015/renderer/utils/worker/render_file/device/DeviceManagerDataCommon";
    export class DeviceManagerWorkerData extends DeviceManagerDataCommon {
    }
}

declare module 'wonder.js/dist/es2015/renderer/worker/both_file/ERenderWorkerState' {
    export enum ERenderWorkerState {
        DEFAULT = 0,
        INIT_COMPLETE = 1,
        DRAW_WAIT = 2,
        DRAW_COMPLETE = 3,
    }
}

declare module 'wonder.js/dist/es2015/renderer/worker/both_file/EWorkerOperateType' {
    export enum EWorkerOperateType {
        INIT_CONFIG = 0,
        INIT_DATA = 1,
        INIT_GL = 2,
        INIT_VIEWPORT = 3,
        INIT_CLEARCOLOR = 4,
        INIT_MATERIAL_GEOMETRY_LIGHT_TEXTURE = 5,
        DRAW = 6,
    }
}

declare module 'wonder.js/dist/es2015/renderer/worker/logic_file/draw/SendDrawRenderCommandBufferData' {
    import { ERenderWorkerState } from "wonder.js/dist/es2015/renderer/worker/both_file/ERenderWorkerState";
    export class SendDrawRenderCommandBufferData {
        static state: ERenderWorkerState;
        static isInitComplete: boolean;
    }
}

declare module 'wonder.js/dist/es2015/renderer/worker/render_file/buffer/ArrayBufferWorkerData' {
    export class ArrayBufferWorkerData {
        static vertexBuffers: Array<WebGLBuffer>;
        static normalBuffers: Array<WebGLBuffer>;
        static texCoordBuffers: Array<WebGLBuffer>;
    }
}

declare module 'wonder.js/dist/es2015/renderer/worker/render_file/buffer/IndexBufferWorkerData' {
    export class IndexBufferWorkerData {
        static buffers: Array<WebGLBuffer>;
    }
}

declare module 'wonder.js/dist/es2015/renderer/worker/render_file/command_buffer/BasicRenderCommandBufferWorkerData' {
    export class BasicRenderCommandBufferWorkerData {
        static mMatrices: Float32Array;
        static materialIndices: Uint32Array;
        static geometryIndices: Uint32Array;
    }
}

declare module 'wonder.js/dist/es2015/renderer/worker/render_file/command_buffer/LightRenderCommandBufferWorkerData' {
    export class LightRenderCommandBufferWorkerData {
        static mMatrices: Float32Array;
        static materialIndices: Uint32Array;
        static geometryIndices: Uint32Array;
    }
}

declare module 'wonder.js/dist/es2015/renderer/worker/render_file/config/InitConfigWorkerData' {
    export class InitConfigWorkerData {
        static isTest: boolean;
    }
}

declare module 'wonder.js/dist/es2015/renderer/worker/render_file/device/GPUDetectWorkerData' {
    import { GPUDetectDataCommon } from "wonder.js/dist/es2015/renderer/utils/worker/render_file/device/GPUDetectDataCommon";
    export class GPUDetectWorkerData extends GPUDetectDataCommon {
    }
}

declare module 'wonder.js/dist/es2015/renderer/worker/render_file/device/WebGLDetectWorkerData' {
    import { EWebGLVersion } from "wonder.js/dist/es2015/renderer/enum/EWebGLVersion";
    export class WebGLDetectWorkerData {
        static version: EWebGLVersion;
    }
}

declare module 'wonder.js/dist/es2015/renderer/worker/render_file/draw/basic/BasicDrawRenderCommandBufferWorkerData' {
    export class BasicDrawRenderCommandBufferWorkerData {
        static mMatrixFloatArrayForSend: Float32Array;
    }
}

declare module 'wonder.js/dist/es2015/renderer/worker/render_file/draw/light/LightDrawRenderCommandBufferWorkerData' {
    export class LightDrawRenderCommandBufferWorkerData {
        static mMatrixFloatArrayForSend: Float32Array;
        static vMatrixFloatArrayForSend: Float32Array;
        static pMatrixFloatArrayForSend: Float32Array;
        static normalMatrixFloatArrayForSend: Float32Array;
        static cameraPositionForSend: Float32Array;
    }
}

declare module 'wonder.js/dist/es2015/renderer/worker/render_file/geometry/GeometryWorkerData' {
    import { GeometryIndicesCacheMap, GeometryVertexCacheMap } from "wonder.js/dist/es2015/definition/type/geometryType";
    export class GeometryWorkerData {
        static verticesCacheMap: GeometryVertexCacheMap;
        static normalsCacheMap: GeometryVertexCacheMap;
        static texCoordsCacheMap: GeometryVertexCacheMap;
        static indicesCacheMap: GeometryIndicesCacheMap;
        static vertices: Float32Array;
        static normals: Float32Array;
        static texCoords: Float32Array;
        static indices: Uint16Array | Uint32Array;
    }
}

declare module 'wonder.js/dist/es2015/renderer/worker/render_file/initGL' {
    import { MessageInitGLData } from "wonder.js/dist/es2015/renderer/type/messageDataType";
    export const initGL: (data: MessageInitGLData, detect: Function, WebGLDetectWorkerData: any, GPUDetectWorkerData: any) => any;
}

declare module 'wonder.js/dist/es2015/renderer/worker/render_file/light/AmbientLightWorkerData' {
    import { SpecifyLightWorkerData } from "wonder.js/dist/es2015/renderer/worker/render_file/light/SpecifyLightWorkerData";
    export class AmbientLightWorkerData extends SpecifyLightWorkerData {
    }
}

declare module 'wonder.js/dist/es2015/renderer/worker/render_file/light/DirectionLightWorkerData' {
    import { SpecifyLightWorkerData } from "wonder.js/dist/es2015/renderer/worker/render_file/light/SpecifyLightWorkerData";
    export class DirectionLightWorkerData extends SpecifyLightWorkerData {
        static intensities: Float32Array;
        static isPositionDirtys: Uint8Array;
        static isIntensityDirtys: Uint8Array;
    }
}

declare module 'wonder.js/dist/es2015/renderer/worker/render_file/light/PointLightWorkerData' {
    import { SpecifyLightWorkerData } from "wonder.js/dist/es2015/renderer/worker/render_file/light/SpecifyLightWorkerData";
    export abstract class PointLightWorkerData extends SpecifyLightWorkerData {
        static intensities: Float32Array;
        static constants: Float32Array;
        static linears: Float32Array;
        static quadratics: Float32Array;
        static ranges: Uint16Array;
        static isPositionDirtys: Uint8Array;
        static isIntensityDirtys: Uint8Array;
        static isAttenuationDirtys: Uint8Array;
    }
}

declare module 'wonder.js/dist/es2015/renderer/worker/render_file/light/SpecifyLightWorkerData' {
    export class SpecifyLightWorkerData {
        static count: number;
        static colors: Float32Array;
        static isColorDirtys: Uint8Array;
    }
}

declare module 'wonder.js/dist/es2015/renderer/worker/render_file/material/BasicMaterialWorkerData' {
    export class BasicMaterialWorkerData {
    }
}

declare module 'wonder.js/dist/es2015/renderer/worker/render_file/material/LightMaterialWorkerData' {
    export class LightMaterialWorkerData {
        static specularColors: Float32Array;
        static emissionColors: Float32Array;
        static shininess: Float32Array;
        static shadings: Uint8Array;
        static lightModels: Uint8Array;
        static hasDiffuseMaps: Uint8Array;
        static hasSpecularMaps: Uint8Array;
    }
}

declare module 'wonder.js/dist/es2015/renderer/worker/render_file/material/MaterialWorkerData' {
    export class MaterialWorkerData {
        static shaderIndices: Uint32Array;
        static colors: Float32Array;
        static opacities: Float32Array;
        static alphaTests: Float32Array;
    }
    export type MaterialInitWorkerData = {
        buffer: SharedArrayBuffer;
        basicMaterialData: BasicMaterialInitWorkerData;
        lightMaterialData: LightMaterialInitWorkerData;
    };
    export type BasicMaterialInitWorkerData = {
        startIndex: number;
        index: number;
    };
    export type LightMaterialInitWorkerData = {
        startIndex: number;
        index: number;
    };
    export type MaterialUpdateWorkerData = {
        buffer: SharedArrayBuffer;
        workerInitList: Array<number>;
    };
}

declare module 'wonder.js/dist/es2015/renderer/worker/render_file/state/StateWorkerData' {
    import { Map } from "immutable";
    export class StateWorkerData {
        static state: Map<any, any>;
    }
}

declare module 'wonder.js/dist/es2015/renderer/worker/render_file/state/StateWorkerSytem' {
    import { Map } from "immutable";
    export const getState: (StateWorkerData: any) => any;
    export const setState: (state: Map<any, any>, StateWorkerData: any) => void;
}

declare module 'wonder.js/dist/es2015/renderer/worker/render_file/texture/MapManagerWorkerData' {
    import { MaterialTextureList } from "wonder.js/dist/es2015/renderer/type/dataType";
    export class MapManagerWorkerData {
        static textureIndices: Float32Array;
        static textureCounts: Uint8Array;
        static materialTextureList: MaterialTextureList;
    }
}

declare module 'wonder.js/dist/es2015/renderer/worker/render_file/texture/TextureCacheWorkerData' {
    export class TextureCacheWorkerData {
        static bindTextureUnitCache: Array<number>;
    }
}

declare module 'wonder.js/dist/es2015/renderer/worker/render_file/texture/TextureWorkerData' {
    export class TextureWorkerData {
        static index: number;
        static glTextures: Array<WebGLTexture>;
        static sourceMap: Array<ImageBitmap>;
        static uniformSamplerNameMap: Array<string>;
        static widths: Float32Array;
        static heights: Float32Array;
        static isNeedUpdates: Uint8Array;
    }
}

declare module 'wonder.js/dist/es2015/renderer/worker/render_file/vao/VaoWorkerData' {
    import { VaoDataCommon } from "wonder.js/dist/es2015/renderer/utils/worker/render_file/vao/VaoDataCommon";
    export class VaoWorkerData extends VaoDataCommon {
    }
}

declare module 'wonder.js/dist/es2015/renderer/worker/webgl1/both_file/data/material_config' {
    export const webgl1_material_config: {
        "shaders": {
            "materialShaders": {
                "BasicRender": (string | {
                    "type": string;
                    "value": string;
                } | {
                    "type": string;
                    "branch": (materialIndex: any, {getMapCount}: {
                        getMapCount: any;
                    }, {MapManagerDataFromSystem}: {
                        MapManagerDataFromSystem: any;
                    }) => string;
                })[];
                "FrontRenderLight": (string | {
                    "type": string;
                    "value": string;
                } | {
                    "type": string;
                    "branch": (materialIndex: any, {hasDiffuseMap, hasSpecularMap}: {
                        hasDiffuseMap: any;
                        hasSpecularMap: any;
                    }, {LightMaterialDataFromSystem}: {
                        LightMaterialDataFromSystem: any;
                    }) => string;
                })[];
            };
            "noMaterialShaders": {};
        };
        "shaderLibGroups": {
            "engineMaterialTop": string[];
            "engineMaterialEnd": string[];
        };
    };
}

declare module 'wonder.js/dist/es2015/renderer/worker/webgl1/both_file/data/shaderLib_generator' {
    import { GLSLChunk } from "wonder.js/dist/es2015/renderer/shader/chunk/ShaderChunk";
    import { UniformCacheMap, UniformLocationMap } from "wonder.js/dist/es2015/renderer/type/dataType";
    import { IDefineUniformConfig, IGLSLConfig, IGLSLDefineListItem, ISendUniformConfig, IShaderLibContentGenerator } from "wonder.js/dist/es2015/renderer/data/shaderLib_generator_interface";
    export const webgl1_shaderLib_generator: {
        "shaderLibs": {
            "CommonShaderLib": {
                "glsl": {
                    "vs": {
                        "source": GLSLChunk;
                        "define": string;
                        "funcDefine": string;
                    };
                    "fs": {
                        "source": GLSLChunk;
                        "define": string;
                        "funcDefine": string;
                    };
                };
                "send": {
                    "uniform": {
                        "name": string;
                        "field": string;
                        "type": string;
                    }[];
                };
            };
            "ModelMatrixNoInstanceShaderLib": {
                "glsl": {
                    "vs": {
                        "source": GLSLChunk;
                    };
                };
                "send": {
                    "uniform": {
                        "name": string;
                        "field": string;
                        "type": string;
                    }[];
                };
            };
            "VerticeCommonShaderLib": {
                "send": {
                    "attribute": {
                        "name": string;
                        "buffer": string;
                        "type": string;
                    }[];
                };
            };
            "BasicMaterialColorShaderLib": {
                "glsl": {
                    "fs": {
                        "source": GLSLChunk;
                    };
                };
                "send": {
                    "uniform": {
                        "name": string;
                        "from": string;
                        "field": string;
                        "type": string;
                    }[];
                };
            };
            "BasicShaderLib": {
                "glsl": {
                    "vs": {
                        "body": string;
                    };
                };
                "send": {
                    "uniform": {
                        "name": string;
                        "from": string;
                        "field": string;
                        "type": string;
                    }[];
                };
            };
            "BasicEndShaderLib": {
                "glsl": {
                    "fs": {
                        "source": GLSLChunk;
                    };
                    "func": (materialIndex: number, {getAlphaTest, isTestAlpha}: {
                        getAlphaTest: any;
                        isTestAlpha: any;
                    }, {MaterialDataFromSystem}: {
                        MaterialDataFromSystem: any;
                    }) => {
                        "fs": {
                            "body": string;
                        };
                    };
                };
            };
            "BasicMapShaderLib": {
                "glsl": {
                    "vs": {
                        "source": GLSLChunk;
                    };
                    "fs": {
                        "source": GLSLChunk;
                    };
                };
                "send": {
                    "attribute": {
                        "name": string;
                        "buffer": string;
                        "type": string;
                    }[];
                    "uniformDefine": {
                        "name": string;
                        "type": string;
                    }[];
                };
            };
            "NormalMatrixNoInstanceShaderLib": {
                "glsl": {
                    "vs": {
                        "source": GLSLChunk;
                    };
                };
                "send": {
                    "uniform": {
                        "name": string;
                        "field": string;
                        "type": string;
                    }[];
                };
            };
            "NormalCommonShaderLib": {
                "send": {
                    "attribute": {
                        "name": string;
                        "buffer": string;
                        "type": string;
                    }[];
                };
            };
            "LightCommonShaderLib": {
                "glsl": {
                    "vs": {
                        "source": GLSLChunk;
                        "funcDeclare": string;
                        "funcDefine": string;
                    };
                    "fs": {
                        "source": GLSLChunk;
                        "funcDeclare": string;
                        "funcDefine": string;
                    };
                };
                "send": {
                    "uniform": {
                        "name": string;
                        "from": string;
                        "field": string;
                        "type": string;
                    }[];
                };
            };
            "LightSetWorldPositionShaderLib": {
                "glsl": {
                    "vs": {
                        "source": GLSLChunk;
                    };
                };
            };
            "CommonLightMapShaderLib": {
                "send": {
                    "attribute": {
                        "name": string;
                        "buffer": string;
                        "type": string;
                    }[];
                };
            };
            "DiffuseMapShaderLib": {
                "glsl": {
                    "vs": {
                        "source": GLSLChunk;
                    };
                    "fs": {
                        "source": GLSLChunk;
                    };
                };
                "send": {
                    "uniformDefine": {
                        "name": string;
                        "type": string;
                    }[];
                };
            };
            "NoDiffuseMapShaderLib": {
                "glsl": {
                    "fs": {
                        "source": GLSLChunk;
                    };
                };
                "send": {
                    "uniform": {
                        "name": string;
                        "from": string;
                        "field": string;
                        "type": string;
                    }[];
                };
            };
            "SpecularMapShaderLib": {
                "glsl": {
                    "vs": {
                        "source": GLSLChunk;
                    };
                    "fs": {
                        "source": GLSLChunk;
                    };
                };
                "send": {
                    "uniformDefine": {
                        "name": string;
                        "type": string;
                    }[];
                };
            };
            "NoSpecularMapShaderLib": {
                "glsl": {
                    "fs": {
                        "source": GLSLChunk;
                    };
                };
            };
            "NoLightMapShaderLib": {
                "glsl": {
                    "fs": {
                        "source": GLSLChunk;
                    };
                };
            };
            "NoEmissionMapShaderLib": {
                "glsl": {
                    "fs": {
                        "source": GLSLChunk;
                    };
                };
                "send": {
                    "uniform": {
                        "name": string;
                        "from": string;
                        "field": string;
                        "type": string;
                    }[];
                };
            };
            "NoNormalMapShaderLib": {
                "glsl": {
                    "vs": {
                        "source": GLSLChunk;
                    };
                    "fs": {
                        "source": GLSLChunk;
                    };
                };
            };
            "NoShadowMapShaderLib": {
                "glsl": {
                    "fs": {
                        "source": GLSLChunk;
                    };
                };
            };
            "LightShaderLib": {
                "glsl": {
                    "vs": {
                        "source": GLSLChunk;
                        "defineList": ({
                            "name": string;
                            "valueFunc": ({DirectionLightDataFromSystem}: {
                                DirectionLightDataFromSystem: any;
                            }) => any;
                        } | {
                            "name": string;
                            "valueFunc": ({PointLightDataFromSystem}: {
                                PointLightDataFromSystem: any;
                            }) => any;
                        })[];
                    };
                    "fs": {
                        "source": GLSLChunk;
                        "defineList": ({
                            "name": string;
                            "valueFunc": ({DirectionLightDataFromSystem}: {
                                DirectionLightDataFromSystem: any;
                            }) => any;
                        } | {
                            "name": string;
                            "valueFunc": ({PointLightDataFromSystem}: {
                                PointLightDataFromSystem: any;
                            }) => any;
                        })[];
                    };
                };
                "send": {
                    "uniform": {
                        "name": string;
                        "from": string;
                        "field": string;
                        "type": string;
                    }[];
                };
            };
            "AmbientLightShaderLib": {
                "glsl": {
                    "fs": {
                        "varDeclare": string;
                    };
                };
                "send": {
                    "uniformFunc": (gl: WebGLRenderingContext, shaderIndex: number, program: WebGLProgram, {glslSenderData: {sendFloat3}, ambientLightData: {getColorArr3, isColorDirty, cleanColorDirty, AmbientLightDataFromSystem}}: {
                        glslSenderData: {
                            sendFloat3: any;
                        };
                        ambientLightData: {
                            getColorArr3: any;
                            isColorDirty: any;
                            cleanColorDirty: any;
                            AmbientLightDataFromSystem: any;
                        };
                    }, uniformLocationMap: UniformLocationMap, uniformCacheMap: UniformCacheMap) => void;
                };
            };
            "PointLightShaderLib": {
                "send": {
                    "uniformFunc": (gl: WebGLRenderingContext, shaderIndex: number, program: WebGLProgram, {glslSenderData: {sendFloat1, sendFloat3}, pointLightData: {getColorArr3, getIntensity, getConstant, getLinear, getQuadratic, getRange, getPosition, isPositionDirty, isColorDirty, isIntensityDirty, isAttenuationDirty, cleanPositionDirty, cleanColorDirty, cleanIntensityDirty, cleanAttenuationDirty, PointLightDataFromSystem}}: {
                        glslSenderData: {
                            sendFloat1: any;
                            sendFloat3: any;
                        };
                        pointLightData: {
                            getColorArr3: any;
                            getIntensity: any;
                            getConstant: any;
                            getLinear: any;
                            getQuadratic: any;
                            getRange: any;
                            getPosition: any;
                            isPositionDirty: any;
                            isColorDirty: any;
                            isIntensityDirty: any;
                            isAttenuationDirty: any;
                            cleanPositionDirty: any;
                            cleanColorDirty: any;
                            cleanIntensityDirty: any;
                            cleanAttenuationDirty: any;
                            PointLightDataFromSystem: any;
                        };
                    }, uniformLocationMap: UniformLocationMap, uniformCacheMap: UniformCacheMap) => void;
                };
            };
            "DirectionLightShaderLib": {
                "send": {
                    "uniformFunc": (gl: WebGLRenderingContext, shaderIndex: number, program: WebGLProgram, {glslSenderData: {sendFloat1, sendFloat3}, directionLightData: {getColorArr3, getIntensity, getPosition, isPositionDirty, isColorDirty, isIntensityDirty, cleanPositionDirty, cleanColorDirty, cleanIntensityDirty, DirectionLightDataFromSystem}}: {
                        glslSenderData: {
                            sendFloat1: any;
                            sendFloat3: any;
                        };
                        directionLightData: {
                            getColorArr3: any;
                            getIntensity: any;
                            getPosition: any;
                            isPositionDirty: any;
                            isColorDirty: any;
                            isIntensityDirty: any;
                            cleanPositionDirty: any;
                            cleanColorDirty: any;
                            cleanIntensityDirty: any;
                            DirectionLightDataFromSystem: any;
                        };
                    }, uniformLocationMap: UniformLocationMap, uniformCacheMap: UniformCacheMap) => void;
                };
            };
            "LightEndShaderLib": {
                "glsl": {
                    "fs": {
                        "source": GLSLChunk;
                    };
                    "func": (materialIndex: number, {getAlphaTest, isTestAlpha}: {
                        getAlphaTest: any;
                        isTestAlpha: any;
                    }, {MaterialDataFromSystem}: {
                        MaterialDataFromSystem: any;
                    }) => {
                        "fs": {
                            "body": string;
                        };
                    };
                };
            };
            "EndShaderLib": {};
        };
    };
    export interface IWebGL1ShaderLibContentGenerator extends IShaderLibContentGenerator {
        [shaderLibName: string]: IWebGL1ShaderLibConfig;
    }
    export interface IWebGL1ShaderLibConfig {
        glsl?: {
            vs?: IWebGL1GLSLConfig;
            fs?: IWebGL1GLSLConfig;
            func?: (materialIWebGL1ndex: number) => IWebGL1GLSLFuncConfig | null;
        };
        send?: IWebGL1ShaderLibSendConfig;
    }
    export interface IWebGL1GLSLConfig extends IGLSLConfig {
    }
    export interface IWebGL1GLSLFuncConfig {
        vs?: IWebGL1GLSLFuncGLSLConfig;
        fs?: IWebGL1GLSLFuncGLSLConfig;
    }
    export interface IWebGL1GLSLFuncGLSLConfig {
        top?: string;
        varDeclare?: string;
        funcDeclare?: string;
        funcDefine?: string;
        body?: string;
        define?: string;
    }
    export interface IWebGL1GLSLDefineListItem extends IGLSLDefineListItem {
    }
    export interface IWebGL1ShaderLibSendConfig {
        attribute?: Array<IWebGL1SendAttributeConfig>;
        uniform?: Array<IWebGL1SendUniformConfig>;
        uniformDefine?: Array<IWebGL1DefineUniformConfig>;
        uniformFunc?: Function;
    }
    export interface IWebGL1SendAttributeConfig {
        name: string;
        buffer: "vertex" | "normal" | "texCoord";
        type: "vec2" | "vec3";
    }
    export type WebGL1UniformType = "int" | "float" | "float3" | "vec3" | "mat3" | "mat4" | "sampler2D";
    export interface IWebGL1DefineUniformConfig extends IDefineUniformConfig {
        name: string;
        type: WebGL1UniformType;
    }
    export interface IWebGL1SendUniformConfig extends ISendUniformConfig {
        name: string;
        field: string;
        type: WebGL1UniformType;
        fieldType?: "structure";
        from?: "cmd" | "basicMaterial" | "lightMaterial" | "ambientLight" | "pointLight" | "directionLight";
    }
}

declare module 'wonder.js/dist/es2015/renderer/worker/webgl1/render_file/light/DirectionLightWorkerData' {
    import { DirectionLightWorkerData } from "wonder.js/dist/es2015/renderer/worker/render_file/light/DirectionLightWorkerData";
    import { DirectionLightGLSLDataStructure } from "wonder.js/dist/es2015/renderer/type/dataType";
    export class WebGL1DirectionLightWorkerData extends DirectionLightWorkerData {
        static positionArr: Array<Float32Array>;
        static lightGLSLDataStructureMemberNameArr: Array<DirectionLightGLSLDataStructure>;
    }
}

declare module 'wonder.js/dist/es2015/renderer/worker/webgl1/render_file/light/PointLightWorkerData' {
    import { PointLightGLSLDataStructure } from "wonder.js/dist/es2015/renderer/type/dataType";
    import { PointLightWorkerData } from "wonder.js/dist/es2015/renderer/worker/render_file/light/PointLightWorkerData";
    export class WebGL1PointLightWorkerData extends PointLightWorkerData {
        static positionArr: Array<Float32Array>;
        static lightGLSLDataStructureMemberNameArr: Array<PointLightGLSLDataStructure>;
    }
}

declare module 'wonder.js/dist/es2015/renderer/worker/webgl1/render_file/shader/glslSender/GLSLSenderWorkerData' {
    import { WebGL1GLSLSenderDataCommon } from "wonder.js/dist/es2015/renderer/webgl1/utils/worker/render_file/shader/glslSender/GLSLSenderDataCommon";
    export class WebGL1GLSLSenderWorkerData extends WebGL1GLSLSenderDataCommon {
    }
}

declare module 'wonder.js/dist/es2015/renderer/worker/webgl1/render_file/shader/location/LocationWorkerData' {
    import { WebGL1LocationDataCommon } from "wonder.js/dist/es2015/renderer/webgl1/utils/worker/render_file/shader/location/LocationDataCommon";
    export class WebGL1LocationWorkerData extends WebGL1LocationDataCommon {
    }
}

declare module 'wonder.js/dist/es2015/renderer/worker/webgl1/render_file/shader/program/ProgramWorkerData' {
    import { WebGL1ProgramDataCommon } from "wonder.js/dist/es2015/renderer/webgl1/utils/worker/render_file/shader/program/ProgramDataCommon";
    export class WebGL1ProgramWorkerData extends WebGL1ProgramDataCommon {
    }
}

declare module 'wonder.js/dist/es2015/renderer/worker/webgl1/render_file/shader/ShaderWorkerData' {
    import { WebGL1ShaderDataCommon } from "wonder.js/dist/es2015/renderer/webgl1/utils/worker/render_file/shader/ShaderDataCommon";
    export class WebGL1ShaderWorkerData extends WebGL1ShaderDataCommon {
    }
}

declare module 'wonder.js/dist/es2015/renderer/worker/webgl2/both_file/data/material_config' {
    export const webgl2_material_config: {
        "shaders": {
            "materialShaders": {
                "BasicRender": (string | {
                    "type": string;
                    "value": string;
                } | {
                    "type": string;
                    "branch": (materialIndex: any, {getMapCount}: {
                        getMapCount: any;
                    }, {MapManagerDataFromSystem}: {
                        MapManagerDataFromSystem: any;
                    }) => string;
                })[];
                "FrontRenderLight": (string | {
                    "type": string;
                    "value": string;
                } | {
                    "type": string;
                    "branch": (materialIndex: any, {hasDiffuseMap, hasSpecularMap}: {
                        hasDiffuseMap: any;
                        hasSpecularMap: any;
                    }, {LightMaterialDataFromSystem}: {
                        LightMaterialDataFromSystem: any;
                    }) => string;
                })[];
                "GBuffer": (string | {
                    "type": string;
                    "value": string;
                } | {
                    "type": string;
                    "branch": (materialIndex: any, {hasDiffuseMap, hasSpecularMap}: {
                        hasDiffuseMap: any;
                        hasSpecularMap: any;
                    }, {LightMaterialDataFromSystem}: {
                        LightMaterialDataFromSystem: any;
                    }) => string;
                })[];
            };
            "noMaterialShaders": {
                "DeferAmbientLightPass": (string | {
                    "type": string;
                    "value": string;
                })[];
                "DeferDirectionLightPass": (string | {
                    "type": string;
                    "value": string;
                })[];
                "DeferPointLightPass": (string | {
                    "type": string;
                    "value": string;
                })[];
            };
        };
        "shaderLibGroups": {
            "engineMaterialTop": string[];
            "deferLightPassIndexZeroUbo": string[];
            "deferLightPassUbo": string[];
            "deferLightPassLightMap": string[];
            "engineMaterialEnd": string[];
        };
    };
}

declare module 'wonder.js/dist/es2015/renderer/worker/webgl2/both_file/data/shaderLib_generator' {
    import { GLSLChunk } from "wonder.js/dist/es2015/renderer/shader/chunk/ShaderChunk";
    import { IDefineUniformConfig, IGLSLConfig, IGLSLDefineListItem, ISendUniformConfig, IShaderLibContentGenerator } from "wonder.js/dist/es2015/renderer/data/shaderLib_generator_interface";
    export const webgl2_shaderLib_generator: {
        "shaderLibs": {
            "CommonShaderLib": {
                "glsl": {
                    "vs": {
                        "source": GLSLChunk;
                        "define": string;
                        "funcDefine": string;
                    };
                    "fs": {
                        "source": GLSLChunk;
                        "define": string;
                        "funcDefine": string;
                    };
                };
                "send": {};
            };
            "ModelMatrixNoInstanceShaderLib": {
                "glsl": {
                    "vs": {
                        "source": GLSLChunk;
                    };
                };
                "send": {
                    "uniform": {
                        "name": string;
                        "field": string;
                        "type": string;
                    }[];
                };
            };
            "VerticeCommonShaderLib": {
                "send": {
                    "attribute": {
                        "name": string;
                        "buffer": string;
                        "type": string;
                        "location": number;
                    }[];
                };
            };
            "CameraUboShaderLib": {
                "glsl": {
                    "vs": {
                        "source": GLSLChunk;
                    };
                    "fs": {
                        "source": GLSLChunk;
                    };
                };
                "send": {
                    "uniformUbo": {
                        "name": string;
                        "typeArray": {
                            "type": string;
                            "length": number;
                        };
                        "setBufferDataFunc": (gl: any, {uniformBlockBinding, buffer, typeArray}: {
                            uniformBlockBinding: any;
                            buffer: any;
                            typeArray: any;
                        }, {bindUniformBufferBase, bufferDynamicData, set}: {
                            bindUniformBufferBase: any;
                            bufferDynamicData: any;
                            set: any;
                        }, {vMatrix, pMatrix, cameraPosition, normalMatrix}: {
                            vMatrix: any;
                            pMatrix: any;
                            cameraPosition: any;
                            normalMatrix: any;
                        }) => void;
                        "frequence": string;
                        "usage": string;
                    }[];
                };
            };
            "LightUboShaderLib": {
                "glsl": {
                    "fs": {
                        "varDeclare": string;
                    };
                };
                "send": {
                    "uniformUbo": {
                        "name": string;
                        "typeArray": {
                            "type": string;
                            "length": number;
                        };
                        "setBufferDataFunc": (gl: any, {uniformBlockBinding, buffer, typeArray}: {
                            uniformBlockBinding: any;
                            buffer: any;
                            typeArray: any;
                        }, {bindUniformBufferBase, bufferStaticData, set}: {
                            bindUniformBufferBase: any;
                            bufferStaticData: any;
                            set: any;
                        }, drawRenderCommandBufferDataMap: any, {render_config}: {
                            render_config: any;
                        }) => void;
                        "frequence": string;
                        "usage": string;
                    }[];
                };
            };
            "AmbientLightUboShaderLib": {
                "glsl": {
                    "fs": {
                        "source": GLSLChunk;
                    };
                };
                "send": {
                    "uniformUbo": {
                        "name": string;
                        "typeArray": {
                            "type": string;
                            "length": number;
                        };
                        "setBufferDataFunc": (gl: any, ambientLightIndex: any, {uniformBlockBinding, buffer, typeArray}: {
                            uniformBlockBinding: any;
                            buffer: any;
                            typeArray: any;
                        }, {bindUniformBufferBase, bufferDynamicData, set}: {
                            bindUniformBufferBase: any;
                            bufferDynamicData: any;
                            set: any;
                        }, {cleanColorDirty, AmbientLightDataFromSystem}: {
                            cleanColorDirty: any;
                            AmbientLightDataFromSystem: any;
                        }, {colorArr3, isColorDirty}: {
                            colorArr3: any;
                            isColorDirty: any;
                        }) => void;
                        "frequence": string;
                        "usage": string;
                    }[];
                };
            };
            "DirectionLightUboShaderLib": {
                "glsl": {
                    "fs": {
                        "source": GLSLChunk;
                    };
                };
                "send": {
                    "uniformUbo": {
                        "name": string;
                        "typeArray": {
                            "type": string;
                            "length": number;
                        };
                        "setBufferDataFunc": (gl: any, directionLightIndex: any, {uniformBlockBinding, buffer, typeArray}: {
                            uniformBlockBinding: any;
                            buffer: any;
                            typeArray: any;
                        }, {bindUniformBufferBase, bufferDynamicData, set}: {
                            bindUniformBufferBase: any;
                            bufferDynamicData: any;
                            set: any;
                        }, {cleanPositionDirty, cleanColorDirty, cleanIntensityDirty, DirectionLightDataFromSystem}: {
                            cleanPositionDirty: any;
                            cleanColorDirty: any;
                            cleanIntensityDirty: any;
                            DirectionLightDataFromSystem: any;
                        }, {position, colorArr3, intensity, isPositionDirty, isColorDirty, isIntensityDirty}: {
                            position: any;
                            colorArr3: any;
                            intensity: any;
                            isPositionDirty: any;
                            isColorDirty: any;
                            isIntensityDirty: any;
                        }) => void;
                        "frequence": string;
                        "usage": string;
                    }[];
                };
            };
            "PointLightUboShaderLib": {
                "glsl": {
                    "fs": {
                        "source": GLSLChunk;
                    };
                };
                "send": {
                    "uniformUbo": {
                        "name": string;
                        "typeArray": {
                            "type": string;
                            "length": number;
                        };
                        "setBufferDataFunc": (gl: any, pointLightIndex: any, {uniformBlockBinding, buffer, typeArray}: {
                            uniformBlockBinding: any;
                            buffer: any;
                            typeArray: any;
                        }, {bindUniformBufferBase, bufferDynamicData, set}: {
                            bindUniformBufferBase: any;
                            bufferDynamicData: any;
                            set: any;
                        }, {cleanPositionDirty, cleanColorDirty, cleanIntensityDirty, cleanAttenuationDirty, PointLightDataFromSystem}: {
                            cleanPositionDirty: any;
                            cleanColorDirty: any;
                            cleanIntensityDirty: any;
                            cleanAttenuationDirty: any;
                            PointLightDataFromSystem: any;
                        }, {position, colorArr3, intensity, constant, linear, quadratic, radius, isIntensityDirty, isOtherValueDirty}: {
                            position: any;
                            colorArr3: any;
                            intensity: any;
                            constant: any;
                            linear: any;
                            quadratic: any;
                            radius: any;
                            isIntensityDirty: any;
                            isOtherValueDirty: any;
                        }) => void;
                        "frequence": string;
                        "usage": string;
                    }[];
                };
            };
            "BasicMaterialColorShaderLib": {
                "glsl": {
                    "fs": {
                        "source": GLSLChunk;
                    };
                };
                "send": {
                    "uniform": {
                        "name": string;
                        "from": string;
                        "field": string;
                        "type": string;
                    }[];
                };
            };
            "BasicShaderLib": {
                "glsl": {
                    "vs": {
                        "varDeclare": string;
                        "body": string;
                    };
                };
                "send": {
                    "uniform": {
                        "name": string;
                        "from": string;
                        "field": string;
                        "type": string;
                    }[];
                };
            };
            "BasicEndShaderLib": {
                "glsl": {
                    "fs": {
                        "source": GLSLChunk;
                    };
                    "func": (materialIndex: number, {getAlphaTest, isTestAlpha}: {
                        getAlphaTest: any;
                        isTestAlpha: any;
                    }, {MaterialDataFromSystem}: {
                        MaterialDataFromSystem: any;
                    }) => {
                        "fs": {
                            "body": string;
                        };
                    };
                };
            };
            "BasicMapShaderLib": {
                "glsl": {
                    "vs": {
                        "source": GLSLChunk;
                    };
                    "fs": {
                        "source": GLSLChunk;
                    };
                };
                "send": {
                    "attribute": {
                        "name": string;
                        "buffer": string;
                        "type": string;
                        "location": number;
                    }[];
                    "uniformDefine": {
                        "name": string;
                        "type": string;
                    }[];
                };
            };
            "NormalMatrixNoInstanceShaderLib": {
                "glsl": {
                    "vs": {
                        "source": GLSLChunk;
                    };
                };
                "send": {};
            };
            "NormalCommonShaderLib": {
                "send": {
                    "attribute": {
                        "name": string;
                        "buffer": string;
                        "type": string;
                        "location": number;
                    }[];
                };
            };
            "GBufferCommonShaderLib": {
                "glsl": {
                    "vs": {
                        "source": GLSLChunk;
                    };
                    "fs": {
                        "source": GLSLChunk;
                    };
                };
            };
            "GBufferSetWorldPositionShaderLib": {
                "glsl": {
                    "vs": {
                        "source": GLSLChunk;
                    };
                };
            };
            "CommonLightMapShaderLib": {
                "send": {
                    "attribute": {
                        "name": string;
                        "buffer": string;
                        "type": string;
                        "location": number;
                    }[];
                };
            };
            "DiffuseMapShaderLib": {
                "glsl": {
                    "vs": {
                        "source": GLSLChunk;
                    };
                    "fs": {
                        "source": GLSLChunk;
                    };
                };
                "send": {
                    "uniformDefine": {
                        "name": string;
                        "type": string;
                    }[];
                };
            };
            "NoDiffuseMapShaderLib": {
                "glsl": {
                    "fs": {
                        "source": GLSLChunk;
                    };
                };
                "send": {
                    "uniform": {
                        "name": string;
                        "from": string;
                        "field": string;
                        "type": string;
                    }[];
                };
            };
            "SpecularMapShaderLib": {
                "glsl": {
                    "vs": {
                        "source": GLSLChunk;
                    };
                    "fs": {
                        "source": GLSLChunk;
                    };
                };
                "send": {
                    "uniformDefine": {
                        "name": string;
                        "type": string;
                    }[];
                };
            };
            "NoSpecularMapShaderLib": {
                "glsl": {
                    "fs": {
                        "source": GLSLChunk;
                    };
                };
            };
            "GBufferNoNormalMapShaderLib": {
                "glsl": {
                    "vs": {
                        "source": GLSLChunk;
                    };
                    "fs": {
                        "source": GLSLChunk;
                    };
                };
            };
            "GBufferShaderLib": {
                "glsl": {
                    "vs": {
                        "source": GLSLChunk;
                    };
                    "fs": {
                        "source": GLSLChunk;
                    };
                };
                "send": {
                    "uniform": {
                        "name": string;
                        "from": string;
                        "field": string;
                        "type": string;
                    }[];
                };
            };
            "GBufferEndShaderLib": {
                "glsl": {
                    "fs": {
                        "source": GLSLChunk;
                    };
                };
            };
            "DeferLightPassCommonShaderLib": {
                "glsl": {
                    "fs": {
                        "source": GLSLChunk;
                    };
                };
            };
            "NoLightMapShaderLib": {
                "glsl": {
                    "fs": {
                        "source": GLSLChunk;
                    };
                };
            };
            "NoEmissionMapShaderLib": {
                "glsl": {
                    "fs": {
                        "source": GLSLChunk;
                    };
                };
            };
            "NoShadowMapShaderLib": {
                "glsl": {
                    "fs": {
                        "source": GLSLChunk;
                    };
                };
            };
            "DeferLightPassNoNormalMapShaderLib": {
                "glsl": {
                    "fs": {
                        "source": GLSLChunk;
                    };
                };
            };
            "DeferLightPassShaderLib": {
                "glsl": {
                    "vs": {
                        "source": GLSLChunk;
                    };
                };
                "send": {
                    "attribute": {
                        "name": string;
                        "buffer": string;
                        "type": string;
                        "location": number;
                    }[];
                    "uniformDefine": {
                        "name": string;
                        "type": string;
                    }[];
                };
            };
            "DeferLightPassEndShaderLib": {
                "glsl": {
                    "fs": {
                        "source": GLSLChunk;
                    };
                };
            };
            "DeferAmbientLightPassShaderLib": {
                "glsl": {
                    "fs": {
                        "source": GLSLChunk;
                    };
                };
                "send": {};
            };
            "DeferDirectionLightPointLightPassCommonShaderLib": {
                "glsl": {
                    "fs": {
                        "source": GLSLChunk;
                    };
                };
            };
            "DeferDirectionLightPassCommonShaderLib": {
                "glsl": {
                    "fs": {
                        "source": GLSLChunk;
                    };
                };
            };
            "DeferDirectionLightPassNoNormalMapShaderLib": {
                "glsl": {
                    "fs": {
                        "source": GLSLChunk;
                    };
                };
            };
            "DeferDirectionLightPassShaderLib": {
                "glsl": {
                    "fs": {
                        "source": GLSLChunk;
                    };
                };
                "send": {};
            };
            "DeferPointLightPassCommonShaderLib": {
                "glsl": {
                    "fs": {
                        "source": GLSLChunk;
                    };
                };
            };
            "DeferPointLightPassNoNormalMapShaderLib": {
                "glsl": {
                    "fs": {
                        "source": GLSLChunk;
                    };
                };
            };
            "DeferPointLightPassShaderLib": {
                "glsl": {
                    "fs": {
                        "source": GLSLChunk;
                    };
                };
                "send": {};
            };
            "EndShaderLib": {};
        };
    };
    export interface IWebGL2ShaderLibContentGenerator extends IShaderLibContentGenerator {
        [shaderLibName: string]: IWebGL2ShaderLibConfig;
    }
    export interface IWebGL2ShaderLibConfig {
        glsl?: {
            vs?: IWebGL2GLSLConfig;
            fs?: IWebGL2GLSLConfig;
            func?: (materialIWebGL2ndex: number) => IWebGL2GLSLFuncConfig | null;
        };
        send?: IWebGL2ShaderLibSendConfig;
    }
    export interface IWebGL2GLSLConfig extends IGLSLConfig {
    }
    export interface IWebGL2GLSLFuncConfig {
        vs?: IWebGL2GLSLFuncGLSLConfig;
        fs?: IWebGL2GLSLFuncGLSLConfig;
    }
    export interface IWebGL2GLSLFuncGLSLConfig {
        top?: string;
        varDeclare?: string;
        funcDeclare?: string;
        funcDefine?: string;
        body?: string;
        define?: string;
    }
    export interface IWebGL2GLSLDefineListItem extends IGLSLDefineListItem {
        name: string;
        valueFunc?: Function;
    }
    export interface IWebGL2ShaderLibSendConfig {
        attribute?: Array<IWebGL2SendAttributeConfig>;
        uniform?: Array<IWebGL2SendUniformConfig>;
        uniformDefine?: Array<IWebGL2DefineUniformConfig>;
        uniformFunc?: Function;
        uniformUbo?: Array<IWebGL2UboConfig>;
    }
    export interface IWebGL2SendAttributeConfig {
        name: string;
        buffer: "vertex" | "normal" | "texCoord";
        type: "vec2" | "vec3";
        location: number;
    }
    export type WebGL2UniformType = "int" | "float" | "float3" | "vec3" | "mat3" | "mat4" | "sampler2D";
    export interface IWebGL2DefineUniformConfig extends IDefineUniformConfig {
        name: string;
        type: WebGL2UniformType;
    }
    export interface IWebGL2SendUniformConfig extends ISendUniformConfig {
        name: string;
        field: string;
        type: WebGL2UniformType;
        fieldType?: "structure";
        from?: "cmd" | "basicMaterial" | "lightMaterial" | "ambientLight" | "pointLight" | "directionLight";
    }
    export interface IWebGL2UboConfig {
        name: string;
        typeArray: IWebGL2UboTypeArrayConfig;
        frequence: "one" | "frame" | "pointLight" | "directionLight";
        usage: "static" | "dynamic";
        setBufferDataFunc: Function;
    }
    export interface IWebGL2UboTypeArrayConfig {
        type: string;
        length: number;
    }
}

declare module 'wonder.js/dist/es2015/renderer/worker/webgl2/render_file/light/DirectionLightWorkerData' {
    import { DirectionLightWorkerData } from "wonder.js/dist/es2015/renderer/worker/render_file/light/DirectionLightWorkerData";
    export class WebGL2DirectionLightWorkerData extends DirectionLightWorkerData {
        static positionArr: Array<Float32Array>;
    }
}

declare module 'wonder.js/dist/es2015/renderer/worker/webgl2/render_file/light/PointLightWorkerData' {
    import { PointLightWorkerData } from "wonder.js/dist/es2015/renderer/worker/render_file/light/PointLightWorkerData";
    export class WebGL2PointLightWorkerData extends PointLightWorkerData {
        static positionArr: Array<Float32Array>;
    }
}

declare module 'wonder.js/dist/es2015/renderer/worker/webgl2/render_file/render/light/defer/gbuffer/GBufferWorkerData' {
    export class GBufferWorkerData {
        static gBuffer: WebGLFramebuffer;
        static positionTarget: WebGLTexture;
        static normalTarget: WebGLTexture;
        static colorTarget: WebGLTexture;
        static depthTexture: WebGLTexture;
    }
}

declare module 'wonder.js/dist/es2015/renderer/worker/webgl2/render_file/render/light/defer/light/DeferAmbientLightPassWorkerData' {
    import { DeferAmbientLightPassDataCommon } from "wonder.js/dist/es2015/renderer/webgl2/utils/render/light/defer/light/DeferAmbientLightPassDataCommon";
    export class DeferAmbientLightPassWorkerData extends DeferAmbientLightPassDataCommon {
    }
}

declare module 'wonder.js/dist/es2015/renderer/worker/webgl2/render_file/render/light/defer/light/DeferDirectionLightPassWorkerData' {
    import { DeferDirectionLightPassDataCommon } from "wonder.js/dist/es2015/renderer/webgl2/utils/render/light/defer/light/DeferDirectionLightPassDataCommon";
    export class DeferDirectionLightPassWorkerData extends DeferDirectionLightPassDataCommon {
    }
}

declare module 'wonder.js/dist/es2015/renderer/worker/webgl2/render_file/render/light/defer/light/DeferPointLightPassWorkerData' {
    import { DeferPointLightPassDataCommon } from "wonder.js/dist/es2015/renderer/webgl2/utils/render/light/defer/light/DeferPointLightPassDataCommon";
    export class DeferPointLightPassWorkerData extends DeferPointLightPassDataCommon {
    }
}

declare module 'wonder.js/dist/es2015/renderer/worker/webgl2/render_file/shader/glslSender/GLSLSenderWorkerData' {
    import { WebGL2GLSLSenderDataCommon } from "wonder.js/dist/es2015/renderer/webgl2/utils/worker/render_file/shader/glslSender/GLSLSenderDataCommon";
    export class WebGL2GLSLSenderWorkerData extends WebGL2GLSLSenderDataCommon {
    }
}

declare module 'wonder.js/dist/es2015/renderer/worker/webgl2/render_file/shader/location/LocationWorkerData' {
    import { WebGL2LocationDataCommon } from "wonder.js/dist/es2015/renderer/webgl2/utils/worker/render_file/shader/location/LocationDataCommon";
    export class WebGL2LocationWorkerData extends WebGL2LocationDataCommon {
    }
}

declare module 'wonder.js/dist/es2015/renderer/worker/webgl2/render_file/shader/program/ProgramWorkerData' {
    import { WebGL2ProgramDataCommon } from "wonder.js/dist/es2015/renderer/webgl2/utils/worker/render_file/shader/program/ProgramDataCommon";
    export class WebGL2ProgramWorkerData extends WebGL2ProgramDataCommon {
    }
}

declare module 'wonder.js/dist/es2015/renderer/worker/webgl2/render_file/shader/ShaderWorkerData' {
    import { WebGL2ShaderDataCommon } from "wonder.js/dist/es2015/renderer/webgl2/utils/worker/render_file/shader/ShaderDataCommon";
    export class WebGL2ShaderWorkerData extends WebGL2ShaderDataCommon {
    }
}

declare module 'wonder.js/dist/es2015/structure/Color' {
    import { Vector3 } from "wonder.js/dist/es2015/math/Vector3";
    export class Color {
        static create(colorVal?: string): Color;
        dirty: boolean;
        r: number;
        g: number;
        b: number;
        a: number;
        initWhenCreate(colorVal?: string): void;
        toVector3(): Vector3;
        toVector4(): any;
        toArray3(): number[];
        toArray4(): number[];
        toString(): string;
        clone(): Color;
        isEqual(color: Color): boolean;
        setColorByNum(colorVal: string): this;
    }
}

declare module 'wonder.js/dist/es2015/structure/RectRegion' {
    import { Vector4 } from "wonder.js/dist/es2015/math/Vector4";
    export class RectRegion extends Vector4 {
        width: number;
        height: number;
        clone(): RectRegion;
        isNotEmpty(): boolean;
    }
}

declare module 'wonder.js/dist/es2015/structure/View' {
    export const getCanvas: () => HTMLCanvasElement;
    export const setCanvas: (canvas: HTMLCanvasElement) => void;
    export const getCanvasLeft: (canvas: HTMLCanvasElement) => any;
    export const setCanvasLeft: (canvas: HTMLCanvasElement, x: number) => void;
    export const getCanvasTop: (canvas: HTMLCanvasElement) => any;
    export const setCanvasTop: (canvas: HTMLCanvasElement, y: number) => void;
    export const getCanvasWidth: (canvas: HTMLCanvasElement) => any;
    export const setCanvasWidth: (canvas: HTMLCanvasElement, width: number) => void;
    export const getCanvasHeight: (canvas: HTMLCanvasElement) => any;
    export const setCanvasHeight: (canvas: HTMLCanvasElement, height: number) => void;
    export const getCanvasStyleWidth: (canvas: HTMLCanvasElement) => any;
    export const setCanvasStyleWidth: (canvas: HTMLCanvasElement, width: number) => void;
    export const getCanvasStyleHeight: (canvas: HTMLCanvasElement) => any;
    export const setCanvasStyleHeight: (canvas: HTMLCanvasElement, height: number) => void;
}

declare module 'wonder.js/dist/es2015/test/forRenderWorkerUnitTest' {
    export const initDeviceManagerWorkerData: (DeviceManagerDataFromSystem: any) => void;
    export const initProgramWorkerData: (ProgramDataFromSystem: any) => void;
    export const initWebGL1GLSLSenderWorkerData: (GLSLSenderDataFromSystem: any) => void;
    export const initWebGL2GLSLSenderWorkerData: (GLSLSenderDataFromSystem: any) => void;
    export const initWebGL1LocationWorkerData: (LocationDataFromSystem: any) => void;
    export const initWebGL2LocationWorkerData: (LocationDataFromSystem: any) => void;
    export const initWebGL1ShaderWorkerData: (ShaderDataFromSystem: any) => void;
    export const initWebGL2ShaderWorkerData: (ShaderDataFromSystem: any) => void;
    export const initWebGL1LightWorkerData: (lightData: {
        ambientLightData: {
            buffer: SharedArrayBuffer;
            bufferCount: number;
            lightCount: number;
        };
        directionLightData: {
            buffer: SharedArrayBuffer;
            bufferCount: number;
            lightCount: number;
            directionLightGLSLDataStructureMemberNameArr: {
                position: string;
                color: string;
                intensity: string;
            }[];
        };
        pointLightData: {
            buffer: SharedArrayBuffer;
            bufferCount: number;
            lightCount: number;
            pointLightGLSLDataStructureMemberNameArr: {
                position: string;
                color: string;
                intensity: string;
                constant: string;
                linear: string;
                quadratic: string;
                range: string;
            }[];
        };
    }, AmbientLightDataFromSystem: any, DirectionLightDataFromSystem: any, PointLightDataFromSystem: any) => void;
    export const initWebGL2LightWorkerData: (lightData: {
        directionLightData: {
            buffer: SharedArrayBuffer;
            bufferCount: number;
            lightCount: number;
        };
        pointLightData: {
            buffer: SharedArrayBuffer;
            bufferCount: number;
            lightCount: number;
        };
    }, DirectionLightDataFromSystem: any, PointLightDataFromSystem: any) => void;
    export const initDrawRenderCommandBufferWorkerData: (BasicDrawRenderCommandBufferDataFromSystem: any, LightDrawRenderCommandBufferDataFromSystem: any) => void;
    export const initArrayBufferWorkerData: (ArrayBufferDataFromSystemFromSystem: any) => void;
    export const initIndexBufferWorkerData: (IndexBufferDataFromSystem: any) => void;
    export const initVaoWorkerData: (VaoDataFromSystem: any) => void;
    export const initWorkerDataWhenInitGL: () => void;
    export const getDirectionLightPositionInShaderWorker: (index: number, DirectionLightDataFromSystem: any) => any;
    export const getPointLightPositionInShaderWorker: (index: number, PointLightDataFromSystem: any) => any;
    export const updateTextureWorker: (gl: WebGLRenderingContext, textureIndex: number, TextureWorkerData: any) => void;
}

declare module 'wonder.js/dist/es2015/test/forUnitTest' {
    import { DomQuery as DomQueryFromCommonlib } from "wonder-commonlib/dist/es2015/utils/DomQuery";
    import { Operator } from "wonder-frp/dist/es2015/global/Operator";
    import { Map } from "immutable";
    export const initThreeDTransformData: (GlobalTempData: any, ThreeDTransformData: any) => void;
    export const DomQuery: typeof DomQueryFromCommonlib;
    export const fromArray: typeof Operator.fromArray;
    export const initTagData: (TagData: any) => void;
    export const initGeometryData: (DataBufferConfig: any, GeometryData: any, GPUDetectData: any) => void;
    export const initMaterialData: (TextureCacheData: any, TextureData: any, MapManagerData: any, MaterialData: any, BasicMaterialData: any, LightMaterialData: any) => void;
    export const initWebGL1ShaderData: (ShaderDataFromSystem: any) => void;
    export const initWebGL2ShaderData: (ShaderDataFromSystem: any) => void;
    export const initProgramData: (ProgramDataFromSystem: any) => void;
    export const initWebGL1LocationData: (LocationDataFromSystem: any) => void;
    export const initWebGL2LocationData: (LocationDataFromSystem: any) => void;
    export const initWebGL1GLSLSenderData: (GLSLSenderDataFromSystem: any) => void;
    export const initWebGL2GLSLSenderData: (GLSLSenderDataFromSystem: any) => void;
    export const initMeshRendererData: (MeshRendererData: any) => void;
    export const initArrayBufferData: (ArrayBufferDataFromSystemFromSystem: any) => void;
    export const initIndexBufferData: (IndexBufferDataFromSystem: any) => void;
    export const initDeviceManagerData: (DeviceManagerDataFromSystem: any) => void;
    export const initCameraControllerData: (CameraControllerData: any, PerspectiveCameraData: any, CameraData: any) => void;
    export const initWebGL1LightData: (AmbientLightData: any, DirectionLightData: any, PointLightData: any) => void;
    export const initWebGL2LightData: (AmbientLightData: any, DirectionLightData: any, PointLightData: any) => void;
    export const initGameObjectData: (GameObjectData: any) => void;
    export const initSceneData: (SceneData: any) => void;
    export const initRenderCommandBufferData: (DataBufferConfig: any, BasicRenderCommandBufferData: any, LightRenderCommandBufferData: any) => void;
    export const initDrawRenderCommandBufferData: (BasicDrawRenderCommandBufferDataFromSystem: any, LightDrawRenderCommandBufferDataFromSystem: any) => void;
    export const initSendDrawRenderCommandBufferData: (SendDrawRenderCommandBufferData: any) => void;
    export const initVaoData: (VaoDataFromSystem: any) => void;
    export const initDeferLightPassData: (DeferAmbientLightPassDataFromSystem: any, DeferDirectionLightPassDataFromSystem: any, DeferPointLightPassDataFromSystem: any) => void;
    export const initWebGL1GPUDetectData: (GPUDetectDataFromSystem: any) => void;
    export const initWebGL2GPUDetectData: (GPUDetectDataFromSystem: any) => void;
    export const initData: any;
    export const createState: () => Map<{}, {}>;
    export const useProgram: any;
    export const sendWebGL1AttributeData: (gl: WebGLRenderingContext, shaderIndex: number, program: WebGLProgram, geometryIndex: number, ProgramData: any, LocationData: any, GLSLSenderData: any, GeometryData: any, ArrayBufferData: any, GPUDetectData: any, VaoData: any) => void;
    export const disableVertexAttribArray: Function;
    export const setGeometryIndices: Function;
    export const setGeometryVertices: Function;
    export const hasGeometryIndices: any;
    export const getShaderIndex: (materialIndex: number, MaterialData: any) => any;
    export const updateSystem: (elapsed: number, state: Map<any, any>) => any;
    export const getNormalMatrix: Function;
    export const getWorldToCameraMatrix: (...args: any[]) => any;
    export const getImageData: (source: HTMLImageElement, width: number, height: number, DomQuery: any) => any;
    export const hasDiffuseMap: (index: number, LightMaterialData: any) => boolean;
    export const hasSpecularMap: (index: number, LightMaterialData: any) => boolean;
}

declare module 'wonder.js/dist/es2015/utils/BufferUtilsForUnitTest' {
    export class BufferUtilsForUnitTest {
        static isRenderCommandBufferDataTypeArrayNotExist(RenderCommandBufferDataFromSystem: any): boolean;
    }
}

declare module 'wonder.js/dist/es2015/utils/Log' {
    import { Log as Log$ } from "wonder-commonlib/dist/es2015/Log";
    export class Log extends Log$ {
    }
}

declare module 'wonder.js/dist/es2015/utils/time/CommonTimeController' {
    import { TimeController } from "wonder.js/dist/es2015/utils/time/TimeController";
    export class CommonTimeController extends TimeController {
        static create(): CommonTimeController;
        protected getNow(): any;
    }
}

declare module 'wonder.js/dist/es2015/utils/time/DirectorTimeController' {
    import { TimeController } from "wonder.js/dist/es2015/utils/time/TimeController";
    export class DirectorTimeController extends TimeController {
        static create(): DirectorTimeController;
        gameTime: number;
        fps: number;
        isTimeChange: boolean;
        deltaTime: number;
        tick(time: number): void;
        start(): void;
        resume(): void;
        protected getNow(): any;
    }
}

declare module 'wonder.js/dist/es2015/utils/time/TimeController' {
    export abstract class TimeController {
        elapsed: number;
        pauseElapsed: number;
        pauseTime: number;
        startTime: number;
        start(): void;
        stop(): void;
        pause(): void;
        resume(): void;
        computeElapseTime(time: number): number;
        protected abstract getNow(): any;
    }
}

declare module 'wonder.js/dist/es2015/worker/WorkerInstanceData' {
    export class WorkerInstanceData {
        static renderWorker: Worker;
    }
}

declare module 'wonder.js/dist/es2015/asset/dataType' {
    export type AssetData = {
        id: string;
        url: Array<string>;
    };
}

declare module 'wonder.js/dist/es2015/core/entityObject/gameObject/IUIdEntity' {
    export interface IUIdEntity {
        uid: number;
    }
}

declare module 'wonder.js/dist/es2015/component/ComponentSystem' {
    import { ComponentGameObjectMap } from "wonder.js/dist/es2015/component/ComponentData";
    import { Component } from "wonder.js/dist/es2015/component/Component";
    import { GameObject } from "wonder.js/dist/es2015/core/entityObject/gameObject/GameObject";
    import { Map as MapImmutable } from "immutable";
    import { IUIdEntity } from "wonder.js/dist/es2015/core/entityObject/gameObject/IUIdEntity";
    export const addAddComponentHandle: (_class: any, handle: Function) => void;
    export const addDisposeHandle: (_class: any, handle: Function) => void;
    export const addInitHandle: (_class: any, handle: (index: number, state: MapImmutable<any, any>) => void) => void;
    export const execHandle: (component: Component, handleMapName: string, args?: any[]) => void;
    export const execInitHandle: (typeId: string, index: number, state: MapImmutable<any, any>) => void;
    export const checkComponentShouldAlive: (component: Component, data: any, isAlive: (component: Component, data: any) => boolean) => void;
    export const addComponentToGameObjectMap: Function;
    export const getComponentGameObject: (gameObjectMap: ComponentGameObjectMap | GameObject[], index: number) => IUIdEntity;
    export const generateComponentIndex: (ComponentData: any) => number;
    export const deleteComponent: Function;
    export const deleteComponentBySwapArray: Function;
    export const markComponentIndexRemoved: (component: Component) => void;
    export const isComponentIndexNotRemoved: (component: Component) => boolean;
    export type ComponentMap = {
        [index: number]: Component;
    };
}

declare module 'wonder.js/dist/es2015/definition/type/geometryType' {
    export type GeometryWorkerInfoList = Array<{
        index: number;
        startIndex: number;
        endIndex: number;
    }>;
    export type GeometryVertexCacheMap = {
        [index: number]: Float32Array;
    };
    export type GeometryNormalsCacheMap = {
        [index: number]: Float32Array;
    };
    export type GeometryIndicesCacheMap = {
        [index: number]: Uint16Array | Uint32Array;
    };
    export type GeometryInfoList = Array<GeometryInfo>;
    export type GeometryInfo = {
        startIndex: number;
        endIndex: number;
    };
    export type GetArrayBufferDataFuncMap = {
        getVertices: Function;
        getNormals: Function;
        getTexCoords: Function;
    };
}

declare module 'wonder.js/dist/es2015/renderer/type/dataType' {
    import { EBufferType } from "wonder.js/dist/es2015/renderer/enum/EBufferType";
    import { IWebGL1SendAttributeConfig, IWebGL1SendUniformConfig } from "wonder.js/dist/es2015/renderer/worker/webgl1/both_file/data/shaderLib_generator";
    import { IWebGL2SendAttributeConfig, IWebGL2SendUniformConfig } from "wonder.js/dist/es2015/renderer/worker/webgl2/both_file/data/shaderLib_generator";
    import { WebGLVertexArrayObject } from "wonder.js/dist/es2015/renderer/extend/interface";
    export type ProgramMap = {
        [index: number]: WebGLProgram;
    };
    export type AttributeLocationMap = {
        [index: number]: AttributeShaderLocationMap;
    };
    export type UniformLocationMap = {
        [index: number]: UniformShaderLocationMap;
    };
    export type AttributeShaderLocationMap = {
        [name: string]: number;
    };
    export type UniformShaderLocationMap = {
        [name: string]: WebGLUniformLocation;
    };
    export type SendAttributeConfigMap = {
        [index: number]: Array<IWebGL1SendAttributeConfig | IWebGL2SendAttributeConfig>;
    };
    export type SendUniformConfigMap = {
        [index: number]: Array<IWebGL1SendUniformConfig | IWebGL2SendUniformConfig>;
    };
    export type SendUniformFuncConfigMap = {
        [index: number]: Function;
    };
    export type UniformCacheMap = {
        [index: number]: {
            [name: string]: any;
        };
    };
    export type ArrayBufferDataMap = {
        [geometryIndex: number]: {
            size: number;
            type: EBufferType;
        };
    };
    export type BasicRenderUniformData = {
        mMatrix: Float32Array;
        vMatrix: Float32Array;
        pMatrix: Float32Array;
    };
    export type LightRenderUniformData = {
        mMatrix: Float32Array;
        vMatrix: Float32Array;
        pMatrix: Float32Array;
        cameraPosition: Float32Array;
        normalMatrix: Float32Array;
    };
    export type ContextConfigOptionsData = {
        alpha: boolean;
        depth: boolean;
        stencil: boolean;
        antialias: boolean;
        premultipliedAlpha: boolean;
        preserveDrawingBuffer: boolean;
    };
    export type BuildGLSLSourceFuncFuncDataMap = {
        getAlphaTest: Function;
        isTestAlpha: Function;
    };
    export type MaterialDataMap = {
        MaterialDataFromSystem: any;
        BasicMaterialDataFromSystem: any;
        LightMaterialDataFromSystem: any;
    };
    export type MaterialWorkerInitDataList = Array<{
        index: number;
        className: string;
    }>;
    export type DirectionLightGLSLDataStructure = {
        position: string;
        color: string;
        intensity: string;
    };
    export type ShaderIndexMap = {
        [shaderLibName: string]: number;
    };
    export type ShaderIndexByShaderNameMap = {
        [shaderName: string]: number;
    };
    export type ShaderLibNameMap = {
        [materialIndex: number]: string;
    };
    export type PointLightGLSLDataStructure = {
        position: string;
        color: string;
        intensity: string;
        constant: string;
        linear: string;
        quadratic: string;
        range: string;
    };
    export type TypeArr = Float32Array | Uint32Array | Uint16Array | Uint8Array | Uint8Array;
    export type DisposedTextureDataMap = Array<{
        sourceIndex: number;
        lastComponentIndex: number;
    }>;
    export type VaoConfigMap = {
        [index: number]: VaoConfigData;
    };
    export type VaoConfigData = {
        positionLocation?: number;
        normalLocation?: number;
        texCoordLocation?: number;
        getVertices?: Function;
        getNormals?: Function;
        getTexCoords?: Function;
        getIndices: Function;
    };
    export type VaoMap = {
        [index: number]: WebGLVertexArrayObject;
    };
    export type VboArrayMap = {
        [index: number]: Array<WebGLBuffer>;
    };
    export type MaterialTextureList = Array<Array<number>>;
    export type TextureOffsetMap = {
        [materialIndex: number]: {
            [uniformSamplerName: string]: number;
        };
    };
}

declare module 'wonder.js/dist/es2015/definition/type/mainType' {
    import { ContextConfigOptionsData } from "wonder.js/dist/es2015/renderer/type/dataType";
    export type ContextConfigData = {
        options: ContextConfigOptionsData;
    };
    export type MainConfigData = {
        canvasId?: string;
        isTest?: boolean;
        screenSize?: any;
        useDevicePixelRatio?: boolean;
        contextConfig?: ContextConfigData;
        workerConfig?: WorkerConfigData;
    };
    export type WorkerConfigData = {
        renderWorkerFileDir: string;
    };
}

declare module 'wonder.js/dist/es2015/renderer/interface/ITexture' {
    export interface ITexture {
        index: number;
    }
}

declare module 'wonder.js/dist/es2015/renderer/extend/interface' {
    export interface WebGLVertexArrayObject {
    }
}

declare module 'wonder.js/dist/es2015/renderer/webgl2/type/utilsType' {
    export type ScissorRegionArrayCacheMap = {
        [pointLightIndex: number]: Array<number> | number;
    };
}

declare module 'wonder.js/dist/es2015/renderer/webgl2/type/dataType' {
    export type UboBindingPointMap = {
        [uboName: string]: number;
    };
    export type UboSingleBufferDataList = Array<{
        name: string;
        typeArray: Float32Array;
        buffer: WebGLBuffer;
        initBufferDataFunc: Function;
        setBufferDataFunc: Function;
    }>;
    export type UboMultiBufferDataList = Array<{
        name: string;
        typeArrays: Array<Float32Array>;
        buffers: Array<WebGLBuffer>;
        setBufferDataFunc: Function;
    }>;
}

declare module 'wonder.js/dist/es2015/renderer/type/messageDataType' {
    import { EWorkerOperateType } from "wonder.js/dist/es2015/renderer/worker/both_file/EWorkerOperateType";
    import { ContextConfigOptionsData, DisposedTextureDataMap, MaterialTextureList } from "wonder.js/dist/es2015/renderer/type/dataType";
    import { EBufferType } from "wonder.js/dist/es2015/renderer/enum/EBufferType";
    import { GeometryInfoList, GeometryWorkerInfoList } from "wonder.js/dist/es2015/definition/type/geometryType";
    import { EGeometryWorkerDataOperateType } from "wonder.js/dist/es2015/renderer/enum/EGeometryWorkerDataOperateType";
    export type MessageInitGLData = {
        operateType: EWorkerOperateType;
        canvas: HTMLCanvasElement;
        options: ContextConfigOptionsData;
        viewportData: ViewportData;
    };
    export type ScreenData = {
        x: number;
        y: number;
        width: number;
        height: number;
    };
    export type ViewportData = {
        x: number;
        y: number;
        width: number;
        height: number;
    };
    export type GeometryInitWorkerData = {
        buffer: SharedArrayBuffer;
        indexType: EBufferType;
        indexTypeSize: number;
        verticesInfoList: GeometryInfoList;
        normalsInfoList: GeometryInfoList;
        texCoordsInfoList: GeometryInfoList;
        indicesInfoList: GeometryInfoList;
    };
    export type GeometryUpdateWorkerData = {
        buffer: SharedArrayBuffer;
        type: EGeometryWorkerDataOperateType;
        verticesInfoList: GeometryWorkerInfoList;
        normalsInfoList: GeometryWorkerInfoList;
        texCoordsInfoList: GeometryWorkerInfoList;
        indicesInfoList: GeometryWorkerInfoList;
    };
    export type GeometryResetWorkerData = {
        buffer: SharedArrayBuffer;
        type: EGeometryWorkerDataOperateType;
        verticesInfoList: GeometryInfoList;
        normalsInfoList: GeometryInfoList;
        texCoordsInfoList: GeometryInfoList;
        indicesInfoList: GeometryInfoList;
    };
    export type LightDrawWorkerData = {
        directionLightData: {
            positionArr: Array<Float32Array>;
        };
        pointLightData: {
            positionArr: Array<Float32Array>;
        };
    };
    export type TextureDrawWorkerData = {
        index: number;
        needAddedImageDataArr: Array<ImageArrayBufferIndexSizeData>;
        uniformSamplerNameMap: Array<string>;
        materialTextureList: MaterialTextureList;
    };
    export type TextureInitWorkerData = {
        mapManagerBuffer: SharedArrayBuffer;
        textureBuffer: SharedArrayBuffer;
        index: number;
        needAddedImageDataArr: Array<ImageArrayBufferIndexSizeData>;
        uniformSamplerNameMap: Array<string>;
    };
    export type ImageArrayBufferIndexSizeData = {
        arrayBuffer: ArrayBuffer;
        width: number;
        height: number;
        index: number;
    };
    export type TextureDisposeWorkerData = {
        disposedTextureDataMap: DisposedTextureDataMap;
    };
}

declare module 'wonder.js/dist/es2015/renderer/data/shaderLib_generator_interface' {
    import { GLSLChunk } from "wonder.js/dist/es2015/renderer/shader/chunk/ShaderChunk";
    export interface IShaderLibGenerator {
        shaderLibs: any;
    }
    export interface IShaderLibContentGenerator {
        [shaderLibName: string]: any;
    }
    export interface IGLSLConfig {
        source?: GLSLChunk;
        top?: string;
        varDeclare?: string;
        funcDeclare?: string;
        funcDefine?: string;
        body?: string;
        define?: string;
        defineList?: Array<IGLSLDefineListItem>;
    }
    export interface IGLSLDefineListItem {
        name: string;
        valueFunc?: Function;
    }
    export interface IDefineUniformConfig {
        name: string;
        type: string;
    }
    export interface ISendUniformConfig {
        name: string;
        field: string;
        type: string;
        fieldType?: string;
        from?: string;
    }
}

