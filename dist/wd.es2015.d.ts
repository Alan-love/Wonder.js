// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../../immutable
//   ../../wonder-fantasy-land/dist/es2015/types/IO
//   ../../wonder-commonlib/dist/es2015/utils/DomQuery
//   ../../wonder-frp/dist/es2015/global/Operator
//   ../../wonder-commonlib/dist/es2015/Log

declare module 'wonder.js/dist/es2015' {
    export { getCameraPMatrix, getCameraNear, setCameraNear, getCameraFar, setCameraFar } from "wonder.js/dist/es2015/component/camera/Camera";
    export { CameraController, createCameraController, getCameraControllerGameObject } from "wonder.js/dist/es2015/component/camera/CameraController";
    export { CameraControllerData } from "wonder.js/dist/es2015/component/camera/CameraControllerData";
    export { CameraData } from "wonder.js/dist/es2015/component/camera/CameraData";
    export { getPerspectiveCameraFovy, setPerspectiveCameraFovy, getPerspectiveCameraAspect, setPerspectiveCameraAspect } from "wonder.js/dist/es2015/component/camera/PerspectiveCamera";
    export { PerspectiveCameraData } from "wonder.js/dist/es2015/component/camera/PerspectiveCameraData";
    export { Component } from "wonder.js/dist/es2015/component/Component";
    export { getComponentIDFromClass, getComponentIDFromComponent } from "wonder.js/dist/es2015/component/ComponentComponentIDManager";
    export { ComponentData } from "wonder.js/dist/es2015/component/ComponentData";
    export { getTypeIDFromClass, getTypeIDFromComponent } from "wonder.js/dist/es2015/component/ComponentTypeIDManager";
    export { BoxGeometry, createBoxGeometry, setBoxGeometryConfigData } from "wonder.js/dist/es2015/component/geometry/BoxGeometry";
    export { CustomGeometry, createCustomGeometry, setCustomGeometryVertices, setCustomGeometryNormals, setCustomGeometryTexCoords, setCustomGeometryIndices } from "wonder.js/dist/es2015/component/geometry/CustomGeometry";
    export { Geometry, getDrawMode, getVertices, getNormals, getTexCoords, getIndices, getGeometryConfigData, initGeometry, getGeometryGameObject } from "wonder.js/dist/es2015/component/geometry/Geometry";
    export { GeometryData } from "wonder.js/dist/es2015/component/geometry/GeometryData";
    export { AmbientLight, createAmbientLight, getAmbientLightGameObject, getAmbientLightColor, setAmbientLightColor } from "wonder.js/dist/es2015/component/light/AmbientLight";
    export { AmbientLightData } from "wonder.js/dist/es2015/component/light/AmbientLightData";
    export { DirectionLight, createDirectionLight, getDirectionLightGameObject, getDirectionLightPosition, getDirectionLightColor, setDirectionLightColor, getDirectionLightIntensity, setDirectionLightIntensity } from "wonder.js/dist/es2015/component/light/DirectionLight";
    export { DirectionLightData } from "wonder.js/dist/es2015/component/light/DirectionLightData";
    export { Light, checkLightShouldAlive } from "wonder.js/dist/es2015/component/light/Light";
    export { PointLight, createPointLight, getPointLightGameObject, getPointLightPosition, getPointLightColor, setPointLightColor, getPointLightIntensity, setPointLightIntensity, getPointLightConstant, setPointLightConstant, getPointLightLinear, setPointLightLinear, getPointLightQuadratic, setPointLightQuadratic, getPointLightRange, setPointLightRange, setPointLightRangeLevel } from "wonder.js/dist/es2015/component/light/PointLight";
    export { PointLightData } from "wonder.js/dist/es2015/component/light/PointLightData";
    export { SpecifyLightData } from "wonder.js/dist/es2015/component/light/SpecifyLightData";
    export { BasicMaterial, createBasicMaterial, initBasicMaterial, getBasicMaterialColor, setBasicMaterialColor, getBasicMaterialOpacity, setBasicMaterialOpacity, getBasicMaterialAlphaTest, setBasicMaterialAlphaTest, addBasicMaterialMap } from "wonder.js/dist/es2015/component/material/BasicMaterial";
    export { BasicMaterialData } from "wonder.js/dist/es2015/component/material/BasicMaterialData";
    export { ELightModel } from "wonder.js/dist/es2015/component/material/ELightModel";
    export { EShading } from "wonder.js/dist/es2015/component/material/EShading";
    export { LightMaterial, createLightMaterial, initLightMaterial, getLightMaterialColor, setLightMaterialColor, getLightMaterialOpacity, setLightMaterialOpacity, getLightMaterialAlphaTest, setLightMaterialAlphaTest, getLightMaterialSpecularColor, setLightMaterialSpecularColor, getLightMaterialEmissionColor, setLightMaterialEmissionColor, getLightMaterialShininess, setLightMaterialShininess, getLightMaterialShading, setLightMaterialShading, getLightMaterialLightModel, setLightMaterialLightModel, setLightMaterialDiffuseMap, setLightMaterialSpecularMap } from "wonder.js/dist/es2015/component/material/LightMaterial";
    export { LightMaterialData } from "wonder.js/dist/es2015/component/material/LightMaterialData";
    export { Material, getMaterialGameObject, checkShouldAlive } from "wonder.js/dist/es2015/component/material/Material";
    export { MaterialData } from "wonder.js/dist/es2015/component/material/MaterialData";
    export { SpecifyMaterialData } from "wonder.js/dist/es2015/component/material/SpecifyMaterialData";
    export { MeshRenderer, createMeshRenderer, getMeshRendererGameObject, getMeshRendererRenderList } from "wonder.js/dist/es2015/component/renderer/MeshRenderer";
    export { MeshRendererData } from "wonder.js/dist/es2015/component/renderer/MeshRendererData";
    export { Tag, createTag, addTag, removeTag, findGameObjectsByTag, getTagGameObject } from "wonder.js/dist/es2015/component/tag/Tag";
    export { TagData } from "wonder.js/dist/es2015/component/tag/TagData";
    export { LinkList, LinkNode } from "wonder.js/dist/es2015/component/transform/LinkList";
    export { ThreeDTransform, createThreeDTransform, getThreeDTransformPosition, setThreeDTransformPosition, getThreeDTransformLocalToWorldMatrix, getThreeDTransformLocalPosition, setThreeDTransformLocalPosition, setThreeDTransformBatchTransformDatas, getThreeDTransformParent, setThreeDTransformParent, getThreeDTransformGameObject } from "wonder.js/dist/es2015/component/transform/ThreeDTransform";
    export { ThreeDTransformData, ThreeDTransformRelationData } from "wonder.js/dist/es2015/component/transform/ThreeDTransformData";
    export { getUID, isIndexUsed, getStartIndexInArrayBuffer } from "wonder.js/dist/es2015/component/transform/utils";
    export { CompileConfig } from "wonder.js/dist/es2015/config/CompileConfig";
    export { DataBufferConfig } from "wonder.js/dist/es2015/config/DataBufferConfig";
    export { DebugConfig } from "wonder.js/dist/es2015/config/DebugConfig";
    export { MemoryConfig } from "wonder.js/dist/es2015/config/MemoryConfig";
    export { RenderWorkerConfig } from "wonder.js/dist/es2015/config/RenderWorkerConfig";
    export { Director } from "wonder.js/dist/es2015/core/Director";
    export { DirectorData } from "wonder.js/dist/es2015/core/DirectorData";
    export { GameObject, createGameObject, addGameObjectComponent, disposeGameObject, initGameObject, disposeGameObjectComponent, getGameObjectComponent, getGameObjectTransform, hasGameObjectComponent, isGameObjectAlive, addGameObject, removeGameObject, hasGameObject, getGameObjectChildren, getGameObjectParent } from "wonder.js/dist/es2015/core/entityObject/gameObject/GameObject";
    export { GameObjectData } from "wonder.js/dist/es2015/core/entityObject/gameObject/GameObjectData";
    export { Scene, addSceneChild, removeSceneChild } from "wonder.js/dist/es2015/core/entityObject/scene/Scene";
    export { SceneData } from "wonder.js/dist/es2015/core/entityObject/scene/SceneData";
    export { Main } from "wonder.js/dist/es2015/core/Main";
    export { Scheduler } from "wonder.js/dist/es2015/core/Scheduler";
    export { GlobalTempData } from "wonder.js/dist/es2015/definition/GlobalTempData";
    export { cache } from "wonder.js/dist/es2015/definition/typescript/decorator/cache";
    export { assert, describe, it, requireCheck, requireCheckFunc, ensure, ensureFunc, requireGetterAndSetter, requireGetter, requireSetter, ensureGetterAndSetter, ensureGetter, ensureSetter, invariant } from "wonder.js/dist/es2015/definition/typescript/decorator/contract";
    export { execOnlyOnce } from "wonder.js/dist/es2015/definition/typescript/decorator/control";
    export { registerClass } from "wonder.js/dist/es2015/definition/typescript/decorator/registerClass";
    export { singleton } from "wonder.js/dist/es2015/definition/typescript/decorator/singleton";
    export { virtual } from "wonder.js/dist/es2015/definition/typescript/decorator/virtual";
    export { root } from "wonder.js/dist/es2015/definition/Variable";
    export { WorkerDetectData } from "wonder.js/dist/es2015/device/WorkerDetectData";
    export { DEG_TO_RAD, RAD_TO_DEG } from "wonder.js/dist/es2015/math/Global";
    export { Matrix3 } from "wonder.js/dist/es2015/math/Matrix3";
    export { Matrix4 } from "wonder.js/dist/es2015/math/Matrix4";
    export { Quaternion } from "wonder.js/dist/es2015/math/Quaternion";
    export { Vector2 } from "wonder.js/dist/es2015/math/Vector2";
    export { Vector3 } from "wonder.js/dist/es2015/math/Vector3";
    export { Vector4 } from "wonder.js/dist/es2015/math/Vector4";
    export { ArrayBufferData } from "wonder.js/dist/es2015/renderer/buffer/ArrayBufferData";
    export { IndexBufferData } from "wonder.js/dist/es2015/renderer/buffer/IndexBufferData";
    export { RenderCommandBufferData } from "wonder.js/dist/es2015/renderer/command_buffer/RenderCommandBufferData";
    export { InitConfigData } from "wonder.js/dist/es2015/renderer/config/InitConfigData";
    export { material_config } from "wonder.js/dist/es2015/renderer/data/material_config";
    export { render_config } from "wonder.js/dist/es2015/renderer/data/render_config";
    export { shaderLib_generator } from "wonder.js/dist/es2015/renderer/data/shaderLib_generator";
    export { DeviceManager, setDeviceManagerGL } from "wonder.js/dist/es2015/renderer/device/DeviceManager";
    export { DeviceManagerData } from "wonder.js/dist/es2015/renderer/device/DeviceManagerData";
    export { EScreenSize } from "wonder.js/dist/es2015/renderer/device/EScreenSize";
    export { GPUDetector, EGPUPrecision } from "wonder.js/dist/es2015/renderer/device/GPUDetector";
    export { DrawRenderCommandBufferData } from "wonder.js/dist/es2015/renderer/draw/DrawRenderCommandBufferData";
    export { EBufferType } from "wonder.js/dist/es2015/renderer/enum/EBufferType";
    export { EDrawMode } from "wonder.js/dist/es2015/renderer/enum/EDrawMode";
    export { EGeometryWorkerDataOperateType } from "wonder.js/dist/es2015/renderer/enum/EGeometryWorkerDataOperateType";
    export { ELightWorkerDataOperateType } from "wonder.js/dist/es2015/renderer/enum/ELightWorkerDataOperateType";
    export { ESide } from "wonder.js/dist/es2015/renderer/enum/ESide";
    export { ETextureFilterMode } from "wonder.js/dist/es2015/renderer/enum/ETextureFilterMode";
    export { ETextureFormat } from "wonder.js/dist/es2015/renderer/enum/ETextureFormat";
    export { ETextureTarget } from "wonder.js/dist/es2015/renderer/enum/ETextureTarget";
    export { ETextureType } from "wonder.js/dist/es2015/renderer/enum/ETextureType";
    export { ETextureWrapMode } from "wonder.js/dist/es2015/renderer/enum/ETextureWrapMode";
    export { EVariableType } from "wonder.js/dist/es2015/renderer/enum/EVariableType";
    export { empty, NULL, basic_materialColor_fragment, end_basic_fragment, common_define, common_fragment, common_function, common_vertex, highp_fragment, lowp_fragment, mediump_fragment, noNormalMap_light_fragment, lightCommon_fragment, lightCommon_vertex, lightEnd_fragment, light_common, light_fragment, light_setWorldPosition_vertex, light_vertex, map_forBasic_fragment, map_forBasic_vertex, modelMatrix_noInstance_vertex, normalMatrix_noInstance_vertex, diffuseMap_fragment, diffuseMap_vertex, noDiffuseMap_fragment, noEmissionMap_fragment, noLightMap_fragment, noNormalMap_fragment, noNormalMap_vertex, noSpecularMap_fragment, specularMap_fragment, specularMap_vertex, noShadowMap_fragment } from "wonder.js/dist/es2015/renderer/shader/chunk/ShaderChunk";
    export { GLSLSenderData } from "wonder.js/dist/es2015/renderer/shader/glslSender/GLSLSenderData";
    export { LocationData } from "wonder.js/dist/es2015/renderer/shader/location/LocationData";
    export { ProgramData } from "wonder.js/dist/es2015/renderer/shader/program/ProgramData";
    export { ShaderData } from "wonder.js/dist/es2015/renderer/shader/ShaderData";
    export { main_begin, main_end, setPos_mvp } from "wonder.js/dist/es2015/renderer/shader/snippet/ShaderSnippet";
    export { MapManagerData } from "wonder.js/dist/es2015/renderer/texture/MapManagerData";
    export { Texture, createTexture, disposeTexture, getTextureSource, setTextureSource, getTextureWidth, setTextureWidth, getTextureHeight, setTextureHeight, getTextureIsNeedUpdate, setTextureIsNeedUpdate } from "wonder.js/dist/es2015/renderer/texture/Texture";
    export { TextureCacheData } from "wonder.js/dist/es2015/renderer/texture/TextureCacheData";
    export { TextureData } from "wonder.js/dist/es2015/renderer/texture/TextureData";
    export { DeviceManagerWorkerData } from "wonder.js/dist/es2015/renderer/worker/both_file/device/DeviceManagerWorkerData";
    export { ERenderWorkerState } from "wonder.js/dist/es2015/renderer/worker/both_file/ERenderWorkerState";
    export { EWorkerOperateType } from "wonder.js/dist/es2015/renderer/worker/both_file/EWorkerOperateType";
    export { SendDrawRenderCommandBufferData } from "wonder.js/dist/es2015/renderer/worker/logic_file/draw/SendDrawRenderCommandBufferData";
    export { ArrayBufferWorkerData } from "wonder.js/dist/es2015/renderer/worker/render_file/buffer/ArrayBufferWorkerData";
    export { IndexBufferWorkerData } from "wonder.js/dist/es2015/renderer/worker/render_file/buffer/IndexBufferWorkerData";
    export { InitConfigWorkerData } from "wonder.js/dist/es2015/renderer/worker/render_file/config/InitConfigWorkerData";
    export { DrawRenderCommandBufferWorkerData } from "wonder.js/dist/es2015/renderer/worker/render_file/draw/DrawRenderCommandBufferWorkerData";
    export { GeometryWorkerData } from "wonder.js/dist/es2015/renderer/worker/render_file/geometry/GeometryWorkerData";
    export { initGL } from "wonder.js/dist/es2015/renderer/worker/render_file/initGL";
    export { AmbientLightWorkerData } from "wonder.js/dist/es2015/renderer/worker/render_file/light/AmbientLightWorkerData";
    export { DirectionLightWorkerData } from "wonder.js/dist/es2015/renderer/worker/render_file/light/DirectionLightWorkerData";
    export { PointLightWorkerData } from "wonder.js/dist/es2015/renderer/worker/render_file/light/PointLightWorkerData";
    export { SpecifyLightWorkerData } from "wonder.js/dist/es2015/renderer/worker/render_file/light/SpecifyLightWorkerData";
    export { BasicMaterialWorkerData } from "wonder.js/dist/es2015/renderer/worker/render_file/material/BasicMaterialWorkerData";
    export { LightMaterialWorkerData } from "wonder.js/dist/es2015/renderer/worker/render_file/material/LightMaterialWorkerData";
    export { MaterialWorkerData } from "wonder.js/dist/es2015/renderer/worker/render_file/material/MaterialWorkerData";
    export { GLSLSenderWorkerData } from "wonder.js/dist/es2015/renderer/worker/render_file/shader/glslSender/GLSLSenderWorkerData";
    export { LocationWorkerData } from "wonder.js/dist/es2015/renderer/worker/render_file/shader/location/LocationWorkerData";
    export { ProgramWorkerData } from "wonder.js/dist/es2015/renderer/worker/render_file/shader/program/ProgramWorkerData";
    export { ShaderWorkerData } from "wonder.js/dist/es2015/renderer/worker/render_file/shader/ShaderWorkerData";
    export { StateData } from "wonder.js/dist/es2015/renderer/worker/render_file/state/StateData";
    export { getState, setState } from "wonder.js/dist/es2015/renderer/worker/render_file/state/StateSytem";
    export { MapManagerWorkerData } from "wonder.js/dist/es2015/renderer/worker/render_file/texture/MapManagerWorkerData";
    export { TextureCacheWorkerData } from "wonder.js/dist/es2015/renderer/worker/render_file/texture/TextureCacheWorkerData";
    export { TextureWorkerData } from "wonder.js/dist/es2015/renderer/worker/render_file/texture/TextureWorkerData";
    export { Color } from "wonder.js/dist/es2015/structure/Color";
    export { RectRegion } from "wonder.js/dist/es2015/structure/RectRegion";
    export { View } from "wonder.js/dist/es2015/structure/View";
    export { initDeviceManagerWorkerData, initProgramWorkerData, initGLSLSenderWorkerData, initLocationWorkerData, initShaderWorkerData, initLightWorkerData, initDrawRenderCommandBufferWorkerData, getDirectionLightPositionInShaderWorker, getPointLightPositionInShaderWorker, updateTextureWorker } from "wonder.js/dist/es2015/test/forRenderWorkerUnitTest";
    export { initThreeDTransformData, DomQuery, fromArray, initTagData, initGeometryData, initMaterialData, initShaderData, initProgramData, initLocationData, initGLSLSenderData, initMeshRendererData, initArrayBufferData, initIndexBufferData, initDeviceManagerData, initCameraControllerData, initLightData, initGameObjectData, initSceneData, initRenderCommandBufferData, initDrawRenderCommandBufferData, initSendDrawRenderCommandBufferData, createState, useProgram, sendAttributeData, sendUniformData, disableVertexAttribArray, setGeometryIndices, setGeometryVertices, hasGeometryIndices, getShaderIndex, updateSystem, getNormalMatrix } from "wonder.js/dist/es2015/test/forUnitTest";
    export { BufferUtilsForUnitTest } from "wonder.js/dist/es2015/utils/BufferUtilsForUnitTest";
    export { Log } from "wonder.js/dist/es2015/utils/Log";
    export { CommonTimeController } from "wonder.js/dist/es2015/utils/time/CommonTimeController";
    export { DirectorTimeController } from "wonder.js/dist/es2015/utils/time/DirectorTimeController";
    export { TimeController } from "wonder.js/dist/es2015/utils/time/TimeController";
    export { WorkerInstanceData } from "wonder.js/dist/es2015/worker/WorkerInstanceData";
}

declare module 'wonder.js/dist/es2015/component/camera/Camera' {
    import { CameraController } from "wonder.js/dist/es2015/component/camera/CameraController";
    export var getCameraPMatrix: (cameraController: CameraController) => any;
    export var getCameraNear: (cameraController: CameraController) => any;
    export var setCameraNear: (cameraController: CameraController, near: number) => void;
    export var getCameraFar: (cameraController: CameraController) => any;
    export var setCameraFar: (cameraController: CameraController, far: number) => void;
}

declare module 'wonder.js/dist/es2015/component/camera/CameraController' {
    import { Component } from "wonder.js/dist/es2015/component/Component";
    import { IUIDEntity } from "wonder.js/dist/es2015/core/entityObject/gameObject/IUIDEntity";
    export class CameraController extends Component {
    }
    export var createCameraController: () => any;
    export var getCameraControllerGameObject: (component: CameraController) => IUIDEntity;
}

declare module 'wonder.js/dist/es2015/component/camera/CameraControllerData' {
    import { ComponentGameObjectMap } from "wonder.js/dist/es2015/component/ComponentData";
    import { Matrix4 } from "wonder.js/dist/es2015/math/Matrix4";
    export class CameraControllerData {
        static index: number;
        static count: number;
        static dirtyIndexArray: Array<number>;
        static gameObjectMap: ComponentGameObjectMap;
        static worldToCameraMatrixCacheMap: WorldToCameraMatrixCacheMap;
    }
    export type WorldToCameraMatrixCacheMap = {
        [index: number]: Matrix4;
    };
}

declare module 'wonder.js/dist/es2015/component/camera/CameraData' {
    import { Matrix4 } from "wonder.js/dist/es2015/math/Matrix4";
    export class CameraData {
        static nearMap: NearMap;
        static farMap: FarMap;
        static worldToCameraMatrixMap: WorldToCameraMatrixMap;
        static pMatrixMap: PMatrixMap;
    }
    export type NearMap = {
        [cameraControllerIndex: number]: number;
    };
    export type FarMap = {
        [cameraControllerIndex: number]: number;
    };
    export type WorldToCameraMatrixMap = {
        [cameraControllerIndex: number]: Matrix4;
    };
    export type PMatrixMap = {
        [cameraControllerIndex: number]: Matrix4;
    };
}

declare module 'wonder.js/dist/es2015/component/camera/PerspectiveCamera' {
    import { CameraController } from "wonder.js/dist/es2015/component/camera/CameraController";
    export var getPerspectiveCameraFovy: (cameraController: CameraController) => any;
    export var setPerspectiveCameraFovy: (cameraController: CameraController, fovy: number) => void;
    export var getPerspectiveCameraAspect: (cameraController: CameraController) => any;
    export var setPerspectiveCameraAspect: (cameraController: CameraController, aspect: number) => void;
}

declare module 'wonder.js/dist/es2015/component/camera/PerspectiveCameraData' {
    export class PerspectiveCameraData {
        static fovyMap: FovyMap;
        static aspectMap: AspectMap;
    }
    export type FovyMap = {
        [cameraControllerIndex: number]: number;
    };
    export type AspectMap = {
        [cameraControllerIndex: number]: number;
    };
}

declare module 'wonder.js/dist/es2015/component/Component' {
    export class Component {
        index: number;
    }
}

declare module 'wonder.js/dist/es2015/component/ComponentComponentIDManager' {
    import { Component } from "wonder.js/dist/es2015/component/Component";
    export var getComponentIDFromClass: (_class: any) => any;
    export var getComponentIDFromComponent: (component: Component) => any;
}

declare module 'wonder.js/dist/es2015/component/ComponentData' {
    import { Component } from "wonder.js/dist/es2015/component/Component";
    import { Map as MapImmutable } from "immutable";
    import { IUIDEntity } from "wonder.js/dist/es2015/core/entityObject/gameObject/IUIDEntity";
    export class ComponentData {
        static addComponentHandleMap: AddComponentHandleMap;
        static disposeHandleMap: DisposeHandleMap;
        static initHandleMap: InitHandleMap;
    }
    export type AddComponentHandleMap = {
        [typeID: string]: (component: Component, gameObject: IUIDEntity) => void;
    };
    export type DisposeHandleMap = {
        [typeID: string]: (component: Component) => void;
    };
    export type InitHandleMap = {
        [typeID: string]: (index: number, state: MapImmutable<any, any>) => void;
    };
    export type ComponentGameObjectMap = {
        [index: number]: IUIDEntity;
    };
}

declare module 'wonder.js/dist/es2015/component/ComponentTypeIDManager' {
    import { Component } from "wonder.js/dist/es2015/component/Component";
    export var getTypeIDFromClass: (_class: any) => any;
    export var getTypeIDFromComponent: (component: Component) => any;
}

declare module 'wonder.js/dist/es2015/component/geometry/BoxGeometry' {
    import { Geometry } from "wonder.js/dist/es2015/component/geometry/Geometry";
    export class BoxGeometry extends Geometry {
    }
    export var createBoxGeometry: () => BoxGeometry;
    export var setBoxGeometryConfigData: (geometry: BoxGeometry, data: BoxGeometryConfigData) => void;
    export type BoxGeometryConfigDataMap = {
        [index: number]: BoxGeometryConfigData;
    };
    export type BoxGeometryConfigData = {
        width?: number;
        height?: number;
        depth?: number;
        widthSegments?: number;
        heightSegments?: number;
        depthSegments?: number;
    };
}

declare module 'wonder.js/dist/es2015/component/geometry/CustomGeometry' {
    import { Geometry } from "wonder.js/dist/es2015/component/geometry/Geometry";
    export class CustomGeometry extends Geometry {
    }
    export var createCustomGeometry: () => any;
    export var setCustomGeometryVertices: (geometry: Geometry, vertices: Float32Array) => any;
    export var setCustomGeometryNormals: (geometry: Geometry, normals: Float32Array) => any;
    export var setCustomGeometryTexCoords: (geometry: Geometry, texCoords: Float32Array) => any;
    export var setCustomGeometryIndices: (geometry: Geometry, indices: Uint16Array | Uint32Array) => any;
}

declare module 'wonder.js/dist/es2015/component/geometry/Geometry' {
    import { Component } from "wonder.js/dist/es2015/component/Component";
    export abstract class Geometry extends Component {
    }
    export var getDrawMode: Function;
    export var getVertices: Function;
    export var getNormals: Function;
    export var getTexCoords: Function;
    export var getIndices: Function;
    export var getGeometryConfigData: Function;
    export var initGeometry: (geometry: Geometry) => void;
    export var getGeometryGameObject: Function;
}

declare module 'wonder.js/dist/es2015/component/geometry/GeometryData' {
    import { EBufferType } from "wonder.js/dist/es2015/renderer/enum/EBufferType";
    import { ComponentGameObjectMap } from "wonder.js/dist/es2015/component/ComponentData";
    import { ComponentMap } from "wonder.js/dist/es2015/component/ComponentSystem";
    import { GeometryIndicesCacheMap, GeometryInfoList, GeometryNormalsCacheMap, GeometryVertexCacheMap, GeometryWorkerInfoList } from "wonder.js/dist/es2015/definition/type/geometryType";
    export class GeometryData {
        static index: number;
        static count: number;
        static disposeCount: number;
        static maxDisposeIndex: number;
        static isReallocate: boolean;
        static buffer: SharedArrayBuffer;
        static verticesOffset: number;
        static normalsOffset: number;
        static texCoordsOffset: number;
        static indicesOffset: number;
        static verticesInfoList: GeometryInfoList;
        static normalsInfoList: GeometryInfoList;
        static texCoordsInfoList: GeometryInfoList;
        static indicesInfoList: GeometryInfoList;
        static isInit: boolean;
        static verticesWorkerInfoList: GeometryWorkerInfoList;
        static normalsWorkerInfoList: GeometryWorkerInfoList;
        static texCoordsWorkerInfoList: GeometryWorkerInfoList;
        static indicesWorkerInfoList: GeometryWorkerInfoList;
        static disposedGeometryIndexArray: Array<number>;
        static vertices: Float32Array;
        static normals: Float32Array;
        static texCoords: Float32Array;
        static indices: Uint16Array | Uint32Array;
        static verticesCacheMap: GeometryVertexCacheMap;
        static normalsCacheMap: GeometryNormalsCacheMap;
        static texCoordsCacheMap: GeometryNormalsCacheMap;
        static indicesCacheMap: GeometryIndicesCacheMap;
        static indexType: EBufferType;
        static indexTypeSize: number;
        static configDataMap: object;
        static computeDataFuncMap: GeometryComputeDataFuncMap;
        static gameObjectMap: ComponentGameObjectMap;
        static geometryMap: ComponentMap;
    }
    export type GeometryComputeDataFuncMap = {
        [index: number]: (index: number, GeometryData: any) => GeometryComputeData;
    };
    export type GeometryComputeData = {
        vertices: Float32Array;
        normals: Float32Array;
        texCoords: Float32Array;
        indices: Uint16Array | Uint32Array;
    };
}

declare module 'wonder.js/dist/es2015/component/light/AmbientLight' {
    import { Light } from "wonder.js/dist/es2015/component/light/Light";
    import { Color } from "wonder.js/dist/es2015/structure/Color";
    export class AmbientLight extends Light {
    }
    export var createAmbientLight: () => any;
    export var getAmbientLightGameObject: Function;
    export var getAmbientLightColor: (light: AmbientLight) => Color;
    export var setAmbientLightColor: (light: AmbientLight, color: Color) => void;
}

declare module 'wonder.js/dist/es2015/component/light/AmbientLightData' {
    import { SpecifyLightData } from "wonder.js/dist/es2015/component/light/SpecifyLightData";
    export class AmbientLightData extends SpecifyLightData {
    }
}

declare module 'wonder.js/dist/es2015/component/light/DirectionLight' {
    import { Light } from "wonder.js/dist/es2015/component/light/Light";
    export class DirectionLight extends Light {
    }
    export var createDirectionLight: () => any;
    export var getDirectionLightGameObject: Function;
    export var getDirectionLightPosition: Function;
    export var getDirectionLightColor: Function;
    export var setDirectionLightColor: Function;
    export var getDirectionLightIntensity: Function;
    export var setDirectionLightIntensity: Function;
}

declare module 'wonder.js/dist/es2015/component/light/DirectionLightData' {
    import { SpecifyLightData } from "wonder.js/dist/es2015/component/light/SpecifyLightData";
    import { DirectionLightGLSLDataStructure } from "wonder.js/dist/es2015/renderer/type/dataType";
    export class DirectionLightData extends SpecifyLightData {
        static intensities: Float32Array;
        static defaultIntensity: number;
        static lightGLSLDataStructureMemberNameArr: Array<DirectionLightGLSLDataStructure>;
    }
}

declare module 'wonder.js/dist/es2015/component/light/Light' {
    import { Component } from "wonder.js/dist/es2015/component/Component";
    export abstract class Light extends Component {
    }
    export var checkLightShouldAlive: (component: Light) => void;
}

declare module 'wonder.js/dist/es2015/component/light/PointLight' {
    import { Light } from "wonder.js/dist/es2015/component/light/Light";
    export class PointLight extends Light {
    }
    export var createPointLight: () => any;
    export var getPointLightGameObject: Function;
    export var getPointLightPosition: Function;
    export var getPointLightColor: Function;
    export var setPointLightColor: Function;
    export var getPointLightIntensity: Function;
    export var setPointLightIntensity: Function;
    export var getPointLightConstant: Function;
    export var setPointLightConstant: Function;
    export var getPointLightLinear: Function;
    export var setPointLightLinear: Function;
    export var getPointLightQuadratic: Function;
    export var setPointLightQuadratic: Function;
    export var getPointLightRange: Function;
    export var setPointLightRange: Function;
    export var setPointLightRangeLevel: Function;
}

declare module 'wonder.js/dist/es2015/component/light/PointLightData' {
    import { SpecifyLightData } from "wonder.js/dist/es2015/component/light/SpecifyLightData";
    import { PointLightGLSLDataStructure } from "wonder.js/dist/es2015/renderer/type/dataType";
    export class PointLightData extends SpecifyLightData {
        static intensities: Float32Array;
        static constants: Float32Array;
        static linears: Float32Array;
        static quadratics: Float32Array;
        static ranges: Uint16Array;
        static defaultIntensity: number;
        static defaultConstant: number;
        static defaultLinear: number;
        static defaultQuadratic: number;
        static defaultRange: number;
        static lightGLSLDataStructureMemberNameArr: Array<PointLightGLSLDataStructure>;
    }
}

declare module 'wonder.js/dist/es2015/component/light/SpecifyLightData' {
    import { IUIDEntity } from "wonder.js/dist/es2015/core/entityObject/gameObject/IUIDEntity";
    import { Component } from "wonder.js/dist/es2015/component/Component";
    export class SpecifyLightData {
        static index: number;
        static count: number;
        static buffer: any;
        static colors: Float32Array;
        static gameObjectMap: Array<IUIDEntity>;
        static lightMap: Array<Component>;
        static defaultColorArr: Array<number>;
    }
}

declare module 'wonder.js/dist/es2015/component/material/BasicMaterial' {
    import { Material } from "wonder.js/dist/es2015/component/material/Material";
    export class BasicMaterial extends Material {
    }
    export var createBasicMaterial: () => any;
    export var initBasicMaterial: (material: BasicMaterial) => void;
    export var getBasicMaterialColor: Function;
    export var setBasicMaterialColor: Function;
    export var getBasicMaterialOpacity: Function;
    export var setBasicMaterialOpacity: Function;
    export var getBasicMaterialAlphaTest: Function;
    export var setBasicMaterialAlphaTest: Function;
    export var addBasicMaterialMap: Function;
}

declare module 'wonder.js/dist/es2015/component/material/BasicMaterialData' {
    import { SpecifyMaterialData } from "wonder.js/dist/es2015/component/material/SpecifyMaterialData";
    export class BasicMaterialData extends SpecifyMaterialData {
    }
}

declare module 'wonder.js/dist/es2015/component/material/ELightModel' {
    export enum ELightModel {
        BLINN = 1,
        PHONG = 2,
        CONSTANT = 3,
    }
}

declare module 'wonder.js/dist/es2015/component/material/EShading' {
    export enum EShading {
        FLAT = 0,
        SMOOTH = 1,
    }
}

declare module 'wonder.js/dist/es2015/component/material/LightMaterial' {
    import { Material } from "wonder.js/dist/es2015/component/material/Material";
    export class LightMaterial extends Material {
    }
    export var createLightMaterial: () => any;
    export var initLightMaterial: (material: LightMaterial) => void;
    export var getLightMaterialColor: Function;
    export var setLightMaterialColor: Function;
    export var getLightMaterialOpacity: Function;
    export var setLightMaterialOpacity: Function;
    export var getLightMaterialAlphaTest: Function;
    export var setLightMaterialAlphaTest: Function;
    export var getLightMaterialSpecularColor: Function;
    export var setLightMaterialSpecularColor: Function;
    export var getLightMaterialEmissionColor: Function;
    export var setLightMaterialEmissionColor: Function;
    export var getLightMaterialShininess: Function;
    export var setLightMaterialShininess: Function;
    export var getLightMaterialShading: Function;
    export var setLightMaterialShading: Function;
    export var getLightMaterialLightModel: Function;
    export var setLightMaterialLightModel: Function;
    export var setLightMaterialDiffuseMap: Function;
    export var setLightMaterialSpecularMap: Function;
}

declare module 'wonder.js/dist/es2015/component/material/LightMaterialData' {
    import { SpecifyMaterialData } from "wonder.js/dist/es2015/component/material/SpecifyMaterialData";
    import { Color } from "wonder.js/dist/es2015/structure/Color";
    export class LightMaterialData extends SpecifyMaterialData {
        static specularColors: Float32Array;
        static emissionColors: Float32Array;
        static shininess: Float32Array;
        static shadings: Uint8Array;
        static lightModels: Uint8Array;
        static defaultShininess: number;
        static defaultShading: number;
        static defaultLightModel: number;
        static emptyColor: Color;
        static emptyColorArr: Array<number>;
        static diffuseMapIndex: number;
        static specularMapIndex: number;
    }
}

declare module 'wonder.js/dist/es2015/component/material/Material' {
    import { Component } from "wonder.js/dist/es2015/component/Component";
    export abstract class Material extends Component {
    }
    export var getMaterialGameObject: Function;
    export var checkShouldAlive: (material: Material) => void;
}

declare module 'wonder.js/dist/es2015/component/material/MaterialData' {
    import { IUIDEntity } from "wonder.js/dist/es2015/core/entityObject/gameObject/IUIDEntity";
    import { Component } from "wonder.js/dist/es2015/component/Component";
    import { MaterialWorkerInitDataList } from "wonder.js/dist/es2015/renderer/type/dataType";
    export class MaterialData {
        static buffer: SharedArrayBuffer;
        static shaderIndices: Uint32Array;
        static colors: Float32Array;
        static opacities: Float32Array;
        static alphaTests: Float32Array;
        static defaultShaderIndex: number;
        static defaultColorArr: Array<number>;
        static defaultOpacity: number;
        static defaultAlphaTest: number;
        static gameObjectMap: Array<IUIDEntity>;
        static materialMap: Array<Component>;
        static workerInitList: MaterialWorkerInitDataList;
    }
}

declare module 'wonder.js/dist/es2015/component/material/SpecifyMaterialData' {
    export class SpecifyMaterialData {
        static index: number;
    }
}

declare module 'wonder.js/dist/es2015/component/renderer/MeshRenderer' {
    import { Component } from "wonder.js/dist/es2015/component/Component";
    export class MeshRenderer extends Component {
    }
    export var createMeshRenderer: () => any;
    export var getMeshRendererGameObject: Function;
    export var getMeshRendererRenderList: () => any;
}

declare module 'wonder.js/dist/es2015/component/renderer/MeshRendererData' {
    import { IUIDEntity } from "wonder.js/dist/es2015/core/entityObject/gameObject/IUIDEntity";
    import { Component } from "wonder.js/dist/es2015/component/Component";
    export class MeshRendererData {
        static renderGameObjectArray: Array<IUIDEntity>;
        static gameObjectMap: Array<IUIDEntity>;
        static meshRendererMap: Array<Component>;
        static index: number;
        static count: number;
    }
}

declare module 'wonder.js/dist/es2015/component/tag/Tag' {
    import { Component } from "wonder.js/dist/es2015/component/Component";
    import { GameObject } from "wonder.js/dist/es2015/core/entityObject/gameObject/GameObject";
    export class Tag extends Component {
    }
    export var createTag: (slotCount?: number) => any;
    export var addTag: Function;
    export var removeTag: Function;
    export var findGameObjectsByTag: (tag: string) => GameObject[];
    export var getTagGameObject: Function;
}

declare module 'wonder.js/dist/es2015/component/tag/TagData' {
    import { ComponentGameObjectMap } from "wonder.js/dist/es2015/component/ComponentData";
    import { Component } from "wonder.js/dist/es2015/component/Component";
    export class TagData {
        static tagArray: Array<string>;
        static slotCountMap: Array<number>;
        static usedSlotCountMap: Array<number>;
        static indexMap: Array<number>;
        static indexInTagArrayMap: Array<number>;
        static lastIndexInTagArray: number;
        static tagMap: TagMap;
        static gameObjectMap: ComponentGameObjectMap;
        static index: number;
        static count: number;
        static disposeCount: number;
    }
    export type TagMap = {
        [index: number]: Component;
    };
}

declare module 'wonder.js/dist/es2015/component/transform/LinkList' {
    export class LinkList<T> {
        static create(): LinkList<{}>;
        shift(): LinkNode<T>;
        push(node: LinkNode<T>): void;
    }
    export class LinkNode<T> {
        static create(val: any): LinkNode<any>;
        constructor(val: T);
        val: T;
        next: LinkNode<T>;
    }
}

declare module 'wonder.js/dist/es2015/component/transform/ThreeDTransform' {
    import { Vector3 } from "wonder.js/dist/es2015/math/Vector3";
    import { Component } from "wonder.js/dist/es2015/component/Component";
    export class ThreeDTransform extends Component implements IThreeDTransform {
        uid: number;
    }
    export interface IThreeDTransform {
        index: number;
        uid: number;
    }
    export interface BatchTransformData {
        transform: ThreeDTransform;
        position: Vector3;
        localPosition: Vector3;
    }
    export var createThreeDTransform: () => any;
    export var getThreeDTransformPosition: Function;
    export var setThreeDTransformPosition: Function;
    export var getThreeDTransformLocalToWorldMatrix: Function;
    export var getThreeDTransformLocalPosition: Function;
    export var setThreeDTransformLocalPosition: Function;
    export var setThreeDTransformBatchTransformDatas: (batchData: BatchTransformData[]) => void;
    export var getThreeDTransformParent: Function;
    export var setThreeDTransformParent: Function;
    export var getThreeDTransformGameObject: Function;
}

declare module 'wonder.js/dist/es2015/component/transform/ThreeDTransformData' {
    import { Vector3 } from "wonder.js/dist/es2015/math/Vector3";
    import { Matrix4 } from "wonder.js/dist/es2015/math/Matrix4";
    import { LinkList } from "wonder.js/dist/es2015/component/transform/LinkList";
    import { Quaternion } from "wonder.js/dist/es2015/math/Quaternion";
    import { Matrix3 } from "wonder.js/dist/es2015/math/Matrix3";
    import { Component } from "wonder.js/dist/es2015/component/Component";
    import { IUIDEntity } from "wonder.js/dist/es2015/core/entityObject/gameObject/IUIDEntity";
    export class ThreeDTransformData {
        static readonly maxCount: number;
        static localToWorldMatrices: Float32Array;
        static localPositions: Float32Array;
        static localRotations: Float32Array;
        static localScales: Float32Array;
        static defaultPosition: Vector3;
        static defaultRotation: Quaternion;
        static defaultScale: Vector3;
        static defaultLocalToWorldMatrice: Matrix4;
        static firstDirtyIndex: number;
        static index: number;
        static notUsedIndexLinkList: LinkList<number>;
        static isTranslateMap: any;
        static parentMap: ThreeDTransformParentMap;
        static childrenMap: ThreeDTransformChildrenMap;
        static cacheMap: ThreeDTransformCacheMap;
        static tempMap: ThreeDTransformTempMap;
        static transformMap: TransformMap;
        static count: number;
        static uid: number;
        static disposeCount: number;
        static isClearCacheMap: boolean;
        static gameObjectMap: ThreeDTransformGameObjectMap;
        static aliveUIDArray: Array<number>;
        static buffer: ArrayBuffer;
    }
    export class ThreeDTransformRelationData {
        static create(): ThreeDTransformRelationData;
        index: number;
        parent: ThreeDTransformRelationData;
        children: Array<ThreeDTransformRelationData>;
    }
    export type ThreeDTransformParentMap = {
        [uid: number]: Component;
    };
    export type ThreeDTransformChildrenMap = {
        [uid: number]: Array<Component>;
    };
    export type ThreeDTransformGameObjectMap = Map<number, IUIDEntity>;
    export type TransformMap = {
        [index: number]: Component;
    };
    export type ThreeDTransformCacheMap = {
        [uid: number]: ThreeDTransformCacheData;
    };
    export type ThreeDTransformCacheData = {
        position: Vector3;
        localPosition: Vector3;
        localToWorldMatrix: Matrix4;
        normalMatrix: Matrix3;
    };
    export type ThreeDTransformTempMap = {
        [uid: number]: ThreeDTransformTempData;
    };
    export type ThreeDTransformTempData = {
        position: Vector3;
        localPosition: Vector3;
        localToWorldMatrix: Matrix4;
    };
    export type ThreeDTransformPositionMap = {
        [uid: number]: Vector3;
    };
    export type ThreeDTransformLocalPositionMap = {
        [uid: number]: Vector3;
    };
    export type ThreeDTransformLocalToWorldMatrixMap = {
        [uid: number]: Matrix4;
    };
}

declare module 'wonder.js/dist/es2015/component/transform/utils' {
    export var getUID: Function;
    export var isIndexUsed: Function;
    export var getStartIndexInArrayBuffer: () => number;
}

declare module 'wonder.js/dist/es2015/config/CompileConfig' {
    export const CompileConfig: {
        isCompileTest: boolean;
        closeContractTest: boolean;
    };
}

declare module 'wonder.js/dist/es2015/config/DataBufferConfig' {
    export const DataBufferConfig: {
        transformDataBufferCount: number;
        geometryDataBufferCount: number;
        basicMaterialDataBufferCount: number;
        lightMaterialDataBufferCount: number;
        textureDataBufferCount: number;
        ambientLightDataBufferCount: number;
        directionLightDataBufferCount: number;
        pointLightDataBufferCount: number;
        renderCommandBufferCount: number;
        geometryIndicesBufferBits: number;
    };
}

declare module 'wonder.js/dist/es2015/config/DebugConfig' {
    export const DebugConfig: {
        isTest: boolean;
        debugCollision: boolean;
        showDebugPanel: boolean;
    };
}

declare module 'wonder.js/dist/es2015/config/MemoryConfig' {
    export const MemoryConfig: {
        maxComponentDisposeCount: number;
    };
}

declare module 'wonder.js/dist/es2015/config/RenderWorkerConfig' {
    export const RenderWorkerConfig: {
        useRenderWorker: boolean;
    };
}

declare module 'wonder.js/dist/es2015/core/Director' {
    import { Scene } from "wonder.js/dist/es2015/core/entityObject/scene/Scene";
    import { Scheduler } from "wonder.js/dist/es2015/core/Scheduler";
    export class Director {
        static getInstance(): any;
        readonly view: any;
        scene: Scene;
        scheduler: Scheduler;
        initWhenCreate(): void;
        start(): void;
    }
}

declare module 'wonder.js/dist/es2015/core/DirectorData' {
    import { Map } from "immutable";
    export class DirectorData {
        static state: Map<any, any>;
    }
}

declare module 'wonder.js/dist/es2015/core/entityObject/gameObject/GameObject' {
    import { IUIDEntity } from "wonder.js/dist/es2015/core/entityObject/gameObject/IUIDEntity";
    export class GameObject implements IUIDEntity {
        uid: number;
    }
    export var createGameObject: () => any;
    export var addGameObjectComponent: Function;
    export var disposeGameObject: Function;
    export var initGameObject: Function;
    export var disposeGameObjectComponent: Function;
    export var getGameObjectComponent: Function;
    export var getGameObjectTransform: (gameObject: GameObject) => any;
    export var hasGameObjectComponent: Function;
    export var isGameObjectAlive: (gameObject: GameObject) => boolean;
    export var addGameObject: Function;
    export var removeGameObject: Function;
    export var hasGameObject: Function;
    export var getGameObjectChildren: Function;
    export var getGameObjectParent: Function;
}

declare module 'wonder.js/dist/es2015/core/entityObject/gameObject/GameObjectData' {
    import { Component } from "wonder.js/dist/es2015/component/Component";
    import { IUIDEntity } from "wonder.js/dist/es2015/core/entityObject/gameObject/IUIDEntity";
    export class GameObjectData {
        static uid: number;
        static disposeCount: number;
        static componentMap: GameObjectComponentMap;
        static parentMap: GameObjectParentMap;
        static childrenMap: GameObjectChildrenMap;
        static aliveUIDArray: Array<number>;
    }
    export type GameObjectComponentMap = {
        [uid: number]: GameObjectComponentData;
    };
    export type GameObjectComponentData = {
        [typeId: number]: Component;
    };
    export type GameObjectParentMap = {
        [uid: number]: IUIDEntity;
    };
    export type GameObjectChildrenMap = {
        [uid: number]: Array<IUIDEntity>;
    };
    export type GameObjectUIDMap = {
        [uid: number]: boolean;
    };
}

declare module 'wonder.js/dist/es2015/core/entityObject/scene/Scene' {
    import { GameObject } from "wonder.js/dist/es2015/core/entityObject/gameObject/GameObject";
    export class Scene extends GameObject {
    }
    export var addSceneChild: Function;
    export var removeSceneChild: Function;
}

declare module 'wonder.js/dist/es2015/core/entityObject/scene/SceneData' {
    import { GameObject } from "wonder.js/dist/es2015/core/entityObject/gameObject/GameObject";
    export class SceneData {
        static cameraArray: Array<GameObject>;
    }
}

declare module 'wonder.js/dist/es2015/core/Main' {
    import { MainConfigData } from "wonder.js/dist/es2015/definition/type/mainType";
    export class Main {
        static isTest: boolean;
        static setConfig(configState: MainConfigData): typeof Main;
        static init(): typeof Main;
    }
}

declare module 'wonder.js/dist/es2015/core/Scheduler' {
    export class Scheduler {
        static create(): Scheduler;
        update(elapsed: number): void;
        scheduleLoop(task: Function, args?: Array<any>): string;
        scheduleFrame(task: any, frame?: number, args?: any): string;
        scheduleInterval(task: any, time?: number, args?: any): string;
        scheduleTime(task: any, time?: number, args?: any): string;
        pause(scheduleId?: string): void;
        resume(scheduleId?: string): void;
        start(scheduleId?: string): void;
        stop(scheduleId?: string): void;
        has(scheduleId: string): boolean;
        remove(scheduleId: string): void;
        removeAll(): void;
    }
}

declare module 'wonder.js/dist/es2015/definition/GlobalTempData' {
    import { Matrix4 } from "wonder.js/dist/es2015/math/Matrix4";
    import { Vector3 } from "wonder.js/dist/es2015/math/Vector3";
    import { Quaternion } from "wonder.js/dist/es2015/math/Quaternion";
    export class GlobalTempData {
        static matrix4_1: Matrix4;
        static matrix4_2: Matrix4;
        static matrix4_3: Matrix4;
        static vector3_1: Vector3;
        static vector3_2: Vector3;
        static vector3_3: Vector3;
        static vector3_4: Vector3;
        static quaternion_1: Quaternion;
    }
}

declare module 'wonder.js/dist/es2015/definition/typescript/decorator/cache' {
    export function cache(judgeFunc: any, returnCacheValueFunc: any, setCacheFunc: any): (target: any, name: any, descriptor: any) => any;
}

declare module 'wonder.js/dist/es2015/definition/typescript/decorator/contract' {
    export function assert(cond: boolean, message?: string): void;
    export function describe(message: string, func: Function, preCondition?: Function, context?: any): void;
    export function it(message: string, func: Function, context?: any): void;
    export function requireCheck(inFunc: any): (target: any, name: any, descriptor: any) => any;
    export function requireCheckFunc(checkFunc: Function, bodyFunc: Function): Function;
    export function ensure(outFunc: any): (target: any, name: any, descriptor: any) => any;
    export function ensureFunc(checkFunc: Function, bodyFunc: Function): Function;
    export function requireGetterAndSetter(inGetterFunc: any, inSetterFunc: any): (target: any, name: any, descriptor: any) => any;
    export function requireGetter(inFunc: any): (target: any, name: any, descriptor: any) => any;
    export function requireSetter(inFunc: any): (target: any, name: any, descriptor: any) => any;
    export function ensureGetterAndSetter(outGetterFunc: any, outSetterFunc: any): (target: any, name: any, descriptor: any) => any;
    export function ensureGetter(outFunc: any): (target: any, name: any, descriptor: any) => any;
    export function ensureSetter(outFunc: any): (target: any, name: any, descriptor: any) => any;
    export function invariant(func: any): (target: any) => void;
}

declare module 'wonder.js/dist/es2015/definition/typescript/decorator/control' {
    export function execOnlyOnce(flagName: string): (target: any, name: any, descriptor: any) => any;
}

declare module 'wonder.js/dist/es2015/definition/typescript/decorator/registerClass' {
    export function registerClass(className: string): (_class: any) => void;
}

declare module 'wonder.js/dist/es2015/definition/typescript/decorator/singleton' {
    export function singleton(isInitWhenCreate?: boolean): (target: any) => void;
}

declare module 'wonder.js/dist/es2015/definition/typescript/decorator/virtual' {
    export function virtual(target: any, name: any, descriptor: any): any;
}

declare module 'wonder.js/dist/es2015/definition/Variable' {
    export var root: any;
}

declare module 'wonder.js/dist/es2015/device/WorkerDetectData' {
    export class WorkerDetectData {
        static isSupportRenderWorkerAndSharedArrayBuffer: boolean;
        static isSupportSharedArrayBuffer: boolean;
        static renderWorkerFileDir: string;
    }
}

declare module 'wonder.js/dist/es2015/math/Global' {
    export const DEG_TO_RAD: number;
    export const RAD_TO_DEG: number;
}

declare module 'wonder.js/dist/es2015/math/Matrix3' {
    import { Vector2 } from "wonder.js/dist/es2015/math/Vector2";
    export class Matrix3 {
        static create(mat: Float32Array): Matrix3;
        static create(): Matrix3;
        constructor(mat: Float32Array);
        constructor();
        a: number;
        c: number;
        b: number;
        d: number;
        tx: number;
        ty: number;
        values: Float32Array;
        setIdentity(): Matrix3;
        invert(): Matrix3;
        multiplyScalar(s: number): this;
        multiplyVector2(vector: Vector2): Vector2;
        multiplyPoint(vector: Vector2): Vector2;
        multiply(matrix: Matrix3): this;
        transpose(): Matrix3;
        clone(): Matrix3;
        cloneToArray(array: Float32Array, offset?: number): Matrix3;
        set(matrix: Matrix3): this;
        setTS(t: Vector2, s: Vector2): void;
        rotate(angle: number): this;
        setRotation(angle: number): this;
        translate(x: number, y: number): void;
        setPosition(x: number, y: number): void;
        scale(x: number, y: number): this;
        setScale(x: number, y: number): this;
        getTranslation(): Vector2;
        getScale(): Vector2;
        getRotation(): number;
        getSkew(): Vector2;
    }
}

declare module 'wonder.js/dist/es2015/math/Matrix4' {
    import { Matrix3 } from "wonder.js/dist/es2015/math/Matrix3";
    import { Vector3 } from "wonder.js/dist/es2015/math/Vector3";
    import { Vector4 } from "wonder.js/dist/es2015/math/Vector4";
    import { Quaternion } from "wonder.js/dist/es2015/math/Quaternion";
    export class Matrix4 {
        static create(mat: Float32Array): Matrix4;
        static create(): Matrix4;
        constructor(mat: Float32Array);
        constructor();
        values: Float32Array;
        set(initialM11: number, initialM12: number, initialM13: number, initialM14: number, initialM21: number, initialM22: number, initialM23: number, initialM24: number, initialM31: number, initialM32: number, initialM33: number, initialM34: number, initialM41: number, initialM42: number, initialM43: number, initialM44: number): this;
        setIdentity(): Matrix4;
        invert(): Matrix4;
        invertTo3x3(): Matrix3;
        transpose(): Matrix4;
        setTranslate(x: any, y: any, z: any): Matrix4;
        translate(x: any, y: any, z: any): Matrix4;
        setRotate(angle: number, x: number, y: number, z: number): Matrix4;
        rotate(angle: any, vector3: Vector3): Matrix4;
        rotate(angle: any, x: any, y: any, z: any): Matrix4;
        setScale(x: any, y: any, z: any): Matrix4;
        scale(x: any, y: any, z: any): Matrix4;
        setLookAt(eye: Vector3, center: Vector3, up: Vector3): Matrix4;
        setLookAt(eyeX: number, eyeY: number, eyeZ: number, centerX: number, centerY: number, centerZ: number, upX: number, upY: number, upZ: number): Matrix4;
        lookAt(eye: Vector3, center: Vector3, up: Vector3): Matrix4;
        lookAt(eyeX: number, eyeY: number, eyeZ: number, centerX: number, centerY: number, centerZ: number, upX: number, upY: number, upZ: number): Matrix4;
        setOrtho(left: number, right: number, bottom: number, top: number, near: number, far: number): Matrix4;
        ortho(left: number, right: number, bottom: number, top: number, near: number, far: number): Matrix4;
        setPerspective(fovy: number, aspect: number, near: number, far: number): Matrix4;
        perspective(fovy: number, aspect: number, near: number, far: number): Matrix4;
        applyMatrix(other: Matrix4, notChangeSelf?: boolean): Matrix4;
        multiply(matrix: Matrix4): Matrix4;
        multiply(matrix1: Matrix4, matrix2: Matrix4): Matrix4;
        multiplyVector4(vector: Vector4): Vector4;
        multiplyVector3(vector: Vector3): Vector3;
        multiplyPoint(vector: Vector3): Vector3;
        clone(): Matrix4;
        cloneToArray(array: Float32Array, offset?: number): Matrix4;
        getX(): Vector3;
        getY(): Vector3;
        getZ(): Vector3;
        getTranslation(): Vector3;
        getScale(): Vector3;
        getRotation(): Quaternion;
        getEulerAngles(): any;
        setTRS(t: Vector3, r: Quaternion, s: Vector3): this;
    }
}

declare module 'wonder.js/dist/es2015/math/Quaternion' {
    import { Vector3 } from "wonder.js/dist/es2015/math/Vector3";
    import { Matrix4 } from "wonder.js/dist/es2015/math/Matrix4";
    export class Quaternion {
        static create(x?: number, y?: number, z?: number, w?: number): Quaternion;
        constructor(x?: number, y?: number, z?: number, w?: number);
        x: number;
        y: number;
        z: number;
        w: number;
        setFromEulerAngles(eulerAngles: Vector3): this;
        multiply(rhs: Quaternion): any;
        multiply(rhs1: Quaternion, rhs2: Quaternion): any;
        setFromMatrix(matrix: Matrix4): this;
        setFromAxisAngle(angle: number, axis: Vector3): this;
        invert(): this;
        conjugate(): this;
        clone(): Quaternion;
        normalize(): this;
        length(): any;
        multiplyVector3(vector: Vector3): Vector3;
        set(x: number, y: number, z: number, w: number): this;
        sub(quat: Quaternion): this;
        getEulerAngles(): any;
        slerp(left: Quaternion, right: Quaternion, amount: number): Quaternion;
    }
}

declare module 'wonder.js/dist/es2015/math/Vector2' {
    export class Vector2 {
        static create(x: any, y: any): Vector2;
        static create(): Vector2;
        constructor(x: any, y: any);
        constructor();
        x: number;
        y: number;
        values: Float32Array;
        set(x: number, y: number): void;
        add(v: Vector2): this;
        mul(v: Vector2): this;
        isEqual(v: Vector2): boolean;
        clone(): Vector2;
    }
}

declare module 'wonder.js/dist/es2015/math/Vector3' {
    import { Vector4 } from "wonder.js/dist/es2015/math/Vector4";
    import { Matrix3 } from "wonder.js/dist/es2015/math/Matrix3";
    import { Matrix4 } from "wonder.js/dist/es2015/math/Matrix4";
    export class Vector3 {
        static up: any;
        static forward: any;
        static right: any;
        static create(x: number, y: number, z: number): Vector3;
        static create(): Vector3;
        constructor(x: number, y: number, z: number);
        constructor();
        x: number;
        y: number;
        z: number;
        values: Float32Array;
        normalize(): Vector3;
        isZero(): boolean;
        scale(scalar: number): any;
        scale(x: number, y: number, z: number): any;
        set(v: Vector3): any;
        set(x: number, y: number, z: number): any;
        sub(v: Vector3): Vector3;
        sub2(v1: Vector3, v2: Vector3): this;
        add(v: Vector3): this;
        add2(v1: Vector3, v2: Vector3): this;
        mul(v: Vector3): this;
        mul2(v1: Vector3, v2: Vector3): this;
        reverse(): Vector3;
        clone(): Vector3;
        toVector4(): Vector4;
        length(): any;
        cross(lhs: Vector3, rhs: Vector3): this;
        lerp(lhs: Vector3, rhs: Vector3, alpha: number): this;
        dot(rhs: any): number;
        calAngleCos(v1: Vector3): number;
        min(v: Vector3): this;
        max(v: Vector3): this;
        isEqual(v: Vector3): boolean;
        toArray(): number[];
        applyMatrix3(m: Matrix3): this;
        applyMatrix4(m: Matrix4): this;
        distanceTo(v: Vector3): any;
        distanceToSquared(v: Vector3): number;
    }
}

declare module 'wonder.js/dist/es2015/math/Vector4' {
    import { Vector3 } from "wonder.js/dist/es2015/math/Vector3";
    export class Vector4 {
        static create(x: any, y: any, z: any, w: any): any;
        static create(): any;
        constructor(x: any, y: any, z: any, w: any);
        constructor();
        x: number;
        y: number;
        z: number;
        w: number;
        values: Float32Array;
        normalize(): Vector4;
        isEqual(v: Vector4): boolean;
        clone(): Vector4;
        toVector3(): Vector3;
        lengthManhattan(): any;
        multiplyScalar(scalar: number): this;
        dot(v: Vector4): number;
        set(x: number, y: number, z: number, w: number): void;
        protected copyHelper(vector4: Vector4): any;
    }
}

declare module 'wonder.js/dist/es2015/renderer/buffer/ArrayBufferData' {
    export class ArrayBufferData {
        static vertexBuffer: Array<WebGLBuffer>;
        static normalBuffers: Array<WebGLBuffer>;
        static texCoordBuffers: Array<WebGLBuffer>;
    }
}

declare module 'wonder.js/dist/es2015/renderer/buffer/IndexBufferData' {
    export class IndexBufferData {
        static buffers: Array<WebGLBuffer>;
    }
}

declare module 'wonder.js/dist/es2015/renderer/command_buffer/RenderCommandBufferData' {
    export class RenderCommandBufferData {
        static buffer: SharedArrayBuffer;
        static mMatrices: Float32Array;
        static materialIndices: Uint32Array;
        static shaderIndices: Uint32Array;
        static geometryIndices: Uint32Array;
        static vMatrices: Float32Array;
        static pMatrices: Float32Array;
        static cameraPositions: Float32Array;
        static normalMatrices: Float32Array;
    }
}

declare module 'wonder.js/dist/es2015/renderer/config/InitConfigData' {
    export class InitConfigData {
        static isTest: boolean;
    }
}

declare module 'wonder.js/dist/es2015/renderer/data/material_config' {
    export const material_config: {
        "materials": {
            "BasicMaterial": {
                "shader": {
                    "shaderLib": (string | {
                        "type": string;
                        "value": string;
                    } | {
                        "type": string;
                        "branch": (materialIndex: any, {getMapCount}: {
                            getMapCount: any;
                        }, {MapManagerDataFromSystem}: {
                            MapManagerDataFromSystem: any;
                        }) => string;
                    })[];
                };
            };
            "LightMaterial": {
                "shader": {
                    "shaderLib": (string | {
                        "type": string;
                        "value": string;
                    } | {
                        "type": string;
                        "branch": (materialIndex: any, {hasDiffuseMap, hasSpecularMap}: {
                            hasDiffuseMap: any;
                            hasSpecularMap: any;
                        }, {LightMaterialDataFromSystem}: {
                            LightMaterialDataFromSystem: any;
                        }) => string;
                    })[];
                };
            };
        };
        "shaderLibGroups": {
            "engineMaterialTop": string[];
            "engineMaterialEnd": string[];
        };
    };
    export interface IMaterialConfig {
        materials: {
            [materialClassName: string]: IMaterialContentConfig;
        };
        shaderLibGroups: IMaterialShaderLibGroup;
    }
    export interface IMaterialShaderLibGroup {
        [groupName: string]: Array<string>;
    }
    export interface IMaterialContentConfig {
        shader: IShaderConfig;
    }
    export interface IShaderConfig {
        shaderLib: MaterialShaderLibConfig;
    }
    export interface IShaderLibItem {
        type: string;
        branch?: (...args) => string;
        value?: any;
    }
    export type MaterialShaderLibConfig = Array<string | IShaderLibItem>;
}

declare module 'wonder.js/dist/es2015/renderer/data/render_config' {
    import { Color } from "wonder.js/dist/es2015/structure/Color";
    export const render_config: {
        "clearColor": Color;
    };
    export interface IRenderConfig {
        clearColor: Color;
    }
}

declare module 'wonder.js/dist/es2015/renderer/data/shaderLib_generator' {
    import { GLSLChunk } from "wonder.js/dist/es2015/renderer/shader/chunk/ShaderChunk";
    import { UniformCacheMap, UniformLocationMap } from "wonder.js/dist/es2015/renderer/type/dataType";
    export const shaderLib_generator: {
        "shaderLibs": {
            "CommonShaderLib": {
                "glsl": {
                    "vs": {
                        "source": GLSLChunk;
                        "define": string;
                        "funcDefine": string;
                    };
                    "fs": {
                        "source": GLSLChunk;
                        "define": string;
                        "funcDefine": string;
                    };
                };
                "send": {
                    "uniform": {
                        "name": string;
                        "field": string;
                        "type": string;
                    }[];
                };
            };
            "ModelMatrixNoInstanceShaderLib": {
                "glsl": {
                    "vs": {
                        "source": GLSLChunk;
                    };
                };
                "send": {
                    "uniform": {
                        "name": string;
                        "field": string;
                        "type": string;
                    }[];
                };
            };
            "VerticeCommonShaderLib": {
                "send": {
                    "attribute": {
                        "name": string;
                        "buffer": string;
                        "type": string;
                    }[];
                };
            };
            "BasicMaterialColorShaderLib": {
                "glsl": {
                    "fs": {
                        "source": GLSLChunk;
                    };
                };
                "send": {
                    "uniform": {
                        "name": string;
                        "from": string;
                        "field": string;
                        "type": string;
                    }[];
                };
            };
            "BasicShaderLib": {
                "glsl": {
                    "vs": {
                        "body": string;
                    };
                };
                "send": {
                    "uniform": {
                        "name": string;
                        "from": string;
                        "field": string;
                        "type": string;
                    }[];
                };
            };
            "BasicEndShaderLib": {
                "glsl": {
                    "fs": {
                        "source": GLSLChunk;
                    };
                    "func": (materialIndex: number, {getAlphaTest, isTestAlpha}: {
                        getAlphaTest: any;
                        isTestAlpha: any;
                    }, {MaterialDataFromSystem}: {
                        MaterialDataFromSystem: any;
                    }) => {
                        "fs": {
                            "body": string;
                        };
                    };
                };
            };
            "BasicMapShaderLib": {
                "glsl": {
                    "vs": {
                        "source": GLSLChunk;
                    };
                    "fs": {
                        "source": GLSLChunk;
                    };
                };
                "send": {
                    "attribute": {
                        "name": string;
                        "buffer": string;
                        "type": string;
                    }[];
                    "uniformDefine": {
                        "name": string;
                        "type": string;
                    }[];
                };
            };
            "NormalMatrixNoInstanceShaderLib": {
                "glsl": {
                    "vs": {
                        "source": GLSLChunk;
                    };
                };
                "send": {
                    "uniform": {
                        "name": string;
                        "field": string;
                        "type": string;
                    }[];
                };
            };
            "NormalCommonShaderLib": {
                "send": {
                    "attribute": {
                        "name": string;
                        "buffer": string;
                        "type": string;
                    }[];
                };
            };
            "LightCommonShaderLib": {
                "glsl": {
                    "vs": {
                        "source": GLSLChunk;
                        "funcDeclare": string;
                        "funcDefine": string;
                    };
                    "fs": {
                        "source": GLSLChunk;
                        "funcDeclare": string;
                        "funcDefine": string;
                    };
                };
                "send": {
                    "uniform": {
                        "name": string;
                        "from": string;
                        "field": string;
                        "type": string;
                    }[];
                };
            };
            "LightSetWorldPositionShaderLib": {
                "glsl": {
                    "vs": {
                        "source": GLSLChunk;
                    };
                };
            };
            "CommonLightMapShaderLib": {
                "send": {
                    "attribute": {
                        "name": string;
                        "buffer": string;
                        "type": string;
                    }[];
                };
            };
            "DiffuseMapShaderLib": {
                "glsl": {
                    "vs": {
                        "source": GLSLChunk;
                    };
                    "fs": {
                        "source": GLSLChunk;
                    };
                };
                "send": {
                    "uniformDefine": {
                        "name": string;
                        "type": string;
                    }[];
                };
            };
            "NoDiffuseMapShaderLib": {
                "glsl": {
                    "fs": {
                        "source": GLSLChunk;
                    };
                };
                "send": {
                    "uniform": {
                        "name": string;
                        "from": string;
                        "field": string;
                        "type": string;
                    }[];
                };
            };
            "SpecularMapShaderLib": {
                "glsl": {
                    "vs": {
                        "source": GLSLChunk;
                    };
                    "fs": {
                        "source": GLSLChunk;
                    };
                };
                "send": {
                    "uniformDefine": {
                        "name": string;
                        "type": string;
                    }[];
                };
            };
            "NoSpecularMapShaderLib": {
                "glsl": {
                    "fs": {
                        "source": GLSLChunk;
                    };
                };
            };
            "NoLightMapShaderLib": {
                "glsl": {
                    "fs": {
                        "source": GLSLChunk;
                    };
                };
            };
            "NoEmissionMapShaderLib": {
                "glsl": {
                    "fs": {
                        "source": GLSLChunk;
                    };
                };
                "send": {
                    "uniform": {
                        "name": string;
                        "from": string;
                        "field": string;
                        "type": string;
                    }[];
                };
            };
            "NoNormalMapShaderLib": {
                "glsl": {
                    "vs": {
                        "source": GLSLChunk;
                    };
                    "fs": {
                        "source": GLSLChunk;
                        "varDeclare": string;
                        "funcDefine": string;
                    };
                };
            };
            "NoShadowMapShaderLib": {
                "glsl": {
                    "fs": {
                        "source": GLSLChunk;
                    };
                };
            };
            "LightShaderLib": {
                "glsl": {
                    "vs": {
                        "source": GLSLChunk;
                        "defineList": ({
                            "name": string;
                            "valueFunc": ({DirectionLightDataFromSystem}: {
                                DirectionLightDataFromSystem: any;
                            }) => any;
                        } | {
                            "name": string;
                            "valueFunc": ({PointLightDataFromSystem}: {
                                PointLightDataFromSystem: any;
                            }) => any;
                        })[];
                    };
                    "fs": {
                        "source": GLSLChunk;
                        "defineList": ({
                            "name": string;
                            "valueFunc": ({DirectionLightDataFromSystem}: {
                                DirectionLightDataFromSystem: any;
                            }) => any;
                        } | {
                            "name": string;
                            "valueFunc": ({PointLightDataFromSystem}: {
                                PointLightDataFromSystem: any;
                            }) => any;
                        })[];
                    };
                };
                "send": {
                    "uniform": {
                        "name": string;
                        "from": string;
                        "field": string;
                        "type": string;
                    }[];
                };
            };
            "AmbientLightShaderLib": {
                "glsl": {
                    "fs": {
                        "varDeclare": string;
                    };
                };
                "send": {
                    "uniformFunc": (gl: WebGLRenderingContext, shaderIndex: number, program: WebGLProgram, {glslSenderData: {sendFloat3}, ambientLightData: {getColorArr3, AmbientLightDataFromSystem}}: {
                        glslSenderData: {
                            sendFloat3: any;
                        };
                        ambientLightData: {
                            getColorArr3: any;
                            AmbientLightDataFromSystem: any;
                        };
                    }, uniformLocationMap: UniformLocationMap, uniformCacheMap: UniformCacheMap) => void;
                };
            };
            "PointLightShaderLib": {
                "send": {
                    "uniformFunc": (gl: WebGLRenderingContext, shaderIndex: number, program: WebGLProgram, {glslSenderData: {sendFloat1, sendFloat3}, pointLightData: {getColorArr3, getIntensity, getConstant, getLinear, getQuadratic, getRange, getPosition, PointLightDataFromSystem}}: {
                        glslSenderData: {
                            sendFloat1: any;
                            sendFloat3: any;
                        };
                        pointLightData: {
                            getColorArr3: any;
                            getIntensity: any;
                            getConstant: any;
                            getLinear: any;
                            getQuadratic: any;
                            getRange: any;
                            getPosition: any;
                            PointLightDataFromSystem: any;
                        };
                    }, uniformLocationMap: UniformLocationMap, uniformCacheMap: UniformCacheMap) => void;
                };
            };
            "DirectionLightShaderLib": {
                "send": {
                    "uniformFunc": (gl: WebGLRenderingContext, shaderIndex: number, program: WebGLProgram, {glslSenderData: {sendFloat1, sendFloat3}, directionLightData: {getColorArr3, getIntensity, getPosition, DirectionLightDataFromSystem}}: {
                        glslSenderData: {
                            sendFloat1: any;
                            sendFloat3: any;
                        };
                        directionLightData: {
                            getColorArr3: any;
                            getIntensity: any;
                            getPosition: any;
                            DirectionLightDataFromSystem: any;
                        };
                    }, uniformLocationMap: UniformLocationMap, uniformCacheMap: UniformCacheMap) => void;
                };
            };
            "LightEndShaderLib": {
                "glsl": {
                    "fs": {
                        "source": GLSLChunk;
                    };
                    "func": (materialIndex: number, {getAlphaTest, isTestAlpha}: {
                        getAlphaTest: any;
                        isTestAlpha: any;
                    }, {MaterialDataFromSystem}: {
                        MaterialDataFromSystem: any;
                    }) => {
                        "fs": {
                            "body": string;
                        };
                    };
                };
            };
            "EndShaderLib": {};
        };
    };
    export interface IShaderLibGenerator {
        shaderLibs: IShaderLibContentGenerator;
    }
    export interface IShaderLibContentGenerator {
        [shaderLibName: string]: IShaderLibConfig;
    }
    export interface IShaderLibConfig {
        glsl?: {
            vs?: IGLSLConfig;
            fs?: IGLSLConfig;
            func?: (materialIndex: number) => IGLSLFuncConfig | null;
        };
        send?: IShaderLibSendConfig;
    }
    export interface IGLSLConfig {
        source?: GLSLChunk;
        top?: string;
        varDeclare?: string;
        funcDeclare?: string;
        funcDefine?: string;
        body?: string;
        define?: string;
        defineList?: Array<IGLSLDefineListItem>;
    }
    export interface IGLSLFuncConfig {
        vs?: IGLSLFuncGLSLConfig;
        fs?: IGLSLFuncGLSLConfig;
    }
    export interface IGLSLFuncGLSLConfig {
        top?: string;
        varDeclare?: string;
        funcDeclare?: string;
        funcDefine?: string;
        body?: string;
        define?: string;
    }
    export interface IGLSLDefineListItem {
        name: string;
        valueFunc?: Function;
    }
    export interface IShaderLibSendConfig {
        attribute?: Array<ISendAttributeConfig>;
        uniform?: Array<ISendUniformConfig>;
        uniformDefine?: Array<IDefineUniformConfig>;
        uniformFunc?: Function;
    }
    export interface ISendAttributeConfig {
        name: string;
        buffer: "vertex" | "normal" | "texCoord";
        type: "vec2" | "vec3";
    }
    export type UniformType = "int" | "float" | "float3" | "vec3" | "mat3" | "mat4" | "sampler2D";
    export interface IDefineUniformConfig {
        name: string;
        type: UniformType;
    }
    export interface ISendUniformConfig {
        name: string;
        field: string;
        type: UniformType;
        fieldType?: "structure";
        from?: "cmd" | "basicMaterial" | "lightMaterial" | "ambientLight" | "pointLight" | "directionLight";
    }
}

declare module 'wonder.js/dist/es2015/renderer/device/DeviceManager' {
    import { View } from "wonder.js/dist/es2015/structure/View";
    import { ContextConfigData } from "wonder.js/dist/es2015/definition/type/mainType";
    export class DeviceManager {
        static getInstance(): any;
        readonly gl: WebGLRenderingContext;
        readonly viewport: any;
        view: View;
        createGL(canvasID: string, contextConfig: ContextConfigData): any;
    }
    export var setDeviceManagerGL: (gl: WebGLRenderingContext) => any;
}

declare module 'wonder.js/dist/es2015/renderer/device/DeviceManagerData' {
    import { Color } from "wonder.js/dist/es2015/structure/Color";
    import { ESide } from "wonder.js/dist/es2015/renderer/enum/ESide";
    export class DeviceManagerData {
        static gl: WebGLRenderingContext;
        static clearColor: Color;
        static writeRed: boolean;
        static writeGreen: boolean;
        static writeBlue: boolean;
        static writeAlpha: boolean;
        static side: ESide;
    }
}

declare module 'wonder.js/dist/es2015/renderer/device/EScreenSize' {
    export enum EScreenSize {
        FULL = 0,
    }
}

declare module 'wonder.js/dist/es2015/renderer/device/GPUDetector' {
    import { Map } from "immutable";
    export class GPUDetector {
        static getInstance(): any;
        maxTextureUnit: number;
        maxTextureSize: number;
        maxCubemapTextureSize: number;
        maxAnisotropy: number;
        maxBoneCount: number;
        extensionCompressedTextureS3TC: any;
        extensionTextureFilterAnisotropic: any;
        extensionInstancedArrays: any;
        extensionUintIndices: boolean;
        extensionDepthTexture: boolean;
        extensionVAO: any;
        extensionStandardDerivatives: boolean;
        precision: number;
        detect(state: Map<any, any>, getGL: Function, DeviceManagerDataFromSystem: any): Map<any, any>;
    }
    export enum EGPUPrecision {
        HIGHP = 0,
        MEDIUMP = 1,
        LOWP = 2,
    }
}

declare module 'wonder.js/dist/es2015/renderer/draw/DrawRenderCommandBufferData' {
    export class DrawRenderCommandBufferData {
        static mMatrixFloatArrayForSend: Float32Array;
        static vMatrixFloatArrayForSend: Float32Array;
        static pMatrixFloatArrayForSend: Float32Array;
        static normalMatrixFloatArrayForSend: Float32Array;
        static cameraPositionForSend: Float32Array;
        static mMatrices: Float32Array;
        static materialIndices: Uint32Array;
        static shaderIndices: Uint32Array;
        static geometryIndices: Uint32Array;
        static vMatrices: Float32Array;
        static pMatrices: Float32Array;
        static cameraPositions: Float32Array;
        static normalMatrices: Float32Array;
    }
}

declare module 'wonder.js/dist/es2015/renderer/enum/EBufferType' {
    export enum EBufferType {
        BYTE = "BYTE",
        UNSIGNED_BYTE = "UNSIGNED_BYTE",
        SHORT = "SHORT",
        UNSIGNED_SHORT = "UNSIGNED_SHORT",
        INT = "INT",
        UNSIGNED_INT = "UNSIGNED_INT",
        FLOAT = "FLOAT",
    }
}

declare module 'wonder.js/dist/es2015/renderer/enum/EDrawMode' {
    export enum EDrawMode {
        POINTS = "POINTS",
        LINES = "LINES",
        LINE_LOOP = "LINE_LOOP",
        LINE_STRIP = "LINE_STRIP",
        TRIANGLES = "TRIANGLES",
        TRIANGLE_STRIP = "TRIANGLE_STRIP",
        TRANGLE_FAN = "TRIANGLE_FAN",
    }
}

declare module 'wonder.js/dist/es2015/renderer/enum/EGeometryWorkerDataOperateType' {
    export enum EGeometryWorkerDataOperateType {
        ADD = 0,
        RESET = 1,
    }
}

declare module 'wonder.js/dist/es2015/renderer/enum/ELightWorkerDataOperateType' {
    export enum ELightWorkerDataOperateType {
        ADD = 0,
        EDIT = 1,
        DISPOSE = 2,
    }
}

declare module 'wonder.js/dist/es2015/renderer/enum/ESide' {
    export enum ESide {
        NONE = 0,
        BOTH = 1,
        BACK = 2,
        FRONT = 3,
    }
}

declare module 'wonder.js/dist/es2015/renderer/enum/ETextureFilterMode' {
    export enum ETextureFilterMode {
        NEAREST = "NEAREST",
        NEAREST_MIPMAP_MEAREST = "NEAREST_MIPMAP_MEAREST",
        NEAREST_MIPMAP_LINEAR = "NEAREST_MIPMAP_LINEAR",
        LINEAR = "LINEAR",
        LINEAR_MIPMAP_NEAREST = "LINEAR_MIPMAP_NEAREST",
        LINEAR_MIPMAP_LINEAR = "LINEAR_MIPMAP_LINEAR",
    }
}

declare module 'wonder.js/dist/es2015/renderer/enum/ETextureFormat' {
    export enum ETextureFormat {
        RGB = "RGB",
        RGBA = "RGBA",
        ALPHA = "ALPHA",
        LUMINANCE = "LUMINANCE",
        LUMINANCE_ALPHA = "LUMINANCE_ALPHA",
        RGB_S3TC_DXT1 = "RGB_S3TC_DXT1",
        RGBA_S3TC_DXT1 = "RGBA_S3TC_DXT1",
        RGBA_S3TC_DXT3 = "RGBA_S3TC_DXT3",
        RGBA_S3TC_DXT5 = "RGBA_S3TC_DXT5",
    }
}

declare module 'wonder.js/dist/es2015/renderer/enum/ETextureTarget' {
    export enum ETextureTarget {
        TEXTURE_2D = "TEXTURE_2D",
    }
}

declare module 'wonder.js/dist/es2015/renderer/enum/ETextureType' {
    export enum ETextureType {
        UNSIGNED_BYTE = "UNSIGNED_BYTE",
        UNSIGNED_SHORT_5_6_5 = "UNSIGNED_SHORT_5_6_5",
        UNSIGNED_SHORT_4_4_4_4 = "UNSIGNED_SHORT_4_4_4_4",
        UNSIGNED_SHORT_5_5_5_1 = "UNSIGNED_SHORT_5_5_5_1",
    }
}

declare module 'wonder.js/dist/es2015/renderer/enum/ETextureWrapMode' {
    export enum ETextureWrapMode {
        REPEAT = "REPEAT",
        MIRRORED_REPEAT = "MIRRORED_REPEAT",
        CLAMP_TO_EDGE = "CLAMP_TO_EDGE",
    }
}

declare module 'wonder.js/dist/es2015/renderer/enum/EVariableType' {
    export enum EVariableType {
        INT = "int",
        FLOAT = "float",
        FLOAT3 = "float3",
        VEC3 = "vec3",
        MAT3 = "mat3",
        MAT4 = "mat4",
        SAMPLER_2D = "sampler2D",
    }
}

declare module 'wonder.js/dist/es2015/renderer/shader/chunk/ShaderChunk' {
    export const empty: GLSLChunk;
    export const NULL: number;
    export const basic_materialColor_fragment: GLSLChunk;
    export const end_basic_fragment: GLSLChunk;
    export const common_define: GLSLChunk;
    export const common_fragment: GLSLChunk;
    export const common_function: GLSLChunk;
    export const common_vertex: GLSLChunk;
    export const highp_fragment: GLSLChunk;
    export const lowp_fragment: GLSLChunk;
    export const mediump_fragment: GLSLChunk;
    export const noNormalMap_light_fragment: GLSLChunk;
    export const lightCommon_fragment: GLSLChunk;
    export const lightCommon_vertex: GLSLChunk;
    export const lightEnd_fragment: GLSLChunk;
    export const light_common: GLSLChunk;
    export const light_fragment: GLSLChunk;
    export const light_setWorldPosition_vertex: GLSLChunk;
    export const light_vertex: GLSLChunk;
    export const map_forBasic_fragment: GLSLChunk;
    export const map_forBasic_vertex: GLSLChunk;
    export const modelMatrix_noInstance_vertex: GLSLChunk;
    export const normalMatrix_noInstance_vertex: GLSLChunk;
    export const diffuseMap_fragment: GLSLChunk;
    export const diffuseMap_vertex: GLSLChunk;
    export const noDiffuseMap_fragment: GLSLChunk;
    export const noEmissionMap_fragment: GLSLChunk;
    export const noLightMap_fragment: GLSLChunk;
    export const noNormalMap_fragment: GLSLChunk;
    export const noNormalMap_vertex: GLSLChunk;
    export const noSpecularMap_fragment: GLSLChunk;
    export const specularMap_fragment: GLSLChunk;
    export const specularMap_vertex: GLSLChunk;
    export const noShadowMap_fragment: GLSLChunk;
    export type GLSLChunk = {
        top: string;
        define: string;
        varDeclare: string;
        funcDeclare: string;
        funcDefine: string;
        body: string;
    };
}

declare module 'wonder.js/dist/es2015/renderer/shader/glslSender/GLSLSenderData' {
    import { SendAttributeConfigMap, SendUniformConfigMap, SendUniformFuncConfigMap, UniformCacheMap } from "wonder.js/dist/es2015/renderer/type/dataType";
    export class GLSLSenderData {
        static uniformCacheMap: UniformCacheMap;
        static sendAttributeConfigMap: SendAttributeConfigMap;
        static sendUniformConfigMap: SendUniformConfigMap;
        static sendUniformFuncConfigMap: SendUniformFuncConfigMap;
        static vertexAttribHistory: Array<boolean>;
    }
}

declare module 'wonder.js/dist/es2015/renderer/shader/location/LocationData' {
    import { AttributeLocationMap, UniformLocationMap } from "wonder.js/dist/es2015/renderer/type/dataType";
    export class LocationData {
        static attributeLocationMap: AttributeLocationMap;
        static uniformLocationMap: UniformLocationMap;
    }
}

declare module 'wonder.js/dist/es2015/renderer/shader/program/ProgramData' {
    import { ProgramMap } from "wonder.js/dist/es2015/renderer/type/dataType";
    export class ProgramData {
        static programMap: ProgramMap;
        static lastUsedProgram: WebGLProgram;
        static lastBindedArrayBuffer: WebGLBuffer;
        static lastBindedIndexBuffer: WebGLBuffer;
    }
}

declare module 'wonder.js/dist/es2015/renderer/shader/ShaderData' {
    import { ShaderLibWholeNameMap } from "wonder.js/dist/es2015/renderer/type/dataType";
    export class ShaderData {
        static index: number;
        static count: number;
        static shaderLibWholeNameMap: ShaderLibWholeNameMap;
    }
}

declare module 'wonder.js/dist/es2015/renderer/shader/snippet/ShaderSnippet' {
    export const main_begin: string;
    export const main_end: string;
    export const setPos_mvp: string;
}

declare module 'wonder.js/dist/es2015/renderer/texture/MapManagerData' {
    export class MapManagerData {
        static buffer: SharedArrayBuffer;
        static textureIndices: Float32Array;
        static textureCounts: Uint8Array;
    }
}

declare module 'wonder.js/dist/es2015/renderer/texture/Texture' {
    export class Texture {
        index: number;
    }
    export var createTexture: () => any;
    export var disposeTexture: Function;
    export var getTextureSource: Function;
    export var setTextureSource: Function;
    export var getTextureWidth: Function;
    export var setTextureWidth: Function;
    export var getTextureHeight: Function;
    export var setTextureHeight: Function;
    export var getTextureIsNeedUpdate: Function;
    export var setTextureIsNeedUpdate: Function;
}

declare module 'wonder.js/dist/es2015/renderer/texture/TextureCacheData' {
    export class TextureCacheData {
        static bindTextureUnitCache: Array<number>;
    }
}

declare module 'wonder.js/dist/es2015/renderer/texture/TextureData' {
    import { Texture } from "wonder.js/dist/es2015/renderer/texture/Texture";
    import { DisposedTextureDataMap } from "wonder.js/dist/es2015/renderer/type/dataType";
    export class TextureData {
        static index: number;
        static glTextures: Array<WebGLTexture>;
        static sourceMap: Array<HTMLImageElement>;
        static textureMap: Array<Texture>;
        static uniformSamplerNameMap: Array<string>;
        static buffer: SharedArrayBuffer;
        static widths: Float32Array;
        static heights: Float32Array;
        static isNeedUpdates: Uint8Array;
        static defaultWidth: number;
        static defaultHeight: number;
        static defaultIsNeedUpdate: number;
        static disposedTextureDataMap: DisposedTextureDataMap;
    }
}

declare module 'wonder.js/dist/es2015/renderer/worker/both_file/device/DeviceManagerWorkerData' {
    import { Color } from "wonder.js/dist/es2015/structure/Color";
    import { ESide } from "wonder.js/dist/es2015/renderer/enum/ESide";
    export class DeviceManagerWorkerData {
        static gl: WebGLRenderingContext;
        static clearColor: Color;
        static writeRed: boolean;
        static writeGreen: boolean;
        static writeBlue: boolean;
        static writeAlpha: boolean;
        static side: ESide;
    }
}

declare module 'wonder.js/dist/es2015/renderer/worker/both_file/ERenderWorkerState' {
    export enum ERenderWorkerState {
        DEFAULT = 0,
        INIT_COMPLETE = 1,
        DRAW_WAIT = 2,
        DRAW_COMPLETE = 3,
    }
}

declare module 'wonder.js/dist/es2015/renderer/worker/both_file/EWorkerOperateType' {
    export enum EWorkerOperateType {
        INIT_CONFIG = 0,
        INIT_GL = 1,
        INIT_MATERIAL_GEOMETRY_LIGHT_TEXTURE = 2,
        DRAW = 3,
    }
}

declare module 'wonder.js/dist/es2015/renderer/worker/logic_file/draw/SendDrawRenderCommandBufferData' {
    import { ERenderWorkerState } from "wonder.js/dist/es2015/renderer/worker/both_file/ERenderWorkerState";
    export class SendDrawRenderCommandBufferData {
        static state: ERenderWorkerState;
        static isInitComplete: boolean;
    }
}

declare module 'wonder.js/dist/es2015/renderer/worker/render_file/buffer/ArrayBufferWorkerData' {
    export class ArrayBufferWorkerData {
        static vertexBuffer: Array<WebGLBuffer>;
        static normalBuffers: Array<WebGLBuffer>;
        static texCoordBuffers: Array<WebGLBuffer>;
    }
}

declare module 'wonder.js/dist/es2015/renderer/worker/render_file/buffer/IndexBufferWorkerData' {
    export class IndexBufferWorkerData {
        static buffers: Array<WebGLBuffer>;
    }
}

declare module 'wonder.js/dist/es2015/renderer/worker/render_file/config/InitConfigWorkerData' {
    export class InitConfigWorkerData {
        static isTest: boolean;
    }
}

declare module 'wonder.js/dist/es2015/renderer/worker/render_file/draw/DrawRenderCommandBufferWorkerData' {
    export class DrawRenderCommandBufferWorkerData {
        static mMatrixFloatArrayForSend: Float32Array;
        static vMatrixFloatArrayForSend: Float32Array;
        static pMatrixFloatArrayForSend: Float32Array;
        static normalMatrixFloatArrayForSend: Float32Array;
        static cameraPositionForSend: Float32Array;
        static mMatrices: Float32Array;
        static materialIndices: Uint32Array;
        static shaderIndices: Uint32Array;
        static geometryIndices: Uint32Array;
        static vMatrices: Float32Array;
        static pMatrices: Float32Array;
        static cameraPositions: Float32Array;
        static normalMatrices: Float32Array;
    }
}

declare module 'wonder.js/dist/es2015/renderer/worker/render_file/geometry/GeometryWorkerData' {
    import { GeometryIndicesCacheMap, GeometryVertexCacheMap } from "wonder.js/dist/es2015/definition/type/geometryType";
    export class GeometryWorkerData {
        static verticesCacheMap: GeometryVertexCacheMap;
        static normalsCacheMap: GeometryVertexCacheMap;
        static texCoordsCacheMap: GeometryVertexCacheMap;
        static indicesCacheMap: GeometryIndicesCacheMap;
        static vertices: Float32Array;
        static normals: Float32Array;
        static texCoords: Float32Array;
        static indices: Uint16Array | Uint32Array;
    }
}

declare module 'wonder.js/dist/es2015/renderer/worker/render_file/initGL' {
    import { MessageInitGLData } from "wonder.js/dist/es2015/renderer/type/messageDataType";
    export var initGL: (data: MessageInitGLData) => any;
}

declare module 'wonder.js/dist/es2015/renderer/worker/render_file/light/AmbientLightWorkerData' {
    import { SpecifyLightWorkerData } from "wonder.js/dist/es2015/renderer/worker/render_file/light/SpecifyLightWorkerData";
    export class AmbientLightWorkerData extends SpecifyLightWorkerData {
    }
}

declare module 'wonder.js/dist/es2015/renderer/worker/render_file/light/DirectionLightWorkerData' {
    import { SpecifyLightWorkerData } from "wonder.js/dist/es2015/renderer/worker/render_file/light/SpecifyLightWorkerData";
    import { DirectionLightGLSLDataStructure } from "wonder.js/dist/es2015/renderer/type/dataType";
    export class DirectionLightWorkerData extends SpecifyLightWorkerData {
        static positionArr: Array<Float32Array>;
        static lightGLSLDataStructureMemberNameArr: Array<DirectionLightGLSLDataStructure>;
    }
}

declare module 'wonder.js/dist/es2015/renderer/worker/render_file/light/PointLightWorkerData' {
    import { SpecifyLightWorkerData } from "wonder.js/dist/es2015/renderer/worker/render_file/light/SpecifyLightWorkerData";
    import { PointLightGLSLDataStructure } from "wonder.js/dist/es2015/renderer/type/dataType";
    export class PointLightWorkerData extends SpecifyLightWorkerData {
        static positionArr: Array<Float32Array>;
        static lightGLSLDataStructureMemberNameArr: Array<PointLightGLSLDataStructure>;
    }
}

declare module 'wonder.js/dist/es2015/renderer/worker/render_file/light/SpecifyLightWorkerData' {
    export class SpecifyLightWorkerData {
        static count: number;
        static colors: Float32Array;
    }
}

declare module 'wonder.js/dist/es2015/renderer/worker/render_file/material/BasicMaterialWorkerData' {
    export class BasicMaterialWorkerData {
    }
}

declare module 'wonder.js/dist/es2015/renderer/worker/render_file/material/LightMaterialWorkerData' {
    export class LightMaterialWorkerData {
        static specularColors: Float32Array;
        static emissionColors: Float32Array;
        static shininess: Float32Array;
        static shadings: Uint8Array;
        static lightModels: Uint8Array;
        static diffuseMapIndex: number;
        static specularMapIndex: number;
    }
}

declare module 'wonder.js/dist/es2015/renderer/worker/render_file/material/MaterialWorkerData' {
    export class MaterialWorkerData {
        static shaderIndices: Uint32Array;
        static colors: Float32Array;
        static opacities: Float32Array;
        static alphaTests: Float32Array;
    }
    export type MaterialInitWorkerData = {
        buffer: SharedArrayBuffer;
        basicMaterialData: BasicMaterialInitWorkerData;
        lightMaterialData: LightMaterialInitWorkerData;
    };
    export type BasicMaterialInitWorkerData = {
        startIndex: number;
        index: number;
    };
    export type LightMaterialInitWorkerData = {
        startIndex: number;
        index: number;
        diffuseMapIndex: number;
        specularMapIndex: number;
    };
    export type MaterialUpdateWorkerData = {
        buffer: SharedArrayBuffer;
        workerInitList: Array<number>;
    };
}

declare module 'wonder.js/dist/es2015/renderer/worker/render_file/shader/glslSender/GLSLSenderWorkerData' {
    import { SendAttributeConfigMap, SendUniformConfigMap, UniformCacheMap } from "wonder.js/dist/es2015/renderer/type/dataType";
    export class GLSLSenderWorkerData {
        static uniformCacheMap: UniformCacheMap;
        static sendAttributeConfigMap: SendAttributeConfigMap;
        static sendUniformConfigMap: SendUniformConfigMap;
        static vertexAttribHistory: Array<boolean>;
    }
}

declare module 'wonder.js/dist/es2015/renderer/worker/render_file/shader/location/LocationWorkerData' {
    import { AttributeLocationMap, UniformLocationMap } from "wonder.js/dist/es2015/renderer/type/dataType";
    export class LocationWorkerData {
        static attributeLocationMap: AttributeLocationMap;
        static uniformLocationMap: UniformLocationMap;
    }
}

declare module 'wonder.js/dist/es2015/renderer/worker/render_file/shader/program/ProgramWorkerData' {
    import { ProgramMap } from "wonder.js/dist/es2015/renderer/type/dataType";
    export class ProgramWorkerData {
        static programMap: ProgramMap;
        static lastUsedProgram: WebGLProgram;
        static lastBindedArrayBuffer: WebGLBuffer;
        static lastBindedIndexBuffer: WebGLBuffer;
    }
}

declare module 'wonder.js/dist/es2015/renderer/worker/render_file/shader/ShaderWorkerData' {
    import { ShaderLibWholeNameMap } from "wonder.js/dist/es2015/renderer/type/dataType";
    export class ShaderWorkerData {
        static index: number;
        static count: number;
        static shaderLibWholeNameMap: ShaderLibWholeNameMap;
    }
}

declare module 'wonder.js/dist/es2015/renderer/worker/render_file/state/StateData' {
    import { Map } from "immutable";
    export class StateData {
        static state: Map<any, any>;
    }
}

declare module 'wonder.js/dist/es2015/renderer/worker/render_file/state/StateSytem' {
    import { Map } from "immutable";
    import { IO } from "wonder-fantasy-land/dist/es2015/types/IO";
    export var getState: (StateData: any) => any;
    export var setState: (state: Map<any, any>, StateData: any) => IO;
}

declare module 'wonder.js/dist/es2015/renderer/worker/render_file/texture/MapManagerWorkerData' {
    export class MapManagerWorkerData {
        static textureIndices: Float32Array;
        static textureCounts: Uint8Array;
    }
}

declare module 'wonder.js/dist/es2015/renderer/worker/render_file/texture/TextureCacheWorkerData' {
    export class TextureCacheWorkerData {
        static bindTextureUnitCache: Array<number>;
    }
}

declare module 'wonder.js/dist/es2015/renderer/worker/render_file/texture/TextureWorkerData' {
    export class TextureWorkerData {
        static index: number;
        static glTextures: Array<WebGLTexture>;
        static sourceMap: Array<ImageBitmap>;
        static uniformSamplerNameMap: Array<string>;
        static widths: Float32Array;
        static heights: Float32Array;
        static isNeedUpdates: Uint8Array;
    }
}

declare module 'wonder.js/dist/es2015/structure/Color' {
    import { Vector3 } from "wonder.js/dist/es2015/math/Vector3";
    export class Color {
        static create(colorVal?: string): Color;
        dirty: boolean;
        r: number;
        g: number;
        b: number;
        a: number;
        initWhenCreate(colorVal?: string): void;
        toVector3(): Vector3;
        toVector4(): any;
        toArray3(): number[];
        toString(): string;
        clone(): Color;
        isEqual(color: Color): boolean;
        setColorByNum(colorVal: string): this;
    }
}

declare module 'wonder.js/dist/es2015/structure/RectRegion' {
    import { Vector4 } from "wonder.js/dist/es2015/math/Vector4";
    export class RectRegion extends Vector4 {
        width: number;
        height: number;
        clone(): RectRegion;
        isNotEmpty(): boolean;
    }
}

declare module 'wonder.js/dist/es2015/structure/View' {
    export class View {
        static create(): View;
        readonly dom: HTMLCanvasElement;
        readonly width: any;
        readonly height: any;
        readonly styleWidth: any;
        readonly styleHeight: any;
        readonly x: any;
        readonly y: any;
    }
}

declare module 'wonder.js/dist/es2015/test/forRenderWorkerUnitTest' {
    export var initDeviceManagerWorkerData: (DeviceManagerDataFromSystem: any) => void;
    export var initProgramWorkerData: (ProgramDataFromSystem: any) => void;
    export var initGLSLSenderWorkerData: (GLSLSenderDataFromSystem: any) => void;
    export var initLocationWorkerData: (LocationDataFromSystem: any) => void;
    export var initShaderWorkerData: (ShaderWorkerData: any) => void;
    export var initLightWorkerData: (lightData: {
        ambientLightData: {
            buffer: SharedArrayBuffer;
            bufferCount: number;
            lightCount: number;
        };
        directionLightData: {
            buffer: SharedArrayBuffer;
            bufferCount: number;
            lightCount: number;
            directionLightGLSLDataStructureMemberNameArr: {
                position: string;
                color: string;
                intensity: string;
            }[];
        };
        pointLightData: {
            buffer: SharedArrayBuffer;
            bufferCount: number;
            lightCount: number;
            pointLightGLSLDataStructureMemberNameArr: {
                position: string;
                color: string;
                intensity: string;
                constant: string;
                linear: string;
                quadratic: string;
                range: string;
            }[];
        };
    }, AmbientLightDataFromSystem: any, DirectionLightDataFromSystem: any, PointLightDataFromSystem: any) => void;
    export var initDrawRenderCommandBufferWorkerData: (DrawRenderCommandBufferDataFromSystem: any) => void;
    export var getDirectionLightPositionInShaderWorker: (index: number, drawDataMap: {
        DeviceManagerDataFromSystem: any;
        TextureDataFromSystem: any;
        TextureCacheDataFromSystem: any;
        MapManagerDataFromSystem: any;
        MaterialDataFromSystem: any;
        BasicMaterialDataFromSystem: any;
        LightMaterialDataFromSystem: any;
        AmbientLightDataFromSystem: any;
        DirectionLightDataFromSystem: any;
        PointLightDataFromSystem: any;
        ProgramDataFromSystem: any;
        LocationDataFromSystem: any;
        GLSLSenderDataFromSystem: any;
        GeometryDataFromSystem: any;
        ArrayBufferDataFromSystem: any;
        IndexBufferDataFromSystem: any;
        DrawRenderCommandBufferDataFromSystem: any;
    }) => any;
    export var getPointLightPositionInShaderWorker: (index: number, drawDataMap: {
        DeviceManagerDataFromSystem: any;
        TextureDataFromSystem: any;
        TextureCacheDataFromSystem: any;
        MapManagerDataFromSystem: any;
        MaterialDataFromSystem: any;
        BasicMaterialDataFromSystem: any;
        LightMaterialDataFromSystem: any;
        AmbientLightDataFromSystem: any;
        DirectionLightDataFromSystem: any;
        PointLightDataFromSystem: any;
        ProgramDataFromSystem: any;
        LocationDataFromSystem: any;
        GLSLSenderDataFromSystem: any;
        GeometryDataFromSystem: any;
        ArrayBufferDataFromSystem: any;
        IndexBufferDataFromSystem: any;
        DrawRenderCommandBufferDataFromSystem: any;
    }) => any;
    export var updateTextureWorker: (gl: WebGLRenderingContext, textureIndex: number, TextureWorkerData: any) => void;
}

declare module 'wonder.js/dist/es2015/test/forUnitTest' {
    import { DomQuery as DomQueryFromCommonlib } from "wonder-commonlib/dist/es2015/utils/DomQuery";
    import { Operator } from "wonder-frp/dist/es2015/global/Operator";
    import { Map } from "immutable";
    export var initThreeDTransformData: (GlobalTempData: any, ThreeDTransformData: any) => void;
    export var DomQuery: typeof DomQueryFromCommonlib;
    export var fromArray: typeof Operator.fromArray;
    export var initTagData: (TagData: any) => void;
    export var initGeometryData: (DataBufferConfig: any, GeometryData: any) => void;
    export var initMaterialData: (TextureCacheData: any, TextureData: any, MapManagerData: any, MaterialData: any, BasicMaterialData: any, LightMaterialData: any) => void;
    export var initShaderData: (ShaderData: any) => void;
    export var initProgramData: (ProgramDataFromSystem: any) => void;
    export var initLocationData: (LocationDataFromSystem: any) => void;
    export var initGLSLSenderData: (GLSLSenderDataFromSystem: any) => void;
    export var initMeshRendererData: (MeshRendererData: any) => void;
    export var initArrayBufferData: (ArrayBufferDataFromSystemFromSystem: any) => void;
    export var initIndexBufferData: (IndexBufferDataFromSystem: any) => void;
    export var initDeviceManagerData: (DeviceManagerDataFromSystem: any) => void;
    export var initCameraControllerData: (CameraControllerData: any, PerspectiveCameraData: any, CameraData: any) => void;
    export var initLightData: (AmbientLightData: any, DirectionLightData: any, PointLightData: any) => void;
    export var initGameObjectData: (GameObjectData: any) => void;
    export var initSceneData: (SceneData: any) => void;
    export var initRenderCommandBufferData: (DataBufferConfig: any, RenderCommandBufferData: any) => void;
    export var initDrawRenderCommandBufferData: (DrawRenderCommandBufferDataFromSystem: any) => void;
    export var initSendDrawRenderCommandBufferData: (SendDrawRenderCommandBufferData: any) => void;
    export var createState: () => Map<{}, {}>;
    export var useProgram: any;
    export var sendAttributeData: any;
    export var sendUniformData: any;
    export var disableVertexAttribArray: Function;
    export var setGeometryIndices: Function;
    export var setGeometryVertices: Function;
    export var hasGeometryIndices: any;
    export var getShaderIndex: (materialIndex: number, MaterialData: any) => any;
    export var updateSystem: (elapsed: number, state: Map<any, any>) => any;
    export var getNormalMatrix: Function;
}

declare module 'wonder.js/dist/es2015/utils/BufferUtilsForUnitTest' {
    export class BufferUtilsForUnitTest {
        static isDrawRenderCommandBufferDataTypeArrayNotExist(DrawRenderCommandBufferDataFromSystem: any): boolean;
    }
}

declare module 'wonder.js/dist/es2015/utils/Log' {
    import { Log as Log$ } from "wonder-commonlib/dist/es2015/Log";
    export class Log extends Log$ {
    }
}

declare module 'wonder.js/dist/es2015/utils/time/CommonTimeController' {
    import { TimeController } from "wonder.js/dist/es2015/utils/time/TimeController";
    export class CommonTimeController extends TimeController {
        static create(): CommonTimeController;
        protected getNow(): any;
    }
}

declare module 'wonder.js/dist/es2015/utils/time/DirectorTimeController' {
    import { TimeController } from "wonder.js/dist/es2015/utils/time/TimeController";
    export class DirectorTimeController extends TimeController {
        static create(): DirectorTimeController;
        gameTime: number;
        fps: number;
        isTimeChange: boolean;
        deltaTime: number;
        tick(time: number): void;
        start(): void;
        resume(): void;
        protected getNow(): any;
    }
}

declare module 'wonder.js/dist/es2015/utils/time/TimeController' {
    export abstract class TimeController {
        elapsed: number;
        pauseElapsed: number;
        pauseTime: number;
        startTime: number;
        start(): void;
        stop(): void;
        pause(): void;
        resume(): void;
        computeElapseTime(time: number): number;
        protected abstract getNow(): any;
    }
}

declare module 'wonder.js/dist/es2015/worker/WorkerInstanceData' {
    export class WorkerInstanceData {
        static renderWorker: Worker;
    }
}

declare module 'wonder.js/dist/es2015/core/entityObject/gameObject/IUIDEntity' {
    export interface IUIDEntity {
        uid: number;
    }
}

declare module 'wonder.js/dist/es2015/component/ComponentSystem' {
    import { ComponentGameObjectMap } from "wonder.js/dist/es2015/component/ComponentData";
    import { Component } from "wonder.js/dist/es2015/component/Component";
    import { GameObject } from "wonder.js/dist/es2015/core/entityObject/gameObject/GameObject";
    import { Map as MapImmutable } from "immutable";
    import { IUIDEntity } from "wonder.js/dist/es2015/core/entityObject/gameObject/IUIDEntity";
    export var addAddComponentHandle: (_class: any, handle: Function) => void;
    export var addDisposeHandle: (_class: any, handle: Function) => void;
    export var addInitHandle: (_class: any, handle: (index: number, state: MapImmutable<any, any>) => void) => void;
    export var execHandle: (component: Component, handleMapName: string, args?: any[]) => void;
    export var execInitHandle: (typeID: string, index: number, state: MapImmutable<any, any>) => void;
    export var checkComponentShouldAlive: (component: Component, data: any, isAlive: (component: Component, data: any) => boolean) => void;
    export var addComponentToGameObjectMap: Function;
    export var getComponentGameObject: (gameObjectMap: ComponentGameObjectMap | GameObject[], index: number) => IUIDEntity;
    export var generateComponentIndex: (ComponentData: any) => number;
    export var deleteComponent: Function;
    export var deleteComponentBySwapArray: Function;
    export var markComponentIndexRemoved: (component: Component) => void;
    export var isComponentIndexNotRemoved: (component: Component) => boolean;
    export type ComponentMap = {
        [index: number]: Component;
    };
}

declare module 'wonder.js/dist/es2015/definition/type/geometryType' {
    export type GeometryWorkerInfoList = Array<{
        index: number;
        startIndex: number;
        endIndex: number;
    }>;
    export type GeometryVertexCacheMap = {
        [index: number]: Float32Array;
    };
    export type GeometryNormalsCacheMap = {
        [index: number]: Float32Array;
    };
    export type GeometryIndicesCacheMap = {
        [index: number]: Uint16Array | Uint32Array;
    };
    export type GeometryInfoList = Array<GeometryInfo>;
    export type GeometryInfo = {
        startIndex: number;
        endIndex: number;
    };
    export type GetArrayBufferDataFuncMap = {
        getVertices: Function;
        getNormals: Function;
        getTexCoords: Function;
    };
}

declare module 'wonder.js/dist/es2015/renderer/type/dataType' {
    import { ISendAttributeConfig, ISendUniformConfig } from "wonder.js/dist/es2015/renderer/data/shaderLib_generator";
    import { EBufferType } from "wonder.js/dist/es2015/renderer/enum/EBufferType";
    export type ProgramMap = {
        [index: number]: WebGLProgram;
    };
    export type AttributeLocationMap = {
        [index: number]: AttributeShaderLocationMap;
    };
    export type UniformLocationMap = {
        [index: number]: UniformShaderLocationMap;
    };
    export type AttributeShaderLocationMap = {
        [name: string]: number;
    };
    export type UniformShaderLocationMap = {
        [name: string]: WebGLUniformLocation;
    };
    export type SendAttributeConfigMap = {
        [index: number]: Array<ISendAttributeConfig>;
    };
    export type SendUniformConfigMap = {
        [index: number]: Array<ISendUniformConfig>;
    };
    export type SendUniformFuncConfigMap = {
        [index: number]: Function;
    };
    export type UniformCacheMap = {
        [index: number]: {
            [name: string]: any;
        };
    };
    export type ArrayBufferDataMap = {
        [geometryIndex: number]: {
            size: number;
            type: EBufferType;
        };
    };
    export type RenderCommandBufferForDrawData = {
        buffer: SharedArrayBuffer;
        count: number;
    };
    export type RenderCommandUniformData = {
        mMatrix: Float32Array;
        vMatrix: Float32Array;
        pMatrix: Float32Array;
        cameraPosition: Float32Array;
        normalMatrix: Float32Array;
        materialIndex: number;
    };
    export type ContextConfigOptionsData = {
        alpha: boolean;
        depth: boolean;
        stencil: boolean;
        antialias: boolean;
        premultipliedAlpha: boolean;
        preserveDrawingBuffer: boolean;
    };
    export type BuildGLSLSourceFuncFuncDataMap = {
        getAlphaTest: Function;
        isTestAlpha: Function;
    };
    export type MaterialDataMap = {
        MaterialDataFromSystem: any;
        BasicMaterialDataFromSystem: any;
        LightMaterialDataFromSystem: any;
    };
    export type MaterialWorkerInitDataList = Array<{
        index: number;
        className: string;
    }>;
    export type ShaderLibWholeNameMap = {
        [shaderLibWholeName: string]: number;
    };
    export type DirectionLightGLSLDataStructure = {
        position: string;
        color: string;
        intensity: string;
    };
    export type PointLightGLSLDataStructure = {
        position: string;
        color: string;
        intensity: string;
        constant: string;
        linear: string;
        quadratic: string;
        range: string;
    };
    export type TypeArr = Float32Array | Uint32Array | Uint16Array | Uint8Array | Uint8Array;
    export type DisposedTextureDataMap = Array<{
        sourceIndex: number;
        lastComponentIndex: number;
    }>;
}

declare module 'wonder.js/dist/es2015/definition/type/mainType' {
    import { ContextConfigOptionsData } from "wonder.js/dist/es2015/renderer/type/dataType";
    export type ContextConfigData = {
        options: ContextConfigOptionsData;
    };
    export type MainConfigData = {
        canvasID?: string;
        isTest?: boolean;
        screenSize?: any;
        useDevicePixelRatio?: boolean;
        contextConfig?: ContextConfigData;
        workerConfig?: WorkerConfigData;
    };
    export type WorkerConfigData = {
        renderWorkerFileDir: string;
    };
}

declare module 'wonder.js/dist/es2015/renderer/type/messageDataType' {
    import { EWorkerOperateType } from "wonder.js/dist/es2015/renderer/worker/both_file/EWorkerOperateType";
    import { ContextConfigOptionsData, DirectionLightGLSLDataStructure, DisposedTextureDataMap, PointLightGLSLDataStructure } from "wonder.js/dist/es2015/renderer/type/dataType";
    import { EBufferType } from "wonder.js/dist/es2015/renderer/enum/EBufferType";
    import { GeometryInfoList, GeometryWorkerInfoList } from "wonder.js/dist/es2015/definition/type/geometryType";
    import { EGeometryWorkerDataOperateType } from "wonder.js/dist/es2015/renderer/enum/EGeometryWorkerDataOperateType";
    export type MessageInitGLData = {
        operateType: EWorkerOperateType;
        canvas: HTMLCanvasElement;
        options: ContextConfigOptionsData;
        viewportData: ViewportData;
    };
    export type ScreenData = {
        x: number;
        y: number;
        width: number;
        height: number;
    };
    export type ViewportData = {
        x: number;
        y: number;
        width: number;
        height: number;
    };
    export type GeometryInitWorkerData = {
        buffer: SharedArrayBuffer;
        indexType: EBufferType;
        indexTypeSize: number;
        verticesInfoList: GeometryInfoList;
        normalsInfoList: GeometryInfoList;
        texCoordsInfoList: GeometryInfoList;
        indicesInfoList: GeometryInfoList;
    };
    export type GeometryUpdateWorkerData = {
        buffer: SharedArrayBuffer;
        type: EGeometryWorkerDataOperateType;
        verticesInfoList: GeometryWorkerInfoList;
        normalsInfoList: GeometryWorkerInfoList;
        texCoordsInfoList: GeometryWorkerInfoList;
        indicesInfoList: GeometryWorkerInfoList;
    };
    export type GeometryResetWorkerData = {
        buffer: SharedArrayBuffer;
        type: EGeometryWorkerDataOperateType;
        verticesInfoList: GeometryInfoList;
        normalsInfoList: GeometryInfoList;
        texCoordsInfoList: GeometryInfoList;
        indicesInfoList: GeometryInfoList;
    };
    export type LightInitWorkerData = {
        ambientLightData: {
            buffer: SharedArrayBuffer;
            bufferCount: number;
            lightCount: number;
        };
        directionLightData: {
            buffer: SharedArrayBuffer;
            bufferCount: number;
            lightCount: number;
            directionLightGLSLDataStructureMemberNameArr: Array<DirectionLightGLSLDataStructure>;
        };
        pointLightData: {
            buffer: SharedArrayBuffer;
            bufferCount: number;
            lightCount: number;
            pointLightGLSLDataStructureMemberNameArr: Array<PointLightGLSLDataStructure>;
        };
    };
    export type LightDrawWorkerData = {
        directionLightData: {
            positionArr: Array<Float32Array>;
        };
        pointLightData: {
            positionArr: Array<Float32Array>;
        };
    };
    export type TextureInitWorkerData = {
        mapManagerBuffer: SharedArrayBuffer;
        textureBuffer: SharedArrayBuffer;
        index: number;
        imageSrcIndexArr: Array<ImageSrcIndexData>;
        uniformSamplerNameMap: Array<string>;
    };
    export type ImageSrcIndexData = {
        src: string;
        index: number;
    };
    export type TextureUpdateWorkerData = {};
    export type TextureDisposeWorkerData = {
        disposedTextureDataMap: DisposedTextureDataMap;
    };
}

