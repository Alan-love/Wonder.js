import { ETextureWrapMode } from "../../enum/ETextureWrapMode";
import { ETextureFilterMode } from "../../enum/ETextureFilterMode";
import { ETextureFormat } from "../../enum/ETextureFormat";
import { ETextureType } from "../../enum/ETextureType";
import { UniformCacheMap, UniformLocationMap } from "../../type/dataType";
import { SendUniformDataGLSLSenderDataMap } from "../../type/utilsType";
export declare var getBufferDataSize: () => number;
export declare var createTypeArrays: (buffer: any, count: number, TextureDataFromSystem: any) => number;
export declare var getSource: (textureIndex: number, TextureDataFromSystem: any) => any;
export declare var getWidth: (textureIndex: number, TextureDataFromSystem: any) => any;
export declare var getHeight: (textureIndex: number, TextureDataFromSystem: any) => any;
export declare var getWrapS: (textureIndex: number, TextureData: any) => ETextureWrapMode;
export declare var getWrapT: (textureIndex: number, TextureData: any) => ETextureWrapMode;
export declare var getMagFilter: (textureIndex: number, TextureData: any) => ETextureFilterMode;
export declare var getMinFilter: (textureIndex: number, TextureData: any) => ETextureFilterMode;
export declare var getFormat: (textureIndex: number, TextureData: any) => ETextureFormat;
export declare var getType: (textureIndex: number, TextureData: any) => ETextureType;
export declare var getFlipY: (textureIndex: number, TextureData: any) => boolean;
export declare var getIsNeedUpdate: (textureIndex: number, TextureDataFromSystem: any) => number;
export declare var setIsNeedUpdate: (textureIndex: number, value: number, TextureDataFromSystem: any) => void;
export declare var initTextures: (gl: WebGLRenderingContext, TextureDataFromSystem: any) => void;
export declare var initTexture: (gl: WebGLRenderingContext, textureIndex: number, TextureDataFromSystem: any) => void;
export declare var getBufferCount: () => number;
export declare var needUpdate: (textureIndex: number, TextureDataFromSystem: any) => boolean;
export declare var markNeedUpdate: (textureIndex: any, value: boolean, TextureDataFromSystem: any) => void;
export declare var update: Function;
export declare var bindToUnit: (gl: WebGLRenderingContext, unitIndex: number, textureIndex: number, TextureCacheDataFromSystem: any, TextureDataFromSystem: any, isCached: Function, addActiveTexture: Function) => void;
export declare var sendData: (gl: WebGLRenderingContext, mapCount: number, shaderIndex: number, textureIndex: number, unitIndex: number, program: WebGLProgram, glslSenderData: SendUniformDataGLSLSenderDataMap, uniformLocationMap: UniformLocationMap, uniformCacheMap: UniformCacheMap, directlySendUniformData: Function, TextureDataFromSystem: any) => void;
export declare var disposeSourceMap: (sourceIndex: number, lastComponentIndex: number, TextureDataFromSystem: any) => void;
export declare var disposeGLTexture: (gl: WebGLRenderingContext, sourceIndex: number, lastComponentIndex: number, TextureCacheDataFromSystem: any, TextureDataFromSystem: any) => void;
export declare var drawPartOfTextureByCanvas: (source: HTMLImageElement, canvasWidth: number, canvasHeight: number, sx: number, sy: number) => any;
