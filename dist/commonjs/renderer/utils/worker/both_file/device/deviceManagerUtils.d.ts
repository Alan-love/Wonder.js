import { IO } from "wonder-fantasy-land/dist/commonjs/types/IO";
import { Map } from "immutable";
import { Color } from "../../../../../structure/Color";
import { ESide } from "../../../../enum/ESide";
import { ContextConfigOptionsData } from "../../../../type/dataType";
import { EBlendFunc } from "../../../../enum/EBlendFunc";
import { EBlendEquation } from "../../../../enum/EBlendEquation";
export declare const getGL: (DeviceManagerDataFromSystem: any, state?: Map<any, any>) => WebGLRenderingContext;
export declare const setGL: any;
export declare const setContextConfig: any;
export declare const setPixelRatio: any;
export declare const getViewport: (state: Map<any, any>) => any;
export declare const setViewportToState: (x: number, y: number, width: number, height: number, state: Map<any, any>) => Map<any, any>;
export declare const setCanvasPixelRatio: any;
export declare const setViewportOfGL: any;
export declare const getScreenSize: (state: Map<any, any>) => any;
export declare const setScreen: (canvas: HTMLCanvasElement, setScreenData: Function, DeviceManagerDataFromSystem: any, state: Map<any, any>, DomQuery: any) => IO;
export declare const clear: (gl: WebGLRenderingContext, DeviceManagerDataFromSystem: any) => void;
export declare const clearColorBuffer: (gl: WebGLRenderingContext) => void;
export declare const setClearColor: (gl: WebGLRenderingContext, color: Color, DeviceManagerDataFromSystem: any) => void;
export declare const setClearColorData: (color: Color, DeviceManagerDataFromSystem: any) => void;
export declare const setColorWrite: (gl: WebGLRenderingContext, writeRed: boolean, writeGreen: boolean, writeBlue: boolean, writeAlpha: boolean, DeviceManagerDataFromSystem: any) => void;
export declare const setSide: (gl: WebGLRenderingContext, side: ESide, DeviceManagerDataFromSystem: any) => void;
export declare const setDepthWrite: (gl: any, value: boolean, DeviceManagerDataFromSystem: any) => void;
export declare const setBlend: (gl: any, value: boolean, DeviceManagerDataFromSystem: any) => void;
export declare const setBlendFunc: (gl: any, blendSrc: EBlendFunc, blendDst: EBlendFunc, DeviceManagerDataFromSystem: any) => void;
export declare const setBlendEquation: (gl: any, blendEquation: EBlendEquation, DeviceManagerDataFromSystem: any) => void;
export declare const setBlendSeparate: (gl: any, blendFuncSeparate: EBlendFunc[], DeviceManagerDataFromSystem: any) => void;
export declare const setDepthTest: (gl: any, value: boolean, DeviceManagerDataFromSystem: any) => void;
export declare const setScissorTest: (gl: any, value: boolean, DeviceManagerDataFromSystem: any) => void;
export declare const getOnlyGL: (canvas: HTMLCanvasElement, options: ContextConfigOptionsData, WebGLDetectDataFromSystem: any) => CanvasRenderingContext2D | WebGLRenderingContext;
export declare const initData: (DeviceManagerDataFromSystem: any) => void;
