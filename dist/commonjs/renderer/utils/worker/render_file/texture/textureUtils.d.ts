import { ETextureWrapMode } from "../../../../enum/ETextureWrapMode";
import { ETextureFilterMode } from "../../../../enum/ETextureFilterMode";
import { ETextureFormat } from "../../../../enum/ETextureFormat";
import { ETextureType } from "../../../../enum/ETextureType";
import { UniformCacheMap, UniformLocationMap } from "../../../../type/dataType";
import { SendUniformDataGLSLSenderDataMap } from "../../../../type/utilsType";
export declare const getBufferDataSize: () => number;
export declare const createTypeArrays: (buffer: any, count: number, TextureDataFromSystem: any) => number;
export declare const getSource: (textureIndex: number, TextureDataFromSystem: any) => any;
export declare const getWidth: (textureIndex: number, TextureDataFromSystem: any) => any;
export declare const getHeight: (textureIndex: number, TextureDataFromSystem: any) => any;
export declare const getWrapS: (textureIndex: number, TextureData: any) => ETextureWrapMode;
export declare const getWrapT: (textureIndex: number, TextureData: any) => ETextureWrapMode;
export declare const getMagFilter: (textureIndex: number, TextureData: any) => ETextureFilterMode;
export declare const getMinFilter: (textureIndex: number, TextureData: any) => ETextureFilterMode;
export declare const getFormat: (textureIndex: number, TextureData: any) => ETextureFormat;
export declare const getType: (textureIndex: number, TextureData: any) => ETextureType;
export declare const getFlipY: (textureIndex: number, TextureData: any) => boolean;
export declare const getIsNeedUpdate: (textureIndex: number, TextureDataFromSystem: any) => number;
export declare const setIsNeedUpdate: (textureIndex: number, value: number, TextureDataFromSystem: any) => void;
export declare const initTextures: (gl: WebGLRenderingContext, TextureDataFromSystem: any) => void;
export declare const initTexture: (gl: WebGLRenderingContext, textureIndex: number, TextureDataFromSystem: any) => void;
export declare const getBufferCount: () => number;
export declare const needUpdate: (textureIndex: number, TextureDataFromSystem: any) => boolean;
export declare const markNeedUpdate: (textureIndex: any, value: boolean, TextureDataFromSystem: any) => void;
export declare const update: (gl: WebGLRenderingContext, textureIndex: number, setFlipY: Function, TextureDataFromSystem: any) => void;
export declare const bindToUnit: (gl: WebGLRenderingContext, unitIndex: number, textureIndex: number, TextureCacheDataFromSystem: any, TextureDataFromSystem: any, GPUDetectDataFromSystem: any, isCached: Function, addActiveTexture: Function) => void;
export declare const sendData: (gl: WebGLRenderingContext, mapCount: number, shaderIndex: number, textureIndex: number, unitIndex: number, program: WebGLProgram, glslSenderData: SendUniformDataGLSLSenderDataMap, uniformLocationMap: UniformLocationMap, uniformCacheMap: UniformCacheMap, directlySendUniformData: Function, TextureDataFromSystem: any) => void;
export declare const disposeSourceMap: (sourceIndex: number, lastComponentIndex: number, TextureDataFromSystem: any) => void;
export declare const disposeGLTexture: (gl: WebGLRenderingContext, sourceIndex: number, lastComponentIndex: number, TextureCacheDataFromSystem: any, TextureDataFromSystem: any, GPUDetectDataFromSystem: any) => void;
