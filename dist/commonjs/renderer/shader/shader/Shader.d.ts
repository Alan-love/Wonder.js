/// <reference types="wonder-commonlib" />
import { Hash } from "wonder-commonlib/dist/commonjs/Hash";
import { Program } from "../../program/Program";
import { Collection } from "wonder-commonlib/dist/commonjs/Collection";
import { ShaderLib } from "../lib/ShaderLib";
import { ShaderSourceBuilder } from "../sourceBuilder/ShaderSourceBuilder";
import { RenderCommand } from "../../command/RenderCommand";
import { Material } from "../../../material/Material";
import { EVariableType } from "../variable/EVariableType";
export declare abstract class Shader {
    private _attributes;
    attributes: Hash<ShaderData>;
    private _uniforms;
    uniforms: Hash<ShaderData>;
    private _vsSource;
    vsSource: string;
    private _fsSource;
    fsSource: string;
    readonly dirty: boolean;
    readonly program: Program;
    libDirty: boolean;
    definitionDataDirty: boolean;
    protected libs: Collection<ShaderLib>;
    protected sourceBuilder: ShaderSourceBuilder;
    private _programCache;
    abstract update(cmd: RenderCommand, material: Material): any;
    createVsShader(): any;
    createFsShader(): any;
    init(material: Material): void;
    dispose(): void;
    hasLib(lib: ShaderLib): any;
    hasLib(_class: Function): any;
    addLib(lib: ShaderLib): void;
    addShaderLibToTop(lib: ShaderLib): void;
    getLib(libClass: Function): ShaderLib;
    getLibs(): Collection<ShaderLib>;
    removeLib(lib: ShaderLib): any;
    removeLib(func: Function): any;
    removeAllLibs(): void;
    sortLib(func: (a: ShaderLib, b: ShaderLib) => any): void;
    protected abstract createShaderSourceBuilder(): ShaderSourceBuilder;
    protected abstract buildDefinitionData(cmd: RenderCommand, material: Material): void;
    protected judgeRefreshShader(cmd: RenderCommand, material: Material): void;
    private _registerAndUpdateProgram();
    private _updateProgram();
    private _getProgramTableKey();
    private _initShader(shader, source);
    private _isNotEqual(list1, list2);
    private _clearAllCache();
}
export declare type ShaderData = {
    type: EVariableType;
    value?: any;
    textureId?: string;
};
