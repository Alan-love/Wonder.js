/// <reference types="wonder-commonlib" />
import { ShaderLib } from "./ShaderLib";
import { EngineShader } from "../shader/EngineShader";
import { Hash } from "wonder-commonlib/dist/commonjs/Hash";
import { ShaderVariable } from "../variable/VariableLib";
import { Collection } from "wonder-commonlib/dist/commonjs/Collection";
import { RenderCommand } from "../../command/RenderCommand";
import { Material } from "../../../material/Material";
import { Program } from "../../program/Program";
import { GLSLChunk } from "../chunk/ShaderChunk";
export declare abstract class EngineShaderLib extends ShaderLib {
    shader: EngineShader;
    abstract vsChunk: GLSLChunk;
    abstract fsChunk: GLSLChunk;
    attributes: Hash<ShaderVariable>;
    uniforms: Hash<ShaderVariable>;
    vsSourceTop: string;
    vsSourceDefine: string;
    vsSourceVarDeclare: string;
    vsSourceFuncDeclare: string;
    vsSourceFuncDefine: string;
    vsSourceBody: string;
    vsSource: string;
    fsSourceTop: string;
    fsSourceDefine: string;
    fsSourceVarDeclare: string;
    fsSourceFuncDeclare: string;
    fsSourceFuncDefine: string;
    fsSourceBody: string;
    fsSource: string;
    vsSourceDefineList: Collection<any>;
    fsSourceDefineList: Collection<any>;
    vsSourceExtensionList: Collection<string>;
    fsSourceExtensionList: Collection<string>;
    setShaderDefinition(cmd: RenderCommand, material: Material): void;
    protected sendAttributeBuffer(program: Program, name: string, data: any): void;
    protected sendUniformData(program: Program, name: string, data: any): void;
    protected getVsChunk(): any;
    protected getVsChunk(chunk: GLSLChunk): any;
    protected getFsChunk(): any;
    protected getFsChunk(chunk: GLSLChunk): any;
    protected setVsSource(vs: GLSLChunk | string, operator?: string): void;
    protected setFsSource(fs: GLSLChunk | string, operator?: string): void;
    protected addAttributeVariable(variableArr: Array<string>): void;
    protected addUniformVariable(variableArr: Array<string>): void;
    private _addVariable(target, variableArr);
    private _clearShaderDefinition();
    private _getChunk(chunk, sourceType);
    private _setSource(chunk, sourceType, operator);
}
