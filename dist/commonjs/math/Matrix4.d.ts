import { Matrix3 } from "./Matrix3";
import { Vector3 } from "./Vector3";
import { Vector4 } from "./Vector4";
import { Quaternion } from "./Quaternion";
export declare class Matrix4 {
    static create(mat: Float32Array): Matrix4;
    static create(): Matrix4;
    constructor(mat: Float32Array);
    constructor();
    values: Float32Array;
    set(initialM11: number, initialM12: number, initialM13: number, initialM14: number, initialM21: number, initialM22: number, initialM23: number, initialM24: number, initialM31: number, initialM32: number, initialM33: number, initialM34: number, initialM41: number, initialM42: number, initialM43: number, initialM44: number): this;
    setIdentity(): Matrix4;
    invert(): Matrix4;
    invertTo3x3(): Matrix3;
    transpose(): Matrix4;
    setTranslate(x: any, y: any, z: any): Matrix4;
    translate(x: any, y: any, z: any, GlobalTempData: any): Matrix4;
    setRotate(angle: number, x: number, y: number, z: number): Matrix4;
    rotate(angle: any, vector3: Vector3, GlobalTempData: any): Matrix4;
    rotate(angle: any, x: any, y: any, z: any, GlobalTempData: any): Matrix4;
    setScale(x: any, y: any, z: any): Matrix4;
    scale(x: any, y: any, z: any, GlobalTempData: any): Matrix4;
    setOrtho(left: number, right: number, bottom: number, top: number, near: number, far: number): Matrix4;
    ortho(left: number, right: number, bottom: number, top: number, near: number, far: number, GlobalTempData: any): Matrix4;
    setPerspective(fovy: number, aspect: number, near: number, far: number): Matrix4;
    perspective(fovy: number, aspect: number, near: number, far: number, GlobalTempData: any): Matrix4;
    applyMatrix(other: Matrix4, GlobalTempData: any, notChangeSelf?: boolean): Matrix4;
    multiply(matrix: Matrix4): Matrix4;
    multiply(matrix1: Matrix4, matrix2: Matrix4): Matrix4;
    multiplyVector4(vector: Vector4, isChangeVector?: boolean): Vector4;
    multiplyVector3(vector: Vector3): Vector3;
    multiplyPoint(vector: Vector3): Vector3;
    clone(): Matrix4;
    cloneToArray(array: Float32Array, offset?: number): Matrix4;
    getX(): Vector3;
    getY(): Vector3;
    getZ(): Vector3;
    getTranslation(): Vector3;
    getScale(): Vector3;
    getRotation(): Quaternion;
    getEulerAngles(): any;
    setTRS(t: Vector3, r: Quaternion, s: Vector3): this;
}
