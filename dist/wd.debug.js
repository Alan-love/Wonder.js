var wd;
(function (wd) {
    wd.DebugConfig = {
        isTest: false,
        debugCollision: false,
        showDebugPanel: false
    };
})(wd || (wd = {}));
var wd;
(function (wd) {
    var DebugStatistics = (function () {
        function DebugStatistics() {
        }
        DebugStatistics.clear = function () {
            this.count.renderGameObjects = 0;
            this.count.drawCalls = 0;
        };
        DebugStatistics.init = function () {
            var self = this;
            this._startLoopSubscription = wd.EventManager.fromEvent(wd.EngineEvent.STARTLOOP)
                .subscribe(function () {
                if (wd.DebugConfig.showDebugPanel) {
                    console.log("totalGameObjects:" + self.count.totalGameObjects + ", renderGameObjects:" + self.count.renderGameObjects + ", drawCalls:" + self.count.drawCalls);
                    console.log("fps:" + self.during.fps);
                    self.clear();
                }
            });
        };
        DebugStatistics.dispose = function () {
            this._startLoopSubscription.dispose();
        };
        DebugStatistics.count = {
            get totalGameObjects() {
                var count = 0;
                wd.Director.getInstance().scene.getChildren().forEach(function (child) {
                    if (child.hasComponent(wd.Octree)) {
                        count += child.getComponent(wd.Octree).getChildren().getCount();
                        return;
                    }
                    count++;
                });
                return count;
            },
            renderGameObjects: 0,
            drawCalls: 0
        };
        DebugStatistics.during = {
            get fps() {
                return wd.Director.getInstance().fps;
            }
        };
        DebugStatistics._startLoopSubscription = null;
        return DebugStatistics;
    })();
    wd.DebugStatistics = DebugStatistics;
})(wd || (wd = {}));
var wdFrp;
(function (wdFrp) {
    wdFrp.fromCollection = function (collection, scheduler) {
        if (scheduler === void 0) { scheduler = wdFrp.Scheduler.create(); }
        var arr = collection.toArray();
        return arr.length === 0 ? wdFrp.empty() : wdFrp.fromArray(arr, scheduler);
    };
})(wdFrp || (wdFrp = {}));
var wd;
(function (wd) {
    function assert(cond, message) {
        if (message === void 0) { message = "contract error"; }
        wd.Log.error(!cond, message);
    }
    wd.assert = assert;
    function require(InFunc) {
        return function (target, name, descriptor) {
            var value = descriptor.value;
            descriptor.value = function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i - 0] = arguments[_i];
                }
                if (wd.Main.isTest) {
                    InFunc.apply(this, args);
                }
                return value.apply(this, args);
            };
            return descriptor;
        };
    }
    wd.require = require;
    function ensure(OutFunc) {
        return function (target, name, descriptor) {
            var value = descriptor.value;
            descriptor.value = function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i - 0] = arguments[_i];
                }
                var result = value.apply(this, args), params = [result].concat(args);
                if (wd.Main.isTest) {
                    OutFunc.apply(this, params);
                }
                return result;
            };
            return descriptor;
        };
    }
    wd.ensure = ensure;
    function requireGetter(InFunc) {
        return function (target, name, descriptor) {
            var getter = descriptor.get;
            descriptor.get = function () {
                if (wd.Main.isTest) {
                    InFunc.call(this);
                }
                return getter.call(this);
            };
            return descriptor;
        };
    }
    wd.requireGetter = requireGetter;
    function requireSetter(InFunc) {
        return function (target, name, descriptor) {
            var setter = descriptor.set;
            descriptor.set = function (val) {
                if (wd.Main.isTest) {
                    InFunc.call(this, val);
                }
                setter.call(this, val);
            };
            return descriptor;
        };
    }
    wd.requireSetter = requireSetter;
    function ensureGetter(OutFunc) {
        return function (target, name, descriptor) {
            var getter = descriptor.get;
            descriptor.get = function () {
                var result = getter.call(this);
                if (wd.Main.isTest) {
                    OutFunc.call(this, result);
                }
                return result;
            };
            return descriptor;
        };
    }
    wd.ensureGetter = ensureGetter;
    function ensureSetter(OutFunc) {
        return function (target, name, descriptor) {
            var setter = descriptor.set;
            descriptor.set = function (val) {
                var result = setter.call(this, val), params = [result, val];
                if (wd.Main.isTest) {
                    OutFunc.apply(this, params);
                }
            };
            return descriptor;
        };
    }
    wd.ensureSetter = ensureSetter;
    function invariant(func) {
        return function (target) {
            if (wd.Main.isTest) {
                func(target);
            }
        };
    }
    wd.invariant = invariant;
})(wd || (wd = {}));
var wd;
(function (wd) {
    function cacheGetter(judgeFunc, returnCacheValueFunc, setCacheFunc) {
        return function (target, name, descriptor) {
            var getter = descriptor.get;
            descriptor.get = function () {
                var result = null;
                if (judgeFunc.call(this)) {
                    return returnCacheValueFunc.call(this);
                }
                result = getter.call(this);
                setCacheFunc.call(this, result);
                return result;
            };
            return descriptor;
        };
    }
    wd.cacheGetter = cacheGetter;
    function cache(judgeFunc, returnCacheValueFunc, setCacheFunc) {
        return function (target, name, descriptor) {
            var value = descriptor.value;
            descriptor.value = function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i - 0] = arguments[_i];
                }
                var result = null;
                if (judgeFunc.apply(this, args)) {
                    return returnCacheValueFunc.apply(this, args);
                }
                result = value.apply(this, args);
                setCacheFunc.apply(this, [result].concat(args));
                return result;
            };
            return descriptor;
        };
    }
    wd.cache = cache;
})(wd || (wd = {}));
var wd;
(function (wd) {
    function virtual(target, name, descriptor) {
        return descriptor;
    }
    wd.virtual = virtual;
})(wd || (wd = {}));
var wd;
(function (wd) {
    function operateBodyDataGetterAndSetter(dataName) {
        return function (target, name, descriptor) {
            var getter = descriptor.get, setter = descriptor.set;
            descriptor.get = function () {
                if (this.isPhysicsEngineAdapterExist()) {
                    var data = this.getPhysicsEngineAdapter()[("get" + dataName)](this.entityObject);
                    return data !== null ? data : this[("_" + lowerFirstChar(dataName))];
                }
                return getter.call(this);
            };
            descriptor.set = function (val) {
                setter.call(this, val);
                if (this.isPhysicsEngineAdapterExist()) {
                    this.getPhysicsEngineAdapter()[("set" + dataName)](this.entityObject, val);
                }
            };
            return descriptor;
        };
    }
    wd.operateBodyDataGetterAndSetter = operateBodyDataGetterAndSetter;
    function operateWorldDataGetterAndSetter(dataName) {
        return function (target, name, descriptor) {
            var getter = descriptor.get, setter = descriptor.set;
            descriptor.get = function () {
                var scene = wd.Director.getInstance().scene;
                if (isWorldDefined(scene)) {
                    var data = scene.physicsEngineAdapter[("get" + dataName)]();
                    return data !== null ? data : this[("_" + lowerFirstChar(dataName))];
                }
                return getter.call(this);
            };
            descriptor.set = function (val) {
                var scene = wd.Director.getInstance().scene;
                setter.call(this, val);
                if (isWorldDefined(scene)) {
                    scene.physicsEngineAdapter[("set" + dataName)](val);
                }
            };
            return descriptor;
        };
    }
    wd.operateWorldDataGetterAndSetter = operateWorldDataGetterAndSetter;
    function isWorldDefined(scene) {
        return scene.physicsEngineAdapter && scene.physicsEngineAdapter.world;
    }
    function lowerFirstChar(str) {
        var firstChar = str.slice(0, 1);
        return "" + firstChar.toLowerCase() + str.slice(1);
    }
})(wd || (wd = {}));
var wd;
(function (wd) {
    function script(scriptName) {
        return function (target) {
            wd.Script.addScript(scriptName, target);
        };
    }
    wd.script = script;
})(wd || (wd = {}));
var wd;
(function (wd) {
    function execOnlyOnce(flagName) {
        return function (target, name, descriptor) {
            var value = descriptor.value;
            descriptor.value = function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i - 0] = arguments[_i];
                }
                var result = null;
                if (this[flagName]) {
                    return;
                }
                this[flagName] = true;
                return value.apply(this, args);
            };
            return descriptor;
        };
    }
    wd.execOnlyOnce = execOnlyOnce;
})(wd || (wd = {}));
var wd;
(function (wd) {
    wd.ABSTRACT_ATTRIBUTE = null;
})(wd || (wd = {}));
var wd;
(function (wd) {
})(wd || (wd = {}));
Object.defineProperty(wd, "root", {
    get: function () {
        if (wd.JudgeUtils.isNodeJs()) {
            return global;
        }
        return window;
    }
});
var wd;
(function (wd) {
    wd.DEG_TO_RAD = Math.PI / 180;
    wd.RAD_TO_DEG = 180 / Math.PI;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var Vector2 = (function () {
        function Vector2() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            this.values = new Float32Array(2);
            if (args.length > 0) {
                this.values[0] = args[0];
                this.values[1] = args[1];
            }
        }
        Vector2.create = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var m = null;
            if (args.length === 0) {
                m = new this();
            }
            else {
                m = new this(args[0], args[1]);
            }
            return m;
        };
        Object.defineProperty(Vector2.prototype, "x", {
            get: function () {
                return this.values[0];
            },
            set: function (x) {
                this.values[0] = x;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Vector2.prototype, "y", {
            get: function () {
                return this.values[1];
            },
            set: function (y) {
                this.values[1] = y;
            },
            enumerable: true,
            configurable: true
        });
        Vector2.prototype.set = function (x, y) {
            this.x = x;
            this.y = y;
        };
        Vector2.prototype.add = function (v) {
            this.values[0] = this.values[0] + v.values[0];
            this.values[1] = this.values[1] + v.values[1];
            return this;
        };
        Vector2.prototype.mul = function (v) {
            this.values[0] = this.values[0] * v.values[0];
            this.values[1] = this.values[1] * v.values[1];
            return this;
        };
        Vector2.prototype.copy = function () {
            return Vector2.create(this.x, this.y);
        };
        return Vector2;
    })();
    wd.Vector2 = Vector2;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var Vector3 = (function () {
        function Vector3() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            this.values = null;
            this.values = new Float32Array(3);
            if (args.length > 0) {
                this.values[0] = args[0];
                this.values[1] = args[1];
                this.values[2] = args[2];
            }
        }
        Vector3.create = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var m = null;
            if (args.length === 0) {
                m = new this();
            }
            else {
                m = new this(args[0], args[1], args[2]);
            }
            return m;
        };
        Object.defineProperty(Vector3.prototype, "x", {
            get: function () {
                return this.values[0];
            },
            set: function (x) {
                this.values[0] = x;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Vector3.prototype, "y", {
            get: function () {
                return this.values[1];
            },
            set: function (y) {
                this.values[1] = y;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Vector3.prototype, "z", {
            get: function () {
                return this.values[2];
            },
            set: function (z) {
                this.values[2] = z;
            },
            enumerable: true,
            configurable: true
        });
        Vector3.prototype.normalize = function () {
            var v = this.values;
            var d = Math.sqrt(v[0] * v[0] + v[1] * v[1] + v[2] * v[2]);
            if (d === 0) {
                v[0] = 0;
                v[1] = 0;
                v[2] = 0;
                return this;
            }
            v[0] = v[0] / d;
            v[1] = v[1] / d;
            v[2] = v[2] / d;
            if (v[0] === -0) {
                v[0] = 0;
            }
            if (v[1] === -0) {
                v[1] = 0;
            }
            if (v[2] === -0) {
                v[2] = 0;
            }
            return this;
        };
        Vector3.prototype.isZero = function () {
            var v = this.values;
            return v[0] === 0 && v[1] === 0 && v[2] === 0;
        };
        Vector3.prototype.scale = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var v = this.values;
            if (args.length === 1) {
                var scalar = args[0];
                v[0] *= scalar;
                v[1] *= scalar;
                v[2] *= scalar;
            }
            else if (args.length === 3) {
                var x = args[0], y = args[1], z = args[2];
                v[0] *= x;
                v[1] *= y;
                v[2] *= z;
            }
            return this;
        };
        Vector3.prototype.set = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            if (args.length === 3) {
                this.x = args[0];
                this.y = args[1];
                this.z = args[2];
            }
            else {
                var v = args[0];
                this.x = v.x;
                this.y = v.y;
                this.z = v.z;
            }
        };
        Vector3.prototype.sub = function (v) {
            this.values[0] = this.values[0] - v.values[0];
            this.values[1] = this.values[1] - v.values[1];
            this.values[2] = this.values[2] - v.values[2];
            return this;
        };
        Vector3.prototype.sub2 = function (v1, v2) {
            this.values[0] = v1.values[0] - v2.values[0];
            this.values[1] = v1.values[1] - v2.values[1];
            this.values[2] = v1.values[2] - v2.values[2];
            return this;
        };
        Vector3.prototype.add = function (v) {
            this.values[0] = this.values[0] + v.values[0];
            this.values[1] = this.values[1] + v.values[1];
            this.values[2] = this.values[2] + v.values[2];
            return this;
        };
        Vector3.prototype.add2 = function (v1, v2) {
            this.values[0] = v1.values[0] + v2.values[0];
            this.values[1] = v1.values[1] + v2.values[1];
            this.values[2] = v1.values[2] + v2.values[2];
            return this;
        };
        Vector3.prototype.mul = function (v) {
            this.values[0] = this.values[0] * v.values[0];
            this.values[1] = this.values[1] * v.values[1];
            this.values[2] = this.values[2] * v.values[2];
            return this;
        };
        Vector3.prototype.mul2 = function (v1, v2) {
            this.values[0] = v1.values[0] * v2.values[0];
            this.values[1] = v1.values[1] * v2.values[1];
            this.values[2] = v1.values[2] * v2.values[2];
            return this;
        };
        Vector3.prototype.reverse = function () {
            this.values[0] = -this.values[0];
            this.values[1] = -this.values[1];
            this.values[2] = -this.values[2];
            return this;
        };
        Vector3.prototype.copy = function () {
            var result = Vector3.create(), i = 0, len = this.values.length;
            for (i = 0; i < len; i++) {
                result.values[i] = this.values[i];
            }
            return result;
        };
        Vector3.prototype.toVector4 = function () {
            return wd.Vector4.create(this.values[0], this.values[1], this.values[2], 1.0);
        };
        Vector3.prototype.length = function () {
            var v = this.values;
            return Math.sqrt(v[0] * v[0] + v[1] * v[1] + v[2] * v[2]);
        };
        Vector3.prototype.cross = function (lhs, rhs) {
            var a, b, r, ax, ay, az, bx, by, bz;
            a = lhs.values;
            b = rhs.values;
            r = this.values;
            ax = a[0];
            ay = a[1];
            az = a[2];
            bx = b[0];
            by = b[1];
            bz = b[2];
            r[0] = ay * bz - by * az;
            r[1] = az * bx - bz * ax;
            r[2] = ax * by - bx * ay;
            return this;
        };
        Vector3.prototype.lerp = function (lhs, rhs, alpha) {
            var a = lhs.values, b = rhs.values, r = this.values;
            r[0] = a[0] + alpha * (b[0] - a[0]);
            r[1] = a[1] + alpha * (b[1] - a[1]);
            r[2] = a[2] + alpha * (b[2] - a[2]);
            return this;
        };
        Vector3.prototype.dot = function (rhs) {
            var a = this.values, b = rhs.values;
            return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
        };
        Vector3.prototype.min = function (v) {
            if (this.x > v.x) {
                this.x = v.x;
            }
            if (this.y > v.y) {
                this.y = v.y;
            }
            if (this.z > v.z) {
                this.z = v.z;
            }
            return this;
        };
        Vector3.prototype.max = function (v) {
            if (this.x < v.x) {
                this.x = v.x;
            }
            if (this.y < v.y) {
                this.y = v.y;
            }
            if (this.z < v.z) {
                this.z = v.z;
            }
            return this;
        };
        Vector3.prototype.isEqual = function (v) {
            return this.x === v.x && this.y === v.y && this.z === v.z;
        };
        Vector3.prototype.toArray = function () {
            return [this.x, this.y, this.z];
        };
        Vector3.prototype.applyMatrix4 = function (m) {
            var x = this.x, y = this.y, z = this.z, e = m.values;
            this.x = e[0] * x + e[4] * y + e[8] * z + e[12];
            this.y = e[1] * x + e[5] * y + e[9] * z + e[13];
            this.z = e[2] * x + e[6] * y + e[10] * z + e[14];
            return this;
        };
        Vector3.prototype.distanceTo = function (v) {
            return Math.sqrt(this.distanceToSquared(v));
        };
        Vector3.prototype.distanceToSquared = function (v) {
            var dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;
            return Math.pow(dx, 2) + Math.pow(dy, 2) + Math.pow(dz, 2);
        };
        Vector3.up = Vector3.create(0, 1, 0);
        Vector3.forward = Vector3.create(0, 0, 1);
        Vector3.right = Vector3.create(1, 0, 0);
        return Vector3;
    })();
    wd.Vector3 = Vector3;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var Vector4 = (function () {
        function Vector4() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            this.values = new Float32Array(4);
            if (args.length > 0) {
                this.values[0] = args[0];
                this.values[1] = args[1];
                this.values[2] = args[2];
                this.values[3] = args[3];
            }
        }
        Vector4.create = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var m = null;
            if (args.length === 0) {
                m = new this();
            }
            else {
                m = new this(args[0], args[1], args[2], args[3]);
            }
            return m;
        };
        Object.defineProperty(Vector4.prototype, "x", {
            get: function () {
                return this.values[0];
            },
            set: function (x) {
                this.values[0] = x;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Vector4.prototype, "y", {
            get: function () {
                return this.values[1];
            },
            set: function (y) {
                this.values[1] = y;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Vector4.prototype, "z", {
            get: function () {
                return this.values[2];
            },
            set: function (z) {
                this.values[2] = z;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Vector4.prototype, "w", {
            get: function () {
                return this.values[3];
            },
            set: function (w) {
                this.values[3] = w;
            },
            enumerable: true,
            configurable: true
        });
        Vector4.prototype.normalize = function () {
            var v = this.values;
            var d = Math.sqrt(v[0] * v[0] + v[1] * v[1] + v[2] * v[2] + v[3] * v[3]);
            if (d === 0) {
                return Vector4.create(0, 0, 0, 0);
            }
            v[0] = v[0] / d;
            v[1] = v[1] / d;
            v[2] = v[2] / d;
            v[3] = v[3] / d;
            return this;
        };
        Vector4.prototype.copy = function () {
            return this.copyHelper(Vector4.create());
        };
        Vector4.prototype.toVector3 = function () {
            return wd.Vector3.create(this.values[0], this.values[1], this.values[2]);
        };
        Vector4.prototype.multiplyScalar = function (scalar) {
            this.x *= scalar;
            this.y *= scalar;
            this.z *= scalar;
            this.w *= scalar;
            return this;
        };
        Vector4.prototype.dot = function (v) {
            return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;
        };
        Vector4.prototype.set = function (x, y, z, w) {
            this.x = x;
            this.y = y;
            this.z = z;
            this.w = w;
        };
        Vector4.prototype.copyHelper = function (vector4) {
            var result = vector4, i = 0, len = this.values.length;
            for (i = 0; i < len; i++) {
                result.values[i] = this.values[i];
            }
            return result;
        };
        return Vector4;
    })();
    wd.Vector4 = Vector4;
})(wd || (wd = {}));
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var wd;
(function (wd) {
    var Matrix4 = (function () {
        function Matrix4() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            this.values = null;
            this._matrixArr = null;
            if (args.length === 1) {
                this.values = args[0];
            }
            else {
                this.values = new Float32Array([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]);
            }
            this._matrixArr = [];
        }
        Matrix4.create = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var m = null;
            if (args.length === 0) {
                m = new this();
            }
            else {
                m = new this(args[0]);
            }
            return m;
        };
        Matrix4.prototype.push = function () {
            this._matrixArr.push(this.values);
        };
        Matrix4.prototype.pop = function () {
            this.values = this._matrixArr.pop();
        };
        Matrix4.prototype.setIdentity = function () {
            var e = this.values;
            e[0] = 1;
            e[4] = 0;
            e[8] = 0;
            e[12] = 0;
            e[1] = 0;
            e[5] = 1;
            e[9] = 0;
            e[13] = 0;
            e[2] = 0;
            e[6] = 0;
            e[10] = 1;
            e[14] = 0;
            e[3] = 0;
            e[7] = 0;
            e[11] = 0;
            e[15] = 1;
            return this;
        };
        Matrix4.prototype.invert = function () {
            var a00, a01, a02, a03, a10, a11, a12, a13, a20, a21, a22, a23, a30, a31, a32, a33, b00, b01, b02, b03, b04, b05, b06, b07, b08, b09, b10, b11, invDet, m;
            m = this.values;
            a00 = m[0];
            a01 = m[1];
            a02 = m[2];
            a03 = m[3];
            a10 = m[4];
            a11 = m[5];
            a12 = m[6];
            a13 = m[7];
            a20 = m[8];
            a21 = m[9];
            a22 = m[10];
            a23 = m[11];
            a30 = m[12];
            a31 = m[13];
            a32 = m[14];
            a33 = m[15];
            b00 = a00 * a11 - a01 * a10;
            b01 = a00 * a12 - a02 * a10;
            b02 = a00 * a13 - a03 * a10;
            b03 = a01 * a12 - a02 * a11;
            b04 = a01 * a13 - a03 * a11;
            b05 = a02 * a13 - a03 * a12;
            b06 = a20 * a31 - a21 * a30;
            b07 = a20 * a32 - a22 * a30;
            b08 = a20 * a33 - a23 * a30;
            b09 = a21 * a32 - a22 * a31;
            b10 = a21 * a33 - a23 * a31;
            b11 = a22 * a33 - a23 * a32;
            invDet = 1 / (b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06);
            m[0] = (a11 * b11 - a12 * b10 + a13 * b09) * invDet;
            m[1] = (-a01 * b11 + a02 * b10 - a03 * b09) * invDet;
            m[2] = (a31 * b05 - a32 * b04 + a33 * b03) * invDet;
            m[3] = (-a21 * b05 + a22 * b04 - a23 * b03) * invDet;
            m[4] = (-a10 * b11 + a12 * b08 - a13 * b07) * invDet;
            m[5] = (a00 * b11 - a02 * b08 + a03 * b07) * invDet;
            m[6] = (-a30 * b05 + a32 * b02 - a33 * b01) * invDet;
            m[7] = (a20 * b05 - a22 * b02 + a23 * b01) * invDet;
            m[8] = (a10 * b10 - a11 * b08 + a13 * b06) * invDet;
            m[9] = (-a00 * b10 + a01 * b08 - a03 * b06) * invDet;
            m[10] = (a30 * b04 - a31 * b02 + a33 * b00) * invDet;
            m[11] = (-a20 * b04 + a21 * b02 - a23 * b00) * invDet;
            m[12] = (-a10 * b09 + a11 * b07 - a12 * b06) * invDet;
            m[13] = (a00 * b09 - a01 * b07 + a02 * b06) * invDet;
            m[14] = (-a30 * b03 + a31 * b01 - a32 * b00) * invDet;
            m[15] = (a20 * b03 - a21 * b01 + a22 * b00) * invDet;
            return this;
        };
        Matrix4.prototype.invertTo3x3 = function () {
            var a11, a21, a31, a12, a22, a32, a13, a23, a33, m, r, det, idet;
            var mat3 = wd.Matrix3.create();
            m = this.values;
            r = mat3.values;
            a11 = m[10] * m[5] - m[6] * m[9];
            a21 = -m[10] * m[1] + m[2] * m[9];
            a31 = m[6] * m[1] - m[2] * m[5];
            a12 = -m[10] * m[4] + m[6] * m[8];
            a22 = m[10] * m[0] - m[2] * m[8];
            a32 = -m[6] * m[0] + m[2] * m[4];
            a13 = m[9] * m[4] - m[5] * m[8];
            a23 = -m[9] * m[0] + m[1] * m[8];
            a33 = m[5] * m[0] - m[1] * m[4];
            det = m[0] * a11 + m[1] * a12 + m[2] * a13;
            if (det === 0) {
                wd.Log.warn("can't invert matrix, determinant is 0");
                return mat3;
            }
            idet = 1 / det;
            r[0] = idet * a11;
            r[1] = idet * a21;
            r[2] = idet * a31;
            r[3] = idet * a12;
            r[4] = idet * a22;
            r[5] = idet * a32;
            r[6] = idet * a13;
            r[7] = idet * a23;
            r[8] = idet * a33;
            return mat3;
        };
        Matrix4.prototype.transpose = function () {
            var te = this.values;
            var tmp;
            tmp = te[1];
            te[1] = te[4];
            te[4] = tmp;
            tmp = te[2];
            te[2] = te[8];
            te[8] = tmp;
            tmp = te[6];
            te[6] = te[9];
            te[9] = tmp;
            tmp = te[3];
            te[3] = te[12];
            te[12] = tmp;
            tmp = te[7];
            te[7] = te[13];
            te[13] = tmp;
            tmp = te[11];
            te[11] = te[14];
            te[14] = tmp;
            return this;
        };
        Matrix4.prototype.setTranslate = function (x, y, z) {
            var e = this.values;
            e[0] = 1;
            e[4] = 0;
            e[8] = 0;
            e[12] = x;
            e[1] = 0;
            e[5] = 1;
            e[9] = 0;
            e[13] = y;
            e[2] = 0;
            e[6] = 0;
            e[10] = 1;
            e[14] = z;
            e[3] = 0;
            e[7] = 0;
            e[11] = 0;
            e[15] = 1;
            return this;
        };
        Matrix4.prototype.translate = function (x, y, z) {
            this.applyMatrix(Matrix4.create().setTranslate(x, y, z));
            return this;
        };
        Matrix4.prototype.setRotate = function (angle, x, y, z) {
            var e, s, c, len, rlen, nc, xy, yz, zx, xs, ys, zs;
            var angle = Math.PI * angle / 180;
            e = this.values;
            s = Math.sin(angle);
            c = Math.cos(angle);
            if (0 !== x && 0 === y && 0 === z) {
                if (x < 0) {
                    s = -s;
                }
                e[0] = 1;
                e[4] = 0;
                e[8] = 0;
                e[12] = 0;
                e[1] = 0;
                e[5] = c;
                e[9] = -s;
                e[13] = 0;
                e[2] = 0;
                e[6] = s;
                e[10] = c;
                e[14] = 0;
                e[3] = 0;
                e[7] = 0;
                e[11] = 0;
                e[15] = 1;
            }
            else if (0 === x && 0 !== y && 0 === z) {
                if (y < 0) {
                    s = -s;
                }
                e[0] = c;
                e[4] = 0;
                e[8] = s;
                e[12] = 0;
                e[1] = 0;
                e[5] = 1;
                e[9] = 0;
                e[13] = 0;
                e[2] = -s;
                e[6] = 0;
                e[10] = c;
                e[14] = 0;
                e[3] = 0;
                e[7] = 0;
                e[11] = 0;
                e[15] = 1;
            }
            else if (0 === x && 0 === y && 0 !== z) {
                if (z < 0) {
                    s = -s;
                }
                e[0] = c;
                e[4] = -s;
                e[8] = 0;
                e[12] = 0;
                e[1] = s;
                e[5] = c;
                e[9] = 0;
                e[13] = 0;
                e[2] = 0;
                e[6] = 0;
                e[10] = 1;
                e[14] = 0;
                e[3] = 0;
                e[7] = 0;
                e[11] = 0;
                e[15] = 1;
            }
            else {
                len = Math.sqrt(x * x + y * y + z * z);
                if (len !== 1) {
                    rlen = 1 / len;
                    x *= rlen;
                    y *= rlen;
                    z *= rlen;
                }
                nc = 1 - c;
                xy = x * y;
                yz = y * z;
                zx = z * x;
                xs = x * s;
                ys = y * s;
                zs = z * s;
                e[0] = x * x * nc + c;
                e[1] = xy * nc + zs;
                e[2] = zx * nc - ys;
                e[3] = 0;
                e[4] = xy * nc - zs;
                e[5] = y * y * nc + c;
                e[6] = yz * nc + xs;
                e[7] = 0;
                e[8] = zx * nc + ys;
                e[9] = yz * nc - xs;
                e[10] = z * z * nc + c;
                e[11] = 0;
                e[12] = 0;
                e[13] = 0;
                e[14] = 0;
                e[15] = 1;
            }
            return this;
        };
        Matrix4.prototype.rotate = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var angle = args[0];
            if (args.length === 2) {
                var vector3 = args[1];
                this.applyMatrix(Matrix4.create().setRotate(angle, vector3.values[0], vector3.values[1], vector3.values[2]));
            }
            else if (args.length === 4) {
                var x = args[1], y = args[2], z = args[3];
                this.applyMatrix(Matrix4.create().setRotate(angle, x, y, z));
            }
            return this;
        };
        Matrix4.prototype.setScale = function (x, y, z) {
            var e = this.values;
            e[0] = x;
            e[4] = 0;
            e[8] = 0;
            e[12] = 0;
            e[1] = 0;
            e[5] = y;
            e[9] = 0;
            e[13] = 0;
            e[2] = 0;
            e[6] = 0;
            e[10] = z;
            e[14] = 0;
            e[3] = 0;
            e[7] = 0;
            e[11] = 0;
            e[15] = 1;
            return this;
        };
        Matrix4.prototype.scale = function (x, y, z) {
            this.applyMatrix(Matrix4.create().setScale(x, y, z));
            return this;
        };
        Matrix4.prototype.setLookAt = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var x, y, z, eye, center, up;
            if (args.length === 3) {
                eye = args[0];
                center = args[1];
                up = args[2];
            }
            else if (args.length === 9) {
                eye = wd.Vector3.create(args[0], args[1], args[2]);
                center = wd.Vector3.create(args[3], args[4], args[5]);
                up = wd.Vector3.create(args[6], args[7], args[8]);
            }
            x = wd.Vector3.create();
            z = eye.copy().sub(center).normalize();
            y = up.copy().normalize();
            x.cross(y, z).normalize();
            y.cross(z, x);
            var r = this.values;
            r[0] = x.x;
            r[1] = x.y;
            r[2] = x.z;
            r[3] = 0;
            r[4] = y.x;
            r[5] = y.y;
            r[6] = y.z;
            r[7] = 0;
            r[8] = z.x;
            r[9] = z.y;
            r[10] = z.z;
            r[11] = 0;
            r[12] = eye.x;
            r[13] = eye.y;
            r[14] = eye.z;
            r[15] = 1;
            return this;
        };
        Matrix4.prototype.lookAt = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var matrix = Matrix4.create();
            this.applyMatrix(matrix.setLookAt.apply(matrix, args));
            return this;
        };
        Matrix4.prototype.setOrtho = function (left, right, bottom, top, near, far) {
            var e = this.values, rw, rh, rd;
            rw = 1 / (right - left);
            rh = 1 / (top - bottom);
            rd = 1 / (far - near);
            e[0] = 2 * rw;
            e[1] = 0;
            e[2] = 0;
            e[3] = 0;
            e[4] = 0;
            e[5] = 2 * rh;
            e[6] = 0;
            e[7] = 0;
            e[8] = 0;
            e[9] = 0;
            e[10] = -2 * rd;
            e[11] = 0;
            e[12] = -(right + left) * rw;
            e[13] = -(top + bottom) * rh;
            e[14] = -(far + near) * rd;
            e[15] = 1;
            return this;
        };
        Matrix4.prototype.ortho = function (left, right, bottom, top, near, far) {
            this.applyMatrix(Matrix4.create().setOrtho(left, right, bottom, top, near, far));
            return this;
        };
        Matrix4.prototype.setPerspective = function (fovy, aspect, near, far) {
            var e = null, rd = null, s = null, ct = null, fovy = Math.PI * fovy / 180 / 2;
            s = Math.sin(fovy);
            wd.Log.error(s === 0, wd.Log.info.FUNC_MUST_NOT_BE("frustum", "null"));
            rd = 1 / (far - near);
            ct = Math.cos(fovy) / s;
            e = this.values;
            e[0] = ct / aspect;
            e[1] = 0;
            e[2] = 0;
            e[3] = 0;
            e[4] = 0;
            e[5] = ct;
            e[6] = 0;
            e[7] = 0;
            e[8] = 0;
            e[9] = 0;
            e[10] = -(far + near) * rd;
            e[11] = -1;
            e[12] = 0;
            e[13] = 0;
            e[14] = -2 * near * far * rd;
            e[15] = 0;
            return this;
        };
        Matrix4.prototype.perspective = function (fovy, aspect, near, far) {
            this.applyMatrix(Matrix4.create().setPerspective(fovy, aspect, near, far));
            return this;
        };
        Matrix4.prototype.applyMatrix = function (other) {
            var a = this, b = other.copy();
            this.values = b.multiply(a).values;
            return this;
        };
        Matrix4.prototype.multiply = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var mat1 = null, mat2 = null, result = null;
            result = this.values;
            if (args.length === 1) {
                mat1 = this.values;
                mat2 = args[0].values;
            }
            else if (args.length === 2) {
                mat1 = args[0].values;
                mat2 = args[1].values;
            }
            var a = mat1[0], b = mat1[1], c = mat1[2], d = mat1[3], e = mat1[4], f = mat1[5], g = mat1[6], h = mat1[7], i = mat1[8], j = mat1[9], k = mat1[10], l = mat1[11], m = mat1[12], n = mat1[13], o = mat1[14], p = mat1[15], A = mat2[0], B = mat2[1], C = mat2[2], D = mat2[3], E = mat2[4], F = mat2[5], G = mat2[6], H = mat2[7], I = mat2[8], J = mat2[9], K = mat2[10], L = mat2[11], M = mat2[12], N = mat2[13], O = mat2[14], P = mat2[15];
            result[0] = A * a + B * e + C * i + D * m;
            result[1] = A * b + B * f + C * j + D * n;
            result[2] = A * c + B * g + C * k + D * o;
            result[3] = A * d + B * h + C * l + D * p;
            result[4] = E * a + F * e + G * i + H * m;
            result[5] = E * b + F * f + G * j + H * n;
            result[6] = E * c + F * g + G * k + H * o;
            result[7] = E * d + F * h + G * l + H * p;
            result[8] = I * a + J * e + K * i + L * m;
            result[9] = I * b + J * f + K * j + L * n;
            result[10] = I * c + J * g + K * k + L * o;
            result[11] = I * d + J * h + K * l + L * p;
            result[12] = M * a + N * e + O * i + P * m;
            result[13] = M * b + N * f + O * j + P * n;
            result[14] = M * c + N * g + O * k + P * o;
            result[15] = M * d + N * h + O * l + P * p;
            return this;
        };
        Matrix4.prototype.multiplyVector4 = function (vector) {
            var mat1 = this.values, vec4 = vector.values;
            var result = [];
            result[0] = vec4[0] * mat1[0] + vec4[1] * mat1[4] + vec4[2] * mat1[8] + vec4[3] * mat1[12];
            result[1] = vec4[0] * mat1[1] + vec4[1] * mat1[5] + vec4[2] * mat1[9] + vec4[3] * mat1[13];
            result[2] = vec4[0] * mat1[2] + vec4[1] * mat1[6] + vec4[2] * mat1[10] + vec4[3] * mat1[14];
            result[3] = vec4[0] * mat1[3] + vec4[1] * mat1[7] + vec4[2] * mat1[11] + vec4[3] * mat1[15];
            return wd.Vector4.create(result[0], result[1], result[2], result[3]);
        };
        Matrix4.prototype.multiplyVector3 = function (vector) {
            var mat1 = this.values, vec3 = vector.values;
            var result = [];
            result[0] = vec3[0] * mat1[0] + vec3[1] * mat1[4] + vec3[2] * mat1[8];
            result[1] = vec3[0] * mat1[1] + vec3[1] * mat1[5] + vec3[2] * mat1[9];
            result[2] = vec3[0] * mat1[2] + vec3[1] * mat1[6] + vec3[2] * mat1[10];
            return wd.Vector3.create(result[0], result[1], result[2]);
        };
        Matrix4.prototype.multiplyPoint = function (vector) {
            var mat1 = this.values, vec3 = vector.values;
            var result = [];
            result[0] = vec3[0] * mat1[0] + vec3[1] * mat1[4] + vec3[2] * mat1[8] + mat1[12];
            result[1] = vec3[0] * mat1[1] + vec3[1] * mat1[5] + vec3[2] * mat1[9] + mat1[13];
            result[2] = vec3[0] * mat1[2] + vec3[1] * mat1[6] + vec3[2] * mat1[10] + mat1[14];
            return wd.Vector3.create(result[0], result[1], result[2]);
        };
        Matrix4.prototype.copy = function () {
            var result = Matrix4.create(), i = 0, len = this.values.length;
            for (i = 0; i < len; i++) {
                result.values[i] = this.values[i];
            }
            return result;
        };
        Matrix4.prototype.getX = function () {
            return wd.Vector3.create(this.values[0], this.values[1], this.values[2]);
        };
        Matrix4.prototype.getY = function () {
            return wd.Vector3.create(this.values[4], this.values[5], this.values[6]);
        };
        Matrix4.prototype.getZ = function () {
            return wd.Vector3.create(this.values[8], this.values[9], this.values[10]);
        };
        Matrix4.prototype.getTranslation = function () {
            return wd.Vector3.create(this.values[12], this.values[13], this.values[14]);
        };
        Matrix4.prototype.getScale = function () {
            return wd.Vector3.create(this.getX().length(), this.getY().length(), this.getZ().length());
        };
        Matrix4.prototype.getEulerAngles = function () {
            var x, y, z, sx, sy, sz, m, halfPi;
            var scale = this.getScale();
            sx = scale.x;
            sy = scale.y;
            sz = scale.z;
            m = this.values;
            y = Math.asin(-m[2] / sx);
            halfPi = Math.PI * 0.5;
            if (y < halfPi) {
                if (y > -halfPi) {
                    x = Math.atan2(m[6] / sy, m[10] / sz);
                    z = Math.atan2(m[1] / sx, m[0] / sx);
                }
                else {
                    z = 0;
                    x = -Math.atan2(m[4] / sy, m[5] / sy);
                }
            }
            else {
                z = 0;
                x = Math.atan2(m[4] / sy, m[5] / sy);
            }
            return wd.Vector3.create(x, y, z).scale(wd.RAD_TO_DEG);
        };
        Matrix4.prototype.setTRS = function (t, r, s) {
            var tx, ty, tz, qx, qy, qz, qw, sx, sy, sz, x2, y2, z2, xx, xy, xz, yy, yz, zz, wx, wy, wz, m;
            tx = t.x;
            ty = t.y;
            tz = t.z;
            qx = r.x;
            qy = r.y;
            qz = r.z;
            qw = r.w;
            sx = s.x;
            sy = s.y;
            sz = s.z;
            x2 = qx + qx;
            y2 = qy + qy;
            z2 = qz + qz;
            xx = qx * x2;
            xy = qx * y2;
            xz = qx * z2;
            yy = qy * y2;
            yz = qy * z2;
            zz = qz * z2;
            wx = qw * x2;
            wy = qw * y2;
            wz = qw * z2;
            m = this.values;
            m[0] = (1 - (yy + zz)) * sx;
            m[1] = (xy + wz) * sx;
            m[2] = (xz - wy) * sx;
            m[3] = 0;
            m[4] = (xy - wz) * sy;
            m[5] = (1 - (xx + zz)) * sy;
            m[6] = (yz + wx) * sy;
            m[7] = 0;
            m[8] = (xz + wy) * sz;
            m[9] = (yz - wx) * sz;
            m[10] = (1 - (xx + yy)) * sz;
            m[11] = 0;
            m[12] = tx;
            m[13] = ty;
            m[14] = tz;
            m[15] = 1;
            return this;
        };
        __decorate([
            wd.require(function (left, right, bottom, top, near, far) {
                wd.assert(left !== right && bottom !== top && near !== far, wd.Log.info.FUNC_MUST_NOT_BE("frustum", "null"));
            })
        ], Matrix4.prototype, "setOrtho", null);
        __decorate([
            wd.require(function (fovy, aspect, near, far) {
                wd.assert(near !== far && aspect !== 0, wd.Log.info.FUNC_MUST_NOT_BE("frustum", "null"));
                wd.assert(near > 0, wd.Log.info.FUNC_MUST("near", "> 0"));
                wd.assert(far > 0, wd.Log.info.FUNC_MUST("far", "> 0"));
            })
        ], Matrix4.prototype, "setPerspective", null);
        return Matrix4;
    })();
    wd.Matrix4 = Matrix4;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var Matrix3 = (function () {
        function Matrix3() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            this.values = null;
            if (args.length === 1) {
                this.values = args[0];
            }
            else {
                this.values = new Float32Array([1, 0, 0, 0, 1, 0, 0, 0, 1]);
            }
        }
        Matrix3.create = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var m = null;
            if (args.length === 0) {
                m = new this();
            }
            else {
                m = new this(args[0]);
            }
            return m;
        };
        Object.defineProperty(Matrix3.prototype, "a", {
            get: function () {
                return this.values[0];
            },
            set: function (a) {
                this.values[0] = a;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Matrix3.prototype, "c", {
            get: function () {
                return this.values[1];
            },
            set: function (c) {
                this.values[1] = c;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Matrix3.prototype, "b", {
            get: function () {
                return this.values[3];
            },
            set: function (b) {
                this.values[3] = b;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Matrix3.prototype, "d", {
            get: function () {
                return this.values[4];
            },
            set: function (d) {
                this.values[4] = d;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Matrix3.prototype, "tx", {
            get: function () {
                return this.values[6];
            },
            set: function (tx) {
                this.values[6] = tx;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Matrix3.prototype, "ty", {
            get: function () {
                return this.values[7];
            },
            set: function (ty) {
                this.values[7] = ty;
            },
            enumerable: true,
            configurable: true
        });
        Matrix3.prototype.setIdentity = function () {
            var e = this.values;
            e[0] = 1;
            e[3] = 0;
            e[6] = 0;
            e[1] = 0;
            e[4] = 1;
            e[7] = 0;
            e[2] = 0;
            e[5] = 0;
            e[8] = 1;
            return this;
        };
        Matrix3.prototype.invert = function () {
            var a1 = this.values[0];
            var b1 = this.values[1];
            var c1 = this.values[3];
            var d1 = this.values[4];
            var tx1 = this.values[6];
            var ty1 = this.values[7];
            var n = a1 * d1 - b1 * c1;
            this.values[0] = d1 / n;
            this.values[1] = -b1 / n;
            this.values[3] = -c1 / n;
            this.values[4] = a1 / n;
            this.values[6] = (c1 * ty1 - d1 * tx1) / n;
            this.values[7] = -(a1 * ty1 - b1 * tx1) / n;
            return this;
        };
        Matrix3.prototype.multiplyScalar = function (s) {
            var te = this.values;
            te[0] *= s;
            te[3] *= s;
            te[6] *= s;
            te[1] *= s;
            te[4] *= s;
            te[7] *= s;
            te[2] *= s;
            te[5] *= s;
            te[8] *= s;
            return this;
        };
        Matrix3.prototype.multiplyVector2 = function (vector) {
            var x = vector.x, y = vector.y, result = wd.Vector2.create(), e = this.values;
            result.x = e[0] * x + e[3] * y;
            result.y = e[1] * x + e[4] * y;
            return result;
        };
        Matrix3.prototype.multiplyPoint = function (vector) {
            var x = vector.x, y = vector.y, result = wd.Vector2.create(), e = this.values;
            result.x = e[0] * x + e[3] * y + this.tx;
            result.y = e[1] * x + e[4] * y + this.ty;
            return result;
        };
        Matrix3.prototype.multiply = function (matrix) {
            var m11 = this.a * matrix.a + this.c * matrix.b;
            var m12 = this.b * matrix.a + this.d * matrix.b;
            var m21 = this.a * matrix.c + this.c * matrix.d;
            var m22 = this.b * matrix.c + this.d * matrix.d;
            var dx = this.a * matrix.tx + this.c * matrix.ty + this.tx;
            var dy = this.b * matrix.tx + this.d * matrix.ty + this.ty;
            this.a = m11;
            this.b = m12;
            this.c = m21;
            this.d = m22;
            this.tx = dx;
            this.ty = dy;
            return this;
        };
        Matrix3.prototype.transpose = function () {
            var tmp, m = this.values;
            tmp = m[1];
            m[1] = m[3];
            m[3] = tmp;
            tmp = m[2];
            m[2] = m[6];
            m[6] = tmp;
            tmp = m[5];
            m[5] = m[7];
            m[7] = tmp;
            return this;
        };
        Matrix3.prototype.copy = function () {
            return Matrix3.create().set(this);
        };
        Matrix3.prototype.set = function (matrix) {
            var te = this.values, values = matrix.values;
            te[0] = values[0];
            te[3] = values[3];
            te[6] = values[6];
            te[1] = values[1];
            te[4] = values[4];
            te[7] = values[7];
            te[2] = values[2];
            te[5] = values[5];
            te[8] = values[8];
            return this;
        };
        Matrix3.prototype.setTS = function (t, s) {
            this.setPosition(t.x, t.y);
            this.setScale(s.x, s.y);
        };
        Matrix3.prototype.rotate = function (angle) {
            var rad = angle * wd.DEG_TO_RAD;
            var c = Math.cos(rad);
            var s = Math.sin(rad);
            var m11 = this.a * c + this.c * s;
            var m12 = this.b * c + this.d * s;
            var m21 = this.a * -s + this.c * c;
            var m22 = this.b * -s + this.d * c;
            this.a = m11;
            this.b = m12;
            this.c = m21;
            this.d = m22;
            return this;
        };
        Matrix3.prototype.setRotation = function (angle) {
            var rad = angle * wd.DEG_TO_RAD;
            var cos_a = Math.cos(rad);
            var sin_a = Math.sin(rad);
            var values = this.values;
            values[0] = cos_a;
            values[1] = -sin_a;
            values[3] = sin_a;
            values[4] = cos_a;
            return this;
        };
        Matrix3.prototype.translate = function (x, y) {
            this.tx += this.a * x + this.c * y;
            this.ty += this.b * x + this.d * y;
        };
        Matrix3.prototype.setPosition = function (x, y) {
            this.tx = x;
            this.ty = y;
        };
        Matrix3.prototype.scale = function (x, y) {
            this.a *= x;
            this.b *= x;
            this.c *= y;
            this.d *= y;
            return this;
        };
        Matrix3.prototype.setScale = function (x, y) {
            var values = this.values;
            values[0] = x;
            values[4] = y;
            return this;
        };
        Matrix3.prototype.getTranslation = function () {
            return wd.Vector2.create(this.tx, this.ty);
        };
        Matrix3.prototype.getScale = function () {
            return wd.Vector2.create(Math.sqrt(this.a * this.a + this.b * this.b), Math.sqrt(this.c * this.c + this.d * this.d));
        };
        Matrix3.prototype.getRotation = function () {
            return this._getSkewX();
        };
        Matrix3.prototype.getSkew = function () {
            return wd.Vector2.create(this._getSkewX(), this._getSkewY());
        };
        Matrix3.prototype._getDeltaTransformPoint = function (matrix, point) {
            return {
                x: point.x * matrix.a + point.y * matrix.c + 0,
                y: point.x * matrix.b + point.y * matrix.d + 0
            };
        };
        Matrix3.prototype._getSkewX = function () {
            var px = this._getDeltaTransformPoint(this, { x: 0, y: 1 });
            return ((180 / Math.PI) * Math.atan2(px.y, px.x) - 90);
        };
        Matrix3.prototype._getSkewY = function () {
            var py = this._getDeltaTransformPoint(this, { x: 1, y: 0 });
            return ((180 / Math.PI) * Math.atan2(py.y, py.x));
        };
        return Matrix3;
    })();
    wd.Matrix3 = Matrix3;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var Quaternion = (function () {
        function Quaternion(x, y, z, w) {
            if (x === void 0) { x = 0; }
            if (y === void 0) { y = 0; }
            if (z === void 0) { z = 0; }
            if (w === void 0) { w = 1; }
            this.x = null;
            this.y = null;
            this.z = null;
            this.w = null;
            this.x = x;
            this.y = y;
            this.z = z;
            this.w = w;
        }
        Quaternion.create = function (x, y, z, w) {
            var obj = new this(x, y, z, w);
            return obj;
        };
        Quaternion.prototype.setFromEulerAngles = function (eulerAngles) {
            var sx, cx, sy, cy, sz, cz, halfToRad, ex = eulerAngles.x, ey = eulerAngles.y, ez = eulerAngles.z;
            halfToRad = 0.5 * wd.DEG_TO_RAD;
            ex *= halfToRad;
            ey *= halfToRad;
            ez *= halfToRad;
            sx = Math.sin(ex);
            cx = Math.cos(ex);
            sy = Math.sin(ey);
            cy = Math.cos(ey);
            sz = Math.sin(ez);
            cz = Math.cos(ez);
            this.x = sx * cy * cz - cx * sy * sz;
            this.y = cx * sy * cz + sx * cy * sz;
            this.z = cx * cy * sz - sx * sy * cz;
            this.w = cx * cy * cz + sx * sy * sz;
            return this;
        };
        Quaternion.prototype.multiply = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var q1x, q1y, q1z, q1w, q2x, q2y, q2z, q2w, rhs1, rhs2, result = this;
            if (args.length === 1) {
                rhs1 = this;
                rhs2 = args[0];
            }
            else if (args.length === 2) {
                rhs1 = args[0];
                rhs2 = args[1];
            }
            q1x = rhs1.x;
            q1y = rhs1.y;
            q1z = rhs1.z;
            q1w = rhs1.w;
            q2x = rhs2.x;
            q2y = rhs2.y;
            q2z = rhs2.z;
            q2w = rhs2.w;
            result.x = q1w * q2x + q1x * q2w + q1y * q2z - q1z * q2y;
            result.y = q1w * q2y + q1y * q2w + q1z * q2x - q1x * q2z;
            result.z = q1w * q2z + q1z * q2w + q1x * q2y - q1y * q2x;
            result.w = q1w * q2w - q1x * q2x - q1y * q2y - q1z * q2z;
            return result;
        };
        Quaternion.prototype.setFromMatrix = function (matrix) {
            var m00, m01, m02, m10, m11, m12, m20, m21, m22, tr, s, rs, lx, ly, lz, m;
            m = matrix.values;
            m00 = m[0];
            m01 = m[1];
            m02 = m[2];
            m10 = m[4];
            m11 = m[5];
            m12 = m[6];
            m20 = m[8];
            m21 = m[9];
            m22 = m[10];
            lx = 1 / Math.sqrt(m00 * m00 + m01 * m01 + m02 * m02);
            ly = 1 / Math.sqrt(m10 * m10 + m11 * m11 + m12 * m12);
            lz = 1 / Math.sqrt(m20 * m20 + m21 * m21 + m22 * m22);
            m00 *= lx;
            m01 *= lx;
            m02 *= lx;
            m10 *= ly;
            m11 *= ly;
            m12 *= ly;
            m20 *= lz;
            m21 *= lz;
            m22 *= lz;
            tr = m00 + m11 + m22;
            if (tr >= 0) {
                s = Math.sqrt(tr + 1);
                this.w = s * 0.5;
                s = 0.5 / s;
                this.x = (m12 - m21) * s;
                this.y = (m20 - m02) * s;
                this.z = (m01 - m10) * s;
            }
            else {
                if (m00 > m11) {
                    if (m00 > m22) {
                        rs = (m00 - (m11 + m22)) + 1;
                        rs = Math.sqrt(rs);
                        this.x = rs * 0.5;
                        rs = 0.5 / rs;
                        this.w = (m12 - m21) * rs;
                        this.y = (m01 + m10) * rs;
                        this.z = (m02 + m20) * rs;
                    }
                    else {
                        rs = (m22 - (m00 + m11)) + 1;
                        rs = Math.sqrt(rs);
                        this.z = rs * 0.5;
                        rs = 0.5 / rs;
                        this.w = (m01 - m10) * rs;
                        this.x = (m20 + m02) * rs;
                        this.y = (m21 + m12) * rs;
                    }
                }
                else if (m11 > m22) {
                    rs = (m11 - (m22 + m00)) + 1;
                    rs = Math.sqrt(rs);
                    this.y = rs * 0.5;
                    rs = 0.5 / rs;
                    this.w = (m20 - m02) * rs;
                    this.z = (m12 + m21) * rs;
                    this.x = (m10 + m01) * rs;
                }
                else {
                    rs = (m22 - (m00 + m11)) + 1;
                    rs = Math.sqrt(rs);
                    this.z = rs * 0.5;
                    rs = 0.5 / rs;
                    this.w = (m01 - m10) * rs;
                    this.x = (m20 + m02) * rs;
                    this.y = (m21 + m12) * rs;
                }
            }
            return this;
        };
        Quaternion.prototype.setFromAxisAngle = function (angle, axis) {
            var sa, ca;
            axis = axis.normalize();
            angle *= 0.5 * wd.DEG_TO_RAD;
            sa = Math.sin(angle);
            ca = Math.cos(angle);
            this.x = sa * axis.x;
            this.y = sa * axis.y;
            this.z = sa * axis.z;
            this.w = ca;
            return this;
        };
        Quaternion.prototype.invert = function () {
            return this.conjugate().normalize();
        };
        Quaternion.prototype.conjugate = function () {
            this.x *= -1;
            this.y *= -1;
            this.z *= -1;
            return this;
        };
        Quaternion.prototype.clone = function () {
            return Quaternion.create(this.x, this.y, this.z, this.w);
        };
        Quaternion.prototype.copy = function () {
            return Quaternion.create(this.x, this.y, this.z, this.w);
        };
        Quaternion.prototype.normalize = function () {
            var len = this.length();
            if (len === 0) {
                this.x = this.y = this.z = 0;
                this.w = 1;
            }
            else {
                len = 1 / len;
                this.x *= len;
                this.y *= len;
                this.z *= len;
                this.w *= len;
            }
            return this;
        };
        Quaternion.prototype.length = function () {
            var x, y, z, w;
            x = this.x;
            y = this.y;
            z = this.z;
            w = this.w;
            return Math.sqrt(x * x + y * y + z * z + w * w);
        };
        Quaternion.prototype.multiplyVector3 = function (vector) {
            var q = this;
            var x = vector.x;
            var y = vector.y;
            var z = vector.z;
            var qx = q.x;
            var qy = q.y;
            var qz = q.z;
            var qw = q.w;
            var ix = qw * x + qy * z - qz * y;
            var iy = qw * y + qz * x - qx * z;
            var iz = qw * z + qx * y - qy * x;
            var iw = -qx * x - qy * y - qz * z;
            return wd.Vector3.create(ix * qw + iw * -qx + iy * -qz - iz * -qy, iy * qw + iw * -qy + iz * -qx - ix * -qz, iz * qw + iw * -qz + ix * -qy - iy * -qx);
        };
        Quaternion.prototype.set = function (x, y, z, w) {
            this.x = x;
            this.y = y;
            this.z = z;
            this.w = w;
        };
        Quaternion.prototype.sub = function (quat) {
            var result = quat.copy().invert().multiply(this);
            this.set(result.x, result.y, result.z, result.w);
            return this;
        };
        Quaternion.prototype.getEulerAngles = function () {
            var x, y, z, qx, qy, qz, qw, a2;
            qx = this.x;
            qy = this.y;
            qz = this.z;
            qw = this.w;
            a2 = 2 * (qw * qy - qx * qz);
            if (a2 <= -0.99999) {
                x = 2 * Math.atan2(qx, qw);
                y = -Math.PI / 2;
                z = 0;
            }
            else if (a2 >= 0.99999) {
                x = 2 * Math.atan2(qx, qw);
                y = Math.PI / 2;
                z = 0;
            }
            else {
                x = Math.atan2(2 * (qw * qx + qy * qz), 1 - 2 * (qx * qx + qy * qy));
                y = Math.asin(a2);
                z = Math.atan2(2 * (qw * qz + qx * qy), 1 - 2 * (qy * qy + qz * qz));
            }
            return wd.Vector3.create(x, y, z).scale(wd.RAD_TO_DEG);
        };
        return Quaternion;
    })();
    wd.Quaternion = Quaternion;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var Plane = (function () {
        function Plane(a, b, c, d) {
            this.normal = wd.Vector3.create(0, 1, 0);
            this.d = 0;
            this.normal = wd.Vector3.create(a, b, c);
            this.d = d;
        }
        Plane.create = function (a, b, c, d) {
            var obj = new this(a, b, c, d);
            return obj;
        };
        Plane.prototype.getReflectionMatrix = function () {
            this.normalize();
            var x = this.normal.x;
            var y = this.normal.y;
            var z = this.normal.z;
            var temp = -2 * x;
            var temp2 = -2 * y;
            var temp3 = -2 * z;
            var result = wd.Matrix4.create();
            result.values[0] = (temp * x) + 1;
            result.values[1] = temp2 * x;
            result.values[2] = temp3 * x;
            result.values[3] = 0.0;
            result.values[4] = temp * y;
            result.values[5] = (temp2 * y) + 1;
            result.values[6] = temp3 * y;
            result.values[7] = 0.0;
            result.values[8] = temp * z;
            result.values[9] = temp2 * z;
            result.values[10] = (temp3 * z) + 1;
            result.values[11] = 0.0;
            result.values[12] = temp * this.d;
            result.values[13] = temp2 * this.d;
            result.values[14] = temp3 * this.d;
            result.values[15] = 1.0;
            return result;
        };
        Plane.prototype.normalize = function () {
            var norm = (Math.sqrt((this.normal.x * this.normal.x) + (this.normal.y * this.normal.y) + (this.normal.z * this.normal.z)));
            var magnitude = 0;
            if (norm !== 0) {
                magnitude = 1.0 / norm;
            }
            this.normal.x *= magnitude;
            this.normal.y *= magnitude;
            this.normal.z *= magnitude;
            this.d *= magnitude;
            return this;
        };
        Plane.prototype.copy = function () {
            return Plane.create(this.normal.x, this.normal.y, this.normal.z, this.d);
        };
        Plane.prototype.dotCoordinate = function (point) {
            return ((((this.normal.x * point.x) + (this.normal.y * point.y)) + (this.normal.z * point.z)) + this.d);
        };
        return Plane;
    })();
    wd.Plane = Plane;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var Ray = (function () {
        function Ray(origin, direction) {
            this._origin = null;
            this._direction = null;
            this._origin = origin;
            this._direction = direction;
        }
        Ray.create = function (origin, direction) {
            var obj = new this(origin, direction);
            return obj;
        };
        Ray.prototype.isIntersectWithAABB = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var center = null, halfExtends = null, diff = wd.Vector3.create(), absDiff = null, absDir = null, cross = wd.Vector3.create(), prod = wd.Vector3.create(), rayOrigin = this._origin, rayDir = this._direction;
            if (args.length === 1) {
                var aabb = args[0];
                center = aabb.center;
                halfExtends = aabb.halfExtents;
            }
            else if (args.length === 2) {
                var minPoint = args[0], maxPoint = args[1];
                center = wd.AABBShape.getCenter(minPoint, maxPoint);
                halfExtends = wd.AABBShape.getHalfExtents(minPoint, maxPoint);
            }
            diff.sub2(rayOrigin, center);
            absDiff = wd.Vector3.create(Math.abs(diff.x), Math.abs(diff.y), Math.abs(diff.z));
            prod.mul2(diff, rayDir);
            if (absDiff.x > halfExtends.x && prod.x >= 0) {
                return false;
            }
            if (absDiff.y > halfExtends.y && prod.y >= 0) {
                return false;
            }
            if (absDiff.z > halfExtends.z && prod.z >= 0) {
                return false;
            }
            absDir = wd.Vector3.create(Math.abs(rayDir.x), Math.abs(rayDir.y), Math.abs(rayDir.z));
            cross.cross(rayDir, diff);
            cross.set(Math.abs(cross.x), Math.abs(cross.y), Math.abs(cross.z));
            if (cross.x > halfExtends.y * absDir.z + halfExtends.z * absDir.y) {
                return false;
            }
            if (cross.y > halfExtends.x * absDir.z + halfExtends.z * absDir.x) {
                return false;
            }
            if (cross.z > halfExtends.x * absDir.y + halfExtends.y * absDir.x) {
                return false;
            }
            return true;
        };
        Ray.prototype.isIntersectWithSphere = function (sphere) {
            var center = sphere.center, radius = sphere.radius, diff = wd.Vector3.create(), a = 0, b = 0, c = 0, discr = 0, rayOrigin = this._origin, rayDir = this._direction;
            diff.sub2(rayOrigin, center);
            if (diff.dot(diff) < radius * radius) {
                return true;
            }
            a = rayDir.dot(rayDir);
            b = 2 * rayDir.dot(diff);
            c = center.dot(center);
            c += rayOrigin.dot(rayOrigin);
            c -= 2 * center.dot(rayOrigin);
            c -= radius * radius;
            discr = (b * b) - (4 * a * c);
            if (discr < 0) {
                return false;
            }
            return true;
        };
        return Ray;
    })();
    wd.Ray = Ray;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var Entity = (function () {
        function Entity() {
            this.uid = null;
            this._tagList = wdCb.Collection.create();
            this.uid = Entity._count;
            Entity._count += 1;
        }
        Entity.prototype.addTag = function (tag) {
            this._tagList.addChild(tag);
        };
        Entity.prototype.removeTag = function (tag) {
            this._tagList.removeChild(tag);
        };
        Entity.prototype.getTagList = function () {
            return this._tagList;
        };
        Entity.prototype.hasTag = function (tag) {
            return this._tagList.hasChild(tag);
        };
        Entity.prototype.containTag = function (tag) {
            return this._tagList.hasChild(function (t) {
                return t.indexOf(tag) > -1;
            });
        };
        Entity._count = 1;
        return Entity;
    })();
    wd.Entity = Entity;
})(wd || (wd = {}));
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var Component = (function (_super) {
        __extends(Component, _super);
        function Component() {
            _super.apply(this, arguments);
            this.entityObject = null;
        }
        Component.prototype.init = function () {
        };
        Component.prototype.dispose = function () {
        };
        Object.defineProperty(Component.prototype, "transform", {
            get: function () {
                if (!this.entityObject) {
                    return null;
                }
                return this.entityObject.transform;
            },
            enumerable: true,
            configurable: true
        });
        Component.prototype.addToObject = function (entityObject) {
            if (this.entityObject) {
                this.entityObject.removeComponent(this);
            }
            this.entityObject = entityObject;
        };
        Component.prototype.removeFromObject = function (entityObject) {
            this.entityObject = null;
        };
        __decorate([
            wd.virtual
        ], Component.prototype, "init", null);
        __decorate([
            wd.virtual
        ], Component.prototype, "dispose", null);
        return Component;
    })(wd.Entity);
    wd.Component = Component;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var Scheduler = (function () {
        function Scheduler() {
            this._scheduleCount = 0;
            this._schedules = wdCb.Hash.create();
        }
        Scheduler.create = function () {
            var obj = new this();
            return obj;
        };
        Scheduler.prototype.update = function (elapsedTime) {
            var _this = this;
            this._schedules.forEach(function (scheduleItem, scheduleId) {
                if (scheduleItem.isStop || scheduleItem.isPause) {
                    return;
                }
                scheduleItem.update(elapsedTime);
                if (scheduleItem.isFinish) {
                    _this.remove(scheduleId);
                }
            });
        };
        Scheduler.prototype.scheduleLoop = function (task, args) {
            if (args === void 0) { args = []; }
            return this._schedule(LoopScheduleItem, Array.prototype.slice.call(arguments, 0));
        };
        Scheduler.prototype.scheduleFrame = function (task, frame, args) {
            if (frame === void 0) { frame = 1; }
            return this._schedule(FrameScheduleItem, Array.prototype.slice.call(arguments, 0));
        };
        Scheduler.prototype.scheduleInterval = function (task, time, args) {
            if (time === void 0) { time = 0; }
            return this._schedule(IntervalScheduleItem, Array.prototype.slice.call(arguments, 0));
        };
        Scheduler.prototype.scheduleTime = function (task, time, args) {
            if (time === void 0) { time = 0; }
            return this._schedule(TimeScheduleItem, Array.prototype.slice.call(arguments, 0));
        };
        Scheduler.prototype.pause = function (scheduleId) {
            if (arguments.length === 0) {
                var self_1 = this;
                this._schedules.forEach(function (scheduleItem, scheduleId) {
                    self_1.pause(scheduleId);
                });
            }
            else if (arguments.length === 1) {
                var scheduleItem = this._schedules.getChild(arguments[0]);
                scheduleItem.pause();
            }
        };
        Scheduler.prototype.resume = function (scheduleId) {
            if (arguments.length === 0) {
                var self_2 = this;
                this._schedules.forEach(function (scheduleItem, scheduleId) {
                    self_2.resume(scheduleId);
                });
            }
            else if (arguments.length === 1) {
                var scheduleItem = this._schedules.getChild(arguments[0]);
                scheduleItem.resume();
            }
        };
        Scheduler.prototype.start = function (scheduleId) {
            if (arguments.length === 0) {
                var self_3 = this;
                this._schedules.forEach(function (scheduleItem, scheduleId) {
                    self_3.start(scheduleId);
                });
            }
            else if (arguments.length === 1) {
                var scheduleItem = this._schedules.getChild(arguments[0]);
                scheduleItem.start();
            }
        };
        Scheduler.prototype.stop = function (scheduleId) {
            if (arguments.length === 0) {
                var self_4 = this;
                this._schedules.forEach(function (scheduleItem, scheduleId) {
                    self_4.stop(scheduleId);
                });
            }
            else if (arguments.length === 1) {
                var scheduleItem = this._schedules.getChild(arguments[0]);
                scheduleItem.stop();
            }
        };
        Scheduler.prototype.has = function (scheduleId) {
            return !!this._schedules.hasChild(scheduleId);
        };
        Scheduler.prototype.remove = function (scheduleId) {
            this._schedules.removeChild(scheduleId);
        };
        Scheduler.prototype.removeAll = function () {
            this._schedules.removeAllChildren();
        };
        Scheduler.prototype._schedule = function (_class, args) {
            var scheduleId = this._buildId();
            this._schedules.setValue(scheduleId, _class.create.apply(_class, args));
            return scheduleId;
        };
        Scheduler.prototype._buildId = function () {
            return 'Schedule_' + (this._scheduleCount++);
        };
        return Scheduler;
    })();
    wd.Scheduler = Scheduler;
    var ScheduleItem = (function () {
        function ScheduleItem(task, args) {
            this.isPause = false;
            this.isStop = false;
            this.pauseTime = null;
            this.pauseElapsed = null;
            this.startTime = null;
            this.isFinish = false;
            this.task = null;
            this.args = null;
            this.timeController = wd.CommonTimeController.create();
            this.task = task;
            this.args = args;
        }
        ScheduleItem.prototype.pause = function () {
            this.isPause = true;
            this.timeController.pause();
        };
        ScheduleItem.prototype.resume = function () {
            this.isPause = false;
            this.timeController.resume();
        };
        ScheduleItem.prototype.start = function () {
            this.isStop = false;
            this.timeController.start();
        };
        ScheduleItem.prototype.stop = function () {
            this.isStop = true;
            this.timeController.stop();
        };
        ScheduleItem.prototype.finish = function () {
            this.isFinish = true;
        };
        return ScheduleItem;
    })();
    var TimeScheduleItem = (function (_super) {
        __extends(TimeScheduleItem, _super);
        function TimeScheduleItem(task, time, args) {
            if (time === void 0) { time = 0; }
            if (args === void 0) { args = []; }
            _super.call(this, task, args);
            this._time = null;
            this._time = time;
        }
        TimeScheduleItem.create = function (task, time, args) {
            if (time === void 0) { time = 0; }
            if (args === void 0) { args = []; }
            var obj = new this(task, time, args);
            return obj;
        };
        TimeScheduleItem.prototype.update = function (elapsedTime) {
            var elapsed = this.timeController.computeElapseTime(elapsedTime);
            if (elapsed >= this._time) {
                this.task.apply(this, this.args);
                this.finish();
            }
        };
        return TimeScheduleItem;
    })(ScheduleItem);
    var IntervalScheduleItem = (function (_super) {
        __extends(IntervalScheduleItem, _super);
        function IntervalScheduleItem(task, time, args) {
            if (time === void 0) { time = 0; }
            if (args === void 0) { args = []; }
            _super.call(this, task, args);
            this._intervalTime = null;
            this._elapsed = 0;
            this._intervalTime = time;
        }
        IntervalScheduleItem.create = function (task, time, args) {
            if (time === void 0) { time = 0; }
            if (args === void 0) { args = []; }
            var obj = new this(task, time, args);
            return obj;
        };
        IntervalScheduleItem.prototype.update = function (elapsedTime) {
            var elapsed = this.timeController.computeElapseTime(elapsedTime);
            if (elapsed - this._elapsed >= this._intervalTime) {
                this.task.apply(this, this.args);
                this._elapsed = elapsed;
            }
        };
        IntervalScheduleItem.prototype.start = function () {
            _super.prototype.start.call(this);
            this._elapsed = 0;
        };
        return IntervalScheduleItem;
    })(ScheduleItem);
    var LoopScheduleItem = (function (_super) {
        __extends(LoopScheduleItem, _super);
        function LoopScheduleItem() {
            _super.apply(this, arguments);
        }
        LoopScheduleItem.create = function (task, args) {
            if (args === void 0) { args = []; }
            var obj = new this(task, args);
            return obj;
        };
        LoopScheduleItem.prototype.update = function (elapsedTime) {
            this.task.apply(this, this.args);
        };
        return LoopScheduleItem;
    })(ScheduleItem);
    var FrameScheduleItem = (function (_super) {
        __extends(FrameScheduleItem, _super);
        function FrameScheduleItem(task, frame, args) {
            if (frame === void 0) { frame = 1; }
            if (args === void 0) { args = []; }
            _super.call(this, task, args);
            this._frame = null;
            this._frame = frame;
        }
        FrameScheduleItem.create = function (task, frame, args) {
            if (frame === void 0) { frame = 1; }
            if (args === void 0) { args = []; }
            var obj = new this(task, frame, args);
            return obj;
        };
        FrameScheduleItem.prototype.update = function (elapsedTime) {
            this._frame--;
            if (this._frame <= 0) {
                this.task.apply(this, this.args);
                this.finish();
            }
        };
        return FrameScheduleItem;
    })(ScheduleItem);
})(wd || (wd = {}));
var wd;
(function (wd) {
    var GameState;
    (function (GameState) {
        GameState[GameState["NORMAL"] = 0] = "NORMAL";
        GameState[GameState["STOP"] = 1] = "STOP";
        GameState[GameState["PAUSE"] = 2] = "PAUSE";
    })(GameState || (GameState = {}));
    var Director = (function () {
        function Director() {
            this.scene = null;
            this.scheduler = null;
            this.renderer = null;
            this._gameLoop = null;
            this._eventSubscription = null;
            this._gameState = GameState.NORMAL;
            this._timeController = wd.DirectorTimeController.create();
            this._domEventManager = wd.DomEventManager.create();
        }
        Director.getInstance = function () {
            if (this._instance === null) {
                this._instance = new this();
                this._instance.initWhenCreate();
            }
            return this._instance;
        };
        Object.defineProperty(Director.prototype, "gameTime", {
            get: function () {
                return this._timeController.gameTime;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Director.prototype, "fps", {
            get: function () {
                return this._timeController.fps;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Director.prototype, "isNormal", {
            get: function () {
                return this._gameState === GameState.NORMAL;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Director.prototype, "isStop", {
            get: function () {
                return this._gameState === GameState.STOP;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Director.prototype, "isPause", {
            get: function () {
                return this._gameState === GameState.PAUSE;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Director.prototype, "isTimeChange", {
            get: function () {
                return this._timeController.isTimeChange;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Director.prototype, "elapsed", {
            get: function () {
                return this._timeController.elapsed;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Director.prototype, "view", {
            get: function () {
                return wd.DeviceManager.getInstance().view;
            },
            enumerable: true,
            configurable: true
        });
        Director.prototype.initWhenCreate = function () {
            this.scene = wd.SceneDispatcher.create();
            this.scheduler = wd.Scheduler.create();
            this.renderer = wd.WebGLRenderer.create();
        };
        Director.prototype.start = function () {
            this._gameState = GameState.NORMAL;
            this._startLoop();
        };
        Director.prototype.stop = function () {
            this._gameLoop && this._gameLoop.dispose();
            this._gameState = GameState.STOP;
            this._timeController.stop();
            this.scheduler.stop();
            this._eventSubscription && this._eventSubscription.dispose();
        };
        Director.prototype.pause = function () {
            if (this._gameState === GameState.PAUSE) {
                return;
            }
            this._gameState = GameState.PAUSE;
            this._timeController.pause();
            this.scheduler.pause();
        };
        Director.prototype.resume = function () {
            this._gameState = GameState.NORMAL;
            this._timeController.resume();
            this.scheduler.resume();
        };
        Director.prototype.getDeltaTime = function () {
            return this._timeController.deltaTime;
        };
        Director.prototype.initUIObjectScene = function () {
            var uiObjectScene = this.scene.uiObjectScene;
            this._initDomEvent();
            uiObjectScene.onEnter();
            uiObjectScene.init();
        };
        Director.prototype.runUIObjectScene = function (elapseTime) {
            var uiObjectScene = this.scene.uiObjectScene;
            wd.EventManager.trigger(uiObjectScene, wd.CustomEvent.create(wd.EngineEvent.STARTLOOP));
            uiObjectScene.update(elapseTime);
            wd.EventManager.trigger(uiObjectScene, wd.CustomEvent.create(wd.EngineEvent.ENDLOOP));
        };
        Director.prototype._startLoop = function () {
            var self = this;
            this._gameLoop = this._buildInitStream()
                .ignoreElements()
                .concat(this._buildLoopStream())
                .subscribe(function (time) {
                self._loopBody(time);
            });
        };
        Director.prototype._buildInitStream = function () {
            var _this = this;
            return wdFrp.callFunc(function () {
                _this._init();
            }, this);
        };
        Director.prototype._init = function () {
            this._initGameObjectScene();
            this.initUIObjectScene();
            wd.DebugStatistics.init();
        };
        Director.prototype._initGameObjectScene = function () {
            var gameObjectScene = this.scene.gameObjectScene;
            this._initDomEvent();
            wd.EventManager.trigger(wd.CustomEvent.create(wd.EngineEvent.BEFORE_GAMEOBJECT_INIT));
            gameObjectScene.onEnter();
            gameObjectScene.init();
            this.renderer.init();
            this._timeController.start();
            this.scheduler.start();
            wd.EventManager.trigger(wd.CustomEvent.create(wd.EngineEvent.AFTER_GAMEOBJECT_INIT));
            wd.EventManager.trigger(wd.CustomEvent.create(wd.EngineEvent.AFTER_GAMEOBJECT_INIT_RIGIDBODY_ADD_CONSTRAINT));
        };
        Director.prototype._buildLoopStream = function () {
            return wdFrp.intervalRequest();
        };
        Director.prototype._loopBody = function (time) {
            var elapseTime = null;
            if (this._gameState === GameState.PAUSE || this._gameState === GameState.STOP) {
                return false;
            }
            elapseTime = this._timeController.computeElapseTime(time);
            this._run(elapseTime);
            return true;
        };
        Director.prototype._run = function (elapseTime) {
            this._runGameObjectScene(elapseTime);
            this.runUIObjectScene(elapseTime);
        };
        Director.prototype._runGameObjectScene = function (elapseTime) {
            var gameObjectScene = this.scene.gameObjectScene;
            this._timeController.tick(elapseTime);
            wd.EventManager.trigger(wd.CustomEvent.create(wd.EngineEvent.STARTLOOP));
            this.scheduler.update(elapseTime);
            gameObjectScene.update(elapseTime);
            gameObjectScene.render(this.renderer);
            if (this.renderer.hasCommand()) {
                this.renderer.render();
            }
            wd.EventManager.trigger(wd.CustomEvent.create(wd.EngineEvent.ENDLOOP));
        };
        Director.prototype._initDomEvent = function () {
            this._eventSubscription = this._domEventManager.initDomEvent();
        };
        Director._instance = null;
        __decorate([
            wd.execOnlyOnce("_isInitUIScene")
        ], Director.prototype, "initUIObjectScene", null);
        __decorate([
            wd.execOnlyOnce("_isInitDomEvent")
        ], Director.prototype, "_initDomEvent", null);
        return Director;
    })();
    wd.Director = Director;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var Main = (function () {
        function Main() {
        }
        Object.defineProperty(Main, "isTest", {
            get: function () {
                return this._isTest;
            },
            set: function (isTest) {
                this._isTest = isTest;
                wdFrp.Main.isTest = isTest;
            },
            enumerable: true,
            configurable: true
        });
        Main.setConfig = function (_a) {
            var canvasId = _a.canvasId, _b = _a.isTest, isTest = _b === void 0 ? wd.DebugConfig.isTest : _b, _c = _a.screenSize, screenSize = _c === void 0 ? wd.ScreenSize.FULL : _c;
            this.isTest = isTest;
            this.screenSize = screenSize;
            this._canvasId = canvasId;
            return this;
        };
        Main.init = function () {
            wd.DeviceManager.getInstance().createGL(this._canvasId);
            wd.DeviceManager.getInstance().setScreen();
            wd.GPUDetector.getInstance().detect();
            return this;
        };
        Main._isTest = false;
        Main.screenSize = null;
        Main._canvasId = null;
        return Main;
    })();
    wd.Main = Main;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var DomEventManager = (function () {
        function DomEventManager() {
            this._lastTriggerList = null;
        }
        DomEventManager.create = function () {
            var obj = new this();
            return obj;
        };
        Object.defineProperty(DomEventManager.prototype, "scene", {
            get: function () {
                return wd.Director.getInstance().scene;
            },
            enumerable: true,
            configurable: true
        });
        DomEventManager.prototype.initDomEvent = function () {
            var self = this;
            return wdFrp.fromArray([
                wd.EventManager.fromEvent(wd.EventName.CLICK),
                wd.EventManager.fromEvent(wd.EventName.MOUSEDOWN),
                wd.EventManager.fromEvent(wd.EventName.MOUSEUP),
                wd.EventManager.fromEvent(wd.EventName.MOUSEWHEEL),
                this._buildMouseDragStream()
            ])
                .mergeAll()
                .filter(function (e) {
                return !wd.Director.getInstance().isPause;
            })
                .map(function (e) {
                return self._getMouseEventTriggerListData(e);
            })
                .merge(wd.EventManager.fromEvent(wd.EventName.MOUSEMOVE)
                .filter(function (e) {
                return !wd.Director.getInstance().isPause;
            })
                .map(function (e) {
                var triggerList = self._getMouseEventTriggerList(e);
                var _a = self._getMouseOverAndMouseOutObject(triggerList, self._lastTriggerList), mouseoverObjects = _a.mouseoverObjects, mouseoutObjects = _a.mouseoutObjects;
                self._setMouseOverTag(mouseoverObjects);
                self._setMouseOutTag(mouseoutObjects);
                self._lastTriggerList = triggerList.copy();
                triggerList = mouseoutObjects.addChildren(triggerList);
                return self._getMouseEventTriggerListData(e, triggerList);
            }))
                .filter(function (_a) {
                var triggerList = _a[0], e = _a[1];
                return triggerList.getCount() > 0;
            })
                .subscribe(function (_a) {
                var triggerList = _a[0], e = _a[1];
                triggerList.forEach(function (entityObject) {
                    self._trigger(e.copy(), entityObject);
                });
            });
        };
        DomEventManager.prototype._buildMouseDragStream = function () {
            return wd.EventManager.fromEvent(document, wd.EventName.MOUSEDOWN)
                .flatMap(function (e) {
                return wd.EventManager.fromEvent(document, wd.EventName.MOUSEMOVE).takeUntil(wd.EventManager.fromEvent(document, wd.EventName.MOUSEUP));
            })
                .map(function (e) {
                e.name = wd.EventName.MOUSEDRAG;
                return e;
            });
        };
        DomEventManager.prototype._getMouseOverAndMouseOutObject = function (currentTriggerList, lastTriggerList) {
            var mouseoverObjects = wdCb.Collection.create(), mouseoutObjects = wdCb.Collection.create();
            if (!lastTriggerList) {
                mouseoverObjects = currentTriggerList;
            }
            else {
                lastTriggerList.forEach(function (lastObject) {
                    if (!currentTriggerList.hasChild(function (currentObject) {
                        return wd.JudgeUtils.isEqual(currentObject, lastObject);
                    })) {
                        mouseoutObjects.addChild(lastObject);
                    }
                });
                currentTriggerList.forEach(function (currentObject) {
                    if (!lastTriggerList.hasChild(function (lastObject) {
                        return wd.JudgeUtils.isEqual(currentObject, lastObject);
                    })) {
                        mouseoverObjects.addChild(currentObject);
                    }
                });
            }
            return {
                mouseoverObjects: mouseoverObjects,
                mouseoutObjects: mouseoutObjects
            };
        };
        DomEventManager.prototype._setMouseOverTag = function (objects) {
            objects.forEach(function (object) {
                object.addTag(EventTag.MOUSE_OVER);
            });
        };
        DomEventManager.prototype._setMouseOutTag = function (objects) {
            objects.forEach(function (object) {
                object.addTag(EventTag.MOUSE_OUT);
            });
        };
        DomEventManager.prototype._setEventNameByEventTag = function (object, e) {
            if (object.hasTag(EventTag.MOUSE_OVER)) {
                e.name = wd.EventName.MOUSEOVER;
            }
            else if (object.hasTag(EventTag.MOUSE_OUT)) {
                e.name = wd.EventName.MOUSEOUT;
            }
            return e;
        };
        DomEventManager.prototype._removeEventTag = function (object) {
            object.removeTag(EventTag.MOUSE_OVER);
            object.removeTag(EventTag.MOUSE_OUT);
        };
        DomEventManager.prototype._trigger = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var e = args[0], entityObject = args[1], notSetTarget = false, event = null, customEvent = null, handlerName = null;
            if (args.length === 3 && args[2]) {
                notSetTarget = true;
                event = e;
            }
            else {
                event = this._setEventNameByEventTag(entityObject, e);
                this._removeEventTag(entityObject);
            }
            handlerName = wd.EventTriggerTable.getScriptHandlerName(event.name);
            customEvent = wd.CustomEvent.create(wd.EngineEvent[wd.EventTriggerTable.getScriptEngineEvent(event.name)]);
            customEvent.getDataFromDomEvent(event);
            wd.EventManager.trigger(entityObject, customEvent, event, notSetTarget);
            event.getDataFromCustomEvent(customEvent);
            entityObject.execEventScript(handlerName, event);
            if (!event.isStopPropagation && entityObject.bubbleParent) {
                this._trigger(event.copy(), entityObject.bubbleParent, true);
            }
        };
        DomEventManager.prototype._getMouseEventTriggerList = function (e) {
            var topGameObject = null, topUIObject = null, triggerList = wdCb.Collection.create();
            topGameObject = this._findTopGameObject(e, this.scene.gameObjectScene);
            topUIObject = this._findTopUIObject(e, this.scene.uiObjectScene);
            if (topGameObject) {
                triggerList.addChild(topGameObject);
            }
            if (topUIObject) {
                triggerList.addChild(topUIObject);
            }
            if (this._isSceneAsTopOne(e, triggerList)) {
                triggerList.addChild(this.scene);
            }
            return triggerList;
        };
        DomEventManager.prototype._isSceneAsTopOne = function (e, triggerList) {
            return this._isTriggerScene(e) && triggerList.getCount() === 0;
        };
        DomEventManager.prototype._findTopGameObject = function (e, gameObjectScene) {
            var self = this;
            return this._findTriggerGameObjectList(e, gameObjectScene).sort(function (a, b) {
                return self._getDistanceToCamera(a) - self._getDistanceToCamera(b);
            })
                .getChild(0);
        };
        DomEventManager.prototype._getDistanceToCamera = function (obj) {
            return obj.transform.position.copy().sub(wd.Director.getInstance().scene.camera.transform.position).length();
        };
        DomEventManager.prototype._findTopUIObject = function (e, uiObjectScene) {
            return this._findTriggerUIObjectList(e, uiObjectScene).sort(function (a, b) {
                return b.transform.zIndex - a.transform.zIndex;
            })
                .getChild(0);
        };
        DomEventManager.prototype._findTriggerGameObjectList = function (e, objectScene) {
            var triggerObjectList = wdCb.Collection.create(), self = this;
            var find = function (entityObject) {
                if (entityObject.hasComponent(wd.Octree)) {
                    entityObject.getOctree().getIntersectListWithRay(e)
                        .forEach(function (entityObject) {
                        self._addTriggerObjectByQueryDetector(entityObject, e, triggerObjectList);
                    });
                }
                else {
                    self._addTriggerObjectByQueryDetector(entityObject, e, triggerObjectList);
                    entityObject.forEach(function (child) {
                        find(child);
                    });
                }
            };
            objectScene.forEach(function (child) {
                find(child);
            });
            return triggerObjectList;
        };
        DomEventManager.prototype._findTriggerUIObjectList = function (e, objectScene) {
            var triggerObjectList = wdCb.Collection.create(), self = this;
            var find = function (entityObject) {
                self._addTriggerObjectByQueryDetector(entityObject, e, triggerObjectList);
                entityObject.forEach(function (child) {
                    find(child);
                });
            };
            objectScene.forEach(function (child) {
                find(child);
            });
            return triggerObjectList;
        };
        DomEventManager.prototype._addTriggerObjectByQueryDetector = function (entityObject, e, triggerObjectList) {
            if (entityObject.hasComponent(wd.EventTriggerDetector)) {
                var detector = entityObject.getComponent(wd.EventTriggerDetector);
                if (detector.isTrigger(e)) {
                    triggerObjectList.addChild(entityObject);
                }
            }
        };
        DomEventManager.prototype._isTriggerScene = function (e) {
            var detector = this.scene.getComponent(wd.EventTriggerDetector);
            return detector.isTrigger(e);
        };
        DomEventManager.prototype._getMouseEventTriggerListData = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            if (args.length === 1) {
                var e = args[0];
                return [this._getMouseEventTriggerList(e), e];
            }
            else {
                var e = args[0], triggerList = args[1];
                return [triggerList, e];
            }
        };
        return DomEventManager;
    })();
    wd.DomEventManager = DomEventManager;
    var EventTag;
    (function (EventTag) {
        EventTag[EventTag["MOUSE_OVER"] = "MOUSE_OVER"] = "MOUSE_OVER";
        EventTag[EventTag["MOUSE_OUT"] = "MOUSE_OUT"] = "MOUSE_OUT";
    })(EventTag || (EventTag = {}));
})(wd || (wd = {}));
var wd;
(function (wd) {
    var EntityObject = (function (_super) {
        __extends(EntityObject, _super);
        function EntityObject() {
            _super.apply(this, arguments);
            this._scriptList = wdCb.Hash.create();
            this._bubbleParent = null;
            this.name = null;
            this.transform = null;
            this.parent = null;
            this.actionManager = wd.ActionManager.create();
            this.children = wdCb.Collection.create();
            this.startLoopHandler = null;
            this.endLoopHandler = null;
            this.components = wdCb.Collection.create();
            this._scriptExecuteHistory = wdCb.Hash.create();
        }
        Object.defineProperty(EntityObject.prototype, "scriptList", {
            get: function () {
                return this._scriptList;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EntityObject.prototype, "bubbleParent", {
            get: function () {
                return this._bubbleParent ? this._bubbleParent : this.parent;
            },
            set: function (bubbleParent) {
                this._bubbleParent = bubbleParent;
            },
            enumerable: true,
            configurable: true
        });
        EntityObject.prototype.initWhenCreate = function () {
            this.transform = this.createTransform();
            if (this.transform) {
                this.addComponent(this.transform);
            }
        };
        EntityObject.prototype.init = function () {
            var _this = this;
            this.startLoopHandler = wdCb.FunctionUtils.bind(this, function () {
                _this.onStartLoop();
            });
            this.endLoopHandler = wdCb.FunctionUtils.bind(this, function () {
                _this.onEndLoop();
            });
            this.bindStartLoopEvent();
            this.bindEndLoopEvent();
            this.initComponent();
            this.forEach(function (child) {
                child.init();
            });
            this.afterInitChildren();
            return this;
        };
        EntityObject.prototype.onStartLoop = function () {
            this.execScript("onStartLoop");
        };
        EntityObject.prototype.onEndLoop = function () {
            this.execScript("onEndLoop");
        };
        EntityObject.prototype.onEnter = function () {
        };
        EntityObject.prototype.onExit = function () {
            this.execScript("onExit");
        };
        EntityObject.prototype.onDispose = function () {
            this.execScript("onDispose");
        };
        EntityObject.prototype.dispose = function () {
            var components = null;
            this.onDispose();
            if (this.parent) {
                this.parent.removeChild(this);
                this.parent = null;
            }
            wd.EventManager.off(this);
            wd.EventManager.off(wd.EngineEvent.STARTLOOP, this.startLoopHandler);
            wd.EventManager.off(wd.EngineEvent.ENDLOOP, this.endLoopHandler);
            components = this.removeAllComponent();
            components.forEach(function (component) {
                component.dispose();
            });
            this.forEach(function (child) {
                child.dispose();
            });
        };
        EntityObject.prototype.hasChild = function (child) {
            return this.children.hasChild(child);
        };
        EntityObject.prototype.addChild = function (child) {
            if (child.parent) {
                child.parent.removeChild(child);
            }
            child.parent = this;
            child.transform.parent = this.transform;
            this.children.addChild(child);
            child.onEnter();
            return this;
        };
        EntityObject.prototype.addChildren = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            this.children.addChildren(args[0]);
            return this;
        };
        EntityObject.prototype.forEach = function (func) {
            this.children.forEach(func);
            return this;
        };
        EntityObject.prototype.filter = function (func) {
            return this.children.filter(func);
        };
        EntityObject.prototype.sort = function (func, isSortSelf) {
            if (isSortSelf === void 0) { isSortSelf = false; }
            return this.children.sort(func, isSortSelf);
        };
        EntityObject.prototype.getChildren = function () {
            return this.children;
        };
        EntityObject.prototype.getChild = function (index) {
            return this.children.getChild(index);
        };
        EntityObject.prototype.findChildByUid = function (uid) {
            return this.children.findOne(function (child) {
                return child.uid === uid;
            });
        };
        EntityObject.prototype.findChildByTag = function (tag) {
            return this.children.findOne(function (child) {
                return child.hasTag(tag);
            });
        };
        EntityObject.prototype.findChildByName = function (name) {
            return this.children.findOne(function (child) {
                return child.name.search(name) > -1;
            });
        };
        EntityObject.prototype.findChildrenByName = function (name) {
            return this.children.filter(function (child) {
                return child.name.search(name) > -1;
            });
        };
        EntityObject.prototype.getComponent = function (_class) {
            return this.components.findOne(function (component) {
                return component instanceof _class;
            });
        };
        EntityObject.prototype.findComponentByUid = function (uid) {
            return this.components.findOne(function (component) {
                return component.uid === uid;
            });
        };
        EntityObject.prototype.getFirstComponent = function () {
            return this.components.getChild(0);
        };
        EntityObject.prototype.forEachComponent = function (func) {
            this.components.forEach(func);
            return this;
        };
        EntityObject.prototype.removeChild = function (child) {
            child.onExit();
            this.children.removeChild(child);
            child.parent = null;
            return this;
        };
        EntityObject.prototype.hasComponent = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            if (args[0] instanceof wd.Component) {
                var component = args[0];
                return this.components.hasChild(component);
            }
            else {
                var _class = args[0];
                return this.components.hasChild(function (component) {
                    return component instanceof _class;
                });
            }
        };
        EntityObject.prototype.addComponent = function (component) {
            if (this.hasComponent(component)) {
                wd.Log.assert(false, "the component already exist");
                return this;
            }
            this.components.addChild(component);
            component.addToObject(this);
            return this;
        };
        EntityObject.prototype.removeComponent = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var component = null;
            if (args[0] instanceof wd.Component) {
                component = args[0];
            }
            else {
                component = this.getComponent(args[0]);
            }
            this.components.removeChild(component);
            this._removeComponentHandler(component);
            return this;
        };
        EntityObject.prototype.removeAllComponent = function () {
            var _this = this;
            var result = wdCb.Collection.create();
            this.components.forEach(function (component) {
                _this._removeComponentHandler(component);
                result.addChild(component);
            }, this);
            this.components.removeAllChildren();
            return result;
        };
        EntityObject.prototype.render = function (renderer, camera) {
            var geometry = this._getGeometry(), rendererComponent = this._getRendererComponent();
            if (rendererComponent && geometry) {
                rendererComponent.render(renderer, geometry, camera);
                wd.DebugStatistics.count.renderGameObjects++;
            }
            this.getRenderList().forEach(function (child) {
                child.render(renderer, camera);
            });
        };
        EntityObject.prototype.update = function (elapsedTime) {
            var camera = this._getCamera(), animation = this._getAnimation(), collider = this._getCollider();
            if (camera) {
                camera.update(elapsedTime);
            }
            if (animation) {
                animation.update(elapsedTime);
            }
            this.actionManager.update(elapsedTime);
            this.execScript("update", elapsedTime);
            if (collider) {
                collider.update(elapsedTime);
            }
            this.beforeUpdateChildren(elapsedTime);
            this.forEach(function (child) {
                child.update(elapsedTime);
            });
        };
        EntityObject.prototype.execScript = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var method = args[0], self = this;
            if (args.length === 1) {
                this._scriptList.forEach(function (script, scriptName) {
                    script[method] && script[method]();
                    self._addToScriptExecuteHistory(scriptName, method);
                });
            }
            else if (args.length === 2) {
                var arg = args[1];
                this._scriptList.forEach(function (script, scriptName) {
                    script[method] && script[method](arg);
                    self._addToScriptExecuteHistory(scriptName, method);
                });
            }
            else if (args.length === 3) {
                var arg = args[1], isExecOnlyOnce = args[2];
                this._scriptList.forEach(function (script, scriptName) {
                    if (isExecOnlyOnce && self._isScriptExecuted(scriptName, method)) {
                        return;
                    }
                    script[method] && script[method](arg);
                    self._addToScriptExecuteHistory(scriptName, method);
                });
            }
        };
        EntityObject.prototype.execEventScript = function (method, arg) {
            this._scriptList.forEach(function (script) {
                script[method] && (arg ? script[method](arg) : script[method]());
            });
        };
        EntityObject.prototype.beforeUpdateChildren = function (elapsedTime) {
        };
        EntityObject.prototype.afterInitChildren = function () {
        };
        EntityObject.prototype.bindStartLoopEvent = function () {
            wd.EventManager.on(wd.EngineEvent.STARTLOOP, this.startLoopHandler);
        };
        EntityObject.prototype.bindEndLoopEvent = function () {
            wd.EventManager.on(wd.EngineEvent.ENDLOOP, this.endLoopHandler);
        };
        EntityObject.prototype.getRenderList = function () {
            if (this.children.getCount() > 100) {
                console.log(this.children.getCount());
            }
            return this.children;
        };
        EntityObject.prototype.initComponent = function () {
            if (this.hasComponent(wd.Geometry)) {
                this.getComponent(wd.Geometry).init();
            }
            this.components.filter(function (component) {
                return !(component instanceof wd.Geometry);
            })
                .forEach(function (component) {
                component.init();
            });
        };
        EntityObject.prototype.getAllChildren = function () {
            var result = wdCb.Collection.create();
            var getChildren = function (entityObject) {
                result.addChildren(entityObject.getChildren());
                entityObject.forEach(function (child) {
                    getChildren(child);
                });
            };
            getChildren(this);
            return result;
        };
        EntityObject.prototype._getGeometry = function () {
            return this.getComponent(wd.Geometry);
        };
        EntityObject.prototype._getCamera = function () {
            return this.getComponent(wd.CameraController);
        };
        EntityObject.prototype._getAnimation = function () {
            return this.getComponent(wd.Animation);
        };
        EntityObject.prototype._getRendererComponent = function () {
            return this.getComponent(wd.RendererComponent);
        };
        EntityObject.prototype._getCollider = function () {
            return this.getComponent(wd.Collider);
        };
        EntityObject.prototype.getComponentCount = function (_class) {
            return this.components.filter(function (component) {
                return component instanceof _class;
            }).getCount();
        };
        EntityObject.prototype._removeComponentHandler = function (component) {
            component.removeFromObject(this);
        };
        EntityObject.prototype._addToScriptExecuteHistory = function (scriptName, method) {
            this._scriptExecuteHistory.addChild(this._buildScriptHistoryKey(scriptName, method), true);
        };
        EntityObject.prototype._isScriptExecuted = function (scriptName, method) {
            return this._scriptExecuteHistory.getChild(this._buildScriptHistoryKey(scriptName, method));
        };
        EntityObject.prototype._buildScriptHistoryKey = function (scriptName, method) {
            return scriptName + "_" + method;
        };
        __decorate([
            wd.virtual
        ], EntityObject.prototype, "initWhenCreate", null);
        __decorate([
            wd.virtual
        ], EntityObject.prototype, "beforeUpdateChildren", null);
        __decorate([
            wd.virtual
        ], EntityObject.prototype, "afterInitChildren", null);
        __decorate([
            wd.virtual
        ], EntityObject.prototype, "bindStartLoopEvent", null);
        __decorate([
            wd.virtual
        ], EntityObject.prototype, "bindEndLoopEvent", null);
        __decorate([
            wd.virtual
        ], EntityObject.prototype, "getRenderList", null);
        __decorate([
            wd.require(function () {
                wd.assert(this.getComponentCount(wd.Geometry) <= 1, wd.Log.info.FUNC_SHOULD_NOT("entityObject", "contain more than 1 geometry component"));
            })
        ], EntityObject.prototype, "_getGeometry", null);
        __decorate([
            wd.require(function () {
                wd.assert(this.getComponentCount(wd.CameraController) <= 1, wd.Log.info.FUNC_SHOULD_NOT("entityObject", "contain more than 1 camera controller"));
            })
        ], EntityObject.prototype, "_getCamera", null);
        __decorate([
            wd.require(function () {
                wd.assert(this.getComponentCount(wd.Animation) <= 1, wd.Log.info.FUNC_SHOULD_NOT("entityObject", "contain more than 1 animation component"));
            })
        ], EntityObject.prototype, "_getAnimation", null);
        __decorate([
            wd.require(function () {
                wd.assert(this.getComponentCount(wd.RendererComponent) <= 1, wd.Log.info.FUNC_SHOULD_NOT("entityObject", "contain more than 1 rendererComponent"));
            })
        ], EntityObject.prototype, "_getRendererComponent", null);
        __decorate([
            wd.require(function () {
                wd.assert(this.getComponentCount(wd.Collider) <= 1, wd.Log.info.FUNC_SHOULD_NOT("entityObject", "contain more than 1 collider component"));
            })
        ], EntityObject.prototype, "_getCollider", null);
        return EntityObject;
    })(wd.Entity);
    wd.EntityObject = EntityObject;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var UIObject = (function (_super) {
        __extends(UIObject, _super);
        function UIObject() {
            _super.apply(this, arguments);
            this.name = "uiObject" + String(this.uid);
            this.uiManager = wd.UIManager.create(this);
        }
        UIObject.create = function () {
            var obj = new this();
            obj.initWhenCreate();
            return obj;
        };
        UIObject.prototype.beforeUpdateChildren = function (elapsedTime) {
            this.uiManager.update(elapsedTime);
        };
        UIObject.prototype.createTransform = function () {
            return wd.RectTransform.create();
        };
        UIObject.prototype.addComponent = function (component) {
            _super.prototype.addComponent.call(this, component);
            return this;
        };
        UIObject.prototype.addChild = function (child) {
            _super.prototype.addChild.call(this, child);
            return this;
        };
        __decorate([
            wd.require(function (component) {
                if (component instanceof wd.UI) {
                    wd.assert(!!!this.getComponent(wd.UI), wd.Log.info.FUNC_SHOULD("only has one UI component"));
                }
            })
        ], UIObject.prototype, "addComponent", null);
        __decorate([
            wd.require(function (child) {
                wd.assert(this.getComponent(wd.UIRenderer) === child.getComponent(wd.UIRenderer), wd.Log.info.FUNC_MUST_BE("the UIRenderer of UIObject and its children", "the same one"));
            })
        ], UIObject.prototype, "addChild", null);
        return UIObject;
    })(wd.EntityObject);
    wd.UIObject = UIObject;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var GameObject = (function (_super) {
        __extends(GameObject, _super);
        function GameObject() {
            _super.apply(this, arguments);
            this.name = "gameObject" + String(this.uid);
        }
        GameObject.create = function () {
            var obj = new this();
            obj.initWhenCreate();
            return obj;
        };
        GameObject.prototype.getOctree = function () {
            return this.getComponent(wd.Octree);
        };
        GameObject.prototype.createTransform = function () {
            return wd.ThreeDTransform.create();
        };
        GameObject.prototype.getRenderList = function () {
            if (this.hasComponent(wd.Octree)) {
                return this.getOctree().getRenderListByFrustumCull();
            }
            return this.children;
        };
        GameObject.prototype.afterInitChildren = function () {
            if (this.hasComponent(wd.Octree)) {
                return this.getOctree().build();
            }
        };
        return GameObject;
    })(wd.EntityObject);
    wd.GameObject = GameObject;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var SceneDispatcher = (function (_super) {
        __extends(SceneDispatcher, _super);
        function SceneDispatcher() {
            _super.apply(this, arguments);
            this.name = "scene" + String(this.uid);
            this.uiObjectScene = wd.UIObjectScene.create();
            this.gameObjectScene = wd.GameObjectScene.create();
        }
        SceneDispatcher.create = function () {
            var obj = new this();
            obj.initWhenCreate();
            return obj;
        };
        Object.defineProperty(SceneDispatcher.prototype, "scriptList", {
            get: function () {
                return this.gameObjectScene.scriptList;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SceneDispatcher.prototype, "actionManager", {
            get: function () {
                return this.gameObjectScene.actionManager;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SceneDispatcher.prototype, "ambientLight", {
            get: function () {
                return this.gameObjectScene.ambientLight;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SceneDispatcher.prototype, "directionLights", {
            get: function () {
                return this.gameObjectScene.directionLights;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SceneDispatcher.prototype, "pointLights", {
            get: function () {
                return this.gameObjectScene.pointLights;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SceneDispatcher.prototype, "side", {
            get: function () {
                return this.gameObjectScene.side;
            },
            set: function (side) {
                this.gameObjectScene.side = side;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SceneDispatcher.prototype, "shadowMap", {
            get: function () {
                return this.gameObjectScene.shadowMap;
            },
            set: function (shadowMap) {
                this.gameObjectScene.shadowMap = shadowMap;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SceneDispatcher.prototype, "shader", {
            get: function () {
                return this.gameObjectScene.shader;
            },
            set: function (shader) {
                this.gameObjectScene.shader = shader;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SceneDispatcher.prototype, "camera", {
            get: function () {
                return this.gameObjectScene.camera;
            },
            set: function (camera) {
                this.gameObjectScene.camera = camera;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SceneDispatcher.prototype, "isUseProgram", {
            get: function () {
                return this.gameObjectScene.isUseProgram;
            },
            set: function (isUseProgram) {
                this.gameObjectScene.isUseProgram = isUseProgram;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SceneDispatcher.prototype, "physics", {
            get: function () {
                return this.gameObjectScene.physics;
            },
            set: function (physics) {
                this.gameObjectScene.physics = physics;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SceneDispatcher.prototype, "physicsEngineAdapter", {
            get: function () {
                return this.gameObjectScene.physicsEngineAdapter;
            },
            set: function (physicsEngineAdapter) {
                this.gameObjectScene.physicsEngineAdapter = physicsEngineAdapter;
            },
            enumerable: true,
            configurable: true
        });
        SceneDispatcher.prototype.initWhenCreate = function () {
            _super.prototype.initWhenCreate.call(this);
            this.addComponent(wd.SceneEventTriggerDetector.create());
        };
        SceneDispatcher.prototype.useProgram = function (shader) {
            this.gameObjectScene.useProgram(shader);
        };
        SceneDispatcher.prototype.unUseProgram = function () {
            this.gameObjectScene.unUseProgram();
        };
        SceneDispatcher.prototype.addChild = function (child) {
            if (child instanceof wd.GameObject) {
                this.gameObjectScene.addChild(child);
            }
            else if (child instanceof wd.UIObject) {
                this.uiObjectScene.addChild(child);
            }
            child.parent = this;
            return this;
        };
        SceneDispatcher.prototype.addRenderTargetRenderer = function (renderTargetRenderer) {
            return this.gameObjectScene.addRenderTargetRenderer(renderTargetRenderer);
        };
        SceneDispatcher.prototype.removeRenderTargetRenderer = function (renderTargetRenderer) {
            this.gameObjectScene.removeRenderTargetRenderer(renderTargetRenderer);
        };
        SceneDispatcher.prototype.dispose = function () {
            this.gameObjectScene.dispose();
            this.uiObjectScene.dispose();
        };
        SceneDispatcher.prototype.hasChild = function (child) {
            if (child instanceof wd.GameObject) {
                return this.gameObjectScene.hasChild(child);
            }
            else if (child instanceof wd.UIObject) {
                return this.uiObjectScene.hasChild(child);
            }
        };
        SceneDispatcher.prototype.addChildren = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            if (args[0] instanceof wd.EntityObject) {
                var child = args[0];
                this.addChild(child);
            }
            if (args[0] instanceof wdCb.Collection) {
                var children = args[0], self_5 = this;
                children.forEach(function (child) {
                    self_5.addChild(child);
                });
            }
            else if (wd.JudgeUtils.isArray(args[0])) {
                var children = args[0];
                for (var _a = 0; _a < children.length; _a++) {
                    var child = children[_a];
                    this.addChild(child);
                }
            }
            return this;
        };
        SceneDispatcher.prototype.getChildren = function () {
            return this.gameObjectScene.getChildren().addChildren(this.uiObjectScene.getChildren());
        };
        SceneDispatcher.prototype.findChildByUid = function (uid) {
            var result = this.gameObjectScene.findChildByUid(uid);
            if (!result) {
                result = this.uiObjectScene.findChildByUid(uid);
            }
            return result;
        };
        SceneDispatcher.prototype.findChildByTag = function (tag) {
            var result = this.gameObjectScene.findChildByTag(tag);
            if (!result) {
                result = this.uiObjectScene.findChildByTag(tag);
            }
            return result;
        };
        SceneDispatcher.prototype.findChildByName = function (name) {
            var result = this.gameObjectScene.findChildByName(name);
            if (!result) {
                result = this.uiObjectScene.findChildByName(name);
            }
            return result;
        };
        SceneDispatcher.prototype.findChildrenByName = function (name) {
            return this.gameObjectScene.findChildrenByName(name).addChildren(this.uiObjectScene.findChildrenByName(name));
        };
        SceneDispatcher.prototype.removeChild = function (child) {
            if (child instanceof wd.GameObject) {
                return this.gameObjectScene.removeChild(child);
            }
            else if (child instanceof wd.UIObject) {
                return this.uiObjectScene.removeChild(child);
            }
        };
        SceneDispatcher.prototype.onStartLoop = function () {
            this.gameObjectScene.onStartLoop();
            this.uiObjectScene.onStartLoop();
        };
        SceneDispatcher.prototype.onEndLoop = function () {
            this.gameObjectScene.onEndLoop();
            this.uiObjectScene.onEndLoop();
        };
        SceneDispatcher.prototype.onEnter = function () {
            this.gameObjectScene.onEnter();
            this.uiObjectScene.onEnter();
        };
        SceneDispatcher.prototype.onExit = function () {
            this.gameObjectScene.onExit();
            this.uiObjectScene.onExit();
        };
        SceneDispatcher.prototype.onDispose = function () {
            this.gameObjectScene.onDispose();
            this.uiObjectScene.onDispose();
        };
        SceneDispatcher.prototype.execScript = function (method, arg) {
            this.gameObjectScene.execScript.apply(this.gameObjectScene, arguments);
        };
        SceneDispatcher.prototype.execEventScript = function (method, arg) {
            this.gameObjectScene.execEventScript.apply(this.gameObjectScene, arguments);
        };
        SceneDispatcher.prototype.createTransform = function () {
            return null;
        };
        return SceneDispatcher;
    })(wd.EntityObject);
    wd.SceneDispatcher = SceneDispatcher;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var Scene = (function (_super) {
        __extends(Scene, _super);
        function Scene() {
            _super.apply(this, arguments);
        }
        return Scene;
    })(wd.EntityObject);
    wd.Scene = Scene;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var GameObjectScene = (function (_super) {
        __extends(GameObjectScene, _super);
        function GameObjectScene() {
            _super.apply(this, arguments);
            this.side = null;
            this.shadowMap = {
                enable: true,
                softType: ShadowMapSoftType.NONE
            };
            this.shader = null;
            this.camera = null;
            this.isUseProgram = false;
            this.physics = PhysicsConfig.create();
            this.physicsEngineAdapter = null;
            this._lightManager = wd.LightManager.create();
            this._renderTargetRenderers = wdCb.Collection.create();
            this._collisionDetector = wd.CollisionDetector.create();
        }
        GameObjectScene.create = function () {
            var obj = new this();
            obj.initWhenCreate();
            return obj;
        };
        Object.defineProperty(GameObjectScene.prototype, "ambientLight", {
            get: function () {
                return this._lightManager.ambientLight;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameObjectScene.prototype, "directionLights", {
            get: function () {
                return this._lightManager.directionLights;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameObjectScene.prototype, "pointLights", {
            get: function () {
                return this._lightManager.pointLights;
            },
            enumerable: true,
            configurable: true
        });
        GameObjectScene.prototype.init = function () {
            if (this.physics.enable) {
                this.physicsEngineAdapter = wd.PhysicsEngineFactory.create(this.physics.engine);
                this.physicsEngineAdapter.init();
            }
            _super.prototype.init.call(this);
            this._renderTargetRenderers.forEach(function (renderTargetRenderer) { return renderTargetRenderer.init(); });
            return this;
        };
        GameObjectScene.prototype.useProgram = function (shader) {
            this.isUseProgram = true;
            this.shader = shader;
        };
        GameObjectScene.prototype.unUseProgram = function () {
            this.isUseProgram = false;
        };
        GameObjectScene.prototype.addChild = function (child) {
            if (this._isCamera(child)) {
                this.camera = child;
            }
            else if (this._isLight(child)) {
                this._lightManager.addChild(child);
            }
            return _super.prototype.addChild.call(this, child);
        };
        GameObjectScene.prototype.addRenderTargetRenderer = function (renderTargetRenderer) {
            this._renderTargetRenderers.addChild(renderTargetRenderer);
        };
        GameObjectScene.prototype.removeRenderTargetRenderer = function (renderTargetRenderer) {
            this._renderTargetRenderers.removeChild(renderTargetRenderer);
        };
        GameObjectScene.prototype.update = function (elapsedTime) {
            if (this.physics.enable) {
                this.physicsEngineAdapter.update(elapsedTime);
            }
            _super.prototype.update.call(this, elapsedTime);
            this._collisionDetector.detect(this);
        };
        GameObjectScene.prototype.render = function (renderer) {
            var self = this;
            this._renderTargetRenderers.forEach(function (target) {
                target.render(renderer, self.camera);
            });
            _super.prototype.render.call(this, renderer, this.camera);
        };
        GameObjectScene.prototype.createTransform = function () {
            return null;
        };
        GameObjectScene.prototype._isCamera = function (child) {
            return child.hasComponent(wd.CameraController);
        };
        GameObjectScene.prototype._isLight = function (child) {
            return child.hasComponent(wd.Light);
        };
        return GameObjectScene;
    })(wd.Scene);
    wd.GameObjectScene = GameObjectScene;
    var PhysicsConfig = (function () {
        function PhysicsConfig() {
            this._gravity = wd.Vector3.create(0, -9.8, 0);
            this.enable = false;
            this.engine = wd.PhysicsEngineType.CANNON;
            this.iterations = 10;
        }
        PhysicsConfig.create = function () {
            var obj = new this();
            return obj;
        };
        Object.defineProperty(PhysicsConfig.prototype, "gravity", {
            get: function () {
                return this._gravity;
            },
            set: function (gravity) {
                this._gravity = gravity;
            },
            enumerable: true,
            configurable: true
        });
        __decorate([
            wd.operateWorldDataGetterAndSetter("Gravity")
        ], PhysicsConfig.prototype, "gravity", null);
        return PhysicsConfig;
    })();
    wd.PhysicsConfig = PhysicsConfig;
    (function (ShadowMapSoftType) {
        ShadowMapSoftType[ShadowMapSoftType["NONE"] = 0] = "NONE";
        ShadowMapSoftType[ShadowMapSoftType["PCF"] = 1] = "PCF";
    })(wd.ShadowMapSoftType || (wd.ShadowMapSoftType = {}));
    var ShadowMapSoftType = wd.ShadowMapSoftType;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var UIObjectScene = (function (_super) {
        __extends(UIObjectScene, _super);
        function UIObjectScene() {
            _super.apply(this, arguments);
        }
        UIObjectScene.create = function () {
            var obj = new this();
            obj.initWhenCreate();
            return obj;
        };
        UIObjectScene.prototype.onEndLoop = function () {
            _super.prototype.onEndLoop.call(this);
            this._resetAllTransformState();
            this._resetAllRendererClearCanvasFlag();
        };
        UIObjectScene.prototype.onStartLoop = function () {
            _super.prototype.onStartLoop.call(this);
            this._sortSiblingChildren();
        };
        UIObjectScene.prototype.createTransform = function () {
            return null;
        };
        UIObjectScene.prototype.beforeUpdateChildren = function (elapsedTime) {
            var self = this;
            this._resetAllRendererState();
            this.forEach(function (child) {
                var renderer = self._getUIRenderer(child);
                if (renderer.dirty) {
                    if (!renderer.isClearCanvas) {
                        renderer.clearCanvas();
                        renderer.dirtyDuringCurrentLoop = false;
                    }
                    renderer.state = wd.UIRendererState.DIRTY;
                    renderer.resetDirty();
                }
                else {
                    if (renderer.state !== wd.UIRendererState.DIRTY) {
                        renderer.state = wd.UIRendererState.NOT_DIRTY;
                    }
                }
            });
        };
        UIObjectScene.prototype.bindStartLoopEvent = function () {
            wd.EventManager.on(this, wd.EngineEvent.STARTLOOP, this.startLoopHandler);
        };
        UIObjectScene.prototype.bindEndLoopEvent = function () {
            wd.EventManager.on(this, wd.EngineEvent.ENDLOOP, this.endLoopHandler);
        };
        UIObjectScene.prototype._getUIRenderer = function (uiObject) {
            return uiObject.getComponent(wd.UIRenderer);
        };
        UIObjectScene.prototype._resetAllRendererClearCanvasFlag = function () {
            var self = this;
            this.forEach(function (child) {
                var renderer = self._getUIRenderer(child);
                renderer.isClearCanvas = false;
            });
        };
        UIObjectScene.prototype._resetAllRendererState = function () {
            var self = this;
            this.forEach(function (child) {
                var renderer = self._getUIRenderer(child);
                renderer.state = wd.UIRendererState.NORMAL;
            });
        };
        UIObjectScene.prototype._resetAllTransformState = function () {
            var self = this;
            var reset = function (uiObject) {
                if (self._isNotDirtyDuringThisLoop(self._getUIRenderer(uiObject))) {
                    self._resetTransformFlag(uiObject);
                }
                uiObject.forEach(function (child) {
                    reset(child);
                });
            };
            this.forEach(function (child) {
                reset(child);
            });
        };
        UIObjectScene.prototype._isNotDirtyDuringThisLoop = function (renderer) {
            return !renderer.dirtyDuringCurrentLoop;
        };
        UIObjectScene.prototype._resetTransformFlag = function (uiObject) {
            var transform = uiObject.transform;
            transform.isTranslate = false;
            transform.isScale = false;
            transform.isRotate = false;
        };
        UIObjectScene.prototype._sortSiblingChildren = function () {
            var sort = function (uiObject) {
                uiObject.sort(function (a, b) {
                    return a.transform.zIndex - b.transform.zIndex;
                }, true);
                uiObject.forEach(function (child) {
                    sort(child);
                });
            };
            sort(this);
        };
        __decorate([
            wd.require(function (elapsedTime) {
                this.forEach(function (child) {
                    wd.assert(child instanceof wd.UIObject, wd.Log.info.FUNC_MUST_BE("child", "UIObject"));
                    wd.assert(child.hasComponent(wd.UI), wd.Log.info.FUNC_SHOULD("UIObject", "contain ui component"));
                });
            })
        ], UIObjectScene.prototype, "beforeUpdateChildren", null);
        __decorate([
            wd.require(function (uiObject) {
                wd.assert(uiObject.getComponentCount(wd.UIRenderer) <= 1, wd.Log.info.FUNC_SHOULD_NOT("uiObject", "contain more than 1 uiRenderer component"));
            })
        ], UIObjectScene.prototype, "_getUIRenderer", null);
        __decorate([
            wd.ensure(function () {
                var self = this;
                this.getAllChildren().forEach(function (child) {
                    var renderer = self._getUIRenderer(child);
                    wd.assert(!renderer.isClearCanvas, wd.Log.info.FUNC_SHOULD("reset all UIRenderers->isClearCanvas"));
                });
            })
        ], UIObjectScene.prototype, "_resetAllRendererClearCanvasFlag", null);
        __decorate([
            wd.ensure(function () {
                var self = this;
                this.getAllChildren().forEach(function (child) {
                    var renderer = self._getUIRenderer(child);
                    wd.assert(renderer.state === wd.UIRendererState.NORMAL, wd.Log.info.FUNC_SHOULD("reset all UIRenderers->state"));
                });
            })
        ], UIObjectScene.prototype, "_resetAllRendererState", null);
        return UIObjectScene;
    })(wd.Scene);
    wd.UIObjectScene = UIObjectScene;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var Skybox = (function (_super) {
        __extends(Skybox, _super);
        function Skybox() {
            _super.apply(this, arguments);
        }
        Skybox.create = function () {
            var obj = new this();
            obj.initWhenCreate();
            return obj;
        };
        Skybox.prototype.initWhenCreate = function () {
            _super.prototype.initWhenCreate.call(this);
            this.addComponent(wd.SkyboxRenderer.create());
        };
        return Skybox;
    })(wd.GameObject);
    wd.Skybox = Skybox;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var CollisionDetector = (function () {
        function CollisionDetector() {
            this._lastCollideObjects = null;
            this._collisionTable = wdCb.Hash.create();
        }
        CollisionDetector.create = function () {
            var obj = new this();
            return obj;
        };
        CollisionDetector.prototype.detect = function (scene) {
            var checkTargetList = scene.filter(function (entityObject) {
                return entityObject.hasComponent(wd.Collider) || wd.JudgeUtils.isOctreeObject(entityObject);
            }), self = this;
            this._clearCollisionTable();
            checkTargetList.forEach(function (entityObject) {
                if (entityObject.hasComponent(wd.RigidBody)) {
                    return;
                }
                var _a = self._getCollideObjects(entityObject, checkTargetList), targetCollideObjects = _a.targetCollideObjects, sourceCollideObjects = _a.sourceCollideObjects;
                sourceCollideObjects.forEach(function (sourceObject) {
                    if (targetCollideObjects.getCount() > 0) {
                        if (self._isCollisionStart(sourceObject)) {
                            sourceObject.execScript("onCollisionStart", targetCollideObjects);
                            sourceObject.execScript("onContact", targetCollideObjects);
                            self._triggerCollisionEventOfCollideObjectWhichHasRigidBody(targetCollideObjects, sourceObject, ["onCollisionStart", "onContact"]);
                        }
                        else {
                            sourceObject.execScript("onContact", targetCollideObjects);
                            self._triggerCollisionEventOfCollideObjectWhichHasRigidBody(targetCollideObjects, sourceObject, ["onContact"]);
                        }
                        sourceObject.addTag(CollisionTag.COLLIDED);
                        self._lastCollideObjects = targetCollideObjects;
                    }
                    else {
                        if (self._isCollisionEnd(sourceObject)) {
                            sourceObject.execScript("onCollisionEnd");
                            self._triggerCollisionEventOfCollideObjectWhichHasRigidBody(self._lastCollideObjects, sourceObject, ["onCollisionEnd"]);
                        }
                        sourceObject.removeTag(CollisionTag.COLLIDED);
                    }
                });
            });
        };
        CollisionDetector.prototype._getCollideObjects = function (sourceObject, checkTargetList) {
            var targetCollideObjects = wdCb.Collection.create(), sourceCollideObjects = wdCb.Collection.create(), self = this, sourceCollider = null;
            if (wd.JudgeUtils.isOctreeObject(sourceObject)) {
                checkTargetList.forEach(function (targetObject) {
                    if (wd.JudgeUtils.isSelf(sourceObject, targetObject)) {
                        return;
                    }
                    if (wd.JudgeUtils.isOctreeObject(targetObject)) {
                        self._getCollideObjectsWithOctree(targetObject.getOctree(), sourceObject.getOctree(), targetCollideObjects, sourceCollideObjects);
                    }
                    else {
                        self._getCollideObjectsWithOctree(targetObject, sourceObject.getOctree(), targetCollideObjects, sourceCollideObjects);
                    }
                });
                this._recordCollisionTargets(targetCollideObjects, sourceCollideObjects);
                return {
                    targetCollideObjects: targetCollideObjects.removeRepeatItems(),
                    sourceCollideObjects: sourceCollideObjects.removeRepeatItems()
                };
            }
            sourceCollider = sourceObject.getComponent(wd.Collider);
            checkTargetList.forEach(function (targetObject) {
                if (wd.JudgeUtils.isSelf(sourceObject, targetObject)) {
                    return;
                }
                if (wd.JudgeUtils.isOctreeObject(targetObject)) {
                    self._getCollideObjectsWithOctree(targetObject.getOctree(), sourceCollider, sourceObject, targetCollideObjects, sourceCollideObjects);
                }
                else {
                    self._getCollideObjectsByGameObjectToGameObject(sourceObject, sourceCollider, targetObject, targetCollideObjects);
                }
            });
            sourceCollideObjects.addChild(sourceObject);
            if (targetCollideObjects.getCount() > 0) {
                this._recordCollisionTargets(targetCollideObjects, sourceCollideObjects);
            }
            return {
                targetCollideObjects: targetCollideObjects.removeRepeatItems(),
                sourceCollideObjects: sourceCollideObjects.removeRepeatItems()
            };
        };
        CollisionDetector.prototype._getCollideObjectsByGameObjectToGameObject = function (sourceObject, sourceCollider, targetObject, targetCollideObjects) {
            if (this._isTargetCollidedWithSourceInCurrentFrame(sourceObject, targetObject)) {
                targetCollideObjects.addChild(targetObject);
            }
            else if (!(this._isNotTransform(sourceObject) && this._isNotTransform(targetObject) && !sourceObject.hasTag(CollisionTag.COLLIDED))
                && sourceCollider.isCollide(targetObject)) {
                targetCollideObjects.addChild(targetObject);
            }
        };
        CollisionDetector.prototype._clearCollisionTable = function () {
            this._collisionTable.removeAllChildren();
        };
        CollisionDetector.prototype._isTargetCollidedWithSourceInCurrentFrame = function (sourceObject, targetObject) {
            var targetCollideObjects = this._collisionTable.getChild(String(targetObject.uid));
            if (!targetCollideObjects) {
                return false;
            }
            return targetCollideObjects.hasChild(function (targetCollideObject) {
                return wd.JudgeUtils.isEqual(targetCollideObject, sourceObject);
            });
        };
        CollisionDetector.prototype._recordCollisionTargets = function (targetCollideObjects, sourceCollideObjects) {
            var table = this._collisionTable;
            sourceCollideObjects.forEach(function (sourceObject) {
                targetCollideObjects.forEach(function (targetObject) {
                    table.appendChild(String(sourceObject.uid), targetObject);
                });
            });
        };
        CollisionDetector.prototype._getCollideObjectsWithOctree = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            if (args.length === 4) {
                if (args[0] instanceof wd.GameObject && args[1] instanceof wd.Octree) {
                    var targetObject = args[0], sourceOctree = args[1], targetCollideObjects = args[2], sourceCollideObjects = args[3], targetCollider = targetObject.getComponent(wd.Collider), self_6 = this;
                    sourceOctree.getCollideObjects(targetCollider.shape).forEach(function (sourceObject) {
                        self_6._getCollideObjectsByGameObjectToGameObject(targetObject, targetCollider, sourceObject, sourceCollideObjects);
                    });
                    if (sourceCollideObjects.getCount() > 0) {
                        targetCollideObjects.addChild(targetObject);
                    }
                    sourceCollideObjects.removeAllChildren();
                    sourceCollideObjects.addChildren(sourceOctree.getChildren());
                }
                else if (args[0] instanceof wd.Octree && args[1] instanceof wd.Octree) {
                    var targetOctree = args[0], sourceOctree = args[1], targetCollideObjects = args[2], sourceCollideObjects = args[3], self_7 = this;
                    sourceOctree.getChildren()
                        .forEach(function (sourceObject) {
                        var sourceCollider = sourceObject.getComponent(wd.Collider);
                        self_7._getCollideObjectsWithOctree(targetOctree, sourceCollider, sourceObject, targetCollideObjects, sourceCollideObjects);
                    });
                }
            }
            else if (args.length === 5) {
                var targetOctree = args[0], sourceCollider = args[1], sourceObject = args[2], targetCollideObjects = args[3], sourceCollideObjects = args[4], self_8 = this;
                if (!sourceCollider) {
                    return;
                }
                targetOctree.getCollideObjects(sourceCollider.shape).forEach(function (targetObject) {
                    self_8._getCollideObjectsByGameObjectToGameObject(sourceObject, sourceCollider, targetObject, targetCollideObjects);
                });
                sourceCollideObjects.addChild(sourceObject);
                return;
            }
        };
        CollisionDetector.prototype._isCollisionStart = function (entityObject) {
            return !entityObject.hasTag(CollisionTag.COLLIDED);
        };
        CollisionDetector.prototype._isCollisionEnd = function (entityObject) {
            return entityObject.hasTag(CollisionTag.COLLIDED);
        };
        CollisionDetector.prototype._triggerCollisionEventOfCollideObjectWhichHasRigidBody = function (collideObjects, currentGameObject, eventList) {
            collideObjects.filter(function (entityObject) {
                return entityObject.hasComponent(wd.RigidBody);
            })
                .forEach(function (collideObject) {
                for (var _i = 0; _i < eventList.length; _i++) {
                    var eventName = eventList[_i];
                    collideObject.execScript(eventName, wdCb.Collection.create([currentGameObject]));
                }
            });
        };
        CollisionDetector.prototype._isNotTransform = function (entityObject) {
            return !entityObject.transform.isTransform;
        };
        __decorate([
            wd.require(function (sourceObject, checkTargetList) {
                checkTargetList.forEach(function (targetObject) {
                    wd.assert(targetObject instanceof wd.GameObject, wd.Log.info.FUNC_SHOULD("targetObject", "be GameObject"));
                });
            })
        ], CollisionDetector.prototype, "_getCollideObjects", null);
        __decorate([
            wd.require(function (sourceObject, sourceCollider, targetObject, targetCollideObjects) {
                wd.assert(sourceObject instanceof wd.GameObject && targetObject instanceof wd.GameObject, wd.Log.info.FUNC_SHOULD("sourceObject and targetObject", "be GameObject"));
            })
        ], CollisionDetector.prototype, "_getCollideObjectsByGameObjectToGameObject", null);
        return CollisionDetector;
    })();
    wd.CollisionDetector = CollisionDetector;
    var CollisionTag;
    (function (CollisionTag) {
        CollisionTag[CollisionTag["COLLIDED"] = "COLLIDED"] = "COLLIDED";
    })(CollisionTag || (CollisionTag = {}));
})(wd || (wd = {}));
var wd;
(function (wd) {
    var EventListenerMap = (function () {
        function EventListenerMap() {
            this.listenerMap = wdCb.Hash.create();
        }
        EventListenerMap.prototype.hasChild = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            if (args.length === 1 && wd.JudgeUtils.isFunction(args[0])) {
                return this.listenerMap.hasChild(args[0]);
            }
            else {
                var target = args[0], eventName = args[1], list = this.listenerMap.getChild(this.buildKey(target, eventName));
                return list && list.getCount() > 0;
            }
        };
        EventListenerMap.prototype.appendChild = function (target, eventName, data) {
            this.listenerMap.appendChild(this.buildKey(target, eventName), data);
        };
        EventListenerMap.prototype.filter = function (func) {
            return this.listenerMap.filter(func);
        };
        EventListenerMap.prototype.forEach = function (func) {
            return this.listenerMap.forEach(func);
        };
        EventListenerMap.prototype.getEventNameFromKey = function (key) {
            var separator = this.getEventSeparator();
            return key.indexOf(separator) > -1 ? key.split(separator)[1] : key;
        };
        EventListenerMap.prototype.isEventName = function (key, eventName) {
            return key.indexOf("" + this.getEventSeparator() + eventName) > -1
                || key === eventName;
        };
        return EventListenerMap;
    })();
    wd.EventListenerMap = EventListenerMap;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var CustomEventListenerMap = (function (_super) {
        __extends(CustomEventListenerMap, _super);
        function CustomEventListenerMap() {
            _super.apply(this, arguments);
        }
        CustomEventListenerMap.create = function () {
            var obj = new this();
            return obj;
        };
        CustomEventListenerMap.prototype.getChild = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var self = this;
            if (args.length === 1 && wd.JudgeUtils.isString(args[0])) {
                var eventName = args[0];
                return this.listenerMap.getChild(eventName);
            }
            else if (args.length === 1 && args[0] instanceof wd.EntityObject) {
                var target = args[0];
                return this.listenerMap.filter(function (list, key) {
                    return self.isTarget(key, target, list);
                });
            }
            else if (args.length === 2) {
                var target = args[0], eventName = args[1];
                return this.listenerMap.getChild(this.buildKey(target, eventName));
            }
        };
        CustomEventListenerMap.prototype.removeChild = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var self = this;
            if (args.length === 1 && wd.JudgeUtils.isString(args[0])) {
                var eventName = args[0];
                this.listenerMap.removeChild(function (list, key) {
                    return self.isEventName(key, eventName);
                });
            }
            else if (args.length === 1 && args[0] instanceof wd.EntityObject) {
                var target = args[0];
                this.listenerMap.removeChild(function (list, key) {
                    return self.isTarget(key, target, list);
                });
            }
            else if (args.length === 2 && wd.JudgeUtils.isString(args[0])) {
                var eventName = args[0], handler = args[1], list = null;
                if (this.listenerMap.hasChild(eventName)) {
                    list = this.listenerMap.getChild(eventName);
                    wdCb.Collection.create().addChild(list.removeChild(function (val) {
                        return val.originHandler === handler;
                    }));
                    if (list.getCount() === 0) {
                        this.listenerMap.removeChild(eventName);
                    }
                }
            }
            else if (args.length === 2 && wd.JudgeUtils.isNumber(args[0])) {
                var uid = args[0], eventName = args[1];
                this.listenerMap.removeChild(this.buildKey(uid, eventName));
            }
            else if (args.length === 2 && args[0] instanceof wd.EntityObject) {
                var target = args[0], eventName = args[1];
                this.listenerMap.removeChild(this.buildKey(target, eventName));
            }
            else if (args.length === 3 && args[0] instanceof wd.EntityObject) {
                var eventName = args[1], handler = args[2];
                this.listenerMap.forEach(function (list, key) {
                    list.removeChild(function (val) {
                        return val.originHandler === handler;
                    });
                    if (list.getCount() === 0) {
                        return wdCb.$REMOVE;
                    }
                });
            }
        };
        CustomEventListenerMap.prototype.getUidFromKey = function (key) {
            var separator = "" + CustomEventListenerMap.eventSeparator;
            return key.indexOf(separator) > -1 ? Number(key.split(separator)[0]) : null;
        };
        CustomEventListenerMap.prototype.isTarget = function (key, target, list) {
            return key.indexOf(this._buildKeyPrefix(target.uid)) > -1 && list !== undefined;
        };
        CustomEventListenerMap.prototype.getEventSeparator = function () {
            return "" + CustomEventListenerMap.eventSeparator;
        };
        CustomEventListenerMap.prototype.buildKey = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            if (wd.JudgeUtils.isNumber(args[0])) {
                var uid = args[0], eventName = args[1];
                return this._buildKeyWithUid(uid, eventName);
            }
            else if (args[0] instanceof wd.EntityObject) {
                var target = args[0], eventName = args[1];
                return this._buildKeyWithUid(target.uid, eventName);
            }
            else if (args[0] === null) {
                var eventName = args[1];
                return eventName;
            }
        };
        CustomEventListenerMap.prototype._buildKeyWithUid = function (uid, eventName) {
            return "" + this._buildKeyPrefix(uid) + CustomEventListenerMap.eventSeparator + eventName;
        };
        CustomEventListenerMap.prototype._buildKeyPrefix = function (uid) {
            return "" + String(uid);
        };
        CustomEventListenerMap.eventSeparator = "@";
        return CustomEventListenerMap;
    })(wd.EventListenerMap);
    wd.CustomEventListenerMap = CustomEventListenerMap;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var DomEventListenerMap = (function (_super) {
        __extends(DomEventListenerMap, _super);
        function DomEventListenerMap() {
            _super.apply(this, arguments);
        }
        DomEventListenerMap.create = function () {
            var obj = new this();
            return obj;
        };
        DomEventListenerMap.prototype.getChild = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            if (args.length === 1) {
                var eventName = args[0];
                return this.listenerMap.getChild(eventName);
            }
            else if (args.length === 2) {
                var dom = args[0], eventName = args[1];
                return this.listenerMap.getChild(this.buildKey(dom, eventName));
            }
        };
        DomEventListenerMap.prototype.removeChild = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var self = this, result = null;
            if (args.length === 1 && wd.JudgeUtils.isString(args[0])) {
                var eventName = args[0];
                result = this._getEventDataOffDataList(eventName, this.listenerMap.removeChild(function (list, key) {
                    return self.isEventName(key, eventName);
                }));
            }
            else if (args.length === 2 && wd.JudgeUtils.isString(args[0])) {
                var eventName = args[0], handler = args[1], resultList = wdCb.Collection.create();
                this.listenerMap.forEach(function (list, key) {
                    if (self.isEventName(key, eventName)) {
                        var result_1 = list.removeChild(function (val) {
                            return val.originHandler === handler;
                        });
                        if (result_1.getCount() > 0) {
                            resultList.addChild(result_1);
                        }
                        if (list.getCount() === 0) {
                            return wdCb.$REMOVE;
                        }
                    }
                });
                result = this._getEventDataOffDataList(eventName, resultList);
            }
            else if (args.length === 2 && wd.JudgeUtils.isDom(args[0])) {
                var dom = args[0], eventName = args[1];
                result = this._getEventDataOffDataList(eventName, this.listenerMap.removeChild(this.buildKey(dom, eventName)));
            }
            else if (args.length === 3 && wd.JudgeUtils.isDom(args[0])) {
                var eventName = args[1], resultList = wdCb.Collection.create(), handler = args[2];
                this.listenerMap.forEach(function (list, key) {
                    var result = list.removeChild(function (val) {
                        return val.originHandler === handler;
                    });
                    if (result.getCount() > 0) {
                        resultList.addChild(result);
                    }
                    if (list.getCount() === 0) {
                        return wdCb.$REMOVE;
                    }
                });
                result = this._getEventDataOffDataList(eventName, resultList);
            }
            return result;
        };
        DomEventListenerMap.prototype.isDom = function (key, dom, list) {
            return key.indexOf(this._buildKeyPrefix(dom)) > -1 && list !== undefined;
        };
        DomEventListenerMap.prototype.getEventSeparator = function () {
            return "" + DomEventListenerMap.eventSeparator;
        };
        DomEventListenerMap.prototype.buildKey = function (dom, eventName) {
            return "" + this._buildKeyPrefix(dom) + DomEventListenerMap.eventSeparator + eventName;
        };
        DomEventListenerMap.prototype._buildKeyPrefix = function (dom) {
            return dom.id ? "" + dom.tagName + dom.id : "" + dom.tagName;
        };
        DomEventListenerMap.prototype._getEventDataOffDataList = function (eventName, result) {
            return result.map(function (list) {
                return list.map(function (data) {
                    return {
                        dom: data.dom,
                        eventName: eventName,
                        domHandler: data.domHandler
                    };
                });
            });
        };
        DomEventListenerMap.eventSeparator = "@";
        return DomEventListenerMap;
    })(wd.EventListenerMap);
    wd.DomEventListenerMap = DomEventListenerMap;
})(wd || (wd = {}));
var wd;
(function (wd) {
    (function (EventType) {
        EventType[EventType["MOUSE"] = 0] = "MOUSE";
        EventType[EventType["KEYBOARD"] = 1] = "KEYBOARD";
        EventType[EventType["CUSTOM"] = 2] = "CUSTOM";
    })(wd.EventType || (wd.EventType = {}));
    var EventType = wd.EventType;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var BrowserIdentifier;
    (function (BrowserIdentifier) {
        BrowserIdentifier[BrowserIdentifier["FALLBACK"] = "fallback"] = "FALLBACK";
        BrowserIdentifier[BrowserIdentifier["FIREFOX"] = "firefox"] = "FIREFOX";
        BrowserIdentifier[BrowserIdentifier["CHROME"] = "chrome"] = "CHROME";
    })(BrowserIdentifier || (BrowserIdentifier = {}));
    (function (EventName) {
        EventName[EventName["CLICK"] = "click"] = "CLICK";
        EventName[EventName["MOUSEOVER"] = "mouseover"] = "MOUSEOVER";
        EventName[EventName["MOUSEUP"] = "mouseup"] = "MOUSEUP";
        EventName[EventName["MOUSEOUT"] = "mouseout"] = "MOUSEOUT";
        EventName[EventName["MOUSEMOVE"] = "mousemove"] = "MOUSEMOVE";
        EventName[EventName["MOUSEDOWN"] = "mousedown"] = "MOUSEDOWN";
        EventName[EventName["MOUSEWHEEL"] = ("mousewheel|DOMMouseScroll*" + BrowserIdentifier.FIREFOX)] = "MOUSEWHEEL";
        EventName[EventName["MOUSEDRAG"] = "mousedrag"] = "MOUSEDRAG";
        EventName[EventName["KEYDOWN"] = "keydown"] = "KEYDOWN";
        EventName[EventName["KEYUP"] = "keyup"] = "KEYUP";
        EventName[EventName["KEYPRESS"] = "keypress"] = "KEYPRESS";
    })(wd.EventName || (wd.EventName = {}));
    var EventName = wd.EventName;
    var EVENTNAME_SPLITTER = '|', BROWSER_IDENTIFIER = '*';
    var EventNameHandler = (function () {
        function EventNameHandler() {
        }
        EventNameHandler.handleEventName = function (domEventName) {
            var eventName = domEventName, fallbackEventName = null, specifyBrowserEventNameArr = [], result = null;
            for (var _i = 0, _a = eventName.split(EVENTNAME_SPLITTER); _i < _a.length; _i++) {
                var name_1 = _a[_i];
                if (this._isFallbackEventName(name_1)) {
                    fallbackEventName = name_1;
                }
                else {
                    specifyBrowserEventNameArr.push(name_1);
                }
            }
            result = this._getSpecifyBrowserEventName(specifyBrowserEventNameArr);
            return result !== null ? result : fallbackEventName;
        };
        EventNameHandler._isFallbackEventName = function (eventName) {
            return eventName.split(BROWSER_IDENTIFIER).length === 1;
        };
        EventNameHandler._getSpecifyBrowserEventName = function (specifyBrowserEventNameArr) {
            var result = null;
            for (var _i = 0; _i < specifyBrowserEventNameArr.length; _i++) {
                var eventName = specifyBrowserEventNameArr[_i];
                var _a = eventName.split(BROWSER_IDENTIFIER), domEventName = _a[0], browserIdentifier = _a[1];
                switch (browserIdentifier) {
                    case BrowserIdentifier.CHROME:
                        if (bowser.chrome) {
                            result = domEventName;
                        }
                        break;
                    case BrowserIdentifier.FIREFOX:
                        if (bowser.firefox) {
                            result = domEventName;
                        }
                        break;
                    default:
                        break;
                }
                if (result) {
                    break;
                }
            }
            return result;
        };
        return EventNameHandler;
    })();
    wd.EventNameHandler = EventNameHandler;
})(wd || (wd = {}));
var wd;
(function (wd) {
    (function (EventPhase) {
        EventPhase[EventPhase["BROADCAST"] = 0] = "BROADCAST";
        EventPhase[EventPhase["EMIT"] = 1] = "EMIT";
    })(wd.EventPhase || (wd.EventPhase = {}));
    var EventPhase = wd.EventPhase;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var _table = wdCb.Hash.create();
    _table.addChild(wd.EventName.CLICK, wd.EventType.MOUSE);
    _table.addChild(wd.EventName.MOUSEOVER, wd.EventType.MOUSE);
    _table.addChild(wd.EventName.MOUSEOUT, wd.EventType.MOUSE);
    _table.addChild(wd.EventName.MOUSEMOVE, wd.EventType.MOUSE);
    _table.addChild(wd.EventName.MOUSEDOWN, wd.EventType.MOUSE);
    _table.addChild(wd.EventName.MOUSEUP, wd.EventType.MOUSE);
    _table.addChild(wd.EventName.MOUSEWHEEL, wd.EventType.MOUSE);
    _table.addChild(wd.EventName.MOUSEDRAG, wd.EventType.MOUSE);
    _table.addChild(wd.EventName.KEYDOWN, wd.EventType.KEYBOARD);
    _table.addChild(wd.EventName.KEYPRESS, wd.EventType.KEYBOARD);
    _table.addChild(wd.EventName.KEYUP, wd.EventType.KEYBOARD);
    var EventTable = (function () {
        function EventTable() {
        }
        EventTable.getEventType = function (eventName) {
            var result = _table.getChild(eventName);
            if (result === void 0) {
                result = wd.EventType.CUSTOM;
            }
            return result;
        };
        return EventTable;
    })();
    wd.EventTable = EventTable;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var Event = (function () {
        function Event(eventName) {
            this.p_type = null;
            this.name = null;
            this.currentTarget = null;
            this.isStopPropagation = false;
            this.phase = null;
            this.name = eventName;
        }
        Object.defineProperty(Event.prototype, "type", {
            get: function () {
                wd.Log.error(this.p_type === null, wd.Log.info.ABSTRACT_ATTRIBUTE);
                return this.p_type;
            },
            enumerable: true,
            configurable: true
        });
        Event.prototype.stopPropagation = function () {
            this.isStopPropagation = true;
        };
        Event.prototype.copyMember = function (destination, source, memberArr) {
            memberArr.forEach(function (member) {
                destination[member] = source[member];
            });
            return destination;
        };
        return Event;
    })();
    wd.Event = Event;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var DomEvent = (function (_super) {
        __extends(DomEvent, _super);
        function DomEvent(event, eventName) {
            _super.call(this, eventName);
            this._event = null;
            this.event = event;
        }
        Object.defineProperty(DomEvent.prototype, "event", {
            get: function () {
                return this._event;
            },
            set: function (event) {
                this._event = event || wd.root.event;
            },
            enumerable: true,
            configurable: true
        });
        DomEvent.prototype.preventDefault = function () {
            var e = this._event;
            if (bowser.msie && Number(bowser.version) <= 8) {
                e.returnValue = false;
            }
            else {
                e.preventDefault();
            }
        };
        DomEvent.prototype.getDataFromCustomEvent = function (event) {
            this.target = event.target;
            this.currentTarget = event.currentTarget;
            this.isStopPropagation = event.isStopPropagation;
        };
        return DomEvent;
    })(wd.Event);
    wd.DomEvent = DomEvent;
})(wd || (wd = {}));
var wd;
(function (wd_1) {
    var MouseEvent = (function (_super) {
        __extends(MouseEvent, _super);
        function MouseEvent() {
            _super.apply(this, arguments);
            this._location = null;
            this._locationInView = null;
            this._button = null;
            this.lastX = null;
            this.lastY = null;
            this.p_type = wd_1.EventType.MOUSE;
        }
        MouseEvent.create = function (event, eventName) {
            var obj = new this(event, eventName);
            return obj;
        };
        Object.defineProperty(MouseEvent.prototype, "location", {
            get: function () {
                var point = null, e = this.event;
                if (this._location) {
                    return this._location;
                }
                point = wd_1.Point.create();
                if (bowser.msie) {
                    point.x = e.clientX + document.body.scrollLeft || document.documentElement.scrollLeft;
                    point.y = e.clientY + document.body.scrollTop || document.documentElement.scrollTop;
                }
                else {
                    point.x = e.pageX;
                    point.y = e.pageY;
                }
                return point;
            },
            set: function (point) {
                this._location = point;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MouseEvent.prototype, "locationInView", {
            get: function () {
                var point = null, viewOffset = null;
                if (this._locationInView) {
                    return this._locationInView;
                }
                point = this.location;
                viewOffset = wd_1.DeviceManager.getInstance().view.offset;
                return wd_1.Point.create(point.x - viewOffset.x, point.y - viewOffset.y);
            },
            set: function (locationInView) {
                this._locationInView = locationInView;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MouseEvent.prototype, "button", {
            get: function () {
                var e = this.event, mouseButton = null;
                if (this._button) {
                    return this._button;
                }
                if (bowser.msie) {
                    switch (e.button) {
                        case 1:
                            mouseButton = wd_1.MouseButton.LEFT;
                            break;
                        case 4:
                            mouseButton = wd_1.MouseButton.RIGHT;
                            break;
                        case 2:
                            mouseButton = wd_1.MouseButton.CENTER;
                            break;
                        default:
                            wd_1.Log.error(true, wd_1.Log.info.FUNC_NOT_SUPPORT("multi mouse button"));
                            break;
                    }
                }
                else {
                    switch (e.button) {
                        case 0:
                            mouseButton = wd_1.MouseButton.LEFT;
                            break;
                        case 1:
                            mouseButton = wd_1.MouseButton.RIGHT;
                            break;
                        case 2:
                            mouseButton = wd_1.MouseButton.CENTER;
                            break;
                        default:
                            wd_1.Log.error(true, wd_1.Log.info.FUNC_NOT_SUPPORT("multi mouse button"));
                            break;
                    }
                }
                return mouseButton;
            },
            set: function (button) {
                this._button = button;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MouseEvent.prototype, "wheel", {
            get: function () {
                var e = this.event;
                if (e.detail) {
                    return -1 * e.detail;
                }
                if (e.wheelDelta) {
                    return e.wheelDelta / 120;
                }
                return 0;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MouseEvent.prototype, "movementDelta", {
            get: function () {
                var e = this.event, dx = null, wd = null;
                if (this._isPointerLocked()) {
                    dx = e.movementX || e.webkitMovementX || e.mozMovementX || 0;
                    wd = e.movementY || e.webkitMovementY || e.mozMovementY || 0;
                }
                else {
                    var location_1 = this.location, lastX = this.lastX, lastY = this.lastY;
                    if (lastX === null && lastY === null) {
                        dx = 0;
                        wd = 0;
                    }
                    else {
                        dx = location_1.x - lastX;
                        wd = location_1.y - lastY;
                    }
                }
                return {
                    x: dx,
                    y: wd
                };
            },
            enumerable: true,
            configurable: true
        });
        MouseEvent.prototype.copy = function () {
            var eventObj = MouseEvent.create(this.event, this.name);
            return this.copyMember(eventObj, this, ["target", "currentTarget", "isStopPropagation", "phase", "lastX", "lastY"]);
        };
        MouseEvent.prototype._isPointerLocked = function () {
            return !!(document.pointerLockElement || document.mozPointerLockElement || document.webkitPointerLockElement);
        };
        return MouseEvent;
    })(wd_1.DomEvent);
    wd_1.MouseEvent = MouseEvent;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var SPECIAL_KEY_MAP = {
        8: "backspace",
        9: "tab",
        10: "return",
        13: "return",
        16: "shift",
        17: "ctrl",
        18: "alt",
        19: "pause",
        20: "capslock",
        27: "esc",
        32: "space",
        33: "pageup",
        34: "pagedown",
        35: "end",
        36: "home",
        37: "left",
        38: "up",
        39: "right",
        40: "down",
        45: "insert",
        46: "del",
        59: ";",
        61: "=",
        65: "a",
        66: "b",
        67: "c",
        68: "d",
        69: "e",
        70: "f",
        71: "g",
        72: "h",
        73: "i",
        74: "j",
        75: "k",
        76: "l",
        77: "m",
        78: "n",
        79: "o",
        80: "p",
        81: "q",
        82: "r",
        83: "s",
        84: "t",
        85: "u",
        86: "v",
        87: "w",
        88: "x",
        89: "y",
        90: "z",
        96: "0",
        97: "1",
        98: "2",
        99: "3",
        100: "4",
        101: "5",
        102: "6",
        103: "7",
        104: "8",
        105: "9",
        106: "*",
        107: "+",
        109: "-",
        110: ".",
        111: "/",
        112: "f1",
        113: "f2",
        114: "f3",
        115: "f4",
        116: "f5",
        117: "f6",
        118: "f7",
        119: "f8",
        120: "f9",
        121: "f10",
        122: "f11",
        123: "f12",
        144: "numlock",
        145: "scroll",
        173: "-",
        186: ";",
        187: "=",
        188: ",",
        189: "-",
        190: ".",
        191: "/",
        192: "`",
        219: "[",
        220: "\\",
        221: "]",
        222: "'"
    }, SHIFT_KEY_MAP = {
        "`": "~",
        "1": "!",
        "2": "@",
        "3": "#",
        "4": "$",
        "5": "%",
        "6": "^",
        "7": "&",
        "8": "*",
        "9": "(",
        "0": ")",
        "-": "_",
        "=": "+",
        ";": ": ",
        "'": "\"",
        ",": "<",
        ".": ">",
        "/": "?",
        "\\": "|"
    };
    var KeyboardEvent = (function (_super) {
        __extends(KeyboardEvent, _super);
        function KeyboardEvent() {
            _super.apply(this, arguments);
            this.p_type = wd.EventType.KEYBOARD;
            this.keyState = null;
        }
        KeyboardEvent.create = function (event, eventName) {
            var obj = new this(event, eventName);
            return obj;
        };
        Object.defineProperty(KeyboardEvent.prototype, "ctrlKey", {
            get: function () {
                return this.event.ctrlKey;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(KeyboardEvent.prototype, "altKey", {
            get: function () {
                return this.event.altKey;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(KeyboardEvent.prototype, "shiftKey", {
            get: function () {
                return this.event.shiftKey;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(KeyboardEvent.prototype, "metaKey", {
            get: function () {
                return this.event.metaKey;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(KeyboardEvent.prototype, "keyCode", {
            get: function () {
                return this.event.keyCode;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(KeyboardEvent.prototype, "key", {
            get: function () {
                var key = SPECIAL_KEY_MAP[this.keyCode], char = null;
                if (!key) {
                    char = String.fromCharCode(this.keyCode).toLowerCase();
                    if (this.shiftKey) {
                        return SHIFT_KEY_MAP[char];
                    }
                    return char;
                }
                return key;
            },
            enumerable: true,
            configurable: true
        });
        KeyboardEvent.prototype.copy = function () {
            var eventObj = KeyboardEvent.create(this.event, this.name);
            return this.copyMember(eventObj, this, ["target", "currentTarget", "isStopPropagation", "phase", "altKey", "shiftKey", "ctrlKey", "metaKey", "keyCode", "key"]);
        };
        return KeyboardEvent;
    })(wd.DomEvent);
    wd.KeyboardEvent = KeyboardEvent;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var CustomEvent = (function (_super) {
        __extends(CustomEvent, _super);
        function CustomEvent() {
            _super.apply(this, arguments);
            this.userData = null;
            this.p_type = wd.EventType.CUSTOM;
        }
        CustomEvent.create = function (eventName) {
            var obj = new this(eventName);
            return obj;
        };
        CustomEvent.prototype.copyPublicAttri = function (destination, source) {
            var property = null;
            wdCb.ExtendUtils.extend(destination, function (item, property) {
                return property.slice(0, 1) !== "_"
                    && !wd.JudgeUtils.isFunction(item);
            });
            return destination;
        };
        CustomEvent.prototype.copy = function () {
            var eventObj = CustomEvent.create(this.name);
            return this.copyMember(eventObj, this, ["target", "currentTarget", "isStopPropagation", "phase"]);
        };
        CustomEvent.prototype.getDataFromDomEvent = function (event) {
            this.target = event.target;
            this.currentTarget = event.currentTarget;
            this.isStopPropagation = event.isStopPropagation;
        };
        return CustomEvent;
    })(wd.Event);
    wd.CustomEvent = CustomEvent;
})(wd || (wd = {}));
var wd;
(function (wd) {
    (function (MouseButton) {
        MouseButton[MouseButton["LEFT"] = 0] = "LEFT";
        MouseButton[MouseButton["RIGHT"] = 1] = "RIGHT";
        MouseButton[MouseButton["CENTER"] = 2] = "CENTER";
    })(wd.MouseButton || (wd.MouseButton = {}));
    var MouseButton = wd.MouseButton;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var EventListener = (function () {
        function EventListener(option) {
            this.eventType = null;
            this.priority = null;
            this.handlerDataList = wdCb.Collection.create();
            this.eventType = option.eventType;
            this.priority = option.priority || 1;
        }
        EventListener.create = function (option) {
            var obj = new this(option);
            obj.initWhenCreate(option);
            return obj;
        };
        EventListener.prototype.initWhenCreate = function (option) {
            this._setHandlerDataList(option);
        };
        EventListener.prototype._setHandlerDataList = function (option) {
            var i = null, REGEX_HANDER = /on\w+/;
            for (i in option) {
                if (option.hasOwnProperty(i)) {
                    if (REGEX_HANDER.test(i)) {
                        this.handlerDataList.addChild({
                            eventName: this._parseEventName(i),
                            handler: option[i]
                        });
                    }
                }
            }
        };
        EventListener.prototype._parseEventName = function (handlerName) {
            return handlerName.slice(2).toLowerCase();
        };
        return EventListener;
    })();
    wd.EventListener = EventListener;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var EventHandler = (function () {
        function EventHandler() {
        }
        return EventHandler;
    })();
    wd.EventHandler = EventHandler;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var DomEventHandler = (function (_super) {
        __extends(DomEventHandler, _super);
        function DomEventHandler() {
            _super.apply(this, arguments);
        }
        DomEventHandler.prototype.off = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var self = this, eventRegister = wd.DomEventRegister.getInstance(), eventOffDataList = null;
            eventOffDataList = eventRegister.remove.apply(eventRegister, args);
            if (eventOffDataList) {
                eventOffDataList.forEach(function (list) {
                    list.forEach(function (eventOffData) {
                        self._unBind(eventOffData.dom, eventOffData.eventName, eventOffData.domHandler);
                    });
                });
            }
        };
        DomEventHandler.prototype.trigger = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var dom = null, event = null, eventName = null, registerDataList = null;
            if (args.length === 1) {
                event = args[0];
                dom = this.getDefaultDom();
            }
            else {
                dom = args[0];
                event = args[1];
            }
            eventName = event.name;
            registerDataList = wd.DomEventRegister.getInstance().getEventRegisterDataList(dom, eventName);
            if (registerDataList === null || registerDataList.getCount() === 0) {
                return;
            }
            registerDataList.forEach(function (registerData) {
                var eventCopy = event.copy();
                registerData.handler(eventCopy, registerData.eventData);
            });
        };
        DomEventHandler.prototype.clearHandler = function () {
        };
        DomEventHandler.prototype.buildDomHandler = function (dom, eventName) {
            var self = this, context = wd.root;
            return wdCb.EventUtils.bindEvent(context, function (event) {
                self.triggerDomEvent(dom, event, eventName);
            });
        };
        DomEventHandler.prototype.handler = function (dom, eventName, handler, priority) {
            var domHandler = null, originHandler = handler;
            handler = this.addEngineHandler(eventName, handler);
            if (!wd.DomEventRegister.getInstance().isBinded(dom, eventName)) {
                domHandler = this._bind(dom, eventName);
            }
            else {
                domHandler = wd.DomEventRegister.getInstance().getDomHandler(dom, eventName);
            }
            wd.DomEventRegister.getInstance().register(dom, eventName, this.createEventData(), handler, originHandler, domHandler, priority);
        };
        DomEventHandler.prototype._bind = function (dom, eventName) {
            var domHandler = null;
            domHandler = this.buildDomHandler(dom, eventName);
            wdCb.EventUtils.addEvent(dom, wd.EventNameHandler.handleEventName(eventName), domHandler);
            return domHandler;
        };
        DomEventHandler.prototype._unBind = function (dom, eventName, handler) {
            wdCb.EventUtils.removeEvent(dom, wd.EventNameHandler.handleEventName(eventName), handler);
        };
        __decorate([
            wd.virtual
        ], DomEventHandler.prototype, "clearHandler", null);
        return DomEventHandler;
    })(wd.EventHandler);
    wd.DomEventHandler = DomEventHandler;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var MouseEventHandler = (function (_super) {
        __extends(MouseEventHandler, _super);
        function MouseEventHandler() {
            _super.apply(this, arguments);
        }
        MouseEventHandler.getInstance = function () {
            if (this._instance === null) {
                this._instance = new this();
            }
            return this._instance;
        };
        MouseEventHandler.prototype.on = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var dom = null, eventName = null, handler = null, priority = null;
            if (args.length === 3) {
                dom = this.getDefaultDom();
                eventName = args[0];
                handler = args[1];
                priority = args[2];
            }
            else {
                dom = args[0];
                eventName = args[1];
                handler = args[2];
                priority = args[3];
            }
            this.handler(dom, eventName, handler, priority);
        };
        MouseEventHandler.prototype.getDefaultDom = function () {
            return document.body;
        };
        MouseEventHandler.prototype.triggerDomEvent = function (dom, event, eventName) {
            var eventObj = this._createEventObject(dom, event, eventName);
            wd.EventManager.trigger(dom, eventObj);
        };
        MouseEventHandler.prototype.addEngineHandler = function (eventName, handler) {
            var resultHandler = null;
            switch (eventName) {
                case wd.EventName.MOUSEMOVE:
                    resultHandler = this._handleMove(handler);
                    break;
                default:
                    resultHandler = handler;
                    break;
            }
            return resultHandler;
        };
        MouseEventHandler.prototype.createEventData = function () {
            var eventData = wdCb.Hash.create();
            eventData.addChild("lastX", null);
            eventData.addChild("lastY", null);
            return eventData;
        };
        MouseEventHandler.prototype._handleMove = function (handler) {
            var self = this;
            return function (event, eventData) {
                self._copyEventDataToEventObject(event, eventData);
                handler(event);
                self._saveLocation(event, eventData);
            };
        };
        MouseEventHandler.prototype._createEventObject = function (dom, event, eventName) {
            var obj = wd.MouseEvent.create(event ? event : wd.root.event, eventName);
            obj.target = dom;
            return obj;
        };
        MouseEventHandler.prototype._copyEventDataToEventObject = function (event, eventData) {
            event.lastX = eventData.getChild("lastX");
            event.lastY = eventData.getChild("lastY");
        };
        MouseEventHandler.prototype._saveLocation = function (event, eventData) {
            var location = event.location;
            eventData.addChild("lastX", location.x);
            eventData.addChild("lastY", location.y);
        };
        MouseEventHandler._instance = null;
        __decorate([
            wd.require(function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i - 0] = arguments[_i];
                }
                if (args.length === 4) {
                    var dom = args[0];
                    wd.assert(wd.JudgeUtils.isDom(dom), wd.Log.info.FUNC_MUST_BE("first param", "HTMLElement"));
                }
            })
        ], MouseEventHandler.prototype, "on", null);
        return MouseEventHandler;
    })(wd.DomEventHandler);
    wd.MouseEventHandler = MouseEventHandler;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var KeyboardEventHandler = (function (_super) {
        __extends(KeyboardEventHandler, _super);
        function KeyboardEventHandler() {
            _super.apply(this, arguments);
        }
        KeyboardEventHandler.getInstance = function () {
            if (this._instance === null) {
                this._instance = new this();
            }
            return this._instance;
        };
        KeyboardEventHandler.prototype.on = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var eventName = null, handler = null, priority = null;
            if (args.length === 3) {
                eventName = args[0];
                handler = args[1];
                priority = args[2];
            }
            else {
                wd.Log.warn("keyboard event can only bind on document.body");
                eventName = args[1];
                handler = args[2];
                priority = args[3];
            }
            this.handler(this.getDefaultDom(), eventName, handler, priority);
        };
        KeyboardEventHandler.prototype.triggerDomEvent = function (dom, event, eventName) {
            var eventObj = this._createEventObject(dom, event, eventName);
            wd.EventManager.trigger(dom, eventObj);
        };
        KeyboardEventHandler.prototype.getDefaultDom = function () {
            return document.body;
        };
        KeyboardEventHandler.prototype.addEngineHandler = function (eventName, handler) {
            var resultHandler = null;
            switch (eventName) {
                case wd.EventName.KEYDOWN:
                    resultHandler = this._handleKeyDown(handler);
                    break;
                case wd.EventName.KEYUP:
                    resultHandler = this._handleKeyUp(handler);
                    break;
                default:
                    resultHandler = handler;
                    break;
            }
            return resultHandler;
        };
        KeyboardEventHandler.prototype.createEventData = function () {
            var eventData = wdCb.Hash.create();
            eventData.addChild("keyState", {});
            return eventData;
        };
        KeyboardEventHandler.prototype._handleKeyDown = function (handler) {
            var self = this;
            return function (event, eventData) {
                var keyState = eventData.getChild("keyState");
                self._setKeyStateAllFalse(keyState);
                keyState[event.key] = true;
                self._copyEventDataToEventObject(event, eventData);
                handler(event);
            };
        };
        KeyboardEventHandler.prototype._handleKeyUp = function (handler) {
            var self = this;
            return function (event, eventData) {
                self._setKeyStateAllFalse(eventData.getChild("keyState"));
                self._copyEventDataToEventObject(event, eventData);
                handler(event);
            };
        };
        KeyboardEventHandler.prototype._copyEventDataToEventObject = function (event, eventData) {
            event.keyState = eventData.getChild("keyState");
        };
        KeyboardEventHandler.prototype._setKeyStateAllFalse = function (keyState) {
            for (var i in keyState) {
                if (keyState.hasOwnProperty(i)) {
                    keyState[i] = false;
                }
            }
        };
        KeyboardEventHandler.prototype._createEventObject = function (dom, event, eventName) {
            var obj = wd.KeyboardEvent.create(event ? event : wd.root.event, eventName);
            obj.target = dom;
            return obj;
        };
        KeyboardEventHandler._instance = null;
        return KeyboardEventHandler;
    })(wd.DomEventHandler);
    wd.KeyboardEventHandler = KeyboardEventHandler;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var CustomEventHandler = (function (_super) {
        __extends(CustomEventHandler, _super);
        function CustomEventHandler() {
            _super.apply(this, arguments);
        }
        CustomEventHandler.getInstance = function () {
            if (this._instance === null) {
                this._instance = new this();
            }
            return this._instance;
        };
        CustomEventHandler.prototype.on = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            if (args.length === 3) {
                var eventName = args[0], handler = args[1], originHandler = handler, priority = args[2];
                wd.CustomEventRegister.getInstance().register(null, eventName, handler, originHandler, null, priority);
            }
            else if (args.length === 4) {
                var target = args[0], eventName = args[1], handler = args[2], originHandler = handler, priority = args[3];
                wd.CustomEventRegister.getInstance().register(target, eventName, handler, originHandler, null, priority);
            }
        };
        CustomEventHandler.prototype.off = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var eventRegister = wd.CustomEventRegister.getInstance();
            eventRegister.remove.apply(eventRegister, args);
        };
        CustomEventHandler.prototype.trigger = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var event = null;
            if (args.length === 1 || args.length === 2) {
                var userData = null;
                if (args.length === 1) {
                    event = args[0];
                }
                else {
                    event = args[0];
                    userData = args[1];
                }
                return this._triggerEventHandler(event, userData);
            }
            else if (args.length === 3 || args.length === 4) {
                var target = null, userData = null, notSetTarget = null;
                if (args.length === 3) {
                    target = args[0];
                    event = args[1];
                    notSetTarget = args[2];
                }
                else {
                    target = args[0];
                    event = args[1];
                    userData = args[2];
                    notSetTarget = args[3];
                }
                return this._triggerTargetAndEventHandler(target, event, userData, notSetTarget);
            }
        };
        CustomEventHandler.prototype._triggerEventHandler = function (event, userData) {
            var registerDataList = null, self = this;
            registerDataList = wd.CustomEventRegister.getInstance().getEventRegisterDataList(event.name);
            if (registerDataList === null || registerDataList.getCount() === 0) {
                return false;
            }
            registerDataList.forEach(function (registerData) {
                event.currentTarget = registerData.target;
                event.target = registerData.target;
                self._setUserData(event, userData);
                registerData.handler(event);
            });
            return true;
        };
        CustomEventHandler.prototype._triggerTargetAndEventHandler = function (target, event, userData, notSetTarget) {
            var registerDataList = null, isStopPropagation = false, self = this;
            if (!notSetTarget) {
                event.target = target;
            }
            registerDataList = wd.CustomEventRegister.getInstance().getEventRegisterDataList(target, event.name);
            if (registerDataList === null || registerDataList.getCount() === 0) {
                return false;
            }
            registerDataList.forEach(function (registerData) {
                event.currentTarget = registerData.target;
                self._setUserData(event, userData);
                registerData.handler(event);
                if (event.isStopPropagation) {
                    isStopPropagation = true;
                }
            });
            return isStopPropagation;
        };
        CustomEventHandler.prototype._setUserData = function (event, userData) {
            if (userData) {
                event.userData = userData;
            }
        };
        CustomEventHandler._instance = null;
        return CustomEventHandler;
    })(wd.EventHandler);
    wd.CustomEventHandler = CustomEventHandler;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var EventDispatcher = (function () {
        function EventDispatcher() {
        }
        return EventDispatcher;
    })();
    wd.EventDispatcher = EventDispatcher;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var CustomEventDispatcher = (function (_super) {
        __extends(CustomEventDispatcher, _super);
        function CustomEventDispatcher() {
            _super.apply(this, arguments);
        }
        CustomEventDispatcher.getInstance = function () {
            if (this._instance === null) {
                this._instance = new this();
            }
            return this._instance;
        };
        CustomEventDispatcher.prototype.trigger = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            if (args.length === 1) {
                var event_1 = args[0], eventType = event_1.type;
                return wd.EventHandlerFactory.createEventHandler(eventType)
                    .trigger(event_1);
            }
            else if (args.length === 2 && (args[0] instanceof wd.Event)) {
                var event_2 = args[0], userData = args[1], eventType = event_2.type;
                return wd.EventHandlerFactory.createEventHandler(eventType)
                    .trigger(event_2, userData);
            }
            else if ((args.length === 2 && args[0] instanceof wd.EntityObject) || (args.length === 3 && wd.JudgeUtils.isBoolean(args[2]))) {
                var target = args[0], event_3 = args[1], notSetTarget = args[2] === void 0 ? false : args[2], eventType = event_3.type;
                return wd.EventHandlerFactory.createEventHandler(eventType)
                    .trigger(target, event_3, notSetTarget);
            }
            else if (args.length === 3 || args.length === 4) {
                var target = args[0], event_4 = args[1], userData = args[2], notSetTarget = args[3] === void 0 ? false : args[3], eventType = event_4.type;
                return wd.EventHandlerFactory.createEventHandler(eventType)
                    .trigger(target, event_4, userData, notSetTarget);
            }
        };
        CustomEventDispatcher.prototype.emit = function (target, eventObject, userData) {
            var isStopPropagation = false;
            if (!target) {
                return;
            }
            eventObject.phase = wd.EventPhase.EMIT;
            eventObject.target = target;
            do {
                isStopPropagation = this._triggerWithUserData(target, eventObject, userData, true);
                if (isStopPropagation) {
                    break;
                }
                target = target.bubbleParent;
            } while (target);
        };
        CustomEventDispatcher.prototype.broadcast = function (target, eventObject, userData) {
            var self = this;
            var iterator = function (obj) {
                var children = obj.getChildren();
                if (children.getCount() === 0) {
                    return;
                }
                children.forEach(function (child) {
                    self._triggerWithUserData(child, eventObject, userData, true);
                    iterator(child);
                });
            };
            if (!target) {
                return;
            }
            eventObject.phase = wd.EventPhase.BROADCAST;
            eventObject.target = target;
            this._triggerWithUserData(target, eventObject, userData, true);
            iterator(target);
        };
        CustomEventDispatcher.prototype._triggerWithUserData = function (target, event, userData, notSetTarget) {
            return userData ? this.trigger(target, event, userData, notSetTarget)
                : this.trigger(target, event, notSetTarget);
        };
        CustomEventDispatcher._instance = null;
        return CustomEventDispatcher;
    })(wd.EventDispatcher);
    wd.CustomEventDispatcher = CustomEventDispatcher;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var DomEventDispatcher = (function (_super) {
        __extends(DomEventDispatcher, _super);
        function DomEventDispatcher() {
            _super.apply(this, arguments);
        }
        DomEventDispatcher.getInstance = function () {
            if (this._instance === null) {
                this._instance = new this();
            }
            return this._instance;
        };
        DomEventDispatcher.prototype.trigger = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            if (args.length === 1) {
                var event_5 = args[0], eventType = event_5.type;
                wd.EventHandlerFactory.createEventHandler(eventType)
                    .trigger(event_5);
            }
            else if (args.length === 2 && wd.JudgeUtils.isDom(args[0])) {
                var dom = args[0], event_6 = args[1], eventType = event_6.type;
                wd.EventHandlerFactory.createEventHandler(eventType)
                    .trigger(dom, event_6);
            }
        };
        DomEventDispatcher._instance = null;
        return DomEventDispatcher;
    })(wd.EventDispatcher);
    wd.DomEventDispatcher = DomEventDispatcher;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var EventRegister = (function () {
        function EventRegister() {
            this.listenerMap = wd.ABSTRACT_ATTRIBUTE;
        }
        EventRegister.prototype.getEventRegisterDataList = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var result = this.listenerMap.getChild.apply(this.listenerMap, args);
            if (!result) {
                return null;
            }
            return result.sort(function (dataA, dataB) {
                return dataB.priority - dataA.priority;
            });
        };
        EventRegister.prototype.filter = function (func) {
            return this.listenerMap.filter(func);
        };
        EventRegister.prototype.forEach = function (func) {
            return this.listenerMap.forEach(func);
        };
        EventRegister.prototype.getChild = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            return this.listenerMap.getChild.apply(this.listenerMap, Array.prototype.slice.call(arguments, 0));
        };
        EventRegister.prototype.getEventNameFromKey = function (key) {
            return this.listenerMap.getEventNameFromKey(key);
        };
        return EventRegister;
    })();
    wd.EventRegister = EventRegister;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var CustomEventRegister = (function (_super) {
        __extends(CustomEventRegister, _super);
        function CustomEventRegister() {
            _super.apply(this, arguments);
            this.listenerMap = wd.CustomEventListenerMap.create();
        }
        CustomEventRegister.getInstance = function () {
            if (this._instance === null) {
                this._instance = new this();
            }
            return this._instance;
        };
        CustomEventRegister.prototype.register = function (target, eventName, handler, originHandler, domHandler, priority) {
            this.listenerMap.appendChild(target, eventName, {
                target: target,
                eventName: eventName,
                handler: handler,
                originHandler: originHandler,
                domHandler: domHandler,
                priority: priority
            });
        };
        CustomEventRegister.prototype.remove = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var target = args[0];
            if (args.length === 1 && wd.JudgeUtils.isString(args[0])) {
                var eventName = args[0];
                this.listenerMap.removeChild(eventName);
            }
            else if (args.length === 1 && args[0] instanceof wd.EntityObject) {
                this.listenerMap.removeChild(target);
                this._handleAfterAllEventHandlerRemoved(target);
            }
            else if (args.length === 2 && wd.JudgeUtils.isFunction(args[1])) {
                var eventName = args[0], handler = args[1];
                this.listenerMap.removeChild(eventName, handler);
            }
            else if (args.length === 2 && wd.JudgeUtils.isNumber(args[0])) {
                var uid = args[0], eventName = args[1];
                this.listenerMap.removeChild(uid, eventName);
            }
            else if ((args.length === 2 && args[0] instanceof wd.EntityObject) || args.length === 3) {
                this.listenerMap.removeChild.apply(this.listenerMap, args);
                if (this._isAllEventHandlerRemoved(target)) {
                    this._handleAfterAllEventHandlerRemoved(target);
                }
            }
        };
        CustomEventRegister.prototype.setBubbleParent = function (target, parent) {
            target.bubbleParent = parent;
        };
        CustomEventRegister.prototype.getUidFromKey = function (key) {
            return this.listenerMap.getUidFromKey(key);
        };
        CustomEventRegister.prototype.isTarget = function (key, target, list) {
            return this.listenerMap.isTarget(key, target, list);
        };
        CustomEventRegister.prototype._isAllEventHandlerRemoved = function (target) {
            return !this.listenerMap.hasChild(function (list, key) {
                return key.indexOf(String(target.uid)) > -1 && (list && list.getCount() > 0);
            });
        };
        CustomEventRegister.prototype._handleAfterAllEventHandlerRemoved = function (target) {
            this.setBubbleParent(target, null);
        };
        CustomEventRegister._instance = null;
        return CustomEventRegister;
    })(wd.EventRegister);
    wd.CustomEventRegister = CustomEventRegister;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var DomEventRegister = (function (_super) {
        __extends(DomEventRegister, _super);
        function DomEventRegister() {
            _super.apply(this, arguments);
            this.listenerMap = wd.DomEventListenerMap.create();
        }
        DomEventRegister.getInstance = function () {
            if (this._instance === null) {
                this._instance = new this();
            }
            return this._instance;
        };
        DomEventRegister.prototype.register = function (dom, eventName, eventData, handler, originHandler, domHandler, priority) {
            this.listenerMap.appendChild(dom, eventName, {
                dom: dom,
                eventName: eventName,
                eventData: eventData,
                handler: handler,
                originHandler: originHandler,
                domHandler: domHandler,
                priority: priority
            });
        };
        DomEventRegister.prototype.remove = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var result = null;
            if (args.length === 1 && wd.JudgeUtils.isString(args[0])) {
                var eventName = args[0];
                result = this.listenerMap.removeChild(eventName);
            }
            else if (args.length === 2 && wd.JudgeUtils.isFunction(args[1])) {
                var eventName = args[0], handler = args[1];
                result = this.listenerMap.removeChild(eventName, handler);
            }
            else if ((args.length === 2 && wd.JudgeUtils.isDom(args[0])) || args.length === 3) {
                result = this.listenerMap.removeChild.apply(this.listenerMap, args);
            }
            return result;
        };
        DomEventRegister.prototype.isBinded = function (dom, eventName) {
            return this.listenerMap.hasChild(dom, eventName);
        };
        DomEventRegister.prototype.isDom = function (key, dom, list) {
            return this.listenerMap.isDom(key, dom, list);
        };
        DomEventRegister.prototype.getDomHandler = function (dom, eventName) {
            var list = this.getChild(dom, eventName);
            if (list && list.getCount() > 0) {
                return list.getChild(0).domHandler;
            }
        };
        DomEventRegister._instance = null;
        return DomEventRegister;
    })(wd.EventRegister);
    wd.DomEventRegister = DomEventRegister;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var EventBinder = (function () {
        function EventBinder() {
        }
        return EventBinder;
    })();
    wd.EventBinder = EventBinder;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var CustomEventBinder = (function (_super) {
        __extends(CustomEventBinder, _super);
        function CustomEventBinder() {
            _super.apply(this, arguments);
        }
        CustomEventBinder.getInstance = function () {
            if (this._instance === null) {
                this._instance = new this();
            }
            return this._instance;
        };
        CustomEventBinder.prototype.on = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            if (args.length === 2) {
                var eventName = args[0], handler = args[1];
                wd.EventHandlerFactory.createEventHandler(wd.EventTable.getEventType(eventName))
                    .on(eventName, handler);
            }
            else if (args.length === 3 && wd.JudgeUtils.isString(args[0])) {
                var eventName = args[0], handler = args[1], priority = args[2];
                wd.EventHandlerFactory.createEventHandler(wd.EventTable.getEventType(eventName))
                    .on(eventName, handler, priority);
            }
            else if (args.length === 3 && args[0] instanceof wd.EntityObject) {
                var target = args[0], eventName = args[1], handler = args[2];
                wd.EventHandlerFactory.createEventHandler(wd.EventTable.getEventType(eventName))
                    .on(target, eventName, handler);
            }
            else if (args.length === 4) {
                var target = args[0], eventName = args[1], handler = args[2], priority = args[3];
                wd.EventHandlerFactory.createEventHandler(wd.EventTable.getEventType(eventName))
                    .on(target, eventName, handler, priority);
            }
        };
        CustomEventBinder.prototype.off = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var eventRegister = wd.CustomEventRegister.getInstance();
            if (args.length === 0) {
                eventRegister.forEach(function (list, key) {
                    var eventName = eventRegister.getEventNameFromKey(key), targetUid = eventRegister.getUidFromKey(key);
                    if (!targetUid) {
                        wd.EventHandlerFactory.createEventHandler(wd.EventTable.getEventType(eventName))
                            .off(eventName);
                    }
                    else {
                        wd.EventHandlerFactory.createEventHandler(wd.EventTable.getEventType(eventName)).off(targetUid, eventName);
                    }
                });
            }
            else if (args.length === 1 && wd.JudgeUtils.isString(args[0])) {
                var eventName = args[0];
                eventRegister.forEach(function (list, key) {
                    var registeredEventName = eventRegister.getEventNameFromKey(key);
                    if (registeredEventName === eventName) {
                        wd.EventHandlerFactory.createEventHandler(wd.EventTable.getEventType(eventName))
                            .off(eventName);
                    }
                });
            }
            else if (args.length === 1 && args[0] instanceof wd.EntityObject) {
                var target = args[0];
                eventRegister.forEach(function (list, key) {
                    var eventName = eventRegister.getEventNameFromKey(key);
                    if (eventRegister.isTarget(key, target, list)) {
                        wd.EventHandlerFactory.createEventHandler(wd.EventTable.getEventType(eventName))
                            .off(target, eventName);
                    }
                });
            }
            else if (args.length === 2 && wd.JudgeUtils.isString(args[0])) {
                var eventName = args[0], handler = args[1];
                wd.EventHandlerFactory.createEventHandler(wd.EventTable.getEventType(eventName))
                    .off(eventName, handler);
            }
            else if (args.length === 2 && args[0] instanceof wd.EntityObject) {
                var target = args[0], eventName = args[1];
                wd.EventHandlerFactory.createEventHandler(wd.EventTable.getEventType(eventName))
                    .off(target, eventName);
            }
            else if (args.length === 3 && args[0] instanceof wd.EntityObject) {
                var target = args[0], eventName = args[1], handler = args[2];
                wd.EventHandlerFactory.createEventHandler(wd.EventTable.getEventType(eventName))
                    .off(target, eventName, handler);
            }
        };
        CustomEventBinder.prototype._checkEventSeparator = function (eventName) {
            wd.assert(eventName.indexOf(wd.CustomEventListenerMap.eventSeparator) === -1, wd.Log.info.FUNC_SHOULD_NOT("eventName", "contain " + wd.CustomEventListenerMap.eventSeparator));
        };
        CustomEventBinder._instance = null;
        __decorate([
            wd.require(function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i - 0] = arguments[_i];
                }
                if (args.length === 1) {
                }
                else if (args.length === 2) {
                    var eventName = args[0];
                    this._checkEventSeparator(eventName);
                }
                else if (args.length === 3 && wd.JudgeUtils.isString(args[0])) {
                    var eventName = args[0];
                    this._checkEventSeparator(eventName);
                }
                else if (args.length === 3 && args[0] instanceof wd.EntityObject) {
                    var eventName = args[1];
                    this._checkEventSeparator(eventName);
                }
                else if (args.length === 4) {
                    var eventName = args[1];
                    this._checkEventSeparator(eventName);
                }
            })
        ], CustomEventBinder.prototype, "on", null);
        return CustomEventBinder;
    })(wd.EventBinder);
    wd.CustomEventBinder = CustomEventBinder;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var DomEventBinder = (function (_super) {
        __extends(DomEventBinder, _super);
        function DomEventBinder() {
            _super.apply(this, arguments);
        }
        DomEventBinder.getInstance = function () {
            if (this._instance === null) {
                this._instance = new this();
            }
            return this._instance;
        };
        DomEventBinder.prototype.on = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            if (args.length === 1) {
                var listener = !(args[0] instanceof wd.EventListener) ? wd.EventListener.create(args[0]) : args[0];
                listener.handlerDataList.forEach(function (handlerData) {
                    wd.EventHandlerFactory.createEventHandler(listener.eventType)
                        .on(handlerData.eventName, handlerData.handler, listener.priority);
                });
            }
            else if (args.length === 2 && wd.JudgeUtils.isString(args[0])) {
                var eventName = args[0], handler = args[1];
                wd.EventHandlerFactory.createEventHandler(wd.EventTable.getEventType(eventName))
                    .on(eventName, handler);
            }
            else if (args.length === 2 && wd.JudgeUtils.isDom(args[0])) {
                var dom = args[0], listener = !(args[0] instanceof wd.EventListener) ? wd.EventListener.create(args[0]) : args[0];
                listener.handlerDataList.forEach(function (handlerData) {
                    wd.EventHandlerFactory.createEventHandler(listener.eventType)
                        .on(dom, handlerData.eventName, handlerData.handler, listener.priority);
                });
            }
            else if (args.length === 3 && wd.JudgeUtils.isString(args[0])) {
                var eventName = args[0], handler = args[1], priority = args[2];
                wd.EventHandlerFactory.createEventHandler(wd.EventTable.getEventType(eventName))
                    .on(eventName, handler, priority);
            }
            else if (args.length === 3 && wd.JudgeUtils.isDom(args[0])) {
                var dom = args[0], eventName = args[1], handler = args[2];
                wd.EventHandlerFactory.createEventHandler(wd.EventTable.getEventType(eventName))
                    .on(dom, eventName, handler);
            }
            else if (args.length === 4) {
                var dom = args[0], eventName = args[1], handler = args[2], priority = args[3];
                wd.EventHandlerFactory.createEventHandler(wd.EventTable.getEventType(eventName))
                    .on(dom, eventName, handler, priority);
            }
        };
        DomEventBinder.prototype.off = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var eventRegister = wd.DomEventRegister.getInstance();
            if (args.length === 0) {
                eventRegister.forEach(function (list, key) {
                    var eventName = eventRegister.getEventNameFromKey(key);
                    wd.EventHandlerFactory.createEventHandler(wd.EventTable.getEventType(eventName))
                        .off(eventName);
                });
            }
            else if (args.length === 1 && wd.JudgeUtils.isString(args[0])) {
                var eventName = args[0];
                eventRegister.forEach(function (list, key) {
                    var registeredEventName = eventRegister.getEventNameFromKey(key);
                    if (registeredEventName === eventName) {
                        wd.EventHandlerFactory.createEventHandler(wd.EventTable.getEventType(eventName))
                            .off(eventName);
                    }
                });
            }
            else if (args.length === 1 && wd.JudgeUtils.isDom(args[0])) {
                var dom = args[0];
                eventRegister.forEach(function (list, key) {
                    var eventName = eventRegister.getEventNameFromKey(key);
                    if (eventRegister.isDom(key, dom, list)) {
                        wd.EventHandlerFactory.createEventHandler(wd.EventTable.getEventType(eventName))
                            .off(dom, eventName);
                    }
                });
            }
            else if (args.length === 2 && wd.JudgeUtils.isString(args[0])) {
                var eventName = args[0], handler = args[1];
                wd.EventHandlerFactory.createEventHandler(wd.EventTable.getEventType(eventName))
                    .off(eventName, handler);
            }
            else if (args.length === 2 && wd.JudgeUtils.isDom(args[0])) {
                var dom = args[0], eventName = args[1];
                wd.EventHandlerFactory.createEventHandler(wd.EventTable.getEventType(eventName))
                    .off(dom, eventName);
            }
            else if (args.length === 3) {
                var dom = args[0], eventName = args[1], handler = args[2];
                wd.EventHandlerFactory.createEventHandler(wd.EventTable.getEventType(eventName))
                    .off(dom, eventName, handler);
            }
        };
        DomEventBinder.prototype._checkEventSeparator = function (eventName) {
            wd.assert(eventName.indexOf(wd.DomEventListenerMap.eventSeparator) === -1, wd.Log.info.FUNC_SHOULD_NOT("eventName", "contain " + wd.DomEventListenerMap.eventSeparator));
        };
        DomEventBinder._instance = null;
        __decorate([
            wd.require(function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i - 0] = arguments[_i];
                }
                if (args.length === 1) {
                }
                else if (args.length === 2) {
                }
                else if (args.length === 3 && wd.JudgeUtils.isString(args[0])) {
                    var eventName = args[0];
                    this._checkEventSeparator(eventName);
                }
                else if (args.length === 3 && wd.JudgeUtils.isDom(args[0])) {
                    var eventName = args[1];
                    this._checkEventSeparator(eventName);
                }
                else if (args.length === 4) {
                    var eventName = args[1];
                    this._checkEventSeparator(eventName);
                }
            })
        ], DomEventBinder.prototype, "on", null);
        return DomEventBinder;
    })(wd.EventBinder);
    wd.DomEventBinder = DomEventBinder;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var EventHandlerFactory = (function () {
        function EventHandlerFactory() {
        }
        EventHandlerFactory.createEventHandler = function (eventType) {
            var handler = null;
            switch (eventType) {
                case wd.EventType.MOUSE:
                    handler = wd.MouseEventHandler.getInstance();
                    break;
                case wd.EventType.KEYBOARD:
                    handler = wd.KeyboardEventHandler.getInstance();
                    break;
                case wd.EventType.CUSTOM:
                    handler = wd.CustomEventHandler.getInstance();
                    break;
                default:
                    wd.Log.error(true, wd.Log.info.FUNC_INVALID("eventType"));
                    break;
            }
            return handler;
        };
        return EventHandlerFactory;
    })();
    wd.EventHandlerFactory = EventHandlerFactory;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var EventBinderFactory = (function () {
        function EventBinderFactory() {
        }
        EventBinderFactory.createEventBinder = function (eventName) {
            var binder = null, eventType = wd.EventTable.getEventType(eventName);
            switch (eventType) {
                case wd.EventType.MOUSE:
                case wd.EventType.KEYBOARD:
                    binder = wd.DomEventBinder.getInstance();
                    break;
                case wd.EventType.CUSTOM:
                    binder = wd.CustomEventBinder.getInstance();
                    break;
                default:
                    wd.Log.error(true, wd.Log.info.FUNC_INVALID("eventName:" + eventName));
                    break;
            }
            return binder;
        };
        return EventBinderFactory;
    })();
    wd.EventBinderFactory = EventBinderFactory;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var EventDispatcherFactory = (function () {
        function EventDispatcherFactory() {
        }
        EventDispatcherFactory.createEventDispatcher = function (event) {
            var dispatcher = null, eventType = event.type;
            switch (eventType) {
                case wd.EventType.MOUSE:
                case wd.EventType.KEYBOARD:
                    dispatcher = wd.DomEventDispatcher.getInstance();
                    break;
                case wd.EventType.CUSTOM:
                    dispatcher = wd.CustomEventDispatcher.getInstance();
                    break;
                default:
                    wd.Log.error(true, wd.Log.info.FUNC_INVALID("event:" + event));
                    break;
            }
            return dispatcher;
        };
        return EventDispatcherFactory;
    })();
    wd.EventDispatcherFactory = EventDispatcherFactory;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var EventManager = (function () {
        function EventManager() {
        }
        EventManager.on = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            if (args.length === 1) {
                var listener = args[0], eventBinder = wd.DomEventBinder.getInstance();
                eventBinder.on(listener);
            }
            else if (args.length === 2 && wd.JudgeUtils.isString(args[0])) {
                var eventName = args[0], handler = args[1], priority = 1, eventBinder = wd.EventBinderFactory.createEventBinder(eventName);
                eventBinder.on(eventName, handler, priority);
            }
            else if (args.length === 2 && wd.JudgeUtils.isDom(args[0])) {
                var dom = args[0], listener = args[1], eventBinder = wd.DomEventBinder.getInstance();
                eventBinder.on(dom, listener);
            }
            else if (args.length === 3 && wd.JudgeUtils.isString(args[0])) {
                var eventName = args[0], handler = args[1], priority = args[2], eventBinder = wd.EventBinderFactory.createEventBinder(eventName);
                eventBinder.on(eventName, handler, priority);
            }
            else if (args.length === 3 && args[0] instanceof wd.EntityObject) {
                var target = args[0], eventName = args[1], handler = args[2], priority = 1, eventBinder = wd.CustomEventBinder.getInstance();
                eventBinder.on(target, eventName, handler, priority);
            }
            else if (args.length === 3 && wd.JudgeUtils.isDom(args[0])) {
                var dom = args[0], eventName = args[1], handler = args[2], priority = 1, eventBinder = wd.DomEventBinder.getInstance();
                eventBinder.on(dom, eventName, handler, priority);
            }
            else if (args.length === 4 && args[0] instanceof wd.EntityObject) {
                var target = args[0], eventName = args[1], handler = args[2], priority = args[3], eventBinder = wd.CustomEventBinder.getInstance();
                eventBinder.on(target, eventName, handler, priority);
            }
            else if (args.length === 4 && wd.JudgeUtils.isDom(args[0])) {
                var dom = args[0], eventName = args[1], handler = args[2], priority = args[3], eventBinder = wd.DomEventBinder.getInstance();
                eventBinder.on(dom, eventName, handler, priority);
            }
        };
        EventManager.off = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            if (args.length === 0) {
                var customEventBinder = wd.CustomEventBinder.getInstance(), domEventBinder = wd.DomEventBinder.getInstance();
                customEventBinder.off();
                domEventBinder.off();
            }
            else if (args.length === 1 && wd.JudgeUtils.isString(args[0])) {
                var eventName = args[0], eventBinder = wd.EventBinderFactory.createEventBinder(eventName);
                eventBinder.off(eventName);
            }
            else if (args.length === 1 && args[0] instanceof wd.EntityObject) {
                var eventName = args[0], eventBinder = wd.CustomEventBinder.getInstance();
                eventBinder.off(eventName);
            }
            else if (args.length === 1 && wd.JudgeUtils.isDom(args[0])) {
                var eventName = args[0], eventBinder = wd.DomEventBinder.getInstance();
                eventBinder.off(eventName);
            }
            else if (args.length === 2 && wd.JudgeUtils.isString(args[0])) {
                var eventName = args[0], handler = args[1], eventBinder = wd.EventBinderFactory.createEventBinder(eventName);
                eventBinder.off(eventName, handler);
            }
            else if (args.length === 2 && args[0] instanceof wd.EntityObject) {
                var target = args[0], eventName = args[1], eventBinder = wd.CustomEventBinder.getInstance();
                eventBinder.off(target, eventName);
            }
            else if (args.length === 2 && wd.JudgeUtils.isDom(args[0])) {
                var dom = args[0], eventName = args[1], eventBinder = wd.DomEventBinder.getInstance();
                eventBinder.off(dom, eventName);
            }
            else if (args.length === 3 && args[0] instanceof wd.EntityObject) {
                var target = args[0], eventName = args[1], handler = args[2], eventBinder = wd.CustomEventBinder.getInstance();
                eventBinder.off(target, eventName, handler);
            }
            else if (args.length === 3 && wd.JudgeUtils.isDom(args[0])) {
                var dom = args[0], eventName = args[1], handler = args[2], eventBinder = wd.DomEventBinder.getInstance();
                eventBinder.off(dom, eventName, handler);
            }
        };
        EventManager.trigger = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            if (args.length === 1) {
                var event_7 = args[0], eventDispatcher = wd.EventDispatcherFactory.createEventDispatcher(event_7);
                eventDispatcher.trigger(event_7);
            }
            else if (args.length === 2 && args[0] instanceof wd.Event) {
                var event_8 = args[0], userData = args[1], eventDispatcher = wd.CustomEventDispatcher.getInstance();
                eventDispatcher.trigger(event_8, userData);
            }
            else if (args.length === 2 && args[0] instanceof wd.EntityObject) {
                var target = args[0], event_9 = args[1], eventDispatcher = wd.CustomEventDispatcher.getInstance();
                eventDispatcher.trigger(target, event_9);
            }
            else if (args.length === 2 && wd.JudgeUtils.isDom(args[0])) {
                var dom = args[0], event_10 = args[1], eventDispatcher = wd.DomEventDispatcher.getInstance();
                eventDispatcher.trigger(dom, event_10);
            }
            else if (args.length === 3) {
                var target = args[0], event_11 = args[1], userData = args[2], eventDispatcher = wd.CustomEventDispatcher.getInstance();
                eventDispatcher.trigger(target, event_11, userData);
            }
            else if (args.length === 4) {
                var target = args[0], event_12 = args[1], userData = args[2], notSetTarget = args[3], eventDispatcher = wd.CustomEventDispatcher.getInstance();
                eventDispatcher.trigger(target, event_12, userData, notSetTarget);
            }
        };
        EventManager.broadcast = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var eventDispatcher = wd.CustomEventDispatcher.getInstance();
            eventDispatcher.broadcast.apply(eventDispatcher, args);
        };
        EventManager.emit = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var eventDispatcher = wd.CustomEventDispatcher.getInstance();
            eventDispatcher.emit.apply(eventDispatcher, args);
        };
        EventManager.fromEvent = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var addHandler = null, removeHandler = null;
            if (args.length === 1) {
                var eventName = args[0];
                addHandler = function (handler) {
                    EventManager.on(eventName, handler);
                };
                removeHandler = function (handler) {
                    EventManager.off(eventName, handler);
                };
            }
            else if (args.length === 2 && wd.JudgeUtils.isNumber(args[1])) {
                var eventName = args[0], priority = args[1];
                addHandler = function (handler) {
                    EventManager.on(eventName, handler, priority);
                };
                removeHandler = function (handler) {
                    EventManager.off(eventName, handler);
                };
            }
            else if (args.length === 2) {
                var eventName = args[1];
                addHandler = function (handler) {
                    EventManager.on(args[0], eventName, handler);
                };
                removeHandler = function (handler) {
                    EventManager.off(args[0], eventName, handler);
                };
            }
            else if (args.length === 3) {
                var eventName = args[1], priority = args[2];
                addHandler = function (handler) {
                    EventManager.on(args[0], eventName, handler, priority);
                };
                removeHandler = function (handler) {
                    EventManager.off(args[0], eventName, handler);
                };
            }
            return wdFrp.fromEventPattern(addHandler, removeHandler);
        };
        EventManager.setBubbleParent = function (target, parent) {
            wd.CustomEventRegister.getInstance().setBubbleParent(target, parent);
        };
        __decorate([
            wd.require(function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i - 0] = arguments[_i];
                }
                if (args[0] instanceof wd.EntityObject) {
                    var eventName = args[1];
                    wd.assert(wd.EventTable.getEventType(eventName) === wd.EventType.CUSTOM, wd.Log.info.FUNC_MUST_BE("event", "custom event"));
                }
                else if (wd.JudgeUtils.isDom(args[0])) {
                    var eventName = args[1], eventType = wd.EventTable.getEventType(eventName);
                    wd.assert(eventType === wd.EventType.MOUSE || eventType === wd.EventType.KEYBOARD, wd.Log.info.FUNC_MUST_BE("event", "dom event"));
                }
            })
        ], EventManager, "on", null);
        __decorate([
            wd.require(function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i - 0] = arguments[_i];
                }
                if (args.length > 2 && args[0] instanceof wd.EntityObject) {
                    var eventName = args[1];
                    wd.assert(wd.EventTable.getEventType(eventName) === wd.EventType.CUSTOM, wd.Log.info.FUNC_MUST_BE("event", "custom event"));
                }
                else if (args.length > 2 && wd.JudgeUtils.isDom(args[0])) {
                    var eventName = args[1], eventType = wd.EventTable.getEventType(eventName);
                    wd.assert(eventType === wd.EventType.MOUSE || eventType === wd.EventType.KEYBOARD, wd.Log.info.FUNC_MUST_BE("event", "dom event"));
                }
            })
        ], EventManager, "off", null);
        __decorate([
            wd.require(function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i - 0] = arguments[_i];
                }
                if (args.length === 2 && args[0] instanceof wd.Event) {
                    var event_13 = args[0];
                    wd.assert(event_13 instanceof wd.CustomEvent, wd.Log.info.FUNC_MUST_BE("event type", "CUSTOM"));
                }
                else if (args[0] instanceof wd.EntityObject) {
                    var event_14 = args[1];
                    wd.assert(event_14 instanceof wd.CustomEvent, wd.Log.info.FUNC_MUST_BE("event type", "CUSTOM"));
                }
            })
        ], EventManager, "trigger", null);
        __decorate([
            wd.require(function (target, eventObject, userData) {
                wd.assert(eventObject instanceof wd.CustomEvent, wd.Log.info.FUNC_MUST_BE("eventObject", "CustomEvent"));
            })
        ], EventManager, "broadcast", null);
        __decorate([
            wd.require(function (target, eventObject, userData) {
                wd.assert(eventObject instanceof wd.CustomEvent, wd.Log.info.FUNC_MUST_BE("eventObject", "CustomEvent"));
            })
        ], EventManager, "emit", null);
        __decorate([
            wd.require(function (target, parent) {
                wd.assert(target instanceof wd.EntityObject, "only EntityObject can setBubleParent");
            })
        ], EventManager, "setBubbleParent", null);
        return EventManager;
    })();
    wd.EventManager = EventManager;
})(wd || (wd = {}));
var wd;
(function (wd) {
    (function (EngineEvent) {
        EngineEvent[EngineEvent["STARTLOOP"] = "dy_startLoop"] = "STARTLOOP";
        EngineEvent[EngineEvent["ENDLOOP"] = "dy_endLoop"] = "ENDLOOP";
        EngineEvent[EngineEvent["BEFORE_GAMEOBJECT_INIT"] = "dy_beforeGameObjectInit"] = "BEFORE_GAMEOBJECT_INIT";
        EngineEvent[EngineEvent["AFTER_GAMEOBJECT_INIT"] = "dy_afterGameObjectInit"] = "AFTER_GAMEOBJECT_INIT";
        EngineEvent[EngineEvent["AFTER_GAMEOBJECT_INIT_RIGIDBODY_ADD_CONSTRAINT"] = "dy_afterGameObjectInit_rigidBody_addConstraint"] = "AFTER_GAMEOBJECT_INIT_RIGIDBODY_ADD_CONSTRAINT";
        EngineEvent[EngineEvent["MOUSE_CLICK"] = "dy_mouseclick"] = "MOUSE_CLICK";
        EngineEvent[EngineEvent["MOUSE_DOWN"] = "dy_mousedown"] = "MOUSE_DOWN";
        EngineEvent[EngineEvent["MOUSE_UP"] = "dy_mouseup"] = "MOUSE_UP";
        EngineEvent[EngineEvent["MOUSE_MOVE"] = "dy_mousemove"] = "MOUSE_MOVE";
        EngineEvent[EngineEvent["MOUSE_OVER"] = "dy_mouseover"] = "MOUSE_OVER";
        EngineEvent[EngineEvent["MOUSE_OUT"] = "dy_mouseout"] = "MOUSE_OUT";
        EngineEvent[EngineEvent["MOUSE_WHEEL"] = "dy_mousewheel"] = "MOUSE_WHEEL";
        EngineEvent[EngineEvent["MOUSE_DRAG"] = "dy_mousedrag"] = "MOUSE_DRAG";
        EngineEvent[EngineEvent["MATERIAL_CHANGE"] = "dy_material_change"] = "MATERIAL_CHANGE";
        EngineEvent[EngineEvent["UI_WIDTH_CHANGE"] = "dy_ui_width_change"] = "UI_WIDTH_CHANGE";
        EngineEvent[EngineEvent["UI_HEIGHT_CHANGE"] = "dy_ui_height_change"] = "UI_HEIGHT_CHANGE";
        EngineEvent[EngineEvent["TRANSFORM_TRANSLATE"] = "dy_transform_translate"] = "TRANSFORM_TRANSLATE";
        EngineEvent[EngineEvent["TRANSFORM_ROTATE"] = "dy_transform_rotate"] = "TRANSFORM_ROTATE";
        EngineEvent[EngineEvent["TRANSFORM_SCALE"] = "dy_transform_scale"] = "TRANSFORM_SCALE";
    })(wd.EngineEvent || (wd.EngineEvent = {}));
    var EngineEvent = wd.EngineEvent;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var EventTriggerDetector = (function (_super) {
        __extends(EventTriggerDetector, _super);
        function EventTriggerDetector() {
            _super.apply(this, arguments);
        }
        return EventTriggerDetector;
    })(wd.Component);
    wd.EventTriggerDetector = EventTriggerDetector;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var UIEventTriggerDetector = (function (_super) {
        __extends(UIEventTriggerDetector, _super);
        function UIEventTriggerDetector() {
            _super.apply(this, arguments);
        }
        UIEventTriggerDetector.create = function () {
            var obj = new this();
            return obj;
        };
        UIEventTriggerDetector.prototype.isTrigger = function (e) {
            var transform = this.entityObject.transform, width = transform.width, height = transform.height, position = transform.position, locationInView = e.locationInView, leftUpCornerPosition = null;
            leftUpCornerPosition = wd.Vector2.create(position.x - width / 2, position.y - height / 2);
            return wd.EventTriggerDetectorUtils.isInRect(locationInView, leftUpCornerPosition, width, height);
        };
        return UIEventTriggerDetector;
    })(wd.EventTriggerDetector);
    wd.UIEventTriggerDetector = UIEventTriggerDetector;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var RayCasterEventTriggerDetector = (function (_super) {
        __extends(RayCasterEventTriggerDetector, _super);
        function RayCasterEventTriggerDetector() {
            _super.apply(this, arguments);
        }
        RayCasterEventTriggerDetector.create = function () {
            var obj = new this();
            return obj;
        };
        RayCasterEventTriggerDetector.prototype.isTrigger = function (e) {
            var scene = wd.Director.getInstance().scene, cameraController = scene.camera.getComponent(wd.CameraController), locationInView = e.locationInView;
            return cameraController.isIntersectWithRay(this.entityObject, locationInView.x, locationInView.y);
        };
        return RayCasterEventTriggerDetector;
    })(wd.EventTriggerDetector);
    wd.RayCasterEventTriggerDetector = RayCasterEventTriggerDetector;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var SceneEventTriggerDetector = (function (_super) {
        __extends(SceneEventTriggerDetector, _super);
        function SceneEventTriggerDetector() {
            _super.apply(this, arguments);
        }
        SceneEventTriggerDetector.create = function () {
            var obj = new this();
            return obj;
        };
        SceneEventTriggerDetector.prototype.isTrigger = function (e) {
            var view = wd.DeviceManager.getInstance().view, width = view.width, height = view.height, locationInView = e.locationInView, leftUpCornerPosition = wd.Vector2.create(0, 0);
            return wd.EventTriggerDetectorUtils.isInRect(locationInView, leftUpCornerPosition, width, height);
        };
        return SceneEventTriggerDetector;
    })(wd.EventTriggerDetector);
    wd.SceneEventTriggerDetector = SceneEventTriggerDetector;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var EventTriggerDetectorUtils = (function () {
        function EventTriggerDetectorUtils() {
        }
        EventTriggerDetectorUtils.isInRect = function (locationInView, leftUpCornerPosition, width, height) {
            return locationInView.x >= leftUpCornerPosition.x && locationInView.x <= leftUpCornerPosition.x + width && locationInView.y >= leftUpCornerPosition.y && locationInView.y <= leftUpCornerPosition.y + height;
        };
        return EventTriggerDetectorUtils;
    })();
    wd.EventTriggerDetectorUtils = EventTriggerDetectorUtils;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var _scriptHandlerNameTable = wdCb.Hash.create(), _scriptEngineEventTable = wdCb.Hash.create();
    _scriptHandlerNameTable.addChild(wd.EventName.CLICK, "onMouseClick");
    _scriptHandlerNameTable.addChild(wd.EventName.MOUSEOVER, "onMouseOver");
    _scriptHandlerNameTable.addChild(wd.EventName.MOUSEOUT, "onMouseOut");
    _scriptHandlerNameTable.addChild(wd.EventName.MOUSEMOVE, "onMouseMove");
    _scriptHandlerNameTable.addChild(wd.EventName.MOUSEDOWN, "onMouseDown");
    _scriptHandlerNameTable.addChild(wd.EventName.MOUSEUP, "onMouseUp");
    _scriptHandlerNameTable.addChild(wd.EventName.MOUSEWHEEL, "onMouseWheel");
    _scriptHandlerNameTable.addChild(wd.EventName.MOUSEDRAG, "onMouseDrag");
    _scriptEngineEventTable.addChild(wd.EventName.CLICK, "MOUSE_CLICK");
    _scriptEngineEventTable.addChild(wd.EventName.MOUSEDOWN, "MOUSE_DOWN");
    _scriptEngineEventTable.addChild(wd.EventName.MOUSEUP, "MOUSE_UP");
    _scriptEngineEventTable.addChild(wd.EventName.MOUSEMOVE, "MOUSE_MOVE");
    _scriptEngineEventTable.addChild(wd.EventName.MOUSEOVER, "MOUSE_OVER");
    _scriptEngineEventTable.addChild(wd.EventName.MOUSEOUT, "MOUSE_OUT");
    _scriptEngineEventTable.addChild(wd.EventName.MOUSEWHEEL, "MOUSE_WHEEL");
    _scriptEngineEventTable.addChild(wd.EventName.MOUSEDRAG, "MOUSE_DRAG");
    var EventTriggerTable = (function () {
        function EventTriggerTable() {
        }
        EventTriggerTable.getScriptHandlerName = function (eventName) {
            var result = _scriptHandlerNameTable.getChild(eventName);
            return result;
        };
        EventTriggerTable.getScriptEngineEvent = function (eventName) {
            var result = _scriptEngineEventTable.getChild(eventName);
            return result;
        };
        return EventTriggerTable;
    })();
    wd.EventTriggerTable = EventTriggerTable;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var Script = (function (_super) {
        __extends(Script, _super);
        function Script(url) {
            if (url === void 0) { url = null; }
            _super.call(this);
            this.url = null;
            this.url = url;
        }
        Script.create = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            if (args.length === 0) {
                return new this();
            }
            else if (args.length === 1) {
                var url = args[0];
                return new this(url);
            }
        };
        Script.addScript = function (scriptName, _class) {
            this.scriptList.push({
                name: scriptName,
                class: _class
            });
        };
        Script.prototype.createLoadJsStream = function () {
            wd.Log.error(!this.url, wd.Log.info.FUNC_MUST_DEFINE("url"));
            return wd.LoaderManager.getInstance().load(this.url)
                .map(function () {
                return Script.scriptList.pop();
            });
        };
        Script.prototype.addToObject = function (entityObject) {
            var self = this;
            _super.prototype.addToObject.call(this, entityObject);
            this.createLoadJsStream()
                .subscribe(function (data) {
                self._handlerAfterLoadedScript(data, entityObject);
            });
        };
        Script.prototype._handlerAfterLoadedScript = function (data, entityObject) {
            this._addScriptToEntityObject(entityObject, data);
            entityObject.execScript("onEnter", null, true);
            wd.EventManager.trigger(wd.CustomEvent.create(wd.EngineEvent.BEFORE_GAMEOBJECT_INIT));
            entityObject.execScript("init", null, true);
            wd.EventManager.trigger(wd.CustomEvent.create(wd.EngineEvent.AFTER_GAMEOBJECT_INIT));
            wd.EventManager.trigger(wd.CustomEvent.create(wd.EngineEvent.AFTER_GAMEOBJECT_INIT_RIGIDBODY_ADD_CONSTRAINT));
        };
        Script.prototype._addScriptToEntityObject = function (entityObject, data) {
            entityObject.scriptList.addChild(data.name, new data.class(entityObject));
        };
        Script.scriptList = wdCb.Stack.create();
        return Script;
    })(wd.Component);
    wd.Script = Script;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var Transform = (function (_super) {
        __extends(Transform, _super);
        function Transform() {
            _super.apply(this, arguments);
            this.p_parent = null;
            this.dirtyLocal = true;
            this.children = wdCb.Collection.create();
        }
        Object.defineProperty(Transform.prototype, "parent", {
            get: function () {
                return this.p_parent;
            },
            set: function (parent) {
                this.setParent(parent);
            },
            enumerable: true,
            configurable: true
        });
        Transform.prototype.addChild = function (child) {
            this.children.addChild(child);
        };
        Transform.prototype.removeChild = function (child) {
            this.children.removeChild(child);
        };
        Transform.prototype.setParent = function (parent) {
            if (this.p_parent) {
                this.p_parent.removeChild(this);
            }
            if (!parent) {
                this.p_parent = null;
                return;
            }
            this.p_parent = parent;
            this.p_parent.addChild(this);
        };
        Transform.prototype.getMatrix = function (syncMethod, matrixAttriName) {
            var syncList = wdCb.Collection.create(), current = this.p_parent;
            syncList.addChild(this);
            while (current !== null) {
                syncList.addChild(current);
                current = current.parent;
            }
            syncList.reverse().forEach(function (transform) {
                transform[syncMethod]();
            });
            return this[matrixAttriName];
        };
        Transform.prototype.setChildrenTransformState = function (transformState) {
            if (this[transformState]) {
                this.children.forEach(function (child) {
                    child[transformState] = transformState;
                });
            }
        };
        return Transform;
    })(wd.Component);
    wd.Transform = Transform;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var ThreeDTransform = (function (_super) {
        __extends(ThreeDTransform, _super);
        function ThreeDTransform() {
            _super.apply(this, arguments);
            this._localToWorldMatrix = null;
            this._position = wd.Vector3.create();
            this._rotation = wd.Quaternion.create(0, 0, 0, 1);
            this._scale = wd.Vector3.create(1, 1, 1);
            this._eulerAngles = null;
            this._localPosition = wd.Vector3.create(0, 0, 0);
            this._localRotation = wd.Quaternion.create(0, 0, 0, 1);
            this._localEulerAngles = null;
            this._localScale = wd.Vector3.create(1, 1, 1);
            this._isTranslate = false;
            this._isRotate = false;
            this._isScale = false;
            this.dirtyWorld = null;
            this._localToParentMatrix = wd.Matrix4.create();
            this._endLoopSubscription = null;
        }
        ThreeDTransform.create = function () {
            var obj = new this();
            return obj;
        };
        Object.defineProperty(ThreeDTransform.prototype, "localToWorldMatrix", {
            get: function () {
                return this.getMatrix("sync", "_localToWorldMatrix");
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThreeDTransform.prototype, "position", {
            get: function () {
                this._position = this.localToWorldMatrix.getTranslation();
                return this._position;
            },
            set: function (position) {
                if (this.p_parent === null) {
                    this._localPosition = position.copy();
                }
                else {
                    this._localPosition = this.p_parent.localToWorldMatrix.copy().invert().multiplyPoint(position);
                }
                this.isTranslate = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThreeDTransform.prototype, "rotation", {
            get: function () {
                this._rotation.setFromMatrix(this.localToWorldMatrix);
                return this._rotation;
            },
            set: function (rotation) {
                if (this.p_parent === null) {
                    this._localRotation = rotation.copy();
                }
                else {
                    this._localRotation = this.p_parent.rotation.copy().invert().multiply(rotation);
                }
                this.isRotate = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThreeDTransform.prototype, "scale", {
            get: function () {
                this._scale = this.localToWorldMatrix.getScale();
                return this._scale;
            },
            set: function (scale) {
                if (this.p_parent === null) {
                    this._localScale = scale.copy();
                }
                else {
                    this._localScale = this.p_parent.localToWorldMatrix.copy().invert().multiplyVector3(scale);
                }
                this.isScale = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThreeDTransform.prototype, "eulerAngles", {
            get: function () {
                this._eulerAngles = this.localToWorldMatrix.getEulerAngles();
                return this._eulerAngles;
            },
            set: function (eulerAngles) {
                this._localRotation.setFromEulerAngles(eulerAngles);
                if (this.p_parent !== null) {
                    this._localRotation = this.p_parent.rotation.copy().invert().multiply(this._localRotation);
                }
                this.isRotate = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThreeDTransform.prototype, "localPosition", {
            get: function () {
                return this._localPosition;
            },
            set: function (position) {
                this._localPosition = position.copy();
                this.isTranslate = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThreeDTransform.prototype, "localRotation", {
            get: function () {
                return this._localRotation;
            },
            set: function (rotation) {
                this._localRotation = rotation.copy();
                this.isRotate = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThreeDTransform.prototype, "localEulerAngles", {
            get: function () {
                this._localEulerAngles = this._localRotation.getEulerAngles();
                return this._localEulerAngles;
            },
            set: function (localEulerAngles) {
                this._localRotation.setFromEulerAngles(localEulerAngles);
                this.isRotate = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThreeDTransform.prototype, "localScale", {
            get: function () {
                return this._localScale;
            },
            set: function (scale) {
                this._localScale = scale.copy();
                this.isScale = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThreeDTransform.prototype, "up", {
            get: function () {
                return this.localToWorldMatrix.getY().normalize();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThreeDTransform.prototype, "right", {
            get: function () {
                return this.localToWorldMatrix.getX().normalize();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThreeDTransform.prototype, "forward", {
            get: function () {
                return this.localToWorldMatrix.getZ().normalize().scale(-1);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThreeDTransform.prototype, "isTransform", {
            get: function () {
                return this.isTranslate || this.isRotate || this.isScale;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThreeDTransform.prototype, "isTranslate", {
            get: function () {
                return this._isTranslate;
            },
            set: function (isTranslate) {
                this._isTranslate = isTranslate;
                if (isTranslate) {
                    this.dirtyLocal = true;
                    this.setChildrenTransformState("isTranslate");
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThreeDTransform.prototype, "isRotate", {
            get: function () {
                return this._isRotate;
            },
            set: function (isRotate) {
                this._isRotate = isRotate;
                if (isRotate) {
                    this.dirtyLocal = true;
                    this.setChildrenTransformState("isRotate");
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThreeDTransform.prototype, "isScale", {
            get: function () {
                return this._isScale;
            },
            set: function (isScale) {
                this._isScale = isScale;
                if (isScale) {
                    this.dirtyLocal = true;
                    this.setChildrenTransformState("isScale");
                }
            },
            enumerable: true,
            configurable: true
        });
        ThreeDTransform.prototype.init = function () {
            var self = this;
            this._endLoopSubscription = wd.EventManager.fromEvent(wd.EngineEvent.ENDLOOP)
                .subscribe(function () {
                self._resetTransformFlag();
            });
        };
        ThreeDTransform.prototype.dispose = function () {
            _super.prototype.dispose.call(this);
            this._endLoopSubscription && this._endLoopSubscription.dispose();
        };
        ThreeDTransform.prototype.sync = function () {
            if (this.dirtyLocal) {
                this._localToParentMatrix.setTRS(this._localPosition, this._localRotation, this._localScale);
                this.dirtyLocal = false;
                this.dirtyWorld = true;
            }
            if (this.dirtyWorld) {
                if (this.p_parent === null) {
                    this._localToWorldMatrix = this._localToParentMatrix.copy();
                }
                else {
                    this._localToWorldMatrix = this.p_parent.localToWorldMatrix.copy().multiply(this._localToParentMatrix);
                }
                this.dirtyWorld = false;
                this.children.forEach(function (child) {
                    child.dirtyWorld = true;
                });
            }
        };
        ThreeDTransform.prototype.translateLocal = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var translation = null;
            if (args.length === 3) {
                translation = wd.Vector3.create(args[0], args[1], args[2]);
            }
            else {
                translation = args[0];
            }
            this._localPosition = this._localPosition.add(this._localRotation.multiplyVector3(translation));
            this.isTranslate = true;
            return this;
        };
        ThreeDTransform.prototype.translate = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var translation = null;
            if (args.length === 3) {
                translation = wd.Vector3.create(args[0], args[1], args[2]);
            }
            else {
                translation = args[0];
            }
            this.position = translation.add(this.position);
            return this;
        };
        ThreeDTransform.prototype.rotate = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var eulerAngles = null, quaternion = wd.Quaternion.create();
            if (args.length === 3) {
                eulerAngles = wd.Vector3.create(args[0], args[1], args[2]);
            }
            else {
                eulerAngles = args[0];
            }
            quaternion.setFromEulerAngles(eulerAngles);
            if (this.p_parent === null) {
                this._localRotation = quaternion.multiply(this._localRotation);
            }
            else {
                quaternion = this.p_parent.rotation.copy().invert().multiply(quaternion);
                this._localRotation = quaternion.multiply(this.rotation);
            }
            this.isRotate = true;
            return this;
        };
        ThreeDTransform.prototype.rotateLocal = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var eulerAngles = null, quaternion = wd.Quaternion.create();
            if (args.length === 3) {
                eulerAngles = wd.Vector3.create(args[0], args[1], args[2]);
            }
            else {
                eulerAngles = args[0];
            }
            quaternion.setFromEulerAngles(eulerAngles);
            this._localRotation.multiply(quaternion);
            this.isRotate = true;
            return this;
        };
        ThreeDTransform.prototype.rotateAround = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var angle = null, center = null, axis = null, rot = null, dir = null;
            if (args.length === 3) {
                angle = args[0];
                center = args[1];
                axis = args[2];
            }
            else {
                angle = args[0];
                center = wd.Vector3.create(args[1], args[2], args[3]);
                axis = wd.Vector3.create(args[4], args[5], args[6]);
            }
            rot = wd.Quaternion.create().setFromAxisAngle(angle, axis);
            dir = this.position.copy().sub(center);
            dir = rot.multiplyVector3(dir);
            this.position = center.add(dir);
            this.rotation = rot.multiply(this.rotation);
            return this;
        };
        ThreeDTransform.prototype.lookAt = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var target = null, up = null;
            if (args.length === 1) {
                target = args[0];
                up = wd.Vector3.up;
            }
            else if (args.length === 2) {
                target = args[0];
                up = args[1];
            }
            else if (args.length === 3) {
                target = wd.Vector3.create(args[0], args[1], args[2]);
                up = wd.Vector3.up;
            }
            else {
                target = wd.Vector3.create(args[0], args[1], args[2]);
                up = wd.Vector3.create(args[3], args[4], args[5]);
            }
            this.rotation = wd.Quaternion.create().setFromMatrix(wd.Matrix4.create().setLookAt(this.position, target, up));
            return this;
        };
        ThreeDTransform.prototype._resetTransformFlag = function () {
            this.isTranslate = false;
            this.isScale = false;
            this.isRotate = false;
        };
        return ThreeDTransform;
    })(wd.Transform);
    wd.ThreeDTransform = ThreeDTransform;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var RectTransform = (function (_super) {
        __extends(RectTransform, _super);
        function RectTransform() {
            _super.apply(this, arguments);
            this._rotationMatrix = null;
            this._localPositionAndScaleMatrix = wd.Matrix3.create();
            this._position = wd.Vector2.create();
            this._rotation = 0;
            this._scale = wd.Vector2.create(1, 1);
            this._localPosition = wd.Vector2.create(0, 0);
            this._localScale = wd.Vector2.create(1, 1);
            this._anchorX = wd.Vector2.create(0.5, 0.5);
            this._anchorY = wd.Vector2.create(0.5, 0.5);
            this._width = null;
            this._height = null;
            this._isTranslate = false;
            this._isRotate = false;
            this._isScale = false;
            this.dirtyRotation = true;
            this.dirtyPositionAndScale = true;
            this.pivot = wd.Vector2.create(0, 0);
            this.zIndex = 1;
            this._localRotationMatrix = wd.Matrix3.create();
            this._localToParentMatrix = wd.Matrix3.create();
        }
        RectTransform.create = function () {
            var obj = new this();
            return obj;
        };
        Object.defineProperty(RectTransform.prototype, "rotationMatrix", {
            get: function () {
                return this.getMatrix("syncRotation", "_rotationMatrix");
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RectTransform.prototype, "localPositionAndScaleMatrix", {
            get: function () {
                return this.getMatrix("syncPositionAndScale", "_localPositionAndScaleMatrix");
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RectTransform.prototype, "position", {
            get: function () {
                this._position = this.localPositionAndScaleMatrix.getTranslation();
                return this._position;
            },
            set: function (position) {
                if (this.p_parent === null) {
                    this._localPosition = position.copy();
                }
                else {
                    this._localPosition = this.p_parent.localPositionAndScaleMatrix.copy().invert().multiplyPoint(position);
                }
                this.isTranslate = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RectTransform.prototype, "rotation", {
            get: function () {
                this._rotation = this.rotationMatrix.getRotation();
                return this._rotation;
            },
            set: function (angle) {
                this.resetRotation();
                this.rotate(angle);
                this.dirtyRotation = true;
                this.isRotate = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RectTransform.prototype, "scale", {
            get: function () {
                this._scale = this.localPositionAndScaleMatrix.getScale();
                return this._scale;
            },
            set: function (scale) {
                if (this.p_parent === null) {
                    this._localScale = scale.copy();
                }
                else {
                    this._localScale = this.p_parent.localPositionAndScaleMatrix.copy().invert().multiplyVector2(scale);
                }
                this.isScale = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RectTransform.prototype, "localPosition", {
            get: function () {
                return this._localPosition;
            },
            set: function (position) {
                this._localPosition = position.copy();
                this.isTranslate = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RectTransform.prototype, "localScale", {
            get: function () {
                return this._localScale;
            },
            set: function (scale) {
                this._localScale = scale.copy();
                this.isScale = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RectTransform.prototype, "anchorX", {
            get: function () {
                return this._anchorX;
            },
            set: function (anchorX) {
                var parentWidth = null;
                this._anchorX = anchorX;
                if (anchorX.x === anchorX.y) {
                    var widthFromAnchorToPosition = (anchorX.x - 0.5) * this._getParentWidth();
                    this.position = wd.Vector2.create(this._getParentPosition().x + widthFromAnchorToPosition, this.position.y);
                    return;
                }
                parentWidth = this._getParentWidth();
                this.position = wd.Vector2.create(this._getParentPosition().x + (anchorX.x + anchorX.y - 1) / 2 * parentWidth, this.position.y);
                this.width = parentWidth / this._getParentScale().x * (anchorX.y - anchorX.x) * this.scale.x;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RectTransform.prototype, "anchorY", {
            get: function () {
                return this._anchorY;
            },
            set: function (anchorY) {
                var parentHeight = null;
                this._anchorY = anchorY;
                if (anchorY.x === anchorY.y) {
                    var heightFromAnchorToPosition = (anchorY.x - 0.5) * this._getParentHeight();
                    this.position = wd.Vector2.create(this.position.x, this._getParentPosition().y + heightFromAnchorToPosition);
                    return;
                }
                parentHeight = this._getParentHeight();
                this.position = wd.Vector2.create(this.position.x, this._getParentPosition().y + (anchorY.x + anchorY.y - 1) / 2 * parentHeight);
                this.height = parentHeight / this._getParentScale().y * (anchorY.y - anchorY.x) * this.scale.y;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RectTransform.prototype, "width", {
            get: function () {
                return this._width * this.scale.x;
            },
            set: function (width) {
                if (width !== this._width) {
                    this._width = width;
                    wd.EventManager.trigger(this.entityObject, wd.CustomEvent.create(wd.EngineEvent.UI_WIDTH_CHANGE));
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RectTransform.prototype, "height", {
            get: function () {
                return this._height * this.scale.y;
            },
            set: function (height) {
                if (height !== this._height) {
                    this._height = height;
                    wd.EventManager.trigger(this.entityObject, wd.CustomEvent.create(wd.EngineEvent.UI_HEIGHT_CHANGE));
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RectTransform.prototype, "isTransform", {
            get: function () {
                return this.isTranslate || this.isRotate || this.isScale;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RectTransform.prototype, "isTranslate", {
            get: function () {
                return this._isTranslate;
            },
            set: function (isTranslate) {
                this._isTranslate = isTranslate;
                if (isTranslate) {
                    this.dirtyLocal = true;
                    wd.EventManager.broadcast(this.entityObject, wd.CustomEvent.create(wd.EngineEvent.TRANSFORM_TRANSLATE));
                    this.setChildrenTransformState("isTranslate");
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RectTransform.prototype, "isRotate", {
            get: function () {
                return this._isRotate;
            },
            set: function (isRotate) {
                this._isRotate = isRotate;
                if (isRotate) {
                    this.dirtyLocal = true;
                    wd.EventManager.broadcast(this.entityObject, wd.CustomEvent.create(wd.EngineEvent.TRANSFORM_ROTATE));
                    this.setChildrenTransformState("isRotate");
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RectTransform.prototype, "isScale", {
            get: function () {
                return this._isScale;
            },
            set: function (isScale) {
                this._isScale = isScale;
                if (isScale) {
                    this.dirtyLocal = true;
                    wd.EventManager.broadcast(this.entityObject, wd.CustomEvent.create(wd.EngineEvent.TRANSFORM_SCALE));
                    this.setChildrenTransformState("isScale");
                }
            },
            enumerable: true,
            configurable: true
        });
        RectTransform.prototype.syncRotation = function () {
            if (this.dirtyRotation) {
                if (this.p_parent === null) {
                    this._rotationMatrix = this._localRotationMatrix.copy();
                }
                else {
                    this._rotationMatrix = this.p_parent.rotationMatrix.copy().multiply(this._localRotationMatrix);
                }
                this.children.forEach(function (child) {
                    child.dirtyRotation = true;
                });
            }
        };
        RectTransform.prototype.syncPositionAndScale = function () {
            if (this.dirtyLocal) {
                this._localToParentMatrix.setTS(this._localPosition, this._localScale);
                this.dirtyLocal = false;
                this.dirtyPositionAndScale = true;
            }
            if (this.dirtyPositionAndScale) {
                if (this.p_parent === null) {
                    this._localPositionAndScaleMatrix = this._localToParentMatrix.copy();
                }
                else {
                    this._localPositionAndScaleMatrix = this.p_parent.localPositionAndScaleMatrix.copy().multiply(this._localToParentMatrix);
                }
                this.dirtyLocal = false;
                this.children.forEach(function (child) {
                    child.dirtyPositionAndScale = true;
                });
            }
        };
        RectTransform.prototype.translate = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var translation = null;
            if (args.length === 2) {
                translation = wd.Vector2.create(args[0], args[1]);
            }
            else {
                translation = args[0];
            }
            this.position = translation.add(this.position);
            return this;
        };
        RectTransform.prototype.rotate = function (angle) {
            var position = this.position;
            this.rotateAround(angle, position.x + this.pivot.x, position.y - this.pivot.y);
            this.dirtyRotation = true;
            this.isRotate = true;
            return this;
        };
        RectTransform.prototype.rotateAround = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var angle = null, center = null, position = null, x = null, y = null;
            if (args.length === 2) {
                angle = args[0];
                center = args[1];
            }
            else {
                angle = args[0];
                center = wd.Vector2.create(args[1], args[2]);
            }
            x = center.x;
            y = center.y;
            this._translateInRotationMatrix(x, y);
            this._rotateAroundCanvasOriginPoint(angle);
            this._translateInRotationMatrix(-x, -y);
            return this;
        };
        RectTransform.prototype._translateInRotationMatrix = function (x, y) {
            this._localRotationMatrix.translate(x, y);
            return this;
        };
        RectTransform.prototype.resetPosition = function () {
            this.position = wd.Vector2.create(0, 0);
        };
        RectTransform.prototype.resetScale = function () {
            this.scale = wd.Vector2.create(1, 1);
        };
        RectTransform.prototype.resetRotation = function () {
            this._localRotationMatrix.setIdentity();
        };
        RectTransform.prototype.setChildrenTransform = function () {
            this.setChildrenTransformState("isTranslate");
            this.setChildrenTransformState("isRotate");
            this.setChildrenTransformState("isScale");
        };
        RectTransform.prototype._rotateAroundCanvasOriginPoint = function (angle) {
            this._localRotationMatrix.rotate(angle);
            this.dirtyRotation = true;
            return this;
        };
        RectTransform.prototype._getParentWidth = function () {
            if (this.p_parent === null) {
                return wd.DeviceManager.getInstance().view.width;
            }
            return this.p_parent.width;
        };
        RectTransform.prototype._getParentHeight = function () {
            if (this.p_parent === null) {
                return wd.DeviceManager.getInstance().view.height;
            }
            return this.p_parent.height;
        };
        RectTransform.prototype._getParentPosition = function () {
            if (this.p_parent === null) {
                var view = wd.DeviceManager.getInstance().view;
                return wd.Vector2.create(view.width / 2, view.height / 2);
            }
            return this.p_parent.position;
        };
        RectTransform.prototype._getParentScale = function () {
            if (this.p_parent === null) {
                return wd.Vector2.create(1, 1);
            }
            return this.p_parent.scale;
        };
        return RectTransform;
    })(wd.Transform);
    wd.RectTransform = RectTransform;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var ComponentContainer = (function () {
        function ComponentContainer() {
            this.list = wdCb.Collection.create();
        }
        ComponentContainer.prototype.addChild = function (component) {
            if (this.hasChild(component)) {
                return;
            }
            this.list.addChild(component);
        };
        ComponentContainer.prototype.removeChild = function (component) {
            this.list.removeChild(component);
        };
        ComponentContainer.prototype.hasChild = function (component) {
            return this.list.hasChild(component);
        };
        return ComponentContainer;
    })();
    wd.ComponentContainer = ComponentContainer;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var ActionManager = (function (_super) {
        __extends(ActionManager, _super);
        function ActionManager() {
            _super.apply(this, arguments);
        }
        ActionManager.create = function () {
            var obj = new this();
            return obj;
        };
        ActionManager.prototype.update = function (elapsedTime) {
            var removeQueue = [];
            this.list.forEach(function (child) {
                if (child.isFinish) {
                    removeQueue.push(child);
                    return;
                }
                if (child.isStop || child.isPause) {
                    return;
                }
                child.update(elapsedTime);
            });
            removeQueue.forEach(function (child) {
                child.entityObject.removeComponent(child);
            });
        };
        return ActionManager;
    })(wd.ComponentContainer);
    wd.ActionManager = ActionManager;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var UIManager = (function (_super) {
        __extends(UIManager, _super);
        function UIManager(uiObject) {
            _super.call(this);
            this._uiObject = null;
            this._uiObject = uiObject;
        }
        UIManager.create = function (uiObject) {
            var obj = new this(uiObject);
            return obj;
        };
        UIManager.prototype.update = function (elapsedTime) {
            if (this.list.getCount() === 0) {
                return;
            }
            if (this._isDirty()) {
                this.list.forEach(function (ui) {
                    ui.update(elapsedTime);
                });
            }
        };
        UIManager.prototype._isDirty = function () {
            return this._uiObject.getComponent(wd.UIRenderer).state === wd.UIRendererState.DIRTY;
        };
        __decorate([
            wd.require(function (elapsedTime) {
                wd.assert(this.list.getCount() <= 1, wd.Log.info.FUNC_SHOULD("only contain one ui component"));
            })
        ], UIManager.prototype, "update", null);
        return UIManager;
    })(wd.ComponentContainer);
    wd.UIManager = UIManager;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var LightManager = (function () {
        function LightManager() {
            this._lights = wdCb.Hash.create();
        }
        LightManager.create = function () {
            var obj = new this();
            return obj;
        };
        Object.defineProperty(LightManager.prototype, "ambientLight", {
            get: function () {
                return this._lights.getChild(wd.AmbientLight.type);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LightManager.prototype, "directionLights", {
            get: function () {
                return this._lights.getChild(wd.DirectionLight.type);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LightManager.prototype, "pointLights", {
            get: function () {
                return this._lights.getChild(wd.PointLight.type);
            },
            enumerable: true,
            configurable: true
        });
        LightManager.prototype.addChild = function (light) {
            if (light.hasComponent(wd.AmbientLight)) {
                this._lights.addChild(wd.AmbientLight.type, light);
            }
            else if (light.hasComponent(wd.DirectionLight)) {
                this._lights.appendChild(wd.DirectionLight.type, light);
            }
            else if (light.hasComponent(wd.PointLight)) {
                this._lights.appendChild(wd.PointLight.type, light);
            }
            else {
                wd.Log.error(true, wd.Log.info.FUNC_INVALID("light"));
            }
        };
        return LightManager;
    })();
    wd.LightManager = LightManager;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var Animation = (function (_super) {
        __extends(Animation, _super);
        function Animation() {
            _super.apply(this, arguments);
        }
        return Animation;
    })(wd.Component);
    wd.Animation = Animation;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var MorphAnimation = (function (_super) {
        __extends(MorphAnimation, _super);
        function MorphAnimation() {
            _super.apply(this, arguments);
            this.interpolation = 0;
            this.currentFrame = 0;
            this.nextFrame = 1;
            this.duration = null;
            this.fps = null;
            this.currentAnimName = null;
            this.isFrameChange = false;
            this._currentTime = 0;
            this._oldTime = 0;
            this._frameCount = null;
            this._state = AnimationState.DEFAULT;
            this._isResume = false;
            this._isStartFromStop = false;
            this._pauseTime = null;
            this._resumeTime = null;
        }
        MorphAnimation.create = function () {
            var obj = new this();
            return obj;
        };
        Object.defineProperty(MorphAnimation.prototype, "isStart", {
            get: function () {
                return this._state === AnimationState.RUN;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MorphAnimation.prototype, "isStop", {
            get: function () {
                return this._state === AnimationState.STOP;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MorphAnimation.prototype, "isPause", {
            get: function () {
                return this._state === AnimationState.PAUSE;
            },
            enumerable: true,
            configurable: true
        });
        MorphAnimation.prototype.init = function () {
        };
        MorphAnimation.prototype.dispose = function () {
        };
        MorphAnimation.prototype.play = function (animName, fps) {
            var geometry = this.entityObject.getComponent(wd.ModelGeometry);
            this.currentAnimName = animName;
            this.fps = fps;
            this.duration = 1.0 / fps * 1000;
            this._frameCount = geometry.morphTargets.getChild(animName).getCount();
            this._start();
        };
        MorphAnimation.prototype.pause = function () {
            this._state = AnimationState.PAUSE;
            this._pauseTime = this._currentTime;
        };
        MorphAnimation.prototype.resume = function () {
            this._state = AnimationState.RUN;
            this._isResume = true;
            this._resumeTime = this._oldTime;
        };
        MorphAnimation.prototype.stop = function () {
            this._state = AnimationState.STOP;
        };
        MorphAnimation.prototype.update = function (elapsedTime) {
            if (this._state === AnimationState.DEFAULT) {
                return;
            }
            if (this.isStop || this.isPause) {
                this._oldTime = elapsedTime;
                return;
            }
            if (this._isResume) {
                this._isResume = false;
                this._continueFromPausePoint(elapsedTime);
            }
            this._currentTime = elapsedTime;
            if (this._isStartFromStop) {
                this._isStartFromStop = false;
                this._resetAnim();
            }
            if (this._currentTime - this._oldTime > this.duration) {
                this.isFrameChange = true;
                this._oldTime = this._floor(this._currentTime);
                this.currentFrame = this.nextFrame;
                this.nextFrame++;
                if (this.nextFrame >= this._frameCount) {
                    this.nextFrame = 0;
                }
            }
            else {
                this.isFrameChange = false;
            }
            this.interpolation = this.fps * (this._currentTime - this._oldTime) / 1000;
        };
        MorphAnimation.prototype._start = function () {
            this._currentTime = 0;
            this._oldTime = 0;
            this.currentFrame = 0;
            this.nextFrame = this.currentFrame + 1;
            if (this.isStop) {
                this._isStartFromStop = true;
            }
            this._state = AnimationState.RUN;
        };
        MorphAnimation.prototype._floor = function (time) {
            return time - time % this.duration;
        };
        MorphAnimation.prototype._resetAnim = function () {
            this._oldTime = this._currentTime;
        };
        MorphAnimation.prototype._continueFromPausePoint = function (currentTime) {
            this._oldTime = currentTime - (this._resumeTime - this._pauseTime) % this.duration;
        };
        __decorate([
            wd.require(function (animName, fps) {
                var geometry = this.entityObject.getComponent(wd.ModelGeometry);
                wd.assert(geometry, wd.Log.info.FUNC_SHOULD("this entityObject", "add ModelGeometry component"));
                wd.assert(geometry.morphTargets.getChild(animName) && geometry.morphTargets.getChild(animName).getCount() > 0, wd.Log.info.FUNC_NOT_EXIST("\"" + animName + "\" animation"));
            }),
            wd.ensure(function () {
                wd.assert(this._frameCount > 1, wd.Log.info.FUNC_SHOULD("frames.count", "> 1"));
            })
        ], MorphAnimation.prototype, "play", null);
        return MorphAnimation;
    })(wd.Animation);
    wd.MorphAnimation = MorphAnimation;
    var AnimationState;
    (function (AnimationState) {
        AnimationState[AnimationState["DEFAULT"] = 0] = "DEFAULT";
        AnimationState[AnimationState["RUN"] = 1] = "RUN";
        AnimationState[AnimationState["STOP"] = 2] = "STOP";
        AnimationState[AnimationState["PAUSE"] = 3] = "PAUSE";
    })(AnimationState || (AnimationState = {}));
})(wd || (wd = {}));
var wd;
(function (wd) {
    var Geometry = (function (_super) {
        __extends(Geometry, _super);
        function Geometry() {
            _super.apply(this, arguments);
            this._material = null;
            this.buffers = null;
        }
        Object.defineProperty(Geometry.prototype, "material", {
            get: function () {
                return this._material;
            },
            set: function (material) {
                if (!wd.JudgeUtils.isEqual(material, this._material)) {
                    this._material = material;
                    this._material.geometry = this;
                    wd.EventManager.trigger(this.entityObject, wd.CustomEvent.create(wd.EngineEvent.MATERIAL_CHANGE));
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Geometry.prototype, "geometryData", {
            get: function () {
                return this.buffers.geometryData;
            },
            enumerable: true,
            configurable: true
        });
        Geometry.prototype.init = function () {
            var geometryData = null, _a = this.computeData(), vertices = _a.vertices, faces = _a.faces, texCoords = _a.texCoords, colors = _a.colors, morphTargets = _a.morphTargets;
            this.buffers = this.createBufferContainer();
            geometryData = this.createGeometryData(vertices, faces, texCoords, colors, morphTargets);
            this.buffers.geometryData = geometryData;
            this.buffers.init();
            this._material.init();
            this.computeNormals();
        };
        Geometry.prototype.hasFaceNormals = function () {
            return this.buffers.geometryData.hasFaceNormals();
        };
        Geometry.prototype.hasVertexNormals = function () {
            return this.buffers.geometryData.hasVertexNormals();
        };
        Geometry.prototype.isSmoothShading = function () {
            return this._material.shading === wd.Shading.SMOOTH;
        };
        Geometry.prototype.dispose = function () {
            this.buffers.dispose();
            this._material.dispose();
        };
        Geometry.prototype.computeFaceNormals = function () {
            this.buffers.geometryData.computeFaceNormals();
        };
        Geometry.prototype.computeVertexNormals = function () {
            this.buffers.geometryData.computeVertexNormals();
        };
        Geometry.prototype.computeNormals = function () {
            if (this.isSmoothShading()) {
                if (!this.hasVertexNormals()) {
                    this.computeVertexNormals();
                }
            }
            else {
                if (!this.hasFaceNormals()) {
                    this.computeFaceNormals();
                }
            }
        };
        Geometry.prototype.createBufferContainer = function () {
            return wd.CommonBufferContainer.create(this.entityObject);
        };
        Geometry.prototype.createGeometryData = function (vertices, faces, texCoords, colors, morphTargets) {
            return this.createCommonGeometryData(vertices, faces, texCoords, colors);
        };
        Geometry.prototype.createCommonGeometryData = function (vertices, faces, texCoords, colors) {
            var geometryData = wd.CommonGeometryData.create(this);
            geometryData.vertices = vertices;
            geometryData.faces = faces;
            geometryData.texCoords = texCoords;
            geometryData.colors = colors;
            return geometryData;
        };
        __decorate([
            wd.ensure(function () {
                var geometryData = this.buffers.geometryData;
                wd.assert(geometryData.vertices.length > 0, wd.Log.info.FUNC_MUST("vertices.count", "> 0"));
                wd.assert(geometryData.faces.length * 3 === geometryData.indices.length, wd.Log.info.FUNC_SHOULD("faces.count", "be " + geometryData.indices.length / 3 + ", but actual is " + geometryData.faces.length));
            })
        ], Geometry.prototype, "init", null);
        __decorate([
            wd.require(function () {
                wd.assert(this.buffers && this.buffers.geometryData, wd.Log.info.FUNC_MUST_DEFINE("buffers->geometryData"));
            })
        ], Geometry.prototype, "hasFaceNormals", null);
        __decorate([
            wd.require(function () {
                wd.assert(this.buffers && this.buffers.geometryData, wd.Log.info.FUNC_MUST_DEFINE("buffers->geometryData"));
            })
        ], Geometry.prototype, "hasVertexNormals", null);
        __decorate([
            wd.require(function () {
                wd.assert(this.buffers && this.buffers.geometryData, wd.Log.info.FUNC_MUST_DEFINE("buffers->geometryData"));
            })
        ], Geometry.prototype, "computeFaceNormals", null);
        __decorate([
            wd.virtual
        ], Geometry.prototype, "computeNormals", null);
        __decorate([
            wd.virtual
        ], Geometry.prototype, "createBufferContainer", null);
        __decorate([
            wd.virtual
        ], Geometry.prototype, "createGeometryData", null);
        return Geometry;
    })(wd.Component);
    wd.Geometry = Geometry;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var GeometryUtils = (function () {
        function GeometryUtils() {
        }
        GeometryUtils.convertToFaces = function (indices, normals) {
            var hasNormals = this.hasData(normals), faces = [];
            for (var i = 0, len = indices.length; i < len; i += 3) {
                var a = indices[i], b = indices[i + 1], c = indices[i + 2], face = wd.Face3.create(a, b, c);
                if (hasNormals) {
                    face.vertexNormals.addChildren([
                        this.getThreeComponent(normals, a),
                        this.getThreeComponent(normals, b),
                        this.getThreeComponent(normals, c)
                    ]);
                    face.faceNormal = face.vertexNormals.getChild(0).copy();
                }
                faces.push(face);
            }
            return faces;
        };
        GeometryUtils.hasData = function (data) {
            return data && ((data.length && data.length > 0) || (data.getCount && data.getCount() > 0));
        };
        GeometryUtils.getThreeComponent = function (sourceData, index) {
            var startIndex = 3 * index;
            return wd.Vector3.create(sourceData[startIndex], sourceData[startIndex + 1], sourceData[startIndex + 2]);
        };
        GeometryUtils.iterateThreeComponent = function (dataArr, iterator) {
            for (var i = 0, len = dataArr.length; i < len; i += 3) {
                iterator(wd.Vector3.create(dataArr[i], dataArr[i + 1], dataArr[i + 2]));
            }
        };
        GeometryUtils.setThreeComponent = function (targetData, sourceData, index) {
            if (sourceData instanceof wd.Vector3) {
                targetData[index * 3] = sourceData.x;
                targetData[index * 3 + 1] = sourceData.y;
                targetData[index * 3 + 2] = sourceData.z;
            }
            else {
                targetData[index * 3] = sourceData[0];
                targetData[index * 3 + 1] = sourceData[1];
                targetData[index * 3 + 2] = sourceData[2];
            }
        };
        __decorate([
            wd.require(function (data) {
                if (data) {
                    wd.assert(data instanceof wdCb.Collection || data instanceof wdCb.Hash || wd.JudgeUtils.isArray(data), wd.Log.info.FUNC_SHOULD("data", "be Array or Collection or Hash"));
                }
            })
        ], GeometryUtils, "hasData", null);
        __decorate([
            wd.require(function (dataArr, iterator) {
                wd.assert(dataArr.length % 3 === 0, wd.Log.info.FUNC_SHOULD("dataArr.length", "times of three"));
            })
        ], GeometryUtils, "iterateThreeComponent", null);
        return GeometryUtils;
    })();
    wd.GeometryUtils = GeometryUtils;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var CustomGeometry = (function (_super) {
        __extends(CustomGeometry, _super);
        function CustomGeometry() {
            _super.apply(this, arguments);
            this._vertices = [];
            this._texCoords = [];
            this._colors = [];
            this._indices = [];
            this._normals = [];
        }
        CustomGeometry.create = function () {
            var geom = new this();
            return geom;
        };
        Object.defineProperty(CustomGeometry.prototype, "vertices", {
            get: function () {
                return this._vertices;
            },
            set: function (vertices) {
                this._vertices = vertices;
                if (this.buffers) {
                    this.buffers.geometryData.vertices = vertices;
                    this.buffers.removeCache(wd.BufferDataType.VERTICE);
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CustomGeometry.prototype, "texCoords", {
            get: function () {
                return this._texCoords;
            },
            set: function (texCoords) {
                this._texCoords = texCoords;
                if (this.buffers) {
                    this.buffers.geometryData.texCoords = texCoords;
                    this.buffers.removeCache(wd.BufferDataType.TEXCOORD);
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CustomGeometry.prototype, "colors", {
            get: function () {
                return this._colors;
            },
            set: function (colors) {
                this._colors = colors;
                if (this.buffers) {
                    this.buffers.geometryData.colors = colors;
                    this.buffers.removeCache(wd.BufferDataType.COLOR);
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CustomGeometry.prototype, "indices", {
            get: function () {
                return this._indices;
            },
            set: function (indices) {
                this._indices = indices;
                if (this.buffers) {
                    this.buffers.geometryData.faces = wd.GeometryUtils.convertToFaces(indices, this.normals);
                    this.buffers.removeCache(wd.BufferDataType.INDICE);
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CustomGeometry.prototype, "normals", {
            get: function () {
                return this._normals;
            },
            set: function (normals) {
                this._normals = normals;
                if (this.buffers) {
                    this.buffers.geometryData.faces = wd.GeometryUtils.convertToFaces(this.indices, normals);
                    this.buffers.removeCache(wd.BufferDataType.NORMAL);
                }
            },
            enumerable: true,
            configurable: true
        });
        CustomGeometry.prototype.computeData = function () {
            return {
                vertices: this.vertices,
                faces: wd.GeometryUtils.convertToFaces(this.indices, this.normals),
                texCoords: this.texCoords,
                colors: this.colors
            };
        };
        return CustomGeometry;
    })(wd.Geometry);
    wd.CustomGeometry = CustomGeometry;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var ModelGeometry = (function (_super) {
        __extends(ModelGeometry, _super);
        function ModelGeometry() {
            _super.apply(this, arguments);
            this.vertices = null;
            this.colors = null;
            this.texCoords = null;
            this.faces = null;
            this.morphTargets = null;
            this.morphFaceNormals = wdCb.Hash.create();
            this.morphVertexNormals = wdCb.Hash.create();
        }
        ModelGeometry.create = function () {
            var geom = new this();
            return geom;
        };
        ModelGeometry.prototype.hasAnimation = function () {
            return this._hasMorphTargets() && (this.entityObject && this.entityObject.hasComponent(wd.MorphAnimation));
        };
        ModelGeometry.prototype.hasMorphFaceNormals = function () {
            return this.buffers.geometryData.hasMorphFaceNormals();
        };
        ModelGeometry.prototype.hasMorphVertexNormals = function () {
            return this.buffers.geometryData.hasMorphVertexNormals();
        };
        ModelGeometry.prototype.computeMorphNormals = function () {
            this.buffers.geometryData.computeMorphNormals();
        };
        ModelGeometry.prototype.computeNormals = function () {
            _super.prototype.computeNormals.call(this);
            if (this._hasMorphTargets()) {
                if (this.isSmoothShading()) {
                    if (!this.hasMorphVertexNormals()) {
                        this.computeMorphNormals();
                    }
                }
                else {
                    if (!this.hasMorphFaceNormals()) {
                        this.computeMorphNormals();
                    }
                }
            }
        };
        ModelGeometry.prototype.computeData = function () {
            return {
                vertices: this.vertices,
                faces: this.faces,
                texCoords: this.texCoords,
                colors: this.colors,
                morphTargets: this.morphTargets
            };
        };
        ModelGeometry.prototype.createBufferContainer = function () {
            if (this.hasAnimation()) {
                return wd.MorphBufferContainer.create(this.entityObject, this.entityObject.getComponent(wd.MorphAnimation));
            }
            return wd.CommonBufferContainer.create(this.entityObject);
        };
        ModelGeometry.prototype.createGeometryData = function (vertices, faces, texCoords, colors, morphTargets) {
            if (this.hasAnimation()) {
                var geometryData = wd.MorphGeometryData.create(this);
                geometryData.vertices = vertices;
                geometryData.faces = faces;
                geometryData.texCoords = texCoords;
                geometryData.colors = colors;
                geometryData.morphTargets = morphTargets;
                return geometryData;
            }
            return this.createCommonGeometryData(vertices, faces, texCoords, colors);
        };
        ModelGeometry.prototype._hasMorphTargets = function () {
            return this.morphTargets && this.morphTargets.getCount() > 0;
        };
        __decorate([
            wd.require(function () {
                wd.assert(this.buffers && this.buffers.geometryData, wd.Log.info.FUNC_MUST_DEFINE("buffers->geometryData"));
            })
        ], ModelGeometry.prototype, "hasMorphFaceNormals", null);
        __decorate([
            wd.require(function () {
                wd.assert(this.buffers && this.buffers.geometryData, wd.Log.info.FUNC_MUST_DEFINE("buffers->geometryData"));
            })
        ], ModelGeometry.prototype, "hasMorphVertexNormals", null);
        __decorate([
            wd.require(function () {
                wd.assert(this.buffers && this.buffers.geometryData, wd.Log.info.FUNC_MUST_DEFINE("buffers->geometryData"));
            })
        ], ModelGeometry.prototype, "computeMorphNormals", null);
        __decorate([
            wd.require(function () {
                if (this.hasAnimation()) {
                    wd.assert(this.entityObject.getComponent(wd.MorphAnimation), wd.Log.info.FUNC_SHOULD("entityObject with ModelGeometry", "add MorphAnimation component"));
                }
            })
        ], ModelGeometry.prototype, "createBufferContainer", null);
        return ModelGeometry;
    })(wd.Geometry);
    wd.ModelGeometry = ModelGeometry;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var BoxGeometry = (function (_super) {
        __extends(BoxGeometry, _super);
        function BoxGeometry() {
            _super.apply(this, arguments);
            this.width = null;
            this.height = null;
            this.depth = null;
            this.widthSegments = 1;
            this.heightSegments = 1;
            this.depthSegments = 1;
        }
        BoxGeometry.create = function () {
            var geom = new this();
            return geom;
        };
        BoxGeometry.prototype.computeData = function () {
            var width = this.width, height = this.height, depth = this.depth, widthSegments = this.widthSegments, heightSegments = this.heightSegments, depthSegments = this.depthSegments, sides = {
                FRONT: 0,
                BACK: 1,
                TOP: 2,
                BOTTOM: 3,
                RIGHT: 4,
                LEFT: 5
            };
            var faceAxes = [
                [0, 1, 3],
                [4, 5, 7],
                [3, 2, 6],
                [1, 0, 4],
                [1, 4, 2],
                [5, 0, 6]
            ];
            var faceNormals = [
                [0, 0, 1],
                [0, 0, -1],
                [0, 1, 0],
                [0, -1, 0],
                [1, 0, 0],
                [-1, 0, 0]
            ];
            var corners = [
                wd.Vector3.create(-width, -height, depth),
                wd.Vector3.create(width, -height, depth),
                wd.Vector3.create(width, height, depth),
                wd.Vector3.create(-width, height, depth),
                wd.Vector3.create(width, -height, -depth),
                wd.Vector3.create(-width, -height, -depth),
                wd.Vector3.create(-width, height, -depth),
                wd.Vector3.create(width, height, -depth)
            ];
            var vertices = [];
            var normals = [];
            var texCoords = [];
            var indices = [];
            function generateFace(side, uSegments, vSegments) {
                var x, y, z, u, v;
                var i, j;
                var offset = vertices.length / 3;
                for (i = 0; i <= uSegments; i++) {
                    for (j = 0; j <= vSegments; j++) {
                        var temp1 = wd.Vector3.create();
                        var temp2 = wd.Vector3.create();
                        var temp3 = wd.Vector3.create();
                        var r = wd.Vector3.create();
                        temp1.lerp(corners[faceAxes[side][0]], corners[faceAxes[side][1]], i / uSegments);
                        temp2.lerp(corners[faceAxes[side][0]], corners[faceAxes[side][2]], j / vSegments);
                        temp3.sub2(temp2, corners[faceAxes[side][0]]);
                        r.add2(temp1, temp3);
                        u = i / uSegments;
                        v = j / vSegments;
                        vertices.push(r.x, r.y, r.z);
                        normals.push(faceNormals[side][0], faceNormals[side][1], faceNormals[side][2]);
                        texCoords.push(u, v);
                        if ((i < uSegments) && (j < vSegments)) {
                            indices.push(offset + j + i * (uSegments + 1), offset + j + (i + 1) * (uSegments + 1), offset + j + i * (uSegments + 1) + 1);
                            indices.push(offset + j + (i + 1) * (uSegments + 1), offset + j + (i + 1) * (uSegments + 1) + 1, offset + j + i * (uSegments + 1) + 1);
                        }
                    }
                }
            }
            generateFace(sides.FRONT, widthSegments, heightSegments);
            generateFace(sides.BACK, widthSegments, heightSegments);
            generateFace(sides.TOP, widthSegments, depthSegments);
            generateFace(sides.BOTTOM, widthSegments, depthSegments);
            generateFace(sides.RIGHT, depthSegments, heightSegments);
            generateFace(sides.LEFT, depthSegments, heightSegments);
            return {
                vertices: vertices,
                faces: wd.GeometryUtils.convertToFaces(indices, normals),
                texCoords: texCoords
            };
        };
        return BoxGeometry;
    })(wd.Geometry);
    wd.BoxGeometry = BoxGeometry;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var RectGeometry = (function (_super) {
        __extends(RectGeometry, _super);
        function RectGeometry() {
            _super.apply(this, arguments);
            this.width = null;
            this.height = null;
        }
        RectGeometry.create = function () {
            var geom = new this();
            return geom;
        };
        RectGeometry.prototype.computeData = function () {
            var width = this.width, height = this.height, left = -width / 2, right = width / 2, up = height / 2, down = -height / 2, vertices = [], texCoords = [], indices = [], normals = [];
            vertices = [
                right, up, 0,
                left, up, 0,
                left, down, 0,
                right, down, 0
            ];
            indices = [
                0, 1, 2, 0, 2, 3
            ];
            texCoords = [
                1.0, 1.0,
                0.0, 1.0,
                0.0, 0.0,
                1.0, 0.0
            ];
            normals = [
                0, 0, 1,
                0, 0, 1,
                0, 0, 1,
                0, 0, 1
            ];
            return {
                vertices: vertices,
                faces: wd.GeometryUtils.convertToFaces(indices, normals),
                texCoords: texCoords
            };
        };
        return RectGeometry;
    })(wd.Geometry);
    wd.RectGeometry = RectGeometry;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var PlaneGeometry = (function (_super) {
        __extends(PlaneGeometry, _super);
        function PlaneGeometry() {
            _super.apply(this, arguments);
            this.width = null;
            this.height = null;
            this.widthSegments = 1;
            this.heightSegments = 1;
        }
        PlaneGeometry.create = function () {
            var geom = new this();
            return geom;
        };
        PlaneGeometry.prototype.computeData = function () {
            var width = this.width, height = this.height, widthSegments = this.widthSegments, heightSegments = this.heightSegments, x = null, y = null, z = null, u = null, v = null, i = null, j = null, vertices = [], texCoords = [], normals = [], indices = [];
            for (i = 0; i <= widthSegments; i++) {
                for (j = 0; j <= heightSegments; j++) {
                    x = -width + 2.0 * width * i / widthSegments;
                    y = 0.0;
                    z = -(-height + 2.0 * height * j / heightSegments);
                    u = i / widthSegments;
                    v = j / heightSegments;
                    vertices.push(x, y, z);
                    normals.push(0.0, 1.0, 0.0);
                    texCoords.push(u, v);
                    if ((i < widthSegments) && (j < heightSegments)) {
                        indices.push(j + i * (widthSegments + 1), j + (i + 1) * (widthSegments + 1), j + i * (widthSegments + 1) + 1);
                        indices.push(j + (i + 1) * (widthSegments + 1), j + (i + 1) * (widthSegments + 1) + 1, j + i * (widthSegments + 1) + 1);
                    }
                }
            }
            return {
                vertices: vertices,
                faces: wd.GeometryUtils.convertToFaces(indices, normals),
                texCoords: texCoords
            };
        };
        return PlaneGeometry;
    })(wd.Geometry);
    wd.PlaneGeometry = PlaneGeometry;
})(wd || (wd = {}));
var wd;
(function (wd) {
    (function (SphereDrawMode) {
        SphereDrawMode[SphereDrawMode["LATITUDELONGTITUDE"] = 0] = "LATITUDELONGTITUDE";
    })(wd.SphereDrawMode || (wd.SphereDrawMode = {}));
    var SphereDrawMode = wd.SphereDrawMode;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var SphereGeometry = (function (_super) {
        __extends(SphereGeometry, _super);
        function SphereGeometry() {
            _super.apply(this, arguments);
            this.radius = 1;
            this.drawMode = wd.SphereDrawMode.LATITUDELONGTITUDE;
            this.segments = 20;
        }
        SphereGeometry.create = function () {
            var geom = new this();
            return geom;
        };
        SphereGeometry.prototype.computeData = function () {
            var radius = this.radius, drawMode = this.drawMode, segments = this.segments, data = null;
            if (drawMode === wd.SphereDrawMode.LATITUDELONGTITUDE) {
                var _a = GetDataByLatitudeLongtitude.create(radius, segments).getData(), vertices = _a.vertices, indices = _a.indices, normals = _a.normals, texCoords = _a.texCoords;
                return {
                    vertices: vertices,
                    faces: wd.GeometryUtils.convertToFaces(indices, normals),
                    texCoords: texCoords
                };
            }
            return data;
        };
        return SphereGeometry;
    })(wd.Geometry);
    wd.SphereGeometry = SphereGeometry;
    var GetDataByLatitudeLongtitude = (function () {
        function GetDataByLatitudeLongtitude(radius, bands) {
            this._radius = null;
            this._latitudeBands = null;
            this._longitudeBands = null;
            this._radius = radius;
            this._latitudeBands = bands;
            this._longitudeBands = bands;
        }
        GetDataByLatitudeLongtitude.create = function (radius, bands) {
            var geom = new this(radius, bands);
            return geom;
        };
        GetDataByLatitudeLongtitude.prototype.getData = function () {
            var vertices = [];
            var normals = [];
            var texCoords = [];
            var indices = [];
            for (var latNumber = 0; latNumber <= this._latitudeBands; latNumber++) {
                var theta = latNumber * Math.PI / this._latitudeBands;
                var sinTheta = Math.sin(theta);
                var cosTheta = Math.cos(theta);
                for (var longNumber = 0; longNumber <= this._longitudeBands; longNumber++) {
                    var phi = longNumber * 2 * Math.PI / this._longitudeBands;
                    var sinPhi = Math.sin(phi);
                    var cosPhi = Math.cos(phi);
                    var x = this._radius * cosPhi * sinTheta;
                    var y = this._radius * cosTheta;
                    var z = this._radius * sinPhi * sinTheta;
                    var u = 1 - (longNumber / this._longitudeBands);
                    var v = 1 - (latNumber / this._latitudeBands);
                    normals.push(x);
                    normals.push(y);
                    normals.push(z);
                    texCoords.push(u);
                    texCoords.push(v);
                    vertices.push(x);
                    vertices.push(y);
                    vertices.push(z);
                }
            }
            for (var latNumber = 0; latNumber < this._latitudeBands; latNumber++) {
                for (var longNumber = 0; longNumber < this._longitudeBands; longNumber++) {
                    var first = latNumber * (this._longitudeBands + 1) + longNumber;
                    var second = first + this._longitudeBands + 1;
                    indices.push(first + 1);
                    indices.push(second);
                    indices.push(first);
                    indices.push(first + 1);
                    indices.push(second + 1);
                    indices.push(second);
                }
            }
            return {
                vertices: vertices,
                indices: indices,
                normals: normals,
                texCoords: texCoords
            };
        };
        return GetDataByLatitudeLongtitude;
    })();
})(wd || (wd = {}));
var wd;
(function (wd) {
    var TriangleGeometry = (function (_super) {
        __extends(TriangleGeometry, _super);
        function TriangleGeometry() {
            _super.apply(this, arguments);
            this.width = null;
            this.height = null;
        }
        TriangleGeometry.create = function () {
            var geom = new this();
            return geom;
        };
        TriangleGeometry.prototype.computeData = function () {
            var width = this.width, height = this.height, left = -width / 2, right = width / 2, up = height / 2, down = -height / 2, vertices = [], texCoords = [], indices = [], normals = [];
            vertices = [
                0.0, up, 0,
                left, down, 0,
                right, down, 0
            ];
            indices = [
                0, 1, 2
            ];
            texCoords = [
                0.5, 1.0,
                0.0, 0.0,
                1.0, 0.0
            ];
            normals = [
                0, 0, 1,
                0, 0, 1,
                0, 0, 1
            ];
            return {
                vertices: vertices,
                faces: wd.GeometryUtils.convertToFaces(indices, normals),
                texCoords: texCoords
            };
        };
        return TriangleGeometry;
    })(wd.Geometry);
    wd.TriangleGeometry = TriangleGeometry;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var GeometryData = (function () {
        function GeometryData(geometry) {
            this._vertices = null;
            this._faces = null;
            this._texCoords = null;
            this._colors = null;
            this._tangents = null;
            this.isTangentDirty = true;
            this.geometry = null;
            this._normalCache = null;
            this._normalFromFaceCache = null;
            this._normalFromVertexCache = null;
            this._indiceCache = null;
            this._normalDirty = true;
            this._indiceDirty = true;
            this.geometry = geometry;
        }
        Object.defineProperty(GeometryData.prototype, "vertices", {
            get: function () {
                return this._vertices;
            },
            set: function (vertices) {
                this._vertices = vertices;
                this.isTangentDirty = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GeometryData.prototype, "normals", {
            get: function () {
                var geometry = this.geometry;
                if (geometry.isSmoothShading()) {
                    if (!this.hasVertexNormals()) {
                        this.computeVertexNormals();
                    }
                    return this.normalsFromVertexNormals;
                }
                if (!this.hasFaceNormals()) {
                    this.computeFaceNormals();
                }
                return this.normalsFromFaceNormal;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GeometryData.prototype, "normalsFromFaceNormal", {
            get: function () {
                var normals = null;
                if (!this.hasFaceNormals()) {
                    return [];
                }
                normals = [];
                this._faces.forEach(function (face) {
                    var normal = face.faceNormal;
                    wd.GeometryUtils.setThreeComponent(normals, normal, face.aIndex);
                    wd.GeometryUtils.setThreeComponent(normals, normal, face.bIndex);
                    wd.GeometryUtils.setThreeComponent(normals, normal, face.cIndex);
                });
                this._fillEmptyData(normals);
                return normals;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GeometryData.prototype, "normalsFromVertexNormals", {
            get: function () {
                var normals = null;
                if (!this.hasVertexNormals()) {
                    return [];
                }
                normals = [];
                this._faces.forEach(function (face) {
                    wd.GeometryUtils.setThreeComponent(normals, face.vertexNormals.getChild(0), face.aIndex);
                    wd.GeometryUtils.setThreeComponent(normals, face.vertexNormals.getChild(1), face.bIndex);
                    wd.GeometryUtils.setThreeComponent(normals, face.vertexNormals.getChild(2), face.cIndex);
                });
                this._fillEmptyData(normals);
                return normals;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GeometryData.prototype, "indices", {
            get: function () {
                var indices = [];
                for (var _i = 0, _a = this._faces; _i < _a.length; _i++) {
                    var face = _a[_i];
                    indices.push(face.aIndex, face.bIndex, face.cIndex);
                }
                return indices;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GeometryData.prototype, "faces", {
            get: function () {
                return this._faces;
            },
            set: function (faces) {
                this._faces = faces;
                this.onChangeFace();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GeometryData.prototype, "texCoords", {
            get: function () {
                return this._texCoords;
            },
            set: function (texCoords) {
                this._texCoords = texCoords;
                this.isTangentDirty = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GeometryData.prototype, "colors", {
            get: function () {
                return this._getColors(this._colors, this._vertices);
            },
            set: function (colors) {
                this._colors = colors;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GeometryData.prototype, "tangents", {
            get: function () {
                if (this.isTangentDirty) {
                    this.isTangentDirty = false;
                    this._tangents = this._calculateTangents(this._vertices, this.normals, this.texCoords, this.indices);
                }
                return this._tangents;
            },
            enumerable: true,
            configurable: true
        });
        GeometryData.prototype.computeFaceNormals = function () {
            var vertices = this._vertices;
            for (var _i = 0, _a = this._faces; _i < _a.length; _i++) {
                var face = _a[_i];
                face.faceNormal = this.computeFaceNormalsHelper(vertices, face.aIndex, face.bIndex, face.cIndex);
            }
        };
        GeometryData.prototype.computeVertexNormals = function () {
            var normals = null;
            if (!this.hasFaceNormals()) {
                this.computeFaceNormals();
            }
            normals = this.computeVertexNormalsHelper(this._vertices);
            for (var _i = 0, _a = this._faces; _i < _a.length; _i++) {
                var face = _a[_i];
                face.vertexNormals = wdCb.Collection.create([
                    normals[face.aIndex],
                    normals[face.bIndex],
                    normals[face.cIndex]
                ]);
            }
        };
        GeometryData.prototype.hasFaceNormals = function () {
            for (var _i = 0, _a = this._faces; _i < _a.length; _i++) {
                var face = _a[_i];
                if (!face.hasFaceNormal()) {
                    return false;
                }
            }
            return true;
        };
        GeometryData.prototype.hasVertexNormals = function () {
            for (var _i = 0, _a = this._faces; _i < _a.length; _i++) {
                var face = _a[_i];
                if (!face.hasVertexNormal()) {
                    return false;
                }
            }
            return true;
        };
        GeometryData.prototype.onChangeFace = function () {
            this.isTangentDirty = true;
            this._normalDirty = true;
            this._indiceDirty = true;
        };
        GeometryData.prototype.computeFaceNormalsHelper = function (vertices, aIndex, bIndex, cIndex) {
            var p0 = wd.GeometryUtils.getThreeComponent(vertices, aIndex), p1 = wd.GeometryUtils.getThreeComponent(vertices, bIndex), p2 = wd.GeometryUtils.getThreeComponent(vertices, cIndex), v0 = wd.Vector3.create().sub2(p2, p1), v1 = wd.Vector3.create().sub2(p0, p1);
            return wd.Vector3.create().cross(v0, v1).normalize();
        };
        GeometryData.prototype.computeVertexNormalsHelper = function (vertices) {
            var vl = vertices.length / 3, normals = null;
            normals = new Array(vl);
            for (var v = 0; v < vl; v++) {
                normals[v] = wd.Vector3.create();
            }
            for (var _i = 0, _a = this._faces; _i < _a.length; _i++) {
                var face = _a[_i];
                var faceNormal = null;
                faceNormal = face.faceNormal;
                normals[face.aIndex].add(faceNormal);
                normals[face.bIndex].add(faceNormal);
                normals[face.cIndex].add(faceNormal);
            }
            for (var v = 0; v < vl; v++) {
                normals[v].normalize();
            }
            return normals;
        };
        GeometryData.prototype._getColors = function (colors, vertices) {
            if (colors && colors.length > 0) {
                return colors;
            }
            else {
                return this._getColorsFromMaterial(vertices);
            }
        };
        GeometryData.prototype._getColorsFromMaterial = function (vertices) {
            var arr = [], i = 0, material = this.geometry.material, color = material.color, len = null;
            wdCb.Log.error(!vertices || vertices.length === 0, wdCb.Log.info.FUNC_MUST("has vertice data"));
            len = vertices.length;
            for (i = 0; i < len; i++) {
                arr.push(color.r, color.g, color.b);
            }
            return arr;
        };
        GeometryData.prototype._fillEmptyData = function (data) {
            for (var i = 0, len = data.length; i < len; i++) {
                if (isNaN(data[i])) {
                    data[i] = 0;
                }
            }
        };
        GeometryData.prototype._calculateTangents = function (vertices, normals, texCoords, indices) {
            var triangleCount = indices.length / 3, vertexCount = vertices.length / 3, i1, i2, i3, x1, x2, y1, y2, z1, z2, s1, s2, t1, t2, r, sdir = wd.Vector3.create(), tdir = wd.Vector3.create(), v1 = wd.Vector3.create(), v2 = wd.Vector3.create(), v3 = wd.Vector3.create(), w1 = wd.Vector2.create(), w2 = wd.Vector2.create(), w3 = wd.Vector2.create(), i, tan1 = new Float32Array(vertexCount * 3), tan2 = new Float32Array(vertexCount * 3), n = wd.Vector3.create(), temp = wd.Vector3.create(), tangents = [];
            for (i = 0; i < triangleCount; i++) {
                i1 = indices[i * 3];
                i2 = indices[i * 3 + 1];
                i3 = indices[i * 3 + 2];
                v1.set(vertices[i1 * 3], vertices[i1 * 3 + 1], vertices[i1 * 3 + 2]);
                v2.set(vertices[i2 * 3], vertices[i2 * 3 + 1], vertices[i2 * 3 + 2]);
                v3.set(vertices[i3 * 3], vertices[i3 * 3 + 1], vertices[i3 * 3 + 2]);
                w1.set(texCoords[i1 * 2], texCoords[i1 * 2 + 1]);
                w2.set(texCoords[i2 * 2], texCoords[i2 * 2 + 1]);
                w3.set(texCoords[i3 * 2], texCoords[i3 * 2 + 1]);
                x1 = v2.x - v1.x;
                x2 = v3.x - v1.x;
                y1 = v2.y - v1.y;
                y2 = v3.y - v1.y;
                z1 = v2.z - v1.z;
                z2 = v3.z - v1.z;
                s1 = w2.x - w1.x;
                s2 = w3.x - w1.x;
                t1 = w2.y - w1.y;
                t2 = w3.y - w1.y;
                r = 1.0 / (s1 * t2 - s2 * t1);
                sdir.set((t2 * x1 - t1 * x2) * r, (t2 * y1 - t1 * y2) * r, (t2 * z1 - t1 * z2) * r);
                tdir.set((s1 * x2 - s2 * x1) * r, (s1 * y2 - s2 * y1) * r, (s1 * z2 - s2 * z1) * r);
                tan1[i1 * 3 + 0] += sdir.x;
                tan1[i1 * 3 + 1] += sdir.y;
                tan1[i1 * 3 + 2] += sdir.z;
                tan1[i2 * 3 + 0] += sdir.x;
                tan1[i2 * 3 + 1] += sdir.y;
                tan1[i2 * 3 + 2] += sdir.z;
                tan1[i3 * 3 + 0] += sdir.x;
                tan1[i3 * 3 + 1] += sdir.y;
                tan1[i3 * 3 + 2] += sdir.z;
                tan2[i1 * 3 + 0] += tdir.x;
                tan2[i1 * 3 + 1] += tdir.y;
                tan2[i1 * 3 + 2] += tdir.z;
                tan2[i2 * 3 + 0] += tdir.x;
                tan2[i2 * 3 + 1] += tdir.y;
                tan2[i2 * 3 + 2] += tdir.z;
                tan2[i3 * 3 + 0] += tdir.x;
                tan2[i3 * 3 + 1] += tdir.y;
                tan2[i3 * 3 + 2] += tdir.z;
            }
            t1 = wd.Vector3.create();
            t2 = wd.Vector3.create();
            for (i = 0; i < vertexCount; i++) {
                var ndott = null;
                n.set(normals[i * 3], normals[i * 3 + 1], normals[i * 3 + 2]);
                t1.set(tan1[i * 3], tan1[i * 3 + 1], tan1[i * 3 + 2]);
                t2.set(tan2[i * 3], tan2[i * 3 + 1], tan2[i * 3 + 2]);
                ndott = n.dot(t1);
                temp = n.copy().scale(ndott);
                temp.sub2(t1, temp).normalize();
                tangents[i * 4] = temp.x;
                tangents[i * 4 + 1] = temp.y;
                tangents[i * 4 + 2] = temp.z;
                temp.cross(n, t1);
                tangents[i * 4 + 3] = (temp.dot(t2) < 0.0) ? -1.0 : 1.0;
            }
            return tangents;
        };
        __decorate([
            wd.requireGetter(function () {
                wd.assert(this._faces.length > 0, wd.Log.info.FUNC_SHOULD("faces.count", "> 0"));
                for (var _i = 0, _a = this._faces; _i < _a.length; _i++) {
                    var face = _a[_i];
                    if (this.geometry.isSmoothShading()) {
                        wd.assert(face.vertexNormals && face.vertexNormals.getCount() === 3, wd.Log.info.FUNC_SHOULD("faces->vertexNormals.count", "=== 3"));
                    }
                    else {
                        wd.assert(face.hasFaceNormal(), wd.Log.info.FUNC_SHOULD("faces->faceNormal", "has data"));
                    }
                }
            }),
            wd.cacheGetter(function () {
                return !this._normalDirty && this._normalCache;
            }, function () {
                return this._normalCache;
            }, function (result) {
                this._normalCache = result;
                this._normalDirty = false;
            })
        ], GeometryData.prototype, "normals", null);
        __decorate([
            wd.requireGetter(function () {
                wd.assert(this._faces.length > 0, wd.Log.info.FUNC_SHOULD("geometry", "has faces"));
            }),
            wd.ensureGetter(function (normals) {
                for (var _i = 0; _i < normals.length; _i++) {
                    var data = normals[_i];
                    wd.assert(wd.JudgeUtils.isNumber(data), wd.Log.info.FUNC_SHOULD("normals data", "be number"));
                }
            }),
            wd.cacheGetter(function () {
                return !this._normalDirty && this._normalFromFaceCache;
            }, function () {
                return this._normalFromFaceCache;
            }, function (result) {
                this._normalFromFaceCache = result;
                this._normalDirty = false;
            })
        ], GeometryData.prototype, "normalsFromFaceNormal", null);
        __decorate([
            wd.requireGetter(function () {
                wd.assert(this._faces.length > 0, wd.Log.info.FUNC_SHOULD("geometry", "has faces"));
            }),
            wd.ensureGetter(function (normals) {
                for (var _i = 0; _i < normals.length; _i++) {
                    var data = normals[_i];
                    wd.assert(wd.JudgeUtils.isNumber(data), wd.Log.info.FUNC_SHOULD("normals data", "be number"));
                }
            }),
            wd.cacheGetter(function () {
                return !this._normalDirty && this._normalFromVertexCache;
            }, function () {
                return this._normalFromVertexCache;
            }, function (result) {
                this._normalFromVertexCache = result;
                this._normalDirty = false;
            })
        ], GeometryData.prototype, "normalsFromVertexNormals", null);
        __decorate([
            wd.cacheGetter(function () {
                return !this._indiceDirty && this._indiceCache;
            }, function () {
                return this._indiceCache;
            }, function (result) {
                this._indiceCache = result;
                this._indiceDirty = false;
            })
        ], GeometryData.prototype, "indices", null);
        __decorate([
            wd.require(function () {
                wd.assert(wd.GeometryUtils.hasData(this.vertices), wd.Log.info.FUNC_MUST("contain vertices"));
            }),
            wd.ensure(function () {
                for (var _i = 0, _a = this._faces; _i < _a.length; _i++) {
                    var face = _a[_i];
                    wd.assert(face.faceNormal instanceof wd.Vector3, wd.Log.info.FUNC_SHOULD_NOT("faceNormal", "be null"));
                }
            })
        ], GeometryData.prototype, "computeFaceNormals", null);
        __decorate([
            wd.virtual
        ], GeometryData.prototype, "onChangeFace", null);
        return GeometryData;
    })();
    wd.GeometryData = GeometryData;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var CommonGeometryData = (function (_super) {
        __extends(CommonGeometryData, _super);
        function CommonGeometryData() {
            _super.apply(this, arguments);
        }
        CommonGeometryData.create = function (geometry) {
            var obj = new this(geometry);
            return obj;
        };
        return CommonGeometryData;
    })(wd.GeometryData);
    wd.CommonGeometryData = CommonGeometryData;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var MorphGeometryData = (function (_super) {
        __extends(MorphGeometryData, _super);
        function MorphGeometryData() {
            _super.apply(this, arguments);
            this._morphTargets = null;
            this._morphNormalCache = null;
            this._morphNormalDirty = true;
        }
        MorphGeometryData.create = function (geometry) {
            var obj = new this(geometry);
            return obj;
        };
        Object.defineProperty(MorphGeometryData.prototype, "morphNormals", {
            get: function () {
                var geometry = this.geometry;
                this._morphNormalDirty = false;
                if (geometry.isSmoothShading()) {
                    if (!this.hasMorphVertexNormals()) {
                        this.computeMorphNormals();
                    }
                    return geometry.morphVertexNormals;
                }
                if (!this.hasMorphFaceNormals()) {
                    this.computeMorphNormals();
                }
                return geometry.morphFaceNormals;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MorphGeometryData.prototype, "morphTargets", {
            get: function () {
                return this._morphTargets;
            },
            set: function (morphTargets) {
                this._morphTargets = morphTargets;
                this._morphNormalDirty = true;
            },
            enumerable: true,
            configurable: true
        });
        MorphGeometryData.prototype.computeMorphNormals = function () {
            var geometry = this.geometry, self = this;
            this._morphTargets.forEach(function (frames, animName) {
                var faceNormalList = wdCb.Collection.create(), vertexNormalList = wdCb.Collection.create();
                frames.forEach(function (vertices) {
                    var tempGeometryData = MorphGeometryData.create(geometry), faceNormalsOfEachFrame = null, vertexNormalsOfEachFrame = null;
                    tempGeometryData.vertices = vertices;
                    tempGeometryData.faces = self._copyFaces(geometry.faces);
                    tempGeometryData.computeFaceNormals();
                    tempGeometryData.computeVertexNormals();
                    _a = self._getMorphNormals(tempGeometryData), faceNormalsOfEachFrame = _a[0], vertexNormalsOfEachFrame = _a[1];
                    faceNormalList.addChild(faceNormalsOfEachFrame);
                    vertexNormalList.addChild(vertexNormalsOfEachFrame);
                    var _a;
                });
                geometry.morphFaceNormals.addChild(animName, faceNormalList);
                geometry.morphVertexNormals.addChild(animName, vertexNormalList);
            });
        };
        MorphGeometryData.prototype.hasMorphFaceNormals = function () {
            return this.geometry.morphFaceNormals.getCount() > 0;
        };
        MorphGeometryData.prototype.hasMorphVertexNormals = function () {
            return this.geometry.morphVertexNormals.getCount() > 0;
        };
        MorphGeometryData.prototype.onChangeFace = function () {
            this._morphNormalDirty = true;
        };
        MorphGeometryData.prototype._copyFaces = function (faces) {
            var copyFaces = [];
            for (var _i = 0; _i < faces.length; _i++) {
                var face = faces[_i];
                copyFaces.push(face.copy());
            }
            return copyFaces;
        };
        MorphGeometryData.prototype._getMorphNormals = function (geometryData) {
            return [geometryData.normalsFromFaceNormal, geometryData.normalsFromVertexNormals];
        };
        __decorate([
            wd.cacheGetter(function () {
                return !this._morphNormalDirty && this._morphNormalCache;
            }, function () {
                return this._morphNormalCache;
            }, function (result) {
                this._morphNormalCache = result;
            })
        ], MorphGeometryData.prototype, "morphNormals", null);
        return MorphGeometryData;
    })(wd.GeometryData);
    wd.MorphGeometryData = MorphGeometryData;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var BufferContainer = (function () {
        function BufferContainer(entityObject) {
            this.geometryData = null;
            this.entityObject = null;
            this.container = wdCb.Hash.create();
            this._colorBuffer = null;
            this._texCoordBuffer = null;
            this._tangentBuffer = null;
            this._indiceBuffer = null;
            this.entityObject = entityObject;
        }
        BufferContainer.prototype.init = function () {
            var self = this;
            wd.EventManager.on(this.entityObject, wd.EngineEvent.MATERIAL_CHANGE, function () {
                self.removeCache(wd.BufferDataType.COLOR);
            });
        };
        BufferContainer.prototype.removeCache = function (type) {
            this.container.removeChild(type);
        };
        BufferContainer.prototype.getChild = function (type) {
            var result = null;
            switch (type) {
                case wd.BufferDataType.VERTICE:
                    result = this.getVertice(type);
                    break;
                case wd.BufferDataType.NORMAL:
                    result = this.getNormal(type);
                    break;
                case wd.BufferDataType.TANGENT:
                    result = this._getTangent(type);
                    break;
                case wd.BufferDataType.COLOR:
                    result = this._getColor(type);
                    break;
                case wd.BufferDataType.INDICE:
                    result = this._getIndice(type);
                    break;
                case wd.BufferDataType.TEXCOORD:
                    result = this._getTexCoord(type);
                    break;
                default:
                    wdCb.Log.error(true, wdCb.Log.info.FUNC_UNKNOW("BufferDataType: " + type));
                    break;
            }
            return result;
        };
        BufferContainer.prototype.hasChild = function (type) {
            var data = this.geometryData[wd.BufferDataTable.getGeometryDataName(type)];
            return data && data.length > 0;
        };
        BufferContainer.prototype.dispose = function () {
            this.container.forEach(function (buffer) {
                buffer.dispose();
            });
        };
        BufferContainer.prototype.createBufferOnlyOnce = function (bufferAttriName, bufferClass) {
            if (this[bufferAttriName]) {
                return;
            }
            this[bufferAttriName] = bufferClass.create();
        };
        BufferContainer.prototype._getTangent = function (type) {
            var geometryData = null;
            this.createBufferOnlyOnce("_tangentBuffer", wd.ArrayBuffer);
            geometryData = this.geometryData[wd.BufferDataTable.getGeometryDataName(type)];
            this._tangentBuffer.resetData(new Float32Array(geometryData), 3, wd.BufferType.FLOAT);
            return this._tangentBuffer;
        };
        BufferContainer.prototype._getColor = function (type) {
            var geometryData = null;
            this.createBufferOnlyOnce("_colorBuffer", wd.ArrayBuffer);
            geometryData = this.geometryData[wd.BufferDataTable.getGeometryDataName(type)];
            this._colorBuffer.resetData(new Float32Array(geometryData), 3, wd.BufferType.FLOAT);
            return this._colorBuffer;
        };
        BufferContainer.prototype._getIndice = function (type) {
            var geometryData = null;
            this.createBufferOnlyOnce("_indiceBuffer", wd.ElementBuffer);
            geometryData = this.geometryData[wd.BufferDataTable.getGeometryDataName(type)];
            this._indiceBuffer.resetData(new Uint16Array(geometryData), wd.BufferType.UNSIGNED_SHORT);
            return this._indiceBuffer;
        };
        BufferContainer.prototype._getTexCoord = function (type) {
            var geometryData = null;
            this.createBufferOnlyOnce("_texCoordBuffer", wd.ArrayBuffer);
            geometryData = this.geometryData[wd.BufferDataTable.getGeometryDataName(type)];
            this._texCoordBuffer.resetData(new Float32Array(geometryData), 2, wd.BufferType.FLOAT);
            return this._texCoordBuffer;
        };
        BufferContainer.prototype._needReCalcuteTangent = function (type) {
            return this.geometryData.isTangentDirty && type === wd.BufferDataType.TANGENT;
        };
        __decorate([
            wd.cache(function (type) {
                return this.container.hasChild(type) && !this._needReCalcuteTangent(type);
            }, function (type) {
                return this.container.getChild(type);
            }, function (result, type) {
                this.container.addChild(type, result);
            })
        ], BufferContainer.prototype, "_getTangent", null);
        __decorate([
            wd.cache(function (type) {
                return this.container.hasChild(type);
            }, function (type) {
                return this.container.getChild(type);
            }, function (result, type) {
                this.container.addChild(type, result);
            })
        ], BufferContainer.prototype, "_getColor", null);
        __decorate([
            wd.cache(function (type) {
                return this.container.hasChild(type);
            }, function (type) {
                return this.container.getChild(type);
            }, function (result, type) {
                this.container.addChild(type, result);
            })
        ], BufferContainer.prototype, "_getIndice", null);
        __decorate([
            wd.cache(function (type) {
                return this.container.hasChild(type);
            }, function (type) {
                return this.container.getChild(type);
            }, function (result, type) {
                this.container.addChild(type, result);
            })
        ], BufferContainer.prototype, "_getTexCoord", null);
        return BufferContainer;
    })();
    wd.BufferContainer = BufferContainer;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var CommonBufferContainer = (function (_super) {
        __extends(CommonBufferContainer, _super);
        function CommonBufferContainer() {
            _super.apply(this, arguments);
            this._verticeBuffer = null;
            this._normalBuffer = null;
        }
        CommonBufferContainer.create = function (entityObject) {
            var obj = new this(entityObject);
            return obj;
        };
        CommonBufferContainer.prototype.getVertice = function (type) {
            var geometryData = this.geometryData[wd.BufferDataTable.getGeometryDataName(type)];
            this.createBufferOnlyOnce("_verticeBuffer", wd.ArrayBuffer);
            this._verticeBuffer.resetData(new Float32Array(geometryData), 3, wd.BufferType.FLOAT);
            return this._verticeBuffer;
        };
        CommonBufferContainer.prototype.getNormal = function (type) {
            var geometryData = this.geometryData[wd.BufferDataTable.getGeometryDataName(type)];
            this.createBufferOnlyOnce("_normalBuffer", wd.ArrayBuffer);
            this._normalBuffer.resetData(new Float32Array(geometryData), 3, wd.BufferType.FLOAT);
            return this._normalBuffer;
        };
        __decorate([
            wd.cache(function (type) {
                return this.container.hasChild(type);
            }, function (type) {
                return this.container.getChild(type);
            }, function (result, type) {
                this.container.addChild(type, result);
            })
        ], CommonBufferContainer.prototype, "getVertice", null);
        __decorate([
            wd.cache(function (type) {
                return this.container.hasChild(type);
            }, function (type) {
                return this.container.getChild(type);
            }, function (result, type) {
                this.container.addChild(type, result);
            })
        ], CommonBufferContainer.prototype, "getNormal", null);
        return CommonBufferContainer;
    })(wd.BufferContainer);
    wd.CommonBufferContainer = CommonBufferContainer;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var MorphBufferContainer = (function (_super) {
        __extends(MorphBufferContainer, _super);
        function MorphBufferContainer(entityObject, animation) {
            _super.call(this, entityObject);
            this._animation = null;
            this._isCacheChangeFlag = {};
            this._isCacheChangeInLastLoop = {};
            this._currentVerticeBuffer = null;
            this._nextVerticeBuffer = null;
            this._currentNormalBuffer = null;
            this._nextNormalBuffer = null;
            this._animation = animation;
        }
        MorphBufferContainer.create = function (entityObject, animation) {
            var obj = new this(entityObject, animation);
            return obj;
        };
        MorphBufferContainer.prototype.getVertice = function (type) {
            return this._getMorphData(type, this.geometryData.morphTargets);
        };
        MorphBufferContainer.prototype.getNormal = function (type) {
            return this._getMorphData(type, this.geometryData.morphNormals);
        };
        MorphBufferContainer.prototype._getMorphData = function (type, morphDataTargets) {
            var cacheData = null, frames = null, result = null;
            if (this._isNotPlayAnimation()) {
                return this._getStaticData(type);
            }
            frames = morphDataTargets.getChild(this._animation.currentAnimName);
            wdCb.Log.error(!frames, wdCb.Log.info.FUNC_SHOULD("\"" + this._animation.currentAnimName + "\" animation", "contain frame data"));
            cacheData = this.container.getChild(type);
            if (!cacheData) {
                var currentBuffer = this._getCurrentBuffer(type), nextBuffer = this._getNextBuffer(type);
                currentBuffer.resetData(new Float32Array(frames.getChild(this._animation.currentFrame)), 3, wd.BufferType.FLOAT);
                nextBuffer.resetData(new Float32Array(frames.getChild(this._animation.nextFrame)), 3, wd.BufferType.FLOAT);
                result = [currentBuffer, nextBuffer];
                this.container.addChild(type, result);
                this._isCacheChangeInLastLoop[type] = false;
            }
            else {
                if (this._animation.isFrameChange && (this._isCacheChangeInLastLoop[type] || this._isCacheNotChange(type))) {
                    var currentBuffer = cacheData[0], nextBuffer = cacheData[1], newCurrentBuffer = null, newNextBuffer = null;
                    newCurrentBuffer = nextBuffer;
                    newNextBuffer = currentBuffer.resetData(new Float32Array(frames.getChild(this._animation.nextFrame)));
                    result = [newCurrentBuffer, newNextBuffer];
                    this.container.addChild(type, result);
                    this._isCacheChangeFlag[type] = true;
                    this._isCacheChangeInLastLoop[type] = true;
                }
                else {
                    this._isCacheChangeFlag[type] = false;
                    this._isCacheChangeInLastLoop[type] = false;
                    result = cacheData;
                }
            }
            return result;
        };
        MorphBufferContainer.prototype._getCurrentBuffer = function (type) {
            if (type === wd.BufferDataType.VERTICE) {
                this.createBufferOnlyOnce("_currentVerticeBuffer", wd.ArrayBuffer);
                return this._currentVerticeBuffer;
            }
            this.createBufferOnlyOnce("_currentNormalBuffer", wd.ArrayBuffer);
            return this._currentNormalBuffer;
        };
        MorphBufferContainer.prototype._getNextBuffer = function (type) {
            if (type === wd.BufferDataType.VERTICE) {
                this.createBufferOnlyOnce("_nextVerticeBuffer", wd.ArrayBuffer);
                return this._nextVerticeBuffer;
            }
            this.createBufferOnlyOnce("_nextNormalBuffer", wd.ArrayBuffer);
            return this._nextNormalBuffer;
        };
        MorphBufferContainer.prototype._isCacheNotChange = function (type) {
            return !this._isCacheChangeFlag[type];
        };
        MorphBufferContainer.prototype._isNotPlayAnimation = function () {
            return this._animation.currentAnimName === null;
        };
        MorphBufferContainer.prototype._getStaticData = function (type) {
            var data = null, result = null;
            switch (type) {
                case wd.BufferDataType.VERTICE:
                    data = this.geometryData.vertices;
                    break;
                case wd.BufferDataType.NORMAL:
                    data = this.geometryData.normals;
                    break;
                default:
                    wd.Log.error(true, wd.Log.info.FUNC_SHOULD("type", "be BufferDataType.VERTICE or BufferDataType.NORMAL"));
                    break;
            }
            this._animation.interpolation = 0;
            result = [
                this._getCurrentBuffer(type).resetData(new Float32Array(data), 3, wd.BufferType.FLOAT),
                this._getNextBuffer(type).resetData(new Float32Array(data), 3, wd.BufferType.FLOAT)
            ];
            return result;
        };
        MorphBufferContainer.prototype._getStaticDataCacheData = function (type) {
            return "static_" + type;
        };
        __decorate([
            wd.require(function (type) {
                wd.assert(this.geometryData.morphTargets && this.geometryData.morphTargets.getCount() > 0, wd.Log.info.FUNC_SHOULD("set morphTargets"));
            })
        ], MorphBufferContainer.prototype, "getVertice", null);
        __decorate([
            wd.require(function (type) {
                wd.assert(this.geometryData.morphTargets && this.geometryData.morphTargets.getCount() > 0, wd.Log.info.FUNC_SHOULD("set morphTargets"));
            })
        ], MorphBufferContainer.prototype, "getNormal", null);
        __decorate([
            wd.require(function (type) {
                wd.assert(type === wd.BufferDataType.VERTICE || type === wd.BufferDataType.NORMAL, wd.Log.info.FUNC_SHOULD("type", "be BufferDataType.VERTICE or BufferDataType.NORMAL"));
            })
        ], MorphBufferContainer.prototype, "_getCurrentBuffer", null);
        __decorate([
            wd.require(function (type) {
                wd.assert(type === wd.BufferDataType.VERTICE || type === wd.BufferDataType.NORMAL, wd.Log.info.FUNC_SHOULD("type", "be BufferDataType.VERTICE or BufferDataType.NORMAL"));
            })
        ], MorphBufferContainer.prototype, "_getNextBuffer", null);
        __decorate([
            wd.cache(function (type) {
                return this.container.hasChild(this._getStaticDataCacheData(type));
            }, function (type) {
                return this.container.getChild(this._getStaticDataCacheData(type));
            }, function (result, type) {
                this.container.addChild(this._getStaticDataCacheData(type), result);
            })
        ], MorphBufferContainer.prototype, "_getStaticData", null);
        return MorphBufferContainer;
    })(wd.BufferContainer);
    wd.MorphBufferContainer = MorphBufferContainer;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var Camera = (function () {
        function Camera() {
            this._worldToCameraMatrix = null;
            this._near = null;
            this._far = null;
            this.pMatrix = wd.Matrix4.create();
            this.entityObject = null;
            this.dirty = false;
        }
        Object.defineProperty(Camera.prototype, "cameraToWorldMatrix", {
            get: function () {
                return this.entityObject.transform.localToWorldMatrix.copy();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Camera.prototype, "worldToCameraMatrix", {
            get: function () {
                if (this._worldToCameraMatrix) {
                    return this._worldToCameraMatrix;
                }
                return this.cameraToWorldMatrix.invert();
            },
            set: function (matrix) {
                this._worldToCameraMatrix = matrix;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Camera.prototype, "near", {
            get: function () {
                return this._near;
            },
            set: function (near) {
                this._near = near;
                this.dirty = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Camera.prototype, "far", {
            get: function () {
                return this._far;
            },
            set: function (far) {
                this._far = far;
                this.dirty = true;
            },
            enumerable: true,
            configurable: true
        });
        Camera.prototype.init = function () {
            if (this.dirty) {
                this.updateProjectionMatrix();
                this.dirty = false;
            }
        };
        Camera.prototype.dispose = function () {
        };
        Camera.prototype.update = function (elapsedTime) {
            if (this.dirty) {
                this.updateProjectionMatrix();
                this.dirty = false;
            }
        };
        Camera.prototype.getInvViewProjMat = function () {
            return this.pMatrix.copy().multiply(this.worldToCameraMatrix).invert();
        };
        __decorate([
            wd.requireGetter(function () {
                wd.assert(this.entityObject, wd.Log.info.FUNC_MUST_DEFINE("entityObject"));
            })
        ], Camera.prototype, "cameraToWorldMatrix", null);
        __decorate([
            wd.virtual
        ], Camera.prototype, "init", null);
        __decorate([
            wd.virtual
        ], Camera.prototype, "dispose", null);
        return Camera;
    })();
    wd.Camera = Camera;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var OrthographicCamera = (function (_super) {
        __extends(OrthographicCamera, _super);
        function OrthographicCamera() {
            _super.apply(this, arguments);
            this._left = null;
            this._right = null;
            this._bottom = null;
            this._top = null;
        }
        OrthographicCamera.create = function () {
            var obj = new this();
            return obj;
        };
        Object.defineProperty(OrthographicCamera.prototype, "left", {
            get: function () {
                return this._left;
            },
            set: function (left) {
                this._left = left;
                this.dirty = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(OrthographicCamera.prototype, "right", {
            get: function () {
                return this._right;
            },
            set: function (right) {
                this._right = right;
                this.dirty = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(OrthographicCamera.prototype, "bottom", {
            get: function () {
                return this._bottom;
            },
            set: function (bottom) {
                this._bottom = bottom;
                this.dirty = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(OrthographicCamera.prototype, "top", {
            get: function () {
                return this._top;
            },
            set: function (top) {
                this._top = top;
                this.dirty = true;
            },
            enumerable: true,
            configurable: true
        });
        OrthographicCamera.prototype.convertScreenToWorld = function (screenX, screenY, distanceFromCamera) {
            var device = wd.DeviceManager.getInstance(), width = device.view.width, height = device.view.height, normalizedDeviceCoordinate = wd.Vector3.create(2 * screenX / width - 1, (height - screenY) / height * 2 - 1, (distanceFromCamera - this.far) / (this.far - this.near) * 2 + 1);
            return this.getInvViewProjMat().multiplyPoint(normalizedDeviceCoordinate);
        };
        OrthographicCamera.prototype.updateProjectionMatrix = function () {
            this.pMatrix.setOrtho(this._left, this._right, this._bottom, this._top, this.near, this.far);
        };
        return OrthographicCamera;
    })(wd.Camera);
    wd.OrthographicCamera = OrthographicCamera;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var PerspectiveCamera = (function (_super) {
        __extends(PerspectiveCamera, _super);
        function PerspectiveCamera() {
            _super.apply(this, arguments);
            this._fovy = null;
            this._aspect = null;
        }
        PerspectiveCamera.create = function () {
            var obj = new this();
            return obj;
        };
        Object.defineProperty(PerspectiveCamera.prototype, "fovy", {
            get: function () {
                return this._fovy;
            },
            set: function (fovy) {
                this._fovy = fovy;
                this.dirty = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PerspectiveCamera.prototype, "aspect", {
            get: function () {
                return this._aspect;
            },
            set: function (aspect) {
                this._aspect = aspect;
                this.dirty = true;
            },
            enumerable: true,
            configurable: true
        });
        PerspectiveCamera.prototype.zoomIn = function (speed, min) {
            if (min === void 0) { min = 1; }
            this.fovy = Math.max(this.fovy - speed, min);
        };
        PerspectiveCamera.prototype.zoomOut = function (speed, max) {
            if (max === void 0) { max = 179; }
            this.fovy = Math.min(this.fovy + speed, max);
        };
        PerspectiveCamera.prototype.convertScreenToWorld = function (screenX, screenY, distanceFromCamera) {
            var device = wd.DeviceManager.getInstance(), width = device.view.width, height = device.view.height, normalizedDeviceCoordinate = wd.Vector3.create(2 * screenX / width - 1, 1 - 2 * screenY / height, 1), invViewProjMat = this.getInvViewProjMat(), point = null, w = null;
            point = invViewProjMat.multiplyPoint(normalizedDeviceCoordinate);
            w = normalizedDeviceCoordinate.x * invViewProjMat.values[3] +
                normalizedDeviceCoordinate.y * invViewProjMat.values[7] +
                normalizedDeviceCoordinate.z * invViewProjMat.values[11] +
                invViewProjMat.values[15];
            point.scale(1 / w);
            return wd.Vector3.create().lerp(this.entityObject.transform.position, point, distanceFromCamera / this.far);
        };
        PerspectiveCamera.prototype.updateProjectionMatrix = function () {
            this.pMatrix.setPerspective(this._fovy, this._aspect, this.near, this.far);
        };
        return PerspectiveCamera;
    })(wd.Camera);
    wd.PerspectiveCamera = PerspectiveCamera;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var CameraController = (function (_super) {
        __extends(CameraController, _super);
        function CameraController(cameraComponent) {
            _super.call(this);
            this.camera = null;
            this.camera = cameraComponent;
        }
        Object.defineProperty(CameraController.prototype, "cameraToWorldMatrix", {
            get: function () {
                return this.camera.cameraToWorldMatrix;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CameraController.prototype, "worldToCameraMatrix", {
            get: function () {
                return this.camera.worldToCameraMatrix;
            },
            set: function (matrix) {
                this.camera.worldToCameraMatrix = matrix;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CameraController.prototype, "pMatrix", {
            get: function () {
                return this.camera.pMatrix;
            },
            set: function (pMatrix) {
                this.camera.pMatrix = pMatrix;
            },
            enumerable: true,
            configurable: true
        });
        CameraController.prototype.init = function () {
            this.camera.entityObject = this.entityObject;
            this.camera.init();
        };
        CameraController.prototype.update = function (elapsedTime) {
            this.camera.update(elapsedTime);
        };
        CameraController.prototype.dispose = function () {
            this.camera.dispose();
        };
        CameraController.prototype.isIntersectWithRay = function (entityObject, screenX, screenY) {
            var shape = null;
            if (!entityObject.hasComponent(wd.Collider)) {
                return false;
            }
            shape = entityObject.getComponent(wd.Collider).shape;
            return shape.isIntersectWithRay(this.createRay(screenX, screenY));
        };
        CameraController.prototype.createRay = function (screenX, screenY) {
            var from = this.convertScreenToWorld(screenX, screenY, this.camera.near), to = this.convertScreenToWorld(screenX, screenY, this.camera.far);
            return wd.Ray.create(from, to.sub(from));
        };
        CameraController.prototype.convertScreenToWorld = function (screenX, screenY, distanceFromCamera) {
            return this.camera.convertScreenToWorld(screenX, screenY, distanceFromCamera);
        };
        CameraController.prototype.getPlanes = function () {
            var frustumPlanes = [], transform = this.worldToCameraMatrix.applyMatrix(this.pMatrix);
            for (var index = 0; index < 6; index++) {
                frustumPlanes.push(wd.Plane.create(0, 0, 0, 0));
            }
            this._setPlanes(transform, frustumPlanes);
            return frustumPlanes;
        };
        CameraController.prototype._setPlanes = function (transform, frustumPlanes) {
            frustumPlanes[0].normal.x = transform.values[3] + transform.values[2];
            frustumPlanes[0].normal.y = transform.values[7] + transform.values[6];
            frustumPlanes[0].normal.z = transform.values[11] + transform.values[10];
            frustumPlanes[0].d = transform.values[15] + transform.values[14];
            frustumPlanes[0].normalize();
            frustumPlanes[1].normal.x = transform.values[3] - transform.values[2];
            frustumPlanes[1].normal.y = transform.values[7] - transform.values[6];
            frustumPlanes[1].normal.z = transform.values[11] - transform.values[10];
            frustumPlanes[1].d = transform.values[15] - transform.values[14];
            frustumPlanes[1].normalize();
            frustumPlanes[2].normal.x = transform.values[3] + transform.values[0];
            frustumPlanes[2].normal.y = transform.values[7] + transform.values[4];
            frustumPlanes[2].normal.z = transform.values[11] + transform.values[8];
            frustumPlanes[2].d = transform.values[15] + transform.values[12];
            frustumPlanes[2].normalize();
            frustumPlanes[3].normal.x = transform.values[3] - transform.values[0];
            frustumPlanes[3].normal.y = transform.values[7] - transform.values[4];
            frustumPlanes[3].normal.z = transform.values[11] - transform.values[8];
            frustumPlanes[3].d = transform.values[15] - transform.values[12];
            frustumPlanes[3].normalize();
            frustumPlanes[4].normal.x = transform.values[3] - transform.values[1];
            frustumPlanes[4].normal.y = transform.values[7] - transform.values[5];
            frustumPlanes[4].normal.z = transform.values[11] - transform.values[9];
            frustumPlanes[4].d = transform.values[15] - transform.values[13];
            frustumPlanes[4].normalize();
            frustumPlanes[5].normal.x = transform.values[3] + transform.values[1];
            frustumPlanes[5].normal.y = transform.values[7] + transform.values[5];
            frustumPlanes[5].normal.z = transform.values[11] + transform.values[9];
            frustumPlanes[5].d = transform.values[15] + transform.values[13];
            frustumPlanes[5].normalize();
        };
        return CameraController;
    })(wd.Component);
    wd.CameraController = CameraController;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var BasicCameraController = (function (_super) {
        __extends(BasicCameraController, _super);
        function BasicCameraController() {
            _super.apply(this, arguments);
        }
        BasicCameraController.create = function (cameraComponent) {
            var obj = new this(cameraComponent);
            return obj;
        };
        return BasicCameraController;
    })(wd.CameraController);
    wd.BasicCameraController = BasicCameraController;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var FlyCameraController = (function (_super) {
        __extends(FlyCameraController, _super);
        function FlyCameraController(cameraComponent) {
            _super.call(this, cameraComponent);
            this._control = null;
            if (cameraComponent instanceof wd.PerspectiveCamera) {
                this._control = wd.FlyPerspectiveCameraControl.create(cameraComponent);
            }
            else {
                this._control = wd.FlyOrthographicCameraControl.create(cameraComponent);
            }
        }
        FlyCameraController.create = function (cameraComponent) {
            var obj = new this(cameraComponent);
            return obj;
        };
        FlyCameraController.prototype.init = function () {
            _super.prototype.init.call(this);
            this._control.init(this.entityObject);
        };
        FlyCameraController.prototype.update = function (elapsedTime) {
            _super.prototype.update.call(this, elapsedTime);
            this._control.update(elapsedTime);
        };
        FlyCameraController.prototype.dispose = function () {
            _super.prototype.dispose.call(this);
            this._control.dispose();
        };
        return FlyCameraController;
    })(wd.CameraController);
    wd.FlyCameraController = FlyCameraController;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var FlyCameraControl = (function () {
        function FlyCameraControl(cameraComponent) {
            this.moveSpeed = 1.2;
            this.rotateSpeed = 100;
            this.cameraComponent = null;
            this._rotateX = 0;
            this._rotateY = 0;
            this._isRotate = false;
            this._mouseDragSubscription = null;
            this._keydownSubscription = null;
            this._gameObject = null;
            this.cameraComponent = cameraComponent;
        }
        FlyCameraControl.prototype.init = function (entityObject) {
            var eulerAngles = entityObject.transform.eulerAngles;
            this._rotateX = eulerAngles.x;
            this._rotateY = eulerAngles.y;
            this._gameObject = entityObject;
            this._bindCanvasEvent();
        };
        FlyCameraControl.prototype.update = function (elapsedTime) {
            if (!this._isRotate) {
                return;
            }
            this._isRotate = false;
            this._gameObject.transform.eulerAngles = wd.Vector3.create(this._rotateX, this._rotateY, 0);
        };
        FlyCameraControl.prototype.dispose = function () {
            this._removeEvent();
        };
        FlyCameraControl.prototype._move = function (event) {
            var speed = this.moveSpeed, entityObject = this._gameObject, keyState = event.keyState;
            if (keyState["a"] || keyState["left"]) {
                entityObject.transform.translateLocal(wd.Vector3.create(-speed, 0, 0));
            }
            else if (keyState["d"] || keyState["right"]) {
                entityObject.transform.translateLocal(wd.Vector3.create(speed, 0, 0));
            }
            else if (keyState["w"] || keyState["up"]) {
                entityObject.transform.translateLocal(wd.Vector3.create(0, 0, -speed));
            }
            else if (keyState["s"] || keyState["down"]) {
                entityObject.transform.translateLocal(wd.Vector3.create(0, 0, speed));
            }
        };
        FlyCameraControl.prototype._bindCanvasEvent = function () {
            var self = this, rotateSpeed = this.rotateSpeed, mousedrag = wd.EventManager.fromEvent(wd.Director.getInstance().scene, wd.EngineEvent.MOUSE_DRAG), keydown = wd.EventManager.fromEvent(wd.EventName.KEYDOWN), canvas = wd.Director.getInstance().view;
            this._mouseDragSubscription = mousedrag
                .map(function (e) {
                var movementDelta = e.userData.movementDelta, dx = null, dy = null, factor = rotateSpeed / canvas.height;
                dx = factor * movementDelta.x;
                dy = factor * movementDelta.y;
                self._isRotate = true;
                return {
                    dx: dx,
                    dy: dy
                };
            })
                .subscribe(function (pos) {
                self._rotateY -= pos.dx;
                self._rotateX -= pos.dy;
            });
            this._keydownSubscription = keydown.subscribe(function (e) {
                self._move(e);
                self.zoom(e);
            });
        };
        FlyCameraControl.prototype._removeEvent = function () {
            this._mouseDragSubscription.dispose();
            this._keydownSubscription.dispose();
        };
        return FlyCameraControl;
    })();
    wd.FlyCameraControl = FlyCameraControl;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var FlyPerspectiveCameraControl = (function (_super) {
        __extends(FlyPerspectiveCameraControl, _super);
        function FlyPerspectiveCameraControl() {
            _super.apply(this, arguments);
            this.zoomSpeed = 10;
        }
        FlyPerspectiveCameraControl.create = function (cameraComponent) {
            var obj = new this(cameraComponent);
            return obj;
        };
        FlyPerspectiveCameraControl.prototype.zoom = function (event) {
            var speed = this.zoomSpeed, keyState = event.keyState;
            if (keyState["g"]) {
                this.cameraComponent.zoomIn(speed);
            }
            else if (keyState["h"]) {
                this.cameraComponent.zoomOut(speed);
            }
        };
        return FlyPerspectiveCameraControl;
    })(wd.FlyCameraControl);
    wd.FlyPerspectiveCameraControl = FlyPerspectiveCameraControl;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var FlyOrthographicCameraControl = (function (_super) {
        __extends(FlyOrthographicCameraControl, _super);
        function FlyOrthographicCameraControl() {
            _super.apply(this, arguments);
        }
        FlyOrthographicCameraControl.create = function (cameraComponent) {
            var obj = new this(cameraComponent);
            return obj;
        };
        FlyOrthographicCameraControl.prototype.zoom = function (event) {
        };
        return FlyOrthographicCameraControl;
    })(wd.FlyCameraControl);
    wd.FlyOrthographicCameraControl = FlyOrthographicCameraControl;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var ArcballCameraController = (function (_super) {
        __extends(ArcballCameraController, _super);
        function ArcballCameraController() {
            _super.apply(this, arguments);
            this.moveSpeedX = 1;
            this.moveSpeedY = 1;
            this.rotateSpeed = 1;
            this.distance = 10;
            this.phi = Math.PI / 2;
            this.theta = Math.PI / 2;
            this.target = wd.Vector3.create(0, 0, 0);
            this.thetaMargin = 0.05;
            this.minDistance = 0.05;
            this._isChange = true;
            this._mouseDragSubscription = null;
            this._mouseWheelSubscription = null;
            this._keydownSubscription = null;
        }
        ArcballCameraController.create = function (cameraComponent) {
            var obj = new this(cameraComponent);
            return obj;
        };
        ArcballCameraController.prototype.init = function () {
            _super.prototype.init.call(this);
            this._bindCanvasEvent();
        };
        ArcballCameraController.prototype.update = function (elapsedTime) {
            var x = null, y = null, z = null;
            _super.prototype.update.call(this, elapsedTime);
            if (!this._isChange) {
                return;
            }
            this._isChange = false;
            x = ((this.distance) * Math.cos(this.phi) * Math.sin(this.theta) + this.target.x);
            z = ((this.distance) * Math.sin(this.phi) * Math.sin(this.theta) + this.target.z);
            y = ((this.distance) * Math.cos(this.theta) + this.target.y);
            this.entityObject.transform.position = wd.Vector3.create(x, y, z);
            this.entityObject.transform.lookAt(this.target);
        };
        ArcballCameraController.prototype.dispose = function () {
            _super.prototype.dispose.call(this);
            this._removeEvent();
        };
        ArcballCameraController.prototype._bindCanvasEvent = function () {
            var self = this, mousewheel = wd.EventManager.fromEvent(wd.Director.getInstance().scene, wd.EngineEvent.MOUSE_WHEEL), mousedrag = wd.EventManager.fromEvent(wd.Director.getInstance().scene, wd.EngineEvent.MOUSE_DRAG), keydown = wd.EventManager.fromEvent(wd.EventName.KEYDOWN);
            this._mouseDragSubscription = mousedrag.subscribe(function (e) {
                self._changeOrbit(e.userData);
            });
            this._mouseWheelSubscription = mousewheel.subscribe(function (e) {
                var mouseEvent = e.userData;
                mouseEvent.preventDefault();
                self._changeDistance(mouseEvent);
            });
            this._keydownSubscription = keydown.subscribe(function (e) {
                self._changeTarget(e);
            });
        };
        ArcballCameraController.prototype._changeOrbit = function (e) {
            var movementDelta = e.movementDelta;
            this._isChange = true;
            this.phi += movementDelta.x / (100 / this.rotateSpeed);
            this.theta -= movementDelta.y / (100 / this.rotateSpeed);
            this._contrainTheta();
        };
        ArcballCameraController.prototype._changeTarget = function (e) {
            var moveSpeedX = this.moveSpeedX, moveSpeedY = this.moveSpeedY, dx = null, dy = null, keyState = e.keyState, transform = this.entityObject.transform;
            this._isChange = true;
            if (keyState["a"] || keyState["left"]) {
                dx = -moveSpeedX;
            }
            else if (keyState["d"] || keyState["right"]) {
                dx = moveSpeedX;
            }
            else if (keyState["w"] || keyState["up"]) {
                dy = moveSpeedY;
            }
            else if (keyState["s"] || keyState["down"]) {
                dy = -moveSpeedY;
            }
            this.target.add(wd.Vector3.create(transform.right.x * (dx), 0, transform.right.z * (dx)));
            this.target.add(wd.Vector3.create(transform.up.x * dy, transform.up.y * dy, 0));
        };
        ArcballCameraController.prototype._changeDistance = function (e) {
            this._isChange = true;
            this.distance -= e.wheel;
            this._contrainDistance();
        };
        ArcballCameraController.prototype._contrainDistance = function () {
            this.distance = wd.MathUtils.bigThan(this.distance, this.minDistance);
        };
        ArcballCameraController.prototype._contrainTheta = function () {
            this.theta = wd.MathUtils.clamp(this.theta, this.thetaMargin, Math.PI - this.thetaMargin);
        };
        ArcballCameraController.prototype._removeEvent = function () {
            this._mouseDragSubscription.dispose();
            this._mouseWheelSubscription.dispose();
            this._keydownSubscription.dispose();
        };
        return ArcballCameraController;
    })(wd.CameraController);
    wd.ArcballCameraController = ArcballCameraController;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var Action = (function (_super) {
        __extends(Action, _super);
        function Action() {
            _super.apply(this, arguments);
            this.p_target = null;
            this.isFinish = false;
        }
        Object.defineProperty(Action.prototype, "isStart", {
            get: function () {
                return !this.isStop;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Action.prototype, "isStop", {
            get: function () {
                return wd.Log.error(true, wd.Log.info.ABSTRACT_ATTRIBUTE);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Action.prototype, "isPause", {
            get: function () {
                return wd.Log.error(true, wd.Log.info.ABSTRACT_ATTRIBUTE);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Action.prototype, "target", {
            get: function () {
                return this.p_target;
            },
            set: function (target) {
                this.p_target = target;
            },
            enumerable: true,
            configurable: true
        });
        Action.prototype.reset = function () {
            this.isFinish = false;
        };
        Action.prototype.addToObject = function (entityObject) {
            _super.prototype.addToObject.call(this, entityObject);
            this.target = entityObject;
            entityObject.actionManager.addChild(this);
        };
        Action.prototype.removeFromObject = function (entityObject) {
            _super.prototype.removeFromObject.call(this, entityObject);
            entityObject.actionManager.removeChild(this);
        };
        Action.prototype.init = function () {
            this.start();
        };
        Action.prototype.finish = function () {
            this.isFinish = true;
            this.stop();
        };
        return Action;
    })(wd.Component);
    wd.Action = Action;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var ActionInstant = (function (_super) {
        __extends(ActionInstant, _super);
        function ActionInstant() {
            _super.apply(this, arguments);
        }
        Object.defineProperty(ActionInstant.prototype, "isStop", {
            get: function () {
                return false;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ActionInstant.prototype, "isPause", {
            get: function () {
                return false;
            },
            enumerable: true,
            configurable: true
        });
        ActionInstant.prototype.start = function () {
        };
        ActionInstant.prototype.stop = function () {
        };
        ActionInstant.prototype.pause = function () {
        };
        ActionInstant.prototype.resume = function () {
        };
        return ActionInstant;
    })(wd.Action);
    wd.ActionInstant = ActionInstant;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var CallFunc = (function (_super) {
        __extends(CallFunc, _super);
        function CallFunc(func, context, dataArr) {
            _super.call(this);
            this._context = null;
            this._callFunc = null;
            this._dataArr = null;
            this._context = context || wd.root;
            this._callFunc = func;
            this._dataArr = wdCb.Collection.create(dataArr);
        }
        CallFunc.create = function (func, context) {
            var data = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                data[_i - 2] = arguments[_i];
            }
            var dataArr = Array.prototype.slice.call(arguments, 2), action = new this(func, context, dataArr);
            return action;
        };
        CallFunc.prototype.reverse = function () {
            return this;
        };
        CallFunc.prototype.update = function (elapsedTime) {
            if (this._callFunc) {
                this._callFunc.call(this._context, this.p_target, this._dataArr);
            }
            this.finish();
        };
        CallFunc.prototype.copy = function () {
            return new CallFunc(this._context, this._callFunc, this._dataArr.copy(true).getChildren());
        };
        return CallFunc;
    })(wd.ActionInstant);
    wd.CallFunc = CallFunc;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var ActionInterval = (function (_super) {
        __extends(ActionInterval, _super);
        function ActionInterval() {
            _super.apply(this, arguments);
            this.elapsed = null;
            this.duration = null;
            this._isStop = true;
            this._isPause = false;
            this._timeController = wd.CommonTimeController.create();
        }
        Object.defineProperty(ActionInterval.prototype, "isStop", {
            get: function () {
                return this._isStop;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ActionInterval.prototype, "isPause", {
            get: function () {
                return this._isPause;
            },
            enumerable: true,
            configurable: true
        });
        ActionInterval.prototype.update = function (elapsedTime) {
            if (elapsedTime < this._timeController.startTime) {
                return;
            }
            this.elapsed = this._convertToRatio(this._timeController.computeElapseTime(elapsedTime));
            this.updateBody(elapsedTime);
            if (this.elapsed === 1) {
                this.finish();
            }
        };
        ActionInterval.prototype.start = function () {
            this._isStop = false;
            this._timeController.start();
        };
        ActionInterval.prototype.stop = function () {
            this._isStop = true;
            this._timeController.stop();
        };
        ActionInterval.prototype.reset = function () {
            _super.prototype.reset.call(this);
            this._isStop = true;
        };
        ActionInterval.prototype.pause = function () {
            this._isPause = true;
            this._timeController.pause();
        };
        ActionInterval.prototype.resume = function () {
            this._isPause = false;
            this._timeController.resume();
        };
        ActionInterval.prototype.updateBody = function (time) {
        };
        ActionInterval.prototype._convertToRatio = function (elapsed) {
            var ratio = elapsed / this.duration;
            return ratio > 1 ? 1 : ratio;
        };
        __decorate([
            wd.virtual
        ], ActionInterval.prototype, "updateBody", null);
        return ActionInterval;
    })(wd.Action);
    wd.ActionInterval = ActionInterval;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var Control = (function (_super) {
        __extends(Control, _super);
        function Control() {
            _super.apply(this, arguments);
        }
        Object.defineProperty(Control.prototype, "target", {
            set: function (target) {
                this.p_target = target;
                this.getInnerActions().forEach(function (action) {
                    action.target = target;
                });
            },
            enumerable: true,
            configurable: true
        });
        Control.prototype.init = function () {
            _super.prototype.init.call(this);
            this.iterate("init");
        };
        Control.prototype.reverse = function () {
            this.iterate("reverse");
            return this;
        };
        Control.prototype.reset = function () {
            _super.prototype.reset.call(this);
            this.iterate("reset");
            return this;
        };
        Control.prototype.iterate = function (method, argArr) {
            this.getInnerActions().forEach(function (action) {
                action[method].apply(action, argArr);
            });
        };
        return Control;
    })(wd.ActionInterval);
    wd.Control = Control;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var Sequence = (function (_super) {
        __extends(Sequence, _super);
        function Sequence(actionArr) {
            _super.call(this);
            this._actions = wdCb.Collection.create();
            this._currentAction = null;
            this._actionIndex = 0;
            this._actions.addChildren(actionArr);
        }
        Sequence.create = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var sequence = null;
            wd.Log.assert(args.length >= 2, "Sequence should has two actions at least");
            sequence = new this(args);
            sequence.initWhenCreate();
            return sequence;
        };
        Sequence.prototype.initWhenCreate = function () {
            this._currentAction = this._actions.getChild(0);
        };
        Sequence.prototype.update = function (elapsedTime) {
            if (this._actionIndex === this._actions.getCount()) {
                this.finish();
                return;
            }
            this._currentAction = this._actions.getChild(this._actionIndex);
            if (this._currentAction.isFinish) {
                this._startNextActionAndJudgeFinish();
                return;
            }
            this._currentAction.update(elapsedTime);
            if (this._currentAction.isFinish) {
                this._startNextActionAndJudgeFinish();
            }
            return null;
        };
        Sequence.prototype.copy = function () {
            var actionArr = [];
            this._actions.forEach(function (action) {
                actionArr.push(action.copy());
            });
            return Sequence.create.apply(Sequence, actionArr);
        };
        Sequence.prototype.reset = function () {
            _super.prototype.reset.call(this);
            this._actionIndex = 0;
            this._currentAction = this._actions.getChild(this._actionIndex);
            return this;
        };
        Sequence.prototype.start = function () {
            _super.prototype.start.call(this);
            this._currentAction.start();
            return this;
        };
        Sequence.prototype.stop = function () {
            _super.prototype.stop.call(this);
            this._currentAction.stop();
            return this;
        };
        Sequence.prototype.pause = function () {
            _super.prototype.pause.call(this);
            this._currentAction.pause();
            return this;
        };
        Sequence.prototype.resume = function () {
            _super.prototype.resume.call(this);
            this._currentAction.resume();
            return this;
        };
        Sequence.prototype.reverse = function () {
            this._actions = this._actions.reverse();
            _super.prototype.reverse.call(this);
            return this;
        };
        Sequence.prototype.getInnerActions = function () {
            return this._actions;
        };
        Sequence.prototype._startNextActionAndJudgeFinish = function () {
            this._actionIndex++;
            if (this._actionIndex === this._actions.getCount()) {
                this.finish();
                return;
            }
            this._actions.getChild(this._actionIndex).start();
        };
        return Sequence;
    })(wd.Control);
    wd.Sequence = Sequence;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var Spawn = (function (_super) {
        __extends(Spawn, _super);
        function Spawn(actionArr) {
            _super.call(this);
            this._actions = wdCb.Collection.create();
            this._actions.addChildren(actionArr);
        }
        Spawn.create = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var spawn = null;
            wd.Log.assert(args.length >= 2, "Sequence should has two actions at least");
            spawn = new this(args);
            return spawn;
        };
        Spawn.prototype.update = function (elapsedTime) {
            if (this._isFinish()) {
                this.finish();
                return;
            }
            this.iterate("update", [elapsedTime]);
            if (this._isFinish()) {
                this.finish();
            }
        };
        Spawn.prototype.start = function () {
            _super.prototype.start.call(this);
            this.iterate("start");
            return this;
        };
        Spawn.prototype.stop = function () {
            _super.prototype.stop.call(this);
            this.iterate("stop");
            return this;
        };
        Spawn.prototype.pause = function () {
            _super.prototype.pause.call(this);
            this.iterate("pause");
            return this;
        };
        Spawn.prototype.resume = function () {
            _super.prototype.resume.call(this);
            this.iterate("resume");
            return this;
        };
        Spawn.prototype.copy = function () {
            var actions = [];
            this._actions.forEach(function (action) {
                actions.push(action.copy());
            });
            return Spawn.create.apply(Spawn, actions);
        };
        Spawn.prototype.reset = function () {
            _super.prototype.reset.call(this);
            this.iterate("reset");
            return this;
        };
        Spawn.prototype.reverse = function () {
            this._actions = this._actions.reverse();
            _super.prototype.reverse.call(this);
            return this;
        };
        Spawn.prototype.getInnerActions = function () {
            return this._actions;
        };
        Spawn.prototype.iterate = function (method, argArr) {
            this._actions.forEach(function (action) {
                action[method].apply(action, argArr);
            });
        };
        Spawn.prototype._isFinish = function () {
            var isFinish = true;
            this._actions.forEach(function (action) {
                if (!action.isFinish) {
                    isFinish = false;
                    return wdCb.$BREAK;
                }
            });
            return isFinish;
        };
        return Spawn;
    })(wd.Control);
    wd.Spawn = Spawn;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var DelayTime = (function (_super) {
        __extends(DelayTime, _super);
        function DelayTime(delayTime) {
            _super.call(this);
            this.duration = delayTime;
        }
        DelayTime.create = function (delayTime) {
            var action = new this(delayTime);
            return action;
        };
        DelayTime.prototype.reverse = function () {
            return this;
        };
        DelayTime.prototype.copy = function () {
            return DelayTime.create(this.duration);
        };
        return DelayTime;
    })(wd.ActionInterval);
    wd.DelayTime = DelayTime;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var Repeat = (function (_super) {
        __extends(Repeat, _super);
        function Repeat(action, times) {
            _super.call(this);
            this._innerAction = null;
            this._originTimes = null;
            this._times = null;
            this._innerAction = action;
            this._times = times;
        }
        Repeat.create = function (action, times) {
            var repeat = new this(action, times);
            repeat.initWhenCreate();
            return repeat;
        };
        Repeat.prototype.initWhenCreate = function () {
            this._originTimes = this._times;
        };
        Repeat.prototype.update = function (elapsedTime) {
            if (this._times === 0) {
                this.finish();
                return;
            }
            this._innerAction.update(elapsedTime);
            if (this._innerAction.isFinish) {
                this._times -= 1;
                if (this._times !== 0) {
                    this._innerAction.reset();
                    this._innerAction.start();
                    return;
                }
                this.finish();
            }
        };
        Repeat.prototype.copy = function () {
            return Repeat.create(this._innerAction.copy(), this._times);
        };
        Repeat.prototype.reset = function () {
            _super.prototype.reset.call(this);
            this._times = this._originTimes;
            return this;
        };
        Repeat.prototype.start = function () {
            _super.prototype.start.call(this);
            this._innerAction.start();
        };
        Repeat.prototype.stop = function () {
            _super.prototype.stop.call(this);
            this._innerAction.stop();
        };
        Repeat.prototype.pause = function () {
            _super.prototype.pause.call(this);
            this._innerAction.pause();
        };
        Repeat.prototype.resume = function () {
            _super.prototype.resume.call(this);
            this._innerAction.resume();
        };
        Repeat.prototype.getInnerActions = function () {
            return wdCb.Collection.create([this._innerAction]);
        };
        return Repeat;
    })(wd.Control);
    wd.Repeat = Repeat;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var RepeatForever = (function (_super) {
        __extends(RepeatForever, _super);
        function RepeatForever(action) {
            _super.call(this);
            this._innerAction = null;
            this._innerAction = action;
        }
        RepeatForever.create = function (action) {
            var repeat = new this(action);
            return repeat;
        };
        RepeatForever.prototype.update = function (elapsedTime) {
            this._innerAction.update(elapsedTime);
            if (this._innerAction.isFinish) {
                this._innerAction.reset();
                this._innerAction.start();
            }
        };
        RepeatForever.prototype.copy = function () {
            return RepeatForever.create(this._innerAction.copy());
        };
        RepeatForever.prototype.start = function () {
            _super.prototype.start.call(this);
            this._innerAction.start();
        };
        RepeatForever.prototype.stop = function () {
            _super.prototype.stop.call(this);
            this._innerAction.stop();
        };
        RepeatForever.prototype.pause = function () {
            _super.prototype.pause.call(this);
            this._innerAction.pause();
        };
        RepeatForever.prototype.resume = function () {
            _super.prototype.resume.call(this);
            this._innerAction.resume();
        };
        RepeatForever.prototype.getInnerActions = function () {
            return wdCb.Collection.create([this._innerAction]);
        };
        return RepeatForever;
    })(wd.Control);
    wd.RepeatForever = RepeatForever;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var Tween = (function (_super) {
        __extends(Tween, _super);
        function Tween() {
            _super.apply(this, arguments);
            this._object = null;
            this._valuesStart = wdCb.Hash.create();
            this._valuesEnd = wdCb.Hash.create();
            this._easingFunction = Tween.Easing.Linear.None;
            this._interpolationFunction = Tween.Interpolation.Linear;
            this._onStartCallback = null;
            this._onStartCallbackFired = false;
            this._onUpdateCallback = null;
            this._onFinishCallback = null;
            this._onStopCallback = null;
        }
        Tween.create = function () {
            var obj = new this();
            return obj;
        };
        Tween.prototype.updateBody = function (time) {
            var self = this, easeValue = null;
            if (this._onStartCallbackFired === false) {
                if (this._onStartCallback !== null) {
                    this._onStartCallback.call(this._object.getChildren());
                }
                this._onStartCallbackFired = true;
            }
            easeValue = this._easingFunction(this.elapsed);
            this._valuesEnd.forEach(function (value, key) {
                var start = self._valuesStart.getChild(key), end = value;
                if (end instanceof Array) {
                    self._object.setValue(key, self._interpolationFunction(end, easeValue));
                }
                else {
                    if (wd.JudgeUtils.isString(end)) {
                        end = start + wd.root.parseFloat(end, 10);
                    }
                    if (wd.JudgeUtils.isNumber(end)) {
                        self._object.setValue(key, start + (end - start) * easeValue);
                    }
                }
            });
            if (this._onUpdateCallback !== null) {
                this._onUpdateCallback.call(this._object.getChildren(), easeValue);
            }
            return true;
        };
        Tween.prototype.from = function (object) {
            var self = this;
            this._object = wdCb.Hash.create(object);
            this._object.forEach(function (value, key) {
                self._valuesStart.addChild(key, wd.root.parseFloat(value, 10));
            });
            return this;
        };
        Tween.prototype.to = function (properties, duration) {
            if (duration === void 0) { duration = 1000; }
            this.duration = duration;
            this._valuesEnd = wdCb.Hash.create(properties);
            return this;
        };
        Tween.prototype.init = function () {
            var self = this;
            _super.prototype.init.call(this);
            this._valuesEnd.forEach(function (value, key) {
                if (value instanceof Array) {
                    if (value.length === 0) {
                        return;
                    }
                    self._valuesEnd.setValue(key, [self._object.getChild(key)].concat(self._valuesEnd.getChild(key)));
                }
                self._valuesStart.setValue(key, self._object.getChild(key));
                if ((self._valuesStart.getChild(key) instanceof Array) === false) {
                    self._valuesStart.setValue(key, self._valuesStart.getChild(key) * 1.0);
                }
            });
        };
        Tween.prototype.start = function () {
            _super.prototype.start.call(this);
            this._onStartCallbackFired = false;
            return this;
        };
        Tween.prototype.stop = function () {
            _super.prototype.stop.call(this);
            if (this._onStopCallback !== null) {
                this._onStopCallback.call(this._object.getChildren());
            }
            return this;
        };
        Tween.prototype.copy = function () {
            return Tween.create().from(this._valuesStart.getChildren())
                .to(this._valuesEnd.getChildren(), this.duration)
                .easing(this._easingFunction)
                .interpolation(this._interpolationFunction)
                .onStart(this._onStartCallback)
                .onStop(this._onStopCallback)
                .onFinish(this._onFinishCallback)
                .onUpdate(this._onUpdateCallback);
        };
        Tween.prototype.reverse = function () {
            var tmp = this._valuesStart;
            this._valuesStart = this._valuesEnd;
            this._valuesEnd = tmp;
        };
        Tween.prototype.easing = function (easing) {
            this._easingFunction = easing;
            return this;
        };
        Tween.prototype.interpolation = function (interpolation) {
            this._interpolationFunction = interpolation;
            return this;
        };
        Tween.prototype.onUpdate = function (callback) {
            this._onUpdateCallback = callback;
            return this;
        };
        Tween.prototype.onFinish = function (callback) {
            this._onFinishCallback = callback;
            return this;
        };
        Tween.prototype.onStart = function (callback) {
            this._onStartCallback = callback;
            return this;
        };
        Tween.prototype.onStop = function (callback) {
            this._onStopCallback = callback;
            return this;
        };
        Tween.prototype.finish = function () {
            _super.prototype.finish.call(this);
            if (this._onFinishCallback !== null) {
                this._onFinishCallback.call(this._object.getChildren());
            }
        };
        Tween.Easing = {
            Linear: {
                None: function (k) {
                    return k;
                }
            },
            Quadratic: {
                In: function (k) {
                    return k * k;
                },
                Out: function (k) {
                    return k * (2 - k);
                },
                InOut: function (k) {
                    if ((k *= 2) < 1)
                        return 0.5 * k * k;
                    return -0.5 * (--k * (k - 2) - 1);
                }
            },
            Cubic: {
                In: function (k) {
                    return k * k * k;
                },
                Out: function (k) {
                    return --k * k * k + 1;
                },
                InOut: function (k) {
                    if ((k *= 2) < 1)
                        return 0.5 * k * k * k;
                    return 0.5 * ((k -= 2) * k * k + 2);
                }
            },
            Quartic: {
                In: function (k) {
                    return k * k * k * k;
                },
                Out: function (k) {
                    return 1 - (--k * k * k * k);
                },
                InOut: function (k) {
                    if ((k *= 2) < 1)
                        return 0.5 * k * k * k * k;
                    return -0.5 * ((k -= 2) * k * k * k - 2);
                }
            },
            Quintic: {
                In: function (k) {
                    return k * k * k * k * k;
                },
                Out: function (k) {
                    return --k * k * k * k * k + 1;
                },
                InOut: function (k) {
                    if ((k *= 2) < 1)
                        return 0.5 * k * k * k * k * k;
                    return 0.5 * ((k -= 2) * k * k * k * k + 2);
                }
            },
            Sinusoidal: {
                In: function (k) {
                    return 1 - Math.cos(k * Math.PI / 2);
                },
                Out: function (k) {
                    return Math.sin(k * Math.PI / 2);
                },
                InOut: function (k) {
                    return 0.5 * (1 - Math.cos(Math.PI * k));
                }
            },
            Exponential: {
                In: function (k) {
                    return k === 0 ? 0 : Math.pow(1024, k - 1);
                },
                Out: function (k) {
                    return k === 1 ? 1 : 1 - Math.pow(2, -10 * k);
                },
                InOut: function (k) {
                    if (k === 0)
                        return 0;
                    if (k === 1)
                        return 1;
                    if ((k *= 2) < 1)
                        return 0.5 * Math.pow(1024, k - 1);
                    return 0.5 * (-Math.pow(2, -10 * (k - 1)) + 2);
                }
            },
            Circular: {
                In: function (k) {
                    return 1 - Math.sqrt(1 - k * k);
                },
                Out: function (k) {
                    return Math.sqrt(1 - (--k * k));
                },
                InOut: function (k) {
                    if ((k *= 2) < 1)
                        return -0.5 * (Math.sqrt(1 - k * k) - 1);
                    return 0.5 * (Math.sqrt(1 - (k -= 2) * k) + 1);
                }
            },
            Elastic: {
                In: function (k) {
                    var s, a = 0.1, p = 0.4;
                    if (k === 0)
                        return 0;
                    if (k === 1)
                        return 1;
                    if (!a || a < 1) {
                        a = 1;
                        s = p / 4;
                    }
                    else
                        s = p * Math.asin(1 / a) / (2 * Math.PI);
                    return -(a * Math.pow(2, 10 * (k -= 1)) * Math.sin((k - s) * (2 * Math.PI) / p));
                },
                Out: function (k) {
                    var s, a = 0.1, p = 0.4;
                    if (k === 0)
                        return 0;
                    if (k === 1)
                        return 1;
                    if (!a || a < 1) {
                        a = 1;
                        s = p / 4;
                    }
                    else
                        s = p * Math.asin(1 / a) / (2 * Math.PI);
                    return (a * Math.pow(2, -10 * k) * Math.sin((k - s) * (2 * Math.PI) / p) + 1);
                },
                InOut: function (k) {
                    var s, a = 0.1, p = 0.4;
                    if (k === 0)
                        return 0;
                    if (k === 1)
                        return 1;
                    if (!a || a < 1) {
                        a = 1;
                        s = p / 4;
                    }
                    else
                        s = p * Math.asin(1 / a) / (2 * Math.PI);
                    if ((k *= 2) < 1)
                        return -0.5 * (a * Math.pow(2, 10 * (k -= 1)) * Math.sin((k - s) * (2 * Math.PI) / p));
                    return a * Math.pow(2, -10 * (k -= 1)) * Math.sin((k - s) * (2 * Math.PI) / p) * 0.5 + 1;
                }
            },
            Back: {
                In: function (k) {
                    var s = 1.70158;
                    return k * k * ((s + 1) * k - s);
                },
                Out: function (k) {
                    var s = 1.70158;
                    return --k * k * ((s + 1) * k + s) + 1;
                },
                InOut: function (k) {
                    var s = 1.70158 * 1.525;
                    if ((k *= 2) < 1)
                        return 0.5 * (k * k * ((s + 1) * k - s));
                    return 0.5 * ((k -= 2) * k * ((s + 1) * k + s) + 2);
                }
            },
            Bounce: {
                In: function (k) {
                    return 1 - Tween.Easing.Bounce.Out(1 - k);
                },
                Out: function (k) {
                    if (k < (1 / 2.75)) {
                        return 7.5625 * k * k;
                    }
                    else if (k < (2 / 2.75)) {
                        return 7.5625 * (k -= (1.5 / 2.75)) * k + 0.75;
                    }
                    else if (k < (2.5 / 2.75)) {
                        return 7.5625 * (k -= (2.25 / 2.75)) * k + 0.9375;
                    }
                    else {
                        return 7.5625 * (k -= (2.625 / 2.75)) * k + 0.984375;
                    }
                },
                InOut: function (k) {
                    if (k < 0.5)
                        return Tween.Easing.Bounce.In(k * 2) * 0.5;
                    return Tween.Easing.Bounce.Out(k * 2 - 1) * 0.5 + 0.5;
                }
            }
        };
        Tween.Interpolation = {
            Linear: function (v, k) {
                var m = v.length - 1, f = m * k, i = Math.floor(f), fn = Tween.Interpolation.Utils.Linear;
                if (k < 0)
                    return fn(v[0], v[1], f);
                if (k > 1)
                    return fn(v[m], v[m - 1], m - f);
                return fn(v[i], v[i + 1 > m ? m : i + 1], f - i);
            },
            Bezier: function (v, k) {
                var b = 0, n = v.length - 1, pw = Math.pow, bn = Tween.Interpolation.Utils.Bernstein, i;
                for (i = 0; i <= n; i++) {
                    b += pw(1 - k, n - i) * pw(k, i) * v[i] * bn(n, i);
                }
                return b;
            },
            CatmullRom: function (v, k) {
                var m = v.length - 1, f = m * k, i = Math.floor(f), fn = Tween.Interpolation.Utils.CatmullRom;
                if (v[0] === v[m]) {
                    if (k < 0)
                        i = Math.floor(f = m * (1 + k));
                    return fn(v[(i - 1 + m) % m], v[i], v[(i + 1) % m], v[(i + 2) % m], f - i);
                }
                else {
                    if (k < 0)
                        return v[0] - (fn(v[0], v[0], v[1], v[1], -f) - v[0]);
                    if (k > 1)
                        return v[m] - (fn(v[m], v[m], v[m - 1], v[m - 1], f - m) - v[m]);
                    return fn(v[i ? i - 1 : 0], v[i], v[m < i + 1 ? m : i + 1], v[m < i + 2 ? m : i + 2], f - i);
                }
            },
            Utils: {
                Linear: function (p0, p1, t) {
                    return (p1 - p0) * t + p0;
                },
                Bernstein: function (n, i) {
                    var fc = Tween.Interpolation.Utils.Factorial;
                    return fc(n) / fc(i) / fc(n - i);
                },
                Factorial: (function () {
                    var a = [1];
                    return function (n) {
                        var s = 1, i;
                        if (a[n])
                            return a[n];
                        for (i = n; i > 1; i--)
                            s *= i;
                        return a[n] = s;
                    };
                })(),
                CatmullRom: function (p0, p1, p2, p3, t) {
                    var v0 = (p2 - p0) * 0.5, v1 = (p3 - p1) * 0.5, t2 = t * t, t3 = t * t2;
                    return (2 * p1 - 2 * p2 + v0 + v1) * t3 + (-3 * p1 + 3 * p2 - 2 * v0 - v1) * t2 + v0 * t + p1;
                }
            }
        };
        return Tween;
    })(wd.ActionInterval);
    wd.Tween = Tween;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var RendererComponent = (function (_super) {
        __extends(RendererComponent, _super);
        function RendererComponent() {
            _super.apply(this, arguments);
        }
        return RendererComponent;
    })(wd.Component);
    wd.RendererComponent = RendererComponent;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var MeshRenderer = (function (_super) {
        __extends(MeshRenderer, _super);
        function MeshRenderer() {
            _super.apply(this, arguments);
            this.drawMode = wd.DrawMode.TRIANGLES;
        }
        MeshRenderer.create = function () {
            var obj = new this();
            return obj;
        };
        MeshRenderer.prototype.render = function (renderer, geometry, camera) {
            renderer.addCommand(this.createDrawCommand(renderer, geometry, camera));
        };
        MeshRenderer.prototype.createDrawCommand = function (renderer, geometry, camera) {
            var quadCmd = renderer.createQuadCommand(), cameraComponent = camera.getComponent(wd.CameraController), material = geometry.material;
            quadCmd.buffers = geometry.buffers;
            quadCmd.animation = geometry.entityObject.getComponent(wd.Animation);
            quadCmd.mMatrix = this.entityObject.transform.localToWorldMatrix;
            quadCmd.vMatrix = cameraComponent.worldToCameraMatrix;
            quadCmd.pMatrix = cameraComponent.pMatrix;
            quadCmd.material = material;
            quadCmd.z = this.entityObject.transform.position.z;
            quadCmd.drawMode = this.drawMode;
            return quadCmd;
        };
        __decorate([
            wd.require(function (renderer, geometry, camera) {
                var controller = camera.getComponent(wd.CameraController);
                wd.assert(!!controller && !!controller.camera, wd.Log.info.FUNC_MUST("camera", "add Camera Component"));
                wd.assert(!!geometry, wd.Log.info.FUNC_MUST("Mesh", "add geometry component"));
            })
        ], MeshRenderer.prototype, "createDrawCommand", null);
        return MeshRenderer;
    })(wd.RendererComponent);
    wd.MeshRenderer = MeshRenderer;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var SkyboxRenderer = (function (_super) {
        __extends(SkyboxRenderer, _super);
        function SkyboxRenderer() {
            _super.apply(this, arguments);
        }
        SkyboxRenderer.create = function () {
            var obj = new this();
            return obj;
        };
        SkyboxRenderer.prototype.render = function (renderer, geometry, camera) {
            renderer.skyboxCommand = this.createDrawCommand(renderer, geometry, camera);
        };
        return SkyboxRenderer;
    })(wd.MeshRenderer);
    wd.SkyboxRenderer = SkyboxRenderer;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var UIRenderer = (function (_super) {
        __extends(UIRenderer, _super);
        function UIRenderer() {
            _super.apply(this, arguments);
            this._zIndex = 1;
            this.dirtyDuringCurrentLoop = false;
            this._dirty = true;
            this.context = null;
            this.isClearCanvas = false;
            this.state = wd.UIRendererState.NORMAL;
            this.canvas = null;
            this._referenceList = wdCb.Collection.create();
        }
        UIRenderer.create = function () {
            var obj = new this();
            obj.initWhenCreate();
            return obj;
        };
        Object.defineProperty(UIRenderer.prototype, "zIndex", {
            get: function () {
                return this._zIndex;
            },
            set: function (zIndex) {
                if (zIndex !== this._zIndex) {
                    this._zIndex = zIndex;
                    if (this.canvas) {
                        wdCb.DomQuery.create(this.canvas).css("zIndex", zIndex);
                    }
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UIRenderer.prototype, "dirty", {
            get: function () {
                return this._dirty;
            },
            set: function (dirty) {
                if (dirty) {
                    this._dirty = true;
                    this.dirtyDuringCurrentLoop = true;
                }
            },
            enumerable: true,
            configurable: true
        });
        UIRenderer.prototype.resetDirty = function () {
            this._dirty = false;
        };
        UIRenderer.prototype.addToObject = function (object) {
            this._referenceList.addChild(object);
            this.entityObject = object;
        };
        UIRenderer.prototype.removeFromObject = function (object) {
            this._referenceList.removeChild(object);
            if (this._referenceList.getCount() > 0) {
                return;
            }
            _super.prototype.removeFromObject.call(this, object);
        };
        UIRenderer.prototype.init = function () {
        };
        UIRenderer.prototype.initWhenCreate = function () {
            this._createOverlayCanvas();
        };
        UIRenderer.prototype.dispose = function () {
            if (this._referenceList.getCount() > 0) {
                return;
            }
            wdCb.DomQuery.create(this.canvas).remove();
        };
        UIRenderer.prototype.render = function (renderer, geometry, camera) {
        };
        UIRenderer.prototype.clearCanvas = function () {
            this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);
            this.isClearCanvas = true;
        };
        UIRenderer.prototype._createOverlayCanvas = function () {
            var canvas = null, view = null;
            if (this.canvas) {
                return;
            }
            canvas = wdCb.DomQuery.create("<canvas></canvas>").prependTo("body");
            view = wd.DeviceManager.getInstance().view;
            canvas.css("position", "absolute");
            canvas.css("left", view.x + "px");
            canvas.css("top", view.y + "px");
            canvas.css("zIndex", this.zIndex);
            canvas.attr("width", view.width);
            canvas.attr("height", view.height);
            this.canvas = canvas.get(0);
            this.context = this.canvas.getContext("2d");
        };
        __decorate([
            wd.execOnlyOnce("_isInit")
        ], UIRenderer.prototype, "init", null);
        return UIRenderer;
    })(wd.RendererComponent);
    wd.UIRenderer = UIRenderer;
})(wd || (wd = {}));
var wd;
(function (wd) {
    (function (UIRendererState) {
        UIRendererState[UIRendererState["NORMAL"] = 0] = "NORMAL";
        UIRendererState[UIRendererState["DIRTY"] = 1] = "DIRTY";
        UIRendererState[UIRendererState["NOT_DIRTY"] = 2] = "NOT_DIRTY";
    })(wd.UIRendererState || (wd.UIRendererState = {}));
    var UIRendererState = wd.UIRendererState;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var Octree = (function (_super) {
        __extends(Octree, _super);
        function Octree() {
            _super.apply(this, arguments);
            this.maxDepth = 2;
            this.maxNodeCapacity = 64;
            this._root = null;
            this._selectionList = wdCb.Collection.create();
        }
        Octree.create = function () {
            var obj = new this();
            return obj;
        };
        Octree.prototype.addToObject = function (entityObject) {
            _super.prototype.addToObject.call(this, entityObject);
        };
        Octree.prototype.build = function () {
            var entityObjectList = this.getChildren(), currentDepth = 0, maxNodeCapacity = this.maxNodeCapacity, maxDepth = this.maxDepth;
            var buildTree = function (worldMin, worldMax, currentDepth, entityObjectList, parentNode) {
                var halfExtends = new wd.Vector3((worldMax.x - worldMin.x) / 2, (worldMax.y - worldMin.y) / 2, (worldMax.z - worldMin.z) / 2);
                for (var x = 0; x < 2; x++) {
                    for (var y = 0; y < 2; y++) {
                        for (var z = 0; z < 2; z++) {
                            var localMin = worldMin.copy().add(halfExtends.copy().scale(x, y, z)), localMax = worldMin.copy().add(halfExtends.copy().scale(x + 1, y + 1, z + 1)), node = wd.OctreeNode.create(localMin, localMax, maxNodeCapacity, currentDepth + 1, maxDepth);
                            node.addEntityObjects(entityObjectList);
                            if (node.entityObjectCount > maxNodeCapacity && currentDepth < maxDepth) {
                                buildTree(localMin, localMax, currentDepth + 1, entityObjectList, node);
                            }
                            parentNode.addNode(node);
                        }
                    }
                }
            };
            this._updateColliderForFirstCheck(entityObjectList);
            var _a = this._getWorldExtends(entityObjectList), worldMin = _a.worldMin, worldMax = _a.worldMax;
            this._root = wd.OctreeNode.create(worldMin, worldMax, maxNodeCapacity, currentDepth + 1, maxDepth);
            buildTree(worldMin, worldMax, currentDepth, entityObjectList, this._root);
        };
        Octree.prototype.getRenderListByFrustumCull = function () {
            var frustumPlanes = wd.Director.getInstance().scene.camera.getComponent(wd.CameraController).getPlanes();
            return this._visitRoot("findAndAddToRenderList", [frustumPlanes, this._selectionList]);
        };
        Octree.prototype.getIntersectListWithRay = function (e) {
            var locationInView = e.locationInView;
            return this._visitRoot("findAndAddToIntersectList", [wd.Director.getInstance().scene.camera.getComponent(wd.CameraController).createRay(locationInView.x, locationInView.y), this._selectionList]);
        };
        Octree.prototype.getCollideObjects = function (shape) {
            return this._visitRoot("findAndAddToCollideList", [shape, this._selectionList]);
        };
        Octree.prototype.getChildren = function () {
            return this.entityObject.getChildren();
        };
        Octree.prototype._visitRoot = function (method, args) {
            this._selectionList.removeAllChildren();
            this._root.nodeList.forEach(function (topNode) {
                topNode[method].apply(topNode, args);
            });
            this._selectionList = this._selectionList.removeRepeatItems();
            return this._selectionList;
        };
        Octree.prototype._updateColliderForFirstCheck = function (entityObjectList) {
            var collider = null, self = this;
            entityObjectList.forEach(function (entityObject) {
                if (!entityObject.hasComponent(wd.ColliderForFirstCheck)) {
                    collider = self._createCollider();
                    entityObject.addComponent(collider);
                    collider.init();
                }
                else {
                    collider = entityObject.getComponent(wd.BoxColliderForFirstCheck);
                }
                collider.update(null);
            });
        };
        Octree.prototype._getWorldExtends = function (entityObjectList) {
            var worldMin = wd.Vector3.create(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE), worldMax = wd.Vector3.create(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE), self = this;
            entityObjectList.forEach(function (entityObject) {
                var min = null, max = null, collider = null, shape = null;
                collider = entityObject.getComponent(wd.BoxColliderForFirstCheck);
                shape = collider.shape;
                min = shape.getMin();
                max = shape.getMax();
                self._checkExtends(min, worldMin, worldMax);
                self._checkExtends(max, worldMin, worldMax);
            });
            return {
                worldMin: worldMin,
                worldMax: worldMax
            };
        };
        Octree.prototype._createCollider = function () {
            return wd.BoxColliderForFirstCheck.create();
        };
        Octree.prototype._checkExtends = function (v, min, max) {
            if (v.x < min.x) {
                min.x = v.x;
            }
            if (v.y < min.y) {
                min.y = v.y;
            }
            if (v.z < min.z) {
                min.z = v.z;
            }
            if (v.x > max.x) {
                max.x = v.x;
            }
            if (v.y > max.y) {
                max.y = v.y;
            }
            if (v.z > max.z) {
                max.z = v.z;
            }
        };
        __decorate([
            wd.require(function (entityObject) {
                wd.assert(entityObject instanceof wd.GameObject, wd.Log.info.FUNC_SHOULD("Octree component", "add to GameObject"));
            })
        ], Octree.prototype, "addToObject", null);
        __decorate([
            wd.require(function () {
                wd.assert(!!wd.Director.getInstance().scene.camera.getComponent(wd.CameraController), wd.Log.info.FUNC_SHOULD("contain CameraController component"));
            })
        ], Octree.prototype, "getRenderListByFrustumCull", null);
        __decorate([
            wd.require(function () {
                wd.assert(!!wd.Director.getInstance().scene.camera.getComponent(wd.CameraController), wd.Log.info.FUNC_SHOULD("contain CameraController component"));
            })
        ], Octree.prototype, "getIntersectListWithRay", null);
        return Octree;
    })(wd.Component);
    wd.Octree = Octree;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var OctreeNode = (function () {
        function OctreeNode(minPoint, maxPoint, capacity, depth, maxDepth) {
            this.entityObjectList = wdCb.Collection.create();
            this.nodeList = wdCb.Collection.create();
            this._depth = null;
            this._maxDepth = null;
            this._capacity = null;
            this._minPoint = null;
            this._maxPoint = null;
            this._boundingVectors = null;
            this._capacity = capacity;
            this._depth = depth;
            this._maxDepth = maxDepth;
            this._minPoint = minPoint;
            this._maxPoint = maxPoint;
        }
        OctreeNode.create = function (minPoint, maxPoint, capacity, depth, maxDepth) {
            var obj = new this(minPoint, maxPoint, capacity, depth, maxDepth);
            obj.initWhenCreate();
            return obj;
        };
        Object.defineProperty(OctreeNode.prototype, "entityObjectCount", {
            get: function () {
                return this.entityObjectList.getCount();
            },
            enumerable: true,
            configurable: true
        });
        OctreeNode.prototype.initWhenCreate = function () {
            this._boundingVectors = wd.BoundingRegionUtils.buildBoundingVectors(this._minPoint, this._maxPoint);
        };
        OctreeNode.prototype.addEntityObjects = function (entityObjectList) {
            var self = this, localMin = this._minPoint, localMax = this._maxPoint;
            entityObjectList.forEach(function (entityObject) {
                if (entityObject.getComponent(wd.BoxColliderForFirstCheck).shape.isIntersectWithBox(localMin, localMax)) {
                    self.entityObjectList.addChild(entityObject);
                }
            });
        };
        OctreeNode.prototype.addNode = function (node) {
            this.nodeList.addChild(node);
        };
        OctreeNode.prototype.findAndAddToRenderList = function (frustumPlanes, selectionList) {
            if (wd.BoundingRegionUtils.isAABBIntersectFrustum(this._boundingVectors, frustumPlanes)) {
                if (this._hasNode()) {
                    this.nodeList.forEach(function (node) {
                        node.findAndAddToRenderList(frustumPlanes, selectionList);
                    });
                    return;
                }
                selectionList.addChildren(this.entityObjectList);
            }
        };
        OctreeNode.prototype.findAndAddToIntersectList = function (ray, selectionList) {
            if (ray.isIntersectWithAABB(this._minPoint, this._maxPoint)) {
                if (this._hasNode()) {
                    this.nodeList.forEach(function (node) {
                        node.findAndAddToIntersectList(ray, selectionList);
                    });
                    return;
                }
                selectionList.addChildren(this.entityObjectList);
            }
        };
        OctreeNode.prototype.findAndAddToCollideList = function (shape, selectionList) {
            if (shape.isIntersectWithBox(this._minPoint, this._maxPoint)) {
                if (this._hasNode()) {
                    this.nodeList.forEach(function (node) {
                        node.findAndAddToCollideList(shape, selectionList);
                    });
                    return;
                }
                selectionList.addChildren(this.entityObjectList);
            }
        };
        OctreeNode.prototype._hasNode = function () {
            return this.nodeList.getCount() > 0;
        };
        __decorate([
            wd.require(function (entityObjectList) {
                entityObjectList.forEach(function (entityObject) {
                    wd.assert(entityObject instanceof wd.GameObject, wd.Log.info.FUNC_SHOULD("add gameObjects"));
                });
            })
        ], OctreeNode.prototype, "addEntityObjects", null);
        return OctreeNode;
    })();
    wd.OctreeNode = OctreeNode;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var ColliderForFirstCheck = (function (_super) {
        __extends(ColliderForFirstCheck, _super);
        function ColliderForFirstCheck() {
            _super.apply(this, arguments);
        }
        return ColliderForFirstCheck;
    })(wd.Component);
    wd.ColliderForFirstCheck = ColliderForFirstCheck;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var BoxColliderForFirstCheck = (function (_super) {
        __extends(BoxColliderForFirstCheck, _super);
        function BoxColliderForFirstCheck() {
            _super.apply(this, arguments);
            this._collider = wd.BoxCollider.create();
        }
        BoxColliderForFirstCheck.create = function () {
            var obj = new this();
            return obj;
        };
        Object.defineProperty(BoxColliderForFirstCheck.prototype, "shape", {
            get: function () {
                return this._collider.shape;
            },
            enumerable: true,
            configurable: true
        });
        BoxColliderForFirstCheck.prototype.init = function () {
            this._collider.entityObject = this.entityObject;
            this._collider.init();
        };
        BoxColliderForFirstCheck.prototype.update = function (elapsedTime) {
            this._collider.update(elapsedTime);
        };
        return BoxColliderForFirstCheck;
    })(wd.ColliderForFirstCheck);
    wd.BoxColliderForFirstCheck = BoxColliderForFirstCheck;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var Collider = (function (_super) {
        __extends(Collider, _super);
        function Collider() {
            _super.apply(this, arguments);
            this.type = wd.ABSTRACT_ATTRIBUTE;
            this.boundingRegion = null;
        }
        Object.defineProperty(Collider.prototype, "shape", {
            get: function () {
                return this.boundingRegion.shape;
            },
            enumerable: true,
            configurable: true
        });
        Collider.prototype.init = function () {
            this.boundingRegion = this.createBoundingRegion();
            this.boundingRegion.init();
            this.buildBoundingRegion();
        };
        Collider.prototype.update = function (elapsedTime) {
            this.boundingRegion.update();
        };
        Collider.prototype.updateShape = function () {
            this.boundingRegion.updateShape();
        };
        Collider.prototype.isIntersectWith = function (collider) {
            if (collider instanceof wd.BoxCollider) {
                return this.boundingRegion.isIntersectWithBox(collider.boundingRegion);
            }
            else if (collider instanceof wd.SphereCollider) {
                return this.boundingRegion.isIntersectWithSphere(collider.boundingRegion);
            }
            else {
                wd.Log.warn(wd.Log.info.FUNC_NOT_SUPPORT(this.type + " collider", "intersect with " + collider.type + " collider"));
            }
        };
        Collider.prototype.isCollide = function (targetObject) {
            var collider = null;
            if (this._isSelf(targetObject) || !targetObject.hasComponent(Collider)) {
                return false;
            }
            collider = targetObject.getComponent(Collider);
            if (targetObject.hasComponent(wd.RigidBody)) {
                collider.updateShape();
            }
            return this.isIntersectWith(collider);
        };
        Collider.prototype._isSelf = function (entityObject) {
            return wd.JudgeUtils.isSelf(this.entityObject, entityObject);
        };
        __decorate([
            wd.require(function (collider) {
                wd.assert(collider instanceof Collider, wd.Log.info.FUNC_SHOULD("target", "be collider"));
            })
        ], Collider.prototype, "isIntersectWith", null);
        return Collider;
    })(wd.Component);
    wd.Collider = Collider;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var BoxCollider = (function (_super) {
        __extends(BoxCollider, _super);
        function BoxCollider() {
            _super.apply(this, arguments);
            this.center = wd.Vector3.create(0, 0, 0);
            this.halfExtents = null;
            this.type = wd.ColliderType.BOX;
        }
        BoxCollider.create = function () {
            var obj = new this();
            return obj;
        };
        BoxCollider.prototype.createBoundingRegion = function () {
            return wd.BoxBoundingRegion.create(this.entityObject);
        };
        BoxCollider.prototype.buildBoundingRegion = function () {
            this.boundingRegion.build(this.center, this.halfExtents);
        };
        return BoxCollider;
    })(wd.Collider);
    wd.BoxCollider = BoxCollider;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var SphereCollider = (function (_super) {
        __extends(SphereCollider, _super);
        function SphereCollider() {
            _super.apply(this, arguments);
            this.center = wd.Vector3.create(0, 0, 0);
            this.radius = null;
            this.type = wd.ColliderType.SPHERE;
        }
        SphereCollider.create = function () {
            var obj = new this();
            return obj;
        };
        SphereCollider.prototype.createBoundingRegion = function () {
            return wd.SphereBoundingRegion.create(this.entityObject);
        };
        SphereCollider.prototype.buildBoundingRegion = function () {
            this.boundingRegion.build(this.center, this.radius);
        };
        return SphereCollider;
    })(wd.Collider);
    wd.SphereCollider = SphereCollider;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var BoundingRegion = (function () {
        function BoundingRegion(entityObject) {
            this.shape = null;
            this.entityObject = null;
            this.isUserSpecifyTheRegion = false;
            this.originShape = null;
            this.debugObject = null;
            this.entityObject = entityObject;
        }
        BoundingRegion.prototype.init = function () {
            this.shape = this.createShape();
        };
        BoundingRegion.prototype.build = function (center) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            var params = Array.prototype.slice.call(arguments, 0);
            if (this.isBuildUserSpecifyBoundingRegion.apply(this, params)) {
                this.isUserSpecifyTheRegion = true;
                this.shape.setFromShapeParam.apply(this.shape, params);
            }
            else {
                this.shape.setFromPoints(wd.ColliderUtils.getVertices(this.entityObject));
            }
            this.originShape = this.shape.copy();
            if (wd.DebugConfig.debugCollision) {
                this.debugObject = this.buildDebugObjectFromShape(this.shape);
                wd.Director.getInstance().scene.addChild(this.debugObject);
            }
        };
        BoundingRegion.prototype.update = function () {
            if (this.isNotTransformed()) {
                return;
            }
            if (wd.DebugConfig.debugCollision) {
                this.updateShape();
                this.updateDebugObjectFromShape(this.shape);
            }
            else if (!this.entityObject.hasComponent(wd.RigidBody)) {
                this.updateShape();
            }
        };
        BoundingRegion.prototype.isIntersectWithSphere = function (boundingRegion) {
            return this.shape.isIntersectWithSphere(boundingRegion.shape);
        };
        BoundingRegion.prototype.isIntersectWithBox = function (boundingRegion) {
            return this.shape.isIntersectWithBox(boundingRegion.shape);
        };
        BoundingRegion.prototype.buildDebugObjectFromShape = function (shape) {
            var material = null, geometry = null, renderer = null, entityObject = null;
            material = wd.BasicMaterial.create();
            material.color = wd.Color.create("rgb(255,0,0)");
            geometry = wd.CustomGeometry.create();
            geometry.material = material;
            this.setDebugObjectGeometry(geometry, shape);
            renderer = wd.MeshRenderer.create();
            renderer.drawMode = wd.DrawMode.LINES;
            entityObject = wd.GameObject.create();
            entityObject.addComponent(geometry);
            entityObject.addComponent(renderer);
            entityObject.transform.translate(shape.center);
            entityObject.name = "debugBoundingRegion" + this.entityObject.uid;
            entityObject.init();
            return entityObject;
        };
        __decorate([
            wd.ensure(function (returnValue, center) {
                var args = [];
                for (var _i = 2; _i < arguments.length; _i++) {
                    args[_i - 2] = arguments[_i];
                }
                if (this.isBuildUserSpecifyBoundingRegion.apply(this, Array.prototype.slice.call(arguments, 1))) {
                    wd.assert(this.shape.center.isEqual(center), wd.Log.info.FUNC_SHOULD_NOT("transform shape when build"));
                }
            })
        ], BoundingRegion.prototype, "build", null);
        return BoundingRegion;
    })();
    wd.BoundingRegion = BoundingRegion;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var BoxBoundingRegion = (function (_super) {
        __extends(BoxBoundingRegion, _super);
        function BoxBoundingRegion() {
            _super.apply(this, arguments);
        }
        BoxBoundingRegion.create = function (entityObject) {
            var obj = new this(entityObject);
            return obj;
        };
        BoxBoundingRegion.prototype.updateShape = function () {
            var transform = this.entityObject.transform;
            if (this.isUserSpecifyTheRegion) {
                this.shape.setFromTranslationAndScale(this.originShape, transform.localToWorldMatrix);
            }
            else {
                if (transform.isRotate) {
                    this.shape.setFromObject(this.entityObject);
                }
                else {
                    this.shape.setFromTranslationAndScale(this.originShape, transform.localToWorldMatrix);
                }
            }
        };
        BoxBoundingRegion.prototype.createShape = function () {
            return wd.AABBShape.create();
        };
        BoxBoundingRegion.prototype.updateDebugObjectFromShape = function (shape) {
            var geometry = this.debugObject.getComponent(wd.CustomGeometry);
            this.setDebugObjectGeometry(geometry, shape);
            this.debugObject.transform.position = shape.center;
        };
        BoxBoundingRegion.prototype.setDebugObjectGeometry = function (geometry, shape) {
            var halfExtents = shape.halfExtents, x = halfExtents.x, y = halfExtents.y, z = halfExtents.z;
            geometry.vertices = [
                -x, -y, -z, -x, -y, z, x, -y, z, x, -y, -z,
                -x, y, -z, -x, y, z, x, y, z, x, y, -z
            ];
            geometry.indices = [
                0, 1, 1, 2, 2, 3, 3, 0,
                4, 5, 5, 6, 6, 7, 7, 4,
                0, 4, 1, 5, 2, 6, 3, 7
            ];
        };
        BoxBoundingRegion.prototype.isBuildUserSpecifyBoundingRegion = function (center, halfExtents) {
            return !!center && !!halfExtents;
        };
        BoxBoundingRegion.prototype.isNotTransformed = function () {
            var transform = this.entityObject.transform;
            return !transform.isRotate && !transform.isTranslate && !transform.isScale;
        };
        __decorate([
            wd.require(function (shape) {
                wd.assert(this.debugObject, wd.Log.info.FUNC_SHOULD("build debugObject"));
            })
        ], BoxBoundingRegion.prototype, "updateDebugObjectFromShape", null);
        __decorate([
            wd.require(function (geometry, shape) {
                wd.assert(shape.halfExtents && !shape.halfExtents.isZero(), wd.Log.info.FUNC_SHOULD_NOT("halfExtents", "be zero"));
            })
        ], BoxBoundingRegion.prototype, "setDebugObjectGeometry", null);
        return BoxBoundingRegion;
    })(wd.BoundingRegion);
    wd.BoxBoundingRegion = BoxBoundingRegion;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var SphereBoundingRegion = (function (_super) {
        __extends(SphereBoundingRegion, _super);
        function SphereBoundingRegion() {
            _super.apply(this, arguments);
        }
        SphereBoundingRegion.create = function (entityObject) {
            var obj = new this(entityObject);
            return obj;
        };
        SphereBoundingRegion.prototype.updateShape = function () {
            var transform = this.entityObject.transform;
            this.shape.setFromTranslationAndScale(this.originShape, transform.localToWorldMatrix);
        };
        SphereBoundingRegion.prototype.createShape = function () {
            return wd.SphereShape.create();
        };
        SphereBoundingRegion.prototype.updateDebugObjectFromShape = function (shape) {
            this.debugObject.transform.position = shape.center;
            var scaleTimes = shape.radius / this.originShape.radius;
            this.debugObject.transform.scale = wd.Vector3.create(scaleTimes, scaleTimes, scaleTimes);
        };
        SphereBoundingRegion.prototype.isNotTransformed = function () {
            var transform = this.entityObject.transform;
            return !transform.isTranslate && !transform.isScale;
        };
        SphereBoundingRegion.prototype.isBuildUserSpecifyBoundingRegion = function (center, radius) {
            return !!center && !!radius;
        };
        SphereBoundingRegion.prototype.setDebugObjectGeometry = function (geometry, shape) {
            var SEGMENTS = 40, RINGCOUNT = 3;
            var radius = shape.radius, vertices = [], x = 0;
            for (var ring = 0; ring < RINGCOUNT; ring++) {
                var xo = 0, yo = 1, zo = 2, theta = null;
                if (ring === 1) {
                    xo = 1;
                    yo = 0;
                    zo = 2;
                }
                else if (ring === 2) {
                    xo = 0;
                    yo = 2;
                    zo = 1;
                }
                for (var i = 0; i < SEGMENTS; i++) {
                    theta = 2 * Math.PI * (i / SEGMENTS);
                    vertices[x + xo] = radius * Math.cos(theta);
                    vertices[x + yo] = 0;
                    vertices[x + zo] = radius * Math.sin(theta);
                    x += 3;
                    theta = 2 * Math.PI * ((i + 1) / SEGMENTS);
                    vertices[x + xo] = radius * Math.cos(theta);
                    vertices[x + yo] = 0;
                    vertices[x + zo] = radius * Math.sin(theta);
                    x += 3;
                }
            }
            geometry.vertices = vertices;
        };
        __decorate([
            wd.require(function (shape) {
                wd.assert(this.debugObject, wd.Log.info.FUNC_SHOULD("build debugObject"));
            })
        ], SphereBoundingRegion.prototype, "updateDebugObjectFromShape", null);
        __decorate([
            wd.require(function (geometry, shape) {
                wd.assert(shape.radius > 0, wd.Log.info.FUNC_SHOULD("radius", "> 0"));
            })
        ], SphereBoundingRegion.prototype, "setDebugObjectGeometry", null);
        return SphereBoundingRegion;
    })(wd.BoundingRegion);
    wd.SphereBoundingRegion = SphereBoundingRegion;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var BoundingRegionUtils = (function () {
        function BoundingRegionUtils() {
        }
        BoundingRegionUtils.isAABBInFrustum = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var boundingVectors = null, frustumPlanes = null;
            if (args.length === 2) {
                boundingVectors = args[0];
                frustumPlanes = args[1];
            }
            else if (args.length === 3) {
                var minPoint = args[0], maxPoint = args[1];
                boundingVectors = this.buildBoundingVectors(minPoint, maxPoint);
                frustumPlanes = args[2];
            }
            for (var p = 0; p < 6; p++) {
                for (var i = 0; i < 8; i++) {
                    if (frustumPlanes[p].dotCoordinate(boundingVectors[i]) < 0) {
                        return false;
                    }
                }
            }
            return true;
        };
        BoundingRegionUtils.isAABBIntersectFrustum = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var boundingVectors = null, frustumPlanes = null;
            if (args.length === 2) {
                boundingVectors = args[0];
                frustumPlanes = args[1];
            }
            else if (args.length === 3) {
                var minPoint = args[0], maxPoint = args[1];
                boundingVectors = this.buildBoundingVectors(minPoint, maxPoint);
                frustumPlanes = args[2];
            }
            for (var p = 0; p < 6; p++) {
                var inCount = 8;
                for (var i = 0; i < 8; i++) {
                    if (frustumPlanes[p].dotCoordinate(boundingVectors[i]) < 0) {
                        inCount--;
                    }
                    else {
                        break;
                    }
                }
                if (inCount === 0) {
                    return false;
                }
            }
            return true;
        };
        BoundingRegionUtils.buildBoundingVectors = function (minPoint, maxPoint) {
            var boundingVectors = [];
            boundingVectors.push(minPoint.copy());
            boundingVectors.push(maxPoint.copy());
            boundingVectors.push(minPoint.copy());
            boundingVectors[2].x = maxPoint.x;
            boundingVectors.push(minPoint.copy());
            boundingVectors[3].y = maxPoint.y;
            boundingVectors.push(minPoint.copy());
            boundingVectors[4].z = maxPoint.z;
            boundingVectors.push(maxPoint.copy());
            boundingVectors[5].z = minPoint.z;
            boundingVectors.push(maxPoint.copy());
            boundingVectors[6].x = minPoint.x;
            boundingVectors.push(maxPoint.copy());
            boundingVectors[7].y = minPoint.y;
            return boundingVectors;
        };
        return BoundingRegionUtils;
    })();
    wd.BoundingRegionUtils = BoundingRegionUtils;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var Shape = (function () {
        function Shape() {
            this.center = wd.Vector3.create(0, 0, 0);
        }
        Shape.prototype.isBoxAndSphereIntersected = function (box, sphere) {
            var sphereCenter = sphere.center, sphereRadius = sphere.radius;
            return sphereCenter.distanceToSquared(box.closestPointTo(sphereCenter)) < Math.pow(sphereRadius, 2);
        };
        return Shape;
    })();
    wd.Shape = Shape;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var AABBShape = (function (_super) {
        __extends(AABBShape, _super);
        function AABBShape() {
            _super.apply(this, arguments);
            this.halfExtents = wd.Vector3.create(0.5, 0.5, 0.5);
        }
        AABBShape.create = function () {
            var obj = new this();
            return obj;
        };
        AABBShape.getCenter = function (min, max) {
            return wd.Vector3.create().add2(max, min).scale(0.5);
        };
        AABBShape.getHalfExtents = function (min, max) {
            return wd.Vector3.create().sub2(max, min).scale(0.5);
        };
        AABBShape.prototype.setMinMax = function (min, max) {
            this.center = AABBShape.getCenter(min, max);
            this.halfExtents = AABBShape.getHalfExtents(min, max);
        };
        AABBShape.prototype.getMin = function () {
            return this.center.copy().sub(this.halfExtents);
        };
        AABBShape.prototype.getMax = function () {
            return this.center.copy().add(this.halfExtents);
        };
        AABBShape.prototype.setFromShapeParam = function (center, halfExtents) {
            this.center = center;
            this.halfExtents = halfExtents;
        };
        AABBShape.prototype.setFromPoints = function (points) {
            var self = this, min = this._getEmptyMin(), max = this._getEmptyMax();
            wd.GeometryUtils.iterateThreeComponent(points, function (point) {
                self._expandByPoint(point, min, max);
            });
            this.setMinMax(min, max);
            return this;
        };
        AABBShape.prototype.setFromTransformedAABB = function (aabb, matrix) {
            var bc = this.center, br = this.halfExtents, ac = aabb.center.values, ar = aabb.halfExtents.values, m = matrix.values, mx0 = m[0], mx1 = m[4], mx2 = m[8], my0 = m[1], my1 = m[5], my2 = m[9], mz0 = m[2], mz1 = m[6], mz2 = m[10], mx0a = Math.abs(mx0), mx1a = Math.abs(mx1), mx2a = Math.abs(mx2), my0a = Math.abs(my0), my1a = Math.abs(my1), my2a = Math.abs(my2), mz0a = Math.abs(mz0), mz1a = Math.abs(mz1), mz2a = Math.abs(mz2);
            bc.set(m[12] + mx0 * ac[0] + mx1 * ac[1] + mx2 * ac[2], m[13] + my0 * ac[0] + my1 * ac[1] + my2 * ac[2], m[14] + mz0 * ac[0] + mz1 * ac[1] + mz2 * ac[2]);
            br.set(mx0a * ar[0] + mx1a * ar[1] + mx2a * ar[2], my0a * ar[0] + my1a * ar[1] + my2a * ar[2], mz0a * ar[0] + mz1a * ar[1] + mz2a * ar[2]);
        };
        AABBShape.prototype.setFromTranslationAndScale = function (aabb, matrix) {
            var translation = matrix.getTranslation(), scale = matrix.getScale();
            this.center = aabb.center.copy().add(translation);
            this.halfExtents = aabb.halfExtents.copy().mul(scale);
        };
        AABBShape.prototype.setFromObject = function (entityObject) {
            var modelMatrix = entityObject.transform.localToWorldMatrix, vertices = wd.ColliderUtils.getVertices(entityObject), self = this, min = this._getEmptyMin(), max = this._getEmptyMax();
            wd.GeometryUtils.iterateThreeComponent(vertices, function (point) {
                point.applyMatrix4(modelMatrix);
                self._expandByPoint(point, min, max);
            });
            this.setMinMax(min, max);
        };
        AABBShape.prototype.isIntersectWithBox = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var aMax = this.getMax(), aMin = this.getMin(), bMax = null, bMin = null;
            if (args.length === 1) {
                var shape = args[0];
                bMin = shape.getMin();
                bMax = shape.getMax();
            }
            else if (args.length === 2) {
                bMin = args[0];
                bMax = args[1];
            }
            return (aMin.x <= bMax.x) && (aMax.x >= bMin.x) &&
                (aMin.y <= bMax.y) && (aMax.y >= bMin.y) &&
                (aMin.z <= bMax.z) && (aMax.z >= bMin.z);
        };
        AABBShape.prototype.isIntersectWithSphere = function (shape) {
            return this.isBoxAndSphereIntersected(this, shape);
        };
        AABBShape.prototype.isIntersectWithRay = function (ray) {
            return ray.isIntersectWithAABB(this);
        };
        AABBShape.prototype.closestPointTo = function (point) {
            var min = this.getMin(), max = this.getMax(), resultPoint = wd.Vector3.create();
            if (point.x < min.x) {
                resultPoint.x = min.x;
            }
            else if (point.x > max.x) {
                resultPoint.x = max.x;
            }
            else {
                resultPoint.x = point.x;
            }
            if (point.y < min.y) {
                resultPoint.y = min.y;
            }
            else if (point.y > max.y) {
                resultPoint.y = max.y;
            }
            else {
                resultPoint.y = point.y;
            }
            if (point.z < min.z) {
                resultPoint.z = min.z;
            }
            else if (point.z > max.z) {
                resultPoint.z = max.z;
            }
            else {
                resultPoint.z = point.z;
            }
            return resultPoint;
        };
        AABBShape.prototype.containPoint = function (point) {
            var min = this.getMin(), max = this.getMax();
            for (var i = 0; i < 3; ++i) {
                if (point.values[i] < min.values[i] || point.values[i] > max.values[i]) {
                    return false;
                }
            }
            return true;
        };
        AABBShape.prototype.copy = function () {
            var shape = AABBShape.create();
            shape.center = this.center.copy();
            shape.halfExtents = this.halfExtents.copy();
            return shape;
        };
        AABBShape.prototype._getEmptyMin = function () {
            return wd.Vector3.create(Infinity, Infinity, Infinity);
        };
        AABBShape.prototype._getEmptyMax = function () {
            return wd.Vector3.create(-Infinity, -Infinity, -Infinity);
        };
        AABBShape.prototype._expandByPoint = function (point, min, max) {
            min.min(point);
            max.max(point);
        };
        __decorate([
            wd.require(function (entityObject) {
                var vertices = wd.ColliderUtils.getVertices(entityObject);
                wd.assert(vertices && vertices.length > 0, wd.Log.info.FUNC_MUST_DEFINE("vertices"));
            })
        ], AABBShape.prototype, "setFromObject", null);
        return AABBShape;
    })(wd.Shape);
    wd.AABBShape = AABBShape;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var SphereShape = (function (_super) {
        __extends(SphereShape, _super);
        function SphereShape() {
            _super.apply(this, arguments);
            this.radius = 1;
        }
        SphereShape.create = function () {
            var obj = new this();
            return obj;
        };
        SphereShape.prototype.setFromShapeParam = function (center, radius) {
            this.center = center;
            this.radius = radius;
        };
        SphereShape.prototype.setFromPoints = function (points) {
            var aabb = wd.AABBShape.create();
            this.center = aabb.setFromPoints(points).center;
            this.radius = this._findMaxDistanceOfPointsToCenter(points);
        };
        SphereShape.prototype.setFromTranslationAndScale = function (sphere, matrix) {
            var translation = matrix.getTranslation(), scale = matrix.getScale();
            this.center = sphere.center.copy().add(translation);
            this.radius = sphere.radius * Math.max(scale.x, scale.y, scale.z);
        };
        SphereShape.prototype.isIntersectWithSphere = function (shape) {
            var radiusSum = this.radius + shape.radius;
            return shape.center.distanceToSquared(this.center) <= (Math.pow(radiusSum, 2));
        };
        SphereShape.prototype.isIntersectWithBox = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var shape = null;
            if (args.length === 1) {
                shape = args[0];
            }
            else if (args.length === 2) {
                var min = args[0], max = args[1];
                shape = wd.AABBShape.create();
                shape.setMinMax(min, max);
            }
            return this.isBoxAndSphereIntersected(shape, this);
        };
        SphereShape.prototype.isIntersectWithRay = function (ray) {
            return ray.isIntersectWithSphere(this);
        };
        SphereShape.prototype.containPoint = function (point) {
            return point.distanceToSquared(this.center) <= (Math.pow(this.radius, 2));
        };
        SphereShape.prototype.copy = function () {
            var shape = SphereShape.create();
            shape.center = this.center.copy();
            shape.radius = this.radius;
            return shape;
        };
        SphereShape.prototype._findMaxDistanceOfPointsToCenter = function (points) {
            var maxRadiusSq = 0, center = this.center;
            wd.GeometryUtils.iterateThreeComponent(points, function (point) {
                maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(point));
            });
            return Math.sqrt(maxRadiusSq);
        };
        return SphereShape;
    })(wd.Shape);
    wd.SphereShape = SphereShape;
})(wd || (wd = {}));
var wd;
(function (wd) {
    (function (ColliderType) {
        ColliderType[ColliderType["BOX"] = "box"] = "BOX";
        ColliderType[ColliderType["SPHERE"] = "sphere"] = "SPHERE";
    })(wd.ColliderType || (wd.ColliderType = {}));
    var ColliderType = wd.ColliderType;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var ColliderUtils = (function () {
        function ColliderUtils() {
        }
        ColliderUtils.getVertices = function (entityObject) {
            if (!entityObject.hasComponent(wd.Geometry)) {
                if (entityObject.hasTag(wd.WDTag.CONTAINER)) {
                    return entityObject.getChild(0).getComponent(wd.Geometry).vertices;
                }
                return null;
            }
            return entityObject.getComponent(wd.Geometry).geometryData.vertices;
        };
        __decorate([
            wd.require(function (entityObject) {
                if (!entityObject.hasComponent(wd.Geometry)) {
                    if (entityObject.hasTag(wd.WDTag.CONTAINER)) {
                        var firstChildVertices = entityObject.getChild(0).getComponent(wd.Geometry).vertices, secondChildVertices = entityObject.getChild(1).getComponent(wd.Geometry).vertices;
                        wd.assert(!!firstChildVertices && firstChildVertices.length === secondChildVertices.length, wd.Log.info.FUNC_SHOULD("if entityObject is WDTag.CONTAINER, then its children should has its vertices"));
                    }
                }
            })
        ], ColliderUtils, "getVertices", null);
        return ColliderUtils;
    })();
    wd.ColliderUtils = ColliderUtils;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var RigidBody = (function (_super) {
        __extends(RigidBody, _super);
        function RigidBody() {
            _super.apply(this, arguments);
            this._friction = 0;
            this._restitution = 0;
            this._children = wdCb.Collection.create();
            this.lockConstraint = wd.LockConstraint.create(this);
            this.distanceConstraint = wd.DistanceConstraint.create(this);
            this.hingeConstraint = wd.HingeConstraint.create(this);
            this.pointToPointConstraintList = wd.PointToPointConstraintList.create(this);
            this._afterInitSubscription = null;
            this._afterInitRigidbodyAddConstraintSubscription = null;
        }
        Object.defineProperty(RigidBody.prototype, "friction", {
            get: function () {
                return this._friction;
            },
            set: function (friction) {
                this._friction = friction;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RigidBody.prototype, "restitution", {
            get: function () {
                return this._restitution;
            },
            set: function (restitution) {
                this._restitution = restitution;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RigidBody.prototype, "children", {
            get: function () {
                return this._children;
            },
            set: function (children) {
                if (wd.JudgeUtils.isArray(children)) {
                    var arr = children;
                    this._children = wdCb.Collection.create(arr);
                }
                else {
                    var list = children;
                    this._children = list;
                }
                this._children.forEach(function (child) {
                    child.addTag("isRigidbodyChild");
                });
            },
            enumerable: true,
            configurable: true
        });
        RigidBody.prototype.init = function () {
            var self = this;
            this._afterInitSubscription = wd.EventManager.fromEvent(wd.EngineEvent.AFTER_GAMEOBJECT_INIT)
                .subscribe(function () {
                self._afterInitHandler();
            });
            this._afterInitRigidbodyAddConstraintSubscription = wd.EventManager.fromEvent(wd.EngineEvent.AFTER_GAMEOBJECT_INIT_RIGIDBODY_ADD_CONSTRAINT)
                .subscribe(function () {
                self._afterInitRigidbodyAddConstraintHandler();
            });
        };
        RigidBody.prototype.addConstraint = function () {
            var _this = this;
            var engineAdapter = this.getPhysicsEngineAdapter();
            if (this.lockConstraint && this.lockConstraint.connectedBody) {
                engineAdapter.addLockConstraint(this.entityObject, this.lockConstraint);
            }
            if (this.distanceConstraint && this.distanceConstraint.connectedBody) {
                engineAdapter.addDistanceConstraint(this.entityObject, this.distanceConstraint);
            }
            if (this.hingeConstraint && this.hingeConstraint.connectedBody) {
                engineAdapter.addHingeConstraint(this.entityObject, this.hingeConstraint);
            }
            if (this.pointToPointConstraintList && this.pointToPointConstraintList.getCount() > 0) {
                this.pointToPointConstraintList.forEach(function (constraint) {
                    engineAdapter.addPointToPointConstraint(_this.entityObject, constraint);
                }, this);
            }
        };
        RigidBody.prototype.removeFromObject = function (entityObject) {
            var engineAdapter = this.getPhysicsEngineAdapter();
            if (engineAdapter) {
                this.getPhysicsEngineAdapter().removeGameObject(entityObject);
                this.getPhysicsEngineAdapter().removeConstraints(entityObject);
            }
            _super.prototype.removeFromObject.call(this, entityObject);
        };
        RigidBody.prototype.dispose = function () {
            this._children.forEach(function (child) {
                child.removeTag("isRigidbodyChild");
            }, this);
            this._afterInitSubscription && this._afterInitSubscription.dispose();
            this._afterInitRigidbodyAddConstraintSubscription && this._afterInitRigidbodyAddConstraintSubscription.dispose();
        };
        RigidBody.prototype.getPhysicsEngineAdapter = function () {
            return wd.Director.getInstance().scene.physicsEngineAdapter;
        };
        RigidBody.prototype.isPhysicsEngineAdapterExist = function () {
            return !!wd.Director.getInstance().scene && !!wd.Director.getInstance().scene.physicsEngineAdapter;
        };
        RigidBody.prototype.addBodyToPhysicsEngine = function (method, data) {
            if (data === void 0) { data = {}; }
            var engineAdapter = this.getPhysicsEngineAdapter(), position = this.entityObject.transform.position, rotation = this.entityObject.transform.rotation;
            engineAdapter[method](this.entityObject, wdCb.ExtendUtils.extend({
                position: position,
                rotation: rotation,
                children: this._children,
                lockConstraint: this.lockConstraint,
                onContact: wdCb.FunctionUtils.bind(this, this._onContact),
                onCollisionStart: wdCb.FunctionUtils.bind(this, this._onCollisionStart),
                onCollisionEnd: wdCb.FunctionUtils.bind(this, this._onCollisionEnd),
                friction: this.friction,
                restitution: this.restitution
            }, data));
        };
        RigidBody.prototype._onContact = function (collideObject) {
            this.entityObject.execScript("onContact", wdCb.Collection.create([collideObject]));
        };
        RigidBody.prototype._onCollisionStart = function (collideObject) {
            this.entityObject.execScript("onCollisionStart", wdCb.Collection.create([collideObject]));
        };
        RigidBody.prototype._onCollisionEnd = function () {
            this.entityObject.execScript("onCollisionEnd");
        };
        RigidBody.prototype._isContainer = function (entityObject) {
            var rigidBody = entityObject.getComponent(RigidBody);
            return rigidBody.children.getCount() > 0;
        };
        RigidBody.prototype._afterInitHandler = function () {
            this.addBody();
        };
        RigidBody.prototype._afterInitRigidbodyAddConstraintHandler = function () {
            this.addConstraint();
        };
        __decorate([
            wd.operateBodyDataGetterAndSetter("Friction")
        ], RigidBody.prototype, "friction", null);
        __decorate([
            wd.operateBodyDataGetterAndSetter("Restitution")
        ], RigidBody.prototype, "restitution", null);
        __decorate([
            wd.require(function () {
                if (this._isContainer(this.entityObject)) {
                    wd.assert(!this.entityObject.getComponent(wd.Collider), wd.Log.info.FUNC_SHOULD_NOT("container", "add collider component in the case of compound"));
                }
                else {
                    wd.assert(!!this.entityObject.getComponent(wd.Collider), wd.Log.info.FUNC_MUST_DEFINE("collider component when add rigid body component"));
                    wd.assert(!!this.entityObject.getComponent(wd.Collider).shape, wd.Log.info.FUNC_SHOULD("create collider.shape before adding rigid body component"));
                }
            })
        ], RigidBody.prototype, "addBodyToPhysicsEngine", null);
        __decorate([
            wd.execOnlyOnce("_isAfterInit")
        ], RigidBody.prototype, "_afterInitHandler", null);
        __decorate([
            wd.execOnlyOnce("_isAfterInitRigidbodyAddConstraint")
        ], RigidBody.prototype, "_afterInitRigidbodyAddConstraintHandler", null);
        return RigidBody;
    })(wd.Component);
    wd.RigidBody = RigidBody;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var DynamicRigidBody = (function (_super) {
        __extends(DynamicRigidBody, _super);
        function DynamicRigidBody() {
            _super.apply(this, arguments);
            this._linearDamping = 0;
            this._angularDamping = 0;
            this._velocity = wd.Vector3.create(0, 0, 0);
            this._angularVelocity = wd.Vector3.create(0, 0, 0);
            this._mass = 1;
            this.impulse = null;
            this.force = null;
            this.hitPoint = null;
        }
        DynamicRigidBody.create = function () {
            var obj = new this();
            return obj;
        };
        Object.defineProperty(DynamicRigidBody.prototype, "linearDamping", {
            get: function () {
                return this._linearDamping;
            },
            set: function (linearDamping) {
                this._linearDamping = linearDamping;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DynamicRigidBody.prototype, "angularDamping", {
            get: function () {
                return this._angularDamping;
            },
            set: function (angularDamping) {
                this._angularDamping = angularDamping;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DynamicRigidBody.prototype, "velocity", {
            get: function () {
                return this._velocity;
            },
            set: function (velocity) {
                this._velocity = velocity;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DynamicRigidBody.prototype, "angularVelocity", {
            get: function () {
                return this._angularVelocity;
            },
            set: function (angularVelocity) {
                this._angularVelocity = angularVelocity;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DynamicRigidBody.prototype, "mass", {
            get: function () {
                return this._mass;
            },
            set: function (mass) {
                this._mass = mass;
            },
            enumerable: true,
            configurable: true
        });
        DynamicRigidBody.prototype.addBody = function () {
            this.addBodyToPhysicsEngine("addDynamicBody", {
                mass: this.mass,
                linearDamping: this.linearDamping,
                angularDamping: this.angularDamping,
                velocity: this.velocity,
                angularVelocity: this.angularVelocity,
                impulse: this.impulse,
                force: this.force,
                hitPoint: this.hitPoint
            });
        };
        __decorate([
            wd.operateBodyDataGetterAndSetter("LinearDamping")
        ], DynamicRigidBody.prototype, "linearDamping", null);
        __decorate([
            wd.operateBodyDataGetterAndSetter("AngularDamping")
        ], DynamicRigidBody.prototype, "angularDamping", null);
        __decorate([
            wd.operateBodyDataGetterAndSetter("Velocity")
        ], DynamicRigidBody.prototype, "velocity", null);
        __decorate([
            wd.operateBodyDataGetterAndSetter("AngularVelocity")
        ], DynamicRigidBody.prototype, "angularVelocity", null);
        __decorate([
            wd.operateBodyDataGetterAndSetter("Mass")
        ], DynamicRigidBody.prototype, "mass", null);
        return DynamicRigidBody;
    })(wd.RigidBody);
    wd.DynamicRigidBody = DynamicRigidBody;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var KinematicRigidBody = (function (_super) {
        __extends(KinematicRigidBody, _super);
        function KinematicRigidBody() {
            _super.apply(this, arguments);
            this._velocity = wd.Vector3.create(0, 0, 0);
            this._angularVelocity = wd.Vector3.create(0, 0, 0);
            this._mass = 1;
        }
        KinematicRigidBody.create = function () {
            var obj = new this();
            return obj;
        };
        Object.defineProperty(KinematicRigidBody.prototype, "velocity", {
            get: function () {
                return this._velocity;
            },
            set: function (velocity) {
                this._velocity = velocity;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(KinematicRigidBody.prototype, "angularVelocity", {
            get: function () {
                return this._angularVelocity;
            },
            set: function (angularVelocity) {
                this._angularVelocity = angularVelocity;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(KinematicRigidBody.prototype, "mass", {
            get: function () {
                return this._mass;
            },
            set: function (mass) {
                this._mass = mass;
            },
            enumerable: true,
            configurable: true
        });
        KinematicRigidBody.prototype.addBody = function () {
            this.addBodyToPhysicsEngine("addKinematicBody", {
                mass: this.mass,
                velocity: this.velocity,
                angularVelocity: this.angularVelocity
            });
        };
        __decorate([
            wd.operateBodyDataGetterAndSetter("Velocity")
        ], KinematicRigidBody.prototype, "velocity", null);
        __decorate([
            wd.operateBodyDataGetterAndSetter("AngularVelocity")
        ], KinematicRigidBody.prototype, "angularVelocity", null);
        __decorate([
            wd.operateBodyDataGetterAndSetter("Mass")
        ], KinematicRigidBody.prototype, "mass", null);
        return KinematicRigidBody;
    })(wd.RigidBody);
    wd.KinematicRigidBody = KinematicRigidBody;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var StaticRigidBody = (function (_super) {
        __extends(StaticRigidBody, _super);
        function StaticRigidBody() {
            _super.apply(this, arguments);
        }
        StaticRigidBody.create = function () {
            var obj = new this();
            return obj;
        };
        StaticRigidBody.prototype.addBody = function () {
            this.addBodyToPhysicsEngine("addStaticBody");
        };
        return StaticRigidBody;
    })(wd.RigidBody);
    wd.StaticRigidBody = StaticRigidBody;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var PhysicsConstraint = (function () {
        function PhysicsConstraint(rigidBody) {
            this.maxForce = null;
            this.rigidBody = null;
            this.rigidBody = rigidBody;
        }
        return PhysicsConstraint;
    })();
    wd.PhysicsConstraint = PhysicsConstraint;
    var LockConstraint = (function (_super) {
        __extends(LockConstraint, _super);
        function LockConstraint() {
            _super.apply(this, arguments);
            this._connectedBody = null;
        }
        LockConstraint.create = function (rigidBody) {
            var obj = new this(rigidBody);
            return obj;
        };
        Object.defineProperty(LockConstraint.prototype, "connectedBody", {
            get: function () {
                return this._connectedBody;
            },
            set: function (connectedBody) {
                var engineAdapter = null;
                this._connectedBody = connectedBody;
                if (!this.rigidBody.isPhysicsEngineAdapterExist()) {
                    return;
                }
                engineAdapter = this.rigidBody.getPhysicsEngineAdapter();
                engineAdapter.removeLockConstraint(this.rigidBody.entityObject);
                this.rigidBody.addConstraint();
            },
            enumerable: true,
            configurable: true
        });
        return LockConstraint;
    })(PhysicsConstraint);
    wd.LockConstraint = LockConstraint;
    var DistanceConstraint = (function (_super) {
        __extends(DistanceConstraint, _super);
        function DistanceConstraint() {
            _super.apply(this, arguments);
            this._connectedBody = null;
            this.distance = null;
        }
        DistanceConstraint.create = function (rigidBody) {
            var obj = new this(rigidBody);
            return obj;
        };
        Object.defineProperty(DistanceConstraint.prototype, "connectedBody", {
            get: function () {
                return this._connectedBody;
            },
            set: function (connectedBody) {
                var engineAdapter = null;
                this._connectedBody = connectedBody;
                if (!this.rigidBody.isPhysicsEngineAdapterExist()) {
                    return;
                }
                engineAdapter = this.rigidBody.getPhysicsEngineAdapter();
                engineAdapter.removeDistanceConstraint(this.rigidBody.entityObject);
                this.rigidBody.addConstraint();
            },
            enumerable: true,
            configurable: true
        });
        return DistanceConstraint;
    })(PhysicsConstraint);
    wd.DistanceConstraint = DistanceConstraint;
    var HingeConstraint = (function (_super) {
        __extends(HingeConstraint, _super);
        function HingeConstraint() {
            _super.apply(this, arguments);
            this._connectedBody = null;
            this.pivotA = null;
            this.pivotB = null;
            this.axisA = null;
            this.axisB = null;
        }
        HingeConstraint.create = function (rigidBody) {
            var obj = new this(rigidBody);
            return obj;
        };
        Object.defineProperty(HingeConstraint.prototype, "connectedBody", {
            get: function () {
                return this._connectedBody;
            },
            set: function (connectedBody) {
                var engineAdapter = null;
                this._connectedBody = connectedBody;
                if (!this.rigidBody.isPhysicsEngineAdapterExist()) {
                    return;
                }
                engineAdapter = this.rigidBody.getPhysicsEngineAdapter();
                engineAdapter.removeHingeConstraint(this.rigidBody.entityObject);
                this.rigidBody.addConstraint();
            },
            enumerable: true,
            configurable: true
        });
        return HingeConstraint;
    })(PhysicsConstraint);
    wd.HingeConstraint = HingeConstraint;
    var PointToPointConstraint = (function (_super) {
        __extends(PointToPointConstraint, _super);
        function PointToPointConstraint() {
            _super.apply(this, arguments);
            this.connectedBody = null;
            this.pivotA = null;
            this.pivotB = null;
        }
        PointToPointConstraint.create = function (rigidBody) {
            var obj = new this(rigidBody);
            return obj;
        };
        return PointToPointConstraint;
    })(PhysicsConstraint);
    wd.PointToPointConstraint = PointToPointConstraint;
    var PointToPointConstraintList = (function () {
        function PointToPointConstraintList(rigidBody) {
            this._rigidBody = null;
            this._list = wdCb.Collection.create();
            this._rigidBody = rigidBody;
        }
        PointToPointConstraintList.create = function (rigidBody) {
            var obj = new this(rigidBody);
            return obj;
        };
        PointToPointConstraintList.prototype.forEach = function (func, context) {
            if (context === void 0) { context = wd.root; }
            this._list.forEach(func, context);
        };
        PointToPointConstraintList.prototype.getCount = function () {
            return this._list.getCount();
        };
        PointToPointConstraintList.prototype.addChild = function (constraint) {
            var engineAdapter = null;
            this._list.addChild(constraint);
            if (!this._rigidBody.isPhysicsEngineAdapterExist()) {
                return;
            }
            engineAdapter = this._rigidBody.getPhysicsEngineAdapter();
            engineAdapter.addPointToPointConstraint(this._rigidBody.entityObject, constraint);
        };
        PointToPointConstraintList.prototype.addChildren = function (arg) {
            var _this = this;
            if (wd.JudgeUtils.isArray(arg)) {
                for (var _i = 0, _a = arg; _i < _a.length; _i++) {
                    var constraint = _a[_i];
                    this.addChild(constraint);
                }
            }
            else {
                var constraintList = arg;
                constraintList.forEach(function (constraint) {
                    _this.addChild(constraint);
                }, this);
            }
        };
        PointToPointConstraintList.prototype.removeChild = function (constraint) {
            var engineAdapter = null;
            this._list.removeChild(constraint);
            if (!this._rigidBody.isPhysicsEngineAdapterExist()) {
                return;
            }
            engineAdapter = this._rigidBody.getPhysicsEngineAdapter();
            engineAdapter.removePointToPointConstraint(constraint);
        };
        return PointToPointConstraintList;
    })();
    wd.PointToPointConstraintList = PointToPointConstraintList;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var PhysicsEngineFactory = (function () {
        function PhysicsEngineFactory() {
        }
        PhysicsEngineFactory.create = function (type) {
            var result = null;
            switch (type) {
                case wd.PhysicsEngineType.CANNON:
                    result = wd.CannonAdapter.create();
                    break;
                default:
                    wdCb.Log.error(true, wdCb.Log.info.FUNC_UNEXPECT("physics engine type"));
                    break;
            }
            return result;
        };
        return PhysicsEngineFactory;
    })();
    wd.PhysicsEngineFactory = PhysicsEngineFactory;
})(wd || (wd = {}));
var wd;
(function (wd) {
    (function (PhysicsEngineType) {
        PhysicsEngineType[PhysicsEngineType["CANNON"] = 0] = "CANNON";
    })(wd.PhysicsEngineType || (wd.PhysicsEngineType = {}));
    var PhysicsEngineType = wd.PhysicsEngineType;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var CannonDataList = (function () {
        function CannonDataList() {
            this.dataList = wdCb.Collection.create();
        }
        CannonDataList.prototype.getCount = function () {
            return this.dataList.getCount();
        };
        CannonDataList.prototype.removeByGameObject = function (obj) {
            this.dataList.removeChild(function (_a) {
                var entityObject = _a.entityObject, body = _a.body;
                return wd.JudgeUtils.isEqual(entityObject, obj);
            });
        };
        return CannonDataList;
    })();
    wd.CannonDataList = CannonDataList;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var CannonGameObjectDataList = (function (_super) {
        __extends(CannonGameObjectDataList, _super);
        function CannonGameObjectDataList() {
            _super.apply(this, arguments);
        }
        CannonGameObjectDataList.create = function () {
            var obj = new this();
            return obj;
        };
        CannonGameObjectDataList.prototype.remove = function (obj) {
            this.removeByGameObject(obj);
        };
        CannonGameObjectDataList.prototype.updateBodyTransformData = function () {
            this.dataList.forEach(function (_a) {
                var entityObject = _a.entityObject, body = _a.body;
                var transform = entityObject.transform;
                if (transform.isTranslate || transform.isRotate) {
                    body.position = wd.CannonUtils.convertToCannonVector3(entityObject.transform.position);
                    body.quaternion = wd.CannonUtils.convertToCannonQuaternion(entityObject.transform.rotation);
                }
            });
        };
        CannonGameObjectDataList.prototype.updateGameObjectTransformData = function () {
            this.dataList.forEach(function (_a) {
                var entityObject = _a.entityObject, body = _a.body;
                if (entityObject.hasTag("isRigidbodyChild")) {
                    return;
                }
                entityObject.transform.position = wd.CannonUtils.convertToWonderVector3(body.position);
                entityObject.transform.rotation = wd.CannonUtils.convertToWonderQuaternion(body.quaternion);
            });
        };
        CannonGameObjectDataList.prototype.add = function (obj, body) {
            this.dataList.addChild({
                entityObject: obj,
                body: body
            });
        };
        CannonGameObjectDataList.prototype.findGameObjectByBody = function (b) {
            var result = this.dataList.findOne(function (_a) {
                var entityObject = _a.entityObject, body = _a.body;
                return body === b;
            });
            return result !== null ? result.entityObject : null;
        };
        CannonGameObjectDataList.prototype.findBodyByGameObject = function (obj) {
            var result = this.dataList.findOne(function (_a) {
                var entityObject = _a.entityObject, body = _a.body;
                return wd.JudgeUtils.isEqual(entityObject, obj);
            });
            return result !== null ? result.body : null;
        };
        return CannonGameObjectDataList;
    })(wd.CannonDataList);
    wd.CannonGameObjectDataList = CannonGameObjectDataList;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var CannonMaterialList = (function (_super) {
        __extends(CannonMaterialList, _super);
        function CannonMaterialList() {
            _super.apply(this, arguments);
        }
        CannonMaterialList.create = function () {
            var obj = new this();
            return obj;
        };
        CannonMaterialList.prototype.remove = function (obj) {
            this.removeByGameObject(obj);
        };
        CannonMaterialList.prototype.findMaterialByGameObject = function (obj) {
            var result = this.dataList.findOne(function (_a) {
                var entityObject = _a.entityObject, material = _a.material;
                return wd.JudgeUtils.isEqual(entityObject, obj);
            });
            return result !== null ? result.material : null;
        };
        CannonMaterialList.prototype.add = function (obj, material) {
            this.dataList.addChild({
                entityObject: obj,
                material: material
            });
        };
        CannonMaterialList.prototype.addContactMaterial = function (world, currentMaterial, friction, restitution) {
            this.dataList.forEach(function (_a) {
                var entityObject = _a.entityObject, material = _a.material;
                world.addContactMaterial(new CANNON.ContactMaterial(material, currentMaterial, {
                    friction: friction,
                    restitution: restitution
                }));
            });
        };
        CannonMaterialList.prototype.getContactMaterialData = function (world, currentMaterial, dataName) {
            var result = null;
            this.dataList.forEach(function (_a) {
                var entityObject = _a.entityObject, material = _a.material;
                var contactMaterial = world.getContactMaterial(material, currentMaterial);
                if (!contactMaterial) {
                    return;
                }
                result = contactMaterial[dataName];
                return wdCb.$BREAK;
            });
            return result;
        };
        CannonMaterialList.prototype.getContactMaterials = function (world, currentMaterial) {
            var resultArr = [];
            this.dataList.forEach(function (_a) {
                var entityObject = _a.entityObject, material = _a.material;
                var contactMaterial = world.getContactMaterial(material, currentMaterial);
                if (!contactMaterial) {
                    return;
                }
                resultArr.push(contactMaterial);
            });
            return resultArr;
        };
        CannonMaterialList.prototype.setContactMaterialData = function (world, currentMaterial, dataName, data) {
            this.dataList.forEach(function (_a) {
                var entityObject = _a.entityObject, material = _a.material;
                var contactMaterial = world.getContactMaterial(material, currentMaterial);
                if (!contactMaterial) {
                    return;
                }
                contactMaterial[dataName] = data;
            });
        };
        return CannonMaterialList;
    })(wd.CannonDataList);
    wd.CannonMaterialList = CannonMaterialList;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var CannonConstraintDataList = (function (_super) {
        __extends(CannonConstraintDataList, _super);
        function CannonConstraintDataList() {
            _super.apply(this, arguments);
        }
        return CannonConstraintDataList;
    })(wd.CannonDataList);
    wd.CannonConstraintDataList = CannonConstraintDataList;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var CannonSingleConstraintDataList = (function (_super) {
        __extends(CannonSingleConstraintDataList, _super);
        function CannonSingleConstraintDataList() {
            _super.apply(this, arguments);
        }
        CannonSingleConstraintDataList.prototype.add = function (obj, constraint) {
            this.dataList.addChild({
                entityObject: obj,
                constraint: constraint
            });
        };
        CannonSingleConstraintDataList.prototype.remove = function (obj) {
            this.removeByGameObject(obj);
        };
        CannonSingleConstraintDataList.prototype.findConstraintByGameObject = function (obj) {
            var result = this.dataList.findOne(function (_a) {
                var entityObject = _a.entityObject;
                return wd.JudgeUtils.isEqual(entityObject, obj);
            });
            return result !== null ? result.constraint : null;
        };
        return CannonSingleConstraintDataList;
    })(wd.CannonConstraintDataList);
    wd.CannonSingleConstraintDataList = CannonSingleConstraintDataList;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var CannonLockConstraintDataList = (function (_super) {
        __extends(CannonLockConstraintDataList, _super);
        function CannonLockConstraintDataList() {
            _super.apply(this, arguments);
        }
        CannonLockConstraintDataList.create = function () {
            var obj = new this();
            return obj;
        };
        return CannonLockConstraintDataList;
    })(wd.CannonSingleConstraintDataList);
    wd.CannonLockConstraintDataList = CannonLockConstraintDataList;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var CannonPointToPointConstraintDataList = (function (_super) {
        __extends(CannonPointToPointConstraintDataList, _super);
        function CannonPointToPointConstraintDataList() {
            _super.apply(this, arguments);
        }
        CannonPointToPointConstraintDataList.create = function () {
            var obj = new this();
            return obj;
        };
        CannonPointToPointConstraintDataList.prototype.filter = function (func) {
            return this.dataList.filter(func);
        };
        CannonPointToPointConstraintDataList.prototype.forEach = function (func) {
            this.dataList.forEach(func);
        };
        CannonPointToPointConstraintDataList.prototype.add = function (entityObject, pointToPointConstraint, constraint) {
            this.dataList.addChild({
                entityObject: entityObject,
                pointToPointConstraint: pointToPointConstraint,
                cannonConstraint: constraint
            });
        };
        CannonPointToPointConstraintDataList.prototype.remove = function (constraint) {
            this.dataList.removeChild(function (_a) {
                var pointToPointConstraint = _a.pointToPointConstraint;
                return wd.JudgeUtils.isEqual(pointToPointConstraint, constraint);
            });
        };
        CannonPointToPointConstraintDataList.prototype.findCannonConstraintByPointToPointConstraint = function (constraint) {
            var result = this.dataList.findOne(function (_a) {
                var pointToPointConstraint = _a.pointToPointConstraint;
                return wd.JudgeUtils.isEqual(pointToPointConstraint, constraint);
            });
            return result !== null ? result.cannonConstraint : null;
        };
        return CannonPointToPointConstraintDataList;
    })(wd.CannonConstraintDataList);
    wd.CannonPointToPointConstraintDataList = CannonPointToPointConstraintDataList;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var CannonDistanceConstraintDataList = (function (_super) {
        __extends(CannonDistanceConstraintDataList, _super);
        function CannonDistanceConstraintDataList() {
            _super.apply(this, arguments);
        }
        CannonDistanceConstraintDataList.create = function () {
            var obj = new this();
            return obj;
        };
        return CannonDistanceConstraintDataList;
    })(wd.CannonSingleConstraintDataList);
    wd.CannonDistanceConstraintDataList = CannonDistanceConstraintDataList;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var CannonHingeConstraintDataList = (function (_super) {
        __extends(CannonHingeConstraintDataList, _super);
        function CannonHingeConstraintDataList() {
            _super.apply(this, arguments);
        }
        CannonHingeConstraintDataList.create = function () {
            var obj = new this();
            return obj;
        };
        return CannonHingeConstraintDataList;
    })(wd.CannonSingleConstraintDataList);
    wd.CannonHingeConstraintDataList = CannonHingeConstraintDataList;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var CannonUtils = (function () {
        function CannonUtils() {
        }
        CannonUtils.convertToCannonVector3 = function (v) {
            return new CANNON.Vec3(v.x, v.y, v.z);
        };
        CannonUtils.convertToCannonQuaternion = function (rotation) {
            return new CANNON.Quaternion(rotation.x, rotation.y, rotation.z, rotation.w);
        };
        CannonUtils.convertToWonderVector3 = function (v) {
            return wd.Vector3.create(v.x, v.y, v.z);
        };
        CannonUtils.convertToWonderQuaternion = function (r) {
            return wd.Quaternion.create(r.x, r.y, r.z, r.w);
        };
        return CannonUtils;
    })();
    wd.CannonUtils = CannonUtils;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var CannonAdapter = (function () {
        function CannonAdapter() {
            this.world = null;
            this._materialList = wd.CannonMaterialList.create();
            this._gameObjectDataList = wd.CannonGameObjectDataList.create();
            this._lockConstraintDataList = wd.CannonLockConstraintDataList.create();
            this._distanceConstraintDataList = wd.CannonDistanceConstraintDataList.create();
            this._hingeConstraintDataList = wd.CannonHingeConstraintDataList.create();
            this._pointToPointConstraintDataList = wd.CannonPointToPointConstraintDataList.create();
            this._dynamicBody = null;
            this._kinematicBody = null;
            this._staticBody = null;
            this._lockConstraint = null;
            this._distanceConstraint = null;
            this._hingeConstraint = null;
            this._pointToPointConstraint = null;
        }
        CannonAdapter.create = function () {
            var obj = new this();
            return obj;
        };
        CannonAdapter.prototype.getGravity = function (gravity) {
            return wd.CannonUtils.convertToWonderVector3(this.world.gravity);
        };
        CannonAdapter.prototype.setGravity = function (gravity) {
            this.world.gravity = wd.CannonUtils.convertToCannonVector3(gravity);
        };
        CannonAdapter.prototype.getFriction = function (obj, friction) {
            return this._getMaterialData(obj, "friction");
        };
        CannonAdapter.prototype.setFriction = function (obj, friction) {
            this._setMaterialData(obj, "friction", friction);
        };
        CannonAdapter.prototype.getRestitution = function (obj, restitution) {
            return this._getMaterialData(obj, "restitution");
        };
        CannonAdapter.prototype.setRestitution = function (obj, restitution) {
            this._setMaterialData(obj, "restitution", restitution);
        };
        CannonAdapter.prototype.getLinearDamping = function (obj) {
            return this._getNumberData(obj, "linearDamping");
        };
        CannonAdapter.prototype.setLinearDamping = function (obj, linearDamping) {
            return this._setNumberData(obj, "linearDamping", linearDamping);
        };
        CannonAdapter.prototype.getAngularDamping = function (obj) {
            return this._getNumberData(obj, "angularDamping");
        };
        CannonAdapter.prototype.setAngularDamping = function (obj, angularDamping) {
            return this._setNumberData(obj, "angularDamping", angularDamping);
        };
        CannonAdapter.prototype.getMass = function (obj) {
            return this._getNumberData(obj, "mass");
        };
        CannonAdapter.prototype.setMass = function (obj, mass) {
            return this._setNumberData(obj, "mass", mass);
        };
        CannonAdapter.prototype.getVelocity = function (obj) {
            return this._getVec3Data(obj, "velocity");
        };
        CannonAdapter.prototype.setVelocity = function (obj, velocity) {
            this._setVec3Data(obj, "velocity", velocity);
        };
        CannonAdapter.prototype.getAngularVelocity = function (obj) {
            return this._getVec3Data(obj, "angularVelocity");
        };
        CannonAdapter.prototype.setAngularVelocity = function (obj, angularVelocity) {
            this._setVec3Data(obj, "angularVelocity", angularVelocity);
        };
        CannonAdapter.prototype.init = function () {
            var _a = wd.Director.getInstance().scene.physics, gravity = _a.gravity, iterations = _a.iterations;
            this.world = new CANNON.World();
            this.world.broadphase = new CANNON.NaiveBroadphase();
            this.world.solver.iterations = iterations;
            this.world.gravity.set(gravity.x, gravity.y, gravity.z);
            this._dynamicBody = wd.CannonDynamicBody.create(this.world, this._gameObjectDataList, this._materialList);
            this._kinematicBody = wd.CannonKinematicBody.create(this.world, this._gameObjectDataList, this._materialList);
            this._staticBody = wd.CannonStaticBody.create(this.world, this._gameObjectDataList, this._materialList);
            this._lockConstraint = wd.CannonLockConstraint.create(this.world, this._gameObjectDataList, this._lockConstraintDataList);
            this._distanceConstraint = wd.CannonDistanceConstraint.create(this.world, this._gameObjectDataList, this._distanceConstraintDataList);
            this._hingeConstraint = wd.CannonHingeConstraint.create(this.world, this._gameObjectDataList, this._hingeConstraintDataList);
            this._pointToPointConstraint = wd.CannonPointToPointConstraint.create(this.world, this._gameObjectDataList, this._pointToPointConstraintDataList);
        };
        CannonAdapter.prototype.addDynamicBody = function (entityObject, data) {
            this._dynamicBody.addBody(entityObject, data);
        };
        CannonAdapter.prototype.addKinematicBody = function (entityObject, data) {
            this._kinematicBody.addBody(entityObject, data);
        };
        CannonAdapter.prototype.addStaticBody = function (entityObject, data) {
            this._staticBody.addBody(entityObject, data);
        };
        CannonAdapter.prototype.addLockConstraint = function (entityObject, lockConstraint) {
            this._lockConstraint.addConstraint(entityObject, lockConstraint);
        };
        CannonAdapter.prototype.removeLockConstraint = function (entityObject) {
            this._lockConstraint.removeConstraint(entityObject);
        };
        CannonAdapter.prototype.addDistanceConstraint = function (entityObject, distanceConstraint) {
            this._distanceConstraint.addConstraint(entityObject, distanceConstraint);
        };
        CannonAdapter.prototype.removeDistanceConstraint = function (entityObject) {
            this._distanceConstraint.removeConstraint(entityObject);
        };
        CannonAdapter.prototype.addHingeConstraint = function (entityObject, hingeConstraint) {
            this._hingeConstraint.addConstraint(entityObject, hingeConstraint);
        };
        CannonAdapter.prototype.removeHingeConstraint = function (entityObject) {
            this._hingeConstraint.removeConstraint(entityObject);
        };
        CannonAdapter.prototype.addPointToPointConstraint = function (entityObject, pointToPointConstraint) {
            this._pointToPointConstraint.addConstraint(entityObject, pointToPointConstraint);
        };
        CannonAdapter.prototype.removePointToPointConstraint = function (pointToPointConstraint) {
            this._pointToPointConstraint.removeConstraint(pointToPointConstraint);
        };
        CannonAdapter.prototype.removeGameObject = function (obj) {
            var material = this._getMaterial(obj), body = this._gameObjectDataList.findBodyByGameObject(obj);
            if (body) {
                this.world.remove(body);
            }
            this._gameObjectDataList.remove(obj);
            this._materialList.remove(obj);
        };
        CannonAdapter.prototype.removeConstraints = function (obj) {
            var self = this;
            this._lockConstraint.removeConstraint(obj);
            this._distanceConstraint.removeConstraint(obj);
            this._hingeConstraint.removeConstraint(obj);
            this._pointToPointConstraintDataList
                .filter(function (_a) {
                var entityObject = _a.entityObject;
                return wd.JudgeUtils.isEqual(entityObject, obj);
            })
                .forEach(function (_a) {
                var pointToPointConstraint = _a.pointToPointConstraint;
                self._pointToPointConstraint.removeConstraint(pointToPointConstraint);
            });
        };
        CannonAdapter.prototype.update = function (elapsedTime) {
            this._gameObjectDataList.updateBodyTransformData();
            this.world.step(wd.Director.getInstance().getDeltaTime() / 1000);
            this._gameObjectDataList.updateGameObjectTransformData();
        };
        CannonAdapter.prototype._getMaterial = function (obj) {
            return this._materialList.findMaterialByGameObject(obj);
        };
        CannonAdapter.prototype._getNumberData = function (obj, dataName) {
            var body = this._gameObjectDataList.findBodyByGameObject(obj);
            if (!body) {
                return null;
            }
            return body[dataName];
        };
        CannonAdapter.prototype._setNumberData = function (obj, dataName, data) {
            var body = this._gameObjectDataList.findBodyByGameObject(obj);
            if (!body) {
                return null;
            }
            body[dataName] = data;
        };
        CannonAdapter.prototype._getVec3Data = function (obj, dataName) {
            var body = this._gameObjectDataList.findBodyByGameObject(obj);
            if (!body) {
                return null;
            }
            return wd.CannonUtils.convertToWonderVector3(body[dataName]);
        };
        CannonAdapter.prototype._setVec3Data = function (obj, dataName, data) {
            var body = this._gameObjectDataList.findBodyByGameObject(obj);
            if (!body) {
                return null;
            }
            body[dataName] = wd.CannonUtils.convertToCannonVector3(data);
        };
        CannonAdapter.prototype._getMaterialData = function (obj, dataName) {
            var result = null, currentMaterial = this._getMaterial(obj);
            if (!currentMaterial) {
                return null;
            }
            return this._materialList.getContactMaterialData(this.world, currentMaterial, dataName);
        };
        CannonAdapter.prototype._setMaterialData = function (obj, dataName, data) {
            var world = this.world, currentMaterial = this._getMaterial(obj);
            if (!currentMaterial) {
                wd.Log.warn("no material find, please add material first");
                return;
            }
            this._materialList.setContactMaterialData(this.world, currentMaterial, dataName, data);
        };
        __decorate([
            wd.require(function (obj, dataName) {
                var resultArr = [], firstData = null, currentMaterial = this._getMaterial(obj);
                if (!currentMaterial) {
                    return null;
                }
                resultArr = this._materialList.getContactMaterials(this.world, currentMaterial);
                firstData = resultArr[0];
                for (var _i = 0; _i < resultArr.length; _i++) {
                    var data = resultArr[_i];
                    wd.assert(data === firstData, wd.Log.info.FUNC_SHOULD("the data of contact material which contains the same material", "be the same"));
                }
            })
        ], CannonAdapter.prototype, "_getMaterialData", null);
        return CannonAdapter;
    })();
    wd.CannonAdapter = CannonAdapter;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var CannonBody = (function () {
        function CannonBody(world, gameObjectDataList, materialList) {
            this.world = null;
            this.materialList = null;
            this.gameObjectList = null;
            this.world = world;
            this.gameObjectList = gameObjectDataList;
            this.materialList = materialList;
        }
        CannonBody.prototype.addBody = function (entityObject, data) {
            var body = this.createBody(data);
            if (data.children.getCount() > 0) {
                this._addCompounds(entityObject, data.children, body);
            }
            else {
                body.addShape(this._createShape(entityObject.getComponent(wd.Collider).shape));
            }
            this.afterAddShape(body, data);
            body.material = this._createMaterial(entityObject, data.friction, data.restitution);
            body.position = wd.CannonUtils.convertToCannonVector3(data.position);
            body.quaternion = wd.CannonUtils.convertToCannonQuaternion(data.rotation);
            this.world.addBody(body);
            this.gameObjectList.add(entityObject, body);
            this._bindCollideEvent(body, data.onCollisionStart, data.onContact, data.onCollisionEnd);
            return body;
        };
        CannonBody.prototype.afterAddShape = function (body, data) {
        };
        CannonBody.prototype._createShape = function (shape) {
            var cannonShape = null;
            if (shape instanceof wd.AABBShape) {
                cannonShape = new CANNON.Box(wd.CannonUtils.convertToCannonVector3(shape.halfExtents));
            }
            else if (shape instanceof wd.SphereShape) {
                cannonShape = new CANNON.Sphere(shape.radius);
            }
            return cannonShape;
        };
        CannonBody.prototype._bindCollideEvent = function (targetBody, onCollisionStart, onContact, onCollisionEnd) {
            var self = this;
            targetBody.addEventListener("collide", function (e) {
                var entityObject = self.gameObjectList.findGameObjectByBody(e.body), collideObject = null;
                if (!entityObject) {
                    return;
                }
                collideObject = entityObject;
                onCollisionStart(collideObject);
                onContact(collideObject);
                onCollisionEnd(collideObject);
            });
        };
        CannonBody.prototype._createMaterial = function (entityObject, friction, restitution) {
            var material = null, currentMaterial = null;
            material = this._getMaterial(entityObject);
            if (material) {
                return material;
            }
            currentMaterial = new CANNON.Material("material");
            this._addMaterial(entityObject, currentMaterial, friction, restitution);
            return currentMaterial;
        };
        CannonBody.prototype._getMaterial = function (obj) {
            return this.materialList.findMaterialByGameObject(obj);
        };
        CannonBody.prototype._addMaterial = function (entityObject, currentMaterial, friction, restitution) {
            this.materialList.add(entityObject, currentMaterial);
            this.materialList.addContactMaterial(this.world, currentMaterial, friction, restitution);
        };
        CannonBody.prototype._addCompounds = function (entityObject, children, body) {
            var _this = this;
            var position = entityObject.transform.position, rotation = entityObject.transform.rotation;
            children.forEach(function (child) {
                body.addShape(_this._createShape(child.getComponent(wd.Collider).shape), wd.CannonUtils.convertToCannonVector3(child.transform.position.copy().sub(position)), wd.CannonUtils.convertToCannonQuaternion(child.transform.rotation.copy().sub(rotation)));
            }, this);
        };
        __decorate([
            wd.virtual
        ], CannonBody.prototype, "afterAddShape", null);
        __decorate([
            wd.require(function (entityObject, children, body) {
                children.forEach(function (child) {
                    wd.assert(!!child.getComponent(wd.Collider), wd.Log.info.FUNC_MUST_DEFINE("collider component"));
                    wd.assert(!!child.getComponent(wd.Collider).shape, wd.Log.info.FUNC_SHOULD("create collider.shape"));
                });
            })
        ], CannonBody.prototype, "_addCompounds", null);
        return CannonBody;
    })();
    wd.CannonBody = CannonBody;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var CannonDynamicBody = (function (_super) {
        __extends(CannonDynamicBody, _super);
        function CannonDynamicBody() {
            _super.apply(this, arguments);
        }
        CannonDynamicBody.create = function (world, gameObjectDataList, materialList) {
            var obj = new this(world, gameObjectDataList, materialList);
            return obj;
        };
        CannonDynamicBody.prototype.createBody = function (_a) {
            var mass = _a.mass, linearDamping = _a.linearDamping, angularDamping = _a.angularDamping, velocity = _a.velocity, angularVelocity = _a.angularVelocity;
            return new CANNON.Body({
                mass: mass,
                linearDamping: linearDamping,
                angularDamping: angularDamping,
                velocity: wd.CannonUtils.convertToCannonVector3(velocity),
                angularVelocity: wd.CannonUtils.convertToCannonVector3(angularVelocity)
            });
        };
        CannonDynamicBody.prototype.afterAddShape = function (body, _a) {
            var impulse = _a.impulse, force = _a.force, hitPoint = _a.hitPoint;
            if (impulse && hitPoint) {
                body.applyImpulse(wd.CannonUtils.convertToCannonVector3(impulse), wd.CannonUtils.convertToCannonVector3(hitPoint));
            }
            if (force && hitPoint) {
                body.applyForce(wd.CannonUtils.convertToCannonVector3(force), wd.CannonUtils.convertToCannonVector3(hitPoint));
            }
        };
        return CannonDynamicBody;
    })(wd.CannonBody);
    wd.CannonDynamicBody = CannonDynamicBody;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var CannonKinematicBody = (function (_super) {
        __extends(CannonKinematicBody, _super);
        function CannonKinematicBody() {
            _super.apply(this, arguments);
        }
        CannonKinematicBody.create = function (world, gameObjectDataList, materialList) {
            var obj = new this(world, gameObjectDataList, materialList);
            return obj;
        };
        CannonKinematicBody.prototype.createBody = function (_a) {
            var mass = _a.mass, velocity = _a.velocity, angularVelocity = _a.angularVelocity;
            return new CANNON.Body({
                type: CANNON.Body.KINEMATIC,
                mass: mass,
                velocity: wd.CannonUtils.convertToCannonVector3(velocity),
                angularVelocity: wd.CannonUtils.convertToCannonVector3(angularVelocity)
            });
        };
        return CannonKinematicBody;
    })(wd.CannonBody);
    wd.CannonKinematicBody = CannonKinematicBody;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var CannonStaticBody = (function (_super) {
        __extends(CannonStaticBody, _super);
        function CannonStaticBody() {
            _super.apply(this, arguments);
        }
        CannonStaticBody.create = function (world, gameObjectDataList, materialList) {
            var obj = new this(world, gameObjectDataList, materialList);
            return obj;
        };
        CannonStaticBody.prototype.createBody = function (_a) {
            return new CANNON.Body({
                mass: 0
            });
        };
        return CannonStaticBody;
    })(wd.CannonBody);
    wd.CannonStaticBody = CannonStaticBody;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var CannonConstraint = (function () {
        function CannonConstraint(world, gameObjectDataList, constraintDataList) {
            this.world = null;
            this.gameObjectList = null;
            this.constraintDataList = null;
            this.world = world;
            this.gameObjectList = gameObjectDataList;
            this.constraintDataList = constraintDataList;
        }
        CannonConstraint.prototype.addConstraint = function (entityObject, wonderConstraint) {
            var constraint = null, body = this.gameObjectList.findBodyByGameObject(entityObject);
            constraint = this.createCannonConstraint(body, wonderConstraint);
            this.world.addConstraint(constraint);
            this.addToConstraintDataList(entityObject, wonderConstraint, constraint);
        };
        CannonConstraint.prototype.findBody = function (rigidBody) {
            return this.gameObjectList.findBodyByGameObject(rigidBody.entityObject);
        };
        __decorate([
            wd.require(function (entityObject, pointToPointConstraint) {
                wd.assert(this.gameObjectList.findBodyByGameObject(entityObject) !== null, wd.Log.info.FUNC_SHOULD("add rigid body"));
                wd.assert(this.findBody(pointToPointConstraint.connectedBody), wd.Log.info.FUNC_SHOULD("add connectedBody"));
            })
        ], CannonConstraint.prototype, "addConstraint", null);
        return CannonConstraint;
    })();
    wd.CannonConstraint = CannonConstraint;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var CannonSingleConstraint = (function (_super) {
        __extends(CannonSingleConstraint, _super);
        function CannonSingleConstraint() {
            _super.apply(this, arguments);
        }
        CannonSingleConstraint.prototype.removeConstraint = function (entityObject) {
            var constraint = this.constraintDataList.findConstraintByGameObject(entityObject);
            if (constraint) {
                this.world.removeConstraint(constraint);
            }
            this.constraintDataList.remove(entityObject);
        };
        CannonSingleConstraint.prototype.addToConstraintDataList = function (entityObject, wonderConstraint, cannonConstraint) {
            this.constraintDataList.add(entityObject, cannonConstraint);
        };
        return CannonSingleConstraint;
    })(wd.CannonConstraint);
    wd.CannonSingleConstraint = CannonSingleConstraint;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var CannonLockConstraint = (function (_super) {
        __extends(CannonLockConstraint, _super);
        function CannonLockConstraint() {
            _super.apply(this, arguments);
        }
        CannonLockConstraint.create = function (world, gameObjectDataList, constraintDataList) {
            var obj = new this(world, gameObjectDataList, constraintDataList);
            return obj;
        };
        CannonLockConstraint.prototype.createCannonConstraint = function (body, lockConstraint) {
            var constraint = null, connectedBody = this.findBody(lockConstraint.connectedBody);
            if (lockConstraint.maxForce) {
                constraint = new CANNON.LockConstraint(body, connectedBody, lockConstraint.maxForce);
            }
            else {
                constraint = new CANNON.LockConstraint(body, connectedBody);
            }
            return constraint;
        };
        return CannonLockConstraint;
    })(wd.CannonSingleConstraint);
    wd.CannonLockConstraint = CannonLockConstraint;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var CannonPointToPointConstraint = (function (_super) {
        __extends(CannonPointToPointConstraint, _super);
        function CannonPointToPointConstraint() {
            _super.apply(this, arguments);
        }
        CannonPointToPointConstraint.create = function (world, gameObjectDataList, constraintDataList) {
            var obj = new this(world, gameObjectDataList, constraintDataList);
            return obj;
        };
        CannonPointToPointConstraint.prototype.removeConstraint = function (pointToPointConstraint) {
            var constraint = this.constraintDataList.findCannonConstraintByPointToPointConstraint(pointToPointConstraint);
            if (constraint) {
                this.world.removeConstraint(constraint);
            }
            this.constraintDataList.remove(pointToPointConstraint);
        };
        CannonPointToPointConstraint.prototype.createCannonConstraint = function (body, pointToPointConstraint) {
            var constraint = null, connectedBody = this.findBody(pointToPointConstraint.connectedBody), pivotA = wd.CannonUtils.convertToCannonVector3(pointToPointConstraint.pivotA), pivotB = wd.CannonUtils.convertToCannonVector3(pointToPointConstraint.pivotB);
            if (pointToPointConstraint.maxForce) {
                constraint = new CANNON.PointToPointConstraint(body, pivotA, connectedBody, pivotB, pointToPointConstraint.maxForce);
            }
            else {
                constraint = new CANNON.PointToPointConstraint(body, pivotA, connectedBody, pivotB);
            }
            return constraint;
        };
        CannonPointToPointConstraint.prototype.addToConstraintDataList = function (entityObject, wonderConstraint, cannonConstraint) {
            this.constraintDataList.add(entityObject, wonderConstraint, cannonConstraint);
        };
        return CannonPointToPointConstraint;
    })(wd.CannonConstraint);
    wd.CannonPointToPointConstraint = CannonPointToPointConstraint;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var CannonDistanceConstraint = (function (_super) {
        __extends(CannonDistanceConstraint, _super);
        function CannonDistanceConstraint() {
            _super.apply(this, arguments);
        }
        CannonDistanceConstraint.create = function (world, gameObjectDataList, constraintDataList) {
            var obj = new this(world, gameObjectDataList, constraintDataList);
            return obj;
        };
        CannonDistanceConstraint.prototype.createCannonConstraint = function (body, distanceConstraint) {
            var constraint = null, connectedBody = this.findBody(distanceConstraint.connectedBody);
            constraint = new CANNON.DistanceConstraint(body, connectedBody, distanceConstraint.distance !== null ? distanceConstraint.distance : void 0, distanceConstraint.maxForce !== null ? distanceConstraint.maxForce : void 0);
            return constraint;
        };
        return CannonDistanceConstraint;
    })(wd.CannonSingleConstraint);
    wd.CannonDistanceConstraint = CannonDistanceConstraint;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var CannonHingeConstraint = (function (_super) {
        __extends(CannonHingeConstraint, _super);
        function CannonHingeConstraint() {
            _super.apply(this, arguments);
        }
        CannonHingeConstraint.create = function (world, gameObjectDataList, constraintDataList) {
            var obj = new this(world, gameObjectDataList, constraintDataList);
            return obj;
        };
        CannonHingeConstraint.prototype.createCannonConstraint = function (body, hingeConstraint) {
            var constraint = null, connectedBody = this.findBody(hingeConstraint.connectedBody), pivotA = wd.CannonUtils.convertToCannonVector3(hingeConstraint.pivotA), axisA = wd.CannonUtils.convertToCannonVector3(hingeConstraint.axisA), pivotB = wd.CannonUtils.convertToCannonVector3(hingeConstraint.pivotB), axisB = wd.CannonUtils.convertToCannonVector3(hingeConstraint.axisB), options = {};
            if (hingeConstraint.pivotA) {
                options.pivotA = pivotA;
            }
            if (hingeConstraint.axisA) {
                options.axisA = axisA;
            }
            if (hingeConstraint.pivotB) {
                options.pivotB = pivotB;
            }
            if (hingeConstraint.axisB) {
                options.axisB = axisB;
            }
            if (hingeConstraint.maxForce) {
                options.maxForce = hingeConstraint.maxForce;
            }
            constraint = new CANNON.HingeConstraint(body, connectedBody, options);
            return constraint;
        };
        return CannonHingeConstraint;
    })(wd.CannonSingleConstraint);
    wd.CannonHingeConstraint = CannonHingeConstraint;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var Light = (function (_super) {
        __extends(Light, _super);
        function Light() {
            _super.apply(this, arguments);
            this._shadowMapWidth = null;
            this._shadowMapHeight = null;
            this.color = wd.Color.create("#ffffff");
            this.castShadow = false;
            this.shadowCameraNear = 0.1;
            this.shadowCameraFar = 5000;
            this.shadowBias = wd.ShaderChunk.NULL;
            this.shadowDarkness = 0;
            this.shadowMap = null;
            this.shadowMapRenderer = null;
        }
        Object.defineProperty(Light.prototype, "position", {
            get: function () {
                return this.entityObject.transform.position;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Light.prototype, "shadowMapWidth", {
            get: function () {
                var maxCubemapTextureSize = wd.GPUDetector.getInstance().maxCubemapTextureSize;
                if (!this._shadowMapWidth || this._shadowMapWidth > maxCubemapTextureSize) {
                    return maxCubemapTextureSize;
                }
                return this._shadowMapWidth;
            },
            set: function (shadowMapWidth) {
                this._shadowMapWidth = shadowMapWidth;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Light.prototype, "shadowMapHeight", {
            get: function () {
                var maxCubemapTextureSize = wd.GPUDetector.getInstance().maxCubemapTextureSize;
                if (!this._shadowMapHeight || this._shadowMapHeight > maxCubemapTextureSize) {
                    return maxCubemapTextureSize;
                }
                return this._shadowMapHeight;
            },
            set: function (shadowMapHeight) {
                this._shadowMapHeight = shadowMapHeight;
            },
            enumerable: true,
            configurable: true
        });
        return Light;
    })(wd.Component);
    wd.Light = Light;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var AmbientLight = (function (_super) {
        __extends(AmbientLight, _super);
        function AmbientLight() {
            _super.apply(this, arguments);
        }
        AmbientLight.create = function () {
            var obj = new this();
            return obj;
        };
        AmbientLight.type = "ambientLight";
        return AmbientLight;
    })(wd.Light);
    wd.AmbientLight = AmbientLight;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var SourceLight = (function (_super) {
        __extends(SourceLight, _super);
        function SourceLight() {
            _super.apply(this, arguments);
            this._beforeInitSubscription = null;
        }
        SourceLight.prototype.initWhenCreate = function () {
            var self = this;
            this._beforeInitSubscription = wd.EventManager.fromEvent(wd.EngineEvent.BEFORE_GAMEOBJECT_INIT)
                .subscribe(function () {
                self.beforeInitHandler();
            });
        };
        SourceLight.prototype.dispose = function () {
            this.shadowMap && this.shadowMap.dispose();
            wd.Director.getInstance().scene.removeRenderTargetRenderer(this.shadowMapRenderer);
            this._beforeInitSubscription && this._beforeInitSubscription.dispose();
        };
        SourceLight.prototype.beforeInitHandler = function () {
            if (this.castShadow) {
                this.shadowMap = this.createShadowMap();
                this.shadowMapRenderer = this.createShadowMapRenderer();
                wd.Director.getInstance().scene.addRenderTargetRenderer(this.shadowMapRenderer);
            }
        };
        __decorate([
            wd.execOnlyOnce("_isBeforeInit")
        ], SourceLight.prototype, "beforeInitHandler", null);
        return SourceLight;
    })(wd.Light);
    wd.SourceLight = SourceLight;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var DirectionLight = (function (_super) {
        __extends(DirectionLight, _super);
        function DirectionLight() {
            _super.apply(this, arguments);
            this._shadowRenderList = null;
            this.intensity = 1;
            this.shadowCameraLeft = -1000;
            this.shadowCameraRight = 1000;
            this.shadowCameraTop = 1000;
            this.shadowCameraBottom = -1000;
        }
        DirectionLight.create = function () {
            var obj = new this();
            obj.initWhenCreate();
            return obj;
        };
        Object.defineProperty(DirectionLight.prototype, "shadowRenderList", {
            get: function () {
                return this._shadowRenderList;
            },
            set: function (shadowRenderList) {
                this._shadowRenderList = wdCb.Collection.create(shadowRenderList);
            },
            enumerable: true,
            configurable: true
        });
        DirectionLight.prototype.createShadowMap = function () {
            return wd.TwoDShadowMapTexture.create();
        };
        DirectionLight.prototype.createShadowMapRenderer = function () {
            return wd.TwoDShadowMapRenderTargetRenderer.create(this);
        };
        DirectionLight.type = "directionLight";
        DirectionLight.defaultPosition = wd.Vector3.create(0, 0, 1);
        return DirectionLight;
    })(wd.SourceLight);
    wd.DirectionLight = DirectionLight;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var PointLight = (function (_super) {
        __extends(PointLight, _super);
        function PointLight() {
            _super.apply(this, arguments);
            this._rangeLevel = null;
            this._shadowRenderList = wdCb.Hash.create();
            this.intensity = 1;
            this._attenuation = wd.Attenuation.create();
        }
        PointLight.create = function () {
            var obj = new this();
            obj.initWhenCreate();
            return obj;
        };
        Object.defineProperty(PointLight.prototype, "rangeLevel", {
            get: function () {
                return this._rangeLevel;
            },
            set: function (rangeLevel) {
                this._rangeLevel = rangeLevel;
                this._attenuation.rangeLevel = this._rangeLevel;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PointLight.prototype, "range", {
            get: function () {
                return this._attenuation.range;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PointLight.prototype, "constant", {
            get: function () {
                return this._attenuation.constant;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PointLight.prototype, "linear", {
            get: function () {
                return this._attenuation.linear;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PointLight.prototype, "quadratic", {
            get: function () {
                return this._attenuation.quadratic;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PointLight.prototype, "shadowRenderList", {
            get: function () {
                return this._shadowRenderList;
            },
            set: function (shadowRenderList) {
                shadowRenderList = shadowRenderList;
                for (var direction in shadowRenderList) {
                    if (shadowRenderList.hasOwnProperty(direction)) {
                        var list = shadowRenderList[direction];
                        this._shadowRenderList.addChild(direction, wdCb.Collection.create(list));
                    }
                }
            },
            enumerable: true,
            configurable: true
        });
        PointLight.prototype.createShadowMap = function () {
            return wd.CubemapShadowMapTexture.create();
        };
        PointLight.prototype.createShadowMapRenderer = function () {
            return wd.CubemapShadowMapRenderTargetRenderer.create(this);
        };
        PointLight.type = "pointLight";
        return PointLight;
    })(wd.SourceLight);
    wd.PointLight = PointLight;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var Attenuation = (function () {
        function Attenuation() {
            this._range = null;
            this._linear = null;
            this._quadratic = null;
            this._rangeLevel = 0;
        }
        Attenuation.create = function () {
            var obj = new this();
            return obj;
        };
        Object.defineProperty(Attenuation.prototype, "constant", {
            get: function () {
                return 1.0;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Attenuation.prototype, "range", {
            get: function () {
                return this._range;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Attenuation.prototype, "linear", {
            get: function () {
                return this._linear;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Attenuation.prototype, "quadratic", {
            get: function () {
                return this._quadratic;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Attenuation.prototype, "rangeLevel", {
            get: function () {
                return this._rangeLevel;
            },
            set: function (rangeLevel) {
                this._rangeLevel = rangeLevel;
                this.setByRangeLevel();
            },
            enumerable: true,
            configurable: true
        });
        Attenuation.prototype.setByRangeLevel = function () {
            switch (this._rangeLevel) {
                case 0:
                    this._range = 7;
                    this._linear = 0.7;
                    this._quadratic = 1.8;
                    break;
                case 1:
                    this._range = 13;
                    this._linear = 0.35;
                    this._quadratic = 0.44;
                    break;
                case 2:
                    this._range = 20;
                    this._linear = 0.22;
                    this._quadratic = 0.20;
                    break;
                case 3:
                    this._range = 32;
                    this._linear = 0.14;
                    this._quadratic = 0.07;
                    break;
                case 4:
                    this._range = 50;
                    this._linear = 0.09;
                    this._quadratic = 0.032;
                    break;
                case 5:
                    this._range = 65;
                    this._linear = 0.07;
                    this._quadratic = 0.017;
                    break;
                case 6:
                    this._range = 100;
                    this._linear = 0.045;
                    this._quadratic = 0.0075;
                    break;
                case 7:
                    this._range = 160;
                    this._linear = 0.027;
                    this._quadratic = 0.0028;
                    break;
                case 8:
                    this._range = 200;
                    this._linear = 0.022;
                    this._quadratic = 0.0019;
                    break;
                case 9:
                    this._range = 325;
                    this._linear = 0.014;
                    this._quadratic = 0.0007;
                    break;
                case 10:
                    this._range = 600;
                    this._linear = 0.007;
                    this._quadratic = 0.0002;
                    break;
                case 11:
                    this._range = 3250;
                    this._linear = 0.0014;
                    this._quadratic = 0.000007;
                    break;
                default:
                    wd.Log.error(true, "over light range");
                    break;
            }
        };
        return Attenuation;
    })();
    wd.Attenuation = Attenuation;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var UI = (function (_super) {
        __extends(UI, _super);
        function UI() {
            _super.apply(this, arguments);
            this.context = null;
        }
        Object.defineProperty(UI.prototype, "dirty", {
            get: function () {
                var renderer = this.getUIRenderer();
                if (!renderer) {
                    return true;
                }
                return renderer.dirty;
            },
            set: function (dirty) {
                if (dirty) {
                    var renderer = this.getUIRenderer();
                    if (!renderer) {
                        return;
                    }
                    renderer.dirty = dirty;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UI.prototype, "width", {
            get: function () {
                return this.entityObject ? this.entityObject.transform.width : null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UI.prototype, "height", {
            get: function () {
                return this.entityObject ? this.entityObject.transform.height : null;
            },
            enumerable: true,
            configurable: true
        });
        UI.prototype.init = function () {
            this.context = this.getContext();
        };
        UI.prototype.addToObject = function (entityObject) {
            _super.prototype.addToObject.call(this, entityObject);
            entityObject.uiManager.addChild(this);
        };
        UI.prototype.removeFromObject = function (entityObject) {
            _super.prototype.removeFromObject.call(this, entityObject);
            entityObject.uiManager.removeChild(this);
        };
        UI.prototype.update = function (elapsedTime) {
            var context = this.context;
            if (this.shouldNotUpdate()) {
                return;
            }
            context.save();
            this._setCanvasTransformForRotation();
            this.draw(elapsedTime);
            context.restore();
        };
        UI.prototype.draw = function (elapsedTime) {
        };
        UI.prototype.shouldNotUpdate = function () {
            return false;
        };
        UI.prototype.getContext = function () {
            return this.getUIRenderer().context;
        };
        UI.prototype.getCanvas = function () {
            return this.getUIRenderer().canvas;
        };
        UI.prototype.getUIRenderer = function () {
            if (!this.entityObject) {
                return null;
            }
            return this.entityObject.getComponent(wd.UIRenderer);
        };
        UI.prototype.drawInCenterPoint = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var context = args[0], source = args[1];
            if (args.length === 5) {
                var position = args[2], width = args[3], height = args[4];
                context.drawImage(source, position.x - width / 2, position.y - height / 2, width, height);
            }
            else if (args.length === 9) {
                var sx = args[2], sy = args[3], sw = args[4], sh = args[5], position = args[6], width = args[7], height = args[8];
                context.drawImage(source, sx, sy, sw, sh, position.x - width / 2, position.y - height / 2, width, height);
            }
        };
        UI.prototype._setCanvasTransformForRotation = function () {
            var matrix = this.entityObject.transform.rotationMatrix;
            this.context.setTransform(matrix.a, matrix.b, matrix.c, matrix.d, matrix.tx, matrix.ty);
        };
        __decorate([
            wd.virtual
        ], UI.prototype, "dirty", null);
        __decorate([
            wd.require(function (elapsedTime) {
                wd.assert(this.context !== null, wd.Log.info.FUNC_SHOULD("set context"));
            })
        ], UI.prototype, "update", null);
        __decorate([
            wd.virtual
        ], UI.prototype, "draw", null);
        __decorate([
            wd.virtual
        ], UI.prototype, "shouldNotUpdate", null);
        return UI;
    })(wd.Component);
    wd.UI = UI;
})(wd || (wd = {}));
var wd;
(function (wd) {
    (function (FontXAlignment) {
        FontXAlignment[FontXAlignment["LEFT"] = 0] = "LEFT";
        FontXAlignment[FontXAlignment["CENTER"] = 1] = "CENTER";
        FontXAlignment[FontXAlignment["RIGHT"] = 2] = "RIGHT";
    })(wd.FontXAlignment || (wd.FontXAlignment = {}));
    var FontXAlignment = wd.FontXAlignment;
})(wd || (wd = {}));
var wd;
(function (wd) {
    (function (FontYAlignment) {
        FontYAlignment[FontYAlignment["TOP"] = 0] = "TOP";
        FontYAlignment[FontYAlignment["MIDDLE"] = 1] = "MIDDLE";
        FontYAlignment[FontYAlignment["BOTTOM"] = 2] = "BOTTOM";
    })(wd.FontYAlignment || (wd.FontYAlignment = {}));
    var FontYAlignment = wd.FontYAlignment;
})(wd || (wd = {}));
var wd;
(function (wd) {
    (function (FontDimension) {
        FontDimension[FontDimension["AUTO"] = "auto"] = "AUTO";
    })(wd.FontDimension || (wd.FontDimension = {}));
    var FontDimension = wd.FontDimension;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var Font = (function (_super) {
        __extends(Font, _super);
        function Font() {
            _super.apply(this, arguments);
            this.needFormat = false;
            this._isFirstUpdate = true;
            this._sizeChangeEventSubscription = null;
        }
        Font.prototype.init = function () {
            var self = this;
            _super.prototype.init.call(this);
            this._sizeChangeEventSubscription = wd.EventManager.fromEvent(this.entityObject, wd.EngineEvent.UI_WIDTH_CHANGE)
                .merge(wd.EventManager.fromEvent(this.entityObject, wd.EngineEvent.UI_HEIGHT_CHANGE))
                .subscribe(function () {
                self.dirty = true;
                self.needFormat = true;
            });
        };
        Font.prototype.dispose = function () {
            if (this._sizeChangeEventSubscription) {
                this._sizeChangeEventSubscription.dispose();
            }
        };
        Font.prototype.update = function (elapsedTime) {
            if (!this._isFirstUpdate) {
                if (this.needFormat) {
                    this.reFormat();
                }
            }
            else {
                this._isFirstUpdate = false;
            }
            this.needFormat = false;
            _super.prototype.update.call(this, elapsedTime);
        };
        Font.prototype.reFormat = function () {
        };
        Font.prototype.getLeftCornerPosition = function () {
            var transform = this.entityObject.transform, position = transform.position;
            return wd.Vector2.create(position.x - transform.width / 2, position.y - transform.height / 2);
        };
        __decorate([
            wd.virtual
        ], Font.prototype, "reFormat", null);
        return Font;
    })(wd.UI);
    wd.Font = Font;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var WORD_REX = /([a-zA-Z0-9]+|\S)/, FIRST_ENGLISH_OR_NUM = /^[a-zA-Z0-9]/, LAST_ENGLISH_OR_NUM = /[a-zA-Z0-9]+$/, LAST_INVALID_CHAR = /\s+$/;
    var PlainFont = (function (_super) {
        __extends(PlainFont, _super);
        function PlainFont() {
            _super.apply(this, arguments);
            this._text = "";
            this._fontSize = 10;
            this._fontFamily = "sans-serif";
            this._xAlignment = wd.FontXAlignment.LEFT;
            this._yAlignment = wd.FontYAlignment.TOP;
            this._fillEnabled = true;
            this._fillStyle = "rgba(0, 0, 0, 1)";
            this._strokeEnabled = false;
            this._strokeStyle = null;
            this._strokeSize = null;
            this._fontClientHeightCache = wdCb.Hash.create();
            this._lineHeight = null;
            this._strArr = [];
        }
        PlainFont.create = function () {
            var obj = new this();
            return obj;
        };
        Object.defineProperty(PlainFont.prototype, "text", {
            get: function () {
                return this._text;
            },
            set: function (text) {
                if (text !== this._text) {
                    this._text = text;
                    this.dirty = true;
                    this.needFormat = true;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PlainFont.prototype, "fontSize", {
            get: function () {
                return this._fontSize;
            },
            set: function (fontSize) {
                if (fontSize !== this._fontSize) {
                    this._fontSize = fontSize;
                    this.dirty = true;
                    this.needFormat = true;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PlainFont.prototype, "fontFamily", {
            get: function () {
                return this._fontFamily;
            },
            set: function (fontFamily) {
                if (fontFamily !== this._fontFamily) {
                    this._fontFamily = fontFamily;
                    this.dirty = true;
                    this.needFormat = true;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PlainFont.prototype, "xAlignment", {
            get: function () {
                return this._xAlignment;
            },
            set: function (xAlignment) {
                if (xAlignment !== this._xAlignment) {
                    this._xAlignment = xAlignment;
                    this.dirty = true;
                    this.needFormat = true;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PlainFont.prototype, "yAlignment", {
            get: function () {
                return this._yAlignment;
            },
            set: function (yAlignment) {
                if (yAlignment !== this._yAlignment) {
                    this._yAlignment = yAlignment;
                    this.dirty = true;
                    this.needFormat = true;
                }
            },
            enumerable: true,
            configurable: true
        });
        PlainFont.prototype.init = function () {
            _super.prototype.init.call(this);
            this._formatText();
            this._lineHeight = this._getDefaultLineHeight();
        };
        PlainFont.prototype.setFillStyle = function (fillStyle) {
            this._fillStyle = fillStyle;
        };
        PlainFont.prototype.enableStroke = function (strokeStyle, strokeSize) {
            this._strokeEnabled = true;
            this._fillEnabled = false;
            this._strokeStyle = strokeStyle;
            this._strokeSize = strokeSize;
        };
        PlainFont.prototype.enableFill = function (fillStyle) {
            this._fillEnabled = true;
            this._strokeEnabled = false;
            this._fillStyle = fillStyle;
        };
        PlainFont.prototype.setLineHeight = function (lineHeight) {
            this._lineHeight = lineHeight;
        };
        PlainFont.prototype.reFormat = function () {
            this._formatText();
            this._lineHeight = this._getDefaultLineHeight();
        };
        PlainFont.prototype.draw = function () {
            var context = this.context;
            context.font = this.fontSize + "px '" + this.fontFamily + "'";
            context.textBaseline = "top";
            context.textAlign = "start";
            if (this._strArr.length > 1) {
                this._drawMultiLine();
            }
            else {
                this._drawSingleLine();
            }
        };
        PlainFont.prototype._formatText = function () {
            var maxWidth = this.width;
            this._trimStr();
            if (maxWidth !== 0) {
                this._strArr = this._text.split('\n');
                for (var i = 0; i < this._strArr.length; i++) {
                    var text = this._strArr[i], allWidth = this._measure(text);
                    if (allWidth > maxWidth && text.length > 1) {
                        this._formatMultiLine(i, text, allWidth, maxWidth);
                    }
                }
            }
        };
        PlainFont.prototype._trimStr = function () {
            this._text = this._text.replace(LAST_INVALID_CHAR, "");
        };
        PlainFont.prototype._formatMultiLine = function (i, text, allWidth, maxWidth) {
            var _this = this;
            var LOOP_MAX_NUM = 100;
            var self = this, preText = null, truncationPointIndex = text.length * (maxWidth / allWidth) | 0, nextText = text.substr(truncationPointIndex), loopIndex = 0, width = allWidth - this._measure(nextText), pushNum = 0;
            var truncate = function () {
                while (width > maxWidth && loopIndex < LOOP_MAX_NUM) {
                    truncationPointIndex *= maxWidth / width;
                    truncationPointIndex = Math.floor(truncationPointIndex);
                    nextText = text.substr(truncationPointIndex);
                    width = allWidth - _this._measure(nextText);
                    loopIndex = loopIndex + 1;
                }
                loopIndex = 0;
            };
            var findTruncationPoint = function () {
                while (width < maxWidth && loopIndex < LOOP_MAX_NUM) {
                    if (nextText) {
                        var exec = WORD_REX.exec(nextText);
                        pushNum = exec ? exec[0].length : 1;
                    }
                    truncationPointIndex = truncationPointIndex + pushNum;
                    nextText = text.substr(truncationPointIndex);
                    width = allWidth - _this._measure(nextText);
                    loopIndex = loopIndex + 1;
                }
            };
            var handleTruncationPointIndex = function () {
                if (FIRST_ENGLISH_OR_NUM.test(nextText)) {
                    var preText_1 = text.substr(0, truncationPointIndex), pExec = LAST_ENGLISH_OR_NUM.exec(preText_1);
                    if (pExec) {
                        truncationPointIndex = truncationPointIndex - pExec[0].length;
                    }
                }
                else {
                    truncationPointIndex = truncationPointIndex - pushNum;
                }
                if (truncationPointIndex === 0) {
                    truncationPointIndex = 1;
                }
            };
            var setString = function () {
                nextText = text.substr(truncationPointIndex);
                preText = text.substr(0, truncationPointIndex);
                self._strArr[i] = nextText;
                self._strArr.splice(i, 0, preText);
            };
            truncate();
            findTruncationPoint();
            handleTruncationPointIndex();
            setString();
        };
        PlainFont.prototype._measure = function (text) {
            var context = this.context;
            context.font = this.fontSize + "px '" + this.fontFamily + "'";
            return context.measureText(text).width;
        };
        PlainFont.prototype._getDefaultLineHeight = function () {
            return this._computeLineHeight("normal");
        };
        PlainFont.prototype._computeLineHeight = function (lineHeight) {
            var div = wdCb.DomQuery.create("<div></div>"), dom = div.get(0), resultLineHeight = null;
            dom.style.cssText = "\n             font-family: " + this.fontFamily + ";\n             font-size: " + this.fontSize + "px;\n             position: absolute;\n             left: -100px;\n             top: -100px;\n             line-height: " + lineHeight + ";\n             ";
            div.prependTo("body");
            dom.innerHTML = "abc!";
            resultLineHeight = dom.clientHeight;
            div.remove();
            return resultLineHeight;
        };
        PlainFont.prototype._getFontClientHeight = function () {
            var fontSize = this.fontSize, fontName = this.fontFamily, key = fontSize + "." + fontName, cacheHeight = this._fontClientHeightCache.getChild(key), height = null;
            if (cacheHeight) {
                return cacheHeight;
            }
            height = this._computeLineHeight(1);
            this._fontClientHeightCache.addChild(key, height);
            return height;
        };
        PlainFont.prototype._drawMultiLine = function () {
            var context = this.context, position = this.getLeftCornerPosition(), x = position.x, y = position.y, lineHeight = this._lineHeight, fontClientHeight = this._getFontClientHeight(), self = this, lineCount = this._strArr.length, lineTotalHeight = (lineCount - 1) * lineHeight + fontClientHeight;
            if (self.yAlignment === wd.FontYAlignment.BOTTOM) {
                y = y + self.height - lineTotalHeight;
            }
            else if (self.yAlignment === wd.FontYAlignment.MIDDLE) {
                y = y + (self.height - lineTotalHeight) / 2;
            }
            for (var _i = 0, _a = this._strArr; _i < _a.length; _i++) {
                var str = _a[_i];
                if (self.xAlignment === wd.FontXAlignment.RIGHT) {
                    x = x + self.width - self._measure(str);
                }
                else if (self.xAlignment == wd.FontXAlignment.CENTER) {
                    x = x + (self.width - self._measure(str)) / 2;
                }
                if (self._fillEnabled) {
                    context.fillStyle = self._fillStyle;
                    context.fillText(str, x, y);
                }
                else if (self._strokeEnabled) {
                    context.strokeStyle = self._strokeStyle;
                    context.lineWidth = self._strokeSize;
                    context.strokeText(str, x, y);
                }
                x = position.x;
                y = y + lineHeight;
            }
        };
        PlainFont.prototype._drawSingleLine = function () {
            var context = this.context, position = this.getLeftCornerPosition(), x = position.x, y = position.y, fontClientHeight = this._getFontClientHeight(), self = this, lineCount = 1, lineTotalHeight = fontClientHeight, str = this._strArr[0];
            if (self.yAlignment === wd.FontYAlignment.BOTTOM) {
                y = y + self.height - lineTotalHeight;
            }
            else if (self.yAlignment === wd.FontYAlignment.MIDDLE) {
                y = y + (self.height - lineTotalHeight) / 2;
            }
            if (self.xAlignment === wd.FontXAlignment.RIGHT) {
                x = x + self.width - self._measure(str);
            }
            else if (self.xAlignment == wd.FontXAlignment.CENTER) {
                x = x + (self.width - self._measure(str)) / 2;
            }
            if (self._fillEnabled) {
                context.fillStyle = self._fillStyle;
                context.fillText(str, x, y);
            }
            else if (self._strokeEnabled) {
                context.strokeStyle = self._strokeStyle;
                context.lineWidth = self._strokeSize;
                context.strokeText(str, x, y);
            }
        };
        return PlainFont;
    })(wd.Font);
    wd.PlainFont = PlainFont;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var BitmapFont = (function (_super) {
        __extends(BitmapFont, _super);
        function BitmapFont() {
            _super.apply(this, arguments);
            this._text = "";
            this._xAlignment = wd.FontXAlignment.LEFT;
            this.fntId = null;
            this.bitmapId = null;
            this._charFontList = wdCb.Collection.create();
        }
        BitmapFont.create = function () {
            var obj = new this();
            return obj;
        };
        Object.defineProperty(BitmapFont.prototype, "text", {
            get: function () {
                return this._text;
            },
            set: function (text) {
                if (text !== this._text) {
                    this._text = text;
                    this.dirty = true;
                    this.needFormat = true;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BitmapFont.prototype, "xAlignment", {
            get: function () {
                return this._xAlignment;
            },
            set: function (xAlignment) {
                if (xAlignment !== this._xAlignment) {
                    this._xAlignment = xAlignment;
                    this.dirty = true;
                    this.needFormat = true;
                }
            },
            enumerable: true,
            configurable: true
        });
        BitmapFont.prototype.init = function () {
            var fntObj = this._getFntObj(), imageAsset = this._getImageAsset();
            if (!fntObj) {
                wd.Log.log("impossible to create font: not find fnt file");
                return false;
            }
            if (!imageAsset) {
                wd.Log.log("impossible to create font: not find bitmap file");
                return false;
            }
            _super.prototype.init.call(this);
            this._createAndAddFontCharUIObjects(fntObj, imageAsset.source);
            this._formatText(fntObj);
        };
        BitmapFont.prototype.dispose = function () {
            _super.prototype.dispose.call(this);
            this._removeAllCharFont();
        };
        BitmapFont.prototype.reFormat = function () {
            var fntObj = this._getFntObj(), imageAsset = this._getImageAsset();
            this._removeAllCharFont();
            if (!fntObj) {
                wd.Log.log("impossible to create font: not find fnt file");
                return false;
            }
            if (!imageAsset) {
                wd.Log.log("impossible to create font: not find bitmap file");
                return false;
            }
            this._createAndAddFontCharUIObjects(fntObj, imageAsset.source);
            this._formatText(fntObj);
        };
        BitmapFont.prototype._getFntObj = function () {
            return wd.LoaderManager.getInstance().get(this.fntId);
        };
        BitmapFont.prototype._getImageAsset = function () {
            return wd.LoaderManager.getInstance().get(this.bitmapId);
        };
        BitmapFont.prototype._createAndAddFontCharUIObjects = function (fntObj, image) {
            var locStr = this.text, locFontDict = fntObj.fontDefDictionary, nextFontPositionX = 0, nextFontPositionY = 0, position = this.getLeftCornerPosition(), uiRenderer = this.getUIRenderer(), charFontUIObject = null, charFont = null;
            for (var i = 0, stringLen = locStr.length; i < stringLen; i++) {
                var key = String(locStr.charCodeAt(i)), char = locStr[i];
                if (this._isNewLine(char)) {
                    var charFontData_1 = this._createAndAddFontCharObjectOfNewLineChar(i, char, uiRenderer);
                    charFontUIObject = charFontData_1.charFontUIObject;
                    charFont = charFontData_1.charFont;
                    this._setCharFontUIObjectPosition(charFontUIObject, position.x + nextFontPositionX, position.y + nextFontPositionY);
                    charFont.startPosX = nextFontPositionX;
                    charFont.xAdvance = 0;
                    nextFontPositionX = 0;
                    nextFontPositionY = nextFontPositionY + fntObj.commonHeight;
                    continue;
                }
                var fontDef = this._getFontDef(locFontDict, key), charFontData = null;
                if (!fontDef) {
                    wd.Log.log("character not found " + char);
                    continue;
                }
                charFontData = this._createAndAddFontCharObjectOfCommonChar(fontDef, image, i, char, uiRenderer);
                charFontUIObject = charFontData.charFontUIObject;
                charFont = charFontData.charFont;
                this._setCharFontUIObjectPosition(charFontUIObject, position.x + nextFontPositionX + fontDef.xOffset, position.y + nextFontPositionY + fontDef.yOffset);
                charFont.startPosX = nextFontPositionX;
                charFont.xAdvance = fontDef.xAdvance;
                nextFontPositionX = nextFontPositionX + fontDef.xAdvance;
            }
        };
        BitmapFont.prototype._createAndAddFontCharObjectOfNewLineChar = function (index, char, uiRenderer) {
            var charFontUIObject = this._findCharFontUIObject(index), charFont = null;
            if (!charFontUIObject) {
                var charFontData = this._createCharFont(index, uiRenderer);
                charFontUIObject = charFontData.charFontUIObject;
                charFont = charFontData.charFont;
                this._addCharFontUIObject(charFontUIObject);
            }
            else {
                charFont = charFontUIObject.getComponent(wd.CharFont);
            }
            charFont.char = char;
            return {
                charFontUIObject: charFontUIObject,
                charFont: charFont
            };
        };
        BitmapFont.prototype._createAndAddFontCharObjectOfCommonChar = function (fontDef, image, index, char, uiRenderer) {
            var rect = wd.RectRegion.create(fontDef.rect.x, fontDef.rect.y, fontDef.rect.width, fontDef.rect.height), charFontUIObject = this._findCharFontUIObject(index), charFont = null;
            if (!charFontUIObject) {
                var charFontData = this._createCharFont(index, uiRenderer), transform = null;
                charFontUIObject = charFontData.charFontUIObject;
                transform = charFontUIObject.transform,
                    charFont = charFontData.charFont;
                charFont.image = image;
                charFont.rectRegion = rect;
                transform.width = rect.width;
                transform.height = rect.height;
                this._addCharFontUIObject(charFontUIObject);
            }
            else {
                charFont = charFontUIObject.getComponent(wd.CharFont);
            }
            charFont.char = char;
            return {
                charFontUIObject: charFontUIObject,
                charFont: charFont
            };
        };
        BitmapFont.prototype._formatText = function (fntObj) {
            if (this.width > 0) {
                this._formatMultiLine(fntObj);
            }
            this._formatAlign();
        };
        BitmapFont.prototype._formatMultiLine = function (fntObj) {
            var entityObject = this.entityObject, characterUIObject = null, charFont = null, position = this.getLeftCornerPosition(), x = 0, y = 0, lineHeight = fntObj.commonHeight;
            for (var i = 1, stringLen = this.text.length; i < stringLen; i++) {
                characterUIObject = this._findCharFontUIObject(i);
                charFont = characterUIObject.getComponent(wd.CharFont);
                if (this._isNewLine(charFont.char)) {
                    charFont.isNewLine = true;
                    charFont.isFullLine = false;
                    this._translateCharFontUIObject(characterUIObject, -x, y);
                    x = 0;
                }
                if (this._isExceedWidth(position, charFont, x)) {
                    var prevCharUIObject = this._findCharFontUIObject(i - 1);
                    if (prevCharUIObject) {
                        var prevCharFont = prevCharUIObject.getComponent(wd.CharFont);
                        prevCharFont.isNewLine = true;
                        if (!this._isSpaceUnicode(prevCharFont.char)) {
                            prevCharFont.isFullLine = true;
                        }
                    }
                    x = this._getLetterPosXLeft(charFont);
                    y = y + lineHeight;
                    this._translateCharFontUIObject(characterUIObject, -x, y);
                }
                else {
                    this._translateCharFontUIObject(characterUIObject, -x, y);
                }
            }
        };
        BitmapFont.prototype._formatAlign = function () {
            var position = this.getLeftCornerPosition(), self = this;
            if (this._xAlignment != wd.FontXAlignment.LEFT) {
                var line = [];
                this._charFontList.forEach(function (charFontUIObject) {
                    var charFont = charFontUIObject.getComponent(wd.CharFont);
                    if (!charFont.isNewLine) {
                        line.push(charFont);
                        return;
                    }
                    if (charFont.isNewLine && charFont.isFullLine) {
                        line = [];
                        return;
                    }
                    self._alignLine(position, line, line[line.length - 1]);
                    line = [];
                });
                if (line.length > 0) {
                    self._alignLine(position, line, line[line.length - 1]);
                }
            }
        };
        BitmapFont.prototype._createCharFont = function (index, uiRenderer) {
            var charFontUIObject = wd.UIObject.create(), charFont = wd.CharFont.create();
            charFontUIObject.addComponent(charFont);
            charFontUIObject.addComponent(uiRenderer);
            charFontUIObject.addTag(String(index));
            charFontUIObject.init();
            return {
                charFontUIObject: charFontUIObject,
                charFont: charFont
            };
        };
        BitmapFont.prototype._addCharFontUIObject = function (charFontUIObject) {
            this._charFontList.addChild(charFontUIObject);
            this.entityObject.addChild(charFontUIObject);
        };
        BitmapFont.prototype._findCharFontUIObject = function (index) {
            return this.entityObject.findChildByTag(String(index));
        };
        BitmapFont.prototype._isSpaceUnicode = function (char) {
            var charCode = char.charCodeAt(0);
            return charCode == 32 || charCode == 133 || charCode == 160 || charCode == 5760 || (charCode >= 8192 && charCode <= 8202) || charCode == 8232 || charCode == 8233 || charCode == 8239 || charCode == 8287 || charCode == 12288;
        };
        BitmapFont.prototype._isNewLine = function (char) {
            return char.charCodeAt(0) == 10;
        };
        BitmapFont.prototype._getLetterPosXLeft = function (sp) {
            return sp.startPosX;
        };
        BitmapFont.prototype._getLetterPosXRight = function (leftCornerPosition, sp) {
            return wd.CoordinateUtils.convertCenterPositionXToLeftCornerPositionX(sp.x, sp.width) - leftCornerPosition.x + sp.xAdvance;
        };
        BitmapFont.prototype._getFontDef = function (fontDict, key) {
            return fontDict[key];
        };
        BitmapFont.prototype._isExceedWidth = function (leftCornerPosition, charFont, x) {
            return this._getLetterPosXRight(leftCornerPosition, charFont) - x > this.width;
        };
        BitmapFont.prototype._alignLine = function (leftCornerPosition, line, lastCharFont) {
            var self = this;
            line = this._trimBottomSpaceChar(line);
            lastCharFont = line[line.length - 1];
            line.forEach(function (cp) {
                var shift = null, lineWidth = self._getLetterPosXRight(leftCornerPosition, lastCharFont);
                switch (self._xAlignment) {
                    case wd.FontXAlignment.CENTER:
                        shift = (self.width - lineWidth) / 2;
                        break;
                    case wd.FontXAlignment.RIGHT:
                        shift = self.width - lineWidth;
                        break;
                    default:
                        break;
                }
                cp.x = cp.x + shift;
            });
        };
        BitmapFont.prototype._trimBottomSpaceChar = function (line) {
            var i = line.length - 1;
            if (this._isNewLine(line[i].char)) {
                i = i - 1;
            }
            while (i >= 0 && this._isSpaceUnicode(line[i].char)) {
                i = i - 1;
            }
            line = line.splice(0, i + 1);
            return line;
        };
        BitmapFont.prototype._setCharFontUIObjectPosition = function (charFontUIObject, x, y) {
            var transform = charFontUIObject.transform;
            charFontUIObject.transform.position = wd.CoordinateUtils.convertLeftCornerPositionToCenterPosition(wd.Vector2.create(x, y), transform.width, transform.height);
        };
        BitmapFont.prototype._translateCharFontUIObject = function (charFontUIObject, x, y) {
            charFontUIObject.transform.translate(x, y);
        };
        BitmapFont.prototype._removeAllCharFont = function () {
            this._charFontList.forEach(function (charFont) {
                charFont.dispose();
            });
            this._charFontList.removeAllChildren();
        };
        __decorate([
            wd.require(function (fntObj) {
                if (this.width > 0) {
                    for (var i = 1, stringLen = this.text.length; i < stringLen; i++) {
                        var characterUIObject = this.entityObject.findChildByTag(String(i));
                        wd.assert(!!characterUIObject, "char not has corresponding entityObject");
                        wd.assert(characterUIObject.hasComponent(wd.CharFont), wd.Log.info.FUNC_SHOULD("char entityObject", "contain CharFont component"));
                    }
                }
            })
        ], BitmapFont.prototype, "_formatText", null);
        return BitmapFont;
    })(wd.Font);
    wd.BitmapFont = BitmapFont;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var CharFont = (function (_super) {
        __extends(CharFont, _super);
        function CharFont() {
            _super.apply(this, arguments);
            this._char = null;
            this.startPosX = null;
            this.xAdvance = null;
            this.image = null;
            this.rectRegion = null;
            this.isNewLine = false;
            this.isFullLine = false;
            this._subscription = null;
        }
        CharFont.create = function () {
            var obj = new this();
            return obj;
        };
        Object.defineProperty(CharFont.prototype, "x", {
            get: function () {
                return this.entityObject.transform.position.x;
            },
            set: function (x) {
                var position = this.entityObject.transform.position;
                this.entityObject.transform.position = wd.Vector2.create(x, position.y);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CharFont.prototype, "y", {
            get: function () {
                return this.entityObject.transform.position.y;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CharFont.prototype, "char", {
            get: function () {
                return this._char;
            },
            set: function (char) {
                if (this._char !== null) {
                    wd.Log.log(wd.Log.info.FUNC_NOT_SUPPORT("change char"));
                    return;
                }
                this._char = char;
            },
            enumerable: true,
            configurable: true
        });
        CharFont.prototype.init = function () {
            var self = this;
            _super.prototype.init.call(this);
            this._subscription = wdFrp.fromArray([wd.EventManager.fromEvent(this.entityObject, wd.EngineEvent.TRANSFORM_TRANSLATE), wd.EventManager.fromEvent(this.entityObject, wd.EngineEvent.TRANSFORM_ROTATE), wd.EventManager.fromEvent(this.entityObject, wd.EngineEvent.TRANSFORM_SCALE)])
                .mergeAll()
                .subscribe(function () {
                self.dirty = true;
            });
        };
        CharFont.prototype.dispose = function () {
            _super.prototype.dispose.call(this);
            this._subscription.dispose();
        };
        CharFont.prototype.shouldNotUpdate = function () {
            return this.rectRegion === null || (this.width === 0 && this.height === 0);
        };
        CharFont.prototype.draw = function (elapsedTime) {
            var transform = null, position = null, dw = null, dh = null;
            transform = this.entityObject.transform;
            position = transform.position;
            dw = this.width;
            dh = this.height;
            this.drawInCenterPoint(this.context, this.image, this.rectRegion.x, this.rectRegion.y, this.rectRegion.width, this.rectRegion.height, position, dw, dh);
        };
        __decorate([
            wd.execOnlyOnce("_isInit")
        ], CharFont.prototype, "init", null);
        return CharFont;
    })(wd.Font);
    wd.CharFont = CharFont;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var ProgressBar = (function (_super) {
        __extends(ProgressBar, _super);
        function ProgressBar() {
            _super.apply(this, arguments);
            this._percent = 0;
            this.borderStyle = "rgba(0, 0, 0, 1)";
            this.fillStyle = "rgba(255, 0, 0, 1)";
            this.radius = 5;
            this._offScreenCanvas = null;
            this._offScreenContext = null;
        }
        ProgressBar.create = function () {
            var obj = new this();
            return obj;
        };
        Object.defineProperty(ProgressBar.prototype, "percent", {
            get: function () {
                return this._percent;
            },
            set: function (percent) {
                if (this._percent !== percent) {
                    this._percent = percent;
                    this.dirty = true;
                }
            },
            enumerable: true,
            configurable: true
        });
        ProgressBar.prototype.init = function () {
            _super.prototype.init.call(this);
            this._createOffScreenCanvas();
            this._drawProgressBar();
        };
        ProgressBar.prototype.shouldNotUpdate = function () {
            return this.percent <= 0;
        };
        ProgressBar.prototype.draw = function (elapsedTime) {
            var position = this.entityObject.transform.position;
            this._drawFromLeft(position);
            this._drawBorder(position);
        };
        ProgressBar.prototype._drawFromLeft = function (position) {
            var offscreenCanvas = this._offScreenCanvas, loadedWidth = this.width * this.percent;
            this.drawInCenterPoint(this.context, offscreenCanvas, 0, 0, loadedWidth, this.height, wd.Vector2.create(position.x - this.width / 2 + loadedWidth / 2, position.y), loadedWidth, this.height);
        };
        ProgressBar.prototype._drawBorder = function (position) {
            wd.RoundedRectUtils.drawRoundedRect(this.context, this.borderStyle, null, position.x - this.width / 2, position.y - this.height / 2, this.width, this.height, this.radius);
        };
        ProgressBar.prototype._createOffScreenCanvas = function () {
            var canvas = wdCb.DomQuery.create("<canvas></canvas>");
            canvas.attr("width", this.context.canvas.width);
            canvas.attr("height", this.context.canvas.height);
            this._offScreenCanvas = canvas.get(0);
            this._offScreenContext = this._offScreenCanvas.getContext("2d");
        };
        ProgressBar.prototype._drawProgressBar = function () {
            this._offScreenContext.clearRect(0, 0, this._offScreenCanvas.width, this._offScreenCanvas.height);
            wd.RoundedRectUtils.drawRoundedRect(this._offScreenContext, this.borderStyle, this.fillStyle, 0, 0, this.width, this.height, this.radius);
        };
        __decorate([
            wd.require(function (elapsedTime) {
                wd.assert(this.percent >= 0 && this.percent <= 1, wd.Log.info.FUNC_SHOULD("percent", " >= 0 and <= 1"));
            })
        ], ProgressBar.prototype, "draw", null);
        return ProgressBar;
    })(wd.UI);
    wd.ProgressBar = ProgressBar;
})(wd || (wd = {}));
var wd;
(function (wd) {
    function _canUseNewCanvasBlendModes() {
        var canvas = null, context = null;
        if (typeof document === 'undefined') {
            return false;
        }
        canvas = document.createElement('canvas');
        canvas.width = 1;
        canvas.height = 1;
        context = canvas.getContext('2d');
        context.fillStyle = '#000';
        context.fillRect(0, 0, 1, 1);
        context.globalCompositeOperation = 'multiply';
        context.fillStyle = '#fff';
        context.fillRect(0, 0, 1, 1);
        return context.getImageData(0, 0, 1, 1).data[0] === 0;
    }
    var Image = (function (_super) {
        __extends(Image, _super);
        function Image() {
            _super.apply(this, arguments);
            this._source = null;
            this.color = null;
            this.targetSource = null;
            this.targetColor = null;
        }
        Image.create = function () {
            var obj = new this();
            return obj;
        };
        Object.defineProperty(Image.prototype, "source", {
            get: function () {
                return this._source;
            },
            set: function (source) {
                if (source !== this._source) {
                    this._source = source;
                    this.dirty = true;
                }
            },
            enumerable: true,
            configurable: true
        });
        Image.prototype.shouldNotUpdate = function () {
            return this._getDrawSource() === null && this._getDrawColor() === null;
        };
        Image.prototype.draw = function (elapsedTime) {
            var drawColor = this._getDrawColor(), drawSource = this._getDrawSource();
            if (drawColor !== null) {
                var position = this.entityObject.transform.position;
                this._setFillStyle(drawColor.toString());
                if (drawColor.a < 1) {
                    this._setGlobalAlpha(this.context, drawColor.a);
                }
                this.context.fillRect(position.x - this.width / 2, position.y - this.height / 2, this.width, this.height);
                if (drawSource) {
                    this._blendColorWithSource();
                }
            }
            else {
                this.drawInCenterPoint(this.context, drawSource.source, this.entityObject.transform.position, this.width, this.height);
            }
        };
        Image.prototype._setFillStyle = function (style) {
            this.context.fillStyle = style;
        };
        Image.prototype._getDrawSource = function () {
            if (this.targetSource) {
                return this.targetSource;
            }
            return this.source;
        };
        Image.prototype._getDrawColor = function () {
            if (this.targetColor) {
                return this.targetColor;
            }
            return this.color;
        };
        Image.prototype._blendByMultiply = function () {
            this._setGlobalCompositeOperation(this.context, "multiply");
            this.drawInCenterPoint(this.context, this._getDrawSource().source, this.entityObject.transform.position, this.width, this.height);
        };
        Image.prototype._blendByPerPixel = function () {
            var context = this.context, canvas = this.getCanvas(), r = this.color.r, g = this.color.g, b = this.color.b, pixelData = null, pixels = null;
            context.globalCompositeOperation = "copy";
            this.drawInCenterPoint(this.context, this._getDrawSource().source, this.entityObject.transform.position, this.width, this.height);
            pixelData = context.getImageData(0, 0, canvas.width, canvas.height);
            pixels = pixelData.data;
            for (var i = 0, len = pixels.length; i < len; i += 4) {
                pixels[i] *= r;
                pixels[i + 1] *= g;
                pixels[i + 2] *= b;
            }
            context.putImageData(pixelData, 0, 0);
        };
        Image.prototype._setGlobalCompositeOperation = function (context, mode) {
            context.globalCompositeOperation = mode;
        };
        Image.prototype._setGlobalAlpha = function (context, alpha) {
            context.globalAlpha = alpha;
        };
        Image.constructorForBlend = function (obj) {
            obj._blendColorWithSource = _canUseNewCanvasBlendModes() ?
                obj._blendByMultiply : obj._blendByPerPixel;
            return true;
        };
        Image.constructorInitForBlend = Image.constructorForBlend(Image.prototype);
        __decorate([
            wd.require(function () {
                wd.assert(!!this._getDrawSource(), wd.Log.info.FUNC_SHOULD("source", "exist"));
            })
        ], Image.prototype, "_blendByMultiply", null);
        __decorate([
            wd.require(function () {
                wd.assert(!!this._getDrawSource(), wd.Log.info.FUNC_SHOULD("source", "exist"));
            })
        ], Image.prototype, "_blendByPerPixel", null);
        return Image;
    })(wd.UI);
    wd.Image = Image;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var InteractionUI = (function (_super) {
        __extends(InteractionUI, _super);
        function InteractionUI() {
            _super.apply(this, arguments);
            this.p_transitionMode = null;
            this.transitionManager = wd.TransitionManager.create(this);
        }
        Object.defineProperty(InteractionUI.prototype, "transitionMode", {
            get: function () {
                return this.p_transitionMode;
            },
            set: function (transitionMode) {
                this.p_transitionMode = transitionMode;
            },
            enumerable: true,
            configurable: true
        });
        return InteractionUI;
    })(wd.UI);
    wd.InteractionUI = InteractionUI;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var Button = (function (_super) {
        __extends(Button, _super);
        function Button() {
            _super.apply(this, arguments);
            this._text = null;
            this._mousedownSubscription = null;
            this._mouseupSubscription = null;
            this._mouseoverSubscription = null;
            this._mouseoutSubscription = null;
            this._stateMachine = wd.UIStateMachine.create(this);
        }
        Button.create = function () {
            var obj = new this();
            obj.initWhenCreate();
            return obj;
        };
        Object.defineProperty(Button.prototype, "text", {
            get: function () {
                var fontObject = null;
                if (this.entityObject === null) {
                    return this._text;
                }
                fontObject = this.getObject(wd.ButtonObjectName.TEXT);
                if (fontObject) {
                    return fontObject.getComponent(wd.PlainFont).text;
                }
                return null;
            },
            set: function (text) {
                var fontObject = null;
                this._text = text;
                if (this.entityObject === null || !this.getUIRenderer()) {
                    return;
                }
                fontObject = this.getObject(wd.ButtonObjectName.TEXT);
                if (fontObject) {
                    fontObject.getComponent(wd.PlainFont).text = text;
                }
                else {
                    this.entityObject.addChild(this._createFontObject());
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Button.prototype, "isDisabled", {
            get: function () {
                return this._stateMachine.currentState === wd.UIState.DISABLED;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Button.prototype, "currentState", {
            get: function () {
                return this._stateMachine.currentState;
            },
            enumerable: true,
            configurable: true
        });
        Button.prototype.initWhenCreate = function () {
            this.transitionMode = wd.TransitionMode.SPRITE;
            this.text = "button";
        };
        Button.prototype.init = function () {
            _super.prototype.init.call(this);
            if (!this._hasFontObject()) {
                this.entityObject.addChild(this._createFontObject());
            }
            this.entityObject.addChild(this._createBackgroundObject());
            this._bindEvent();
        };
        Button.prototype.dispose = function () {
            _super.prototype.dispose.call(this);
            this._mousedownSubscription.dispose();
            this._mouseupSubscription.dispose();
            this._mouseoverSubscription.dispose();
            this._mouseoutSubscription.dispose();
        };
        Button.prototype.getObject = function (objectName) {
            return this.entityObject.findChildByName(objectName);
        };
        Button.prototype.getObjectTransition = function (objectName) {
            return this.transitionManager.getObjectTransition(objectName);
        };
        Button.prototype.enable = function () {
            this._stateMachine.changeState(wd.UIState.NORMAL);
        };
        Button.prototype.disable = function () {
            this._stateMachine.changeState(wd.UIState.DISABLED);
        };
        Button.prototype.update = function (elapsedTime) {
            var target = this.transitionManager.getObjectTarget(wd.ButtonObjectName.BACKGROUND);
            if (!target) {
                var image = this.getObject(wd.ButtonObjectName.BACKGROUND).getComponent(wd.Image);
                switch (this.p_transitionMode) {
                    case wd.TransitionMode.SPRITE:
                        image.targetSource = null;
                        break;
                    case wd.TransitionMode.COLOR:
                        image.targetColor = null;
                        break;
                    default:
                        wd.Log.error(true, wd.Log.info.FUNC_UNEXPECT("transitionMode"));
                        break;
                }
                return;
            }
            switch (this.p_transitionMode) {
                case wd.TransitionMode.SPRITE:
                    this.getObject(wd.ButtonObjectName.BACKGROUND).getComponent(wd.Image).targetSource = target;
                    break;
                case wd.TransitionMode.COLOR:
                    this.getObject(wd.ButtonObjectName.BACKGROUND).getComponent(wd.Image).targetColor = target;
                    break;
                default:
                    wd.Log.error(true, wd.Log.info.FUNC_UNEXPECT("transitionMode"));
                    break;
            }
        };
        Button.prototype._createBackgroundObject = function () {
            var object = wd.UIObject.create(), image = wd.Image.create(), transform = this.entityObject.transform;
            object.addComponent(image);
            object.addComponent(this.getUIRenderer());
            object.transform.width = transform.width;
            object.transform.height = transform.height;
            object.transform.zIndex = 1;
            object.name = wd.ButtonObjectName.BACKGROUND;
            return object;
        };
        Button.prototype._createFontObject = function () {
            var fontObject = wd.UIObject.create(), font = wd.PlainFont.create(), transform = this.entityObject.transform;
            font.text = this._text;
            font.enableFill("#000000");
            font.xAlignment = wd.FontXAlignment.CENTER;
            font.yAlignment = wd.FontYAlignment.MIDDLE;
            fontObject.addComponent(font);
            fontObject.addComponent(this.getUIRenderer());
            fontObject.transform.width = transform.width;
            fontObject.transform.height = transform.height;
            fontObject.transform.zIndex = 2;
            fontObject.name = wd.ButtonObjectName.TEXT;
            return fontObject;
        };
        Button.prototype._hasFontObject = function () {
            return !!this.getObject(wd.ButtonObjectName.TEXT);
        };
        Button.prototype._bindEvent = function () {
            var self = this;
            this._mousedownSubscription = wd.EventManager.fromEvent(this.entityObject, wd.EngineEvent.MOUSE_DOWN)
                .filter(function (e) {
                return !self.isDisabled;
            })
                .subscribe(function (e) {
                self._stateMachine.changeState(wd.UIState.PRESSED);
            });
            this._mouseupSubscription = wd.EventManager.fromEvent(this.entityObject, wd.EngineEvent.MOUSE_UP)
                .filter(function (e) {
                return !self.isDisabled;
            })
                .subscribe(function (e) {
                self._stateMachine.backState();
            });
            this._mouseoverSubscription = wd.EventManager.fromEvent(this.entityObject, wd.EngineEvent.MOUSE_OVER)
                .filter(function (e) {
                return !self.isDisabled;
            })
                .subscribe(function (e) {
                self._stateMachine.changeState(wd.UIState.HIGHLIGHT);
            });
            this._mouseoutSubscription = wd.EventManager.fromEvent(this.entityObject, wd.EngineEvent.MOUSE_OUT)
                .filter(function (e) {
                return !self.isDisabled;
            })
                .subscribe(function (e) {
                self._stateMachine.backState();
            });
        };
        __decorate([
            wd.require(function (elapsedTime) {
                wd.assert(this.getObject(wd.ButtonObjectName.BACKGROUND).hasComponent(wd.Image), wd.Log.info.FUNC_SHOULD("Button UIObject", "contain Image component"));
            })
        ], Button.prototype, "update", null);
        return Button;
    })(wd.InteractionUI);
    wd.Button = Button;
})(wd || (wd = {}));
var wd;
(function (wd) {
    (function (ButtonObjectName) {
        ButtonObjectName[ButtonObjectName["BACKGROUND"] = "background"] = "BACKGROUND";
        ButtonObjectName[ButtonObjectName["TEXT"] = "text"] = "TEXT";
    })(wd.ButtonObjectName || (wd.ButtonObjectName = {}));
    var ButtonObjectName = wd.ButtonObjectName;
})(wd || (wd = {}));
var wd;
(function (wd) {
    (function (UIState) {
        UIState[UIState["NORMAL"] = 0] = "NORMAL";
        UIState[UIState["HIGHLIGHT"] = 1] = "HIGHLIGHT";
        UIState[UIState["PRESSED"] = 2] = "PRESSED";
        UIState[UIState["DISABLED"] = 3] = "DISABLED";
    })(wd.UIState || (wd.UIState = {}));
    var UIState = wd.UIState;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var UIStateMachine = (function () {
        function UIStateMachine(ui) {
            this._ui = null;
            this._stateHistory = wdCb.Stack.create();
            this._ui = ui;
        }
        UIStateMachine.create = function (ui) {
            var obj = new this(ui);
            return obj;
        };
        Object.defineProperty(UIStateMachine.prototype, "transitionManager", {
            get: function () {
                return this._ui.transitionManager;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UIStateMachine.prototype, "currentState", {
            get: function () {
                return this._stateHistory.top || wd.UIState.NORMAL;
            },
            enumerable: true,
            configurable: true
        });
        UIStateMachine.prototype.changeState = function (state) {
            this._stateHistory.push(state);
            this.transitionManager.changeState(state);
            this._ui.dirty = true;
        };
        UIStateMachine.prototype.backState = function () {
            var lastState = null;
            this._stateHistory.pop();
            lastState = this._stateHistory.top;
            if (!lastState) {
                lastState = wd.UIState.NORMAL;
            }
            this.transitionManager.changeState(lastState);
            this._ui.dirty = true;
        };
        return UIStateMachine;
    })();
    wd.UIStateMachine = UIStateMachine;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var Transition = (function () {
        function Transition() {
            this._target = null;
        }
        Object.defineProperty(Transition.prototype, "target", {
            get: function () {
                if (this._target === null) {
                    this.changeState(wd.UIState.NORMAL);
                }
                return this._target;
            },
            set: function (target) {
                this._target = target;
            },
            enumerable: true,
            configurable: true
        });
        return Transition;
    })();
    wd.Transition = Transition;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var SpriteTransition = (function (_super) {
        __extends(SpriteTransition, _super);
        function SpriteTransition() {
            _super.apply(this, arguments);
            this.normalSprite = null;
            this.highlightSprite = null;
            this.pressedSprite = null;
            this.disabledSprite = null;
        }
        SpriteTransition.create = function () {
            var obj = new this();
            return obj;
        };
        SpriteTransition.prototype.changeState = function (state) {
            switch (state) {
                case wd.UIState.NORMAL:
                    this.target = this.normalSprite;
                    break;
                case wd.UIState.HIGHLIGHT:
                    this.target = this.highlightSprite;
                    break;
                case wd.UIState.PRESSED:
                    this.target = this.pressedSprite;
                    break;
                case wd.UIState.DISABLED:
                    this.target = this.disabledSprite;
                    break;
                default:
                    wd.Log.error(true, wd.Log.info.FUNC_UNEXPECT("state"));
                    break;
            }
        };
        return SpriteTransition;
    })(wd.Transition);
    wd.SpriteTransition = SpriteTransition;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var ColorTransition = (function (_super) {
        __extends(ColorTransition, _super);
        function ColorTransition() {
            _super.apply(this, arguments);
            this.normalColor = null;
            this.highlightColor = null;
            this.pressedColor = null;
            this.disabledColor = null;
        }
        ColorTransition.create = function () {
            var obj = new this();
            return obj;
        };
        ColorTransition.prototype.changeState = function (state) {
            switch (state) {
                case wd.UIState.NORMAL:
                    this.target = this.normalColor;
                    break;
                case wd.UIState.HIGHLIGHT:
                    this.target = this.highlightColor;
                    break;
                case wd.UIState.PRESSED:
                    this.target = this.pressedColor;
                    break;
                case wd.UIState.DISABLED:
                    this.target = this.disabledColor;
                    break;
                default:
                    wd.Log.error(true, wd.Log.info.FUNC_UNEXPECT("state"));
                    break;
            }
        };
        return ColorTransition;
    })(wd.Transition);
    wd.ColorTransition = ColorTransition;
})(wd || (wd = {}));
var wd;
(function (wd) {
    (function (TransitionMode) {
        TransitionMode[TransitionMode["SPRITE"] = 0] = "SPRITE";
        TransitionMode[TransitionMode["COLOR"] = 1] = "COLOR";
    })(wd.TransitionMode || (wd.TransitionMode = {}));
    var TransitionMode = wd.TransitionMode;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var TransitionManager = (function () {
        function TransitionManager(ui) {
            this._ui = null;
            this._spriteTransitionMap = wdCb.Hash.create();
            this._colorTransitionMap = wdCb.Hash.create();
            this._ui = ui;
        }
        TransitionManager.create = function (ui) {
            var obj = new this(ui);
            return obj;
        };
        TransitionManager.prototype.getObjectTransition = function (objectName) {
            var result = this._getTransitionMap().getChild(objectName);
            if (!result) {
                result = this._createTransitionInstance();
                this._getTransitionMap().addChild(objectName, result);
            }
            return result;
        };
        TransitionManager.prototype.getObjectTarget = function (objectName) {
            return this.getObjectTransition(objectName).target;
        };
        TransitionManager.prototype.changeState = function (state) {
            wdFrp.fromArray([
                this._spriteTransitionMap,
                this._colorTransitionMap
            ])
                .subscribe(function (map) {
                map.forEach(function (transition) {
                    transition.changeState(state);
                });
            });
        };
        TransitionManager.prototype._getTransitionMap = function () {
            var map = null;
            switch (this._ui.transitionMode) {
                case wd.TransitionMode.SPRITE:
                    map = this._spriteTransitionMap;
                    break;
                case wd.TransitionMode.COLOR:
                    map = this._colorTransitionMap;
                    break;
                default:
                    wd.Log.error(true, wd.Log.info.FUNC_UNEXPECT("transitionMode"));
                    break;
            }
            return map;
        };
        TransitionManager.prototype._createTransitionInstance = function () {
            var transition = null;
            switch (this._ui.transitionMode) {
                case wd.TransitionMode.SPRITE:
                    transition = wd.SpriteTransition.create();
                    break;
                case wd.TransitionMode.COLOR:
                    transition = wd.ColorTransition.create();
                    break;
                default:
                    wd.Log.error(true, wd.Log.info.FUNC_UNEXPECT("transitionMode"));
                    break;
            }
            return transition;
        };
        return TransitionManager;
    })();
    wd.TransitionManager = TransitionManager;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var RoundedRectUtils = (function () {
        function RoundedRectUtils() {
        }
        RoundedRectUtils.drawRoundedRect = function (context, strokeStyle, fillStyle, cornerX, cornerY, width, height, cornerRadius) {
            context.save();
            context.beginPath();
            if (width > 0) {
                context.moveTo(cornerX + cornerRadius, cornerY);
            }
            else {
                context.moveTo(cornerX - cornerRadius, cornerY);
            }
            context.arcTo(cornerX + width, cornerY, cornerX + width, cornerY + height, cornerRadius);
            context.arcTo(cornerX + width, cornerY + height, cornerX, cornerY + height, cornerRadius);
            context.arcTo(cornerX, cornerY + height, cornerX, cornerY, cornerRadius);
            if (width > 0) {
                context.arcTo(cornerX, cornerY, cornerX + cornerRadius, cornerY, cornerRadius);
            }
            else {
                context.arcTo(cornerX, cornerY, cornerX - cornerRadius, cornerY, cornerRadius);
            }
            context.closePath();
            context.strokeStyle = strokeStyle;
            context.fillStyle = fillStyle;
            if (strokeStyle) {
                context.stroke();
            }
            if (fillStyle) {
                context.fill();
            }
            context.restore();
        };
        return RoundedRectUtils;
    })();
    wd.RoundedRectUtils = RoundedRectUtils;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var JudgeUtils = (function (_super) {
        __extends(JudgeUtils, _super);
        function JudgeUtils() {
            _super.apply(this, arguments);
        }
        JudgeUtils.isView = function (obj) {
            return !!obj && obj.offset && obj.width && obj.height && this.isFunction(obj.getContext);
        };
        JudgeUtils.isEqual = function (target1, target2) {
            if ((!target1 && target2) || (target1 && !target2)) {
                return false;
            }
            if (target1.uid && target2.uid) {
                return target1.uid === target2.uid;
            }
            return target1 === target2;
        };
        JudgeUtils.isPowerOfTwo = function (value) {
            return (value & (value - 1)) === 0 && value !== 0;
        };
        JudgeUtils.isFloatArray = function (data) {
            return wd.EntityObject.prototype.toString.call(data) === "[object Float32Array]" || wd.EntityObject.prototype.toString.call(data) === "[object Float16Array]";
        };
        JudgeUtils.isInterface = function (target, memberOfInterface) {
            return !!target[memberOfInterface];
        };
        JudgeUtils.isOctreeObject = function (entityObject) {
            return entityObject.hasComponent(wd.Octree);
        };
        JudgeUtils.isSelf = function (self, entityObject) {
            return self.uid === entityObject.uid;
        };
        return JudgeUtils;
    })(wdCb.JudgeUtils);
    wd.JudgeUtils = JudgeUtils;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var MathUtils = (function () {
        function MathUtils() {
        }
        MathUtils.clamp = function (num, below, up) {
            if (num < below) {
                return below;
            }
            else if (num > up) {
                return up;
            }
            return num;
        };
        MathUtils.bigThan = function (num, below) {
            return num < below ? below : num;
        };
        MathUtils.generateZeroToOne = function () {
            return Math.random();
        };
        MathUtils.generateInteger = function (min, max) {
            var max = max + 1;
            return Math.floor(Math.random() * (max - min) + min);
        };
        __decorate([
            wd.require(function (min, max) {
                wd.assert(min < max, wd.Log.info.FUNC_SHOULD("min", "< max"));
            })
        ], MathUtils, "generateInteger", null);
        return MathUtils;
    })();
    wd.MathUtils = MathUtils;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var CoordinateUtils = (function () {
        function CoordinateUtils() {
        }
        CoordinateUtils.convertWebGLPositionToCanvasPosition = function (position) {
            var view = wd.DeviceManager.getInstance().view;
            return wd.Vector2.create(view.width / 2 + position.x, view.height / 2 - position.y);
        };
        CoordinateUtils.convertCanvasPositionToWebGLPosition = function (position) {
            var view = wd.DeviceManager.getInstance().view;
            return wd.Vector3.create(position.x - view.width / 2, view.height / 2 - position.y, 0);
        };
        CoordinateUtils.convertLeftCornerPositionToCenterPosition = function (position, width, height) {
            return wd.Vector2.create(this.convertLeftCornerPositionXToCenterPositionX(position.x, width), this.convertLeftCornerPositionYToCenterPositionY(position.y, height));
        };
        CoordinateUtils.convertLeftCornerPositionXToCenterPositionX = function (positionX, width) {
            return positionX + width / 2;
        };
        CoordinateUtils.convertLeftCornerPositionYToCenterPositionY = function (positionY, height) {
            return positionY + height / 2;
        };
        CoordinateUtils.convertCenterPositionToLeftCornerPosition = function (position, width, height) {
            return wd.Vector2.create(this.convertCenterPositionXToLeftCornerPositionX(position.x, width), this.convertCenterPositionYToLeftCornerPositionY(position.y, height));
        };
        CoordinateUtils.convertCenterPositionXToLeftCornerPositionX = function (positionX, width) {
            return positionX - width / 2;
        };
        CoordinateUtils.convertCenterPositionYToLeftCornerPositionY = function (positionY, height) {
            return positionY - height / 2;
        };
        __decorate([
            wd.require(function () {
                wd.assert(!!wd.DeviceManager.getInstance().view, wd.Log.info.FUNC_SHOULD("set view"));
            })
        ], CoordinateUtils, "convertWebGLPositionToCanvasPosition", null);
        __decorate([
            wd.require(function () {
                wd.assert(!!wd.DeviceManager.getInstance().view, wd.Log.info.FUNC_SHOULD("set view"));
            })
        ], CoordinateUtils, "convertCanvasPositionToWebGLPosition", null);
        return CoordinateUtils;
    })();
    wd.CoordinateUtils = CoordinateUtils;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var Log = (function (_super) {
        __extends(Log, _super);
        function Log() {
            _super.apply(this, arguments);
        }
        return Log;
    })(wdCb.Log);
    wd.Log = Log;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var TimeController = (function () {
        function TimeController() {
            this.elapsed = null;
            this.pauseElapsed = 0;
            this.pauseTime = null;
            this.startTime = null;
        }
        TimeController.prototype.start = function () {
            this.startTime = this.getNow();
            this.pauseElapsed = null;
        };
        TimeController.prototype.stop = function () {
            this.startTime = null;
        };
        TimeController.prototype.pause = function () {
            this.pauseTime = this.getNow();
        };
        TimeController.prototype.resume = function () {
            this.pauseElapsed += this.getNow() - this.pauseTime;
            this.pauseTime = null;
        };
        TimeController.prototype.computeElapseTime = function (time) {
            if (this.pauseElapsed) {
                this.elapsed = time - this.pauseElapsed - this.startTime;
                return this.elapsed;
            }
            this.elapsed = time - this.startTime;
            return this.elapsed;
        };
        return TimeController;
    })();
    wd.TimeController = TimeController;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var STARTING_FPS = 60, GAMETIME_SCALE = 1000;
    var DirectorTimeController = (function (_super) {
        __extends(DirectorTimeController, _super);
        function DirectorTimeController() {
            _super.apply(this, arguments);
            this.gameTime = null;
            this.fps = null;
            this.isTimeChange = false;
            this.deltaTime = null;
            this._lastTime = null;
        }
        DirectorTimeController.create = function () {
            var obj = new this();
            return obj;
        };
        DirectorTimeController.prototype.tick = function (time) {
            this.deltaTime = this._lastTime !== null ? time - this._lastTime : time;
            this._updateFps(this.deltaTime);
            this.gameTime = time / GAMETIME_SCALE;
            this._lastTime = time;
        };
        DirectorTimeController.prototype.start = function () {
            _super.prototype.start.call(this);
            this.isTimeChange = true;
            this.elapsed = 0;
        };
        DirectorTimeController.prototype.resume = function () {
            _super.prototype.resume.call(this);
            this.isTimeChange = true;
        };
        DirectorTimeController.prototype.getNow = function () {
            return wd.root.performance.now();
        };
        DirectorTimeController.prototype._updateFps = function (deltaTime) {
            if (this._lastTime === null) {
                this.fps = STARTING_FPS;
            }
            else {
                this.fps = 1000 / deltaTime;
            }
        };
        return DirectorTimeController;
    })(wd.TimeController);
    wd.DirectorTimeController = DirectorTimeController;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var CommonTimeController = (function (_super) {
        __extends(CommonTimeController, _super);
        function CommonTimeController() {
            _super.apply(this, arguments);
        }
        CommonTimeController.create = function () {
            var obj = new this();
            return obj;
        };
        CommonTimeController.prototype.getNow = function () {
            if (wd.Director.getInstance().isTimeChange) {
                return wd.Director.getInstance().elapsed;
            }
            return wd.root.performance.now();
        };
        return CommonTimeController;
    })(wd.TimeController);
    wd.CommonTimeController = CommonTimeController;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var RenderTargetRenderer = (function () {
        function RenderTargetRenderer(renderTargetTexture) {
            this.texture = null;
            this.frameBufferOperator = null;
            this.texture = renderTargetTexture;
        }
        RenderTargetRenderer.prototype.initWhenCreate = function () {
            this.frameBufferOperator = wd.FrameBuffer.create(this.texture.width, this.texture.height);
        };
        RenderTargetRenderer.prototype.init = function () {
            this.texture.createEmptyTexture();
            this.initFrameBuffer();
        };
        RenderTargetRenderer.prototype.render = function (renderer, camera) {
            this.beforeRender();
            this.renderFrameBufferTexture(renderer, camera);
            this.afterRender();
        };
        RenderTargetRenderer.prototype.dispose = function () {
            this.frameBufferOperator.dispose();
            this.disposeFrameBuffer();
            this.texture.dispose();
        };
        RenderTargetRenderer.prototype.beforeRender = function () {
        };
        RenderTargetRenderer.prototype.afterRender = function () {
        };
        __decorate([
            wd.virtual
        ], RenderTargetRenderer.prototype, "beforeRender", null);
        __decorate([
            wd.virtual
        ], RenderTargetRenderer.prototype, "afterRender", null);
        return RenderTargetRenderer;
    })();
    wd.RenderTargetRenderer = RenderTargetRenderer;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var TwoDRenderTargetRenderer = (function (_super) {
        __extends(TwoDRenderTargetRenderer, _super);
        function TwoDRenderTargetRenderer() {
            _super.apply(this, arguments);
            this.frameBuffer = null;
            this.renderBuffer = null;
            this._lastCamera = null;
        }
        TwoDRenderTargetRenderer.prototype.initFrameBuffer = function () {
            var frameBuffer = this.frameBufferOperator, gl = wd.DeviceManager.getInstance().gl;
            this.frameBuffer = frameBuffer.createFrameBuffer();
            this.renderBuffer = frameBuffer.createRenderBuffer();
            frameBuffer.bindFrameBuffer(this.frameBuffer);
            frameBuffer.attachTexture(gl.TEXTURE_2D, this.texture.glTexture);
            frameBuffer.attachRenderBuffer("DEPTH_ATTACHMENT", this.renderBuffer);
            frameBuffer.check();
            frameBuffer.unBind();
        };
        TwoDRenderTargetRenderer.prototype.renderFrameBufferTexture = function (renderer, camera) {
            var renderCamera = this.createCamera(camera);
            if (this._lastCamera) {
                this._lastCamera.dispose();
            }
            this._lastCamera = renderCamera;
            this.beforeRenderFrameBufferTexture(renderCamera);
            this.frameBufferOperator.bindFrameBuffer(this.frameBuffer);
            this.texture.bindToUnit(0);
            this.frameBufferOperator.setViewport();
            this.getRenderList().forEach(function (child) {
                child.render(renderer, renderCamera);
            });
            this.renderRenderer(renderer);
            this.frameBufferOperator.unBind();
            this.frameBufferOperator.restoreViewport();
        };
        TwoDRenderTargetRenderer.prototype.disposeFrameBuffer = function () {
            var gl = wd.DeviceManager.getInstance().gl;
            gl.deleteFramebuffer(this.frameBuffer);
            gl.deleteRenderbuffer(this.renderBuffer);
        };
        return TwoDRenderTargetRenderer;
    })(wd.RenderTargetRenderer);
    wd.TwoDRenderTargetRenderer = TwoDRenderTargetRenderer;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var MirrorRenderTargetRenderer = (function (_super) {
        __extends(MirrorRenderTargetRenderer, _super);
        function MirrorRenderTargetRenderer() {
            _super.apply(this, arguments);
        }
        MirrorRenderTargetRenderer.create = function (mirrorTexture) {
            var obj = new this(mirrorTexture);
            obj.initWhenCreate();
            return obj;
        };
        MirrorRenderTargetRenderer.prototype.beforeRenderFrameBufferTexture = function (renderCamera) {
        };
        MirrorRenderTargetRenderer.prototype.getRenderList = function () {
            return this.texture.renderList;
        };
        MirrorRenderTargetRenderer.prototype.renderRenderer = function (renderer) {
            this._setSceneSide(wd.Side.BACK);
            renderer.render();
            this._setSceneSide(null);
        };
        MirrorRenderTargetRenderer.prototype.createCamera = function (camera) {
            var mirrorCameraComponent = null, plane = null, cameraComponent = camera.getComponent(wd.CameraController), mirrorCameraViewMatrix = null, projectionMatrix = null;
            plane = this.texture.getPlane();
            mirrorCameraViewMatrix =
                plane.getReflectionMatrix().applyMatrix(cameraComponent.worldToCameraMatrix);
            projectionMatrix = this._setClipPlane(mirrorCameraViewMatrix, cameraComponent.pMatrix, plane);
            mirrorCameraComponent = wd.PerspectiveCamera.create();
            mirrorCameraComponent.worldToCameraMatrix = mirrorCameraViewMatrix.copy();
            mirrorCameraComponent.pMatrix = projectionMatrix;
            return wd.GameObject.create().addComponent(wd.BasicCameraController.create(mirrorCameraComponent)).init();
        };
        MirrorRenderTargetRenderer.prototype._setSceneSide = function (side) {
            var scene = wd.Director.getInstance().scene;
            scene.side = side;
        };
        MirrorRenderTargetRenderer.prototype._setClipPlane = function (vMatrix, pMatrix, plane) {
            var projectionMatrix = pMatrix.copy(), q = wd.Vector4.create(), clipPlane = this._getClipPlaneInCameraSpace(vMatrix, plane), c = wd.Vector4.create();
            q.x = (Math.sign(clipPlane.x) + projectionMatrix.values[8]) / projectionMatrix.values[0];
            q.y = (Math.sign(clipPlane.y) + projectionMatrix.values[9]) / projectionMatrix.values[5];
            q.z = -1.0;
            q.w = (1.0 + projectionMatrix.values[10]) / projectionMatrix.values[14];
            c = clipPlane.multiplyScalar(2.0 / clipPlane.dot(q));
            projectionMatrix.values[2] = c.x;
            projectionMatrix.values[6] = c.y;
            projectionMatrix.values[10] = c.z + 1.0;
            projectionMatrix.values[14] = c.w;
            return projectionMatrix;
        };
        MirrorRenderTargetRenderer.prototype._getClipPlaneInCameraSpace = function (vMatrix, plane) {
            var clipPlane = wd.Vector4.create(), p = vMatrix.multiplyPoint(this.texture.getPosition()), n = vMatrix.copy().invert().transpose().multiplyPoint(plane.normal).normalize();
            clipPlane.set(n.x, n.y, n.z, -p.dot(n));
            return clipPlane;
        };
        return MirrorRenderTargetRenderer;
    })(wd.TwoDRenderTargetRenderer);
    wd.MirrorRenderTargetRenderer = MirrorRenderTargetRenderer;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var TwoDShadowMapRenderTargetRenderer = (function (_super) {
        __extends(TwoDShadowMapRenderTargetRenderer, _super);
        function TwoDShadowMapRenderTargetRenderer(light) {
            _super.call(this, light.shadowMap);
            this._light = null;
            this._shadowMapRendererUtils = null;
            this._light = light;
        }
        TwoDShadowMapRenderTargetRenderer.create = function (light) {
            var obj = new this(light);
            obj.initWhenCreate();
            return obj;
        };
        TwoDShadowMapRenderTargetRenderer.prototype.initWhenCreate = function () {
            this._shadowMapRendererUtils = wd.TwoDShadowMapRenderTargetRendererUtils.create(this._light, this.texture);
            _super.prototype.initWhenCreate.call(this);
        };
        TwoDShadowMapRenderTargetRenderer.prototype.init = function () {
            var self = this;
            this._handleShadowRendererList();
            this._shadowMapRendererUtils.bindEndLoop(function () {
                self._light.shadowRenderList.forEach(function (child) {
                    self._shadowMapRendererUtils.clearTwoDShadowMapData(child);
                });
            });
            this._shadowMapRendererUtils.createShaderWithShaderLib(wd.BuildTwoDShadowMapShaderLib.create());
            _super.prototype.init.call(this);
        };
        TwoDShadowMapRenderTargetRenderer.prototype.dispose = function () {
            _super.prototype.dispose.call(this);
            this._shadowMapRendererUtils.unBindEndLoop();
        };
        TwoDShadowMapRenderTargetRenderer.prototype.beforeRenderFrameBufferTexture = function (renderCamera) {
            var self = this;
            this._light.shadowRenderList.removeRepeatItems().forEach(function (child) {
                self._shadowMapRendererUtils.setShadowMapData(child, renderCamera);
            });
        };
        TwoDShadowMapRenderTargetRenderer.prototype.getRenderList = function () {
            return this._light.shadowRenderList;
        };
        TwoDShadowMapRenderTargetRenderer.prototype.renderRenderer = function (renderer) {
            renderer.render();
        };
        TwoDShadowMapRenderTargetRenderer.prototype.beforeRender = function () {
            this._shadowMapRendererUtils.beforeRender();
        };
        TwoDShadowMapRenderTargetRenderer.prototype.afterRender = function () {
            this._shadowMapRendererUtils.afterRender();
        };
        TwoDShadowMapRenderTargetRenderer.prototype.createCamera = function () {
            var orthoCameraComponent = wd.OrthographicCamera.create(), light = this._light, camera = wd.GameObject.create();
            orthoCameraComponent.left = light.shadowCameraLeft;
            orthoCameraComponent.right = light.shadowCameraRight;
            orthoCameraComponent.top = light.shadowCameraTop;
            orthoCameraComponent.bottom = light.shadowCameraBottom;
            orthoCameraComponent.near = light.shadowCameraNear;
            orthoCameraComponent.far = light.shadowCameraFar;
            camera.addComponent(wd.BasicCameraController.create(orthoCameraComponent));
            camera.transform.translate(light.position);
            camera.transform.lookAt(0, 0, 0);
            camera.init();
            return camera;
        };
        TwoDShadowMapRenderTargetRenderer.prototype._handleShadowRendererList = function () {
            var _this = this;
            var self = this, children = [];
            this._light.shadowRenderList.forEach(function (renderTarget) {
                children = children.concat(_this._shadowMapRendererUtils.addAllChildren(renderTarget));
            }, this);
            this._light.shadowRenderList.addChildren(children);
            this._light.shadowRenderList.removeChild(function (renderTarget) {
                return self._shadowMapRendererUtils.isContainer(renderTarget);
            });
        };
        return TwoDShadowMapRenderTargetRenderer;
    })(wd.TwoDRenderTargetRenderer);
    wd.TwoDShadowMapRenderTargetRenderer = TwoDShadowMapRenderTargetRenderer;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var CubemapRenderTargetRenderer = (function (_super) {
        __extends(CubemapRenderTargetRenderer, _super);
        function CubemapRenderTargetRenderer() {
            _super.apply(this, arguments);
            this._frameBufferList = wdCb.Collection.create();
            this._renderBufferList = wdCb.Collection.create();
            this._lastCameraList = null;
            this._lastPosition = null;
        }
        CubemapRenderTargetRenderer.prototype.initFrameBuffer = function () {
            var frameBufferOperator = this.frameBufferOperator, gl = wd.DeviceManager.getInstance().gl;
            for (var i = 0; i < 6; i++) {
                var frameBuffer = frameBufferOperator.createFrameBuffer(), renderBuffer = frameBufferOperator.createRenderBuffer();
                this._frameBufferList.addChild(frameBuffer);
                this._renderBufferList.addChild(renderBuffer);
                frameBufferOperator.bindFrameBuffer(frameBuffer);
                frameBufferOperator.attachTexture(gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, this.texture.glTexture);
                frameBufferOperator.attachRenderBuffer("DEPTH_ATTACHMENT", renderBuffer);
                frameBufferOperator.check();
            }
            frameBufferOperator.unBind();
        };
        CubemapRenderTargetRenderer.prototype.renderFrameBufferTexture = function (renderer, camera) {
            var renderCamera = null, faceRenderList = null, newCameraList = null, position = this.getPosition(), renderList = null;
            renderList = this.getRenderList();
            this.texture.bindToUnit(0);
            if (this._needCreateCamera(position)) {
                newCameraList = wdCb.Collection.create();
            }
            for (var i = 0; i < 6; i++) {
                faceRenderList = renderList.getChild(this._convertIndexToFaceKey(i));
                if (this._isEmpty(faceRenderList)) {
                    continue;
                }
                if (this._needCreateCamera(position)) {
                    renderCamera = this.createCamera(i);
                    newCameraList.addChild(renderCamera);
                }
                else {
                    renderCamera = this._lastCameraList.getChild(i);
                }
                this.frameBufferOperator.bindFrameBuffer(this._frameBufferList.getChild(i));
                this.frameBufferOperator.setViewport();
                faceRenderList.forEach(function (child) {
                    child.render(renderer, renderCamera);
                });
                renderer.render();
            }
            if (this._needCreateCamera(position)) {
                if (this._lastCameraList) {
                    this._lastCameraList.forEach(function (camera) {
                        camera.dispose();
                    });
                }
                this._lastCameraList = newCameraList;
                this._lastPosition = position;
            }
            this.frameBufferOperator.unBind();
            this.frameBufferOperator.restoreViewport();
        };
        CubemapRenderTargetRenderer.prototype.disposeFrameBuffer = function () {
            var gl = wd.DeviceManager.getInstance().gl;
            this._frameBufferList.forEach(function (buffer) { return gl.deleteFramebuffer(buffer); });
            this._renderBufferList.forEach(function (buffer) { return gl.deleteRenderbuffer(buffer); });
        };
        CubemapRenderTargetRenderer.prototype.createCamera = function (index) {
            var cubeCameraComponent = wd.PerspectiveCamera.create(), camera = wd.GameObject.create(), pos = this.getPosition();
            cubeCameraComponent.fovy = 90;
            this.setCamera(cubeCameraComponent);
            camera.addComponent(wd.BasicCameraController.create(cubeCameraComponent));
            camera.transform.translate(pos);
            this._lookAtFace(camera, pos, index);
            camera.init();
            return camera;
        };
        CubemapRenderTargetRenderer.prototype._isEmpty = function (faceRenderList) {
            return !faceRenderList || (faceRenderList.length && faceRenderList.length === 0) || (faceRenderList.getCount && faceRenderList.getCount() === 0);
        };
        CubemapRenderTargetRenderer.prototype._convertIndexToFaceKey = function (index) {
            var face = null;
            switch (index) {
                case 0:
                    face = "px";
                    break;
                case 1:
                    face = "nx";
                    break;
                case 2:
                    face = "py";
                    break;
                case 3:
                    face = "ny";
                    break;
                case 4:
                    face = "pz";
                    break;
                case 5:
                    face = "nz";
                    break;
                default:
                    break;
            }
            return face;
        };
        CubemapRenderTargetRenderer.prototype._lookAtFace = function (camera, position, index) {
            switch (index) {
                case 0:
                    camera.transform.lookAt(position.x + 1, position.y, position.z, 0, -1, 0);
                    break;
                case 1:
                    camera.transform.lookAt(position.x - 1, position.y, position.z, 0, -1, 0);
                    break;
                case 2:
                    camera.transform.lookAt(position.x, position.y + 1, position.z, 0, 0, 1);
                    break;
                case 3:
                    camera.transform.lookAt(position.x, position.y - 1, position.z, 0, 0, -1);
                    break;
                case 4:
                    camera.transform.lookAt(position.x, position.y, position.z + 1, 0, -1, 0);
                    break;
                case 5:
                    camera.transform.lookAt(position.x, position.y, position.z - 1, 0, -1, 0);
                    break;
                default:
                    break;
            }
        };
        CubemapRenderTargetRenderer.prototype._needCreateCamera = function (position) {
            if (this._lastPosition === null || this._lastCameraList === null) {
                return true;
            }
            return !position.isEqual(this._lastPosition);
        };
        return CubemapRenderTargetRenderer;
    })(wd.RenderTargetRenderer);
    wd.CubemapRenderTargetRenderer = CubemapRenderTargetRenderer;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var CubemapShadowMapRenderTargetRenderer = (function (_super) {
        __extends(CubemapShadowMapRenderTargetRenderer, _super);
        function CubemapShadowMapRenderTargetRenderer(light) {
            _super.call(this, light.shadowMap);
            this._light = null;
            this._shadowMapRendererUtils = null;
            this._light = light;
        }
        CubemapShadowMapRenderTargetRenderer.create = function (light) {
            var obj = new this(light);
            obj.initWhenCreate();
            return obj;
        };
        CubemapShadowMapRenderTargetRenderer.prototype.initWhenCreate = function () {
            this._shadowMapRendererUtils = wd.CubemapShadowMapRenderTargetRendererUtils.create(this._light, this.texture);
            _super.prototype.initWhenCreate.call(this);
        };
        CubemapShadowMapRenderTargetRenderer.prototype.init = function () {
            var self = this;
            this._handleShadowRendererList();
            this._shadowMapRendererUtils.bindEndLoop(function () {
                self._light.shadowRenderList.forEach(function (childList) {
                    childList.forEach(function (child) {
                        self._shadowMapRendererUtils.clearCubemapShadowMapData(child);
                    });
                });
            });
            this._shadowMapRendererUtils.createShaderWithShaderLib(wd.BuildCubemapShadowMapShaderLib.create());
            _super.prototype.init.call(this);
        };
        CubemapShadowMapRenderTargetRenderer.prototype.dispose = function () {
            _super.prototype.dispose.call(this);
            this._shadowMapRendererUtils.unBindEndLoop();
        };
        CubemapShadowMapRenderTargetRenderer.prototype.getRenderList = function () {
            return this._light.shadowRenderList;
        };
        CubemapShadowMapRenderTargetRenderer.prototype.beforeRender = function () {
            var utils = this._shadowMapRendererUtils;
            this._convertRenderListToCollection(this.getRenderList()).removeRepeatItems().forEach(function (child) {
                utils.setShadowMapData(child);
            });
            this._shadowMapRendererUtils.beforeRender();
        };
        CubemapShadowMapRenderTargetRenderer.prototype.afterRender = function () {
            this._shadowMapRendererUtils.afterRender();
        };
        CubemapShadowMapRenderTargetRenderer.prototype.setCamera = function (camera) {
            var light = this._light;
            camera.aspect = light.shadowMapWidth / light.shadowMapHeight;
            camera.near = light.shadowCameraNear;
            camera.far = light.shadowCameraFar;
        };
        CubemapShadowMapRenderTargetRenderer.prototype.getPosition = function () {
            return this._light.position;
        };
        CubemapShadowMapRenderTargetRenderer.prototype._convertRenderListToCollection = function (renderList) {
            var resultList = wdCb.Collection.create();
            renderList.forEach(function (list) {
                resultList.addChildren(list);
            });
            return resultList;
        };
        CubemapShadowMapRenderTargetRenderer.prototype._handleShadowRendererList = function () {
            var self = this, childrenMap = wdCb.Hash.create();
            this._light.shadowRenderList.forEach(function (childList, direction) {
                var children = [];
                childList.forEach(function (renderTarget) {
                    children = children.concat(self._shadowMapRendererUtils.addAllChildren(renderTarget));
                });
                childrenMap.addChild(direction, children);
            }, this);
            this._light.shadowRenderList.forEach(function (childList, direction) {
                childList.addChildren(childrenMap.getChild(direction));
            });
            this._light.shadowRenderList.forEach(function (childList) {
                childList.removeChild(function (renderTarget) {
                    return self._shadowMapRendererUtils.isContainer(renderTarget);
                });
            });
        };
        return CubemapShadowMapRenderTargetRenderer;
    })(wd.CubemapRenderTargetRenderer);
    wd.CubemapShadowMapRenderTargetRenderer = CubemapShadowMapRenderTargetRenderer;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var DynamicCubemapRenderTargetRenderer = (function (_super) {
        __extends(DynamicCubemapRenderTargetRenderer, _super);
        function DynamicCubemapRenderTargetRenderer() {
            _super.apply(this, arguments);
        }
        DynamicCubemapRenderTargetRenderer.create = function (texture) {
            var obj = new this(texture);
            obj.initWhenCreate();
            return obj;
        };
        DynamicCubemapRenderTargetRenderer.prototype.getRenderList = function () {
            return this.texture.renderList;
        };
        DynamicCubemapRenderTargetRenderer.prototype.setCamera = function (camera) {
            camera.aspect = 1;
            camera.near = this.texture.near;
            camera.far = this.texture.far;
        };
        DynamicCubemapRenderTargetRenderer.prototype.getPosition = function () {
            return this.texture.getPosition();
        };
        return DynamicCubemapRenderTargetRenderer;
    })(wd.CubemapRenderTargetRenderer);
    wd.DynamicCubemapRenderTargetRenderer = DynamicCubemapRenderTargetRenderer;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var ShadowMapRenderTargetRendererUtils = (function () {
        function ShadowMapRenderTargetRendererUtils(light, texture) {
            this.texture = null;
            this.light = null;
            this._endLoopHandler = null;
            this._shader = null;
            this.light = light;
            this.texture = texture;
        }
        ShadowMapRenderTargetRendererUtils.prototype.initWhenCreate = function () {
            this.texture.width = this.light.shadowMapWidth;
            this.texture.height = this.light.shadowMapHeight;
        };
        ShadowMapRenderTargetRendererUtils.prototype.init = function () {
            this.texture.init();
        };
        ShadowMapRenderTargetRendererUtils.prototype.setShadowMapData = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var target = args[0], material = target.getComponent(wd.Geometry).material, shadowMapCamera = null;
            if (args.length === 2) {
                shadowMapCamera = args[1];
            }
            wd.Log.error(!(material instanceof wd.LightMaterial), wd.Log.info.FUNC_MUST_BE("material", "LightMaterial when set shadowMap"));
            this.setMaterialShadowMapData(material, target, shadowMapCamera);
        };
        ShadowMapRenderTargetRendererUtils.prototype.bindEndLoop = function (func) {
            this._endLoopHandler = func;
            wd.EventManager.on(wd.EngineEvent.ENDLOOP, this._endLoopHandler);
        };
        ShadowMapRenderTargetRendererUtils.prototype.unBindEndLoop = function () {
            wd.EventManager.off(wd.EngineEvent.ENDLOOP, this._endLoopHandler);
        };
        ShadowMapRenderTargetRendererUtils.prototype.beforeRender = function () {
            var scene = wd.Director.getInstance().scene;
            scene.useProgram(this._shader);
        };
        ShadowMapRenderTargetRendererUtils.prototype.afterRender = function () {
            var scene = wd.Director.getInstance().scene;
            scene.unUseProgram();
        };
        ShadowMapRenderTargetRendererUtils.prototype.createShaderWithShaderLib = function (lib) {
            this._shader = wd.Shader.create();
            this._shader.addLib(wd.CommonShaderLib.create());
            this._shader.addLib(wd.CommonVerticeShaderLib.create());
            this._shader.addLib(lib);
        };
        ShadowMapRenderTargetRendererUtils.prototype.isContainer = function (entityObject) {
            return !entityObject.hasComponent(wd.Geometry);
        };
        ShadowMapRenderTargetRendererUtils.prototype.addAllChildren = function (entityObject) {
            var children = [], add = function (entityObject) {
                entityObject.forEach(function (child) {
                    children.push(child);
                    add(child);
                });
            };
            add(entityObject);
            return children;
        };
        ShadowMapRenderTargetRendererUtils.prototype.setShadowMap = function (target, shadowMap) {
            var material = null;
            if (!target.hasComponent(wd.Geometry)) {
                return;
            }
            material = target.getComponent(wd.Geometry).material;
            if (material.hasShadowMap(shadowMap)) {
                return;
            }
            wd.Log.error(!(material instanceof wd.LightMaterial), wd.Log.info.FUNC_MUST_BE("material", "LightMaterial when set shadowMap"));
            this.addShadowMap(material, shadowMap);
        };
        return ShadowMapRenderTargetRendererUtils;
    })();
    wd.ShadowMapRenderTargetRendererUtils = ShadowMapRenderTargetRendererUtils;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var CubemapShadowMapRenderTargetRendererUtils = (function (_super) {
        __extends(CubemapShadowMapRenderTargetRendererUtils, _super);
        function CubemapShadowMapRenderTargetRendererUtils() {
            _super.apply(this, arguments);
        }
        CubemapShadowMapRenderTargetRendererUtils.create = function (light, texture) {
            var obj = new this(light, texture);
            obj.initWhenCreate();
            return obj;
        };
        CubemapShadowMapRenderTargetRendererUtils.prototype.initWhenCreate = function () {
            var self = this;
            _super.prototype.initWhenCreate.call(this);
            this.light.shadowRenderList.forEach(function (childList) {
                childList.forEach(function (child) {
                    self.setShadowMap(child, self.texture);
                });
            });
        };
        CubemapShadowMapRenderTargetRendererUtils.prototype.clearCubemapShadowMapData = function (target) {
            var material = target.getComponent(wd.Geometry).material;
            material.clearCubemapShadowMapData();
        };
        CubemapShadowMapRenderTargetRendererUtils.prototype.setMaterialShadowMapData = function (material, target, shadowMapCamera) {
            material.addCubemapShadowMapData({
                shadowBias: this.light.shadowBias,
                shadowDarkness: this.light.shadowDarkness,
                lightPos: this.light.position,
                farPlane: this.light.shadowCameraFar
            });
            material.buildCubemapShadowMapData = {
                lightPos: this.light.position,
                farPlane: this.light.shadowCameraFar
            };
        };
        CubemapShadowMapRenderTargetRendererUtils.prototype.addShadowMap = function (material, shadowMap) {
            material.addCubemapShadowMap(shadowMap);
        };
        __decorate([
            wd.require(function (target) {
                var material = target.getComponent(wd.Geometry).material;
                wd.assert(material instanceof wd.LightMaterial, wd.Log.info.FUNC_MUST_BE("material", "LightMaterial when set shadowMap"));
            })
        ], CubemapShadowMapRenderTargetRendererUtils.prototype, "clearCubemapShadowMapData", null);
        return CubemapShadowMapRenderTargetRendererUtils;
    })(wd.ShadowMapRenderTargetRendererUtils);
    wd.CubemapShadowMapRenderTargetRendererUtils = CubemapShadowMapRenderTargetRendererUtils;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var TwoDShadowMapRenderTargetRendererUtils = (function (_super) {
        __extends(TwoDShadowMapRenderTargetRendererUtils, _super);
        function TwoDShadowMapRenderTargetRendererUtils() {
            _super.apply(this, arguments);
        }
        TwoDShadowMapRenderTargetRendererUtils.create = function (light, texture) {
            var obj = new this(light, texture);
            obj.initWhenCreate();
            return obj;
        };
        TwoDShadowMapRenderTargetRendererUtils.prototype.initWhenCreate = function () {
            var self = this;
            _super.prototype.initWhenCreate.call(this);
            this.light.shadowRenderList.forEach(function (child) {
                self.setShadowMap(child, self.texture);
            });
        };
        TwoDShadowMapRenderTargetRendererUtils.prototype.clearTwoDShadowMapData = function (target) {
            var material = target.getComponent(wd.Geometry).material;
            material.clearTwoDShadowMapData();
        };
        TwoDShadowMapRenderTargetRendererUtils.prototype.setMaterialShadowMapData = function (material, target, shadowMapCamera) {
            var cameraComponent = shadowMapCamera.getComponent(wd.CameraController);
            material.addTwoDShadowMapData({
                shadowBias: this.light.shadowBias,
                shadowDarkness: this.light.shadowDarkness,
                shadowSize: [this.light.shadowMapWidth, this.light.shadowMapHeight],
                lightPos: this.light.position,
                vpMatrixFromLight: cameraComponent.worldToCameraMatrix.applyMatrix(cameraComponent.pMatrix)
            });
            material.buildTwoDShadowMapData = {
                vpMatrixFromLight: cameraComponent.worldToCameraMatrix.applyMatrix(cameraComponent.pMatrix)
            };
        };
        TwoDShadowMapRenderTargetRendererUtils.prototype.addShadowMap = function (material, shadowMap) {
            material.addTwoDShadowMap(shadowMap);
        };
        __decorate([
            wd.require(function (target) {
                var material = target.getComponent(wd.Geometry).material;
                wd.assert(material instanceof wd.LightMaterial, wd.Log.info.FUNC_MUST_BE("material", "LightMaterial when set shadowMap"));
            })
        ], TwoDShadowMapRenderTargetRendererUtils.prototype, "clearTwoDShadowMapData", null);
        return TwoDShadowMapRenderTargetRendererUtils;
    })(wd.ShadowMapRenderTargetRendererUtils);
    wd.TwoDShadowMapRenderTargetRendererUtils = TwoDShadowMapRenderTargetRendererUtils;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var Renderer = (function () {
        function Renderer() {
            this.skyboxCommand = null;
        }
        Renderer.prototype.init = function () {
        };
        return Renderer;
    })();
    wd.Renderer = Renderer;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var WebGLRenderer = (function (_super) {
        __extends(WebGLRenderer, _super);
        function WebGLRenderer() {
            _super.apply(this, arguments);
            this._commandQueue = wdCb.Collection.create();
            this._clearOptions = {
                color: wd.Color.create("#000000")
            };
        }
        WebGLRenderer.create = function () {
            var obj = new this();
            return obj;
        };
        WebGLRenderer.prototype.createQuadCommand = function () {
            return wd.QuadCommand.create();
        };
        WebGLRenderer.prototype.addCommand = function (command) {
            if (this._commandQueue.hasChild(command)) {
                return;
            }
            this._commandQueue.addChild(command);
            command.init();
        };
        WebGLRenderer.prototype.hasCommand = function () {
            return this._commandQueue.getCount() > 0 || !!this.skyboxCommand;
        };
        WebGLRenderer.prototype.render = function () {
            var deviceManager = wd.DeviceManager.getInstance();
            deviceManager.clear(this._clearOptions);
            this._renderOpaqueCommands();
            deviceManager.depthWrite = false;
            this._renderSortedTransparentCommands();
            deviceManager.depthWrite = true;
            if (this.skyboxCommand) {
                deviceManager.depthFunc = wd.DepthFunction.LEQUAL;
                this.skyboxCommand.execute();
                deviceManager.depthFunc = wd.DepthFunction.LESS;
            }
            this._clearCommand();
        };
        WebGLRenderer.prototype.init = function () {
            var deviceManager = wd.DeviceManager.getInstance();
            deviceManager.depthTest = true;
            deviceManager.blend = false;
            deviceManager.setColorWrite(true, true, true, true);
            deviceManager.side = wd.Side.FRONT;
            deviceManager.depthWrite = true;
        };
        WebGLRenderer.prototype.setClearColor = function (color) {
            this._setClearOptions({
                color: color
            });
        };
        WebGLRenderer.prototype._renderOpaqueCommands = function () {
            this._commandQueue
                .removeChild(function (command) {
                return !command.material.blend;
            })
                .forEach(function (command) {
                command.execute();
            });
        };
        WebGLRenderer.prototype._renderSortedTransparentCommands = function () {
            var self = this;
            this._commandQueue
                .sort(function (a, b) {
                return self._getObjectToCameraZDistance(b) - self._getObjectToCameraZDistance(a);
            })
                .forEach(function (command) {
                command.execute();
            });
        };
        WebGLRenderer.prototype._getObjectToCameraZDistance = function (quad) {
            return wd.Director.getInstance().scene.camera.transform.position.z - quad.z;
        };
        WebGLRenderer.prototype._clearCommand = function () {
            this._commandQueue.removeAllChildren();
            this.skyboxCommand = null;
        };
        WebGLRenderer.prototype._setClearOptions = function (clearOptions) {
            wdCb.ExtendUtils.extend(this._clearOptions, clearOptions);
        };
        return WebGLRenderer;
    })(wd.Renderer);
    wd.WebGLRenderer = WebGLRenderer;
})(wd || (wd = {}));
var wd;
(function (wd) {
    (function (DrawMode) {
        DrawMode[DrawMode["TRIANGLES"] = "TRIANGLES"] = "TRIANGLES";
        DrawMode[DrawMode["LINES"] = "LINES"] = "LINES";
    })(wd.DrawMode || (wd.DrawMode = {}));
    var DrawMode = wd.DrawMode;
})(wd || (wd = {}));
var wd;
(function (wd) {
    (function (BufferType) {
        BufferType[BufferType["UNSIGNED_BYTE"] = "UNSIGNED_BYTE"] = "UNSIGNED_BYTE";
        BufferType[BufferType["SHORT"] = "SHORT"] = "SHORT";
        BufferType[BufferType["UNSIGNED_SHORT"] = "UNSIGNED_SHORT"] = "UNSIGNED_SHORT";
        BufferType[BufferType["INT"] = "INT"] = "INT";
        BufferType[BufferType["UNSIGNED_INT"] = "UNSIGNED_INT"] = "UNSIGNED_INT";
        BufferType[BufferType["FLOAT"] = "FLOAT"] = "FLOAT";
    })(wd.BufferType || (wd.BufferType = {}));
    var BufferType = wd.BufferType;
})(wd || (wd = {}));
var wd;
(function (wd) {
    (function (BufferDataType) {
        BufferDataType[BufferDataType["VERTICE"] = "VERTICE"] = "VERTICE";
        BufferDataType[BufferDataType["INDICE"] = "INDICE"] = "INDICE";
        BufferDataType[BufferDataType["NORMAL"] = "NORMAL"] = "NORMAL";
        BufferDataType[BufferDataType["TEXCOORD"] = "TEXCOORD"] = "TEXCOORD";
        BufferDataType[BufferDataType["TANGENT"] = "TANGENT"] = "TANGENT";
        BufferDataType[BufferDataType["COLOR"] = "COLOR"] = "COLOR";
    })(wd.BufferDataType || (wd.BufferDataType = {}));
    var BufferDataType = wd.BufferDataType;
})(wd || (wd = {}));
var wd;
(function (wd) {
    (function (BufferUsage) {
        BufferUsage[BufferUsage["STREAM_DRAW"] = "STREAM_DRAW"] = "STREAM_DRAW";
        BufferUsage[BufferUsage["STATIC_DRAW"] = "STATIC_DRAW"] = "STATIC_DRAW";
        BufferUsage[BufferUsage["DYNAMIC_DRAW"] = "DYNAMIC_DRAW"] = "DYNAMIC_DRAW";
    })(wd.BufferUsage || (wd.BufferUsage = {}));
    var BufferUsage = wd.BufferUsage;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var Buffer = (function () {
        function Buffer() {
            this.buffer = null;
            this.type = null;
            this.count = null;
        }
        Buffer.prototype.dispose = function () {
            wd.DeviceManager.getInstance().gl.deleteBuffer(this.buffer);
            delete this.buffer;
        };
        return Buffer;
    })();
    wd.Buffer = Buffer;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var ElementBuffer = (function (_super) {
        __extends(ElementBuffer, _super);
        function ElementBuffer() {
            _super.apply(this, arguments);
            this._typeSize = null;
            this.data = null;
            this._type = null;
        }
        ElementBuffer.create = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var obj = new this();
            obj.initWhenCreate.apply(obj, args);
            return obj;
        };
        Object.defineProperty(ElementBuffer.prototype, "typeSize", {
            get: function () { return this._typeSize; },
            enumerable: true,
            configurable: true
        });
        ElementBuffer.prototype.initWhenCreate = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var gl = wd.DeviceManager.getInstance().gl;
            this.buffer = gl.createBuffer();
            if (!this.buffer) {
                wd.Log.log('Failed to create the this.buffer object');
                return null;
            }
            if (args.length === 0) {
                return;
            }
            else {
                var data = args[0], type = args[1], usage = args[2] || wd.BufferUsage.STATIC_DRAW;
                if (!data || !this._checkDataType(data, type)) {
                    return null;
                }
                gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.buffer);
                gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, data, gl[usage]);
                gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);
                this.type = gl[type];
                this._type = type;
                this.count = data.length;
                this.data = data;
                this._typeSize = this._getInfo(type).size;
                return this.buffer;
            }
        };
        ElementBuffer.prototype.resetData = function (data, type) {
            if (type === void 0) { type = this._type; }
            var gl = wd.DeviceManager.getInstance().gl;
            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.buffer);
            gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, data, gl.DYNAMIC_DRAW);
            this.type = gl[type];
            this._type = type;
            this.data = data;
            this.count = data.length;
            this._typeSize = this._getInfo(type).size;
            return this;
        };
        ElementBuffer.prototype._checkDataType = function (data, type) {
            var info = this._getInfo(type);
            return data instanceof info.typeClass;
        };
        ElementBuffer.prototype._getInfo = function (type) {
            var info = null;
            switch (type) {
                case wd.BufferType.UNSIGNED_BYTE:
                    info = {
                        typeClass: Uint8Array,
                        size: 1
                    };
                    break;
                case wd.BufferType.SHORT:
                    info = {
                        typeClass: Int16Array,
                        size: 2
                    };
                    break;
                case wd.BufferType.UNSIGNED_SHORT:
                    info = {
                        typeClass: Uint16Array,
                        size: 2
                    };
                    break;
                case wd.BufferType.INT:
                    info = {
                        typeClass: Int32Array,
                        size: 4
                    };
                    break;
                case wd.BufferType.UNSIGNED_INT:
                    info = {
                        typeClass: Uint32Array,
                        size: 4
                    };
                    break;
                case wd.BufferType.FLOAT:
                    info = {
                        typeClass: Float32Array,
                        size: 4
                    };
                    break;
                default:
                    wd.Log.error(true, wd.Log.info.FUNC_INVALID("BufferType"));
                    break;
            }
            return info;
        };
        __decorate([
            wd.require(function (data, type) {
                if (type === void 0) { type = this._type; }
                wd.assert(this.buffer, wd.Log.info.FUNC_MUST("create gl buffer"));
            })
        ], ElementBuffer.prototype, "resetData", null);
        return ElementBuffer;
    })(wd.Buffer);
    wd.ElementBuffer = ElementBuffer;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var ArrayBuffer = (function (_super) {
        __extends(ArrayBuffer, _super);
        function ArrayBuffer() {
            _super.apply(this, arguments);
            this.size = null;
            this.data = null;
            this._type = null;
        }
        ArrayBuffer.create = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var obj = new this();
            obj.initWhenCreate.apply(obj, args);
            return obj;
        };
        ArrayBuffer.prototype.initWhenCreate = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var gl = wd.DeviceManager.getInstance().gl;
            this.buffer = gl.createBuffer();
            if (!this.buffer) {
                wd.Log.log('Failed to create the this.buffer object');
                return null;
            }
            if (args.length === 0) {
                return;
            }
            else {
                var data = args[0], size = args[1], type = args[2], usage = args[3] || wd.BufferUsage.STATIC_DRAW;
                if (!data) {
                    return null;
                }
                gl.bindBuffer(gl.ARRAY_BUFFER, this.buffer);
                gl.bufferData(gl.ARRAY_BUFFER, data, gl[usage]);
                gl.bindBuffer(gl.ARRAY_BUFFER, null);
                this.size = size;
                this.type = gl[type];
                this._type = type;
                this.count = data.length / size;
                this.data = data;
                return this.buffer;
            }
        };
        ArrayBuffer.prototype.resetData = function (data, size, type) {
            if (size === void 0) { size = this.size; }
            if (type === void 0) { type = this._type; }
            var gl = wd.DeviceManager.getInstance().gl;
            gl.bindBuffer(gl.ARRAY_BUFFER, this.buffer);
            gl.bufferData(gl.ARRAY_BUFFER, data, gl.DYNAMIC_DRAW);
            this.size = size;
            this.type = gl[type];
            this._type = type;
            this.count = data.length / size;
            this.data = data;
            return this;
        };
        __decorate([
            wd.require(function (data, size, type) {
                if (size === void 0) { size = this.size; }
                if (type === void 0) { type = this._type; }
                wd.assert(this.buffer, wd.Log.info.FUNC_MUST("create gl buffer"));
            })
        ], ArrayBuffer.prototype, "resetData", null);
        return ArrayBuffer;
    })(wd.Buffer);
    wd.ArrayBuffer = ArrayBuffer;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var _table = wdCb.Hash.create();
    _table.addChild(wd.BufferDataType.VERTICE, "vertices");
    _table.addChild(wd.BufferDataType.INDICE, "indices");
    _table.addChild(wd.BufferDataType.NORMAL, "normals");
    _table.addChild(wd.BufferDataType.TEXCOORD, "texCoords");
    _table.addChild(wd.BufferDataType.COLOR, "colors");
    _table.addChild(wd.BufferDataType.TANGENT, "tangents");
    var BufferDataTable = (function () {
        function BufferDataTable() {
        }
        BufferDataTable.getGeometryDataName = function (type) {
            var result = _table.getChild(type);
            wd.Log.error(result === void 0, wd.Log.info.FUNC_NOT_EXIST(type, "in BufferDataTable"));
            return result;
        };
        return BufferDataTable;
    })();
    wd.BufferDataTable = BufferDataTable;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var Program = (function () {
        function Program() {
            this._program = null;
            this._shader = null;
        }
        Program.create = function () {
            var obj = new this();
            return obj;
        };
        Program.prototype.use = function () {
            wd.DeviceManager.getInstance().gl.useProgram(this._program);
        };
        Program.prototype.getUniformLocation = function (name) {
            return wd.DeviceManager.getInstance().gl.getUniformLocation(this._program, name);
        };
        Program.prototype.sendUniformData = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var gl = wd.DeviceManager.getInstance().gl, pos = null, type = null, data = null;
            if (args[0] === null || args[0] instanceof WebGLUniformLocation) {
                pos = args[0];
            }
            else {
                var name_2 = args[0];
                pos = this.getUniformLocation(name_2);
            }
            type = args[1];
            data = args[2];
            if (this.isUniformDataNotExistByLocation(pos) || data === null) {
                return;
            }
            if (wd.JudgeUtils.isFunction(data)) {
                data = data();
            }
            switch (type) {
                case wd.VariableType.FLOAT_1:
                    gl.uniform1f(pos, data);
                    break;
                case wd.VariableType.FLOAT_2:
                    gl.uniform2f(pos, data[0], data[1]);
                    break;
                case wd.VariableType.FLOAT_3:
                    data = this._convertToVector3(data);
                    gl.uniform3f(pos, data.x, data.y, data.z);
                    break;
                case wd.VariableType.FLOAT_4:
                    data = this._convertToVector4(data);
                    gl.uniform4f(pos, data.x, data.y, data.z, data.w);
                    break;
                case wd.VariableType.FLOAT_MAT3:
                    gl.uniformMatrix3fv(pos, false, data.values);
                    break;
                case wd.VariableType.FLOAT_MAT4:
                    gl.uniformMatrix4fv(pos, false, data.values);
                    break;
                case wd.VariableType.NUMBER_1:
                case wd.VariableType.SAMPLER_CUBE:
                case wd.VariableType.SAMPLER_2D:
                    gl.uniform1i(pos, data);
                    break;
                default:
                    wd.Log.error(true, wd.Log.info.FUNC_INVALID("VariableType:", type));
                    break;
            }
        };
        Program.prototype.sendUniformDataFromCustomShader = function () {
            var self = this;
            this._shader.uniforms
                .filter(function (val) {
                return val.value !== wd.VariableCategory.ENGINE;
            })
                .forEach(function (val, key) {
                if (val.type === wd.VariableType.STRUCTURE) {
                    wd.Log.error(!wd.JudgeUtils.isDirectObject(val.value), wd.Log.info.FUNC_MUST_BE("value's type", "object{}"));
                    for (var i in val.value) {
                        self.sendStructureData(key + "." + i, val.value[i].type, val.value[i].value);
                    }
                }
                else {
                    self.sendUniformData(key, val.type, val.value);
                }
            });
        };
        Program.prototype.sendAttributeData = function (name, type, data) {
            var gl = wd.DeviceManager.getInstance().gl, pos = null, buffer = null;
            pos = gl.getAttribLocation(this._program, name);
            if (pos === -1 || data === null) {
                return;
            }
            if (wd.JudgeUtils.isFunction(data)) {
                buffer = data();
                wd.Log.error(!(data instanceof wd.ArrayBuffer), wd.Log.info.FUNC_MUST_BE("ArrayBuffer"));
            }
            else {
                buffer = data;
            }
            switch (type) {
                case wd.VariableType.BUFFER:
                    gl.bindBuffer(gl.ARRAY_BUFFER, buffer.buffer);
                    gl.vertexAttribPointer(pos, buffer.size, buffer.type, false, 0, 0);
                    gl.enableVertexAttribArray(pos);
                    break;
                default:
                    wd.Log.error(true, wd.Log.info.FUNC_INVALID("VariableType:", type));
                    break;
            }
        };
        Program.prototype.sendAttributeDataFromCustomShader = function () {
            var self = this;
            this._shader.attributes
                .filter(function (val) {
                return val.value !== wd.VariableCategory.ENGINE;
            })
                .forEach(function (val, key) {
                self.sendAttributeData(key, self._convertAttributeDataType(val), val.value);
            });
        };
        Program.prototype.sendStructureData = function (name, type, data) {
            this.sendUniformData(name, type, data);
        };
        Program.prototype.initWithShader = function (shader) {
            var gl = wd.DeviceManager.getInstance().gl, vs = null, fs = null;
            this._program = wd.DeviceManager.getInstance().gl.createProgram();
            vs = shader.createVsShader();
            fs = shader.createFsShader();
            this._shader = shader;
            gl.attachShader(this._program, vs);
            gl.attachShader(this._program, fs);
            gl.bindAttribLocation(this._program, 0, "a_position");
            gl.linkProgram(this._program);
            wd.Log.error(gl.getProgramParameter(this._program, gl.LINK_STATUS) === false, gl.getProgramInfoLog(this._program));
            gl.deleteShader(vs);
            gl.deleteShader(fs);
            return this;
        };
        Program.prototype.dispose = function () {
            var gl = wd.DeviceManager.getInstance().gl;
            gl.deleteProgram(this._program);
            this._program = undefined;
        };
        Program.prototype.isUniformDataNotExistByLocation = function (pos) {
            return pos === null;
        };
        Program.prototype._convertAttributeDataType = function (val) {
            return wd.VariableType.BUFFER;
        };
        Program.prototype._convertToVector3 = function (data) {
            if (wd.JudgeUtils.isArray(data)) {
                return wd.Vector3.create(data[0], data[1], data[2]);
            }
            return data;
        };
        Program.prototype._convertToVector4 = function (data) {
            if (wd.JudgeUtils.isArray(data)) {
                return wd.Vector4.create(data[0], data[1], data[2], data[3]);
            }
            return data;
        };
        __decorate([
            wd.require(function (data) {
                wd.assert(wd.JudgeUtils.isArray(data) || data instanceof wd.Vector3, wd.Log.info.FUNC_MUST_BE("shader->attributes->value", "Array<Array<any>> or Array<Vector3> stucture"));
            })
        ], Program.prototype, "_convertToVector3", null);
        __decorate([
            wd.require(function (data) {
                wd.assert(wd.JudgeUtils.isArray(data) || data instanceof wd.Vector4, wd.Log.info.FUNC_MUST_BE("shader->attributes->value", "Array<Array<any>> or Array<Vector4> stucture"));
            })
        ], Program.prototype, "_convertToVector4", null);
        return Program;
    })();
    wd.Program = Program;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var QuadCommand = (function () {
        function QuadCommand() {
            this.buffers = null;
            this.mMatrix = null;
            this.vMatrix = null;
            this.pMatrix = null;
            this.drawMode = wd.DrawMode.TRIANGLES;
            this.z = null;
            this.material = null;
            this.animation = null;
        }
        QuadCommand.create = function () {
            var obj = new this();
            return obj;
        };
        Object.defineProperty(QuadCommand.prototype, "program", {
            get: function () {
                return this.material.program;
            },
            enumerable: true,
            configurable: true
        });
        QuadCommand.prototype.execute = function () {
            this.material.updateTexture();
            this.material.updateShader(this);
            this._draw();
        };
        QuadCommand.prototype.init = function () {
        };
        QuadCommand.prototype._draw = function () {
            var totalNum = 0, startOffset = 0, vertexBuffer = null, gl = wd.DeviceManager.getInstance().gl;
            this._setEffects();
            if (this.buffers.hasChild(wd.BufferDataType.INDICE)) {
                var indexBuffer = this.buffers.getChild(wd.BufferDataType.INDICE);
                totalNum = indexBuffer.count;
                gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer.buffer);
                wd.GlUtils.drawElements(gl[this.drawMode], totalNum, indexBuffer.type, indexBuffer.typeSize * startOffset);
            }
            else {
                vertexBuffer = this.buffers.getChild(wd.BufferDataType.VERTICE);
                totalNum = vertexBuffer.count;
                wd.GlUtils.drawArrays(gl[this.drawMode], startOffset, totalNum);
            }
        };
        QuadCommand.prototype._setEffects = function () {
            var deviceManager = wd.DeviceManager.getInstance(), material = this.material;
            deviceManager.setColorWrite(material.redWrite, material.greenWrite, material.blueWrite, material.alphaWrite);
            deviceManager.polygonOffsetMode = material.polygonOffsetMode;
            deviceManager.side = this._getSide();
            deviceManager.blend = material.blend;
            if (material.blendFuncSeparate && material.blendEquationSeparate) {
                deviceManager.setBlendFuncSeparate(material.blendFuncSeparate);
                deviceManager.setBlendEquationSeparate(material.blendEquationSeparate);
            }
            else {
                wdCb.Log.error(!material.blendSrc || !material.blendDst || !material.blendEquation, wdCb.Log.info.FUNC_MUST("material.blendSrc || material.blendDst || material.blendEquation", "be set"));
                deviceManager.setBlendFunc(material.blendSrc, material.blendDst);
                deviceManager.setBlendEquation(material.blendEquation);
            }
        };
        QuadCommand.prototype._getSide = function () {
            var scene = wd.Director.getInstance().scene;
            return scene.side ? scene.side : this.material.side;
        };
        return QuadCommand;
    })();
    wd.QuadCommand = QuadCommand;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var GlUtils = (function () {
        function GlUtils() {
        }
        GlUtils.drawElements = function (mode, count, type, offset) {
            wd.DebugStatistics.count.drawCalls++;
            this._getGl().drawElements(mode, count, type, offset);
        };
        GlUtils.drawArrays = function (mode, first, count) {
            wd.DebugStatistics.count.drawCalls++;
            this._getGl().drawArrays(mode, first, count);
        };
        GlUtils._getGl = function () {
            return wd.DeviceManager.getInstance().gl;
        };
        return GlUtils;
    })();
    wd.GlUtils = GlUtils;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var FrameBuffer = (function () {
        function FrameBuffer(width, height) {
            this.width = null;
            this.height = null;
            this._originScissorTest = null;
            this.width = width;
            this.height = height;
        }
        FrameBuffer.create = function (width, height) {
            var obj = new this(width, height);
            return obj;
        };
        Object.defineProperty(FrameBuffer.prototype, "gl", {
            get: function () {
                return wd.DeviceManager.getInstance().gl;
            },
            enumerable: true,
            configurable: true
        });
        FrameBuffer.prototype.createFrameBuffer = function () {
            return this.gl.createFramebuffer();
        };
        FrameBuffer.prototype.bindFrameBuffer = function (buffer) {
            var gl = this.gl;
            gl.bindFramebuffer(gl.FRAMEBUFFER, buffer);
        };
        FrameBuffer.prototype.setViewport = function () {
            var deviceManager = wd.DeviceManager.getInstance();
            deviceManager.setViewport(0, 0, this.width, this.height);
            this._originScissorTest = deviceManager.scissorTest;
            deviceManager.scissorTest = false;
        };
        FrameBuffer.prototype.restoreViewport = function () {
            var deviceManager = wd.DeviceManager.getInstance(), view = deviceManager.view;
            deviceManager.setViewport(0, 0, view.width, view.height);
            deviceManager.scissorTest = this._originScissorTest;
        };
        FrameBuffer.prototype.dispose = function () {
            this.unBind();
        };
        FrameBuffer.prototype.unBind = function () {
            var gl = this.gl;
            gl.bindFramebuffer(gl.FRAMEBUFFER, null);
            gl.bindRenderbuffer(gl.RENDERBUFFER, null);
        };
        FrameBuffer.prototype.createRenderBuffer = function () {
            var gl = this.gl, renderBuffer = gl.createRenderbuffer();
            wd.Log.error(!renderBuffer, "Failed to create renderbuffer object");
            return renderBuffer;
        };
        FrameBuffer.prototype.attachTexture = function (glTarget, texture) {
            var gl = this.gl;
            gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, glTarget, texture, 0);
        };
        FrameBuffer.prototype.attachRenderBuffer = function (type, renderBuffer) {
            var gl = this.gl;
            gl.bindRenderbuffer(gl.RENDERBUFFER, renderBuffer);
            gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, this.width, this.height);
            gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl[type], gl.RENDERBUFFER, renderBuffer);
        };
        FrameBuffer.prototype.check = function () {
            var gl = this.gl, e = gl.checkFramebufferStatus(gl.FRAMEBUFFER);
            if (e !== gl.FRAMEBUFFER_COMPLETE) {
                wd.Log.error(true, "Frame buffer object is incomplete:" + e.toString());
            }
        };
        return FrameBuffer;
    })();
    wd.FrameBuffer = FrameBuffer;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var Shader = (function () {
        function Shader() {
            this._attributes = wdCb.Hash.create();
            this._uniforms = wdCb.Hash.create();
            this._vsSource = "";
            this._fsSource = "";
            this.program = wd.Program.create();
            this._definitionDataDirty = true;
            this._libs = wdCb.Collection.create();
            this._sourceBuilder = wd.ShaderSourceBuilder.create();
        }
        Shader.create = function () {
            var obj = new this();
            return obj;
        };
        Object.defineProperty(Shader.prototype, "attributes", {
            get: function () {
                return this._attributes;
            },
            set: function (attributes) {
                if (this._isNotEqual(attributes, this._attributes)) {
                    this._definitionDataDirty = true;
                }
                this._attributes = attributes;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Shader.prototype, "uniforms", {
            get: function () {
                return this._uniforms;
            },
            set: function (uniforms) {
                if (this._isNotEqual(uniforms, this._uniforms)) {
                    this._definitionDataDirty = true;
                }
                this._uniforms = uniforms;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Shader.prototype, "vsSource", {
            get: function () {
                return this._vsSource;
            },
            set: function (vsSource) {
                if (vsSource !== this._vsSource) {
                    this._definitionDataDirty = true;
                }
                this._vsSource = vsSource;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Shader.prototype, "fsSource", {
            get: function () {
                return this._fsSource;
            },
            set: function (fsSource) {
                if (fsSource !== this._fsSource) {
                    this._definitionDataDirty = true;
                }
                this._fsSource = fsSource;
            },
            enumerable: true,
            configurable: true
        });
        Shader.prototype.createVsShader = function () {
            var gl = wd.DeviceManager.getInstance().gl;
            return this._initShader(gl.createShader(gl.VERTEX_SHADER), this.vsSource);
        };
        Shader.prototype.createFsShader = function () {
            var gl = wd.DeviceManager.getInstance().gl;
            return this._initShader(gl.createShader(gl.FRAGMENT_SHADER), this.fsSource);
        };
        Shader.prototype.isEqual = function (other) {
            return this.vsSource === other.vsSource
                && this.fsSource === other.fsSource;
        };
        Shader.prototype.init = function () {
        };
        Shader.prototype.update = function (quadCmd, material) {
            var program = this.program;
            this.buildDefinitionData(quadCmd, material);
            if (this._definitionDataDirty) {
                this.program.initWithShader(this);
                this._definitionDataDirty = false;
            }
            this.program.use();
            this._libs.forEach(function (lib) {
                lib.sendShaderVariables(program, quadCmd, material);
            });
            program.sendAttributeDataFromCustomShader();
            program.sendUniformDataFromCustomShader();
            material.mapManager.sendData(program);
        };
        Shader.prototype.hasLib = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            if (args[0] instanceof wd.ShaderLib) {
                var lib = args[0];
                return this._libs.hasChild(lib);
            }
            else {
                var _class = args[0];
                return this._libs.hasChild(function (lib) {
                    return lib instanceof _class;
                });
            }
        };
        Shader.prototype.addLib = function (lib) {
            this._libs.addChild(lib);
        };
        Shader.prototype.addShaderLibToTop = function (lib) {
            this._libs.unShiftChild(lib);
        };
        Shader.prototype.getLib = function (libClass) {
            return this._libs.findOne(function (lib) {
                return lib instanceof libClass;
            });
        };
        Shader.prototype.getLibs = function () {
            return this._libs;
        };
        Shader.prototype.removeLib = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            return this._libs.removeChild(args[0]);
        };
        Shader.prototype.removeAllLibs = function () {
            this._libs.removeAllChildren();
        };
        Shader.prototype.sortLib = function (func) {
            this._libs = this._libs.sort(func);
        };
        Shader.prototype.read = function (definitionData) {
            this._sourceBuilder.read(definitionData);
        };
        Shader.prototype.buildDefinitionData = function (quadCmd, material) {
            this._libs.forEach(function (lib) {
                lib.setShaderDefinition(quadCmd, material);
            });
            this._sourceBuilder.clearShaderDefinition();
            this._sourceBuilder.build(this._libs);
            this.attributes = this._sourceBuilder.attributes;
            this.uniforms = this._sourceBuilder.uniforms;
            this.vsSource = this._sourceBuilder.vsSource;
            this.fsSource = this._sourceBuilder.fsSource;
        };
        Shader.prototype._initShader = function (shader, source) {
            var gl = wd.DeviceManager.getInstance().gl;
            gl.shaderSource(shader, source);
            gl.compileShader(shader);
            if (gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
                return shader;
            }
            else {
                wd.Log.log(gl.getShaderInfoLog(shader));
                wd.Log.log("attributes:\n", this.attributes);
                wd.Log.log("uniforms:\n", this.uniforms);
                wd.Log.log("source:\n", source);
            }
        };
        Shader.prototype._isNotEqual = function (list1, list2) {
            var result = false;
            list1.forEach(function (data, key) {
                var list2Data = list2.getChild(key);
                if (!list2Data || data.type !== list2Data.type || data.value !== list2Data.value) {
                    result = true;
                    return wdCb.$BREAK;
                }
            });
            return result;
        };
        return Shader;
    })();
    wd.Shader = Shader;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var ShaderSourceBuilder = (function () {
        function ShaderSourceBuilder() {
            this.attributes = wdCb.Hash.create();
            this.uniforms = wdCb.Hash.create();
            this.vsSource = "";
            this.vsSourceTop = "";
            this.vsSourceDefine = "";
            this.vsSourceVarDeclare = "";
            this.vsSourceFuncDeclare = "";
            this.vsSourceFuncDefine = "";
            this.vsSourceBody = "";
            this.fsSource = "";
            this.fsSourceTop = "";
            this.fsSourceDefine = "";
            this.fsSourceVarDeclare = "";
            this.fsSourceFuncDeclare = "";
            this.fsSourceFuncDefine = "";
            this.fsSourceBody = "";
            this.vsSourceDefineList = wdCb.Collection.create();
            this.fsSourceDefineList = wdCb.Collection.create();
            this.attributesFromShaderLib = wdCb.Hash.create();
            this.uniformsFromShaderLib = wdCb.Hash.create();
            this.vsSourceTopFromShaderLib = "";
            this.vsSourceDefineFromShaderLib = "";
            this.vsSourceVarDeclareFromShaderLib = "";
            this.vsSourceFuncDeclareFromShaderLib = "";
            this.vsSourceFuncDefineFromShaderLib = "";
            this.vsSourceBodyFromShaderLib = "";
            this.fsSourceTopFromShaderLib = "";
            this.fsSourceDefineFromShaderLib = "";
            this.fsSourceVarDeclareFromShaderLib = "";
            this.fsSourceFuncDeclareFromShaderLib = "";
            this.fsSourceFuncDefineFromShaderLib = "";
            this.fsSourceBodyFromShaderLib = "";
        }
        ShaderSourceBuilder.create = function () {
            var obj = new this();
            return obj;
        };
        ShaderSourceBuilder.prototype.read = function (definitionData) {
            if (definitionData.attributes) {
                this.attributesFromShaderLib = (definitionData.attributes instanceof wdCb.Hash ? definitionData.attributes : wdCb.Hash.create(definitionData.attributes));
            }
            if (definitionData.uniforms) {
                this.uniformsFromShaderLib = (definitionData.uniforms instanceof wdCb.Hash ? definitionData.uniforms : wdCb.Hash.create(definitionData.uniforms));
            }
            this.vsSourceTopFromShaderLib = definitionData.vsSourceTop || "";
            this.vsSourceDefineFromShaderLib = definitionData.vsSourceDefine || "";
            this.vsSourceVarDeclareFromShaderLib = definitionData.vsSourceVarDeclare || "";
            this.vsSourceFuncDeclareFromShaderLib = definitionData.vsSourceFuncDeclare || "";
            this.vsSourceFuncDefineFromShaderLib = definitionData.vsSourceFuncDefine || "";
            this.vsSourceBodyFromShaderLib = definitionData.vsSourceBody || "";
            this.fsSourceTopFromShaderLib = definitionData.fsSourceTop || "";
            this.fsSourceDefineFromShaderLib = definitionData.fsSourceDefine || "";
            this.fsSourceVarDeclareFromShaderLib = definitionData.fsSourceVarDeclare || "";
            this.fsSourceFuncDeclareFromShaderLib = definitionData.fsSourceFuncDeclare || "";
            this.fsSourceFuncDefineFromShaderLib = definitionData.fsSourceFuncDefine || "";
            this.fsSourceBodyFromShaderLib = definitionData.fsSourceBody || "";
        };
        ShaderSourceBuilder.prototype.build = function (libs) {
            var self = this;
            this._readLibSource(libs);
            this._buildVsSource();
            this._buildFsSource();
            this.attributes
                .filter(function (data) {
                return (wd.JudgeUtils.isArray(data.value) || wd.JudgeUtils.isFloatArray(data.value)) && data.value !== wd.VariableCategory.ENGINE;
            })
                .forEach(function (data, key) {
                data.value = self._convertArrayToArrayBuffer(data.type, data.value);
            });
        };
        ShaderSourceBuilder.prototype.clearShaderDefinition = function () {
            this.attributes.removeAllChildren();
            this.uniforms.removeAllChildren();
            this.vsSourceDefineList.removeAllChildren();
            this.fsSourceDefineList.removeAllChildren();
            this.vsSourceTop = "";
            this.vsSourceDefine = "";
            this.vsSourceVarDeclare = "";
            this.vsSourceFuncDeclare = "";
            this.vsSourceFuncDefine = "";
            this.vsSourceBody = "";
            this.fsSourceTop = "";
            this.fsSourceDefine = "";
            this.fsSourceVarDeclare = "";
            this.fsSourceFuncDeclare = "";
            this.fsSourceFuncDefine = "";
            this.fsSourceBody = "";
        };
        ShaderSourceBuilder.prototype._readLibSource = function (libs) {
            var self = this, vsSourceTop = "", vsSourceDefine = "", vsSourceVarDeclare = "", vsSourceFuncDeclare = "", vsSourceFuncDefine = "", vsSourceBody = "", fsSourceTop = "", fsSourceDefine = "", fsSourceVarDeclare = "", fsSourceFuncDeclare = "", fsSourceFuncDefine = "", fsSourceBody = "";
            libs.forEach(function (lib) {
                self.attributes.addChildren(lib.attributes);
                self.uniforms.addChildren(lib.uniforms);
                vsSourceTop += lib.vsSourceTop;
                vsSourceDefine += lib.vsSourceDefine;
                vsSourceVarDeclare += lib.vsSourceVarDeclare;
                vsSourceFuncDeclare += lib.vsSourceFuncDeclare;
                vsSourceFuncDefine += lib.vsSourceFuncDefine;
                vsSourceBody += lib.vsSourceBody;
                fsSourceTop += lib.fsSourceTop;
                fsSourceDefine += lib.fsSourceDefine;
                fsSourceVarDeclare += lib.fsSourceVarDeclare;
                fsSourceFuncDeclare += lib.fsSourceFuncDeclare;
                fsSourceFuncDefine += lib.fsSourceFuncDefine;
                fsSourceBody += lib.fsSourceBody;
                self.vsSourceDefineList.addChildren(lib.vsSourceDefineList);
                self.fsSourceDefineList.addChildren(lib.fsSourceDefineList);
            });
            this.attributes.addChildren(this.attributesFromShaderLib);
            this.uniforms.addChildren(this.uniformsFromShaderLib);
            this.vsSourceTop = vsSourceTop + this.vsSourceTopFromShaderLib;
            this.vsSourceDefine = vsSourceDefine + this.vsSourceDefineFromShaderLib;
            this.vsSourceVarDeclare = vsSourceVarDeclare + this.vsSourceVarDeclareFromShaderLib;
            this.vsSourceFuncDeclare = vsSourceFuncDeclare + this.vsSourceFuncDeclareFromShaderLib;
            this.vsSourceFuncDefine = vsSourceFuncDefine + this.vsSourceFuncDefineFromShaderLib;
            this.vsSourceBody = vsSourceBody + this.vsSourceBodyFromShaderLib;
            this.fsSourceTop = fsSourceTop + this.fsSourceTopFromShaderLib;
            this.fsSourceDefine = fsSourceDefine + this.fsSourceDefineFromShaderLib;
            this.fsSourceVarDeclare = fsSourceVarDeclare + this.fsSourceVarDeclareFromShaderLib;
            this.fsSourceFuncDeclare = fsSourceFuncDeclare + this.fsSourceFuncDeclareFromShaderLib;
            this.fsSourceFuncDefine = fsSourceFuncDefine + this.fsSourceFuncDefineFromShaderLib;
            this.fsSourceBody = fsSourceBody + this.fsSourceBodyFromShaderLib;
        };
        ShaderSourceBuilder.prototype._buildVsSource = function () {
            this.vsSource = this._buildVsSourceTop() + this._buildVsSourceDefine() + this._buildVsSourceVarDeclare() + this._buildVsSourceFuncDeclare() + this._buildVsSourceFuncDefine() + this._buildVsSourceBody();
        };
        ShaderSourceBuilder.prototype._buildFsSource = function () {
            this.fsSource = this._buildFsSourceTop() + this._buildFsSourceDefine() + this._buildFsSourceVarDeclare() + this._buildFsSourceFuncDeclare() + this._buildFsSourceFuncDefine() + this._buildFsSourceBody();
        };
        ShaderSourceBuilder.prototype._buildVsSourceTop = function () {
            return this._getPrecisionSource() + this.vsSourceTop;
        };
        ShaderSourceBuilder.prototype._buildVsSourceDefine = function () {
            return this._buildSourceDefine(this.vsSourceDefineList) + this.vsSourceDefine;
        };
        ShaderSourceBuilder.prototype._buildVsSourceVarDeclare = function () {
            return this._generateAttributeSource() + this._generateUniformSource(this.vsSourceVarDeclare, this.vsSourceFuncDefine, this.vsSourceBody) + this.vsSourceVarDeclare;
        };
        ShaderSourceBuilder.prototype._buildVsSourceFuncDeclare = function () {
            return this.vsSourceFuncDeclare;
        };
        ShaderSourceBuilder.prototype._buildVsSourceFuncDefine = function () {
            return this.vsSourceFuncDefine;
        };
        ShaderSourceBuilder.prototype._buildVsSourceBody = function () {
            return wd.ShaderSnippet.main_begin + this.vsSourceBody + wd.ShaderSnippet.main_end;
        };
        ShaderSourceBuilder.prototype._buildFsSourceTop = function () {
            return this._getPrecisionSource() + this.fsSourceTop;
        };
        ShaderSourceBuilder.prototype._buildFsSourceDefine = function () {
            return this._buildSourceDefine(this.fsSourceDefineList) + this.fsSourceDefine;
        };
        ShaderSourceBuilder.prototype._buildFsSourceVarDeclare = function () {
            return this._generateUniformSource(this.fsSourceVarDeclare, this.fsSourceFuncDefine, this.fsSourceBody) + this.fsSourceVarDeclare;
        };
        ShaderSourceBuilder.prototype._buildFsSourceFuncDeclare = function () {
            return this.fsSourceFuncDeclare;
        };
        ShaderSourceBuilder.prototype._buildFsSourceFuncDefine = function () {
            return this.fsSourceFuncDefine;
        };
        ShaderSourceBuilder.prototype._buildFsSourceBody = function () {
            return wd.ShaderSnippet.main_begin + this.fsSourceBody + wd.ShaderSnippet.main_end;
        };
        ShaderSourceBuilder.prototype._buildSourceDefine = function (defineList) {
            var result = "";
            defineList.forEach(function (define) {
                if (define.value === void 0) {
                    result += "#define " + define.name + "\n";
                }
                else {
                    result += "#define " + define.name + " " + define.value + "\n";
                }
            });
            return result;
        };
        ShaderSourceBuilder.prototype._getPrecisionSource = function () {
            var precision = wd.GPUDetector.getInstance().precision, result = null;
            switch (precision) {
                case wd.GPUPrecision.HIGHP:
                    result = wd.ShaderChunk.highp_fragment.top;
                    break;
                case wd.GPUPrecision.MEDIUMP:
                    result = wd.ShaderChunk.mediump_fragment.top;
                    break;
                case wd.GPUPrecision.LOWP:
                    result = wd.ShaderChunk.lowp_fragment.top;
                    break;
                default:
                    result = "";
                    break;
            }
            return result;
        };
        ShaderSourceBuilder.prototype._generateAttributeSource = function () {
            var result = "";
            this.attributes.filter(function (data, key) {
                return !!data;
            }).forEach(function (data, key) {
                result += "attribute " + wd.VariableTypeTable.getVariableType(data.type) + " " + key + ";\n";
            });
            return result;
        };
        ShaderSourceBuilder.prototype._generateUniformSource = function (sourceVarDeclare, sourceFuncDefine, sourceBody) {
            var result = "", self = this;
            this.uniforms.filter(function (data, key) {
                return !!data && data.type !== wd.VariableType.STRUCTURE && data.type !== wd.VariableType.STRUCTURES && !self._isExistInSource(key, sourceVarDeclare) && (self._isExistInSource(key, sourceFuncDefine) || self._isExistInSource(key, sourceBody));
            }).forEach(function (data, key) {
                result += "uniform " + wd.VariableTypeTable.getVariableType(data.type) + " " + key + ";\n";
            });
            return result;
        };
        ShaderSourceBuilder.prototype._isExistInSource = function (key, source) {
            return source.indexOf(key) !== -1;
        };
        ShaderSourceBuilder.prototype._convertArrayToArrayBuffer = function (type, value) {
            var size = this._getBufferSize(type);
            if (wd.JudgeUtils.isArray(value)) {
                return wd.ArrayBuffer.create(new Float32Array(value), size, wd.BufferType.FLOAT);
            }
            else if (wd.JudgeUtils.isFloatArray(value)) {
                return wd.ArrayBuffer.create(value, size, wd.BufferType.FLOAT);
            }
        };
        ShaderSourceBuilder.prototype._getBufferSize = function (type) {
            var size = null;
            switch (type) {
                case wd.VariableType.FLOAT_1:
                case wd.VariableType.NUMBER_1:
                    size = 1;
                    break;
                case wd.VariableType.FLOAT_3:
                    size = 3;
                    break;
                case wd.VariableType.FLOAT_4:
                    size = 4;
                    break;
                default:
                    wd.Log.error(true, wd.Log.info.FUNC_UNEXPECT("VariableType", type));
                    break;
            }
            return size;
        };
        return ShaderSourceBuilder;
    })();
    wd.ShaderSourceBuilder = ShaderSourceBuilder;
})(wd || (wd = {}));
var wd;
(function (wd) {
    (function (VariableType) {
        VariableType[VariableType["FLOAT_1"] = 0] = "FLOAT_1";
        VariableType[VariableType["FLOAT_2"] = 1] = "FLOAT_2";
        VariableType[VariableType["FLOAT_3"] = 2] = "FLOAT_3";
        VariableType[VariableType["FLOAT_4"] = 3] = "FLOAT_4";
        VariableType[VariableType["FLOAT_MAT3"] = 4] = "FLOAT_MAT3";
        VariableType[VariableType["FLOAT_MAT4"] = 5] = "FLOAT_MAT4";
        VariableType[VariableType["BUFFER"] = 6] = "BUFFER";
        VariableType[VariableType["SAMPLER_CUBE"] = 7] = "SAMPLER_CUBE";
        VariableType[VariableType["SAMPLER_2D"] = 8] = "SAMPLER_2D";
        VariableType[VariableType["NUMBER_1"] = 9] = "NUMBER_1";
        VariableType[VariableType["STRUCTURE"] = 10] = "STRUCTURE";
        VariableType[VariableType["STRUCTURES"] = 11] = "STRUCTURES";
    })(wd.VariableType || (wd.VariableType = {}));
    var VariableType = wd.VariableType;
})(wd || (wd = {}));
var wd;
(function (wd) {
    (function (VariableCategory) {
        VariableCategory[VariableCategory["ENGINE"] = "ENGINE"] = "ENGINE";
        VariableCategory[VariableCategory["CUSTOM"] = "CUSTOM"] = "CUSTOM";
    })(wd.VariableCategory || (wd.VariableCategory = {}));
    var VariableCategory = wd.VariableCategory;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var VariableLib = (function () {
        function VariableLib() {
        }
        VariableLib.a_position = {
            type: wd.VariableType.FLOAT_3,
            value: wd.VariableCategory.ENGINE
        };
        VariableLib.a_currentFramePosition = {
            type: wd.VariableType.FLOAT_3,
            value: wd.VariableCategory.ENGINE
        };
        VariableLib.a_nextFramePosition = {
            type: wd.VariableType.FLOAT_3,
            value: wd.VariableCategory.ENGINE
        };
        VariableLib.a_normal = {
            type: wd.VariableType.FLOAT_3,
            value: wd.VariableCategory.ENGINE
        };
        VariableLib.a_currentFrameNormal = {
            type: wd.VariableType.FLOAT_3,
            value: wd.VariableCategory.ENGINE
        };
        VariableLib.a_nextFrameNormal = {
            type: wd.VariableType.FLOAT_3,
            value: wd.VariableCategory.ENGINE
        };
        VariableLib.a_color = {
            type: wd.VariableType.FLOAT_3,
            value: wd.VariableCategory.ENGINE
        };
        VariableLib.a_texCoord = {
            type: wd.VariableType.FLOAT_2,
            value: wd.VariableCategory.ENGINE
        };
        VariableLib.a_tangent = {
            type: wd.VariableType.FLOAT_3,
            value: wd.VariableCategory.ENGINE
        };
        VariableLib.u_mMatrix = {
            type: wd.VariableType.FLOAT_MAT4,
            value: wd.VariableCategory.ENGINE
        };
        VariableLib.u_vMatrix = {
            type: wd.VariableType.FLOAT_MAT4,
            value: wd.VariableCategory.ENGINE
        };
        VariableLib.u_pMatrix = {
            type: wd.VariableType.FLOAT_MAT4,
            value: wd.VariableCategory.ENGINE
        };
        VariableLib.u_normalMatrix = {
            type: wd.VariableType.FLOAT_MAT3,
            value: wd.VariableCategory.ENGINE
        };
        VariableLib.u_samplerCube0 = {
            type: wd.VariableType.SAMPLER_CUBE,
            value: wd.VariableCategory.ENGINE
        };
        VariableLib.u_sampler2D0 = {
            type: wd.VariableType.SAMPLER_2D,
            value: wd.VariableCategory.ENGINE
        };
        VariableLib.u_sampler2D1 = {
            type: wd.VariableType.SAMPLER_2D,
            value: wd.VariableCategory.ENGINE
        };
        VariableLib.u_diffuseMapSampler = {
            type: wd.VariableType.SAMPLER_2D,
            value: wd.VariableCategory.ENGINE
        };
        VariableLib.u_specularMapSampler = {
            type: wd.VariableType.SAMPLER_2D,
            value: wd.VariableCategory.ENGINE
        };
        VariableLib.u_normalMapSampler = {
            type: wd.VariableType.SAMPLER_2D,
            value: wd.VariableCategory.ENGINE
        };
        VariableLib.u_mirrorSampler = {
            type: wd.VariableType.SAMPLER_2D,
            value: wd.VariableCategory.ENGINE
        };
        VariableLib.u_cameraPos = {
            type: wd.VariableType.FLOAT_3,
            value: wd.VariableCategory.ENGINE
        };
        VariableLib.u_refractionRatio = {
            type: wd.VariableType.FLOAT_1,
            value: wd.VariableCategory.ENGINE
        };
        VariableLib.u_reflectivity = {
            type: wd.VariableType.FLOAT_1,
            value: wd.VariableCategory.ENGINE
        };
        VariableLib.u_sourceRegion = {
            type: wd.VariableType.FLOAT_4,
            value: wd.VariableCategory.ENGINE
        };
        VariableLib.u_repeatRegion = {
            type: wd.VariableType.FLOAT_4,
            value: wd.VariableCategory.ENGINE
        };
        VariableLib.u_combineMode = {
            type: wd.VariableType.NUMBER_1,
            value: wd.VariableCategory.ENGINE
        };
        VariableLib.u_mixRatio = {
            type: wd.VariableType.FLOAT_1,
            value: wd.VariableCategory.ENGINE
        };
        VariableLib.u_diffuse = {
            type: wd.VariableType.FLOAT_3,
            value: wd.VariableCategory.ENGINE
        };
        VariableLib.u_specular = {
            type: wd.VariableType.FLOAT_3,
            value: wd.VariableCategory.ENGINE
        };
        VariableLib.u_shininess = {
            type: wd.VariableType.FLOAT_1,
            value: wd.VariableCategory.ENGINE
        };
        VariableLib.u_isBothSide = {
            type: wd.VariableType.NUMBER_1,
            value: wd.VariableCategory.ENGINE
        };
        VariableLib.u_opacity = {
            type: wd.VariableType.FLOAT_1,
            value: wd.VariableCategory.ENGINE
        };
        VariableLib.u_ambient = {
            type: wd.VariableType.FLOAT_3,
            value: wd.VariableCategory.ENGINE
        };
        VariableLib.u_directionLights = {
            type: wd.VariableType.STRUCTURES,
            value: wd.VariableCategory.ENGINE
        };
        VariableLib.u_pointLights = {
            type: wd.VariableType.STRUCTURES,
            value: wd.VariableCategory.ENGINE
        };
        VariableLib.u_vpMatrixFromLight = {
            type: wd.VariableType.FLOAT_MAT4,
            value: wd.VariableCategory.ENGINE
        };
        VariableLib.u_lightPos = {
            type: wd.VariableType.FLOAT_3,
            value: wd.VariableCategory.ENGINE
        };
        VariableLib.u_farPlane = {
            type: wd.VariableType.FLOAT_1,
            value: wd.VariableCategory.ENGINE
        };
        VariableLib.u_interpolation = {
            type: wd.VariableType.FLOAT_1,
            value: wd.VariableCategory.ENGINE
        };
        return VariableLib;
    })();
    wd.VariableLib = VariableLib;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var _table = wdCb.Hash.create();
    _table.addChild(wd.VariableType.FLOAT_1, "float");
    _table.addChild(wd.VariableType.FLOAT_2, "vec2");
    _table.addChild(wd.VariableType.FLOAT_3, "vec3");
    _table.addChild(wd.VariableType.FLOAT_4, "vec4");
    _table.addChild(wd.VariableType.FLOAT_MAT3, "mat3");
    _table.addChild(wd.VariableType.FLOAT_MAT4, "mat4");
    _table.addChild(wd.VariableType.NUMBER_1, "int");
    _table.addChild(wd.VariableType.SAMPLER_CUBE, "samplerCube");
    _table.addChild(wd.VariableType.SAMPLER_2D, "sampler2D");
    var VariableTypeTable = (function () {
        function VariableTypeTable() {
        }
        VariableTypeTable.getVariableType = function (type) {
            var result = _table.getChild(type);
            wd.Log.error(result === void 0, wd.Log.info.FUNC_NOT_EXIST(type, "in VariableTypeTable"));
            return result;
        };
        return VariableTypeTable;
    })();
    wd.VariableTypeTable = VariableTypeTable;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var _table = wdCb.Hash.create();
    _table.addChild("diffuseMap", "u_diffuseMapSampler");
    _table.addChild("specularMap", "u_specularMapSampler");
    _table.addChild("normalMap", "u_normalMapSampler");
    _table.addChild("mirrorReflectionMap", "u_mirrorSampler");
    var VariableNameTable = (function () {
        function VariableNameTable() {
        }
        VariableNameTable.getVariableName = function (name) {
            var result = _table.getChild(name);
            wd.Log.error(result === void 0, wd.Log.info.FUNC_NOT_EXIST(name, "in VariableNameTable"));
            return result;
        };
        return VariableNameTable;
    })();
    wd.VariableNameTable = VariableNameTable;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var ShaderLib = (function () {
        function ShaderLib() {
            this.type = wd.ABSTRACT_ATTRIBUTE;
            this.attributes = wdCb.Hash.create();
            this.uniforms = wdCb.Hash.create();
            this.vsSourceTop = "";
            this.vsSourceDefine = "";
            this.vsSourceVarDeclare = "";
            this.vsSourceFuncDeclare = "";
            this.vsSourceFuncDefine = "";
            this.vsSourceBody = "";
            this.fsSourceTop = "";
            this.fsSourceDefine = "";
            this.fsSourceVarDeclare = "";
            this.fsSourceFuncDeclare = "";
            this.fsSourceFuncDefine = "";
            this.fsSourceBody = "";
            this.vsSourceDefineList = wdCb.Collection.create();
            this.fsSourceDefineList = wdCb.Collection.create();
        }
        ShaderLib.prototype.setShaderDefinition = function (quadCmd, material) {
            var vs = null, fs = null;
            this._clearShaderDefinition();
            vs = this.getVsChunk();
            fs = this.getFsChunk();
            vs && this.setVsSource(vs);
            fs && this.setFsSource(fs);
        };
        ShaderLib.prototype.getVsChunk = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var type = args.length === 0 ? this.type : args[0];
            return this._getChunk(type, ShaderLibType.vs);
        };
        ShaderLib.prototype.getFsChunk = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var type = args.length === 0 ? this.type : args[0];
            return this._getChunk(type, ShaderLibType.fs);
        };
        ShaderLib.prototype.setVsSource = function (vs, operator) {
            if (operator === void 0) { operator = "="; }
            this._setSource(vs, ShaderLibType.vs, operator);
        };
        ShaderLib.prototype.setFsSource = function (fs, operator) {
            if (operator === void 0) { operator = "="; }
            this._setSource(fs, ShaderLibType.fs, operator);
        };
        ShaderLib.prototype.addAttributeVariable = function (variableArr) {
            this._addVariable(this.attributes, variableArr);
        };
        ShaderLib.prototype.addUniformVariable = function (variableArr) {
            this._addVariable(this.uniforms, variableArr);
        };
        ShaderLib.prototype.sendAttributeData = function (program, name, data) {
            program.sendAttributeData(name, wd.VariableType.BUFFER, data);
        };
        ShaderLib.prototype.sendUniformData = function (program, name, data) {
            program.sendUniformData(name, wd.VariableLib[name].type, data);
        };
        ShaderLib.prototype._clearShaderDefinition = function () {
            this.attributes.removeAllChildren();
            this.uniforms.removeAllChildren();
            this.vsSourceDefineList.removeAllChildren();
            this.fsSourceDefineList.removeAllChildren();
            this.vsSourceTop = "";
            this.vsSourceDefine = "";
            this.vsSourceVarDeclare = "";
            this.vsSourceFuncDeclare = "";
            this.vsSourceFuncDefine = "";
            this.vsSourceBody = "";
            this.fsSourceTop = "";
            this.fsSourceDefine = "";
            this.fsSourceVarDeclare = "";
            this.fsSourceFuncDeclare = "";
            this.fsSourceFuncDefine = "";
            this.fsSourceBody = "";
        };
        ShaderLib.prototype._getChunk = function (type, sourceType) {
            var key = null;
            if (type.indexOf(".glsl") > -1) {
                key = "" + wdCb.PathUtils.basename(type, ".glsl");
            }
            else {
                if (sourceType === ShaderLibType.vs) {
                    key = type + "_vertex";
                }
                else {
                    key = type + "_fragment";
                }
            }
            return wd.ShaderChunk[key] ? wd.ShaderChunk[key] : wd.ShaderChunk.empty;
        };
        ShaderLib.prototype._setSource = function (chunk, sourceType, operator) {
            if (!chunk) {
                return;
            }
            switch (operator) {
                case "+":
                    this[(sourceType + "SourceTop")] += chunk.top;
                    this[(sourceType + "SourceDefine")] += chunk.define;
                    this[(sourceType + "SourceVarDeclare")] += chunk.varDeclare;
                    this[(sourceType + "SourceFuncDeclare")] += chunk.funcDeclare;
                    this[(sourceType + "SourceFuncDefine")] += chunk.funcDefine;
                    this[(sourceType + "SourceBody")] += chunk.body;
                    break;
                case "=":
                    this[(sourceType + "SourceTop")] = chunk.top;
                    this[(sourceType + "SourceDefine")] = chunk.define;
                    this[(sourceType + "SourceVarDeclare")] = chunk.varDeclare;
                    this[(sourceType + "SourceFuncDeclare")] = chunk.funcDeclare;
                    this[(sourceType + "SourceFuncDefine")] = chunk.funcDefine;
                    this[(sourceType + "SourceBody")] = chunk.body;
                    break;
                default:
                    wd.Log.error(true, wd.Log.info.FUNC_INVALID("opertor:", operator));
                    break;
            }
        };
        ShaderLib.prototype._addVariable = function (target, variableArr) {
            variableArr.forEach(function (variable) {
                wd.Log.assert(wd.VariableLib[variable], wd.Log.info.FUNC_SHOULD(variable, "exist in VariableLib"));
                target.addChild(variable, wd.VariableLib[variable]);
            });
        };
        __decorate([
            wd.virtual
        ], ShaderLib.prototype, "setShaderDefinition", null);
        __decorate([
            wd.require(function (program, name, data) {
                wd.assert(!!wd.VariableLib[name], name + " should exist in VariableLib");
            })
        ], ShaderLib.prototype, "sendUniformData", null);
        return ShaderLib;
    })();
    wd.ShaderLib = ShaderLib;
    var ShaderLibType;
    (function (ShaderLibType) {
        ShaderLibType[ShaderLibType["vs"] = "vs"] = "vs";
        ShaderLibType[ShaderLibType["fs"] = "fs"] = "fs";
    })(ShaderLibType || (ShaderLibType = {}));
})(wd || (wd = {}));
var wd;
(function (wd) {
    var CommonShaderLib = (function (_super) {
        __extends(CommonShaderLib, _super);
        function CommonShaderLib() {
            _super.apply(this, arguments);
            this.type = "common";
        }
        CommonShaderLib.create = function () {
            var obj = new this();
            return obj;
        };
        CommonShaderLib.prototype.sendShaderVariables = function (program, quadCmd, material) {
            this.sendUniformData(program, "u_mMatrix", quadCmd.mMatrix);
            this.sendUniformData(program, "u_vMatrix", quadCmd.vMatrix);
            this.sendUniformData(program, "u_pMatrix", quadCmd.pMatrix);
        };
        CommonShaderLib.prototype.setShaderDefinition = function (quadCmd, material) {
            _super.prototype.setShaderDefinition.call(this, quadCmd, material);
            this.addUniformVariable(["u_mMatrix", "u_vMatrix", "u_pMatrix"]);
            this.vsSourceDefine = wd.ShaderChunk.common_define.define + wd.ShaderChunk.common_vertex.define;
            this.vsSourceFuncDefine = wd.ShaderChunk.common_function.funcDefine + wd.ShaderChunk.common_vertex.funcDefine;
            this.fsSourceDefine = wd.ShaderChunk.common_define.define + wd.ShaderChunk.common_fragment.define;
            this.fsSourceFuncDefine = wd.ShaderChunk.common_function.funcDefine + wd.ShaderChunk.common_fragment.funcDefine;
        };
        return CommonShaderLib;
    })(wd.ShaderLib);
    wd.CommonShaderLib = CommonShaderLib;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var CommonVerticeShaderLib = (function (_super) {
        __extends(CommonVerticeShaderLib, _super);
        function CommonVerticeShaderLib() {
            _super.apply(this, arguments);
            this.type = "commonVertice";
        }
        CommonVerticeShaderLib.create = function () {
            var obj = new this();
            return obj;
        };
        CommonVerticeShaderLib.prototype.sendShaderVariables = function (program, quadCmd, material) {
            this._sendAttributeVariables(program, quadCmd);
        };
        CommonVerticeShaderLib.prototype.setShaderDefinition = function (quadCmd, material) {
            _super.prototype.setShaderDefinition.call(this, quadCmd, material);
            this.addAttributeVariable(["a_position"]);
        };
        CommonVerticeShaderLib.prototype._sendAttributeVariables = function (program, quadCmd) {
            if (quadCmd.buffers.hasChild(wd.BufferDataType.VERTICE)) {
                this.sendAttributeData(program, "a_position", quadCmd.buffers.getChild(wd.BufferDataType.VERTICE));
            }
        };
        return CommonVerticeShaderLib;
    })(wd.ShaderLib);
    wd.CommonVerticeShaderLib = CommonVerticeShaderLib;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var CommonNormalShaderLib = (function (_super) {
        __extends(CommonNormalShaderLib, _super);
        function CommonNormalShaderLib() {
            _super.apply(this, arguments);
            this.type = "commonNormal";
        }
        CommonNormalShaderLib.create = function () {
            var obj = new this();
            return obj;
        };
        CommonNormalShaderLib.prototype.sendShaderVariables = function (program, quadCmd, material) {
            this._sendAttributeVariables(program, quadCmd);
        };
        CommonNormalShaderLib.prototype.setShaderDefinition = function (quadCmd, material) {
            _super.prototype.setShaderDefinition.call(this, quadCmd, material);
            this.addAttributeVariable(["a_normal"]);
        };
        CommonNormalShaderLib.prototype._sendAttributeVariables = function (program, quadCmd) {
            if (quadCmd.buffers.hasChild(wd.BufferDataType.NORMAL)) {
                this.sendAttributeData(program, "a_normal", quadCmd.buffers.getChild(wd.BufferDataType.NORMAL));
            }
        };
        return CommonNormalShaderLib;
    })(wd.ShaderLib);
    wd.CommonNormalShaderLib = CommonNormalShaderLib;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var BasicShaderLib = (function (_super) {
        __extends(BasicShaderLib, _super);
        function BasicShaderLib() {
            _super.apply(this, arguments);
            this.type = "basic";
        }
        BasicShaderLib.create = function () {
            var obj = new this();
            return obj;
        };
        BasicShaderLib.prototype.sendShaderVariables = function (program, quadCmd, material) {
            if (quadCmd.buffers.hasChild(wd.BufferDataType.COLOR)) {
                this.sendAttributeData(program, "a_color", quadCmd.buffers.getChild(wd.BufferDataType.COLOR));
                this.sendUniformData(program, "u_opacity", material.opacity);
            }
        };
        BasicShaderLib.prototype.setShaderDefinition = function (quadCmd, material) {
            _super.prototype.setShaderDefinition.call(this, quadCmd, material);
            this.addAttributeVariable(["a_color"]);
            this.addUniformVariable(["u_opacity"]);
            this.vsSourceBody = wd.ShaderSnippet.setPos_mvp + wd.ShaderChunk.basic_vertex.body;
        };
        return BasicShaderLib;
    })(wd.ShaderLib);
    wd.BasicShaderLib = BasicShaderLib;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var BasicEndShaderLib = (function (_super) {
        __extends(BasicEndShaderLib, _super);
        function BasicEndShaderLib() {
            _super.apply(this, arguments);
            this.type = "basicEnd";
        }
        BasicEndShaderLib.create = function () {
            var obj = new this();
            return obj;
        };
        BasicEndShaderLib.prototype.sendShaderVariables = function (program, quadCmd, material) {
        };
        return BasicEndShaderLib;
    })(wd.ShaderLib);
    wd.BasicEndShaderLib = BasicEndShaderLib;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var MorphCommonShaderLib = (function (_super) {
        __extends(MorphCommonShaderLib, _super);
        function MorphCommonShaderLib() {
            _super.apply(this, arguments);
            this.type = "morphCommon";
        }
        MorphCommonShaderLib.create = function () {
            var obj = new this();
            return obj;
        };
        MorphCommonShaderLib.prototype.sendShaderVariables = function (program, quadCmd, material) {
            var anim = (quadCmd.animation);
            this.sendUniformData(program, "u_interpolation", anim.interpolation);
        };
        MorphCommonShaderLib.prototype.setShaderDefinition = function (quadCmd, material) {
            _super.prototype.setShaderDefinition.call(this, quadCmd, material);
            this.addUniformVariable(["u_interpolation"]);
        };
        __decorate([
            wd.require(function (program, quadCmd, material) {
                wd.assert(!!quadCmd.animation, wd.Log.info.FUNC_SHOULD("entityObject", "add MorphAnimation component"));
            })
        ], MorphCommonShaderLib.prototype, "sendShaderVariables", null);
        return MorphCommonShaderLib;
    })(wd.ShaderLib);
    wd.MorphCommonShaderLib = MorphCommonShaderLib;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var MorphVerticeShaderLib = (function (_super) {
        __extends(MorphVerticeShaderLib, _super);
        function MorphVerticeShaderLib() {
            _super.apply(this, arguments);
            this.type = "morphVertice";
        }
        MorphVerticeShaderLib.create = function () {
            var obj = new this();
            return obj;
        };
        MorphVerticeShaderLib.prototype.sendShaderVariables = function (program, quadCmd, material) {
            if (quadCmd.buffers.hasChild(wd.BufferDataType.VERTICE)) {
                var morphVerticeData = quadCmd.buffers.getChild(wd.BufferDataType.VERTICE);
                this.sendAttributeData(program, "a_currentFramePosition", morphVerticeData[0]);
                this.sendAttributeData(program, "a_nextFramePosition", morphVerticeData[1]);
            }
        };
        MorphVerticeShaderLib.prototype.setShaderDefinition = function (quadCmd, material) {
            _super.prototype.setShaderDefinition.call(this, quadCmd, material);
            this.addAttributeVariable(["a_currentFramePosition", "a_nextFramePosition"]);
        };
        __decorate([
            wd.require(function (program, quadCmd, material) {
                wd.assert(!!quadCmd.animation, wd.Log.info.FUNC_SHOULD("entityObject", "add MorphAnimation component"));
            })
        ], MorphVerticeShaderLib.prototype, "sendShaderVariables", null);
        return MorphVerticeShaderLib;
    })(wd.ShaderLib);
    wd.MorphVerticeShaderLib = MorphVerticeShaderLib;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var MorphNormalShaderLib = (function (_super) {
        __extends(MorphNormalShaderLib, _super);
        function MorphNormalShaderLib() {
            _super.apply(this, arguments);
            this.type = "morphNormal";
        }
        MorphNormalShaderLib.create = function () {
            var obj = new this();
            return obj;
        };
        MorphNormalShaderLib.prototype.sendShaderVariables = function (program, quadCmd, material) {
            if (quadCmd.buffers.hasChild(wd.BufferDataType.NORMAL)) {
                var morphNormalData = quadCmd.buffers.getChild(wd.BufferDataType.NORMAL);
                this.sendAttributeData(program, "a_currentFrameNormal", morphNormalData[0]);
                this.sendAttributeData(program, "a_nextFrameNormal", morphNormalData[1]);
            }
        };
        MorphNormalShaderLib.prototype.setShaderDefinition = function (quadCmd, material) {
            _super.prototype.setShaderDefinition.call(this, quadCmd, material);
            this.addAttributeVariable(["a_currentFrameNormal", "a_nextFrameNormal"]);
        };
        return MorphNormalShaderLib;
    })(wd.ShaderLib);
    wd.MorphNormalShaderLib = MorphNormalShaderLib;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var SkyboxShaderLib = (function (_super) {
        __extends(SkyboxShaderLib, _super);
        function SkyboxShaderLib() {
            _super.apply(this, arguments);
            this.type = "skybox";
        }
        SkyboxShaderLib.create = function () {
            var obj = new this();
            return obj;
        };
        SkyboxShaderLib.prototype.sendShaderVariables = function (program, quadCmd, material) {
        };
        SkyboxShaderLib.prototype.setShaderDefinition = function (quadCmd, material) {
            _super.prototype.setShaderDefinition.call(this, quadCmd, material);
            this.addUniformVariable(["u_samplerCube0"]);
        };
        return SkyboxShaderLib;
    })(wd.ShaderLib);
    wd.SkyboxShaderLib = SkyboxShaderLib;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var EnvMapForBasicShaderLib = (function (_super) {
        __extends(EnvMapForBasicShaderLib, _super);
        function EnvMapForBasicShaderLib() {
            _super.apply(this, arguments);
        }
        EnvMapForBasicShaderLib.prototype.sendShaderVariables = function (program, quadCmd, material) {
            this.sendUniformData(program, "u_normalMatrix", quadCmd.mMatrix.copy().invertTo3x3().transpose());
            this.sendUniformData(program, "u_cameraPos", wd.Director.getInstance().scene.camera.transform.position);
        };
        EnvMapForBasicShaderLib.prototype.setShaderDefinition = function (quadCmd, material) {
            _super.prototype.setShaderDefinition.call(this, quadCmd, material);
            this.addUniformVariable(["u_samplerCube0", "u_cameraPos", "u_normalMatrix"]);
            this.vsSourceBody = wd.ShaderSnippet.setPos_mvp + this.getVsChunk().body;
        };
        EnvMapForBasicShaderLib.prototype.setEnvMapSource = function () {
            var vs = this.getVsChunk("envMap_forBasic"), fs = this.getFsChunk("envMap_forBasic");
            this.vsSourceTop = vs.top;
            this.vsSourceDefine = vs.define;
            this.vsSourceVarDeclare = vs.varDeclare;
            this.vsSourceFuncDeclare = vs.funcDeclare;
            this.vsSourceFuncDefine = vs.funcDefine;
            this.vsSourceBody += vs.body;
            this.setFsSource(fs);
        };
        return EnvMapForBasicShaderLib;
    })(wd.ShaderLib);
    wd.EnvMapForBasicShaderLib = EnvMapForBasicShaderLib;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var BasicEnvMapForBasicShaderLib = (function (_super) {
        __extends(BasicEnvMapForBasicShaderLib, _super);
        function BasicEnvMapForBasicShaderLib() {
            _super.apply(this, arguments);
            this.type = "basic_envMap_forBasic";
        }
        BasicEnvMapForBasicShaderLib.create = function () {
            var obj = new this();
            return obj;
        };
        return BasicEnvMapForBasicShaderLib;
    })(wd.EnvMapForBasicShaderLib);
    wd.BasicEnvMapForBasicShaderLib = BasicEnvMapForBasicShaderLib;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var ReflectionForBasicShaderLib = (function (_super) {
        __extends(ReflectionForBasicShaderLib, _super);
        function ReflectionForBasicShaderLib() {
            _super.apply(this, arguments);
            this.type = "reflection_forBasic";
        }
        ReflectionForBasicShaderLib.create = function () {
            var obj = new this();
            return obj;
        };
        ReflectionForBasicShaderLib.prototype.setShaderDefinition = function (quadCmd, material) {
            _super.prototype.setShaderDefinition.call(this, quadCmd, material);
            this.setEnvMapSource();
            this.setFsSource(this.getFsChunk(), "+");
        };
        return ReflectionForBasicShaderLib;
    })(wd.EnvMapForBasicShaderLib);
    wd.ReflectionForBasicShaderLib = ReflectionForBasicShaderLib;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var RefractionForBasicShaderLib = (function (_super) {
        __extends(RefractionForBasicShaderLib, _super);
        function RefractionForBasicShaderLib() {
            _super.apply(this, arguments);
            this.type = "refraction_forBasic";
        }
        RefractionForBasicShaderLib.create = function () {
            var obj = new this();
            return obj;
        };
        RefractionForBasicShaderLib.prototype.sendShaderVariables = function (program, quadCmd, material) {
            _super.prototype.sendShaderVariables.call(this, program, quadCmd, material);
            this.sendUniformData(program, "u_refractionRatio", material.refractionRatio);
        };
        RefractionForBasicShaderLib.prototype.setShaderDefinition = function (quadCmd, material) {
            _super.prototype.setShaderDefinition.call(this, quadCmd, material);
            this.addUniformVariable(["u_refractionRatio"]);
            this.setEnvMapSource();
            this.setFsSource(this.getFsChunk(), "+");
        };
        return RefractionForBasicShaderLib;
    })(wd.EnvMapForBasicShaderLib);
    wd.RefractionForBasicShaderLib = RefractionForBasicShaderLib;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var FresnelForBasicShaderLib = (function (_super) {
        __extends(FresnelForBasicShaderLib, _super);
        function FresnelForBasicShaderLib() {
            _super.apply(this, arguments);
            this.type = "fresnel_forBasic";
        }
        FresnelForBasicShaderLib.create = function () {
            var obj = new this();
            return obj;
        };
        FresnelForBasicShaderLib.prototype.sendShaderVariables = function (program, quadCmd, material) {
            _super.prototype.sendShaderVariables.call(this, program, quadCmd, material);
            this.sendUniformData(program, "u_refractionRatio", material.refractionRatio);
            this.sendUniformData(program, "u_reflectivity", material.reflectivity);
        };
        FresnelForBasicShaderLib.prototype.setShaderDefinition = function (quadCmd, material) {
            _super.prototype.setShaderDefinition.call(this, quadCmd, material);
            this.addUniformVariable(["u_refractionRatio", "u_reflectivity"]);
            this.setEnvMapSource();
            this.setFsSource(this.getFsChunk(), "+");
        };
        return FresnelForBasicShaderLib;
    })(wd.EnvMapForBasicShaderLib);
    wd.FresnelForBasicShaderLib = FresnelForBasicShaderLib;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var EnvMapForLightShaderLib = (function (_super) {
        __extends(EnvMapForLightShaderLib, _super);
        function EnvMapForLightShaderLib() {
            _super.apply(this, arguments);
        }
        EnvMapForLightShaderLib.prototype.sendShaderVariables = function (program, quadCmd, material) {
        };
        EnvMapForLightShaderLib.prototype.setShaderDefinition = function (quadCmd, material) {
            _super.prototype.setShaderDefinition.call(this, quadCmd, material);
            this.addUniformVariable(["u_samplerCube0"]);
            this.vsSourceBody = wd.ShaderSnippet.setPos_mvp + this.getVsChunk().body;
        };
        EnvMapForLightShaderLib.prototype.setEnvMapSource = function () {
            var vs = this.getVsChunk("envMap_forLight"), fs = this.getFsChunk("envMap_forLight");
            this.vsSourceTop = vs.top;
            this.vsSourceDefine = vs.define;
            this.vsSourceVarDeclare = vs.varDeclare;
            this.vsSourceFuncDeclare = vs.funcDeclare;
            this.vsSourceFuncDefine = vs.funcDefine;
            this.vsSourceBody += vs.body;
            this.setFsSource(fs);
        };
        return EnvMapForLightShaderLib;
    })(wd.ShaderLib);
    wd.EnvMapForLightShaderLib = EnvMapForLightShaderLib;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var BasicEnvMapForLightShaderLib = (function (_super) {
        __extends(BasicEnvMapForLightShaderLib, _super);
        function BasicEnvMapForLightShaderLib() {
            _super.apply(this, arguments);
            this.type = "basic_forLight_envMap";
        }
        BasicEnvMapForLightShaderLib.create = function () {
            var obj = new this();
            return obj;
        };
        return BasicEnvMapForLightShaderLib;
    })(wd.EnvMapForLightShaderLib);
    wd.BasicEnvMapForLightShaderLib = BasicEnvMapForLightShaderLib;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var ReflectionForLightShaderLib = (function (_super) {
        __extends(ReflectionForLightShaderLib, _super);
        function ReflectionForLightShaderLib() {
            _super.apply(this, arguments);
            this.type = "reflection_forLight";
        }
        ReflectionForLightShaderLib.create = function () {
            var obj = new this();
            return obj;
        };
        ReflectionForLightShaderLib.prototype.setShaderDefinition = function (quadCmd, material) {
            _super.prototype.setShaderDefinition.call(this, quadCmd, material);
            this.setEnvMapSource();
            this.setFsSource(this.getFsChunk(), "+");
        };
        return ReflectionForLightShaderLib;
    })(wd.EnvMapForLightShaderLib);
    wd.ReflectionForLightShaderLib = ReflectionForLightShaderLib;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var RefractionForLightShaderLib = (function (_super) {
        __extends(RefractionForLightShaderLib, _super);
        function RefractionForLightShaderLib() {
            _super.apply(this, arguments);
            this.type = "refraction_forLight";
        }
        RefractionForLightShaderLib.create = function () {
            var obj = new this();
            return obj;
        };
        RefractionForLightShaderLib.prototype.sendShaderVariables = function (program, quadCmd, material) {
            _super.prototype.sendShaderVariables.call(this, program, quadCmd, material);
            this.sendUniformData(program, "u_refractionRatio", material.refractionRatio);
        };
        RefractionForLightShaderLib.prototype.setShaderDefinition = function (quadCmd, material) {
            _super.prototype.setShaderDefinition.call(this, quadCmd, material);
            this.addUniformVariable(["u_refractionRatio"]);
            this.setEnvMapSource();
            this.setFsSource(this.getFsChunk(), "+");
        };
        return RefractionForLightShaderLib;
    })(wd.EnvMapForLightShaderLib);
    wd.RefractionForLightShaderLib = RefractionForLightShaderLib;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var FresnelForLightShaderLib = (function (_super) {
        __extends(FresnelForLightShaderLib, _super);
        function FresnelForLightShaderLib() {
            _super.apply(this, arguments);
            this.type = "fresnel_forLight";
        }
        FresnelForLightShaderLib.create = function () {
            var obj = new this();
            return obj;
        };
        FresnelForLightShaderLib.prototype.sendShaderVariables = function (program, quadCmd, material) {
            _super.prototype.sendShaderVariables.call(this, program, quadCmd, material);
            if (material.reflectivity !== wd.ShaderChunk.NULL) {
                this.sendUniformData(program, "u_reflectivity", material.reflectivity);
            }
            else {
                this.sendUniformData(program, "u_reflectivity", wd.ShaderChunk.NULL);
                this.sendUniformData(program, "u_refractionRatio", material.refractionRatio);
            }
        };
        FresnelForLightShaderLib.prototype.setShaderDefinition = function (quadCmd, material) {
            _super.prototype.setShaderDefinition.call(this, quadCmd, material);
            this.addUniformVariable(["u_refractionRatio", "u_reflectivity"]);
            this.setEnvMapSource();
            this.setFsSource(this.getFsChunk(), "+");
        };
        return FresnelForLightShaderLib;
    })(wd.EnvMapForLightShaderLib);
    wd.FresnelForLightShaderLib = FresnelForLightShaderLib;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var MapShaderLib = (function (_super) {
        __extends(MapShaderLib, _super);
        function MapShaderLib() {
            _super.apply(this, arguments);
        }
        MapShaderLib.prototype.sendShaderVariables = function (program, quadCmd, material) {
            if (quadCmd.buffers.hasChild(wd.BufferDataType.TEXCOORD)) {
                this.sendAttributeData(program, "a_texCoord", quadCmd.buffers.getChild(wd.BufferDataType.TEXCOORD));
            }
        };
        MapShaderLib.prototype.setShaderDefinition = function (quadCmd, material) {
            _super.prototype.setShaderDefinition.call(this, quadCmd, material);
            this.addAttributeVariable(["a_texCoord"]);
            this.addUniformVariable(["u_sampler2D0", "u_sourceRegion", "u_repeatRegion"]);
            this._setMapSource();
        };
        MapShaderLib.prototype._setMapSource = function () {
            var vs = this.getVsChunk("map_forBasic"), fs = this.getFsChunk("map_forBasic");
            this.vsSourceTop = vs.top;
            this.vsSourceDefine = vs.define;
            this.vsSourceVarDeclare = vs.varDeclare;
            this.vsSourceFuncDeclare = vs.funcDeclare;
            this.vsSourceFuncDefine = vs.funcDefine;
            this.vsSourceBody = vs.body;
            this.setFsSource(fs);
        };
        return MapShaderLib;
    })(wd.ShaderLib);
    wd.MapShaderLib = MapShaderLib;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var BasicMapShaderLib = (function (_super) {
        __extends(BasicMapShaderLib, _super);
        function BasicMapShaderLib() {
            _super.apply(this, arguments);
            this.type = "map_forBasic";
        }
        BasicMapShaderLib.create = function () {
            var obj = new this();
            return obj;
        };
        return BasicMapShaderLib;
    })(wd.MapShaderLib);
    wd.BasicMapShaderLib = BasicMapShaderLib;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var MultiMapShaderLib = (function (_super) {
        __extends(MultiMapShaderLib, _super);
        function MultiMapShaderLib() {
            _super.apply(this, arguments);
            this.type = "multi_map_forBasic";
        }
        MultiMapShaderLib.create = function () {
            var obj = new this();
            return obj;
        };
        MultiMapShaderLib.prototype.sendShaderVariables = function (program, quadCmd, material) {
            _super.prototype.sendShaderVariables.call(this, program, quadCmd, material);
            this.sendUniformData(program, "u_combineMode", material.mapCombineMode);
            this.sendUniformData(program, "u_mixRatio", material.mapMixRatio);
        };
        MultiMapShaderLib.prototype.setShaderDefinition = function (quadCmd, material) {
            _super.prototype.setShaderDefinition.call(this, quadCmd, material);
            this.addUniformVariable(["u_sampler2D1", "u_combineMode", "u_mixRatio"]);
            this.fsSourceFuncDefine = this.getFsChunk().funcDefine;
            this.fsSourceBody = this.getFsChunk().body;
        };
        return MultiMapShaderLib;
    })(wd.MapShaderLib);
    wd.MultiMapShaderLib = MultiMapShaderLib;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var MirrorForBasicShaderLib = (function (_super) {
        __extends(MirrorForBasicShaderLib, _super);
        function MirrorForBasicShaderLib() {
            _super.apply(this, arguments);
            this.type = "mirror_forBasic";
        }
        MirrorForBasicShaderLib.create = function () {
            var obj = new this();
            return obj;
        };
        MirrorForBasicShaderLib.prototype.sendShaderVariables = function (program, quadCmd, material) {
        };
        MirrorForBasicShaderLib.prototype.setShaderDefinition = function (quadCmd, material) {
            _super.prototype.setShaderDefinition.call(this, quadCmd, material);
            this.addUniformVariable(["u_mirrorSampler"]);
        };
        return MirrorForBasicShaderLib;
    })(wd.ShaderLib);
    wd.MirrorForBasicShaderLib = MirrorForBasicShaderLib;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var LightCommonShaderLib = (function (_super) {
        __extends(LightCommonShaderLib, _super);
        function LightCommonShaderLib() {
            _super.apply(this, arguments);
            this.type = "lightCommon";
        }
        LightCommonShaderLib.create = function () {
            var obj = new this();
            return obj;
        };
        LightCommonShaderLib.prototype.sendShaderVariables = function (program, quadCmd, material) {
        };
        LightCommonShaderLib.prototype.setShaderDefinition = function (quadCmd, material) {
            _super.prototype.setShaderDefinition.call(this, quadCmd, material);
            this.setVsSource(this.getVsChunk("light_common.glsl"));
            this.setVsSource(this.getVsChunk(), "+");
            this.setFsSource(this.getFsChunk("light_common.glsl"));
            this.setFsSource(this.getFsChunk(), "+");
        };
        return LightCommonShaderLib;
    })(wd.ShaderLib);
    wd.LightCommonShaderLib = LightCommonShaderLib;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var LightShaderLib = (function (_super) {
        __extends(LightShaderLib, _super);
        function LightShaderLib() {
            _super.apply(this, arguments);
            this.type = "light";
        }
        LightShaderLib.create = function () {
            var obj = new this();
            return obj;
        };
        LightShaderLib.prototype.sendShaderVariables = function (program, quadCmd, material) {
            this.sendUniformData(program, "u_normalMatrix", quadCmd.mMatrix.copy().invertTo3x3().transpose());
            this.sendUniformData(program, "u_cameraPos", wd.Director.getInstance().scene.camera.transform.position);
            this.sendUniformData(program, "u_shininess", material.shininess);
            this.sendUniformData(program, "u_opacity", material.opacity);
            this._sendLightVariables(program);
        };
        LightShaderLib.prototype.setShaderDefinition = function (quadCmd, material) {
            _super.prototype.setShaderDefinition.call(this, quadCmd, material);
            this.addUniformVariable(["u_normalMatrix", "u_cameraPos", "u_shininess", "u_ambient", "u_opacity", "u_isBothSide"]);
            this._setLightDefinition(material);
        };
        LightShaderLib.prototype._sendLightVariables = function (program) {
            var scene = wd.Director.getInstance().scene, directionLights = scene.directionLights, ambientLight = scene.ambientLight, pointLights = scene.pointLights;
            if (ambientLight) {
                this.sendUniformData(program, "u_ambient", ambientLight.getComponent(wd.AmbientLight).color.toVector3());
            }
            if (pointLights) {
                this._sendPointLightVariables(program, pointLights);
            }
            if (directionLights) {
                this._sendDirectionLightVariables(program, directionLights);
            }
        };
        LightShaderLib.prototype._sendPointLightVariables = function (program, pointLights) {
            pointLights.forEach(function (pointLight, index) {
                var lightComponent = pointLight.getComponent(wd.PointLight);
                program.sendStructureData("u_pointLights[" + index + "].position", wd.VariableType.FLOAT_3, lightComponent.position);
                program.sendStructureData("u_pointLights[" + index + "].color", wd.VariableType.FLOAT_3, lightComponent.color.toVector3());
                program.sendStructureData("u_pointLights[" + index + "].intensity", wd.VariableType.FLOAT_1, lightComponent.intensity);
                program.sendStructureData("u_pointLights[" + index + "].range", wd.VariableType.FLOAT_1, lightComponent.range);
                program.sendStructureData("u_pointLights[" + index + "].constant", wd.VariableType.FLOAT_1, lightComponent.constant);
                program.sendStructureData("u_pointLights[" + index + "].linear", wd.VariableType.FLOAT_1, lightComponent.linear);
                program.sendStructureData("u_pointLights[" + index + "].quadratic", wd.VariableType.FLOAT_1, lightComponent.quadratic);
            });
        };
        LightShaderLib.prototype._sendDirectionLightVariables = function (program, directionLights) {
            var self = this;
            directionLights.forEach(function (directionLight, index) {
                var lightComponent = directionLight.getComponent(wd.DirectionLight);
                if (self._isZero(lightComponent.position)) {
                    program.sendStructureData("u_directionLights[" + index + "].position", wd.VariableType.FLOAT_3, wd.DirectionLight.defaultPosition);
                }
                else {
                    program.sendStructureData("u_directionLights[" + index + "].position", wd.VariableType.FLOAT_3, lightComponent.position);
                }
                program.sendStructureData("u_directionLights[" + index + "].color", wd.VariableType.FLOAT_3, lightComponent.color.toVector3());
                program.sendStructureData("u_directionLights[" + index + "].intensity", wd.VariableType.FLOAT_1, lightComponent.intensity);
            });
        };
        LightShaderLib.prototype._isZero = function (position) {
            var val = position.values;
            return val[0] === 0 && val[1] === 0 && val[2] === 0;
        };
        LightShaderLib.prototype._setLightDefinition = function (material) {
            var scene = wd.Director.getInstance().scene, directionLights = scene.directionLights, pointLights = scene.pointLights, direction_lights_count = 0, point_lights_count = 0;
            if (directionLights) {
                this.addUniformVariable(["u_directionLights"]);
                direction_lights_count = directionLights.getCount();
            }
            if (pointLights) {
                this.addUniformVariable(["u_pointLights"]);
                point_lights_count = pointLights.getCount();
            }
            this._addDefine(this.vsSourceDefineList, direction_lights_count, point_lights_count);
            this._addDefine(this.fsSourceDefineList, direction_lights_count, point_lights_count);
            if (material.side === wd.Side.BOTH) {
                this.fsSourceDefineList.addChildren([{
                        name: "BOTH_SIDE"
                    }]);
            }
        };
        LightShaderLib.prototype._addDefine = function (list, direction_lights_count, point_lights_count) {
            list.addChildren([{
                    name: "DIRECTION_LIGHTS_COUNT",
                    value: direction_lights_count
                }, {
                    name: "POINT_LIGHTS_COUNT",
                    value: point_lights_count
                }]);
        };
        return LightShaderLib;
    })(wd.ShaderLib);
    wd.LightShaderLib = LightShaderLib;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var LightEndShaderLib = (function (_super) {
        __extends(LightEndShaderLib, _super);
        function LightEndShaderLib() {
            _super.apply(this, arguments);
            this.type = "lightEnd";
        }
        LightEndShaderLib.create = function () {
            var obj = new this();
            return obj;
        };
        LightEndShaderLib.prototype.sendShaderVariables = function (program, quadCmd, material) {
        };
        return LightEndShaderLib;
    })(wd.ShaderLib);
    wd.LightEndShaderLib = LightEndShaderLib;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var LightMapShaderLib = (function (_super) {
        __extends(LightMapShaderLib, _super);
        function LightMapShaderLib() {
            _super.apply(this, arguments);
        }
        LightMapShaderLib.prototype.sendShaderVariables = function (program, quadCmd, material) {
            if (quadCmd.buffers.hasChild(wd.BufferDataType.TEXCOORD)) {
                this.sendAttributeData(program, "a_texCoord", quadCmd.buffers.getChild(wd.BufferDataType.TEXCOORD));
            }
        };
        LightMapShaderLib.prototype.setShaderDefinition = function (quadCmd, material) {
            _super.prototype.setShaderDefinition.call(this, quadCmd, material);
            this.addAttributeVariable(["a_texCoord"]);
        };
        return LightMapShaderLib;
    })(wd.ShaderLib);
    wd.LightMapShaderLib = LightMapShaderLib;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var DiffuseMapShaderLib = (function (_super) {
        __extends(DiffuseMapShaderLib, _super);
        function DiffuseMapShaderLib() {
            _super.apply(this, arguments);
            this.type = "diffuseMap";
        }
        DiffuseMapShaderLib.create = function () {
            var obj = new this();
            return obj;
        };
        DiffuseMapShaderLib.prototype.setShaderDefinition = function (quadCmd, material) {
            _super.prototype.setShaderDefinition.call(this, quadCmd, material);
            this.addUniformVariable([
                wd.VariableNameTable.getVariableName("diffuseMap"),
                "u_sourceRegion", "u_repeatRegion"
            ]);
        };
        return DiffuseMapShaderLib;
    })(wd.LightMapShaderLib);
    wd.DiffuseMapShaderLib = DiffuseMapShaderLib;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var SpecularMapShaderLib = (function (_super) {
        __extends(SpecularMapShaderLib, _super);
        function SpecularMapShaderLib() {
            _super.apply(this, arguments);
            this.type = "specularMap";
        }
        SpecularMapShaderLib.create = function () {
            var obj = new this();
            return obj;
        };
        SpecularMapShaderLib.prototype.setShaderDefinition = function (quadCmd, material) {
            _super.prototype.setShaderDefinition.call(this, quadCmd, material);
            this.addUniformVariable([
                wd.VariableNameTable.getVariableName("specularMap")
            ]);
        };
        return SpecularMapShaderLib;
    })(wd.LightMapShaderLib);
    wd.SpecularMapShaderLib = SpecularMapShaderLib;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var NormalMapShaderLib = (function (_super) {
        __extends(NormalMapShaderLib, _super);
        function NormalMapShaderLib() {
            _super.apply(this, arguments);
            this.type = "normalMap";
        }
        NormalMapShaderLib.create = function () {
            var obj = new this();
            return obj;
        };
        NormalMapShaderLib.prototype.sendShaderVariables = function (program, quadCmd, material) {
            _super.prototype.sendShaderVariables.call(this, program, quadCmd, material);
            if (quadCmd.buffers.hasChild(wd.BufferDataType.TANGENT)) {
                this.sendAttributeData(program, "a_tangent", quadCmd.buffers.getChild(wd.BufferDataType.TANGENT));
            }
        };
        NormalMapShaderLib.prototype.setShaderDefinition = function (quadCmd, material) {
            _super.prototype.setShaderDefinition.call(this, quadCmd, material);
            this.addAttributeVariable(["a_tangent"]);
            this.addUniformVariable([
                wd.VariableNameTable.getVariableName("normalMap")
            ]);
        };
        return NormalMapShaderLib;
    })(wd.LightMapShaderLib);
    wd.NormalMapShaderLib = NormalMapShaderLib;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var NoDiffuseMapShaderLib = (function (_super) {
        __extends(NoDiffuseMapShaderLib, _super);
        function NoDiffuseMapShaderLib() {
            _super.apply(this, arguments);
            this.type = "noDiffuseMap";
        }
        NoDiffuseMapShaderLib.create = function () {
            var obj = new this();
            return obj;
        };
        NoDiffuseMapShaderLib.prototype.sendShaderVariables = function (program, quadCmd, material) {
            this.sendUniformData(program, "u_diffuse", material.color.toVector3());
        };
        NoDiffuseMapShaderLib.prototype.setShaderDefinition = function (quadCmd, material) {
            _super.prototype.setShaderDefinition.call(this, quadCmd, material);
            this.addUniformVariable(["u_diffuse"]);
        };
        return NoDiffuseMapShaderLib;
    })(wd.ShaderLib);
    wd.NoDiffuseMapShaderLib = NoDiffuseMapShaderLib;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var NoSpecularMapShaderLib = (function (_super) {
        __extends(NoSpecularMapShaderLib, _super);
        function NoSpecularMapShaderLib() {
            _super.apply(this, arguments);
            this.type = "noSpecularMap";
        }
        NoSpecularMapShaderLib.create = function () {
            var obj = new this();
            return obj;
        };
        NoSpecularMapShaderLib.prototype.sendShaderVariables = function (program, quadCmd, material) {
            this.sendUniformData(program, "u_specular", material.specular.toVector3());
        };
        NoSpecularMapShaderLib.prototype.setShaderDefinition = function (quadCmd, material) {
            _super.prototype.setShaderDefinition.call(this, quadCmd, material);
            this.addUniformVariable(["u_specular"]);
        };
        return NoSpecularMapShaderLib;
    })(wd.ShaderLib);
    wd.NoSpecularMapShaderLib = NoSpecularMapShaderLib;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var NoNormalMapShaderLib = (function (_super) {
        __extends(NoNormalMapShaderLib, _super);
        function NoNormalMapShaderLib() {
            _super.apply(this, arguments);
            this.type = "noNormalMap";
        }
        NoNormalMapShaderLib.create = function () {
            var obj = new this();
            return obj;
        };
        NoNormalMapShaderLib.prototype.sendShaderVariables = function (program, quadCmd, material) {
        };
        return NoNormalMapShaderLib;
    })(wd.ShaderLib);
    wd.NoNormalMapShaderLib = NoNormalMapShaderLib;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var BuildShadowMapShaderLib = (function (_super) {
        __extends(BuildShadowMapShaderLib, _super);
        function BuildShadowMapShaderLib() {
            _super.apply(this, arguments);
        }
        BuildShadowMapShaderLib.prototype.setShaderDefinition = function (quadCmd, material) {
            _super.prototype.setShaderDefinition.call(this, quadCmd, material);
            this.setFsSource(this.getFsChunk("commonBuildShadowMap_fragment.glsl"));
            this.setFsSource(this.getFsChunk(), "+");
        };
        return BuildShadowMapShaderLib;
    })(wd.ShaderLib);
    wd.BuildShadowMapShaderLib = BuildShadowMapShaderLib;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var BuildTwoDShadowMapShaderLib = (function (_super) {
        __extends(BuildTwoDShadowMapShaderLib, _super);
        function BuildTwoDShadowMapShaderLib() {
            _super.apply(this, arguments);
            this.type = "buildTwoDShadowMap";
        }
        BuildTwoDShadowMapShaderLib.create = function () {
            var obj = new this();
            return obj;
        };
        BuildTwoDShadowMapShaderLib.prototype.sendShaderVariables = function (program, quadCmd, material) {
            this.sendUniformData(program, "u_vpMatrixFromLight", material.buildTwoDShadowMapData.vpMatrixFromLight);
        };
        BuildTwoDShadowMapShaderLib.prototype.setShaderDefinition = function (quadCmd, material) {
            _super.prototype.setShaderDefinition.call(this, quadCmd, material);
            this.addUniformVariable([
                "u_vpMatrixFromLight"
            ]);
        };
        return BuildTwoDShadowMapShaderLib;
    })(wd.BuildShadowMapShaderLib);
    wd.BuildTwoDShadowMapShaderLib = BuildTwoDShadowMapShaderLib;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var BuildCubemapShadowMapShaderLib = (function (_super) {
        __extends(BuildCubemapShadowMapShaderLib, _super);
        function BuildCubemapShadowMapShaderLib() {
            _super.apply(this, arguments);
            this.type = "buildCubemapShadowMap";
        }
        BuildCubemapShadowMapShaderLib.create = function () {
            var obj = new this();
            return obj;
        };
        BuildCubemapShadowMapShaderLib.prototype.sendShaderVariables = function (program, quadCmd, material) {
            this.sendUniformData(program, "u_lightPos", material.buildCubemapShadowMapData.lightPos);
            this.sendUniformData(program, "u_farPlane", material.buildCubemapShadowMapData.farPlane);
        };
        BuildCubemapShadowMapShaderLib.prototype.setShaderDefinition = function (quadCmd, material) {
            _super.prototype.setShaderDefinition.call(this, quadCmd, material);
            this.addUniformVariable([
                "u_lightPos", "u_farPlane"
            ]);
        };
        return BuildCubemapShadowMapShaderLib;
    })(wd.BuildShadowMapShaderLib);
    wd.BuildCubemapShadowMapShaderLib = BuildCubemapShadowMapShaderLib;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var TotalShadowMapShaderLib = (function (_super) {
        __extends(TotalShadowMapShaderLib, _super);
        function TotalShadowMapShaderLib() {
            _super.apply(this, arguments);
            this.type = "totalShadowMap";
        }
        TotalShadowMapShaderLib.create = function () {
            var obj = new this();
            return obj;
        };
        TotalShadowMapShaderLib.prototype.sendShaderVariables = function (program, quadCmd, material) {
        };
        return TotalShadowMapShaderLib;
    })(wd.ShaderLib);
    wd.TotalShadowMapShaderLib = TotalShadowMapShaderLib;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var ShadowMapShaderLib = (function (_super) {
        __extends(ShadowMapShaderLib, _super);
        function ShadowMapShaderLib() {
            _super.apply(this, arguments);
        }
        ShadowMapShaderLib.prototype.setShaderDefinition = function (quadCmd, material) {
            _super.prototype.setShaderDefinition.call(this, quadCmd, material);
            this._setShadowMapSource();
        };
        ShadowMapShaderLib.prototype._setShadowMapSource = function () {
            var scene = wd.Director.getInstance().scene, twoDShadowMapCount = scene.directionLights ? scene.directionLights.filter(function (light) {
                return light.getComponent(wd.DirectionLight).castShadow;
            }).getCount() : 0, cubemapShadowMapCount = scene.pointLights ? scene.pointLights.filter(function (light) {
                return light.getComponent(wd.PointLight).castShadow;
            }).getCount() : 0;
            if (scene.shadowMap.softType === wd.ShadowMapSoftType.PCF) {
                this.fsSourceDefineList.addChildren([{
                        name: "SHADOWMAP_TYPE_PCF"
                    }]);
            }
            this.vsSourceDefineList.addChild({
                name: "TWOD_SHADOWMAP_COUNT",
                value: twoDShadowMapCount
            });
            this.fsSourceDefineList.addChildren([
                {
                    name: "TWOD_SHADOWMAP_COUNT",
                    value: twoDShadowMapCount
                },
                {
                    name: "CUBEMAP_SHADOWMAP_COUNT",
                    value: cubemapShadowMapCount
                },
            ]);
        };
        return ShadowMapShaderLib;
    })(wd.ShaderLib);
    wd.ShadowMapShaderLib = ShadowMapShaderLib;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var TwoDShadowMapShaderLib = (function (_super) {
        __extends(TwoDShadowMapShaderLib, _super);
        function TwoDShadowMapShaderLib() {
            _super.apply(this, arguments);
            this.type = "twoDShadowMap";
        }
        TwoDShadowMapShaderLib.create = function () {
            var obj = new this();
            return obj;
        };
        TwoDShadowMapShaderLib.prototype.sendShaderVariables = function (program, quadCmd, material) {
            material.twoDShadowMapDatas.forEach(function (data, index) {
                program.sendStructureData("u_vpMatrixFromLight[" + index + "]", wd.VariableType.FLOAT_MAT4, data.vpMatrixFromLight);
                program.sendStructureData("u_twoDShadowSize[" + index + "]", wd.VariableType.FLOAT_2, data.shadowSize);
                program.sendStructureData("u_twoDShadowBias[" + index + "]", wd.VariableType.FLOAT_1, data.shadowBias);
                program.sendStructureData("u_twoDShadowDarkness[" + index + "]", wd.VariableType.FLOAT_1, data.shadowDarkness);
                program.sendStructureData("u_twoDLightPos[" + index + "]", wd.VariableType.FLOAT_3, data.lightPos);
            });
        };
        return TwoDShadowMapShaderLib;
    })(wd.ShadowMapShaderLib);
    wd.TwoDShadowMapShaderLib = TwoDShadowMapShaderLib;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var CubemapShadowMapShaderLib = (function (_super) {
        __extends(CubemapShadowMapShaderLib, _super);
        function CubemapShadowMapShaderLib() {
            _super.apply(this, arguments);
            this.type = "cubemapShadowMap";
        }
        CubemapShadowMapShaderLib.create = function () {
            var obj = new this();
            return obj;
        };
        CubemapShadowMapShaderLib.prototype.sendShaderVariables = function (program, quadCmd, material) {
            material.cubemapShadowMapDatas.forEach(function (data, index) {
                program.sendStructureData("u_cubemapLightPos[" + index + "]", wd.VariableType.FLOAT_3, data.lightPos);
                program.sendStructureData("u_farPlane[" + index + "]", wd.VariableType.FLOAT_1, data.farPlane);
                program.sendStructureData("u_cubemapShadowBias[" + index + "]", wd.VariableType.FLOAT_1, data.shadowBias);
                program.sendStructureData("u_cubemapShadowDarkness[" + index + "]", wd.VariableType.FLOAT_1, data.shadowDarkness);
            });
        };
        return CubemapShadowMapShaderLib;
    })(wd.ShadowMapShaderLib);
    wd.CubemapShadowMapShaderLib = CubemapShadowMapShaderLib;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var NoShadowMapShaderLib = (function (_super) {
        __extends(NoShadowMapShaderLib, _super);
        function NoShadowMapShaderLib() {
            _super.apply(this, arguments);
            this.type = "noShadowMap";
        }
        NoShadowMapShaderLib.create = function () {
            var obj = new this();
            return obj;
        };
        NoShadowMapShaderLib.prototype.sendShaderVariables = function (program, quadCmd, material) {
        };
        return NoShadowMapShaderLib;
    })(wd.ShaderLib);
    wd.NoShadowMapShaderLib = NoShadowMapShaderLib;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var ShaderSnippet = (function () {
        function ShaderSnippet() {
        }
        ShaderSnippet.main_begin = "void main(void){\n";
        ShaderSnippet.main_end = "}\n";
        ShaderSnippet.setPos_mvp = "gl_Position = u_pMatrix * u_vMatrix * u_mMatrix * vec4(a_position, 1.0);\n";
        return ShaderSnippet;
    })();
    wd.ShaderSnippet = ShaderSnippet;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var Material = (function () {
        function Material() {
            this._blendType = null;
            this._blendSrc = wd.BlendFunc.ONE;
            this._blendDst = wd.BlendFunc.ZERO;
            this._blendEquation = wd.BlendEquation.ADD;
            this.shader = wd.Shader.create();
            this.color = wd.Color.create("#ffffff");
            this.redWrite = true;
            this.greenWrite = true;
            this.blueWrite = true;
            this.alphaWrite = true;
            this.polygonOffsetMode = wd.PolygonOffsetMode.NONE;
            this.side = wd.Side.FRONT;
            this.blend = false;
            this.blendFuncSeparate = null;
            this.blendEquationSeparate = [wd.BlendEquation.ADD, wd.BlendEquation.ADD];
            this.shading = wd.Shading.FLAT;
            this.refractionRatio = 0;
            this.reflectivity = wd.ShaderChunk.NULL;
            this.mapCombineMode = wd.TextureCombineMode.MIX;
            this.mapMixRatio = 0.5;
            this.mapManager = wd.MapManager.create(this);
            this.geometry = null;
            this._afterInitSubscription = null;
        }
        Object.defineProperty(Material.prototype, "program", {
            get: function () {
                return this.shader.program;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Material.prototype, "blendType", {
            get: function () {
                if (this._blendType) {
                    return this._blendType;
                }
                if ((this.blendSrc === wd.BlendFunc.ONE)
                    && (this.blendDst === wd.BlendFunc.ZERO)
                    && (this.blendEquation === wd.BlendEquation.ADD)) {
                    return wd.BlendType.NONE;
                }
                else if ((this.blendSrc === wd.BlendFunc.SRC_ALPHA)
                    && (this.blendDst === wd.BlendFunc.ONE_MINUS_SRC_ALPHA)
                    && (this.blendEquation === wd.BlendEquation.ADD)) {
                    return wd.BlendType.NORMAL;
                }
                else if ((this.blendSrc === wd.BlendFunc.ONE)
                    && (this.blendDst === wd.BlendFunc.ONE)
                    && (this.blendEquation === wd.BlendEquation.ADD)) {
                    return wd.BlendType.ADDITIVE;
                }
                else if ((this.blendSrc === wd.BlendFunc.SRC_ALPHA)
                    && (this.blendDst === wd.BlendFunc.ONE)
                    && (this.blendEquation === wd.BlendEquation.ADD)) {
                    return wd.BlendType.ADDITIVEALPHA;
                }
                else if ((this.blendSrc === wd.BlendFunc.DST_COLOR)
                    && (this.blendDst === wd.BlendFunc.ZERO)
                    && (this.blendEquation === wd.BlendEquation.ADD)) {
                    return wd.BlendType.MULTIPLICATIVE;
                }
                else if ((this.blendSrc === wd.BlendFunc.ONE)
                    && (this.blendDst === wd.BlendFunc.ONE_MINUS_SRC_ALPHA)
                    && (this.blendEquation === wd.BlendEquation.ADD)) {
                    return wd.BlendType.PREMULTIPLIED;
                }
                else {
                    return wd.BlendType.NORMAL;
                }
            },
            set: function (blendType) {
                switch (blendType) {
                    case wd.BlendType.NONE:
                        this.blend = false;
                        this.blendSrc = wd.BlendFunc.ONE;
                        this.blendDst = wd.BlendFunc.ZERO;
                        this.blendEquation = wd.BlendEquation.ADD;
                        break;
                    case wd.BlendType.NORMAL:
                        this.blend = true;
                        this.blendSrc = wd.BlendFunc.SRC_ALPHA;
                        this.blendDst = wd.BlendFunc.ONE_MINUS_SRC_ALPHA;
                        this.blendEquation = wd.BlendEquation.ADD;
                        break;
                    case wd.BlendType.PREMULTIPLIED:
                        this.blend = true;
                        this.blendSrc = wd.BlendFunc.ONE;
                        this.blendDst = wd.BlendFunc.ONE_MINUS_SRC_ALPHA;
                        this.blendEquation = wd.BlendEquation.ADD;
                        break;
                    case wd.BlendType.ADDITIVE:
                        this.blend = true;
                        this.blendSrc = wd.BlendFunc.ONE;
                        this.blendDst = wd.BlendFunc.ONE;
                        this.blendEquation = wd.BlendEquation.ADD;
                        break;
                    case wd.BlendType.ADDITIVEALPHA:
                        this.blend = true;
                        this.blendSrc = wd.BlendFunc.SRC_ALPHA;
                        this.blendDst = wd.BlendFunc.ONE;
                        this.blendEquation = wd.BlendEquation.ADD;
                        break;
                    case wd.BlendType.MULTIPLICATIVE:
                        this.blend = true;
                        this.blendSrc = wd.BlendFunc.DST_COLOR;
                        this.blendDst = wd.BlendFunc.ZERO;
                        this.blendEquation = wd.BlendEquation.ADD;
                        break;
                    default:
                        wd.Log.error(true, wd.Log.info.FUNC_INVALID("blendType"));
                        break;
                }
                this._blendType = blendType;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Material.prototype, "envMap", {
            get: function () {
                return this.mapManager.getEnvMap();
            },
            set: function (envMap) {
                this.mapManager.setEnvMap(envMap);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Material.prototype, "blendSrc", {
            get: function () {
                return this._blendSrc;
            },
            set: function (blendSrc) {
                this._blendSrc = blendSrc;
                this.blendFuncSeparate = null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Material.prototype, "blendDst", {
            get: function () {
                return this._blendDst;
            },
            set: function (blendDst) {
                this._blendDst = blendDst;
                this.blendFuncSeparate = null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Material.prototype, "blendEquation", {
            get: function () {
                return this._blendEquation;
            },
            set: function (blendEquation) {
                this._blendEquation = blendEquation;
                this.blendEquationSeparate = null;
            },
            enumerable: true,
            configurable: true
        });
        Material.prototype.init = function () {
            var self = this;
            this.shader.init();
            this.mapManager.init();
            this._afterInitSubscription = wd.EventManager.fromEvent(wd.EngineEvent.AFTER_GAMEOBJECT_INIT)
                .subscribe(function () {
                self._afterInitHandler();
            });
        };
        Material.prototype.dispose = function () {
            this.mapManager.dispose();
            this._afterInitSubscription && this._afterInitSubscription.dispose();
        };
        Material.prototype.updateTexture = function () {
            this.mapManager.update();
        };
        Material.prototype.updateShader = function (quadCmd) {
            var scene = wd.Director.getInstance().scene;
            if (scene.isUseProgram) {
                scene.shader.update(quadCmd, this);
            }
            else {
                this.shader.update(quadCmd, this);
            }
        };
        Material.prototype.addShaderLib = function () {
        };
        Material.prototype.addMap = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            this.mapManager.addMap.apply(this.mapManager, args);
        };
        Material.prototype.addNormalShaderLib = function () {
            if (this._hasAnimation() && !this.shader.hasLib(wd.MorphNormalShaderLib)) {
                this._addShaderLibToTop(wd.MorphNormalShaderLib.create());
            }
            else if (!this.shader.hasLib(wd.CommonNormalShaderLib)) {
                this._addShaderLibToTop(wd.CommonNormalShaderLib.create());
            }
        };
        Material.prototype.setBlendByOpacity = function (opacity) {
            if (opacity < 1.0 && opacity > 0.0) {
                this.blend = true;
            }
            else {
                this.blend = false;
            }
        };
        Material.prototype._addTopShaderLib = function () {
            this.shader.addLib(wd.CommonShaderLib.create());
            if (this._hasAnimation()) {
                this.shader.addLib(wd.MorphCommonShaderLib.create());
                this.shader.addLib(wd.MorphVerticeShaderLib.create());
            }
            else {
                this.shader.addLib(wd.CommonVerticeShaderLib.create());
            }
        };
        Material.prototype._addShaderLibToTop = function (lib) {
            this.shader.addShaderLibToTop(lib);
        };
        Material.prototype._hasAnimation = function () {
            if (this.geometry instanceof wd.ModelGeometry) {
                var geo = (this.geometry);
                return geo.hasAnimation();
            }
            return false;
        };
        Material.prototype._afterInitHandler = function () {
            this._addTopShaderLib();
            this.addShaderLib();
        };
        __decorate([
            wd.require(function () {
                wd.assert(!(this.mirrorMap && this.envMap), wd.Log.info.FUNC_SHOULD_NOT("mirrorMap and envMap", "be set both"));
            })
        ], Material.prototype, "init", null);
        __decorate([
            wd.virtual
        ], Material.prototype, "addShaderLib", null);
        __decorate([
            wd.execOnlyOnce("_isAfterInit")
        ], Material.prototype, "_afterInitHandler", null);
        return Material;
    })();
    wd.Material = Material;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var BasicMaterial = (function (_super) {
        __extends(BasicMaterial, _super);
        function BasicMaterial() {
            _super.apply(this, arguments);
            this._opacity = 1.0;
        }
        BasicMaterial.create = function () {
            var obj = new this();
            return obj;
        };
        Object.defineProperty(BasicMaterial.prototype, "map", {
            set: function (map) {
                if (map instanceof wd.Texture || map instanceof wd.TextureAsset) {
                    this.addMap(map);
                }
                else {
                    var mapArr = (arguments[0]);
                    wdCb.Log.error(mapArr.length > 2, wdCb.Log.info.FUNC_SUPPORT("only", "map.count <= 2"));
                    for (var _i = 0; _i < mapArr.length; _i++) {
                        var m = mapArr[_i];
                        this.addMap(m);
                    }
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BasicMaterial.prototype, "mirrorMap", {
            get: function () {
                return this.mapManager.getMirrorMap();
            },
            set: function (mirrorMap) {
                this.mapManager.setMirrorMap(mirrorMap);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BasicMaterial.prototype, "opacity", {
            get: function () {
                return this._opacity;
            },
            set: function (opacity) {
                this.setBlendByOpacity(opacity);
                this._opacity = opacity;
            },
            enumerable: true,
            configurable: true
        });
        BasicMaterial.prototype.addShaderLib = function () {
            var envMap = null;
            this.shader.addLib(wd.BasicShaderLib.create());
            this._setMapShaderLib();
            envMap = this.envMap;
            if (envMap) {
                this._setEnvMapShaderLib(envMap);
            }
            this._setMirrorMapShaderLib();
            this.shader.addLib(wd.BasicEndShaderLib.create());
        };
        BasicMaterial.prototype._setMapShaderLib = function () {
            var mapManager = this.mapManager, mapCount = mapManager.getMapCount(function (map) {
                return !mapManager.isMirrorMap(map);
            });
            if (mapCount > 0) {
                if (mapCount > 1) {
                    this.shader.addLib(wd.MultiMapShaderLib.create());
                }
                else {
                    this.shader.addLib(wd.BasicMapShaderLib.create());
                }
            }
        };
        BasicMaterial.prototype._setEnvMapShaderLib = function (envMap) {
            this.addNormalShaderLib();
            switch (envMap.mode) {
                case wd.EnvMapMode.BASIC:
                    this.shader.addLib(wd.BasicEnvMapForBasicShaderLib.create());
                    break;
                case wd.EnvMapMode.REFLECTION:
                    this.shader.addLib(wd.ReflectionForBasicShaderLib.create());
                    break;
                case wd.EnvMapMode.REFRACTION:
                    this.shader.addLib(wd.RefractionForBasicShaderLib.create());
                    break;
                case wd.EnvMapMode.FRESNEL:
                    this.shader.addLib(wd.FresnelForBasicShaderLib.create());
                    break;
                default:
                    wd.Log.error(true, wd.Log.info.FUNC_INVALID("EnvMapMode"));
                    break;
            }
        };
        BasicMaterial.prototype._setMirrorMapShaderLib = function () {
            if (this.mirrorMap) {
                this.shader.addLib(wd.MirrorForBasicShaderLib.create());
            }
        };
        return BasicMaterial;
    })(wd.Material);
    wd.BasicMaterial = BasicMaterial;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var SkyboxMaterial = (function (_super) {
        __extends(SkyboxMaterial, _super);
        function SkyboxMaterial() {
            _super.apply(this, arguments);
        }
        SkyboxMaterial.create = function () {
            var obj = new this();
            obj.initWhenCreate();
            return obj;
        };
        SkyboxMaterial.prototype.initWhenCreate = function () {
            this.side = wd.Side.BACK;
        };
        SkyboxMaterial.prototype.addShaderLib = function () {
            this.shader.addLib(wd.SkyboxShaderLib.create());
        };
        return SkyboxMaterial;
    })(wd.Material);
    wd.SkyboxMaterial = SkyboxMaterial;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var LightMaterial = (function (_super) {
        __extends(LightMaterial, _super);
        function LightMaterial() {
            _super.apply(this, arguments);
            this._diffuseMap = null;
            this._specularMap = null;
            this._normalMap = null;
            this._shininess = 32;
            this._opacity = 1.0;
            this.twoDShadowMapDatas = wdCb.Collection.create();
            this.cubemapShadowMapDatas = wdCb.Collection.create();
            this.buildTwoDShadowMapData = null;
            this.buildCubemapShadowMapData = null;
            this.specular = wd.Color.create("0x111111");
            this._twoDShadowMapSamplerIndex = 0;
            this._cubemapShadowMapSamplerIndex = 0;
        }
        LightMaterial.create = function () {
            var obj = new this();
            return obj;
        };
        Object.defineProperty(LightMaterial.prototype, "diffuseMap", {
            get: function () {
                return this._diffuseMap;
            },
            set: function (diffuseMap) {
                this.addMap(diffuseMap, {
                    samplerVariableName: wd.VariableNameTable.getVariableName("diffuseMap")
                });
                this._diffuseMap = diffuseMap;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LightMaterial.prototype, "specularMap", {
            get: function () {
                return this._specularMap;
            },
            set: function (specularMap) {
                this.addMap(specularMap, {
                    samplerVariableName: wd.VariableNameTable.getVariableName("specularMap")
                });
                this._specularMap = specularMap;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LightMaterial.prototype, "normalMap", {
            get: function () {
                return this._normalMap;
            },
            set: function (normalMap) {
                this.addMap(normalMap, {
                    samplerVariableName: wd.VariableNameTable.getVariableName("normalMap")
                });
                this._normalMap = normalMap;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LightMaterial.prototype, "shininess", {
            get: function () {
                if (Number(this._shininess) <= 0) {
                    return 32;
                }
                return this._shininess;
            },
            set: function (shininess) {
                this._shininess = shininess;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LightMaterial.prototype, "opacity", {
            get: function () {
                return this._opacity;
            },
            set: function (opacity) {
                this.setBlendByOpacity(opacity);
                this._opacity = opacity;
            },
            enumerable: true,
            configurable: true
        });
        LightMaterial.prototype.addTwoDShadowMap = function (shadowMap) {
            this.addMap(shadowMap, {
                samplerData: this._twoDShadowMapSamplerIndex
            });
            this._twoDShadowMapSamplerIndex++;
        };
        LightMaterial.prototype.addCubemapShadowMap = function (shadowMap) {
            this.addMap(shadowMap, {
                samplerData: this._cubemapShadowMapSamplerIndex
            });
            this._cubemapShadowMapSamplerIndex++;
        };
        LightMaterial.prototype.hasShadowMap = function (map) {
            return this.mapManager.hasMap(map);
        };
        LightMaterial.prototype.addTwoDShadowMapData = function (shadowMapData) {
            this.twoDShadowMapDatas.addChild(shadowMapData);
        };
        LightMaterial.prototype.addCubemapShadowMapData = function (shadowMapData) {
            this.cubemapShadowMapDatas.addChild(shadowMapData);
        };
        LightMaterial.prototype.clearTwoDShadowMapData = function () {
            this.twoDShadowMapDatas.removeAllChildren();
        };
        LightMaterial.prototype.clearCubemapShadowMapData = function () {
            this.cubemapShadowMapDatas.removeAllChildren();
        };
        LightMaterial.prototype.addShaderLib = function () {
            var envMap = null;
            this.addNormalShaderLib();
            this.shader.addLib(wd.LightCommonShaderLib.create());
            this._setPhongMapShaderLib();
            this.shader.addLib(wd.LightShaderLib.create());
            envMap = this.envMap;
            if (envMap) {
                this._setEnvMapShaderLib(envMap);
            }
            this.shader.addLib(wd.LightEndShaderLib.create());
        };
        LightMaterial.prototype._setPhongMapShaderLib = function () {
            var scene = wd.Director.getInstance().scene;
            if (this._diffuseMap) {
                this.shader.addLib(wd.DiffuseMapShaderLib.create());
            }
            else {
                this.shader.addLib(wd.NoDiffuseMapShaderLib.create());
            }
            if (this._specularMap) {
                this.shader.addLib(wd.SpecularMapShaderLib.create());
            }
            else {
                this.shader.addLib(wd.NoSpecularMapShaderLib.create());
            }
            if (this._normalMap) {
                this.shader.addLib(wd.NormalMapShaderLib.create());
            }
            else {
                this.shader.addLib(wd.NoNormalMapShaderLib.create());
            }
            if (scene.shadowMap.enable && (this._hasTwoDShadowMap() || this._hasCubemapShadowMap())) {
                if (this._hasTwoDShadowMap()) {
                    this.shader.addLib(wd.TwoDShadowMapShaderLib.create());
                }
                if (this._hasCubemapShadowMap()) {
                    this.shader.addLib(wd.CubemapShadowMapShaderLib.create());
                }
                this.shader.addLib(wd.TotalShadowMapShaderLib.create());
            }
            else {
                this.shader.addLib(wd.NoShadowMapShaderLib.create());
            }
        };
        LightMaterial.prototype._setEnvMapShaderLib = function (envMap) {
            switch (envMap.mode) {
                case wd.EnvMapMode.BASIC:
                    this.shader.addLib(wd.BasicEnvMapForLightShaderLib.create());
                    break;
                case wd.EnvMapMode.REFLECTION:
                    this.shader.addLib(wd.ReflectionForLightShaderLib.create());
                    break;
                case wd.EnvMapMode.REFRACTION:
                    this.shader.addLib(wd.RefractionForLightShaderLib.create());
                    break;
                case wd.EnvMapMode.FRESNEL:
                    this.shader.addLib(wd.FresnelForLightShaderLib.create());
                    break;
                default:
                    wd.Log.error(true, wd.Log.info.FUNC_INVALID("EnvMapMode"));
                    break;
            }
        };
        LightMaterial.prototype._hasTwoDShadowMap = function () {
            return this.mapManager.hasMap(function (map) {
                return map instanceof wd.TwoDShadowMapTexture;
            });
        };
        LightMaterial.prototype._hasCubemapShadowMap = function () {
            return this.mapManager.hasMap(function (map) {
                return map instanceof wd.CubemapShadowMapTexture;
            });
        };
        return LightMaterial;
    })(wd.Material);
    wd.LightMaterial = LightMaterial;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var CustomMaterial = (function (_super) {
        __extends(CustomMaterial, _super);
        function CustomMaterial() {
            _super.apply(this, arguments);
        }
        CustomMaterial.create = function () {
            var obj = new this();
            return obj;
        };
        return CustomMaterial;
    })(wd.Material);
    wd.CustomMaterial = CustomMaterial;
})(wd || (wd = {}));
var wd;
(function (wd) {
    (function (Shading) {
        Shading[Shading["FLAT"] = 0] = "FLAT";
        Shading[Shading["SMOOTH"] = 1] = "SMOOTH";
    })(wd.Shading || (wd.Shading = {}));
    var Shading = wd.Shading;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var MapManager = (function () {
        function MapManager(material) {
            this._material = null;
            this._textures = wdCb.Hash.create();
            this._mirrorMap = null;
            this._material = material;
        }
        MapManager.create = function (material) {
            var obj = new this(material);
            return obj;
        };
        MapManager.prototype.init = function () {
            this._getMapList().forEach(function (texture) {
                texture.init();
            });
        };
        MapManager.prototype.addMap = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var map = null;
            if (args[0] instanceof wd.TextureAsset) {
                var asset = args[0];
                map = asset.toTexture();
            }
            else if (args[0] instanceof wd.Texture) {
                map = args[0];
            }
            if (args.length === 2) {
                var option = args[1];
                this._setMapOption(map, option);
            }
            map.material = this._material;
            this._textures.appendChild("map", map);
        };
        MapManager.prototype.getMap = function (index) {
            return this._textures.getChild("map").getChild(index);
        };
        MapManager.prototype.hasMap = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var maps = null;
            maps = this._textures.getChild("map");
            return maps && maps.hasChild(args[0]);
        };
        MapManager.prototype.getMapCount = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            if (args.length === 0) {
                var map = this._textures.getChild("map");
                return map ? map.getCount() : 0;
            }
            else {
                var filterFunc = args[0], map = this._textures.getChild("map");
                return map ? map.filter(filterFunc).getCount() : 0;
            }
        };
        MapManager.prototype.getEnvMap = function () {
            return this._getMap("envMap");
        };
        MapManager.prototype.setEnvMap = function (envMap) {
            this._setMap("envMap", envMap);
        };
        MapManager.prototype.getMirrorMap = function () {
            return this._mirrorMap;
        };
        MapManager.prototype.setMirrorMap = function (mirrorMap) {
            this.addMap(mirrorMap, {
                samplerVariableName: wd.VariableNameTable.getVariableName("mirrorReflectionMap")
            });
            this._mirrorMap = mirrorMap;
        };
        MapManager.prototype.isMirrorMap = function (map) {
            return map === this._mirrorMap;
        };
        MapManager.prototype.removeAllChildren = function () {
            this._textures.removeAllChildren();
        };
        MapManager.prototype.dispose = function () {
            this._getMapList().forEach(function (texture) {
                texture.dispose();
            });
            this.removeAllChildren();
        };
        MapManager.prototype.update = function () {
            this._getMapList()
                .filter(function (texture) {
                return texture instanceof wd.BasicTexture && texture.needUpdate;
            })
                .forEach(function (texture, index) {
                texture.update(index);
            });
        };
        MapManager.prototype.sendData = function (program) {
            this._getMapList().forEach(function (texture, index) {
                var samplerName = texture.getSamplerName(index), pos = program.getUniformLocation(samplerName);
                if (program.isUniformDataNotExistByLocation(pos)) {
                    return;
                }
                texture.bindToUnit(index);
                texture.sendData(program, pos, index);
            });
        };
        MapManager.prototype._getMapList = function () {
            return this._textures.toCollection();
        };
        MapManager.prototype._getMap = function (key) {
            return this._textures.getChild(key);
        };
        MapManager.prototype._setMap = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var key = args[0], map = args[1];
            if (!map) {
                this._removeMap(key, map);
                return;
            }
            if (arguments.length === 3) {
                var option = args[1];
                this._setMapOption(map, option);
            }
            map.material = this._material;
            this._textures.addChild(key, map);
        };
        MapManager.prototype._removeMap = function (key, map) {
            this._textures.removeChild(key);
        };
        MapManager.prototype._setMapOption = function (map, option) {
            map.variableData = option;
        };
        return MapManager;
    })();
    wd.MapManager = MapManager;
})(wd || (wd = {}));
var wd;
(function (wd) {
    (function (AssetType) {
        AssetType[AssetType["UNKNOW"] = 0] = "UNKNOW";
        AssetType[AssetType["FONT"] = 1] = "FONT";
    })(wd.AssetType || (wd.AssetType = {}));
    var AssetType = wd.AssetType;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var Loader = (function () {
        function Loader() {
            this._container = wdCb.Hash.create();
        }
        Loader.prototype.load = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var url = args[0], id = null, self = this, data = null, stream = null;
            if (args.length === 1) {
                if (wd.JudgeUtils.isArray(url)) {
                    id = url.join("-");
                }
                else {
                    id = url;
                }
            }
            else {
                id = args[1];
            }
            data = this._container.getChild(id);
            if (data) {
                stream = wdFrp.just(data);
            }
            else {
                stream = this.loadAsset(url, id)
                    .do(function (data) {
                    self._container.addChild(id, data);
                }, function (err) {
                    self._errorHandle(url, err);
                }, null);
            }
            return stream;
        };
        Loader.prototype.get = function (id) {
            return this._container.getChild(id);
        };
        Loader.prototype.has = function (id) {
            return this._container.hasChild(id);
        };
        Loader.prototype.dispose = function () {
            this._container.removeAllChildren();
        };
        Loader.prototype._errorHandle = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var path = null, err = null;
            if (wd.JudgeUtils.isArray(args[0])) {
                path = args[0].join(",");
            }
            else {
                path = args[0];
            }
            err = args[1];
            wd.Log.log("load " + path + " asset fail:" + err);
        };
        return Loader;
    })();
    wd.Loader = Loader;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var GLSLLoader = (function (_super) {
        __extends(GLSLLoader, _super);
        function GLSLLoader() {
            _super.apply(this, arguments);
        }
        GLSLLoader.getInstance = function () {
            if (this._instance === null) {
                this._instance = new this();
            }
            return this._instance;
        };
        GLSLLoader.prototype.loadAsset = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var url = args[0];
            return wd.AjaxLoader.load(url, "text");
        };
        GLSLLoader._instance = null;
        __decorate([
            wd.require(function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i - 0] = arguments[_i];
                }
                wd.assert(!wd.JudgeUtils.isArray(args[0]), wd.Log.info.FUNC_MUST_BE("url", "string"));
            })
        ], GLSLLoader.prototype, "loadAsset", null);
        return GLSLLoader;
    })(wd.Loader);
    wd.GLSLLoader = GLSLLoader;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var JsLoader = (function (_super) {
        __extends(JsLoader, _super);
        function JsLoader() {
            _super.apply(this, arguments);
        }
        JsLoader.getInstance = function () {
            if (this._instance === null) {
                this._instance = new this();
            }
            return this._instance;
        };
        JsLoader.prototype.loadAsset = function () {
            var _this = this;
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var self = this, url = args[0];
            return wdFrp.fromPromise(new RSVP.Promise(function (resolve, reject) {
                var script = self._createScript();
                script.async = false;
                script.addEventListener("error", function (e) {
                    reject("load js file error. url:" + url);
                });
                if (script.readyState) {
                    script.onreadystatechange = function () {
                        if (script.readyState === "loaded" || script.readyState === "complete") {
                            script.onreadystatechange = null;
                            resolve(url);
                        }
                    };
                }
                else {
                    script.onload = function () {
                        resolve(url);
                    };
                }
                script.src = url;
                _this._appendScript(script);
            }));
        };
        JsLoader.prototype._createScript = function () {
            var script = document.createElement("script");
            script.type = "text/javascript";
            return script;
        };
        JsLoader.prototype._appendScript = function (script) {
            document.getElementsByTagName("head")[0].appendChild(script);
        };
        JsLoader._instance = null;
        __decorate([
            wd.require(function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i - 0] = arguments[_i];
                }
                wd.assert(!wd.JudgeUtils.isArray(args[0]), wd.Log.info.FUNC_MUST_BE("url", "string"));
            })
        ], JsLoader.prototype, "loadAsset", null);
        return JsLoader;
    })(wd.Loader);
    wd.JsLoader = JsLoader;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var VideoLoader = (function (_super) {
        __extends(VideoLoader, _super);
        function VideoLoader() {
            _super.apply(this, arguments);
        }
        VideoLoader.getInstance = function () {
            if (this._instance === null) {
                this._instance = new this();
            }
            return this._instance;
        };
        VideoLoader.prototype.loadAsset = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var urlArr = null;
            if (wd.JudgeUtils.isString(args[0])) {
                urlArr = [args[0]];
            }
            else {
                urlArr = args[0];
            }
            return wdFrp.fromPromise(new RSVP.Promise(function (resolve, reject) {
                wd.Video.create({
                    urlArr: urlArr,
                    onLoad: function (video) {
                        resolve(wd.VideoTextureAsset.create(video));
                    },
                    onError: function (err) {
                        reject(err);
                    }
                });
            }));
        };
        VideoLoader._instance = null;
        return VideoLoader;
    })(wd.Loader);
    wd.VideoLoader = VideoLoader;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var TextureLoader = (function (_super) {
        __extends(TextureLoader, _super);
        function TextureLoader() {
            _super.apply(this, arguments);
        }
        TextureLoader.getInstance = function () {
            if (this._instance === null) {
                this._instance = new this();
            }
            return this._instance;
        };
        TextureLoader.prototype.loadAsset = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var extname = null, stream = null, url = args[0];
            extname = wdCb.PathUtils.extname(url).toLowerCase();
            switch (extname) {
                case ".jpg":
                case ".jpeg":
                case ".gif":
                case ".bmp":
                    stream = wd.ImageLoader.load(url)
                        .map(function (image) {
                        var asset = wd.ImageTextureAsset.create(image);
                        asset.format = wd.TextureFormat.RGB;
                        return asset;
                    });
                    break;
                case ".png":
                    stream = wd.ImageLoader.load(url)
                        .map(function (image) {
                        return wd.ImageTextureAsset.create(image);
                    });
                    break;
                case ".dds":
                    stream = wd.CompressedTextureLoader.load(url);
                    break;
                default:
                    wd.Log.error(true, wd.Log.info.FUNC_NOT_SUPPORT(extname));
                    break;
            }
            return stream;
        };
        TextureLoader._instance = null;
        __decorate([
            wd.require(function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i - 0] = arguments[_i];
                }
                wd.assert(!wd.JudgeUtils.isArray(args[0]), wd.Log.info.FUNC_MUST_BE("url", "string"));
            })
        ], TextureLoader.prototype, "loadAsset", null);
        return TextureLoader;
    })(wd.Loader);
    wd.TextureLoader = TextureLoader;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var ImageLoader = (function () {
        function ImageLoader() {
        }
        ImageLoader.load = function (url) {
            return wdFrp.fromPromise(new RSVP.Promise(function (resolve, reject) {
                var img = null;
                img = new wd.root.Image();
                img.onload = function () {
                    this.onload = null;
                    resolve(img);
                };
                img.onerror = function () {
                    reject("error");
                };
                img.src = url;
            }));
        };
        return ImageLoader;
    })();
    wd.ImageLoader = ImageLoader;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var AjaxLoader = (function () {
        function AjaxLoader() {
        }
        AjaxLoader.load = function (url, dataType) {
            return wdFrp.fromPromise(new RSVP.Promise(function (resolve, reject) {
                wdCb.AjaxUtils.ajax({
                    type: "get",
                    url: url,
                    contentType: "text/plain; charset=utf-8",
                    dataType: dataType,
                    success: function (data) {
                        resolve(data);
                    },
                    error: function (XMLHttpRequest, errorThrown) {
                        reject("url:" + url + "\nreadyState:" + XMLHttpRequest.readyState + "\nstatus:" + XMLHttpRequest.status + "\nmessage:" + errorThrown.message + "\nresponseText:" + XMLHttpRequest.responseText);
                    }
                });
            }));
        };
        return AjaxLoader;
    })();
    wd.AjaxLoader = AjaxLoader;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var ModelLoaderUtils = (function () {
        function ModelLoaderUtils() {
        }
        ModelLoaderUtils.getPath = function (filePath, mapUrl) {
            return wdCb.PathUtils.dirname(filePath) + "/" + mapUrl;
        };
        return ModelLoaderUtils;
    })();
    wd.ModelLoaderUtils = ModelLoaderUtils;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var CompressedTextureLoader = (function () {
        function CompressedTextureLoader() {
        }
        CompressedTextureLoader.load = function (url) {
            var _this = this;
            return wd.AjaxLoader.load(url, "arraybuffer")
                .map(function (data) {
                var texDatas = wd.DDSParser.parse(data, true), asset = wd.CompressedTextureAsset.create();
                asset.width = texDatas.width;
                asset.height = texDatas.height;
                asset.mipmaps = texDatas.mipmaps;
                if (texDatas.mipmapCount == 1) {
                    asset.minFilter = wd.TextureFilterMode.LINEAR;
                }
                asset.format = _this._getCompressedFormat(texDatas.format);
                return asset;
            });
        };
        CompressedTextureLoader._getCompressedFormat = function (format) {
            var extension = wd.GPUDetector.getInstance().extensionCompressedTextureS3TC;
            if (format === wd.TextureFormat.RGBA) {
                return format;
            }
            if (!extension) {
                return null;
            }
            switch (format) {
                case wd.TextureFormat.RGB_S3TC_DXT1:
                    format = extension.COMPRESSED_RGB_S3TC_DXT1_EXT;
                    break;
                case wd.TextureFormat.RGBA_S3TC_DXT1:
                    format = extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;
                    break;
                case wd.TextureFormat.RGBA_S3TC_DXT3:
                    format = extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;
                    break;
                case wd.TextureFormat.RGBA_S3TC_DXT5:
                    format = extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;
                    break;
            }
            return format;
        };
        return CompressedTextureLoader;
    })();
    wd.CompressedTextureLoader = CompressedTextureLoader;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var DDS_MAGIC = 0x20534444, DDSD_CAPS = 0x1, DDSD_HEIGHT = 0x2, DDSD_WIDTH = 0x4, DDSD_PITCH = 0x8, DDSD_PIXELFORMAT = 0x1000, DDSD_MIPMAPCOUNT = 0x20000, DDSD_LINEARSIZE = 0x80000, DDSD_DEPTH = 0x800000, DDSCAPS_COMPLEX = 0x8, DDSCAPS_MIPMAP = 0x400000, DDSCAPS_TEXTURE = 0x1000, DDSCAPS2_CUBEMAP = 0x200, DDSCAPS2_CUBEMAP_POSITIVEX = 0x400, DDSCAPS2_CUBEMAP_NEGATIVEX = 0x800, DDSCAPS2_CUBEMAP_POSITIVEY = 0x1000, DDSCAPS2_CUBEMAP_NEGATIVEY = 0x2000, DDSCAPS2_CUBEMAP_POSITIVEZ = 0x4000, DDSCAPS2_CUBEMAP_NEGATIVEZ = 0x8000, DDSCAPS2_VOLUME = 0x200000, DDPF_ALPHAPIXELS = 0x1, DDPF_ALPHA = 0x2, DDPF_FOURCC = 0x4, DDPF_RGB = 0x40, DDPF_YUV = 0x200, DDPF_LUMINANCE = 0x20000;
    var DDSParser = (function () {
        function DDSParser() {
        }
        DDSParser.parse = function (buffer, loadMipmaps) {
            if (loadMipmaps === void 0) { loadMipmaps = true; }
            var dds = new DDSData(), FOURCC_DXT1 = this._fourCCToInt32("DXT1"), FOURCC_DXT3 = this._fourCCToInt32("DXT3"), FOURCC_DXT5 = this._fourCCToInt32("DXT5"), headerLengthInt = 31, off_magic = 0, off_size = 1, off_flags = 2, off_height = 3, off_width = 4, off_mipmapCount = 7, off_pfFlags = 20, off_pfFourCC = 21, off_RGBBitCount = 22, off_RBitMask = 23, off_GBitMask = 24, off_BBitMask = 25, off_ABitMask = 26, off_caps = 27, off_caps2 = 28, off_caps3 = 29, off_caps4 = 30, header = new Int32Array(buffer, 0, headerLengthInt), blockBytes = null, fourCC = null, isRGBAUncompressed = null, dataOffset = null, width = null, height = null, faces = null;
            if (header[off_magic] !== DDS_MAGIC) {
                wd.Log.error(true, "Invalid magic number in DDS header.");
                return dds;
            }
            if ((!header[off_pfFlags]) & DDPF_FOURCC) {
                wd.Log.error(true, "Unsupported format, must contain a FourCC code.");
                return dds;
            }
            fourCC = header[off_pfFourCC];
            isRGBAUncompressed = false;
            switch (fourCC) {
                case FOURCC_DXT1:
                    blockBytes = 8;
                    dds.format = wd.TextureFormat.RGB_S3TC_DXT1;
                    break;
                case FOURCC_DXT3:
                    blockBytes = 16;
                    dds.format = wd.TextureFormat.RGBA_S3TC_DXT3;
                    break;
                case FOURCC_DXT5:
                    blockBytes = 16;
                    dds.format = wd.TextureFormat.RGBA_S3TC_DXT5;
                    break;
                default:
                    if (header[off_RGBBitCount] == 32
                        && header[off_RBitMask] & 0xff0000
                        && header[off_GBitMask] & 0xff00
                        && header[off_BBitMask] & 0xff
                        && header[off_ABitMask] & 0xff000000) {
                        isRGBAUncompressed = true;
                        blockBytes = 64;
                        dds.format = wd.TextureFormat.RGBA;
                    }
                    else {
                        wd.Log.error(true, "Unsupported FourCC code " + this._int32ToFourCC(fourCC));
                        return dds;
                    }
            }
            dds.mipmapCount = 1;
            if (header[off_flags] & DDSD_MIPMAPCOUNT && loadMipmaps !== false) {
                dds.mipmapCount = Math.max(1, header[off_mipmapCount]);
            }
            dds.isCubemap = header[off_caps2] & DDSCAPS2_CUBEMAP ? true : false;
            dds.width = header[off_width];
            dds.height = header[off_height];
            dataOffset = header[off_size] + 4;
            width = dds.width;
            height = dds.height;
            faces = dds.isCubemap ? 6 : 1;
            for (var face = 0; face < faces; face++) {
                for (var i = 0; i < dds.mipmapCount; i++) {
                    var mipmap = null, byteArray = null, dataLength = null;
                    if (isRGBAUncompressed) {
                        byteArray = this._loadARGBMip(buffer, dataOffset, width, height);
                        dataLength = byteArray.length;
                    }
                    else {
                        dataLength = Math.max(4, width) / 4 * Math.max(4, height) / 4 * blockBytes;
                        byteArray = new Uint8Array(buffer, dataOffset, dataLength);
                    }
                    mipmap = { "data": byteArray, "width": width, "height": height };
                    dds.mipmaps.addChild(mipmap);
                    dataOffset += dataLength;
                    width = Math.max(width * 0.5, 1);
                    height = Math.max(height * 0.5, 1);
                }
                width = dds.width;
                height = dds.height;
            }
            return dds;
        };
        DDSParser._fourCCToInt32 = function (value) {
            return value.charCodeAt(0) +
                (value.charCodeAt(1) << 8) +
                (value.charCodeAt(2) << 16) +
                (value.charCodeAt(3) << 24);
        };
        DDSParser._int32ToFourCC = function (value) {
            return String.fromCharCode(value & 0xff, (value >> 8) & 0xff, (value >> 16) & 0xff, (value >> 24) & 0xff);
        };
        DDSParser._loadARGBMip = function (buffer, dataOffset, width, height) {
            var dataLength = width * height * 4, srcBuffer = new Uint8Array(buffer, dataOffset, dataLength), byteArray = new Uint8Array(dataLength), dst = 0, src = 0;
            for (var y = 0; y < height; y++) {
                for (var x = 0; x < width; x++) {
                    var b = null, g = null, r = null, a = null;
                    b = srcBuffer[src];
                    src++;
                    g = srcBuffer[src];
                    src++;
                    r = srcBuffer[src];
                    src++;
                    a = srcBuffer[src];
                    src++;
                    byteArray[dst] = r;
                    dst++;
                    byteArray[dst] = g;
                    dst++;
                    byteArray[dst] = b;
                    dst++;
                    byteArray[dst] = a;
                    dst++;
                }
            }
            return byteArray;
        };
        return DDSParser;
    })();
    wd.DDSParser = DDSParser;
    var DDSData = (function () {
        function DDSData() {
            this.mipmaps = wdCb.Collection.create();
            this.width = 0;
            this.height = 0;
            this.format = null;
            this.mipmapCount = 1;
            this.isCubemap = false;
        }
        return DDSData;
    })();
    wd.DDSData = DDSData;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var TextureAsset = (function () {
        function TextureAsset() {
            this._width = null;
            this._height = null;
            this.generateMipmaps = true;
            this.sourceRegionMethod = wd.TextureSourceRegionMethod.CHANGE_TEXCOORDS_IN_GLSL;
            this.format = wd.TextureFormat.RGBA;
            this.source = TextureAsset.defaultTexture;
            this.repeatRegion = wd.RectRegion.create(0, 0, 1, 1);
            this.sourceRegion = null;
            this.sourceRegionMapping = wd.TextureSourceRegionMapping.CANVAS;
            this.flipY = true;
            this.premultiplyAlpha = false;
            this.unpackAlignment = 4;
            this.wrapS = wd.TextureWrapMode.CLAMP_TO_EDGE;
            this.wrapT = wd.TextureWrapMode.CLAMP_TO_EDGE;
            this.magFilter = wd.TextureFilterMode.LINEAR;
            this.minFilter = wd.TextureFilterMode.LINEAR_MIPMAP_LINEAR;
            this.type = wd.TextureType.UNSIGNED_BYTE;
            this.mipmaps = wdCb.Collection.create();
            this.anisotropy = 0;
            this.needUpdate = true;
        }
        Object.defineProperty(TextureAsset.prototype, "width", {
            get: function () {
                return this._width === null ? (this.source ? this.source.width : null) : this._width;
            },
            set: function (width) {
                this._width = width;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextureAsset.prototype, "height", {
            get: function () {
                return this._height === null ? (this.source ? this.source.height : null) : this._height;
            },
            set: function (height) {
                this._height = height;
            },
            enumerable: true,
            configurable: true
        });
        TextureAsset.prototype.copyToCubemapTexture = function (cubemapFaceTexture) {
            cubemapFaceTexture.generateMipmaps = this.generateMipmaps;
            cubemapFaceTexture.minFilter = this.minFilter;
            cubemapFaceTexture.magFilter = this.magFilter;
            cubemapFaceTexture.width = this.width;
            cubemapFaceTexture.height = this.height;
            cubemapFaceTexture.wrapS = this.wrapS;
            cubemapFaceTexture.wrapT = this.wrapT;
            cubemapFaceTexture.anisotropy = this.anisotropy;
            cubemapFaceTexture.premultiplyAlpha = this.premultiplyAlpha;
            cubemapFaceTexture.unpackAlignment = this.unpackAlignment;
            cubemapFaceTexture.needUpdate = this.needUpdate;
            cubemapFaceTexture.mode = wd.EnvMapMode.BASIC;
        };
        TextureAsset.prototype.copyTo = function (texture) {
            wd.Log.error(!texture, wd.Log.info.FUNC_MUST_DEFINE("texture"));
            texture.source = this.source;
            texture.width = this.width;
            texture.height = this.height;
            texture.mipmaps = this.mipmaps.copy();
            texture.wrapS = this.wrapS;
            texture.wrapT = this.wrapT;
            texture.magFilter = this.magFilter;
            texture.minFilter = this.minFilter;
            texture.anisotropy = this.anisotropy;
            texture.format = this.format;
            texture.type = this.type;
            texture.repeatRegion = this.repeatRegion.copy();
            texture.sourceRegion = this.sourceRegion && this.sourceRegion.copy();
            texture.sourceRegionMapping = this.sourceRegionMapping;
            texture.sourceRegionMethod = this.sourceRegionMethod;
            texture.generateMipmaps = this.generateMipmaps;
            texture.premultiplyAlpha = this.premultiplyAlpha;
            texture.flipY = this.flipY;
            texture.unpackAlignment = this.unpackAlignment;
            texture.needUpdate = this.needUpdate;
            return texture;
        };
        TextureAsset.defaultTexture = null;
        return TextureAsset;
    })();
    wd.TextureAsset = TextureAsset;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var ImageTextureAsset = (function (_super) {
        __extends(ImageTextureAsset, _super);
        function ImageTextureAsset(source) {
            _super.call(this);
            this.source = source;
        }
        ImageTextureAsset.create = function (source) {
            var obj = new this(source);
            return obj;
        };
        ImageTextureAsset.prototype.toTexture = function () {
            return wd.ImageTexture.create(this);
        };
        ImageTextureAsset.prototype.toCubemapFaceTexture = function () {
            return wd.CubemapFaceImageTexture.create(this);
        };
        ImageTextureAsset.prototype.copyToCubemapFaceTexture = function (cubemapFaceTexture) {
            cubemapFaceTexture.source = this.source;
            cubemapFaceTexture.type = this.type;
            cubemapFaceTexture.format = this.format;
            cubemapFaceTexture.width = this.width;
            cubemapFaceTexture.height = this.height;
            cubemapFaceTexture.sourceRegion = this.sourceRegion;
            cubemapFaceTexture.sourceRegionMethod = wd.TextureSourceRegionMethod.DRAW_IN_CANVAS;
        };
        return ImageTextureAsset;
    })(wd.TextureAsset);
    wd.ImageTextureAsset = ImageTextureAsset;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var VideoTextureAsset = (function (_super) {
        __extends(VideoTextureAsset, _super);
        function VideoTextureAsset(video) {
            _super.call(this);
            this.video = null;
            this.video = video;
            this.source = this.video.source;
        }
        VideoTextureAsset.create = function (video) {
            var obj = new this(video);
            obj.initWhenCreate();
            return obj;
        };
        VideoTextureAsset.prototype.initWhenCreate = function () {
            this.width = 0;
            this.height = 0;
            this.generateMipmaps = false;
            this.minFilter = null;
            this.magFilter = null;
            this.sourceRegion = null;
            this.sourceRegionMethod = null;
        };
        VideoTextureAsset.prototype.toTexture = function () {
            return wd.VideoTexture.create(this);
        };
        VideoTextureAsset.prototype.toCubemapFaceTexture = function () {
            return wd.Log.error(true, wd.Log.info.FUNC_NOT_SUPPORT("video texture", "cubemap"));
        };
        VideoTextureAsset.prototype.copyToCubemapFaceTexture = function (cubemapFaceTexture) {
            wd.Log.error(true, wd.Log.info.FUNC_NOT_SUPPORT("video texture", "cubemap"));
        };
        return VideoTextureAsset;
    })(wd.TextureAsset);
    wd.VideoTextureAsset = VideoTextureAsset;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var CompressedTextureAsset = (function (_super) {
        __extends(CompressedTextureAsset, _super);
        function CompressedTextureAsset() {
            _super.apply(this, arguments);
        }
        CompressedTextureAsset.create = function () {
            var obj = new this();
            obj.initWhenCreate();
            return obj;
        };
        CompressedTextureAsset.prototype.initWhenCreate = function () {
            this.generateMipmaps = false;
            this.flipY = false;
        };
        CompressedTextureAsset.prototype.toTexture = function () {
            return wd.CompressedTexture.create(this);
        };
        CompressedTextureAsset.prototype.toCubemapFaceTexture = function () {
            return wd.CubemapFaceCompressedTexture.create(this);
        };
        CompressedTextureAsset.prototype.copyToCubemapFaceTexture = function (cubemapFaceTexture) {
            cubemapFaceTexture.type = this.type;
            cubemapFaceTexture.format = this.format;
            cubemapFaceTexture.width = this.width;
            cubemapFaceTexture.height = this.height;
            cubemapFaceTexture.mipmaps = this.mipmaps;
            cubemapFaceTexture.minFilter = this.minFilter;
        };
        return CompressedTextureAsset;
    })(wd.TextureAsset);
    wd.CompressedTextureAsset = CompressedTextureAsset;
})(wd || (wd = {}));
var wd;
(function (wd) {
    (function (TextureFilterMode) {
        TextureFilterMode[TextureFilterMode["NEAREST"] = "NEAREST"] = "NEAREST";
        TextureFilterMode[TextureFilterMode["NEAREST_MIPMAP_MEAREST"] = "NEAREST_MIPMAP_MEAREST"] = "NEAREST_MIPMAP_MEAREST";
        TextureFilterMode[TextureFilterMode["NEAREST_MIPMAP_LINEAR"] = "NEAREST_MIPMAP_LINEAR"] = "NEAREST_MIPMAP_LINEAR";
        TextureFilterMode[TextureFilterMode["LINEAR"] = "LINEAR"] = "LINEAR";
        TextureFilterMode[TextureFilterMode["LINEAR_MIPMAP_NEAREST"] = "LINEAR_MIPMAP_NEAREST"] = "LINEAR_MIPMAP_NEAREST";
        TextureFilterMode[TextureFilterMode["LINEAR_MIPMAP_LINEAR"] = "LINEAR_MIPMAP_LINEAR"] = "LINEAR_MIPMAP_LINEAR";
    })(wd.TextureFilterMode || (wd.TextureFilterMode = {}));
    var TextureFilterMode = wd.TextureFilterMode;
})(wd || (wd = {}));
var wd;
(function (wd) {
    (function (TextureWrapMode) {
        TextureWrapMode[TextureWrapMode["REPEAT"] = "REPEAT"] = "REPEAT";
        TextureWrapMode[TextureWrapMode["MIRRORED_REPEAT"] = "MIRRORED_REPEAT"] = "MIRRORED_REPEAT";
        TextureWrapMode[TextureWrapMode["CLAMP_TO_EDGE"] = "CLAMP_TO_EDGE"] = "CLAMP_TO_EDGE";
    })(wd.TextureWrapMode || (wd.TextureWrapMode = {}));
    var TextureWrapMode = wd.TextureWrapMode;
})(wd || (wd = {}));
var wd;
(function (wd) {
    (function (TextureFormat) {
        TextureFormat[TextureFormat["RGB"] = "RGB"] = "RGB";
        TextureFormat[TextureFormat["RGBA"] = "RGBA"] = "RGBA";
        TextureFormat[TextureFormat["ALPHA"] = "ALPHA"] = "ALPHA";
        TextureFormat[TextureFormat["LUMINANCE"] = "LUMINANCE"] = "LUMINANCE";
        TextureFormat[TextureFormat["LUMINANCE_ALPHA"] = "LUMINANCE_ALPHA"] = "LUMINANCE_ALPHA";
        TextureFormat[TextureFormat["RGB_S3TC_DXT1"] = "RGB_S3TC_DXT1"] = "RGB_S3TC_DXT1";
        TextureFormat[TextureFormat["RGBA_S3TC_DXT1"] = "RGBA_S3TC_DXT1"] = "RGBA_S3TC_DXT1";
        TextureFormat[TextureFormat["RGBA_S3TC_DXT3"] = "RGBA_S3TC_DXT3"] = "RGBA_S3TC_DXT3";
        TextureFormat[TextureFormat["RGBA_S3TC_DXT5"] = "RGBA_S3TC_DXT5"] = "RGBA_S3TC_DXT5";
    })(wd.TextureFormat || (wd.TextureFormat = {}));
    var TextureFormat = wd.TextureFormat;
})(wd || (wd = {}));
var wd;
(function (wd) {
    (function (TextureType) {
        TextureType[TextureType["UNSIGNED_BYTE"] = "UNSIGNED_BYTE"] = "UNSIGNED_BYTE";
        TextureType[TextureType["UNSIGNED_SHORT_5_6_5"] = "UNSIGNED_SHORT_5_6_5"] = "UNSIGNED_SHORT_5_6_5";
        TextureType[TextureType["UNSIGNED_SHORT_4_4_4_4"] = "UNSIGNED_SHORT_4_4_4_4"] = "UNSIGNED_SHORT_4_4_4_4";
        TextureType[TextureType["UNSIGNED_SHORT_5_5_5_1"] = "UNSIGNED_SHORT_5_5_5_1"] = "UNSIGNED_SHORT_5_5_5_1";
    })(wd.TextureType || (wd.TextureType = {}));
    var TextureType = wd.TextureType;
})(wd || (wd = {}));
var wd;
(function (wd) {
    (function (EnvMapMode) {
        EnvMapMode[EnvMapMode["BASIC"] = 0] = "BASIC";
        EnvMapMode[EnvMapMode["REFLECTION"] = 1] = "REFLECTION";
        EnvMapMode[EnvMapMode["REFRACTION"] = 2] = "REFRACTION";
        EnvMapMode[EnvMapMode["FRESNEL"] = 3] = "FRESNEL";
    })(wd.EnvMapMode || (wd.EnvMapMode = {}));
    var EnvMapMode = wd.EnvMapMode;
})(wd || (wd = {}));
var wd;
(function (wd) {
    (function (TextureCombineMode) {
        TextureCombineMode[TextureCombineMode["MIX"] = 0] = "MIX";
        TextureCombineMode[TextureCombineMode["MULTIPLY"] = 1] = "MULTIPLY";
        TextureCombineMode[TextureCombineMode["ADD"] = 2] = "ADD";
    })(wd.TextureCombineMode || (wd.TextureCombineMode = {}));
    var TextureCombineMode = wd.TextureCombineMode;
})(wd || (wd = {}));
var wd;
(function (wd) {
    (function (TextureSourceRegionMapping) {
        TextureSourceRegionMapping[TextureSourceRegionMapping["CANVAS"] = 0] = "CANVAS";
        TextureSourceRegionMapping[TextureSourceRegionMapping["UV"] = 1] = "UV";
    })(wd.TextureSourceRegionMapping || (wd.TextureSourceRegionMapping = {}));
    var TextureSourceRegionMapping = wd.TextureSourceRegionMapping;
})(wd || (wd = {}));
var wd;
(function (wd) {
    (function (TextureSourceRegionMethod) {
        TextureSourceRegionMethod[TextureSourceRegionMethod["CHANGE_TEXCOORDS_IN_GLSL"] = 0] = "CHANGE_TEXCOORDS_IN_GLSL";
        TextureSourceRegionMethod[TextureSourceRegionMethod["DRAW_IN_CANVAS"] = 1] = "DRAW_IN_CANVAS";
    })(wd.TextureSourceRegionMethod || (wd.TextureSourceRegionMethod = {}));
    var TextureSourceRegionMethod = wd.TextureSourceRegionMethod;
})(wd || (wd = {}));
var wd;
(function (wd) {
    (function (TextureTarget) {
        TextureTarget[TextureTarget["TEXTURE_2D"] = "TEXTURE_2D"] = "TEXTURE_2D";
        TextureTarget[TextureTarget["TEXTURE_CUBE_MAP"] = "TEXTURE_CUBE_MAP"] = "TEXTURE_CUBE_MAP";
    })(wd.TextureTarget || (wd.TextureTarget = {}));
    var TextureTarget = wd.TextureTarget;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var LoaderManager = (function () {
        function LoaderManager() {
            this.assetCount = 0;
            this.currentLoadedCount = 0;
            this._assetTable = wdCb.Hash.create();
        }
        LoaderManager.getInstance = function () {
            if (this._instance === null) {
                this._instance = new this();
            }
            return this._instance;
        };
        LoaderManager.prototype.load = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var self = this;
            if (wd.JudgeUtils.isString(args[0])) {
                var url = args[0], id = url;
                return this._createLoadSingleAssetStream(url, id);
            }
            else {
                var assetArr = args[0];
                return wdFrp.fromArray(assetArr).flatMap(function (asset) {
                    return self._createLoadMultiAssetStream(asset.type || wd.AssetType.UNKNOW, asset.url, asset.id);
                });
            }
        };
        LoaderManager.prototype.reset = function () {
            this.assetCount = 0;
            this.currentLoadedCount = 0;
        };
        LoaderManager.prototype.dispose = function () {
            this.reset();
            wd.LoaderFactory.createAllLoader().forEach(function (loader) {
                loader.dispose();
            });
        };
        LoaderManager.prototype.get = function (id) {
            var loader = this._assetTable.getChild(id);
            return loader ? loader.get(id) : null;
        };
        LoaderManager.prototype._createLoadMultiAssetStream = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var type = args[0], url = args[1], id = args[2], loader = this._getLoader(type, url), stream = null, self = this;
            if (!loader.has(id)) {
                self.assetCount++;
            }
            return this._addToAssetTable(loader.load(url, id)
                .map(function (data) {
                self.currentLoadedCount++;
                return {
                    currentLoadedCount: self.currentLoadedCount,
                    assetCount: self.assetCount
                };
            }), id, loader);
        };
        LoaderManager.prototype._createLoadSingleAssetStream = function (url, id) {
            var loader = this._getLoader(wd.AssetType.UNKNOW, url);
            return this._addToAssetTable(loader.load(url, id), id, loader);
        };
        LoaderManager.prototype._getLoader = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var type = args[0], extname = null;
            if (wd.JudgeUtils.isArray(args[1])) {
                extname = wdCb.PathUtils.extname(args[1][0]);
            }
            else {
                extname = wdCb.PathUtils.extname(args[1]);
            }
            return wd.LoaderFactory.create(type, extname.toLowerCase());
        };
        LoaderManager.prototype._addToAssetTable = function (loadStream, id, loader) {
            var self = this;
            return loadStream.do(null, null, function () {
                self._assetTable.addChild(id, loader);
            });
        };
        LoaderManager._instance = null;
        return LoaderManager;
    })();
    wd.LoaderManager = LoaderManager;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var LoaderFactory = (function () {
        function LoaderFactory() {
        }
        LoaderFactory.create = function (type, extname) {
            var loader = null;
            switch (type) {
                case wd.AssetType.FONT:
                    loader = wd.FontLoader.getInstance();
                    break;
                case wd.AssetType.UNKNOW:
                    loader = this._getLoaderByExtname(extname);
                    break;
                default:
                    wdCb.Log.error(true, wdCb.Log.info.FUNC_UNKNOW("asset type:" + type));
                    break;
            }
            return loader;
        };
        LoaderFactory.createAllLoader = function () {
            return wdCb.Collection.create([wd.JsLoader.getInstance(), wd.GLSLLoader.getInstance(), wd.TextureLoader.getInstance(), wd.VideoLoader.getInstance(), wd.FontLoader.getInstance(), wd.FntLoader.getInstance()]);
        };
        LoaderFactory._getLoaderByExtname = function (extname) {
            var loader = null;
            switch (extname) {
                case ".js":
                    loader = wd.JsLoader.getInstance();
                    break;
                case ".glsl":
                    loader = wd.GLSLLoader.getInstance();
                    break;
                case ".jpg":
                case ".jpeg":
                case ".png":
                case ".dds":
                case ".gif":
                case ".bmp":
                    loader = wd.TextureLoader.getInstance();
                    break;
                case ".mp4":
                case ".ogv":
                case ".webm":
                    loader = wd.VideoLoader.getInstance();
                    break;
                case ".wd":
                    loader = wd.WDLoader.getInstance();
                    break;
                case ".eot":
                case ".ttf":
                case ".woff":
                case ".svg":
                    loader = wd.FontLoader.getInstance();
                    break;
                case ".fnt":
                    loader = wd.FntLoader.getInstance();
                    break;
                default:
                    wd.Log.error(true, wd.Log.info.FUNC_UNKNOW("extname:" + extname));
                    break;
            }
            return loader;
        };
        return LoaderFactory;
    })();
    wd.LoaderFactory = LoaderFactory;
})(wd || (wd = {}));
var wd;
(function (wd) {
    (function (WDTag) {
        WDTag[WDTag["CONTAINER"] = "CONTAINER"] = "CONTAINER";
    })(wd.WDTag || (wd.WDTag = {}));
    var WDTag = wd.WDTag;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var WDLoader = (function (_super) {
        __extends(WDLoader, _super);
        function WDLoader() {
            _super.apply(this, arguments);
            this._wdParser = wd.WDParser.create();
            this._wdBuilder = wd.WDBuilder.create();
            this._parseData = null;
        }
        WDLoader.getInstance = function () {
            if (this._instance === null) {
                this._instance = new this();
            }
            return this._instance;
        };
        WDLoader.prototype.loadAsset = function () {
            var _this = this;
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var url = args[0], self = this;
            return wd.AjaxLoader.load(url, "json")
                .flatMap(function (json) {
                self._parseData = self._wdParser.parse(json);
                return _this._createLoadMapStream(url);
            })
                .concat(wdFrp.callFunc(function () {
                return self._wdBuilder.build(self._parseData);
            }));
        };
        WDLoader.prototype._createLoadMapStream = function (filePath) {
            var streamArr = [], parseData = this._parseData, i = null;
            parseData.materials.forEach(function (material) {
                var mapUrlArr = [];
                if (material.diffuseMapUrl) {
                    mapUrlArr.push(["diffuseMap", material.diffuseMapUrl]);
                }
                if (material.specularMapUrl) {
                    mapUrlArr.push(["specularMap", material.specularMapUrl]);
                }
                if (material.normalMapUrl) {
                    mapUrlArr.push(["normalMap", material.normalMapUrl]);
                }
                streamArr.push(wdFrp.fromArray(mapUrlArr)
                    .flatMap(function (_a) {
                    var type = _a[0], mapUrl = _a[1];
                    return wd.TextureLoader.getInstance().load(wd.ModelLoaderUtils.getPath(filePath, mapUrl))
                        .do(function (asset) {
                        material[type] = asset.toTexture();
                    }, null, null);
                }));
            });
            return wdFrp.fromArray(streamArr).mergeAll();
        };
        WDLoader._instance = null;
        __decorate([
            wd.require(function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i - 0] = arguments[_i];
                }
                wd.assert(!wd.JudgeUtils.isArray(args[0]), wd.Log.info.FUNC_MUST_BE("url", "string"));
            })
        ], WDLoader.prototype, "loadAsset", null);
        return WDLoader;
    })(wd.Loader);
    wd.WDLoader = WDLoader;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var WDParser = (function () {
        function WDParser() {
            this._data = {};
            this._objectParser = wd.WDObjectParser.create();
        }
        WDParser.create = function () {
            var obj = new this();
            return obj;
        };
        WDParser.prototype.parse = function (json) {
            this._parseMetadata(json);
            this._parseScene(json);
            this._parseMaterial(json);
            this._parseObject(json);
            return this._data;
        };
        WDParser.prototype._parseMetadata = function (json) {
            this._data.metadata = json.metadata;
        };
        WDParser.prototype._parseObject = function (json) {
            this._objectParser.parse(this._data, json);
        };
        WDParser.prototype._parseScene = function (json) {
            this._data.scene = json.scene;
            if (json.scene.ambientColor) {
                this._data.scene.ambientColor = this._createColor(json.scene.ambientColor);
            }
        };
        WDParser.prototype._parseMaterial = function (json) {
            var _this = this;
            this._data.materials = wdCb.Hash.create(json.materials);
            this._data.materials.forEach(function (material) {
                if (material.diffuseColor) {
                    material.diffuseColor = _this._createColor(material.diffuseColor);
                }
                if (material.specularColor) {
                    material.specularColor = _this._createColor(material.specularColor);
                }
            });
        };
        WDParser.prototype._createColor = function (colorArr) {
            return wd.Color.create("rgb(" + colorArr.join(",").replace(/^(\d+),/g, "$1.0,").replace(/,(\d+),/g, ",$1.0,").replace(/,(\d+)$/g, ",$1.0") + ")");
        };
        return WDParser;
    })();
    wd.WDParser = WDParser;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var WDObjectParser = (function () {
        function WDObjectParser() {
        }
        WDObjectParser.create = function () {
            var obj = new this();
            return obj;
        };
        WDObjectParser.prototype.parse = function (data, json) {
            var parse = null, self = this;
            data.objects = wdCb.Collection.create(json.objects);
            parse = function (object) {
                if (self._isObjectContainer(object)) {
                    object.isContainer = true;
                }
                else {
                    object.isContainer = false;
                    self._parseFromIndices(object);
                }
                if (object.children) {
                    object.children = wdCb.Collection.create(object.children);
                    object.children.forEach(function (child) {
                        child.parent = object;
                        parse(child);
                    });
                }
            };
            data.objects.forEach(function (object) {
                object.parent = null;
                parse(object);
                self._removeObjectContainerData(object);
            });
        };
        WDObjectParser.prototype._isObjectContainer = function (object) {
            return !wd.GeometryUtils.hasData(object.verticeIndices);
        };
        WDObjectParser.prototype._parseFromIndices = function (object) {
            this._duplicateVertexWithDifferentUvs(object);
            this._parseObjectFromIndices(object);
            this._removeRebundantIndiceData(object);
        };
        WDObjectParser.prototype._duplicateVertexWithDifferentUvs = function (object) {
            var arr = [], container = wdCb.Hash.create(), verticeIndices = object.verticeIndices, uvIndices = object.uvIndices;
            if (!wd.GeometryUtils.hasData(uvIndices)) {
                return;
            }
            for (var i = 0, len = verticeIndices.length; i < len; i++) {
                var verticeIndex = verticeIndices[i];
                if (this._isSameVertexWithDifferentUvsByCompareToFirstOne(arr, uvIndices[i], verticeIndex)) {
                    if (this._isUvIndiceEqualTheOneOfAddedVertex(container, verticeIndex, uvIndices[i])) {
                        verticeIndices[i] = this._getVerticeIndexOfAddedVertexByFindContainer(container, verticeIndex, uvIndices[i]);
                    }
                    else {
                        this._addVertexData(object, container, verticeIndex, i);
                    }
                    verticeIndex = verticeIndices[i];
                }
                arr[verticeIndex] = uvIndices[i];
            }
        };
        WDObjectParser.prototype._isSameVertexWithDifferentUvsByCompareToFirstOne = function (arr, uvIndex, verticeIndex) {
            return arr[verticeIndex] !== void 0 && arr[verticeIndex] !== uvIndex;
        };
        WDObjectParser.prototype._addVertexData = function (object, container, verticeIndex, index) {
            var verticeIndices = object.verticeIndices, uvIndices = object.uvIndices, normalIndices = object.normalIndices, vertices = this._findData(object, "vertices"), normals = this._findData(object, "normals"), morphTargets = this._findData(object, "morphTargets"), verticeIndexOfAddedVertex = null;
            this._addThreeComponent(vertices, verticeIndex);
            verticeIndexOfAddedVertex = this._getVerticeIndexOfAddedVertex(vertices);
            verticeIndices[index] = verticeIndexOfAddedVertex;
            if (wd.GeometryUtils.hasData(morphTargets)) {
                for (var _i = 0; _i < morphTargets.length; _i++) {
                    var frame = morphTargets[_i];
                    this._addThreeComponent(frame.vertices, verticeIndex);
                    if (wd.GeometryUtils.hasData(frame.normals)) {
                        this._addDuplicateNormalOfAddedVertex(frame.normals, normalIndices, index, verticeIndex);
                    }
                }
            }
            if (wd.GeometryUtils.hasData(normals)) {
                this._addDuplicateNormalOfAddedVertex(normals, normalIndices, index, verticeIndex);
                if (wd.GeometryUtils.hasData(normalIndices)) {
                    normalIndices[index] = verticeIndexOfAddedVertex;
                }
            }
            container.appendChild(String(verticeIndex), [uvIndices[index], verticeIndexOfAddedVertex]);
        };
        WDObjectParser.prototype._addDuplicateNormalOfAddedVertex = function (normals, normalIndices, index, oldVerticeIndex) {
            if (!wd.GeometryUtils.hasData(normalIndices)) {
                this._addThreeComponent(normals, normals, oldVerticeIndex);
                return;
            }
            this._addThreeComponent(normals, normals, normalIndices[index]);
        };
        WDObjectParser.prototype._isUvIndiceEqualTheOneOfAddedVertex = function (container, targetVerticeIndex, targetUvIndex) {
            var data = container.getChild(String(targetVerticeIndex));
            if (!data) {
                return false;
            }
            return data.hasChild(function (_a) {
                var uvIndex = _a[0], verticeIndex = _a[1];
                return uvIndex === targetUvIndex;
            });
        };
        WDObjectParser.prototype._getVerticeIndexOfAddedVertexByFindContainer = function (container, targetVerticeIndex, targetUvIndex) {
            var data = container.getChild(String(targetVerticeIndex));
            return data.findOne(function (_a) {
                var uvIndex = _a[0], verticeIndex = _a[1];
                return uvIndex === targetUvIndex;
            })[1];
        };
        WDObjectParser.prototype._getVerticeIndexOfAddedVertex = function (vertices) {
            return vertices.length / 3 - 1;
        };
        WDObjectParser.prototype._addThreeComponent = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            if (args.length === 2) {
                var data = args[0], index = args[1];
                data.push(data[index * 3], data[index * 3 + 1], data[index * 3 + 2]);
            }
            else {
                var targetData = args[0], sourceData = args[1], index = args[2];
                targetData.push(sourceData[index * 3], sourceData[index * 3 + 1], sourceData[index * 3 + 2]);
            }
        };
        WDObjectParser.prototype._parseObjectFromIndices = function (object) {
            var vertices = [], uvs = [], faces = [], face = null, colors = [], objectVertices = this._findData(object, "vertices"), objectUVs = this._findData(object, "uvs"), objectNormals = this._findData(object, "normals"), objectColors = this._findData(object, "colors");
            for (var i = 0, len = object.verticeIndices.length; i < len; i += 3) {
                var aIndex = object.verticeIndices[i], bIndex = object.verticeIndices[i + 1], cIndex = object.verticeIndices[i + 2], indexArr = [i, i + 1, i + 2], verticeIndiceArr = [aIndex, bIndex, cIndex];
                face = wd.Face3.create(aIndex, bIndex, cIndex);
                if (wd.GeometryUtils.hasData(object.uvIndices) && wd.GeometryUtils.hasData(objectUVs)) {
                    this._setUV(uvs, objectUVs, object.uvIndices, indexArr, verticeIndiceArr);
                }
                if (wd.GeometryUtils.hasData(objectNormals)) {
                    this._setNormal(face.vertexNormals, objectNormals, object.normalIndices, indexArr, verticeIndiceArr);
                }
                faces.push(face);
            }
            object.vertices = objectVertices;
            if (!wd.GeometryUtils.hasData(object.uvIndices)) {
                object.uvs = objectUVs;
            }
            else {
                object.uvs = uvs;
            }
            object.colors = objectColors;
            object.faces = faces;
            this._setMorphTargets(object, object.verticeIndices, object.normalIndices);
        };
        WDObjectParser.prototype._getAnimName = function (frameName) {
            var PATTERN = /([a-z]+)_?(\d+)/, DEFAULT_ANIM_NAME = "default";
            var parts = frameName.match(PATTERN);
            return parts && parts.length > 1 ? parts[1] : DEFAULT_ANIM_NAME;
        };
        WDObjectParser.prototype._removeRebundantIndiceData = function (object) {
            delete object.verticeIndices;
            delete object.uvIndices;
            delete object.normalIndices;
        };
        WDObjectParser.prototype._removeObjectContainerData = function (object) {
            var remove = null;
            remove = function (object) {
                if (object.isContainer) {
                    delete object.vertices;
                    delete object.uvs;
                    delete object.colors;
                }
                if (object.children) {
                    object.children.forEach(function (child) {
                        remove(child);
                    });
                }
            };
            remove(object);
        };
        WDObjectParser.prototype._findData = function (object, dataName) {
            var data = null;
            do {
                data = object[dataName];
            } while (!data && (object = object.parent) !== null);
            return data;
        };
        WDObjectParser.prototype._setUV = function (targetUVs, sourceUVs, uvIndices, indexArr, verticeIndiceArr) {
            var uvIndice1 = null, uvIndice2 = null, uvIndice3 = null, index1 = indexArr[0], index2 = indexArr[1], index3 = indexArr[2], aIndex = verticeIndiceArr[0], bIndex = verticeIndiceArr[1], cIndex = verticeIndiceArr[2];
            uvIndice1 = uvIndices[index1];
            uvIndice2 = uvIndices[index2];
            uvIndice3 = uvIndices[index3];
            this._setTwoComponentData(targetUVs, sourceUVs, aIndex, uvIndice1);
            this._setTwoComponentData(targetUVs, sourceUVs, bIndex, uvIndice2);
            this._setTwoComponentData(targetUVs, sourceUVs, cIndex, uvIndice3);
        };
        WDObjectParser.prototype._setTwoComponentData = function (targetData, sourceData, index, indice) {
            targetData[index * 2] = sourceData[indice * 2];
            targetData[index * 2 + 1] = sourceData[indice * 2 + 1];
        };
        WDObjectParser.prototype._setThreeComponentData = function (targetData, sourceData, index, indice) {
            targetData[index * 3] = sourceData[indice * 3];
            targetData[index * 3 + 1] = sourceData[indice * 3 + 1];
            targetData[index * 3 + 2] = sourceData[indice * 3 + 2];
        };
        WDObjectParser.prototype._getThreeComponentData = function (sourceData, index) {
            var startIndex = 3 * index;
            return wd.Vector3.create(sourceData[startIndex], sourceData[startIndex + 1], sourceData[startIndex + 2]);
        };
        WDObjectParser.prototype._setNormal = function (targetNormals, sourceNormals, normalIndices, indexArr, verticeIndiceArr) {
            var index1 = indexArr[0], index2 = indexArr[1], index3 = indexArr[2];
            if (!wd.GeometryUtils.hasData(normalIndices)) {
                this._addNormalData(targetNormals, sourceNormals, verticeIndiceArr);
                return;
            }
            this._addNormalData(targetNormals, sourceNormals, [normalIndices[index1], normalIndices[index2], normalIndices[index3]]);
        };
        WDObjectParser.prototype._addNormalData = function (targetNormals, sourceNormals, normalIndiceArr) {
            var aIndex = normalIndiceArr[0], bIndex = normalIndiceArr[1], cIndex = normalIndiceArr[2];
            if (targetNormals instanceof wdCb.Collection) {
                targetNormals.addChildren([
                    this._getThreeComponentData(sourceNormals, aIndex),
                    this._getThreeComponentData(sourceNormals, bIndex),
                    this._getThreeComponentData(sourceNormals, cIndex)
                ]);
            }
            else {
                var normals = targetNormals;
                for (var _i = 0, _a = [this._getThreeComponentData(sourceNormals, aIndex), this._getThreeComponentData(sourceNormals, bIndex), this._getThreeComponentData(sourceNormals, cIndex)]; _i < _a.length; _i++) {
                    var v = _a[_i];
                    normals.push(v.x, v.y, v.z);
                }
            }
        };
        WDObjectParser.prototype._setMorphTargets = function (object, verticeIndices, normalIndices) {
            var objectMorphTargets = this._findData(object, "morphTargets"), morphTargets = null, morphNormals = null;
            if (wd.GeometryUtils.hasData(objectMorphTargets)) {
                morphTargets = wdCb.Hash.create();
                morphNormals = wdCb.Hash.create();
                for (var _i = 0; _i < objectMorphTargets.length; _i++) {
                    var frameData = objectMorphTargets[_i];
                    var animName = this._getAnimName(frameData.name);
                    morphTargets.appendChild(animName, frameData.vertices);
                    if (wd.GeometryUtils.hasData(frameData.normals)) {
                        if (wd.GeometryUtils.hasData(normalIndices)) {
                            var normals = [];
                            for (var i = 0, len = verticeIndices.length; i < len; i++) {
                                this._setThreeComponentData(normals, frameData.normals, verticeIndices[i], normalIndices[i]);
                            }
                            morphNormals.appendChild(animName, normals);
                        }
                        else {
                            morphNormals.appendChild(animName, frameData.normals);
                        }
                    }
                }
            }
            object.morphTargets = morphTargets;
            object.morphNormals = morphNormals;
        };
        __decorate([
            wd.require(function (container, targetVerticeIndex, targetUvIndex) {
                wd.assert(this._isUvIndiceEqualTheOneOfAddedVertex(container, targetVerticeIndex, targetUvIndex), wd.Log.info.FUNC_SHOULD("uvIndex", "equal the one of added vertex"));
            })
        ], WDObjectParser.prototype, "_getVerticeIndexOfAddedVertexByFindContainer", null);
        __decorate([
            wd.ensure(function (returnValue, object) {
                wd.assert(!object.verticeIndices, wd.Log.info.FUNC_SHOULD("object.verticeIndices", "be removed"));
                wd.assert(!object.uvIndices, wd.Log.info.FUNC_SHOULD("object.uvIndices", "be removed"));
                wd.assert(!object.normalIndices, wd.Log.info.FUNC_SHOULD("object.normalIndices", "be removed"));
            })
        ], WDObjectParser.prototype, "_removeRebundantIndiceData", null);
        return WDObjectParser;
    })();
    wd.WDObjectParser = WDObjectParser;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var WDBuilder = (function () {
        function WDBuilder() {
            this._result = wdCb.Hash.create();
        }
        WDBuilder.create = function () {
            var obj = new this();
            return obj;
        };
        WDBuilder.prototype.build = function (parseData) {
            this._buildMetadata(parseData);
            this._buildScene(parseData);
            this._buildModels(parseData);
            return this._result;
        };
        WDBuilder.prototype._buildMetadata = function (parseData) {
            var metadata = wdCb.Hash.create();
            for (var i in parseData.metadata) {
                if (parseData.metadata.hasOwnProperty(i)) {
                    metadata.addChild(i, parseData.metadata[i]);
                }
            }
            this._result.addChild("metadata", metadata);
        };
        WDBuilder.prototype._buildScene = function (parseData) {
            var scene = wdCb.Hash.create();
            if (parseData.scene.ambientColor) {
                scene.addChild("ambientColor", parseData.scene.ambientColor);
            }
            this._result.addChild("scene", scene);
        };
        WDBuilder.prototype._buildModels = function (parseData) {
            var models = wdCb.Collection.create(), self = this, build = null;
            build = function (objects, models) {
                objects.forEach(function (object) {
                    var geometry = null, model = null;
                    model = wd.GameObject.create();
                    if (self._isModelContainer(object)) {
                        model.addTag(wd.WDTag.CONTAINER);
                    }
                    else {
                        geometry = wd.ModelGeometry.create();
                        geometry.vertices = object.vertices;
                        geometry.faces = object.faces;
                        geometry.texCoords = object.uvs;
                        geometry.colors = object.colors;
                        if (object.material) {
                            geometry.material = self._buildMaterial(object.material, parseData.materials);
                        }
                        geometry.morphTargets = object.morphTargets;
                        geometry.morphFaceNormals = object.morphNormals;
                        geometry.morphVertexNormals = object.morphNormals;
                        if (wd.GeometryUtils.hasData(geometry.morphTargets)) {
                            model.addComponent(wd.MorphAnimation.create());
                        }
                        model.addComponent(geometry);
                    }
                    model.name = object.name;
                    model.addComponent(wd.MeshRenderer.create());
                    models.addChild(model);
                    if (object.children) {
                        build(object.children, model);
                    }
                });
            };
            build(parseData.objects, models);
            this._result.addChild("models", models);
        };
        WDBuilder.prototype._isModelContainer = function (object) {
            return object.isContainer;
        };
        WDBuilder.prototype._buildMaterial = function (materialName, materials) {
            var DEFAULTYPE = "LightMaterial";
            var materialData = null, type = null, material = null;
            _a = materials.findOne(function (material, name) {
                return name === materialName;
            }), materialData = _a[1];
            type = materialData.type || DEFAULTYPE;
            wdCb.Log.error(!wd[type], wdCb.Log.info.FUNC_NOT_EXIST("materialClass:" + type));
            material = wd[type].create();
            material.name = materialName;
            if (materialData.diffuseColor) {
                material.color = materialData.diffuseColor;
            }
            if (materialData.specularColor) {
                material.specular = materialData.specularColor;
            }
            if (materialData.diffuseMap) {
                material.diffuseMap = materialData.diffuseMap;
            }
            if (materialData.specularMap) {
                material.specularMap = materialData.specularMap;
            }
            if (materialData.normalMap) {
                material.normalMap = materialData.normalMap;
            }
            if (materialData.shininess !== null) {
                material.shininess = materialData.shininess;
            }
            if (materialData.opacity !== null) {
                material.opacity = materialData.opacity;
            }
            return material;
            var _a;
        };
        return WDBuilder;
    })();
    wd.WDBuilder = WDBuilder;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var TYPE = {
        ".eot": "embedded-opentype",
        ".ttf": "truetype",
        ".woff": "woff",
        ".svg": "svg"
    };
    var FontLoader = (function (_super) {
        __extends(FontLoader, _super);
        function FontLoader() {
            _super.apply(this, arguments);
            this._familyName = null;
        }
        FontLoader.getInstance = function () {
            if (this._instance === null) {
                this._instance = new this();
            }
            return this._instance;
        };
        FontLoader.prototype.dispose = function () {
            _super.prototype.dispose.call(this);
            wdCb.DomQuery.create("#" + this._familyName).remove();
        };
        FontLoader.prototype.loadAsset = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var familyName = args[1], self = this;
            this._familyName = familyName;
            return wdFrp.fromPromise(new RSVP.Promise(function (resolve, reject) {
                self._addStyleElement(args, familyName);
                if (document.fonts) {
                    document.fonts.load("1em " + familyName).then(function () {
                        resolve();
                    }, function (e) {
                        reject(e);
                    });
                }
                else {
                    wd.Log.warn("your browser not support document.fonts api, so it can't ensure that the font is loaded");
                    resolve();
                }
            }));
        };
        FontLoader.prototype._getType = function (url) {
            return TYPE[wdCb.PathUtils.extname(url).toLowerCase()];
        };
        FontLoader.prototype._addStyleElement = function (args, familyName) {
            var fontStyleEle = wdCb.DomQuery.create("<style id=\"" + familyName + "\"></style>"), fontStr = null;
            fontStyleEle.prependTo("body");
            fontStr = "@font-face { font-family:" + familyName + "; src:";
            if (wd.JudgeUtils.isArray(args[0])) {
                var urlArr = args[0];
                for (var _i = 0; _i < urlArr.length; _i++) {
                    var url = urlArr[_i];
                    fontStr += "url('" + url + "') format('" + this._getType(url) + "'),";
                }
                fontStr = fontStr.replace(/,$/, ";");
            }
            else {
                var url = args[0];
                fontStr += "url('" + url + "') format('" + this._getType(url) + "');";
            }
            fontStyleEle.get(0).textContent += fontStr + "};";
        };
        FontLoader._instance = null;
        __decorate([
            wd.require(function (url) {
                var extname = wdCb.PathUtils.extname(url).toLowerCase();
                wd.assert(!!TYPE[extname], wd.Log.info.FUNC_UNKNOW("type:" + extname));
            })
        ], FontLoader.prototype, "_getType", null);
        return FontLoader;
    })(wd.Loader);
    wd.FontLoader = FontLoader;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var COMMON_EXP = /common [^\n]*(\n|$)/gi, PAGE_EXP = /page [^\n]*(\n|$)/gi, CHAR_EXP = /char [^\n]*(\n|$)/gi, ITEM_EXP = /\w+=[^ \r\n]+/gi, INT_EXP = /^[\-]?\d+$/;
    var FntParser = (function () {
        function FntParser() {
        }
        FntParser.create = function () {
            var obj = new this();
            return obj;
        };
        FntParser.prototype.parseFnt = function (fntStr, url) {
            var fnt = {}, commonObj = null, pageObj = null;
            commonObj = this._parseStrToObj(fntStr.match(COMMON_EXP)[0]);
            fnt.commonHeight = commonObj["lineHeight"];
            if (commonObj["pages"] !== 1) {
                wd.Log.log("only supports 1 page");
            }
            pageObj = this._parseStrToObj(fntStr.match(PAGE_EXP)[0]);
            if (pageObj["id"] !== 0) {
                wd.Log.log("file could not be found");
            }
            fnt.atlasName = wdCb.PathUtils.changeBasename(url, pageObj["file"]);
            this._parseChar(fntStr, fnt);
            return fnt;
        };
        FntParser.prototype._parseStrToObj = function (str) {
            var arr = str.match(ITEM_EXP), obj = {};
            if (arr) {
                for (var _i = 0; _i < arr.length; _i++) {
                    var tempStr = arr[_i];
                    var index = tempStr.indexOf("="), key = tempStr.substring(0, index), value = tempStr.substring(index + 1);
                    if (value.match(INT_EXP)) {
                        value = parseInt(value);
                    }
                    else if (value[0] == '"') {
                        value = value.substring(1, value.length - 1);
                    }
                    obj[key] = value;
                }
            }
            return obj;
        };
        FntParser.prototype._parseChar = function (fntStr, fnt) {
            var charLines = fntStr.match(CHAR_EXP), fontDefDictionary = {};
            for (var _i = 0; _i < charLines.length; _i++) {
                var char = charLines[_i];
                var charObj = this._parseStrToObj(char), charId = charObj["id"];
                fontDefDictionary[charId] = {
                    rect: { x: charObj["x"], y: charObj["y"], width: charObj["width"], height: charObj["height"] },
                    xOffset: charObj["xoffset"],
                    yOffset: charObj["yoffset"],
                    xAdvance: charObj["xadvance"]
                };
            }
            fnt.fontDefDictionary = fontDefDictionary;
        };
        return FntParser;
    })();
    wd.FntParser = FntParser;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var FntLoader = (function (_super) {
        __extends(FntLoader, _super);
        function FntLoader() {
            _super.apply(this, arguments);
            this._parser = wd.FntParser.create();
        }
        FntLoader.getInstance = function () {
            if (this._instance === null) {
                this._instance = new this();
            }
            return this._instance;
        };
        FntLoader.prototype.loadAsset = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var url = args[0], self = this;
            return wd.AjaxLoader.load(url, "text")
                .map(function (fntStr) {
                return self._parser.parseFnt(fntStr, url);
            });
        };
        FntLoader._instance = null;
        __decorate([
            wd.require(function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i - 0] = arguments[_i];
                }
                wd.assert(!wd.JudgeUtils.isArray(args[0]), wd.Log.info.FUNC_MUST_BE("url", "string"));
            })
        ], FntLoader.prototype, "loadAsset", null);
        return FntLoader;
    })(wd.Loader);
    wd.FntLoader = FntLoader;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var DeviceManager = (function () {
        function DeviceManager() {
            this.view = null;
            this.gl = null;
            this._scissorTest = null;
            this._depthTest = null;
            this._depthFunc = null;
            this._side = null;
            this.polygonOffset = null;
            this._polygonOffsetMode = null;
            this._depthWrite = null;
            this._blend = null;
            this._writeRed = null;
            this._writeGreen = null;
            this._writeBlue = null;
            this._writeAlpha = null;
            this._blendSrc = null;
            this._blendDst = null;
            this._blendEquation = null;
            this._blendFuncSeparate = null;
            this._blendEquationSeparate = null;
        }
        DeviceManager.getInstance = function () {
            if (this._instance === null) {
                this._instance = new this();
            }
            return this._instance;
        };
        Object.defineProperty(DeviceManager.prototype, "scissorTest", {
            get: function () {
                return this._scissorTest;
            },
            set: function (scissorTest) {
                var gl = this.gl;
                if (scissorTest) {
                    gl.enable(gl.SCISSOR_TEST);
                }
                else {
                    gl.disable(gl.SCISSOR_TEST);
                }
                this._scissorTest = scissorTest;
            },
            enumerable: true,
            configurable: true
        });
        DeviceManager.prototype.setScissor = function (x, y, width, height) {
            this.gl.scissor(x, y, width, height);
            if (!this.scissorTest) {
                this.scissorTest = true;
            }
        };
        DeviceManager.prototype.setViewport = function (x, y, width, height) {
            this.gl.viewport(x, y, width, height);
        };
        Object.defineProperty(DeviceManager.prototype, "depthTest", {
            get: function () {
                return this._depthTest;
            },
            set: function (depthTest) {
                var gl = this.gl;
                if (this._depthTest !== depthTest) {
                    if (depthTest) {
                        gl.enable(gl.DEPTH_TEST);
                    }
                    else {
                        gl.disable(gl.DEPTH_TEST);
                    }
                    this._depthTest = depthTest;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DeviceManager.prototype, "depthFunc", {
            get: function () {
                return this._depthFunc;
            },
            set: function (depthFunc) {
                var gl = this.gl;
                if (this._depthFunc !== depthFunc) {
                    gl.depthFunc(gl[depthFunc]);
                    this._depthFunc = depthFunc;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DeviceManager.prototype, "side", {
            get: function () {
                return this._side;
            },
            set: function (side) {
                var gl = this.gl;
                if (this._side !== side) {
                    switch (side) {
                        case Side.NONE:
                            gl.enable(gl.CULL_FACE);
                            gl.cullFace(gl.FRONT_AND_BACK);
                            break;
                        case Side.BOTH:
                            gl.disable(gl.CULL_FACE);
                            break;
                        case Side.FRONT:
                            gl.enable(gl.CULL_FACE);
                            gl.cullFace(gl.BACK);
                            break;
                        case Side.BACK:
                            gl.enable(gl.CULL_FACE);
                            gl.cullFace(gl.FRONT);
                            break;
                        default:
                            wd.Log.error(true, wd.Log.info.FUNC_UNEXPECT("side", side));
                            break;
                    }
                    this._side = side;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DeviceManager.prototype, "polygonOffsetMode", {
            get: function () {
                return this._polygonOffsetMode;
            },
            set: function (polygonOffsetMode) {
                var gl = this.gl;
                if (this._polygonOffsetMode !== polygonOffsetMode) {
                    switch (polygonOffsetMode) {
                        case PolygonOffsetMode.NONE:
                            gl.polygonOffset(0.0, 0.0);
                            gl.disable(gl.POLYGON_OFFSET_FILL);
                            break;
                        case PolygonOffsetMode.IN:
                            gl.enable(gl.POLYGON_OFFSET_FILL);
                            gl.polygonOffset(1.0, 1.0);
                            break;
                        case PolygonOffsetMode.OUT:
                            gl.enable(gl.POLYGON_OFFSET_FILL);
                            gl.polygonOffset(-1.0, -1.0);
                            break;
                        case PolygonOffsetMode.CUSTOM:
                            gl.enable(gl.POLYGON_OFFSET_FILL);
                            wd.Log.error(!this.polygonOffset, wd.Log.info.FUNC_MUST_DEFINE("polygonOffset"));
                            gl.polygonOffset(this.polygonOffset.x, this.polygonOffset.y);
                            break;
                        default:
                            break;
                    }
                    this._polygonOffsetMode = polygonOffsetMode;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DeviceManager.prototype, "depthWrite", {
            get: function () {
                return this._depthWrite;
            },
            set: function (depthWrite) {
                if (this._depthWrite !== depthWrite) {
                    this.gl.depthMask(depthWrite);
                    this._depthWrite = depthWrite;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DeviceManager.prototype, "blend", {
            get: function () {
                return this._blend;
            },
            set: function (blend) {
                var gl = this.gl;
                if (this._blend !== blend) {
                    if (blend) {
                        gl.enable(gl.BLEND);
                    }
                    else {
                        gl.disable(gl.BLEND);
                    }
                    this._blend = blend;
                }
            },
            enumerable: true,
            configurable: true
        });
        DeviceManager.prototype.setBlendFunc = function (blendSrc, blendDst) {
            if ((this._blendSrc !== blendSrc) || (this._blendDst !== blendDst)) {
                this._blend && this.gl.blendFunc(this.gl[blendSrc], this.gl[blendDst]);
                this._blendSrc = blendSrc;
                this._blendDst = blendDst;
            }
        };
        DeviceManager.prototype.setBlendEquation = function (blendEquation) {
            if (this._blendEquation !== blendEquation) {
                this._blend && this.gl.blendEquation(this.gl[blendEquation]);
                this._blendEquation = blendEquation;
            }
        };
        DeviceManager.prototype.setBlendFuncSeparate = function (blendFuncSeparate) {
            var gl = this.gl;
            if (!this._blendFuncSeparate || this._blendFuncSeparate[0] !== blendFuncSeparate[0] || this._blendFuncSeparate[1] !== blendFuncSeparate[1]) {
                this._blend && gl.blendFuncSeparate(gl[blendFuncSeparate[0]], gl[blendFuncSeparate[1]], gl[blendFuncSeparate[2]], gl[blendFuncSeparate[3]]);
                this._blendFuncSeparate = blendFuncSeparate;
            }
        };
        DeviceManager.prototype.setBlendEquationSeparate = function (blendEquationSeparate) {
            var gl = this.gl;
            if (!this._blendEquationSeparate || this._blendEquationSeparate[0] !== blendEquationSeparate[0] || this._blendEquationSeparate[1] !== blendEquationSeparate[1]) {
                this._blend && gl.blendEquationSeparate(gl[blendEquationSeparate[0]], gl[blendEquationSeparate[1]]);
                this._blendEquationSeparate = blendEquationSeparate;
            }
        };
        DeviceManager.prototype.setColorWrite = function (writeRed, writeGreen, writeBlue, writeAlpha) {
            if (this._writeRed !== writeRed
                || this._writeGreen !== writeGreen
                || this._writeBlue !== writeBlue
                || this._writeAlpha !== writeAlpha) {
                this.gl.colorMask(writeRed, writeGreen, writeBlue, writeAlpha);
                this._writeRed = writeRed;
                this._writeGreen = writeGreen;
                this._writeBlue = writeBlue;
                this._writeAlpha = writeAlpha;
            }
        };
        DeviceManager.prototype.clear = function (options) {
            var gl = this.gl, color = options.color;
            gl.clearColor(color.r, color.g, color.b, color.a);
            this.setColorWrite(true, true, true, true);
            gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT);
        };
        DeviceManager.prototype.createGL = function (canvasId) {
            var canvas = null;
            if (canvasId) {
                canvas = wdCb.DomQuery.create(canvasId).get(0);
            }
            else {
                canvas = wdCb.DomQuery.create("<canvas></canvas>").prependTo("body").get(0);
            }
            this.view = wd.ViewWebGL.create(canvas);
            this.gl = this.view.getContext();
        };
        DeviceManager.prototype.setScreen = function () {
            var screenSize = wd.Main.screenSize, x = null, y = null, width = null, height = null;
            if (screenSize === wd.ScreenSize.FULL) {
                x = 0;
                y = 0;
                width = wd.root.innerWidth;
                height = wd.root.innerHeight;
                wdCb.DomQuery.create("body").css("margin", "0");
            }
            else {
                x = screenSize.x || 0;
                y = screenSize.y || 0;
                width = screenSize.width || wd.root.innerWidth;
                height = screenSize.height || wd.root.innerHeight;
            }
            this.view.x = x;
            this.view.y = y;
            this.view.width = width;
            this.view.height = height;
            this.setViewport(0, 0, width, height);
        };
        DeviceManager._instance = null;
        __decorate([
            wd.require(function () {
                wd.assert(wd.Main.screenSize !== null, wd.Log.info.FUNC_NOT_EXIST("Main.screenSize"));
            })
        ], DeviceManager.prototype, "setScreen", null);
        return DeviceManager;
    })();
    wd.DeviceManager = DeviceManager;
    (function (DepthFunction) {
        DepthFunction[DepthFunction["NEVER"] = "NEVER"] = "NEVER";
        DepthFunction[DepthFunction["ALWAYS"] = "ALWAYS"] = "ALWAYS";
        DepthFunction[DepthFunction["LESS"] = "LESS"] = "LESS";
        DepthFunction[DepthFunction["LEQUAL"] = "LEQUAL"] = "LEQUAL";
        DepthFunction[DepthFunction["EQUAL"] = "EQUAL"] = "EQUAL";
        DepthFunction[DepthFunction["GEQUAL"] = "GEQUAL"] = "GEQUAL";
        DepthFunction[DepthFunction["GREATER"] = "GREATER"] = "GREATER";
        DepthFunction[DepthFunction["NOTEQUAL"] = "NOTEQUAL"] = "NOTEQUAL";
    })(wd.DepthFunction || (wd.DepthFunction = {}));
    var DepthFunction = wd.DepthFunction;
    (function (Side) {
        Side[Side["NONE"] = 0] = "NONE";
        Side[Side["BOTH"] = 1] = "BOTH";
        Side[Side["BACK"] = 2] = "BACK";
        Side[Side["FRONT"] = 3] = "FRONT";
    })(wd.Side || (wd.Side = {}));
    var Side = wd.Side;
    (function (PolygonOffsetMode) {
        PolygonOffsetMode[PolygonOffsetMode["NONE"] = 0] = "NONE";
        PolygonOffsetMode[PolygonOffsetMode["IN"] = 1] = "IN";
        PolygonOffsetMode[PolygonOffsetMode["OUT"] = 2] = "OUT";
        PolygonOffsetMode[PolygonOffsetMode["CUSTOM"] = 3] = "CUSTOM";
    })(wd.PolygonOffsetMode || (wd.PolygonOffsetMode = {}));
    var PolygonOffsetMode = wd.PolygonOffsetMode;
    (function (BlendFunc) {
        BlendFunc[BlendFunc["ZERO"] = "ZEOR"] = "ZERO";
        BlendFunc[BlendFunc["ONE"] = "ONE"] = "ONE";
        BlendFunc[BlendFunc["SRC_COLOR"] = "SRC_COLOR"] = "SRC_COLOR";
        BlendFunc[BlendFunc["ONE_MINUS_SRC_COLOR"] = "ONE_MINUS_SRC_COLOR"] = "ONE_MINUS_SRC_COLOR";
        BlendFunc[BlendFunc["DST_COLOR"] = "DST_COLOR"] = "DST_COLOR";
        BlendFunc[BlendFunc["ONE_MINUS_DST_COLOR"] = "ONE_MINUS_DST_COLOR"] = "ONE_MINUS_DST_COLOR";
        BlendFunc[BlendFunc["SRC_ALPHA"] = "SRC_ALPHA"] = "SRC_ALPHA";
        BlendFunc[BlendFunc["SRC_ALPHA_SATURATE"] = "SRC_ALPHA_SATURATE"] = "SRC_ALPHA_SATURATE";
        BlendFunc[BlendFunc["ONE_MINUS_SRC_ALPHA"] = "ONE_MINUS_SRC_ALPHA"] = "ONE_MINUS_SRC_ALPHA";
        BlendFunc[BlendFunc["DST_ALPHA"] = "DST_ALPHA"] = "DST_ALPHA";
        BlendFunc[BlendFunc["ONE_MINUS_DST_ALPH"] = "ONE_MINUS_DST_ALPHA"] = "ONE_MINUS_DST_ALPH";
    })(wd.BlendFunc || (wd.BlendFunc = {}));
    var BlendFunc = wd.BlendFunc;
    (function (BlendEquation) {
        BlendEquation[BlendEquation["ADD"] = "FUNC_ADD"] = "ADD";
        BlendEquation[BlendEquation["SUBTRACT"] = "FUNC_SUBTRACT"] = "SUBTRACT";
        BlendEquation[BlendEquation["REVERSE_SUBTRAC"] = "FUNC_REVERSE_SUBTRACT"] = "REVERSE_SUBTRAC";
    })(wd.BlendEquation || (wd.BlendEquation = {}));
    var BlendEquation = wd.BlendEquation;
    (function (BlendType) {
        BlendType[BlendType["NONE"] = 0] = "NONE";
        BlendType[BlendType["NORMAL"] = 1] = "NORMAL";
        BlendType[BlendType["ADDITIVE"] = 2] = "ADDITIVE";
        BlendType[BlendType["ADDITIVEALPHA"] = 3] = "ADDITIVEALPHA";
        BlendType[BlendType["MULTIPLICATIVE"] = 4] = "MULTIPLICATIVE";
        BlendType[BlendType["PREMULTIPLIED"] = 5] = "PREMULTIPLIED";
    })(wd.BlendType || (wd.BlendType = {}));
    var BlendType = wd.BlendType;
    (function (CanvasType) {
        CanvasType[CanvasType["UI"] = "UI"] = "UI";
    })(wd.CanvasType || (wd.CanvasType = {}));
    var CanvasType = wd.CanvasType;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var GPUDetector = (function () {
        function GPUDetector() {
            this.maxTextureUnit = null;
            this.maxTextureSize = null;
            this.maxCubemapTextureSize = null;
            this.maxAnisotropy = null;
            this.extensionCompressedTextureS3TC = null;
            this.extensionTextureFilterAnisotropic = null;
            this.precision = null;
            this._isDetected = false;
        }
        GPUDetector.getInstance = function () {
            if (this._instance === null) {
                this._instance = new this();
            }
            return this._instance;
        };
        Object.defineProperty(GPUDetector.prototype, "gl", {
            get: function () {
                return wd.DeviceManager.getInstance().gl;
            },
            enumerable: true,
            configurable: true
        });
        GPUDetector.prototype.detect = function () {
            this._isDetected = true;
            this._detectExtension();
            this._detectCapabilty();
        };
        GPUDetector.prototype._detectExtension = function () {
            this.extensionCompressedTextureS3TC = this._getExtension("WEBGL_compressed_texture_s3tc");
            this.extensionTextureFilterAnisotropic = this._getExtension("EXT_texture_filter_anisotropic");
        };
        GPUDetector.prototype._detectCapabilty = function () {
            var gl = this.gl;
            this.maxTextureUnit = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);
            this.maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);
            this.maxCubemapTextureSize = gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE);
            this.maxAnisotropy = this._getMaxAnisotropy();
            this._detectPrecision();
        };
        GPUDetector.prototype._getExtension = function (name) {
            var extension, gl = this.gl;
            switch (name) {
                case "EXT_texture_filter_anisotropic":
                    extension = gl.getExtension("EXT_texture_filter_anisotropic") || gl.getExtension("MOZ_EXT_texture_filter_anisotropic") || gl.getExtension("WEBKIT_EXT_texture_filter_anisotropic");
                    break;
                case "WEBGL_compressed_texture_s3tc":
                    extension = gl.getExtension("WEBGL_compressed_texture_s3tc") || gl.getExtension("MOZ_WEBGL_compressed_texture_s3tc") || gl.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");
                    break;
                case "WEBGL_compressed_texture_pvrtc":
                    extension = gl.getExtension("WEBGL_compressed_texture_pvrtc") || gl.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");
                    break;
                default:
                    extension = gl.getExtension(name);
            }
            return extension;
        };
        GPUDetector.prototype._getMaxAnisotropy = function () {
            var extension = this.extensionTextureFilterAnisotropic, gl = this.gl;
            return extension !== null ? gl.getParameter(extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT) : 0;
        };
        GPUDetector.prototype._detectPrecision = function () {
            var gl = this.gl, vertexShaderPrecisionHighpFloat = gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.HIGH_FLOAT), vertexShaderPrecisionMediumpFloat = gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.MEDIUM_FLOAT), fragmentShaderPrecisionHighpFloat = gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT), fragmentShaderPrecisionMediumpFloat = gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT), highpAvailable = vertexShaderPrecisionHighpFloat.precision > 0 && fragmentShaderPrecisionHighpFloat.precision > 0, mediumpAvailable = vertexShaderPrecisionMediumpFloat.precision > 0 && fragmentShaderPrecisionMediumpFloat.precision > 0;
            if (!highpAvailable) {
                if (mediumpAvailable) {
                    this.precision = GPUPrecision.MEDIUMP;
                    wd.Log.warn(wd.Log.info.FUNC_NOT_SUPPORT("gpu", "highp, using mediump"));
                }
                else {
                    this.precision = GPUPrecision.LOWP;
                    wd.Log.warn(wd.Log.info.FUNC_NOT_SUPPORT("gpu", "highp and mediump, using lowp"));
                }
            }
            else {
                this.precision = GPUPrecision.HIGHP;
            }
        };
        GPUDetector._instance = null;
        return GPUDetector;
    })();
    wd.GPUDetector = GPUDetector;
    (function (GPUPrecision) {
        GPUPrecision[GPUPrecision["HIGHP"] = 0] = "HIGHP";
        GPUPrecision[GPUPrecision["MEDIUMP"] = 1] = "MEDIUMP";
        GPUPrecision[GPUPrecision["LOWP"] = 2] = "LOWP";
    })(wd.GPUPrecision || (wd.GPUPrecision = {}));
    var GPUPrecision = wd.GPUPrecision;
})(wd || (wd = {}));
var wd;
(function (wd) {
    (function (ScreenSize) {
        ScreenSize[ScreenSize["FULL"] = 0] = "FULL";
    })(wd.ScreenSize || (wd.ScreenSize = {}));
    var ScreenSize = wd.ScreenSize;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var Point = (function () {
        function Point(x, y) {
            if (x === void 0) { x = null; }
            if (y === void 0) { y = null; }
            this.x = null;
            this.y = null;
            this.x = x;
            this.y = y;
        }
        Point.create = function (x, y) {
            if (x === void 0) { x = null; }
            if (y === void 0) { y = null; }
            var obj = new this(x, y);
            return obj;
        };
        return Point;
    })();
    wd.Point = Point;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var Face3 = (function () {
        function Face3(aIndex, bIndex, cIndex, faceNormal, vertexNormals) {
            this._faceNormal = null;
            this.aIndex = null;
            this.bIndex = null;
            this.cIndex = null;
            this.vertexNormals = null;
            this.aIndex = aIndex;
            this.bIndex = bIndex;
            this.cIndex = cIndex;
            this._faceNormal = faceNormal;
            this.vertexNormals = vertexNormals;
        }
        Face3.create = function (aIndex, bIndex, cIndex, faceNormal, vertexNormals) {
            if (faceNormal === void 0) { faceNormal = null; }
            if (vertexNormals === void 0) { vertexNormals = wdCb.Collection.create(); }
            var obj = new this(aIndex, bIndex, cIndex, faceNormal, vertexNormals);
            return obj;
        };
        Object.defineProperty(Face3.prototype, "faceNormal", {
            get: function () {
                return this._faceNormal !== null ? this._faceNormal : wd.Vector3.create(0, 0, 0);
            },
            set: function (faceNormal) {
                this._faceNormal = faceNormal;
            },
            enumerable: true,
            configurable: true
        });
        Face3.prototype.hasFaceNormal = function () {
            return this._faceNormal !== null;
        };
        Face3.prototype.hasVertexNormal = function () {
            return this.vertexNormals.getCount() > 0;
        };
        Face3.prototype.copy = function () {
            var copyFaceNormal = this._faceNormal ? this._faceNormal.copy() : null, copyVertexNormals = null;
            if (this.vertexNormals) {
                copyVertexNormals = wdCb.Collection.create();
                this.vertexNormals.forEach(function (vertexNormal) {
                    copyVertexNormals.addChild(vertexNormal.copy());
                });
            }
            return Face3.create(this.aIndex, this.bIndex, this.cIndex, copyFaceNormal, copyVertexNormals);
        };
        return Face3;
    })();
    wd.Face3 = Face3;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var RectRegion = (function (_super) {
        __extends(RectRegion, _super);
        function RectRegion() {
            _super.apply(this, arguments);
        }
        Object.defineProperty(RectRegion.prototype, "width", {
            get: function () {
                return this.z;
            },
            set: function (width) {
                this.z = width;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RectRegion.prototype, "height", {
            get: function () {
                return this.w;
            },
            set: function (height) {
                this.w = height;
            },
            enumerable: true,
            configurable: true
        });
        RectRegion.prototype.copy = function () {
            return this.copyHelper(RectRegion.create());
        };
        RectRegion.prototype.isNotEmpty = function () {
            return this.x !== 0
                || this.y !== 0
                || this.width !== 0
                || this.height !== 0;
        };
        return RectRegion;
    })(wd.Vector4);
    wd.RectRegion = RectRegion;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var ViewWebGL = (function () {
        function ViewWebGL(dom) {
            this._dom = null;
            this._dom = dom;
        }
        ViewWebGL.create = function (view) {
            var obj = new this(view);
            return obj;
        };
        Object.defineProperty(ViewWebGL.prototype, "offset", {
            get: function () {
                var view = this._dom, offset = { x: view.offsetLeft, y: view.offsetTop };
                while (view = view.offsetParent) {
                    offset.x += view.offsetLeft;
                    offset.y += view.offsetTop;
                }
                return offset;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ViewWebGL.prototype, "dom", {
            get: function () {
                return this._dom;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ViewWebGL.prototype, "width", {
            get: function () {
                return this._dom.width;
            },
            set: function (width) {
                this._dom.width = width;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ViewWebGL.prototype, "height", {
            get: function () {
                return this._dom.height;
            },
            set: function (height) {
                this._dom.height = height;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ViewWebGL.prototype, "x", {
            get: function () {
                return Number(this._dom.style.left.slice(0, -2));
            },
            set: function (x) {
                this._dom.style.position = "absolute";
                this._dom.style.left = x + "px";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ViewWebGL.prototype, "y", {
            get: function () {
                return Number(this._dom.style.top.slice(0, -2));
            },
            set: function (y) {
                this._dom.style.position = "absolute";
                this._dom.style.top = y + "px";
            },
            enumerable: true,
            configurable: true
        });
        ViewWebGL.prototype.getContext = function () {
            return this._dom.getContext("webgl") || this._dom.getContext("experimental-webgl");
        };
        return ViewWebGL;
    })();
    wd.ViewWebGL = ViewWebGL;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var Color = (function () {
        function Color() {
            this.r = null;
            this.g = null;
            this.b = null;
            this.a = null;
            this._colorString = null;
        }
        Color.create = function (colorVal) {
            var obj = new this();
            obj.initWhenCreate(colorVal);
            return obj;
        };
        Color.prototype.initWhenCreate = function (colorVal) {
            this._colorString = colorVal;
            this._setColor(colorVal);
        };
        Color.prototype.toVector3 = function () {
            return wd.Vector3.create(this.r, this.g, this.b);
        };
        Color.prototype.toVector4 = function () {
            return wd.Vector4.create(this.r, this.g, this.b, this.a);
        };
        Color.prototype.toString = function () {
            return this._colorString;
        };
        Color.prototype._setColor = function (colorVal) {
            var REGEX_RGBA = /^rgba\((\d+),\s*(\d+),\s*(\d+),\s*([^\)]+)\)$/i, REGEX_RGB = /^rgb\((\d+),\s*(\d+),\s*(\d+)\)$/i, REGEX_RGB_2 = /^rgb\((\d+\.\d+),\s*(\d+\.\d+),\s*(\d+\.\d+)\)$/i, REGEX_NUM = /^\#([0-9a-f]{6})$/i;
            var color = null;
            if (REGEX_RGBA.test(colorVal)) {
                color = REGEX_RGBA.exec(colorVal);
                this.r = this._getColorValue(color, 1);
                this.g = this._getColorValue(color, 2);
                this.b = this._getColorValue(color, 3);
                this.a = Number(color[4]);
                return this;
            }
            if (REGEX_RGB.test(colorVal)) {
                color = REGEX_RGB.exec(colorVal);
                this.r = this._getColorValue(color, 1);
                this.g = this._getColorValue(color, 2);
                this.b = this._getColorValue(color, 3);
                this.a = 1;
                return this;
            }
            if (REGEX_RGB_2.test(colorVal)) {
                color = REGEX_RGB_2.exec(colorVal);
                this.r = parseFloat(color[1]);
                this.g = parseFloat(color[2]);
                this.b = parseFloat(color[3]);
                this.a = 1;
                return this;
            }
            if (REGEX_NUM.test(colorVal)) {
                color = REGEX_NUM.exec(colorVal);
                this._setHex(parseInt(color[1], 16));
                return this;
            }
        };
        Color.prototype._getColorValue = function (color, index, num) {
            if (num === void 0) { num = 255; }
            return Math.min(num, parseInt(color[index], 10)) / num;
        };
        Color.prototype._setHex = function (hex) {
            hex = Math.floor(hex);
            this.r = (hex >> 16 & 255) / 255;
            this.g = (hex >> 8 & 255) / 255;
            this.b = (hex & 255) / 255;
            this.a = 1;
            return this;
        };
        return Color;
    })();
    wd.Color = Color;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var Texture = (function () {
        function Texture() {
            this.material = null;
            this.width = null;
            this.height = null;
            this.variableData = null;
            this.wrapS = null;
            this.wrapT = null;
            this.magFilter = null;
            this.minFilter = null;
            this.glTexture = null;
            this.target = wd.TextureTarget.TEXTURE_2D;
        }
        Object.defineProperty(Texture.prototype, "geometry", {
            get: function () {
                return this.material.geometry;
            },
            enumerable: true,
            configurable: true
        });
        Texture.prototype.bindToUnit = function (unit) {
            var gl = wd.DeviceManager.getInstance().gl, maxUnit = wd.GPUDetector.getInstance().maxTextureUnit;
            if (unit >= maxUnit) {
                wd.Log.warn("trying to use " + unit + " texture units, but GPU only supports " + maxUnit + " units");
            }
            gl.activeTexture(gl["TEXTURE" + String(unit)]);
            gl.bindTexture(gl[this.target], this.glTexture);
            return this;
        };
        Texture.prototype.sendData = function (program, pos, unit) {
            program.sendUniformData(pos, this.getSamplerType(), unit);
            this.sendOtherData(program, unit);
        };
        Texture.prototype.dispose = function () {
            var gl = wd.DeviceManager.getInstance().gl;
            gl.deleteTexture(this.glTexture);
            delete this.glTexture;
        };
        Texture.prototype.filterFallback = function (filter) {
            if (filter === wd.TextureFilterMode.NEAREST || filter === wd.TextureFilterMode.NEAREST_MIPMAP_MEAREST || filter === wd.TextureFilterMode.NEAREST_MIPMAP_LINEAR) {
                return wd.TextureFilterMode.NEAREST;
            }
            return wd.TextureFilterMode.LINEAR;
        };
        Texture.prototype.sendOtherData = function (program, unit) {
        };
        Texture.prototype.getSamplerNameByVariableData = function (unit, type) {
            var samplerName = null;
            if (this.variableData) {
                if (this.variableData.samplerVariableName) {
                    samplerName = this.variableData.samplerVariableName;
                }
            }
            else {
                samplerName = type === wd.VariableType.SAMPLER_2D ? "u_sampler2D" + unit : "u_samplerCube" + unit;
            }
            return samplerName;
        };
        Texture.prototype.getSamplerType = function () {
            var type = null;
            switch (this.target) {
                case wd.TextureTarget.TEXTURE_2D:
                    type = wd.VariableType.SAMPLER_2D;
                    break;
                case wd.TextureTarget.TEXTURE_CUBE_MAP:
                    type = wd.VariableType.SAMPLER_CUBE;
                    break;
                default:
                    break;
            }
            return type;
        };
        Texture.prototype.isSourcePowerOfTwo = function () {
            return wd.TextureUtils.isPowerOfTwo(this.width, this.height);
        };
        Texture.prototype.setTextureParameters = function (textureType, isSourcePowerOfTwo) {
            var gl = wd.DeviceManager.getInstance().gl;
            if (isSourcePowerOfTwo) {
                gl.texParameteri(textureType, gl.TEXTURE_WRAP_S, gl[this.wrapS]);
                gl.texParameteri(textureType, gl.TEXTURE_WRAP_T, gl[this.wrapT]);
                gl.texParameteri(textureType, gl.TEXTURE_MAG_FILTER, gl[this.magFilter]);
                gl.texParameteri(textureType, gl.TEXTURE_MIN_FILTER, gl[this.minFilter]);
            }
            else {
                gl.texParameteri(textureType, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
                gl.texParameteri(textureType, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
                gl.texParameteri(textureType, gl.TEXTURE_MAG_FILTER, gl[this.filterFallback(this.magFilter)]);
                gl.texParameteri(textureType, gl.TEXTURE_MIN_FILTER, gl[this.filterFallback(this.minFilter)]);
            }
        };
        __decorate([
            wd.virtual
        ], Texture.prototype, "sendOtherData", null);
        __decorate([
            wd.virtual
        ], Texture.prototype, "isSourcePowerOfTwo", null);
        return Texture;
    })();
    wd.Texture = Texture;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var TextureUtils = (function () {
        function TextureUtils() {
        }
        TextureUtils.isPowerOfTwo = function (width, height) {
            return wd.JudgeUtils.isPowerOfTwo(width) && wd.JudgeUtils.isPowerOfTwo(height);
        };
        return TextureUtils;
    })();
    wd.TextureUtils = TextureUtils;
})(wd || (wd = {}));
var wd;
(function (wd_2) {
    var BasicTextureUtils = (function (_super) {
        __extends(BasicTextureUtils, _super);
        function BasicTextureUtils() {
            _super.apply(this, arguments);
        }
        BasicTextureUtils.isDrawPartOfTexture = function (sourceRegion, sourceRegionMethod) {
            return sourceRegion && sourceRegion.isNotEmpty() && sourceRegionMethod === wd_2.TextureSourceRegionMethod.DRAW_IN_CANVAS;
        };
        BasicTextureUtils.drawPartOfTextureByCanvas = function (source, canvasWidth, canvasHeight, sx, sy, sWidth, sHeight, dx, wd, dWidth, dHeight) {
            var canvas = wdCb.DomQuery.create("<canvas></canvas>").get(0), ctx = null;
            canvas.width = canvasWidth;
            canvas.height = canvasHeight;
            ctx = canvas.getContext("2d");
            ctx.drawImage(source, sx, sy, sWidth, sHeight, dx, wd, dWidth, dHeight);
            return canvas;
        };
        BasicTextureUtils.isSourcePowerOfTwo = function (sourceRegion, sourceRegionMethod, width, height) {
            if (this.isDrawPartOfTexture(sourceRegion, sourceRegionMethod)) {
                return this.isPowerOfTwo(sourceRegion.width, sourceRegion.height);
            }
            return this.isPowerOfTwo(width, height);
        };
        BasicTextureUtils.needClampMaxSize = function (maxSize, width, height) {
            return width > maxSize || height > maxSize;
        };
        BasicTextureUtils.clampToMaxSize = function (source, maxSize) {
            var maxDimension = null, newWidth = null, newHeight = null, canvas = null;
            maxDimension = Math.max(source.width, source.height);
            newWidth = Math.floor(source.width * maxSize / maxDimension);
            newHeight = Math.floor(source.height * maxSize / maxDimension);
            canvas = this.drawPartOfTextureByCanvas(source, newWidth, newHeight, 0, 0, source.width, source.height, 0, 0, newWidth, newHeight);
            wd_2.Log.log("source is too big (width:" + source.width + ", height:" + source.height + "), resize it to be width:" + canvas.width + ", height:" + canvas.height + ".");
            return canvas;
        };
        return BasicTextureUtils;
    })(wd_2.TextureUtils);
    wd_2.BasicTextureUtils = BasicTextureUtils;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var RenderTargetTexture = (function (_super) {
        __extends(RenderTargetTexture, _super);
        function RenderTargetTexture() {
            _super.apply(this, arguments);
        }
        RenderTargetTexture.prototype.init = function () {
            this.minFilter = wd.TextureFilterMode.LINEAR;
            this.magFilter = wd.TextureFilterMode.LINEAR;
            this.wrapS = wd.TextureWrapMode.CLAMP_TO_EDGE;
            this.wrapT = wd.TextureWrapMode.CLAMP_TO_EDGE;
            return this;
        };
        RenderTargetTexture.prototype.getPosition = function () {
            return this.geometry.entityObject.transform.position;
        };
        RenderTargetTexture.prototype.setEmptyTexture = function (texture) {
            var gl = wd.DeviceManager.getInstance().gl;
            wd.Log.error(!texture, "Failed to create texture object");
            gl.bindTexture(gl[this.target], texture);
            this.setTextureParameters(gl[this.target], this.isSourcePowerOfTwo());
        };
        return RenderTargetTexture;
    })(wd.Texture);
    wd.RenderTargetTexture = RenderTargetTexture;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var TwoDRenderTargetTexture = (function (_super) {
        __extends(TwoDRenderTargetTexture, _super);
        function TwoDRenderTargetTexture() {
            _super.apply(this, arguments);
            this._renderList = null;
            this.width = 256;
            this.height = 256;
        }
        Object.defineProperty(TwoDRenderTargetTexture.prototype, "renderList", {
            get: function () {
                return this._renderList;
            },
            set: function (renderList) {
                if (wd.JudgeUtils.isArray(renderList)) {
                    this._renderList = wdCb.Collection.create(renderList);
                }
                else if (renderList instanceof wdCb.Collection) {
                    this._renderList = renderList;
                }
                else {
                    wd.Log.error(true, wd.Log.info.FUNC_MUST_BE("renderList", "array or wdCb.Collection"));
                }
            },
            enumerable: true,
            configurable: true
        });
        TwoDRenderTargetTexture.prototype.createEmptyTexture = function () {
            var gl = wd.DeviceManager.getInstance().gl, texture = gl.createTexture();
            this.setEmptyTexture(texture);
            gl.texImage2D(gl[this.target], 0, gl.RGBA, this.width, this.height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
            this.glTexture = texture;
        };
        return TwoDRenderTargetTexture;
    })(wd.RenderTargetTexture);
    wd.TwoDRenderTargetTexture = TwoDRenderTargetTexture;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var ShadowMapTextureUtils = (function () {
        function ShadowMapTextureUtils() {
        }
        ShadowMapTextureUtils.setTextureParameters = function (textureType) {
            var gl = wd.DeviceManager.getInstance().gl, scene = wd.Director.getInstance().scene;
            if (scene.shadowMap.softType === wd.ShadowMapSoftType.PCF) {
                gl.texParameteri(textureType, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
                gl.texParameteri(textureType, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
            }
        };
        return ShadowMapTextureUtils;
    })();
    wd.ShadowMapTextureUtils = ShadowMapTextureUtils;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var MirrorTexture = (function (_super) {
        __extends(MirrorTexture, _super);
        function MirrorTexture() {
            _super.apply(this, arguments);
            this._plane = null;
        }
        MirrorTexture.create = function () {
            var obj = new this();
            return obj;
        };
        MirrorTexture.prototype.init = function () {
            _super.prototype.init.call(this);
            wd.Director.getInstance().scene.addRenderTargetRenderer(wd.MirrorRenderTargetRenderer.create(this));
            return this;
        };
        MirrorTexture.prototype.getSamplerName = function (unit) {
            return this.getSamplerNameByVariableData(unit, wd.VariableType.SAMPLER_2D);
        };
        MirrorTexture.prototype.getPlane = function () {
            var normalData = null, normal = null, p = null;
            if (this._plane && !this.geometry.entityObject.transform.dirtyLocal) {
                return this._plane;
            }
            wd.Log.error(!(this.geometry instanceof wd.PlaneGeometry), wd.Log.info.FUNC_MUST_BE("geometry", "PlaneGeometry"));
            normalData = this.geometry.geometryData.normals;
            normal = this.geometry.entityObject.transform.localRotation.multiplyVector3(wd.Vector3.create(normalData[0], normalData[1], normalData[2])).normalize();
            p = this.getPosition();
            this._plane = wd.Plane.create(normal.x, normal.y, normal.z, -p.dot(normal));
            return this._plane;
        };
        return MirrorTexture;
    })(wd.TwoDRenderTargetTexture);
    wd.MirrorTexture = MirrorTexture;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var TwoDShadowMapTexture = (function (_super) {
        __extends(TwoDShadowMapTexture, _super);
        function TwoDShadowMapTexture() {
            _super.apply(this, arguments);
        }
        TwoDShadowMapTexture.create = function () {
            var obj = new this();
            return obj;
        };
        TwoDShadowMapTexture.prototype.getSamplerName = function (unit) {
            wd.Log.error(!wd.JudgeUtils.isNumber(this.variableData.samplerData), wd.Log.info.FUNC_MUST_BE("shadowMapTexture->variableData.samplerData", "samplerIndex"));
            return "u_twoDShadowMapSampler[" + this.variableData.samplerData + "]";
        };
        TwoDShadowMapTexture.prototype.setTextureParameters = function (textureType, isSourcePowerOfTwo) {
            _super.prototype.setTextureParameters.call(this, textureType, isSourcePowerOfTwo);
            wd.ShadowMapTextureUtils.setTextureParameters(textureType);
        };
        return TwoDShadowMapTexture;
    })(wd.TwoDRenderTargetTexture);
    wd.TwoDShadowMapTexture = TwoDShadowMapTexture;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var CubemapRenderTargetTexture = (function (_super) {
        __extends(CubemapRenderTargetTexture, _super);
        function CubemapRenderTargetTexture() {
            _super.apply(this, arguments);
            this.target = wd.TextureTarget.TEXTURE_CUBE_MAP;
        }
        CubemapRenderTargetTexture.prototype.createEmptyTexture = function () {
            var gl = wd.DeviceManager.getInstance().gl, texture = gl.createTexture(), i = null;
            this.setEmptyTexture(texture);
            for (i = 0; i < 6; i++) {
                gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, gl.RGBA, this.width, this.height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
            }
            this.glTexture = texture;
        };
        return CubemapRenderTargetTexture;
    })(wd.RenderTargetTexture);
    wd.CubemapRenderTargetTexture = CubemapRenderTargetTexture;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var CubemapShadowMapTexture = (function (_super) {
        __extends(CubemapShadowMapTexture, _super);
        function CubemapShadowMapTexture() {
            _super.apply(this, arguments);
        }
        CubemapShadowMapTexture.create = function () {
            var obj = new this();
            return obj;
        };
        CubemapShadowMapTexture.prototype.getSamplerName = function (unit) {
            wd.Log.error(!wd.JudgeUtils.isNumber(this.variableData.samplerData), wd.Log.info.FUNC_MUST_BE("shadowMapTexture->variableData.samplerData", "samplerIndex"));
            return "u_cubemapShadowMapSampler[" + this.variableData.samplerData + "]";
        };
        return CubemapShadowMapTexture;
    })(wd.CubemapRenderTargetTexture);
    wd.CubemapShadowMapTexture = CubemapShadowMapTexture;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var DynamicCubemapTexture = (function (_super) {
        __extends(DynamicCubemapTexture, _super);
        function DynamicCubemapTexture() {
            _super.apply(this, arguments);
            this._renderList = null;
            this.size = 256;
            this.near = 0.1;
            this.far = 100;
            this.mode = null;
        }
        DynamicCubemapTexture.create = function () {
            var obj = new this();
            return obj;
        };
        Object.defineProperty(DynamicCubemapTexture.prototype, "renderList", {
            get: function () {
                return this._renderList;
            },
            set: function (renderList) {
                if (wd.JudgeUtils.isDirectObject(renderList)) {
                    this._renderList = wdCb.Hash.create(renderList);
                }
                else if (renderList instanceof wdCb.Hash) {
                    this._renderList = renderList;
                }
                else {
                    wd.Log.error(true, wd.Log.info.FUNC_MUST_BE("renderList", "array or wdCb.Collection"));
                }
            },
            enumerable: true,
            configurable: true
        });
        DynamicCubemapTexture.prototype.init = function () {
            _super.prototype.init.call(this);
            this.width = this.size;
            this.height = this.size;
            wd.Director.getInstance().scene.addRenderTargetRenderer(wd.DynamicCubemapRenderTargetRenderer.create(this));
            return this;
        };
        DynamicCubemapTexture.prototype.getSamplerName = function (unit) {
            return this.getSamplerNameByVariableData(unit, wd.VariableType.SAMPLER_CUBE);
        };
        return DynamicCubemapTexture;
    })(wd.CubemapRenderTargetTexture);
    wd.DynamicCubemapTexture = DynamicCubemapTexture;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var BasicTexture = (function (_super) {
        __extends(BasicTexture, _super);
        function BasicTexture() {
            _super.apply(this, arguments);
            this.p_sourceRegionMethod = null;
            this.generateMipmaps = null;
            this.format = null;
            this.source = null;
            this.repeatRegion = null;
            this.sourceRegion = null;
            this.sourceRegionMapping = null;
            this.flipY = null;
            this.premultiplyAlpha = null;
            this.unpackAlignment = null;
            this.type = null;
            this.mipmaps = null;
            this.anisotropy = null;
            this.needUpdate = null;
        }
        Object.defineProperty(BasicTexture.prototype, "sourceRegionMethod", {
            get: function () {
                return this.p_sourceRegionMethod;
            },
            set: function (sourceRegionMethod) {
                this.p_sourceRegionMethod = sourceRegionMethod;
            },
            enumerable: true,
            configurable: true
        });
        BasicTexture.prototype.initWhenCreate = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var gl = wd.DeviceManager.getInstance().gl;
            this.glTexture = gl.createTexture();
        };
        BasicTexture.prototype.init = function () {
        };
        BasicTexture.prototype.update = function (index) {
            var gl = wd.DeviceManager.getInstance().gl, isSourcePowerOfTwo = this.isSourcePowerOfTwo();
            this.bindToUnit(index);
            gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, this.flipY);
            gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, this.premultiplyAlpha);
            gl.pixelStorei(gl.UNPACK_ALIGNMENT, this.unpackAlignment);
            if (this.needClampMaxSize()) {
                this.clampToMaxSize();
                isSourcePowerOfTwo = this.isSourcePowerOfTwo();
                if (!isSourcePowerOfTwo) {
                    wd.Log.warn("texture size is not power of two after clampToMaxSize()");
                }
            }
            this.setTextureParameters(gl[this.target], isSourcePowerOfTwo);
            this.allocateSourceToTexture(isSourcePowerOfTwo);
            if (this.generateMipmaps && isSourcePowerOfTwo) {
                gl.generateMipmap(gl[this.target]);
            }
            this.needUpdate = false;
            return this;
        };
        BasicTexture.prototype.getSamplerName = function (unit) {
            return this.getSamplerNameByVariableData(unit, wd.VariableType.SAMPLER_2D);
        };
        BasicTexture.prototype.sendOtherData = function (program, unit) {
            var sourceRegion = null;
            if (this.sourceRegion && this.sourceRegionMethod === wd.TextureSourceRegionMethod.CHANGE_TEXCOORDS_IN_GLSL) {
                sourceRegion = this._convertSourceRegionToUV();
            }
            else {
                sourceRegion = wd.RectRegion.create(0, 0, 1, 1);
            }
            program.sendUniformData("u_sourceRegion", wd.VariableType.FLOAT_4, sourceRegion);
            program.sendUniformData("u_repeatRegion", wd.VariableType.FLOAT_4, this.repeatRegion);
            return this;
        };
        BasicTexture.prototype.needClampMaxSize = function () {
            if (!this.source) {
                return false;
            }
            return wd.BasicTextureUtils.needClampMaxSize(wd.GPUDetector.getInstance().maxTextureSize, this.source.width, this.source.height);
        };
        BasicTexture.prototype.clampToMaxSize = function () {
            this.source = wd.BasicTextureUtils.clampToMaxSize(this.source, wd.GPUDetector.getInstance().maxTextureSize);
        };
        BasicTexture.prototype.setTextureParameters = function (textureType, isSourcePowerOfTwo) {
            _super.prototype.setTextureParameters.call(this, textureType, isSourcePowerOfTwo);
            this._setAnisotropy(textureType);
        };
        BasicTexture.prototype.isSourcePowerOfTwo = function () {
            return wd.BasicTextureUtils.isSourcePowerOfTwo(this.sourceRegion, this.sourceRegionMethod, this.width, this.height);
        };
        BasicTexture.prototype._setAnisotropy = function (textureType) {
            var gpu = wd.GPUDetector.getInstance(), gl = wd.DeviceManager.getInstance().gl;
            if (!gpu.extensionTextureFilterAnisotropic) {
                return;
            }
            if (this.anisotropy > 1) {
                gl.texParameterf(textureType, gpu.extensionTextureFilterAnisotropic.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(this.anisotropy, gpu.maxAnisotropy));
            }
        };
        BasicTexture.prototype._convertSourceRegionCanvasMapToUV = function (sourceRegion) {
            var width = this.width, height = this.height, region = null;
            region = wd.RectRegion.create(sourceRegion.x / width, sourceRegion.y / height, sourceRegion.width / width, sourceRegion.height / height);
            region.y = 1 - region.y - region.height;
            return region;
        };
        BasicTexture.prototype._convertSourceRegionToUV = function () {
            if (this.sourceRegionMapping === wd.TextureSourceRegionMapping.CANVAS) {
                return this._convertSourceRegionCanvasMapToUV(this.sourceRegion);
            }
            else if (this.sourceRegionMapping === wd.TextureSourceRegionMapping.UV) {
                return this.sourceRegion;
            }
        };
        __decorate([
            wd.virtual
        ], BasicTexture.prototype, "needClampMaxSize", null);
        return BasicTexture;
    })(wd.Texture);
    wd.BasicTexture = BasicTexture;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var TwoDTexture = (function (_super) {
        __extends(TwoDTexture, _super);
        function TwoDTexture() {
            _super.apply(this, arguments);
        }
        TwoDTexture.prototype.initWhenCreate = function (asset) {
            _super.prototype.initWhenCreate.call(this);
            asset.copyTo(this);
        };
        return TwoDTexture;
    })(wd.BasicTexture);
    wd.TwoDTexture = TwoDTexture;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var CommonTexture = (function (_super) {
        __extends(CommonTexture, _super);
        function CommonTexture() {
            _super.apply(this, arguments);
        }
        CommonTexture.prototype.allocateSourceToTexture = function (isSourcePowerOfTwo) {
            var mipmapCmd = null, noMipmapCmd = null, gl = wd.DeviceManager.getInstance().gl;
            if (isSourcePowerOfTwo && this.mipmaps.getCount() > 0) {
                mipmapCmd = wd.DrawMipmapTwoDTextureCommand.create();
                mipmapCmd.mipmaps = this.mipmaps;
                mipmapCmd.format = this.format;
                mipmapCmd.type = this.type;
                mipmapCmd.sourceRegion = this.sourceRegion;
                mipmapCmd.sourceRegionMethod = this.sourceRegionMethod;
                mipmapCmd.glTarget = gl.TEXTURE_2D;
                mipmapCmd.execute();
                this.generateMipmaps = false;
            }
            else {
                noMipmapCmd = wd.DrawNoMipmapTwoDTextureCommand.create();
                noMipmapCmd.source = this.source;
                noMipmapCmd.format = this.format;
                noMipmapCmd.type = this.type;
                noMipmapCmd.sourceRegion = this.sourceRegion;
                noMipmapCmd.sourceRegionMethod = this.sourceRegionMethod;
                noMipmapCmd.glTarget = gl.TEXTURE_2D;
                noMipmapCmd.execute();
            }
        };
        return CommonTexture;
    })(wd.TwoDTexture);
    wd.CommonTexture = CommonTexture;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var ImageTexture = (function (_super) {
        __extends(ImageTexture, _super);
        function ImageTexture() {
            _super.apply(this, arguments);
        }
        ImageTexture.create = function (arg) {
            var obj = new this();
            obj.initWhenCreate(arg);
            return obj;
        };
        ImageTexture.prototype.initWhenCreate = function (arg) {
            if (arguments[0] instanceof wd.ImageTextureAsset) {
                var asset = arguments[0];
                _super.prototype.initWhenCreate.call(this, asset);
            }
            else {
                var canvas = arguments[0];
                _super.prototype.initWhenCreate.call(this, wd.ImageTextureAsset.create(canvas));
            }
        };
        return ImageTexture;
    })(wd.CommonTexture);
    wd.ImageTexture = ImageTexture;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var VideoTexture = (function (_super) {
        __extends(VideoTexture, _super);
        function VideoTexture() {
            _super.apply(this, arguments);
            this._video = null;
            this._startLoopHandler = null;
        }
        VideoTexture.create = function (asset) {
            var obj = new this();
            obj.initWhenCreate(asset);
            return obj;
        };
        VideoTexture.prototype.initWhenCreate = function (asset) {
            _super.prototype.initWhenCreate.call(this, asset);
            this._video = asset.video;
        };
        VideoTexture.prototype.init = function () {
            var _this = this;
            _super.prototype.init.call(this);
            this._startLoopHandler = wdCb.FunctionUtils.bind(this, function () {
                if (_this._video.isStop) {
                    _this.needUpdate = false;
                }
                else {
                    _this.needUpdate = true;
                }
            });
            wd.EventManager.on(wd.EngineEvent.STARTLOOP, this._startLoopHandler);
            return this;
        };
        VideoTexture.prototype.dispose = function () {
            wd.EventManager.off(wd.EngineEvent.STARTLOOP, this._startLoopHandler);
        };
        VideoTexture.prototype.needClampMaxSize = function () {
            return false;
        };
        return VideoTexture;
    })(wd.CommonTexture);
    wd.VideoTexture = VideoTexture;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var CubemapTexture = (function (_super) {
        __extends(CubemapTexture, _super);
        function CubemapTexture(assets) {
            _super.call(this);
            this.assets = null;
            this.textures = wdCb.Collection.create();
            this.mode = null;
            this.target = wd.TextureTarget.TEXTURE_CUBE_MAP;
            this._areAllCompressedAsset = false;
            this.assets = assets;
        }
        CubemapTexture.create = function (assets) {
            var obj = new this(assets);
            obj.initWhenCreate(assets);
            return obj;
        };
        CubemapTexture.prototype.initWhenCreate = function (assets) {
            _super.prototype.initWhenCreate.call(this);
            if (this._areAssetsAllCompressedAsset(assets)) {
                this._areAllCompressedAsset = true;
            }
            else {
                this._areAllCompressedAsset = false;
            }
            this._createTextures(assets);
            this._getRepresentAsset(assets).copyToCubemapTexture(this);
            if (this._areAllCompressedAsset) {
                this.generateMipmaps = false;
                if (this._hasNoMipmapCompressedAsset()) {
                    this.minFilter = this.filterFallback(this.minFilter);
                }
            }
            else {
                this.generateMipmaps = true;
            }
            this.flipY = false;
        };
        CubemapTexture.prototype.getSamplerName = function (unit) {
            return this.getSamplerNameByVariableData(unit, wd.VariableType.SAMPLER_CUBE);
        };
        CubemapTexture.prototype.sendOtherData = function (program, unit) {
            program.sendUniformData("u_repeatRegion", wd.VariableType.FLOAT_4, this.repeatRegion);
            return this;
        };
        CubemapTexture.prototype.allocateSourceToTexture = function (isSourcePowerOfTwo) {
            if (this._areAllCompressedAsset) {
                this.textures.forEach(function (texture, i) {
                    texture.draw(i);
                });
            }
            else {
                this.textures.forEach(function (texture, i) {
                    texture.draw(i);
                });
            }
        };
        CubemapTexture.prototype.needClampMaxSize = function () {
            var needAllClampMaxSize = false;
            this.textures.forEach(function (texture) {
                if (texture.needClampMaxSize()) {
                    needAllClampMaxSize = true;
                    return wdCb.$BREAK;
                }
            });
            return needAllClampMaxSize;
        };
        CubemapTexture.prototype.isSourcePowerOfTwo = function () {
            var areAllSourcePowerOfTwo = true;
            this.textures.forEach(function (texture) {
                if (!texture.isSourcePowerOfTwo()) {
                    areAllSourcePowerOfTwo = false;
                    return wdCb.$BREAK;
                }
            });
            return areAllSourcePowerOfTwo;
        };
        CubemapTexture.prototype.clampToMaxSize = function () {
            this.textures.forEach(function (texture) {
                texture.clampToMaxSize();
            });
        };
        CubemapTexture.prototype._hasNoMipmapCompressedAsset = function () {
            var self = this;
            if (!this._areAllCompressedAsset) {
                return false;
            }
            return this.textures.filter(function (texture) {
                return !self._isMipmapFilter(texture.minFilter);
            }).getCount() > 0;
        };
        CubemapTexture.prototype._isMipmapFilter = function (filter) {
            return filter === wd.TextureFilterMode.LINEAR_MIPMAP_LINEAR || filter === wd.TextureFilterMode.LINEAR_MIPMAP_NEAREST || filter === wd.TextureFilterMode.NEAREST_MIPMAP_LINEAR || filter === wd.TextureFilterMode.NEAREST_MIPMAP_MEAREST;
        };
        CubemapTexture.prototype._getRepresentAsset = function (assets) {
            return assets[0].asset;
        };
        CubemapTexture.prototype._areAssetsAllImageAssets = function (assets) {
            var areImageAssets = [];
            for (var _i = 0; _i < assets.length; _i++) {
                var data = assets[_i];
                if (data.asset instanceof wd.ImageTextureAsset) {
                    areImageAssets.push(data);
                }
            }
            return areImageAssets.length === 6;
        };
        CubemapTexture.prototype._areAssetsAllCompressedAsset = function (assets) {
            var areCompressedAssets = [];
            for (var _i = 0; _i < assets.length; _i++) {
                var data = assets[_i];
                if (data.asset instanceof wd.CompressedTextureAsset) {
                    areCompressedAssets.push(data);
                }
            }
            return areCompressedAssets.length === 6;
        };
        CubemapTexture.prototype._createTextures = function (assets) {
            var self = this;
            for (var _i = 0; _i < assets.length; _i++) {
                var data = assets[_i];
                var face = data.asset.toCubemapFaceTexture();
                if (data.sourceRegion && face instanceof wd.CubemapFaceImageTexture) {
                    var twoDFace = face;
                    twoDFace.sourceRegion = data.sourceRegion;
                }
                if (data.type) {
                    face.type = data.type;
                }
                self.textures.addChild(face);
            }
        };
        CubemapTexture.prototype._areTextureSizOfAllFaceseEqual = function (assets) {
            var textureWidthSizeArr = [], textureHeightSizeArr = [];
            for (var _i = 0; _i < assets.length; _i++) {
                var data = assets[_i];
                if (data.sourceRegion) {
                    textureWidthSizeArr.push(data.sourceRegion.width);
                    textureHeightSizeArr.push(data.sourceRegion.height);
                }
                else {
                    textureWidthSizeArr.push(data.asset.width);
                    textureHeightSizeArr.push(data.asset.height);
                }
            }
            return this._areAllElementsEqual(textureWidthSizeArr) && this._areAllElementsEqual(textureHeightSizeArr);
        };
        CubemapTexture.prototype._hasSourceRegion = function (assets) {
            for (var _i = 0; _i < assets.length; _i++) {
                var data = assets[_i];
                if (data.sourceRegion) {
                    return true;
                }
            }
            return false;
        };
        CubemapTexture.prototype._areAllElementsEqual = function (arr) {
            var lastEle = arr[0];
            for (var _i = 0; _i < arr.length; _i++) {
                var ele = arr[_i];
                if (ele !== lastEle) {
                    return false;
                }
            }
            return true;
        };
        __decorate([
            wd.require(function (assets) {
                wd.assert(assets.length === 6, wd.Log.info.FUNC_MUST("cubemap", "has 6 assets"));
                wd.assert(this._areAssetsAllImageAssets(assets) || this._areAssetsAllCompressedAsset(assets), wd.Log.info.FUNC_MUST_BE("cubemap six face's assets", "all ImageTextureAsset or all CompressedTextureAsset"));
                if (this._areAssetsAllCompressedAsset(assets)) {
                    wd.assert(!this._hasSourceRegion(assets), wd.Log.info.FUNC_SHOULD_NOT("compressed face", "contain sourceRegion data"));
                }
                wd.assert(this._areTextureSizOfAllFaceseEqual(assets), wd.Log.info.FUNC_MUST_BE("all cubemap faces' texture size", "equal"));
            })
        ], CubemapTexture.prototype, "initWhenCreate", null);
        return CubemapTexture;
    })(wd.BasicTexture);
    wd.CubemapTexture = CubemapTexture;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var CubemapFaceTexture = (function () {
        function CubemapFaceTexture() {
            this.type = wd.TextureType.UNSIGNED_BYTE;
            this.format = null;
            this.width = null;
            this.height = null;
        }
        return CubemapFaceTexture;
    })();
    wd.CubemapFaceTexture = CubemapFaceTexture;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var CubemapFaceImageTexture = (function (_super) {
        __extends(CubemapFaceImageTexture, _super);
        function CubemapFaceImageTexture() {
            _super.apply(this, arguments);
            this.sourceRegion = null;
            this.source = null;
        }
        CubemapFaceImageTexture.create = function (asset) {
            var obj = new this();
            obj.initWhenCreate(asset);
            return obj;
        };
        Object.defineProperty(CubemapFaceImageTexture.prototype, "sourceRegionMethod", {
            get: function () {
                return wd.TextureSourceRegionMethod.DRAW_IN_CANVAS;
            },
            set: function (sourceRegionMethod) {
                var a = sourceRegionMethod;
            },
            enumerable: true,
            configurable: true
        });
        CubemapFaceImageTexture.prototype.initWhenCreate = function (asset) {
            asset.copyToCubemapFaceTexture(this);
        };
        CubemapFaceImageTexture.prototype.isSourcePowerOfTwo = function () {
            return wd.BasicTextureUtils.isSourcePowerOfTwo(this.sourceRegion, this.sourceRegionMethod, this.width, this.height);
        };
        CubemapFaceImageTexture.prototype.needClampMaxSize = function () {
            if (!this.source) {
                return false;
            }
            return wd.BasicTextureUtils.needClampMaxSize(wd.GPUDetector.getInstance().maxCubemapTextureSize, this.source.width, this.source.height);
        };
        CubemapFaceImageTexture.prototype.clampToMaxSize = function () {
            var maxSize = wd.GPUDetector.getInstance().maxCubemapTextureSize;
            this.source = wd.BasicTextureUtils.clampToMaxSize(this.source, maxSize);
        };
        CubemapFaceImageTexture.prototype.draw = function (index) {
            var noMipmapCmd = wd.DrawNoMipmapTwoDTextureCommand.create(), gl = wd.DeviceManager.getInstance().gl;
            noMipmapCmd.source = this.source;
            noMipmapCmd.sourceRegion = this.sourceRegion;
            noMipmapCmd.sourceRegionMethod = this.sourceRegionMethod;
            noMipmapCmd.glTarget = gl.TEXTURE_CUBE_MAP_POSITIVE_X + index;
            noMipmapCmd.format = this.format;
            noMipmapCmd.type = this.type;
            noMipmapCmd.execute();
        };
        __decorate([
            wd.requireSetter(function (sourceRegionMethod) {
                wd.assert(sourceRegionMethod === wd.TextureSourceRegionMethod.DRAW_IN_CANVAS, wd.Log.info.FUNC_SUPPORT("cubemap twoD face texture->sourceRegionMethod only", "DRAW_IN_CANVAS"));
            })
        ], CubemapFaceImageTexture.prototype, "sourceRegionMethod", null);
        return CubemapFaceImageTexture;
    })(wd.CubemapFaceTexture);
    wd.CubemapFaceImageTexture = CubemapFaceImageTexture;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var CubemapFaceCompressedTexture = (function (_super) {
        __extends(CubemapFaceCompressedTexture, _super);
        function CubemapFaceCompressedTexture() {
            _super.apply(this, arguments);
            this.mipmaps = null;
            this.minFilter = null;
        }
        CubemapFaceCompressedTexture.create = function (asset) {
            var obj = new this();
            obj.initWhenCreate(asset);
            return obj;
        };
        CubemapFaceCompressedTexture.prototype.initWhenCreate = function (asset) {
            asset.copyToCubemapFaceTexture(this);
        };
        CubemapFaceCompressedTexture.prototype.isSourcePowerOfTwo = function () {
            return wd.BasicTextureUtils.isSourcePowerOfTwo(null, null, this.width, this.height);
        };
        CubemapFaceCompressedTexture.prototype.needClampMaxSize = function () {
            return wd.BasicTextureUtils.needClampMaxSize(wd.GPUDetector.getInstance().maxCubemapTextureSize, this.width, this.height);
        };
        CubemapFaceCompressedTexture.prototype.clampToMaxSize = function () {
            wd.Log.warn("CubemapFaceCompressedTexture's texture size is over maxCubemapTextureSize");
        };
        CubemapFaceCompressedTexture.prototype.draw = function (index) {
            var compressedCmd = wd.DrawCompressedTextureCommand.create(), gl = wd.DeviceManager.getInstance().gl;
            compressedCmd.glTarget = gl.TEXTURE_CUBE_MAP_POSITIVE_X + index;
            compressedCmd.type = this.type;
            compressedCmd.format = this.format;
            compressedCmd.mipmaps = this.mipmaps;
            compressedCmd.execute();
        };
        return CubemapFaceCompressedTexture;
    })(wd.CubemapFaceTexture);
    wd.CubemapFaceCompressedTexture = CubemapFaceCompressedTexture;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var CompressedTexture = (function (_super) {
        __extends(CompressedTexture, _super);
        function CompressedTexture() {
            _super.apply(this, arguments);
        }
        CompressedTexture.create = function (asset) {
            var obj = new this();
            obj.initWhenCreate(asset);
            return obj;
        };
        Object.defineProperty(CompressedTexture.prototype, "sourceRegionMethod", {
            get: function () {
                wd.Log.assert(this.p_sourceRegionMethod === wd.TextureSourceRegionMethod.DRAW_IN_CANVAS, "compressed texture not support TextureSourceRegionMethod.DRAW_IN_CANVAS, will use TextureSourceRegionMethod.CHANGE_TEXCOORDS_IN_GLSL instead");
                return wd.TextureSourceRegionMethod.CHANGE_TEXCOORDS_IN_GLSL;
            },
            enumerable: true,
            configurable: true
        });
        CompressedTexture.prototype.allocateSourceToTexture = function (isSourcePowerOfTwo) {
            var gl = wd.DeviceManager.getInstance().gl, compressedCmd = wd.DrawCompressedTextureCommand.create();
            compressedCmd.glTarget = gl.TEXTURE_2D;
            compressedCmd.type = this.type;
            compressedCmd.format = this.format;
            compressedCmd.mipmaps = this.mipmaps;
            compressedCmd.sourceRegion = this.sourceRegion;
            compressedCmd.sourceRegionMethod = this.sourceRegionMethod;
            compressedCmd.execute();
            if (this.mipmaps.getCount() > 1) {
                this.generateMipmaps = false;
            }
        };
        CompressedTexture.prototype.needClampMaxSize = function () {
            return false;
        };
        return CompressedTexture;
    })(wd.TwoDTexture);
    wd.CompressedTexture = CompressedTexture;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var DrawTextureCommand = (function () {
        function DrawTextureCommand() {
            this.format = null;
            this.type = null;
            this.sourceRegion = null;
            this.sourceRegionMethod = wd.TextureSourceRegionMethod.CHANGE_TEXCOORDS_IN_GLSL;
            this.glTarget = null;
        }
        DrawTextureCommand.prototype.getDrawTarget = function (source, sourceRegion) {
            if (sourceRegion === void 0) { sourceRegion = this.sourceRegion; }
            var result = null;
            if (wd.BasicTextureUtils.isDrawPartOfTexture(sourceRegion, this.sourceRegionMethod)) {
                result = wd.BasicTextureUtils.drawPartOfTextureByCanvas(source, sourceRegion.width, sourceRegion.height, sourceRegion.x, sourceRegion.y, sourceRegion.width, sourceRegion.height, 0, 0, sourceRegion.width, sourceRegion.height);
            }
            else {
                result = source;
            }
            return result;
        };
        return DrawTextureCommand;
    })();
    wd.DrawTextureCommand = DrawTextureCommand;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var DrawCompressedTextureCommand = (function (_super) {
        __extends(DrawCompressedTextureCommand, _super);
        function DrawCompressedTextureCommand() {
            _super.apply(this, arguments);
            this.mipmaps = null;
        }
        DrawCompressedTextureCommand.create = function () {
            var obj = new this();
            return obj;
        };
        DrawCompressedTextureCommand.prototype.execute = function () {
            var gl = wd.DeviceManager.getInstance().gl, self = this;
            wd.Log.error(this.format === null, wd.Log.info.FUNC_NOT_SUPPORT(this.format));
            if (this.format !== wd.TextureFormat.RGBA) {
                this.mipmaps.forEach(function (mipmap, index) {
                    gl.compressedTexImage2D(self.glTarget, index, self.format, mipmap.width, mipmap.height, 0, self.getDrawTarget(mipmap.data));
                });
            }
            else {
                this.mipmaps.forEach(function (mipmap, index) {
                    gl.texImage2D(self.glTarget, index, gl[self.format], mipmap.width, mipmap.height, 0, gl[self.format], gl[self.type], self.getDrawTarget(mipmap.data));
                });
            }
        };
        return DrawCompressedTextureCommand;
    })(wd.DrawTextureCommand);
    wd.DrawCompressedTextureCommand = DrawCompressedTextureCommand;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var DrawTwoDTextureCommand = (function (_super) {
        __extends(DrawTwoDTextureCommand, _super);
        function DrawTwoDTextureCommand() {
            _super.apply(this, arguments);
            this.source = null;
        }
        DrawTwoDTextureCommand.prototype.drawTexture = function (index, source) {
            var gl = wd.DeviceManager.getInstance().gl;
            gl.texImage2D(this.glTarget, index, gl[this.format], gl[this.format], gl[this.type], this.getDrawTarget(source));
        };
        return DrawTwoDTextureCommand;
    })(wd.DrawTextureCommand);
    wd.DrawTwoDTextureCommand = DrawTwoDTextureCommand;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var DrawMipmapTwoDTextureCommand = (function (_super) {
        __extends(DrawMipmapTwoDTextureCommand, _super);
        function DrawMipmapTwoDTextureCommand() {
            _super.apply(this, arguments);
            this.mipmaps = null;
        }
        DrawMipmapTwoDTextureCommand.create = function () {
            var obj = new this();
            return obj;
        };
        DrawMipmapTwoDTextureCommand.prototype.execute = function () {
            var self = this;
            this.mipmaps.forEach(function (mipmap, index) {
                self.drawTexture(index, mipmap);
            });
        };
        return DrawMipmapTwoDTextureCommand;
    })(wd.DrawTwoDTextureCommand);
    wd.DrawMipmapTwoDTextureCommand = DrawMipmapTwoDTextureCommand;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var DrawNoMipmapTwoDTextureCommand = (function (_super) {
        __extends(DrawNoMipmapTwoDTextureCommand, _super);
        function DrawNoMipmapTwoDTextureCommand() {
            _super.apply(this, arguments);
        }
        DrawNoMipmapTwoDTextureCommand.create = function () {
            var obj = new this();
            return obj;
        };
        DrawNoMipmapTwoDTextureCommand.prototype.execute = function () {
            this.drawTexture(0, this.source);
        };
        return DrawNoMipmapTwoDTextureCommand;
    })(wd.DrawTwoDTextureCommand);
    wd.DrawNoMipmapTwoDTextureCommand = DrawNoMipmapTwoDTextureCommand;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var Video = (function () {
        function Video(_a) {
            var urlArr = _a.urlArr, _b = _a.onLoad, onLoad = _b === void 0 ? function (video) { } : _b, _c = _a.onError, onError = _c === void 0 ? function (err) { } : _c;
            this.url = null;
            this.source = null;
            this.isStop = false;
            this._urlArr = null;
            this._onLoad = null;
            this._onError = null;
            this._urlArr = wdCb.Collection.create(urlArr);
            this._onLoad = onLoad;
            this._onError = onError;
        }
        Video.create = function (data) {
            var obj = new this(data);
            obj.initWhenCreate();
            return obj;
        };
        Video.prototype.initWhenCreate = function () {
            this.url = this._getCanPlayUrl();
            this.source = document.createElement("video");
            this.source.src = this.url;
            this._bindEvent();
        };
        Video.prototype.play = function () {
            this.isStop = false;
            this.source.play();
        };
        Video.prototype._getCanPlayUrl = function () {
            var self = this, canPlayUrl = null, extnameArr = [];
            this._urlArr.forEach(function (url) {
                var extname = wdCb.PathUtils.extname(url);
                extnameArr.push(extname);
                if (self._canplay(extname)) {
                    canPlayUrl = url;
                    return wdCb.$BREAK;
                }
            });
            wd.Log.error(canPlayUrl === null, wd.Log.info.FUNC_NOT_SUPPORT("browser", extnameArr.join(",")));
            return canPlayUrl;
        };
        Video.prototype._canplay = function (extname) {
            var video = document.createElement("video"), mimeStr = null;
            switch (extname) {
                case '.mp4':
                    mimeStr = 'video/mp4; codecs="avc1.42e01e, mp4a.40.2"';
                    break;
                case ".ogv":
                    mimeStr = 'video/ogg; codecs="theora, vorbis"';
                    break;
                case ".webm":
                    mimeStr = 'video/webm; codecs="vp8, vorbis"';
                    break;
                default:
                    wd.Log.error(true, wd.Log.info.FUNC_UNEXPECT(extname));
                    break;
            }
            return !!video.canPlayType && video.canPlayType(mimeStr) !== "";
        };
        Video.prototype._bindEvent = function () {
            var self = this;
            this.source.addEventListener("canplaythrough", function () {
                self._onLoad(self);
            }, false);
            this.source.addEventListener("error", function () {
                self._onError("errorCode " + self.source.error.code);
            }, false);
            this.source.addEventListener("ended", function () {
                self.isStop = true;
            }, false);
        };
        return Video;
    })();
    wd.Video = Video;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var VideoManager = (function () {
        function VideoManager() {
        }
        VideoManager.getInstance = function () {
            if (this._instance === null) {
                this._instance = new this();
            }
            return this._instance;
        };
        VideoManager.prototype.play = function (id) {
            var asset = wd.VideoLoader.getInstance().get(id), video = null;
            wd.Log.error(!asset, wd.Log.info.FUNC_NOT_EXIST("video asset which id is " + id));
            video = asset.video;
            video.play();
        };
        VideoManager._instance = null;
        return VideoManager;
    })();
    wd.VideoManager = VideoManager;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var ShaderChunk = (function () {
        function ShaderChunk() {
        }
        ShaderChunk.empty = { top: "", define: "", varDeclare: "", funcDeclare: "", funcDefine: "", body: "" };
        ShaderChunk.NULL = -1.0;
        ShaderChunk.morphNormal_vertex = { top: "", define: "", varDeclare: "", funcDeclare: "", funcDefine: "", body: "vec3 a_normal = a_currentFrameNormal + (a_nextFrameNormal - a_currentFrameNormal) * u_interpolation;\n", };
        ShaderChunk.morphVertice_vertex = { top: "", define: "", varDeclare: "", funcDeclare: "", funcDefine: "", body: "vec3 a_position = a_currentFramePosition + (a_nextFramePosition - a_currentFramePosition) * u_interpolation;\n", };
        ShaderChunk.basicEnd_fragment = { top: "", define: "", varDeclare: "", funcDeclare: "", funcDefine: "", body: "gl_FragColor = vec4(totalColor.rgb, totalColor.a * u_opacity);\n", };
        ShaderChunk.basic_fragment = { top: "", define: "", varDeclare: "varying vec3 v_color;\n", funcDeclare: "", funcDefine: "", body: "vec4 totalColor = vec4(v_color, 1.0);\n", };
        ShaderChunk.basic_vertex = { top: "", define: "", varDeclare: "varying vec3 v_color;\n", funcDeclare: "", funcDefine: "", body: "v_color = a_color;\n", };
        ShaderChunk.common_define = { top: "", define: "#define NULL -1.0\n", varDeclare: "", funcDeclare: "", funcDefine: "", body: "", };
        ShaderChunk.common_fragment = { top: "", define: "", varDeclare: "", funcDeclare: "", funcDefine: "", body: "", };
        ShaderChunk.common_function = { top: "", define: "", varDeclare: "", funcDeclare: "", funcDefine: "mat2 transpose(mat2 m) {\n  return mat2(  m[0][0], m[1][0],   // new col 0\n                m[0][1], m[1][1]    // new col 1\n             );\n  }\nmat3 transpose(mat3 m) {\n  return mat3(  m[0][0], m[1][0], m[2][0],  // new col 0\n                m[0][1], m[1][1], m[2][1],  // new col 1\n                m[0][2], m[1][2], m[2][2]   // new col 1\n             );\n  }\n", body: "", };
        ShaderChunk.common_vertex = { top: "", define: "", varDeclare: "", funcDeclare: "", funcDefine: "", body: "", };
        ShaderChunk.highp_fragment = { top: "precision highp float;\nprecision highp int;\n", define: "", varDeclare: "", funcDeclare: "", funcDefine: "", body: "", };
        ShaderChunk.lowp_fragment = { top: "precision lowp float;\nprecision lowp int;\n", define: "", varDeclare: "", funcDeclare: "", funcDefine: "", body: "", };
        ShaderChunk.mediump_fragment = { top: "precision mediump float;\nprecision mediump int;\n", define: "", varDeclare: "", funcDeclare: "", funcDefine: "", body: "", };
        ShaderChunk.map_forBasic_fragment = { top: "", define: "", varDeclare: "varying vec2 v_mapCoord;\n", funcDeclare: "", funcDefine: "", body: "totalColor *= texture2D(u_sampler2D0, v_mapCoord);\n", };
        ShaderChunk.map_forBasic_vertex = { top: "", define: "", varDeclare: "varying vec2 v_mapCoord;\n", funcDeclare: "", funcDefine: "", body: "vec2 sourceTexCoord = a_texCoord * u_sourceRegion.zw + u_sourceRegion.xy;\n    v_mapCoord = sourceTexCoord * u_repeatRegion.zw + u_repeatRegion.xy;\n", };
        ShaderChunk.multi_map_forBasic_fragment = { top: "", define: "", varDeclare: "", funcDeclare: "", funcDefine: "vec4 getMapColor(){\n            vec4 color0 = texture2D(u_sampler2D0, v_mapCoord);\n            vec4 color1 = texture2D(u_sampler2D1, v_mapCoord);\n            if(u_combineMode == 0){\n                return mix(color0, color1, u_mixRatio);\n            }\n            else if(u_combineMode == 1){\n                return color0 * color1;\n            }\n            else if(u_combineMode == 2){\n                return color0 + color1;\n            }\n		}\n", body: "totalColor *= getMapColor();\n", };
        ShaderChunk.lightCommon_fragment = { top: "", define: "", varDeclare: "varying vec3 v_worldPosition;\n#if POINT_LIGHTS_COUNT > 0\nstruct PointLight {\n    vec3 position;\n    vec3 color;\n    float intensity;\n\n    float range;\n    float constant;\n    float linear;\n    float quadratic;\n};\nuniform PointLight u_pointLights[POINT_LIGHTS_COUNT];\n\n#endif\n\n\n#if DIRECTION_LIGHTS_COUNT > 0\nstruct DirectionLight {\n    vec3 position;\n\n    float intensity;\n\n    vec3 color;\n};\nuniform DirectionLight u_directionLights[DIRECTION_LIGHTS_COUNT];\n#endif\n", funcDeclare: "", funcDefine: "", body: "", };
        ShaderChunk.lightCommon_vertex = { top: "", define: "", varDeclare: "varying vec3 v_worldPosition;\n#if POINT_LIGHTS_COUNT > 0\nstruct PointLight {\n    vec3 position;\n    vec3 color;\n    float intensity;\n\n    float range;\n    float constant;\n    float linear;\n    float quadratic;\n};\nuniform PointLight u_pointLights[POINT_LIGHTS_COUNT];\n\n#endif\n\n\n#if DIRECTION_LIGHTS_COUNT > 0\nstruct DirectionLight {\n    vec3 position;\n\n    float intensity;\n\n    vec3 color;\n};\nuniform DirectionLight u_directionLights[DIRECTION_LIGHTS_COUNT];\n#endif\n", funcDeclare: "", funcDefine: "", body: "v_worldPosition = vec3(u_mMatrix * vec4(a_position, 1.0));\n", };
        ShaderChunk.lightEnd_fragment = { top: "", define: "", varDeclare: "", funcDeclare: "", funcDefine: "", body: "gl_FragColor = vec4(totalColor.rgb, totalColor.a * u_opacity);\n", };
        ShaderChunk.light_common = { top: "", define: "", varDeclare: "", funcDeclare: "vec3 getDirectionLightDirByLightPos(vec3 lightPos);\nvec3 getPointLightDirByLightPos(vec3 lightPos);\nvec3 getPointLightDirByLightPos(vec3 lightPos, vec3 worldPosition);\n", funcDefine: "vec3 getDirectionLightDirByLightPos(vec3 lightPos){\n    return lightPos - vec3(0.0);\n    //return vec3(0.0) - lightPos;\n}\nvec3 getPointLightDirByLightPos(vec3 lightPos){\n    return lightPos - v_worldPosition;\n}\nvec3 getPointLightDirByLightPos(vec3 lightPos, vec3 worldPosition){\n    return lightPos - worldPosition;\n}\n", body: "", };
        ShaderChunk.light_fragment = { top: "", define: "", varDeclare: "", funcDeclare: "", funcDefine: "float getBlinnPhongShininess(float shininess, vec3 normal, vec3 lightDir, vec3 viewDir, float dotResultBetweenNormAndLight){\n    vec3 halfAngle = normalize(lightDir + viewDir);\n    float blinnTerm = dot(normal, halfAngle);\n\n    blinnTerm = clamp(blinnTerm, 0.0, 1.0);\n    blinnTerm = dotResultBetweenNormAndLight < 0.0 ? 0.0 : blinnTerm;\n    blinnTerm = pow(blinnTerm, shininess);\n\n	return blinnTerm;\n}\n\nvec3 calcLight(vec3 lightDir, vec3 color, float intensity, float attenuation, vec3 normal, vec3 viewDir)\n{\n    vec3 materialDiffuse = getMaterialDiffuse();\n    vec3 materialSpecular = getMaterialSpecular();\n\n    float dotResultBetweenNormAndLight = dot(normal, lightDir);\n    float diff = max(dotResultBetweenNormAndLight, 0.0);\n\n\n    vec3 ambientColor = u_ambient * materialDiffuse;\n\n    vec3 diffuseColor = diff * color * materialDiffuse * intensity;\n\n\n    float spec = getBlinnPhongShininess(u_shininess, normal, lightDir, viewDir, dotResultBetweenNormAndLight);\n\n    vec3 specularColor = spec * materialSpecular * intensity;\n\n    return  ambientColor + attenuation * (diffuseColor + specularColor);\n}\n\n\n\n\n\n#if POINT_LIGHTS_COUNT > 0\nvec3 calcPointLight(vec3 lightDir, PointLight light, vec3 normal, vec3 viewDir)\n{\n    //lightDir is not normalize computing distance\n    float distance = length(lightDir);\n\n    float attenuation = 0.0;\n    if(distance < light.range)\n    {\n        attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * (distance * distance));\n    }\n\n    lightDir = normalize(lightDir);\n\n    return calcLight(lightDir, light.color, light.intensity, attenuation, normal, viewDir);\n}\n#endif\n\n\n\n#if DIRECTION_LIGHTS_COUNT > 0\nvec3 calcDirectionLight(vec3 lightDir, DirectionLight light, vec3 normal, vec3 viewDir)\n{\n    float attenuation = 1.0;\n\n    lightDir = normalize(lightDir);\n\n    return calcLight(lightDir, light.color, light.intensity, attenuation, normal, viewDir);\n}\n#endif\n\n\n\nvec3 calcTotalLight(vec3 norm, vec3 viewDir){\n    vec3 totalLight = vec3(0.0);\n\n    #if POINT_LIGHTS_COUNT > 0\n       for(int i = 0; i < POINT_LIGHTS_COUNT; i++){\n            totalLight += calcPointLight(getPointLightDir(i), u_pointLights[i], norm, viewDir);\n       }\n    #endif\n\n    #if DIRECTION_LIGHTS_COUNT > 0\n       for(int i = 0; i < DIRECTION_LIGHTS_COUNT; i++){\n            totalLight += calcDirectionLight(getDirectionLightDir(i), u_directionLights[i], norm, viewDir);\n       }\n    #endif\n\n    return totalLight;\n}\n", body: "vec3 normal = normalize(getNormal());\n\n	#ifdef BOTH_SIDE\n		normal = normal * (-1.0 + 2.0 * float(gl_FrontFacing));\n	#endif\n\n    vec3 viewDir = normalize(getViewDir());\n\n    vec4 totalColor = vec4(calcTotalLight(normal, viewDir), 1.0);\n\n    totalColor *= vec4(getShadowVisibility(), 1.0);\n", };
        ShaderChunk.light_vertex = { top: "", define: "", varDeclare: "", funcDeclare: "", funcDefine: "", body: "gl_Position = u_pMatrix * u_vMatrix * vec4(v_worldPosition, 1.0);\n", };
        ShaderChunk.mirror_forBasic_fragment = { top: "", define: "", varDeclare: "varying vec4 v_mirrorCoord;\n", funcDeclare: "", funcDefine: "//todo add more blend way to mix mirror color and textureColor\n		float blendOverlay(float base, float blend) {\n			return( base < 0.5 ? ( 2.0 * base * blend ) : (1.0 - 2.0 * ( 1.0 - base ) * ( 1.0 - blend ) ) );\n		}\n		vec4 getMirrorColor(in vec4 materialColor){\n			vec4 color = texture2DProj(u_mirrorSampler, v_mirrorCoord);\n\n			color = vec4(blendOverlay(materialColor.r, color.r), blendOverlay(materialColor.g, color.g), blendOverlay(materialColor.b, color.b), 1.0);\n\n			return color;\n		}\n", body: "totalColor = getMirrorColor(totalColor);\n", };
        ShaderChunk.mirror_forBasic_vertex = { top: "", define: "", varDeclare: "varying vec4 v_mirrorCoord;\n", funcDeclare: "", funcDefine: "", body: "mat4 textureMatrix = mat4(\n                        0.5, 0.0, 0.0, 0.0,\n                        0.0, 0.5, 0.0, 0.0,\n                        0.0, 0.0, 0.5, 0.0,\n                        0.5, 0.5, 0.5, 1.0\n);\n\nv_mirrorCoord = textureMatrix * gl_Position;\n", };
        ShaderChunk.skybox_fragment = { top: "", define: "", varDeclare: "varying vec3 v_dir;\n", funcDeclare: "", funcDefine: "", body: "gl_FragColor = textureCube(u_samplerCube0, v_dir);\n", };
        ShaderChunk.skybox_vertex = { top: "", define: "", varDeclare: "varying vec3 v_dir;\n", funcDeclare: "", funcDefine: "", body: "vec4 pos = u_pMatrix * mat4(mat3(u_vMatrix)) * u_mMatrix * vec4(a_position, 1.0);\n\n    gl_Position = pos.xyww;\n\n    v_dir = a_position;\n", };
        ShaderChunk.basic_envMap_forBasic_fragment = { top: "", define: "", varDeclare: "varying vec3 v_dir;\n", funcDeclare: "", funcDefine: "", body: "totalColor *= textureCube(u_samplerCube0, v_dir);\n", };
        ShaderChunk.basic_envMap_forBasic_vertex = { top: "", define: "", varDeclare: "varying vec3 v_dir;\n", funcDeclare: "", funcDefine: "", body: "v_dir = a_position;\n", };
        ShaderChunk.envMap_forBasic_fragment = { top: "", define: "", varDeclare: "varying vec3 v_normal;\nvarying vec3 v_position;\n", funcDeclare: "", funcDefine: "", body: "vec3 inDir = normalize(v_position - u_cameraPos);\n", };
        ShaderChunk.envMap_forBasic_vertex = { top: "", define: "", varDeclare: "varying vec3 v_normal;\nvarying vec3 v_position;\n", funcDeclare: "", funcDefine: "", body: "v_normal = normalize( u_normalMatrix * a_normal);\n    v_position = vec3(u_mMatrix * vec4(a_position, 1.0));\n", };
        ShaderChunk.fresnel_forBasic_fragment = { top: "", define: "", varDeclare: "", funcDeclare: "", funcDefine: "float computeFresnelRatio(vec3 inDir, vec3 normal, float refractionRatio){\n    float f = pow(1.0 - refractionRatio, 2.0) / pow(1.0 + refractionRatio, 2.0);\n    float fresnelPower = 5.0;\n    float ratio = f + (1.0 - f) * pow((1.0 - dot(inDir, normal)), fresnelPower);\n\n    return ratio / 100.0;\n}\nvec4 getEnvMapTotalColor(vec3 inDir, vec3 normal){\n    vec3 reflectDir = reflect(inDir, normal);\n    vec3 refractDir = refract(inDir, normal, u_refractionRatio);\n\n    vec4 reflectColor = textureCube(u_samplerCube0, reflectDir);\n    vec4 refractColor = textureCube(u_samplerCube0, refractDir);\n\n    vec4 totalColor = vec4(0.0);\n\n	if(u_reflectivity != NULL){\n        totalColor = mix(reflectColor, refractColor, u_reflectivity);\n	}\n	else{\n        totalColor = mix(reflectColor, refractColor, computeFresnelRatio(inDir, normal, u_refractionRatio));\n	}\n\n	return totalColor;\n}\n", body: "totalColor *= getEnvMapTotalColor(inDir, normalize(v_normal));\n", };
        ShaderChunk.reflection_forBasic_fragment = { top: "", define: "", varDeclare: "", funcDeclare: "", funcDefine: "", body: "totalColor *= textureCube(u_samplerCube0, reflect(inDir, normalize(v_normal)));\n", };
        ShaderChunk.refraction_forBasic_fragment = { top: "", define: "", varDeclare: "", funcDeclare: "", funcDefine: "", body: "totalColor *= textureCube(u_samplerCube0, refract(inDir, normalize(v_normal), u_refractionRatio));\n", };
        ShaderChunk.basic_envMap_forLight_fragment = { top: "", define: "", varDeclare: "varying vec3 v_basicEnvMap_dir;\n", funcDeclare: "", funcDefine: "", body: "totalColor *= textureCube(u_samplerCube0, v_basicEnvMap_dir);\n", };
        ShaderChunk.basic_envMap_forLight_vertex = { top: "", define: "", varDeclare: "varying vec3 v_basicEnvMap_dir;\n", funcDeclare: "", funcDefine: "", body: "v_basicEnvMap_dir = a_position;\n", };
        ShaderChunk.envMap_forLight_fragment = { top: "", define: "", varDeclare: "", funcDeclare: "", funcDefine: "", body: "vec3 inDir = normalize(v_worldPosition - u_cameraPos);\n", };
        ShaderChunk.envMap_forLight_vertex = { top: "", define: "", varDeclare: "", funcDeclare: "", funcDefine: "", body: "", };
        ShaderChunk.fresnel_forLight_fragment = { top: "", define: "", varDeclare: "", funcDeclare: "", funcDefine: "float computeFresnelRatio(vec3 inDir, vec3 normal, float refractionRatio){\n    float f = pow(1.0 - refractionRatio, 2.0) / pow(1.0 + refractionRatio, 2.0);\n    float fresnelPower = 5.0;\n    float ratio = f + (1.0 - f) * pow((1.0 - dot(inDir, normal)), fresnelPower);\n\n    return ratio / 100.0;\n}\n\nvec4 getEnvMapTotalColor(vec3 inDir, vec3 normal){\n    vec3 reflectDir = reflect(inDir, normal);\n    vec3 refractDir = refract(inDir, normal, u_refractionRatio);\n\n    vec4 reflectColor = textureCube(u_samplerCube0, reflectDir);\n    vec4 refractColor = textureCube(u_samplerCube0, refractDir);\n\n    vec4 totalColor = vec4(0.0);\n\n	if(u_reflectivity != NULL){\n        totalColor = mix(reflectColor, refractColor, u_reflectivity);\n	}\n	else{\n        totalColor = mix(reflectColor, refractColor, computeFresnelRatio(inDir, normal, u_refractionRatio));\n	}\n\n	return totalColor;\n}\n", body: "totalColor *= getEnvMapTotalColor(inDir, normalize(getNormal()));\n", };
        ShaderChunk.reflection_forLight_fragment = { top: "", define: "", varDeclare: "", funcDeclare: "", funcDefine: "", body: "totalColor *= textureCube(u_samplerCube0, reflect(inDir, normalize(getNormal())));\n", };
        ShaderChunk.refraction_forLight_fragment = { top: "", define: "", varDeclare: "", funcDeclare: "", funcDefine: "", body: "totalColor *= textureCube(u_samplerCube0, refract(inDir, getNormal(), u_refractionRatio));\n", };
        ShaderChunk.diffuseMap_fragment = { top: "", define: "", varDeclare: "varying vec2 v_diffuseMapTexCoord;\n", funcDeclare: "", funcDefine: "vec3 getMaterialDiffuse() {\n        return vec3(texture2D(u_diffuseMapSampler, v_diffuseMapTexCoord));\n    }\n", body: "", };
        ShaderChunk.diffuseMap_vertex = { top: "", define: "", varDeclare: "varying vec2 v_diffuseMapTexCoord;\n", funcDeclare: "", funcDefine: "", body: "vec2 sourceTexCoord = a_texCoord * u_sourceRegion.zw + u_sourceRegion.xy;\n    v_diffuseMapTexCoord = sourceTexCoord * u_repeatRegion.zw + u_repeatRegion.xy;\n    //v_diffuseMapTexCoord = a_texCoord;\n", };
        ShaderChunk.noDiffuseMap_fragment = { top: "", define: "", varDeclare: "", funcDeclare: "", funcDefine: "vec3 getMaterialDiffuse() {\n        return u_diffuse;\n    }\n", body: "", };
        ShaderChunk.noNormalMap_fragment = { top: "", define: "", varDeclare: "varying vec3 v_normal;\n", funcDeclare: "vec3 getNormal();\n\n", funcDefine: "#if POINT_LIGHTS_COUNT > 0\nvec3 getPointLightDir(int index){\n    //workaround '[] : Index expression must be constant' error\n    for (int x = 0; x <= POINT_LIGHTS_COUNT; x++) {\n        if(x == index){\n            return getPointLightDirByLightPos(u_pointLights[x].position);\n        }\n    }\n    /*!\n    solve error in window7 chrome/firefox:\n    not all control paths return a value.\n    failed to create d3d shaders\n    */\n    return vec3(0.0);\n}\n#endif\n\n#if DIRECTION_LIGHTS_COUNT > 0\nvec3 getDirectionLightDir(int index){\n    //workaround '[] : Index expression must be constant' error\n    for (int x = 0; x <= DIRECTION_LIGHTS_COUNT; x++) {\n        if(x == index){\n            return getDirectionLightDirByLightPos(u_directionLights[x].position);\n        }\n    }\n\n    /*!\n    solve error in window7 chrome/firefox:\n    not all control paths return a value.\n    failed to create d3d shaders\n    */\n    return vec3(0.0);\n}\n#endif\n\n\nvec3 getViewDir(){\n    return normalize(u_cameraPos - v_worldPosition);\n}\nvec3 getNormal(){\n    return v_normal;\n}\n\n", body: "", };
        ShaderChunk.noNormalMap_vertex = { top: "", define: "", varDeclare: "varying vec3 v_normal;\n", funcDeclare: "", funcDefine: "", body: "//v_normal = normalize( vec3(u_normalMatrix * vec4(a_normal, 1.0)));\n    v_normal = normalize( u_normalMatrix * a_normal);\n", };
        ShaderChunk.noSpecularMap_fragment = { top: "", define: "", varDeclare: "", funcDeclare: "", funcDefine: "vec3 getMaterialSpecular() {\n        return u_specular;\n    }\n", body: "", };
        ShaderChunk.normalMap_fragment = { top: "", define: "", varDeclare: "varying vec2 v_normalMapTexCoord;\nvarying vec3 v_viewDir;\n#if POINT_LIGHTS_COUNT > 0\nvarying vec3 v_pointLightDir[POINT_LIGHTS_COUNT];\n#endif\n\n#if DIRECTION_LIGHTS_COUNT > 0\nvarying vec3 v_directionLightDir[DIRECTION_LIGHTS_COUNT];\n#endif\n\n", funcDeclare: "vec3 getNormal();\n\nvec3 getLightDir(vec3 lightPos);\n\n", funcDefine: "#if POINT_LIGHTS_COUNT > 0\nvec3 getPointLightDir(int index){\n    //workaround '[] : Index expression must be constant' error\n    for (int x = 0; x <= POINT_LIGHTS_COUNT; x++) {\n        if(x == index){\n            return v_pointLightDir[x];\n        }\n    }\n    /*!\n    solve error in window7 chrome/firefox:\n    not all control paths return a value.\n    failed to create d3d shaders\n    */\n    return vec3(0.0);\n}\n#endif\n\n#if DIRECTION_LIGHTS_COUNT > 0\n\nvec3 getDirectionLightDir(int index){\n    //workaround '[] : Index expression must be constant' error\n    for (int x = 0; x <= DIRECTION_LIGHTS_COUNT; x++) {\n        if(x == index){\n            return v_directionLightDir[x];\n        }\n    }\n\n    /*!\n    solve error in window7 chrome/firefox:\n    not all control paths return a value.\n    failed to create d3d shaders\n    */\n    return vec3(0.0);\n}\n#endif\n\n\nvec3 getViewDir(){\n    return v_viewDir;\n}\nvec3 getNormal(){\n        // Obtain normal from normal map in range [0,1]\n        vec3 normal = texture2D(u_normalMapSampler, v_normalMapTexCoord).rgb;\n\n        // Transform normal vector to range [-1,1]\n        return normalize(normal * 2.0 - 1.0);  // this normal is in tangent space\n}\n", body: "", };
        ShaderChunk.normalMap_vertex = { top: "", define: "", varDeclare: "varying vec2 v_normalMapTexCoord;\n	varying vec3 v_viewDir;\n\n\n#if POINT_LIGHTS_COUNT > 0\nvarying vec3 v_pointLightDir[POINT_LIGHTS_COUNT];\n#endif\n\n#if DIRECTION_LIGHTS_COUNT > 0\nvarying vec3 v_directionLightDir[DIRECTION_LIGHTS_COUNT];\n#endif\n\n", funcDeclare: "", funcDefine: "mat3 computeTBN(){\n            //vec3 T = normalize(normalMatrix * tangent);\n            //vec3 B = normalize(normalMatrix * bitangent);\n            //vec3 N = normalize(normalMatrix * normal);\n\n            vec3 T = normalize(u_normalMatrix * a_tangent);\n            vec3 N = normalize(u_normalMatrix * a_normal);\n            // re-orthogonalize T with respect to N\n            T = normalize(T - dot(T, N) * N);\n            // then retrieve perpendicular vector B with the cross product of T and N\n            vec3 B = cross(T, N);\n\n\n            return transpose(mat3(T, B, N));\n        }\n", body: "mat3 TBN = computeTBN();\n\n    //v_tangentLightPos = TBN * light.position;\n    //v_tangentCameraPos  = TBN * u_cameraPos;\n    //v_tangentPos  = TBN * v_position;\n\n\n    vec3 tangentPosition = TBN * vec3(u_mMatrix * vec4(a_position, 1.0));\n\n    v_normalMapTexCoord = a_texCoord;\n\n    v_viewDir = normalize(TBN * u_cameraPos - tangentPosition);\n\n\n#if POINT_LIGHTS_COUNT > 0\n       for(int i = 0; i < POINT_LIGHTS_COUNT; i++){\n            //not normalize for computing distance\n            v_pointLightDir[i] = TBN * getPointLightDirByLightPos(u_pointLights[i].position, tangentPosition);\n       }\n#endif\n\n#if DIRECTION_LIGHTS_COUNT > 0\n       for(int i = 0; i < DIRECTION_LIGHTS_COUNT; i++){\n            v_directionLightDir[i] = normalize(- TBN * getDirectionLightDirByLightPos(u_directionLights[i].position));\n       }\n#endif\n\n", };
        ShaderChunk.specularMap_fragment = { top: "", define: "", varDeclare: "varying vec2 v_specularMapTexCoord;\n", funcDeclare: "", funcDefine: "vec3 getMaterialSpecular() {\n        return vec3(texture2D(u_specularMapSampler, v_specularMapTexCoord));\n    }\n", body: "", };
        ShaderChunk.specularMap_vertex = { top: "", define: "", varDeclare: "varying vec2 v_specularMapTexCoord;\n", funcDeclare: "", funcDefine: "", body: "v_specularMapTexCoord = a_texCoord;\n", };
        ShaderChunk.buildCubemapShadowMap_fragment = { top: "", define: "", varDeclare: "varying vec3 v_worldPosition;\n", funcDeclare: "", funcDefine: "", body: "\n// get distance between fragment and light source\n    float lightDistance = length(v_worldPosition - u_lightPos);\n\n    // map to [0,1] range by dividing by farPlane\n    lightDistance = lightDistance / u_farPlane;\n\n\ngl_FragData[0] = packDepth(lightDistance);\n\n\n//gl_FragColor = vec4(0.5, 0.0, 1.0, 1.0);\n//gl_FragData[0] = vec4(lightDistance, 1.0, 1.0, 1.0);\n", };
        ShaderChunk.buildCubemapShadowMap_vertex = { top: "", define: "", varDeclare: "varying vec3 v_worldPosition;\n", funcDeclare: "", funcDefine: "", body: "v_worldPosition = vec3(u_mMatrix * vec4(a_position, 1.0));\n    gl_Position = u_pMatrix * u_vMatrix * vec4(v_worldPosition, 1.0);\n", };
        ShaderChunk.buildTwoDShadowMap_fragment = { top: "", define: "", varDeclare: "", funcDeclare: "", funcDefine: "", body: "gl_FragData[0] = packDepth(gl_FragCoord.z);\n", };
        ShaderChunk.buildTwoDShadowMap_vertex = { top: "", define: "", varDeclare: "", funcDeclare: "", funcDefine: "", body: "gl_Position = u_vpMatrixFromLight * u_mMatrix * vec4(a_position, 1.0);\n//gl_Position = u_pMatrix* u_vMatrix * u_mMatrix * vec4(a_position, 1.0);\n", };
        ShaderChunk.commonBuildShadowMap_fragment = { top: "", define: "", varDeclare: "", funcDeclare: "", funcDefine: "// Packing a float in GLSL with multiplication and mod\nvec4 packDepth(in float depth) {\n    const vec4 bit_shift = vec4(256.0 * 256.0 * 256.0, 256.0 * 256.0, 256.0, 1.0);\n    const vec4 bit_mask = vec4(0.0, 1.0 / 256.0, 1.0 / 256.0, 1.0 / 256.0);\n    // combination of mod and multiplication and division works better\n    vec4 res = mod(depth * bit_shift * vec4(255), vec4(256) ) / vec4(255);\n    res -= res.xxyz * bit_mask;\n\n    return res;\n}\n", body: "", };
        ShaderChunk.cubemapShadowMap_fragment = { top: "", define: "", varDeclare: "uniform samplerCube u_cubemapShadowMapSampler[ CUBEMAP_SHADOWMAP_COUNT ];\n	uniform float u_cubemapShadowDarkness[ CUBEMAP_SHADOWMAP_COUNT ];\n	uniform float u_cubemapShadowBias[ CUBEMAP_SHADOWMAP_COUNT ];\n	uniform float u_farPlane[ CUBEMAP_SHADOWMAP_COUNT ];\n	uniform vec3 u_cubemapLightPos[ CUBEMAP_SHADOWMAP_COUNT ];\n", funcDeclare: "", funcDefine: "// PCF\nfloat getCubemapShadowVisibilityByPCF(float currentDepth, vec3 fragToLight, samplerCube cubemapShadowMapSampler, float shadowBias, float farPlane, float shadowDarkness){\n    //only support in opengl es 3.0+\n    //vec3 sampleOffsetDirections[20] = vec3[]\n    //(\n       //vec3( 1,  1,  1), vec3( 1, -1,  1), vec3(-1, -1,  1), vec3(-1,  1,  1),\n       //vec3( 1,  1, -1), vec3( 1, -1, -1), vec3(-1, -1, -1), vec3(-1,  1, -1),\n       //vec3( 1,  1,  0), vec3( 1, -1,  0), vec3(-1, -1,  0), vec3(-1,  1,  0),\n       //vec3( 1,  0,  1), vec3(-1,  0,  1), vec3( 1,  0, -1), vec3(-1,  0, -1),\n       //vec3( 0,  1,  1), vec3( 0, -1,  1), vec3( 0, -1, -1), vec3( 0,  1, -1)\n    //);\n\n    vec3 sampleOffsetDirections[20];\n\n    sampleOffsetDirections[0] = vec3( 1,  1,  1);\n    sampleOffsetDirections[1] = vec3( 1,  -1,  1);\n    sampleOffsetDirections[2] = vec3( -1,  -1,  1);\n    sampleOffsetDirections[3] = vec3( -1,  1,  1);\n\n    sampleOffsetDirections[4] = vec3( 1,  1,  -1);\n    sampleOffsetDirections[5] = vec3( 1,  -1,  -1);\n    sampleOffsetDirections[6] = vec3( -1,  -1,  -1);\n    sampleOffsetDirections[7] = vec3( -1,  1,  -1);\n\n    sampleOffsetDirections[8] = vec3( 1,  1,  0);\n    sampleOffsetDirections[9] = vec3( 1,  -1,  0);\n    sampleOffsetDirections[10] = vec3( -1,  -1,  0);\n    sampleOffsetDirections[11] = vec3( -1,  1,  0);\n\n    sampleOffsetDirections[12] = vec3( 1,  0,  1);\n    sampleOffsetDirections[13] = vec3( -1,  0,  1);\n    sampleOffsetDirections[14] = vec3( 1,  0,  -1);\n    sampleOffsetDirections[15] = vec3( -1,  0,  -1);\n\n    sampleOffsetDirections[16] = vec3( 0,  1,  1);\n    sampleOffsetDirections[17] = vec3( 0,  -1,  1);\n    sampleOffsetDirections[18] = vec3( 0,  -1,  -1);\n    sampleOffsetDirections[19] = vec3( 0,  1,  -1);\n\n    float shadow = 0.0;\n    int samples = 20;\n\n    //float diskRadius = 0.00000;\n    //Another interesting trick we can apply here is that we can change the diskRadius based on how far the viewer is away from a fragment; this way we can increase the offset radius by the distance to the viewer, making the shadows softer when far away and sharper when close by.\n    float viewDistance = length(u_cameraPos - v_worldPosition);\n    float diskRadius = (1.0 + (viewDistance / farPlane)) / 25.0;\n\n    //for(int i = 0; i < samples; ++i)\n    for(int i = 0; i < 20; ++i)\n    {\n        float pcfDepth = unpackDepth(textureCube(cubemapShadowMapSampler, fragToLight + sampleOffsetDirections[i] * diskRadius));\n        pcfDepth *= farPlane;   // Undo mapping [0;1]\n        shadow += currentDepth - shadowBias > pcfDepth  ? shadowDarkness : 1.0;\n    }\n    shadow /= float(samples);\n\n    return shadow;\n}\n\n\nfloat getCubemapShadowVisibility(vec3 lightDir, samplerCube cubemapShadowMapSampler, vec3 lightPos, float farPlane, float shadowBias, float  shadowDarkness) {\n// Get vector between fragment position and light position\n    vec3 fragToLight= v_worldPosition - lightPos;\n    // Use the light to fragment vector to sample from the depth map\n    // Now get current linear depth as the length between the fragment and light position\n    float currentDepth = length(fragToLight);\n\n    #if defined(SHADOWMAP_TYPE_PCF)\n    return getCubemapShadowVisibilityByPCF(currentDepth, fragToLight, cubemapShadowMapSampler, getShadowBias(lightDir, shadowBias), farPlane, shadowDarkness);\n    #endif\n\n    float closestDepth = unpackDepth(textureCube(cubemapShadowMapSampler, fragToLight));\n\n    // It is currently in linear range between [0,1]. Re-transform back to original value\n    closestDepth *= farPlane;\n\n\n    return float(currentDepth > closestDepth + getShadowBias(lightDir, shadowBias) ? shadowDarkness : 1.0);\n}\n", body: "", };
        ShaderChunk.noShadowMap_fragment = { top: "", define: "", varDeclare: "", funcDeclare: "", funcDefine: "vec3 getShadowVisibility() {\n        return vec3(1.0);\n    }\n", body: "", };
        ShaderChunk.totalShadowMap_fragment = { top: "", define: "", varDeclare: "", funcDeclare: "float getShadowBias(vec3 lightDir, float shadowBias);\nfloat unpackDepth(vec4 rgbaDepth);\n", funcDefine: "float getShadowBias(vec3 lightDir, float shadowBias){\n    float bias = shadowBias;\n\n    if(shadowBias == NULL){\n        bias = 0.005;\n    }\n\n\n     /*!\n     A shadow bias of 0.005 solves the issues of our scene by a large extent, but some surfaces that have a steep angle to the light source might still produce shadow acne. A more solid approach would be to change the amount of bias based on the surface angle towards the light: something we can solve with the dot product:\n     */\n\n     return max(bias * (1.0 - dot(normalize(getNormal()), lightDir)), bias);\n\n    //return bias;\n}\n\nfloat unpackDepth(vec4 rgbaDepth) {\n    const vec4 bitShift = vec4(1.0 / (256.0 * 256.0 * 256.0), 1.0 / (256.0 * 256.0), 1.0 / 256.0, 1.0);\n    return dot(rgbaDepth, bitShift);\n}\n\nvec3 getShadowVisibility() {\n    vec3 shadowColor = vec3(1.0);\n    vec3 twoDLightDir = vec3(0.0);\n    vec3 cubemapLightDir = vec3(0.0);\n\n\n    //to normalMap, the lightDir use the origin one instead of normalMap's lightDir here(the lightDir is used for computing shadowBias, the origin one is enough for it)\n\n    #if TWOD_SHADOWMAP_COUNT > 0\n	for( int i = 0; i < TWOD_SHADOWMAP_COUNT; i ++ ) {\n        twoDLightDir = getDirectionLightDirByLightPos(u_twoDLightPos[i]);\n\n	////if is opposite to direction of light rays, no shadow\n\n        shadowColor *= getTwoDShadowVisibility(twoDLightDir, u_twoDShadowMapSampler[i], v_positionFromLight[i], u_twoDShadowBias[i], u_twoDShadowDarkness[i], u_twoDShadowSize[i]);\n	}\n	#endif\n\n\n	#if CUBEMAP_SHADOWMAP_COUNT > 0\n	for( int i = 0; i < CUBEMAP_SHADOWMAP_COUNT; i ++ ) {\n        cubemapLightDir = getPointLightDirByLightPos(u_cubemapLightPos[i]);\n\n	////if is opposite to direction of light rays, no shadow\n\n        shadowColor *= getCubemapShadowVisibility(cubemapLightDir, u_cubemapShadowMapSampler[i], u_cubemapLightPos[i], u_farPlane[i], u_cubemapShadowBias[i], u_cubemapShadowDarkness[i]);\n	}\n	#endif\n\n	return shadowColor;\n}\n\n", body: "", };
        ShaderChunk.twoDShadowMap_fragment = { top: "", define: "", varDeclare: "varying vec4 v_positionFromLight[ TWOD_SHADOWMAP_COUNT ];\n	uniform sampler2D u_twoDShadowMapSampler[ TWOD_SHADOWMAP_COUNT ];\n	uniform float u_twoDShadowDarkness[ TWOD_SHADOWMAP_COUNT ];\n	uniform float u_twoDShadowBias[ TWOD_SHADOWMAP_COUNT ];\n	uniform vec2 u_twoDShadowSize[ TWOD_SHADOWMAP_COUNT ];\n	uniform vec3 u_twoDLightPos[ TWOD_SHADOWMAP_COUNT ];\n", funcDeclare: "", funcDefine: "// PCF\nfloat getTwoDShadowVisibilityByPCF(float currentDepth, vec2 shadowCoord, sampler2D twoDShadowMapSampler, float shadowBias, float shadowDarkness, vec2 shadowMapSize){\n\n    float shadow = 0.0;\n    vec2 texelSize = vec2(1.0 / shadowMapSize[0], 1.0 / shadowMapSize[1]);\n\n    for(int x = -1; x <= 1; ++x)\n    {\n        for(int y = -1; y <= 1; ++y)\n        {\n            float pcfDepth = unpackDepth(texture2D(twoDShadowMapSampler, shadowCoord + vec2(x, y) * texelSize));\n            shadow += currentDepth - shadowBias > pcfDepth  ? shadowDarkness : 1.0;\n        }\n    }\n    shadow /= 9.0;\n\n    return shadow;\n}\n\n\n\nfloat getTwoDShadowVisibility(vec3 lightDir, sampler2D twoDShadowMapSampler, vec4 v_positionFromLight, float shadowBias, float shadowDarkness, vec2 shadowSize) {\n    //project texture\n    vec3 shadowCoord = (v_positionFromLight.xyz / v_positionFromLight.w) / 2.0 + 0.5;\n    //vec3 shadowCoord = vec3(0.5, 0.5, 0.5);\n\n    #ifdef SHADOWMAP_TYPE_PCF\n    // Percentage-close filtering\n    // (9 pixel kernel)\n    return getTwoDShadowVisibilityByPCF(shadowCoord.z, shadowCoord.xy, twoDShadowMapSampler, getShadowBias(lightDir, shadowBias), shadowDarkness, shadowSize);\n\n    #else\n    return shadowCoord.z > unpackDepth(texture2D(twoDShadowMapSampler, shadowCoord.xy)) + getShadowBias(lightDir, shadowBias) ? shadowDarkness : 1.0;\n    #endif\n}\n", body: "", };
        ShaderChunk.twoDShadowMap_vertex = { top: "", define: "", varDeclare: "varying vec4 v_positionFromLight[ TWOD_SHADOWMAP_COUNT ];\nuniform mat4 u_vpMatrixFromLight[ TWOD_SHADOWMAP_COUNT ];\n", funcDeclare: "", funcDefine: "", body: "for( int i = 0; i < TWOD_SHADOWMAP_COUNT; i ++ ) {\n    v_positionFromLight[i] = u_vpMatrixFromLight[i] * vec4(v_worldPosition, 1.0);\n	}\n", };
        return ShaderChunk;
    })();
    wd.ShaderChunk = ShaderChunk;
})(wd || (wd = {}));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbmZpZy9EZWJ1Z0NvbmZpZy50cyIsImRlYnVnL0RlYnVnU3RhdGlzdGljcy50cyIsImV4dGVuZC93ZEZycC50cyIsImRlZmluaXRpb24vdHlwZXNjcmlwdC9kZWNvcmF0b3IvY29udHJhY3QudHMiLCJkZWZpbml0aW9uL3R5cGVzY3JpcHQvZGVjb3JhdG9yL2NhY2hlLnRzIiwiZGVmaW5pdGlvbi90eXBlc2NyaXB0L2RlY29yYXRvci92aXJ0dWFsLnRzIiwiZGVmaW5pdGlvbi90eXBlc2NyaXB0L2RlY29yYXRvci9yaWdpZEJvZHkudHMiLCJkZWZpbml0aW9uL3R5cGVzY3JpcHQvZGVjb3JhdG9yL3NjcmlwdC50cyIsImRlZmluaXRpb24vdHlwZXNjcmlwdC9kZWNvcmF0b3IvY29udHJvbC50cyIsImRlZmluaXRpb24vR2xvYmFsLnRzIiwiZGVmaW5pdGlvbi9WYXJpYWJsZS50cyIsIm1hdGgvR2xvYmFsLnRzIiwibWF0aC9WZWN0b3IyLnRzIiwibWF0aC9WZWN0b3IzLnRzIiwibWF0aC9WZWN0b3I0LnRzIiwibWF0aC9NYXRyaXg0LnRzIiwibWF0aC9NYXRyaXgzLnRzIiwibWF0aC9RdWF0ZXJuaW9uLnRzIiwibWF0aC9QbGFuZS50cyIsIm1hdGgvUmF5LnRzIiwiY29yZS9FbnRpdHkudHMiLCJjb3JlL0NvbXBvbmVudC50cyIsImNvcmUvU2NoZWR1bGVyLnRzIiwiY29yZS9EaXJlY3Rvci50cyIsImNvcmUvTWFpbi50cyIsImNvcmUvRG9tRXZlbnRNYW5hZ2VyLnRzIiwiY29yZS9lbnRpdHlPYmplY3QvRW50aXR5T2JqZWN0LnRzIiwiY29yZS9lbnRpdHlPYmplY3QvVUlPYmplY3QudHMiLCJjb3JlL2VudGl0eU9iamVjdC9HYW1lT2JqZWN0LnRzIiwiY29yZS9lbnRpdHlPYmplY3QvU2NlbmVEaXNwYXRjaGVyLnRzIiwiY29yZS9lbnRpdHlPYmplY3QvU2NlbmUudHMiLCJjb3JlL2VudGl0eU9iamVjdC9HYW1lT2JqZWN0U2NlbmUudHMiLCJjb3JlL2VudGl0eU9iamVjdC9VSU9iamVjdFNjZW5lLnRzIiwiY29yZS9lbnRpdHlPYmplY3QvU2t5Ym94LnRzIiwiY29sbGlzaW9uL0NvbGxpc2lvbkRldGVjdG9yLnRzIiwiZXZlbnQvc3RydWN0dXJlL0V2ZW50TGlzdGVuZXJNYXAudHMiLCJldmVudC9zdHJ1Y3R1cmUvQ3VzdG9tRXZlbnRMaXN0ZW5lck1hcC50cyIsImV2ZW50L3N0cnVjdHVyZS9Eb21FdmVudExpc3RlbmVyTWFwLnRzIiwiZXZlbnQvb2JqZWN0L0V2ZW50VHlwZS50cyIsImV2ZW50L29iamVjdC9FdmVudE5hbWVIYW5kbGVyLnRzIiwiZXZlbnQvb2JqZWN0L0V2ZW50UGhhc2UudHMiLCJldmVudC9vYmplY3QvRXZlbnRUYWJsZS50cyIsImV2ZW50L29iamVjdC9FdmVudC50cyIsImV2ZW50L29iamVjdC9Eb21FdmVudC50cyIsImV2ZW50L29iamVjdC9Nb3VzZUV2ZW50LnRzIiwiZXZlbnQvb2JqZWN0L0tleWJvYXJkRXZlbnQudHMiLCJldmVudC9vYmplY3QvQ3VzdG9tRXZlbnQudHMiLCJldmVudC9vYmplY3QvTW91c2VCdXR0b24udHMiLCJldmVudC9saXN0ZW5lci9FdmVudExpc3RlbmVyLnRzIiwiZXZlbnQvaGFuZGxlci9FdmVudEhhbmRsZXIudHMiLCJldmVudC9oYW5kbGVyL0RvbUV2ZW50SGFuZGxlci50cyIsImV2ZW50L2hhbmRsZXIvTW91c2VFdmVudEhhbmRsZXIudHMiLCJldmVudC9oYW5kbGVyL0tleWJvYXJkRXZlbnRIYW5kbGVyLnRzIiwiZXZlbnQvaGFuZGxlci9DdXN0b21FdmVudEhhbmRsZXIudHMiLCJldmVudC9kaXNwYXRjaGVyL0V2ZW50RGlzcGF0Y2hlci50cyIsImV2ZW50L2Rpc3BhdGNoZXIvQ3VzdG9tRXZlbnREaXNwYXRjaGVyLnRzIiwiZXZlbnQvZGlzcGF0Y2hlci9Eb21FdmVudERpc3BhdGNoZXIudHMiLCJldmVudC9iaW5kZXIvRXZlbnRSZWdpc3Rlci50cyIsImV2ZW50L2JpbmRlci9DdXN0b21FdmVudFJlZ2lzdGVyLnRzIiwiZXZlbnQvYmluZGVyL0RvbUV2ZW50UmVnaXN0ZXIudHMiLCJldmVudC9iaW5kZXIvRXZlbnRCaW5kZXIudHMiLCJldmVudC9iaW5kZXIvQ3VzdG9tRXZlbnRCaW5kZXIudHMiLCJldmVudC9iaW5kZXIvRG9tRXZlbnRCaW5kZXIudHMiLCJldmVudC9mYWN0b3J5L0V2ZW50SGFuZGxlckZhY3RvcnkudHMiLCJldmVudC9mYWN0b3J5L0V2ZW50QmluZGVyRmFjdG9yeS50cyIsImV2ZW50L2ZhY3RvcnkvRXZlbnREaXNwYXRjaGVyRmFjdG9yeS50cyIsImV2ZW50L0V2ZW50TWFuYWdlci50cyIsImV2ZW50L0VuZ2luZUV2ZW50LnRzIiwiY29tcG9uZW50L2V2ZW50L2RldGVjdG9yL0V2ZW50VHJpZ2dlckRldGVjdG9yLnRzIiwiY29tcG9uZW50L2V2ZW50L2RldGVjdG9yL1VJRXZlbnRUcmlnZ2VyRGV0ZWN0b3IudHMiLCJjb21wb25lbnQvZXZlbnQvZGV0ZWN0b3IvUmF5Q2FzdGVyRXZlbnRUcmlnZ2VyRGV0ZWN0b3IudHMiLCJjb21wb25lbnQvZXZlbnQvZGV0ZWN0b3IvU2NlbmVFdmVudFRyaWdnZXJEZXRlY3Rvci50cyIsImNvbXBvbmVudC9ldmVudC9kZXRlY3Rvci9FdmVudFRyaWdnZXJEZXRlY3RvclV0aWxzLnRzIiwiY29tcG9uZW50L2V2ZW50L0V2ZW50VHJpZ2dlclRhYmxlLnRzIiwiY29tcG9uZW50L3NjcmlwdC9TY3JpcHQudHMiLCJjb21wb25lbnQvdHJhbnNmb3JtL1RyYW5zZm9ybS50cyIsImNvbXBvbmVudC90cmFuc2Zvcm0vVGhyZWVEVHJhbnNmb3JtLnRzIiwiY29tcG9uZW50L3RyYW5zZm9ybS9SZWN0VHJhbnNmb3JtLnRzIiwiY29tcG9uZW50L2NvbnRhaW5lci9Db21wb25lbnRDb250YWluZXIudHMiLCJjb21wb25lbnQvY29udGFpbmVyL0FjdGlvbk1hbmFnZXIudHMiLCJjb21wb25lbnQvY29udGFpbmVyL1VJTWFuYWdlci50cyIsImNvbXBvbmVudC9jb250YWluZXIvTGlnaHRNYW5hZ2VyLnRzIiwiY29tcG9uZW50L2FuaW1hdGlvbi9BbmltYXRpb24udHMiLCJjb21wb25lbnQvYW5pbWF0aW9uL01vcnBoQW5pbWF0aW9uLnRzIiwiY29tcG9uZW50L2dlb21ldHJ5L0dlb21ldHJ5LnRzIiwiY29tcG9uZW50L2dlb21ldHJ5L0dlb21ldHJ5VXRpbHMudHMiLCJjb21wb25lbnQvZ2VvbWV0cnkvQ3VzdG9tR2VvbWV0cnkudHMiLCJjb21wb25lbnQvZ2VvbWV0cnkvTW9kZWxHZW9tZXRyeS50cyIsImNvbXBvbmVudC9nZW9tZXRyeS9Cb3hHZW9tZXRyeS50cyIsImNvbXBvbmVudC9nZW9tZXRyeS9SZWN0R2VvbWV0cnkudHMiLCJjb21wb25lbnQvZ2VvbWV0cnkvUGxhbmVHZW9tZXRyeS50cyIsImNvbXBvbmVudC9nZW9tZXRyeS9TcGhlcmVEcmF3TW9kZS50cyIsImNvbXBvbmVudC9nZW9tZXRyeS9TcGhlcmVHZW9tZXRyeS50cyIsImNvbXBvbmVudC9nZW9tZXRyeS9UcmlhbmdsZUdlb21ldHJ5LnRzIiwiY29tcG9uZW50L2dlb21ldHJ5L2RhdGEvR2VvbWV0cnlEYXRhLnRzIiwiY29tcG9uZW50L2dlb21ldHJ5L2RhdGEvQ29tbW9uR2VvbWV0cnlEYXRhLnRzIiwiY29tcG9uZW50L2dlb21ldHJ5L2RhdGEvTW9ycGhHZW9tZXRyeURhdGEudHMiLCJjb21wb25lbnQvZ2VvbWV0cnkvZGF0YS9CdWZmZXJDb250YWluZXIudHMiLCJjb21wb25lbnQvZ2VvbWV0cnkvZGF0YS9Db21tb25CdWZmZXJDb250YWluZXIudHMiLCJjb21wb25lbnQvZ2VvbWV0cnkvZGF0YS9Nb3JwaEJ1ZmZlckNvbnRhaW5lci50cyIsImNvbXBvbmVudC9jYW1lcmEvQ2FtZXJhLnRzIiwiY29tcG9uZW50L2NhbWVyYS9PcnRob2dyYXBoaWNDYW1lcmEudHMiLCJjb21wb25lbnQvY2FtZXJhL1BlcnNwZWN0aXZlQ2FtZXJhLnRzIiwiY29tcG9uZW50L2NhbWVyYS9jb250cm9sbGVyL0NhbWVyYUNvbnRyb2xsZXIudHMiLCJjb21wb25lbnQvY2FtZXJhL2NvbnRyb2xsZXIvYmFzaWMvQmFzaWNDYW1lcmFDb250cm9sbGVyLnRzIiwiY29tcG9uZW50L2NhbWVyYS9jb250cm9sbGVyL2ZseS9GbHlDYW1lcmFDb250cm9sbGVyLnRzIiwiY29tcG9uZW50L2NhbWVyYS9jb250cm9sbGVyL2ZseS9GbHlDYW1lcmFDb250cm9sLnRzIiwiY29tcG9uZW50L2NhbWVyYS9jb250cm9sbGVyL2ZseS9GbHlQZXJzcGVjdGl2ZUNhbWVyYUNvbnRyb2wudHMiLCJjb21wb25lbnQvY2FtZXJhL2NvbnRyb2xsZXIvZmx5L0ZseU9ydGhvZ3JhcGhpY0NhbWVyYUNvbnRyb2wudHMiLCJjb21wb25lbnQvY2FtZXJhL2NvbnRyb2xsZXIvYXJjYmFsbC9BcmNiYWxsQ2FtZXJhQ29udHJvbGxlci50cyIsImNvbXBvbmVudC9hY3Rpb24vQWN0aW9uLnRzIiwiY29tcG9uZW50L2FjdGlvbi9BY3Rpb25JbnN0YW50LnRzIiwiY29tcG9uZW50L2FjdGlvbi9DYWxsRnVuYy50cyIsImNvbXBvbmVudC9hY3Rpb24vQWN0aW9uSW50ZXJ2YWwudHMiLCJjb21wb25lbnQvYWN0aW9uL0NvbnRyb2wudHMiLCJjb21wb25lbnQvYWN0aW9uL1NlcXVlbmNlLnRzIiwiY29tcG9uZW50L2FjdGlvbi9TcGF3bi50cyIsImNvbXBvbmVudC9hY3Rpb24vRGVsYXlUaW1lLnRzIiwiY29tcG9uZW50L2FjdGlvbi9SZXBlYXQudHMiLCJjb21wb25lbnQvYWN0aW9uL1JlcGVhdEZvcmV2ZXIudHMiLCJjb21wb25lbnQvYWN0aW9uL1R3ZWVuLnRzIiwiY29tcG9uZW50L3JlbmRlcmVyL1JlbmRlcmVyQ29tcG9uZW50LnRzIiwiY29tcG9uZW50L3JlbmRlcmVyL01lc2hSZW5kZXJlci50cyIsImNvbXBvbmVudC9yZW5kZXJlci9Ta3lib3hSZW5kZXJlci50cyIsImNvbXBvbmVudC9yZW5kZXJlci9VSVJlbmRlcmVyLnRzIiwiY29tcG9uZW50L3JlbmRlcmVyL1VJUmVuZGVyZXJTdGF0ZS50cyIsImNvbXBvbmVudC9zcGFjZV9wYXJ0aXRpb24vT2N0cmVlLnRzIiwiY29tcG9uZW50L3NwYWNlX3BhcnRpdGlvbi9PY3RyZWVOb2RlLnRzIiwiY29tcG9uZW50L2NvbGxpZGVyL2NvbGxpZGVyRm9yRmlyc3RDaGVjay9Db2xsaWRlckZvckZpcnN0Q2hlY2sudHMiLCJjb21wb25lbnQvY29sbGlkZXIvY29sbGlkZXJGb3JGaXJzdENoZWNrL0JveENvbGxpZGVyRm9yRmlyc3RDaGVjay50cyIsImNvbXBvbmVudC9jb2xsaWRlci9Db2xsaWRlci50cyIsImNvbXBvbmVudC9jb2xsaWRlci9Cb3hDb2xsaWRlci50cyIsImNvbXBvbmVudC9jb2xsaWRlci9TcGhlcmVDb2xsaWRlci50cyIsImNvbXBvbmVudC9jb2xsaWRlci9Cb3VuZGluZ1JlZ2lvbi50cyIsImNvbXBvbmVudC9jb2xsaWRlci9Cb3hCb3VuZGluZ1JlZ2lvbi50cyIsImNvbXBvbmVudC9jb2xsaWRlci9TcGhlcmVCb3VuZGluZ1JlZ2lvbi50cyIsImNvbXBvbmVudC9jb2xsaWRlci9Cb3VuZGluZ1JlZ2lvblV0aWxzLnRzIiwiY29tcG9uZW50L2NvbGxpZGVyL1NoYXBlLnRzIiwiY29tcG9uZW50L2NvbGxpZGVyL0FBQkJTaGFwZS50cyIsImNvbXBvbmVudC9jb2xsaWRlci9TcGhlcmVTaGFwZS50cyIsImNvbXBvbmVudC9jb2xsaWRlci9Db2xsaWRlclR5cGUudHMiLCJjb21wb25lbnQvY29sbGlkZXIvQ29sbGlkZXJVdGlscy50cyIsImNvbXBvbmVudC9waHlzaWNzL1JpZ2lkQm9keS50cyIsImNvbXBvbmVudC9waHlzaWNzL0R5bmFtaWNSaWdpZEJvZHkudHMiLCJjb21wb25lbnQvcGh5c2ljcy9LaW5lbWF0aWNSaWdpZEJvZHkudHMiLCJjb21wb25lbnQvcGh5c2ljcy9TdGF0aWNSaWdpZEJvZHkudHMiLCJjb21wb25lbnQvcGh5c2ljcy9tb2RlbC9QaHlzaWNzQ29uc3RyYWludE1vZGVsLnRzIiwiY29tcG9uZW50L3BoeXNpY3MvZW5naW5lL1BoeXNpY3NFbmdpbmVGYWN0b3J5LnRzIiwiY29tcG9uZW50L3BoeXNpY3MvZW5naW5lL2FkYXB0ZXIvUGh5c2ljc0VuZ2luZVR5cGUudHMiLCJjb21wb25lbnQvcGh5c2ljcy9lbmdpbmUvYWRhcHRlci9jYW5ub24vc3RydWN0dXJlL0Nhbm5vbkRhdGFMaXN0LnRzIiwiY29tcG9uZW50L3BoeXNpY3MvZW5naW5lL2FkYXB0ZXIvY2Fubm9uL3N0cnVjdHVyZS9DYW5ub25HYW1lT2JqZWN0RGF0YUxpc3QudHMiLCJjb21wb25lbnQvcGh5c2ljcy9lbmdpbmUvYWRhcHRlci9jYW5ub24vc3RydWN0dXJlL0Nhbm5vbk1hdGVyaWFsTGlzdC50cyIsImNvbXBvbmVudC9waHlzaWNzL2VuZ2luZS9hZGFwdGVyL2Nhbm5vbi9zdHJ1Y3R1cmUvY29uc3RyYWludC9DYW5ub25Db25zdHJhaW50RGF0YUxpc3QudHMiLCJjb21wb25lbnQvcGh5c2ljcy9lbmdpbmUvYWRhcHRlci9jYW5ub24vc3RydWN0dXJlL2NvbnN0cmFpbnQvQ2Fubm9uU2luZ2xlQ29uc3RyYWludERhdGFMaXN0LnRzIiwiY29tcG9uZW50L3BoeXNpY3MvZW5naW5lL2FkYXB0ZXIvY2Fubm9uL3N0cnVjdHVyZS9jb25zdHJhaW50L0Nhbm5vbkxvY2tDb25zdHJhaW50RGF0YUxpc3QudHMiLCJjb21wb25lbnQvcGh5c2ljcy9lbmdpbmUvYWRhcHRlci9jYW5ub24vc3RydWN0dXJlL2NvbnN0cmFpbnQvQ2Fubm9uUG9pbnRUb1BvaW50Q29uc3RyYWludERhdGFMaXN0LnRzIiwiY29tcG9uZW50L3BoeXNpY3MvZW5naW5lL2FkYXB0ZXIvY2Fubm9uL3N0cnVjdHVyZS9jb25zdHJhaW50L0Nhbm5vbkRpc3RhbmNlQ29uc3RyYWludERhdGFMaXN0LnRzIiwiY29tcG9uZW50L3BoeXNpY3MvZW5naW5lL2FkYXB0ZXIvY2Fubm9uL3N0cnVjdHVyZS9jb25zdHJhaW50L0Nhbm5vbkhpbmdlQ29uc3RyYWludERhdGFMaXN0LnRzIiwiY29tcG9uZW50L3BoeXNpY3MvZW5naW5lL2FkYXB0ZXIvY2Fubm9uL0Nhbm5vblV0aWxzLnRzIiwiY29tcG9uZW50L3BoeXNpY3MvZW5naW5lL2FkYXB0ZXIvY2Fubm9uL0Nhbm5vbkFkYXB0ZXIudHMiLCJjb21wb25lbnQvcGh5c2ljcy9lbmdpbmUvYWRhcHRlci9jYW5ub24vYm9keS9DYW5ub25Cb2R5LnRzIiwiY29tcG9uZW50L3BoeXNpY3MvZW5naW5lL2FkYXB0ZXIvY2Fubm9uL2JvZHkvQ2Fubm9uRHluYW1pY0JvZHkudHMiLCJjb21wb25lbnQvcGh5c2ljcy9lbmdpbmUvYWRhcHRlci9jYW5ub24vYm9keS9DYW5ub25LaW5lbWF0aWNCb2R5LnRzIiwiY29tcG9uZW50L3BoeXNpY3MvZW5naW5lL2FkYXB0ZXIvY2Fubm9uL2JvZHkvQ2Fubm9uU3RhdGljQm9keS50cyIsImNvbXBvbmVudC9waHlzaWNzL2VuZ2luZS9hZGFwdGVyL2Nhbm5vbi9jb25zdHJhaW50L0Nhbm5vbkNvbnN0cmFpbnQudHMiLCJjb21wb25lbnQvcGh5c2ljcy9lbmdpbmUvYWRhcHRlci9jYW5ub24vY29uc3RyYWludC9DYW5ub25TaW5nbGVDb25zdHJhaW50LnRzIiwiY29tcG9uZW50L3BoeXNpY3MvZW5naW5lL2FkYXB0ZXIvY2Fubm9uL2NvbnN0cmFpbnQvQ2Fubm9uTG9ja0NvbnN0cmFpbnQudHMiLCJjb21wb25lbnQvcGh5c2ljcy9lbmdpbmUvYWRhcHRlci9jYW5ub24vY29uc3RyYWludC9DYW5ub25Qb2ludFRvUG9pbnRDb25zdHJhaW50LnRzIiwiY29tcG9uZW50L3BoeXNpY3MvZW5naW5lL2FkYXB0ZXIvY2Fubm9uL2NvbnN0cmFpbnQvQ2Fubm9uRGlzdGFuY2VDb25zdHJhaW50LnRzIiwiY29tcG9uZW50L3BoeXNpY3MvZW5naW5lL2FkYXB0ZXIvY2Fubm9uL2NvbnN0cmFpbnQvQ2Fubm9uSGluZ2VDb25zdHJhaW50LnRzIiwiY29tcG9uZW50L2xpZ2h0L0xpZ2h0LnRzIiwiY29tcG9uZW50L2xpZ2h0L0FtYmllbnRMaWdodC50cyIsImNvbXBvbmVudC9saWdodC9Tb3VyY2VMaWdodC50cyIsImNvbXBvbmVudC9saWdodC9EaXJlY3Rpb25MaWdodC50cyIsImNvbXBvbmVudC9saWdodC9Qb2ludExpZ2h0LnRzIiwiY29tcG9uZW50L2xpZ2h0L0F0dGVudWF0aW9uLnRzIiwiY29tcG9uZW50L3VpL1VJLnRzIiwiY29tcG9uZW50L3VpL2ZvbnQvRm9udFhBbGlnbm1lbnQudHMiLCJjb21wb25lbnQvdWkvZm9udC9Gb250WUFsaWdubWVudC50cyIsImNvbXBvbmVudC91aS9mb250L0ZvbnREaW1lbnNpb24udHMiLCJjb21wb25lbnQvdWkvZm9udC9Gb250LnRzIiwiY29tcG9uZW50L3VpL2ZvbnQvUGxhaW5Gb250LnRzIiwiY29tcG9uZW50L3VpL2ZvbnQvQml0bWFwRm9udC50cyIsImNvbXBvbmVudC91aS9mb250L0NoYXJGb250LnRzIiwiY29tcG9uZW50L3VpL3Byb2dyZXNzQmFyL1Byb2dyZXNzQmFyLnRzIiwiY29tcG9uZW50L3VpL2ltYWdlL0ltYWdlLnRzIiwiY29tcG9uZW50L3VpL2ludGVyYWN0aW9uL0ludGVyYWN0aW9uVUkudHMiLCJjb21wb25lbnQvdWkvaW50ZXJhY3Rpb24vYnV0dG9uL0J1dHRvbi50cyIsImNvbXBvbmVudC91aS9pbnRlcmFjdGlvbi9idXR0b24vQnV0dG9uT2JqZWN0TmFtZS50cyIsImNvbXBvbmVudC91aS9pbnRlcmFjdGlvbi9zdGF0ZS9VSVN0YXRlLnRzIiwiY29tcG9uZW50L3VpL2ludGVyYWN0aW9uL3N0YXRlL1VJU3RhdGVNYWNoaW5lLnRzIiwiY29tcG9uZW50L3VpL2ludGVyYWN0aW9uL3RyYW5zaXRpb24vVHJhbnNpdGlvbi50cyIsImNvbXBvbmVudC91aS9pbnRlcmFjdGlvbi90cmFuc2l0aW9uL1Nwcml0ZVRyYW5zaXRpb24udHMiLCJjb21wb25lbnQvdWkvaW50ZXJhY3Rpb24vdHJhbnNpdGlvbi9Db2xvclRyYW5zaXRpb24udHMiLCJjb21wb25lbnQvdWkvaW50ZXJhY3Rpb24vdHJhbnNpdGlvbi9UcmFuc2l0aW9uTW9kZS50cyIsImNvbXBvbmVudC91aS9pbnRlcmFjdGlvbi90cmFuc2l0aW9uL1RyYW5zaXRpb25NYW5hZ2VyLnRzIiwiY29tcG9uZW50L3VpL3V0aWxzL1JvdW5kZWRSZWN0VXRpbHMudHMiLCJ1dGlscy9KdWRnZVV0aWxzLnRzIiwidXRpbHMvTWF0aFV0aWxzLnRzIiwidXRpbHMvQ29vcmRpbmF0ZVV0aWxzLnRzIiwidXRpbHMvTG9nLnRzIiwidXRpbHMvdGltZS9UaW1lQ29udHJvbGxlci50cyIsInV0aWxzL3RpbWUvRGlyZWN0b3JUaW1lQ29udHJvbGxlci50cyIsInV0aWxzL3RpbWUvQ29tbW9uVGltZUNvbnRyb2xsZXIudHMiLCJyZW5kZXJlci9yZW5kZXJUYXJnZXRSZW5kZXJlci9SZW5kZXJUYXJnZXRSZW5kZXJlci50cyIsInJlbmRlcmVyL3JlbmRlclRhcmdldFJlbmRlcmVyL1R3b0RSZW5kZXJUYXJnZXRSZW5kZXJlci50cyIsInJlbmRlcmVyL3JlbmRlclRhcmdldFJlbmRlcmVyL01pcnJvclJlbmRlclRhcmdldFJlbmRlcmVyLnRzIiwicmVuZGVyZXIvcmVuZGVyVGFyZ2V0UmVuZGVyZXIvVHdvRFNoYWRvd01hcFJlbmRlclRhcmdldFJlbmRlcmVyLnRzIiwicmVuZGVyZXIvcmVuZGVyVGFyZ2V0UmVuZGVyZXIvQ3ViZW1hcFJlbmRlclRhcmdldFJlbmRlcmVyLnRzIiwicmVuZGVyZXIvcmVuZGVyVGFyZ2V0UmVuZGVyZXIvQ3ViZW1hcFNoYWRvd01hcFJlbmRlclRhcmdldFJlbmRlcmVyLnRzIiwicmVuZGVyZXIvcmVuZGVyVGFyZ2V0UmVuZGVyZXIvRHluYW1pY0N1YmVtYXBSZW5kZXJUYXJnZXRSZW5kZXJlci50cyIsInJlbmRlcmVyL3JlbmRlclRhcmdldFJlbmRlcmVyL3V0aWxzL1NoYWRvd01hcFJlbmRlclRhcmdldFJlbmRlcmVyVXRpbHMudHMiLCJyZW5kZXJlci9yZW5kZXJUYXJnZXRSZW5kZXJlci91dGlscy9DdWJlbWFwU2hhZG93TWFwUmVuZGVyVGFyZ2V0UmVuZGVyZXJVdGlscy50cyIsInJlbmRlcmVyL3JlbmRlclRhcmdldFJlbmRlcmVyL3V0aWxzL1R3b0RTaGFkb3dNYXBSZW5kZXJUYXJnZXRSZW5kZXJlclV0aWxzLnRzIiwicmVuZGVyZXIvUmVuZGVyZXIudHMiLCJyZW5kZXJlci9XZWJHTFJlbmRlcmVyLnRzIiwicmVuZGVyZXIvRHJhd01vZGUudHMiLCJyZW5kZXJlci9idWZmZXIvQnVmZmVyVHlwZS50cyIsInJlbmRlcmVyL2J1ZmZlci9CdWZmZXJEYXRhVHlwZS50cyIsInJlbmRlcmVyL2J1ZmZlci9CdWZmZXJVc2FnZS50cyIsInJlbmRlcmVyL2J1ZmZlci9CdWZmZXIudHMiLCJyZW5kZXJlci9idWZmZXIvRWxlbWVudEJ1ZmZlci50cyIsInJlbmRlcmVyL2J1ZmZlci9BcnJheUJ1ZmZlci50cyIsInJlbmRlcmVyL2J1ZmZlci9CdWZmZXJEYXRhVGFibGUudHMiLCJyZW5kZXJlci9Qcm9ncmFtLnRzIiwicmVuZGVyZXIvUXVhZENvbW1hbmQudHMiLCJyZW5kZXJlci9HbFV0aWxzLnRzIiwicmVuZGVyZXIvYnVmZmVyL0ZyYW1lQnVmZmVyLnRzIiwicmVuZGVyZXIvc2hhZGVyL1NoYWRlci50cyIsInJlbmRlcmVyL3NoYWRlci9TaGFkZXJTb3VyY2VCdWlsZGVyLnRzIiwicmVuZGVyZXIvc2hhZGVyL3ZhcmlhYmxlL1ZhcmlhYmxlVHlwZS50cyIsInJlbmRlcmVyL3NoYWRlci92YXJpYWJsZS9WYXJpYWJsZUNhdGVnb3J5LnRzIiwicmVuZGVyZXIvc2hhZGVyL3ZhcmlhYmxlL1ZhcmlhYmxlTGliLnRzIiwicmVuZGVyZXIvc2hhZGVyL3ZhcmlhYmxlL1ZhcmlhYmxlVHlwZVRhYmxlLnRzIiwicmVuZGVyZXIvc2hhZGVyL3ZhcmlhYmxlL1ZhcmlhYmxlTmFtZVRhYmxlLnRzIiwicmVuZGVyZXIvc2hhZGVyL2xpYi9TaGFkZXJMaWIudHMiLCJyZW5kZXJlci9zaGFkZXIvbGliL2NvbW1vbi9Db21tb25TaGFkZXJMaWIudHMiLCJyZW5kZXJlci9zaGFkZXIvbGliL2NvbW1vbi9Db21tb25WZXJ0aWNlU2hhZGVyTGliLnRzIiwicmVuZGVyZXIvc2hhZGVyL2xpYi9jb21tb24vQ29tbW9uTm9ybWFsU2hhZGVyTGliLnRzIiwicmVuZGVyZXIvc2hhZGVyL2xpYi9iYXNpYy9CYXNpY1NoYWRlckxpYi50cyIsInJlbmRlcmVyL3NoYWRlci9saWIvYmFzaWMvQmFzaWNFbmRTaGFkZXJMaWIudHMiLCJyZW5kZXJlci9zaGFkZXIvbGliL2FuaW1hdGlvbi9tb3JwaC9Nb3JwaENvbW1vblNoYWRlckxpYi50cyIsInJlbmRlcmVyL3NoYWRlci9saWIvYW5pbWF0aW9uL21vcnBoL01vcnBoVmVydGljZVNoYWRlckxpYi50cyIsInJlbmRlcmVyL3NoYWRlci9saWIvYW5pbWF0aW9uL21vcnBoL01vcnBoTm9ybWFsU2hhZGVyTGliLnRzIiwicmVuZGVyZXIvc2hhZGVyL2xpYi9za3lib3gvU2t5Ym94U2hhZGVyTGliLnRzIiwicmVuZGVyZXIvc2hhZGVyL2xpYi9lbnZNYXAvZm9yQmFzaWMvRW52TWFwRm9yQmFzaWNTaGFkZXJMaWIudHMiLCJyZW5kZXJlci9zaGFkZXIvbGliL2Vudk1hcC9mb3JCYXNpYy9CYXNpY0Vudk1hcEZvckJhc2ljU2hhZGVyTGliLnRzIiwicmVuZGVyZXIvc2hhZGVyL2xpYi9lbnZNYXAvZm9yQmFzaWMvUmVmbGVjdGlvbkZvckJhc2ljU2hhZGVyTGliLnRzIiwicmVuZGVyZXIvc2hhZGVyL2xpYi9lbnZNYXAvZm9yQmFzaWMvUmVmcmFjdGlvbkZvckJhc2ljU2hhZGVyTGliLnRzIiwicmVuZGVyZXIvc2hhZGVyL2xpYi9lbnZNYXAvZm9yQmFzaWMvRnJlc25lbEZvckJhc2ljU2hhZGVyTGliLnRzIiwicmVuZGVyZXIvc2hhZGVyL2xpYi9lbnZNYXAvZm9yTGlnaHQvRW52TWFwRm9yTGlnaHRTaGFkZXJMaWIudHMiLCJyZW5kZXJlci9zaGFkZXIvbGliL2Vudk1hcC9mb3JMaWdodC9CYXNpY0Vudk1hcEZvckxpZ2h0U2hhZGVyTGliLnRzIiwicmVuZGVyZXIvc2hhZGVyL2xpYi9lbnZNYXAvZm9yTGlnaHQvUmVmbGVjdGlvbkZvckxpZ2h0U2hhZGVyTGliLnRzIiwicmVuZGVyZXIvc2hhZGVyL2xpYi9lbnZNYXAvZm9yTGlnaHQvUmVmcmFjdGlvbkZvckxpZ2h0U2hhZGVyTGliLnRzIiwicmVuZGVyZXIvc2hhZGVyL2xpYi9lbnZNYXAvZm9yTGlnaHQvRnJlc25lbEZvckxpZ2h0U2hhZGVyTGliLnRzIiwicmVuZGVyZXIvc2hhZGVyL2xpYi9tYXAvTWFwU2hhZGVyTGliLnRzIiwicmVuZGVyZXIvc2hhZGVyL2xpYi9tYXAvQmFzaWNNYXBTaGFkZXJMaWIudHMiLCJyZW5kZXJlci9zaGFkZXIvbGliL21hcC9NdWx0aU1hcFNoYWRlckxpYi50cyIsInJlbmRlcmVyL3NoYWRlci9saWIvbWlycm9yL01pcnJvckZvckJhc2ljU2hhZGVyTGliLnRzIiwicmVuZGVyZXIvc2hhZGVyL2xpYi9saWdodC9MaWdodENvbW1vblNoYWRlckxpYi50cyIsInJlbmRlcmVyL3NoYWRlci9saWIvbGlnaHQvTGlnaHRTaGFkZXJMaWIudHMiLCJyZW5kZXJlci9zaGFkZXIvbGliL2xpZ2h0L0xpZ2h0RW5kU2hhZGVyTGliLnRzIiwicmVuZGVyZXIvc2hhZGVyL2xpYi9saWdodC9saWdodE1hcC9MaWdodE1hcFNoYWRlckxpYi50cyIsInJlbmRlcmVyL3NoYWRlci9saWIvbGlnaHQvbGlnaHRNYXAvRGlmZnVzZU1hcFNoYWRlckxpYi50cyIsInJlbmRlcmVyL3NoYWRlci9saWIvbGlnaHQvbGlnaHRNYXAvU3BlY3VsYXJNYXBTaGFkZXJMaWIudHMiLCJyZW5kZXJlci9zaGFkZXIvbGliL2xpZ2h0L2xpZ2h0TWFwL05vcm1hbE1hcFNoYWRlckxpYi50cyIsInJlbmRlcmVyL3NoYWRlci9saWIvbGlnaHQvbGlnaHRNYXAvTm9EaWZmdXNlTWFwU2hhZGVyTGliLnRzIiwicmVuZGVyZXIvc2hhZGVyL2xpYi9saWdodC9saWdodE1hcC9Ob1NwZWN1bGFyTWFwU2hhZGVyTGliLnRzIiwicmVuZGVyZXIvc2hhZGVyL2xpYi9saWdodC9saWdodE1hcC9Ob05vcm1hbE1hcFNoYWRlckxpYi50cyIsInJlbmRlcmVyL3NoYWRlci9saWIvbGlnaHQvc2hhZG93TWFwL0J1aWxkU2hhZG93TWFwU2hhZGVyTGliLnRzIiwicmVuZGVyZXIvc2hhZGVyL2xpYi9saWdodC9zaGFkb3dNYXAvQnVpbGRUd29EU2hhZG93TWFwU2hhZGVyTGliLnRzIiwicmVuZGVyZXIvc2hhZGVyL2xpYi9saWdodC9zaGFkb3dNYXAvQnVpbGRDdWJlbWFwU2hhZG93TWFwU2hhZGVyTGliLnRzIiwicmVuZGVyZXIvc2hhZGVyL2xpYi9saWdodC9zaGFkb3dNYXAvVG90YWxTaGFkb3dNYXBTaGFkZXJMaWIudHMiLCJyZW5kZXJlci9zaGFkZXIvbGliL2xpZ2h0L3NoYWRvd01hcC9TaGFkb3dNYXBTaGFkZXJMaWIudHMiLCJyZW5kZXJlci9zaGFkZXIvbGliL2xpZ2h0L3NoYWRvd01hcC9Ud29EU2hhZG93TWFwU2hhZGVyTGliLnRzIiwicmVuZGVyZXIvc2hhZGVyL2xpYi9saWdodC9zaGFkb3dNYXAvQ3ViZW1hcFNoYWRvd01hcFNoYWRlckxpYi50cyIsInJlbmRlcmVyL3NoYWRlci9saWIvbGlnaHQvc2hhZG93TWFwL05vU2hhZG93TWFwU2hhZGVyTGliLnRzIiwicmVuZGVyZXIvc2hhZGVyL3NuaXBwZXQvU2hhZGVyU25pcHBldC50cyIsIm1hdGVyaWFsL01hdGVyaWFsLnRzIiwibWF0ZXJpYWwvQmFzaWNNYXRlcmlhbC50cyIsIm1hdGVyaWFsL1NreWJveE1hdGVyaWFsLnRzIiwibWF0ZXJpYWwvTGlnaHRNYXRlcmlhbC50cyIsIm1hdGVyaWFsL0N1c3RvbU1hdGVyaWFsLnRzIiwibWF0ZXJpYWwvU2hhZGluZy50cyIsIm1hdGVyaWFsL01hcE1hbmFnZXIudHMiLCJhc3NldC9Bc3NldFR5cGUudHMiLCJhc3NldC9Mb2FkZXIudHMiLCJhc3NldC9HTFNMTG9hZGVyLnRzIiwiYXNzZXQvSnNMb2FkZXIudHMiLCJhc3NldC9WaWRlb0xvYWRlci50cyIsImFzc2V0L1RleHR1cmVMb2FkZXIudHMiLCJhc3NldC91dGlscy9JbWFnZUxvYWRlci50cyIsImFzc2V0L3V0aWxzL0FqYXhMb2FkZXIudHMiLCJhc3NldC91dGlscy9Nb2RlbExvYWRlclV0aWxzLnRzIiwiYXNzZXQvdGV4dHVyZS9Db21wcmVzc2VkVGV4dHVyZUxvYWRlci50cyIsImFzc2V0L3RleHR1cmUvRERTUGFyc2VyLnRzIiwiYXNzZXQvdGV4dHVyZS9UZXh0dXJlQXNzZXQudHMiLCJhc3NldC90ZXh0dXJlL0ltYWdlVGV4dHVyZUFzc2V0LnRzIiwiYXNzZXQvdGV4dHVyZS9WaWRlb1RleHR1cmVBc3NldC50cyIsImFzc2V0L3RleHR1cmUvQ29tcHJlc3NlZFRleHR1cmVBc3NldC50cyIsImFzc2V0L3RleHR1cmUvVGV4dHVyZUZpbHRlck1vZGUudHMiLCJhc3NldC90ZXh0dXJlL1RleHR1cmVXcmFwTW9kZS50cyIsImFzc2V0L3RleHR1cmUvVGV4dHVyZUZvcm1hdC50cyIsImFzc2V0L3RleHR1cmUvVGV4dHVyZVR5cGUudHMiLCJhc3NldC90ZXh0dXJlL0Vudk1hcE1vZGUudHMiLCJhc3NldC90ZXh0dXJlL1RleHR1cmVDb21iaW5lTW9kZS50cyIsImFzc2V0L3RleHR1cmUvVGV4dHVyZVNvdXJjZVJlZ2lvbk1hcHBpbmcudHMiLCJhc3NldC90ZXh0dXJlL1RleHR1cmVTb3VyY2VSZWdpb25NZXRob2QudHMiLCJhc3NldC90ZXh0dXJlL1RleHR1cmVUYXJnZXQudHMiLCJhc3NldC9Mb2FkZXJNYW5hZ2VyLnRzIiwiYXNzZXQvTG9hZGVyRmFjdG9yeS50cyIsImFzc2V0L3dkL1dEVGFnLnRzIiwiYXNzZXQvd2QvV0RMb2FkZXIudHMiLCJhc3NldC93ZC9XRFBhcnNlci50cyIsImFzc2V0L3dkL1dET2JqZWN0UGFyc2VyLnRzIiwiYXNzZXQvd2QvV0RCdWlsZGVyLnRzIiwiYXNzZXQvZm9udC9Gb250TG9hZGVyLnRzIiwiYXNzZXQvZm9udC9GbnRQYXJzZXIudHMiLCJhc3NldC9mb250L0ZudExvYWRlci50cyIsImRldmljZS9EZXZpY2VNYW5hZ2VyLnRzIiwiZGV2aWNlL0dQVURldGVjdG9yLnRzIiwiZGV2aWNlL1NjcmVlblNpemUudHMiLCJzdHJ1Y3R1cmUvUG9pbnQudHMiLCJzdHJ1Y3R1cmUvRmFjZTMudHMiLCJzdHJ1Y3R1cmUvUmVjdFJlZ2lvbi50cyIsInN0cnVjdHVyZS9WaWV3LnRzIiwic3RydWN0dXJlL0NvbG9yLnRzIiwidGV4dHVyZS9UZXh0dXJlLnRzIiwidGV4dHVyZS91dGlscy9UZXh0dXJlVXRpbHMudHMiLCJ0ZXh0dXJlL3V0aWxzL0Jhc2ljVGV4dHVyZVV0aWxzLnRzIiwidGV4dHVyZS9yZW5kZXJUYXJnZXRUZXh0dXJlL1JlbmRlclRhcmdldFRleHR1cmUudHMiLCJ0ZXh0dXJlL3JlbmRlclRhcmdldFRleHR1cmUvVHdvRFJlbmRlclRhcmdldFRleHR1cmUudHMiLCJ0ZXh0dXJlL3JlbmRlclRhcmdldFRleHR1cmUvdXRpbHMvU2hhZG93TWFwVGV4dHVyZVV0aWxzLnRzIiwidGV4dHVyZS9yZW5kZXJUYXJnZXRUZXh0dXJlL01pcnJvclRleHR1cmUudHMiLCJ0ZXh0dXJlL3JlbmRlclRhcmdldFRleHR1cmUvVHdvRFNoYWRvd01hcFRleHR1cmUudHMiLCJ0ZXh0dXJlL3JlbmRlclRhcmdldFRleHR1cmUvQ3ViZW1hcFJlbmRlclRhcmdldFRleHR1cmUudHMiLCJ0ZXh0dXJlL3JlbmRlclRhcmdldFRleHR1cmUvQ3ViZW1hcFNoYWRvd01hcFRleHR1cmUudHMiLCJ0ZXh0dXJlL3JlbmRlclRhcmdldFRleHR1cmUvRHluYW1pY0N1YmVtYXBUZXh0dXJlLnRzIiwidGV4dHVyZS9iYXNpY1RleHR1cmUvQmFzaWNUZXh0dXJlLnRzIiwidGV4dHVyZS9iYXNpY1RleHR1cmUvVHdvRFRleHR1cmUudHMiLCJ0ZXh0dXJlL2Jhc2ljVGV4dHVyZS9Db21tb25UZXh0dXJlLnRzIiwidGV4dHVyZS9iYXNpY1RleHR1cmUvSW1hZ2VUZXh0dXJlLnRzIiwidGV4dHVyZS9iYXNpY1RleHR1cmUvVmlkZW9UZXh0dXJlLnRzIiwidGV4dHVyZS9iYXNpY1RleHR1cmUvY3ViZW1hcC9DdWJlbWFwVGV4dHVyZS50cyIsInRleHR1cmUvYmFzaWNUZXh0dXJlL2N1YmVtYXAvQ3ViZW1hcEZhY2VUZXh0dXJlLnRzIiwidGV4dHVyZS9iYXNpY1RleHR1cmUvY3ViZW1hcC9DdWJlbWFwRmFjZUltYWdlVGV4dHVyZS50cyIsInRleHR1cmUvYmFzaWNUZXh0dXJlL2N1YmVtYXAvQ3ViZW1hcEZhY2VDb21wcmVzc2VkVGV4dHVyZS50cyIsInRleHR1cmUvYmFzaWNUZXh0dXJlL0NvbXByZXNzZWRUZXh0dXJlLnRzIiwidGV4dHVyZS9iYXNpY1RleHR1cmUvY29tbWFuZC9EcmF3VGV4dHVyZUNvbW1hbmQudHMiLCJ0ZXh0dXJlL2Jhc2ljVGV4dHVyZS9jb21tYW5kL0RyYXdDb21wcmVzc2VkVGV4dHVyZUNvbW1hbmQudHMiLCJ0ZXh0dXJlL2Jhc2ljVGV4dHVyZS9jb21tYW5kL0RyYXdUd29EVGV4dHVyZUNvbW1hbmQudHMiLCJ0ZXh0dXJlL2Jhc2ljVGV4dHVyZS9jb21tYW5kL0RyYXdNaXBtYXBUd29EVGV4dHVyZUNvbW1hbmQudHMiLCJ0ZXh0dXJlL2Jhc2ljVGV4dHVyZS9jb21tYW5kL0RyYXdOb01pcG1hcFR3b0RUZXh0dXJlQ29tbWFuZC50cyIsInZpZGVvL1ZpZGVvLnRzIiwidmlkZW8vVmlkZW9NYW5hZ2VyLnRzIiwicmVuZGVyZXIvc2hhZGVyL2NodW5rL1NoYWRlckNodW5rLnRzIl0sIm5hbWVzIjpbIndkIiwid2QuRGVidWdTdGF0aXN0aWNzIiwid2QuRGVidWdTdGF0aXN0aWNzLmNvbnN0cnVjdG9yIiwid2QuRGVidWdTdGF0aXN0aWNzLmNsZWFyIiwid2QuRGVidWdTdGF0aXN0aWNzLmluaXQiLCJ3ZC5EZWJ1Z1N0YXRpc3RpY3MuZGlzcG9zZSIsIndkLkRlYnVnU3RhdGlzdGljcy50b3RhbEdhbWVPYmplY3RzIiwid2QuRGVidWdTdGF0aXN0aWNzLmZwcyIsIndkRnJwIiwid2QuYXNzZXJ0Iiwid2QucmVxdWlyZSIsIndkLmVuc3VyZSIsIndkLnJlcXVpcmVHZXR0ZXIiLCJ3ZC5yZXF1aXJlU2V0dGVyIiwid2QuZW5zdXJlR2V0dGVyIiwid2QuZW5zdXJlU2V0dGVyIiwid2QuaW52YXJpYW50Iiwid2QuY2FjaGVHZXR0ZXIiLCJ3ZC5jYWNoZSIsIndkLnZpcnR1YWwiLCJ3ZC5vcGVyYXRlQm9keURhdGFHZXR0ZXJBbmRTZXR0ZXIiLCJ3ZC5vcGVyYXRlV29ybGREYXRhR2V0dGVyQW5kU2V0dGVyIiwid2QuaXNXb3JsZERlZmluZWQiLCJ3ZC5sb3dlckZpcnN0Q2hhciIsIndkLnNjcmlwdCIsIndkLmV4ZWNPbmx5T25jZSIsIndkLlZlY3RvcjIiLCJ3ZC5WZWN0b3IyLmNvbnN0cnVjdG9yIiwid2QuVmVjdG9yMi5jcmVhdGUiLCJ3ZC5WZWN0b3IyLngiLCJ3ZC5WZWN0b3IyLnkiLCJ3ZC5WZWN0b3IyLnNldCIsIndkLlZlY3RvcjIuYWRkIiwid2QuVmVjdG9yMi5tdWwiLCJ3ZC5WZWN0b3IyLmNvcHkiLCJ3ZC5WZWN0b3IzIiwid2QuVmVjdG9yMy5jb25zdHJ1Y3RvciIsIndkLlZlY3RvcjMuY3JlYXRlIiwid2QuVmVjdG9yMy54Iiwid2QuVmVjdG9yMy55Iiwid2QuVmVjdG9yMy56Iiwid2QuVmVjdG9yMy5ub3JtYWxpemUiLCJ3ZC5WZWN0b3IzLmlzWmVybyIsIndkLlZlY3RvcjMuc2NhbGUiLCJ3ZC5WZWN0b3IzLnNldCIsIndkLlZlY3RvcjMuc3ViIiwid2QuVmVjdG9yMy5zdWIyIiwid2QuVmVjdG9yMy5hZGQiLCJ3ZC5WZWN0b3IzLmFkZDIiLCJ3ZC5WZWN0b3IzLm11bCIsIndkLlZlY3RvcjMubXVsMiIsIndkLlZlY3RvcjMucmV2ZXJzZSIsIndkLlZlY3RvcjMuY29weSIsIndkLlZlY3RvcjMudG9WZWN0b3I0Iiwid2QuVmVjdG9yMy5sZW5ndGgiLCJ3ZC5WZWN0b3IzLmNyb3NzIiwid2QuVmVjdG9yMy5sZXJwIiwid2QuVmVjdG9yMy5kb3QiLCJ3ZC5WZWN0b3IzLm1pbiIsIndkLlZlY3RvcjMubWF4Iiwid2QuVmVjdG9yMy5pc0VxdWFsIiwid2QuVmVjdG9yMy50b0FycmF5Iiwid2QuVmVjdG9yMy5hcHBseU1hdHJpeDQiLCJ3ZC5WZWN0b3IzLmRpc3RhbmNlVG8iLCJ3ZC5WZWN0b3IzLmRpc3RhbmNlVG9TcXVhcmVkIiwid2QuVmVjdG9yNCIsIndkLlZlY3RvcjQuY29uc3RydWN0b3IiLCJ3ZC5WZWN0b3I0LmNyZWF0ZSIsIndkLlZlY3RvcjQueCIsIndkLlZlY3RvcjQueSIsIndkLlZlY3RvcjQueiIsIndkLlZlY3RvcjQudyIsIndkLlZlY3RvcjQubm9ybWFsaXplIiwid2QuVmVjdG9yNC5jb3B5Iiwid2QuVmVjdG9yNC50b1ZlY3RvcjMiLCJ3ZC5WZWN0b3I0Lm11bHRpcGx5U2NhbGFyIiwid2QuVmVjdG9yNC5kb3QiLCJ3ZC5WZWN0b3I0LnNldCIsIndkLlZlY3RvcjQuY29weUhlbHBlciIsIndkLk1hdHJpeDQiLCJ3ZC5NYXRyaXg0LmNvbnN0cnVjdG9yIiwid2QuTWF0cml4NC5jcmVhdGUiLCJ3ZC5NYXRyaXg0LnB1c2giLCJ3ZC5NYXRyaXg0LnBvcCIsIndkLk1hdHJpeDQuc2V0SWRlbnRpdHkiLCJ3ZC5NYXRyaXg0LmludmVydCIsIndkLk1hdHJpeDQuaW52ZXJ0VG8zeDMiLCJ3ZC5NYXRyaXg0LnRyYW5zcG9zZSIsIndkLk1hdHJpeDQuc2V0VHJhbnNsYXRlIiwid2QuTWF0cml4NC50cmFuc2xhdGUiLCJ3ZC5NYXRyaXg0LnNldFJvdGF0ZSIsIndkLk1hdHJpeDQucm90YXRlIiwid2QuTWF0cml4NC5zZXRTY2FsZSIsIndkLk1hdHJpeDQuc2NhbGUiLCJ3ZC5NYXRyaXg0LnNldExvb2tBdCIsIndkLk1hdHJpeDQubG9va0F0Iiwid2QuTWF0cml4NC5zZXRPcnRobyIsIndkLk1hdHJpeDQub3J0aG8iLCJ3ZC5NYXRyaXg0LnNldFBlcnNwZWN0aXZlIiwid2QuTWF0cml4NC5wZXJzcGVjdGl2ZSIsIndkLk1hdHJpeDQuYXBwbHlNYXRyaXgiLCJ3ZC5NYXRyaXg0Lm11bHRpcGx5Iiwid2QuTWF0cml4NC5tdWx0aXBseVZlY3RvcjQiLCJ3ZC5NYXRyaXg0Lm11bHRpcGx5VmVjdG9yMyIsIndkLk1hdHJpeDQubXVsdGlwbHlQb2ludCIsIndkLk1hdHJpeDQuY29weSIsIndkLk1hdHJpeDQuZ2V0WCIsIndkLk1hdHJpeDQuZ2V0WSIsIndkLk1hdHJpeDQuZ2V0WiIsIndkLk1hdHJpeDQuZ2V0VHJhbnNsYXRpb24iLCJ3ZC5NYXRyaXg0LmdldFNjYWxlIiwid2QuTWF0cml4NC5nZXRFdWxlckFuZ2xlcyIsIndkLk1hdHJpeDQuc2V0VFJTIiwid2QuTWF0cml4MyIsIndkLk1hdHJpeDMuY29uc3RydWN0b3IiLCJ3ZC5NYXRyaXgzLmNyZWF0ZSIsIndkLk1hdHJpeDMuYSIsIndkLk1hdHJpeDMuYyIsIndkLk1hdHJpeDMuYiIsIndkLk1hdHJpeDMuZCIsIndkLk1hdHJpeDMudHgiLCJ3ZC5NYXRyaXgzLnR5Iiwid2QuTWF0cml4My5zZXRJZGVudGl0eSIsIndkLk1hdHJpeDMuaW52ZXJ0Iiwid2QuTWF0cml4My5tdWx0aXBseVNjYWxhciIsIndkLk1hdHJpeDMubXVsdGlwbHlWZWN0b3IyIiwid2QuTWF0cml4My5tdWx0aXBseVBvaW50Iiwid2QuTWF0cml4My5tdWx0aXBseSIsIndkLk1hdHJpeDMudHJhbnNwb3NlIiwid2QuTWF0cml4My5jb3B5Iiwid2QuTWF0cml4My5zZXQiLCJ3ZC5NYXRyaXgzLnNldFRTIiwid2QuTWF0cml4My5yb3RhdGUiLCJ3ZC5NYXRyaXgzLnNldFJvdGF0aW9uIiwid2QuTWF0cml4My50cmFuc2xhdGUiLCJ3ZC5NYXRyaXgzLnNldFBvc2l0aW9uIiwid2QuTWF0cml4My5zY2FsZSIsIndkLk1hdHJpeDMuc2V0U2NhbGUiLCJ3ZC5NYXRyaXgzLmdldFRyYW5zbGF0aW9uIiwid2QuTWF0cml4My5nZXRTY2FsZSIsIndkLk1hdHJpeDMuZ2V0Um90YXRpb24iLCJ3ZC5NYXRyaXgzLmdldFNrZXciLCJ3ZC5NYXRyaXgzLl9nZXREZWx0YVRyYW5zZm9ybVBvaW50Iiwid2QuTWF0cml4My5fZ2V0U2tld1giLCJ3ZC5NYXRyaXgzLl9nZXRTa2V3WSIsIndkLlF1YXRlcm5pb24iLCJ3ZC5RdWF0ZXJuaW9uLmNvbnN0cnVjdG9yIiwid2QuUXVhdGVybmlvbi5jcmVhdGUiLCJ3ZC5RdWF0ZXJuaW9uLnNldEZyb21FdWxlckFuZ2xlcyIsIndkLlF1YXRlcm5pb24ubXVsdGlwbHkiLCJ3ZC5RdWF0ZXJuaW9uLnNldEZyb21NYXRyaXgiLCJ3ZC5RdWF0ZXJuaW9uLnNldEZyb21BeGlzQW5nbGUiLCJ3ZC5RdWF0ZXJuaW9uLmludmVydCIsIndkLlF1YXRlcm5pb24uY29uanVnYXRlIiwid2QuUXVhdGVybmlvbi5jbG9uZSIsIndkLlF1YXRlcm5pb24uY29weSIsIndkLlF1YXRlcm5pb24ubm9ybWFsaXplIiwid2QuUXVhdGVybmlvbi5sZW5ndGgiLCJ3ZC5RdWF0ZXJuaW9uLm11bHRpcGx5VmVjdG9yMyIsIndkLlF1YXRlcm5pb24uc2V0Iiwid2QuUXVhdGVybmlvbi5zdWIiLCJ3ZC5RdWF0ZXJuaW9uLmdldEV1bGVyQW5nbGVzIiwid2QuUGxhbmUiLCJ3ZC5QbGFuZS5jb25zdHJ1Y3RvciIsIndkLlBsYW5lLmNyZWF0ZSIsIndkLlBsYW5lLmdldFJlZmxlY3Rpb25NYXRyaXgiLCJ3ZC5QbGFuZS5ub3JtYWxpemUiLCJ3ZC5QbGFuZS5jb3B5Iiwid2QuUGxhbmUuZG90Q29vcmRpbmF0ZSIsIndkLlJheSIsIndkLlJheS5jb25zdHJ1Y3RvciIsIndkLlJheS5jcmVhdGUiLCJ3ZC5SYXkuaXNJbnRlcnNlY3RXaXRoQUFCQiIsIndkLlJheS5pc0ludGVyc2VjdFdpdGhTcGhlcmUiLCJ3ZC5FbnRpdHkiLCJ3ZC5FbnRpdHkuY29uc3RydWN0b3IiLCJ3ZC5FbnRpdHkuYWRkVGFnIiwid2QuRW50aXR5LnJlbW92ZVRhZyIsIndkLkVudGl0eS5nZXRUYWdMaXN0Iiwid2QuRW50aXR5Lmhhc1RhZyIsIndkLkVudGl0eS5jb250YWluVGFnIiwid2QuQ29tcG9uZW50Iiwid2QuQ29tcG9uZW50LmNvbnN0cnVjdG9yIiwid2QuQ29tcG9uZW50LmluaXQiLCJ3ZC5Db21wb25lbnQuZGlzcG9zZSIsIndkLkNvbXBvbmVudC50cmFuc2Zvcm0iLCJ3ZC5Db21wb25lbnQuYWRkVG9PYmplY3QiLCJ3ZC5Db21wb25lbnQucmVtb3ZlRnJvbU9iamVjdCIsIndkLlNjaGVkdWxlciIsIndkLlNjaGVkdWxlci5jb25zdHJ1Y3RvciIsIndkLlNjaGVkdWxlci5jcmVhdGUiLCJ3ZC5TY2hlZHVsZXIudXBkYXRlIiwid2QuU2NoZWR1bGVyLnNjaGVkdWxlTG9vcCIsIndkLlNjaGVkdWxlci5zY2hlZHVsZUZyYW1lIiwid2QuU2NoZWR1bGVyLnNjaGVkdWxlSW50ZXJ2YWwiLCJ3ZC5TY2hlZHVsZXIuc2NoZWR1bGVUaW1lIiwid2QuU2NoZWR1bGVyLnBhdXNlIiwid2QuU2NoZWR1bGVyLnJlc3VtZSIsIndkLlNjaGVkdWxlci5zdGFydCIsIndkLlNjaGVkdWxlci5zdG9wIiwid2QuU2NoZWR1bGVyLmhhcyIsIndkLlNjaGVkdWxlci5yZW1vdmUiLCJ3ZC5TY2hlZHVsZXIucmVtb3ZlQWxsIiwid2QuU2NoZWR1bGVyLl9zY2hlZHVsZSIsIndkLlNjaGVkdWxlci5fYnVpbGRJZCIsIndkLlNjaGVkdWxlSXRlbSIsIndkLlNjaGVkdWxlSXRlbS5jb25zdHJ1Y3RvciIsIndkLlNjaGVkdWxlSXRlbS5wYXVzZSIsIndkLlNjaGVkdWxlSXRlbS5yZXN1bWUiLCJ3ZC5TY2hlZHVsZUl0ZW0uc3RhcnQiLCJ3ZC5TY2hlZHVsZUl0ZW0uc3RvcCIsIndkLlNjaGVkdWxlSXRlbS5maW5pc2giLCJ3ZC5UaW1lU2NoZWR1bGVJdGVtIiwid2QuVGltZVNjaGVkdWxlSXRlbS5jb25zdHJ1Y3RvciIsIndkLlRpbWVTY2hlZHVsZUl0ZW0uY3JlYXRlIiwid2QuVGltZVNjaGVkdWxlSXRlbS51cGRhdGUiLCJ3ZC5JbnRlcnZhbFNjaGVkdWxlSXRlbSIsIndkLkludGVydmFsU2NoZWR1bGVJdGVtLmNvbnN0cnVjdG9yIiwid2QuSW50ZXJ2YWxTY2hlZHVsZUl0ZW0uY3JlYXRlIiwid2QuSW50ZXJ2YWxTY2hlZHVsZUl0ZW0udXBkYXRlIiwid2QuSW50ZXJ2YWxTY2hlZHVsZUl0ZW0uc3RhcnQiLCJ3ZC5Mb29wU2NoZWR1bGVJdGVtIiwid2QuTG9vcFNjaGVkdWxlSXRlbS5jb25zdHJ1Y3RvciIsIndkLkxvb3BTY2hlZHVsZUl0ZW0uY3JlYXRlIiwid2QuTG9vcFNjaGVkdWxlSXRlbS51cGRhdGUiLCJ3ZC5GcmFtZVNjaGVkdWxlSXRlbSIsIndkLkZyYW1lU2NoZWR1bGVJdGVtLmNvbnN0cnVjdG9yIiwid2QuRnJhbWVTY2hlZHVsZUl0ZW0uY3JlYXRlIiwid2QuRnJhbWVTY2hlZHVsZUl0ZW0udXBkYXRlIiwid2QuR2FtZVN0YXRlIiwid2QuRGlyZWN0b3IiLCJ3ZC5EaXJlY3Rvci5jb25zdHJ1Y3RvciIsIndkLkRpcmVjdG9yLmdldEluc3RhbmNlIiwid2QuRGlyZWN0b3IuZ2FtZVRpbWUiLCJ3ZC5EaXJlY3Rvci5mcHMiLCJ3ZC5EaXJlY3Rvci5pc05vcm1hbCIsIndkLkRpcmVjdG9yLmlzU3RvcCIsIndkLkRpcmVjdG9yLmlzUGF1c2UiLCJ3ZC5EaXJlY3Rvci5pc1RpbWVDaGFuZ2UiLCJ3ZC5EaXJlY3Rvci5lbGFwc2VkIiwid2QuRGlyZWN0b3IudmlldyIsIndkLkRpcmVjdG9yLmluaXRXaGVuQ3JlYXRlIiwid2QuRGlyZWN0b3Iuc3RhcnQiLCJ3ZC5EaXJlY3Rvci5zdG9wIiwid2QuRGlyZWN0b3IucGF1c2UiLCJ3ZC5EaXJlY3Rvci5yZXN1bWUiLCJ3ZC5EaXJlY3Rvci5nZXREZWx0YVRpbWUiLCJ3ZC5EaXJlY3Rvci5pbml0VUlPYmplY3RTY2VuZSIsIndkLkRpcmVjdG9yLnJ1blVJT2JqZWN0U2NlbmUiLCJ3ZC5EaXJlY3Rvci5fc3RhcnRMb29wIiwid2QuRGlyZWN0b3IuX2J1aWxkSW5pdFN0cmVhbSIsIndkLkRpcmVjdG9yLl9pbml0Iiwid2QuRGlyZWN0b3IuX2luaXRHYW1lT2JqZWN0U2NlbmUiLCJ3ZC5EaXJlY3Rvci5fYnVpbGRMb29wU3RyZWFtIiwid2QuRGlyZWN0b3IuX2xvb3BCb2R5Iiwid2QuRGlyZWN0b3IuX3J1biIsIndkLkRpcmVjdG9yLl9ydW5HYW1lT2JqZWN0U2NlbmUiLCJ3ZC5EaXJlY3Rvci5faW5pdERvbUV2ZW50Iiwid2QuTWFpbiIsIndkLk1haW4uY29uc3RydWN0b3IiLCJ3ZC5NYWluLmlzVGVzdCIsIndkLk1haW4uc2V0Q29uZmlnIiwid2QuTWFpbi5pbml0Iiwid2QuRG9tRXZlbnRNYW5hZ2VyIiwid2QuRG9tRXZlbnRNYW5hZ2VyLmNvbnN0cnVjdG9yIiwid2QuRG9tRXZlbnRNYW5hZ2VyLmNyZWF0ZSIsIndkLkRvbUV2ZW50TWFuYWdlci5zY2VuZSIsIndkLkRvbUV2ZW50TWFuYWdlci5pbml0RG9tRXZlbnQiLCJ3ZC5Eb21FdmVudE1hbmFnZXIuX2J1aWxkTW91c2VEcmFnU3RyZWFtIiwid2QuRG9tRXZlbnRNYW5hZ2VyLl9nZXRNb3VzZU92ZXJBbmRNb3VzZU91dE9iamVjdCIsIndkLkRvbUV2ZW50TWFuYWdlci5fc2V0TW91c2VPdmVyVGFnIiwid2QuRG9tRXZlbnRNYW5hZ2VyLl9zZXRNb3VzZU91dFRhZyIsIndkLkRvbUV2ZW50TWFuYWdlci5fc2V0RXZlbnROYW1lQnlFdmVudFRhZyIsIndkLkRvbUV2ZW50TWFuYWdlci5fcmVtb3ZlRXZlbnRUYWciLCJ3ZC5Eb21FdmVudE1hbmFnZXIuX3RyaWdnZXIiLCJ3ZC5Eb21FdmVudE1hbmFnZXIuX2dldE1vdXNlRXZlbnRUcmlnZ2VyTGlzdCIsIndkLkRvbUV2ZW50TWFuYWdlci5faXNTY2VuZUFzVG9wT25lIiwid2QuRG9tRXZlbnRNYW5hZ2VyLl9maW5kVG9wR2FtZU9iamVjdCIsIndkLkRvbUV2ZW50TWFuYWdlci5fZ2V0RGlzdGFuY2VUb0NhbWVyYSIsIndkLkRvbUV2ZW50TWFuYWdlci5fZmluZFRvcFVJT2JqZWN0Iiwid2QuRG9tRXZlbnRNYW5hZ2VyLl9maW5kVHJpZ2dlckdhbWVPYmplY3RMaXN0Iiwid2QuRG9tRXZlbnRNYW5hZ2VyLl9maW5kVHJpZ2dlclVJT2JqZWN0TGlzdCIsIndkLkRvbUV2ZW50TWFuYWdlci5fYWRkVHJpZ2dlck9iamVjdEJ5UXVlcnlEZXRlY3RvciIsIndkLkRvbUV2ZW50TWFuYWdlci5faXNUcmlnZ2VyU2NlbmUiLCJ3ZC5Eb21FdmVudE1hbmFnZXIuX2dldE1vdXNlRXZlbnRUcmlnZ2VyTGlzdERhdGEiLCJ3ZC5FdmVudFRhZyIsIndkLkVudGl0eU9iamVjdCIsIndkLkVudGl0eU9iamVjdC5jb25zdHJ1Y3RvciIsIndkLkVudGl0eU9iamVjdC5zY3JpcHRMaXN0Iiwid2QuRW50aXR5T2JqZWN0LmJ1YmJsZVBhcmVudCIsIndkLkVudGl0eU9iamVjdC5pbml0V2hlbkNyZWF0ZSIsIndkLkVudGl0eU9iamVjdC5pbml0Iiwid2QuRW50aXR5T2JqZWN0Lm9uU3RhcnRMb29wIiwid2QuRW50aXR5T2JqZWN0Lm9uRW5kTG9vcCIsIndkLkVudGl0eU9iamVjdC5vbkVudGVyIiwid2QuRW50aXR5T2JqZWN0Lm9uRXhpdCIsIndkLkVudGl0eU9iamVjdC5vbkRpc3Bvc2UiLCJ3ZC5FbnRpdHlPYmplY3QuZGlzcG9zZSIsIndkLkVudGl0eU9iamVjdC5oYXNDaGlsZCIsIndkLkVudGl0eU9iamVjdC5hZGRDaGlsZCIsIndkLkVudGl0eU9iamVjdC5hZGRDaGlsZHJlbiIsIndkLkVudGl0eU9iamVjdC5mb3JFYWNoIiwid2QuRW50aXR5T2JqZWN0LmZpbHRlciIsIndkLkVudGl0eU9iamVjdC5zb3J0Iiwid2QuRW50aXR5T2JqZWN0LmdldENoaWxkcmVuIiwid2QuRW50aXR5T2JqZWN0LmdldENoaWxkIiwid2QuRW50aXR5T2JqZWN0LmZpbmRDaGlsZEJ5VWlkIiwid2QuRW50aXR5T2JqZWN0LmZpbmRDaGlsZEJ5VGFnIiwid2QuRW50aXR5T2JqZWN0LmZpbmRDaGlsZEJ5TmFtZSIsIndkLkVudGl0eU9iamVjdC5maW5kQ2hpbGRyZW5CeU5hbWUiLCJ3ZC5FbnRpdHlPYmplY3QuZ2V0Q29tcG9uZW50Iiwid2QuRW50aXR5T2JqZWN0LmZpbmRDb21wb25lbnRCeVVpZCIsIndkLkVudGl0eU9iamVjdC5nZXRGaXJzdENvbXBvbmVudCIsIndkLkVudGl0eU9iamVjdC5mb3JFYWNoQ29tcG9uZW50Iiwid2QuRW50aXR5T2JqZWN0LnJlbW92ZUNoaWxkIiwid2QuRW50aXR5T2JqZWN0Lmhhc0NvbXBvbmVudCIsIndkLkVudGl0eU9iamVjdC5hZGRDb21wb25lbnQiLCJ3ZC5FbnRpdHlPYmplY3QucmVtb3ZlQ29tcG9uZW50Iiwid2QuRW50aXR5T2JqZWN0LnJlbW92ZUFsbENvbXBvbmVudCIsIndkLkVudGl0eU9iamVjdC5yZW5kZXIiLCJ3ZC5FbnRpdHlPYmplY3QudXBkYXRlIiwid2QuRW50aXR5T2JqZWN0LmV4ZWNTY3JpcHQiLCJ3ZC5FbnRpdHlPYmplY3QuZXhlY0V2ZW50U2NyaXB0Iiwid2QuRW50aXR5T2JqZWN0LmJlZm9yZVVwZGF0ZUNoaWxkcmVuIiwid2QuRW50aXR5T2JqZWN0LmFmdGVySW5pdENoaWxkcmVuIiwid2QuRW50aXR5T2JqZWN0LmJpbmRTdGFydExvb3BFdmVudCIsIndkLkVudGl0eU9iamVjdC5iaW5kRW5kTG9vcEV2ZW50Iiwid2QuRW50aXR5T2JqZWN0LmdldFJlbmRlckxpc3QiLCJ3ZC5FbnRpdHlPYmplY3QuaW5pdENvbXBvbmVudCIsIndkLkVudGl0eU9iamVjdC5nZXRBbGxDaGlsZHJlbiIsIndkLkVudGl0eU9iamVjdC5fZ2V0R2VvbWV0cnkiLCJ3ZC5FbnRpdHlPYmplY3QuX2dldENhbWVyYSIsIndkLkVudGl0eU9iamVjdC5fZ2V0QW5pbWF0aW9uIiwid2QuRW50aXR5T2JqZWN0Ll9nZXRSZW5kZXJlckNvbXBvbmVudCIsIndkLkVudGl0eU9iamVjdC5fZ2V0Q29sbGlkZXIiLCJ3ZC5FbnRpdHlPYmplY3QuZ2V0Q29tcG9uZW50Q291bnQiLCJ3ZC5FbnRpdHlPYmplY3QuX3JlbW92ZUNvbXBvbmVudEhhbmRsZXIiLCJ3ZC5FbnRpdHlPYmplY3QuX2FkZFRvU2NyaXB0RXhlY3V0ZUhpc3RvcnkiLCJ3ZC5FbnRpdHlPYmplY3QuX2lzU2NyaXB0RXhlY3V0ZWQiLCJ3ZC5FbnRpdHlPYmplY3QuX2J1aWxkU2NyaXB0SGlzdG9yeUtleSIsIndkLlVJT2JqZWN0Iiwid2QuVUlPYmplY3QuY29uc3RydWN0b3IiLCJ3ZC5VSU9iamVjdC5jcmVhdGUiLCJ3ZC5VSU9iamVjdC5iZWZvcmVVcGRhdGVDaGlsZHJlbiIsIndkLlVJT2JqZWN0LmNyZWF0ZVRyYW5zZm9ybSIsIndkLlVJT2JqZWN0LmFkZENvbXBvbmVudCIsIndkLlVJT2JqZWN0LmFkZENoaWxkIiwid2QuR2FtZU9iamVjdCIsIndkLkdhbWVPYmplY3QuY29uc3RydWN0b3IiLCJ3ZC5HYW1lT2JqZWN0LmNyZWF0ZSIsIndkLkdhbWVPYmplY3QuZ2V0T2N0cmVlIiwid2QuR2FtZU9iamVjdC5jcmVhdGVUcmFuc2Zvcm0iLCJ3ZC5HYW1lT2JqZWN0LmdldFJlbmRlckxpc3QiLCJ3ZC5HYW1lT2JqZWN0LmFmdGVySW5pdENoaWxkcmVuIiwid2QuU2NlbmVEaXNwYXRjaGVyIiwid2QuU2NlbmVEaXNwYXRjaGVyLmNvbnN0cnVjdG9yIiwid2QuU2NlbmVEaXNwYXRjaGVyLmNyZWF0ZSIsIndkLlNjZW5lRGlzcGF0Y2hlci5zY3JpcHRMaXN0Iiwid2QuU2NlbmVEaXNwYXRjaGVyLmFjdGlvbk1hbmFnZXIiLCJ3ZC5TY2VuZURpc3BhdGNoZXIuYW1iaWVudExpZ2h0Iiwid2QuU2NlbmVEaXNwYXRjaGVyLmRpcmVjdGlvbkxpZ2h0cyIsIndkLlNjZW5lRGlzcGF0Y2hlci5wb2ludExpZ2h0cyIsIndkLlNjZW5lRGlzcGF0Y2hlci5zaWRlIiwid2QuU2NlbmVEaXNwYXRjaGVyLnNoYWRvd01hcCIsIndkLlNjZW5lRGlzcGF0Y2hlci5zaGFkZXIiLCJ3ZC5TY2VuZURpc3BhdGNoZXIuY2FtZXJhIiwid2QuU2NlbmVEaXNwYXRjaGVyLmlzVXNlUHJvZ3JhbSIsIndkLlNjZW5lRGlzcGF0Y2hlci5waHlzaWNzIiwid2QuU2NlbmVEaXNwYXRjaGVyLnBoeXNpY3NFbmdpbmVBZGFwdGVyIiwid2QuU2NlbmVEaXNwYXRjaGVyLmluaXRXaGVuQ3JlYXRlIiwid2QuU2NlbmVEaXNwYXRjaGVyLnVzZVByb2dyYW0iLCJ3ZC5TY2VuZURpc3BhdGNoZXIudW5Vc2VQcm9ncmFtIiwid2QuU2NlbmVEaXNwYXRjaGVyLmFkZENoaWxkIiwid2QuU2NlbmVEaXNwYXRjaGVyLmFkZFJlbmRlclRhcmdldFJlbmRlcmVyIiwid2QuU2NlbmVEaXNwYXRjaGVyLnJlbW92ZVJlbmRlclRhcmdldFJlbmRlcmVyIiwid2QuU2NlbmVEaXNwYXRjaGVyLmRpc3Bvc2UiLCJ3ZC5TY2VuZURpc3BhdGNoZXIuaGFzQ2hpbGQiLCJ3ZC5TY2VuZURpc3BhdGNoZXIuYWRkQ2hpbGRyZW4iLCJ3ZC5TY2VuZURpc3BhdGNoZXIuZ2V0Q2hpbGRyZW4iLCJ3ZC5TY2VuZURpc3BhdGNoZXIuZmluZENoaWxkQnlVaWQiLCJ3ZC5TY2VuZURpc3BhdGNoZXIuZmluZENoaWxkQnlUYWciLCJ3ZC5TY2VuZURpc3BhdGNoZXIuZmluZENoaWxkQnlOYW1lIiwid2QuU2NlbmVEaXNwYXRjaGVyLmZpbmRDaGlsZHJlbkJ5TmFtZSIsIndkLlNjZW5lRGlzcGF0Y2hlci5yZW1vdmVDaGlsZCIsIndkLlNjZW5lRGlzcGF0Y2hlci5vblN0YXJ0TG9vcCIsIndkLlNjZW5lRGlzcGF0Y2hlci5vbkVuZExvb3AiLCJ3ZC5TY2VuZURpc3BhdGNoZXIub25FbnRlciIsIndkLlNjZW5lRGlzcGF0Y2hlci5vbkV4aXQiLCJ3ZC5TY2VuZURpc3BhdGNoZXIub25EaXNwb3NlIiwid2QuU2NlbmVEaXNwYXRjaGVyLmV4ZWNTY3JpcHQiLCJ3ZC5TY2VuZURpc3BhdGNoZXIuZXhlY0V2ZW50U2NyaXB0Iiwid2QuU2NlbmVEaXNwYXRjaGVyLmNyZWF0ZVRyYW5zZm9ybSIsIndkLlNjZW5lIiwid2QuU2NlbmUuY29uc3RydWN0b3IiLCJ3ZC5HYW1lT2JqZWN0U2NlbmUiLCJ3ZC5HYW1lT2JqZWN0U2NlbmUuY29uc3RydWN0b3IiLCJ3ZC5HYW1lT2JqZWN0U2NlbmUuY3JlYXRlIiwid2QuR2FtZU9iamVjdFNjZW5lLmFtYmllbnRMaWdodCIsIndkLkdhbWVPYmplY3RTY2VuZS5kaXJlY3Rpb25MaWdodHMiLCJ3ZC5HYW1lT2JqZWN0U2NlbmUucG9pbnRMaWdodHMiLCJ3ZC5HYW1lT2JqZWN0U2NlbmUuaW5pdCIsIndkLkdhbWVPYmplY3RTY2VuZS51c2VQcm9ncmFtIiwid2QuR2FtZU9iamVjdFNjZW5lLnVuVXNlUHJvZ3JhbSIsIndkLkdhbWVPYmplY3RTY2VuZS5hZGRDaGlsZCIsIndkLkdhbWVPYmplY3RTY2VuZS5hZGRSZW5kZXJUYXJnZXRSZW5kZXJlciIsIndkLkdhbWVPYmplY3RTY2VuZS5yZW1vdmVSZW5kZXJUYXJnZXRSZW5kZXJlciIsIndkLkdhbWVPYmplY3RTY2VuZS51cGRhdGUiLCJ3ZC5HYW1lT2JqZWN0U2NlbmUucmVuZGVyIiwid2QuR2FtZU9iamVjdFNjZW5lLmNyZWF0ZVRyYW5zZm9ybSIsIndkLkdhbWVPYmplY3RTY2VuZS5faXNDYW1lcmEiLCJ3ZC5HYW1lT2JqZWN0U2NlbmUuX2lzTGlnaHQiLCJ3ZC5QaHlzaWNzQ29uZmlnIiwid2QuUGh5c2ljc0NvbmZpZy5jb25zdHJ1Y3RvciIsIndkLlBoeXNpY3NDb25maWcuY3JlYXRlIiwid2QuUGh5c2ljc0NvbmZpZy5ncmF2aXR5Iiwid2QuU2hhZG93TWFwU29mdFR5cGUiLCJ3ZC5VSU9iamVjdFNjZW5lIiwid2QuVUlPYmplY3RTY2VuZS5jb25zdHJ1Y3RvciIsIndkLlVJT2JqZWN0U2NlbmUuY3JlYXRlIiwid2QuVUlPYmplY3RTY2VuZS5vbkVuZExvb3AiLCJ3ZC5VSU9iamVjdFNjZW5lLm9uU3RhcnRMb29wIiwid2QuVUlPYmplY3RTY2VuZS5jcmVhdGVUcmFuc2Zvcm0iLCJ3ZC5VSU9iamVjdFNjZW5lLmJlZm9yZVVwZGF0ZUNoaWxkcmVuIiwid2QuVUlPYmplY3RTY2VuZS5iaW5kU3RhcnRMb29wRXZlbnQiLCJ3ZC5VSU9iamVjdFNjZW5lLmJpbmRFbmRMb29wRXZlbnQiLCJ3ZC5VSU9iamVjdFNjZW5lLl9nZXRVSVJlbmRlcmVyIiwid2QuVUlPYmplY3RTY2VuZS5fcmVzZXRBbGxSZW5kZXJlckNsZWFyQ2FudmFzRmxhZyIsIndkLlVJT2JqZWN0U2NlbmUuX3Jlc2V0QWxsUmVuZGVyZXJTdGF0ZSIsIndkLlVJT2JqZWN0U2NlbmUuX3Jlc2V0QWxsVHJhbnNmb3JtU3RhdGUiLCJ3ZC5VSU9iamVjdFNjZW5lLl9pc05vdERpcnR5RHVyaW5nVGhpc0xvb3AiLCJ3ZC5VSU9iamVjdFNjZW5lLl9yZXNldFRyYW5zZm9ybUZsYWciLCJ3ZC5VSU9iamVjdFNjZW5lLl9zb3J0U2libGluZ0NoaWxkcmVuIiwid2QuU2t5Ym94Iiwid2QuU2t5Ym94LmNvbnN0cnVjdG9yIiwid2QuU2t5Ym94LmNyZWF0ZSIsIndkLlNreWJveC5pbml0V2hlbkNyZWF0ZSIsIndkLkNvbGxpc2lvbkRldGVjdG9yIiwid2QuQ29sbGlzaW9uRGV0ZWN0b3IuY29uc3RydWN0b3IiLCJ3ZC5Db2xsaXNpb25EZXRlY3Rvci5jcmVhdGUiLCJ3ZC5Db2xsaXNpb25EZXRlY3Rvci5kZXRlY3QiLCJ3ZC5Db2xsaXNpb25EZXRlY3Rvci5fZ2V0Q29sbGlkZU9iamVjdHMiLCJ3ZC5Db2xsaXNpb25EZXRlY3Rvci5fZ2V0Q29sbGlkZU9iamVjdHNCeUdhbWVPYmplY3RUb0dhbWVPYmplY3QiLCJ3ZC5Db2xsaXNpb25EZXRlY3Rvci5fY2xlYXJDb2xsaXNpb25UYWJsZSIsIndkLkNvbGxpc2lvbkRldGVjdG9yLl9pc1RhcmdldENvbGxpZGVkV2l0aFNvdXJjZUluQ3VycmVudEZyYW1lIiwid2QuQ29sbGlzaW9uRGV0ZWN0b3IuX3JlY29yZENvbGxpc2lvblRhcmdldHMiLCJ3ZC5Db2xsaXNpb25EZXRlY3Rvci5fZ2V0Q29sbGlkZU9iamVjdHNXaXRoT2N0cmVlIiwid2QuQ29sbGlzaW9uRGV0ZWN0b3IuX2lzQ29sbGlzaW9uU3RhcnQiLCJ3ZC5Db2xsaXNpb25EZXRlY3Rvci5faXNDb2xsaXNpb25FbmQiLCJ3ZC5Db2xsaXNpb25EZXRlY3Rvci5fdHJpZ2dlckNvbGxpc2lvbkV2ZW50T2ZDb2xsaWRlT2JqZWN0V2hpY2hIYXNSaWdpZEJvZHkiLCJ3ZC5Db2xsaXNpb25EZXRlY3Rvci5faXNOb3RUcmFuc2Zvcm0iLCJ3ZC5Db2xsaXNpb25UYWciLCJ3ZC5FdmVudExpc3RlbmVyTWFwIiwid2QuRXZlbnRMaXN0ZW5lck1hcC5jb25zdHJ1Y3RvciIsIndkLkV2ZW50TGlzdGVuZXJNYXAuaGFzQ2hpbGQiLCJ3ZC5FdmVudExpc3RlbmVyTWFwLmFwcGVuZENoaWxkIiwid2QuRXZlbnRMaXN0ZW5lck1hcC5maWx0ZXIiLCJ3ZC5FdmVudExpc3RlbmVyTWFwLmZvckVhY2giLCJ3ZC5FdmVudExpc3RlbmVyTWFwLmdldEV2ZW50TmFtZUZyb21LZXkiLCJ3ZC5FdmVudExpc3RlbmVyTWFwLmlzRXZlbnROYW1lIiwid2QuQ3VzdG9tRXZlbnRMaXN0ZW5lck1hcCIsIndkLkN1c3RvbUV2ZW50TGlzdGVuZXJNYXAuY29uc3RydWN0b3IiLCJ3ZC5DdXN0b21FdmVudExpc3RlbmVyTWFwLmNyZWF0ZSIsIndkLkN1c3RvbUV2ZW50TGlzdGVuZXJNYXAuZ2V0Q2hpbGQiLCJ3ZC5DdXN0b21FdmVudExpc3RlbmVyTWFwLnJlbW92ZUNoaWxkIiwid2QuQ3VzdG9tRXZlbnRMaXN0ZW5lck1hcC5nZXRVaWRGcm9tS2V5Iiwid2QuQ3VzdG9tRXZlbnRMaXN0ZW5lck1hcC5pc1RhcmdldCIsIndkLkN1c3RvbUV2ZW50TGlzdGVuZXJNYXAuZ2V0RXZlbnRTZXBhcmF0b3IiLCJ3ZC5DdXN0b21FdmVudExpc3RlbmVyTWFwLmJ1aWxkS2V5Iiwid2QuQ3VzdG9tRXZlbnRMaXN0ZW5lck1hcC5fYnVpbGRLZXlXaXRoVWlkIiwid2QuQ3VzdG9tRXZlbnRMaXN0ZW5lck1hcC5fYnVpbGRLZXlQcmVmaXgiLCJ3ZC5Eb21FdmVudExpc3RlbmVyTWFwIiwid2QuRG9tRXZlbnRMaXN0ZW5lck1hcC5jb25zdHJ1Y3RvciIsIndkLkRvbUV2ZW50TGlzdGVuZXJNYXAuY3JlYXRlIiwid2QuRG9tRXZlbnRMaXN0ZW5lck1hcC5nZXRDaGlsZCIsIndkLkRvbUV2ZW50TGlzdGVuZXJNYXAucmVtb3ZlQ2hpbGQiLCJ3ZC5Eb21FdmVudExpc3RlbmVyTWFwLmlzRG9tIiwid2QuRG9tRXZlbnRMaXN0ZW5lck1hcC5nZXRFdmVudFNlcGFyYXRvciIsIndkLkRvbUV2ZW50TGlzdGVuZXJNYXAuYnVpbGRLZXkiLCJ3ZC5Eb21FdmVudExpc3RlbmVyTWFwLl9idWlsZEtleVByZWZpeCIsIndkLkRvbUV2ZW50TGlzdGVuZXJNYXAuX2dldEV2ZW50RGF0YU9mZkRhdGFMaXN0Iiwid2QuRXZlbnRUeXBlIiwid2QuQnJvd3NlcklkZW50aWZpZXIiLCJ3ZC5FdmVudE5hbWUiLCJ3ZC5FdmVudE5hbWVIYW5kbGVyIiwid2QuRXZlbnROYW1lSGFuZGxlci5jb25zdHJ1Y3RvciIsIndkLkV2ZW50TmFtZUhhbmRsZXIuaGFuZGxlRXZlbnROYW1lIiwid2QuRXZlbnROYW1lSGFuZGxlci5faXNGYWxsYmFja0V2ZW50TmFtZSIsIndkLkV2ZW50TmFtZUhhbmRsZXIuX2dldFNwZWNpZnlCcm93c2VyRXZlbnROYW1lIiwid2QuRXZlbnRQaGFzZSIsIndkLkV2ZW50VGFibGUiLCJ3ZC5FdmVudFRhYmxlLmNvbnN0cnVjdG9yIiwid2QuRXZlbnRUYWJsZS5nZXRFdmVudFR5cGUiLCJ3ZC5FdmVudCIsIndkLkV2ZW50LmNvbnN0cnVjdG9yIiwid2QuRXZlbnQudHlwZSIsIndkLkV2ZW50LnN0b3BQcm9wYWdhdGlvbiIsIndkLkV2ZW50LmNvcHlNZW1iZXIiLCJ3ZC5Eb21FdmVudCIsIndkLkRvbUV2ZW50LmNvbnN0cnVjdG9yIiwid2QuRG9tRXZlbnQuZXZlbnQiLCJ3ZC5Eb21FdmVudC5wcmV2ZW50RGVmYXVsdCIsIndkLkRvbUV2ZW50LmdldERhdGFGcm9tQ3VzdG9tRXZlbnQiLCJ3ZC5Nb3VzZUV2ZW50Iiwid2QuTW91c2VFdmVudC5jb25zdHJ1Y3RvciIsIndkLk1vdXNlRXZlbnQuY3JlYXRlIiwid2QuTW91c2VFdmVudC5sb2NhdGlvbiIsIndkLk1vdXNlRXZlbnQubG9jYXRpb25JblZpZXciLCJ3ZC5Nb3VzZUV2ZW50LmJ1dHRvbiIsIndkLk1vdXNlRXZlbnQud2hlZWwiLCJ3ZC5Nb3VzZUV2ZW50Lm1vdmVtZW50RGVsdGEiLCJ3ZC5Nb3VzZUV2ZW50LmNvcHkiLCJ3ZC5Nb3VzZUV2ZW50Ll9pc1BvaW50ZXJMb2NrZWQiLCJ3ZC5LZXlib2FyZEV2ZW50Iiwid2QuS2V5Ym9hcmRFdmVudC5jb25zdHJ1Y3RvciIsIndkLktleWJvYXJkRXZlbnQuY3JlYXRlIiwid2QuS2V5Ym9hcmRFdmVudC5jdHJsS2V5Iiwid2QuS2V5Ym9hcmRFdmVudC5hbHRLZXkiLCJ3ZC5LZXlib2FyZEV2ZW50LnNoaWZ0S2V5Iiwid2QuS2V5Ym9hcmRFdmVudC5tZXRhS2V5Iiwid2QuS2V5Ym9hcmRFdmVudC5rZXlDb2RlIiwid2QuS2V5Ym9hcmRFdmVudC5rZXkiLCJ3ZC5LZXlib2FyZEV2ZW50LmNvcHkiLCJ3ZC5DdXN0b21FdmVudCIsIndkLkN1c3RvbUV2ZW50LmNvbnN0cnVjdG9yIiwid2QuQ3VzdG9tRXZlbnQuY3JlYXRlIiwid2QuQ3VzdG9tRXZlbnQuY29weVB1YmxpY0F0dHJpIiwid2QuQ3VzdG9tRXZlbnQuY29weSIsIndkLkN1c3RvbUV2ZW50LmdldERhdGFGcm9tRG9tRXZlbnQiLCJ3ZC5Nb3VzZUJ1dHRvbiIsIndkLkV2ZW50TGlzdGVuZXIiLCJ3ZC5FdmVudExpc3RlbmVyLmNvbnN0cnVjdG9yIiwid2QuRXZlbnRMaXN0ZW5lci5jcmVhdGUiLCJ3ZC5FdmVudExpc3RlbmVyLmluaXRXaGVuQ3JlYXRlIiwid2QuRXZlbnRMaXN0ZW5lci5fc2V0SGFuZGxlckRhdGFMaXN0Iiwid2QuRXZlbnRMaXN0ZW5lci5fcGFyc2VFdmVudE5hbWUiLCJ3ZC5FdmVudEhhbmRsZXIiLCJ3ZC5FdmVudEhhbmRsZXIuY29uc3RydWN0b3IiLCJ3ZC5Eb21FdmVudEhhbmRsZXIiLCJ3ZC5Eb21FdmVudEhhbmRsZXIuY29uc3RydWN0b3IiLCJ3ZC5Eb21FdmVudEhhbmRsZXIub2ZmIiwid2QuRG9tRXZlbnRIYW5kbGVyLnRyaWdnZXIiLCJ3ZC5Eb21FdmVudEhhbmRsZXIuY2xlYXJIYW5kbGVyIiwid2QuRG9tRXZlbnRIYW5kbGVyLmJ1aWxkRG9tSGFuZGxlciIsIndkLkRvbUV2ZW50SGFuZGxlci5oYW5kbGVyIiwid2QuRG9tRXZlbnRIYW5kbGVyLl9iaW5kIiwid2QuRG9tRXZlbnRIYW5kbGVyLl91bkJpbmQiLCJ3ZC5Nb3VzZUV2ZW50SGFuZGxlciIsIndkLk1vdXNlRXZlbnRIYW5kbGVyLmNvbnN0cnVjdG9yIiwid2QuTW91c2VFdmVudEhhbmRsZXIuZ2V0SW5zdGFuY2UiLCJ3ZC5Nb3VzZUV2ZW50SGFuZGxlci5vbiIsIndkLk1vdXNlRXZlbnRIYW5kbGVyLmdldERlZmF1bHREb20iLCJ3ZC5Nb3VzZUV2ZW50SGFuZGxlci50cmlnZ2VyRG9tRXZlbnQiLCJ3ZC5Nb3VzZUV2ZW50SGFuZGxlci5hZGRFbmdpbmVIYW5kbGVyIiwid2QuTW91c2VFdmVudEhhbmRsZXIuY3JlYXRlRXZlbnREYXRhIiwid2QuTW91c2VFdmVudEhhbmRsZXIuX2hhbmRsZU1vdmUiLCJ3ZC5Nb3VzZUV2ZW50SGFuZGxlci5fY3JlYXRlRXZlbnRPYmplY3QiLCJ3ZC5Nb3VzZUV2ZW50SGFuZGxlci5fY29weUV2ZW50RGF0YVRvRXZlbnRPYmplY3QiLCJ3ZC5Nb3VzZUV2ZW50SGFuZGxlci5fc2F2ZUxvY2F0aW9uIiwid2QuS2V5Ym9hcmRFdmVudEhhbmRsZXIiLCJ3ZC5LZXlib2FyZEV2ZW50SGFuZGxlci5jb25zdHJ1Y3RvciIsIndkLktleWJvYXJkRXZlbnRIYW5kbGVyLmdldEluc3RhbmNlIiwid2QuS2V5Ym9hcmRFdmVudEhhbmRsZXIub24iLCJ3ZC5LZXlib2FyZEV2ZW50SGFuZGxlci50cmlnZ2VyRG9tRXZlbnQiLCJ3ZC5LZXlib2FyZEV2ZW50SGFuZGxlci5nZXREZWZhdWx0RG9tIiwid2QuS2V5Ym9hcmRFdmVudEhhbmRsZXIuYWRkRW5naW5lSGFuZGxlciIsIndkLktleWJvYXJkRXZlbnRIYW5kbGVyLmNyZWF0ZUV2ZW50RGF0YSIsIndkLktleWJvYXJkRXZlbnRIYW5kbGVyLl9oYW5kbGVLZXlEb3duIiwid2QuS2V5Ym9hcmRFdmVudEhhbmRsZXIuX2hhbmRsZUtleVVwIiwid2QuS2V5Ym9hcmRFdmVudEhhbmRsZXIuX2NvcHlFdmVudERhdGFUb0V2ZW50T2JqZWN0Iiwid2QuS2V5Ym9hcmRFdmVudEhhbmRsZXIuX3NldEtleVN0YXRlQWxsRmFsc2UiLCJ3ZC5LZXlib2FyZEV2ZW50SGFuZGxlci5fY3JlYXRlRXZlbnRPYmplY3QiLCJ3ZC5DdXN0b21FdmVudEhhbmRsZXIiLCJ3ZC5DdXN0b21FdmVudEhhbmRsZXIuY29uc3RydWN0b3IiLCJ3ZC5DdXN0b21FdmVudEhhbmRsZXIuZ2V0SW5zdGFuY2UiLCJ3ZC5DdXN0b21FdmVudEhhbmRsZXIub24iLCJ3ZC5DdXN0b21FdmVudEhhbmRsZXIub2ZmIiwid2QuQ3VzdG9tRXZlbnRIYW5kbGVyLnRyaWdnZXIiLCJ3ZC5DdXN0b21FdmVudEhhbmRsZXIuX3RyaWdnZXJFdmVudEhhbmRsZXIiLCJ3ZC5DdXN0b21FdmVudEhhbmRsZXIuX3RyaWdnZXJUYXJnZXRBbmRFdmVudEhhbmRsZXIiLCJ3ZC5DdXN0b21FdmVudEhhbmRsZXIuX3NldFVzZXJEYXRhIiwid2QuRXZlbnREaXNwYXRjaGVyIiwid2QuRXZlbnREaXNwYXRjaGVyLmNvbnN0cnVjdG9yIiwid2QuQ3VzdG9tRXZlbnREaXNwYXRjaGVyIiwid2QuQ3VzdG9tRXZlbnREaXNwYXRjaGVyLmNvbnN0cnVjdG9yIiwid2QuQ3VzdG9tRXZlbnREaXNwYXRjaGVyLmdldEluc3RhbmNlIiwid2QuQ3VzdG9tRXZlbnREaXNwYXRjaGVyLnRyaWdnZXIiLCJ3ZC5DdXN0b21FdmVudERpc3BhdGNoZXIuZW1pdCIsIndkLkN1c3RvbUV2ZW50RGlzcGF0Y2hlci5icm9hZGNhc3QiLCJ3ZC5DdXN0b21FdmVudERpc3BhdGNoZXIuX3RyaWdnZXJXaXRoVXNlckRhdGEiLCJ3ZC5Eb21FdmVudERpc3BhdGNoZXIiLCJ3ZC5Eb21FdmVudERpc3BhdGNoZXIuY29uc3RydWN0b3IiLCJ3ZC5Eb21FdmVudERpc3BhdGNoZXIuZ2V0SW5zdGFuY2UiLCJ3ZC5Eb21FdmVudERpc3BhdGNoZXIudHJpZ2dlciIsIndkLkV2ZW50UmVnaXN0ZXIiLCJ3ZC5FdmVudFJlZ2lzdGVyLmNvbnN0cnVjdG9yIiwid2QuRXZlbnRSZWdpc3Rlci5nZXRFdmVudFJlZ2lzdGVyRGF0YUxpc3QiLCJ3ZC5FdmVudFJlZ2lzdGVyLmZpbHRlciIsIndkLkV2ZW50UmVnaXN0ZXIuZm9yRWFjaCIsIndkLkV2ZW50UmVnaXN0ZXIuZ2V0Q2hpbGQiLCJ3ZC5FdmVudFJlZ2lzdGVyLmdldEV2ZW50TmFtZUZyb21LZXkiLCJ3ZC5DdXN0b21FdmVudFJlZ2lzdGVyIiwid2QuQ3VzdG9tRXZlbnRSZWdpc3Rlci5jb25zdHJ1Y3RvciIsIndkLkN1c3RvbUV2ZW50UmVnaXN0ZXIuZ2V0SW5zdGFuY2UiLCJ3ZC5DdXN0b21FdmVudFJlZ2lzdGVyLnJlZ2lzdGVyIiwid2QuQ3VzdG9tRXZlbnRSZWdpc3Rlci5yZW1vdmUiLCJ3ZC5DdXN0b21FdmVudFJlZ2lzdGVyLnNldEJ1YmJsZVBhcmVudCIsIndkLkN1c3RvbUV2ZW50UmVnaXN0ZXIuZ2V0VWlkRnJvbUtleSIsIndkLkN1c3RvbUV2ZW50UmVnaXN0ZXIuaXNUYXJnZXQiLCJ3ZC5DdXN0b21FdmVudFJlZ2lzdGVyLl9pc0FsbEV2ZW50SGFuZGxlclJlbW92ZWQiLCJ3ZC5DdXN0b21FdmVudFJlZ2lzdGVyLl9oYW5kbGVBZnRlckFsbEV2ZW50SGFuZGxlclJlbW92ZWQiLCJ3ZC5Eb21FdmVudFJlZ2lzdGVyIiwid2QuRG9tRXZlbnRSZWdpc3Rlci5jb25zdHJ1Y3RvciIsIndkLkRvbUV2ZW50UmVnaXN0ZXIuZ2V0SW5zdGFuY2UiLCJ3ZC5Eb21FdmVudFJlZ2lzdGVyLnJlZ2lzdGVyIiwid2QuRG9tRXZlbnRSZWdpc3Rlci5yZW1vdmUiLCJ3ZC5Eb21FdmVudFJlZ2lzdGVyLmlzQmluZGVkIiwid2QuRG9tRXZlbnRSZWdpc3Rlci5pc0RvbSIsIndkLkRvbUV2ZW50UmVnaXN0ZXIuZ2V0RG9tSGFuZGxlciIsIndkLkV2ZW50QmluZGVyIiwid2QuRXZlbnRCaW5kZXIuY29uc3RydWN0b3IiLCJ3ZC5DdXN0b21FdmVudEJpbmRlciIsIndkLkN1c3RvbUV2ZW50QmluZGVyLmNvbnN0cnVjdG9yIiwid2QuQ3VzdG9tRXZlbnRCaW5kZXIuZ2V0SW5zdGFuY2UiLCJ3ZC5DdXN0b21FdmVudEJpbmRlci5vbiIsIndkLkN1c3RvbUV2ZW50QmluZGVyLm9mZiIsIndkLkN1c3RvbUV2ZW50QmluZGVyLl9jaGVja0V2ZW50U2VwYXJhdG9yIiwid2QuRG9tRXZlbnRCaW5kZXIiLCJ3ZC5Eb21FdmVudEJpbmRlci5jb25zdHJ1Y3RvciIsIndkLkRvbUV2ZW50QmluZGVyLmdldEluc3RhbmNlIiwid2QuRG9tRXZlbnRCaW5kZXIub24iLCJ3ZC5Eb21FdmVudEJpbmRlci5vZmYiLCJ3ZC5Eb21FdmVudEJpbmRlci5fY2hlY2tFdmVudFNlcGFyYXRvciIsIndkLkV2ZW50SGFuZGxlckZhY3RvcnkiLCJ3ZC5FdmVudEhhbmRsZXJGYWN0b3J5LmNvbnN0cnVjdG9yIiwid2QuRXZlbnRIYW5kbGVyRmFjdG9yeS5jcmVhdGVFdmVudEhhbmRsZXIiLCJ3ZC5FdmVudEJpbmRlckZhY3RvcnkiLCJ3ZC5FdmVudEJpbmRlckZhY3RvcnkuY29uc3RydWN0b3IiLCJ3ZC5FdmVudEJpbmRlckZhY3RvcnkuY3JlYXRlRXZlbnRCaW5kZXIiLCJ3ZC5FdmVudERpc3BhdGNoZXJGYWN0b3J5Iiwid2QuRXZlbnREaXNwYXRjaGVyRmFjdG9yeS5jb25zdHJ1Y3RvciIsIndkLkV2ZW50RGlzcGF0Y2hlckZhY3RvcnkuY3JlYXRlRXZlbnREaXNwYXRjaGVyIiwid2QuRXZlbnRNYW5hZ2VyIiwid2QuRXZlbnRNYW5hZ2VyLmNvbnN0cnVjdG9yIiwid2QuRXZlbnRNYW5hZ2VyLm9uIiwid2QuRXZlbnRNYW5hZ2VyLm9mZiIsIndkLkV2ZW50TWFuYWdlci50cmlnZ2VyIiwid2QuRXZlbnRNYW5hZ2VyLmJyb2FkY2FzdCIsIndkLkV2ZW50TWFuYWdlci5lbWl0Iiwid2QuRXZlbnRNYW5hZ2VyLmZyb21FdmVudCIsIndkLkV2ZW50TWFuYWdlci5zZXRCdWJibGVQYXJlbnQiLCJ3ZC5FbmdpbmVFdmVudCIsIndkLkV2ZW50VHJpZ2dlckRldGVjdG9yIiwid2QuRXZlbnRUcmlnZ2VyRGV0ZWN0b3IuY29uc3RydWN0b3IiLCJ3ZC5VSUV2ZW50VHJpZ2dlckRldGVjdG9yIiwid2QuVUlFdmVudFRyaWdnZXJEZXRlY3Rvci5jb25zdHJ1Y3RvciIsIndkLlVJRXZlbnRUcmlnZ2VyRGV0ZWN0b3IuY3JlYXRlIiwid2QuVUlFdmVudFRyaWdnZXJEZXRlY3Rvci5pc1RyaWdnZXIiLCJ3ZC5SYXlDYXN0ZXJFdmVudFRyaWdnZXJEZXRlY3RvciIsIndkLlJheUNhc3RlckV2ZW50VHJpZ2dlckRldGVjdG9yLmNvbnN0cnVjdG9yIiwid2QuUmF5Q2FzdGVyRXZlbnRUcmlnZ2VyRGV0ZWN0b3IuY3JlYXRlIiwid2QuUmF5Q2FzdGVyRXZlbnRUcmlnZ2VyRGV0ZWN0b3IuaXNUcmlnZ2VyIiwid2QuU2NlbmVFdmVudFRyaWdnZXJEZXRlY3RvciIsIndkLlNjZW5lRXZlbnRUcmlnZ2VyRGV0ZWN0b3IuY29uc3RydWN0b3IiLCJ3ZC5TY2VuZUV2ZW50VHJpZ2dlckRldGVjdG9yLmNyZWF0ZSIsIndkLlNjZW5lRXZlbnRUcmlnZ2VyRGV0ZWN0b3IuaXNUcmlnZ2VyIiwid2QuRXZlbnRUcmlnZ2VyRGV0ZWN0b3JVdGlscyIsIndkLkV2ZW50VHJpZ2dlckRldGVjdG9yVXRpbHMuY29uc3RydWN0b3IiLCJ3ZC5FdmVudFRyaWdnZXJEZXRlY3RvclV0aWxzLmlzSW5SZWN0Iiwid2QuRXZlbnRUcmlnZ2VyVGFibGUiLCJ3ZC5FdmVudFRyaWdnZXJUYWJsZS5jb25zdHJ1Y3RvciIsIndkLkV2ZW50VHJpZ2dlclRhYmxlLmdldFNjcmlwdEhhbmRsZXJOYW1lIiwid2QuRXZlbnRUcmlnZ2VyVGFibGUuZ2V0U2NyaXB0RW5naW5lRXZlbnQiLCJ3ZC5TY3JpcHQiLCJ3ZC5TY3JpcHQuY29uc3RydWN0b3IiLCJ3ZC5TY3JpcHQuY3JlYXRlIiwid2QuU2NyaXB0LmFkZFNjcmlwdCIsIndkLlNjcmlwdC5jcmVhdGVMb2FkSnNTdHJlYW0iLCJ3ZC5TY3JpcHQuYWRkVG9PYmplY3QiLCJ3ZC5TY3JpcHQuX2hhbmRsZXJBZnRlckxvYWRlZFNjcmlwdCIsIndkLlNjcmlwdC5fYWRkU2NyaXB0VG9FbnRpdHlPYmplY3QiLCJ3ZC5UcmFuc2Zvcm0iLCJ3ZC5UcmFuc2Zvcm0uY29uc3RydWN0b3IiLCJ3ZC5UcmFuc2Zvcm0ucGFyZW50Iiwid2QuVHJhbnNmb3JtLmFkZENoaWxkIiwid2QuVHJhbnNmb3JtLnJlbW92ZUNoaWxkIiwid2QuVHJhbnNmb3JtLnNldFBhcmVudCIsIndkLlRyYW5zZm9ybS5nZXRNYXRyaXgiLCJ3ZC5UcmFuc2Zvcm0uc2V0Q2hpbGRyZW5UcmFuc2Zvcm1TdGF0ZSIsIndkLlRocmVlRFRyYW5zZm9ybSIsIndkLlRocmVlRFRyYW5zZm9ybS5jb25zdHJ1Y3RvciIsIndkLlRocmVlRFRyYW5zZm9ybS5jcmVhdGUiLCJ3ZC5UaHJlZURUcmFuc2Zvcm0ubG9jYWxUb1dvcmxkTWF0cml4Iiwid2QuVGhyZWVEVHJhbnNmb3JtLnBvc2l0aW9uIiwid2QuVGhyZWVEVHJhbnNmb3JtLnJvdGF0aW9uIiwid2QuVGhyZWVEVHJhbnNmb3JtLnNjYWxlIiwid2QuVGhyZWVEVHJhbnNmb3JtLmV1bGVyQW5nbGVzIiwid2QuVGhyZWVEVHJhbnNmb3JtLmxvY2FsUG9zaXRpb24iLCJ3ZC5UaHJlZURUcmFuc2Zvcm0ubG9jYWxSb3RhdGlvbiIsIndkLlRocmVlRFRyYW5zZm9ybS5sb2NhbEV1bGVyQW5nbGVzIiwid2QuVGhyZWVEVHJhbnNmb3JtLmxvY2FsU2NhbGUiLCJ3ZC5UaHJlZURUcmFuc2Zvcm0udXAiLCJ3ZC5UaHJlZURUcmFuc2Zvcm0ucmlnaHQiLCJ3ZC5UaHJlZURUcmFuc2Zvcm0uZm9yd2FyZCIsIndkLlRocmVlRFRyYW5zZm9ybS5pc1RyYW5zZm9ybSIsIndkLlRocmVlRFRyYW5zZm9ybS5pc1RyYW5zbGF0ZSIsIndkLlRocmVlRFRyYW5zZm9ybS5pc1JvdGF0ZSIsIndkLlRocmVlRFRyYW5zZm9ybS5pc1NjYWxlIiwid2QuVGhyZWVEVHJhbnNmb3JtLmluaXQiLCJ3ZC5UaHJlZURUcmFuc2Zvcm0uZGlzcG9zZSIsIndkLlRocmVlRFRyYW5zZm9ybS5zeW5jIiwid2QuVGhyZWVEVHJhbnNmb3JtLnRyYW5zbGF0ZUxvY2FsIiwid2QuVGhyZWVEVHJhbnNmb3JtLnRyYW5zbGF0ZSIsIndkLlRocmVlRFRyYW5zZm9ybS5yb3RhdGUiLCJ3ZC5UaHJlZURUcmFuc2Zvcm0ucm90YXRlTG9jYWwiLCJ3ZC5UaHJlZURUcmFuc2Zvcm0ucm90YXRlQXJvdW5kIiwid2QuVGhyZWVEVHJhbnNmb3JtLmxvb2tBdCIsIndkLlRocmVlRFRyYW5zZm9ybS5fcmVzZXRUcmFuc2Zvcm1GbGFnIiwid2QuUmVjdFRyYW5zZm9ybSIsIndkLlJlY3RUcmFuc2Zvcm0uY29uc3RydWN0b3IiLCJ3ZC5SZWN0VHJhbnNmb3JtLmNyZWF0ZSIsIndkLlJlY3RUcmFuc2Zvcm0ucm90YXRpb25NYXRyaXgiLCJ3ZC5SZWN0VHJhbnNmb3JtLmxvY2FsUG9zaXRpb25BbmRTY2FsZU1hdHJpeCIsIndkLlJlY3RUcmFuc2Zvcm0ucG9zaXRpb24iLCJ3ZC5SZWN0VHJhbnNmb3JtLnJvdGF0aW9uIiwid2QuUmVjdFRyYW5zZm9ybS5zY2FsZSIsIndkLlJlY3RUcmFuc2Zvcm0ubG9jYWxQb3NpdGlvbiIsIndkLlJlY3RUcmFuc2Zvcm0ubG9jYWxTY2FsZSIsIndkLlJlY3RUcmFuc2Zvcm0uYW5jaG9yWCIsIndkLlJlY3RUcmFuc2Zvcm0uYW5jaG9yWSIsIndkLlJlY3RUcmFuc2Zvcm0ud2lkdGgiLCJ3ZC5SZWN0VHJhbnNmb3JtLmhlaWdodCIsIndkLlJlY3RUcmFuc2Zvcm0uaXNUcmFuc2Zvcm0iLCJ3ZC5SZWN0VHJhbnNmb3JtLmlzVHJhbnNsYXRlIiwid2QuUmVjdFRyYW5zZm9ybS5pc1JvdGF0ZSIsIndkLlJlY3RUcmFuc2Zvcm0uaXNTY2FsZSIsIndkLlJlY3RUcmFuc2Zvcm0uc3luY1JvdGF0aW9uIiwid2QuUmVjdFRyYW5zZm9ybS5zeW5jUG9zaXRpb25BbmRTY2FsZSIsIndkLlJlY3RUcmFuc2Zvcm0udHJhbnNsYXRlIiwid2QuUmVjdFRyYW5zZm9ybS5yb3RhdGUiLCJ3ZC5SZWN0VHJhbnNmb3JtLnJvdGF0ZUFyb3VuZCIsIndkLlJlY3RUcmFuc2Zvcm0uX3RyYW5zbGF0ZUluUm90YXRpb25NYXRyaXgiLCJ3ZC5SZWN0VHJhbnNmb3JtLnJlc2V0UG9zaXRpb24iLCJ3ZC5SZWN0VHJhbnNmb3JtLnJlc2V0U2NhbGUiLCJ3ZC5SZWN0VHJhbnNmb3JtLnJlc2V0Um90YXRpb24iLCJ3ZC5SZWN0VHJhbnNmb3JtLnNldENoaWxkcmVuVHJhbnNmb3JtIiwid2QuUmVjdFRyYW5zZm9ybS5fcm90YXRlQXJvdW5kQ2FudmFzT3JpZ2luUG9pbnQiLCJ3ZC5SZWN0VHJhbnNmb3JtLl9nZXRQYXJlbnRXaWR0aCIsIndkLlJlY3RUcmFuc2Zvcm0uX2dldFBhcmVudEhlaWdodCIsIndkLlJlY3RUcmFuc2Zvcm0uX2dldFBhcmVudFBvc2l0aW9uIiwid2QuUmVjdFRyYW5zZm9ybS5fZ2V0UGFyZW50U2NhbGUiLCJ3ZC5Db21wb25lbnRDb250YWluZXIiLCJ3ZC5Db21wb25lbnRDb250YWluZXIuY29uc3RydWN0b3IiLCJ3ZC5Db21wb25lbnRDb250YWluZXIuYWRkQ2hpbGQiLCJ3ZC5Db21wb25lbnRDb250YWluZXIucmVtb3ZlQ2hpbGQiLCJ3ZC5Db21wb25lbnRDb250YWluZXIuaGFzQ2hpbGQiLCJ3ZC5BY3Rpb25NYW5hZ2VyIiwid2QuQWN0aW9uTWFuYWdlci5jb25zdHJ1Y3RvciIsIndkLkFjdGlvbk1hbmFnZXIuY3JlYXRlIiwid2QuQWN0aW9uTWFuYWdlci51cGRhdGUiLCJ3ZC5VSU1hbmFnZXIiLCJ3ZC5VSU1hbmFnZXIuY29uc3RydWN0b3IiLCJ3ZC5VSU1hbmFnZXIuY3JlYXRlIiwid2QuVUlNYW5hZ2VyLnVwZGF0ZSIsIndkLlVJTWFuYWdlci5faXNEaXJ0eSIsIndkLkxpZ2h0TWFuYWdlciIsIndkLkxpZ2h0TWFuYWdlci5jb25zdHJ1Y3RvciIsIndkLkxpZ2h0TWFuYWdlci5jcmVhdGUiLCJ3ZC5MaWdodE1hbmFnZXIuYW1iaWVudExpZ2h0Iiwid2QuTGlnaHRNYW5hZ2VyLmRpcmVjdGlvbkxpZ2h0cyIsIndkLkxpZ2h0TWFuYWdlci5wb2ludExpZ2h0cyIsIndkLkxpZ2h0TWFuYWdlci5hZGRDaGlsZCIsIndkLkFuaW1hdGlvbiIsIndkLkFuaW1hdGlvbi5jb25zdHJ1Y3RvciIsIndkLk1vcnBoQW5pbWF0aW9uIiwid2QuTW9ycGhBbmltYXRpb24uY29uc3RydWN0b3IiLCJ3ZC5Nb3JwaEFuaW1hdGlvbi5jcmVhdGUiLCJ3ZC5Nb3JwaEFuaW1hdGlvbi5pc1N0YXJ0Iiwid2QuTW9ycGhBbmltYXRpb24uaXNTdG9wIiwid2QuTW9ycGhBbmltYXRpb24uaXNQYXVzZSIsIndkLk1vcnBoQW5pbWF0aW9uLmluaXQiLCJ3ZC5Nb3JwaEFuaW1hdGlvbi5kaXNwb3NlIiwid2QuTW9ycGhBbmltYXRpb24ucGxheSIsIndkLk1vcnBoQW5pbWF0aW9uLnBhdXNlIiwid2QuTW9ycGhBbmltYXRpb24ucmVzdW1lIiwid2QuTW9ycGhBbmltYXRpb24uc3RvcCIsIndkLk1vcnBoQW5pbWF0aW9uLnVwZGF0ZSIsIndkLk1vcnBoQW5pbWF0aW9uLl9zdGFydCIsIndkLk1vcnBoQW5pbWF0aW9uLl9mbG9vciIsIndkLk1vcnBoQW5pbWF0aW9uLl9yZXNldEFuaW0iLCJ3ZC5Nb3JwaEFuaW1hdGlvbi5fY29udGludWVGcm9tUGF1c2VQb2ludCIsIndkLkFuaW1hdGlvblN0YXRlIiwid2QuR2VvbWV0cnkiLCJ3ZC5HZW9tZXRyeS5jb25zdHJ1Y3RvciIsIndkLkdlb21ldHJ5Lm1hdGVyaWFsIiwid2QuR2VvbWV0cnkuZ2VvbWV0cnlEYXRhIiwid2QuR2VvbWV0cnkuaW5pdCIsIndkLkdlb21ldHJ5Lmhhc0ZhY2VOb3JtYWxzIiwid2QuR2VvbWV0cnkuaGFzVmVydGV4Tm9ybWFscyIsIndkLkdlb21ldHJ5LmlzU21vb3RoU2hhZGluZyIsIndkLkdlb21ldHJ5LmRpc3Bvc2UiLCJ3ZC5HZW9tZXRyeS5jb21wdXRlRmFjZU5vcm1hbHMiLCJ3ZC5HZW9tZXRyeS5jb21wdXRlVmVydGV4Tm9ybWFscyIsIndkLkdlb21ldHJ5LmNvbXB1dGVOb3JtYWxzIiwid2QuR2VvbWV0cnkuY3JlYXRlQnVmZmVyQ29udGFpbmVyIiwid2QuR2VvbWV0cnkuY3JlYXRlR2VvbWV0cnlEYXRhIiwid2QuR2VvbWV0cnkuY3JlYXRlQ29tbW9uR2VvbWV0cnlEYXRhIiwid2QuR2VvbWV0cnlVdGlscyIsIndkLkdlb21ldHJ5VXRpbHMuY29uc3RydWN0b3IiLCJ3ZC5HZW9tZXRyeVV0aWxzLmNvbnZlcnRUb0ZhY2VzIiwid2QuR2VvbWV0cnlVdGlscy5oYXNEYXRhIiwid2QuR2VvbWV0cnlVdGlscy5nZXRUaHJlZUNvbXBvbmVudCIsIndkLkdlb21ldHJ5VXRpbHMuaXRlcmF0ZVRocmVlQ29tcG9uZW50Iiwid2QuR2VvbWV0cnlVdGlscy5zZXRUaHJlZUNvbXBvbmVudCIsIndkLkN1c3RvbUdlb21ldHJ5Iiwid2QuQ3VzdG9tR2VvbWV0cnkuY29uc3RydWN0b3IiLCJ3ZC5DdXN0b21HZW9tZXRyeS5jcmVhdGUiLCJ3ZC5DdXN0b21HZW9tZXRyeS52ZXJ0aWNlcyIsIndkLkN1c3RvbUdlb21ldHJ5LnRleENvb3JkcyIsIndkLkN1c3RvbUdlb21ldHJ5LmNvbG9ycyIsIndkLkN1c3RvbUdlb21ldHJ5LmluZGljZXMiLCJ3ZC5DdXN0b21HZW9tZXRyeS5ub3JtYWxzIiwid2QuQ3VzdG9tR2VvbWV0cnkuY29tcHV0ZURhdGEiLCJ3ZC5Nb2RlbEdlb21ldHJ5Iiwid2QuTW9kZWxHZW9tZXRyeS5jb25zdHJ1Y3RvciIsIndkLk1vZGVsR2VvbWV0cnkuY3JlYXRlIiwid2QuTW9kZWxHZW9tZXRyeS5oYXNBbmltYXRpb24iLCJ3ZC5Nb2RlbEdlb21ldHJ5Lmhhc01vcnBoRmFjZU5vcm1hbHMiLCJ3ZC5Nb2RlbEdlb21ldHJ5Lmhhc01vcnBoVmVydGV4Tm9ybWFscyIsIndkLk1vZGVsR2VvbWV0cnkuY29tcHV0ZU1vcnBoTm9ybWFscyIsIndkLk1vZGVsR2VvbWV0cnkuY29tcHV0ZU5vcm1hbHMiLCJ3ZC5Nb2RlbEdlb21ldHJ5LmNvbXB1dGVEYXRhIiwid2QuTW9kZWxHZW9tZXRyeS5jcmVhdGVCdWZmZXJDb250YWluZXIiLCJ3ZC5Nb2RlbEdlb21ldHJ5LmNyZWF0ZUdlb21ldHJ5RGF0YSIsIndkLk1vZGVsR2VvbWV0cnkuX2hhc01vcnBoVGFyZ2V0cyIsIndkLkJveEdlb21ldHJ5Iiwid2QuQm94R2VvbWV0cnkuY29uc3RydWN0b3IiLCJ3ZC5Cb3hHZW9tZXRyeS5jcmVhdGUiLCJ3ZC5Cb3hHZW9tZXRyeS5jb21wdXRlRGF0YSIsIndkLkJveEdlb21ldHJ5LmNvbXB1dGVEYXRhLmdlbmVyYXRlRmFjZSIsIndkLlJlY3RHZW9tZXRyeSIsIndkLlJlY3RHZW9tZXRyeS5jb25zdHJ1Y3RvciIsIndkLlJlY3RHZW9tZXRyeS5jcmVhdGUiLCJ3ZC5SZWN0R2VvbWV0cnkuY29tcHV0ZURhdGEiLCJ3ZC5QbGFuZUdlb21ldHJ5Iiwid2QuUGxhbmVHZW9tZXRyeS5jb25zdHJ1Y3RvciIsIndkLlBsYW5lR2VvbWV0cnkuY3JlYXRlIiwid2QuUGxhbmVHZW9tZXRyeS5jb21wdXRlRGF0YSIsIndkLlNwaGVyZURyYXdNb2RlIiwid2QuU3BoZXJlR2VvbWV0cnkiLCJ3ZC5TcGhlcmVHZW9tZXRyeS5jb25zdHJ1Y3RvciIsIndkLlNwaGVyZUdlb21ldHJ5LmNyZWF0ZSIsIndkLlNwaGVyZUdlb21ldHJ5LmNvbXB1dGVEYXRhIiwid2QuR2V0RGF0YUJ5TGF0aXR1ZGVMb25ndGl0dWRlIiwid2QuR2V0RGF0YUJ5TGF0aXR1ZGVMb25ndGl0dWRlLmNvbnN0cnVjdG9yIiwid2QuR2V0RGF0YUJ5TGF0aXR1ZGVMb25ndGl0dWRlLmNyZWF0ZSIsIndkLkdldERhdGFCeUxhdGl0dWRlTG9uZ3RpdHVkZS5nZXREYXRhIiwid2QuVHJpYW5nbGVHZW9tZXRyeSIsIndkLlRyaWFuZ2xlR2VvbWV0cnkuY29uc3RydWN0b3IiLCJ3ZC5UcmlhbmdsZUdlb21ldHJ5LmNyZWF0ZSIsIndkLlRyaWFuZ2xlR2VvbWV0cnkuY29tcHV0ZURhdGEiLCJ3ZC5HZW9tZXRyeURhdGEiLCJ3ZC5HZW9tZXRyeURhdGEuY29uc3RydWN0b3IiLCJ3ZC5HZW9tZXRyeURhdGEudmVydGljZXMiLCJ3ZC5HZW9tZXRyeURhdGEubm9ybWFscyIsIndkLkdlb21ldHJ5RGF0YS5ub3JtYWxzRnJvbUZhY2VOb3JtYWwiLCJ3ZC5HZW9tZXRyeURhdGEubm9ybWFsc0Zyb21WZXJ0ZXhOb3JtYWxzIiwid2QuR2VvbWV0cnlEYXRhLmluZGljZXMiLCJ3ZC5HZW9tZXRyeURhdGEuZmFjZXMiLCJ3ZC5HZW9tZXRyeURhdGEudGV4Q29vcmRzIiwid2QuR2VvbWV0cnlEYXRhLmNvbG9ycyIsIndkLkdlb21ldHJ5RGF0YS50YW5nZW50cyIsIndkLkdlb21ldHJ5RGF0YS5jb21wdXRlRmFjZU5vcm1hbHMiLCJ3ZC5HZW9tZXRyeURhdGEuY29tcHV0ZVZlcnRleE5vcm1hbHMiLCJ3ZC5HZW9tZXRyeURhdGEuaGFzRmFjZU5vcm1hbHMiLCJ3ZC5HZW9tZXRyeURhdGEuaGFzVmVydGV4Tm9ybWFscyIsIndkLkdlb21ldHJ5RGF0YS5vbkNoYW5nZUZhY2UiLCJ3ZC5HZW9tZXRyeURhdGEuY29tcHV0ZUZhY2VOb3JtYWxzSGVscGVyIiwid2QuR2VvbWV0cnlEYXRhLmNvbXB1dGVWZXJ0ZXhOb3JtYWxzSGVscGVyIiwid2QuR2VvbWV0cnlEYXRhLl9nZXRDb2xvcnMiLCJ3ZC5HZW9tZXRyeURhdGEuX2dldENvbG9yc0Zyb21NYXRlcmlhbCIsIndkLkdlb21ldHJ5RGF0YS5fZmlsbEVtcHR5RGF0YSIsIndkLkdlb21ldHJ5RGF0YS5fY2FsY3VsYXRlVGFuZ2VudHMiLCJ3ZC5Db21tb25HZW9tZXRyeURhdGEiLCJ3ZC5Db21tb25HZW9tZXRyeURhdGEuY29uc3RydWN0b3IiLCJ3ZC5Db21tb25HZW9tZXRyeURhdGEuY3JlYXRlIiwid2QuTW9ycGhHZW9tZXRyeURhdGEiLCJ3ZC5Nb3JwaEdlb21ldHJ5RGF0YS5jb25zdHJ1Y3RvciIsIndkLk1vcnBoR2VvbWV0cnlEYXRhLmNyZWF0ZSIsIndkLk1vcnBoR2VvbWV0cnlEYXRhLm1vcnBoTm9ybWFscyIsIndkLk1vcnBoR2VvbWV0cnlEYXRhLm1vcnBoVGFyZ2V0cyIsIndkLk1vcnBoR2VvbWV0cnlEYXRhLmNvbXB1dGVNb3JwaE5vcm1hbHMiLCJ3ZC5Nb3JwaEdlb21ldHJ5RGF0YS5oYXNNb3JwaEZhY2VOb3JtYWxzIiwid2QuTW9ycGhHZW9tZXRyeURhdGEuaGFzTW9ycGhWZXJ0ZXhOb3JtYWxzIiwid2QuTW9ycGhHZW9tZXRyeURhdGEub25DaGFuZ2VGYWNlIiwid2QuTW9ycGhHZW9tZXRyeURhdGEuX2NvcHlGYWNlcyIsIndkLk1vcnBoR2VvbWV0cnlEYXRhLl9nZXRNb3JwaE5vcm1hbHMiLCJ3ZC5CdWZmZXJDb250YWluZXIiLCJ3ZC5CdWZmZXJDb250YWluZXIuY29uc3RydWN0b3IiLCJ3ZC5CdWZmZXJDb250YWluZXIuaW5pdCIsIndkLkJ1ZmZlckNvbnRhaW5lci5yZW1vdmVDYWNoZSIsIndkLkJ1ZmZlckNvbnRhaW5lci5nZXRDaGlsZCIsIndkLkJ1ZmZlckNvbnRhaW5lci5oYXNDaGlsZCIsIndkLkJ1ZmZlckNvbnRhaW5lci5kaXNwb3NlIiwid2QuQnVmZmVyQ29udGFpbmVyLmNyZWF0ZUJ1ZmZlck9ubHlPbmNlIiwid2QuQnVmZmVyQ29udGFpbmVyLl9nZXRUYW5nZW50Iiwid2QuQnVmZmVyQ29udGFpbmVyLl9nZXRDb2xvciIsIndkLkJ1ZmZlckNvbnRhaW5lci5fZ2V0SW5kaWNlIiwid2QuQnVmZmVyQ29udGFpbmVyLl9nZXRUZXhDb29yZCIsIndkLkJ1ZmZlckNvbnRhaW5lci5fbmVlZFJlQ2FsY3V0ZVRhbmdlbnQiLCJ3ZC5Db21tb25CdWZmZXJDb250YWluZXIiLCJ3ZC5Db21tb25CdWZmZXJDb250YWluZXIuY29uc3RydWN0b3IiLCJ3ZC5Db21tb25CdWZmZXJDb250YWluZXIuY3JlYXRlIiwid2QuQ29tbW9uQnVmZmVyQ29udGFpbmVyLmdldFZlcnRpY2UiLCJ3ZC5Db21tb25CdWZmZXJDb250YWluZXIuZ2V0Tm9ybWFsIiwid2QuTW9ycGhCdWZmZXJDb250YWluZXIiLCJ3ZC5Nb3JwaEJ1ZmZlckNvbnRhaW5lci5jb25zdHJ1Y3RvciIsIndkLk1vcnBoQnVmZmVyQ29udGFpbmVyLmNyZWF0ZSIsIndkLk1vcnBoQnVmZmVyQ29udGFpbmVyLmdldFZlcnRpY2UiLCJ3ZC5Nb3JwaEJ1ZmZlckNvbnRhaW5lci5nZXROb3JtYWwiLCJ3ZC5Nb3JwaEJ1ZmZlckNvbnRhaW5lci5fZ2V0TW9ycGhEYXRhIiwid2QuTW9ycGhCdWZmZXJDb250YWluZXIuX2dldEN1cnJlbnRCdWZmZXIiLCJ3ZC5Nb3JwaEJ1ZmZlckNvbnRhaW5lci5fZ2V0TmV4dEJ1ZmZlciIsIndkLk1vcnBoQnVmZmVyQ29udGFpbmVyLl9pc0NhY2hlTm90Q2hhbmdlIiwid2QuTW9ycGhCdWZmZXJDb250YWluZXIuX2lzTm90UGxheUFuaW1hdGlvbiIsIndkLk1vcnBoQnVmZmVyQ29udGFpbmVyLl9nZXRTdGF0aWNEYXRhIiwid2QuTW9ycGhCdWZmZXJDb250YWluZXIuX2dldFN0YXRpY0RhdGFDYWNoZURhdGEiLCJ3ZC5DYW1lcmEiLCJ3ZC5DYW1lcmEuY29uc3RydWN0b3IiLCJ3ZC5DYW1lcmEuY2FtZXJhVG9Xb3JsZE1hdHJpeCIsIndkLkNhbWVyYS53b3JsZFRvQ2FtZXJhTWF0cml4Iiwid2QuQ2FtZXJhLm5lYXIiLCJ3ZC5DYW1lcmEuZmFyIiwid2QuQ2FtZXJhLmluaXQiLCJ3ZC5DYW1lcmEuZGlzcG9zZSIsIndkLkNhbWVyYS51cGRhdGUiLCJ3ZC5DYW1lcmEuZ2V0SW52Vmlld1Byb2pNYXQiLCJ3ZC5PcnRob2dyYXBoaWNDYW1lcmEiLCJ3ZC5PcnRob2dyYXBoaWNDYW1lcmEuY29uc3RydWN0b3IiLCJ3ZC5PcnRob2dyYXBoaWNDYW1lcmEuY3JlYXRlIiwid2QuT3J0aG9ncmFwaGljQ2FtZXJhLmxlZnQiLCJ3ZC5PcnRob2dyYXBoaWNDYW1lcmEucmlnaHQiLCJ3ZC5PcnRob2dyYXBoaWNDYW1lcmEuYm90dG9tIiwid2QuT3J0aG9ncmFwaGljQ2FtZXJhLnRvcCIsIndkLk9ydGhvZ3JhcGhpY0NhbWVyYS5jb252ZXJ0U2NyZWVuVG9Xb3JsZCIsIndkLk9ydGhvZ3JhcGhpY0NhbWVyYS51cGRhdGVQcm9qZWN0aW9uTWF0cml4Iiwid2QuUGVyc3BlY3RpdmVDYW1lcmEiLCJ3ZC5QZXJzcGVjdGl2ZUNhbWVyYS5jb25zdHJ1Y3RvciIsIndkLlBlcnNwZWN0aXZlQ2FtZXJhLmNyZWF0ZSIsIndkLlBlcnNwZWN0aXZlQ2FtZXJhLmZvdnkiLCJ3ZC5QZXJzcGVjdGl2ZUNhbWVyYS5hc3BlY3QiLCJ3ZC5QZXJzcGVjdGl2ZUNhbWVyYS56b29tSW4iLCJ3ZC5QZXJzcGVjdGl2ZUNhbWVyYS56b29tT3V0Iiwid2QuUGVyc3BlY3RpdmVDYW1lcmEuY29udmVydFNjcmVlblRvV29ybGQiLCJ3ZC5QZXJzcGVjdGl2ZUNhbWVyYS51cGRhdGVQcm9qZWN0aW9uTWF0cml4Iiwid2QuQ2FtZXJhQ29udHJvbGxlciIsIndkLkNhbWVyYUNvbnRyb2xsZXIuY29uc3RydWN0b3IiLCJ3ZC5DYW1lcmFDb250cm9sbGVyLmNhbWVyYVRvV29ybGRNYXRyaXgiLCJ3ZC5DYW1lcmFDb250cm9sbGVyLndvcmxkVG9DYW1lcmFNYXRyaXgiLCJ3ZC5DYW1lcmFDb250cm9sbGVyLnBNYXRyaXgiLCJ3ZC5DYW1lcmFDb250cm9sbGVyLmluaXQiLCJ3ZC5DYW1lcmFDb250cm9sbGVyLnVwZGF0ZSIsIndkLkNhbWVyYUNvbnRyb2xsZXIuZGlzcG9zZSIsIndkLkNhbWVyYUNvbnRyb2xsZXIuaXNJbnRlcnNlY3RXaXRoUmF5Iiwid2QuQ2FtZXJhQ29udHJvbGxlci5jcmVhdGVSYXkiLCJ3ZC5DYW1lcmFDb250cm9sbGVyLmNvbnZlcnRTY3JlZW5Ub1dvcmxkIiwid2QuQ2FtZXJhQ29udHJvbGxlci5nZXRQbGFuZXMiLCJ3ZC5DYW1lcmFDb250cm9sbGVyLl9zZXRQbGFuZXMiLCJ3ZC5CYXNpY0NhbWVyYUNvbnRyb2xsZXIiLCJ3ZC5CYXNpY0NhbWVyYUNvbnRyb2xsZXIuY29uc3RydWN0b3IiLCJ3ZC5CYXNpY0NhbWVyYUNvbnRyb2xsZXIuY3JlYXRlIiwid2QuRmx5Q2FtZXJhQ29udHJvbGxlciIsIndkLkZseUNhbWVyYUNvbnRyb2xsZXIuY29uc3RydWN0b3IiLCJ3ZC5GbHlDYW1lcmFDb250cm9sbGVyLmNyZWF0ZSIsIndkLkZseUNhbWVyYUNvbnRyb2xsZXIuaW5pdCIsIndkLkZseUNhbWVyYUNvbnRyb2xsZXIudXBkYXRlIiwid2QuRmx5Q2FtZXJhQ29udHJvbGxlci5kaXNwb3NlIiwid2QuRmx5Q2FtZXJhQ29udHJvbCIsIndkLkZseUNhbWVyYUNvbnRyb2wuY29uc3RydWN0b3IiLCJ3ZC5GbHlDYW1lcmFDb250cm9sLmluaXQiLCJ3ZC5GbHlDYW1lcmFDb250cm9sLnVwZGF0ZSIsIndkLkZseUNhbWVyYUNvbnRyb2wuZGlzcG9zZSIsIndkLkZseUNhbWVyYUNvbnRyb2wuX21vdmUiLCJ3ZC5GbHlDYW1lcmFDb250cm9sLl9iaW5kQ2FudmFzRXZlbnQiLCJ3ZC5GbHlDYW1lcmFDb250cm9sLl9yZW1vdmVFdmVudCIsIndkLkZseVBlcnNwZWN0aXZlQ2FtZXJhQ29udHJvbCIsIndkLkZseVBlcnNwZWN0aXZlQ2FtZXJhQ29udHJvbC5jb25zdHJ1Y3RvciIsIndkLkZseVBlcnNwZWN0aXZlQ2FtZXJhQ29udHJvbC5jcmVhdGUiLCJ3ZC5GbHlQZXJzcGVjdGl2ZUNhbWVyYUNvbnRyb2wuem9vbSIsIndkLkZseU9ydGhvZ3JhcGhpY0NhbWVyYUNvbnRyb2wiLCJ3ZC5GbHlPcnRob2dyYXBoaWNDYW1lcmFDb250cm9sLmNvbnN0cnVjdG9yIiwid2QuRmx5T3J0aG9ncmFwaGljQ2FtZXJhQ29udHJvbC5jcmVhdGUiLCJ3ZC5GbHlPcnRob2dyYXBoaWNDYW1lcmFDb250cm9sLnpvb20iLCJ3ZC5BcmNiYWxsQ2FtZXJhQ29udHJvbGxlciIsIndkLkFyY2JhbGxDYW1lcmFDb250cm9sbGVyLmNvbnN0cnVjdG9yIiwid2QuQXJjYmFsbENhbWVyYUNvbnRyb2xsZXIuY3JlYXRlIiwid2QuQXJjYmFsbENhbWVyYUNvbnRyb2xsZXIuaW5pdCIsIndkLkFyY2JhbGxDYW1lcmFDb250cm9sbGVyLnVwZGF0ZSIsIndkLkFyY2JhbGxDYW1lcmFDb250cm9sbGVyLmRpc3Bvc2UiLCJ3ZC5BcmNiYWxsQ2FtZXJhQ29udHJvbGxlci5fYmluZENhbnZhc0V2ZW50Iiwid2QuQXJjYmFsbENhbWVyYUNvbnRyb2xsZXIuX2NoYW5nZU9yYml0Iiwid2QuQXJjYmFsbENhbWVyYUNvbnRyb2xsZXIuX2NoYW5nZVRhcmdldCIsIndkLkFyY2JhbGxDYW1lcmFDb250cm9sbGVyLl9jaGFuZ2VEaXN0YW5jZSIsIndkLkFyY2JhbGxDYW1lcmFDb250cm9sbGVyLl9jb250cmFpbkRpc3RhbmNlIiwid2QuQXJjYmFsbENhbWVyYUNvbnRyb2xsZXIuX2NvbnRyYWluVGhldGEiLCJ3ZC5BcmNiYWxsQ2FtZXJhQ29udHJvbGxlci5fcmVtb3ZlRXZlbnQiLCJ3ZC5BY3Rpb24iLCJ3ZC5BY3Rpb24uY29uc3RydWN0b3IiLCJ3ZC5BY3Rpb24uaXNTdGFydCIsIndkLkFjdGlvbi5pc1N0b3AiLCJ3ZC5BY3Rpb24uaXNQYXVzZSIsIndkLkFjdGlvbi50YXJnZXQiLCJ3ZC5BY3Rpb24ucmVzZXQiLCJ3ZC5BY3Rpb24uYWRkVG9PYmplY3QiLCJ3ZC5BY3Rpb24ucmVtb3ZlRnJvbU9iamVjdCIsIndkLkFjdGlvbi5pbml0Iiwid2QuQWN0aW9uLmZpbmlzaCIsIndkLkFjdGlvbkluc3RhbnQiLCJ3ZC5BY3Rpb25JbnN0YW50LmNvbnN0cnVjdG9yIiwid2QuQWN0aW9uSW5zdGFudC5pc1N0b3AiLCJ3ZC5BY3Rpb25JbnN0YW50LmlzUGF1c2UiLCJ3ZC5BY3Rpb25JbnN0YW50LnN0YXJ0Iiwid2QuQWN0aW9uSW5zdGFudC5zdG9wIiwid2QuQWN0aW9uSW5zdGFudC5wYXVzZSIsIndkLkFjdGlvbkluc3RhbnQucmVzdW1lIiwid2QuQ2FsbEZ1bmMiLCJ3ZC5DYWxsRnVuYy5jb25zdHJ1Y3RvciIsIndkLkNhbGxGdW5jLmNyZWF0ZSIsIndkLkNhbGxGdW5jLnJldmVyc2UiLCJ3ZC5DYWxsRnVuYy51cGRhdGUiLCJ3ZC5DYWxsRnVuYy5jb3B5Iiwid2QuQWN0aW9uSW50ZXJ2YWwiLCJ3ZC5BY3Rpb25JbnRlcnZhbC5jb25zdHJ1Y3RvciIsIndkLkFjdGlvbkludGVydmFsLmlzU3RvcCIsIndkLkFjdGlvbkludGVydmFsLmlzUGF1c2UiLCJ3ZC5BY3Rpb25JbnRlcnZhbC51cGRhdGUiLCJ3ZC5BY3Rpb25JbnRlcnZhbC5zdGFydCIsIndkLkFjdGlvbkludGVydmFsLnN0b3AiLCJ3ZC5BY3Rpb25JbnRlcnZhbC5yZXNldCIsIndkLkFjdGlvbkludGVydmFsLnBhdXNlIiwid2QuQWN0aW9uSW50ZXJ2YWwucmVzdW1lIiwid2QuQWN0aW9uSW50ZXJ2YWwudXBkYXRlQm9keSIsIndkLkFjdGlvbkludGVydmFsLl9jb252ZXJ0VG9SYXRpbyIsIndkLkNvbnRyb2wiLCJ3ZC5Db250cm9sLmNvbnN0cnVjdG9yIiwid2QuQ29udHJvbC50YXJnZXQiLCJ3ZC5Db250cm9sLmluaXQiLCJ3ZC5Db250cm9sLnJldmVyc2UiLCJ3ZC5Db250cm9sLnJlc2V0Iiwid2QuQ29udHJvbC5pdGVyYXRlIiwid2QuU2VxdWVuY2UiLCJ3ZC5TZXF1ZW5jZS5jb25zdHJ1Y3RvciIsIndkLlNlcXVlbmNlLmNyZWF0ZSIsIndkLlNlcXVlbmNlLmluaXRXaGVuQ3JlYXRlIiwid2QuU2VxdWVuY2UudXBkYXRlIiwid2QuU2VxdWVuY2UuY29weSIsIndkLlNlcXVlbmNlLnJlc2V0Iiwid2QuU2VxdWVuY2Uuc3RhcnQiLCJ3ZC5TZXF1ZW5jZS5zdG9wIiwid2QuU2VxdWVuY2UucGF1c2UiLCJ3ZC5TZXF1ZW5jZS5yZXN1bWUiLCJ3ZC5TZXF1ZW5jZS5yZXZlcnNlIiwid2QuU2VxdWVuY2UuZ2V0SW5uZXJBY3Rpb25zIiwid2QuU2VxdWVuY2UuX3N0YXJ0TmV4dEFjdGlvbkFuZEp1ZGdlRmluaXNoIiwid2QuU3Bhd24iLCJ3ZC5TcGF3bi5jb25zdHJ1Y3RvciIsIndkLlNwYXduLmNyZWF0ZSIsIndkLlNwYXduLnVwZGF0ZSIsIndkLlNwYXduLnN0YXJ0Iiwid2QuU3Bhd24uc3RvcCIsIndkLlNwYXduLnBhdXNlIiwid2QuU3Bhd24ucmVzdW1lIiwid2QuU3Bhd24uY29weSIsIndkLlNwYXduLnJlc2V0Iiwid2QuU3Bhd24ucmV2ZXJzZSIsIndkLlNwYXduLmdldElubmVyQWN0aW9ucyIsIndkLlNwYXduLml0ZXJhdGUiLCJ3ZC5TcGF3bi5faXNGaW5pc2giLCJ3ZC5EZWxheVRpbWUiLCJ3ZC5EZWxheVRpbWUuY29uc3RydWN0b3IiLCJ3ZC5EZWxheVRpbWUuY3JlYXRlIiwid2QuRGVsYXlUaW1lLnJldmVyc2UiLCJ3ZC5EZWxheVRpbWUuY29weSIsIndkLlJlcGVhdCIsIndkLlJlcGVhdC5jb25zdHJ1Y3RvciIsIndkLlJlcGVhdC5jcmVhdGUiLCJ3ZC5SZXBlYXQuaW5pdFdoZW5DcmVhdGUiLCJ3ZC5SZXBlYXQudXBkYXRlIiwid2QuUmVwZWF0LmNvcHkiLCJ3ZC5SZXBlYXQucmVzZXQiLCJ3ZC5SZXBlYXQuc3RhcnQiLCJ3ZC5SZXBlYXQuc3RvcCIsIndkLlJlcGVhdC5wYXVzZSIsIndkLlJlcGVhdC5yZXN1bWUiLCJ3ZC5SZXBlYXQuZ2V0SW5uZXJBY3Rpb25zIiwid2QuUmVwZWF0Rm9yZXZlciIsIndkLlJlcGVhdEZvcmV2ZXIuY29uc3RydWN0b3IiLCJ3ZC5SZXBlYXRGb3JldmVyLmNyZWF0ZSIsIndkLlJlcGVhdEZvcmV2ZXIudXBkYXRlIiwid2QuUmVwZWF0Rm9yZXZlci5jb3B5Iiwid2QuUmVwZWF0Rm9yZXZlci5zdGFydCIsIndkLlJlcGVhdEZvcmV2ZXIuc3RvcCIsIndkLlJlcGVhdEZvcmV2ZXIucGF1c2UiLCJ3ZC5SZXBlYXRGb3JldmVyLnJlc3VtZSIsIndkLlJlcGVhdEZvcmV2ZXIuZ2V0SW5uZXJBY3Rpb25zIiwid2QuVHdlZW4iLCJ3ZC5Ud2Vlbi5jb25zdHJ1Y3RvciIsIndkLlR3ZWVuLmNyZWF0ZSIsIndkLlR3ZWVuLnVwZGF0ZUJvZHkiLCJ3ZC5Ud2Vlbi5mcm9tIiwid2QuVHdlZW4udG8iLCJ3ZC5Ud2Vlbi5pbml0Iiwid2QuVHdlZW4uc3RhcnQiLCJ3ZC5Ud2Vlbi5zdG9wIiwid2QuVHdlZW4uY29weSIsIndkLlR3ZWVuLnJldmVyc2UiLCJ3ZC5Ud2Vlbi5lYXNpbmciLCJ3ZC5Ud2Vlbi5pbnRlcnBvbGF0aW9uIiwid2QuVHdlZW4ub25VcGRhdGUiLCJ3ZC5Ud2Vlbi5vbkZpbmlzaCIsIndkLlR3ZWVuLm9uU3RhcnQiLCJ3ZC5Ud2Vlbi5vblN0b3AiLCJ3ZC5Ud2Vlbi5maW5pc2giLCJ3ZC5SZW5kZXJlckNvbXBvbmVudCIsIndkLlJlbmRlcmVyQ29tcG9uZW50LmNvbnN0cnVjdG9yIiwid2QuTWVzaFJlbmRlcmVyIiwid2QuTWVzaFJlbmRlcmVyLmNvbnN0cnVjdG9yIiwid2QuTWVzaFJlbmRlcmVyLmNyZWF0ZSIsIndkLk1lc2hSZW5kZXJlci5yZW5kZXIiLCJ3ZC5NZXNoUmVuZGVyZXIuY3JlYXRlRHJhd0NvbW1hbmQiLCJ3ZC5Ta3lib3hSZW5kZXJlciIsIndkLlNreWJveFJlbmRlcmVyLmNvbnN0cnVjdG9yIiwid2QuU2t5Ym94UmVuZGVyZXIuY3JlYXRlIiwid2QuU2t5Ym94UmVuZGVyZXIucmVuZGVyIiwid2QuVUlSZW5kZXJlciIsIndkLlVJUmVuZGVyZXIuY29uc3RydWN0b3IiLCJ3ZC5VSVJlbmRlcmVyLmNyZWF0ZSIsIndkLlVJUmVuZGVyZXIuekluZGV4Iiwid2QuVUlSZW5kZXJlci5kaXJ0eSIsIndkLlVJUmVuZGVyZXIucmVzZXREaXJ0eSIsIndkLlVJUmVuZGVyZXIuYWRkVG9PYmplY3QiLCJ3ZC5VSVJlbmRlcmVyLnJlbW92ZUZyb21PYmplY3QiLCJ3ZC5VSVJlbmRlcmVyLmluaXQiLCJ3ZC5VSVJlbmRlcmVyLmluaXRXaGVuQ3JlYXRlIiwid2QuVUlSZW5kZXJlci5kaXNwb3NlIiwid2QuVUlSZW5kZXJlci5yZW5kZXIiLCJ3ZC5VSVJlbmRlcmVyLmNsZWFyQ2FudmFzIiwid2QuVUlSZW5kZXJlci5fY3JlYXRlT3ZlcmxheUNhbnZhcyIsIndkLlVJUmVuZGVyZXJTdGF0ZSIsIndkLk9jdHJlZSIsIndkLk9jdHJlZS5jb25zdHJ1Y3RvciIsIndkLk9jdHJlZS5jcmVhdGUiLCJ3ZC5PY3RyZWUuYWRkVG9PYmplY3QiLCJ3ZC5PY3RyZWUuYnVpbGQiLCJ3ZC5PY3RyZWUuZ2V0UmVuZGVyTGlzdEJ5RnJ1c3R1bUN1bGwiLCJ3ZC5PY3RyZWUuZ2V0SW50ZXJzZWN0TGlzdFdpdGhSYXkiLCJ3ZC5PY3RyZWUuZ2V0Q29sbGlkZU9iamVjdHMiLCJ3ZC5PY3RyZWUuZ2V0Q2hpbGRyZW4iLCJ3ZC5PY3RyZWUuX3Zpc2l0Um9vdCIsIndkLk9jdHJlZS5fdXBkYXRlQ29sbGlkZXJGb3JGaXJzdENoZWNrIiwid2QuT2N0cmVlLl9nZXRXb3JsZEV4dGVuZHMiLCJ3ZC5PY3RyZWUuX2NyZWF0ZUNvbGxpZGVyIiwid2QuT2N0cmVlLl9jaGVja0V4dGVuZHMiLCJ3ZC5PY3RyZWVOb2RlIiwid2QuT2N0cmVlTm9kZS5jb25zdHJ1Y3RvciIsIndkLk9jdHJlZU5vZGUuY3JlYXRlIiwid2QuT2N0cmVlTm9kZS5lbnRpdHlPYmplY3RDb3VudCIsIndkLk9jdHJlZU5vZGUuaW5pdFdoZW5DcmVhdGUiLCJ3ZC5PY3RyZWVOb2RlLmFkZEVudGl0eU9iamVjdHMiLCJ3ZC5PY3RyZWVOb2RlLmFkZE5vZGUiLCJ3ZC5PY3RyZWVOb2RlLmZpbmRBbmRBZGRUb1JlbmRlckxpc3QiLCJ3ZC5PY3RyZWVOb2RlLmZpbmRBbmRBZGRUb0ludGVyc2VjdExpc3QiLCJ3ZC5PY3RyZWVOb2RlLmZpbmRBbmRBZGRUb0NvbGxpZGVMaXN0Iiwid2QuT2N0cmVlTm9kZS5faGFzTm9kZSIsIndkLkNvbGxpZGVyRm9yRmlyc3RDaGVjayIsIndkLkNvbGxpZGVyRm9yRmlyc3RDaGVjay5jb25zdHJ1Y3RvciIsIndkLkJveENvbGxpZGVyRm9yRmlyc3RDaGVjayIsIndkLkJveENvbGxpZGVyRm9yRmlyc3RDaGVjay5jb25zdHJ1Y3RvciIsIndkLkJveENvbGxpZGVyRm9yRmlyc3RDaGVjay5jcmVhdGUiLCJ3ZC5Cb3hDb2xsaWRlckZvckZpcnN0Q2hlY2suc2hhcGUiLCJ3ZC5Cb3hDb2xsaWRlckZvckZpcnN0Q2hlY2suaW5pdCIsIndkLkJveENvbGxpZGVyRm9yRmlyc3RDaGVjay51cGRhdGUiLCJ3ZC5Db2xsaWRlciIsIndkLkNvbGxpZGVyLmNvbnN0cnVjdG9yIiwid2QuQ29sbGlkZXIuc2hhcGUiLCJ3ZC5Db2xsaWRlci5pbml0Iiwid2QuQ29sbGlkZXIudXBkYXRlIiwid2QuQ29sbGlkZXIudXBkYXRlU2hhcGUiLCJ3ZC5Db2xsaWRlci5pc0ludGVyc2VjdFdpdGgiLCJ3ZC5Db2xsaWRlci5pc0NvbGxpZGUiLCJ3ZC5Db2xsaWRlci5faXNTZWxmIiwid2QuQm94Q29sbGlkZXIiLCJ3ZC5Cb3hDb2xsaWRlci5jb25zdHJ1Y3RvciIsIndkLkJveENvbGxpZGVyLmNyZWF0ZSIsIndkLkJveENvbGxpZGVyLmNyZWF0ZUJvdW5kaW5nUmVnaW9uIiwid2QuQm94Q29sbGlkZXIuYnVpbGRCb3VuZGluZ1JlZ2lvbiIsIndkLlNwaGVyZUNvbGxpZGVyIiwid2QuU3BoZXJlQ29sbGlkZXIuY29uc3RydWN0b3IiLCJ3ZC5TcGhlcmVDb2xsaWRlci5jcmVhdGUiLCJ3ZC5TcGhlcmVDb2xsaWRlci5jcmVhdGVCb3VuZGluZ1JlZ2lvbiIsIndkLlNwaGVyZUNvbGxpZGVyLmJ1aWxkQm91bmRpbmdSZWdpb24iLCJ3ZC5Cb3VuZGluZ1JlZ2lvbiIsIndkLkJvdW5kaW5nUmVnaW9uLmNvbnN0cnVjdG9yIiwid2QuQm91bmRpbmdSZWdpb24uaW5pdCIsIndkLkJvdW5kaW5nUmVnaW9uLmJ1aWxkIiwid2QuQm91bmRpbmdSZWdpb24udXBkYXRlIiwid2QuQm91bmRpbmdSZWdpb24uaXNJbnRlcnNlY3RXaXRoU3BoZXJlIiwid2QuQm91bmRpbmdSZWdpb24uaXNJbnRlcnNlY3RXaXRoQm94Iiwid2QuQm91bmRpbmdSZWdpb24uYnVpbGREZWJ1Z09iamVjdEZyb21TaGFwZSIsIndkLkJveEJvdW5kaW5nUmVnaW9uIiwid2QuQm94Qm91bmRpbmdSZWdpb24uY29uc3RydWN0b3IiLCJ3ZC5Cb3hCb3VuZGluZ1JlZ2lvbi5jcmVhdGUiLCJ3ZC5Cb3hCb3VuZGluZ1JlZ2lvbi51cGRhdGVTaGFwZSIsIndkLkJveEJvdW5kaW5nUmVnaW9uLmNyZWF0ZVNoYXBlIiwid2QuQm94Qm91bmRpbmdSZWdpb24udXBkYXRlRGVidWdPYmplY3RGcm9tU2hhcGUiLCJ3ZC5Cb3hCb3VuZGluZ1JlZ2lvbi5zZXREZWJ1Z09iamVjdEdlb21ldHJ5Iiwid2QuQm94Qm91bmRpbmdSZWdpb24uaXNCdWlsZFVzZXJTcGVjaWZ5Qm91bmRpbmdSZWdpb24iLCJ3ZC5Cb3hCb3VuZGluZ1JlZ2lvbi5pc05vdFRyYW5zZm9ybWVkIiwid2QuU3BoZXJlQm91bmRpbmdSZWdpb24iLCJ3ZC5TcGhlcmVCb3VuZGluZ1JlZ2lvbi5jb25zdHJ1Y3RvciIsIndkLlNwaGVyZUJvdW5kaW5nUmVnaW9uLmNyZWF0ZSIsIndkLlNwaGVyZUJvdW5kaW5nUmVnaW9uLnVwZGF0ZVNoYXBlIiwid2QuU3BoZXJlQm91bmRpbmdSZWdpb24uY3JlYXRlU2hhcGUiLCJ3ZC5TcGhlcmVCb3VuZGluZ1JlZ2lvbi51cGRhdGVEZWJ1Z09iamVjdEZyb21TaGFwZSIsIndkLlNwaGVyZUJvdW5kaW5nUmVnaW9uLmlzTm90VHJhbnNmb3JtZWQiLCJ3ZC5TcGhlcmVCb3VuZGluZ1JlZ2lvbi5pc0J1aWxkVXNlclNwZWNpZnlCb3VuZGluZ1JlZ2lvbiIsIndkLlNwaGVyZUJvdW5kaW5nUmVnaW9uLnNldERlYnVnT2JqZWN0R2VvbWV0cnkiLCJ3ZC5Cb3VuZGluZ1JlZ2lvblV0aWxzIiwid2QuQm91bmRpbmdSZWdpb25VdGlscy5jb25zdHJ1Y3RvciIsIndkLkJvdW5kaW5nUmVnaW9uVXRpbHMuaXNBQUJCSW5GcnVzdHVtIiwid2QuQm91bmRpbmdSZWdpb25VdGlscy5pc0FBQkJJbnRlcnNlY3RGcnVzdHVtIiwid2QuQm91bmRpbmdSZWdpb25VdGlscy5idWlsZEJvdW5kaW5nVmVjdG9ycyIsIndkLlNoYXBlIiwid2QuU2hhcGUuY29uc3RydWN0b3IiLCJ3ZC5TaGFwZS5pc0JveEFuZFNwaGVyZUludGVyc2VjdGVkIiwid2QuQUFCQlNoYXBlIiwid2QuQUFCQlNoYXBlLmNvbnN0cnVjdG9yIiwid2QuQUFCQlNoYXBlLmNyZWF0ZSIsIndkLkFBQkJTaGFwZS5nZXRDZW50ZXIiLCJ3ZC5BQUJCU2hhcGUuZ2V0SGFsZkV4dGVudHMiLCJ3ZC5BQUJCU2hhcGUuc2V0TWluTWF4Iiwid2QuQUFCQlNoYXBlLmdldE1pbiIsIndkLkFBQkJTaGFwZS5nZXRNYXgiLCJ3ZC5BQUJCU2hhcGUuc2V0RnJvbVNoYXBlUGFyYW0iLCJ3ZC5BQUJCU2hhcGUuc2V0RnJvbVBvaW50cyIsIndkLkFBQkJTaGFwZS5zZXRGcm9tVHJhbnNmb3JtZWRBQUJCIiwid2QuQUFCQlNoYXBlLnNldEZyb21UcmFuc2xhdGlvbkFuZFNjYWxlIiwid2QuQUFCQlNoYXBlLnNldEZyb21PYmplY3QiLCJ3ZC5BQUJCU2hhcGUuaXNJbnRlcnNlY3RXaXRoQm94Iiwid2QuQUFCQlNoYXBlLmlzSW50ZXJzZWN0V2l0aFNwaGVyZSIsIndkLkFBQkJTaGFwZS5pc0ludGVyc2VjdFdpdGhSYXkiLCJ3ZC5BQUJCU2hhcGUuY2xvc2VzdFBvaW50VG8iLCJ3ZC5BQUJCU2hhcGUuY29udGFpblBvaW50Iiwid2QuQUFCQlNoYXBlLmNvcHkiLCJ3ZC5BQUJCU2hhcGUuX2dldEVtcHR5TWluIiwid2QuQUFCQlNoYXBlLl9nZXRFbXB0eU1heCIsIndkLkFBQkJTaGFwZS5fZXhwYW5kQnlQb2ludCIsIndkLlNwaGVyZVNoYXBlIiwid2QuU3BoZXJlU2hhcGUuY29uc3RydWN0b3IiLCJ3ZC5TcGhlcmVTaGFwZS5jcmVhdGUiLCJ3ZC5TcGhlcmVTaGFwZS5zZXRGcm9tU2hhcGVQYXJhbSIsIndkLlNwaGVyZVNoYXBlLnNldEZyb21Qb2ludHMiLCJ3ZC5TcGhlcmVTaGFwZS5zZXRGcm9tVHJhbnNsYXRpb25BbmRTY2FsZSIsIndkLlNwaGVyZVNoYXBlLmlzSW50ZXJzZWN0V2l0aFNwaGVyZSIsIndkLlNwaGVyZVNoYXBlLmlzSW50ZXJzZWN0V2l0aEJveCIsIndkLlNwaGVyZVNoYXBlLmlzSW50ZXJzZWN0V2l0aFJheSIsIndkLlNwaGVyZVNoYXBlLmNvbnRhaW5Qb2ludCIsIndkLlNwaGVyZVNoYXBlLmNvcHkiLCJ3ZC5TcGhlcmVTaGFwZS5fZmluZE1heERpc3RhbmNlT2ZQb2ludHNUb0NlbnRlciIsIndkLkNvbGxpZGVyVHlwZSIsIndkLkNvbGxpZGVyVXRpbHMiLCJ3ZC5Db2xsaWRlclV0aWxzLmNvbnN0cnVjdG9yIiwid2QuQ29sbGlkZXJVdGlscy5nZXRWZXJ0aWNlcyIsIndkLlJpZ2lkQm9keSIsIndkLlJpZ2lkQm9keS5jb25zdHJ1Y3RvciIsIndkLlJpZ2lkQm9keS5mcmljdGlvbiIsIndkLlJpZ2lkQm9keS5yZXN0aXR1dGlvbiIsIndkLlJpZ2lkQm9keS5jaGlsZHJlbiIsIndkLlJpZ2lkQm9keS5pbml0Iiwid2QuUmlnaWRCb2R5LmFkZENvbnN0cmFpbnQiLCJ3ZC5SaWdpZEJvZHkucmVtb3ZlRnJvbU9iamVjdCIsIndkLlJpZ2lkQm9keS5kaXNwb3NlIiwid2QuUmlnaWRCb2R5LmdldFBoeXNpY3NFbmdpbmVBZGFwdGVyIiwid2QuUmlnaWRCb2R5LmlzUGh5c2ljc0VuZ2luZUFkYXB0ZXJFeGlzdCIsIndkLlJpZ2lkQm9keS5hZGRCb2R5VG9QaHlzaWNzRW5naW5lIiwid2QuUmlnaWRCb2R5Ll9vbkNvbnRhY3QiLCJ3ZC5SaWdpZEJvZHkuX29uQ29sbGlzaW9uU3RhcnQiLCJ3ZC5SaWdpZEJvZHkuX29uQ29sbGlzaW9uRW5kIiwid2QuUmlnaWRCb2R5Ll9pc0NvbnRhaW5lciIsIndkLlJpZ2lkQm9keS5fYWZ0ZXJJbml0SGFuZGxlciIsIndkLlJpZ2lkQm9keS5fYWZ0ZXJJbml0UmlnaWRib2R5QWRkQ29uc3RyYWludEhhbmRsZXIiLCJ3ZC5EeW5hbWljUmlnaWRCb2R5Iiwid2QuRHluYW1pY1JpZ2lkQm9keS5jb25zdHJ1Y3RvciIsIndkLkR5bmFtaWNSaWdpZEJvZHkuY3JlYXRlIiwid2QuRHluYW1pY1JpZ2lkQm9keS5saW5lYXJEYW1waW5nIiwid2QuRHluYW1pY1JpZ2lkQm9keS5hbmd1bGFyRGFtcGluZyIsIndkLkR5bmFtaWNSaWdpZEJvZHkudmVsb2NpdHkiLCJ3ZC5EeW5hbWljUmlnaWRCb2R5LmFuZ3VsYXJWZWxvY2l0eSIsIndkLkR5bmFtaWNSaWdpZEJvZHkubWFzcyIsIndkLkR5bmFtaWNSaWdpZEJvZHkuYWRkQm9keSIsIndkLktpbmVtYXRpY1JpZ2lkQm9keSIsIndkLktpbmVtYXRpY1JpZ2lkQm9keS5jb25zdHJ1Y3RvciIsIndkLktpbmVtYXRpY1JpZ2lkQm9keS5jcmVhdGUiLCJ3ZC5LaW5lbWF0aWNSaWdpZEJvZHkudmVsb2NpdHkiLCJ3ZC5LaW5lbWF0aWNSaWdpZEJvZHkuYW5ndWxhclZlbG9jaXR5Iiwid2QuS2luZW1hdGljUmlnaWRCb2R5Lm1hc3MiLCJ3ZC5LaW5lbWF0aWNSaWdpZEJvZHkuYWRkQm9keSIsIndkLlN0YXRpY1JpZ2lkQm9keSIsIndkLlN0YXRpY1JpZ2lkQm9keS5jb25zdHJ1Y3RvciIsIndkLlN0YXRpY1JpZ2lkQm9keS5jcmVhdGUiLCJ3ZC5TdGF0aWNSaWdpZEJvZHkuYWRkQm9keSIsIndkLlBoeXNpY3NDb25zdHJhaW50Iiwid2QuUGh5c2ljc0NvbnN0cmFpbnQuY29uc3RydWN0b3IiLCJ3ZC5Mb2NrQ29uc3RyYWludCIsIndkLkxvY2tDb25zdHJhaW50LmNvbnN0cnVjdG9yIiwid2QuTG9ja0NvbnN0cmFpbnQuY3JlYXRlIiwid2QuTG9ja0NvbnN0cmFpbnQuY29ubmVjdGVkQm9keSIsIndkLkRpc3RhbmNlQ29uc3RyYWludCIsIndkLkRpc3RhbmNlQ29uc3RyYWludC5jb25zdHJ1Y3RvciIsIndkLkRpc3RhbmNlQ29uc3RyYWludC5jcmVhdGUiLCJ3ZC5EaXN0YW5jZUNvbnN0cmFpbnQuY29ubmVjdGVkQm9keSIsIndkLkhpbmdlQ29uc3RyYWludCIsIndkLkhpbmdlQ29uc3RyYWludC5jb25zdHJ1Y3RvciIsIndkLkhpbmdlQ29uc3RyYWludC5jcmVhdGUiLCJ3ZC5IaW5nZUNvbnN0cmFpbnQuY29ubmVjdGVkQm9keSIsIndkLlBvaW50VG9Qb2ludENvbnN0cmFpbnQiLCJ3ZC5Qb2ludFRvUG9pbnRDb25zdHJhaW50LmNvbnN0cnVjdG9yIiwid2QuUG9pbnRUb1BvaW50Q29uc3RyYWludC5jcmVhdGUiLCJ3ZC5Qb2ludFRvUG9pbnRDb25zdHJhaW50TGlzdCIsIndkLlBvaW50VG9Qb2ludENvbnN0cmFpbnRMaXN0LmNvbnN0cnVjdG9yIiwid2QuUG9pbnRUb1BvaW50Q29uc3RyYWludExpc3QuY3JlYXRlIiwid2QuUG9pbnRUb1BvaW50Q29uc3RyYWludExpc3QuZm9yRWFjaCIsIndkLlBvaW50VG9Qb2ludENvbnN0cmFpbnRMaXN0LmdldENvdW50Iiwid2QuUG9pbnRUb1BvaW50Q29uc3RyYWludExpc3QuYWRkQ2hpbGQiLCJ3ZC5Qb2ludFRvUG9pbnRDb25zdHJhaW50TGlzdC5hZGRDaGlsZHJlbiIsIndkLlBvaW50VG9Qb2ludENvbnN0cmFpbnRMaXN0LnJlbW92ZUNoaWxkIiwid2QuUGh5c2ljc0VuZ2luZUZhY3RvcnkiLCJ3ZC5QaHlzaWNzRW5naW5lRmFjdG9yeS5jb25zdHJ1Y3RvciIsIndkLlBoeXNpY3NFbmdpbmVGYWN0b3J5LmNyZWF0ZSIsIndkLlBoeXNpY3NFbmdpbmVUeXBlIiwid2QuQ2Fubm9uRGF0YUxpc3QiLCJ3ZC5DYW5ub25EYXRhTGlzdC5jb25zdHJ1Y3RvciIsIndkLkNhbm5vbkRhdGFMaXN0LmdldENvdW50Iiwid2QuQ2Fubm9uRGF0YUxpc3QucmVtb3ZlQnlHYW1lT2JqZWN0Iiwid2QuQ2Fubm9uR2FtZU9iamVjdERhdGFMaXN0Iiwid2QuQ2Fubm9uR2FtZU9iamVjdERhdGFMaXN0LmNvbnN0cnVjdG9yIiwid2QuQ2Fubm9uR2FtZU9iamVjdERhdGFMaXN0LmNyZWF0ZSIsIndkLkNhbm5vbkdhbWVPYmplY3REYXRhTGlzdC5yZW1vdmUiLCJ3ZC5DYW5ub25HYW1lT2JqZWN0RGF0YUxpc3QudXBkYXRlQm9keVRyYW5zZm9ybURhdGEiLCJ3ZC5DYW5ub25HYW1lT2JqZWN0RGF0YUxpc3QudXBkYXRlR2FtZU9iamVjdFRyYW5zZm9ybURhdGEiLCJ3ZC5DYW5ub25HYW1lT2JqZWN0RGF0YUxpc3QuYWRkIiwid2QuQ2Fubm9uR2FtZU9iamVjdERhdGFMaXN0LmZpbmRHYW1lT2JqZWN0QnlCb2R5Iiwid2QuQ2Fubm9uR2FtZU9iamVjdERhdGFMaXN0LmZpbmRCb2R5QnlHYW1lT2JqZWN0Iiwid2QuQ2Fubm9uTWF0ZXJpYWxMaXN0Iiwid2QuQ2Fubm9uTWF0ZXJpYWxMaXN0LmNvbnN0cnVjdG9yIiwid2QuQ2Fubm9uTWF0ZXJpYWxMaXN0LmNyZWF0ZSIsIndkLkNhbm5vbk1hdGVyaWFsTGlzdC5yZW1vdmUiLCJ3ZC5DYW5ub25NYXRlcmlhbExpc3QuZmluZE1hdGVyaWFsQnlHYW1lT2JqZWN0Iiwid2QuQ2Fubm9uTWF0ZXJpYWxMaXN0LmFkZCIsIndkLkNhbm5vbk1hdGVyaWFsTGlzdC5hZGRDb250YWN0TWF0ZXJpYWwiLCJ3ZC5DYW5ub25NYXRlcmlhbExpc3QuZ2V0Q29udGFjdE1hdGVyaWFsRGF0YSIsIndkLkNhbm5vbk1hdGVyaWFsTGlzdC5nZXRDb250YWN0TWF0ZXJpYWxzIiwid2QuQ2Fubm9uTWF0ZXJpYWxMaXN0LnNldENvbnRhY3RNYXRlcmlhbERhdGEiLCJ3ZC5DYW5ub25Db25zdHJhaW50RGF0YUxpc3QiLCJ3ZC5DYW5ub25Db25zdHJhaW50RGF0YUxpc3QuY29uc3RydWN0b3IiLCJ3ZC5DYW5ub25TaW5nbGVDb25zdHJhaW50RGF0YUxpc3QiLCJ3ZC5DYW5ub25TaW5nbGVDb25zdHJhaW50RGF0YUxpc3QuY29uc3RydWN0b3IiLCJ3ZC5DYW5ub25TaW5nbGVDb25zdHJhaW50RGF0YUxpc3QuYWRkIiwid2QuQ2Fubm9uU2luZ2xlQ29uc3RyYWludERhdGFMaXN0LnJlbW92ZSIsIndkLkNhbm5vblNpbmdsZUNvbnN0cmFpbnREYXRhTGlzdC5maW5kQ29uc3RyYWludEJ5R2FtZU9iamVjdCIsIndkLkNhbm5vbkxvY2tDb25zdHJhaW50RGF0YUxpc3QiLCJ3ZC5DYW5ub25Mb2NrQ29uc3RyYWludERhdGFMaXN0LmNvbnN0cnVjdG9yIiwid2QuQ2Fubm9uTG9ja0NvbnN0cmFpbnREYXRhTGlzdC5jcmVhdGUiLCJ3ZC5DYW5ub25Qb2ludFRvUG9pbnRDb25zdHJhaW50RGF0YUxpc3QiLCJ3ZC5DYW5ub25Qb2ludFRvUG9pbnRDb25zdHJhaW50RGF0YUxpc3QuY29uc3RydWN0b3IiLCJ3ZC5DYW5ub25Qb2ludFRvUG9pbnRDb25zdHJhaW50RGF0YUxpc3QuY3JlYXRlIiwid2QuQ2Fubm9uUG9pbnRUb1BvaW50Q29uc3RyYWludERhdGFMaXN0LmZpbHRlciIsIndkLkNhbm5vblBvaW50VG9Qb2ludENvbnN0cmFpbnREYXRhTGlzdC5mb3JFYWNoIiwid2QuQ2Fubm9uUG9pbnRUb1BvaW50Q29uc3RyYWludERhdGFMaXN0LmFkZCIsIndkLkNhbm5vblBvaW50VG9Qb2ludENvbnN0cmFpbnREYXRhTGlzdC5yZW1vdmUiLCJ3ZC5DYW5ub25Qb2ludFRvUG9pbnRDb25zdHJhaW50RGF0YUxpc3QuZmluZENhbm5vbkNvbnN0cmFpbnRCeVBvaW50VG9Qb2ludENvbnN0cmFpbnQiLCJ3ZC5DYW5ub25EaXN0YW5jZUNvbnN0cmFpbnREYXRhTGlzdCIsIndkLkNhbm5vbkRpc3RhbmNlQ29uc3RyYWludERhdGFMaXN0LmNvbnN0cnVjdG9yIiwid2QuQ2Fubm9uRGlzdGFuY2VDb25zdHJhaW50RGF0YUxpc3QuY3JlYXRlIiwid2QuQ2Fubm9uSGluZ2VDb25zdHJhaW50RGF0YUxpc3QiLCJ3ZC5DYW5ub25IaW5nZUNvbnN0cmFpbnREYXRhTGlzdC5jb25zdHJ1Y3RvciIsIndkLkNhbm5vbkhpbmdlQ29uc3RyYWludERhdGFMaXN0LmNyZWF0ZSIsIndkLkNhbm5vblV0aWxzIiwid2QuQ2Fubm9uVXRpbHMuY29uc3RydWN0b3IiLCJ3ZC5DYW5ub25VdGlscy5jb252ZXJ0VG9DYW5ub25WZWN0b3IzIiwid2QuQ2Fubm9uVXRpbHMuY29udmVydFRvQ2Fubm9uUXVhdGVybmlvbiIsIndkLkNhbm5vblV0aWxzLmNvbnZlcnRUb1dvbmRlclZlY3RvcjMiLCJ3ZC5DYW5ub25VdGlscy5jb252ZXJ0VG9Xb25kZXJRdWF0ZXJuaW9uIiwid2QuQ2Fubm9uQWRhcHRlciIsIndkLkNhbm5vbkFkYXB0ZXIuY29uc3RydWN0b3IiLCJ3ZC5DYW5ub25BZGFwdGVyLmNyZWF0ZSIsIndkLkNhbm5vbkFkYXB0ZXIuZ2V0R3Jhdml0eSIsIndkLkNhbm5vbkFkYXB0ZXIuc2V0R3Jhdml0eSIsIndkLkNhbm5vbkFkYXB0ZXIuZ2V0RnJpY3Rpb24iLCJ3ZC5DYW5ub25BZGFwdGVyLnNldEZyaWN0aW9uIiwid2QuQ2Fubm9uQWRhcHRlci5nZXRSZXN0aXR1dGlvbiIsIndkLkNhbm5vbkFkYXB0ZXIuc2V0UmVzdGl0dXRpb24iLCJ3ZC5DYW5ub25BZGFwdGVyLmdldExpbmVhckRhbXBpbmciLCJ3ZC5DYW5ub25BZGFwdGVyLnNldExpbmVhckRhbXBpbmciLCJ3ZC5DYW5ub25BZGFwdGVyLmdldEFuZ3VsYXJEYW1waW5nIiwid2QuQ2Fubm9uQWRhcHRlci5zZXRBbmd1bGFyRGFtcGluZyIsIndkLkNhbm5vbkFkYXB0ZXIuZ2V0TWFzcyIsIndkLkNhbm5vbkFkYXB0ZXIuc2V0TWFzcyIsIndkLkNhbm5vbkFkYXB0ZXIuZ2V0VmVsb2NpdHkiLCJ3ZC5DYW5ub25BZGFwdGVyLnNldFZlbG9jaXR5Iiwid2QuQ2Fubm9uQWRhcHRlci5nZXRBbmd1bGFyVmVsb2NpdHkiLCJ3ZC5DYW5ub25BZGFwdGVyLnNldEFuZ3VsYXJWZWxvY2l0eSIsIndkLkNhbm5vbkFkYXB0ZXIuaW5pdCIsIndkLkNhbm5vbkFkYXB0ZXIuYWRkRHluYW1pY0JvZHkiLCJ3ZC5DYW5ub25BZGFwdGVyLmFkZEtpbmVtYXRpY0JvZHkiLCJ3ZC5DYW5ub25BZGFwdGVyLmFkZFN0YXRpY0JvZHkiLCJ3ZC5DYW5ub25BZGFwdGVyLmFkZExvY2tDb25zdHJhaW50Iiwid2QuQ2Fubm9uQWRhcHRlci5yZW1vdmVMb2NrQ29uc3RyYWludCIsIndkLkNhbm5vbkFkYXB0ZXIuYWRkRGlzdGFuY2VDb25zdHJhaW50Iiwid2QuQ2Fubm9uQWRhcHRlci5yZW1vdmVEaXN0YW5jZUNvbnN0cmFpbnQiLCJ3ZC5DYW5ub25BZGFwdGVyLmFkZEhpbmdlQ29uc3RyYWludCIsIndkLkNhbm5vbkFkYXB0ZXIucmVtb3ZlSGluZ2VDb25zdHJhaW50Iiwid2QuQ2Fubm9uQWRhcHRlci5hZGRQb2ludFRvUG9pbnRDb25zdHJhaW50Iiwid2QuQ2Fubm9uQWRhcHRlci5yZW1vdmVQb2ludFRvUG9pbnRDb25zdHJhaW50Iiwid2QuQ2Fubm9uQWRhcHRlci5yZW1vdmVHYW1lT2JqZWN0Iiwid2QuQ2Fubm9uQWRhcHRlci5yZW1vdmVDb25zdHJhaW50cyIsIndkLkNhbm5vbkFkYXB0ZXIudXBkYXRlIiwid2QuQ2Fubm9uQWRhcHRlci5fZ2V0TWF0ZXJpYWwiLCJ3ZC5DYW5ub25BZGFwdGVyLl9nZXROdW1iZXJEYXRhIiwid2QuQ2Fubm9uQWRhcHRlci5fc2V0TnVtYmVyRGF0YSIsIndkLkNhbm5vbkFkYXB0ZXIuX2dldFZlYzNEYXRhIiwid2QuQ2Fubm9uQWRhcHRlci5fc2V0VmVjM0RhdGEiLCJ3ZC5DYW5ub25BZGFwdGVyLl9nZXRNYXRlcmlhbERhdGEiLCJ3ZC5DYW5ub25BZGFwdGVyLl9zZXRNYXRlcmlhbERhdGEiLCJ3ZC5DYW5ub25Cb2R5Iiwid2QuQ2Fubm9uQm9keS5jb25zdHJ1Y3RvciIsIndkLkNhbm5vbkJvZHkuYWRkQm9keSIsIndkLkNhbm5vbkJvZHkuYWZ0ZXJBZGRTaGFwZSIsIndkLkNhbm5vbkJvZHkuX2NyZWF0ZVNoYXBlIiwid2QuQ2Fubm9uQm9keS5fYmluZENvbGxpZGVFdmVudCIsIndkLkNhbm5vbkJvZHkuX2NyZWF0ZU1hdGVyaWFsIiwid2QuQ2Fubm9uQm9keS5fZ2V0TWF0ZXJpYWwiLCJ3ZC5DYW5ub25Cb2R5Ll9hZGRNYXRlcmlhbCIsIndkLkNhbm5vbkJvZHkuX2FkZENvbXBvdW5kcyIsIndkLkNhbm5vbkR5bmFtaWNCb2R5Iiwid2QuQ2Fubm9uRHluYW1pY0JvZHkuY29uc3RydWN0b3IiLCJ3ZC5DYW5ub25EeW5hbWljQm9keS5jcmVhdGUiLCJ3ZC5DYW5ub25EeW5hbWljQm9keS5jcmVhdGVCb2R5Iiwid2QuQ2Fubm9uRHluYW1pY0JvZHkuYWZ0ZXJBZGRTaGFwZSIsIndkLkNhbm5vbktpbmVtYXRpY0JvZHkiLCJ3ZC5DYW5ub25LaW5lbWF0aWNCb2R5LmNvbnN0cnVjdG9yIiwid2QuQ2Fubm9uS2luZW1hdGljQm9keS5jcmVhdGUiLCJ3ZC5DYW5ub25LaW5lbWF0aWNCb2R5LmNyZWF0ZUJvZHkiLCJ3ZC5DYW5ub25TdGF0aWNCb2R5Iiwid2QuQ2Fubm9uU3RhdGljQm9keS5jb25zdHJ1Y3RvciIsIndkLkNhbm5vblN0YXRpY0JvZHkuY3JlYXRlIiwid2QuQ2Fubm9uU3RhdGljQm9keS5jcmVhdGVCb2R5Iiwid2QuQ2Fubm9uQ29uc3RyYWludCIsIndkLkNhbm5vbkNvbnN0cmFpbnQuY29uc3RydWN0b3IiLCJ3ZC5DYW5ub25Db25zdHJhaW50LmFkZENvbnN0cmFpbnQiLCJ3ZC5DYW5ub25Db25zdHJhaW50LmZpbmRCb2R5Iiwid2QuQ2Fubm9uU2luZ2xlQ29uc3RyYWludCIsIndkLkNhbm5vblNpbmdsZUNvbnN0cmFpbnQuY29uc3RydWN0b3IiLCJ3ZC5DYW5ub25TaW5nbGVDb25zdHJhaW50LnJlbW92ZUNvbnN0cmFpbnQiLCJ3ZC5DYW5ub25TaW5nbGVDb25zdHJhaW50LmFkZFRvQ29uc3RyYWludERhdGFMaXN0Iiwid2QuQ2Fubm9uTG9ja0NvbnN0cmFpbnQiLCJ3ZC5DYW5ub25Mb2NrQ29uc3RyYWludC5jb25zdHJ1Y3RvciIsIndkLkNhbm5vbkxvY2tDb25zdHJhaW50LmNyZWF0ZSIsIndkLkNhbm5vbkxvY2tDb25zdHJhaW50LmNyZWF0ZUNhbm5vbkNvbnN0cmFpbnQiLCJ3ZC5DYW5ub25Qb2ludFRvUG9pbnRDb25zdHJhaW50Iiwid2QuQ2Fubm9uUG9pbnRUb1BvaW50Q29uc3RyYWludC5jb25zdHJ1Y3RvciIsIndkLkNhbm5vblBvaW50VG9Qb2ludENvbnN0cmFpbnQuY3JlYXRlIiwid2QuQ2Fubm9uUG9pbnRUb1BvaW50Q29uc3RyYWludC5yZW1vdmVDb25zdHJhaW50Iiwid2QuQ2Fubm9uUG9pbnRUb1BvaW50Q29uc3RyYWludC5jcmVhdGVDYW5ub25Db25zdHJhaW50Iiwid2QuQ2Fubm9uUG9pbnRUb1BvaW50Q29uc3RyYWludC5hZGRUb0NvbnN0cmFpbnREYXRhTGlzdCIsIndkLkNhbm5vbkRpc3RhbmNlQ29uc3RyYWludCIsIndkLkNhbm5vbkRpc3RhbmNlQ29uc3RyYWludC5jb25zdHJ1Y3RvciIsIndkLkNhbm5vbkRpc3RhbmNlQ29uc3RyYWludC5jcmVhdGUiLCJ3ZC5DYW5ub25EaXN0YW5jZUNvbnN0cmFpbnQuY3JlYXRlQ2Fubm9uQ29uc3RyYWludCIsIndkLkNhbm5vbkhpbmdlQ29uc3RyYWludCIsIndkLkNhbm5vbkhpbmdlQ29uc3RyYWludC5jb25zdHJ1Y3RvciIsIndkLkNhbm5vbkhpbmdlQ29uc3RyYWludC5jcmVhdGUiLCJ3ZC5DYW5ub25IaW5nZUNvbnN0cmFpbnQuY3JlYXRlQ2Fubm9uQ29uc3RyYWludCIsIndkLkxpZ2h0Iiwid2QuTGlnaHQuY29uc3RydWN0b3IiLCJ3ZC5MaWdodC5wb3NpdGlvbiIsIndkLkxpZ2h0LnNoYWRvd01hcFdpZHRoIiwid2QuTGlnaHQuc2hhZG93TWFwSGVpZ2h0Iiwid2QuQW1iaWVudExpZ2h0Iiwid2QuQW1iaWVudExpZ2h0LmNvbnN0cnVjdG9yIiwid2QuQW1iaWVudExpZ2h0LmNyZWF0ZSIsIndkLlNvdXJjZUxpZ2h0Iiwid2QuU291cmNlTGlnaHQuY29uc3RydWN0b3IiLCJ3ZC5Tb3VyY2VMaWdodC5pbml0V2hlbkNyZWF0ZSIsIndkLlNvdXJjZUxpZ2h0LmRpc3Bvc2UiLCJ3ZC5Tb3VyY2VMaWdodC5iZWZvcmVJbml0SGFuZGxlciIsIndkLkRpcmVjdGlvbkxpZ2h0Iiwid2QuRGlyZWN0aW9uTGlnaHQuY29uc3RydWN0b3IiLCJ3ZC5EaXJlY3Rpb25MaWdodC5jcmVhdGUiLCJ3ZC5EaXJlY3Rpb25MaWdodC5zaGFkb3dSZW5kZXJMaXN0Iiwid2QuRGlyZWN0aW9uTGlnaHQuY3JlYXRlU2hhZG93TWFwIiwid2QuRGlyZWN0aW9uTGlnaHQuY3JlYXRlU2hhZG93TWFwUmVuZGVyZXIiLCJ3ZC5Qb2ludExpZ2h0Iiwid2QuUG9pbnRMaWdodC5jb25zdHJ1Y3RvciIsIndkLlBvaW50TGlnaHQuY3JlYXRlIiwid2QuUG9pbnRMaWdodC5yYW5nZUxldmVsIiwid2QuUG9pbnRMaWdodC5yYW5nZSIsIndkLlBvaW50TGlnaHQuY29uc3RhbnQiLCJ3ZC5Qb2ludExpZ2h0LmxpbmVhciIsIndkLlBvaW50TGlnaHQucXVhZHJhdGljIiwid2QuUG9pbnRMaWdodC5zaGFkb3dSZW5kZXJMaXN0Iiwid2QuUG9pbnRMaWdodC5jcmVhdGVTaGFkb3dNYXAiLCJ3ZC5Qb2ludExpZ2h0LmNyZWF0ZVNoYWRvd01hcFJlbmRlcmVyIiwid2QuQXR0ZW51YXRpb24iLCJ3ZC5BdHRlbnVhdGlvbi5jb25zdHJ1Y3RvciIsIndkLkF0dGVudWF0aW9uLmNyZWF0ZSIsIndkLkF0dGVudWF0aW9uLmNvbnN0YW50Iiwid2QuQXR0ZW51YXRpb24ucmFuZ2UiLCJ3ZC5BdHRlbnVhdGlvbi5saW5lYXIiLCJ3ZC5BdHRlbnVhdGlvbi5xdWFkcmF0aWMiLCJ3ZC5BdHRlbnVhdGlvbi5yYW5nZUxldmVsIiwid2QuQXR0ZW51YXRpb24uc2V0QnlSYW5nZUxldmVsIiwid2QuVUkiLCJ3ZC5VSS5jb25zdHJ1Y3RvciIsIndkLlVJLmRpcnR5Iiwid2QuVUkud2lkdGgiLCJ3ZC5VSS5oZWlnaHQiLCJ3ZC5VSS5pbml0Iiwid2QuVUkuYWRkVG9PYmplY3QiLCJ3ZC5VSS5yZW1vdmVGcm9tT2JqZWN0Iiwid2QuVUkudXBkYXRlIiwid2QuVUkuZHJhdyIsIndkLlVJLnNob3VsZE5vdFVwZGF0ZSIsIndkLlVJLmdldENvbnRleHQiLCJ3ZC5VSS5nZXRDYW52YXMiLCJ3ZC5VSS5nZXRVSVJlbmRlcmVyIiwid2QuVUkuZHJhd0luQ2VudGVyUG9pbnQiLCJ3ZC5VSS5fc2V0Q2FudmFzVHJhbnNmb3JtRm9yUm90YXRpb24iLCJ3ZC5Gb250WEFsaWdubWVudCIsIndkLkZvbnRZQWxpZ25tZW50Iiwid2QuRm9udERpbWVuc2lvbiIsIndkLkZvbnQiLCJ3ZC5Gb250LmNvbnN0cnVjdG9yIiwid2QuRm9udC5pbml0Iiwid2QuRm9udC5kaXNwb3NlIiwid2QuRm9udC51cGRhdGUiLCJ3ZC5Gb250LnJlRm9ybWF0Iiwid2QuRm9udC5nZXRMZWZ0Q29ybmVyUG9zaXRpb24iLCJ3ZC5QbGFpbkZvbnQiLCJ3ZC5QbGFpbkZvbnQuY29uc3RydWN0b3IiLCJ3ZC5QbGFpbkZvbnQuY3JlYXRlIiwid2QuUGxhaW5Gb250LnRleHQiLCJ3ZC5QbGFpbkZvbnQuZm9udFNpemUiLCJ3ZC5QbGFpbkZvbnQuZm9udEZhbWlseSIsIndkLlBsYWluRm9udC54QWxpZ25tZW50Iiwid2QuUGxhaW5Gb250LnlBbGlnbm1lbnQiLCJ3ZC5QbGFpbkZvbnQuaW5pdCIsIndkLlBsYWluRm9udC5zZXRGaWxsU3R5bGUiLCJ3ZC5QbGFpbkZvbnQuZW5hYmxlU3Ryb2tlIiwid2QuUGxhaW5Gb250LmVuYWJsZUZpbGwiLCJ3ZC5QbGFpbkZvbnQuc2V0TGluZUhlaWdodCIsIndkLlBsYWluRm9udC5yZUZvcm1hdCIsIndkLlBsYWluRm9udC5kcmF3Iiwid2QuUGxhaW5Gb250Ll9mb3JtYXRUZXh0Iiwid2QuUGxhaW5Gb250Ll90cmltU3RyIiwid2QuUGxhaW5Gb250Ll9mb3JtYXRNdWx0aUxpbmUiLCJ3ZC5QbGFpbkZvbnQuX21lYXN1cmUiLCJ3ZC5QbGFpbkZvbnQuX2dldERlZmF1bHRMaW5lSGVpZ2h0Iiwid2QuUGxhaW5Gb250Ll9jb21wdXRlTGluZUhlaWdodCIsIndkLlBsYWluRm9udC5fZ2V0Rm9udENsaWVudEhlaWdodCIsIndkLlBsYWluRm9udC5fZHJhd011bHRpTGluZSIsIndkLlBsYWluRm9udC5fZHJhd1NpbmdsZUxpbmUiLCJ3ZC5CaXRtYXBGb250Iiwid2QuQml0bWFwRm9udC5jb25zdHJ1Y3RvciIsIndkLkJpdG1hcEZvbnQuY3JlYXRlIiwid2QuQml0bWFwRm9udC50ZXh0Iiwid2QuQml0bWFwRm9udC54QWxpZ25tZW50Iiwid2QuQml0bWFwRm9udC5pbml0Iiwid2QuQml0bWFwRm9udC5kaXNwb3NlIiwid2QuQml0bWFwRm9udC5yZUZvcm1hdCIsIndkLkJpdG1hcEZvbnQuX2dldEZudE9iaiIsIndkLkJpdG1hcEZvbnQuX2dldEltYWdlQXNzZXQiLCJ3ZC5CaXRtYXBGb250Ll9jcmVhdGVBbmRBZGRGb250Q2hhclVJT2JqZWN0cyIsIndkLkJpdG1hcEZvbnQuX2NyZWF0ZUFuZEFkZEZvbnRDaGFyT2JqZWN0T2ZOZXdMaW5lQ2hhciIsIndkLkJpdG1hcEZvbnQuX2NyZWF0ZUFuZEFkZEZvbnRDaGFyT2JqZWN0T2ZDb21tb25DaGFyIiwid2QuQml0bWFwRm9udC5fZm9ybWF0VGV4dCIsIndkLkJpdG1hcEZvbnQuX2Zvcm1hdE11bHRpTGluZSIsIndkLkJpdG1hcEZvbnQuX2Zvcm1hdEFsaWduIiwid2QuQml0bWFwRm9udC5fY3JlYXRlQ2hhckZvbnQiLCJ3ZC5CaXRtYXBGb250Ll9hZGRDaGFyRm9udFVJT2JqZWN0Iiwid2QuQml0bWFwRm9udC5fZmluZENoYXJGb250VUlPYmplY3QiLCJ3ZC5CaXRtYXBGb250Ll9pc1NwYWNlVW5pY29kZSIsIndkLkJpdG1hcEZvbnQuX2lzTmV3TGluZSIsIndkLkJpdG1hcEZvbnQuX2dldExldHRlclBvc1hMZWZ0Iiwid2QuQml0bWFwRm9udC5fZ2V0TGV0dGVyUG9zWFJpZ2h0Iiwid2QuQml0bWFwRm9udC5fZ2V0Rm9udERlZiIsIndkLkJpdG1hcEZvbnQuX2lzRXhjZWVkV2lkdGgiLCJ3ZC5CaXRtYXBGb250Ll9hbGlnbkxpbmUiLCJ3ZC5CaXRtYXBGb250Ll90cmltQm90dG9tU3BhY2VDaGFyIiwid2QuQml0bWFwRm9udC5fc2V0Q2hhckZvbnRVSU9iamVjdFBvc2l0aW9uIiwid2QuQml0bWFwRm9udC5fdHJhbnNsYXRlQ2hhckZvbnRVSU9iamVjdCIsIndkLkJpdG1hcEZvbnQuX3JlbW92ZUFsbENoYXJGb250Iiwid2QuQ2hhckZvbnQiLCJ3ZC5DaGFyRm9udC5jb25zdHJ1Y3RvciIsIndkLkNoYXJGb250LmNyZWF0ZSIsIndkLkNoYXJGb250LngiLCJ3ZC5DaGFyRm9udC55Iiwid2QuQ2hhckZvbnQuY2hhciIsIndkLkNoYXJGb250LmluaXQiLCJ3ZC5DaGFyRm9udC5kaXNwb3NlIiwid2QuQ2hhckZvbnQuc2hvdWxkTm90VXBkYXRlIiwid2QuQ2hhckZvbnQuZHJhdyIsIndkLlByb2dyZXNzQmFyIiwid2QuUHJvZ3Jlc3NCYXIuY29uc3RydWN0b3IiLCJ3ZC5Qcm9ncmVzc0Jhci5jcmVhdGUiLCJ3ZC5Qcm9ncmVzc0Jhci5wZXJjZW50Iiwid2QuUHJvZ3Jlc3NCYXIuaW5pdCIsIndkLlByb2dyZXNzQmFyLnNob3VsZE5vdFVwZGF0ZSIsIndkLlByb2dyZXNzQmFyLmRyYXciLCJ3ZC5Qcm9ncmVzc0Jhci5fZHJhd0Zyb21MZWZ0Iiwid2QuUHJvZ3Jlc3NCYXIuX2RyYXdCb3JkZXIiLCJ3ZC5Qcm9ncmVzc0Jhci5fY3JlYXRlT2ZmU2NyZWVuQ2FudmFzIiwid2QuUHJvZ3Jlc3NCYXIuX2RyYXdQcm9ncmVzc0JhciIsIndkLl9jYW5Vc2VOZXdDYW52YXNCbGVuZE1vZGVzIiwid2QuSW1hZ2UiLCJ3ZC5JbWFnZS5jb25zdHJ1Y3RvciIsIndkLkltYWdlLmNyZWF0ZSIsIndkLkltYWdlLnNvdXJjZSIsIndkLkltYWdlLnNob3VsZE5vdFVwZGF0ZSIsIndkLkltYWdlLmRyYXciLCJ3ZC5JbWFnZS5fc2V0RmlsbFN0eWxlIiwid2QuSW1hZ2UuX2dldERyYXdTb3VyY2UiLCJ3ZC5JbWFnZS5fZ2V0RHJhd0NvbG9yIiwid2QuSW1hZ2UuX2JsZW5kQnlNdWx0aXBseSIsIndkLkltYWdlLl9ibGVuZEJ5UGVyUGl4ZWwiLCJ3ZC5JbWFnZS5fc2V0R2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uIiwid2QuSW1hZ2UuX3NldEdsb2JhbEFscGhhIiwid2QuSW50ZXJhY3Rpb25VSSIsIndkLkludGVyYWN0aW9uVUkuY29uc3RydWN0b3IiLCJ3ZC5JbnRlcmFjdGlvblVJLnRyYW5zaXRpb25Nb2RlIiwid2QuQnV0dG9uIiwid2QuQnV0dG9uLmNvbnN0cnVjdG9yIiwid2QuQnV0dG9uLmNyZWF0ZSIsIndkLkJ1dHRvbi50ZXh0Iiwid2QuQnV0dG9uLmlzRGlzYWJsZWQiLCJ3ZC5CdXR0b24uY3VycmVudFN0YXRlIiwid2QuQnV0dG9uLmluaXRXaGVuQ3JlYXRlIiwid2QuQnV0dG9uLmluaXQiLCJ3ZC5CdXR0b24uZGlzcG9zZSIsIndkLkJ1dHRvbi5nZXRPYmplY3QiLCJ3ZC5CdXR0b24uZ2V0T2JqZWN0VHJhbnNpdGlvbiIsIndkLkJ1dHRvbi5lbmFibGUiLCJ3ZC5CdXR0b24uZGlzYWJsZSIsIndkLkJ1dHRvbi51cGRhdGUiLCJ3ZC5CdXR0b24uX2NyZWF0ZUJhY2tncm91bmRPYmplY3QiLCJ3ZC5CdXR0b24uX2NyZWF0ZUZvbnRPYmplY3QiLCJ3ZC5CdXR0b24uX2hhc0ZvbnRPYmplY3QiLCJ3ZC5CdXR0b24uX2JpbmRFdmVudCIsIndkLkJ1dHRvbk9iamVjdE5hbWUiLCJ3ZC5VSVN0YXRlIiwid2QuVUlTdGF0ZU1hY2hpbmUiLCJ3ZC5VSVN0YXRlTWFjaGluZS5jb25zdHJ1Y3RvciIsIndkLlVJU3RhdGVNYWNoaW5lLmNyZWF0ZSIsIndkLlVJU3RhdGVNYWNoaW5lLnRyYW5zaXRpb25NYW5hZ2VyIiwid2QuVUlTdGF0ZU1hY2hpbmUuY3VycmVudFN0YXRlIiwid2QuVUlTdGF0ZU1hY2hpbmUuY2hhbmdlU3RhdGUiLCJ3ZC5VSVN0YXRlTWFjaGluZS5iYWNrU3RhdGUiLCJ3ZC5UcmFuc2l0aW9uIiwid2QuVHJhbnNpdGlvbi5jb25zdHJ1Y3RvciIsIndkLlRyYW5zaXRpb24udGFyZ2V0Iiwid2QuU3ByaXRlVHJhbnNpdGlvbiIsIndkLlNwcml0ZVRyYW5zaXRpb24uY29uc3RydWN0b3IiLCJ3ZC5TcHJpdGVUcmFuc2l0aW9uLmNyZWF0ZSIsIndkLlNwcml0ZVRyYW5zaXRpb24uY2hhbmdlU3RhdGUiLCJ3ZC5Db2xvclRyYW5zaXRpb24iLCJ3ZC5Db2xvclRyYW5zaXRpb24uY29uc3RydWN0b3IiLCJ3ZC5Db2xvclRyYW5zaXRpb24uY3JlYXRlIiwid2QuQ29sb3JUcmFuc2l0aW9uLmNoYW5nZVN0YXRlIiwid2QuVHJhbnNpdGlvbk1vZGUiLCJ3ZC5UcmFuc2l0aW9uTWFuYWdlciIsIndkLlRyYW5zaXRpb25NYW5hZ2VyLmNvbnN0cnVjdG9yIiwid2QuVHJhbnNpdGlvbk1hbmFnZXIuY3JlYXRlIiwid2QuVHJhbnNpdGlvbk1hbmFnZXIuZ2V0T2JqZWN0VHJhbnNpdGlvbiIsIndkLlRyYW5zaXRpb25NYW5hZ2VyLmdldE9iamVjdFRhcmdldCIsIndkLlRyYW5zaXRpb25NYW5hZ2VyLmNoYW5nZVN0YXRlIiwid2QuVHJhbnNpdGlvbk1hbmFnZXIuX2dldFRyYW5zaXRpb25NYXAiLCJ3ZC5UcmFuc2l0aW9uTWFuYWdlci5fY3JlYXRlVHJhbnNpdGlvbkluc3RhbmNlIiwid2QuUm91bmRlZFJlY3RVdGlscyIsIndkLlJvdW5kZWRSZWN0VXRpbHMuY29uc3RydWN0b3IiLCJ3ZC5Sb3VuZGVkUmVjdFV0aWxzLmRyYXdSb3VuZGVkUmVjdCIsIndkLkp1ZGdlVXRpbHMiLCJ3ZC5KdWRnZVV0aWxzLmNvbnN0cnVjdG9yIiwid2QuSnVkZ2VVdGlscy5pc1ZpZXciLCJ3ZC5KdWRnZVV0aWxzLmlzRXF1YWwiLCJ3ZC5KdWRnZVV0aWxzLmlzUG93ZXJPZlR3byIsIndkLkp1ZGdlVXRpbHMuaXNGbG9hdEFycmF5Iiwid2QuSnVkZ2VVdGlscy5pc0ludGVyZmFjZSIsIndkLkp1ZGdlVXRpbHMuaXNPY3RyZWVPYmplY3QiLCJ3ZC5KdWRnZVV0aWxzLmlzU2VsZiIsIndkLk1hdGhVdGlscyIsIndkLk1hdGhVdGlscy5jb25zdHJ1Y3RvciIsIndkLk1hdGhVdGlscy5jbGFtcCIsIndkLk1hdGhVdGlscy5iaWdUaGFuIiwid2QuTWF0aFV0aWxzLmdlbmVyYXRlWmVyb1RvT25lIiwid2QuTWF0aFV0aWxzLmdlbmVyYXRlSW50ZWdlciIsIndkLkNvb3JkaW5hdGVVdGlscyIsIndkLkNvb3JkaW5hdGVVdGlscy5jb25zdHJ1Y3RvciIsIndkLkNvb3JkaW5hdGVVdGlscy5jb252ZXJ0V2ViR0xQb3NpdGlvblRvQ2FudmFzUG9zaXRpb24iLCJ3ZC5Db29yZGluYXRlVXRpbHMuY29udmVydENhbnZhc1Bvc2l0aW9uVG9XZWJHTFBvc2l0aW9uIiwid2QuQ29vcmRpbmF0ZVV0aWxzLmNvbnZlcnRMZWZ0Q29ybmVyUG9zaXRpb25Ub0NlbnRlclBvc2l0aW9uIiwid2QuQ29vcmRpbmF0ZVV0aWxzLmNvbnZlcnRMZWZ0Q29ybmVyUG9zaXRpb25YVG9DZW50ZXJQb3NpdGlvblgiLCJ3ZC5Db29yZGluYXRlVXRpbHMuY29udmVydExlZnRDb3JuZXJQb3NpdGlvbllUb0NlbnRlclBvc2l0aW9uWSIsIndkLkNvb3JkaW5hdGVVdGlscy5jb252ZXJ0Q2VudGVyUG9zaXRpb25Ub0xlZnRDb3JuZXJQb3NpdGlvbiIsIndkLkNvb3JkaW5hdGVVdGlscy5jb252ZXJ0Q2VudGVyUG9zaXRpb25YVG9MZWZ0Q29ybmVyUG9zaXRpb25YIiwid2QuQ29vcmRpbmF0ZVV0aWxzLmNvbnZlcnRDZW50ZXJQb3NpdGlvbllUb0xlZnRDb3JuZXJQb3NpdGlvblkiLCJ3ZC5Mb2ciLCJ3ZC5Mb2cuY29uc3RydWN0b3IiLCJ3ZC5UaW1lQ29udHJvbGxlciIsIndkLlRpbWVDb250cm9sbGVyLmNvbnN0cnVjdG9yIiwid2QuVGltZUNvbnRyb2xsZXIuc3RhcnQiLCJ3ZC5UaW1lQ29udHJvbGxlci5zdG9wIiwid2QuVGltZUNvbnRyb2xsZXIucGF1c2UiLCJ3ZC5UaW1lQ29udHJvbGxlci5yZXN1bWUiLCJ3ZC5UaW1lQ29udHJvbGxlci5jb21wdXRlRWxhcHNlVGltZSIsIndkLkRpcmVjdG9yVGltZUNvbnRyb2xsZXIiLCJ3ZC5EaXJlY3RvclRpbWVDb250cm9sbGVyLmNvbnN0cnVjdG9yIiwid2QuRGlyZWN0b3JUaW1lQ29udHJvbGxlci5jcmVhdGUiLCJ3ZC5EaXJlY3RvclRpbWVDb250cm9sbGVyLnRpY2siLCJ3ZC5EaXJlY3RvclRpbWVDb250cm9sbGVyLnN0YXJ0Iiwid2QuRGlyZWN0b3JUaW1lQ29udHJvbGxlci5yZXN1bWUiLCJ3ZC5EaXJlY3RvclRpbWVDb250cm9sbGVyLmdldE5vdyIsIndkLkRpcmVjdG9yVGltZUNvbnRyb2xsZXIuX3VwZGF0ZUZwcyIsIndkLkNvbW1vblRpbWVDb250cm9sbGVyIiwid2QuQ29tbW9uVGltZUNvbnRyb2xsZXIuY29uc3RydWN0b3IiLCJ3ZC5Db21tb25UaW1lQ29udHJvbGxlci5jcmVhdGUiLCJ3ZC5Db21tb25UaW1lQ29udHJvbGxlci5nZXROb3ciLCJ3ZC5SZW5kZXJUYXJnZXRSZW5kZXJlciIsIndkLlJlbmRlclRhcmdldFJlbmRlcmVyLmNvbnN0cnVjdG9yIiwid2QuUmVuZGVyVGFyZ2V0UmVuZGVyZXIuaW5pdFdoZW5DcmVhdGUiLCJ3ZC5SZW5kZXJUYXJnZXRSZW5kZXJlci5pbml0Iiwid2QuUmVuZGVyVGFyZ2V0UmVuZGVyZXIucmVuZGVyIiwid2QuUmVuZGVyVGFyZ2V0UmVuZGVyZXIuZGlzcG9zZSIsIndkLlJlbmRlclRhcmdldFJlbmRlcmVyLmJlZm9yZVJlbmRlciIsIndkLlJlbmRlclRhcmdldFJlbmRlcmVyLmFmdGVyUmVuZGVyIiwid2QuVHdvRFJlbmRlclRhcmdldFJlbmRlcmVyIiwid2QuVHdvRFJlbmRlclRhcmdldFJlbmRlcmVyLmNvbnN0cnVjdG9yIiwid2QuVHdvRFJlbmRlclRhcmdldFJlbmRlcmVyLmluaXRGcmFtZUJ1ZmZlciIsIndkLlR3b0RSZW5kZXJUYXJnZXRSZW5kZXJlci5yZW5kZXJGcmFtZUJ1ZmZlclRleHR1cmUiLCJ3ZC5Ud29EUmVuZGVyVGFyZ2V0UmVuZGVyZXIuZGlzcG9zZUZyYW1lQnVmZmVyIiwid2QuTWlycm9yUmVuZGVyVGFyZ2V0UmVuZGVyZXIiLCJ3ZC5NaXJyb3JSZW5kZXJUYXJnZXRSZW5kZXJlci5jb25zdHJ1Y3RvciIsIndkLk1pcnJvclJlbmRlclRhcmdldFJlbmRlcmVyLmNyZWF0ZSIsIndkLk1pcnJvclJlbmRlclRhcmdldFJlbmRlcmVyLmJlZm9yZVJlbmRlckZyYW1lQnVmZmVyVGV4dHVyZSIsIndkLk1pcnJvclJlbmRlclRhcmdldFJlbmRlcmVyLmdldFJlbmRlckxpc3QiLCJ3ZC5NaXJyb3JSZW5kZXJUYXJnZXRSZW5kZXJlci5yZW5kZXJSZW5kZXJlciIsIndkLk1pcnJvclJlbmRlclRhcmdldFJlbmRlcmVyLmNyZWF0ZUNhbWVyYSIsIndkLk1pcnJvclJlbmRlclRhcmdldFJlbmRlcmVyLl9zZXRTY2VuZVNpZGUiLCJ3ZC5NaXJyb3JSZW5kZXJUYXJnZXRSZW5kZXJlci5fc2V0Q2xpcFBsYW5lIiwid2QuTWlycm9yUmVuZGVyVGFyZ2V0UmVuZGVyZXIuX2dldENsaXBQbGFuZUluQ2FtZXJhU3BhY2UiLCJ3ZC5Ud29EU2hhZG93TWFwUmVuZGVyVGFyZ2V0UmVuZGVyZXIiLCJ3ZC5Ud29EU2hhZG93TWFwUmVuZGVyVGFyZ2V0UmVuZGVyZXIuY29uc3RydWN0b3IiLCJ3ZC5Ud29EU2hhZG93TWFwUmVuZGVyVGFyZ2V0UmVuZGVyZXIuY3JlYXRlIiwid2QuVHdvRFNoYWRvd01hcFJlbmRlclRhcmdldFJlbmRlcmVyLmluaXRXaGVuQ3JlYXRlIiwid2QuVHdvRFNoYWRvd01hcFJlbmRlclRhcmdldFJlbmRlcmVyLmluaXQiLCJ3ZC5Ud29EU2hhZG93TWFwUmVuZGVyVGFyZ2V0UmVuZGVyZXIuZGlzcG9zZSIsIndkLlR3b0RTaGFkb3dNYXBSZW5kZXJUYXJnZXRSZW5kZXJlci5iZWZvcmVSZW5kZXJGcmFtZUJ1ZmZlclRleHR1cmUiLCJ3ZC5Ud29EU2hhZG93TWFwUmVuZGVyVGFyZ2V0UmVuZGVyZXIuZ2V0UmVuZGVyTGlzdCIsIndkLlR3b0RTaGFkb3dNYXBSZW5kZXJUYXJnZXRSZW5kZXJlci5yZW5kZXJSZW5kZXJlciIsIndkLlR3b0RTaGFkb3dNYXBSZW5kZXJUYXJnZXRSZW5kZXJlci5iZWZvcmVSZW5kZXIiLCJ3ZC5Ud29EU2hhZG93TWFwUmVuZGVyVGFyZ2V0UmVuZGVyZXIuYWZ0ZXJSZW5kZXIiLCJ3ZC5Ud29EU2hhZG93TWFwUmVuZGVyVGFyZ2V0UmVuZGVyZXIuY3JlYXRlQ2FtZXJhIiwid2QuVHdvRFNoYWRvd01hcFJlbmRlclRhcmdldFJlbmRlcmVyLl9oYW5kbGVTaGFkb3dSZW5kZXJlckxpc3QiLCJ3ZC5DdWJlbWFwUmVuZGVyVGFyZ2V0UmVuZGVyZXIiLCJ3ZC5DdWJlbWFwUmVuZGVyVGFyZ2V0UmVuZGVyZXIuY29uc3RydWN0b3IiLCJ3ZC5DdWJlbWFwUmVuZGVyVGFyZ2V0UmVuZGVyZXIuaW5pdEZyYW1lQnVmZmVyIiwid2QuQ3ViZW1hcFJlbmRlclRhcmdldFJlbmRlcmVyLnJlbmRlckZyYW1lQnVmZmVyVGV4dHVyZSIsIndkLkN1YmVtYXBSZW5kZXJUYXJnZXRSZW5kZXJlci5kaXNwb3NlRnJhbWVCdWZmZXIiLCJ3ZC5DdWJlbWFwUmVuZGVyVGFyZ2V0UmVuZGVyZXIuY3JlYXRlQ2FtZXJhIiwid2QuQ3ViZW1hcFJlbmRlclRhcmdldFJlbmRlcmVyLl9pc0VtcHR5Iiwid2QuQ3ViZW1hcFJlbmRlclRhcmdldFJlbmRlcmVyLl9jb252ZXJ0SW5kZXhUb0ZhY2VLZXkiLCJ3ZC5DdWJlbWFwUmVuZGVyVGFyZ2V0UmVuZGVyZXIuX2xvb2tBdEZhY2UiLCJ3ZC5DdWJlbWFwUmVuZGVyVGFyZ2V0UmVuZGVyZXIuX25lZWRDcmVhdGVDYW1lcmEiLCJ3ZC5DdWJlbWFwU2hhZG93TWFwUmVuZGVyVGFyZ2V0UmVuZGVyZXIiLCJ3ZC5DdWJlbWFwU2hhZG93TWFwUmVuZGVyVGFyZ2V0UmVuZGVyZXIuY29uc3RydWN0b3IiLCJ3ZC5DdWJlbWFwU2hhZG93TWFwUmVuZGVyVGFyZ2V0UmVuZGVyZXIuY3JlYXRlIiwid2QuQ3ViZW1hcFNoYWRvd01hcFJlbmRlclRhcmdldFJlbmRlcmVyLmluaXRXaGVuQ3JlYXRlIiwid2QuQ3ViZW1hcFNoYWRvd01hcFJlbmRlclRhcmdldFJlbmRlcmVyLmluaXQiLCJ3ZC5DdWJlbWFwU2hhZG93TWFwUmVuZGVyVGFyZ2V0UmVuZGVyZXIuZGlzcG9zZSIsIndkLkN1YmVtYXBTaGFkb3dNYXBSZW5kZXJUYXJnZXRSZW5kZXJlci5nZXRSZW5kZXJMaXN0Iiwid2QuQ3ViZW1hcFNoYWRvd01hcFJlbmRlclRhcmdldFJlbmRlcmVyLmJlZm9yZVJlbmRlciIsIndkLkN1YmVtYXBTaGFkb3dNYXBSZW5kZXJUYXJnZXRSZW5kZXJlci5hZnRlclJlbmRlciIsIndkLkN1YmVtYXBTaGFkb3dNYXBSZW5kZXJUYXJnZXRSZW5kZXJlci5zZXRDYW1lcmEiLCJ3ZC5DdWJlbWFwU2hhZG93TWFwUmVuZGVyVGFyZ2V0UmVuZGVyZXIuZ2V0UG9zaXRpb24iLCJ3ZC5DdWJlbWFwU2hhZG93TWFwUmVuZGVyVGFyZ2V0UmVuZGVyZXIuX2NvbnZlcnRSZW5kZXJMaXN0VG9Db2xsZWN0aW9uIiwid2QuQ3ViZW1hcFNoYWRvd01hcFJlbmRlclRhcmdldFJlbmRlcmVyLl9oYW5kbGVTaGFkb3dSZW5kZXJlckxpc3QiLCJ3ZC5EeW5hbWljQ3ViZW1hcFJlbmRlclRhcmdldFJlbmRlcmVyIiwid2QuRHluYW1pY0N1YmVtYXBSZW5kZXJUYXJnZXRSZW5kZXJlci5jb25zdHJ1Y3RvciIsIndkLkR5bmFtaWNDdWJlbWFwUmVuZGVyVGFyZ2V0UmVuZGVyZXIuY3JlYXRlIiwid2QuRHluYW1pY0N1YmVtYXBSZW5kZXJUYXJnZXRSZW5kZXJlci5nZXRSZW5kZXJMaXN0Iiwid2QuRHluYW1pY0N1YmVtYXBSZW5kZXJUYXJnZXRSZW5kZXJlci5zZXRDYW1lcmEiLCJ3ZC5EeW5hbWljQ3ViZW1hcFJlbmRlclRhcmdldFJlbmRlcmVyLmdldFBvc2l0aW9uIiwid2QuU2hhZG93TWFwUmVuZGVyVGFyZ2V0UmVuZGVyZXJVdGlscyIsIndkLlNoYWRvd01hcFJlbmRlclRhcmdldFJlbmRlcmVyVXRpbHMuY29uc3RydWN0b3IiLCJ3ZC5TaGFkb3dNYXBSZW5kZXJUYXJnZXRSZW5kZXJlclV0aWxzLmluaXRXaGVuQ3JlYXRlIiwid2QuU2hhZG93TWFwUmVuZGVyVGFyZ2V0UmVuZGVyZXJVdGlscy5pbml0Iiwid2QuU2hhZG93TWFwUmVuZGVyVGFyZ2V0UmVuZGVyZXJVdGlscy5zZXRTaGFkb3dNYXBEYXRhIiwid2QuU2hhZG93TWFwUmVuZGVyVGFyZ2V0UmVuZGVyZXJVdGlscy5iaW5kRW5kTG9vcCIsIndkLlNoYWRvd01hcFJlbmRlclRhcmdldFJlbmRlcmVyVXRpbHMudW5CaW5kRW5kTG9vcCIsIndkLlNoYWRvd01hcFJlbmRlclRhcmdldFJlbmRlcmVyVXRpbHMuYmVmb3JlUmVuZGVyIiwid2QuU2hhZG93TWFwUmVuZGVyVGFyZ2V0UmVuZGVyZXJVdGlscy5hZnRlclJlbmRlciIsIndkLlNoYWRvd01hcFJlbmRlclRhcmdldFJlbmRlcmVyVXRpbHMuY3JlYXRlU2hhZGVyV2l0aFNoYWRlckxpYiIsIndkLlNoYWRvd01hcFJlbmRlclRhcmdldFJlbmRlcmVyVXRpbHMuaXNDb250YWluZXIiLCJ3ZC5TaGFkb3dNYXBSZW5kZXJUYXJnZXRSZW5kZXJlclV0aWxzLmFkZEFsbENoaWxkcmVuIiwid2QuU2hhZG93TWFwUmVuZGVyVGFyZ2V0UmVuZGVyZXJVdGlscy5zZXRTaGFkb3dNYXAiLCJ3ZC5DdWJlbWFwU2hhZG93TWFwUmVuZGVyVGFyZ2V0UmVuZGVyZXJVdGlscyIsIndkLkN1YmVtYXBTaGFkb3dNYXBSZW5kZXJUYXJnZXRSZW5kZXJlclV0aWxzLmNvbnN0cnVjdG9yIiwid2QuQ3ViZW1hcFNoYWRvd01hcFJlbmRlclRhcmdldFJlbmRlcmVyVXRpbHMuY3JlYXRlIiwid2QuQ3ViZW1hcFNoYWRvd01hcFJlbmRlclRhcmdldFJlbmRlcmVyVXRpbHMuaW5pdFdoZW5DcmVhdGUiLCJ3ZC5DdWJlbWFwU2hhZG93TWFwUmVuZGVyVGFyZ2V0UmVuZGVyZXJVdGlscy5jbGVhckN1YmVtYXBTaGFkb3dNYXBEYXRhIiwid2QuQ3ViZW1hcFNoYWRvd01hcFJlbmRlclRhcmdldFJlbmRlcmVyVXRpbHMuc2V0TWF0ZXJpYWxTaGFkb3dNYXBEYXRhIiwid2QuQ3ViZW1hcFNoYWRvd01hcFJlbmRlclRhcmdldFJlbmRlcmVyVXRpbHMuYWRkU2hhZG93TWFwIiwid2QuVHdvRFNoYWRvd01hcFJlbmRlclRhcmdldFJlbmRlcmVyVXRpbHMiLCJ3ZC5Ud29EU2hhZG93TWFwUmVuZGVyVGFyZ2V0UmVuZGVyZXJVdGlscy5jb25zdHJ1Y3RvciIsIndkLlR3b0RTaGFkb3dNYXBSZW5kZXJUYXJnZXRSZW5kZXJlclV0aWxzLmNyZWF0ZSIsIndkLlR3b0RTaGFkb3dNYXBSZW5kZXJUYXJnZXRSZW5kZXJlclV0aWxzLmluaXRXaGVuQ3JlYXRlIiwid2QuVHdvRFNoYWRvd01hcFJlbmRlclRhcmdldFJlbmRlcmVyVXRpbHMuY2xlYXJUd29EU2hhZG93TWFwRGF0YSIsIndkLlR3b0RTaGFkb3dNYXBSZW5kZXJUYXJnZXRSZW5kZXJlclV0aWxzLnNldE1hdGVyaWFsU2hhZG93TWFwRGF0YSIsIndkLlR3b0RTaGFkb3dNYXBSZW5kZXJUYXJnZXRSZW5kZXJlclV0aWxzLmFkZFNoYWRvd01hcCIsIndkLlJlbmRlcmVyIiwid2QuUmVuZGVyZXIuY29uc3RydWN0b3IiLCJ3ZC5SZW5kZXJlci5pbml0Iiwid2QuV2ViR0xSZW5kZXJlciIsIndkLldlYkdMUmVuZGVyZXIuY29uc3RydWN0b3IiLCJ3ZC5XZWJHTFJlbmRlcmVyLmNyZWF0ZSIsIndkLldlYkdMUmVuZGVyZXIuY3JlYXRlUXVhZENvbW1hbmQiLCJ3ZC5XZWJHTFJlbmRlcmVyLmFkZENvbW1hbmQiLCJ3ZC5XZWJHTFJlbmRlcmVyLmhhc0NvbW1hbmQiLCJ3ZC5XZWJHTFJlbmRlcmVyLnJlbmRlciIsIndkLldlYkdMUmVuZGVyZXIuaW5pdCIsIndkLldlYkdMUmVuZGVyZXIuc2V0Q2xlYXJDb2xvciIsIndkLldlYkdMUmVuZGVyZXIuX3JlbmRlck9wYXF1ZUNvbW1hbmRzIiwid2QuV2ViR0xSZW5kZXJlci5fcmVuZGVyU29ydGVkVHJhbnNwYXJlbnRDb21tYW5kcyIsIndkLldlYkdMUmVuZGVyZXIuX2dldE9iamVjdFRvQ2FtZXJhWkRpc3RhbmNlIiwid2QuV2ViR0xSZW5kZXJlci5fY2xlYXJDb21tYW5kIiwid2QuV2ViR0xSZW5kZXJlci5fc2V0Q2xlYXJPcHRpb25zIiwid2QuRHJhd01vZGUiLCJ3ZC5CdWZmZXJUeXBlIiwid2QuQnVmZmVyRGF0YVR5cGUiLCJ3ZC5CdWZmZXJVc2FnZSIsIndkLkJ1ZmZlciIsIndkLkJ1ZmZlci5jb25zdHJ1Y3RvciIsIndkLkJ1ZmZlci5kaXNwb3NlIiwid2QuRWxlbWVudEJ1ZmZlciIsIndkLkVsZW1lbnRCdWZmZXIuY29uc3RydWN0b3IiLCJ3ZC5FbGVtZW50QnVmZmVyLmNyZWF0ZSIsIndkLkVsZW1lbnRCdWZmZXIudHlwZVNpemUiLCJ3ZC5FbGVtZW50QnVmZmVyLmluaXRXaGVuQ3JlYXRlIiwid2QuRWxlbWVudEJ1ZmZlci5yZXNldERhdGEiLCJ3ZC5FbGVtZW50QnVmZmVyLl9jaGVja0RhdGFUeXBlIiwid2QuRWxlbWVudEJ1ZmZlci5fZ2V0SW5mbyIsIndkLkFycmF5QnVmZmVyIiwid2QuQXJyYXlCdWZmZXIuY29uc3RydWN0b3IiLCJ3ZC5BcnJheUJ1ZmZlci5jcmVhdGUiLCJ3ZC5BcnJheUJ1ZmZlci5pbml0V2hlbkNyZWF0ZSIsIndkLkFycmF5QnVmZmVyLnJlc2V0RGF0YSIsIndkLkJ1ZmZlckRhdGFUYWJsZSIsIndkLkJ1ZmZlckRhdGFUYWJsZS5jb25zdHJ1Y3RvciIsIndkLkJ1ZmZlckRhdGFUYWJsZS5nZXRHZW9tZXRyeURhdGFOYW1lIiwid2QuUHJvZ3JhbSIsIndkLlByb2dyYW0uY29uc3RydWN0b3IiLCJ3ZC5Qcm9ncmFtLmNyZWF0ZSIsIndkLlByb2dyYW0udXNlIiwid2QuUHJvZ3JhbS5nZXRVbmlmb3JtTG9jYXRpb24iLCJ3ZC5Qcm9ncmFtLnNlbmRVbmlmb3JtRGF0YSIsIndkLlByb2dyYW0uc2VuZFVuaWZvcm1EYXRhRnJvbUN1c3RvbVNoYWRlciIsIndkLlByb2dyYW0uc2VuZEF0dHJpYnV0ZURhdGEiLCJ3ZC5Qcm9ncmFtLnNlbmRBdHRyaWJ1dGVEYXRhRnJvbUN1c3RvbVNoYWRlciIsIndkLlByb2dyYW0uc2VuZFN0cnVjdHVyZURhdGEiLCJ3ZC5Qcm9ncmFtLmluaXRXaXRoU2hhZGVyIiwid2QuUHJvZ3JhbS5kaXNwb3NlIiwid2QuUHJvZ3JhbS5pc1VuaWZvcm1EYXRhTm90RXhpc3RCeUxvY2F0aW9uIiwid2QuUHJvZ3JhbS5fY29udmVydEF0dHJpYnV0ZURhdGFUeXBlIiwid2QuUHJvZ3JhbS5fY29udmVydFRvVmVjdG9yMyIsIndkLlByb2dyYW0uX2NvbnZlcnRUb1ZlY3RvcjQiLCJ3ZC5RdWFkQ29tbWFuZCIsIndkLlF1YWRDb21tYW5kLmNvbnN0cnVjdG9yIiwid2QuUXVhZENvbW1hbmQuY3JlYXRlIiwid2QuUXVhZENvbW1hbmQucHJvZ3JhbSIsIndkLlF1YWRDb21tYW5kLmV4ZWN1dGUiLCJ3ZC5RdWFkQ29tbWFuZC5pbml0Iiwid2QuUXVhZENvbW1hbmQuX2RyYXciLCJ3ZC5RdWFkQ29tbWFuZC5fc2V0RWZmZWN0cyIsIndkLlF1YWRDb21tYW5kLl9nZXRTaWRlIiwid2QuR2xVdGlscyIsIndkLkdsVXRpbHMuY29uc3RydWN0b3IiLCJ3ZC5HbFV0aWxzLmRyYXdFbGVtZW50cyIsIndkLkdsVXRpbHMuZHJhd0FycmF5cyIsIndkLkdsVXRpbHMuX2dldEdsIiwid2QuRnJhbWVCdWZmZXIiLCJ3ZC5GcmFtZUJ1ZmZlci5jb25zdHJ1Y3RvciIsIndkLkZyYW1lQnVmZmVyLmNyZWF0ZSIsIndkLkZyYW1lQnVmZmVyLmdsIiwid2QuRnJhbWVCdWZmZXIuY3JlYXRlRnJhbWVCdWZmZXIiLCJ3ZC5GcmFtZUJ1ZmZlci5iaW5kRnJhbWVCdWZmZXIiLCJ3ZC5GcmFtZUJ1ZmZlci5zZXRWaWV3cG9ydCIsIndkLkZyYW1lQnVmZmVyLnJlc3RvcmVWaWV3cG9ydCIsIndkLkZyYW1lQnVmZmVyLmRpc3Bvc2UiLCJ3ZC5GcmFtZUJ1ZmZlci51bkJpbmQiLCJ3ZC5GcmFtZUJ1ZmZlci5jcmVhdGVSZW5kZXJCdWZmZXIiLCJ3ZC5GcmFtZUJ1ZmZlci5hdHRhY2hUZXh0dXJlIiwid2QuRnJhbWVCdWZmZXIuYXR0YWNoUmVuZGVyQnVmZmVyIiwid2QuRnJhbWVCdWZmZXIuY2hlY2siLCJ3ZC5TaGFkZXIiLCJ3ZC5TaGFkZXIuY29uc3RydWN0b3IiLCJ3ZC5TaGFkZXIuY3JlYXRlIiwid2QuU2hhZGVyLmF0dHJpYnV0ZXMiLCJ3ZC5TaGFkZXIudW5pZm9ybXMiLCJ3ZC5TaGFkZXIudnNTb3VyY2UiLCJ3ZC5TaGFkZXIuZnNTb3VyY2UiLCJ3ZC5TaGFkZXIuY3JlYXRlVnNTaGFkZXIiLCJ3ZC5TaGFkZXIuY3JlYXRlRnNTaGFkZXIiLCJ3ZC5TaGFkZXIuaXNFcXVhbCIsIndkLlNoYWRlci5pbml0Iiwid2QuU2hhZGVyLnVwZGF0ZSIsIndkLlNoYWRlci5oYXNMaWIiLCJ3ZC5TaGFkZXIuYWRkTGliIiwid2QuU2hhZGVyLmFkZFNoYWRlckxpYlRvVG9wIiwid2QuU2hhZGVyLmdldExpYiIsIndkLlNoYWRlci5nZXRMaWJzIiwid2QuU2hhZGVyLnJlbW92ZUxpYiIsIndkLlNoYWRlci5yZW1vdmVBbGxMaWJzIiwid2QuU2hhZGVyLnNvcnRMaWIiLCJ3ZC5TaGFkZXIucmVhZCIsIndkLlNoYWRlci5idWlsZERlZmluaXRpb25EYXRhIiwid2QuU2hhZGVyLl9pbml0U2hhZGVyIiwid2QuU2hhZGVyLl9pc05vdEVxdWFsIiwid2QuU2hhZGVyU291cmNlQnVpbGRlciIsIndkLlNoYWRlclNvdXJjZUJ1aWxkZXIuY29uc3RydWN0b3IiLCJ3ZC5TaGFkZXJTb3VyY2VCdWlsZGVyLmNyZWF0ZSIsIndkLlNoYWRlclNvdXJjZUJ1aWxkZXIucmVhZCIsIndkLlNoYWRlclNvdXJjZUJ1aWxkZXIuYnVpbGQiLCJ3ZC5TaGFkZXJTb3VyY2VCdWlsZGVyLmNsZWFyU2hhZGVyRGVmaW5pdGlvbiIsIndkLlNoYWRlclNvdXJjZUJ1aWxkZXIuX3JlYWRMaWJTb3VyY2UiLCJ3ZC5TaGFkZXJTb3VyY2VCdWlsZGVyLl9idWlsZFZzU291cmNlIiwid2QuU2hhZGVyU291cmNlQnVpbGRlci5fYnVpbGRGc1NvdXJjZSIsIndkLlNoYWRlclNvdXJjZUJ1aWxkZXIuX2J1aWxkVnNTb3VyY2VUb3AiLCJ3ZC5TaGFkZXJTb3VyY2VCdWlsZGVyLl9idWlsZFZzU291cmNlRGVmaW5lIiwid2QuU2hhZGVyU291cmNlQnVpbGRlci5fYnVpbGRWc1NvdXJjZVZhckRlY2xhcmUiLCJ3ZC5TaGFkZXJTb3VyY2VCdWlsZGVyLl9idWlsZFZzU291cmNlRnVuY0RlY2xhcmUiLCJ3ZC5TaGFkZXJTb3VyY2VCdWlsZGVyLl9idWlsZFZzU291cmNlRnVuY0RlZmluZSIsIndkLlNoYWRlclNvdXJjZUJ1aWxkZXIuX2J1aWxkVnNTb3VyY2VCb2R5Iiwid2QuU2hhZGVyU291cmNlQnVpbGRlci5fYnVpbGRGc1NvdXJjZVRvcCIsIndkLlNoYWRlclNvdXJjZUJ1aWxkZXIuX2J1aWxkRnNTb3VyY2VEZWZpbmUiLCJ3ZC5TaGFkZXJTb3VyY2VCdWlsZGVyLl9idWlsZEZzU291cmNlVmFyRGVjbGFyZSIsIndkLlNoYWRlclNvdXJjZUJ1aWxkZXIuX2J1aWxkRnNTb3VyY2VGdW5jRGVjbGFyZSIsIndkLlNoYWRlclNvdXJjZUJ1aWxkZXIuX2J1aWxkRnNTb3VyY2VGdW5jRGVmaW5lIiwid2QuU2hhZGVyU291cmNlQnVpbGRlci5fYnVpbGRGc1NvdXJjZUJvZHkiLCJ3ZC5TaGFkZXJTb3VyY2VCdWlsZGVyLl9idWlsZFNvdXJjZURlZmluZSIsIndkLlNoYWRlclNvdXJjZUJ1aWxkZXIuX2dldFByZWNpc2lvblNvdXJjZSIsIndkLlNoYWRlclNvdXJjZUJ1aWxkZXIuX2dlbmVyYXRlQXR0cmlidXRlU291cmNlIiwid2QuU2hhZGVyU291cmNlQnVpbGRlci5fZ2VuZXJhdGVVbmlmb3JtU291cmNlIiwid2QuU2hhZGVyU291cmNlQnVpbGRlci5faXNFeGlzdEluU291cmNlIiwid2QuU2hhZGVyU291cmNlQnVpbGRlci5fY29udmVydEFycmF5VG9BcnJheUJ1ZmZlciIsIndkLlNoYWRlclNvdXJjZUJ1aWxkZXIuX2dldEJ1ZmZlclNpemUiLCJ3ZC5WYXJpYWJsZVR5cGUiLCJ3ZC5WYXJpYWJsZUNhdGVnb3J5Iiwid2QuVmFyaWFibGVMaWIiLCJ3ZC5WYXJpYWJsZUxpYi5jb25zdHJ1Y3RvciIsIndkLlZhcmlhYmxlVHlwZVRhYmxlIiwid2QuVmFyaWFibGVUeXBlVGFibGUuY29uc3RydWN0b3IiLCJ3ZC5WYXJpYWJsZVR5cGVUYWJsZS5nZXRWYXJpYWJsZVR5cGUiLCJ3ZC5WYXJpYWJsZU5hbWVUYWJsZSIsIndkLlZhcmlhYmxlTmFtZVRhYmxlLmNvbnN0cnVjdG9yIiwid2QuVmFyaWFibGVOYW1lVGFibGUuZ2V0VmFyaWFibGVOYW1lIiwid2QuU2hhZGVyTGliIiwid2QuU2hhZGVyTGliLmNvbnN0cnVjdG9yIiwid2QuU2hhZGVyTGliLnNldFNoYWRlckRlZmluaXRpb24iLCJ3ZC5TaGFkZXJMaWIuZ2V0VnNDaHVuayIsIndkLlNoYWRlckxpYi5nZXRGc0NodW5rIiwid2QuU2hhZGVyTGliLnNldFZzU291cmNlIiwid2QuU2hhZGVyTGliLnNldEZzU291cmNlIiwid2QuU2hhZGVyTGliLmFkZEF0dHJpYnV0ZVZhcmlhYmxlIiwid2QuU2hhZGVyTGliLmFkZFVuaWZvcm1WYXJpYWJsZSIsIndkLlNoYWRlckxpYi5zZW5kQXR0cmlidXRlRGF0YSIsIndkLlNoYWRlckxpYi5zZW5kVW5pZm9ybURhdGEiLCJ3ZC5TaGFkZXJMaWIuX2NsZWFyU2hhZGVyRGVmaW5pdGlvbiIsIndkLlNoYWRlckxpYi5fZ2V0Q2h1bmsiLCJ3ZC5TaGFkZXJMaWIuX3NldFNvdXJjZSIsIndkLlNoYWRlckxpYi5fYWRkVmFyaWFibGUiLCJ3ZC5TaGFkZXJMaWJUeXBlIiwid2QuQ29tbW9uU2hhZGVyTGliIiwid2QuQ29tbW9uU2hhZGVyTGliLmNvbnN0cnVjdG9yIiwid2QuQ29tbW9uU2hhZGVyTGliLmNyZWF0ZSIsIndkLkNvbW1vblNoYWRlckxpYi5zZW5kU2hhZGVyVmFyaWFibGVzIiwid2QuQ29tbW9uU2hhZGVyTGliLnNldFNoYWRlckRlZmluaXRpb24iLCJ3ZC5Db21tb25WZXJ0aWNlU2hhZGVyTGliIiwid2QuQ29tbW9uVmVydGljZVNoYWRlckxpYi5jb25zdHJ1Y3RvciIsIndkLkNvbW1vblZlcnRpY2VTaGFkZXJMaWIuY3JlYXRlIiwid2QuQ29tbW9uVmVydGljZVNoYWRlckxpYi5zZW5kU2hhZGVyVmFyaWFibGVzIiwid2QuQ29tbW9uVmVydGljZVNoYWRlckxpYi5zZXRTaGFkZXJEZWZpbml0aW9uIiwid2QuQ29tbW9uVmVydGljZVNoYWRlckxpYi5fc2VuZEF0dHJpYnV0ZVZhcmlhYmxlcyIsIndkLkNvbW1vbk5vcm1hbFNoYWRlckxpYiIsIndkLkNvbW1vbk5vcm1hbFNoYWRlckxpYi5jb25zdHJ1Y3RvciIsIndkLkNvbW1vbk5vcm1hbFNoYWRlckxpYi5jcmVhdGUiLCJ3ZC5Db21tb25Ob3JtYWxTaGFkZXJMaWIuc2VuZFNoYWRlclZhcmlhYmxlcyIsIndkLkNvbW1vbk5vcm1hbFNoYWRlckxpYi5zZXRTaGFkZXJEZWZpbml0aW9uIiwid2QuQ29tbW9uTm9ybWFsU2hhZGVyTGliLl9zZW5kQXR0cmlidXRlVmFyaWFibGVzIiwid2QuQmFzaWNTaGFkZXJMaWIiLCJ3ZC5CYXNpY1NoYWRlckxpYi5jb25zdHJ1Y3RvciIsIndkLkJhc2ljU2hhZGVyTGliLmNyZWF0ZSIsIndkLkJhc2ljU2hhZGVyTGliLnNlbmRTaGFkZXJWYXJpYWJsZXMiLCJ3ZC5CYXNpY1NoYWRlckxpYi5zZXRTaGFkZXJEZWZpbml0aW9uIiwid2QuQmFzaWNFbmRTaGFkZXJMaWIiLCJ3ZC5CYXNpY0VuZFNoYWRlckxpYi5jb25zdHJ1Y3RvciIsIndkLkJhc2ljRW5kU2hhZGVyTGliLmNyZWF0ZSIsIndkLkJhc2ljRW5kU2hhZGVyTGliLnNlbmRTaGFkZXJWYXJpYWJsZXMiLCJ3ZC5Nb3JwaENvbW1vblNoYWRlckxpYiIsIndkLk1vcnBoQ29tbW9uU2hhZGVyTGliLmNvbnN0cnVjdG9yIiwid2QuTW9ycGhDb21tb25TaGFkZXJMaWIuY3JlYXRlIiwid2QuTW9ycGhDb21tb25TaGFkZXJMaWIuc2VuZFNoYWRlclZhcmlhYmxlcyIsIndkLk1vcnBoQ29tbW9uU2hhZGVyTGliLnNldFNoYWRlckRlZmluaXRpb24iLCJ3ZC5Nb3JwaFZlcnRpY2VTaGFkZXJMaWIiLCJ3ZC5Nb3JwaFZlcnRpY2VTaGFkZXJMaWIuY29uc3RydWN0b3IiLCJ3ZC5Nb3JwaFZlcnRpY2VTaGFkZXJMaWIuY3JlYXRlIiwid2QuTW9ycGhWZXJ0aWNlU2hhZGVyTGliLnNlbmRTaGFkZXJWYXJpYWJsZXMiLCJ3ZC5Nb3JwaFZlcnRpY2VTaGFkZXJMaWIuc2V0U2hhZGVyRGVmaW5pdGlvbiIsIndkLk1vcnBoTm9ybWFsU2hhZGVyTGliIiwid2QuTW9ycGhOb3JtYWxTaGFkZXJMaWIuY29uc3RydWN0b3IiLCJ3ZC5Nb3JwaE5vcm1hbFNoYWRlckxpYi5jcmVhdGUiLCJ3ZC5Nb3JwaE5vcm1hbFNoYWRlckxpYi5zZW5kU2hhZGVyVmFyaWFibGVzIiwid2QuTW9ycGhOb3JtYWxTaGFkZXJMaWIuc2V0U2hhZGVyRGVmaW5pdGlvbiIsIndkLlNreWJveFNoYWRlckxpYiIsIndkLlNreWJveFNoYWRlckxpYi5jb25zdHJ1Y3RvciIsIndkLlNreWJveFNoYWRlckxpYi5jcmVhdGUiLCJ3ZC5Ta3lib3hTaGFkZXJMaWIuc2VuZFNoYWRlclZhcmlhYmxlcyIsIndkLlNreWJveFNoYWRlckxpYi5zZXRTaGFkZXJEZWZpbml0aW9uIiwid2QuRW52TWFwRm9yQmFzaWNTaGFkZXJMaWIiLCJ3ZC5FbnZNYXBGb3JCYXNpY1NoYWRlckxpYi5jb25zdHJ1Y3RvciIsIndkLkVudk1hcEZvckJhc2ljU2hhZGVyTGliLnNlbmRTaGFkZXJWYXJpYWJsZXMiLCJ3ZC5FbnZNYXBGb3JCYXNpY1NoYWRlckxpYi5zZXRTaGFkZXJEZWZpbml0aW9uIiwid2QuRW52TWFwRm9yQmFzaWNTaGFkZXJMaWIuc2V0RW52TWFwU291cmNlIiwid2QuQmFzaWNFbnZNYXBGb3JCYXNpY1NoYWRlckxpYiIsIndkLkJhc2ljRW52TWFwRm9yQmFzaWNTaGFkZXJMaWIuY29uc3RydWN0b3IiLCJ3ZC5CYXNpY0Vudk1hcEZvckJhc2ljU2hhZGVyTGliLmNyZWF0ZSIsIndkLlJlZmxlY3Rpb25Gb3JCYXNpY1NoYWRlckxpYiIsIndkLlJlZmxlY3Rpb25Gb3JCYXNpY1NoYWRlckxpYi5jb25zdHJ1Y3RvciIsIndkLlJlZmxlY3Rpb25Gb3JCYXNpY1NoYWRlckxpYi5jcmVhdGUiLCJ3ZC5SZWZsZWN0aW9uRm9yQmFzaWNTaGFkZXJMaWIuc2V0U2hhZGVyRGVmaW5pdGlvbiIsIndkLlJlZnJhY3Rpb25Gb3JCYXNpY1NoYWRlckxpYiIsIndkLlJlZnJhY3Rpb25Gb3JCYXNpY1NoYWRlckxpYi5jb25zdHJ1Y3RvciIsIndkLlJlZnJhY3Rpb25Gb3JCYXNpY1NoYWRlckxpYi5jcmVhdGUiLCJ3ZC5SZWZyYWN0aW9uRm9yQmFzaWNTaGFkZXJMaWIuc2VuZFNoYWRlclZhcmlhYmxlcyIsIndkLlJlZnJhY3Rpb25Gb3JCYXNpY1NoYWRlckxpYi5zZXRTaGFkZXJEZWZpbml0aW9uIiwid2QuRnJlc25lbEZvckJhc2ljU2hhZGVyTGliIiwid2QuRnJlc25lbEZvckJhc2ljU2hhZGVyTGliLmNvbnN0cnVjdG9yIiwid2QuRnJlc25lbEZvckJhc2ljU2hhZGVyTGliLmNyZWF0ZSIsIndkLkZyZXNuZWxGb3JCYXNpY1NoYWRlckxpYi5zZW5kU2hhZGVyVmFyaWFibGVzIiwid2QuRnJlc25lbEZvckJhc2ljU2hhZGVyTGliLnNldFNoYWRlckRlZmluaXRpb24iLCJ3ZC5FbnZNYXBGb3JMaWdodFNoYWRlckxpYiIsIndkLkVudk1hcEZvckxpZ2h0U2hhZGVyTGliLmNvbnN0cnVjdG9yIiwid2QuRW52TWFwRm9yTGlnaHRTaGFkZXJMaWIuc2VuZFNoYWRlclZhcmlhYmxlcyIsIndkLkVudk1hcEZvckxpZ2h0U2hhZGVyTGliLnNldFNoYWRlckRlZmluaXRpb24iLCJ3ZC5FbnZNYXBGb3JMaWdodFNoYWRlckxpYi5zZXRFbnZNYXBTb3VyY2UiLCJ3ZC5CYXNpY0Vudk1hcEZvckxpZ2h0U2hhZGVyTGliIiwid2QuQmFzaWNFbnZNYXBGb3JMaWdodFNoYWRlckxpYi5jb25zdHJ1Y3RvciIsIndkLkJhc2ljRW52TWFwRm9yTGlnaHRTaGFkZXJMaWIuY3JlYXRlIiwid2QuUmVmbGVjdGlvbkZvckxpZ2h0U2hhZGVyTGliIiwid2QuUmVmbGVjdGlvbkZvckxpZ2h0U2hhZGVyTGliLmNvbnN0cnVjdG9yIiwid2QuUmVmbGVjdGlvbkZvckxpZ2h0U2hhZGVyTGliLmNyZWF0ZSIsIndkLlJlZmxlY3Rpb25Gb3JMaWdodFNoYWRlckxpYi5zZXRTaGFkZXJEZWZpbml0aW9uIiwid2QuUmVmcmFjdGlvbkZvckxpZ2h0U2hhZGVyTGliIiwid2QuUmVmcmFjdGlvbkZvckxpZ2h0U2hhZGVyTGliLmNvbnN0cnVjdG9yIiwid2QuUmVmcmFjdGlvbkZvckxpZ2h0U2hhZGVyTGliLmNyZWF0ZSIsIndkLlJlZnJhY3Rpb25Gb3JMaWdodFNoYWRlckxpYi5zZW5kU2hhZGVyVmFyaWFibGVzIiwid2QuUmVmcmFjdGlvbkZvckxpZ2h0U2hhZGVyTGliLnNldFNoYWRlckRlZmluaXRpb24iLCJ3ZC5GcmVzbmVsRm9yTGlnaHRTaGFkZXJMaWIiLCJ3ZC5GcmVzbmVsRm9yTGlnaHRTaGFkZXJMaWIuY29uc3RydWN0b3IiLCJ3ZC5GcmVzbmVsRm9yTGlnaHRTaGFkZXJMaWIuY3JlYXRlIiwid2QuRnJlc25lbEZvckxpZ2h0U2hhZGVyTGliLnNlbmRTaGFkZXJWYXJpYWJsZXMiLCJ3ZC5GcmVzbmVsRm9yTGlnaHRTaGFkZXJMaWIuc2V0U2hhZGVyRGVmaW5pdGlvbiIsIndkLk1hcFNoYWRlckxpYiIsIndkLk1hcFNoYWRlckxpYi5jb25zdHJ1Y3RvciIsIndkLk1hcFNoYWRlckxpYi5zZW5kU2hhZGVyVmFyaWFibGVzIiwid2QuTWFwU2hhZGVyTGliLnNldFNoYWRlckRlZmluaXRpb24iLCJ3ZC5NYXBTaGFkZXJMaWIuX3NldE1hcFNvdXJjZSIsIndkLkJhc2ljTWFwU2hhZGVyTGliIiwid2QuQmFzaWNNYXBTaGFkZXJMaWIuY29uc3RydWN0b3IiLCJ3ZC5CYXNpY01hcFNoYWRlckxpYi5jcmVhdGUiLCJ3ZC5NdWx0aU1hcFNoYWRlckxpYiIsIndkLk11bHRpTWFwU2hhZGVyTGliLmNvbnN0cnVjdG9yIiwid2QuTXVsdGlNYXBTaGFkZXJMaWIuY3JlYXRlIiwid2QuTXVsdGlNYXBTaGFkZXJMaWIuc2VuZFNoYWRlclZhcmlhYmxlcyIsIndkLk11bHRpTWFwU2hhZGVyTGliLnNldFNoYWRlckRlZmluaXRpb24iLCJ3ZC5NaXJyb3JGb3JCYXNpY1NoYWRlckxpYiIsIndkLk1pcnJvckZvckJhc2ljU2hhZGVyTGliLmNvbnN0cnVjdG9yIiwid2QuTWlycm9yRm9yQmFzaWNTaGFkZXJMaWIuY3JlYXRlIiwid2QuTWlycm9yRm9yQmFzaWNTaGFkZXJMaWIuc2VuZFNoYWRlclZhcmlhYmxlcyIsIndkLk1pcnJvckZvckJhc2ljU2hhZGVyTGliLnNldFNoYWRlckRlZmluaXRpb24iLCJ3ZC5MaWdodENvbW1vblNoYWRlckxpYiIsIndkLkxpZ2h0Q29tbW9uU2hhZGVyTGliLmNvbnN0cnVjdG9yIiwid2QuTGlnaHRDb21tb25TaGFkZXJMaWIuY3JlYXRlIiwid2QuTGlnaHRDb21tb25TaGFkZXJMaWIuc2VuZFNoYWRlclZhcmlhYmxlcyIsIndkLkxpZ2h0Q29tbW9uU2hhZGVyTGliLnNldFNoYWRlckRlZmluaXRpb24iLCJ3ZC5MaWdodFNoYWRlckxpYiIsIndkLkxpZ2h0U2hhZGVyTGliLmNvbnN0cnVjdG9yIiwid2QuTGlnaHRTaGFkZXJMaWIuY3JlYXRlIiwid2QuTGlnaHRTaGFkZXJMaWIuc2VuZFNoYWRlclZhcmlhYmxlcyIsIndkLkxpZ2h0U2hhZGVyTGliLnNldFNoYWRlckRlZmluaXRpb24iLCJ3ZC5MaWdodFNoYWRlckxpYi5fc2VuZExpZ2h0VmFyaWFibGVzIiwid2QuTGlnaHRTaGFkZXJMaWIuX3NlbmRQb2ludExpZ2h0VmFyaWFibGVzIiwid2QuTGlnaHRTaGFkZXJMaWIuX3NlbmREaXJlY3Rpb25MaWdodFZhcmlhYmxlcyIsIndkLkxpZ2h0U2hhZGVyTGliLl9pc1plcm8iLCJ3ZC5MaWdodFNoYWRlckxpYi5fc2V0TGlnaHREZWZpbml0aW9uIiwid2QuTGlnaHRTaGFkZXJMaWIuX2FkZERlZmluZSIsIndkLkxpZ2h0RW5kU2hhZGVyTGliIiwid2QuTGlnaHRFbmRTaGFkZXJMaWIuY29uc3RydWN0b3IiLCJ3ZC5MaWdodEVuZFNoYWRlckxpYi5jcmVhdGUiLCJ3ZC5MaWdodEVuZFNoYWRlckxpYi5zZW5kU2hhZGVyVmFyaWFibGVzIiwid2QuTGlnaHRNYXBTaGFkZXJMaWIiLCJ3ZC5MaWdodE1hcFNoYWRlckxpYi5jb25zdHJ1Y3RvciIsIndkLkxpZ2h0TWFwU2hhZGVyTGliLnNlbmRTaGFkZXJWYXJpYWJsZXMiLCJ3ZC5MaWdodE1hcFNoYWRlckxpYi5zZXRTaGFkZXJEZWZpbml0aW9uIiwid2QuRGlmZnVzZU1hcFNoYWRlckxpYiIsIndkLkRpZmZ1c2VNYXBTaGFkZXJMaWIuY29uc3RydWN0b3IiLCJ3ZC5EaWZmdXNlTWFwU2hhZGVyTGliLmNyZWF0ZSIsIndkLkRpZmZ1c2VNYXBTaGFkZXJMaWIuc2V0U2hhZGVyRGVmaW5pdGlvbiIsIndkLlNwZWN1bGFyTWFwU2hhZGVyTGliIiwid2QuU3BlY3VsYXJNYXBTaGFkZXJMaWIuY29uc3RydWN0b3IiLCJ3ZC5TcGVjdWxhck1hcFNoYWRlckxpYi5jcmVhdGUiLCJ3ZC5TcGVjdWxhck1hcFNoYWRlckxpYi5zZXRTaGFkZXJEZWZpbml0aW9uIiwid2QuTm9ybWFsTWFwU2hhZGVyTGliIiwid2QuTm9ybWFsTWFwU2hhZGVyTGliLmNvbnN0cnVjdG9yIiwid2QuTm9ybWFsTWFwU2hhZGVyTGliLmNyZWF0ZSIsIndkLk5vcm1hbE1hcFNoYWRlckxpYi5zZW5kU2hhZGVyVmFyaWFibGVzIiwid2QuTm9ybWFsTWFwU2hhZGVyTGliLnNldFNoYWRlckRlZmluaXRpb24iLCJ3ZC5Ob0RpZmZ1c2VNYXBTaGFkZXJMaWIiLCJ3ZC5Ob0RpZmZ1c2VNYXBTaGFkZXJMaWIuY29uc3RydWN0b3IiLCJ3ZC5Ob0RpZmZ1c2VNYXBTaGFkZXJMaWIuY3JlYXRlIiwid2QuTm9EaWZmdXNlTWFwU2hhZGVyTGliLnNlbmRTaGFkZXJWYXJpYWJsZXMiLCJ3ZC5Ob0RpZmZ1c2VNYXBTaGFkZXJMaWIuc2V0U2hhZGVyRGVmaW5pdGlvbiIsIndkLk5vU3BlY3VsYXJNYXBTaGFkZXJMaWIiLCJ3ZC5Ob1NwZWN1bGFyTWFwU2hhZGVyTGliLmNvbnN0cnVjdG9yIiwid2QuTm9TcGVjdWxhck1hcFNoYWRlckxpYi5jcmVhdGUiLCJ3ZC5Ob1NwZWN1bGFyTWFwU2hhZGVyTGliLnNlbmRTaGFkZXJWYXJpYWJsZXMiLCJ3ZC5Ob1NwZWN1bGFyTWFwU2hhZGVyTGliLnNldFNoYWRlckRlZmluaXRpb24iLCJ3ZC5Ob05vcm1hbE1hcFNoYWRlckxpYiIsIndkLk5vTm9ybWFsTWFwU2hhZGVyTGliLmNvbnN0cnVjdG9yIiwid2QuTm9Ob3JtYWxNYXBTaGFkZXJMaWIuY3JlYXRlIiwid2QuTm9Ob3JtYWxNYXBTaGFkZXJMaWIuc2VuZFNoYWRlclZhcmlhYmxlcyIsIndkLkJ1aWxkU2hhZG93TWFwU2hhZGVyTGliIiwid2QuQnVpbGRTaGFkb3dNYXBTaGFkZXJMaWIuY29uc3RydWN0b3IiLCJ3ZC5CdWlsZFNoYWRvd01hcFNoYWRlckxpYi5zZXRTaGFkZXJEZWZpbml0aW9uIiwid2QuQnVpbGRUd29EU2hhZG93TWFwU2hhZGVyTGliIiwid2QuQnVpbGRUd29EU2hhZG93TWFwU2hhZGVyTGliLmNvbnN0cnVjdG9yIiwid2QuQnVpbGRUd29EU2hhZG93TWFwU2hhZGVyTGliLmNyZWF0ZSIsIndkLkJ1aWxkVHdvRFNoYWRvd01hcFNoYWRlckxpYi5zZW5kU2hhZGVyVmFyaWFibGVzIiwid2QuQnVpbGRUd29EU2hhZG93TWFwU2hhZGVyTGliLnNldFNoYWRlckRlZmluaXRpb24iLCJ3ZC5CdWlsZEN1YmVtYXBTaGFkb3dNYXBTaGFkZXJMaWIiLCJ3ZC5CdWlsZEN1YmVtYXBTaGFkb3dNYXBTaGFkZXJMaWIuY29uc3RydWN0b3IiLCJ3ZC5CdWlsZEN1YmVtYXBTaGFkb3dNYXBTaGFkZXJMaWIuY3JlYXRlIiwid2QuQnVpbGRDdWJlbWFwU2hhZG93TWFwU2hhZGVyTGliLnNlbmRTaGFkZXJWYXJpYWJsZXMiLCJ3ZC5CdWlsZEN1YmVtYXBTaGFkb3dNYXBTaGFkZXJMaWIuc2V0U2hhZGVyRGVmaW5pdGlvbiIsIndkLlRvdGFsU2hhZG93TWFwU2hhZGVyTGliIiwid2QuVG90YWxTaGFkb3dNYXBTaGFkZXJMaWIuY29uc3RydWN0b3IiLCJ3ZC5Ub3RhbFNoYWRvd01hcFNoYWRlckxpYi5jcmVhdGUiLCJ3ZC5Ub3RhbFNoYWRvd01hcFNoYWRlckxpYi5zZW5kU2hhZGVyVmFyaWFibGVzIiwid2QuU2hhZG93TWFwU2hhZGVyTGliIiwid2QuU2hhZG93TWFwU2hhZGVyTGliLmNvbnN0cnVjdG9yIiwid2QuU2hhZG93TWFwU2hhZGVyTGliLnNldFNoYWRlckRlZmluaXRpb24iLCJ3ZC5TaGFkb3dNYXBTaGFkZXJMaWIuX3NldFNoYWRvd01hcFNvdXJjZSIsIndkLlR3b0RTaGFkb3dNYXBTaGFkZXJMaWIiLCJ3ZC5Ud29EU2hhZG93TWFwU2hhZGVyTGliLmNvbnN0cnVjdG9yIiwid2QuVHdvRFNoYWRvd01hcFNoYWRlckxpYi5jcmVhdGUiLCJ3ZC5Ud29EU2hhZG93TWFwU2hhZGVyTGliLnNlbmRTaGFkZXJWYXJpYWJsZXMiLCJ3ZC5DdWJlbWFwU2hhZG93TWFwU2hhZGVyTGliIiwid2QuQ3ViZW1hcFNoYWRvd01hcFNoYWRlckxpYi5jb25zdHJ1Y3RvciIsIndkLkN1YmVtYXBTaGFkb3dNYXBTaGFkZXJMaWIuY3JlYXRlIiwid2QuQ3ViZW1hcFNoYWRvd01hcFNoYWRlckxpYi5zZW5kU2hhZGVyVmFyaWFibGVzIiwid2QuTm9TaGFkb3dNYXBTaGFkZXJMaWIiLCJ3ZC5Ob1NoYWRvd01hcFNoYWRlckxpYi5jb25zdHJ1Y3RvciIsIndkLk5vU2hhZG93TWFwU2hhZGVyTGliLmNyZWF0ZSIsIndkLk5vU2hhZG93TWFwU2hhZGVyTGliLnNlbmRTaGFkZXJWYXJpYWJsZXMiLCJ3ZC5TaGFkZXJTbmlwcGV0Iiwid2QuU2hhZGVyU25pcHBldC5jb25zdHJ1Y3RvciIsIndkLk1hdGVyaWFsIiwid2QuTWF0ZXJpYWwuY29uc3RydWN0b3IiLCJ3ZC5NYXRlcmlhbC5wcm9ncmFtIiwid2QuTWF0ZXJpYWwuYmxlbmRUeXBlIiwid2QuTWF0ZXJpYWwuZW52TWFwIiwid2QuTWF0ZXJpYWwuYmxlbmRTcmMiLCJ3ZC5NYXRlcmlhbC5ibGVuZERzdCIsIndkLk1hdGVyaWFsLmJsZW5kRXF1YXRpb24iLCJ3ZC5NYXRlcmlhbC5pbml0Iiwid2QuTWF0ZXJpYWwuZGlzcG9zZSIsIndkLk1hdGVyaWFsLnVwZGF0ZVRleHR1cmUiLCJ3ZC5NYXRlcmlhbC51cGRhdGVTaGFkZXIiLCJ3ZC5NYXRlcmlhbC5hZGRTaGFkZXJMaWIiLCJ3ZC5NYXRlcmlhbC5hZGRNYXAiLCJ3ZC5NYXRlcmlhbC5hZGROb3JtYWxTaGFkZXJMaWIiLCJ3ZC5NYXRlcmlhbC5zZXRCbGVuZEJ5T3BhY2l0eSIsIndkLk1hdGVyaWFsLl9hZGRUb3BTaGFkZXJMaWIiLCJ3ZC5NYXRlcmlhbC5fYWRkU2hhZGVyTGliVG9Ub3AiLCJ3ZC5NYXRlcmlhbC5faGFzQW5pbWF0aW9uIiwid2QuTWF0ZXJpYWwuX2FmdGVySW5pdEhhbmRsZXIiLCJ3ZC5CYXNpY01hdGVyaWFsIiwid2QuQmFzaWNNYXRlcmlhbC5jb25zdHJ1Y3RvciIsIndkLkJhc2ljTWF0ZXJpYWwuY3JlYXRlIiwid2QuQmFzaWNNYXRlcmlhbC5tYXAiLCJ3ZC5CYXNpY01hdGVyaWFsLm1pcnJvck1hcCIsIndkLkJhc2ljTWF0ZXJpYWwub3BhY2l0eSIsIndkLkJhc2ljTWF0ZXJpYWwuYWRkU2hhZGVyTGliIiwid2QuQmFzaWNNYXRlcmlhbC5fc2V0TWFwU2hhZGVyTGliIiwid2QuQmFzaWNNYXRlcmlhbC5fc2V0RW52TWFwU2hhZGVyTGliIiwid2QuQmFzaWNNYXRlcmlhbC5fc2V0TWlycm9yTWFwU2hhZGVyTGliIiwid2QuU2t5Ym94TWF0ZXJpYWwiLCJ3ZC5Ta3lib3hNYXRlcmlhbC5jb25zdHJ1Y3RvciIsIndkLlNreWJveE1hdGVyaWFsLmNyZWF0ZSIsIndkLlNreWJveE1hdGVyaWFsLmluaXRXaGVuQ3JlYXRlIiwid2QuU2t5Ym94TWF0ZXJpYWwuYWRkU2hhZGVyTGliIiwid2QuTGlnaHRNYXRlcmlhbCIsIndkLkxpZ2h0TWF0ZXJpYWwuY29uc3RydWN0b3IiLCJ3ZC5MaWdodE1hdGVyaWFsLmNyZWF0ZSIsIndkLkxpZ2h0TWF0ZXJpYWwuZGlmZnVzZU1hcCIsIndkLkxpZ2h0TWF0ZXJpYWwuc3BlY3VsYXJNYXAiLCJ3ZC5MaWdodE1hdGVyaWFsLm5vcm1hbE1hcCIsIndkLkxpZ2h0TWF0ZXJpYWwuc2hpbmluZXNzIiwid2QuTGlnaHRNYXRlcmlhbC5vcGFjaXR5Iiwid2QuTGlnaHRNYXRlcmlhbC5hZGRUd29EU2hhZG93TWFwIiwid2QuTGlnaHRNYXRlcmlhbC5hZGRDdWJlbWFwU2hhZG93TWFwIiwid2QuTGlnaHRNYXRlcmlhbC5oYXNTaGFkb3dNYXAiLCJ3ZC5MaWdodE1hdGVyaWFsLmFkZFR3b0RTaGFkb3dNYXBEYXRhIiwid2QuTGlnaHRNYXRlcmlhbC5hZGRDdWJlbWFwU2hhZG93TWFwRGF0YSIsIndkLkxpZ2h0TWF0ZXJpYWwuY2xlYXJUd29EU2hhZG93TWFwRGF0YSIsIndkLkxpZ2h0TWF0ZXJpYWwuY2xlYXJDdWJlbWFwU2hhZG93TWFwRGF0YSIsIndkLkxpZ2h0TWF0ZXJpYWwuYWRkU2hhZGVyTGliIiwid2QuTGlnaHRNYXRlcmlhbC5fc2V0UGhvbmdNYXBTaGFkZXJMaWIiLCJ3ZC5MaWdodE1hdGVyaWFsLl9zZXRFbnZNYXBTaGFkZXJMaWIiLCJ3ZC5MaWdodE1hdGVyaWFsLl9oYXNUd29EU2hhZG93TWFwIiwid2QuTGlnaHRNYXRlcmlhbC5faGFzQ3ViZW1hcFNoYWRvd01hcCIsIndkLkN1c3RvbU1hdGVyaWFsIiwid2QuQ3VzdG9tTWF0ZXJpYWwuY29uc3RydWN0b3IiLCJ3ZC5DdXN0b21NYXRlcmlhbC5jcmVhdGUiLCJ3ZC5TaGFkaW5nIiwid2QuTWFwTWFuYWdlciIsIndkLk1hcE1hbmFnZXIuY29uc3RydWN0b3IiLCJ3ZC5NYXBNYW5hZ2VyLmNyZWF0ZSIsIndkLk1hcE1hbmFnZXIuaW5pdCIsIndkLk1hcE1hbmFnZXIuYWRkTWFwIiwid2QuTWFwTWFuYWdlci5nZXRNYXAiLCJ3ZC5NYXBNYW5hZ2VyLmhhc01hcCIsIndkLk1hcE1hbmFnZXIuZ2V0TWFwQ291bnQiLCJ3ZC5NYXBNYW5hZ2VyLmdldEVudk1hcCIsIndkLk1hcE1hbmFnZXIuc2V0RW52TWFwIiwid2QuTWFwTWFuYWdlci5nZXRNaXJyb3JNYXAiLCJ3ZC5NYXBNYW5hZ2VyLnNldE1pcnJvck1hcCIsIndkLk1hcE1hbmFnZXIuaXNNaXJyb3JNYXAiLCJ3ZC5NYXBNYW5hZ2VyLnJlbW92ZUFsbENoaWxkcmVuIiwid2QuTWFwTWFuYWdlci5kaXNwb3NlIiwid2QuTWFwTWFuYWdlci51cGRhdGUiLCJ3ZC5NYXBNYW5hZ2VyLnNlbmREYXRhIiwid2QuTWFwTWFuYWdlci5fZ2V0TWFwTGlzdCIsIndkLk1hcE1hbmFnZXIuX2dldE1hcCIsIndkLk1hcE1hbmFnZXIuX3NldE1hcCIsIndkLk1hcE1hbmFnZXIuX3JlbW92ZU1hcCIsIndkLk1hcE1hbmFnZXIuX3NldE1hcE9wdGlvbiIsIndkLkFzc2V0VHlwZSIsIndkLkxvYWRlciIsIndkLkxvYWRlci5jb25zdHJ1Y3RvciIsIndkLkxvYWRlci5sb2FkIiwid2QuTG9hZGVyLmdldCIsIndkLkxvYWRlci5oYXMiLCJ3ZC5Mb2FkZXIuZGlzcG9zZSIsIndkLkxvYWRlci5fZXJyb3JIYW5kbGUiLCJ3ZC5HTFNMTG9hZGVyIiwid2QuR0xTTExvYWRlci5jb25zdHJ1Y3RvciIsIndkLkdMU0xMb2FkZXIuZ2V0SW5zdGFuY2UiLCJ3ZC5HTFNMTG9hZGVyLmxvYWRBc3NldCIsIndkLkpzTG9hZGVyIiwid2QuSnNMb2FkZXIuY29uc3RydWN0b3IiLCJ3ZC5Kc0xvYWRlci5nZXRJbnN0YW5jZSIsIndkLkpzTG9hZGVyLmxvYWRBc3NldCIsIndkLkpzTG9hZGVyLl9jcmVhdGVTY3JpcHQiLCJ3ZC5Kc0xvYWRlci5fYXBwZW5kU2NyaXB0Iiwid2QuVmlkZW9Mb2FkZXIiLCJ3ZC5WaWRlb0xvYWRlci5jb25zdHJ1Y3RvciIsIndkLlZpZGVvTG9hZGVyLmdldEluc3RhbmNlIiwid2QuVmlkZW9Mb2FkZXIubG9hZEFzc2V0Iiwid2QuVGV4dHVyZUxvYWRlciIsIndkLlRleHR1cmVMb2FkZXIuY29uc3RydWN0b3IiLCJ3ZC5UZXh0dXJlTG9hZGVyLmdldEluc3RhbmNlIiwid2QuVGV4dHVyZUxvYWRlci5sb2FkQXNzZXQiLCJ3ZC5JbWFnZUxvYWRlciIsIndkLkltYWdlTG9hZGVyLmNvbnN0cnVjdG9yIiwid2QuSW1hZ2VMb2FkZXIubG9hZCIsIndkLkFqYXhMb2FkZXIiLCJ3ZC5BamF4TG9hZGVyLmNvbnN0cnVjdG9yIiwid2QuQWpheExvYWRlci5sb2FkIiwid2QuTW9kZWxMb2FkZXJVdGlscyIsIndkLk1vZGVsTG9hZGVyVXRpbHMuY29uc3RydWN0b3IiLCJ3ZC5Nb2RlbExvYWRlclV0aWxzLmdldFBhdGgiLCJ3ZC5Db21wcmVzc2VkVGV4dHVyZUxvYWRlciIsIndkLkNvbXByZXNzZWRUZXh0dXJlTG9hZGVyLmNvbnN0cnVjdG9yIiwid2QuQ29tcHJlc3NlZFRleHR1cmVMb2FkZXIubG9hZCIsIndkLkNvbXByZXNzZWRUZXh0dXJlTG9hZGVyLl9nZXRDb21wcmVzc2VkRm9ybWF0Iiwid2QuRERTUGFyc2VyIiwid2QuRERTUGFyc2VyLmNvbnN0cnVjdG9yIiwid2QuRERTUGFyc2VyLnBhcnNlIiwid2QuRERTUGFyc2VyLl9mb3VyQ0NUb0ludDMyIiwid2QuRERTUGFyc2VyLl9pbnQzMlRvRm91ckNDIiwid2QuRERTUGFyc2VyLl9sb2FkQVJHQk1pcCIsIndkLkREU0RhdGEiLCJ3ZC5ERFNEYXRhLmNvbnN0cnVjdG9yIiwid2QuVGV4dHVyZUFzc2V0Iiwid2QuVGV4dHVyZUFzc2V0LmNvbnN0cnVjdG9yIiwid2QuVGV4dHVyZUFzc2V0LndpZHRoIiwid2QuVGV4dHVyZUFzc2V0LmhlaWdodCIsIndkLlRleHR1cmVBc3NldC5jb3B5VG9DdWJlbWFwVGV4dHVyZSIsIndkLlRleHR1cmVBc3NldC5jb3B5VG8iLCJ3ZC5JbWFnZVRleHR1cmVBc3NldCIsIndkLkltYWdlVGV4dHVyZUFzc2V0LmNvbnN0cnVjdG9yIiwid2QuSW1hZ2VUZXh0dXJlQXNzZXQuY3JlYXRlIiwid2QuSW1hZ2VUZXh0dXJlQXNzZXQudG9UZXh0dXJlIiwid2QuSW1hZ2VUZXh0dXJlQXNzZXQudG9DdWJlbWFwRmFjZVRleHR1cmUiLCJ3ZC5JbWFnZVRleHR1cmVBc3NldC5jb3B5VG9DdWJlbWFwRmFjZVRleHR1cmUiLCJ3ZC5WaWRlb1RleHR1cmVBc3NldCIsIndkLlZpZGVvVGV4dHVyZUFzc2V0LmNvbnN0cnVjdG9yIiwid2QuVmlkZW9UZXh0dXJlQXNzZXQuY3JlYXRlIiwid2QuVmlkZW9UZXh0dXJlQXNzZXQuaW5pdFdoZW5DcmVhdGUiLCJ3ZC5WaWRlb1RleHR1cmVBc3NldC50b1RleHR1cmUiLCJ3ZC5WaWRlb1RleHR1cmVBc3NldC50b0N1YmVtYXBGYWNlVGV4dHVyZSIsIndkLlZpZGVvVGV4dHVyZUFzc2V0LmNvcHlUb0N1YmVtYXBGYWNlVGV4dHVyZSIsIndkLkNvbXByZXNzZWRUZXh0dXJlQXNzZXQiLCJ3ZC5Db21wcmVzc2VkVGV4dHVyZUFzc2V0LmNvbnN0cnVjdG9yIiwid2QuQ29tcHJlc3NlZFRleHR1cmVBc3NldC5jcmVhdGUiLCJ3ZC5Db21wcmVzc2VkVGV4dHVyZUFzc2V0LmluaXRXaGVuQ3JlYXRlIiwid2QuQ29tcHJlc3NlZFRleHR1cmVBc3NldC50b1RleHR1cmUiLCJ3ZC5Db21wcmVzc2VkVGV4dHVyZUFzc2V0LnRvQ3ViZW1hcEZhY2VUZXh0dXJlIiwid2QuQ29tcHJlc3NlZFRleHR1cmVBc3NldC5jb3B5VG9DdWJlbWFwRmFjZVRleHR1cmUiLCJ3ZC5UZXh0dXJlRmlsdGVyTW9kZSIsIndkLlRleHR1cmVXcmFwTW9kZSIsIndkLlRleHR1cmVGb3JtYXQiLCJ3ZC5UZXh0dXJlVHlwZSIsIndkLkVudk1hcE1vZGUiLCJ3ZC5UZXh0dXJlQ29tYmluZU1vZGUiLCJ3ZC5UZXh0dXJlU291cmNlUmVnaW9uTWFwcGluZyIsIndkLlRleHR1cmVTb3VyY2VSZWdpb25NZXRob2QiLCJ3ZC5UZXh0dXJlVGFyZ2V0Iiwid2QuTG9hZGVyTWFuYWdlciIsIndkLkxvYWRlck1hbmFnZXIuY29uc3RydWN0b3IiLCJ3ZC5Mb2FkZXJNYW5hZ2VyLmdldEluc3RhbmNlIiwid2QuTG9hZGVyTWFuYWdlci5sb2FkIiwid2QuTG9hZGVyTWFuYWdlci5yZXNldCIsIndkLkxvYWRlck1hbmFnZXIuZGlzcG9zZSIsIndkLkxvYWRlck1hbmFnZXIuZ2V0Iiwid2QuTG9hZGVyTWFuYWdlci5fY3JlYXRlTG9hZE11bHRpQXNzZXRTdHJlYW0iLCJ3ZC5Mb2FkZXJNYW5hZ2VyLl9jcmVhdGVMb2FkU2luZ2xlQXNzZXRTdHJlYW0iLCJ3ZC5Mb2FkZXJNYW5hZ2VyLl9nZXRMb2FkZXIiLCJ3ZC5Mb2FkZXJNYW5hZ2VyLl9hZGRUb0Fzc2V0VGFibGUiLCJ3ZC5Mb2FkZXJGYWN0b3J5Iiwid2QuTG9hZGVyRmFjdG9yeS5jb25zdHJ1Y3RvciIsIndkLkxvYWRlckZhY3RvcnkuY3JlYXRlIiwid2QuTG9hZGVyRmFjdG9yeS5jcmVhdGVBbGxMb2FkZXIiLCJ3ZC5Mb2FkZXJGYWN0b3J5Ll9nZXRMb2FkZXJCeUV4dG5hbWUiLCJ3ZC5XRFRhZyIsIndkLldETG9hZGVyIiwid2QuV0RMb2FkZXIuY29uc3RydWN0b3IiLCJ3ZC5XRExvYWRlci5nZXRJbnN0YW5jZSIsIndkLldETG9hZGVyLmxvYWRBc3NldCIsIndkLldETG9hZGVyLl9jcmVhdGVMb2FkTWFwU3RyZWFtIiwid2QuV0RQYXJzZXIiLCJ3ZC5XRFBhcnNlci5jb25zdHJ1Y3RvciIsIndkLldEUGFyc2VyLmNyZWF0ZSIsIndkLldEUGFyc2VyLnBhcnNlIiwid2QuV0RQYXJzZXIuX3BhcnNlTWV0YWRhdGEiLCJ3ZC5XRFBhcnNlci5fcGFyc2VPYmplY3QiLCJ3ZC5XRFBhcnNlci5fcGFyc2VTY2VuZSIsIndkLldEUGFyc2VyLl9wYXJzZU1hdGVyaWFsIiwid2QuV0RQYXJzZXIuX2NyZWF0ZUNvbG9yIiwid2QuV0RPYmplY3RQYXJzZXIiLCJ3ZC5XRE9iamVjdFBhcnNlci5jb25zdHJ1Y3RvciIsIndkLldET2JqZWN0UGFyc2VyLmNyZWF0ZSIsIndkLldET2JqZWN0UGFyc2VyLnBhcnNlIiwid2QuV0RPYmplY3RQYXJzZXIuX2lzT2JqZWN0Q29udGFpbmVyIiwid2QuV0RPYmplY3RQYXJzZXIuX3BhcnNlRnJvbUluZGljZXMiLCJ3ZC5XRE9iamVjdFBhcnNlci5fZHVwbGljYXRlVmVydGV4V2l0aERpZmZlcmVudFV2cyIsIndkLldET2JqZWN0UGFyc2VyLl9pc1NhbWVWZXJ0ZXhXaXRoRGlmZmVyZW50VXZzQnlDb21wYXJlVG9GaXJzdE9uZSIsIndkLldET2JqZWN0UGFyc2VyLl9hZGRWZXJ0ZXhEYXRhIiwid2QuV0RPYmplY3RQYXJzZXIuX2FkZER1cGxpY2F0ZU5vcm1hbE9mQWRkZWRWZXJ0ZXgiLCJ3ZC5XRE9iamVjdFBhcnNlci5faXNVdkluZGljZUVxdWFsVGhlT25lT2ZBZGRlZFZlcnRleCIsIndkLldET2JqZWN0UGFyc2VyLl9nZXRWZXJ0aWNlSW5kZXhPZkFkZGVkVmVydGV4QnlGaW5kQ29udGFpbmVyIiwid2QuV0RPYmplY3RQYXJzZXIuX2dldFZlcnRpY2VJbmRleE9mQWRkZWRWZXJ0ZXgiLCJ3ZC5XRE9iamVjdFBhcnNlci5fYWRkVGhyZWVDb21wb25lbnQiLCJ3ZC5XRE9iamVjdFBhcnNlci5fcGFyc2VPYmplY3RGcm9tSW5kaWNlcyIsIndkLldET2JqZWN0UGFyc2VyLl9nZXRBbmltTmFtZSIsIndkLldET2JqZWN0UGFyc2VyLl9yZW1vdmVSZWJ1bmRhbnRJbmRpY2VEYXRhIiwid2QuV0RPYmplY3RQYXJzZXIuX3JlbW92ZU9iamVjdENvbnRhaW5lckRhdGEiLCJ3ZC5XRE9iamVjdFBhcnNlci5fZmluZERhdGEiLCJ3ZC5XRE9iamVjdFBhcnNlci5fc2V0VVYiLCJ3ZC5XRE9iamVjdFBhcnNlci5fc2V0VHdvQ29tcG9uZW50RGF0YSIsIndkLldET2JqZWN0UGFyc2VyLl9zZXRUaHJlZUNvbXBvbmVudERhdGEiLCJ3ZC5XRE9iamVjdFBhcnNlci5fZ2V0VGhyZWVDb21wb25lbnREYXRhIiwid2QuV0RPYmplY3RQYXJzZXIuX3NldE5vcm1hbCIsIndkLldET2JqZWN0UGFyc2VyLl9hZGROb3JtYWxEYXRhIiwid2QuV0RPYmplY3RQYXJzZXIuX3NldE1vcnBoVGFyZ2V0cyIsIndkLldEQnVpbGRlciIsIndkLldEQnVpbGRlci5jb25zdHJ1Y3RvciIsIndkLldEQnVpbGRlci5jcmVhdGUiLCJ3ZC5XREJ1aWxkZXIuYnVpbGQiLCJ3ZC5XREJ1aWxkZXIuX2J1aWxkTWV0YWRhdGEiLCJ3ZC5XREJ1aWxkZXIuX2J1aWxkU2NlbmUiLCJ3ZC5XREJ1aWxkZXIuX2J1aWxkTW9kZWxzIiwid2QuV0RCdWlsZGVyLl9pc01vZGVsQ29udGFpbmVyIiwid2QuV0RCdWlsZGVyLl9idWlsZE1hdGVyaWFsIiwid2QuRm9udExvYWRlciIsIndkLkZvbnRMb2FkZXIuY29uc3RydWN0b3IiLCJ3ZC5Gb250TG9hZGVyLmdldEluc3RhbmNlIiwid2QuRm9udExvYWRlci5kaXNwb3NlIiwid2QuRm9udExvYWRlci5sb2FkQXNzZXQiLCJ3ZC5Gb250TG9hZGVyLl9nZXRUeXBlIiwid2QuRm9udExvYWRlci5fYWRkU3R5bGVFbGVtZW50Iiwid2QuRm50UGFyc2VyIiwid2QuRm50UGFyc2VyLmNvbnN0cnVjdG9yIiwid2QuRm50UGFyc2VyLmNyZWF0ZSIsIndkLkZudFBhcnNlci5wYXJzZUZudCIsIndkLkZudFBhcnNlci5fcGFyc2VTdHJUb09iaiIsIndkLkZudFBhcnNlci5fcGFyc2VDaGFyIiwid2QuRm50TG9hZGVyIiwid2QuRm50TG9hZGVyLmNvbnN0cnVjdG9yIiwid2QuRm50TG9hZGVyLmdldEluc3RhbmNlIiwid2QuRm50TG9hZGVyLmxvYWRBc3NldCIsIndkLkRldmljZU1hbmFnZXIiLCJ3ZC5EZXZpY2VNYW5hZ2VyLmNvbnN0cnVjdG9yIiwid2QuRGV2aWNlTWFuYWdlci5nZXRJbnN0YW5jZSIsIndkLkRldmljZU1hbmFnZXIuc2Npc3NvclRlc3QiLCJ3ZC5EZXZpY2VNYW5hZ2VyLnNldFNjaXNzb3IiLCJ3ZC5EZXZpY2VNYW5hZ2VyLnNldFZpZXdwb3J0Iiwid2QuRGV2aWNlTWFuYWdlci5kZXB0aFRlc3QiLCJ3ZC5EZXZpY2VNYW5hZ2VyLmRlcHRoRnVuYyIsIndkLkRldmljZU1hbmFnZXIuc2lkZSIsIndkLkRldmljZU1hbmFnZXIucG9seWdvbk9mZnNldE1vZGUiLCJ3ZC5EZXZpY2VNYW5hZ2VyLmRlcHRoV3JpdGUiLCJ3ZC5EZXZpY2VNYW5hZ2VyLmJsZW5kIiwid2QuRGV2aWNlTWFuYWdlci5zZXRCbGVuZEZ1bmMiLCJ3ZC5EZXZpY2VNYW5hZ2VyLnNldEJsZW5kRXF1YXRpb24iLCJ3ZC5EZXZpY2VNYW5hZ2VyLnNldEJsZW5kRnVuY1NlcGFyYXRlIiwid2QuRGV2aWNlTWFuYWdlci5zZXRCbGVuZEVxdWF0aW9uU2VwYXJhdGUiLCJ3ZC5EZXZpY2VNYW5hZ2VyLnNldENvbG9yV3JpdGUiLCJ3ZC5EZXZpY2VNYW5hZ2VyLmNsZWFyIiwid2QuRGV2aWNlTWFuYWdlci5jcmVhdGVHTCIsIndkLkRldmljZU1hbmFnZXIuc2V0U2NyZWVuIiwid2QuRGVwdGhGdW5jdGlvbiIsIndkLlNpZGUiLCJ3ZC5Qb2x5Z29uT2Zmc2V0TW9kZSIsIndkLkJsZW5kRnVuYyIsIndkLkJsZW5kRXF1YXRpb24iLCJ3ZC5CbGVuZFR5cGUiLCJ3ZC5DYW52YXNUeXBlIiwid2QuR1BVRGV0ZWN0b3IiLCJ3ZC5HUFVEZXRlY3Rvci5jb25zdHJ1Y3RvciIsIndkLkdQVURldGVjdG9yLmdldEluc3RhbmNlIiwid2QuR1BVRGV0ZWN0b3IuZ2wiLCJ3ZC5HUFVEZXRlY3Rvci5kZXRlY3QiLCJ3ZC5HUFVEZXRlY3Rvci5fZGV0ZWN0RXh0ZW5zaW9uIiwid2QuR1BVRGV0ZWN0b3IuX2RldGVjdENhcGFiaWx0eSIsIndkLkdQVURldGVjdG9yLl9nZXRFeHRlbnNpb24iLCJ3ZC5HUFVEZXRlY3Rvci5fZ2V0TWF4QW5pc290cm9weSIsIndkLkdQVURldGVjdG9yLl9kZXRlY3RQcmVjaXNpb24iLCJ3ZC5HUFVQcmVjaXNpb24iLCJ3ZC5TY3JlZW5TaXplIiwid2QuUG9pbnQiLCJ3ZC5Qb2ludC5jb25zdHJ1Y3RvciIsIndkLlBvaW50LmNyZWF0ZSIsIndkLkZhY2UzIiwid2QuRmFjZTMuY29uc3RydWN0b3IiLCJ3ZC5GYWNlMy5jcmVhdGUiLCJ3ZC5GYWNlMy5mYWNlTm9ybWFsIiwid2QuRmFjZTMuaGFzRmFjZU5vcm1hbCIsIndkLkZhY2UzLmhhc1ZlcnRleE5vcm1hbCIsIndkLkZhY2UzLmNvcHkiLCJ3ZC5SZWN0UmVnaW9uIiwid2QuUmVjdFJlZ2lvbi5jb25zdHJ1Y3RvciIsIndkLlJlY3RSZWdpb24ud2lkdGgiLCJ3ZC5SZWN0UmVnaW9uLmhlaWdodCIsIndkLlJlY3RSZWdpb24uY29weSIsIndkLlJlY3RSZWdpb24uaXNOb3RFbXB0eSIsIndkLlZpZXdXZWJHTCIsIndkLlZpZXdXZWJHTC5jb25zdHJ1Y3RvciIsIndkLlZpZXdXZWJHTC5jcmVhdGUiLCJ3ZC5WaWV3V2ViR0wub2Zmc2V0Iiwid2QuVmlld1dlYkdMLmRvbSIsIndkLlZpZXdXZWJHTC53aWR0aCIsIndkLlZpZXdXZWJHTC5oZWlnaHQiLCJ3ZC5WaWV3V2ViR0wueCIsIndkLlZpZXdXZWJHTC55Iiwid2QuVmlld1dlYkdMLmdldENvbnRleHQiLCJ3ZC5Db2xvciIsIndkLkNvbG9yLmNvbnN0cnVjdG9yIiwid2QuQ29sb3IuY3JlYXRlIiwid2QuQ29sb3IuaW5pdFdoZW5DcmVhdGUiLCJ3ZC5Db2xvci50b1ZlY3RvcjMiLCJ3ZC5Db2xvci50b1ZlY3RvcjQiLCJ3ZC5Db2xvci50b1N0cmluZyIsIndkLkNvbG9yLl9zZXRDb2xvciIsIndkLkNvbG9yLl9nZXRDb2xvclZhbHVlIiwid2QuQ29sb3IuX3NldEhleCIsIndkLlRleHR1cmUiLCJ3ZC5UZXh0dXJlLmNvbnN0cnVjdG9yIiwid2QuVGV4dHVyZS5nZW9tZXRyeSIsIndkLlRleHR1cmUuYmluZFRvVW5pdCIsIndkLlRleHR1cmUuc2VuZERhdGEiLCJ3ZC5UZXh0dXJlLmRpc3Bvc2UiLCJ3ZC5UZXh0dXJlLmZpbHRlckZhbGxiYWNrIiwid2QuVGV4dHVyZS5zZW5kT3RoZXJEYXRhIiwid2QuVGV4dHVyZS5nZXRTYW1wbGVyTmFtZUJ5VmFyaWFibGVEYXRhIiwid2QuVGV4dHVyZS5nZXRTYW1wbGVyVHlwZSIsIndkLlRleHR1cmUuaXNTb3VyY2VQb3dlck9mVHdvIiwid2QuVGV4dHVyZS5zZXRUZXh0dXJlUGFyYW1ldGVycyIsIndkLlRleHR1cmVVdGlscyIsIndkLlRleHR1cmVVdGlscy5jb25zdHJ1Y3RvciIsIndkLlRleHR1cmVVdGlscy5pc1Bvd2VyT2ZUd28iLCJ3ZC5CYXNpY1RleHR1cmVVdGlscyIsIndkLkJhc2ljVGV4dHVyZVV0aWxzLmNvbnN0cnVjdG9yIiwid2QuQmFzaWNUZXh0dXJlVXRpbHMuaXNEcmF3UGFydE9mVGV4dHVyZSIsIndkLkJhc2ljVGV4dHVyZVV0aWxzLmRyYXdQYXJ0T2ZUZXh0dXJlQnlDYW52YXMiLCJ3ZC5CYXNpY1RleHR1cmVVdGlscy5pc1NvdXJjZVBvd2VyT2ZUd28iLCJ3ZC5CYXNpY1RleHR1cmVVdGlscy5uZWVkQ2xhbXBNYXhTaXplIiwid2QuQmFzaWNUZXh0dXJlVXRpbHMuY2xhbXBUb01heFNpemUiLCJ3ZC5SZW5kZXJUYXJnZXRUZXh0dXJlIiwid2QuUmVuZGVyVGFyZ2V0VGV4dHVyZS5jb25zdHJ1Y3RvciIsIndkLlJlbmRlclRhcmdldFRleHR1cmUuaW5pdCIsIndkLlJlbmRlclRhcmdldFRleHR1cmUuZ2V0UG9zaXRpb24iLCJ3ZC5SZW5kZXJUYXJnZXRUZXh0dXJlLnNldEVtcHR5VGV4dHVyZSIsIndkLlR3b0RSZW5kZXJUYXJnZXRUZXh0dXJlIiwid2QuVHdvRFJlbmRlclRhcmdldFRleHR1cmUuY29uc3RydWN0b3IiLCJ3ZC5Ud29EUmVuZGVyVGFyZ2V0VGV4dHVyZS5yZW5kZXJMaXN0Iiwid2QuVHdvRFJlbmRlclRhcmdldFRleHR1cmUuY3JlYXRlRW1wdHlUZXh0dXJlIiwid2QuU2hhZG93TWFwVGV4dHVyZVV0aWxzIiwid2QuU2hhZG93TWFwVGV4dHVyZVV0aWxzLmNvbnN0cnVjdG9yIiwid2QuU2hhZG93TWFwVGV4dHVyZVV0aWxzLnNldFRleHR1cmVQYXJhbWV0ZXJzIiwid2QuTWlycm9yVGV4dHVyZSIsIndkLk1pcnJvclRleHR1cmUuY29uc3RydWN0b3IiLCJ3ZC5NaXJyb3JUZXh0dXJlLmNyZWF0ZSIsIndkLk1pcnJvclRleHR1cmUuaW5pdCIsIndkLk1pcnJvclRleHR1cmUuZ2V0U2FtcGxlck5hbWUiLCJ3ZC5NaXJyb3JUZXh0dXJlLmdldFBsYW5lIiwid2QuVHdvRFNoYWRvd01hcFRleHR1cmUiLCJ3ZC5Ud29EU2hhZG93TWFwVGV4dHVyZS5jb25zdHJ1Y3RvciIsIndkLlR3b0RTaGFkb3dNYXBUZXh0dXJlLmNyZWF0ZSIsIndkLlR3b0RTaGFkb3dNYXBUZXh0dXJlLmdldFNhbXBsZXJOYW1lIiwid2QuVHdvRFNoYWRvd01hcFRleHR1cmUuc2V0VGV4dHVyZVBhcmFtZXRlcnMiLCJ3ZC5DdWJlbWFwUmVuZGVyVGFyZ2V0VGV4dHVyZSIsIndkLkN1YmVtYXBSZW5kZXJUYXJnZXRUZXh0dXJlLmNvbnN0cnVjdG9yIiwid2QuQ3ViZW1hcFJlbmRlclRhcmdldFRleHR1cmUuY3JlYXRlRW1wdHlUZXh0dXJlIiwid2QuQ3ViZW1hcFNoYWRvd01hcFRleHR1cmUiLCJ3ZC5DdWJlbWFwU2hhZG93TWFwVGV4dHVyZS5jb25zdHJ1Y3RvciIsIndkLkN1YmVtYXBTaGFkb3dNYXBUZXh0dXJlLmNyZWF0ZSIsIndkLkN1YmVtYXBTaGFkb3dNYXBUZXh0dXJlLmdldFNhbXBsZXJOYW1lIiwid2QuRHluYW1pY0N1YmVtYXBUZXh0dXJlIiwid2QuRHluYW1pY0N1YmVtYXBUZXh0dXJlLmNvbnN0cnVjdG9yIiwid2QuRHluYW1pY0N1YmVtYXBUZXh0dXJlLmNyZWF0ZSIsIndkLkR5bmFtaWNDdWJlbWFwVGV4dHVyZS5yZW5kZXJMaXN0Iiwid2QuRHluYW1pY0N1YmVtYXBUZXh0dXJlLmluaXQiLCJ3ZC5EeW5hbWljQ3ViZW1hcFRleHR1cmUuZ2V0U2FtcGxlck5hbWUiLCJ3ZC5CYXNpY1RleHR1cmUiLCJ3ZC5CYXNpY1RleHR1cmUuY29uc3RydWN0b3IiLCJ3ZC5CYXNpY1RleHR1cmUuc291cmNlUmVnaW9uTWV0aG9kIiwid2QuQmFzaWNUZXh0dXJlLmluaXRXaGVuQ3JlYXRlIiwid2QuQmFzaWNUZXh0dXJlLmluaXQiLCJ3ZC5CYXNpY1RleHR1cmUudXBkYXRlIiwid2QuQmFzaWNUZXh0dXJlLmdldFNhbXBsZXJOYW1lIiwid2QuQmFzaWNUZXh0dXJlLnNlbmRPdGhlckRhdGEiLCJ3ZC5CYXNpY1RleHR1cmUubmVlZENsYW1wTWF4U2l6ZSIsIndkLkJhc2ljVGV4dHVyZS5jbGFtcFRvTWF4U2l6ZSIsIndkLkJhc2ljVGV4dHVyZS5zZXRUZXh0dXJlUGFyYW1ldGVycyIsIndkLkJhc2ljVGV4dHVyZS5pc1NvdXJjZVBvd2VyT2ZUd28iLCJ3ZC5CYXNpY1RleHR1cmUuX3NldEFuaXNvdHJvcHkiLCJ3ZC5CYXNpY1RleHR1cmUuX2NvbnZlcnRTb3VyY2VSZWdpb25DYW52YXNNYXBUb1VWIiwid2QuQmFzaWNUZXh0dXJlLl9jb252ZXJ0U291cmNlUmVnaW9uVG9VViIsIndkLlR3b0RUZXh0dXJlIiwid2QuVHdvRFRleHR1cmUuY29uc3RydWN0b3IiLCJ3ZC5Ud29EVGV4dHVyZS5pbml0V2hlbkNyZWF0ZSIsIndkLkNvbW1vblRleHR1cmUiLCJ3ZC5Db21tb25UZXh0dXJlLmNvbnN0cnVjdG9yIiwid2QuQ29tbW9uVGV4dHVyZS5hbGxvY2F0ZVNvdXJjZVRvVGV4dHVyZSIsIndkLkltYWdlVGV4dHVyZSIsIndkLkltYWdlVGV4dHVyZS5jb25zdHJ1Y3RvciIsIndkLkltYWdlVGV4dHVyZS5jcmVhdGUiLCJ3ZC5JbWFnZVRleHR1cmUuaW5pdFdoZW5DcmVhdGUiLCJ3ZC5WaWRlb1RleHR1cmUiLCJ3ZC5WaWRlb1RleHR1cmUuY29uc3RydWN0b3IiLCJ3ZC5WaWRlb1RleHR1cmUuY3JlYXRlIiwid2QuVmlkZW9UZXh0dXJlLmluaXRXaGVuQ3JlYXRlIiwid2QuVmlkZW9UZXh0dXJlLmluaXQiLCJ3ZC5WaWRlb1RleHR1cmUuZGlzcG9zZSIsIndkLlZpZGVvVGV4dHVyZS5uZWVkQ2xhbXBNYXhTaXplIiwid2QuQ3ViZW1hcFRleHR1cmUiLCJ3ZC5DdWJlbWFwVGV4dHVyZS5jb25zdHJ1Y3RvciIsIndkLkN1YmVtYXBUZXh0dXJlLmNyZWF0ZSIsIndkLkN1YmVtYXBUZXh0dXJlLmluaXRXaGVuQ3JlYXRlIiwid2QuQ3ViZW1hcFRleHR1cmUuZ2V0U2FtcGxlck5hbWUiLCJ3ZC5DdWJlbWFwVGV4dHVyZS5zZW5kT3RoZXJEYXRhIiwid2QuQ3ViZW1hcFRleHR1cmUuYWxsb2NhdGVTb3VyY2VUb1RleHR1cmUiLCJ3ZC5DdWJlbWFwVGV4dHVyZS5uZWVkQ2xhbXBNYXhTaXplIiwid2QuQ3ViZW1hcFRleHR1cmUuaXNTb3VyY2VQb3dlck9mVHdvIiwid2QuQ3ViZW1hcFRleHR1cmUuY2xhbXBUb01heFNpemUiLCJ3ZC5DdWJlbWFwVGV4dHVyZS5faGFzTm9NaXBtYXBDb21wcmVzc2VkQXNzZXQiLCJ3ZC5DdWJlbWFwVGV4dHVyZS5faXNNaXBtYXBGaWx0ZXIiLCJ3ZC5DdWJlbWFwVGV4dHVyZS5fZ2V0UmVwcmVzZW50QXNzZXQiLCJ3ZC5DdWJlbWFwVGV4dHVyZS5fYXJlQXNzZXRzQWxsSW1hZ2VBc3NldHMiLCJ3ZC5DdWJlbWFwVGV4dHVyZS5fYXJlQXNzZXRzQWxsQ29tcHJlc3NlZEFzc2V0Iiwid2QuQ3ViZW1hcFRleHR1cmUuX2NyZWF0ZVRleHR1cmVzIiwid2QuQ3ViZW1hcFRleHR1cmUuX2FyZVRleHR1cmVTaXpPZkFsbEZhY2VzZUVxdWFsIiwid2QuQ3ViZW1hcFRleHR1cmUuX2hhc1NvdXJjZVJlZ2lvbiIsIndkLkN1YmVtYXBUZXh0dXJlLl9hcmVBbGxFbGVtZW50c0VxdWFsIiwid2QuQ3ViZW1hcEZhY2VUZXh0dXJlIiwid2QuQ3ViZW1hcEZhY2VUZXh0dXJlLmNvbnN0cnVjdG9yIiwid2QuQ3ViZW1hcEZhY2VJbWFnZVRleHR1cmUiLCJ3ZC5DdWJlbWFwRmFjZUltYWdlVGV4dHVyZS5jb25zdHJ1Y3RvciIsIndkLkN1YmVtYXBGYWNlSW1hZ2VUZXh0dXJlLmNyZWF0ZSIsIndkLkN1YmVtYXBGYWNlSW1hZ2VUZXh0dXJlLnNvdXJjZVJlZ2lvbk1ldGhvZCIsIndkLkN1YmVtYXBGYWNlSW1hZ2VUZXh0dXJlLmluaXRXaGVuQ3JlYXRlIiwid2QuQ3ViZW1hcEZhY2VJbWFnZVRleHR1cmUuaXNTb3VyY2VQb3dlck9mVHdvIiwid2QuQ3ViZW1hcEZhY2VJbWFnZVRleHR1cmUubmVlZENsYW1wTWF4U2l6ZSIsIndkLkN1YmVtYXBGYWNlSW1hZ2VUZXh0dXJlLmNsYW1wVG9NYXhTaXplIiwid2QuQ3ViZW1hcEZhY2VJbWFnZVRleHR1cmUuZHJhdyIsIndkLkN1YmVtYXBGYWNlQ29tcHJlc3NlZFRleHR1cmUiLCJ3ZC5DdWJlbWFwRmFjZUNvbXByZXNzZWRUZXh0dXJlLmNvbnN0cnVjdG9yIiwid2QuQ3ViZW1hcEZhY2VDb21wcmVzc2VkVGV4dHVyZS5jcmVhdGUiLCJ3ZC5DdWJlbWFwRmFjZUNvbXByZXNzZWRUZXh0dXJlLmluaXRXaGVuQ3JlYXRlIiwid2QuQ3ViZW1hcEZhY2VDb21wcmVzc2VkVGV4dHVyZS5pc1NvdXJjZVBvd2VyT2ZUd28iLCJ3ZC5DdWJlbWFwRmFjZUNvbXByZXNzZWRUZXh0dXJlLm5lZWRDbGFtcE1heFNpemUiLCJ3ZC5DdWJlbWFwRmFjZUNvbXByZXNzZWRUZXh0dXJlLmNsYW1wVG9NYXhTaXplIiwid2QuQ3ViZW1hcEZhY2VDb21wcmVzc2VkVGV4dHVyZS5kcmF3Iiwid2QuQ29tcHJlc3NlZFRleHR1cmUiLCJ3ZC5Db21wcmVzc2VkVGV4dHVyZS5jb25zdHJ1Y3RvciIsIndkLkNvbXByZXNzZWRUZXh0dXJlLmNyZWF0ZSIsIndkLkNvbXByZXNzZWRUZXh0dXJlLnNvdXJjZVJlZ2lvbk1ldGhvZCIsIndkLkNvbXByZXNzZWRUZXh0dXJlLmFsbG9jYXRlU291cmNlVG9UZXh0dXJlIiwid2QuQ29tcHJlc3NlZFRleHR1cmUubmVlZENsYW1wTWF4U2l6ZSIsIndkLkRyYXdUZXh0dXJlQ29tbWFuZCIsIndkLkRyYXdUZXh0dXJlQ29tbWFuZC5jb25zdHJ1Y3RvciIsIndkLkRyYXdUZXh0dXJlQ29tbWFuZC5nZXREcmF3VGFyZ2V0Iiwid2QuRHJhd0NvbXByZXNzZWRUZXh0dXJlQ29tbWFuZCIsIndkLkRyYXdDb21wcmVzc2VkVGV4dHVyZUNvbW1hbmQuY29uc3RydWN0b3IiLCJ3ZC5EcmF3Q29tcHJlc3NlZFRleHR1cmVDb21tYW5kLmNyZWF0ZSIsIndkLkRyYXdDb21wcmVzc2VkVGV4dHVyZUNvbW1hbmQuZXhlY3V0ZSIsIndkLkRyYXdUd29EVGV4dHVyZUNvbW1hbmQiLCJ3ZC5EcmF3VHdvRFRleHR1cmVDb21tYW5kLmNvbnN0cnVjdG9yIiwid2QuRHJhd1R3b0RUZXh0dXJlQ29tbWFuZC5kcmF3VGV4dHVyZSIsIndkLkRyYXdNaXBtYXBUd29EVGV4dHVyZUNvbW1hbmQiLCJ3ZC5EcmF3TWlwbWFwVHdvRFRleHR1cmVDb21tYW5kLmNvbnN0cnVjdG9yIiwid2QuRHJhd01pcG1hcFR3b0RUZXh0dXJlQ29tbWFuZC5jcmVhdGUiLCJ3ZC5EcmF3TWlwbWFwVHdvRFRleHR1cmVDb21tYW5kLmV4ZWN1dGUiLCJ3ZC5EcmF3Tm9NaXBtYXBUd29EVGV4dHVyZUNvbW1hbmQiLCJ3ZC5EcmF3Tm9NaXBtYXBUd29EVGV4dHVyZUNvbW1hbmQuY29uc3RydWN0b3IiLCJ3ZC5EcmF3Tm9NaXBtYXBUd29EVGV4dHVyZUNvbW1hbmQuY3JlYXRlIiwid2QuRHJhd05vTWlwbWFwVHdvRFRleHR1cmVDb21tYW5kLmV4ZWN1dGUiLCJ3ZC5WaWRlbyIsIndkLlZpZGVvLmNvbnN0cnVjdG9yIiwid2QuVmlkZW8uY3JlYXRlIiwid2QuVmlkZW8uaW5pdFdoZW5DcmVhdGUiLCJ3ZC5WaWRlby5wbGF5Iiwid2QuVmlkZW8uX2dldENhblBsYXlVcmwiLCJ3ZC5WaWRlby5fY2FucGxheSIsIndkLlZpZGVvLl9iaW5kRXZlbnQiLCJ3ZC5WaWRlb01hbmFnZXIiLCJ3ZC5WaWRlb01hbmFnZXIuY29uc3RydWN0b3IiLCJ3ZC5WaWRlb01hbmFnZXIuZ2V0SW5zdGFuY2UiLCJ3ZC5WaWRlb01hbmFnZXIucGxheSIsIndkLlNoYWRlckNodW5rIiwid2QuU2hhZGVyQ2h1bmsuY29uc3RydWN0b3IiXSwibWFwcGluZ3MiOiJBQUFBLElBQU8sRUFBRSxDQU1SO0FBTkQsV0FBTyxFQUFFLEVBQUEsQ0FBQztJQUNLQSxjQUFXQSxHQUFHQTtRQUNyQkEsTUFBTUEsRUFBQ0EsS0FBS0E7UUFDWkEsY0FBY0EsRUFBQ0EsS0FBS0E7UUFDcEJBLGNBQWNBLEVBQUVBLEtBQUtBO0tBQ3hCQSxDQUFBQTtBQUNMQSxDQUFDQSxFQU5NLEVBQUUsS0FBRixFQUFFLFFBTVI7QUNORCxJQUFPLEVBQUUsQ0F1RFI7QUF2REQsV0FBTyxFQUFFLEVBQUEsQ0FBQztJQUVOQTtRQUFBQztRQW9EQUMsQ0FBQ0E7UUF0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Q0E7WUFDWEEsSUFBSUEsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7UUFDZkEsQ0FBQ0E7UUFFTUwscUJBQUdBLEdBQVZBLFVBQVdBLENBQVNBO1lBQ2hCTSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUM5Q0EsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFFOUNBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBO1FBQ2hCQSxDQUFDQTtRQUVNTixxQkFBR0EsR0FBVkEsVUFBV0EsQ0FBU0E7WUFDaEJPLElBQUlBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1lBQzlDQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUU5Q0EsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0E7UUFDaEJBLENBQUNBO1FBRU1QLHNCQUFJQSxHQUFYQTtZQUNJUSxNQUFNQSxDQUFDQSxPQUFPQSxDQUFDQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQSxFQUFFQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUMxQ0EsQ0FBQ0E7UUFDTFIsY0FBQ0E7SUFBREEsQ0FsRUExQixBQWtFQzBC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QSxJQUFJQSxDQUFDQSxJQUFJQSxDQUNiQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUMxQ0EsQ0FBQ0E7WUFFRkEsRUFBRUEsQ0FBQUEsQ0FBQ0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsQ0FBQ0EsQ0FBQUEsQ0FBQ0E7Z0JBQ1JBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO2dCQUNUQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtnQkFDVEEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7Z0JBQ1RBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBO1lBQ2hCQSxDQUFDQTtZQUVEQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtZQUNoQkEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7WUFDaEJBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO1lBSWhCQSxFQUFFQSxDQUFBQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxLQUFLQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFBQSxDQUFDQTtnQkFDWkEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7WUFDYkEsQ0FBQ0E7WUFDREEsRUFBRUEsQ0FBQUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsS0FBS0Es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QSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFDYkEsSUFBSUEsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBQ2JBLElBQUlBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1lBQ2pCQSxDQUFDQTtRQUNMQSxDQUFDQTtRQUVNVCxxQkFBR0EsR0FBVkEsVUFBV0EsQ0FBU0E7WUFDaEJVLElBQUlBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1lBQzlDQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUM5Q0EsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFFOUNBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBO1FBQ2hCQSxDQUFDQTtRQUVNVixzQkFBSUEsR0FBWEEsVUFBWUEsRUFBVUEsRUFBRUEsRUFBVUE7WUFDOUJXLElBQUlBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLEVBQUVBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLEVBQUVBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1lBQzdDQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxFQUFFQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxFQUFFQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUM3Q0EsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsRUFBRUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsRUFBRUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFFN0NBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBO1FBQ2hCQSxDQUFDQTtRQUVNWCxxQkFBR0EsR0FBVkEsVUFBV0EsQ0FBU0E7WUFDaEJZLElBQUlBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1lBQzlDQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUM5Q0EsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFFOUNBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBO1FBQ2hCQSxDQUFDQTtRQUVNWixzQkFBSUEsR0FBWEEsVUFBWUEsRUFBVUEsRUFBRUEsRUFBVUE7WUFDOUJhLElBQUlBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLEVBQUVBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLEVBQUVBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1lBQzdDQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxFQUFFQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxFQUFFQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUM3Q0EsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsRUFBRUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsRUFBRUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFFN0NBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBO1FBQ2hCQSxDQUFDQTtRQUVNYixxQkFBR0EsR0FBVkEsVUFBV0EsQ0FBU0E7WUFDaEJjLElBQUlBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1lBQzlDQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUM5Q0EsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBSUEsQ0FBQ0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFFL0NBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBO1FBQ2hCQSxDQUFDQTtRQUVNZCxzQkFBSUEsR0FBWEEsVUFBWUEsRUFBVUEsRUFBRUEsRUFBVUE7WUFDOUJlLElBQUlBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLEVBQUVBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBLENBQUNB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QUNBO1lBRXBDQSxDQUFDQSxHQUFHQSxHQUFHQSxDQUFDQSxNQUFNQSxDQUFDQTtZQUNmQSxDQUFDQSxHQUFHQSxHQUFHQSxDQUFDQSxNQUFNQSxDQUFDQTtZQUNmQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQTtZQUVoQkEsRUFBRUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDVkEsRUFBRUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDVkEsRUFBRUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDVkEsRUFBRUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDVkEsRUFBRUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDVkEsRUFBRUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFFVkEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsRUFBRUEsR0FBR0EsRUFBRUEsR0FBR0EsRUFBRUEsR0FBR0EsRUFBRUEsQ0FBQ0E7WUFDekJBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLEVBQUVBLEdBQUdBLEVBQUVBLEdBQUdBLEVBQUVBLEdBQUdBLEVBQUVBLENBQUNBO1lBQ3pCQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxFQUFFQSxHQUFHQSxFQUFFQSxHQUFHQSxFQUFFQSxHQUFHQSxFQUFFQSxDQUFDQTtZQUV6QkEsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0E7UUFDaEJBLENBQUNBO1FBcUJNcEIsc0JBQUlBLEdBQVhBLFVBQVlBLEdBQVdBLEVBQUVBLEdBQVdBLEVBQUVBLEtBQVlBO1lBQzlDcUIsSUFBSUEsQ0FBQ0EsR0FBR0EsR0FBR0EsQ0FBQ0EsTUFBTUEsRUFDZEEsQ0FBQ0EsR0FBR0EsR0FBR0EsQ0FBQ0EsTUFBTUEsRUFDZEEsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0E7WUFFcEJBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLEtBQUtBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1lBQ3BDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxLQUFLQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUNwQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsS0FBS0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFFcENBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBO1FBQ2hCQSxDQUFDQTtRQWNNckIscUJBQUdBLEdBQVZBLFVBQVdBLEdBQUdBO1lBQ1ZzQixJQUFJQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQSxNQUFNQSxFQUNmQSxDQUFDQSxHQUFHQSxHQUFHQSxDQUFDQSxNQUFNQSxDQUFDQTtZQUVuQkEsTUFBTUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDbkRBLENBQUNBO1FBRU10QixxQkFBR0EsR0FBVkEsVUFBV0EsQ0FBU0E7WUFDaEJ1QixFQUFFQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFDZkEsSUFBSUEsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDakJBLENBQUNBO1lBQ0RBLEVBQUVBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO2dCQUNmQSxJQUFJQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUNqQkEsQ0FBQ0E7WUFDREEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBQ2ZBLElBQUlBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1lBQ2pCQSxDQUFDQTtZQUVEQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQTtRQUVoQkEsQ0FBQ0E7UUFFTXZCLHFCQUFHQSxHQUFWQSxVQUFXQSxDQUFTQTtZQUNoQndCLEVBQUVBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO2dCQUNmQSxJQUFJQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUNqQkEsQ0FBQ0E7WUFDREEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBQ2ZBLElBQUlBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1lBQ2pCQSxDQUFDQTtZQUNEQSxFQUFFQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFDZkEsSUFBSUEsQ0FBQ0EsQ0FB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QUdBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO1lBQUdBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLEdBQUlBLENBQUNBLENBQUNBO1lBQUdBLENBQUNBLENBQUNBLEVBQUVBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO1lBQy9DQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtZQUFHQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtZQUFHQSxDQUFDQSxDQUFDQSxFQUFFQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtZQUFHQSxDQUFDQSxDQUFDQSxFQUFFQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtZQUMvQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7WUFBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7WUFBR0EsQ0FBQ0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7WUFBR0EsQ0FBQ0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7WUFDL0NBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBO1FBQ2hCQSxDQUFDQTtRQU9NTCx3QkFBTUEsR0FBYkE7WUFDSU0sSUFBSUEsR0FBR0EsRUFBRUEsR0FBR0EsRUFBRUEsR0FBR0EsRUFBRUEsR0FBR0EsRUFDbEJBLEdBQUdBLEVBQUVBLEdBQUdBLEVBQUVBLEdBQUdBLEVBQUVBLEdBQUdBLEVBQ2xCQSxHQUFHQSxFQUFFQSxHQUFHQSxFQUFFQSxHQUFHQSxFQUFFQSxHQUFHQSxFQUNsQkEsR0FBR0EsRUFBRUEsR0FBR0EsRUFBRUEsR0FBR0EsRUFBRUEsR0FBR0EsRUFDbEJBLEdBQUdBLEVBQUVBLEdBQUdBLEVBQUVBLEdBQUdBLEVBQUVBLEdBQUdBLEVBQ2xCQSxHQUFHQSxFQUFFQSxHQUFHQSxFQUFFQSxHQUFHQSxFQUFFQSxHQUFHQSxFQUNsQkEsR0FBR0EsRUFBRUEsR0FBR0EsRUFBRUEsR0FBR0EsRUFBRUEsR0FBR0EsRUFDbEJBLE1BQU1BLEVBQUVBLENBQUNBLENBQUNBO1lBRWRBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLE1BQU1BLENBQUNBO1lBQ2hCQSxHQUFHQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUNYQSxHQUFHQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUNYQSxHQUFHQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUNYQSxHQUFHQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUNYQSxHQUFHQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUNYQSxHQUFHQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUNYQSxHQUFHQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUNYQSxHQUFHQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUNYQSxHQUFHQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUNYQSxHQUFHQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUNYQSxHQUFHQSxHQUFHQSxDQUFDQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQTtZQUNaQSxHQUFHQSxHQUFHQSxDQUFDQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQTtZQUNaQSxHQUFHQSxHQUFHQSxDQUFDQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQTtZQUNaQSxHQUFHQSxHQUFHQSxDQUFDQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQTtZQUNaQSxHQUFHQSxHQUFHQSxDQUFDQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQTtZQUNaQSxHQUFHQSxHQUFHQSxDQUFDQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQTtZQUVaQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxDQUFDQTtZQUM1QkEsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsQ0FBQ0E7WUFDNUJBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLENBQUNBO1lBQzVCQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxDQUFDQTtZQUM1QkEsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsQ0FBQ0E7WUFDNUJBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLENBQUNBO1lBQzVCQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxDQUFDQTtZQUM1QkEsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsQ0FBQ0E7WUFDNUJBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLENBQUNBO1lBQzVCQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxDQUFDQTtZQUM1QkEsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsQ0FBQ0E7WUFDNUJBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLENBQUNBO1lBRTVCQSxNQUFNQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxDQUFDQSxDQUFDQTtZQUVyRkEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsQ0FBQ0EsR0FBR0EsTUFBTUEsQ0FBQ0E7WUFDcERBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLENBQUNBLEdBQUdBLE1BQU1BLENBQUNBO1lBQ3JEQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxDQUFDQSxHQUFHQSxNQUFNQSxDQUFDQTtZQUNwREEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsQ0FBQ0EsR0FBR0EsTUFBTUEsQ0FBQ0E7WUFDckRBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLENBQUNBLEdBQUdBLE1BQU1BLENBQUNBO1lBQ3JEQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxDQUFDQSxHQUFHQSxNQUFNQSxDQUFDQTtZQUNwREEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsQ0FBQ0EsR0FBR0EsTUFBTUEsQ0FBQ0E7WUFDckRBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLENBQUNBLEdBQUdBLE1BQU1BLENBQUNBO1lBQ3BEQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxDQUFDQSxHQUFHQSxNQUFNQSxDQUFDQTtZQUNwREEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsQ0FBQ0EsR0FBR0EsTUFBTUEsQ0FBQ0E7WUFDckRBLENBQUNBLENBQUNBLEVBQUVBLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLENBQUNBLEdBQUdBLE1BQU1BLENBQUNBO1lBQ3JEQSxDQUFDQSxDQUFDQSxFQUFFQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxDQUFDQSxHQUFHQSxNQUFNQSxDQUFDQTtZQUN0REEsQ0FBQ0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsQ0FBQ0EsR0FBR0EsTUFBTUEsQ0FBQ0E7WUFDdERBLENBQUNBLENBQUNBLEVBQUVBLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLENBQUNBLEdBQUdBLE1BQU1BLENBQUNBO1lBQ3JEQSxDQUFDQSxDQUFDQSxFQUFFQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxDQUFDQSxHQUFHQSxNQUFNQSxDQUFDQTtZQUN0REEsQ0FBQ0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsQ0FBQ0EsR0FBR0EsTUFBTUEsQ0FBQ0E7WUFFckRBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBO1FBQ2hCQSxDQUFDQTtRQUVNTiw2QkFBV0EsR0FBbEJBO1lBQ0FPLElBQUlBLEdBQUdBLEVBQUVBLEdBQUdBLEVBQUVBLEdBQUdBLEVBQUVBLEdBQUdBLEVBQUVBLEdBQUdBLEVBQUVBLEdBQUdBLEVBQUVBLEdBQUdBLEVBQUVBLEdBQUdBLEVBQUVBLEdBQUdBLEVBQzNDQSxDQUFDQSxFQUFFQSxDQUFDQSxFQUFFQSxHQUFHQSxFQUFFQSxJQUFJQSxDQUFDQTtZQUNoQkEsSUFBSUEsSUFBSUEsR0FBR0EsVUFBT0EsQ0FBQ0EsTUFBTUEsRUFBRUEsQ0FBQ0E7WUFFaENBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLE1BQU1BLENBQUNBO1lBRWhCQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQTtZQUVoQkEsR0FBR0EsR0FBSUEsQ0FBQ0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDbENBLEdBQUdBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBLEVBQUVBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1lBQ2xDQSxHQUFHQSxHQUFJQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFJQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUNsQ0EsR0FBR0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDbENBLEdBQUdBLEdBQUlBLENBQUNBLENBQUNBLEVBQUVBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1lBQ2xDQSxHQUFHQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFJQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUNsQ0EsR0FBR0EsR0FBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDbENBLEdBQUdBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLEdBQUlBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1lBQ2xDQSxHQUFHQSxHQUFJQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFJQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUVsQ0EsR0FBR0EsR0FBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsR0FBR0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsR0FBR0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsR0FBR0EsQ0FBQ0E7WUFDNUNBLEVBQUVBLENBQUNBLENBQUNBLEdBQUdBLEtBQUtBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO2dCQUNSQSxNQUFHQSxDQUFDQSxJQUFJQSxDQUFDQSx1Q0FBdUNBLENBQUNBLENBQUNBO2dCQUV0REEsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0E7WUFDaEJBLENBQUNBO1lBRURBLElBQUlBLEdBQUdBLENBQUNBLEdBQUdBLEdBQUdBLENBQUNBO1lBRWZBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLElBQUlBLEdBQUdBLEdBQUdBLENBQUNBO1lBQ2xCQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxJQUFJQSxHQUFHQSxHQUFHQSxDQUFDQTtZQUNsQkEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsSUFBSUEsR0FBR0EsR0FBR0EsQ0FBQ0E7WUFDbEJBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLElBQUlBLEdBQUdBLEdBQUdBLENBQUNBO1lBQ2xCQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxJQUFJQSxHQUFHQSxHQUFHQSxDQUFDQTtZQUNsQkEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsSUFBSUEsR0FBR0EsR0FBR0EsQ0FBQ0E7WUFDbEJBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLElBQUlBLEdBQUdBLEdBQUdBLENBQUNBO1lBQ2xCQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxJQUFJQSxHQUFHQSxHQUFHQSxDQUFDQTtZQUNsQkEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsSUFBSUEsR0FBR0EsR0FBR0EsQ0FBQ0E7WUFFbEJBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBO1FBQ2hCQSxDQUFDQTtRQU1VUCwyQkFBU0EsR0FBaEJBO1lBQ0lRLElBQUlBLEVBQUVBLEdBQUdBLElBQUlBLENBQUNBLE1BQU1BLENBQUNBO1lBQ3JCQSxJQUFJQSxHQUFHQSxDQUFDQTtZQUVSQSxHQUFHQSxHQUFHQSxFQUFFQSxDQUFFQSxDQUFDQSxDQUFFQSxDQUFDQTtZQUFDQSxFQUFFQSxDQUFFQSxDQUFDQSxDQUFFQSxHQUFHQSxFQUFFQSxDQUFFQSxDQUFDQSxDQUFFQSxDQUFDQTtZQUFDQSxFQUFFQSxDQUFFQSxDQUFDQSxDQUFFQSxHQUFHQSxHQUFHQSxDQUFDQTtZQUNoREEsR0FBR0EsR0FBR0EsRUFBRUEsQ0FBRUEsQ0FBQ0EsQ0FBRUEsQ0FBQ0E7WUFBQ0EsRUFBRUEsQ0FBRUEsQ0FBQ0EsQ0FBRUEsR0FBR0EsRUFBRUEsQ0FBRUEsQ0FBQ0EsQ0FBRUEsQ0FBQ0E7WUFBQ0EsRUFBRUEsQ0FBRUEsQ0FBQ0EsQ0FBRUEsR0FBR0EsR0FBR0EsQ0FBQ0E7WUFDaERBLEdBQUdBLEdBQUdBLEVBQUVBLENBQUVBLENBQUNBLENBQUVBLENBQUNBO1lBQUNBLEVBQUVBLENBQUVBLENBQUNBLENBQUVBLEdBQUdBLEVBQUVBLENBQUVBLENBQUNBLENBQUVBLENBQUNBO1lBQUNBLEVBQUVBLENBQUVBLENBQUNBLENBQUVBLEdBQUdBLEdBQUdBLENBQUNBO1lBRWhEQSxHQUFHQSxHQUFHQSxFQUFFQSxDQUFFQSxDQUFDQSxDQUFFQSxDQUFDQTtZQUFDQSxFQUFFQSxDQUFFQSxDQUFDQSxDQUFFQSxHQUFHQSxFQUFFQSxDQUFFQSxFQUFFQSxDQUFFQSxDQUFDQTtZQUFDQSxFQUFFQSxDQUFFQSxFQUFFQSxDQUFFQSxHQUFHQSxHQUFHQSxDQUFDQTtZQUNsREEsR0FBR0EsR0FBR0EsRUFBRUEsQ0FBRUEsQ0FBQ0EsQ0FBRUEsQ0FBQ0E7WUFBQ0EsRUFBRUEsQ0FBRUEsQ0FBQ0EsQ0FBRUEsR0FBR0EsRUFBRUEsQ0FBRUEsRUFBRUEsQ0FBRUEsQ0FBQ0E7WUFBQ0EsRUFBRUEsQ0FBRUEsRUFBRUEsQ0FBRUEsR0FBR0EsR0FBR0EsQ0FBQ0E7WUFDbERBLEdBQUdBLEdBQUdBLEVBQUVBLENBQUVBLEVBQUVBLENBQUVBLENBQUNBO1lBQUNBLEVBQUVBLENBQUVBLEVBQUVBLENBQUVBLEdBQUdBLEVBQUVBLENBQUVBLEVBQUVBLENBQUVBLENBQUNBO1lBQUNBLEVBQUVBLENBQUVBLEVBQUVBLENBQUVBLEdBQUdBLEdBQUdBLENBQUNBO1lBRXBEQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQTtRQUNoQkEsQ0FBQ0E7UUFTTVIsOEJBQVlBLEdBQW5CQSxVQUFxQkEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsRUFBRUEsQ0FBQ0E7WUFDeEJTLElBQUlBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLE1BQU1BLENBQUNBO1lBQ3BCQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtZQUFFQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtZQUFFQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFJQSxDQUFDQSxDQUFDQTtZQUFFQSxDQUFDQSxDQUFDQSxFQUFFQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtZQUM1Q0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7WUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7WUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBSUEsQ0FBQ0EsQ0FBQ0E7WUFBRUEsQ0FBQ0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7WUFDNUNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO1lBQUVBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO1lBQUVBLENBQUNBLENBQUNBLEVBQUVBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO1lBQUVBLENBQUNBLENBQUNBLEVBQUVBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO1lBQzVDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtZQUFFQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtZQUFFQSxDQUFDQSxDQUFDQSxFQUFFQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtZQUFFQSxDQUFDQSxDQUFDQSxFQUFFQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtZQUM1Q0EsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0E7UUFDaEJBLENBQUNBO1FBU01ULDJCQUFTQSxHQUFoQkEsVUFBa0JBLENBQUNBLEVBQUVBLENBQUNBLEVBQUVBLENBQUNBO1lBQ3JCVSxJQUFJQSxDQUFDQSxXQUFXQSxDQUFDQSxPQUFPQSxDQUFDQSxNQUFNQSxFQUFFQSxDQUFDQSxZQUFZQSxDQUFDQSxDQUFDQSxFQUFFQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUV6REEsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0E7UUFDaEJBLENBQUNBO1FBV01WLDJCQUFTQSxHQUFoQkEsVUFBa0JBLEtBQWFBLEVBQUVBLENBQVNBLEVBQUVBLENBQVNBLEVBQUVBLENBQVFBO1lBQzNEVyxJQUFJQSxDQUFDQSxFQUFFQSxDQUFDQSxFQUFFQSxDQUFDQSxFQUFFQSxHQUFHQSxFQUFFQSxJQUFJQSxFQUFFQSxFQUFFQSxFQUFFQSxFQUFFQSxFQUFFQSxFQUFFQSxFQUFFQSxFQUFFQSxFQUFFQSxFQUFFQSxFQUFFQSxFQUFFQSxFQUFFQSxFQUFFQSxDQUFDQTtZQUVuREEsSUFBSUEsS0FBS0EsR0FBR0EsSUFBSUEsQ0FBQ0EsRUFBRUEsR0FBR0EsS0FBS0EsR0FBR0EsR0FBR0EsQ0FBQ0E7WUFDbENBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLE1BQU1BLENBQUNBO1lBRWhCQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQSxHQUFHQSxDQUFDQSxLQUFLQSxDQUFDQSxDQUFDQTtZQUNwQkEsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsQ0FBQ0E7WUFFcEJBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBLEtBQUtBLENBQUNBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO2dCQUVoQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7b0JBQ1JBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBO2dCQUNYQSxDQUFDQTtnQkFDREEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7Z0JBQUVBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO2dCQUFFQSxDQUFDQSxDQUFFQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtnQkFBRUEsQ0FBQ0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7Z0JBQzVDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtnQkFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7Z0JBQUVBLENBQUNBLENBQUVBLENBQUNBLENBQUNBLEdBQUVBLENBQUNBLENBQUNBLENBQUNBO2dCQUFFQSxDQUFDQSxDQUFDQSxFQUFFQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtnQkFDNUNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO2dCQUFFQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtnQkFBRUEsQ0FBQ0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7Z0JBQUVBLENBQUNBLENBQUNBLEVBQUVBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO2dCQUM1Q0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7Z0JBQUVBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO2dCQUFFQSxDQUFDQSxDQUFDQSxFQUFFQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtnQkFBRUEsQ0FBQ0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7WUFDaERBLENBQUNBO1lBQUNBLElBQUlBLENBQUNBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBLEtBQUtBLENBQUNBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO2dCQUV2Q0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7b0JBQ1JBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBO2dCQUNYQSxDQUFDQTtnQkFDREEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7Z0JBQUVBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO2dCQUFFQSxDQUFDQSxDQUFFQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtnQkFBRUEsQ0FBQ0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7Z0JBQzVDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtnQkFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7Z0JBQUVBLENBQUNBLENBQUVBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO2dCQUFFQSxDQUFDQSxDQUFDQSxFQUFFQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtnQkFDNUNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLEdBQUVBLENBQUNBLENBQUNBLENBQUNBO2dCQUFFQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtnQkFBRUEsQ0FBQ0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7Z0JBQUVBLENBQUNBLENBQUNBLEVBQUVBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO2dCQUM1Q0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7Z0JBQUVBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO2dCQUFFQSxDQUFDQSxDQUFDQSxFQUFFQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtnQkFBRUEsQ0FBQ0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7WUFDaERBLENBQUNBO1lBQUNBLElBQUlBLENBQUNBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBLEtBQUtBLENBQUNBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO2dCQUV2Q0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7b0JBQ1JBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBO2dCQUNYQSxDQUFDQTtnQkFDREEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7Z0JBQUVBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLEdBQUVBLENBQUNBLENBQUNBLENBQUNBO2dCQUFFQSxDQUFDQSxDQUFFQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtnQkFBRUEsQ0FBQ0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7Z0JBQzVDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtnQkFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7Z0JBQUVBLENBQUNBLENBQUVBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO2dCQUFFQSxDQUFDQSxDQUFDQSxFQUFFQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtnQkFDNUNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO2dCQUFFQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtnQkFBRUEsQ0FBQ0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7Z0JBQUVBLENBQUNBLENBQUNBLEVBQUVBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO2dCQUM1Q0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7Z0JBQUVBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO2dCQUFFQSxDQUFDQSxDQUFDQSxFQUFFQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtnQkFBRUEsQ0FBQ0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7WUFDaERBLENBQUNBO1lBQUNBLElBQUlBLENBQUNBLENBQUNBO2dCQUVKQSxHQUFHQSxHQUFHQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQSxHQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFDakNBLEVBQUVBLENBQUNBLENBQUNBLEdBQUdBLEtBQUtBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO29CQUVaQSxJQUFJQSxHQUFHQSxDQUFDQSxHQUFHQSxHQUFHQSxDQUFDQTtvQkFDZkEsQ0FBQ0EsSUFBSUEsSUFBSUEsQ0FBQ0E7b0JBQ1ZBLENBQUNBLElBQUlBLElBQUlBLENBQUNBO29CQUNWQSxDQUFDQSxJQUFJQSxJQUFJQSxDQUFDQTtnQkFDZEEsQ0FBQ0E7Z0JBRURBLEVBQUVBLEdBQUdBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO2dCQUNYQSxFQUFFQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtnQkFDWEEsRUFBRUEsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7Z0JBQ1hBLEVBQUVBLEdBQUdBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO2dCQUNYQSxFQUFFQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtnQkFDWEEsRUFBRUEsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7Z0JBQ1hBLEVBQUVBLEdBQUdBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO2dCQUVYQSxDQUFDQSxDQUFFQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFDQSxDQUFDQSxHQUFDQSxFQUFFQSxHQUFJQSxDQUFDQSxDQUFDQTtnQkFDcEJBLENBQUNBLENBQUVBLENBQUNBLENBQUNBLEdBQUdBLEVBQUVBLEdBQUVBLEVBQUVBLEdBQUdBLEVBQUVBLENBQUNBO2dCQUNwQkEsQ0FBQ0EsQ0FBRUEsQ0FBQ0EsQ0FBQ0EsR0FBR0EsRUFBRUEsR0FBRUEsRUFBRUEsR0FBR0EsRUFBRUEsQ0FBQ0E7Z0JBQ3BCQSxDQUFDQSxDQUFFQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtnQkFFVkEsQ0FBQ0EsQ0FBRUEsQ0FBQ0EsQ0FBQ0EsR0FBR0EsRUFBRUEsR0FBRUEsRUFBRUEsR0FBR0EsRUFBRUEsQ0FBQ0E7Z0JBQ3BCQSxDQUFDQSxDQUFFQSxDQUFDQSxDQUFD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QUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtZQUFFQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFJQSxDQUFDQSxDQUFDQTtZQUFFQSxDQUFDQSxDQUFDQSxFQUFFQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtZQUM1Q0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7WUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7WUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBSUEsQ0FBQ0EsQ0FBQ0E7WUFBRUEsQ0FBQ0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7WUFDNUNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO1lBQUVBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO1lBQUVBLENBQUNBLENBQUNBLEVBQUVBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO1lBQUVBLENBQUNBLENBQUNBLEVBQUVBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO1lBQzVDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtZQUFFQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtZQUFFQSxDQUFDQSxDQUFDQSxFQUFFQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtZQUFFQSxDQUFDQSxDQUFDQSxFQUFFQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtZQUM1Q0EsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0E7UUFDaEJBLENBQUNBO1FBU01iLHVCQUFLQSxHQUFaQSxVQUFjQSxDQUFDQSxFQUFFQSxDQUFDQSxFQUFFQSxDQUFDQTtZQUNqQmMsSUFBSUEsQ0FBQ0EsV0FBV0EsQ0FBQ0EsT0FBT0EsQ0FBQ0EsTUFBTUEsRUFBRUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFFckRBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBO1FBQ2hCQSxDQUFDQTtRQW1CTWQsMkJBQVNBLEdBQWhCQTtZQUFpQmUsY0FBT0E7aUJBQVBBLFdBQU9BLENBQVBBLHNCQUFPQSxDQUFQQSxJQUFPQTtnQkFBUEEsNkJBQU9BOztZQUNwQkEsSUFBSUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsRUFDUEEsR0FBR0EsRUFBRUEsTUFBTUEsRUFBRUEsRUFBRUEsQ0FBQ0E7WUFFcEJBLEVBQUVBLENBQUFBLENBQUNBLElBQUlBLENBQUNBLE1BQU1BLEtBQUtBLENBQUNBLENBQUNBLENBQUFBLENBQUNBO2dCQUNsQkEsR0FBR0EsR0FBR0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBQ2RBLE1BQU1BLEdBQUdBLElBQUlBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO2dCQUNqQkEsRUFBRUEsR0FBR0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQUE7WUFDaEJBLENBQUNBO1lBQ0RBLElBQUlBLENBQUNBLEVBQUVBLENBQUFBLENBQUNBLElBQUlBLENBQUNBLE1BQU1BLEtBQUtBLENBQUNBLENBQUNBLENBQUFBLENBQUNBO2dCQUN2QkEsR0FBR0EsR0FBR0EsVUFBT0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsRUFBRUEsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsRUFBRUEsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBQ2hEQSxNQUFNQSxHQUFHQSxVQUFPQSxDQUFDQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQSxFQUFFQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQSxFQUFFQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFDbkRBLEVBQUVBLEdBQUdBLFVBQU9BLENBQUNBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLENBQUNBLENBQUNBLEVBQUVBLElBQUlBLENBQUNBLENBQUNBLENBQUNBLEVBQUVBLElBQUlBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1lBQ25EQSxDQUFDQTtZQUNEQSxDQUFDQSxHQUFHQSxVQUFPQSxDQUFDQSxNQUFNQSxFQUFFQSxDQUFDQTtZQUVyQkEsQ0FBQ0EsR0FBR0EsR0FBR0EsQ0FBQ0EsSUFBSUEsRUFBRUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsU0FBU0EsRUFBRUEsQ0FBQ0E7WUFFdkNBLENBQUNBLEdBQUdBLEVBQUVBLENBQUNBLElBQUlBLEVBQUVBLENBQUNBLFNBQVNBLEVBQUVBLENBQUNBO1lBQzFCQSxDQUFDQSxDQUFDQSxLQUFLQSxDQUFDQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQSxTQUFTQSxFQUFFQSxDQUFDQTtZQUMxQkEsQ0FBQ0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFFZEEsSUFBSUEsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0E7WUFFcEJBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLEdBQUlBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1lBQ1pBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLEdBQUlBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1lBQ1pBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLEdBQUlBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1lBQ1pBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLEdBQUlBLENBQUNBLENBQUNBO1lBQ1ZBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLEdBQUlBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1lBQ1pBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLEdBQUlBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1lBQ1pBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLEdBQUlBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1lBQ1pBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLEdBQUlBLENBQUNBLENBQUNBO1lBQ1ZBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLEdBQUlBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1lBQ1pBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLEdBQUlBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1lBQ1pBLENBQUNBLENBQUNBLEVBQUVBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1lBQ1pBLENBQUNBLENBQUNBLEVBQUVBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO1lBQ1ZBLENBQUNBLENBQUNBLEVBQUVBLENBQUNBLEdBQUdBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBO1lBQ2RBLENBQUNBLENBQUNBLEVBQUVBLENBQUNBLEdBQUdBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBO1lBQ2RBLENBQUNBLENBQUNBLEVBQUVBLENBQUNBLEdBQUdBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBO1lBQ2RBLENBQUNBLENBQUNBLEVBQUVBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO1lBRVZBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBO1FBQ2hCQSxDQUFDQTtRQVlNZix3QkFBTUEsR0FBYkE7WUFBZWdCLGNBQU9BO2lCQUFQQSxXQUFPQSxDQUFQQSxzQkFBT0EsQ0FBUEEsSUFBT0E7Z0JBQVBBLDZCQUFPQTs7WUFDbEJBLElBQUlBLE1BQU1BLEdBQUdBLE9BQU9BLENBQUNBLE1BQU1BLEVBQUVBLENBQUNBO1lBRTlCQSxJQUFJQSxDQUFDQSxXQUFXQSxDQUFDQSxNQUFNQSxDQUFDQSxTQUFTQSxDQUFDQSxLQUFLQSxDQUFDQSxNQUFNQSxFQUFFQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUV2REEsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0E7UUFDaEJBLENBQUNBO1FBS01oQiwwQkFBUUEsR0FIZkEsVUFHaUJBLElBQVdBLEVBQUVBLEtBQVlBLEVBQUVBLE1BQWFBLEVBQUVBLEdBQVVBLEVBQUVBLElBQVdBLEVBQUVBLEdBQVVBO1lBQzFGaUIsSUFBSUEsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsTUFBTUEsRUFDZkEsRUFBRUEsRUFDRkEsRUFBRUEsRUFDRkEsRUFBRUEsQ0FBQ0E7WUFFUEEsRUFBRUEsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsS0FBS0EsR0FBR0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7WUFDeEJBLEVBQUVBLEdBQUdBLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBLEdBQUdBLE1BQU1BLENBQUNBLENBQUNBO1lBQ3hCQSxFQUFFQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxHQUFHQSxJQUFJQSxDQUFDQSxDQUFDQTtZQUV0QkEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBSUEsQ0FBQ0EsR0FBR0EsRUFBRUEsQ0FBQ0E7WUFDZkEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBSUEsQ0FBQ0EsQ0FBQ0E7WUFDVkEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBSUEsQ0FBQ0EsQ0FBQ0E7WUFDVkEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBSUEsQ0FBQ0EsQ0FBQ0E7WUFFVkEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBSUEsQ0FBQ0EsQ0FBQ0E7WUFDVkEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBSUEsQ0FBQ0EsR0FBR0EsRUFBRUEsQ0FBQ0E7WUFDZkEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBSUEsQ0FBQ0EsQ0FBQ0E7WUFDVkEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBSUEsQ0FBQ0EsQ0FBQ0E7WUFFVkEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBSUEsQ0FBQ0EsQ0FBQ0E7WUFDVkEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBSUEsQ0FBQ0EsQ0FBQ0E7WUFDVkEsQ0FBQ0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsRUFBRUEsQ0FBQ0E7WUFDaEJBLENBQUNBLENBQUNBLEVBQUVBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO1lBRVZBLENBQUNBLENBQUNBLEVBQUVBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLEtBQUtBLEdBQUdBLElBQUlBLENBQUNBLEdBQUdBLEVBQUVBLENBQUNBO1lBQzdCQSxDQUFDQSxDQUFDQSxFQUFFQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxHQUFHQSxNQUFNQSxDQUFDQSxHQUFHQSxFQUFFQSxDQUFDQTtZQUM3QkEsQ0FBQ0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsR0FBR0EsSUFBSUEsQ0FBQ0EsR0FBR0EsRUFBRUEsQ0FBQ0E7WUFDM0JBLENBQUNBLENBQUNBLEVBQUVBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO1lBRVZBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBO1FBQ2hCQSxDQUFDQTtRQUVNakIsdUJBQUtBLEdBQVpBLFVBQWNBLElBQVdBLEVBQUVBLEtBQVlBLEVBQUVBLE1BQWFBLEVBQUVBLEdBQVVBLEVBQUVBLElBQVdBLEVBQUVBLEdBQVVBO1lBQ3ZGa0IsSUFBSUEsQ0FBQ0EsV0FBV0EsQ0FBQ0EsT0FBT0EsQ0FBQ0EsTUFBTUEsRUFBRUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsSUFBSUEsRUFBRUEsS0FBS0EsRUFBRUEsTUFBTUEsRUFBRUEsR0FBR0EsRUFBRUEsSUFBSUEsRUFBRUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFFakZBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBO1FBQ2hCQSxDQUFDQTtRQWdCTWxCLGdDQUFjQSxHQU5yQkEsVUFNdUJBLElBQVlBLEVBQUVBLE1BQWFBLEVBQUVBLElBQVdBLEVBQUVBLEdBQVVBO1lBQ3ZFbUIsSUFBSUEsQ0FBQ0EsR0FBR0EsSUFBSUEsRUFDUkEsRUFBRUEsR0FBR0EsSUFBSUEsRUFDVEEsQ0FBQ0EsR0FBR0EsSUFBSUEsRUFDUkEsRUFBRUEsR0FBR0EsSUFBSUEsRUFDVEEsSUFBSUEsR0FBR0EsSUFBSUEsQ0FBQ0EsRUFBRUEsR0FBR0EsSUFBSUEsR0FBR0EsR0FBR0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7WUFFcENBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLEdBQUdBLENBQUNBLElBQUlBLENBQUNBLENBQUNBO1lBQ25CQSxNQUFHQSxDQUFDQSxLQUFLQSxDQUFDQSxDQUFDQSxLQUFLQSxDQUFDQSxFQUFFQSxNQUFHQSxDQUFDQSxJQUFJQSxDQUFDQSxnQkFBZ0JBLENBQUNBLFNBQVNBLEVBQUVBLE1BQU1BLENBQUNBLENBQUNBLENBQUNBO1lBRWpFQSxFQUFFQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxHQUFHQSxJQUFJQSxDQUFDQSxDQUFDQTtZQUN0QkEsRUFBRUEsR0FBR0EsSUFBSUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7WUFFeEJBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLE1BQU1BLENBQUNBO1lBRWhCQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFJQSxFQUFFQSxHQUFHQSxNQUFNQSxDQUFDQTtZQUNwQkEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBSUEsQ0FBQ0EsQ0FBQ0E7WUFDVkEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBSUEsQ0FBQ0EsQ0FBQ0E7WUFDVkEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBSUEsQ0FBQ0EsQ0FBQ0E7WUFFVkEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBSUEsQ0FBQ0EsQ0FBQ0E7WUFDVkEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBSUEsRUFBRUEsQ0FBQ0E7WUFDWEEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBSUEsQ0FBQ0EsQ0FBQ0E7WUFDVkEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBSUEsQ0FBQ0EsQ0FBQ0E7WUFFVkEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBSUEsQ0FBQ0EsQ0FBQ0E7WUFDVkEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0Es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LENBQUNBLENBQUNBLENBQUNBLEVBQUVBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLENBQUNBLENBQUNBLEVBQUVBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLENBQUNBLENBQUNBLEVBQ2xEQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQSxFQUFFQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQSxFQUFFQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQSxFQUFFQSxDQUFDQSxFQUFFQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQSxFQUFFQSxDQUFDQSxFQUNwREEsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsRUFDdERBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLENBQUNBLENBQUNBLEVBQUVBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLENBQUNBLENBQUNBLEVBQUVBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLENBQUNBLENBQUNBLEVBQUVBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLENBQUNBLENBQUNBLEVBQ2xEQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQSxFQUFFQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQSxFQUFFQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQSxFQUFFQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQSxFQUNsREEsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsRUFDcERBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLEVBQUVBLENBQUNBLEVBQUVBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLEVBQUVBLENBQUNBLEVBQUVBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLEVBQUVBLENBQUNBLEVBQUVBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLEVBQUVBLENBQUNBLENBQUNBO1lBRTNEQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtZQUMxQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7WUFDMUNBLE1BQU1BLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO1lBQzFDQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtZQUMxQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7WUFDMUNBLE1BQU1BLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO1lBQzFDQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtZQUMxQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7WUFDMUNBLE1BQU1BLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO1lBQzFDQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtZQUMxQ0EsTUFBTUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7WUFDM0NBLE1BQU1BLENBQUNBLEVBQUVBLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO1lBQzNDQSxNQUFNQSxDQUFDQSxFQUFFQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtZQUMzQ0EsTUFBTUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7WUFDM0NBLE1BQU1BLENBQUNBLEVBQUVBLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO1lBQzNDQSxNQUFNQSxDQUFDQSxFQUFFQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtZQUUzQ0EsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0E7UUFDaEJBLENBQUNBO1FBRU10QixpQ0FBZUEsR0FBdEJBLFVBQXVCQSxNQUFjQTtZQUNqQ3VCLElBQUlBLElBQUlBLEdBQUdBLElBQUlBLENBQUNBLE1BQU1BLEVBQ2xCQSxJQUFJQSxHQUFHQSxNQUFNQSxDQUFDQSxNQUFNQSxDQUFDQTtZQUN6QkEsSUFBSUEsTUFBTUEsR0FBR0EsRUFBRUEsQ0FBQ0E7WUFFaEJBLE1BQU1BLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLEVBQUVBLENBQUNBLENBQUNBO1lBQzNGQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQTtZQUMzRkEsTUFBTUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0E7WUFDNUZBLE1BQU1BLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLEVBQUVBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLEVBQUVBLENBQUNBLENBQUNBO1lBRTVGQSxNQUFNQSxDQUFDQSxVQUFPQSxDQUFDQSxNQUFNQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQSxFQUFFQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQSxFQUFFQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQSxFQUFFQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUN0RUEsQ0FBQ0E7UUFFTXZCLGlDQUFlQSxHQUF0QkEsVUFBdUJBLE1BQWNBO1lBQ2pDd0IsSUFBSUEsSUFBSUEsR0FBR0EsSUFBSUEsQ0FBQ0EsTUFBTUEsRUFDbEJBLElBQUlBLEdBQUdBLE1BQU1BLENBQUNBLE1BQU1BLENBQUNBO1lBQ3pCQSxJQUFJQSxNQUFNQSxHQUFHQSxFQUFFQSxDQUFDQTtZQUVoQkEsTUFBTUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDdEVBLE1BQU1BLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1lBQ3RFQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFH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QUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQSxFQUFFQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQSxFQUFFQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUMxRUEsQ0FBQ0E7UUFFTTNCLHNCQUFJQSxHQUFYQTtZQUNJNEIsTUFBTUEsQ0FBQ0EsVUFBT0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsRUFBRUEsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsRUFBRUEsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDMUVBLENBQUNBO1FBRU01QixzQkFBSUEsR0FBWEE7WUFDSTZCLE1BQU1BLENBQUNBLFVBQU9BLENBQUNBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBLENBQUNBLEVBQUVBLElBQUlBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBLENBQUNBLEVBQUVBLElBQUlBLENBQUNBLE1BQU1BLENBQUNBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBO1FBQzNFQSxDQUFDQTtRQUVNN0IsZ0NBQWNBLEdBQXJCQTtZQUNJOEIsTUFBTUEsQ0FBQ0EsVUFBT0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsRUFBRUEsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsRUFBRUEsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDN0VBLENBQUNBO1FBRU05QiwwQkFBUUEsR0FBZkE7WUFDSStCLE1BQU1BLENBQUNBLFVBQU9BLENBQUNBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLElBQUlBLEVBQUVBLENBQUNBLE1BQU1BLEVBQUVBLEVBQUVBLElBQUlBLENBQUNBLElBQUlBLEVBQUVBLENBQUNBLE1BQU1BLEVBQUVBLEVBQUVBLElBQUlBLENBQUNBLElBQUlBLEVBQUVBLENBQUNBLE1BQU1BLEVBQUVBLENBQUNBLENBQUNBO1FBQzVGQSxDQUFDQTtRQUVNL0IsZ0NBQWNBLEdBQXJCQTtZQUNJZ0MsSUFBSUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsRUFBRUEsRUFBRUEsRUFBRUEsRUFBRUEsRUFBRUEsRUFBRUEsRUFBRUEsQ0FBQ0EsRUFBRUEsTUFBTUEsQ0FBQ0E7WUFDbkNBLElBQUlBLEtBQUtBLEdBQUdBLElBQUlBLENBQUNBLFFBQVFBLEVBQUVBLENBQUNBO1lBRTVCQSxFQUFFQSxHQUFHQSxLQUFLQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUNiQSxFQUFFQSxHQUFHQSxLQUFLQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUNiQSxFQUFFQSxHQUFHQSxLQUFLQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUViQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQTtZQUVoQkEsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsRUFBRUEsQ0FBQ0EsQ0FBQ0E7WUFDMUJBLE1BQU1BLEdBQUdBLElBQUlBLENBQUNBLEVBQUVBLEdBQUdBLEdBQUdBLENBQUNBO1lBRXZCQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFDYkEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7b0JBQ2RBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLEVBQUVBLEVBQUVBLENBQUNBLENBQUNBLEVBQUVBLENBQUNBLEdBQUdBLEVBQUVBLENBQUNBLENBQUNBO29CQUN0Q0EsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsRUFBRUEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsRUFBRUEsQ0FBQ0EsQ0FBQ0E7Z0JBQ3pDQSxDQUFDQTtnQkFBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7b0JBRUpBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO29CQUNOQSxDQUFDQSxHQUFHQSxDQUFDQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxFQUFFQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxFQUFFQSxDQUFDQSxDQUFDQTtnQkFDMUNBLENBQUNBO1lBQ0xBLENBQUNBO1lBQUNBLElBQUlBLENBQUNBLENBQUNBO2dCQUVKQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtnQkFDTkEsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsRUFBRUEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsRUFBRUEsQ0FBQ0EsQ0FBQ0E7WUFDekNBLENBQUNBO1lBRURBLE1BQU1BLENBQUNBLFVBQU9BLENBQUNBLE1BQU1BLENBQUNBLENBQUNBLEVBQUVBLENBQUNBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBLEtBQUtBLENBQUNBLGFBQVVBLENBQUNBLENBQUNBO1FBQ3JEQSxDQUFDQTtRQW1CTWhDLHdCQUFNQSxHQUFiQSxVQUFjQSxDQUFTQSxFQUFFQSxDQUFZQSxFQUFFQSxDQUFTQTtZQUM1Q2lDLElBQUlBLEVBQUVBLEVBQUVBLEVBQUVBLEVBQUVBLEVBQUVBLEVBQUVBLEVBQUVBLEVBQUVBLEVBQUVBLEVBQUVBLEVBQUVBLEVBQUVBLEVBQUVBLEVBQUVBLEVBQUVBLEVBQUVBLEVBQUVBLEVBQUVBLEVBQUVBLEVBQ3RDQSxFQUFFQSxFQUFFQSxFQUFFQSxFQUFFQSxFQUFFQSxFQUFFQSxFQUFFQSxFQUFFQSxFQUFFQSxFQUFFQSxFQUFFQSxFQUFFQSxFQUFFQSxFQUFFQSxFQUFFQSxFQUFFQSxFQUFFQSxFQUFFQSxFQUFFQSxFQUFFQSxFQUFFQSxFQUFFQSxFQUFFQSxFQUFFQSxDQUFDQSxDQUFDQTtZQUV0REEsRUFBRUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDVEEsRUFBRUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDVEEsRUFBRUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFFVEEsRUFBRUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDVEEsRUFBRUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDVEEsRUFBRUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDVEEsRUFBRUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFFVEEsRUFBRUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDVEEsRUFBRUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDVEEsRUFBRUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFFVEEsRUFBRUEsR0FBR0EsRUFBRUEsR0FBR0EsRUFBRUEsQ0FBQ0E7WUFDYkEsRUFBRUEsR0FBR0EsRUFBRUEsR0FBR0EsRUFBRUEsQ0FBQ0E7WUFDYkEsRUFBRUEsR0FBR0EsRUFBRUEsR0FBR0EsRUFBRUEsQ0FBQ0E7WUFDYkEsRUFBRUEsR0FBR0EsRUFBRUEsR0FBR0EsRUFBRUEsQ0FBQ0E7WUFDYkEsRUFBRUEsR0FBR0EsRUFBRUEsR0FBR0EsRUFBRUEsQ0FBQ0E7WUFDYkEsRUFBRUEsR0FBR0EsRUFBRUEsR0FBR0EsRUFBRUEsQ0FBQ0E7WUFDYkEsRUFBRUEsR0FBR0EsRUFBRUEsR0FBR0EsRUFBRUEsQ0FBQ0E7WUFDYkEsRUFBRUEsR0FBR0EsRUFBRUEsR0FBR0EsRUFBRUEsQ0FBQ0E7WUFDYkEsRUFBRUEsR0FBR0EsRUFBRUEsR0FBR0EsRUFBRUEsQ0FBQ0E7WUFDYkEsRUFBRUEsR0FBR0EsRUFBRUEsR0FBR0EsRUFBRUEsQ0FBQ0E7WUFDYkEsRUFBRUEsR0FBR0EsRUFBRUEsR0FBR0EsRUFBRUEsQ0FBQ0E7WUFDYkEsRUFBRUEsR0FBR0EsRUFBRUEsR0FBR0EsRUFBRUEsQ0FBQ0E7WUFFYkEsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0E7WUFFaEJBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLEVBQUVBLEdBQUdBLEVBQUVBLENBQUNBLENBQUNBLEdBQUdBLEVBQUVBLENBQUNBO1lBQzVCQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxFQUFFQSxHQUFHQSxFQUFFQSxDQUFDQSxHQUFHQSxFQUFFQSxDQUFDQTtZQUN0QkEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsRUFBRUEsR0FBR0EsRUFBRUEsQ0FBQ0EsR0FBR0EsRUFBRUEsQ0FBQ0E7WUFDdEJBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO1lBRVRBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLEVBQUVBLEdBQUdBLEVBQUVBLENBQUNBLEdBQUdBLEVBQUVBLENBQUNBO1lBQ3RCQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxFQUFFQSxHQUFHQSxFQUFFQSxDQUFDQSxDQUFDQSxHQUFHQSxFQUFFQSxDQUFDQTtZQUM1QkEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsRUFBRUEsR0FBR0EsRUFBRUEsQ0FBQ0EsR0FBR0EsRUFBRUEsQ0FBQ0E7WUFDdEJBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO1lBRVRBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLEVBQUVBLEdBQUdBLEVBQUVB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QUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtZQUNUQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtZQUNUQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtZQUNUQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtZQUNUQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtZQUNUQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtZQUNUQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtZQUNUQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtZQUVUQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQTtRQUNoQkEsQ0FBQ0E7UUFFTVQsd0JBQU1BLEdBQWJBO1lBQ0lVLElBQUlBLEVBQUVBLEdBQUdBLElBQUlBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1lBQ3hCQSxJQUFJQSxFQUFFQSxHQUFHQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUN4QkEsSUFBSUEsRUFBRUEsR0FBR0EsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDeEJBLElBQUlBLEVBQUVBLEdBQUdBLElBQUlBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1lBQ3hCQSxJQUFJQSxHQUFHQSxHQUFHQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUN6QkEsSUFBSUEsR0FBR0EsR0FBR0EsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDekJBLElBQUlBLENBQUNBLEdBQUdBLEVBQUVBLEdBQUNBLEVBQUVBLEdBQUNBLEVBQUVBLEdBQUNBLEVBQUVBLENBQUNBO1lBRXBCQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxFQUFFQSxHQUFDQSxDQUFDQSxDQUFDQTtZQUN0QkEsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsRUFBRUEsR0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDdkJBLElBQUlBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLEVBQUVBLEdBQUNBLENBQUNBLENBQUNBO1lBQ3ZCQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxFQUFFQSxHQUFDQSxDQUFDQSxDQUFDQTtZQUN0QkEsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsRUFBRUEsR0FBQ0EsR0FBR0EsR0FBQ0EsRUFBRUEsR0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDbkNBLElBQUlBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLEVBQUVBLEdBQUNBLEdBQUdBLEdBQUNBLEVBQUVBLEdBQUNBLEdBQUdBLENBQUNBLEdBQUNBLENBQUNBLENBQUNBO1lBRXBDQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQTtRQUNoQkEsQ0FBQ0E7UUFFTVYsZ0NBQWNBLEdBQXJCQSxVQUFzQkEsQ0FBUUE7WUFDMUJXLElBQUlBLEVBQUVBLEdBQUdBLElBQUlBLENBQUNBLE1BQU1BLENBQUNBO1lBRXJCQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtZQUNYQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtZQUNYQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtZQUNYQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtZQUNYQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtZQUNYQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtZQUNYQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtZQUNYQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtZQUNYQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtZQUVYQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQTtRQUNoQkEsQ0FBQ0E7UUFFTVgsaUNBQWVBLEdBQXRCQSxVQUF3QkEsTUFBY0E7WUFDbENZLElBQUlBLENBQUNBLEdBQUdBLE1BQU1BLENBQUNBLENBQUNBLEVBQ1pBLENBQUNBLEdBQUdBLE1BQU1BLENBQUNBLENBQUNBLEVBQ1pBLE1BQU1BLEdBQUdBLFVBQU9BLENBQUNBLE1BQU1BLEVBQUVBLEVBQ3pCQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQTtZQUVwQkEsTUFBTUEsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBRUEsQ0FBQ0EsQ0FBRUEsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBRUEsQ0FBQ0EsQ0FBRUEsR0FBR0EsQ0FBQ0EsQ0FBQ0E7WUFDbkNBLE1BQU1BLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUVBLENBQUNBLENBQUVBLEdBQUdBLENBQUNBLEdBQUdBLENBQUNBLENBQUVBLENBQUNBLENBQUVBLEdBQUdBLENBQUNBLENBQUNBO1lBRW5DQSxNQUFNQSxDQUFDQSxNQUFNQSxDQUFDQTtRQUNsQkEsQ0FBQ0E7UUFFTVosK0JBQWFBLEdBQXBCQSxVQUFzQkEsTUFBY0E7WUFDaENhLElBQUlBLENBQUNBLEdBQUdBLE1BQU1BLENBQUNBLENBQUNBLEVBQ1pBLENBQUNBLEdBQUdBLE1BQU1BLENBQUNBLENBQUNBLEVBQ1pBLE1BQU1BLEdBQUdBLFVBQU9BLENBQUNBLE1BQU1BLEVBQUVBLEVBQ3pCQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQTtZQUVwQkEsTUFBTUEsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBRUEsQ0FBQ0EsQ0FBRUEsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBRUEsQ0FBQ0EsQ0FBRUEsR0FBR0EsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsRUFBRUEsQ0FBQ0E7WUFDN0NBLE1BQU1BLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUVBLENBQUNBLENBQUVBLEdBQUdBLENBQUNBLEdBQUdBLENBQUNBLENBQUVBLENBQUNBLENBQUVBLEdBQUdBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLEVBQUVBLENBQUNBO1lBRTdDQSxNQUFNQSxDQUFDQSxNQUFNQSxDQUFDQTtRQUNsQkEsQ0FBQ0E7UUFFTWIsMEJBQVFBLEdBQWZBLFVBQWdCQSxNQUFjQTtZQUMxQmMsSUFBSUEsR0FBR0EsR0FBR0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsR0FBR0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsR0FBR0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDaERBLElBQUlBLEdBQUdBLEdBQUdBLElBQUlBLENBQUNBLENBQUNBLEdBQUdBLE1BQU1BLENBQUNBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLENBQUNBLEdBQUdBLE1BQU1BLENBQUNBLENBQUNBLENBQUNBO1lBRWhEQSxJQUFJQSxHQUFHQSxHQUFHQSxJQUFJQSxDQUFDQSxDQUFDQSxHQUFHQSxNQUFNQSxDQUFDQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQSxDQUFDQSxHQUFHQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUNoREEsSUFBSUEsR0FBR0EsR0FBR0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsR0FBR0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsR0FBR0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFFaERBLElBQUlBLEVBQUVBLEdBQUdBLElBQUlBLENBQUNBLENBQUNBLEdBQUdBLE1BQU1BLENBQUNBLEVBQUVBLEdBQUdBLElBQUlBLENBQUNBLENBQUNBLEdBQUdBLE1BQU1BLENBQUNBLEVBQUVBLEdBQUdBLElBQUlBLENBQUNBLEVBQUVBLENBQUNBO1lBQzNEQSxJQUFJQSxFQUFFQSxHQUFHQSxJQUFJQSxDQUFDQSxDQUFDQSxHQUFHQSxNQUFNQSxDQUFDQSxFQUFFQSxHQUFHQSxJQUFJQSxDQUFDQSxDQUFDQSxHQUFHQSxNQUFNQSxDQUFDQSxFQUFFQSxHQUFHQSxJQUFJQSxDQUFDQSxFQUFFQSxDQUFDQTtZQUUzREEsSUFBSUEsQ0FBQ0EsQ0FBQ0EsR0FBR0EsR0FBR0EsQ0FBQ0E7WUFDYkEsSUFBSUEsQ0FBQ0EsQ0FBQ0EsR0FBR0EsR0FBR0EsQ0FBQ0E7WUFDYkEsSUFBSUEsQ0FBQ0EsQ0FBQ0EsR0FBR0EsR0FBR0EsQ0FBQ0E7WUFDYkEsSUFBSUEsQ0FBQ0EsQ0FBQ0EsR0FBR0EsR0FBR0EsQ0FBQ0E7WUFDYkEsSUFBSUEsQ0FBQ0EsRUFBRUEsR0FBR0EsRUFBRUEsQ0FBQ0E7WUFDYkEsSUFBSUEsQ0FBQ0EsRUFBRUEsR0FBR0EsRUFBRUEsQ0FBQ0E7WUFFYkEsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0E7UUFDaEJBLENBQUNBO1FBRU1kLDJCQUFTQSxHQUFoQkE7WUFDSWUsSUFBSUEsR0FBR0EsRUFBRUEsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0E7WUFFekJBLEdBQUdBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1lBQ1hBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1lBQ1pBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLEdBQUdBLENBQUNBO1lBQ1hBLEdBQUdBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1lBQ1hBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1lBQ1pBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLEdBQUdBLENBQUNBO1lBQ1hBLEdBQUdBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1lBQ1hBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1lBQ1pBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLEdBQUdBLENBQUNBO1lBRVhBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBO1FBQ2hCQSxDQUFDQTtRQUVNZixzQkFBSUEsR0FBWEE7WUFDSWdCLE1BQU1BLENBQUNBLE9BQU9BLENBQUNBLE1BQU1BLEVBQUVBLENBQUNBLEdBQUdBLENBQUNBLElBQUlBLENBQUNBLENBQUNBO1FBQ3RDQSxDQUFDQTtRQUVNaEIscUJBQUdBLEdBQVZBLFVBQVdBLE1BQWNBO1lBQ3JCaUIsSUFBSUEsRUFBRUEsR0FBR0EsSUFBSUEsQ0FBQ0EsTUFBTUEsRUFDaEJBLE1BQU1BLEdBQUdBLE1BQU1BLENBQUNBLE1BQU1BLENBQUNBO1lBRTNCQSxFQUFFQSxDQUFFQSxDQUFDQSxDQUFFQSxHQUFHQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUFDQSxFQUFFQSxDQUFFQSxDQUFDQSxDQUFFQSxHQUFHQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUFDQSxFQUFFQSxDQUFFQSxDQUFDQSxDQUFFQSxHQUFHQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUM5REEsRUFBRUEsQ0FBRUEsQ0FBQ0EsQ0FBRUEsR0FBR0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFBQ0EsRUFBRUEsQ0FBRUEsQ0FBQ0EsQ0FBRUEsR0FBR0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFBQ0EsRUFBRUEsQ0FBRUEsQ0FBQ0EsQ0FBRUEsR0FBR0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDOURBLEVBQUVBLENBQUVBLENBQUNBLENBQUVBLEdBQUdBLE1BQU1BLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1lBQUNBLEVBQUVBLENBQUVBLENBQUNBLENBQUVBLEdBQUdBLE1BQU1BLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1lBQUNBLEVBQUVBLENBQUVBLENBQUNBLENBQUVBLEdBQUdBLE1BQU1BLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1lBRTlEQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQTtRQUNoQkEsQ0FBQ0E7UUFFTWpCLHVCQUFLQSxHQUFaQSxVQUFhQSxDQUFTQSxFQUFFQSxDQUFTQTtZQUM3QmtCLElBQUlBLENBQUNBLFdBQVdBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1lBQzNCQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUM1QkEsQ0FBQ0E7UUFFTWxCLHdCQUFNQSxHQUFiQSxVQUFjQSxLQUFZQTtZQUN0Qm1CLElBQUlBLEdBQUdBLEdBQUdBLEtBQUtBLEdBQUdBLGFBQVVBLENBQUNBO1lBQzdCQSxJQUFJQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtZQUN0QkEsSUFBSUEsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7WUFDdEJBLElBQUlBLEdBQUdBLEdBQUdBLElBQUlBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO1lBQ2xDQSxJQUFJQSxHQUFHQSxHQUFHQSxJQUFJQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtZQUNsQ0EsSUFBSUEsR0FBR0EsR0FBR0EsSUFBSUEsQ0FB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QUFXQSxDQUFDQSxDQUFDQSxFQUNsQkEsRUFBRUEsR0FBR0EsV0FBV0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFFdkJBLFNBQVNBLEdBQUdBLEdBQUdBLEdBQUdBLGFBQVVBLENBQUNBO1lBQzdCQSxFQUFFQSxJQUFJQSxTQUFTQSxDQUFDQTtZQUNoQkEsRUFBRUEsSUFBSUEsU0FBU0EsQ0FBQ0E7WUFDaEJBLEVBQUVBLElBQUlBLFNBQVNBLENBQUNBO1lBRWhCQSxFQUFFQSxHQUFHQSxJQUFJQSxDQUFDQSxHQUFHQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQTtZQUNsQkEsRUFBRUEsR0FBR0EsSUFBSUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0E7WUFDbEJBLEVBQUVBLEdBQUdBLElBQUlBLENBQUNBLEdBQUdBLENBQUNBLEVBQUVBLENBQUNBLENBQUNBO1lBQ2xCQSxFQUFFQSxHQUFHQSxJQUFJQSxDQUFDQSxHQUFHQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQTtZQUNsQkEsRUFBRUEsR0FBR0EsSUFBSUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0E7WUFDbEJBLEVBQUVBLEdBQUdBLElBQUlBLENBQUNBLEdBQUdBLENBQUNBLEVBQUVBLENBQUNBLENBQUNBO1lBRWxCQSxJQUFJQSxDQUFDQSxDQUFDQSxHQUFHQSxFQUFFQSxHQUFHQSxFQUFFQSxHQUFHQSxFQUFFQSxHQUFHQSxFQUFFQSxHQUFHQSxFQUFFQSxHQUFHQSxFQUFFQSxDQUFDQTtZQUNyQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsR0FBR0EsRUFBRUEsR0FBR0EsRUFBRUEsR0FBR0EsRUFBRUEsR0FBR0EsRUFBRUEsR0FBR0EsRUFBRUEsR0FBR0EsRUFBRUEsQ0FBQ0E7WUFDckNBLElBQUlBLENBQUNBLENBQUNBLEdBQUdBLEVBQUVBLEdBQUdBLEVBQUVBLEdBQUdBLEVBQUVBLEdBQUdBLEVBQUVBLEdBQUdBLEVBQUVBLEdBQUdBLEVBQUVBLENBQUNBO1lBQ3JDQSxJQUFJQSxDQUFDQSxDQUFDQSxHQUFH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RUEsRUFBRUEsRUFBRUEsRUFBRUEsRUFBRUEsRUFBRUEsRUFBRUEsQ0FBQ0EsQ0FBQ0E7WUFFN0JBLENBQUNBLEdBQUdBLE1BQU1BLENBQUNBLE1BQU1BLENBQUNBO1lBR2xCQSxHQUFHQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUNYQSxHQUFHQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUNYQSxHQUFHQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUNYQSxHQUFHQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUNYQSxHQUFHQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUNYQSxHQUFHQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUNYQSxHQUFHQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUNYQSxHQUFHQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUNYQSxHQUFHQSxHQUFHQSxDQUFDQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQTtZQUdaQSxFQUFFQSxHQUFHQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxDQUFDQSxDQUFDQTtZQUN0REEsRUFBRUEsR0FBR0EsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7WUFDdERBLEVBQUVBLEdBQUdBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLElBQUlBLENBQUNBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLENBQUNBLENBQUNBO1lBRXREQSxHQUFHQSxJQUFJQSxFQUFFQSxDQUFDQTtZQUNWQSxHQUFHQSxJQUFJQSxFQUFFQSxDQUFDQTtZQUNWQSxHQUFHQSxJQUFJQSxFQUFFQSxDQUFDQTtZQUNWQSxHQUFHQSxJQUFJQSxFQUFFQSxDQUFDQTtZQUNWQSxHQUFHQSxJQUFJQSxFQUFFQSxDQUFDQTtZQUNWQSxHQUFHQSxJQUFJQSxFQUFFQSxDQUFDQTtZQUNWQSxHQUFHQSxJQUFJQSxFQUFFQSxDQUFDQTtZQUNWQSxHQUFHQSxJQUFJQSxFQUFFQSxDQUFDQTtZQUNWQSxHQUFHQSxJQUFJQSxFQUFFQSxDQUFDQTtZQUlWQSxFQUFFQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxDQUFDQTtZQUNyQkEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsRUFBRUEsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBQ1ZBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLElBQUlBLENBQUNBLEVBQUVBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBO2dCQUN0QkEsSUFBSUEsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsR0FBR0EsQ0FBQ0E7Z0JBQ2pCQSxDQUFDQSxHQUFHQSxHQUFHQSxHQUFHQSxDQUFDQSxDQUFDQTtnQkFDWkEsSUFBSUEsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsR0FBR0EsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7Z0JBQ3pCQSxJQUFJQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxHQUFHQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtnQkFDekJBLElBQUlBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBLEdBQUdBLEdBQUdBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO1lBQzdCQSxDQUFDQTtZQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtnQkFDSkEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsR0FBR0EsR0FBR0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7b0JBQ1pBLEVBQUVBLENBQUNBLENBQUNBLEdBQUdBLEdBQUdBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBO3dCQUVaQSxFQUFFQSxHQUFHQSxDQUFDQSxHQUFHQSxHQUFHQSxDQUFDQSxHQUFHQSxHQUFHQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTt3QkFDN0JBLEVBQUVBLEdBQUdBLElBQUlBLENBQUNBLElBQUlBLENBQUNBLEVBQUVBLENBQUNBLENBQUNBO3dCQUVuQkEsSUFBSUEsQ0FBQ0EsQ0FBQ0EsR0FBR0EsRUFBRUEsR0FBR0EsR0FBR0EsQ0FBQ0E7d0JBQ2xCQSxFQUFFQSxHQUFHQSxHQUFHQSxHQUFHQSxFQUFFQSxDQUFDQTt3QkFDZEEsSUFBSUEsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsR0FBR0EsR0FBR0EsQ0FBQ0EsR0FBR0EsRUFBRUEsQ0FBQ0E7d0JBQzFCQSxJQUFJQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxHQUFHQSxHQUFHQSxDQUFDQSxHQUFHQSxFQUFFQSxDQUFDQTt3QkFDMUJBLElBQUlBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBLEdBQUdBLEdBQUdBLENBQUNBLEdBQUdBLEVBQUVBLENBQUNBO29CQUM5QkEsQ0FBQ0E7b0JBQUNBLElBQUlBLENBQUNBLENBQUNBO3dCQUVKQSxFQUFFQSxHQUFHQSxDQUFDQSxHQUFHQSxHQUFHQSxDQUFDQSxHQUFHQSxHQUFHQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTt3QkFDN0JBLEVBQUVBLEdBQUdBLElBQUlBLENBQUNBLElBQUlBLENBQUNBLEVBQUVBLENBQUNBLENBQUNBO3dCQUVuQkEsSUFBSUEsQ0FBQ0EsQ0FBQ0EsR0FBR0EsRUFBRUEsR0FBR0EsR0FBR0EsQ0FBQ0E7d0JBQ2xCQSxFQUFFQSxHQUFHQSxHQUFHQSxHQUFHQSxFQUFFQSxDQUFDQTt3QkFDZEEsSUFBSUEsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsR0FBR0EsR0FBR0EsQ0FBQ0EsR0FBR0EsRUFBRUEsQ0FBQ0E7d0JBQzFCQSxJQUFJQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxHQUFHQSxHQUFHQSxDQUFDQSxHQUFHQSxFQUFFQSxDQUFDQTt3QkFDMUJBLElBQUlBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBLEdBQUdBLEdBQUdBLENBQUNBLEdBQUdBLEVBQUVBLENBQUNBO29CQUM5QkEsQ0FBQ0E7Z0JBQ0xBLENBQUNBO2dCQUFDQSxJQUFJQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQSxHQUFHQSxHQUFHQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQTtvQkFFbkJBLEVBQUVBLEdBQUdBLENBQUNBLEdBQUdBLEdBQUdBLENBQUNBLEdBQUdBLEdBQUdBLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO29CQUM3QkEsRUFBRUEsR0FBR0EsSUFBSUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0E7b0JBRW5CQSxJQUFJQSxDQUFDQSxDQUFDQSxHQUFHQSxFQUFFQSxHQUFHQSxHQUFHQSxDQUFDQTtvQkFDbEJBLEVBQUVBLEdBQUdBLEdBQUdBLEdBQUdBLEVBQUVBLENBQUNBO29CQUNkQSxJQUFJQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxHQUFHQSxHQUFHQSxDQUFDQSxHQUFHQSxFQUFFQSxDQUFDQTtvQkFDMUJBLElBQUlBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBLEdBQUdBLEdBQUdBLENBQUNBLEdBQUdBLEVBQUVBLENBQUNBO29CQUMxQkEsSUFBSUEsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsR0FBR0EsR0FBR0EsQ0FBQ0EsR0FBR0EsRUFBRUEsQ0FBQ0E7Z0JBQzlCQSxDQUFDQTtnQkFBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7b0JBRUpBLEVBQUVBLEdBQUdBLENBQUNBLEdBQUdBLEdBQUdBLENBQUNBLEdBQUdBLEdBQUdBLEdBQUdBLENB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RUFBRUEsQ0FBQ0E7WUFDeEJBLEVBQUVBLENBQUNBLENBQUNBLEdBQUdBLEtBQUtBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO2dCQUNaQSxJQUFJQSxDQUFDQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtnQkFDN0JBLElBQUlBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO1lBQ2ZBLENBQUNBO1lBQUNBLElBQUlBLENBQUNBLENBQUNBO2dCQUNKQSxHQUFHQSxHQUFHQSxDQUFDQSxHQUFHQSxHQUFHQSxDQUFDQTtnQkFDZEEsSUFBSUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsR0FBR0EsQ0FBQ0E7Z0JBQ2RBLElBQUlBLENBQUNBLENBQUNBLElBQUlBLEdBQUdBLENBQUNBO2dCQUNkQSxJQUFJQSxDQUFDQSxDQUFDQSxJQUFJQSxHQUFHQSxDQUFDQTtnQkFDZEEsSUFBSUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsR0FBR0EsQ0FBQ0E7WUFDbEJBLENBQUNBO1lBRURBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBO1FBQ2hCQSxDQUFDQTtRQWFNWCwyQkFBTUEsR0FBYkE7WUFDSVksSUFBSUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0E7WUFFZkEsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDWEEsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDWEEsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDWEEsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFFWEEsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDcERBLENBQUNBO1FBR01aLG9DQUFlQSxHQUF0QkEsVUFBdUJBLE1BQWNBO1lBQ2pDYSxJQUFJQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQTtZQUNiQSxJQUFJQSxDQUFDQSxHQUFHQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUNqQkEsSUFBSUEsQ0FBQ0EsR0FBR0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDakJBLElBQUlBLENBQUNBLEdBQUdBLE1BQU1BLENBQUNBLENBQUNBLENBQUNBO1lBRWpCQSxJQUFJQSxFQUFFQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUNiQSxJQUFJQSxFQUFFQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUNiQSxJQUFJQSxFQUFFQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUNiQSxJQUFJQSxFQUFFQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUliQSxJQUFJQSxFQUFFQSxHQUFJQSxFQUFFQSxHQUFHQSxDQUFDQSxHQUFHQSxFQUFFQSxHQUFHQSxDQUFDQSxHQUFHQSxFQUFFQSxHQUFHQSxDQUFDQSxDQUFDQTtZQUNuQ0EsSUFBSUEsRUFBRUEsR0FBSUEsRUFBRUEsR0FBR0EsQ0FBQ0EsR0FBR0EsRUFBRUEsR0FBR0EsQ0FBQ0EsR0FBR0EsRUFBRUEsR0FBR0EsQ0FBQ0EsQ0FBQ0E7WUFDbkNBLElBQUlBLEVBQUVBLEdBQUlBLEVBQUVBLEdBQUdBLENBQUNBLEdBQUdBLEVBQUVBLEdBQUdBLENBQUNBLEdBQUdBLEVBQUVBLEdBQUdBLENBQUNBLENBQUNBO1lBQ25DQSxJQUFJQSxFQUFFQSxHQUFHQSxDQUFFQSxFQUFFQSxHQUFHQSxDQUFDQSxHQUFHQSxFQUFFQSxHQUFHQSxDQUFDQSxHQUFHQSxFQUFFQSxHQUFHQSxDQUFDQSxDQUFDQTtZQUlwQ0EsTUFBTUEsQ0FBQ0EsVUFBT0EsQ0FBQ0EsTUFBTUEsQ0FDakJBLEVBQUVBLEdBQUdBLEVBQUVBLEdBQUdBLEVBQUVBLEdBQUdBLENBQUVBLEVBQUVBLEdBQUdBLEVBQUVBLEdBQUdBLENBQUVBLEVBQUVBLEdBQUdBLEVBQUVBLEdBQUdBLENBQUVBLEVBQUVBLEVBQzNDQSxFQUFFQSxHQUFHQSxFQUFFQSxHQUFHQSxFQUFFQSxHQUFHQSxDQUFFQSxFQUFFQSxHQUFHQSxFQUFFQSxHQUFHQSxDQUFFQSxFQUFFQSxHQUFHQSxFQUFFQSxHQUFHQSxDQUFFQSxFQUFFQSxFQUMzQ0EsRUFBRUEsR0FBR0EsRUFBRUEsR0FBR0EsRUFBRUEsR0FBR0EsQ0FBRUEsRUFBRUEsR0FBR0EsRUFBRUEsR0FBR0EsQ0FBRUEsRUFBRUEsR0FBR0EsRUFBRUEsR0FBR0EsQ0FBRUEsRUFBRUEsQ0FDOUNBLENBQUNBO1FBQ05BLENBQUNBO1FBRU1iLHdCQUFHQSxHQUFWQSxVQUFXQSxDQUFRQSxFQUFFQSxDQUFRQSxFQUFFQSxDQUFRQSxFQUFFQSxDQUFRQTtZQUM3Q2MsSUFBSUEsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7WUFDWEEsSUFBSUEsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7WUFDWEEsSUFBSUEsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7WUFDWEEsSUFBSUEsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7UUFDZkEsQ0FBQ0E7UUFFTWQsd0JBQUdBLEdBQVZBLFVBQVdBLElBQWVBO1lBQ3RCZSxJQUFJQSxNQUFNQSxHQUFHQSxJQUFJQSxDQUFDQSxJQUFJQSxFQUFFQSxDQUFDQSxNQUFNQSxFQUFFQSxDQUFDQSxRQUFRQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtZQUVqREEsSUFBSUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsRUFBRUEsTUFBTUEsQ0FBQ0EsQ0FBQ0EsRUFBRUEsTUFBTUEsQ0FBQ0EsQ0FBQ0EsRUFBRUEsTUFBTUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFFakRBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBO1FBQ2hCQSxDQUFDQTtRQVVNZixtQ0FBY0EsR0FBckJBO1lBQ0lnQixJQUFJQSxDQUFDQSxFQUFFQSxDQUFDQSxFQUFFQSxDQUFDQSxFQUFFQSxFQUFFQSxFQUFFQSxFQUFFQSxFQUFFQSxFQUFFQSxFQUFFQSxFQUFFQSxFQUFFQSxFQUFFQSxDQUFDQTtZQUVoQ0EsRUFBRUEsR0FBR0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDWkEsRUFBRUEsR0FBR0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDWkEsRUFBRUEsR0FBR0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDWkEsRUFBRUEsR0FBR0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFFWkEsRUFBRUEsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsRUFBRUEsR0FBR0EsRUFBRUEsR0FBR0EsRUFBRUEsR0FBR0EsRUFBRUEsQ0FBQ0EsQ0FBQ0E7WUFDN0JBLEVBQUVBLENBQUNBLENBQUNBLEVBQUVBLElBQUlBLENBQUNBLE9BQU9BLENBQUNBLENBQUNBLENBQUNBO2dCQUNqQkEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsRUFBRUEsRUFBRUEsRUFBRUEsQ0FBQ0EsQ0FBQ0E7Z0JBQzNCQSxDQUFDQSxHQUFHQSxDQUFDQSxJQUFJQSxDQUFDQSxFQUFFQSxHQUFHQSxDQUFDQSxDQUFDQTtnQkFDakJBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO1lBQ1ZBLENBQUNBO1lBQUNBLElBQUlBLENBQUNBLEVBQUVBLENBQUNBLENBQUNBLEVBQUVBLElBQUlBLE9BQU9BLENBQUNBLENBQUNBLENBQUNBO2dCQUN2QkEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsRUFBRUEsRUFBRUEsRUFBRUEsQ0FBQ0EsQ0FBQ0E7Z0JBQzNCQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQSxFQUFFQSxHQUFHQSxDQUFDQSxDQUFDQTtnQkFDaEJBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO1lBQ1ZBLENBQUNBO1lBQUNBLElB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QSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxJQUFJQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtZQUNsQ0EsTUFBTUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsS0FBS0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7WUFDN0JBLE1BQU1BLENBQUNBLE1BQU1BLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLEtBQUtBLEdBQUdBLENBQUNBLENBQUNBO1lBQzdCQSxNQUFNQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxHQUFHQSxDQUFDQTtZQUN2QkEsTUFBTUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsSUFBSUEsR0FBR0EsQ0FBQ0EsQ0FBQ0E7WUFDNUJBLE1BQU1BLENBQUNBLE1BQU1BLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLEtBQUtBLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO1lBQ25DQSxNQUFNQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxLQUFLQSxHQUFHQSxDQUFDQSxDQUFDQTtZQUM3QkEsTUFBTUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsR0FBR0EsQ0FBQ0E7WUFDdkJBLE1BQU1BLENBQUNBLE1BQU1BLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLElBQUlBLEdBQUdBLENBQUNBLENBQUNBO1lBQzVCQSxNQUFNQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxLQUFLQSxHQUFHQSxDQUFDQSxDQUFDQTtZQUM3QkEsTUFBTUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsS0FBS0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7WUFDcENBLE1BQU1BLENBQUNBLE1BQU1BLENBQUNBLEVBQUVBLENBQUNBLEdBQUdBLEdBQUdBLENBQUNBO1lBQ3hCQSxNQUFNQSxDQUFDQSxNQUFNQSxDQUFDQSxFQUFFQSxDQUFDQSxHQUFHQSxJQUFJQSxHQUFHQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUNsQ0EsTUFBTUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsR0FBR0EsS0FBS0EsR0FBR0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDbkNBLE1BQU1BLENBQUNBLE1BQU1BLENBQUNBLEVBQUVBLENBQUNBLEdBQUdBLEtBQUtBLEdBQUdBLElBQUlBLENBQUNBLENBQUNBLENBQUNBO1lBQ25DQSxNQUFNQSxDQUFDQSxNQUFNQSxDQUFDQSxFQUFFQSxDQUFDQSxHQUFHQSxHQUFHQSxDQUFDQTtZQUV4QkEsTUFBTUEsQ0FBQ0EsTUFBTUEsQ0FBQ0E7UUFDbEJBLENBQUNBO1FBRU1ILHlCQUFTQSxHQUFoQkE7WUFDSUksSUFBSUEsSUFBSUEsR0FBR0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDNUhBLElBQUlBLFNBQVNBLEdBQUdBLENBQUNBLENBQUNBO1lBRWxCQSxFQUFFQSxDQUFDQSxDQUFDQSxJQUFJQSxLQUFLQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFDYkEsU0FBU0EsR0FBR0EsR0FBR0EsR0FBR0EsSUFBSUEsQ0FBQ0E7WUFDM0JBLENBQUNBO1lBRURBLElBQUlBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBLElBQUlBLFNBQVNBLENBQUNB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QkEsTUFBTUEsR0FBR0EsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0E7Z0JBQ3JCQSxXQUFXQSxHQUFHQSxJQUFJQSxDQUFDQSxXQUFXQSxDQUFDQTtZQUNuQ0EsQ0FBQ0E7WUFDREEsSUFBSUEsQ0FBQ0EsRUFBRUEsQ0FBQUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsTUFBTUEsS0FBS0EsQ0FBQ0EsQ0FBQ0EsQ0FBQUEsQ0FBQ0E7Z0JBQ3ZCQSxJQUFJQSxRQUFRQSxHQUFHQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQSxFQUNsQkEsUUFBUUEsR0FBR0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBRXZCQSxNQUFNQSxHQUFHQSxZQUFTQSxDQUFDQSxTQUFTQSxDQUFDQSxRQUFRQSxFQUFFQSxRQUFRQSxDQUFDQSxDQUFDQTtnQkFDakRBLFdBQVdBLEdBQUdBLFlBQVNBLENBQUNBLGNBQWNBLENBQUNBLFFBQVFBLEVBQUVBLFFBQVFBLENBQUNBLENBQUNBO1lBQy9EQSxDQUFDQTtZQUVEQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxTQUFTQSxFQUFFQSxNQUFNQSxDQUFDQSxDQUFDQTtZQUM3QkEsT0FBT0EsR0FBR0EsVUFBT0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsRUFBRUEsSUFBSUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsRUFBRUEsSUFBSUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFFL0VBLElBQUlBLENBQUNBLElBQUlBLENBQUNBLElBQUlBLEVBQUVBLE1BQU1BLENBQUNBLENBQUNBO1lBRXhCQSxFQUFFQSxDQUFDQSxDQUFDQSxPQUFPQSxDQUFDQSxDQUFDQSxHQUFHQSxXQUFXQSxDQUFDQSxDQUFDQSxJQUFJQSxJQUFJQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFDM0NBLE1BQU1BLENBQUNBLEtBQUtBLENBQUNBO1lBQ2pCQSxDQUFDQTtZQUNEQSxFQUFFQSxDQUFDQSxDQUFDQSxPQUFPQSxDQUFDQSxDQUFDQSxHQUFHQSxXQUFXQSxDQUFDQSxDQUFDQSxJQUFJQSxJQUFJQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFDM0NBLE1BQU1BLENBQUNBLEtBQUtBLENBQUNBO1lBQ2pCQSxDQUFDQTtZQUNEQSxFQUFFQSxDQUFDQSxDQUFDQSxPQUFPQSxDQUFDQSxDQUFDQSxHQUFHQSxXQUFXQSxDQUFDQSxDQUFDQSxJQUFJQSxJQUFJQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFDM0NBLE1BQU1BLENBQUNBLEtBQUtBLENBQUNBO1lBQ2pCQSxDQUFDQTtZQUVEQSxNQUFNQSxHQUFHQSxVQUFPQSxDQUFDQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxHQUFHQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQSxFQUFFQSxJQUFJQSxDQUFDQSxHQUFHQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQSxFQUFFQSxJQUFJQSxDQUFDQSxHQUFHQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUNwRkEsS0FBS0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsTUFBTUEsRUFBRUEsSUFBSUEsQ0FBQ0EsQ0FBQ0E7WUFDMUJBLEtBQUtBLENBQUNBLEdBQUdBLENBQUNBLElBQUlBLENBQUNBLEdBQUdBLENBQUNBLEtBQUtBLENBQUNBLENBQUNBLENBQUNBLEVBQUVBLElBQUlBLENBQUNBLEdBQUdBLENBQUNBLEtBQUtBLENBQUNBLENBQUNBLENBQUNBLEVBQUVBLElBQUlBLENBQUNBLEdBQUdBLENBQUNBLEtBQUtBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1lBRW5FQSxFQUFFQSxDQUFDQSxDQUFDQSxLQUFLQSxDQUFDQSxDQUFDQSxHQUFHQSxXQUFXQSxDQUFDQSxDQUFDQSxHQUFHQSxNQUFNQSxDQUFDQSxDQUFDQSxHQUFHQSxXQUFXQSxDQUFDQSxDQUFDQSxHQUFHQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFDaEVBLE1BQU1BLENBQUNBLEtBQUtBLENBQUNBO1lBQ2pCQSxDQUFDQTtZQUNEQSxFQUFFQSxDQUFDQSxDQUFDQSxLQUFLQSxDQUFDQSxDQUFDQSxHQUFHQSxXQUFXQSxDQUFDQSxDQUFDQSxHQUFHQSxNQUFNQSxDQUFDQSxDQUFDQSxHQUFHQSxXQUFXQSxDQUFDQSxDQUFDQSxHQUFHQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFDaEVBLE1BQU1BLENBQUNBLEtBQUtBLENBQUNBO1lBQ2pCQSxDQUFDQTtZQUNEQSxFQUFFQSxDQUFDQSxDQUFDQSxLQUFLQSxDQUFDQSxDQUFDQSxHQUFHQSxXQUFXQSxDQUFDQSxDQUFDQSxHQUFHQSxNQUFNQSxDQUFDQSxDQUFDQSxHQUFHQSxXQUFXQSxDQUFDQSxDQUFDQSxHQUFHQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFDaEVBLE1BQU1BLENBQUNBLEtBQUtBLENBQUNBO1lBQ2pCQSxDQUFDQTtZQUVEQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQTtRQUNoQkEsQ0FBQ0E7UUFFTUgsbUNBQXFCQSxHQUE1QkEsVUFBNkJBLE1BQWtCQTtZQUMzQ0ksSUFBSUEsTUFBTUEsR0FBV0EsTUFBTUEsQ0FBQ0EsTUFBTUEsRUFDOUJBLE1BQU1BLEdBQVVBLE1BQU1BLENBQUNBLE1BQU1BLEVBQzdCQSxJQUFJQSxHQUFHQSxVQUFPQSxDQUFDQSxNQUFNQSxFQUFFQSxFQUN2QkEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsRUFDTEEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsRUFDTEEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsRUFDTEEsS0FBS0EsR0FBR0EsQ0FBQ0EsRUFDVEEsU0FBU0EsR0FBR0EsSUFBSUEsQ0FBQ0EsT0FBT0EsRUFDeEJBLE1BQU1BLEdBQUdBLElBQUlB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QUFBLENBQUNBLElBQUlBLENBQUNBLE1BQU1BLEtBQUtBLENBQUNBLElBQUlBLElBQUlBLENBQUNBLENBQUNBLENBQUNBLFlBQVlBLGVBQVlBLENBQUNBLENBQUFBLENBQUNBO2dCQUMxREEsSUFBSUEsTUFBTUEsR0FBR0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBRXJCQSxJQUFJQSxDQUFDQSxXQUFXQSxDQUFDQSxXQUFXQSxDQUFDQSxVQUFDQSxJQUE2Q0EsRUFBRUEsR0FBVUE7b0JBQ25GQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxHQUFHQSxFQUFFQSxNQUFNQSxFQUFFQSxJQUFJQSxDQUFDQSxDQUFDQTtnQkFDNUNBLENBQUNBLENBQUNBLENBQUNBO1lBQ1BBLENBQUNBO1lBQ0RBLElBQUlBLENBQUNBLEVBQUVBLENBQUFBLENBQUNBLElBQUlBLENBQUNBLE1BQU1BLEtBQUtBLENBQUNBLElBQUlBLGFBQVVBLENBQUNBLFFBQVFBLENBQUNBLElBQUlBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLENBQUFBLENBQUNBO2dCQUN2REEsSUFBSUEsU0FBU0EsR0FBR0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsRUFDbkJBLE9BQU9BLEdBQUdBLElBQUlBLENBQUNBLENBQUNBLENBQUNBLEVBQ2pCQSxJQUFJQSxHQUE0Q0EsSUFBSUEsQ0FBQ0E7Z0JBR3pEQSxFQUFFQSxDQUFBQSxDQUFDQSxJQUFJQSxDQUFDQSxXQUFXQSxDQUFDQSxRQUFRQSxDQUFDQSxTQUFTQSxDQUFDQSxDQUFDQSxDQUFBQSxDQUFDQTtvQkFDckNBLElBQUlBLEdBQUdBLElBQUlBLENBQUNBLFdBQVdBLENBQUNBLFFBQVFBLENBQUNBLFNBQVNBLENBQUNBLENBQUNBO29CQUU1Q0EsSUFBSUEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsTUFBTUEsRUFBRUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsV0FBV0EsQ0FBQ0EsVUFBQ0EsR0FBMkJBO3dCQUMzRUEsTUFBTUEsQ0FB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U0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsQ0FBQ0E7SUFDMURBLE1BQU1BLENBQUNBLFFBQVFBLENBQU1BLFlBQVNBLENBQUNBLFNBQVNBLEVBQUVBLFlBQVNBLENBQUNBLEtBQUtBLENBQUNBLENBQUNBO0lBQzNEQSxNQUFNQSxDQUFDQSxRQUFRQSxDQUFNQSxZQUFTQSxDQUFDQSxTQUFTQSxFQUFFQSxZQUFTQSxDQUFDQSxLQUFLQSxDQUFDQSxDQUFDQTtJQUMzREEsTUFBTUEsQ0FBQ0EsUUFBUUEsQ0FBTUEsWUFBU0EsQ0FBQ0EsT0FBT0EsRUFBRUEsWUFBU0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsQ0FBQ0E7SUFDekRBLE1BQU1BLENBQUNBLFFBQVFBLENBQU1BLFlBQVNBLENBQUNBLFVBQVVBLEVBQUVBLFlBQVNBLENBQUNBLEtBQUtBLENBQUNBLENBQUNBO0lBQzVEQSxNQUFNQSxDQUFDQSxRQUFRQSxDQUFNQSxZQUFTQSxDQUFDQSxTQUFTQSxFQUFFQSxZQUFTQSxDQUFDQSxLQUFLQSxDQUFDQSxDQUFDQTtJQUUzREEsTUFBTUEsQ0FBQ0EsUUFBUUEsQ0FBTUEsWUFBU0EsQ0FBQ0EsT0FBT0EsRUFBRUEsWUFBU0EsQ0FBQ0EsUUFBUUEsQ0FBQ0EsQ0FBQ0E7SUFDNURBLE1BQU1BLENBQUNBLFFBQVFBLENBQU1BLFlBQVNBLENBQUNBLFFBQVFBLEVBQUVBLFlBQVNBLENBQUNBLFFBQVFBLENBQUNBLENBQUNBO0lBQzdEQSxNQUFNQSxDQUFDQSxRQUFRQSxDQUFNQSxZQUFTQSxDQUFDQSxLQUFLQSxFQUFFQSxZQUFTQSxDQUFDQSxRQUFRQSxDQUFDQSxDQUFDQTtJQUUxREE7UUFBQXllO1FBVUFDLENBQUNBO1FBVGlCRCx1QkFBWUEsR0FBMUJBLFVBQTJCQSxTQUFtQkE7WUFDMUNFLElBQUlBLE1BQU1BLEdBQUdBLE1BQU1BLENBQUNBLFFBQVFBLENBQU1BLFNBQVNBLENBQUNBLENBQUNBO1lBRTdDQSxFQUFFQSxDQUFBQSxDQUFDQSxNQUFNQSxLQUFLQSxLQUFLQSxDQUFDQSxDQUFDQSxDQUFBQSxDQUFD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QUFXQSxDQUFDQSxJQUFJQSxDQUFDQTs0QkFDL0JBLEtBQUtBLENBQUNBO3dCQUNWQSxLQUFLQSxDQUFDQTs0QkFDRkEsV0FBV0EsR0FBR0EsZ0JBQVdBLENBQUNBLEtBQUtBLENBQUNBOzRCQUNoQ0EsS0FBS0EsQ0FBQ0E7d0JBQ1ZBLEtBQUtBLENBQUNBOzRCQUNGQSxXQUFXQSxHQUFHQSxnQkFBV0EsQ0FBQ0EsTUFBTUEsQ0FBQ0E7NEJBQ2pDQSxLQUFLQSxDQUFDQTt3QkFDVkE7NEJBQ0lBLFFBQUdBLENBQUNBLEtBQUtBLENBQUNBLElBQUlBLEVBQUVBLFFBQUdBLENBQUNBLElBQUlBLENBQUNBLGdCQUFnQkEsQ0FBQ0Esb0JBQW9CQSxDQUFDQSxDQUFDQSxDQUFDQTs0QkFDakVBLEtBQUtBLENBQUNBO29CQUNkQSxDQUFDQTtnQkFDTEEsQ0FBQ0E7Z0JBQ0RBLElBQUlBLENBQUNBLENBQUNBO29CQUNGQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQTt3QkFDZkEsS0FBS0EsQ0FBQ0E7NEJBQ0ZBLFdBQVdBLEdBQUdBLGdCQUFXQSxDQUFDQSxJQUFJQSxDQUFDQTs0QkFDL0JBLEtBQUtBLENBQUNBO3dCQUNWQSxLQUFLQSxDQUFDQTs0QkFDRkEsV0FBV0EsR0FBR0EsZ0JBQVdBLENBQUNBLEtBQUtBLENBQUNBOzRCQUNoQ0EsS0FBS0EsQ0FBQ0E7d0JBQ1ZBLEtBQUtBLENBQUNBOzRCQUNGQSxXQUFXQSxHQUFHQSxnQkFBV0EsQ0FBQ0EsTUFBTUEsQ0FBQ0E7NEJBQ2pDQSxLQUFLQSxDQUFDQTt3QkFDVkE7NEJBQ0lBLFFBQUdBLENBQUNBLEtBQUtBLENBQUNBLElBQUlBLEVBQUVBLFFBQUdBLENBQUNBLElBQUlBLENBQUNBLGdCQUFnQkEsQ0FBQ0Esb0JBQW9CQSxDQUFDQSxDQUFDQSxDQUFDQTs0QkFDakVBLEtBQUtBLENBQUNBO29CQUNkQSxDQUFDQTtnQkFDTEEsQ0FBQ0E7Z0JBRURBLE1BQU1BLENBQUNBLFdBQVdBLENBQUNBO1lBQ3ZC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UEEsRUFBRUEsRUFBRUEsR0FBR0E7UUFDUEEsRUFBRUEsRUFBRUEsR0FBR0E7UUFDUEEsRUFBRUEsRUFBRUEsR0FBR0E7UUFDUEEsRUFBRUEsRUFBRUEsR0FBR0E7UUFDUEEsRUFBRUEsRUFBRUEsR0FBR0E7UUFDUEEsRUFBRUEsRUFBRUEsR0FBR0E7UUFDUEEsRUFBRUEsRUFBRUEsR0FBR0E7UUFDUEEsRUFBRUEsRUFBRUEsR0FBR0E7UUFDUEEsRUFBRUEsRUFBRUEsR0FBR0E7UUFDUEEsRUFBRUEsRUFBRUEsR0FBR0E7UUFDUEEsRUFBRUEsRUFBRUEsR0FBR0E7UUFDUEEsRUFBRUEsRUFBRUEsR0FBR0E7UUFDUEEsRUFBRUEsRUFBRUEsR0FBR0E7UUFDUEEsRUFBRUEsRUFBRUEsR0FBR0E7UUFDUEEsRUFBRUEsRUFBRUEsR0FBR0E7UUFDUEEsRUFBRUEsRUFBRUEsR0FBR0E7UUFDUEEsRUFBRUEsRUFBRUEsR0FBR0E7UUFDUEEsRUFBRUEsRUFBRUEsR0FBR0E7UUFDUEEsRUFBRUEsRUFBRUEsR0FBR0E7UUFDUEEsRUFBRUEsRUFBRUEsR0FBR0E7UUFDUEEsRUFBRUEsRUFBRUEsR0FBR0E7UUFDUEEsRUFBRUEsRUFBRUEsR0FBR0E7UUFDUEEsRUFBRUEsRUFBRUEsR0FBR0E7UUFDUEEsRUFBRUEsRUFBRUEsR0FBR0E7UUFDUEEsRUFBRUEsRUFBRUEsR0FBR0E7UUFDUEEsRUFBRUEsRUFBRUEsR0FBR0E7UUFDUEEsRUFBRUEsRUFBRUEsR0FBR0E7UUFDUEEsRUFBRUEsRUFBRUEsR0FBR0E7UUFDUEEsRUFBRUEsRUFBRUEsR0FBR0E7UUFDUEEsR0FBR0EsRUFBRUEsR0FBR0E7UUFDUkEsR0FBR0EsRUFBRUEsR0FBR0E7UUFDUkEsR0FBR0EsRUFBRUEsR0FBR0E7UUFDUkEsR0FBR0EsRUFBRUEsR0FBR0E7UUFDUkEsR0FBR0EsRUFBRUEsR0FBR0E7UUFDUkEsR0FBR0EsRUFBRUEsR0FBR0E7UUFDUkEsR0FBR0EsRUFBRUEsR0FBR0E7UUFDUkEsR0FBR0EsRUFBRUEsR0FBR0E7UUFDUkEsR0FBR0EsRUFBRUEsR0FBR0E7UUFDUkEsR0FBR0EsRUFBRUEsR0FBR0E7UUFDUkEsR0FBR0EsRUFBRUEsR0FBR0E7UUFDUkEsR0FBR0EsRUFBRUEsSUFBSUE7UUFDVEEsR0FBR0EsRUFBRUEsSUFBSUE7UUFDVEEsR0FBR0EsRUFBRUEsSUFBSUE7UUFDVEEsR0FBR0EsRUFBRUEsSUFBSUE7UUFDVEEsR0FBR0EsRUFBRUEsSUFBSUE7UUFDVEEsR0FBR0EsRUFBRUEsSUFBSUE7UUFDVEEsR0FBR0EsRUFBRUEsSUFBSUE7UUFDVEEsR0FBR0EsRUFBRUEsSUFBSUE7UUFDVEEsR0FBR0EsRUFBRUEsSUFBSUE7UUFDVEEsR0FBR0EsRUFBRUEsS0FBS0E7UUFDVkEsR0FBR0EsRUFBRUEsS0FBS0E7UUFDVkEsR0FBR0EsRUFBRUEsS0FBS0E7UUFDVkEsR0FBR0EsRUFBRUEsU0FBU0E7UUFDZEEsR0FBR0EsRUFBRUEsUUFBUUE7UUFDYkEsR0FBR0EsRUFBRUEsR0FBR0E7UUFDUkEsR0FBR0EsRUFBRUEsR0FBR0E7UUFDUkEsR0FBR0EsRUFBRUEsR0FBR0E7UUFDUkEsR0FBR0EsRUFBRUEsR0FBR0E7UUFDUkEsR0FBR0EsRUFBRUEsR0FBR0E7UUFDUkEsR0FBR0EsRUFBRUEsR0FBR0E7UUFDUkEsR0FBR0EsRUFBRUEsR0FBR0E7UUFDUkEsR0FBR0EsRUFBRUEsR0FBR0E7UUFDUkEsR0FBR0EsRUFBRUEsR0FBR0E7UUFDUkEsR0FBR0EsRUFBRUEsSUFBSUE7UUFDVEEsR0FBR0EsRUFBRUEsR0FBR0E7UUFDUkEsR0FBR0EsRUFBRUEsR0FBR0E7S0FDWEEsRUFDREEsYUFBYUEsR0FBR0E7UUFDWkEsR0FBR0EsRUFBRUEsR0FBR0E7UUFDUkEsR0FBR0EsRUFBRUEsR0FBR0E7UUFDUkEsR0FBR0EsRUFBRUEsR0FBR0E7UUFDUkEsR0FBR0EsRUFBRUEsR0FBR0E7UUFDUkEsR0FBR0EsRUFBRUEsR0FBR0E7UUFDUkEsR0FBR0EsRUFBRUEsR0FBR0E7UUFDUkEsR0FBR0EsRUFBRUEsR0FBR0E7UUFDUkEsR0FBR0EsRUFBRUEsR0FBR0E7UUFD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QUFJQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFBQSxDQUFDQTtnQkFDdkRBLElBQUlBLFNBQVNBLEdBQUdBLElBQUlBLENBQUNBLENBQUNBLENBQUNBLEVBQ25CQSxPQUFPQSxHQUFHQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFFdEJBLHNCQUFtQkEsQ0FBQ0Esa0JBQWtCQSxDQUFDQSxhQUFVQSxDQUFDQSxZQUFZQSxDQUFDQSxTQUFTQSxDQUFDQSxDQUFDQTtxQkFDckVBLEdBQUdBLENBQUNBLFNBQVNBLEVBQUVBLE9BQU9BLENBQUNBLENBQUNBO1lBQ2pDQSxDQUFDQTtZQUNEQSxJQUFJQSxDQUFDQSxFQUFFQSxDQUFBQSxDQUFDQSxJQUFJQSxDQUFDQSxNQUFNQSxLQUFLQSxDQUFDQSxJQUFJQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQSxZQUFZQSxlQUFZQSxDQUFDQSxDQUFBQSxDQUFDQTtnQkFDMURBLElBQUlBLE1BQU1BLEdBQUdBLElBQUlBLENBQUNBLENBQUNBLENBQUNBLEVBQ2hCQSxTQUFTQSxHQUFHQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFFeEJBLHNCQUFtQkEsQ0FBQ0Esa0JBQWtCQSxDQUFDQSxhQUFVQSxDQUFDQSxZQUFZQSxDQUFDQSxTQUFTQSxDQUFDQSxDQUFDQTtxQkFDckVBLEdBQUdBLENBQUNBLE1BQU1BLEVBQUVBLFNBQVNBLENBQUNBLENBQUNBO1lBQ2hDQSxDQUFDQTtZQUNEQSxJQUFJQSxDQUFDQSxFQUFFQSxDQUFBQSxDQUFDQSxJQUFJQSxDQUFDQSxNQUFNQSxLQUFLQSxDQUFDQSxJQUFJQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQSxZQUFZQSxlQUFZQSxDQUFDQSxDQUFBQSxDQUFDQTtnQkFDMURBLElBQUlBLE1BQU1BLEdBQUdBLElBQUlBLENBQUNBLENBQUNBLENBQUNBLEVBQ2hCQSxTQUFTQSxHQUFHQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQSxFQUNuQkEsT0FBT0EsR0FBR0EsSUFBSUEsQ0FB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QUFJQSxDQUFDQSxFQUFFQSxDQUFBQSxDQUFDQSxJQUFJQSxDQUFDQSxNQUFNQSxLQUFLQSxDQUFDQSxJQUFJQSxhQUFVQSxDQUFDQSxLQUFLQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFBQSxDQUFDQTtnQkFDcERBLElBQUlBLEdBQUdBLEdBQUdBLElBQUlBLENBQUNBLENBQUNBLENBQUNBLEVBQ2JBLFFBQUtBLEdBQUdBLElBQUlBLENBQUNBLENBQUNBLENBQUNBLEVBQ2ZBLGVBQWVBLEdBQUdBLHFCQUFrQkEsQ0FBQ0EsV0FBV0EsRUFBRUEsQ0FBQ0E7Z0JBRXZEQSxlQUFlQSxDQUFDQSxPQUFPQSxDQUFDQSxHQUFHQSxFQUFFQSxRQUFLQSxDQUFDQSxDQUFDQTtZQUN4Q0EsQ0FBQ0E7WUFDREEsSUFBSUEsQ0FBQ0EsRUFBRUEsQ0FBQUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsTUFBTUEsS0FBS0EsQ0FBQ0EsQ0FBQ0EsQ0FBQUEsQ0FBQ0E7Z0JBQ3ZCQSxJQUFJQSxNQUFNQSxHQUFHQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQSxFQUNoQkEsUUFBS0EsR0FBR0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsRUFDZkEsUUFBUUEsR0FBR0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsRUFDbEJBLGVBQWVBLEdBQUdBLHdCQUFxQkEsQ0FBQ0EsV0FBV0EsRUFBRUEsQ0FBQ0E7Z0JBRTFEQSxlQUFlQSxDQUFDQSxPQUFPQSxDQUFDQSxNQUFNQSxFQUFFQSxRQUFLQSxFQUFFQSxRQUFRQSxDQUFDQSxDQUFDQTtZQUNyREEsQ0FBQ0E7WUFDREEsSUFBSUEsQ0FBQ0EsRUFBRUEsQ0FBQUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsTUFBTUEsS0FBS0EsQ0FBQ0EsQ0FBQ0EsQ0FBQUEsQ0FBQ0E7Z0JBQ3ZCQSxJQUFJQSxNQUFNQSxHQUFHQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQSxFQUNoQkEsUUFBS0EsR0FBR0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsRUFDZkEsUUFBUUEs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LFdBQU9BLENBQVBBLHNCQUFPQSxDQUFQQSxJQUFPQTtnQkFBUEEsNkJBQU9BOztZQUNqQkEsSUFBSUEsTUFBTUEsR0FBR0EsSUFBSUEsRUFDYkEsRUFBRUEsR0FBR0EsSUFBSUEsQ0FBQ0E7WUFFZEEsRUFBRUEsQ0FBQUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsTUFBTUEsS0FBS0EsQ0FBQ0EsQ0FBQ0EsQ0FBQUEsQ0FBQ0E7Z0JBQ2xCQSxNQUFNQSxHQUFHQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFDakJBLEVBQUVBLEdBQUdBLFVBQU9BLENBQUNBLEVBQUVBLENBQUNBO1lBQ3BCQSxDQUFDQTtZQUNEQSxJQUFJQSxDQUFDQSxFQUFFQSxDQUFBQSxDQUFDQSxJQUFJQSxDQUFDQSxNQUFNQSxLQUFLQSxDQUFDQSxDQUFDQSxDQUFBQSxDQUFDQTtnQkFDdkJBLE1BQU1BLEdBQUdBLElBQUlBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO2dCQUNqQkEsRUFBRUEsR0FBR0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDakJBLENBQUNBO1lBQ0RBLElBQUlBLENBQUNBLEVBQUVBLENBQUFBLENBQUNBLElBQUlBLENBQUNBLE1BQU1BLEtBQUtBLENBQUNBLENBQUNBLENBQUFBLENBQUNBO2dCQUN2QkEsTUFBTUEsR0FBR0EsVUFBT0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsRUFBRUEsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsRUFBRUEsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBQ25EQSxFQUFFQSxHQUFHQSxVQUFPQSxDQUFDQSxFQUFFQSxDQUFDQTtZQUNwQkEsQ0FBQ0E7WUFDREEsSUFBSUEsQ0FBQUEsQ0FBQ0E7Z0JBQ0RBLE1BQU1BLEdBQUdBLFVBQU9BLENBQUNBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLENBQUNBLENBQUNBLEVBQUVBLElBQUlBLENBQUNBLENBQUNBLENBQUNBLEVBQUVBLElBQUlBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO2dCQUNuREEsRUFBRUEsR0FBR0EsVUFBT0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsRUFBRUEsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsRUFBRUEsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDbkRBLENBQUNBO1lBRURBLElBQUlBLENBQUNBLFFBQVFBLEdBQUdBLGFBQVVBLENBQUNBLE1BQU1BLEVBQUVBLENBQUNBLGFBQWFBLENBQUNBLFVBQU9BLENBQUNBLE1BQU1BLEVBQUVBLENBQUNBLFNBQVNBLENBQUNBLElBQUlBLENBQUNBLFFBQVFBLEVBQUVBLE1BQU1BLEVBQUVBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBO1lBRXpHQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQTtRQUNoQkEsQ0FBQ0E7UUFFTzNCLDZDQUFtQkEsR0FBM0JBO1lBQ0k0QixJQUFJQSxDQUFDQSxXQUFXQSxHQUFHQSxLQUFLQSxDQUFDQTtZQUN6QkEsSUFBSUEsQ0FBQ0EsT0FBT0EsR0FBR0EsS0FBS0EsQ0FBQ0E7WUFDckJBLElBQUlBLENBQUNBLFFBQVFBLEdBQUdBLEtBQUtBLENBQUNBO1FBQzFCQSxDQUFDQTtRQUNMNUIsc0JBQUNBO0lBQURBLENBeFlBaHJCLEFBd1lDZ3JCLEVBeFlvQ2hyQixZQUFTQSxFQXdZN0NBO0lBeFlZQSxrQkFBZUEsa0JBd1kzQkEsQ0FBQUE7QUFDTEEsQ0FBQ0EsRUExWU0sRUFBRSxLQUFGLEVBQUUsUUEwWVI7QUMxWUQsSUFBTyxFQUFFLENBOFpSO0FBOVpELFdBQU8sRUFBRSxFQUFBLENBQUM7SUFDTkE7UUFBbUM2c0IsaUNBQVNBO1FBQTVDQTtZQUFtQ0MsOEJBQVNBO1lBT2hDQSxvQkFBZUEsR0FBV0EsSUFBSUEsQ0FBQ0E7WUFLL0JBLGlDQUE0QkEsR0FBV0EsVUFBT0EsQ0FBQ0EsTUFBTUEsRUFBRUEsQ0FBQ0E7WUFLeERBLGNBQVNBLEdBQVdBLFVBQU9BLENBQUNBLE1BQU1BLEVBQUVBLENBQUNBO1lBaUJyQ0EsY0FBU0EsR0FBVUEsQ0FBQ0EsQ0FBQ0E7WUFjckJBLFdBQU1BLEdBQVdBLFVBQU9BLENBQUNBLE1BQU1BLENBQUNBLENBQUNBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBO1lBb0J0Q0EsbUJBQWNBLEdBQVdBLFVBQU9BLENBQUNBLE1BQU1BLENBQUNBLENBQUNBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBO1lBVTlDQSxnQkFBV0EsR0FBV0EsVUFBT0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFZM0NBLGFBQVFBLEdBQVdBLFVBQU9BLENBQUNBLE1BQU1BLENBQUNBLEdBQUdBLEVBQUVBLEdBQUdBLENBQUNBLENBQUNBO1lBNkI1Q0EsYUFBUUEsR0FBV0EsVUFBT0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsR0FBR0EsRUFBRUEsR0FBR0EsQ0FBQ0EsQ0FBQ0E7WUE2QjVDQSxXQUFNQSxHQUFVQSxJQUFJQSxDQUFDQTtZQVlyQkEsWUFBT0EsR0FBVUEsSUFBSUEsQ0FBQ0E7WUFnQnRCQSxpQkFBWUEsR0FBV0EsS0FBS0EsQ0FBQ0E7WUFpQjdCQSxjQUFTQSxHQUFXQSxLQUFLQSxDQUFDQTtZQWdCMUJBLGFBQVFBLEdBQVdBLEtBQUtBLENBQUNBO1lBZ0IxQkEsa0JBQWFBLEdBQVdBLElBQUlBLENBQUNBO1lBQzdCQSwwQkFBcUJBLEdBQVdBLElBQUlBLENBQUNBO1lBQ3JDQSxVQUFLQSxHQUFXQSxVQUFPQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUNyQ0EsV0FBTUEsR0FBVUEsQ0FBQ0EsQ0FBQ0E7WUFLakJBLHlCQUFvQkEsR0FBV0EsVUFBT0EsQ0FBQ0EsTUFBTUEsRUFBRUEsQ0FBQ0E7WUFDaERBLHlCQUFvQkEsR0FBV0EsVUFBT0EsQ0FBQ0EsTUFBTUEsRUFBRUEsQ0FBQ0E7UUFrTDVEQSxDQUFDQTtRQTNaaUJELG9CQUFNQSxHQUFwQkE7WUFDSUUsSUFBSUEsR0FBR0EsR0FBR0EsSUFBSUEsSUFBSUEsRUFBRUEsQ0FBQ0E7WUFFckJBLE1BQU1BLENBQUNBLEdBQUdBLENBQUNBO1FBQ2ZBLENBQUNBO1FBR0RGLHNCQUFJQSx5Q0FBY0E7aUJBQWxCQTtnQkFDSUcsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsY0FBY0EsRUFBRUEsaUJBQWlCQSxDQUFDQSxDQUFDQTtZQUM3REEsQ0FBQ0E7OztXQUFBSDtRQUdEQSxzQkFBSUEsc0RBQTJCQTtpQkFBL0JBO2dCQUNJSSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxTQUFTQSxDQUFDQSxzQkFBc0JBLEVBQUVBLDhCQUE4QkEsQ0FBQ0EsQ0FBQ0E7WUFDbEZBLENBQUNBOzs7V0FBQUo7UUFHREEsc0JBQUlBLG1DQUFRQTtpQkFBWkE7Z0JBQ0lLLElBQUlBLENBQUNBLFNBQVNBLEdBQUdBLElBQUlBLENBQUNBLDJCQUEyQkEsQ0FBQ0EsY0FBY0EsRUFBRUEsQ0FBQ0E7Z0JBRW5FQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxTQUFTQSxDQUFDQTtZQUMxQkEsQ0FBQ0E7aUJBQ0RMLFVBQWFBLFFBQWdCQTtnQkFDekJLLEVBQUVBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLFFBQVFBLEtBQUtBLElBQUlBLENBQUNBLENBQUNBLENBQUNBO29CQUN6QkEsSUFBSUEsQ0FBQ0EsY0FBY0EsR0FBR0EsUUFBUUEsQ0FBQ0EsSUFBSUEsRUFBRUEsQ0FBQ0E7Z0JBQzFDQSxDQUFDQTtnQkFDREEsSUFBSUEsQ0FBQ0EsQ0FBQ0E7b0JBQ0ZBLElBQUlBLENBQUNBLGNBQWNBLEdBQUdBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLDJCQUEyQkEsQ0FBQ0EsSUFBSUEsRUFBRUEsQ0FBQ0EsTUFBTUEsRUFBRUEsQ0FBQ0EsYUFBYUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsQ0FBQ0E7Z0JBQzVHQSxDQUFDQTtnQkFFREEsSUFBSUEsQ0FBQ0EsV0FBV0EsR0FBR0EsSUFBSUEsQ0FBQ0E7WUFDNUJBLENBQUNBOzs7V0FWQUw7UUFhREEsc0JBQUlBLG1DQUFRQTtpQkFBWkE7Z0JBQ0lNLElBQUlBLENBQUNBLFNBQVNBLEdBQUdBLElBQUlBLENBQUNBLGNBQWNBLENBQUNBLFdBQVdBLEVBQUVBLENBQUNBO2dCQUVuREEsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsU0FBU0EsQ0FBQ0E7WUFDMUJBLENBQUNBO2lCQUNETixVQUFhQSxLQUFZQTtnQkFDckJNLElBQUlBLENBQUNBLGFBQWFBLEVBQUVBLENBQUNBO2dCQUNyQkEsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsQ0FBQ0E7Z0JBRW5CQSxJQUFJQSxDQUFDQSxhQUFhQSxHQUFHQSxJQUFJQSxDQUFDQTtnQkFDMUJBLElBQUlBLENBQUNBLFFBQVFBLEdBQUdBLElBQUlBLENBQUNBO1lBQ3pCQSxDQUFDQTs7O1dBUEFOO1FBVURBLHNCQUFJQSxnQ0FBS0E7aUJBQVRBO2dCQUNJTyxJQUFJQSxDQUFDQSxNQUFNQSxHQUFHQSxJQUFJQSxDQUFDQSwyQkFBMkJBLENBQUNBLFFBQVFBLEVBQUVBLENBQUNBO2dCQUUxREEsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0E7WUFDdkJBLENBQUNBO2lCQUNEUCxVQUFVQSxLQUFhQTtnQkFDbkJPLEVBQUVBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLFFBQVFBLEtBQUtBLElBQUlBLENBQUNBLENBQUNBLENBQUNBO29CQUN6QkEsSUFBSUEsQ0FBQ0EsV0FBV0EsR0FBR0EsS0FBS0EsQ0FBQ0EsSUFBSUEsRUFBRUEsQ0FBQ0E7Z0JBQ3BDQSxDQUFDQTtnQkFDREEsSUFBSUEsQ0FBQ0EsQ0FBQ0E7b0JBQ0ZBLElBQUlBLENBQUNBLFdBQVdBLEdBQUdBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLDJCQUEyQkEsQ0FBQ0EsSUFBSUEsRUFBRUEsQ0FBQ0EsTUFBTUEsRUFBRUEsQ0FBQ0EsZUFBZUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsQ0FBQ0E7Z0JBQ3hHQSxDQUFDQTtnQkFFREEsSUFBSUEsQ0FBQ0EsT0FBT0EsR0FBR0EsSUFBSUEsQ0FBQ0E7WUFDeEJBLENBQUNBOzs7V0FWQVA7UUFnQkRBLHNCQUFJQSx3Q0FBYUE7aUJBQWpCQTtnQkFDSVEsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsY0FBY0EsQ0FBQ0E7WUFDL0JBLENBQUNBO2lCQUNEUixVQUFrQkEsUUFBZ0JBO2dCQUM5QlEsSUFBSUEsQ0FBQ0EsY0FBY0EsR0FBR0EsUUFBUUEsQ0FBQ0EsSUFBSUEsRUFBRUEsQ0FBQ0E7Z0JBRXRDQSxJQUFJQSxDQUFDQSxXQUFXQSxHQUFHQSxJQUFJQSxDQUFDQTtZQUM1QkEsQ0FBQ0E7OztXQUxBUjtRQVFEQSxzQkFBSUEscUNBQVVBO2lCQUFkQTtnQkFDSVMsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsV0FBV0EsQ0FBQ0E7WUFDNUJBLENBQUNBO2lCQUNEVCxVQUFlQSxLQUFhQTtnQkFDeEJTLElBQUlBLENBQUNBLFdBQVdBLEdBQUdBLEtBQUtBLENBQUNBLElBQUlBLEVBQUVBLENBQUNBO2dCQUVoQ0EsSUFBSUEsQ0FBQ0EsT0FBT0EsR0FBR0EsSUFBSUEsQ0FBQ0E7WUFDeEJBLENBQUNBOzs7V0FMQVQ7UUFVREEsc0JBQUlBLGtDQUFPQTtpQkFBWEE7Z0JBQ0lVLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBO1lBQ3pCQSxDQUFDQTtpQkFDRFYsVUFLWUEsT0FBZUE7Z0JBQ3ZCVSxJQUFJQSxXQUFXQSxHQUFHQSxJQUFJQSxDQUFDQTtnQkFFdkJBLElBQUlBLENBQUNBLFFBQVFBLEdBQUdBLE9BQU9BLENBQUNBO2dCQUV4QkEsRUFBRUEsQ0FBQUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsQ0FBQ0EsS0FBS0EsT0FBT0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQUEsQ0FBQ0E7b0JBQ3hCQSxJQUFJQSx5QkFBeUJBLEdBQUdBLENBQUNBLE9BQU9BLENBQUNBLENBQUNBLEdBQUdBLEdBQUdBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLGVBQWVBLEVBQUVBLENBQUNBO29CQUUzRUEsSUFBSUEsQ0FBQ0EsUUFBUUEsR0FBR0EsVUFBT0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0Esa0JBQWtCQSxFQUFFQSxDQUFDQSxDQUFDQSxHQUFHQSx5QkFBeUJBLEVBQUVBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO29CQUV6R0EsTUFBTUEsQ0FBQ0E7Z0JBQ1hBLENBQUNBO2dCQUVEQSxXQUFXQSxHQUFHQSxJQUFJQSxDQUFDQSxlQUFlQSxFQUFFQSxDQUFDQTtnQkFFckNBLElBQUlBLENBQUNBLFFBQVFBLEdBQUdBLFVBQU9BLENBQUNBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLGtCQUFrQkEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsT0FBT0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsT0FBT0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsV0FBV0EsRUFBRUEsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBRTdIQSxJQUFJQSxDQUFDQSxLQUFLQSxHQUFHQSxXQUFXQSxHQUFHQSxJQUFJQSxDQUFDQSxlQUFlQSxFQUFFQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxPQUFPQSxDQUFDQSxDQUFDQSxHQUFHQSxPQUFPQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUNqR0EsQ0FBQ0E7OztXQXhCQVY7UUEyQkRBLHNCQUFJQSxrQ0FBT0E7aUJBQVhBO2dCQUNJVyxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQTtZQUN6QkEsQ0FBQ0E7aUJBQ0RYLFVBS1lBLE9BQWVBO2dCQUN2QlcsSUFBSUEsWUFBWUEsR0FBR0EsSUFBSUEsQ0FBQ0E7Z0JBRXhCQSxJQUFJQSxDQUFDQSxRQUFRQSxHQUFHQSxPQUFPQSxDQUFDQTtnQkFFeEJBLEVBQUVBLENBQUFBLENBQUNBLE9BQU9BLENBQUNBLENBQUNBLEtBQUtBLE9BQU9BLENBQUNBLENBQUNBLENBQUNBLENBQUFBLENBQUNBO29CQUN4QkEsSUFBSUEsMEJBQTBCQSxHQUFHQSxDQUFDQSxPQUFPQSxDQUFDQSxDQUFDQSxHQUFHQSxHQUFHQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQSxnQkFBZ0JBLEVBQUVBLENBQUNBO29CQUU3RUEsSUFBSUEsQ0FBQ0EsUUFBUUEsR0FBR0EsVUFBT0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsQ0FBQ0EsRUFBRUEsSUFBSUEsQ0FBQ0Esa0JBQWtCQSxFQUFFQSxDQUFDQSxDQUFDQSxHQUFHQSwwQkFBMEJBLENBQUNBLENBQUNBO29CQUUxR0EsTUFBTUEsQ0FBQ0E7Z0JBQ1hBLENBQUNBO2dCQUVEQSxZQUFZQSxHQUFHQSxJQUFJQSxDQUFDQSxnQkFBZ0JBLEVBQUVBLENBQUNBO2dCQUV2Q0EsSUFBSUEsQ0FBQ0EsUUFBUUEsR0FBR0EsVUFBT0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsQ0FBQ0EsRUFBRUEsSUFBSUEsQ0FBQ0Esa0JBQWtCQSxFQUFFQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxPQUFPQSxDQUFDQSxDQUFDQSxHQUFHQSxPQUFPQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxZQUFZQSxDQUFDQSxDQUFDQTtnQkFFOUhBLElBQUlBLENBQUNBLE1BQU1BLEdBQUdBLFlBQVlBLEdBQUdBLElBQUlBLENBQUNBLGVBQWVBLEVBQUVBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLE9BQU9BLENBQUNBLENBQUNBLEdBQUdBLE9BQU9BLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBLENBQUNBLENBQUNBO1lBQ25HQSxDQUFDQTs7O1dBeEJBWDtRQTJCREEsc0JBQUlBLGdDQUFLQTtpQkFBVEE7Z0JBQ0lZLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLE1BQU1BLEdBQUdBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBLENBQUNBLENBQUNBO1lBQ3RDQSxDQUFDQTtpQkFDRFosVUFBVUEsS0FBWUE7Z0JBQ2xCWSxFQUFFQSxDQUFBQSxDQUFDQSxLQUFLQSxLQUFLQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFBQSxDQUFDQTtvQkFDdEJBLElBQUlBLENBQUNBLE1BQU1BLEdBQUdBLEtBQUtBLENBQUNBO29CQUVwQkEsZUFBWUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsWUFBWUEsRUFBRUEsY0FBV0EsQ0FBQ0EsTUFBTUEsQ0FBTUEsY0FBV0EsQ0FBQ0EsZUFBZUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBQ2xHQSxDQUFDQTtZQUNMQSxDQUFDQTs7O1dBUEFaO1FBVURBLHNCQUFJQSxpQ0FBTUE7aUJBQVZBO2dCQUNJYSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxPQUFPQSxHQUFHQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUN2Q0EsQ0FBQ0E7aUJBQ0RiLFVBQVdBLE1BQWFBO2dCQUNwQmEsRUFBRUEsQ0FBQUEsQ0FBQ0EsTUFBTUEsS0FBS0EsSUFBSUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsQ0FBQUEsQ0FBQ0E7b0JBQ3hCQSxJQUFJQSxDQUFDQSxPQUFPQSxHQUFHQSxNQUFNQSxDQUFDQTtvQkFFdEJBLGVBQVlBLENBQUNBLE9BQU9BLENBQUNBLElBQUlBLENBQUNBLFlBQVlBLEVBQUVBLGNBQVdBLENBQUNBLE1BQU1BLENBQU1BLGNBQVdBLENBQUNBLGdCQUFnQkEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBQ25HQSxDQUFDQTtZQUNMQSxDQUFDQTs7O1dBUEFiO1FBU0RBLHNCQUFJQSxzQ0FBV0E7aUJBQWZBO2dCQUNJYyxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxXQUFXQSxJQUFJQSxJQUFJQSxDQUFDQSxRQUFRQSxJQUFJQSxJQUFJQSxDQUFDQSxPQUFPQSxDQUFDQTtZQUM3REEsQ0FBQ0E7OztXQUFBZDtRQUdEQSxzQkFBSUEsc0NBQVdBO2lCQUFmQTtnQkFDSWUsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsWUFBWUEsQ0FBQ0E7WUFDN0JBLENBQUNBO2lCQUNEZixVQUFnQkEsV0FBbUJBO2dCQUMvQmUsSUFBSUEsQ0FBQ0EsWUFBWUEsR0FBR0EsV0FBV0EsQ0FBQ0E7Z0JBRWhDQSxFQUFFQSxDQUFBQSxDQUFDQSxXQUFXQSxDQUFDQSxDQUFBQSxDQUFDQTtvQkFDWkEsSUFBSUEsQ0FBQ0EsVUFBVUEsR0FBR0EsSUFBSUEsQ0FBQ0E7b0JBRXZCQSxlQUFZQSxDQUFDQSxTQUFTQSxDQUFDQSxJQUFJQSxDQUFDQSxZQUFZQSxFQUFFQSxjQUFXQSxDQUFDQSxNQUFNQSxDQUFNQSxjQUFXQSxDQUFDQSxtQkFBbUJBLENBQUNBLENBQUNBLENBQUNBO29CQUdwR0EsSUFBSUEsQ0FBQ0EseUJBQXlCQSxDQUFDQSxhQUFhQSxDQUFDQSxDQUFDQTtnQkFDbERBLENBQUNBO1lBQ0xBLENBQUNBOzs7V0FaQWY7UUFlREEsc0JBQUlBLG1DQUFRQTtpQkFBWkE7Z0JBQ0lnQixNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxTQUFTQSxDQUFDQTtZQUMxQkEsQ0FBQ0E7aUJBQ0RoQixVQUFhQSxRQUFnQkE7Z0JBQ3pCZ0IsSUFBSUEsQ0FBQ0EsU0FBU0EsR0FBR0EsUUFBUUEsQ0FBQ0E7Z0JBRTFCQSxFQUFFQSxDQUFBQSxDQUFDQSxRQUFRQSxDQUFDQSxDQUFBQSxDQUFDQTtvQkFDVEEsSUFBSUEsQ0FBQ0EsVUFBVUEsR0FBR0EsSUFBSUEsQ0FBQ0E7b0JBRXZCQSxlQUFZQSxDQUFDQSxTQUFTQSxDQUFDQSxJQUFJQSxDQUFDQSxZQUFZQSxFQUFFQSxjQUFXQSxDQUFDQSxNQUFNQSxDQUFNQSxjQUFXQSxDQUFDQSxnQkFBZ0JBLENBQUNBLENBQUNBLENBQUNBO29CQUVqR0EsSUFBSUEsQ0FBQ0EseUJBQXlCQSxDQUFDQSxVQUFVQSxDQUFDQSxDQUFDQTtnQkFDL0NBLENBQUNBO1lBQ0xBLENBQUNBOzs7V0FYQWhCO1FBY0RBLHNCQUFJQSxrQ0FBT0E7aUJBQVhBO2dCQUNJaUIsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0E7WUFDekJBLENBQUNBO2lCQUNEakIsVUFBWUEsT0FBZUE7Z0JBQ3ZCaUIsSUFBSUEsQ0FBQ0EsUUFBUUEsR0FBR0EsT0FBT0EsQ0FBQ0E7Z0JBRXhCQSxFQUFFQSxDQUFBQSxDQUFDQSxPQUFPQSxDQUFDQSxDQUFBQSxDQUFDQTtvQkFDUkEsSUFBSUEsQ0FBQ0EsVUFBVUEsR0FBR0EsSUFBSUEsQ0FBQ0E7b0JBRXZCQSxlQUFZQSxDQUFDQSxTQUFTQSxDQUFDQSxJQUFJQSxDQUFDQSxZQUFZQSxFQUFFQSxjQUFXQSxDQUFDQSxNQUFNQSxDQUFNQSxjQUFXQSxDQUFDQSxlQUFlQSxDQUFDQSxDQUFDQSxDQUFDQTtvQkFFaEdBLElBQUlBLENBQUNBLHlCQUF5QkEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsQ0FBQ0E7Z0JBQzlDQSxDQUFDQTtZQUNMQSxDQUFDQTs7O1dBWEFqQjtRQXdCTUEsb0NBQVlBLEdBQW5CQTtZQUNJa0IsRUFBRUEsQ0FBQUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsYUFBYUEsQ0FBQ0EsQ0FBQUEsQ0FBQ0E7Z0JBQ25CQSxFQUFFQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxRQUFRQSxLQUFLQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQTtvQkFDekJBLElBQUlBLENBQUNBLGVBQWVBLEdBQUdBLElBQUlBLENBQUNBLG9CQUFvQkEsQ0FBQ0EsSUFBSUEsRUFBRUEsQ0FBQ0E7Z0JBQzVEQSxDQUFDQTtnQkFDREEsSUFBSUEsQ0FBQ0EsQ0FBQ0E7b0JBQ0ZBLElBQUlBLENBQUNBLGVBQWVBLEdBQUdBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLGNBQWNBLENBQUNBLElBQUlBLEVBQUVBLENBQUNBLFFBQVFBLENBQUNBLElBQUlBLENBQUNBLG9CQUFvQkEsQ0FBQ0EsQ0FBQ0E7Z0JBQ25HQSxDQUFDQTtnQkFFREEsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsVUFBQ0EsS0FBbUJBO29CQUN0Q0EsS0FBS0EsQ0FBQ0EsYUFBYUEsR0FBR0EsSUFBSUEsQ0FBQ0E7Z0JBQy9CQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUNQQSxDQUFDQTtRQUNMQSxDQUFDQTtRQUVNbEIsNENBQW9CQSxHQUEzQkE7WUFDSW1CLEVBQUVBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLFVBQVVBLENBQUNBLENBQUNBLENBQUNBO2dCQUNsQkEsSUFBSUEsQ0FBQ0Esb0JBQW9CQSxDQUFDQSxLQUFLQSxDQUFDQSxJQUFJQSxDQUFDQSxjQUFjQSxFQUFFQSxJQUFJQSxDQUFDQSxXQUFXQSxDQUFDQSxDQUFDQTtnQkFFdkVBLElBQUlBLENBQUNBLFVBQVVBLEdBQUdBLEtBQUtBLENBQUNBO2dCQUN4QkEsSUFBSUEsQ0FBQ0EscUJBQXFCQSxHQUFHQSxJQUFJQSxDQUFDQTtZQUN0Q0EsQ0FBQ0E7WUFFREEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EscUJBQXFCQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFDN0JBLEVBQUVBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLFFBQVFBLEtBQUtBLElBQUlBLENBQUNBLENBQUNBLENBQUNBO29CQUN6QkEsSUFBSUEsQ0FBQ0EsNEJBQTRCQSxHQUFHQSxJQUFJQSxDQUFDQSxvQkFBb0JBLENBQUNBLElBQUlBLEVBQUVBLENBQUNBO2dCQUN6RUEsQ0FBQ0E7Z0JBQ0RBLElBQUlBLENBQUNBLENBQUNBO29CQUNGQSxJQUFJQSxDQUFDQSw0QkFBNEJBLEdBQUdBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLDJCQUEyQkEsQ0FBQ0EsSUFBSUEsRUFBRUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsSUFBSUEsQ0FBQ0Esb0JBQW9CQSxDQUFDQSxDQUFDQTtnQkFDN0hBLENBQUNBO2dCQUVEQSxJQUFJQSxDQUFDQSxVQUFVQSxHQUFHQSxLQUFLQSxDQUFDQTtnQkFFeEJBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLE9BQU9BLENBQUNBLFVBQUNBLEtBQW1CQTtvQkFDdENBLEtBQUtBLENBQUNBLHFCQUFxQkEsR0FBR0EsSUFBSUEsQ0FBQ0E7Z0JBQ3ZDQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUNQQSxDQUFDQTtRQUNMQSxDQUFDQTtRQUtNbkIsaUNBQVNBLEdBQWhCQTtZQUFpQm9CLGNBQU9BO2lCQUFQQSxXQUFPQSxDQUFQQSxzQkFBT0EsQ0FBUEEsSUFBT0E7Z0JBQVBBLDZCQUFPQTs7WUFDcEJBLElBQUlBLFdBQVdBLEdBQUdBLElBQUlBLENBQUNBO1lBRXZCQSxFQUFFQSxDQUFBQSxDQUFDQSxJQUFJQSxDQUFDQSxNQUFNQSxLQUFLQSxDQUFDQSxDQUFDQSxDQUFBQSxDQUFDQTtnQkFDbEJBLFdBQVdBLEdBQUdBLFVBQU9BLENBQUNBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLENBQUNBLENBQUNBLEVBQUVBLElBQUlBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1lBQ25EQSxDQUFDQTtZQUNEQSxJQUFJQSxDQUFBQSxDQUFDQTtnQkFDREEsV0FBV0EsR0FBR0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDMUJBLENBQUNBO1lBRURBLElBQUlBLENBQUNBLFFBQVFBLEdBQUdBLFdBQVdBLENBQUNBLEdBQUdBLENBQUNBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLENBQUNBO1lBRS9DQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQTtRQUNoQkEsQ0FBQ0E7UUFRTXBCLDhCQUFNQSxHQUFiQSxVQUFjQSxLQUFZQTtZQUN0QnFCLElBQUlBLFFBQVFBLEdBQUdBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBO1lBRTdCQSxJQUFJQSxDQUFDQSxZQUFZQSxDQUFDQSxLQUFLQSxFQUFFQSxRQUFRQSxDQUFDQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxDQUFDQSxFQUFFQSxRQUFRQSxDQUFDQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUUvRUEsSUFBSUEsQ0FBQ0EsYUFBYUEsR0FBR0EsSUFBSUEsQ0FBQ0E7WUFDMUJBLElBQUlBLENBQUNBLFFBQVFBLEdBQUdBLElBQUlBLENBQUNBO1lBRXJCQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQTtRQUNoQkEsQ0FBQ0E7UUFLTXJCLG9DQUFZQSxHQUFuQkE7WUFBb0JzQixjQUFPQTtpQkFBUEEsV0FBT0EsQ0FBUEEsc0JBQU9BLENBQVBBLElBQU9BO2dCQUFQQSw2QkFBT0E7O1lBQ3ZCQSxJQUFJQSxLQUFLQSxHQUFHQSxJQUFJQSxFQUNaQSxNQUFNQSxHQUFHQSxJQUFJQSxFQUNiQSxRQUFRQSxHQUFHQSxJQUFJQSxFQUNmQSxDQUFDQSxHQUFHQSxJQUFJQSxFQUNSQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQTtZQUViQSxFQUFFQSxDQUFBQSxDQUFDQSxJQUFJQSxDQUFDQSxNQUFNQSxLQUFLQSxDQUFDQSxDQUFDQSxDQUFBQSxDQUFDQTtnQkFDbEJBLEtBQUtBLEdBQUdBLElBQUlBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO2dCQUNoQkEsTUFBTUEsR0FBR0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDckJBLENBQUNBO1lBQ0RBLElBQUlBLENBQUFBLENBQUNBO2dCQUNEQSxLQUFLQSxHQUFHQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFDaEJBLE1BQU1BLEdBQUdBLFVBQU9BLENBQUNBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLENBQUNBLENBQUNBLEVBQUVBLElBQUlBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1lBQzlDQSxDQUFDQTtZQUVEQSxDQUFDQSxHQUFHQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUNiQSxDQUFDQSxHQUFHQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUViQSxJQUFJQSxDQUFDQSwwQkFBMEJBLENBQUNBLENBQUNBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBO1lBQ3RDQSxJQUFJQSxDQUFDQSw4QkFBOEJBLENBQUNBLEtBQUtBLENBQUNBLENBQUNBO1lBQzNDQSxJQUFJQSxDQUFDQSwwQkFBMEJBLENBQUNBLENBQUNBLENBQUNBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1lBRXhDQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQTtRQUNoQkEsQ0FBQ0E7UUFFT3RCLGtEQUEwQkEsR0FBbENBLFVBQW1DQSxDQUFRQSxFQUFFQSxDQUFRQTtZQUNqRHVCLElBQUlBLENBQUNBLG9CQUFvQkEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFFMUNBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBO1FBQ2hCQSxDQUFDQTtRQUVNdkIscUNBQWFBLEdBQXBCQTtZQUNJd0IsSUFBSUEsQ0FBQ0EsUUFBUUEsR0FBR0EsVUFBT0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDekNBLENBQUNBO1FBRU14QixrQ0FBVUEsR0FBakJBO1lBQ0l5QixJQUFJQSxDQUFDQSxLQUFLQSxHQUFHQSxVQUFPQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUN0Q0EsQ0FBQ0E7UUFFTXpCLHFDQUFhQSxHQUFwQkE7WUFDSTBCLElBQUlBLENBQUNBLG9CQUFvQkEsQ0FBQ0EsV0FBV0EsRUFBRUEsQ0FBQ0E7UUFDNUNBLENBQUNBO1FBVU0xQiw0Q0FBb0JBLEdBQTNCQTtZQUNJMkIsSUFBSUEsQ0FBQ0EseUJBQXlCQSxDQUFDQSxhQUFhQSxDQUFDQSxDQUFDQTtZQUM5Q0EsSUFBSUEsQ0FBQ0EseUJBQXlCQSxDQUFDQSxVQUFVQSxDQUFDQSxDQUFDQTtZQUMzQ0EsSUFBSUEsQ0FBQ0EseUJBQXlCQSxDQUFDQSxTQUFTQSxDQUFDQSxDQUFDQTtRQUM5Q0EsQ0FBQ0E7UUFFTzNCLHNEQUE4QkEsR0FBdENBLFVBQXVDQSxLQUFZQTtZQUMvQzRCLElBQUlBLENBQUNBLG9CQUFvQkEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsQ0FBQ0E7WUFFeENBLElBQUlBLENBQUNBLGFBQWFBLEdBQUdBLElBQUlBLENBQUNBO1lBRTFCQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQTtRQUNoQkEsQ0FBQ0E7UUFFTzVCLHVDQUFlQSxHQUF2QkE7WUFDSTZCLEVBQUVBLENBQUFBLENBQUNBLElBQUlBLENBQUNBLFFBQVFBLEtBQUtBLElBQUlBLENBQUNBLENBQUFBLENBQUNBO2dCQUN2QkEsTUFBTUEsQ0FBQ0EsZ0JBQWFBLENBQUNBLFdBQVdBLEVBQUVBLENBQUNBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBO1lBQ2xEQSxDQUFDQTtZQUVEQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxLQUFLQSxDQUFDQTtRQUMvQkEsQ0FBQ0E7UUFFTzdCLHdDQUFnQkEsR0FBeEJBO1lBQ0k4QixFQUFFQSxDQUFBQSxDQUFDQSxJQUFJQSxDQUFDQSxRQUFRQSxLQUFLQSxJQUFJQSxDQUFDQSxDQUFBQSxDQUFDQTtnQkFDdkJBLE1BQU1BLENBQUNBLGdCQUFhQSxDQUFDQSxXQUFXQSxFQUFFQSxDQUFDQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQTtZQUNuREEsQ0FBQ0E7WUFFREEsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsTUFBTUEsQ0FBQ0E7UUFDaENBLENBQUNBO1FBRU85QiwwQ0FBa0JBLEdBQTFCQTtZQUNJK0IsRUFBRUEsQ0FBQUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsUUFBUUEsS0FBS0EsSUFBSUEsQ0FBQ0EsQ0FBQUEsQ0FBQ0E7Z0JBQ3ZCQSxJQUFJQSxJQUFJQSxHQUFHQSxnQkFBYUEsQ0FBQ0EsV0FBV0EsRUFBRUEsQ0FBQ0EsSUFBSUEsQ0FBQ0E7Z0JBRTVDQSxNQUFNQSxDQUFDQSxVQUFPQSxDQUFDQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxLQUFLQSxHQUFHQSxDQUFDQSxFQUFFQSxJQUFJQSxDQUFDQSxNQUFNQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUMzREEsQ0FBQ0E7WUFFREEsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsUUFBUUEsQ0FBQ0E7UUFDbENBLENBQUNBO1FBRU8vQix1Q0FBZUEsR0FBdkJBO1lBQ0lnQyxFQUFFQSxDQUFBQSxDQUFDQSxJQUFJQSxDQUFDQSxRQUFRQSxLQUFLQSxJQUFJQSxDQUFDQSxDQUFBQSxDQUFDQTtnQkFDdkJBLE1BQU1BLENBQUNBLFVBQU9BLENBQUNBLE1BQU1BLENBQUNBLENBQUNBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBO1lBQ2hDQSxDQUFDQTtZQUVEQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxLQUFLQSxDQUFDQTtRQUMvQkEsQ0FBQ0E7UUFDTGhDLG9CQUFDQTtJQUFEQSxDQTVaQTdzQixBQTRaQzZzQixFQTVaa0M3c0IsWUFBU0EsRUE0WjNDQTtJQTVaWUEsZ0JBQWFBLGdCQTRaekJBLENBQUFBO0FBQ0xBLENBQUNBLEVBOVpNLEVBQUUsS0FBRixFQUFFLFFBOFpSO0FDOVpELElBQU8sRUFBRSxDQW9CUjtBQXBCRCxXQUFPLEVBQUUsRUFBQSxDQUFDO0lBQ05BO1FBQUE4dUI7WUFDY0MsU0FBSUEsR0FBOEJBLElBQUlBLENBQUNBLFVBQVVBLENBQUNBLE1BQU1BLEVBQWFBLENBQUNBO1FBaUJwRkEsQ0FBQ0E7UUFmVUQscUNBQVFBLEdBQWZBLFVBQWdCQSxTQUFtQkE7WUFDL0JFLEVBQUVBLENBQUFBLENBQUNBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLFNBQVNBLENBQUNBLENBQUNBLENBQUFBLENBQUNBO2dCQUN6QkEsTUFBTUEsQ0FBQ0E7WUFDWEEsQ0FBQ0E7WUFFREEsSUFBSUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsQ0FBQ0E7UUFDbENBLENBQUNBO1FBRU1GLHdDQUFXQSxHQUFsQkEsVUFBbUJBLFNBQW1CQTtZQUNsQ0csSUFBSUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsV0FBV0EsQ0FBQ0EsU0FBU0EsQ0FBQ0EsQ0FBQ0E7UUFDckNBLENBQUNBO1FBRU1ILHFDQUFRQSxHQUFmQSxVQUFnQkEsU0FBbUJBO1lBQy9CSSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxTQUFTQSxDQUFDQSxDQUFDQTtRQUN6Q0EsQ0FBQ0E7UUFDTEoseUJBQUNBO0lBQURBLENBbEJBOXVCLEFBa0JDOHVCLElBQUE5dUI7SUFsQnFCQSxxQkFBa0JBLHFCQWtCdkNBLENBQUFBO0FBQ0xBLENBQUNBLEVBcEJNLEVBQUUsS0FBRixFQUFFLFFBb0JSO0FDcEJELElBQU8sRUFBRSxDQW1DUjtBQW5DRCxXQUFPLEVBQUUsRUFBQSxDQUFDO0lBQ05BO1FBQW1DbXZCLGlDQUFrQkE7UUFBckRBO1lBQW1DQyw4QkFBa0JBO1FBaUNyREEsQ0FBQ0E7UUFoQ2lCRCxvQkFBTUEsR0FBcEJBO1lBQ0lFLElBQUlBLEdBQUdBLEdBQUdBLElBQUlBLElBQUlBLEVBQUVBLENBQUNBO1lBRXJCQSxNQUFNQSxDQUFDQSxHQUFHQSxDQUFDQTtRQUNmQSxDQUFDQTtRQUlNRiw4QkFBTUEsR0FBYkEsVUFBY0EsV0FBa0JBO1lBQzVCRyxJQUFJQSxXQUFXQSxHQUFHQSxFQUFFQSxDQUFDQTtZQUVyQkEsSUFBSUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsVUFBU0EsS0FBWUE7Z0JBS25DLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO29CQUNqQixXQUFXLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO29CQUN4QixNQUFNLENBQUM7Z0JBQ1gsQ0FBQztnQkFFRCxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsTUFBTSxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO29CQUNoQyxNQUFNLENBQUM7Z0JBQ1gsQ0FBQztnQkFFRCxLQUFLLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1lBQzlCLENBQUMsQ0FBQ0EsQ0FBQ0E7WUFFSEEsV0FBV0EsQ0FBQ0EsT0FBT0EsQ0FBQ0EsVUFBVUEsS0FBWUE7Z0JBQ3RDLEtBQUssQ0FBQyxZQUFZLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQzlDLENBQUMsQ0FBQ0EsQ0FBQ0E7UUFDUEEsQ0FBQ0E7UUFDTEgsb0JBQUNBO0lBQURBLENBakNBbnZCLEFBaUNDbXZCLEVBakNrQ252QixxQkFBa0JBLEVBaUNwREE7SUFqQ1lBLGdCQUFhQSxnQkFpQ3pCQSxDQUFBQTtBQUNMQSxDQUFDQSxFQW5DTSxFQUFFLEtBQUYsRUFBRSxRQW1DUjtBQ25DRCxJQUFPLEVBQUUsQ0FtQ1I7QUFuQ0QsV0FBTyxFQUFFLEVBQUMsQ0FBQztJQUNQQTtRQUErQnV2Qiw2QkFBa0JBO1FBTzdDQSxtQkFBWUEsUUFBaUJBO1lBQ3pCQyxpQkFBT0EsQ0FBQ0E7WUFLSkEsY0FBU0EsR0FBWUEsSUFBSUEsQ0FBQ0E7WUFIOUJBLElBQUlBLENBQUNBLFNBQVNBLEdBQUdBLFFBQVFBLENBQUNBO1FBQzlCQSxDQUFDQTtRQVZhRCxnQkFBTUEsR0FBcEJBLFVBQXFCQSxRQUFpQkE7WUFDbENFLElBQUlBLEdBQUdBLEdBQUdBLElBQUlBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLENBQUNBO1lBRTdCQSxNQUFNQSxDQUFDQSxHQUFHQSxDQUFDQTtRQUNmQSxDQUFDQTtRQWFNRiwwQkFBTUEsR0FIYkEsVUFHY0EsV0FBa0JBO1lBQzVCRyxFQUFFQSxDQUFBQSxDQUFDQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxRQUFRQSxFQUFFQSxLQUFLQSxDQUFDQSxDQUFDQSxDQUFBQSxDQUFDQTtnQkFDM0JBLE1BQU1BLENBQUNBO1lBQ1hBLENBQUNBO1lBRURBLEVBQUVBLENBQUFBLENBQUNBLElBQUlBLENBQUNBLFFBQVFBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBO2dCQUNqQkEsSUFBSUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsVUFBQ0EsRUFBS0E7b0JBQ3BCQSxFQUFFQSxDQUFDQSxNQUFNQSxDQUFDQSxXQUFXQSxDQUFDQSxDQUFDQTtnQkFDM0JBLENBQUNBLENBQUNBLENBQUNBO1lBQ1BBLENBQUNBO1FBQ0xBLENBQUNBO1FBRU9ILDRCQUFRQSxHQUFoQkE7WUFDSUksTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsWUFBWUEsQ0FBYUEsYUFBVUEsQ0FBQ0EsQ0FBQ0EsS0FBS0EsS0FBS0Esa0JBQWVBLENBQUNBLEtBQUtBLENBQUNBO1FBQy9GQSxDQUFDQTtRQWpCREo7WUFBQ0EsVUFBT0EsQ0FBQ0EsVUFBU0EsV0FBa0JBO2dCQUNoQyxTQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLEVBQUUsTUFBRyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsK0JBQStCLENBQUMsQ0FBQyxDQUFDO1lBQzdGLENBQUMsQ0FBQ0E7V0FDS0EsNkJBQU1BLFFBVVpBO1FBS0xBLGdCQUFDQTtJQUFEQSxDQWpDQXZ2QixBQWlDQ3V2QixFQWpDOEJ2dkIscUJBQWtCQSxFQWlDaERBO0lBakNZQSxZQUFTQSxZQWlDckJBLENBQUFBO0FBQ0xBLENBQUNBLEVBbkNNLEVBQUUsS0FBRixFQUFFLFFBbUNSO0FDbkNELElBQU8sRUFBRSxDQXFDUjtBQXJDRCxXQUFPLEVBQUUsRUFBQyxDQUFDO0lBQ1BBO1FBQUE0dkI7WUFtQllDLFlBQU9BLEdBQWtCQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxNQUFNQSxFQUFPQSxDQUFDQTtRQWdCN0RBLENBQUNBO1FBbENpQkQsbUJBQU1BLEdBQXBCQTtZQUNJRSxJQUFJQSxHQUFHQSxHQUFHQSxJQUFJQSxJQUFJQSxFQUFFQSxDQUFDQTtZQUVyQkEsTUFBTUEsQ0FBQ0EsR0FBR0EsQ0FBQ0E7UUFDZkEsQ0FBQ0E7UUFFREYsc0JBQUlBLHNDQUFZQTtpQkFBaEJBO2dCQUNJRyxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxPQUFPQSxDQUFDQSxRQUFRQSxDQUFDQSxlQUFZQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtZQUNwREEsQ0FBQ0E7OztXQUFBSDtRQUVEQSxzQkFBSUEseUNBQWVBO2lCQUFuQkE7Z0JBQ0lJLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLE9BQU9BLENBQUNBLFFBQVFBLENBQUNBLGlCQUFjQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtZQUN0REEsQ0FBQ0E7OztXQUFBSjtRQUVEQSxzQkFBSUEscUNBQVdBO2lCQUFmQTtnQkFDSUssTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsUUFBUUEsQ0FBQ0EsYUFBVUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7WUFDbERBLENBQUNBOzs7V0FBQUw7UUFJTUEsK0JBQVFBLEdBQWZBLFVBQWdCQSxLQUFnQkE7WUFDNUJNLEVBQUVBLENBQUFBLENBQUNBLEtBQUtBLENBQUNBLFlBQVlBLENBQUNBLGVBQVlBLENBQUNBLENBQUNBLENBQUFBLENBQUNBO2dCQUNqQ0EsSUFBSUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsUUFBUUEsQ0FBQ0EsZUFBWUEsQ0FBQ0EsSUFBSUEsRUFBRUEsS0FBS0EsQ0FBQ0EsQ0FBQ0E7WUFDcERBLENBQUNBO1lBQ0RBLElBQUlBLENBQUNBLEVBQUVBLENBQUFBLENBQUNBLEtBQUtBLENBQUNBLFlBQVlBLENBQUNBLGlCQUFjQSxDQUFDQSxDQUFDQSxDQUFBQSxDQUFDQTtnQkFDeENBLElBQUlBLENBQUNBLE9BQU9BLENBQUNBLFdBQVdBLENBQUNBLGlCQUFjQSxDQUFDQSxJQUFJQSxFQUFFQSxLQUFLQSxDQUFDQSxDQUFDQTtZQUN6REEsQ0FBQ0E7WUFDREEsSUFBSUEsQ0FBQ0EsRUFBRUEsQ0FBQUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsWUFBWUEsQ0FBQ0EsYUFBVUEsQ0FBQ0EsQ0FBQ0EsQ0FBQUEsQ0FBQ0E7Z0JBQ3BDQSxJQUFJQSxDQUFDQSxPQUFPQSxDQUFDQSxXQUFXQSxDQUFDQSxhQUFVQSxDQUFDQSxJQUFJQSxFQUFFQSxLQUFLQSxDQUFDQSxDQUFDQTtZQUNyREEsQ0FBQ0E7WUFDREEsSUFBSUEsQ0FBQUEsQ0FBQ0E7Z0JBQ0FBLE1BQUdBLENBQUNBLEtBQUtBLENBQUNBLElBQUlBLEVBQUVBLE1BQUdBLENBQUNBLElBQUlBLENBQUNBLFlBQVlBLENBQUNBLE9BQU9BLENBQUNBLENBQUNBLENBQUNBO1lBQ3JEQSxDQUFDQTtRQUNMQSxDQUFDQTtRQUNMTixtQkFBQ0E7SUFBREEsQ0FuQ0E1dkIsQUFtQ0M0dkIsSUFBQTV2QjtJQW5DWUEsZUFBWUEsZUFtQ3hCQSxDQUFBQTtBQUNMQSxDQUFDQSxFQXJDTSxFQUFFLEtBQUYsRUFBRSxRQXFDUjtBQ3JDRCxJQUFPLEVBQUUsQ0FVUjtBQVZELFdBQU8sRUFBRSxFQUFBLENBQUM7SUFDTkE7UUFBd0Ntd0IsNkJBQVNBO1FBQWpEQTtZQUF3Q0MsOEJBQVNBO1FBUWpEQSxDQUFDQTtRQUFERCxnQkFBQ0E7SUFBREEsQ0FSQW53QixBQVFDbXdCLEVBUnVDbndCLFlBQVNBLEVBUWhEQTtJQVJxQkEsWUFBU0EsWUFROUJBLENBQUFBO0FBQ0xBLENBQUNBLEVBVk0sRUFBRSxLQUFGLEVBQUUsUUFVUjtBQ1ZELElBQU8sRUFBRSxDQXNKUjtBQXRKRCxXQUFPLEVBQUUsRUFBQSxDQUFDO0lBQ05BO1FBQW9DcXdCLGtDQUFTQTtRQUE3Q0E7WUFBb0NDLDhCQUFTQTtZQWlCbENBLGtCQUFhQSxHQUFVQSxDQUFDQSxDQUFDQTtZQUN6QkEsaUJBQVlBLEdBQVVBLENBQUNBLENBQUNBO1lBQ3hCQSxjQUFTQSxHQUFVQSxDQUFDQSxDQUFDQTtZQUNyQkEsYUFBUUEsR0FBVUEsSUFBSUEsQ0FBQ0E7WUFDdkJBLFFBQUdBLEdBQVVBLElBQUlBLENBQUNBO1lBQ2xCQSxvQkFBZUEsR0FBVUEsSUFBSUEsQ0FBQ0E7WUFDOUJBLGtCQUFhQSxHQUFXQSxLQUFLQSxDQUFDQTtZQUU3QkEsaUJBQVlBLEdBQVVBLENBQUNBLENBQUNBO1lBQ3hCQSxhQUFRQSxHQUFVQSxDQUFDQSxDQUFDQTtZQUNwQkEsZ0JBQVdBLEdBQVVBLElBQUlBLENBQUNBO1lBQzFCQSxXQUFNQSxHQUFrQkEsY0FBY0EsQ0FBQ0EsT0FBT0EsQ0FBQ0E7WUFDL0NBLGNBQVNBLEdBQVdBLEtBQUtBLENBQUNBO1lBQzFCQSxxQkFBZ0JBLEdBQVdBLEtBQUtBLENBQUNBO1lBQ2pDQSxlQUFVQSxHQUFVQSxJQUFJQSxDQUFDQTtZQUN6QkEsZ0JBQVdBLEdBQVVBLElBQUlBLENBQUNBO1FBNkd0Q0EsQ0FBQ0E7UUE1SWlCRCxxQkFBTUEsR0FBcEJBO1lBQ0NFLElBQUlBLEdBQUdBLEdBQUdBLElBQUlBLElBQUlBLEVBQUVBLENBQUNBO1lBRXJCQSxNQUFNQSxDQUFDQSxHQUFHQSxDQUFDQTtRQUNaQSxDQUFDQTtRQUVERixzQkFBSUEsbUNBQU9BO2lCQUFYQTtnQkFDSUcsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsTUFBTUEsS0FBS0EsY0FBY0EsQ0FBQ0EsR0FBR0EsQ0FBQ0E7WUFDOUNBLENBQUNBOzs7V0FBQUg7UUFDREEsc0JBQUlBLGtDQUFNQTtpQkFBVkE7Z0JBQ0lJLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLE1BQU1BLEtBQUtBLGNBQWNBLENBQUNBLElBQUlBLENBQUNBO1lBQy9DQSxDQUFDQTs7O1dBQUFKO1FBQ0RBLHNCQUFJQSxtQ0FBT0E7aUJBQVhBO2dCQUNJSyxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxNQUFNQSxLQUFLQSxjQUFjQSxDQUFDQSxLQUFLQSxDQUFDQTtZQUNoREEsQ0FBQ0E7OztXQUFBTDtRQW1CTUEsNkJBQUlBLEdBQVhBO1FBQ0FNLENBQUNBO1FBRU1OLGdDQUFPQSxHQUFkQTtRQUNBTyxDQUFDQTtRQVdNUCw2QkFBSUEsR0FUWEEsVUFTWUEsUUFBZUEsRUFBRUEsR0FBVUE7WUFDbkNRLElBQUlBLFFBQVFBLEdBQUdBLElBQUlBLENBQUNBLFlBQVlBLENBQUNBLFlBQVlBLENBQWdCQSxnQkFBYUEsQ0FBQ0EsQ0FBQ0E7WUFFNUVBLElBQUlBLENBQUNBLGVBQWVBLEdBQUdBLFFBQVFBLENBQUNBO1lBQ2hDQSxJQUFJQSxDQUFDQSxHQUFHQSxHQUFHQSxHQUFHQSxDQUFDQTtZQUVmQSxJQUFJQSxDQUFDQSxRQUFRQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxJQUFJQSxDQUFDQTtZQUVqQ0EsSUFBSUEsQ0FBQ0EsV0FBV0EsR0FBR0EsUUFBUUEsQ0FBQ0EsWUFBWUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsQ0FBQ0EsUUFBUUEsRUFBRUEsQ0FBQ0E7WUFFdkVBLElBQUlBLENBQUNBLE1BQU1BLEVBQUVBLENBQUNBO1FBQ2xCQSxDQUFDQTtRQUVNUiw4QkFBS0EsR0FBWkE7WUFDSVMsSUFBSUEsQ0FBQ0EsTUFBTUEsR0FBR0EsY0FBY0EsQ0FBQ0EsS0FBS0EsQ0FBQ0E7WUFDbkNBLElBQUlBLENBQUNBLFVBQVVBLEdBQUdBLElBQUlBLENBQUNBLFlBQVlBLENBQUNBO1FBQ3hDQSxDQUFDQTtRQUVNVCwrQkFBTUEsR0FBYkE7WUFDSVUsSUFBSUEsQ0FBQ0EsTUFBTUEsR0FBR0EsY0FBY0EsQ0FBQ0EsR0FBR0EsQ0FBQ0E7WUFFakNBLElBQUlBLENBQUNBLFNBQVNBLEdBQUdBLElBQUlBLENBQUNBO1lBQ3RCQSxJQUFJQSxDQUFDQSxXQUFXQSxHQUFHQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQTtRQUNyQ0EsQ0FBQ0E7UUFFTVYsNkJBQUlBLEdBQVhBO1lBQ0lXLElBQUlBLENBQUNBLE1BQU1BLEdBQUdBLGNBQWNBLENBQUNBLElBQUlBLENBQUNBO1FBQ3RDQSxDQUFDQTtRQUVNWCwrQkFBTUEsR0FBYkEsVUFBY0EsV0FBa0JBO1lBQzVCWSxFQUFFQSxDQUFBQSxDQUFDQSxJQUFJQSxDQUFDQSxNQUFNQSxLQUFLQSxjQUFjQSxDQUFDQSxPQUFPQSxDQUFDQSxDQUFBQSxDQUFDQTtnQkFDdkNBLE1BQU1BLENBQUNBO1lBQ1hBLENBQUNBO1lBRURBLEVBQUVBLENBQUFBLENBQUNBLElBQUlBLENBQUNBLE1BQU1BLElBQUlBLElBQUlBLENBQUNBLE9BQU9BLENBQUNBLENBQUFBLENBQUNBO2dCQUM1QkEsSUFBSUEsQ0FBQ0EsUUFBUUEsR0FBR0EsV0FBV0EsQ0FBQ0E7Z0JBQzVCQSxNQUFNQSxDQUFDQTtZQUNYQSxDQUFDQTtZQUVEQSxFQUFFQSxDQUFBQSxDQUFDQSxJQUFJQSxDQUFDQSxTQUFTQSxDQUFDQSxDQUFBQSxDQUFDQTtnQkFDZkEsSUFBSUEsQ0FBQ0EsU0FBU0EsR0FBR0EsS0FBS0EsQ0FBQ0E7Z0JBQ3ZCQSxJQUFJQSxDQUFDQSx1QkFBdUJBLENBQUNBLFdBQVdBLENBQUNBLENBQUNBO1lBQzlDQSxDQUFDQTtZQUVEQSxJQUFJQSxDQUFDQSxZQUFZQSxHQUFHQSxXQUFXQSxDQUFDQTtZQUVoQ0EsRUFBRUEsQ0FBQUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsZ0JBQWdCQSxDQUFDQSxDQUFBQSxDQUFDQTtnQkFDdEJBLElBQUlBLENBQUNBLGdCQUFnQkEsR0FBR0EsS0FBS0EsQ0FBQ0E7Z0JBQzlCQSxJQUFJQSxDQUFDQSxVQUFVQSxFQUFFQSxDQUFDQTtZQUN0QkEsQ0FBQ0E7WUFFREEsRUFBRUEsQ0FBQUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsWUFBWUEsR0FBR0EsSUFBSUEsQ0FBQ0EsUUFBUUEsR0FBR0EsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsQ0FBQUEsQ0FBQ0E7Z0JBQ2xEQSxJQUFJQSxDQUFDQSxhQUFhQSxHQUFHQSxJQUFJQSxDQUFDQTtnQkFDMUJBLElBQUlBLENBQUNBLFFBQVFBLEdBQUdBLElBQUlBLENBQUNBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLFlBQVlBLENBQUNBLENBQUNBO2dCQUUvQ0EsSUFBSUEsQ0FBQ0EsWUFBWUEsR0FBR0EsSUFBSUEsQ0FBQ0EsU0FBU0EsQ0FBQ0E7Z0JBQ25DQSxJQUFJQSxDQUFDQSxTQUFTQSxFQUFHQSxDQUFDQTtnQkFDbEJBLEVBQUVBLENBQUFBLENBQUNBLElBQUlBLENBQUNBLFNBQVNBLElBQUlBLElBQUlBLENBQUNBLFdBQVdBLENBQUNBLENBQUFBLENBQUNBO29CQUNuQ0EsSUFBSUEsQ0FBQ0EsU0FBU0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7Z0JBQ3ZCQSxDQUFDQTtZQUNMQSxDQUFDQTtZQUNEQSxJQUFJQSxDQUFBQSxDQUFDQTtnQkFDREEsSUFBSUEsQ0FBQ0EsYUFBYUEsR0FBR0EsS0FBS0EsQ0FBQ0E7WUFDL0JBLENBQUNBO1lBRURBLElBQUlBLENBQUNBLGFBQWFBLEdBQUdBLElBQUlBLENBQUNBLEdBQUdBLEdBQUdBLENBQUNBLElBQUlBLENBQUNBLFlBQVlBLEdBQUdBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBO1FBQy9FQSxDQUFDQTtRQUVPWiwrQkFBTUEsR0FBZEE7WUFDSWEsSUFBSUEsQ0FBQ0EsWUFBWUEsR0FBR0EsQ0FBQ0EsQ0FBQ0E7WUFDdEJBLElBQUlBLENBQUNBLFFBQVFBLEdBQUdBLENBQUNBLENBQUNBO1lBQ2xCQSxJQUFJQSxDQUFDQSxZQUFZQSxHQUFHQSxDQUFDQSxDQUFDQTtZQUN0QkEsSUFBSUEsQ0FBQ0EsU0FBU0EsR0FBR0EsSUFBSUEsQ0FBQ0EsWUFBWUEsR0FBR0EsQ0FBQ0EsQ0FBQ0E7WUFFdkNBLEVBQUVBLENBQUFBLENBQUNBLElBQUlBLENBQUNBLE1BQU1BLENBQUNBLENBQUFBLENBQUNBO2dCQUNaQSxJQUFJQSxDQUFDQSxnQkFBZ0JBLEdBQUdBLElBQUlBLENBQUNBO1lBQ2pDQSxDQUFDQTtZQUVEQSxJQUFJQSxDQUFDQSxNQUFNQSxHQUFHQSxjQUFjQSxDQUFDQSxHQUFHQSxDQUFDQTtRQUNyQ0EsQ0FBQ0E7UUFFT2IsK0JBQU1BLEdBQWRBLFVBQWVBLElBQVdBO1lBQ3RCYyxNQUFNQSxDQUFDQSxJQUFJQSxHQUFHQSxJQUFJQSxHQUFHQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQTtRQUN2Q0EsQ0FBQ0E7UUFFT2QsbUNBQVVBLEdBQWxCQTtZQUNJZSxJQUFJQSxDQUFDQSxRQUFRQSxHQUFHQSxJQUFJQSxDQUFDQSxZQUFZQSxDQUFDQTtRQUN0Q0EsQ0FBQ0E7UUFFT2YsZ0RBQXVCQSxHQUEvQkEsVUFBZ0NBLFdBQWtCQTtZQUM5Q2dCLElBQUlBLENBQUNBLFFBQVFBLEdBQUdBLFdBQVdBLEdBQUdBLENBQUNBLElBQUlBLENBQUNBLFdBQVdBLEdBQUdBLElBQUlBLENBQUNBLFVBQVVBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBO1FBQ3ZGQSxDQUFDQTtRQXBHRGhCO1lBQUNBLFVBQU9BLENBQUNBLFVBQVNBLFFBQWVBLEVBQUVBLEdBQVVBO2dCQUN6QyxJQUFJLFFBQVEsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLFlBQVksQ0FBQyxnQkFBYSxDQUFDLENBQUM7Z0JBRTdELFNBQU0sQ0FBQyxRQUFRLEVBQUUsTUFBRyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsbUJBQW1CLEVBQUUsNkJBQTZCLENBQUMsQ0FBQyxDQUFDO2dCQUMzRixTQUFNLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksUUFBUSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQyxFQUFFLE1BQUcsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLE9BQUksUUFBUSxpQkFBYSxDQUFDLENBQUMsQ0FBQztZQUNwSyxDQUFDLENBQUNBO1lBQ0RBLFNBQU1BLENBQUNBO2dCQUNKLFNBQU0sQ0FBQyxJQUFJLENBQUMsV0FBVyxHQUFHLENBQUMsRUFBRSxNQUFHLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxjQUFjLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQztZQUM5RSxDQUFDLENBQUNBO1dBQ0tBLGdDQUFJQSxRQVdWQTtRQWlGTEEscUJBQUNBO0lBQURBLENBN0lBcndCLEFBNklDcXdCLEVBN0ltQ3J3QixZQUFTQSxFQTZJNUNBO0lBN0lZQSxpQkFBY0EsaUJBNkkxQkEsQ0FBQUE7SUFFREEsSUFBS0EsY0FLSkE7SUFMREEsV0FBS0EsY0FBY0E7UUFDZnN4Qix5REFBT0EsQ0FBQUE7UUFDUEEsaURBQUdBLENBQUFBO1FBQ0hBLG1EQUFJQSxDQUFBQTtRQUNKQSxxREFBS0EsQ0FBQUE7SUFDVEEsQ0FBQ0EsRUFMSXR4QixjQUFjQSxLQUFkQSxjQUFjQSxRQUtsQkE7QUFDTEEsQ0FBQ0EsRUF0Sk0sRUFBRSxLQUFGLEVBQUUsUUFzSlI7QUN0SkQsSUFBTyxFQUFFLENBb0lSO0FBcElELFdBQU8sRUFBRSxFQUFBLENBQUM7SUFDTkE7UUFBdUN1eEIsNEJBQVNBO1FBQWhEQTtZQUF1Q0MsOEJBQVNBO1lBQ3BDQSxjQUFTQSxHQUFZQSxJQUFJQSxDQUFDQTtZQW1CM0JBLFlBQU9BLEdBQW1CQSxJQUFJQSxDQUFDQTtRQXNHMUNBLENBQUNBO1FBeEhHRCxzQkFBSUEsOEJBQVFBO2lCQUFaQTtnQkFDSUUsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsU0FBU0EsQ0FBQ0E7WUFDMUJBLENBQUNBO2lCQUNERixVQUFhQSxRQUFpQkE7Z0JBQzFCRSxFQUFFQSxDQUFBQSxDQUFDQSxDQUFDQSxhQUFVQSxDQUFDQSxPQUFPQSxDQUFDQSxRQUFRQSxFQUFFQSxJQUFJQSxDQUFDQSxTQUFTQSxDQUFDQSxDQUFDQSxDQUFBQSxDQUFDQTtvQkFDOUNBLElBQUlBLENBQUNBLFNBQVNBLEdBQUdBLFFBQVFBLENBQUNBO29CQUMxQkEsSUFBSUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsUUFBUUEsR0FBR0EsSUFBSUEsQ0FBQ0E7b0JBRS9CQSxlQUFZQSxDQUFDQSxPQUFPQSxDQUFDQSxJQUFJQSxDQUFDQSxZQUFZQSxFQUFFQSxjQUFXQSxDQUFDQSxNQUFNQSxDQUFNQSxjQUFXQSxDQUFDQSxlQUFlQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFDbEdBLENBQUNBO1lBQ0xBLENBQUNBOzs7V0FSQUY7UUFVREEsc0JBQUlBLGtDQUFZQTtpQkFBaEJBO2dCQUNJRyxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxPQUFPQSxDQUFDQSxZQUFZQSxDQUFDQTtZQUNyQ0EsQ0FBQ0E7OztXQUFBSDtRQVlNQSx1QkFBSUEsR0FOWEE7WUFPSUksSUFBSUEsWUFBWUEsR0FBR0EsSUFBSUEsRUFDbkJBLEtBTVFBLElBQUlBLENBQUNBLFdBQVdBLEVBQUVBLEVBTHRCQSxRQUFRQSxnQkFDUkEsS0FBS0EsYUFDTEEsU0FBU0EsaUJBQ1RBLE1BQU1BLGNBQ05BLFlBQVlBLGtCQUNVQSxDQUFDQTtZQUUvQkEsSUFBSUEsQ0FBQ0EsT0FBT0EsR0FBR0EsSUFBSUEsQ0FBQ0EscUJBQXFCQSxFQUFFQSxDQUFDQTtZQUU1Q0EsWUFBWUEsR0FBR0EsSUFBSUEsQ0FBQ0Esa0JBQWtCQSxDQUFDQSxRQUFRQSxFQUFFQSxLQUFLQSxFQUFFQSxTQUFTQSxFQUFFQSxNQUFNQSxFQUFFQSxZQUFZQSxDQUFDQSxDQUFDQTtZQUV6RkEsSUFBSUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsWUFBWUEsR0FBR0EsWUFBWUEsQ0FBQ0E7WUFFekNBLElBQUlBLENBQUNBLE9BQU9BLENBQUNBLElBQUlBLEVBQUVBLENBQUNBO1lBRXBCQSxJQUFJQSxDQUFDQSxTQUFTQSxDQUFDQSxJQUFJQSxFQUFFQSxDQUFDQTtZQUV0QkEsSUFBSUEsQ0FBQ0EsY0FBY0EsRUFBRUEsQ0FBQ0E7UUFDMUJBLENBQUNBO1FBS01KLGlDQUFjQSxHQUhyQkE7WUFJSUssTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsWUFBWUEsQ0FBQ0EsY0FBY0EsRUFBRUEsQ0FBQ0E7UUFDdERBLENBQUNBO1FBS01MLG1DQUFnQkEsR0FIdkJBO1lBSUlNLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLE9BQU9BLENBQUNBLFlBQVlBLENBQUNBLGdCQUFnQkEsRUFBRUEsQ0FBQ0E7UUFDeERBLENBQUNBO1FBRU1OLGtDQUFlQSxHQUF0QkE7WUFDSU8sTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsT0FBT0EsS0FBS0EsVUFBT0EsQ0FBQ0EsTUFBTUEsQ0FBQ0E7UUFDckRBLENBQUNBO1FBRU1QLDBCQUFPQSxHQUFkQTtZQUNJUSxJQUFJQSxDQUFDQSxPQUFPQSxDQUFDQSxPQUFPQSxFQUFFQSxDQUFDQTtZQUV2QkEsSUFBSUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsT0FBT0EsRUFBRUEsQ0FBQ0E7UUFDN0JBLENBQUNBO1FBS01SLHFDQUFrQkEsR0FIekJBO1lBSUlTLElBQUlBLENBQUNBLE9BQU9BLENBQUNBLFlBQVlBLENBQUNBLGtCQUFrQkEsRUFBRUEsQ0FBQ0E7UUFDbkRBLENBQUNBO1FBRU1ULHVDQUFvQkEsR0FBM0JBO1lBQ0lVLElBQUlBLENBQUNBLE9BQU9BLENBQUNBLFlBQVlBLENBQUNBLG9CQUFvQkEsRUFBRUEsQ0FBQ0E7UUFDckRBLENBQUNBO1FBS1NWLGlDQUFjQSxHQUR4QkE7WUFFSVcsRUFBRUEsQ0FBQUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsZUFBZUEsRUFBRUEsQ0FBQ0EsQ0FBQUEsQ0FBQ0E7Z0JBQ3ZCQSxFQUFFQSxDQUFBQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxnQkFBZ0JBLEVBQUVBLENBQUNBLENBQUFBLENBQUNBO29CQUN6QkEsSUFBSUEsQ0FBQ0Esb0JBQW9CQSxFQUFFQSxDQUFDQTtnQkFDaENBLENBQUNBO1lBQ0xBLENBQUNBO1lBQ0RBLElBQUlBLENBQUFBLENBQUNBO2dCQUNEQSxFQUFFQSxDQUFBQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxjQUFjQSxFQUFFQSxDQUFDQSxDQUFBQSxDQUFDQTtvQkFDdkJBLElBQUlBLENBQUNBLGtCQUFrQkEsRUFBRUEsQ0FBQ0E7Z0JBQzlCQSxDQUFDQTtZQUNMQSxDQUFDQTtRQUNMQSxDQUFDQTtRQUdTWCx3Q0FBcUJBLEdBRC9CQTtZQUVJWSxNQUFNQSxDQUFDQSx3QkFBcUJBLENBQUNBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLFlBQVlBLENBQUNBLENBQUNBO1FBQzNEQSxDQUFDQTtRQUdTWixxQ0FBa0JBLEdBRDVCQSxVQUM2QkEsUUFBc0JBLEVBQUVBLEtBQWtCQSxFQUFFQSxTQUF1QkEsRUFBRUEsTUFBb0JBLEVBQUVBLFlBQW1EQTtZQUN2S2EsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0Esd0JBQXdCQSxDQUFDQSxRQUFRQSxFQUFFQSxLQUFLQSxFQUFFQSxTQUFTQSxFQUFFQSxNQUFNQSxDQUFDQSxDQUFDQTtRQUM3RUEsQ0FBQ0E7UUFFU2IsMkNBQXdCQSxHQUFsQ0EsVUFBbUNBLFFBQXNCQSxFQUFFQSxLQUFrQkEsRUFBRUEsU0FBdUJBLEVBQUVBLE1BQW9CQTtZQUN4SGMsSUFBSUEsWUFBWUEsR0FBR0EscUJBQWtCQSxDQUFDQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtZQUVuREEsWUFBWUEsQ0FBQ0EsUUFBUUEsR0FBR0EsUUFBUUEsQ0FBQ0E7WUFDakNBLFlBQVlBLENBQUNBLEtBQUtBLEdBQUdBLEtBQUtBLENBQUNBO1lBQzNCQSxZQUFZQSxDQUFDQSxTQUFTQSxHQUFHQSxTQUFTQSxDQUFDQTtZQUNuQ0EsWUFBWUEsQ0FBQ0EsTUFBTUEsR0FBR0EsTUFBTUEsQ0FBQ0E7WUFFN0JBLE1BQU1BLENBQUNBLFlBQVlBLENBQUNBO1FBQ3hCQSxDQUFDQTtRQW5HRGQ7WUFBQ0EsU0FBTUEsQ0FBQ0E7Z0JBQ0osSUFBSSxZQUFZLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUM7Z0JBRTdDLFNBQU0sQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsTUFBRyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQztnQkFDdEYsU0FBTSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsS0FBSyxZQUFZLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxNQUFHLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxhQUFhLEVBQUUsUUFBTSxZQUFZLENBQUMsT0FBTyxDQUFDLE1BQU0sR0FBRyxDQUFDLHdCQUFtQixZQUFZLENBQUMsS0FBSyxDQUFDLE1BQVEsQ0FBQyxDQUFDLENBQUM7WUFDcE0sQ0FBQyxDQUFDQTtXQUNLQSwwQkFBSUEsUUFxQlZBO1FBRURBO1lBQUNBLFVBQU9BLENBQUNBO2dCQUNMLFNBQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxFQUFFLE1BQUcsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsdUJBQXVCLENBQUMsQ0FBQyxDQUFDO1lBQzFHLENBQUMsQ0FBQ0E7V0FDS0Esb0NBQWNBLFFBRXBCQTtRQUVEQTtZQUFDQSxVQUFPQSxDQUFDQTtnQkFDTCxTQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksRUFBRSxNQUFHLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLHVCQUF1QixDQUFDLENBQUMsQ0FBQztZQUMxRyxDQUFDLENBQUNBO1dBQ0tBLHNDQUFnQkEsUUFFdEJBO1FBWURBO1lBQUNBLFVBQU9BLENBQUNBO2dCQUNMLFNBQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxFQUFFLE1BQUcsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsdUJBQXVCLENBQUMsQ0FBQyxDQUFDO1lBQzFHLENBQUMsQ0FBQ0E7V0FDS0Esd0NBQWtCQSxRQUV4QkE7UUFRREE7WUFBQ0EsVUFBT0E7V0FDRUEsb0NBQWNBLFFBV3ZCQTtRQUVEQTtZQUFDQSxVQUFPQTtXQUNFQSwyQ0FBcUJBLFFBRTlCQTtRQUVEQTtZQUFDQSxVQUFPQTtXQUNFQSx3Q0FBa0JBLFFBRTNCQTtRQVlMQSxlQUFDQTtJQUFEQSxDQTFIQXZ4QixBQTBIQ3V4QixFQTFIc0N2eEIsWUFBU0EsRUEwSC9DQTtJQTFIcUJBLFdBQVFBLFdBMEg3QkEsQ0FBQUE7QUFTTEEsQ0FBQ0EsRUFwSU0sRUFBRSxLQUFGLEVBQUUsUUFvSVI7QUNwSUQsSUFBTyxFQUFFLENBdUVSO0FBdkVELFdBQU8sRUFBRSxFQUFDLENBQUM7SUFDUEE7UUFBQXN5QjtRQXFFQUMsQ0FBQ0E7UUFwRWlCRCw0QkFBY0EsR0FBNUJBLFVBQTZCQSxPQUFxQkEsRUFBRUEsT0FBc0JBO1lBQzFFRSxJQUFJQSxVQUFVQSxHQUFHQSxJQUFJQSxDQUFDQSxPQUFPQSxDQUFDQSxPQUFPQSxDQUFDQSxFQUNsQ0EsS0FBS0EsR0FBR0EsRUFBRUEsQ0FBQ0E7WUFFZkEsR0FBR0EsQ0FBQUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsRUFBRUEsR0FBR0EsR0FBR0EsT0FBT0EsQ0FBQ0EsTUFBTUEsRUFBRUEsQ0FBQ0EsR0FBR0EsR0FBR0EsRUFBRUEsQ0FBQ0EsSUFBRUEsQ0FBQ0EsRUFBQ0EsQ0FBQ0E7Z0JBQ2hEQSxJQUFJQSxDQUFDQSxHQUFHQSxPQUFPQSxDQUFDQSxDQUFDQSxDQUFDQSxFQUNkQSxDQUFDQSxHQUFHQSxPQUFPQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxFQUNsQkEsQ0FBQ0EsR0FBR0EsT0FBT0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsRUFDbEJBLElBQUlBLEdBQUdBLFFBQUtBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBLEVBQUVBLENBQUNBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBO2dCQUVqQ0EsRUFBRUEsQ0FBQUEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsQ0FBQUEsQ0FBQ0E7b0JBQ1hBLElBQUlBLENBQUNBLGFBQWFBLENBQUNBLFdBQVdBLENBQUNBO3dCQUMzQkEsSUFBSUEsQ0FBQ0EsaUJBQWlCQSxDQUFDQSxPQUFPQSxFQUFFQSxDQUFDQSxDQUFDQTt3QkFDbENBLElBQUlBLENBQUNBLGlCQUFpQkEsQ0FBQ0EsT0FBT0EsRUFBRUEsQ0FBQ0EsQ0FBQ0E7d0JBQ2xDQSxJQUFJQSxDQUFDQSxpQkFBaUJBLENBQUNBLE9BQU9BLEVBQUVBLENBQUNBLENBQUNBO3FCQUNyQ0EsQ0FBQ0EsQ0FBQ0E7b0JBQ0hBLElBQUlBLENBQUNBLFVBQVVBLEdBQUdBLElBQUlBLENBQUNBLGFBQWFBLENBQUNBLFFBQVFBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLElBQUlBLEVBQUVBLENBQUNBO2dCQUM1REEsQ0FBQ0E7Z0JBRURBLEtBQUtBLENBQUNBLElBQUlBLENBQUNBLElBQUlBLENBQUNBLENBQUNBO1lBQ3JCQSxDQUFDQTtZQUVEQSxNQUFNQSxDQUFDQSxLQUFLQSxDQUFDQTtRQUNqQkEsQ0FBQ0E7UUFPaUJGLHFCQUFPQSxHQUxyQkEsVUFLc0JBLElBQVFBO1lBQzFCRyxNQUFNQSxDQUFDQSxJQUFJQSxJQUFJQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxNQUFNQSxJQUFJQSxJQUFJQSxDQUFDQSxNQUFNQSxHQUFHQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxRQUFRQSxJQUFJQSxJQUFJQSxDQUFDQSxRQUFRQSxFQUFFQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUNoR0EsQ0FBQ0E7UUFFYUgsK0JBQWlCQSxHQUEvQkEsVUFBZ0NBLFVBQXdCQSxFQUFFQSxLQUFZQTtZQUNsRUksSUFBSUEsVUFBVUEsR0FBR0EsQ0FBQ0EsR0FBR0EsS0FBS0EsQ0FBQ0E7WUFFM0JBLE1BQU1BLENBQUNBLFVBQU9BLENBQUNBLE1BQU1BLENBQ2pCQSxVQUFVQSxDQUFDQSxVQUFVQSxDQUFDQSxFQUN0QkEsVUFBVUEsQ0FBQ0EsVUFBVUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsRUFDMUJBLFVBQVVBLENBQUNBLFVBQVVBLEdBQUdBLENBQUNBLENBQUNBLENBQzdCQSxDQUFDQTtRQUNOQSxDQUFDQTtRQUthSixtQ0FBcUJBLEdBSG5DQSxVQUdvQ0EsT0FBcUJBLEVBQUVBLFFBQTRCQTtZQUNuRkssR0FBR0EsQ0FBQUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsRUFBRUEsR0FBR0EsR0FBR0EsT0FBT0EsQ0FBQ0EsTUFBTUEsRUFBRUEsQ0FBQ0EsR0FBR0EsR0FBR0EsRUFBRUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsRUFBQ0EsQ0FBQ0E7Z0JBQ2xEQSxRQUFRQSxDQUFDQSxVQUFPQSxDQUFDQSxNQUFNQSxDQUFDQSxPQUFPQSxDQUFDQSxDQUFDQSxDQUFDQSxFQUFFQSxPQUFPQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxFQUFFQSxPQUFPQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUN6RUEsQ0FBQ0E7UUFDTEEsQ0FBQ0E7UUFLYUwsK0JBQWlCQSxHQUEvQkEsVUFBZ0NBLFVBQXdCQSxFQUFFQSxVQUFjQSxFQUFFQSxLQUFZQTtZQUNsRk0sRUFBRUEsQ0FBQUEsQ0FBQ0EsVUFBVUEsWUFBWUEsVUFBT0EsQ0FBQ0EsQ0FBQUEsQ0FBQ0E7Z0JBQzlCQSxVQUFVQSxDQUFDQSxLQUFLQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxVQUFVQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFDckNBLFVBQVVBLENBQUNBLEtBQUtBLEdBQUdBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLFVBQVVBLENBQUNBLENBQUNBLENBQUNBO2dCQUN6Q0EsVUFBVUEsQ0FBQ0EsS0FBS0EsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsVUFBVUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDN0NBLENBQUNBO1lBQ0RBLElBQUlBLENBQUFBLENBQUNBO2dCQUNEQSxVQUFVQSxDQUFDQSxLQUFLQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxVQUFVQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFDdENBLFVBQVVBLENBQUNBLEtBQUtBLEdBQUdBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLFVBQVVBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO2dCQUMxQ0EsVUFBVUEsQ0FBQ0EsS0FBS0EsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsVUFBVUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDOUNBLENBQUNBO1FBQ0xBLENBQUNBO1FBMUNETjtZQUFDQSxVQUFPQSxDQUFDQSxVQUFTQSxJQUFJQTtnQkFDbEIsRUFBRSxDQUFBLENBQUMsSUFBSSxDQUFDLENBQUEsQ0FBQztvQkFDTCxTQUFNLENBQUMsSUFBSSxZQUFZLElBQUksQ0FBQyxVQUFVLElBQUksSUFBSSxZQUFZLElBQUksQ0FBQyxJQUFJLElBQUksYUFBVSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxNQUFHLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUcsZ0NBQWdDLENBQUMsQ0FBQyxDQUFDO2dCQUN0SyxDQUFDO1lBQ0wsQ0FBQyxDQUFDQTtXQUNZQSx3QkFBT0EsUUFFcEJBO1FBWURBO1lBQUNBLFVBQU9BLENBQUNBLFVBQVNBLE9BQXFCQSxFQUFFQSxRQUE0QkE7Z0JBQ2pFLFNBQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUUsTUFBRyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsZ0JBQWdCLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDO1lBQy9GLENBQUMsQ0FBQ0E7V0FDWUEsc0NBQXFCQSxRQUlsQ0E7UUFpQkxBLG9CQUFDQTtJQUFEQSxDQXJFQXR5QixBQXFFQ3N5QixJQUFBdHlCO0lBckVZQSxnQkFBYUEsZ0JBcUV6QkEsQ0FBQUE7QUFDTEEsQ0FBQ0EsRUF2RU0sRUFBRSxLQUFGLEVBQUUsUUF1RVI7QUN2RUQsSUFBTyxFQUFFLENBZ0ZSO0FBaEZELFdBQU8sRUFBRSxFQUFBLENBQUM7SUFFTkE7UUFBb0M2eUIsa0NBQVFBO1FBQTVDQTtZQUFvQ0MsOEJBQVFBO1lBT2hDQSxjQUFTQSxHQUFpQkEsRUFBRUEsQ0FBQ0E7WUFhN0JBLGVBQVVBLEdBQWlCQSxFQUFFQSxDQUFDQTtZQWE5QkEsWUFBT0EsR0FBaUJBLEVBQUVBLENBQUNBO1lBWTNCQSxhQUFRQSxHQUFpQkEsRUFBRUEsQ0FBQ0E7WUFZNUJBLGFBQVFBLEdBQWlCQSxFQUFFQSxDQUFDQTtRQW9CeENBLENBQUNBO1FBNUVpQkQscUJBQU1BLEdBQXBCQTtZQUNJRSxJQUFJQSxJQUFJQSxHQUFHQSxJQUFJQSxJQUFJQSxFQUFFQSxDQUFDQTtZQUV0QkEsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0E7UUFDaEJBLENBQUNBO1FBR0RGLHNCQUFJQSxvQ0FBUUE7aUJBQVpBO2dCQUNJRyxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxTQUFTQSxDQUFDQTtZQUMxQkEsQ0FBQ0E7aUJBQ0RILFVBQWFBLFFBQXNCQTtnQkFDL0JHLElBQUlBLENBQUNBLFNBQVNBLEdBQUdBLFFBQVFBLENBQUNBO2dCQUUxQkEsRUFBRUEsQ0FBQUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsQ0FBQUEsQ0FBQ0E7b0JBQ2JBLElBQUlBLENBQUNBLE9BQU9BLENBQUNBLFlBQVlBLENBQUNBLFFBQVFBLEdBQUdBLFFBQVFBLENBQUNBO29CQUM5Q0EsSUFBSUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsV0FBV0EsQ0FBQ0EsaUJBQWNBLENBQUNBLE9BQU9BLENBQUNBLENBQUNBO2dCQUNyREEsQ0FBQ0E7WUFDTEEsQ0FBQ0E7OztXQVJBSDtRQVdEQSxzQkFBSUEscUNBQVNBO2lCQUFiQTtnQkFDSUksTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsVUFBVUEsQ0FBQ0E7WUFDM0JBLENBQUNBO2lCQUNESixVQUFjQSxTQUF1QkE7Z0JBQ2pDSSxJQUFJQSxDQUFDQSxVQUFVQSxHQUFHQSxTQUFTQSxDQUFDQTtnQkFFNUJBLEVBQUVBLENBQUFBLENBQUNBLElBQUlBLENBQUNBLE9BQU9BLENBQUNBLENBQUNBLENBQUNBO29CQUNkQSxJQUFJQSxDQUFDQSxPQUFPQSxDQUFDQSxZQUFZQSxDQUFDQSxTQUFTQSxHQUFHQSxTQUFTQSxDQUFDQTtvQkFDaERBLElBQUlBLENBQUNBLE9BQU9BLENBQUNBLFdBQVdBLENBQUNBLGlCQUFjQSxDQUFDQSxRQUFRQSxDQUFDQSxDQUFDQTtnQkFDdERBLENBQUNBO1lBQ0xBLENBQUNBOzs7V0FSQUo7UUFXREEsc0JBQUlBLGtDQUFNQTtpQkFBVkE7Z0JBQ0lLLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLE9BQU9BLENBQUNBO1lBQ3hCQSxDQUFDQTtpQkFDREwsVUFBV0EsTUFBb0JBO2dCQUMzQkssSUFBSUEsQ0FBQ0EsT0FBT0EsR0FBR0EsTUFBTUEsQ0FBQ0E7Z0JBQ3RCQSxFQUFFQSxDQUFBQSxDQUFDQSxJQUFJQSxDQUFDQSxPQUFPQSxDQUFDQSxDQUFDQSxDQUFDQTtvQkFDZEEsSUFBSUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsWUFBWUEsQ0FBQ0EsTUFBTUEsR0FBR0EsTUFBTUEsQ0FBQ0E7b0JBQzFDQSxJQUFJQSxDQUFDQSxPQUFPQSxDQUFDQSxXQUFXQSxDQUFDQSxpQkFBY0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsQ0FBQ0E7Z0JBQ25EQSxDQUFDQTtZQUNMQSxDQUFDQTs7O1dBUEFMO1FBVURBLHNCQUFJQSxtQ0FBT0E7aUJBQVhBO2dCQUNJTSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQTtZQUN6QkEsQ0FBQ0E7aUJBQ0ROLFVBQVlBLE9BQXFCQTtnQkFDN0JNLElBQUlBLENBQUNBLFFBQVFBLEdBQUdBLE9BQU9BLENBQUNBO2dCQUN4QkEsRUFBRUEsQ0FBQUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7b0JBQ2RBLElBQUlBLENBQUNBLE9BQU9BLENBQUNBLFlBQVlBLENBQUNBLEtBQUtBLEdBQUdBLGdCQUFhQSxDQUFDQSxjQUFjQSxDQUFDQSxPQUFPQSxFQUFFQSxJQUFJQSxDQUFDQSxPQUFPQSxDQUFDQSxDQUFDQTtvQkFDdEZBLElBQUlBLENBQUNBLE9BQU9BLENBQUNBLFdBQVdBLENBQUNBLGlCQUFjQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQTtnQkFDcERBLENBQUNBO1lBQ0xBLENBQUNBOzs7V0FQQU47UUFVREEsc0JBQUlBLG1DQUFPQTtpQkFBWEE7Z0JBQ0lPLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBO1lBQ3pCQSxDQUFDQTtpQkFDRFAsVUFBWUEsT0FBcUJBO2dCQUM3Qk8sSUFBSUEsQ0FBQ0EsUUFBUUEsR0FBR0EsT0FBT0EsQ0FBQ0E7Z0JBQ3hCQSxFQUFFQSxDQUFBQSxDQUFDQSxJQUFJQSxDQUFDQSxPQUFPQSxDQUFDQSxDQUFDQSxDQUFDQTtvQkFDZEEsSUFBSUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsWUFBWUEsQ0FBQ0EsS0FBS0EsR0FBR0EsZ0JBQWFBLENBQUNBLGNBQWNBLENBQUNBLElBQUlBLENBQUNBLE9BQU9BLEVBQUVBLE9BQU9BLENBQUNBLENBQUNBO29CQUN0RkEsSUFBSUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsV0FBV0EsQ0FBQ0EsaUJBQWNBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBO2dCQUNwREEsQ0FBQ0E7WUFDTEEsQ0FBQ0E7OztXQVBBUDtRQVNTQSxvQ0FBV0EsR0FBckJBO1lBQ0lRLE1BQU1BLENBQUNBO2dCQUNIQSxRQUFRQSxFQUFFQSxJQUFJQSxDQUFDQSxRQUFRQTtnQkFDdkJBLEtBQUtBLEVBQUVBLGdCQUFhQSxDQUFDQSxjQUFjQSxDQUFDQSxJQUFJQSxDQUFDQSxPQUFPQSxFQUFFQSxJQUFJQSxDQUFDQSxPQUFPQSxDQUFDQTtnQkFDL0RBLFNBQVNBLEVBQUVBLElBQUlBLENBQUNBLFNBQVNBO2dCQUN6QkEsTUFBTUEsRUFBRUEsSUFBSUEsQ0FBQ0EsTUFBTUE7YUFDdEJBLENBQUNBO1FBQ05BLENBQUNBO1FBQ0xSLHFCQUFDQTtJQUFEQSxDQTdFQTd5QixBQTZFQzZ5QixFQTdFbUM3eUIsV0FBUUEsRUE2RTNDQTtJQTdFWUEsaUJBQWNBLGlCQTZFMUJBLENBQUFBO0FBQ0xBLENBQUNBLEVBaEZNLEVBQUUsS0FBRixFQUFFLFFBZ0ZSO0FDaEZELElBQU8sRUFBRSxDQXVHUjtBQXZHRCxXQUFPLEVBQUUsRUFBQSxDQUFDO0lBQ05BO1FBQW1Dc3pCLGlDQUFRQTtRQUEzQ0E7WUFBbUNDLDhCQUFRQTtZQU9oQ0EsYUFBUUEsR0FBa0JBLElBQUlBLENBQUNBO1lBQy9CQSxXQUFNQSxHQUFrQkEsSUFBSUEsQ0FBQ0E7WUFDN0JBLGNBQVNBLEdBQWtCQSxJQUFJQSxDQUFDQTtZQUNoQ0EsVUFBS0EsR0FBZ0JBLElBQUlBLENBQUNBO1lBQzFCQSxpQkFBWUEsR0FBMENBLElBQUlBLENBQUNBO1lBQzNEQSxxQkFBZ0JBLEdBQTZDQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxNQUFNQSxFQUFrQ0EsQ0FBQ0E7WUFDaEhBLHVCQUFrQkEsR0FBNkNBLElBQUlBLENBQUNBLElBQUlBLENBQUNBLE1BQU1BLEVBQWtDQSxDQUFDQTtRQXdGN0hBLENBQUNBO1FBcEdpQkQsb0JBQU1BLEdBQXBCQTtZQUNJRSxJQUFJQSxJQUFJQSxHQUFHQSxJQUFJQSxJQUFJQSxFQUFFQSxDQUFDQTtZQUV0QkEsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0E7UUFDaEJBLENBQUNBO1FBWU1GLG9DQUFZQSxHQUFuQkE7WUFDSUcsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsZ0JBQWdCQSxFQUFFQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxZQUFZQSxJQUFJQSxJQUFJQSxDQUFDQSxZQUFZQSxDQUFDQSxZQUFZQSxDQUFDQSxpQkFBY0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDNUdBLENBQUNBO1FBS01ILDJDQUFtQkEsR0FIMUJBO1lBSUlJLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLE9BQU9BLENBQUNBLFlBQVlBLENBQUNBLG1CQUFtQkEsRUFBRUEsQ0FBQ0E7UUFDM0RBLENBQUNBO1FBS01KLDZDQUFxQkEsR0FINUJBO1lBSUlLLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLE9BQU9BLENBQUNBLFlBQVlBLENBQUNBLHFCQUFxQkEsRUFBRUEsQ0FBQ0E7UUFDN0RBLENBQUNBO1FBS01MLDJDQUFtQkEsR0FIMUJBO1lBSUlNLElBQUlBLENBQUNBLE9BQU9BLENBQUNBLFlBQVlBLENBQUNBLG1CQUFtQkEsRUFBRUEsQ0FBQ0E7UUFDcERBLENBQUNBO1FBRVNOLHNDQUFjQSxHQUF4QkE7WUFDSU8sZ0JBQUtBLENBQUNBLGNBQWNBLFdBQUVBLENBQUNBO1lBRXZCQSxFQUFFQSxDQUFBQSxDQUFDQSxJQUFJQSxDQUFDQSxnQkFBZ0JBLEVBQUVBLENBQUNBLENBQUFBLENBQUNBO2dCQUN4QkEsRUFBRUEsQ0FBQUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsZUFBZUEsRUFBRUEsQ0FBQ0EsQ0FBQUEsQ0FBQ0E7b0JBQ3ZCQSxFQUFFQSxDQUFBQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxxQkFBcUJBLEVBQUVBLENBQUNBLENBQUFBLENBQUNBO3dCQUM5QkEsSUFBSUEsQ0FBQ0EsbUJBQW1CQSxFQUFFQSxDQUFDQTtvQkFDL0JBLENBQUNBO2dCQUNMQSxDQUFDQTtnQkFDREEsSUFBSUEsQ0FBQUEsQ0FBQ0E7b0JBQ0RBLEVBQUVBLENBQUFBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLG1CQUFtQkEsRUFBRUEsQ0FBQ0EsQ0FBQUEsQ0FBQ0E7d0JBQzVCQSxJQUFJQSxDQUFDQSxtQkFBbUJBLEVBQUVBLENBQUNBO29CQUMvQkEsQ0FBQ0E7Z0JBQ0xBLENBQUNBO1lBQ0xBLENBQUNBO1FBQ0xBLENBQUNBO1FBRVNQLG1DQUFXQSxHQUFyQkE7WUFDSVEsTUFBTUEsQ0FBTUE7Z0JBQ1JBLFFBQVFBLEVBQUVBLElBQUlBLENBQUNBLFFBQVFBO2dCQUN2QkEsS0FBS0EsRUFBRUEsSUFBSUEsQ0FBQ0EsS0FBS0E7Z0JBQ2pCQSxTQUFTQSxFQUFFQSxJQUFJQSxDQUFDQSxTQUFTQTtnQkFDekJBLE1BQU1BLEVBQUVBLElBQUlBLENBQUNBLE1BQU1BO2dCQUNuQkEsWUFBWUEsRUFBRUEsSUFBSUEsQ0FBQ0EsWUFBWUE7YUFDbENBLENBQUNBO1FBQ05BLENBQUNBO1FBT1NSLDZDQUFxQkEsR0FML0JBO1lBTUlTLEVBQUVBLENBQUFBLENBQUNBLElBQUlBLENBQUNBLFlBQVlBLEVBQUVBLENBQUNBLENBQUFBLENBQUNBO2dCQUNwQkEsTUFBTUEsQ0FBQ0EsdUJBQW9CQSxDQUFDQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxZQUFZQSxFQUFFQSxJQUFJQSxDQUFDQSxZQUFZQSxDQUFDQSxZQUFZQSxDQUFpQkEsaUJBQWNBLENBQUNBLENBQUNBLENBQUNBO1lBQzFIQSxDQUFDQTtZQUVEQSxNQUFNQSxDQUFDQSx3QkFBcUJBLENBQUNBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLFlBQVlBLENBQUNBLENBQUNBO1FBQzNEQSxDQUFDQTtRQUVTVCwwQ0FBa0JBLEdBQTVCQSxVQUE2QkEsUUFBc0JBLEVBQUVBLEtBQWtCQSxFQUFFQSxTQUF1QkEsRUFBRUEsTUFBb0JBLEVBQUVBLFlBQW1EQTtZQUN2S1UsRUFBRUEsQ0FBQUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsWUFBWUEsRUFBRUEsQ0FBQ0EsQ0FBQUEsQ0FBQ0E7Z0JBQ3BCQSxJQUFJQSxZQUFZQSxHQUFHQSxvQkFBaUJBLENBQUNBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLENBQUNBO2dCQUVsREEsWUFBWUEsQ0FBQ0EsUUFBUUEsR0FBR0EsUUFBUUEsQ0FBQ0E7Z0JBQ2pDQSxZQUFZQSxDQUFDQSxLQUFLQSxHQUFHQSxLQUFLQSxDQUFDQTtnQkFDM0JBLFlBQVlBLENBQUNBLFNBQVNBLEdBQUdBLFNBQVNBLENBQUNBO2dCQUNuQ0EsWUFBWUEsQ0FBQ0EsTUFBTUEsR0FBR0EsTUFBTUEsQ0FBQ0E7Z0JBQzdCQSxZQUFZQSxDQUFDQSxZQUFZQSxHQUFHQSxZQUFZQSxDQUFDQTtnQkFFekNBLE1BQU1BLENBQUNBLFlBQVlBLENBQUNBO1lBQ3hCQSxDQUFDQTtZQUVEQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSx3QkFBd0JBLENBQUNBLFFBQVFBLEVBQUVBLEtBQUtBLEVBQUVBLFNBQVNBLEVBQUVBLE1BQU1BLENBQUNBLENBQUNBO1FBQzdFQSxDQUFDQTtRQUVPVix3Q0FBZ0JBLEdBQXhCQTtZQUNJVyxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxZQUFZQSxJQUFJQSxJQUFJQSxDQUFDQSxZQUFZQSxDQUFDQSxRQUFRQSxFQUFFQSxHQUFHQSxDQUFDQSxDQUFDQTtRQUNqRUEsQ0FBQ0E7UUEvRURYO1lBQUNBLFVBQU9BLENBQUNBO2dCQUNMLFNBQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxFQUFFLE1BQUcsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsdUJBQXVCLENBQUMsQ0FBQyxDQUFDO1lBQzFHLENBQUMsQ0FBQ0E7V0FDS0EsOENBQW1CQSxRQUV6QkE7UUFFREE7WUFBQ0EsVUFBT0EsQ0FBQ0E7Z0JBQ0wsU0FBTSxDQUFDLElBQUksQ0FBQyxPQUFPLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLEVBQUUsTUFBRyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDLENBQUM7WUFDMUcsQ0FBQyxDQUFDQTtXQUNLQSxnREFBcUJBLFFBRTNCQTtRQUVEQTtZQUFDQSxVQUFPQSxDQUFDQTtnQkFDTCxTQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksRUFBRSxNQUFHLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLHVCQUF1QixDQUFDLENBQUMsQ0FBQztZQUMxRyxDQUFDLENBQUNBO1dBQ0tBLDhDQUFtQkEsUUFFekJBO1FBNkJEQTtZQUFDQSxVQUFPQSxDQUFDQTtnQkFDTCxFQUFFLENBQUEsQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQyxDQUFDO29CQUNyQixTQUFNLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxZQUFZLENBQUMsaUJBQWMsQ0FBQyxFQUFFLE1BQUcsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLGlDQUFpQyxFQUFFLDhCQUE4QixDQUFDLENBQUMsQ0FBQztnQkFDcEosQ0FBQztZQUNMLENBQUMsQ0FBQ0E7V0FDUUEsZ0RBQXFCQSxRQU05QkE7UUFxQkxBLG9CQUFDQTtJQUFEQSxDQXJHQXR6QixBQXFHQ3N6QixFQXJHa0N0ekIsV0FBUUEsRUFxRzFDQTtJQXJHWUEsZ0JBQWFBLGdCQXFHekJBLENBQUFBO0FBQ0xBLENBQUNBLEVBdkdNLEVBQUUsS0FBRixFQUFFLFFBdUdSO0FDdkdELElBQU8sRUFBRSxDQTZHUjtBQTdHRCxXQUFPLEVBQUUsRUFBQSxDQUFDO0lBQ05BO1FBQWlDazBCLCtCQUFRQTtRQUF6Q0E7WUFBaUNDLDhCQUFRQTtZQU85QkEsVUFBS0EsR0FBVUEsSUFBSUEsQ0FBQ0E7WUFDcEJBLFdBQU1BLEdBQVVBLElBQUlBLENBQUNBO1lBQ3JCQSxVQUFLQSxHQUFVQSxJQUFJQSxDQUFDQTtZQUNwQkEsa0JBQWFBLEdBQVVBLENBQUNBLENBQUNBO1lBQ3pCQSxtQkFBY0EsR0FBVUEsQ0FBQ0EsQ0FBQ0E7WUFDMUJBLGtCQUFhQSxHQUFVQSxDQUFDQSxDQUFDQTtRQStGcENBLENBQUNBO1FBMUdpQkQsa0JBQU1BLEdBQXBCQTtZQUNJRSxJQUFJQSxJQUFJQSxHQUFHQSxJQUFJQSxJQUFJQSxFQUFFQSxDQUFDQTtZQUV0QkEsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0E7UUFDaEJBLENBQUNBO1FBU1NGLGlDQUFXQSxHQUFyQkE7WUFDSUcsSUFBSUEsS0FBS0EsR0FBR0EsSUFBSUEsQ0FBQ0EsS0FBS0EsRUFDbEJBLE1BQU1BLEdBQUdBLElBQUlBLENBQUNBLE1BQU1BLEVBQ3BCQSxLQUFLQSxHQUFHQSxJQUFJQSxDQUFDQSxLQUFLQSxFQUNsQkEsYUFBYUEsR0FBR0EsSUFBSUEsQ0FBQ0EsYUFBYUEsRUFDbENBLGNBQWNBLEdBQUdBLElBQUlBLENBQUNBLGNBQWNBLEVBQ3BDQSxhQUFhQSxHQUFHQSxJQUFJQSxDQUFDQSxhQUFhQSxFQUNsQ0EsS0FBS0EsR0FBR0E7Z0JBQ0pBLEtBQUtBLEVBQUlBLENBQUNBO2dCQUNWQSxJQUFJQSxFQUFLQSxDQUFDQTtnQkFDVkEsR0FBR0EsRUFBTUEsQ0FBQ0E7Z0JBQ1ZBLE1BQU1BLEVBQUdBLENBQUNBO2dCQUNWQSxLQUFLQSxFQUFJQSxDQUFDQTtnQkFDVkEsSUFBSUEsRUFBS0EsQ0FBQ0E7YUFDYkEsQ0FBQ0E7WUFDTkEsSUFBSUEsUUFBUUEsR0FBR0E7Z0JBQ1hBLENBQUVBLENBQUNBLEVBQUVBLENBQUNBLEVBQUVBLENBQUNBLENBQUVBO2dCQUNYQSxDQUFFQSxDQUFDQSxFQUFFQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFFQTtnQkFDWEEsQ0FBRUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBRUE7Z0JBQ1hBLENBQUVBLENBQUNBLEVBQUVBLENBQUNBLEVBQUVBLENBQUNBLENBQUVBO2dCQUNYQSxDQUFFQSxDQUFDQSxFQUFFQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFFQTtnQkFDWEEsQ0FBRUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBRUE7YUFDZEEsQ0FBQ0E7WUFFRkEsSUFBSUEsV0FBV0EsR0FBR0E7Z0JBQ2RBLENBQUdBLENBQUNBLEVBQUdBLENBQUNBLEVBQUdBLENBQUNBLENBQUVBO2dCQUNkQSxDQUFHQSxDQUFDQSxFQUFHQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFFQTtnQkFDZEEsQ0FBR0EsQ0FBQ0EsRUFBR0EsQ0FBQ0EsRUFBR0EsQ0FBQ0EsQ0FBRUE7Z0JBQ2RBLENBQUdBLENBQUNBLEVBQUVBLENBQUNBLENBQUNBLEVBQUdBLENBQUNBLENBQUVBO2dCQUNkQSxDQUFHQSxDQUFDQSxFQUFHQSxDQUFDQSxFQUFHQSxDQUFDQSxDQUFFQTtnQkFDZEEsQ0FBRUEsQ0FBQ0EsQ0FBQ0EsRUFBR0EsQ0FBQ0EsRUFBR0EsQ0FBQ0EsQ0FBRUE7YUFDakJBLENBQUNBO1lBQ0ZBLElBQUlBLE9BQU9BLEdBQUdBO2dCQUNWQSxVQUFPQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxLQUFLQSxFQUFFQSxDQUFDQSxNQUFNQSxFQUFFQSxLQUFLQSxDQUFDQTtnQkFDdENBLFVBQU9BLENBQUNBLE1BQU1BLENBQUVBLEtBQUtBLEVBQUVBLENBQUNBLE1BQU1BLEVBQUVBLEtBQUtBLENBQUNBO2dCQUN0Q0EsVUFBT0EsQ0FBQ0EsTUFBTUEsQ0FBRUEsS0FBS0EsRUFBR0EsTUFBTUEsRUFBRUEsS0FBS0EsQ0FBQ0E7Z0JBQ3RDQSxVQUFPQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxLQUFLQSxFQUFHQSxNQUFNQSxFQUFFQSxLQUFLQSxDQUFDQTtnQkFDdENBLFVBQU9BLENBQUNBLE1BQU1BLENBQUVBLEtBQUtBLEVBQUVBLENBQUNBLE1BQU1BLEVBQUVBLENBQUNBLEtBQUtBLENBQUNBO2dCQUN2Q0EsVUFBT0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsS0FBS0EsRUFBRUEsQ0FBQ0EsTUFBTUEsRUFBRUEsQ0FBQ0EsS0FBS0EsQ0FBQ0E7Z0JBQ3ZDQSxVQUFPQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxLQUFLQSxFQUFHQSxNQUFNQSxFQUFFQSxDQUFDQSxLQUFLQSxDQUFDQTtnQkFDdkNBLFVBQU9BLENBQUNBLE1BQU1BLENBQUVBLEtBQUtBLEVBQUdBLE1BQU1BLEVBQUVBLENBQUNBLEtBQUtBLENBQUNBO2FBQzFDQSxDQUFDQTtZQUVGQSxJQUFJQSxRQUFRQSxHQUFHQSxFQUFFQSxDQUFDQTtZQUNsQkEsSUFBSUEsT0FBT0EsR0FBR0EsRUFBRUEsQ0FBQ0E7WUFDakJBLElBQUlBLFNBQVNBLEdBQUdBLEVBQUVBLENBQUNBO1lBQ25CQSxJQUFJQSxPQUFPQSxHQUFHQSxFQUFFQSxDQUFDQTtZQUVqQkEsc0JBQXNCQSxJQUFJQSxFQUFFQSxTQUFTQSxFQUFFQSxTQUFTQTtnQkFDNUNDLElBQUlBLENBQUNBLEVBQUVBLENBQUNBLEVBQUVBLENBQUNBLEVBQUVBLENBQUNBLEVBQUVBLENBQUNBLENBQUNBO2dCQUNsQkEsSUFBSUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0E7Z0JBQ1RBLElBQUlBLE1BQU1BLEdBQUdBLFFBQVFBLENBQUNBLE1BQU1BLEdBQUdBLENBQUNBLENBQUNBO2dCQUVqQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsSUFBSUEsU0FBU0EsRUFBRUEsQ0FBQ0EsRUFBRUEsRUFBRUEsQ0FBQ0E7b0JBQzlCQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxFQUFFQSxDQUFDQSxJQUFJQSxTQUFTQSxFQUFFQSxDQUFDQSxFQUFFQSxFQUFFQSxDQUFDQTt3QkFDOUJBLElBQUlBLEtBQUtBLEdBQUdBLFVBQU9BLENBQUNBLE1BQU1BLEVBQUVBLENBQUFBO3dCQUM1QkEsSUFBSUEsS0FBS0EsR0FBR0EsVUFBT0EsQ0FBQ0EsTUFBTUEsRUFBRUEsQ0FBQ0E7d0JBQzdCQSxJQUFJQSxLQUFLQSxHQUFHQSxVQUFPQSxDQUFDQSxNQUFNQSxFQUFFQSxDQUFDQTt3QkFDN0JBLElBQUlBLENBQUNBLEdBQUdBLFVBQU9BLENBQUNBLE1BQU1BLEVBQUVBLENBQUNBO3dCQUN6QkEsS0FBS0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsUUFBUUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsRUFBRUEsT0FBT0EsQ0FBQ0EsUUFBUUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsR0FBR0EsU0FBU0EsQ0FBQ0EsQ0FBQ0E7d0JBQ2xGQSxLQUFLQSxDQUFDQSxJQUFJQSxDQUFDQSxPQUFPQSxDQUFDQSxRQUFRQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxFQUFFQSxPQUFPQSxDQUFDQSxRQUFRQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxFQUFFQSxDQUFDQSxHQUFHQSxTQUFTQSxDQUFDQSxDQUFDQTt3QkFDbEZBLEtBQUtBLENBQUNBLElBQUlBLENBQUNBLEtBQUtBLEVBQUVBLE9BQU9BLENBQUNBLFFBQVFBLENBQUNBLElBQUlBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO3dCQUM5Q0EsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsS0FBS0EsRUFBRUEsS0FBS0EsQ0FBQ0EsQ0FBQ0E7d0JBQ3JCQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxTQUFTQSxDQUFDQTt3QkFDbEJBLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBLFNBQVNBLENBQUNBO3dCQUVsQkEsUUFBUUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7d0JBQzdCQSxPQUFPQSxDQUFDQSxJQUFJQSxDQUFDQSxXQUFXQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxFQUFFQSxXQUFXQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxFQUFFQSxXQUFXQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTt3QkFDL0VBLFNBQVNBLENBQUNBLElBQUlBLENBQUNBLENBQUNBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBO3dCQUVyQkEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsU0FBU0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsR0FBR0EsU0FBU0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7NEJBQ3JDQSxPQUFPQSxDQUFDQSxJQUFJQSxDQUFDQSxNQUFNQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxTQUFTQSxHQUFHQSxDQUFDQSxDQUFDQSxFQUFRQSxNQUFNQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxTQUFTQSxHQUFHQSxDQUFDQSxDQUFDQSxFQUFNQSxNQUFNQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxTQUFTQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQTs0QkFDdklBLE9BQU9BLENBQUNBLElBQUlBLENBQUNBLE1BQU1BLEdBQUdBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLFNBQVNBLEdBQUdBLENBQUNBLENBQUNBLEVBQUVBLE1BQU1BLEdBQUdBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLFNBQVNBLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLEVBQUVBLE1BQU1BLEdBQUdBLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBLENBQUNBLFNBQVNBLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBO3dCQUUzSUEsQ0FBQ0E7b0JBQ0xBLENBQUNBO2dCQUNMQSxDQUFDQTtZQUNMQSxDQUFDQTtZQUVERCxZQUFZQSxDQUFDQSxLQUFLQSxDQUFDQSxLQUFLQSxFQUFFQSxhQUFhQSxFQUFFQSxjQUFjQSxDQUFDQSxD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Q3JCQSxFQUFFQSxHQUFHQSxVQUFPQSxDQUFDQSxNQUFNQSxFQUFFQSxFQUNyQkEsRUFBRUEsR0FBR0EsVUFBT0EsQ0FBQ0EsTUFBTUEsRUFBRUEsRUFDckJBLEVBQUVBLEdBQUdBLFVBQU9BLENBQUNBLE1BQU1BLEVBQUVBLEVBQ3JCQSxFQUFFQSxHQUFHQSxVQUFPQSxDQUFDQSxNQUFNQSxFQUFFQSxFQUNyQkEsQ0FBQ0EsRUFDREEsSUFBSUEsR0FBR0EsSUFBSUEsWUFBWUEsQ0FBQ0EsV0FBV0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsRUFDeENBLElBQUlBLEdBQUdBLElBQUlBLFlBQVlBLENBQUNBLFdBQVdBLEdBQUdBLENBQUNBLENBQUNBLEVBQ3hDQSxDQUFDQSxHQUFHQSxVQUFPQSxDQUFDQSxNQUFNQSxFQUFFQSxFQUNwQkEsSUFBSUEsR0FBR0EsVUFBT0EsQ0FBQ0EsTUFBTUEsRUFBRUEsRUFDdkJBLFFBQVFBLEdBQUdBLEVBQUVBLENBQUNBO1lBRWxCQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxFQUFFQSxDQUFDQSxHQUFHQSxhQUFhQSxFQUFFQSxDQUFDQSxFQUFFQSxFQUFFQSxDQUFDQTtnQkFDakNBLEVBQUVBLEdBQUdBLE9BQU9BLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBO2dCQUNwQkEsRUFBRUEsR0FBR0EsT0FBT0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBQ3hCQSxFQUFFQSxHQUFHQSxPQUFPQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFFeEJBLEVBQUVBLENBQUNBLEdBQUdBLENBQUNBLFFBQVFBLENBQUNBLEVBQUVBLEdBQUdBLENBQUNBLENBQUNBLEVBQUVBLFFBQVFBLENBQUNBLEVBQUVBLEdBQUdBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLEVBQUVBLFFBQVFBLENBQUNBLEVBQUVBLEdBQUdBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO2dCQUNyRUEsRUFBRUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsUUFBUUEsQ0FBQ0EsRUFBRUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsRUFBRUEsUUFBUUEsQ0FBQ0EsRUFBRUEsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsRUFBRUEsUUFBUUEsQ0FBQ0EsRUFBRUEsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBQ3JFQSxFQUFFQSxDQUFDQSxHQUFHQSxDQUFDQSxRQUFRQSxDQUFDQSxFQUFFQSxHQUFHQSxDQUFDQSxDQUFDQSxFQUFFQSxRQUFRQSxDQUFDQSxFQUFFQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxFQUFFQSxRQUFRQSxDQUFDQSxFQUFFQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFFckVBLEVBQUVBLENBQUNBLEdBQUdBLENBQUNBLFNBQVNBLENBQUNBLEVBQUVBLEdBQUdBLENBQUNBLENBQUNBLEVBQUVBLFNBQVNBLENBQUNBLEVBQUVBLEdBQUdBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO2dCQUNqREEsRUFBRUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsU0FBU0EsQ0FBQ0EsRUFBRUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsRUFBRUEsU0FBU0EsQ0FBQ0EsRUFBRUEsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBQ2pEQSxFQUFFQSxDQUFDQSxHQUFHQSxDQUFDQSxTQUFTQSxDQUFDQSxFQUFFQSxHQUFHQSxDQUFDQSxDQUFDQSxFQUFFQSxTQUFTQSxDQUFDQSxFQUFFQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFFakRBLEVBQUVBLEdBQUdBLEVBQUVBLENBQUNBLENBQUNBLEdBQUdBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBO2dCQUNqQkEsRUFBRUEsR0FBR0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsR0FBR0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBQ2pCQSxFQUFFQSxHQUFHQSxFQUFFQSxDQUFDQSxDQUFDQSxHQUFHQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFDakJBLEVBQUVBLEdBQUdBLEVBQUVBLENBQUNBLENBQUNBLEdBQUdBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBO2dCQUNqQkEsRUFBRUEsR0FBR0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsR0FBR0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBQ2pCQSxFQUFFQSxHQUFHQSxFQUFFQSxDQUFDQSxDQUFDQSxHQUFHQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFFakJBLEVBQUVBLEdBQUdBLEVBQUVBLENBQUNBLENBQUNBLEdBQUdBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBO2dCQUNqQkEsRUFBRUEsR0FBR0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsR0FBR0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBQ2pCQSxFQUFFQSxHQUFHQSxFQUFFQSxDQUFDQSxDQUFDQSxHQUFHQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFDakJBLEVBQUVBLEdBQUdBLEVBQUVBLENBQUNBLENBQUNBLEdBQUdBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBO2dCQUVqQkEsQ0FBQ0EsR0FBR0EsR0FBR0EsR0FBR0EsQ0FBQ0EsRUFBRUEsR0FBR0EsRUFBRUEsR0FBR0EsRUFBRUEsR0FBR0EsRUFBRUEsQ0FBQ0EsQ0FBQ0E7Z0JBQzlCQSxJQUFJQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxFQUFFQSxHQUFHQSxFQUFFQSxHQUFHQSxFQUFFQSxHQUFHQSxFQUFFQSxDQUFDQSxHQUFHQSxDQUFDQSxFQUM1QkEsQ0FBQ0EsRUFBRUEsR0FBR0EsRUFBRUEsR0FBR0EsRUFBRUEsR0FBR0EsRUFBRUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsRUFDdkJBLENBQUNBLEVBQUVBLEdBQUdBLEVBQUVBLEdBQUdBLEVBQUVBLEdBQUdBLEVBQUVBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBO2dCQUM3QkEsSUFBSUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsRUFBRUEsR0FBR0EsRUFBRUEsR0FBR0EsRUFBRUEsR0FBR0EsRUFBRUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsRUFDNUJBLENBQUNBLEVBQUVBLEdBQUdBLEVBQUVBLEdBQUdBLEVBQUVBLEdBQUdBLEVBQUVBLENBQUNBLEdBQUdBLENBQUNBLEVBQ3ZCQSxDQUFDQSxFQUFFQSxHQUFHQSxFQUFFQSxHQUFHQSxFQUFFQSxHQUFHQSxFQUFFQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFFN0JBLElBQUlBLENBQUNBLEVBQUVBLEdBQUdBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLElBQUlBLElBQUlBLENBQUNBLENBQUNBLENBQUNBO2dCQUMzQkEsSUFBSUEsQ0FBQ0EsRUFBRUEsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsSUFBSUEsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBQzNCQSxJQUFJQSxDQUFDQSxFQUFFQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxJQUFJQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFDM0JBLElBQUlBLENBQUNBLEVBQUVBLEdBQUdBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLElBQUlBLElBQUlBLENBQUNBLENBQUNBLENBQUNBO2dCQUMzQkEsSUFBSUEsQ0FBQ0EsRUFBRUEsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsSUFBSUEsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBQzNCQSxJQUFJQSxDQUFDQSxFQUFFQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxJQUFJQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFDM0JBLElBQUlBLENBQUNBLEVBQUVBLEdBQUdBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLElBQUlBLElBQUlBLENBQUNBLENBQUNBLENBQUNBO2dCQUMzQkEsSUFBSUEsQ0FBQ0EsRUFBRUEsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsSUFBSUEsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBQzNCQSxJQUFJQSxDQUFDQSxFQUFFQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxJQUFJQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFFM0JBLElBQUlBLENBQUNBLEVBQUVBLEdBQUdBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLElBQUlBLElBQUlBLENBQUNBLENBQUNBLENBQUNBO2dCQUMzQkEsSUFBSUEsQ0FBQ0EsRUFBRUEsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsSUFBSUEsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBQzNCQSxJQUFJQSxDQUFDQSxFQUFFQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxJQUFJQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFDM0JBLElBQUlBLENBQUNBLEVBQUVBLEdBQUdBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLElBQUlBLElBQUlBLENBQUNBLENBQUNBLENBQUNBO2dCQUMzQkEsSUFBSUEsQ0FBQ0EsRUFBRUEsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsSUFBSUEsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBQzNCQSxJQUFJQSxDQUFDQSxFQUFFQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxJQUFJQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFDM0JBLElBQUlBLENBQUNBLEVBQUVBLEdBQUdBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLElBQUlBLElBQUlBLENBQUNBLENBQUNBLENBQUNBO2dCQUMzQkEsSUFBSUEsQ0FBQ0EsRUFBRUEsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsSUFBSUEsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBQzNCQSxJQUFJQSxDQUFDQSxFQUFFQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxJQUFJQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUMvQkEsQ0FBQ0E7WUFFREEsRUFBRUEsR0FBR0EsVUFBT0EsQ0FBQ0EsTUFBTUEsRUFBRUEsQ0FBQ0E7WUFDdEJBLEVBQUVBLEdBQUdBLFVBQU9BLENBQUNBLE1BQU1BLEVBQUVBLENBQUNBO1lBRXRCQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxFQUFFQSxDQUFDQSxHQUFHQSxXQUFXQSxFQUFFQSxDQUFDQSxFQUFFQSxFQUFFQSxDQUFDQTtnQkFDL0JBLElBQUlBLEtBQUtBLEdBQUdBLElBQUlBLENBQUNBO2dCQUVqQkEsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsT0FBT0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsRUFBRUEsT0FBT0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsRUFBRUEsT0FBT0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBQzlEQSxFQUFFQSxDQUFDQSxHQUFHQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxFQUFFQSxJQUFJQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxFQUFFQSxJQUFJQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFDdERBLEVBQUVBLENBQUNBLEdBQUdBLENBQUNBLElBQUlBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLEVBQUVBLElBQUlBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLEVBQUVBLElBQUlBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO2dCQUd0REEsS0FBS0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0E7Z0JB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QUUxQ0EsTUFBTUEsQ0FBQ0EsYUFBYUEsQ0FBQ0E7UUFDekJBLENBQUNBO1FBRU9YLHFDQUFVQSxHQUFsQkEsVUFBbUJBLFNBQWlCQSxFQUFFQSxhQUEyQkE7WUFNN0RZLGFBQWFBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBLEdBQUdBLFNBQVNBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLFNBQVNBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1lBQ3RFQSxhQUFhQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxHQUFHQSxTQUFTQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxTQUFTQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUN0RUEsYUFBYUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsR0FBR0EsU0FBU0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsR0FBR0EsU0FBU0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0E7WUFDeEVBLGFBQWFBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLFNBQVNBLENBQUNBLE1BQU1BLENBQUNBLEVBQUVBLENBQUNBLEdBQUdBLFNBQVNBLENBQUNBLE1BQU1BLENBQUNBLEVBQUVBLENBQUNBLENBQUNBO1lBQ2pFQSxhQUFhQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxTQUFTQSxFQUFFQSxDQUFDQTtZQUc3QkEsYUFBYUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsR0FBR0EsU0FBU0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsU0FBU0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDdEVBLGFBQWFBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBLEdBQUdBLFNBQVNBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLFNBQVNBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1lBQ3RFQSxhQUFhQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxHQUFHQSxTQUFTQSxDQUFDQSxNQUFNQSxDQUFDQSxFQUFFQSxDQUFDQSxHQUFHQSxTQUFTQSxDQUFDQSxNQUFNQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQTtZQUN4RUEsYUFBYUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsU0FBU0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsR0FBR0EsU0FBU0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0E7WUFDakVBLGFBQWFBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLFNBQVNBLEVBQUVBLENBQUNBO1lBRzdCQSxhQUFhQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxHQUFHQSxTQUFTQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxTQUFTQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUN0RUEsYUFBYUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsR0FBR0EsU0FBU0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsU0FBU0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDdEVBLGFBQWFBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBLEdBQUdBLFNBQVNBLENBQUNBLE1BQU1BLENBQUNBLEVBQUVBLENBQUNBLEdBQUdBLFNBQVNBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1lBQ3ZFQSxhQUFhQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxTQUFTQSxDQUFDQSxNQUFNQSxDQUFDQSxFQUFFQSxDQUFDQSxHQUFHQSxTQUFTQSxDQUFDQSxNQUFNQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQTtZQUNqRUEsYUFBYUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsU0FBU0EsRUFBRUEsQ0FBQ0E7WUFHN0JBLGFBQWFBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBLEdBQUdBLFNBQVNBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLFNBQVNBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1lBQ3RFQSxhQUFhQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxHQUFHQSxTQUFTQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxTQUFTQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUN0RUEsYUFBYUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsR0FBR0EsU0FBU0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsR0FBR0EsU0FBU0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDdkVBLGFBQWFBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLFNBQVNBLENBQUNBLE1BQU1BLENBQUNBLEVBQUVBLENBQUNBLEdBQUdBLFNBQVNBLENBQUNBLE1BQU1BLENBQUNBLEVBQUVBLENBQUNBLENBQUNBO1lBQ2pFQSxhQUFhQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxTQUFTQSxFQUFFQSxDQUFDQTtZQUc3QkEsYUFBYUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsR0FBR0EsU0FBU0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsU0FBU0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDdEVBLGFBQWFBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBLEdBQUdBLFNBQVNBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLFNBQVNBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1lBQ3RFQSxhQUFhQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxHQUFHQSxTQUFTQSxDQUFDQSxNQUFNQSxDQUFDQSxFQUFFQSxDQUFDQSxHQUFHQSxTQUFTQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUN2RUEsYUFBYUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsU0FBU0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsR0FBR0EsU0FBU0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0E7WUFDakVBLGFBQWFBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLFNBQVNBLEVBQUVBLENBQUNBO1lBRzdCQSxhQUFhQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxHQUFHQSxTQUFTQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxTQUFTQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUN0RUEsYUFBYUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsR0FBR0EsU0FBU0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsU0FBU0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDdEVBLGFBQWFBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBLEdBQUdBLFNBQVNBLENBQUNBLE1BQU1BLENBQUNBLEVBQUVBLENBQUNBLEdBQUdBLFNBQVNBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1lBQ3ZFQSxhQUFhQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxTQUFTQSxDQUFDQSxNQUFNQSxDQUFDQSxFQUFFQSxDQUFDQSxHQUFHQSxTQUFTQSxDQUFDQSxNQUFNQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQTtZQUNqRUEsYUFBYUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsU0FBU0EsRUFBRUEsQ0FBQ0E7UUFDakNBLENBQUNBO1FBQ0xaLHVCQUFDQTtJQUFEQSxDQTlIQTE3QixBQThIQzA3QixFQTlIOEMxN0IsWUFBU0EsRUE4SHZEQTtJQTlIcUJBLG1CQUFnQkEsbUJBOEhyQ0EsQ0FBQUE7QUFDTEEsQ0FBQ0EsRUFoSU0sRUFBRSxLQUFGLEVBQUUsUUFnSVI7QUNoSUQsSUFBTyxFQUFFLENBUVI7QUFSRCxXQUFPLEVBQUUsRUFBQyxDQUFDO0lBQ1BBO1FBQTJDdThCLHlDQUFnQkE7UUFBM0RBO1lBQTJDQyw4QkFBZ0JBO1FBTTNEQSxDQUFDQTtRQUxpQkQsNEJBQU1BLEdBQXBCQSxVQUFxQkEsZUFBc0JBO1lBQ3ZDRSxJQUFJQSxHQUFHQSxHQUFHQSxJQUFJQSxJQUFJQSxDQUFDQSxlQUFlQSxDQUFDQSxDQUFDQTtZQUVwQ0EsTUFBTUEsQ0FBQ0EsR0FBR0EsQ0FBQ0E7UUFDZkEsQ0FBQ0E7UUFDTEYsNEJBQUNBO0lBQURBLENBTkF2OEIsQUFNQ3U4QixFQU4wQ3Y4QixtQkFBZ0JBLEVBTTFEQTtJQU5ZQSx3QkFBcUJBLHdCQU1qQ0EsQ0FBQUE7QUFDTEEsQ0FBQ0EsRUFSTSxFQUFFLEtBQUYsRUFBRSxRQVFSO0FDUkQsSUFBTyxFQUFFLENBdUNSO0FBdkNELFdBQU8sRUFBRSxFQUFDLENBQUM7SUFDUEE7UUFBeUMwOEIsdUNBQWdCQTtRQU9yREEsNkJBQVlBLGVBQXNCQTtZQUM5QkMsa0JBQU1BLGVBQWVBLENBQUNBLENBQUNBO1lBVW5CQSxhQUFRQSxHQUFvQkEsSUFBSUEsQ0FBQ0E7WUFSckNBLEVBQUVBLENBQUFBLENBQUNBLGVBQWVBLFlBQVlBLG9CQUFpQkEsQ0FBQ0EsQ0FBQUEsQ0FBQ0E7Z0JBQzdDQSxJQUFJQSxDQUFDQSxRQUFRQSxHQUFHQSw4QkFBMkJBLENBQUNBLE1BQU1BLENBQW9CQSxlQUFlQSxDQUFDQSxDQUFDQTtZQUMzRkEsQ0FBQ0E7WUFDREEsSUFBSUEsQ0FBQUEsQ0FBQ0E7Z0JBQ0RBLElBQUlBLENBQUNBLFFBQVFBLEdBQUdBLCtCQUE0QkEsQ0FBQ0EsTUFBTUEsQ0FBcUJBLGVBQWVBLENBQUNBLENBQUNBO1lBQzdGQSxDQUFDQTtRQUNMQSxDQUFDQTtRQWZhRCwwQkFBTUEsR0FBcEJBLFVBQXFCQSxlQUFzQkE7WUFDdkNFLElBQUlBLEdBQUdBLEdBQUdBLElBQUlBLElBQUlBLENBQUNBLGVBQWVBLENBQUNBLENBQUNBO1lBRXBDQSxNQUFNQSxDQUFDQSxHQUFHQSxDQUFDQTtRQUNmQSxDQUFDQTtRQWVNRixrQ0FBSUEsR0FBWEE7WUFDSUcsZ0JBQUtBLENBQUNBLElBQUlBLFdBQUVBLENBQUNBO1lBRWJBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLElBQUlBLENBQUNBLElBQUlBLENBQUNBLFlBQVlBLENBQUNBLENBQUNBO1FBQzFDQSxDQUFDQTtRQUVNSCxvQ0FBTUEsR0FBYkEsVUFBY0EsV0FBa0JBO1lBQzVCSSxnQkFBS0EsQ0FBQ0EsTUFBTUEsWUFBQ0EsV0FBV0EsQ0FBQ0EsQ0FBQ0E7WUFFMUJBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLE1BQU1BLENBQUNBLFdBQVdBLENBQUNBLENBQUNBO1FBQ3RDQSxDQUFDQTtRQUVNSixxQ0FBT0EsR0FBZEE7WUFDSUssZ0JBQUtBLENBQUNBLE9BQU9BLFdBQUVBLENBQUNBO1lBRWhCQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxPQUFPQSxFQUFFQSxDQUFDQTtRQUM1QkEsQ0FBQ0E7UUFDTEwsMEJBQUNBO0lBQURBLENBckNBMThCLEFBcUNDMDhCLEVBckN3QzE4QixtQkFBZ0JBLEVBcUN4REE7SUFyQ1lBLHNCQUFtQkEsc0JBcUMvQkEsQ0FBQUE7QUFDTEEsQ0FBQ0EsRUF2Q00sRUFBRSxLQUFGLEVBQUUsUUF1Q1I7QUN2Q0QsSUFBTyxFQUFFLENBMEdSO0FBMUdELFdBQU8sRUFBRSxFQUFDLENBQUM7SUFHUEE7UUFDSWc5QiwwQkFBWUEsZUFBc0JBO1lBSTNCQyxjQUFTQSxHQUFVQSxHQUFHQSxDQUFDQTtZQUN2QkEsZ0JBQVdBLEdBQVVBLEdBQUdBLENBQUNBO1lBRXRCQSxvQkFBZUEsR0FBVUEsSUFBSUEsQ0FBQ0E7WUFFaENBLGFBQVFBLEdBQVVBLENBQUNBLENBQUNBO1lBQ3BCQSxhQUFRQSxHQUFVQSxDQUFDQSxDQUFDQTtZQUNwQkEsY0FBU0EsR0FBV0EsS0FBS0EsQ0FBQ0E7WUFDMUJBLDJCQUFzQkEsR0FBcUJBLElBQUlBLENBQUNBO1lBQ2hEQSx5QkFBb0JBLEdBQXFCQSxJQUFJQSxDQUFDQTtZQUM5Q0EsZ0JBQVdBLEdBQWNBLElBQUlBLENBQUNBO1lBYmxDQSxJQUFJQSxDQUFDQSxlQUFlQSxHQUFHQSxlQUFlQSxDQUFDQTtRQUMzQ0EsQ0FBQ0E7UUFjTUQsK0JBQUlBLEdBQVhBLFVBQVlBLFlBQXVCQTtZQUMvQkUsSUFBSUEsV0FBV0EsR0FBR0EsWUFBWUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsV0FBV0EsQ0FBQ0E7WUFFckRBLElBQUlBLENBQUNBLFFBQVFBLEdBQUdBLFdBQVdBLENBQUNBLENBQUNBLENBQUNBO1lBQzlCQSxJQUFJQSxDQUFDQSxRQUFRQSxHQUFHQSxXQUFXQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUU5QkEsSUFBSUEsQ0FBQ0EsV0FBV0EsR0FBR0EsWUFBWUEsQ0FBQ0E7WUFFaENBLElBQUlBLENBQUNBLGdCQUFnQkEsRUFBRUEsQ0FBQ0E7UUFDNUJBLENBQUNBO1FBRU1GLGlDQUFNQSxHQUFiQSxVQUFjQSxXQUFrQkE7WUFDNUJHLEVBQUVBLENBQUNBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLFNBQVNBLENBQUNBLENBQUNBLENBQUNBO2dCQUNsQkEsTUFBTUEsQ0FBQ0E7WUFDWEEsQ0FBQ0E7WUFFREEsSUFBSUEsQ0FBQ0EsU0FBU0EsR0FBR0EsS0FBS0EsQ0FBQ0E7WUFFdkJBLElBQUlBLENBQUNBLFdBQVdBLENBQUNBLFNBQVNBLENBQUNBLFdBQVdBLEdBQUdBLFVBQU9BLENBQUNBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLFFBQVFBLEVBQUVBLElBQUlBLENBQUNBLFFBQVFBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBO1FBQzdGQSxDQUFDQTtRQUVNSCxrQ0FBT0EsR0FBZEE7WUFDSUksSUFBSUEsQ0FBQ0EsWUFBWUEsRUFBRUEsQ0FBQ0E7UUFDeEJBLENBQUNBO1FBSU9KLGdDQUFLQSxHQUFiQSxVQUFjQSxLQUFtQkE7WUFDN0JLLElBQUlBLEtBQUtBLEdBQUdBLElBQUlBLENBQUNBLFNBQVNBLEVBQ3RCQSxZQUFZQSxHQUFHQSxJQUFJQSxDQUFDQSxXQUFXQSxFQUMvQkEsUUFBUUEsR0FBR0EsS0FBS0EsQ0FBQ0EsUUFBUUEsQ0FBQ0E7WUFFOUJBLEVBQUVBLENBQUNBLENBQUNBLFFBQVFBLENBQUNBLEdBQUdBLENBQUNBLElBQUlBLFFBQVFBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBLENBQUNBLENBQUNBO2dCQUNwQ0EsWUFBWUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsY0FBY0EsQ0FBQ0EsVUFBT0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsS0FBS0EsRUFBRUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDeEVBLENBQUNBO1lBQ0RBLElBQUlBLENBQUNBLEVBQUVBLENBQUFBLENBQUNBLFFBQVFBLENBQUNBLEdBQUdBLENBQUNBLElBQUlBLFFBQVFBLENBQUNBLE9BQU9BLENBQUNBLENBQUNBLENBQUNBLENBQUNBO2dCQUN6Q0EsWUFBWUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsY0FBY0EsQ0FBQ0EsVUFBT0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsS0FBS0EsRUFBRUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDdkVBLENBQUNBO1lBQ0RBLElBQUlBLENBQUNBLEVBQUVBLENBQUFBLENBQUNBLFFBQVFBLENBQUNBLEdBQUdBLENBQUNBLElBQUlBLFFBQVFBLENBQUNBLElBQUlBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO2dCQUN0Q0EsWUFBWUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsY0FBY0EsQ0FBQ0EsVUFBT0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDeEVBLENBQUNBO1lBQ0RBLElBQUlBLENBQUNBLEVBQUVBLENBQUFBLENBQUNBLFFBQVFBLENBQUNBLEdBQUdBLENBQUNBLElBQUlBLFFBQVFBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBLENBQUNBLENBQUNBO2dCQUN4Q0EsWUFBWUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsY0FBY0EsQ0FBQ0EsVUFBT0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsRUFBRUEsS0FBS0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDdkVBLENBQUNBO1FBQ0xBLENBQUNBO1FBRU9MLDJDQUFnQkEsR0FBeEJBO1lBQ0lNLElBQUlBLElBQUlBLEdBQUdBLElBQUlBLEVBQ1hBLFdBQVdBLEdBQUdBLElBQUlBLENBQUNBLFdBQVdBLEVBQzlCQSxTQUFTQSxHQUFHQSxlQUFZQSxDQUFDQSxTQUFTQSxDQUFDQSxXQUFRQSxDQUFDQSxXQUFXQSxFQUFFQSxDQUFDQSxLQUFLQSxFQUFPQSxjQUFXQSxDQUFDQSxVQUFVQSxDQUFDQSxFQUM3RkEsT0FBT0EsR0FBR0EsZUFBWUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsWUFBU0EsQ0FBQ0EsT0FBT0EsQ0FBQ0EsRUFDbkRBLE1BQU1BLEdBQUdBLFdBQVFBLENBQUNBLFdBQVdBLEVBQUVBLENBQUNBLElBQUlBLENBQUNBO1lBRXpDQSxJQUFJQSxDQUFDQSxzQkFBc0JBLEdBQUdBLFNBQVNBO2lCQUNsQ0EsR0FBR0EsQ0FBQ0EsVUFBQ0EsQ0FBYUE7Z0JBQ2ZBLElBQUlBLGFBQWFBLEdBQUdBLENBQUNBLENBQUNBLFFBQVFBLENBQUNBLGFBQWFBLEVBQ3hDQSxFQUFFQSxHQUFHQSxJQUFJQSxFQUNUQSxFQUFFQSxHQUFHQSxJQUFJQSxFQUNUQSxNQUFNQSxHQUFHQSxXQUFXQSxHQUFHQSxNQUFNQSxDQUFDQSxNQUFNQSxDQUFDQTtnQkFFekNBLEVBQUVBLEdBQUdBLE1BQU1BLEdBQUdBLGFBQWFBLENBQUNBLENBQUNBLENBQUNBO2dCQUM5QkEsRUFBRUEsR0FBR0EsTUFBTUEsR0FBR0EsYUFBYUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBRTlCQSxJQUFJQSxDQUFDQSxTQUFTQSxHQUFHQSxJQUFJQSxDQUFDQTtnQkFFdEJBLE1BQU1BLENBQUNBO29CQUNIQSxFQUFFQSxFQUFFQSxFQUFFQTtvQkFDTkEsRUFBRUEsRUFBRUEsRUFBRUE7aUJBQ1RBLENBQUNBO1lBQ05BLENBQUNBLENBQUNBO2lCQUNEQSxTQUFTQSxDQUFDQSxVQUFVQSxHQUFHQTtnQkFDcEIsSUFBSSxDQUFDLFFBQVEsSUFBSSxHQUFHLENBQUMsRUFBRSxDQUFDO2dCQUN4QixJQUFJLENBQUMsUUFBUSxJQUFJLEdBQUcsQ0FBQyxFQUFFLENBQUM7WUFDNUIsQ0FBQyxDQUFDQSxDQUFDQTtZQUVQQSxJQUFJQSxDQUFDQSxvQkFBb0JBLEdBQUdBLE9BQU9BLENBQUNBLFNBQVNBLENBQUNBLFVBQUNBLENBQWVBO2dCQUMxREEsSUFBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBQ2RBLElBQUlBLENBQUNBLElBQUlBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1lBQ2pCQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUNQQSxDQUFDQTtRQUVPTix1Q0FBWUEsR0FBcEJBO1lBQ0lPLElBQUlBLENBQUNBLHNCQUFzQkEsQ0FBQ0EsT0FBT0EsRUFBRUEsQ0FBQ0E7WUFDdENBLElBQUlBLENBQUNBLG9CQUFvQkEsQ0FBQ0EsT0FBT0EsRUFBRUEsQ0FBQ0E7UUFDeENBLENBQUNBO1FBQ0xQLHVCQUFDQTtJQUFEQSxDQXRHQWg5QixBQXNHQ2c5QixJQUFBaDlCO0lBdEdxQkEsbUJBQWdCQSxtQkFzR3JDQSxDQUFBQTtBQUNMQSxDQUFDQSxFQTFHTSxFQUFFLEtBQUYsRUFBRSxRQTBHUjtBQzFHRCxJQUFPLEVBQUUsQ0F3QlI7QUF4QkQsV0FBTyxFQUFFLEVBQUMsQ0FBQztJQUNQQTtRQUFpRHc5QiwrQ0FBZ0JBO1FBQWpFQTtZQUFpREMsOEJBQWdCQTtZQU90REEsY0FBU0EsR0FBVUEsRUFBRUEsQ0FBQ0E7UUFlakNBLENBQUNBO1FBckJpQkQsa0NBQU1BLEdBQXBCQSxVQUFxQkEsZUFBc0JBO1lBQ3ZDRSxJQUFJQSxHQUFHQSxHQUFHQSxJQUFJQSxJQUFJQSxDQUFDQSxlQUFlQSxDQUFDQSxDQUFDQTtZQUVwQ0EsTUFBTUEsQ0FBQ0EsR0FBR0EsQ0FBQ0E7UUFDZkEsQ0FBQ0E7UUFNU0YsMENBQUlBLEdBQWRBLFVBQWVBLEtBQW1CQTtZQUM5QkcsSUFBSUEsS0FBS0EsR0FBR0EsSUFBSUEsQ0FBQ0EsU0FBU0EsRUFDdEJBLFFBQVFBLEdBQUdBLEtBQUtBLENBQUNBLFFBQVFBLENBQUNBO1lBRTlCQSxFQUFFQSxDQUFDQSxDQUFDQSxRQUFRQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFDaEJBLElBQUlBLENBQUNBLGVBQWVBLENBQUNBLE1BQU1BLENBQUNBLEtBQUtBLENBQUNBLENBQUNBO1lBQ3ZDQSxDQUFDQTtZQUNEQSxJQUFJQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQSxRQUFRQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFDckJBLElBQUlBLENBQUNBLGVBQWVBLENBQUNBLE9BQU9BLENBQUNBLEtBQUtBLENBQUNBLENBQUNBO1lBQ3hDQSxDQUFDQTtRQUNMQSxDQUFDQTtRQUNMSCxrQ0FBQ0E7SUFBREEsQ0F0QkF4OUIsQUFzQkN3OUIsRUF0QmdEeDlCLG1CQUFnQkEsRUFzQmhFQTtJQXRCWUEsOEJBQTJCQSw4QkFzQnZDQSxDQUFBQTtBQUNMQSxDQUFDQSxFQXhCTSxFQUFFLEtBQUYsRUFBRSxRQXdCUjtBQ3hCRCxJQUFPLEVBQUUsQ0FXUjtBQVhELFdBQU8sRUFBRSxFQUFDLENBQUM7SUFDUEE7UUFBa0Q0OUIsZ0RBQWdCQTtRQUFsRUE7WUFBa0RDLDhCQUFnQkE7UUFTbEVBLENBQUNBO1FBUmlCRCxtQ0FBTUEsR0FBcEJBLFVBQXFCQSxlQUFzQkE7WUFDdkNFLElBQUlBLEdBQUdBLEdBQUdBLElBQUlBLElBQUlBLENBQUNBLGVBQWVBLENBQUNBLENBQUNBO1lBRXBDQSxNQUFNQSxDQUFDQSxHQUFHQSxDQUFDQTtRQUNmQSxDQUFDQTtRQUVTRiwyQ0FBSUEsR0FBZEEsVUFBZUEsS0FBbUJBO1FBQ2xDRyxDQUFDQTtRQUNMSCxtQ0FBQ0E7SUFBREEsQ0FUQTU5QixBQVNDNDlCLEVBVGlENTlCLG1CQUFnQkEsRUFTakVBO0lBVFlBLCtCQUE0QkEsK0JBU3hDQSxDQUFBQTtBQUNMQSxDQUFDQSxFQVhNLEVBQUUsS0FBRixFQUFFLFFBV1I7QUNYRCxJQUFPLEVBQUUsQ0FtSlI7QUFuSkQsV0FBTyxFQUFFLEVBQUMsQ0FBQztJQUlQQTtRQUE2Q2crQiwyQ0FBZ0JBO1FBQTdEQTtZQUE2Q0MsOEJBQWdCQTtZQU9sREEsZUFBVUEsR0FBVUEsQ0FBQ0EsQ0FBQ0E7WUFDdEJBLGVBQVVBLEdBQVVBLENBQUNBLENBQUNBO1lBQ3RCQSxnQkFBV0EsR0FBVUEsQ0FBQ0EsQ0FBQ0E7WUFDdkJBLGFBQVFBLEdBQVVBLEVBQUVBLENBQUNBO1lBQ3JCQSxRQUFHQSxHQUFVQSxJQUFJQSxDQUFDQSxFQUFFQSxHQUFHQSxDQUFDQSxDQUFDQTtZQUN6QkEsVUFBS0EsR0FBVUEsSUFBSUEsQ0FBQ0EsRUFBRUEsR0FBR0EsQ0FBQ0EsQ0FBQ0E7WUFDM0JBLFdBQU1BLEdBQVdBLFVBQU9BLENBQUNBLE1BQU1BLENBQUNBLENBQUNBLEVBQUVBLENBQUNBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBO1lBQ3pDQSxnQkFBV0EsR0FBR0EsSUFBSUEsQ0FBQ0E7WUFDbkJBLGdCQUFXQSxHQUFVQSxJQUFJQSxDQUFDQTtZQUV6QkEsY0FBU0EsR0FBV0EsSUFBSUEsQ0FBQ0E7WUFDekJBLDJCQUFzQkEsR0FBcUJBLElBQUlBLENBQUNBO1lBQ2hEQSw0QkFBdUJBLEdBQXFCQSxJQUFJQSxDQUFDQTtZQUNqREEseUJBQW9CQSxHQUFxQkEsSUFBSUEsQ0FBQ0E7UUEwSDFEQSxDQUFDQTtRQTdJaUJELDhCQUFNQSxHQUFwQkEsVUFBcUJBLGVBQXNCQTtZQUN2Q0UsSUFBSUEsR0FBR0EsR0FBR0EsSUFBSUEsSUFBSUEsQ0FBQ0EsZUFBZUEsQ0FBQ0EsQ0FBQ0E7WUFFcENBLE1BQU1BLENBQUNBLEdBQUdBLENBQUNBO1FBQ2ZBLENBQUNBO1FBaUJNRixzQ0FBSUEsR0FBWEE7WUFDSUcsZ0JBQUtBLENBQUNBLElBQUlBLFdBQUVBLENBQUNBO1lBRWJBLElBQUlBLENBQUNBLGdCQUFnQkEsRUFBRUEsQ0FBQ0E7UUFDNUJBLENBQUNBO1FBRU1ILHdDQUFNQSxHQUFiQSxVQUFjQSxXQUFrQkE7WUFNNUJJLElBQUlBLENBQUNBLEdBQUdBLElBQUlBLEVBQ1JBLENBQUNBLEdBQUdBLElBQUlBLEVBQ1JBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBO1lBRWJBLGdCQUFLQSxDQUFDQSxNQUFNQSxZQUFDQSxXQUFXQSxDQUFDQSxDQUFDQTtZQUUxQkEsRUFBRUEsQ0FBQUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsQ0FBQUEsQ0FBQ0E7Z0JBQ2hCQSxNQUFNQSxDQUFDQTtZQUNYQSxDQUFDQTtZQUVEQSxJQUFJQSxDQUFDQSxTQUFTQSxHQUFHQSxLQUFLQSxDQUFDQTtZQUV2QkEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDbEZBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLEdBQUdBLENBQUNBLElBQUlBLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLEdBQUdBLENBQUNBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1lBQ2xGQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQSxHQUFHQSxDQUFDQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUU3REEsSUFBSUEsQ0FBQ0EsWUFBWUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsUUFBUUEsR0FBR0EsVUFBT0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDL0RBLElBQUlBLENBQUNBLFlBQVlBLENBQUNBLFNBQVNBLENBQUNBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBO1FBQ3BEQSxDQUFDQTtRQUVNSix5Q0FBT0EsR0FBZEE7WUFDSUssZ0JBQUtBLENBQUNBLE9BQU9BLFdBQUVBLENBQUNBO1lBRWhCQSxJQUFJQSxDQUFDQSxZQUFZQSxFQUFFQSxDQUFDQTtRQUN4QkEsQ0FBQ0E7UUFHT0wsa0RBQWdCQSxHQUF4QkE7WUFDSU0sSUFBSUEsSUFBSUEsR0FBR0EsSUFBSUEsRUFDWEEsVUFBVUEsR0FBR0EsZUFBWUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsV0FBUUEsQ0FBQ0EsV0FBV0EsRUFBRUEsQ0FBQ0EsS0FBS0EsRUFBT0EsY0FBV0EsQ0FBQ0EsV0FBV0EsQ0FBQ0EsRUFDL0ZBLFNBQVNB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Q0FBQyxDQUFFLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFFLENBQUMsR0FBRyxDQUFDLENBQUUsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBRSxDQUFDLEdBQUcsQ0FBQyxDQUFFLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO2dCQUVyRixDQUFDO2dCQUFDLElBQUksQ0FBQyxDQUFDO29CQUVKLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7d0JBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUUsQ0FBQztvQkFDbkUsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQzt3QkFBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUUsQ0FBQztvQkFFOUUsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcs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RUFBRUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsRUFBRUEsRUFBRUEsQ0FBQ0E7d0JBQ3pCQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxFQUFFQSxDQUFDQSxHQUFHQSxDQUFDQSxFQUFFQSxDQUFDQSxFQUFFQSxFQUFFQSxDQUFDQTs0QkFDekJBLElBQUlBLFFBQVFBLEdBQUdBLFFBQVFBLENBQUNBLElBQUlBLEVBQUVBLENBQUNBLEdBQUdBLENBQUNBLFdBQVdBLENBQUNBLElBQUlBLEVBQUVBLENBQUNBLEtBQUtBLENBQUNBLENBQUNBLEVBQUVBLENBQUNBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBLEVBQ2pFQSxRQUFRQSxHQUFHQSxRQUFRQSxDQUFDQSxJQUFJQSxFQUFFQSxDQUFDQSxHQUFHQSxDQUFDQSxXQUFXQSxDQUFDQSxJQUFJQSxFQUFFQSxDQUFDQSxLQUFLQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxFQUFFQSxDQUFDQSxHQUFHQSxDQUFDQSxFQUFFQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQSxFQUM3RUEsSUFBSUEsR0FBR0EsYUFBVUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsUUFBUUEsRUFBRUEsUUFBUUEsRUFBRUEsZUFBZUEsRUFBRUEsWUFBWUEsR0FBR0EsQ0FBQ0EsRUFBRUEsUUFBUUEsQ0FBQ0EsQ0FBQ0E7NEJBRTlGQSxJQUFJQSxDQUFDQSxnQkFBZ0JBLENBQUNBLGdCQUFnQkEsQ0FBQ0EsQ0FBQ0E7NEJBRXhDQSxFQUFFQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxpQkFBaUJBLEdBQUdBLGVBQWVBLElBQUlBLFlBQVlBLEdBQUdBLFFBQVFBLENBQUNBLENBQUNBLENBQUNBO2dDQUN0RUEsU0FBU0EsQ0FBQ0EsUUFBUUEsRUFBRUEsUUFBUUEsRUFBRUEsWUFBWUEsR0FBR0EsQ0FBQ0EsRUFBRUEsZ0JBQWdCQSxFQUFFQSxJQUFJQSxDQUFDQSxDQUFDQTs0QkFDNUVBLENBQUNBOzRCQUVEQSxVQUFVQSxD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QVFBLEVBQUVBLEtBQUtBLENBQUNBLENBQUNBO1lBRTdDQSxJQUFJQSxDQUFDQSxXQUFXQSxDQUFDQSxTQUFTQSxDQUFDQSxRQUFRQSxHQUFHQSxLQUFLQSxDQUFDQSxNQUFNQSxDQUFDQTtRQUN2REEsQ0FBQ0E7UUFLU0wsa0RBQXNCQSxHQUhoQ0EsVUFHaUNBLFFBQXVCQSxFQUFFQSxLQUFlQTtZQUNyRU0sSUFBSUEsV0FBV0EsR0FBR0EsS0FBS0EsQ0FBQ0EsV0FBV0EsRUFDL0JBLENBQUNBLEdBQUdBLFdBQVdBLENBQUNBLENBQUNBLEVBQ2pCQSxDQUFDQSxHQUFHQSxXQUFXQSxDQUFDQSxDQUFDQSxFQUNqQkEsQ0FBQ0EsR0FBR0EsV0FBV0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFFdEJBLFFBQVFBLENBQUNBLFFBQVFBLEdBQUdBO2dCQUNoQkEsQ0FBQ0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0E7Z0JBQzFDQSxDQUFDQSxDQUFDQSxFQUFFQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQSxFQUFFQSxDQUFDQSxFQUFFQSxDQUFDQSxFQUFFQSxDQUFDQSxFQUFFQSxDQUFDQSxFQUFFQSxDQUFDQSxFQUFFQSxDQUFDQSxFQUFFQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQTthQUN6Q0EsQ0FBQ0E7WUFNRkEsUUFBUUEsQ0FBQ0EsT0FBT0EsR0FBR0E7Z0JBQ2ZBLENBQUNBLEVBQUNBLENBQUNBLEVBQUNBLENBQUNBLEVBQUNBLENBQUNBLEVBQUNBLENBQUNBLEVBQUNBLENBQUNBLEVBQUNBLENBQUNBLEVBQUNBLENBQUNBO2dCQUNmQSxDQUFDQSxFQUFDQSxDQUFDQSxFQUFDQSxDQUFDQSxF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O29CQUNQQSxFQUFFQSxHQUFHQSxDQUFDQSxDQUFDQTtvQkFDUEEsRUFBRUEsR0FBR0EsQ0FBQ0EsQ0FBQ0E7Z0JBQ1hBLENBQUNBO2dCQUNEQSxJQUFJQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQSxJQUFJQSxLQUFLQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtvQkFDbEJBLEVBQUVBLEdBQUdBLENBQUNBLENBQUNBO29CQUNQQSxFQUFFQSxHQUFHQSxDQUFDQSxDQUFDQTtvQkFDUEEsRUFBRUEsR0FBR0EsQ0FBQ0EsQ0FBQ0E7Z0JBQ1hBLENBQUNBO2dCQUVEQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxFQUFFQSxDQUFDQSxHQUFHQSxRQUFRQSxFQUFFQSxDQUFDQSxFQUFFQSxFQUFFQSxDQUFDQTtvQkFDaENBLEtBQUtBLEdBQUdBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLEVBQUVBLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLFFBQVFBLENBQUNBLENBQUNBO29CQUNyQ0EsUUFBUUEsQ0FBQ0EsQ0FBQ0EsR0FBQ0EsRUFBRUEsQ0FBQ0EsR0FBR0EsTUFBTUEsR0FBR0EsSUFBSUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsQ0FBQ0E7b0JBQzFDQSxRQUFRQSxDQUFDQSxDQUFDQSxHQUFDQSxFQUFFQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtvQkFDbkJBLFFBQVFBLENBQUNBLENBQUNBLEdBQUNBLEVBQUVBLENBQUNBLEdBQUdBLE1BQU1BLEdBQUdBLElBQUlBLENBQUNBLEdBQUdBLENBQUNBLEtBQUtBLENBQUNBLENBQUNBO29CQUMxQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7b0JBRVBBLEtBQUtBLEdBQUdBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLEVBQUVBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLFFBQVFBLENBQUNBLENBQUNBO29CQUMzQ0EsUUFBUUEsQ0FBQ0EsQ0FBQ0Es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QSxRQUFRQSxDQUFDQSxJQUFJQSxFQUFFQSxDQUFDQSxDQUFDQTtZQUN0Q0EsZUFBZUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsUUFBUUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFFbENBLGVBQWVBLENBQUNBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLElBQUlBLEVBQUVBLENBQUNBLENBQUNBO1lBQ3RDQSxlQUFlQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxRQUFRQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUVsQ0EsZUFBZUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsSUFBSUEsRUFBRUEsQ0FBQ0EsQ0FBQ0E7WUFDdENBLGVBQWVBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLFFBQVFBLENBQUNBLENBQUNBLENBQUNBO1lBRWxDQSxlQUFlQSxDQUFDQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxJQUFJQSxFQUFFQSxDQUFDQSxDQUFDQTtZQUN0Q0EsZUFBZUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsUUFBUUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFFbENBLGVBQWVBLENBQUNBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLElBQUlBLEVBQUVBLENBQUNBLENBQUNBO1lBQ3RDQSxlQUFlQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxRQUFRQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUVsQ0EsZUFBZUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsSUFBSUEsRUFBRUEsQ0FBQ0EsQ0FBQ0E7WUFDdENBLGVBQWVBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLFFBQVFBLENBQUNBLENBQUNBLENBQUNBO1lBRWxDQSxNQUFNQSxDQUFDQSxlQUFlQSxDQUFDQTtRQUMzQkEsQ0FBQ0E7UUFDTEosMEJBQUNBO0lBQURBLENBakdBMXNDLEFBaUdDMHNDLElBQUExc0M7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Q0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsRUFDVkEsR0FBR0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsRUFDVkEsR0FBR0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsRUFDVkEsR0FBR0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsRUFDVkEsR0FBR0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsRUFDVkEsR0FBR0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsRUFDVkEsR0FBR0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsRUFDWEEsSUFBSUEsR0FBR0EsSUFBSUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsRUFDcEJBLElBQUlBLEdBQUdBLElBQUlBLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBLENBQUNBLEVBQ3BCQSxJQUFJQSxHQUFHQSxJQUFJQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxFQUNwQkEsSUFBSUEsR0FBR0EsSUFBSUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsRUFDcEJBLElBQUlBLEdBQUdBLElBQUlBLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBLENBQUNBLEVBQ3BCQSxJQUFJQSxHQUFHQSxJQUFJQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxFQUNwQkEsSUFBSUEsR0FBR0EsSUFBSUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsRUFDcEJBLElBQUlBLEdBQUdBLElBQUlBLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBLENBQUNBLEVBQ3BCQSxJQUFJQSxHQUFHQSxJQUFJQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtZQUV6QkEsRUFBRUEsQ0FBQ0EsR0FBR0EsQ0FDRkEsQ0FBQ0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsR0FBR0EsR0FBR0EsR0FBR0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsR0FBR0EsR0FBR0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsR0FBR0EsR0FBR0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsRUFDL0NBLENBQUNBLENBQUNBLEVBQUVBLENBQUNBLEdBQUdBLEdBQUdBLEdBQUdBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLEdBQUdBLEdBQUdBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLEdBQUdBLEdBQUdBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBLEVBQy9DQSxDQUFDQSxDQUFDQSxFQUFFQSxDQUFDQSxHQUFHQSxHQUFHQSxHQUFHQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxHQUFHQSxHQUFHQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxHQUFHQSxHQUFHQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUNsREEsQ0FBQ0E7WUFFRkEsRUFBRUEsQ0FBQ0EsR0FBR0EsQ0FDRkEsSUFBSUEsR0FBR0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsSUFBSUEsR0FBR0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsSUFBSUEsR0FBR0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsRUFDMUNBLElBQUlBLEdBQUdBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLElBQUlBLEdBQUdBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLElBQUlBLEdBQUdBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBLEVBQzFDQSxJQUFJQSxHQUFHQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxJQUFJQSxHQUFHQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxJQUFJQSxHQUFHQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUM3Q0EsQ0FBQ0E7UUFDTkEsQ0FBQ0E7UUFFTVYsOENBQTBCQSxHQUFqQ0EsVUFBa0NBLElBQWNBLEVBQUVBLE1BQWNBO1lBQzVEVyxJQUFJQSxXQUFXQSxHQUFHQSxNQUFNQSxDQUFDQSxjQUFjQSxFQUFFQSxFQUNyQ0EsS0FBS0EsR0FBR0EsTUFBTUEsQ0FBQ0EsUUFBUUEsRUFBRUEsQ0FBQ0E7WUFFOUJBLElBQUlBLENBQUNBLE1BQU1BLEdBQUdBLElBQUlBLENBQUNBLE1BQU1BLENBQUNBLElBQUlBLEVBQUVBLENBQUNBLEdBQUdBLENBQUNBLFdBQVdBLENBQUNBLENBQUNBO1lBS2xEQSxJQUFJQSxDQUFDQSxXQUFXQSxHQUFHQSxJQUFJQSxDQUFDQSxXQUFXQSxDQUFDQSxJQUFJQSxFQUFFQSxDQUFDQSxHQUFHQSxDQUFDQSxLQUFLQSxDQUFDQSxDQUFDQTtRQUMxREEsQ0FBQ0E7UUFPTVgsaUNBQWFBLEdBTHBCQSxVQUtxQkEsWUFBdUJBO1lBQ3hDWSxJQUFJQSxXQUFXQSxHQUFHQSxZQUFZQSxDQUFDQSxTQUFTQSxDQUFDQSxrQkFBa0JBLEVBQ3ZEQSxRQUFRQSxHQUFHQSxnQkFBYUEsQ0FBQ0EsV0FBV0EsQ0FBQ0EsWUFBWUEsQ0FBQ0EsRUFDbERBLElBQUlBLEdBQUdBLElBQUlBLEVBQ1hBLEdBQUdBLEdBQUdBLElBQUlBLENBQUNBLFlBQVlBLEVBQUVBLEVBQ3pCQSxHQUFHQSxHQUFHQSxJQUFJQSxDQUFDQSxZQUFZQSxFQUFFQSxDQUFDQTtZQUc5QkEsZ0JBQWFBLENBQUNBLHFCQUFxQkEsQ0FBQ0EsUUFBUUEsRUFBRUEsVUFBQ0EsS0FBYUE7Z0JBQ3hEQSxLQUFLQSxDQUFDQSxZQUFZQSxDQUFDQSxXQUFXQSxDQUFDQSxDQUFDQTtnQkFDaENBLElBQUlBLENBQUNBLGNBQWNBLENBQUNBLEtBQUtBLEVBQUVBLEdBQUdBLEVBQUVBLEdBQUdBLENBQUNBLENBQUNBO1lBQ3pDQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUVIQSxJQUFJQSxDQUFDQSxTQUFTQSxDQUFDQSxHQUFHQSxFQUFFQSxHQUFHQSxDQUFDQSxDQUFDQTtRQUM3QkEsQ0FBQ0E7UUFLTVosc0NBQWtCQSxHQUF6QkE7WUFBMEJhLGNBQU9BO2lCQUFQQSxXQUFPQSxDQUFQQSxzQkFBT0EsQ0FBUEEsSUFBT0E7Z0JBQVBBLDZCQUFPQTs7WUFDN0JBLElBQUlBLElBQUlBLEdBQUdBLElBQUlBLENBQUNBLE1BQU1BLEVBQUVBLEVBQ3BCQSxJQUFJQSxHQUFHQSxJQUFJQSxDQUFDQSxNQUFNQSxFQUFFQSxFQUNwQkEsSUFBSUEsR0FBR0EsSUFBSUEsRUFDWEEsSUFBSUEsR0FBR0EsSUFBSUEsQ0FBQ0E7WUFFaEJBLEVBQUVBLENBQUFBLENBQUNBLElBQUlBLENBQUNBLE1BQU1BLEtBQUtBLENBQUNBLENBQUNBLENBQUFBLENBQUNBO2dCQUNsQkEsSUFBSUEsS0FBS0EsR0FBR0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBRXBCQSxJQUFJQSxHQUFHQSxLQUFLQSxDQUFDQSxNQUFNQSxFQUFFQSxDQUFDQTtnQkFDdEJBLElBQUlBLEdBQUdBLEtBQUtBLENBQUNBLE1BQU1BLEVBQUVBLENBQUNBO1lBQzFCQSxDQUFDQTtZQUNEQSxJQUFJQSxDQUFDQSxFQUFFQSxDQUFBQSxDQUFDQSxJQUFJQSxDQUFDQSxNQUFNQSxLQUFLQSxDQUFDQSxDQUFDQSxDQUFBQSxDQUFDQTtnQkFDdkJBLElBQUlBLEdBQUdBLElBQUlBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO2dCQUNmQSxJQUFJQSxHQUFHQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUNuQkEsQ0FBQ0E7WUFFREEsTUFBTUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBQzNDQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQSxJQUFJQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQSxJQUFJQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFDeENBLENBQUNBLElBQUlBLENBQUNBLENBQUNBLElBQUlBLElBQUlBLENBQUNBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLElBQUlBLENBQUNBLENBQUNBLElBQUlBLElBQUlBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1FBQ2pEQSxDQUFDQTtRQUVNYix5Q0FBcUJBLEdBQTVCQSxVQUE2QkEsS0FBaUJBO1lBQzFDYyxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSx5QkFBeUJBLENBQUNBLElBQUlBLEVBQUVBLEtBQUtBLENBQUNBLENBQUNBO1FBQ3ZEQSxDQUFDQTtRQUVNZCxzQ0FBa0JBLEdBQXpCQSxVQUEwQkEsR0FBT0E7WUFDN0JlLE1BQU1BLENBQUNBLEdBQUdBLENBQUNBLG1CQUFtQkEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7UUFDekNBLENBQUNBO1FBRU1mLGtDQUFjQSxHQUFyQkEsVUFBc0JBLEtBQWFBO1lBQy9CZ0IsSUFBSUEsR0FBR0EsR0FBR0EsSUFBSUEsQ0FBQ0EsTUFBTUEsRUFBRUEsRUFDbkJBLEdBQUdBLEdBQUdBLElBQUlBLENBQUNBLE1BQU1BLEVBQUVBLEVBQ25CQSxXQUFXQSxHQUFHQSxVQUFPQSxDQUFDQSxNQUFNQSxFQUFFQSxDQUFDQTtZQUVuQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBQ2xCQSxXQUFXQSxDQUFDQSxDQUFDQSxHQUFHQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUMxQkEsQ0FBQ0E7WUFDREEsSUFBSUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBQ3ZCQSxXQUFXQSxDQUFDQSxDQUFDQSxHQUFHQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUMxQkEsQ0FBQ0E7WUFDREEsSUFBSUEsQ0FBQ0EsQ0FBQ0E7Z0JBQ0ZBLFdBQVdBLENBQUNBLENBQUNBLEdBQUdBLEtBQUtBLENBQUNBLENBQUNBLENBQUNBO1lBQzVCQSxDQUFDQTtZQUVEQSxFQUFFQSxDQUFDQSxDQUFDQSxLQUFLQSxDQUFDQSxDQUFDQSxHQUFHQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFDbEJBLFdBQVdBLENBQUNBLENBQUNBLEdBQUdBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBO1lBQzFCQSxDQUFDQTtZQUNEQSxJQUFJQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQSxLQUFLQSxDQUFDQSxDQUFDQSxHQUFHQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFDdkJBLFdBQVdBLENBQUNBLENBQUNBLEdBQUdBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBO1lBQzFCQSxDQUFDQTtZQUNEQSxJQUFJQSxDQUFDQSxDQUFDQTtnQkFDRkEsV0FBV0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsS0FBS0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDNUJBLENBQUNBO1lBRURBLEVBQUVBLENBQUNBLENBQUNBLEtBQUtBLENBQUNBLENBQUNBLEdBQUdBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO2dCQUNsQkEsV0FBV0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDMUJBLENBQUNBO1lBQ0RBLElBQUlBLENBQUNBLEVBQUVBLENBQUNBLENBQUNBLEtBQUtBLENBQUNBLENBQUNBLEdBQUdBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO2dCQUN2QkEsV0FBV0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDMUJBLENBQUNBO1lBQ0RBLElBQUlBLENBQUNBLENBQUNBO2dCQUNGQSxXQUFXQSxDQUFDQSxDQUFDQSxHQUFHQSxLQUFLQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUM1QkEsQ0FBQ0E7WUFFREEsTUFBTUEsQ0FBQ0EsV0FBV0EsQ0FBQ0E7UUFDdkJBLENBQUNBO1FBRU1oQixnQ0FBWUEsR0FBbkJBLFVBQW9CQSxLQUFhQTtZQUM3QmlCLElBQUlBLEdBQUdBLEdBQUdBLElBQUlBLENBQUNBLE1BQU1BLEVBQUVBLEVBQ25CQSxHQUFHQSxHQUFHQSxJQUFJQSxDQUFDQSxNQUFNQSxFQUFFQSxDQUFDQTtZQUV4QkEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsRUFBRUEsRUFBRUEsQ0FBQ0EsRUFBRUEsQ0FBQ0E7Z0JBQ3pCQSxFQUFFQSxDQUFDQSxDQUFDQSxLQUFLQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxHQUFHQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQSxJQUFJQSxLQUFLQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxHQUFHQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtvQkFDckVBLE1BQU1BLENBQUNBLEtBQUtBLENBQUNBO2dCQUNqQkEsQ0FBQ0E7WUFDTEEsQ0FBQ0E7WUFFREEsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0E7UUFDaEJBLENBQUNBO1FBRU1qQix3QkFBSUEsR0FBWEE7WUFDSWtCLElBQUlBLEtBQUtBLEdBQUdBLFNBQVNBLENBQUNBLE1BQU1BLEVBQUVBLENBQUNBO1lBRS9CQSxLQUFLQSxDQUFDQSxNQUFNQSxHQUFHQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxJQUFJQSxFQUFFQSxDQUFDQTtZQUNsQ0EsS0FBS0EsQ0FBQ0EsV0FBV0EsR0FBR0EsSUFBSUEsQ0FBQ0EsV0FBV0EsQ0FBQ0EsSUFBSUEsRUFBRUEsQ0FBQ0E7WUFFNUNBLE1BQU1BLENBQUNBLEtBQUtBLENBQUNBO1FBQ2pCQSxDQUFDQTtRQUVPbEIsZ0NBQVlBLEdBQXBCQTtZQUNJbUIsTUFBTUEsQ0FBQ0EsVUFBT0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsUUFBUUEsRUFBRUEsUUFBUUEsRUFBRUEsUUFBUUEsQ0FBQ0EsQ0FBQ0E7UUFDeERBLENBQUNBO1FBRU9uQixnQ0FBWUEsR0FBcEJBO1lBQ0lvQixNQUFNQSxDQUFDQSxVQUFPQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxRQUFRQSxFQUFFQSxDQUFDQSxRQUFRQSxFQUFFQSxDQUFDQSxRQUFRQSxDQUFDQSxDQUFDQTtRQUMzREEsQ0FBQ0E7UUFFT3BCLGtDQUFjQSxHQUF0QkEsVUFBdUJBLEtBQWFBLEVBQUVBLEdBQVdBLEVBQUVBLEdBQVdBO1lBQzFEcUIsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsQ0FBQ0E7WUFDZkEsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsQ0FBQ0E7UUFDbkJBLENBQUNBO1FBN0hEckI7WUFBQ0EsVUFBT0EsQ0FBQ0EsVUFBVUEsWUFBdUJBO2dCQUN0QyxJQUFJLFFBQVEsR0FBRyxnQkFBYSxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsQ0FBQztnQkFFdkQsU0FBTSxDQUFDLFFBQVEsSUFBSSxRQUFRLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxNQUFHLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7WUFDbkYsQ0FBQyxDQUFDQTtXQUNLQSxvQ0FBYUEsUUFjbkJBO1FBMkdMQSxnQkFBQ0E7SUFBREEsQ0F2T0FsdEMsQUF1T0NrdEMsRUF2TzhCbHRDLFFBQUtBLEVBdU9uQ0E7SUF2T1lBLFlBQVNBLFlBdU9yQkEsQ0FBQUE7QUFDTEEsQ0FBQ0EsRUF6T00sRUFBRSxLQUFGLEVBQUUsUUF5T1I7QUN6T0QsSUFBTyxFQUFFLENBc0ZSO0FBdEZELFdBQU8sRUFBRSxFQUFDLENBQUM7SUFDUEE7UUFBaUN3dUMsK0JBQUtBO1FBQXRDQTtZQUFpQ0MsOEJBQUtBO1lBTzNCQSxXQUFNQSxHQUFVQSxDQUFDQSxDQUFDQTtRQTZFN0JBLENBQUNBO1FBbkZpQkQsa0JBQU1BLEdBQXBCQTtZQUNJRSxJQUFJQSxHQUFHQSxHQUFHQSxJQUFJQSxJQUFJQSxFQUFFQSxDQUFDQTtZQUVyQkEsTUFBTUEsQ0FBQ0EsR0FBR0EsQ0FBQ0E7UUFDZkEsQ0FBQ0E7UUFJTUYsdUNBQWlCQSxHQUF4QkEsVUFBeUJBLE1BQWNBLEVBQUVBLE1BQWFBO1lBQ2xERyxJQUFJQSxDQUFDQSxNQUFNQSxHQUFHQSxNQUFNQSxDQUFDQTtZQUNyQkEsSUFBSUEsQ0FBQ0EsTUFBTUEsR0FBR0EsTUFBTUEsQ0FBQ0E7UUFDekJBLENBQUNBO1FBRU1ILG1DQUFhQSxHQUFwQkEsVUFBcUJBLE1BQW9CQTtZQUNyQ0ksSUFBSUEsSUFBSUEsR0FBR0EsWUFBU0EsQ0FBQ0EsTUFBTUEsRUFBRUEsQ0FBQ0E7WUFFOUJBLElBQUlBLENBQUNBLE1BQU1BLEdBQUdBLElBQUlBLENBQUNBLGFBQWFBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBLE1BQU1BLENBQUNBO1lBQ2hEQSxJQUFJQSxDQUFDQSxNQUFNQSxHQUFHQSxJQUFJQSxDQUFDQSxnQ0FBZ0NBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBO1FBQ2hFQSxDQUFDQTtRQUVNSixnREFBMEJBLEdBQWpDQSxVQUFrQ0EsTUFBa0JBLEVBQUVBLE1BQWNBO1lBQ2hFSyxJQUFJQSxXQUFXQSxHQUFHQSxNQUFNQSxDQUFDQSxjQUFjQSxFQUFFQSxFQUNyQ0EsS0FBS0EsR0FBR0EsTUFBTUEsQ0FBQ0EsUUFBUUEsRUFBRUEsQ0FBQ0E7WUFFOUJBLElBQUlBLENBQUNBLE1BQU1BLEdBQUdBLE1BQU1BLENBQUNBLE1BQU1BLENBQUNBLElBQUlBLEVBQUVBLENBQUNBLEdBQUdBLENBQUNBLFdBQVdBLENBQUNBLENBQUNBO1lBQ3BEQSxJQUFJQSxDQUFDQSxNQUFNQSxHQUFHQSxNQUFNQSxDQUFDQSxNQUFNQSxHQUFHQSxJQUFJQSxDQUFDQSxHQUFHQSxDQUFDQSxLQUFLQSxDQUFDQSxDQUFDQSxFQUFFQSxLQUFLQSxDQUFDQSxDQUFDQSxFQUFFQSxLQUFLQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUN0RUEsQ0FBQ0E7UUFFTUwsMkNBQXFCQSxHQUE1QkEsVUFBNkJBLEtBQWlCQTtZQUMxQ00sSUFBSUEsU0FBU0EsR0FBR0EsSUFBSUEsQ0FBQ0EsTUFBTUEsR0FBR0EsS0FBS0EsQ0FBQ0EsTUFBTUEsQ0FBQ0E7WUFFM0NBLE1BQU1BLENBQUNBLEtBQUtBLENBQUNBLE1BQU1BLENBQUNBLGlCQUFpQkEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBRUEsU0FBQUEsU0FBU0EsRUFBRUEsQ0FBQ0EsQ0FBQUEsQ0FBQ0EsQ0FBQ0E7UUFDMUVBLENBQUNBO1FBTU1OLHdDQUFrQkEsR0FBekJBO1lBQTBCTyxjQUFPQTtpQkFBUEEsV0FBT0EsQ0FBUEEsc0JBQU9BLENBQVBBLElBQU9BO2dCQUFQQSw2QkFBT0E7O1lBQzdCQSxJQUFJQSxLQUFLQSxHQUFhQSxJQUFJQSxDQUFDQTtZQUUzQkEsRUFBRUEsQ0FBQUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsTUFBTUEsS0FBS0EsQ0FBQ0EsQ0FBQ0EsQ0FBQUEsQ0FBQ0E7Z0JBQ2xCQSxLQUFLQSxHQUFHQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUNwQkEsQ0FBQ0E7WUFDREEsSUFBSUEsQ0FBQ0EsRUFBRUEsQ0FBQUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsTUFBTUEsS0FBS0EsQ0FBQ0EsQ0FBQ0EsQ0FBQUEsQ0FBQ0E7Z0JBQ3ZCQSxJQUFJQSxHQUFHQSxHQUFXQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQSxFQUNyQkEsR0FBR0EsR0FBV0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBRTFCQSxLQUFLQSxHQUFHQSxZQUFTQSxDQUFDQSxNQUFNQSxFQUFFQSxDQUFDQTtnQkFDM0JBLEtBQUtBLENBQUNBLFNBQVNBLENBQUNBLEdBQUdBLEVBQUVBLEdBQUdBLENBQUNBLENBQUNBO1lBQzlCQSxDQUFDQTtZQUVEQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSx5QkFBeUJBLENBQUNBLEtBQUtBLEVBQUVBLElBQUlBLENBQUNBLENBQUNBO1FBQ3ZEQSxDQUFDQTtRQUVNUCx3Q0FBa0JBLEdBQXpCQSxVQUEwQkEsR0FBT0E7WUFDN0JRLE1BQU1BLENBQUNBLEdBQUdBLENBQUNBLHFCQUFxQkEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7UUFDM0NBLENBQUNBO1FBRU1SLGtDQUFZQSxHQUFuQkEsVUFBb0JBLEtBQWFBO1lBQzdCUyxNQUFNQSxDQUFDQSxLQUFLQSxDQUFDQSxpQkFBaUJBLENBQUNBLElBQUlBLENBQUNBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLFNBQUFBLElBQUlBLENBQUNBLE1BQU1BLEVBQUVBLENBQUNBLENBQUFBLENBQUNBLENBQUNBO1FBQ3BFQSxDQUFDQTtRQUVNVCwwQkFBSUEsR0FBWEE7WUFDSVUsSUFBSUEsS0FBS0EsR0FBR0EsV0FBV0EsQ0FBQ0EsTUFBTUEsRUFBRUEsQ0FBQ0E7WUFFakNBLEtBQUtBLENBQUNBLE1BQU1BLEdBQUdBLElBQUlBLENBQUNBLE1BQU1BLENBQUNBLElBQUlBLEVBQUVBLENBQUNBO1lBQ2xDQSxLQUFLQSxDQUFDQSxNQUFNQSxHQUFHQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQTtZQUUzQkEsTUFBTUEsQ0FBQ0EsS0FBS0EsQ0FBQ0E7UUFDakJBLENBQUNBO1FBRU9WLHNEQUFnQ0EsR0FBeENBLFVBQXlDQSxNQUFvQkE7WUFDekRXLElBQUlBLFdBQVdBLEdBQUdBLENBQUNBLEVBQ2ZBLE1BQU1BLEdBQUdBLElBQUlBLENBQUNBLE1BQU1BLENBQUNBO1lBR3pCQSxnQkFBYUEsQ0FBQ0EscUJBQXFCQSxDQUFDQSxNQUFNQSxFQUFFQSxVQUFDQSxLQUFhQTtnQkFDdERBLFdBQVdBLEdBQUdBLElBQUlBLENBQUNBLEdBQUdBLENBQUVBLFdBQVdBLEVBQUVBLE1BQU1BLENBQUNBLGlCQUFpQkEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsQ0FBRUEsQ0FBQ0E7WUFDM0VBLENBQUNBLENBQUNBLENBQUNBO1lBRUhBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLElBQUlBLENBQUNBLFdBQVdBLENBQUNBLENBQUNBO1FBQ2xDQSxDQUFDQTtRQUNMWCxrQkFBQ0E7SUFBREEsQ0FwRkF4dUMsQUFvRkN3dUMsRUFwRmdDeHVDLFFBQUtBLEVBb0ZyQ0E7SUFwRllBLGNBQVdBLGNBb0Z2QkEsQ0FBQUE7QUFDTEEsQ0FBQ0EsRUF0Rk0sRUFBRSxLQUFGLEVBQUUsUUFzRlI7QUN0RkQsSUFBTyxFQUFFLENBS1I7QUFMRCxXQUFPLEVBQUUsRUFBQSxDQUFDO0lBQ05BLFdBQVlBLFlBQVlBO1FBQ3BCb3ZDLG1DQUFXQSxLQUFLQSxTQUFBQSxDQUFBQTtRQUNoQkEsc0NBQWNBLFFBQVFBLFlBQUFBLENBQUFBO0lBQzFCQSxDQUFDQSxFQUhXcHZDLGVBQVlBLEtBQVpBLGVBQVlBLFFBR3ZCQTtJQUhEQSxJQUFZQSxZQUFZQSxHQUFaQSxlQUdYQSxDQUFBQTtBQUNMQSxDQUFDQSxFQUxNLEVBQUUsS0FBRixFQUFFLFFBS1I7QUNMRCxJQUFPLEVBQUUsQ0F3QlI7QUF4QkQsV0FBTyxFQUFFLEVBQUEsQ0FBQztJQUNOQTtRQUFBcXZDO1FBc0JBQyxDQUFDQTtRQVhpQkQseUJBQVdBLEdBVnpCQSxVQVUwQkEsWUFBeUJBO1lBQy9DRSxFQUFFQSxDQUFBQSxDQUFDQSxDQUFDQSxZQUFZQSxDQUFDQSxZQUFZQSxDQUFDQSxXQUFRQSxDQUFDQSxDQUFDQSxDQUFBQSxDQUFDQTtnQkFDckNBLEVBQUVBLENBQUFBLENBQUNBLFlBQVlBLENBQUNBLE1BQU1BLENBQU1BLFFBQUtBLENBQUNBLFNBQVNBLENBQUNBLENBQUNBLENBQUFBLENBQUNBO29CQUMxQ0EsTUFBTUEsQ0FBQ0EsWUFBWUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsWUFBWUEsQ0FBQ0EsV0FBUUEsQ0FBQ0EsQ0FBQ0EsUUFBUUEsQ0FBQ0E7Z0JBQ3BFQSxDQUFDQTtnQkFFREEsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0E7WUFDaEJBLENBQUNBO1lBRURBLE1BQU1BLENBQUNBLFlBQVlBLENBQUNBLFlBQVlBLENBQVdBLFdBQVFBLENBQUNBLENBQUNBLFlBQVlBLENBQUNBLFFBQVFBLENBQUNBO1FBQy9FQSxDQUFDQTtRQXBCREY7WUFBQ0EsVUFBT0EsQ0FBQ0EsVUFBU0EsWUFBeUJBO2dCQUN2QyxFQUFFLENBQUEsQ0FBQyxDQUFDLFlBQVksQ0FBQyxZQUFZLENBQUMsV0FBUSxDQUFDLENBQUMsQ0FBQSxDQUFDO29CQUNyQyxFQUFFLENBQUEsQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFNLFFBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFBLENBQUM7d0JBQzFDLElBQUksa0JBQWtCLEdBQUcsWUFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsV0FBUSxDQUFDLENBQUMsUUFBUSxFQUM3RSxtQkFBbUIsR0FBRyxZQUFZLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxXQUFRLENBQUMsQ0FBQyxRQUFRLENBQUM7d0JBRW5GLFNBQU0sQ0FBQyxDQUFDLENBQUMsa0JBQWtCLElBQUksa0JBQWtCLENBQUMsTUFBTSxLQUFLLG1CQUFtQixDQUFDLE1BQU0sRUFBRSxNQUFHLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQywrRUFBK0UsQ0FBQyxDQUFDLENBQUM7b0JBQ3BNLENBQUM7Z0JBQ0wsQ0FBQztZQUNMLENBQUMsQ0FBQ0E7V0FDWUEsNEJBQVdBLFFBVXhCQTtRQUNMQSxvQkFBQ0E7SUFBREEsQ0F0QkFydkMsQUFzQkNxdkMsSUFBQXJ2QztJQXRCWUEsZ0JBQWFBLGdCQXNCekJBLENBQUFBO0FBQ0xBLENBQUNBLEVBeEJNLEVBQUUsS0FBRixFQUFFLFFBd0JSO0FDeEJELElBQU8sRUFBRSxDQXlMUjtBQXpMRCxXQUFPLEVBQUUsRUFBQyxDQUFDO0lBQ1BBO1FBQXdDd3ZDLDZCQUFTQTtRQUFqREE7WUFBd0NDLDhCQUFTQTtZQUNyQ0EsY0FBU0EsR0FBVUEsQ0FBQ0EsQ0FBQ0E7WUFTckJBLGlCQUFZQSxHQUFVQSxDQUFDQSxDQUFDQTtZQVN4QkEsY0FBU0EsR0FBK0JBLElBQUlBLENBQUNBLFVBQVVBLENBQUNBLE1BQU1BLEVBQWNBLENBQUNBO1lBdUI5RUEsbUJBQWNBLEdBQWtCQSxpQkFBY0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7WUFDNURBLHVCQUFrQkEsR0FBc0JBLHFCQUFrQkEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7WUFDeEVBLG9CQUFlQSxHQUFtQkEsa0JBQWVBLENBQUNBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLENBQUNBO1lBQy9EQSwrQkFBMEJBLEdBQThCQSw2QkFBMEJBLENBQUNBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLENBQUNBO1lBRS9GQSwyQkFBc0JBLEdBQXFCQSxJQUFJQSxDQUFDQTtZQUNoREEsaURBQTRDQSxHQUFxQkEsSUFBSUEsQ0FBQ0E7UUF1SWxGQSxDQUFDQTtRQXJMR0Qsc0JBQ0lBLCtCQUFRQTtpQkFEWkE7Z0JBRUlFLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLFNBQVNBLENBQUNBO1lBQzFCQSxDQUFDQTtpQkFDREYsVUFBYUEsUUFBZUE7Z0JBQ3hCRSxJQUFJQSxDQUFDQSxTQUFTQSxHQUFHQSxRQUFRQSxDQUFDQTtZQUM5QkEsQ0FBQ0E7OztXQUhBRjtRQU1EQSxzQkFDSUEsa0NBQVdBO2lCQURmQTtnQkFFSUcsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsWUFBWUEsQ0FBQ0E7WUFDN0JBLENBQUNBO2lCQUNESCxVQUFnQkEsV0FBa0JBO2dCQUM5QkcsSUFBSUEsQ0FBQ0EsWUFBWUEsR0FBR0EsV0FBV0EsQ0FBQ0E7WUFDcENBLENBQUNBOzs7V0FIQUg7UUFNREEsc0JBQUlBLCtCQUFRQTtpQkFBWkE7Z0JBQ0lJLE1BQU1BLENBQUVBLElBQUlBLENBQUNBLFNBQVNBLENBQUNBO1lBQzNCQSxDQUFDQTtpQkFDREosVUFBYUEsUUFBWUE7Z0JBQ3JCSSxFQUFFQSxDQUFBQSxDQUFDQSxhQUFVQSxDQUFDQSxPQUFPQSxDQUFDQSxRQUFRQSxDQUFDQSxDQUFDQSxDQUFBQSxDQUFDQTtvQkFDN0JBLElBQUlBLEdBQUdBLEdBQXNCQSxRQUFRQSxDQUFDQTtvQkFFdENBLElBQUlBLENBQUNBLFNBQVNBLEdBQUdBLElBQUlBLENBQUNBLFVBQVVBLENBQUNBLE1BQU1BLENBQWFBLEdBQUdBLENBQUNBLENBQUNBO2dCQUM3REEsQ0FBQ0E7Z0JBQ0RBLElBQUlBLENBQUFBLENBQUNBO29CQUNEQSxJQUFJQSxJQUFJQSxHQUFnQ0EsUUFBUUEsQ0FBQ0E7b0JBRWpEQSxJQUFJQSxDQUFDQSxTQUFTQSxHQUFHQSxJQUFJQSxDQUFDQTtnQkFDMUJBLENBQUNBO2dCQUVEQSxJQUFJQSxDQUFDQSxTQUFTQSxDQUFDQSxPQUFPQSxDQUFDQSxVQUFDQSxLQUFnQkE7b0JBQ3BDQSxLQUFLQSxDQUFDQSxNQUFNQSxDQUFDQSxrQkFBa0JBLENBQUNBLENBQUNBO2dCQUNyQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDUEEsQ0FBQ0E7OztXQWhCQUo7UUE0Qk1BLHdCQUFJQSxHQUFYQTtZQUNJSyxJQUFJQSxJQUFJQSxHQUFHQSxJQUFJQSxDQUFDQTtZQUtoQkEsSUFBSUEsQ0FBQ0Esc0JBQXNCQSxHQUFHQSxlQUFZQSxDQUFDQSxTQUFTQSxDQUFNQSxjQUFXQSxDQUFDQSxxQkFBcUJBLENBQUNBO2lCQUN2RkEsU0FBU0EsQ0FBQ0E7Z0JBQ1BBLElBQUlBLENBQUNBLGlCQUFpQkEsRUFBRUEsQ0FBQ0E7WUFDN0JBLENBQUNBLENBQUNBLENBQUNBO1lBS1BBLElBQUlBLENBQUNBLDRDQUE0Q0EsR0FBR0EsZUFBWUEsQ0FBQ0EsU0FBU0EsQ0FBTUEsY0FBV0EsQ0FBQ0EsOENBQThDQSxDQUFDQTtpQkFDdElBLFNBQVNBLENBQUNBO2dCQUNQQSxJQUFJQSxDQUFDQSx1Q0FBdUNBLEVBQUVBLENBQUNBO1lBQ25EQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUNYQSxDQUFDQTtRQUVNTCxpQ0FBYUEsR0FBcEJBO1lBQUFNLGlCQW9CQ0E7WUFuQkdBLElBQUlBLGFBQWFBLEdBQXlCQSxJQUFJQSxDQUFDQSx1QkFBdUJBLEVBQUVBLENBQUNBO1lBRXpFQSxFQUFFQSxDQUFBQSxDQUFDQSxJQUFJQSxDQUFDQSxjQUFjQSxJQUFJQSxJQUFJQSxDQUFDQSxjQUFjQSxDQUFDQSxhQUFhQSxDQUFDQSxDQUFBQSxDQUFDQTtnQkFDekRBLGFBQWFBLENBQUNBLGlCQUFpQkEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsWUFBWUEsRUFBRUEsSUFBSUEsQ0FBQ0EsY0FBY0EsQ0FBQ0EsQ0FBQ0E7WUFDNUVBLENBQUNBO1lBRURBLEVBQUVBLENBQUFBLENBQUNBLElBQUlBLENBQUNBLGtCQUFrQkEsSUFBSUEsSUFBSUEsQ0FBQ0Esa0JBQWtCQSxDQUFDQSxhQUFhQSxDQUFDQSxDQUFBQSxDQUFDQTtnQkFDakVBLGFBQWFBLENBQUNBLHFCQUFxQkEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsWUFBWUEsRUFBRUEsSUFBSUEsQ0FBQ0Esa0JBQWtCQSxDQUFDQSxDQUFDQTtZQUNwRkEsQ0FBQ0E7WUFFREEsRUFBRUEsQ0FBQUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsZUFBZUEsSUFBSUEsSUFBSUEsQ0FBQ0EsZUFBZUEsQ0FBQ0EsYUFBYUEsQ0FBQ0EsQ0FBQUEsQ0FBQ0E7Z0JBQzNEQSxhQUFhQSxDQUFDQSxrQkFBa0JBLENBQUNBLElBQUlBLENBQUNBLFlBQVlBLEVBQUVBLElBQUlBLENBQUNBLGVBQWVBLENBQUNBLENBQUNBO1lBQzlFQSxDQUFDQTtZQUVEQSxFQUFFQSxDQUFBQSxDQUFDQSxJQUFJQSxDQUFDQSwwQkFBMEJBLElBQUlBLElBQUlBLENBQUNBLDBCQUEwQkEsQ0FBQ0EsUUFBUUEsRUFBRUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQUEsQ0FBQ0E7Z0JBQ2xGQSxJQUFJQSxDQUFDQSwwQkFBMEJBLENBQUNBLE9BQU9BLENBQUNBLFVBQUNBLFVBQWlDQTtvQkFDdEVBLGFBQWFBLENBQUNBLHlCQUF5QkEsQ0FBQ0EsS0FBSUEsQ0FBQ0EsWUFBWUEsRUFBRUEsVUFBVUEsQ0FBQ0EsQ0FBQ0E7Z0JBQzNFQSxDQUFDQSxFQUFFQSxJQUFJQSxDQUFDQSxDQUFDQTtZQUNiQSxDQUFDQTtRQUNMQSxDQUFDQTtRQUVNTixvQ0FBZ0JBLEdBQXZCQSxVQUF3QkEsWUFBdUJBO1lBQzNDTyxJQUFJQSxhQUFhQSxHQUF5QkEsSUFBSUEsQ0FBQ0EsdUJBQXVCQSxFQUFFQSxDQUFDQTtZQUV6RUEsRUFBRUEsQ0FBQUEsQ0FBQ0EsYUFBYUEsQ0FBQ0EsQ0FBQUEsQ0FBQ0E7Z0JBQ2RBLElBQUlBLENBQUNBLHVCQUF1QkEsRUFBRUEsQ0FBQ0EsZ0JBQWdCQSxDQUFDQSxZQUFZQSxDQUFDQSxDQUFDQTtnQkFFOURBLElBQUlBLENBQUNBLHVCQUF1QkEsRUFBRUEsQ0FBQ0EsaUJBQWlCQSxDQUFDQSxZQUFZQSxDQUFDQSxDQUFDQTtZQUNuRUEsQ0FBQ0E7WUFFREEsZ0JBQUtBLENBQUNBLGdCQUFnQkEsWUFBQ0EsWUFBWUEsQ0FBQ0EsQ0FBQ0E7UUFDekNBLENBQUNBO1FBRU1QLDJCQUFPQSxHQUFkQTtZQUNJUSxJQUFJQSxDQUFDQSxTQUFTQSxDQUFDQSxPQUFPQSxDQUFDQSxVQUFDQSxLQUFnQkE7Z0JBQ3BDQSxLQUFLQSxDQUFDQSxTQUFTQSxDQUFDQSxrQkFBa0JBLENBQUNBLENBQUNBO1lBQ3hDQSxDQUFDQSxFQUFFQSxJQUFJQSxDQUFDQSxDQUFDQTtZQUVUQSxJQUFJQSxDQUFDQSxzQkFBc0JBLElBQUlBLElBQUlBLENBQUNBLHNCQUFzQkEsQ0FBQ0EsT0FBT0EsRUFBRUEsQ0FBQ0E7WUFDckVBLElBQUlBLENBQUNBLDRDQUE0Q0EsSUFBSUEsSUFBSUEsQ0FBQ0EsNENBQTRDQSxDQUFDQSxPQUFPQSxFQUFFQSxDQUFDQTtRQUNySEEsQ0FBQ0E7UUFFTVIsMkNBQXVCQSxHQUE5QkE7WUFDSVMsTUFBTUEsQ0FBQ0EsV0FBUUEsQ0FBQ0EsV0FBV0EsRUFBRUEsQ0FBQ0EsS0FBS0EsQ0FBQ0Esb0JBQW9CQSxDQUFDQTtRQUM3REEsQ0FBQ0E7UUFFTVQsK0NBQTJCQSxHQUFsQ0E7WUFDSVUsTUFBTUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsV0FBUUEsQ0FBQ0EsV0FBV0EsRUFBRUEsQ0FBQ0EsS0FBS0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsV0FBUUEsQ0FBQ0EsV0FBV0EsRUFBRUEsQ0FBQ0EsS0FBS0EsQ0FBQ0Esb0JBQW9CQSxDQUFDQTtRQUNqR0EsQ0FBQ0E7UUFhU1YsMENBQXNCQSxHQVRoQ0EsVUFTaUNBLE1BQWFBLEVBQUVBLElBQWFBO1lBQWJXLG9CQUFhQSxHQUFiQSxTQUFhQTtZQUN6REEsSUFBSUEsYUFBYUEsR0FBeUJBLElBQUlBLENBQUNBLHVCQUF1QkEsRUFBRUEsRUFDcEVBLFFBQVFBLEdBQUdBLElBQUlBLENBQUNBLFlBQVlBLENBQUNBLFNBQVNBLENBQUNBLFFBQVFBLEVBQy9DQSxRQUFRQSxHQUFHQSxJQUFJQSxDQUFDQSxZQUFZQSxDQUFDQSxTQUFTQSxDQUFDQSxRQUFRQSxDQUFDQTtZQUVwREEsYUFBYUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FDakJBLElBQUlBLENBQUNBLFlBQVlBLEVBQUVBLElBQUlBLENBQUNBLFdBQVdBLENBQUNBLE1BQU1BLENBQUNBO2dCQUN2Q0EsUUFBUUEsRUFBRUEsUUFBUUE7Z0JBQ2xCQSxRQUFRQSxFQUFFQSxRQUFRQTtnQkFFbEJBLFFBQVFBLEVBQUVBLElBQUlBLENBQUNBLFNBQVNBO2dCQUV4QkEsY0FBY0EsRUFBRUEsSUFBSUEsQ0FBQ0EsY0FBY0E7Z0JBRW5DQSxTQUFTQSxFQUFFQSxJQUFJQSxDQUFDQSxhQUFhQSxDQUFDQSxJQUFJQSxDQUFDQSxJQUFJQSxFQUFFQSxJQUFJQSxDQUFDQSxVQUFVQSxDQUFDQTtnQkFDekRBLGdCQUFnQkEsRUFBRUEsSUFBSUEsQ0FBQ0EsYUFBYUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsSUFBSUEsRUFBRUEsSUFBSUEsQ0FBQ0EsaUJBQWlCQSxDQUFDQTtnQkFDdkVBLGNBQWNBLEVBQUVBLElBQUlBLENBQUNBLGFBQWFBLENBQUNBLElBQUlBLENBQUNBLElBQUlBLEVBQUVBLElBQUlBLENBQUNBLGVBQWVBLENBQUNBO2dCQUVuRUEsUUFBUUEsRUFBRUEsSUFBSUEsQ0FBQ0EsUUFBUUE7Z0JBQ3ZCQSxXQUFXQSxFQUFFQSxJQUFJQSxDQUFDQSxXQUFXQTthQUNoQ0EsRUFBRUEsSUFBSUEsQ0FBQ0EsQ0FDWEEsQ0FBQ0E7UUFDTkEsQ0FBQ0E7UUFFT1gsOEJBQVVBLEdBQWxCQSxVQUFtQkEsYUFBd0JBO1lBQ3ZDWSxJQUFJQSxDQUFDQSxZQUFZQSxDQUFDQSxVQUFVQSxDQUFDQSxXQUFXQSxFQUFFQSxJQUFJQSxDQUFDQSxVQUFVQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxhQUFhQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUN2RkEsQ0FBQ0E7UUFFT1oscUNBQWlCQSxHQUF6QkEsVUFBMEJBLGFBQXdCQTtZQUM5Q2EsSUFBSUEsQ0FBQ0EsWUFBWUEsQ0FBQ0EsVUFBVUEsQ0FBQ0Esa0JBQWtCQSxFQUFFQSxJQUFJQSxDQUFDQSxVQUFVQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxhQUFhQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUM5RkEsQ0FBQ0E7UUFFT2IsbUNBQWVBLEdBQXZCQTtZQUNJYyxJQUFJQSxDQUFDQSxZQUFZQSxDQUFDQSxVQUFVQSxDQUFDQSxnQkFBZ0JBLENBQUNBLENBQUNBO1FBQ25EQSxDQUFDQTtRQUVPZCxnQ0FBWUEsR0FBcEJBLFVBQXFCQSxZQUF1QkE7WUFDeENlLElBQUlBLFNBQVNBLEdBQUdBLFlBQVlBLENBQUNBLFlBQVlBLENBQVlBLFNBQVNBLENBQUNBLENBQUNBO1lBRWhFQSxNQUFNQSxDQUFDQSxTQUFTQSxDQUFDQSxRQUFRQSxDQUFDQSxRQUFRQSxFQUFFQSxHQUFHQSxDQUFDQSxDQUFDQTtRQUM3Q0EsQ0FBQ0E7UUFHT2YscUNBQWlCQSxHQUR6QkE7WUFFSWdCLElBQUlBLENBQUNBLE9BQU9BLEVBQUVBLENBQUNBO1FBQ25CQSxDQUFDQTtRQUdPaEIsMkRBQXVDQSxHQUQvQ0E7WUFFSWlCLElBQUlBLENBQUNBLGFBQWFBLEVBQUVBLENBQUNBO1FBQ3pCQSxDQUFDQTtRQXBMRGpCO1lBQUNBLGlDQUE4QkEsQ0FBQ0EsVUFBVUEsQ0FBQ0E7V0FDdkNBLCtCQUFRQSxRQUVYQTtRQU1EQTtZQUFDQSxpQ0FBOEJBLENBQUNBLGFBQWFBLENBQUNBO1dBQzFDQSxrQ0FBV0EsUUFFZEE7UUE2R0RBO1lBQUNBLFVBQU9BLENBQUNBO2dCQUNMLEVBQUUsQ0FBQSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUEsQ0FBQztvQkFDckMsU0FBTSxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxZQUFZLENBQUMsV0FBUSxDQUFDLEVBQUUsTUFBRyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsV0FBVyxFQUFFLGdEQUFnRCxDQUFDLENBQUMsQ0FBQztnQkFDL0ksQ0FBQztnQkFDRCxJQUFJLENBQUEsQ0FBQztvQkFDRCxTQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsWUFBWSxDQUFDLFdBQVEsQ0FBQyxFQUFFLE1BQUcsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsa0RBQWtELENBQUMsQ0FBQyxDQUFDO29CQUNsSSxTQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsWUFBWSxDQUFDLFdBQVEsQ0FBQyxDQUFDLEtBQUssRUFBRSxNQUFHLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQywwREFBMEQsQ0FBQyxDQUFDLENBQUM7Z0JBQy9JLENBQUM7WUFDTCxDQUFDLENBQUNBO1dBQ1FBLDZDQUFzQkEsUUFzQi9CQTtRQW9CREE7WUFBQ0EsZUFBWUEsQ0FBQ0EsY0FBY0EsQ0FBQ0E7V0FDckJBLHdDQUFpQkEsUUFFeEJBO1FBRURBO1lBQUNBLGVBQVlBLENBQUNBLG9DQUFvQ0EsQ0FBQ0E7V0FDM0NBLDhEQUF1Q0EsUUFFOUNBO1FBQ0xBLGdCQUFDQTtJQUFEQSxDQXZMQXh2QyxBQXVMQ3d2QyxFQXZMdUN4dkMsWUFBU0EsRUF1TGhEQTtJQXZMcUJBLFlBQVNBLFlBdUw5QkEsQ0FBQUE7QUFDTEEsQ0FBQ0EsRUF6TE0sRUFBRSxLQUFGLEVBQUUsUUF5TFI7QUN6TEQsSUFBTyxFQUFFLENBd0VSO0FBeEVELFdBQU8sRUFBRSxFQUFDLENBQUM7SUFDUEE7UUFBc0Mwd0Msb0NBQVNBO1FBQS9DQTtZQUFzQ0MsOEJBQVNBO1lBT25DQSxtQkFBY0EsR0FBVUEsQ0FBQ0EsQ0FBQ0E7WUFTMUJBLG9CQUFlQSxHQUFVQSxDQUFDQSxDQUFDQTtZQVMzQkEsY0FBU0EsR0FBV0EsVUFBT0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFTNUNBLHFCQUFnQkEsR0FBV0EsVUFBT0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFTbkRBLFVBQUtBLEdBQVVBLENBQUNBLENBQUNBO1lBU2xCQSxZQUFPQSxHQUFXQSxJQUFJQSxDQUFDQTtZQUN2QkEsVUFBS0EsR0FBV0EsSUFBSUEsQ0FBQ0E7WUFDckJBLGFBQVFBLEdBQVdBLElBQUlBLENBQUNBO1FBZ0JuQ0EsQ0FBQ0E7UUFyRWlCRCx1QkFBTUEsR0FBcEJBO1lBQ0NFLElBQUlBLEdBQUdBLEdBQUdBLElBQUlBLElBQUlBLEVBQUVBLENBQUNBO1lBRXJCQSxNQUFNQSxDQUFDQSxHQUFHQSxDQUFDQTtRQUNaQSxDQUFDQTtRQUdERixzQkFDSUEsMkNBQWFBO2lCQURqQkE7Z0JBRUlHLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLGNBQWNBLENBQUNBO1lBQy9CQSxDQUFDQTtpQkFDREgsVUFBa0JBLGFBQW9CQTtnQkFDbENHLElBQUlBLENBQUNBLGNBQWNBLEdBQUdBLGFBQWFBLENBQUNBO1lBQ3hDQSxDQUFDQTs7O1dBSEFIO1FBTURBLHNCQUNJQSw0Q0FBY0E7aUJBRGxCQTtnQkFFSUksTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsZUFBZUEsQ0FBQ0E7WUFDaENBLENBQUNBO2lCQUNESixVQUFtQkEsY0FBcUJBO2dCQUNwQ0ksSUFBSUEsQ0FBQ0EsZUFBZUEsR0FBR0EsY0FBY0EsQ0FBQ0E7WUFDMUNBLENBQUNBOzs7V0FIQUo7UUFNREEsc0JBQ0lBLHNDQUFRQTtpQkFEWkE7Z0JBRUlLLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLFNBQVNBLENBQUNBO1lBQzFCQSxDQUFDQTtpQkFDREwsVUFBYUEsUUFBZ0JBO2dCQUN6QkssSUFBSUEsQ0FBQ0EsU0FBU0EsR0FBR0EsUUFBUUEsQ0FBQ0E7WUFDOUJBLENBQUNBOzs7V0FIQUw7UUFNREEsc0JBQ0lBLDZDQUFlQTtpQkFEbkJBO2dCQUVJTSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxnQkFBZ0JBLENBQUNBO1lBQ2pDQSxDQUFDQTtpQkFDRE4sVUFBb0JBLGVBQXVCQTtnQkFDdkNNLElBQUlBLENBQUNBLGdCQUFnQkEsR0FBR0EsZUFBZUEsQ0FBQ0E7WUFDNUNBLENBQUNBOzs7V0FIQU47UUFNREEsc0JBQ0lBLGtDQUFJQTtpQkFEUkE7Z0JBRUlPLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBO1lBQ3RCQSxDQUFDQTtpQkFDRFAsVUFBU0EsSUFBV0E7Z0JBQ2hCTyxJQUFJQSxDQUFDQSxLQUFLQSxHQUFHQSxJQUFJQSxDQUFDQTtZQUN0QkEsQ0FBQ0E7OztXQUhBUDtRQVNTQSxrQ0FBT0EsR0FBakJBO1lBQ0lRLElBQUlBLENBQUNBLHNCQUFzQkEsQ0FBQ0EsZ0JBQWdCQSxFQUFFQTtnQkFDMUNBLElBQUlBLEVBQUVBLElBQUlBLENBQUNBLElBQUlBO2dCQUVmQSxhQUFhQSxFQUFFQSxJQUFJQSxDQUFDQSxhQUFhQTtnQkFDakNBLGNBQWNBLEVBQUVBLElBQUlBLENBQUNBLGNBQWNBO2dCQUNuQ0EsUUFBUUEsRUFBRUEsSUFBSUEsQ0FBQ0EsUUFBUUE7Z0JBQ3ZCQSxlQUFlQSxFQUFFQSxJQUFJQSxDQUFDQSxlQUFlQTtnQkFFckNBLE9BQU9BLEVBQUVBLElBQUlBLENBQUNBLE9BQU9BO2dCQUNyQkEsS0FBS0EsRUFBRUEsSUFBSUEsQ0FBQ0EsS0FBS0E7Z0JBQ2pCQSxRQUFRQSxFQUFFQSxJQUFJQSxDQUFDQSxRQUFRQTthQUMxQkEsQ0FBQ0EsQ0FBQ0E7UUFDUEEsQ0FBQ0E7UUE3RERSO1lBQUNBLGlDQUE4QkEsQ0FBQ0EsZUFBZUEsQ0FBQ0E7V0FDNUNBLDJDQUFhQSxRQUVoQkE7UUFNREE7WUFBQ0EsaUNBQThCQSxDQUFDQSxnQkFBZ0JBLENBQUNBO1dBQzdDQSw0Q0FBY0EsUUFFakJBO1FBTURBO1lBQUNBLGlDQUE4QkEsQ0FBQ0EsVUFBVUEsQ0FBQ0E7V0FDdkNBLHNDQUFRQSxRQUVYQTtRQU1EQTtZQUFDQSxpQ0FBOEJBLENBQUNBLGlCQUFpQkEsQ0FBQ0E7V0FDOUNBLDZDQUFlQSxRQUVsQkE7UUFNREE7WUFBQ0EsaUNBQThCQSxDQUFDQSxNQUFNQSxDQUFDQTtXQUNuQ0Esa0NBQUlBLFFBRVBBO1FBdUJMQSx1QkFBQ0E7SUFBREEsQ0F0RUExd0MsQUFzRUMwd0MsRUF0RXFDMXdDLFlBQVNBLEVBc0U5Q0E7SUF0RVlBLG1CQUFnQkEsbUJBc0U1QkEsQ0FBQUE7QUFDTEEsQ0FBQ0EsRUF4RU0sRUFBRSxLQUFGLEVBQUUsUUF3RVI7QUN4RUQsSUFBTyxFQUFFLENBNkNSO0FBN0NELFdBQU8sRUFBRSxFQUFDLENBQUM7SUFDUEE7UUFBd0NteEMsc0NBQVNBO1FBQWpEQTtZQUF3Q0MsOEJBQVNBO1lBT3JDQSxjQUFTQSxHQUFXQSxVQUFPQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxFQUFFQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQTtZQVU1Q0EscUJBQWdCQSxHQUFXQSxVQUFPQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxFQUFFQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQTtZQVNuREEsVUFBS0EsR0FBVUEsQ0FBQ0EsQ0FBQ0E7UUFpQjdCQSxDQUFDQTtRQTFDaUJELHlCQUFNQSxHQUFwQkE7WUFDSUUsSUFBSUEsR0FBR0EsR0FBR0EsSUFBSUEsSUFBSUEsRUFBRUEsQ0FBQ0E7WUFFckJBLE1BQU1BLENBQUNBLEdBQUdBLENBQUNBO1FBQ2ZBLENBQUNBO1FBR0RGLHNCQUNJQSx3Q0FBUUE7aUJBRFpBO2dCQUVJRyxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxTQUFTQSxDQUFDQTtZQUMxQkEsQ0FBQ0E7aUJBRURILFVBQWFBLFFBQWdCQTtnQkFDekJHLElBQUlBLENBQUNBLFNBQVNBLEdBQUdBLFFBQVFBLENBQUNBO1lBQzlCQSxDQUFDQTs7O1dBSkFIO1FBT0RBLHNCQUNJQSwrQ0FBZUE7aUJBRG5CQTtnQkFFSUksTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsZ0JBQWdCQSxDQUFDQTtZQUNqQ0EsQ0FBQ0E7aUJBQ0RKLFVBQW9CQSxlQUF1QkE7Z0JBQ3ZDSSxJQUFJQSxDQUFDQSxnQkFBZ0JBLEdBQUdBLGVBQWVBLENBQUNBO1lBQzVDQSxDQUFDQTs7O1dBSEFKO1FBTURBLHNCQUNJQSxvQ0FBSUE7aUJBRFJBO2dCQUVJSyxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQTtZQUN0QkEsQ0FBQ0E7aUJBQ0RMLFVBQVNBLElBQVdBO2dCQUNoQkssSUFBSUEsQ0FBQ0EsS0FBS0EsR0FBR0EsSUFBSUEsQ0FBQ0E7WUFDdEJBLENBQUNBOzs7V0FIQUw7UUFNU0Esb0NBQU9BLEdBQWpCQTtZQUNJTSxJQUFJQSxDQUFDQSxzQkFBc0JBLENBQUNBLGtCQUFrQkEsRUFBRUE7Z0JBQzVDQSxJQUFJQSxFQUFFQSxJQUFJQSxDQUFDQSxJQUFJQTtnQkFDZkEsUUFBUUEsRUFBRUEsSUFBSUEsQ0FBQ0EsUUFBUUE7Z0JBQ3ZCQSxlQUFlQSxFQUFFQSxJQUFJQSxDQUFDQSxlQUFlQTthQUN4Q0EsQ0FBQ0EsQ0FBQ0E7UUFDUEEsQ0FBQ0E7UUFsQ0ROO1lBQUNBLGlDQUE4QkEsQ0FBQ0EsVUFBVUEsQ0FBQ0E7V0FDdkNBLHdDQUFRQSxRQUVYQTtRQU9EQTtZQUFDQSxpQ0FBOEJBLENBQUNBLGlCQUFpQkEsQ0FBQ0E7V0FDOUNBLCtDQUFlQSxRQUVsQkE7UUFNREE7WUFBQ0EsaUNBQThCQSxDQUFDQSxNQUFNQSxDQUFDQTtXQUNuQ0Esb0NBQUlBLFFBRVBBO1FBYUxBLHlCQUFDQTtJQUFEQSxDQTNDQW54QyxBQTJDQ214QyxFQTNDdUNueEMsWUFBU0EsRUEyQ2hEQTtJQTNDWUEscUJBQWtCQSxxQkEyQzlCQSxDQUFBQTtBQUNMQSxDQUFDQSxFQTdDTSxFQUFFLEtBQUYsRUFBRSxRQTZDUjtBQzdDRCxJQUFPLEVBQUUsQ0FZUjtBQVpELFdBQU8sRUFBRSxFQUFDLENBQUM7SUFDUEE7UUFBcUMweEMsbUNBQVNBO1FBQTlDQTtZQUFxQ0MsOEJBQVNBO1FBVTlDQSxDQUFDQTtRQVRpQkQsc0JBQU1BLEdBQXBCQTtZQUNJRSxJQUFJQSxHQUFHQSxHQUFHQSxJQUFJQSxJQUFJQSxFQUFFQSxDQUFDQTtZQUVyQkEsTUFBTUEsQ0FBQ0EsR0FBR0EsQ0FBQ0E7UUFDZkEsQ0FBQ0E7UUFFU0YsaUNBQU9BLEdBQWpCQTtZQUNJRyxJQUFJQSxDQUFDQSxzQkFBc0JBLENBQUNBLGVBQWVBLENBQUNBLENBQUNBO1FBQ2pEQSxDQUFDQTtRQUNMSCxzQkFBQ0E7SUFBREEsQ0FWQTF4QyxBQVVDMHhDLEVBVm9DMXhDLFlBQVNBLEVBVTdDQTtJQVZZQSxrQkFBZUEsa0JBVTNCQSxDQUFBQTtBQUNMQSxDQUFDQSxFQVpNLEVBQUUsS0FBRixFQUFFLFFBWVI7QUNaRCxJQUFPLEVBQUUsQ0F5TFI7QUF6TEQsV0FBTyxFQUFFLEVBQUEsQ0FBQztJQUNOQTtRQUNJOHhDLDJCQUFZQSxTQUFtQkE7WUFJeEJDLGFBQVFBLEdBQVVBLElBQUlBLENBQUNBO1lBRXBCQSxjQUFTQSxHQUFhQSxJQUFJQSxDQUFDQTtZQUxqQ0EsSUFBSUEsQ0FBQ0EsU0FBU0EsR0FBR0EsU0FBU0EsQ0FBQ0E7UUFDL0JBLENBQUNBO1FBS0xELHdCQUFDQTtJQUFEQSxDQVJBOXhDLEFBUUM4eEMsSUFBQTl4QztJQVJxQkEsb0JBQWlCQSxvQkFRdENBLENBQUFBO0lBRURBO1FBQW9DZ3lDLGtDQUFpQkE7UUFBckRBO1lBQW9DQyw4QkFBaUJBO1lBT3pDQSxtQkFBY0EsR0FBYUEsSUFBSUEsQ0FBQ0E7UUFtQjVDQSxDQUFDQTtRQXpCaUJELHFCQUFNQSxHQUFwQkEsVUFBcUJBLFNBQW1CQTtZQUNwQ0UsSUFBSUEsR0FBR0EsR0FBR0EsSUFBSUEsSUFBSUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsQ0FBQ0E7WUFFOUJBLE1BQU1BLENBQUNBLEdBQUdBLENBQUNBO1FBQ2ZBLENBQUNBO1FBR0RGLHNCQUFJQSx5Q0FBYUE7aUJBQWpCQTtnQkFDSUcsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsY0FBY0EsQ0FBQ0E7WUFDL0JBLENBQUNBO2lCQUNESCxVQUFrQkEsYUFBdUJBO2dCQUNyQ0csSUFBSUEsYUFBYUEsR0FBeUJBLElBQUlBLENBQUNBO2dCQUUvQ0EsSUFBSUEsQ0FBQ0EsY0FBY0EsR0FBR0EsYUFBYUEsQ0FBQ0E7Z0JBRXBDQSxFQUFFQSxDQUFBQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxTQUFTQSxDQUFDQSwyQkFBMkJBLEVBQUVBLENBQUNBLENBQUFBLENBQUNBO29CQUM5Q0EsTUFBTUEsQ0FBQ0E7Z0JBQ1hBLENBQUNBO2dCQUVEQSxhQUFhQSxHQUFHQSxJQUFJQSxDQUFDQSxTQUFTQSxDQUFDQSx1QkFBdUJBLEVBQUVBLENBQUNBO2dCQUV6REEsYUFBYUEsQ0FBQ0Esb0JBQW9CQSxDQUFDQSxJQUFJQSxDQUFDQSxTQUFTQSxDQUFDQSxZQUFZQSxDQUFDQSxDQUFDQTtnQkFFaEVBLElBQUlBLENBQUNBLFNBQVNBLENBQUNBLGFBQWFBLEVBQUVBLENBQUNBO1lBQ25DQSxDQUFDQTs7O1dBZkFIO1FBZ0JMQSxxQkFBQ0E7SUFBREEsQ0ExQkFoeUMsQUEwQkNneUMsRUExQm1DaHlDLGlCQUFpQkEsRUEwQnBEQTtJQTFCWUEsaUJBQWNBLGlCQTBCMUJBLENBQUFBO0lBRURBO1FBQXdDb3lDLHNDQUFpQkE7UUFBekRBO1lBQXdDQyw4QkFBaUJBO1lBTzdDQSxtQkFBY0EsR0FBYUEsSUFBSUEsQ0FBQ0E7WUFxQmpDQSxhQUFRQSxHQUFVQSxJQUFJQSxDQUFDQTtRQUNsQ0EsQ0FBQ0E7UUE1QmlCRCx5QkFBTUEsR0FBcEJBLFVBQXFCQSxTQUFtQkE7WUFDcENFLElBQUlBLEdBQUdBLEdBQUdBLElBQUlBLElBQUlBLENBQUNBLFNBQVNBLENBQUNBLENBQUNBO1lBRTlCQSxNQUFNQSxDQUFDQSxHQUFHQSxDQUFDQTtRQUNmQSxDQUFDQTtRQUdERixzQkFBSUEsNkNBQWFBO2lCQUFqQkE7Z0JBQ0lHLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLGNBQWNBLENBQUNBO1lBQy9CQSxDQUFDQTtpQkFDREgsVUFBa0JBLGFBQXVCQTtnQkFDckNHLElBQUlBLGFBQWFBLEdBQXlCQSxJQUFJQSxDQUFDQTtnQkFFL0NBLElBQUlBLENBQUNBLGNBQWNBLEdBQUdBLGFBQWFBLENBQUNBO2dCQUVwQ0EsRUFBRUEsQ0FBQUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsMkJBQTJCQSxFQUFFQSxDQUFDQSxDQUFBQSxDQUFDQTtvQkFDOUNBLE1BQU1BLENBQUNBO2dCQUNYQSxDQUFDQTtnQkFFREEsYUFBYUEsR0FBR0EsSUFBSUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsdUJBQXVCQSxFQUFFQSxDQUFDQTtnQkFFekRBLGFBQWFBLENBQUNBLHdCQUF3QkEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsWUFBWUEsQ0FBQ0EsQ0FBQ0E7Z0JBRXBFQSxJQUFJQSxDQUFDQSxTQUFTQSxDQUFDQSxhQUFhQSxFQUFFQSxDQUFDQTtZQUNuQ0EsQ0FBQ0E7OztXQWZBSDtRQW1CTEEseUJBQUNBO0lBQURBLENBN0JBcHlDLEFBNkJDb3lDLEVBN0J1Q3B5QyxpQkFBaUJBLEVBNkJ4REE7SUE3QllBLHFCQUFrQkEscUJBNkI5QkEsQ0FBQUE7SUFFREE7UUFBcUN3eUMsbUNBQWlCQTtRQUF0REE7WUFBcUNDLDhCQUFpQkE7WUFPMUNBLG1CQUFjQSxHQUFhQSxJQUFJQSxDQUFDQTtZQXFCakNBLFdBQU1BLEdBQVdBLElBQUlBLENBQUNBO1lBQ3RCQSxXQUFNQSxHQUFXQSxJQUFJQSxDQUFDQTtZQUV0QkEsVUFBS0EsR0FBV0EsSUFBSUEsQ0FBQ0E7WUFDckJBLFVBQUtBLEdBQVdBLElBQUlBLENBQUNBO1FBQ2hDQSxDQUFDQTtRQWhDaUJELHNCQUFNQSxHQUFwQkEsVUFBcUJBLFNBQW1CQTtZQUNwQ0UsSUFBSUEsR0FBR0EsR0FBR0EsSUFBSUEsSUFBSUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsQ0FBQ0E7WUFFOUJBLE1BQU1BLENBQUNBLEdBQUdBLENBQUNBO1FBQ2ZBLENBQUNBO1FBR0RGLHNCQUFJQSwwQ0FBYUE7aUJBQWpCQTtnQkFDSUcsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsY0FBY0EsQ0FBQ0E7WUFDL0JBLENBQUNBO2lCQUNESCxVQUFrQkEsYUFBdUJBO2dCQUNyQ0csSUFBSUEsYUFBYUEsR0FBeUJBLElBQUlBLENBQUNBO2dCQUUvQ0EsSUFBSUEsQ0FBQ0EsY0FBY0EsR0FBR0EsYUFBYUEsQ0FBQ0E7Z0JBRXBDQSxFQUFFQSxDQUFBQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxTQUFTQSxDQUFDQSwyQkFBMkJBLEVBQUVBLENBQUNBLENBQUFBLENBQUNBO29CQUM5Q0EsTUFBTUEsQ0FBQ0E7Z0JBQ1hBLENBQUNBO2dCQUVEQSxhQUFhQSxHQUFHQSxJQUFJQSxDQUFDQSxTQUFTQSxDQUFDQSx1QkFBdUJBLEVBQUVBLENBQUNBO2dCQUV6REEsYUFBYUEsQ0FBQ0EscUJBQXFCQSxDQUFDQSxJQUFJQSxDQUFDQSxTQUFTQSxDQUFDQSxZQUFZQSxDQUFDQSxDQUFDQTtnQkFFakVBLElBQUlBLENBQUNBLFNBQVNBLENBQUNBLGFBQWFBLEVBQUVBLENBQUNBO1lBQ25DQSxDQUFDQTs7O1dBZkFIO1FBdUJMQSxzQkFBQ0E7SUFBREEsQ0FqQ0F4eUMsQUFpQ0N3eUMsRUFqQ29DeHlDLGlCQUFpQkEsRUFpQ3JEQTtJQWpDWUEsa0JBQWVBLGtCQWlDM0JBLENBQUFBO0lBRURBO1FBQTRDNHlDLDBDQUFpQkE7UUFBN0RBO1lBQTRDQyw4QkFBaUJBO1lBT2xEQSxrQkFBYUEsR0FBYUEsSUFBSUEsQ0FBQ0E7WUFHL0JBLFdBQU1BLEdBQVdBLElBQUlBLENBQUNBO1lBQ3RCQSxXQUFNQSxHQUFXQSxJQUFJQSxDQUFDQTtRQUNqQ0EsQ0FBQ0E7UUFYaUJELDZCQUFNQSxHQUFwQkEsVUFBcUJBLFNBQW1CQTtZQUNwQ0UsSUFBSUEsR0FBR0EsR0FBR0EsSUFBSUEsSUFBSUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsQ0FBQ0E7WUFFOUJBLE1BQU1BLENBQUNBLEdBQUdBLENBQUNBO1FBQ2ZBLENBQUNBO1FBT0xGLDZCQUFDQTtJQUFEQSxDQVpBNXlDLEFBWUM0eUMsRUFaMkM1eUMsaUJBQWlCQSxFQVk1REE7SUFaWUEseUJBQXNCQSx5QkFZbENBLENBQUFBO0lBRURBO1FBT0kreUMsb0NBQVlBLFNBQW1CQTtZQUl2QkMsZUFBVUEsR0FBYUEsSUFBSUEsQ0FBQ0E7WUFDNUJBLFVBQUtBLEdBQTJDQSxJQUFJQSxDQUFDQSxVQUFVQSxDQUFDQSxNQUFNQSxFQUEwQkEsQ0FBQ0E7WUFKckdBLElBQUlBLENBQUNBLFVBQVVBLEdBQUdBLFNBQVNBLENBQUNBO1FBQ2hDQSxDQUFDQTtRQVJhRCxpQ0FBTUEsR0FBcEJBLFVBQXFCQSxTQUFtQkE7WUFDcENFLElBQUlBLEdBQUdBLEdBQUdBLElBQUlBLElBQUlBLENBQUNBLFNBQVNBLENBQUNBLENBQUNBO1lBRTlCQSxNQUFNQSxDQUFDQSxHQUFHQSxDQUFDQTtRQUNmQSxDQUFDQTtRQVNNRiw0Q0FBT0EsR0FBZEEsVUFBZUEsSUFBcUNBLEVBQUVBLE9BQWNBO1lBQWRHLHVCQUFjQSxHQUFkQSxpQkFBY0E7WUFDaEVBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBLE9BQU9BLENBQUNBLElBQUlBLEVBQUVBLE9BQU9BLENBQUNBLENBQUNBO1FBQ3RDQSxDQUFDQTtRQUVNSCw2Q0FBUUEsR0FBZkE7WUFDSUksTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsUUFBUUEsRUFBRUEsQ0FBQ0E7UUFDakNBLENBQUNBO1FBRU1KLDZDQUFRQSxHQUFmQSxVQUFnQkEsVUFBaUNBO1lBQzdDSyxJQUFJQSxhQUFhQSxHQUF5QkEsSUFBSUEsQ0FBQ0E7WUFFL0NBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBLFFBQVFBLENBQUNBLFVBQVVBLENBQUNBLENBQUNBO1lBRWhDQSxFQUFFQSxDQUFBQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxVQUFVQSxDQUFDQSwyQkFBMkJBLEVBQUVBLENBQUNBLENBQUFBLENBQUNBO2dCQUMvQ0EsTUFBTUEsQ0FBQ0E7WUFDWEEsQ0FBQ0E7WUFFREEsYUFBYUEsR0FBR0EsSUFBSUEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsdUJBQXVCQSxFQUFFQSxDQUFDQTtZQUUxREEsYUFBYUEsQ0FBQ0EseUJBQXlCQSxDQUFDQSxJQUFJQSxDQUFDQSxVQUFVQSxDQUFDQSxZQUFZQSxFQUFFQSxVQUFVQSxDQUFDQSxDQUFDQTtRQUN0RkEsQ0FBQ0E7UUFFTUwsZ0RBQVdBLEdBQWxCQSxVQUFtQkEsR0FBbUVBO1lBQXRGTSxpQkFhQ0E7WUFaR0EsRUFBRUEsQ0FBQUEsQ0FBQ0EsYUFBVUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQUEsQ0FBQ0E7Z0JBQ3hCQSxHQUFHQSxDQUFBQSxDQUFtQkEsVUFBa0NBLEVBQWxDQSxLQUErQkEsR0FBR0EsRUFBcERBLGNBQWNBLEVBQWRBLElBQW9EQSxDQUFDQTtvQkFBckRBLElBQUlBLFVBQVVBLFNBQUFBO29CQUNkQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxVQUFVQSxDQUFDQSxDQUFDQTtpQkFDN0JBO1lBQ0xBLENBQUNBO1lBQ0RBLElBQUlBLENBQUFBLENBQUNBO2dCQUNEQSxJQUFJQSxjQUFjQSxHQUFzQ0EsR0FBR0EsQ0FBQ0E7Z0JBRTVEQSxjQUFjQSxDQUFDQSxPQUFPQSxDQUFDQSxVQUFDQSxVQUFpQ0E7b0JBQ3JEQSxLQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxVQUFVQSxDQUFDQSxDQUFDQTtnQkFDOUJBLENBQUNBLEVBQUVBLElBQUlBLENBQUNBLENBQUNBO1lBQ2JBLENBQUNBO1FBQ0xBLENBQUNBO1FBRU1OLGdEQUFXQSxHQUFsQkEsVUFBbUJBLFVBQWlDQTtZQUNoRE8sSUFBSUEsYUFBYUEsR0FBR0EsSUFBSUEsQ0FBQ0E7WUFFekJBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBLFdBQVdBLENBQUNBLFVBQVVBLENBQUNBLENBQUNBO1lBRW5DQSxFQUFFQSxDQUFBQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxVQUFVQSxDQUFDQSwyQkFBMkJBLEVBQUVBLENBQUNBLENBQUFBLENBQUNBO2dCQUMvQ0EsTUFBTUEsQ0FBQ0E7WUFDWEEsQ0FBQ0E7WUFFREEsYUFBYUEsR0FBR0EsSUFBSUEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsdUJBQXVCQSxFQUFFQSxDQUFDQTtZQUUxREEsYUFBYUEsQ0FBQ0EsNEJBQTRCQSxDQUFDQSxVQUFVQSxDQUFDQSxDQUFDQTtRQUMzREEsQ0FBQ0E7UUFDTFAsaUNBQUNBO0lBQURBLENBaEVBL3lDLEFBZ0VDK3lDLElBQUEveUM7SUFoRVlBLDZCQUEwQkEsNkJBZ0V0Q0EsQ0FBQUE7QUFFTEEsQ0FBQ0EsRUF6TE0sRUFBRSxLQUFGLEVBQUUsUUF5TFI7QUN6TEQsSUFBTyxFQUFFLENBaUJSO0FBakJELFdBQU8sRUFBRSxFQUFBLENBQUM7SUFDTkE7UUFBQXV6QztRQWVBQyxDQUFDQTtRQWRpQkQsMkJBQU1BLEdBQXBCQSxVQUFxQkEsSUFBc0JBO1lBQ3ZDRSxJQUFJQSxNQUFNQSxHQUF5QkEsSUFBSUEsQ0FBQ0E7WUFFeENBLE1BQU1BLENBQUNBLENBQUNBLElBQUlBLENBQUNBLENBQUFBLENBQUNBO2dCQUNWQSxLQUFLQSxvQkFBaUJBLENBQUNBLE1BQU1BO29CQUN6QkEsTUFBTUEsR0FBR0EsZ0JBQWFBLENBQUNBLE1BQU1BLEVBQUVBLENBQUNBO29CQUNoQ0EsS0FBS0EsQ0FBQ0E7Z0JBQ1ZBO29CQUNJQSxJQUFJQSxDQUFDQSxHQUFHQSxDQUFDQSxLQUFLQSxDQUFDQSxJQUFJQSxFQUFFQSxJQUFJQSxDQUFDQSxHQUFHQSxDQUFDQSxJQUFJQSxDQUFDQSxhQUFhQSxDQUFDQSxxQkFBcUJBLENBQUNBLENBQUNBLENBQUNBO29CQUN6RUEsS0FBS0EsQ0FBQ0E7WUFDZEEsQ0FBQ0E7WUFFREEsTUFBTUEsQ0FBQ0EsTUFBTUEsQ0FBQ0E7UUFDbEJBLENBQUNBO1FBQ0xGLDJCQUFDQTtJQUFEQSxDQWZBdnpDLEFBZUN1ekMsSUFBQXZ6QztJQWZZQSx1QkFBb0JBLHVCQWVoQ0EsQ0FBQUE7QUFDTEEsQ0FBQ0EsRUFqQk0sRUFBRSxLQUFGLEVBQUUsUUFpQlI7QUNqQkQsSUFBTyxFQUFFLENBSVI7QUFKRCxXQUFPLEVBQUUsRUFBQSxDQUFDO0lBQ05BLFdBQVlBLGlCQUFpQkE7UUFDekIwekMsNkRBQU1BLENBQUFBO0lBQ1ZBLENBQUNBLEVBRlcxekMsb0JBQWlCQSxLQUFqQkEsb0JBQWlCQSxRQUU1QkE7SUFGREEsSUFBWUEsaUJBQWlCQSxHQUFqQkEsb0JBRVhBLENBQUFBO0FBQ0xBLENBQUNBLEVBSk0sRUFBRSxLQUFGLEVBQUUsUUFJUjtBQ0pELElBQU8sRUFBRSxDQWNSO0FBZEQsV0FBTyxFQUFFLEVBQUMsQ0FBQztJQUNQQTtRQUFBMnpDO1lBS2NDLGFBQVFBLEdBQXdCQSxJQUFJQSxDQUFDQSxVQUFVQSxDQUFDQSxNQUFNQSxFQUFPQSxDQUFDQTtRQU81RUEsQ0FBQ0E7UUFYVUQsaUNBQVFBLEdBQWZBO1lBQ0lFLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLFFBQVFBLEVBQUVBLENBQUNBO1FBQ3BDQSxDQUFDQTtRQUlTRiwyQ0FBa0JBLEdBQTVCQSxVQUE2QkEsR0FBY0E7WUFDdkNHLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLFdBQVdBLENBQUNBLFVBQUNBLEVBQW9CQTtvQkFBbkJBLFlBQVlBLG9CQUFFQSxJQUFJQTtnQkFDMUNBLE1BQU1BLENBQUNBLGFBQVVBLENBQUNBLE9BQU9BLENBQUNBLFlBQVlBLEVBQUVBLEdBQUdBLENBQUNBLENBQUNBO1lBQ2pEQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUNQQSxDQUFDQTtRQUNMSCxxQkFBQ0E7SUFBREEsQ0FaQTN6QyxBQVlDMnpDLElBQUEzekM7SUFacUJBLGlCQUFjQSxpQkFZbkNBLENBQUFBO0FBQ0xBLENBQUNBLEVBZE0sRUFBRSxLQUFGLEVBQUUsUUFjUjtBQ2RELElBQU8sRUFBRSxDQWtFUjtBQWxFRCxXQUFPLEVBQUUsRUFBQyxDQUFDO0lBQ1BBO1FBQThDK3pDLDRDQUFjQTtRQUE1REE7WUFBOENDLDhCQUFjQTtRQTJENURBLENBQUNBO1FBMURpQkQsK0JBQU1BLEdBQXBCQTtZQUNJRSxJQUFJQSxHQUFHQSxHQUFHQSxJQUFJQSxJQUFJQSxFQUFFQSxDQUFDQTtZQUVyQkEsTUFBTUEsQ0FBQ0EsR0FBR0EsQ0FBQ0E7UUFDZkEsQ0FBQ0E7UUFJTUYseUNBQU1BLEdBQWJBLFVBQWNBLEdBQWNBO1lBQ3hCRyxJQUFJQSxDQUFDQSxrQkFBa0JBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO1FBQ2pDQSxDQUFDQTtRQUVNSCwwREFBdUJBLEdBQTlCQTtZQUNJSSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxPQUFPQSxDQUFDQSxVQUFDQSxFQUFtQkE7b0JBQWxCQSxZQUFZQSxvQkFBQ0EsSUFBSUE7Z0JBQ3JDQSxJQUFJQSxTQUFTQSxHQUFHQSxZQUFZQSxDQUFDQSxTQUFTQSxDQUFDQTtnQkFHdkNBLEVBQUVBLENBQUFBLENBQUNBLFNBQVNBLENBQUNBLFdBQVdBLElBQUlBLFNBQVNBLENBQUNBLFFBQVFBLENBQUNBLENBQUFBLENBQUNBO29CQUM1Q0EsSUFBSUEsQ0FBQ0EsUUFBUUEsR0FBR0EsY0FBV0EsQ0FBQ0Esc0JBQXNCQSxDQUFDQSxZQUFZQSxDQUFDQSxTQUFTQSxDQUFDQSxRQUFRQSxDQUFDQSxDQUFDQTtvQkFDcEZBLElBQUlBLENBQUNBLFVBQVVBLEdBQUdBLGNBQVdBLENBQUNBLHlCQUF5QkEsQ0FBQ0EsWUFBWUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsUUFBUUEsQ0FBQ0EsQ0FBQ0E7Z0JBQzdGQSxDQUFDQTtZQUNMQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUVQQSxDQUFDQTtRQUVNSixnRUFBNkJBLEdBQXBDQTtZQUNJSyxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxPQUFPQSxDQUFDQSxVQUFDQSxFQUFtQkE7b0JBQWxCQSxZQUFZQSxvQkFBQ0EsSUFBSUE7Z0JBQ3JDQSxFQUFFQSxDQUFBQSxDQUFDQSxZQUFZQSxDQUFDQSxNQUFNQSxDQUFDQSxrQkFBa0JBLENBQUNBLENBQUNBLENBQUFBLENBQUNBO29CQUN4Q0EsTUFBTUEsQ0FBQ0E7Z0JBQ1hBLENBQUNBO2dCQUVEQSxZQUFZQSxDQUFDQSxTQUFTQSxDQUFDQSxRQUFRQSxHQUFHQSxjQUFXQSxDQUFDQSxzQkFBc0JBLENBQUNBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLENBQUNBO2dCQUNwRkEsWUFBWUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsUUFBUUEsR0FBR0EsY0FBV0EsQ0FBQ0EseUJBQXlCQSxDQUFDQSxJQUFJQSxDQUFDQSxVQUFVQSxDQUFDQSxDQUFDQTtZQUM3RkEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDUEEsQ0FBQ0E7UUFFTUwsc0NBQUdBLEdBQVZBLFVBQVdBLEdBQWNBLEVBQUVBLElBQWdCQTtZQUN2Q00sSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsUUFBUUEsQ0FBQ0E7Z0JBQ25CQSxZQUFZQSxFQUFDQSxHQUFHQTtnQkFDaEJBLElBQUlBLEVBQUNBLElBQUlBO2FBQ1pBLENBQUNBLENBQUNBO1FBQ1BBLENBQUNBO1FBRU1OLHVEQUFvQkEsR0FBM0JBLFVBQTRCQSxDQUFhQTtZQUNyQ08sSUFBSUEsTUFBTUEsR0FBR0EsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsVUFBQ0EsRUFBb0JBO29CQUFuQkEsWUFBWUEsb0JBQUVBLElBQUlBO2dCQUNuREEsTUFBTUEsQ0FBQ0EsSUFBSUEsS0FBS0EsQ0FBQ0EsQ0FBQ0E7WUFDdEJBLENBQUNBLENBQUNBLENBQUNBO1lBRUhBLE1BQU1BLENBQUNBLE1BQU1BLEtBQUtBLElBQUlBLEdBQUdBLE1BQU1BLENBQUNBLFlBQVlBLEdBQUdBLElBQUlBLENBQUNBO1FBQ3hEQSxDQUFDQTtRQUVNUCx1REFBb0JBLEdBQTNCQSxVQUE0QkEsR0FBY0E7WUFDdENRLElBQUlBLE1BQU1BLEdBQUdBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLE9BQU9BLENBQUNBLFVBQUNBLEVBQW9CQTtvQkFBbkJBLFlBQVlBLG9CQUFFQSxJQUFJQTtnQkFDbkRBLE1BQU1BLENBQUNBLGFBQVVBLENBQUNBLE9BQU9BLENBQUNBLFlBQVlBLEVBQUVBLEdBQUdBLENBQUNBLENBQUNBO1lBQ2pEQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUVIQSxNQUFNQSxDQUFDQSxNQUFNQSxLQUFLQSxJQUFJQSxHQUFHQSxNQUFNQSxDQUFDQSxJQUFJQSxHQUFHQSxJQUFJQSxDQUFDQTtRQUNoREEsQ0FBQ0E7UUFDTFIsK0JBQUNBO0lBQURBLENBM0RBL3pDLEFBMkRDK3pDLEVBM0Q2Qy96QyxpQkFBY0EsRUEyRDNEQTtJQTNEWUEsMkJBQXdCQSwyQkEyRHBDQSxDQUFBQTtBQU1MQSxDQUFDQSxFQWxFTSxFQUFFLEtBQUYsRUFBRSxRQWtFUjtBQ2xFRCxJQUFPLEVBQUUsQ0F5RlI7QUF6RkQsV0FBTyxFQUFFLEVBQUMsQ0FBQztJQUNQQTtRQUF3Q3cwQyxzQ0FBY0E7UUFBdERBO1lBQXdDQyw4QkFBY0E7UUFrRnREQSxDQUFDQTtRQWpGaUJELHlCQUFNQSxHQUFwQkE7WUFDSUUsSUFBSUEsR0FBR0EsR0FBR0EsSUFBSUEsSUFBSUEsRUFBRUEsQ0FBQ0E7WUFFckJBLE1BQU1BLENBQUNBLEdBQUdBLENBQUNBO1FBQ2ZBLENBQUNBO1FBSU1GLG1DQUFNQSxHQUFiQSxVQUFjQSxHQUFjQTtZQUN4QkcsSUFBSUEsQ0FBQ0Esa0JBQWtCQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtRQUNqQ0EsQ0FBQ0E7UUFFTUgscURBQXdCQSxHQUEvQkEsVUFBZ0NBLEdBQWNBO1lBQzFDSSxJQUFJQSxNQUFNQSxHQUFHQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxPQUFPQSxDQUFDQSxVQUFDQSxFQUF3QkE7b0JBQXZCQSxZQUFZQSxvQkFBRUEsUUFBUUE7Z0JBQ3ZEQSxNQUFNQSxDQUFDQSxhQUFVQSxDQUFDQSxPQUFPQSxDQUFDQSxZQUFZQSxFQUFFQSxHQUFHQSxDQUFDQSxDQUFDQTtZQUNqREEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFFSEEsTUFBTUEsQ0FBQ0EsTUFBTUEsS0FBS0EsSUFBSUEsR0FBR0EsTUFBTUEsQ0FBQ0EsUUFBUUEsR0FBR0EsSUFBSUEsQ0FBQ0E7UUFDcERBLENBQUNBO1FBRU1KLGdDQUFHQSxHQUFWQSxVQUFXQSxHQUFjQSxFQUFFQSxRQUF3QkE7WUFDL0NLLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLFFBQVFBLENBQUNBO2dCQUNuQkEsWUFBWUEsRUFBQ0EsR0FBR0E7Z0JBQ2hCQSxRQUFRQSxFQUFDQSxRQUFRQTthQUNwQkEsQ0FBQ0EsQ0FBQ0E7UUFDUEEsQ0FBQ0E7UUFFTUwsK0NBQWtCQSxHQUF6QkEsVUFBMEJBLEtBQWtCQSxFQUFFQSxlQUErQkEsRUFBRUEsUUFBZUEsRUFBRUEsV0FBa0JBO1lBQzlHTSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxPQUFPQSxDQUFDQSxVQUFDQSxFQUF3QkE7b0JBQXZCQSxZQUFZQSxvQkFBRUEsUUFBUUE7Z0JBQzFDQSxLQUFLQSxDQUFDQSxrQkFBa0JBLENBQUNBLElBQUlBLE1BQU1BLENBQUNBLGVBQWVBLENBQUNBLFFBQVFBLEVBQUVBLGVBQWVBLEVBQUVBO29CQUMzRUEsUUFBUUEsRUFBRUEsUUFBUUE7b0JBQ2xCQSxXQUFXQSxFQUFFQSxXQUFXQTtpQkFDM0JBLENBQUNBLENBQUNBLENBQUNBO1lBQ1JBLENBQUNBLENBQUNBLENBQUNBO1FBQ1BBLENBQUNBO1FBRU1OLG1EQUFzQkEsR0FBN0JBLFVBQThCQSxLQUFrQkEsRUFBRUEsZUFBK0JBLEVBQUVBLFFBQWVBO1lBQzlGTyxJQUFJQSxNQUFNQSxHQUFHQSxJQUFJQSxDQUFDQTtZQUVsQkEsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsVUFBQ0EsRUFBd0JBO29CQUF2QkEsWUFBWUEsb0JBQUVBLFFBQVFBO2dCQUMxQ0EsSUFBSUEsZUFBZUEsR0FBR0EsS0FBS0EsQ0FBQ0Esa0JBQWtCQSxDQUFDQSxRQUFRQSxFQUFFQSxlQUFlQSxDQUFDQSxDQUFDQTtnQkFFMUVBLEVBQUVBLENBQUFBLENBQUNBLENBQUNBLGVBQWVBLENBQUNBLENBQUFBLENBQUNBO29CQUNqQkEsTUFBTUEsQ0FBQ0E7Z0JBQ1hBLENBQUNBO2dCQUVEQSxNQUFNQSxHQUFHQSxlQUFlQSxDQUFDQSxRQUFRQSxDQUFDQSxDQUFDQTtnQkFFbkNBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLE1BQU1BLENBQUNBO1lBQ3ZCQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUVIQSxNQUFNQSxDQUFDQSxNQUFNQSxDQUFDQTtRQUNsQkEsQ0FBQ0E7UUFFTVAsZ0RBQW1CQSxHQUExQkEsVUFBMkJBLEtBQWtCQSxFQUFFQSxlQUErQkE7WUFDMUVRLElBQUlBLFNBQVNBLEdBQUdBLEVBQUVBLENBQUNBO1lBRW5CQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxPQUFPQSxDQUFDQSxVQUFDQSxFQUF3QkE7b0JBQXZCQSxZQUFZQSxvQkFBRUEsUUFBUUE7Z0JBQzFDQSxJQUFJQSxlQUFlQSxHQUFHQSxLQUFLQSxDQUFDQSxrQkFBa0JBLENBQUNBLFFBQVFBLEVBQUVBLGVBQWVBLENBQUNBLENBQUNBO2dCQUUxRUEsRUFBRUEsQ0FBQUEsQ0FBQ0EsQ0FBQ0EsZUFBZUEsQ0FBQ0EsQ0FBQUEsQ0FBQ0E7b0JBQ2pCQSxNQUFNQSxDQUFDQTtnQkFDWEEsQ0FBQ0E7Z0JBRURBLFNBQVNBLENBQUNBLElBQUlBLENBQUNBLGVBQWVBLENBQUNBLENBQUNBO1lBQ3BDQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUVIQSxNQUFNQSxDQUFDQSxTQUFTQSxDQUFDQTtRQUNyQkEsQ0FBQ0E7UUFFTVIsbURBQXNCQSxHQUE3QkEsVUFBOEJBLEtBQWtCQSxFQUFFQSxlQUErQkEsRUFBRUEsUUFBZUEsRUFBRUEsSUFBUUE7WUFDeEdTLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLE9BQU9BLENBQUNBLFVBQUNBLEVBQXdCQTtvQkFBdkJBLFlBQVlBLG9CQUFFQSxRQUFRQTtnQkFDMUNBLElBQUlBLGVBQWVBLEdBQUdBLEtBQUtBLENBQUNBLGtCQUFrQkEsQ0FBQ0EsUUFBUUEsRUFBRUEsZUFBZUEsQ0FBQ0EsQ0FBQ0E7Z0JBRTFFQSxFQUFFQSxDQUFBQSxDQUFDQSxDQUFDQSxlQUFlQSxDQUFDQSxDQUFBQSxDQUFDQTtvQkFDakJBLE1BQU1BLENBQUNBO2dCQUNYQSxDQUFDQTtnQkFFREEsZUFBZUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0E7WUFDckNBLENBQUNBLENBQUNBLENBQUNBO1FBQ1BBLENBQUNBO1FBQ0xULHlCQUFDQTtJQUFEQSxDQWxGQXgwQyxBQWtGQ3cwQyxFQWxGdUN4MEMsaUJBQWNBLEVBa0ZyREE7SUFsRllBLHFCQUFrQkEscUJBa0Y5QkEsQ0FBQUE7QUFNTEEsQ0FBQ0EsRUF6Rk0sRUFBRSxLQUFGLEVBQUUsUUF5RlI7QUN6RkQsSUFBTyxFQUFFLENBR1I7QUFIRCxXQUFPLEVBQUUsRUFBQyxDQUFDO0lBQ1BBO1FBQXVEazFDLDRDQUFjQTtRQUFyRUE7WUFBdURDLDhCQUFjQTtRQUNyRUEsQ0FBQ0E7UUFBREQsK0JBQUNBO0lBQURBLENBREFsMUMsQUFDQ2sxQyxFQURzRGwxQyxpQkFBY0EsRUFDcEVBO0lBRHFCQSwyQkFBd0JBLDJCQUM3Q0EsQ0FBQUE7QUFDTEEsQ0FBQ0EsRUFITSxFQUFFLEtBQUYsRUFBRSxRQUdSO0FDSEQsSUFBTyxFQUFFLENBcUJSO0FBckJELFdBQU8sRUFBRSxFQUFDLENBQUM7SUFDUEE7UUFBNkRvMUMsa0RBQXdCQTtRQUFyRkE7WUFBNkRDLDhCQUF3QkE7UUFtQnJGQSxDQUFDQTtRQWxCVUQsNENBQUdBLEdBQVZBLFVBQVdBLEdBQWNBLEVBQUVBLFVBQTRCQTtZQUNuREUsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsUUFBUUEsQ0FBQ0E7Z0JBQ25CQSxZQUFZQSxFQUFDQSxHQUFHQTtnQkFDaEJBLFVBQVVBLEVBQUNBLFVBQVVBO2FBQ3hCQSxDQUFDQSxDQUFDQTtRQUNQQSxDQUFDQTtRQUVNRiwrQ0FBTUEsR0FBYkEsVUFBY0EsR0FBY0E7WUFDeEJHLElBQUlBLENBQUNBLGtCQUFrQkEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7UUFDakNBLENBQUNBO1FBRU1ILG1FQUEwQkEsR0FBakNBLFVBQWtDQSxHQUFjQTtZQUM1Q0ksSUFBSUEsTUFBTUEsR0FBR0EsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsVUFBQ0EsRUFBY0E7b0JBQWJBLFlBQVlBO2dCQUM3Q0EsTUFBTUEsQ0FBQ0EsYUFBVUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsWUFBWUEsRUFBRUEsR0FBR0EsQ0FBQ0EsQ0FBQ0E7WUFDakRBLENBQUNBLENBQUNBLENBQUNBO1lBRUhBLE1BQU1BLENBQUNBLE1BQU1BLEtBQUtBLElBQUlBLEdBQUdBLE1BQU1BLENBQUNBLFVBQVVBLEdBQUdBLElBQUlBLENBQUNBO1FBQ3REQSxDQUFDQTtRQUNMSixxQ0FBQ0E7SUFBREEsQ0FuQkFwMUMsQUFtQkNvMUMsRUFuQjREcDFDLDJCQUF3QkEsRUFtQnBGQTtJQW5CcUJBLGlDQUE4QkEsaUNBbUJuREEsQ0FBQUE7QUFDTEEsQ0FBQ0EsRUFyQk0sRUFBRSxLQUFGLEVBQUUsUUFxQlI7QUNyQkQsSUFBTyxFQUFFLENBZVI7QUFmRCxXQUFPLEVBQUUsRUFBQyxDQUFDO0lBQ1BBO1FBQWtEeTFDLGdEQUE4QkE7UUFBaEZBO1lBQWtEQyw4QkFBOEJBO1FBUWhGQSxDQUFDQTtRQVBpQkQsbUNBQU1BLEdBQXBCQTtZQUNJRSxJQUFJQSxHQUFHQSxHQUFHQSxJQUFJQSxJQUFJQSxFQUFFQSxDQUFDQTtZQUVyQkEsTUFBTUEsQ0FBQ0EsR0FBR0EsQ0FBQ0E7UUFDZkEsQ0FBQ0E7UUFHTEYsbUNBQUNBO0lBQURBLENBUkF6MUMsQUFRQ3kxQyxFQVJpRHoxQyxpQ0FBOEJBLEVBUS9FQTtJQVJZQSwrQkFBNEJBLCtCQVF4Q0EsQ0FBQUE7QUFNTEEsQ0FBQ0EsRUFmTSxFQUFFLEtBQUYsRUFBRSxRQWVSO0FDZkQsSUFBTyxFQUFFLENBOENSO0FBOUNELFdBQU8sRUFBRSxFQUFDLENBQUM7SUFDUEE7UUFBMEQ0MUMsd0RBQXdCQTtRQUFsRkE7WUFBMERDLDhCQUF3QkE7UUFzQ2xGQSxDQUFDQTtRQXJDaUJELDJDQUFNQSxHQUFwQkE7WUFDSUUsSUFBSUEsR0FBR0EsR0FBR0EsSUFBSUEsSUFBSUEsRUFBRUEsQ0FBQ0E7WUFFckJBLE1BQU1BLENBQUNBLEdBQUdBLENBQUNBO1FBQ2ZBLENBQUNBO1FBSU1GLHFEQUFNQSxHQUFiQSxVQUFjQSxJQUF1REE7WUFDakVHLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLENBQUNBO1FBQ3RDQSxDQUFDQTtRQUVNSCxzREFBT0EsR0FBZEEsVUFBZUEsSUFBb0RBO1lBQy9ESSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxPQUFPQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtRQUNoQ0EsQ0FBQ0E7UUFFTUosa0RBQUdBLEdBQVZBLFVBQVdBLFlBQXVCQSxFQUFFQSxzQkFBNkNBLEVBQUVBLFVBQTRCQTtZQUMzR0ssSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsUUFBUUEsQ0FBQ0E7Z0JBQ25CQSxZQUFZQSxFQUFDQSxZQUFZQTtnQkFDekJBLHNCQUFzQkEsRUFBRUEsc0JBQXNCQTtnQkFDOUNBLGdCQUFnQkEsRUFBQ0EsVUFBVUE7YUFDOUJBLENBQUNBLENBQUNBO1FBQ1BBLENBQUNBO1FBRU1MLHFEQUFNQSxHQUFiQSxVQUFjQSxVQUFrQ0E7WUFDNUNNLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLFdBQVdBLENBQUNBLFVBQUNBLEVBQXdCQTtvQkFBdkJBLHNCQUFzQkE7Z0JBQzlDQSxNQUFNQSxDQUFDQSxhQUFVQSxDQUFDQSxPQUFPQSxDQUFDQSxzQkFBc0JBLEVBQUVBLFVBQVVBLENBQUNBLENBQUNBO1lBQ2xFQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUNQQSxDQUFDQTtRQUVNTiwyRkFBNENBLEdBQW5EQSxVQUFvREEsVUFBa0NBO1lBQ2xGTyxJQUFJQSxNQUFNQSxHQUFHQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxPQUFPQSxDQUFDQSxVQUFDQSxFQUF3QkE7b0JBQXZCQSxzQkFBc0JBO2dCQUN2REEsTUFBTUEsQ0FBQ0EsYUFBVUEsQ0FBQ0EsT0FBT0EsQ0FBQ0Esc0JBQXNCQSxFQUFFQSxVQUFVQSxDQUFDQSxDQUFDQTtZQUNsRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFFSEEsTUFBTUEsQ0FBQ0EsTUFBTUEsS0FBS0EsSUFBSUEsR0FBR0EsTUFBTUEsQ0FBQ0EsZ0JBQWdCQSxHQUFHQSxJQUFJQSxDQUFDQTtRQUM1REEsQ0FBQ0E7UUFDTFAsMkNBQUNBO0lBQURBLENBdENBNTFDLEFBc0NDNDFDLEVBdEN5RDUxQywyQkFBd0JBLEVBc0NqRkE7SUF0Q1lBLHVDQUFvQ0EsdUNBc0NoREEsQ0FBQUE7QUFPTEEsQ0FBQ0EsRUE5Q00sRUFBRSxLQUFGLEVBQUUsUUE4Q1I7QUM5Q0QsSUFBTyxFQUFFLENBZVI7QUFmRCxXQUFPLEVBQUUsRUFBQyxDQUFDO0lBQ1BBO1FBQXNEbzJDLG9EQUE4QkE7UUFBcEZBO1lBQXNEQyw4QkFBOEJBO1FBUXBGQSxDQUFDQTtRQVBpQkQsdUNBQU1BLEdBQXBCQTtZQUNJRSxJQUFJQSxHQUFHQSxHQUFHQSxJQUFJQSxJQUFJQSxFQUFFQSxDQUFDQTtZQUVyQkEsTUFBTUEsQ0FBQ0EsR0FBR0EsQ0FBQ0E7UUFDZkEsQ0FBQ0E7UUFHTEYsdUNBQUNBO0lBQURBLENBUkFwMkMsQUFRQ28yQyxFQVJxRHAyQyxpQ0FBOEJBLEVBUW5GQTtJQVJZQSxtQ0FBZ0NBLG1DQVE1Q0EsQ0FBQUE7QUFNTEEsQ0FBQ0EsRUFmTSxFQUFFLEtBQUYsRUFBRSxRQWVSO0FDZkQsSUFBTyxFQUFFLENBZVI7QUFmRCxXQUFPLEVBQUUsRUFBQyxDQUFDO0lBQ1BBO1FBQW1EdTJDLGlEQUE4QkE7UUFBakZBO1lBQW1EQyw4QkFBOEJBO1FBUWpGQSxDQUFDQTtRQVBpQkQsb0NBQU1BLEdBQXBCQTtZQUNJRSxJQUFJQSxHQUFHQSxHQUFHQSxJQUFJQSxJQUFJQSxFQUFFQSxDQUFDQTtZQUVyQkEsTUFBTUEsQ0FBQ0EsR0FBR0EsQ0FBQ0E7UUFDZkEsQ0FBQ0E7UUFHTEYsb0NBQUNBO0lBQURBLENBUkF2MkMsQUFRQ3UyQyxFQVJrRHYyQyxpQ0FBOEJBLEVBUWhGQTtJQVJZQSxnQ0FBNkJBLGdDQVF6Q0EsQ0FBQUE7QUFNTEEsQ0FBQ0EsRUFmTSxFQUFFLEtBQUYsRUFBRSxRQWVSO0FDZkQsSUFBTyxFQUFFLENBa0JSO0FBbEJELFdBQU8sRUFBRSxFQUFDLENBQUM7SUFDUEE7UUFBQTAyQztRQWdCQUMsQ0FBQ0E7UUFmaUJELGtDQUFzQkEsR0FBcENBLFVBQXFDQSxDQUFTQTtZQUMxQ0UsTUFBTUEsQ0FBQ0EsSUFBSUEsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDMUNBLENBQUNBO1FBRWFGLHFDQUF5QkEsR0FBdkNBLFVBQXdDQSxRQUFtQkE7WUFDdkRHLE1BQU1BLENBQUNBLElBQUlBLE1BQU1BLENBQUNBLFVBQVVBLENBQUNBLFFBQVFBLENBQUNBLENBQUNBLEVBQUVBLFFBQVFBLENBQUNBLENBQUNBLEVBQUVBLFFBQVFBLENBQUNBLENBQUNBLEVBQUVBLFFBQVFBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1FBQ2pGQSxDQUFDQTtRQUVhSCxrQ0FBc0JBLEdBQXBDQSxVQUFxQ0EsQ0FBYUE7WUFDOUNJLE1BQU1BLENBQUNBLFVBQU9BLENBQUNBLE1BQU1BLENBQUNBLENBQUNBLENBQUNBLENBQUNBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1FBQ3pDQSxDQUFDQTtRQUVhSixxQ0FBeUJBLEdBQXZDQSxVQUF3Q0EsQ0FBbUJBO1lBQ3ZESyxNQUFNQSxDQUFDQSxhQUFVQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUNqREEsQ0FBQ0E7UUFDTEwsa0JBQUNBO0lBQURBLENBaEJBMTJDLEFBZ0JDMDJDLElBQUExMkM7SUFoQllBLGNBQVdBLGNBZ0J2QkEsQ0FBQUE7QUFDTEEsQ0FBQ0EsRUFsQk0sRUFBRSxLQUFGLEVBQUUsUUFrQlI7QUNsQkQsSUFBTyxFQUFFLENBK1JSO0FBL1JELFdBQU8sRUFBRSxFQUFDLENBQUM7SUFDUEE7UUFBQWczQztZQU9XQyxVQUFLQSxHQUFnQkEsSUFBSUEsQ0FBQ0E7WUFFekJBLGtCQUFhQSxHQUFzQkEscUJBQWtCQSxDQUFDQSxNQUFNQSxFQUFFQSxDQUFDQTtZQUMvREEsd0JBQW1CQSxHQUE0QkEsMkJBQXdCQSxDQUFDQSxNQUFNQSxFQUFFQSxDQUFDQTtZQUNqRkEsNEJBQXVCQSxHQUFnQ0EsK0JBQTRCQSxDQUFDQSxNQUFNQSxFQUFFQSxDQUFDQTtZQUM3RkEsZ0NBQTJCQSxHQUFvQ0EsbUNBQWdDQSxDQUFDQSxNQUFNQSxFQUFFQSxDQUFDQTtZQUN6R0EsNkJBQXdCQSxHQUFpQ0EsZ0NBQTZCQSxDQUFDQSxNQUFNQSxFQUFFQSxDQUFDQTtZQUNoR0Esb0NBQStCQSxHQUF3Q0EsdUNBQW9DQSxDQUFDQSxNQUFNQSxFQUFFQSxDQUFDQTtZQUVySEEsaUJBQVlBLEdBQXFCQSxJQUFJQSxDQUFDQTtZQUN0Q0EsbUJBQWNBLEdBQXVCQSxJQUFJQSxDQUFDQTtZQUMxQ0EsZ0JBQVdBLEdBQW9CQSxJQUFJQSxDQUFDQTtZQUNwQ0Esb0JBQWVBLEdBQXdCQSxJQUFJQSxDQUFDQTtZQUM1Q0Esd0JBQW1CQSxHQUE0QkEsSUFBSUEsQ0FBQ0E7WUFDcERBLHFCQUFnQkEsR0FBeUJBLElBQUlBLENBQUNBO1lBQzlDQSw0QkFBdUJBLEdBQWdDQSxJQUFJQSxDQUFDQTtRQXVReEVBLENBQUNBO1FBNVJpQkQsb0JBQU1BLEdBQXBCQTtZQUNJRSxJQUFJQSxHQUFHQSxHQUFHQSxJQUFJQSxJQUFJQSxFQUFFQSxDQUFDQTtZQUVyQkEsTUFBTUEsQ0FBQ0EsR0FBR0EsQ0FBQ0E7UUFDZkEsQ0FBQ0E7UUFtQk1GLGtDQUFVQSxHQUFqQkEsVUFBa0JBLE9BQWNBO1lBQzVCRyxNQUFNQSxDQUFDQSxjQUFXQSxDQUFDQSxzQkFBc0JBLENBQUNBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBLE9BQU9BLENBQUNBLENBQUNBO1FBQ2xFQSxDQUFDQTtRQUVNSCxrQ0FBVUEsR0FBakJBLFVBQW1CQSxPQUFlQTtZQUM5QkksSUFBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsT0FBT0EsR0FBR0EsY0FBV0EsQ0FBQ0Esc0JBQXNCQSxDQUFDQSxPQUFPQSxDQUFDQSxDQUFDQTtRQUNyRUEsQ0FBQ0E7UUFFTUosbUNBQVdBLEdBQWxCQSxVQUFtQkEsR0FBY0EsRUFBRUEsUUFBZUE7WUFDOUNLLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLGdCQUFnQkEsQ0FBQ0EsR0FBR0EsRUFBRUEsVUFBVUEsQ0FBQ0EsQ0FBQ0E7UUFDbERBLENBQUNBO1FBRU1MLG1DQUFXQSxHQUFsQkEsVUFBbUJBLEdBQWNBLEVBQUVBLFFBQWVBO1lBQzlDTSxJQUFJQSxDQUFDQSxnQkFBZ0JBLENBQUNBLEdBQUdBLEVBQUVBLFVBQVVBLEVBQUVBLFFBQVFBLENBQUNBLENBQUNBO1FBQ3JEQSxDQUFDQTtRQUVNTixzQ0FBY0EsR0FBckJBLFVBQXNCQSxHQUFjQSxFQUFFQSxXQUFrQkE7WUFDcERPLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLGdCQUFnQkEsQ0FBQ0EsR0FBR0EsRUFBRUEsYUFBYUEsQ0FBQ0EsQ0FBQ0E7UUFDckRBLENBQUNBO1FBRU1QLHNDQUFjQSxHQUFyQkEsVUFBc0JBLEdBQWNBLEVBQUVBLFdBQWtCQTtZQUNwRFEsSUFBSUEsQ0FBQ0EsZ0JBQWdCQSxDQUFDQSxHQUFHQSxFQUFFQSxhQUFhQSxFQUFFQSxXQUFXQSxDQUFDQSxDQUFDQTtRQUMzREEsQ0FBQ0E7UUFFTVIsd0NBQWdCQSxHQUF2QkEsVUFBd0JBLEdBQWNBO1lBQ2xDUyxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxjQUFjQSxDQUFDQSxHQUFHQSxFQUFFQSxlQUFlQSxDQUFDQSxDQUFDQTtRQUNyREEsQ0FBQ0E7UUFFTVQsd0NBQWdCQSxHQUF2QkEsVUFBd0JBLEdBQWNBLEVBQUVBLGFBQW9CQTtZQUN4RFUsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsY0FBY0EsQ0FBQ0EsR0FBR0EsRUFBRUEsZUFBZUEsRUFBRUEsYUFBYUEsQ0FBQ0EsQ0FBQ0E7UUFDcEVBLENBQUNBO1FBRU1WLHlDQUFpQkEsR0FBeEJBLFVBQXlCQSxHQUFjQTtZQUNuQ1csTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsY0FBY0EsQ0FBQ0EsR0FBR0EsRUFBRUEsZ0JBQWdCQSxDQUFDQSxDQUFDQTtRQUN0REEsQ0FBQ0E7UUFFTVgseUNBQWlCQSxHQUF4QkEsVUFBeUJBLEdBQWNBLEVBQUVBLGNBQXFCQTtZQUMxRFksTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsY0FBY0EsQ0FBQ0EsR0FBR0EsRUFBRUEsZ0JBQWdCQSxFQUFFQSxjQUFjQSxDQUFDQSxDQUFDQTtRQUN0RUEsQ0FBQ0E7UUFFTVosK0JBQU9BLEdBQWRBLFVBQWVBLEdBQWNBO1lBQ3pCYSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxjQUFjQSxDQUFDQSxHQUFHQSxFQUFFQSxNQUFNQSxDQUFDQSxDQUFDQTtRQUM1Q0EsQ0FBQ0E7UUFFTWIsK0JBQU9BLEdBQWRBLFVBQWVBLEdBQWNBLEVBQUVBLElBQVdBO1lBQ3RDYyxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxjQUFjQSxDQUFDQSxHQUFHQSxFQUFFQSxNQUFNQSxFQUFFQSxJQUFJQSxDQUFDQSxDQUFDQTtRQUNsREEsQ0FBQ0E7UUFFTWQsbUNBQVdBLEdBQWxCQSxVQUFtQkEsR0FBY0E7WUFDN0JlLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLFlBQVlBLENBQUNBLEdBQUdBLEVBQUVBLFVBQVVBLENBQUNBLENBQUNBO1FBQzlDQSxDQUFDQTtRQUVNZixtQ0FBV0EsR0FBbEJBLFVBQW1CQSxHQUFjQSxFQUFFQSxRQUFnQkE7WUFDL0NnQixJQUFJQSxDQUFDQSxZQUFZQSxDQUFDQSxHQUFHQSxFQUFFQSxVQUFVQSxFQUFFQSxRQUFRQSxDQUFDQSxDQUFDQTtRQUNqREEsQ0FBQ0E7UUFFTWhCLDBDQUFrQkEsR0FBekJBLFVBQTBCQSxHQUFjQTtZQUNwQ2lCLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLFlBQVlBLENBQUNBLEdBQUdBLEVBQUVBLGlCQUFpQkEsQ0FBQ0EsQ0FBQ0E7UUFDckRBLENBQUNBO1FBRU1qQiwwQ0FBa0JBLEdBQXpCQSxVQUEwQkEsR0FBY0EsRUFBRUEsZUFBdUJBO1lBQzdEa0IsSUFBSUEsQ0FBQ0EsWUFBWUEsQ0FBQ0EsR0FBR0EsRUFBRUEsaUJBQWlCQSxFQUFFQSxlQUFlQSxDQUFDQSxDQUFDQTtRQUMvREEsQ0FBQ0E7UUFFTWxCLDRCQUFJQSxHQUFYQTtZQUNJbUIsSUFBSUEsS0FHR0EsV0FBUUEsQ0FBQ0EsV0FBV0EsRUFBRUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsT0FBT0EsRUFGdkNBLE9BQU9BLGVBQ1BBLFVBQVVBLGdCQUM2QkEsQ0FBQ0E7WUFFNUNBLElBQUlBLENBQUNBLEtBQUtBLEdBQUdBLElBQUlBLE1BQU1BLENBQUNBLEtBQUtBLEVBQUVBLENBQUNBO1lBRWhDQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxVQUFVQSxHQUFHQSxJQUFJQSxNQUFNQSxDQUFDQSxlQUFlQSxFQUFFQSxDQUFDQTtZQUVyREEsSUFBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsVUFBVUEsR0FBR0EsVUFBVUEsQ0FBQ0E7WUFDMUNBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBLE9BQU9BLENBQUNBLEdBQUdBLENBQUNBLE9BQU9BLENBQUNBLENBQUNBLEVBQUVBLE9BQU9BLENBQUNBLENBQUNBLEVBQUVBLE9BQU9BLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1lBRXhEQSxJQUFJQSxDQUFDQSxZQUFZQSxHQUFHQSxvQkFBaUJBLENBQUNBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLEtBQUtBLEVBQUVBLElBQUlBLENBQUNBLG1CQUFtQkEsRUFBRUEsSUFBSUEsQ0FBQ0EsYUFBYUEsQ0FBQ0EsQ0FBQ0E7WUFDdkdBLElBQUlBLENBQUNBLGNBQWNBLEdBQUdBLHNCQUFtQkEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsS0FBS0EsRUFBRUEsSUFBSUEsQ0FBQ0EsbUJBQW1CQSxFQUFFQSxJQUFJQSxDQUFDQSxhQUFhQSxDQUFDQSxDQUFDQTtZQUMzR0EsSUFBSUEsQ0FBQ0EsV0FBV0EsR0FBR0EsbUJBQWdCQSxDQUFDQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxLQUFLQSxFQUFFQSxJQUFJQSxDQUFDQSxtQkFBbUJBLEVBQUVBLElBQUlBLENBQUNBLGFBQWFBLENBQUNBLENBQUNBO1lBRXJHQSxJQUFJQSxDQUFDQSxlQUFlQSxHQUFHQSx1QkFBb0JBLENBQUNBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLEtBQUtBLEVBQUVBLElBQUlBLENBQUNBLG1CQUFtQkEsRUFBRUEsSUFBSUEsQ0FBQ0EsdUJBQXVCQSxDQUFDQSxDQUFDQTtZQUN2SEEsSUFBSUEsQ0FBQ0EsbUJBQW1CQSxHQUFHQSwyQkFBd0JBLENBQUNBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLEtBQUtBLEVBQUVBLElBQUlBLENBQUNBLG1CQUFtQkEsRUFBRUEsSUFBSUEsQ0FBQ0EsMkJBQTJCQSxDQUFDQSxDQUFDQTtZQUNuSUEsSUFBSUEsQ0FBQ0EsZ0JBQWdCQSxHQUFHQSx3QkFBcUJBLENBQUNBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLEtBQUtBLEVBQUVBLElBQUlBLENBQUNBLG1CQUFtQkEsRUFBRUEsSUFBSUEsQ0FBQ0Esd0JBQXdCQSxDQUFDQSxDQUFDQTtZQUMxSEEsSUFBSUEsQ0FBQ0EsdUJBQXVCQSxHQUFHQSwrQkFBNEJBLENBQUNBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLEtBQUtBLEVBQUVBLElBQUlBLENBQUNBLG1CQUFtQkEsRUFBRUEsSUFBSUEsQ0FBQ0EsK0JBQStCQSxDQUFDQSxDQUFDQTtRQUNuSkEsQ0FBQ0E7UUFFTW5CLHNDQUFjQSxHQUFyQkEsVUFBc0JBLFlBQXVCQSxFQUFFQSxJQUFRQTtZQUNuRG9CLElBQUlBLENBQUNBLFlBQVlBLENBQUNBLE9BQU9BLENBQUNBLFlBQVlBLEVBQUVBLElBQUlBLENBQUNBLENBQUNBO1FBQ2xEQSxDQUFDQTtRQUVNcEIsd0NBQWdCQSxHQUF2QkEsVUFBd0JBLFlBQXVCQSxFQUFFQSxJQUFRQTtZQUNyRHFCLElBQUlBLENBQUNBLGNBQWNBLENBQUNBLE9BQU9BLENBQUNBLFlBQVlBLEVBQUVBLElBQUlBLENBQUNBLENBQUNBO1FBQ3BEQSxDQUFDQTtRQUVNckIscUNBQWFBLEdBQXBCQSxVQUFxQkEsWUFBdUJBLEVBQUVBLElBQVFBO1lBQ2xEc0IsSUFBSUEsQ0FBQ0EsV0FBV0EsQ0FBQ0EsT0FBT0EsQ0FBQ0EsWUFBWUEsRUFBRUEsSUFBSUEsQ0FBQ0EsQ0FBQ0E7UUFDakRBLENBQUNBO1FBWU10Qix5Q0FBaUJBLEdBQXhCQSxVQUF5QkEsWUFBdUJBLEVBQUVBLGNBQTZCQTtZQUMzRXVCLElBQUlBLENBQUNBLGVBQWVBLENBQUNBLGFBQWFBLENBQUNBLFlBQVlBLEVBQUVBLGNBQWNBLENBQUNBLENBQUNBO1FBQ3JFQSxDQUFDQTtRQUVNdkIsNENBQW9CQSxHQUEzQkEsVUFBNEJBLFlBQXVCQTtZQUMvQ3dCLElBQUlBLENBQUNBLGVBQWVBLENBQUNBLGdCQUFnQkEsQ0FBQ0EsWUFBWUEsQ0FBQ0EsQ0FBQ0E7UUFDeERBLENBQUNBO1FBRU14Qiw2Q0FBcUJBLEdBQTVCQSxVQUE2QkEsWUFBdUJBLEVBQUVBLGtCQUFxQ0E7WUFDdkZ5QixJQUFJQSxDQUFDQSxtQkFBbUJBLENBQUNBLGFBQWFBLENBQUNBLFlBQVlBLEVBQUVBLGtCQUFrQkEsQ0FBQ0EsQ0FBQ0E7UUFDN0VBLENBQUNBO1FBRU16QixnREFBd0JBLEdBQS9CQSxVQUFnQ0EsWUFBdUJBO1lBQ25EMEIsSUFBSUEsQ0FBQ0EsbUJBQW1CQSxDQUFDQSxnQkFBZ0JBLENBQUNBLFlBQVlBLENBQUNBLENBQUNBO1FBQzVEQSxDQUFDQTtRQUVNMUIsMENBQWtCQSxHQUF6QkEsVUFBMEJBLFlBQXVCQSxFQUFFQSxlQUErQkE7WUFDOUUyQixJQUFJQSxDQUFDQSxnQkFBZ0JBLENBQUNBLGFBQWFBLENBQUNBLFlBQVlBLEVBQUVBLGVBQWVBLENBQUNBLENBQUNBO1FBQ3ZFQSxDQUFDQTtRQUVNM0IsNkNBQXFCQSxHQUE1QkEsVUFBNkJBLFlBQXVCQTtZQUNoRDRCLElBQUlBLENBQUNBLGdCQUFnQkEsQ0FBQ0EsZ0JBQWdCQSxDQUFDQSxZQUFZQSxDQUFDQSxDQUFDQTtRQUN6REEsQ0FBQ0E7UUFFTTVCLGlEQUF5QkEsR0FBaENBLFVBQWlDQSxZQUF1QkEsRUFBRUEsc0JBQTZDQTtZQUNuRzZCLElBQUlBLENBQUNBLHVCQUF1QkEsQ0FBQ0EsYUFBYUEsQ0FBQ0EsWUFBWUEsRUFBRUEsc0JBQXNCQSxDQUFDQSxDQUFDQTtRQUNyRkEsQ0FBQ0E7UUFFTTdCLG9EQUE0QkEsR0FBbkNBLFVBQW9DQSxzQkFBNkNBO1lBQzdFOEIsSUFBSUEsQ0FBQ0EsdUJBQXVCQSxDQUFDQSxnQkFBZ0JBLENBQUNBLHNCQUFzQkEsQ0FBQ0EsQ0FBQ0E7UUFDMUVBLENBQUNBO1FBRU05Qix3Q0FBZ0JBLEdBQXZCQSxVQUF3QkEsR0FBY0E7WUFDbEMrQixJQUFJQSxRQUFRQSxHQUFHQSxJQUFJQSxDQUFDQSxZQUFZQSxDQUFDQSxHQUFHQSxDQUFDQSxFQUNqQ0EsSUFBSUEsR0FBR0EsSUFBSUEsQ0FBQ0EsbUJBQW1CQSxDQUFDQSxvQkFBb0JBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO1lBRTlEQSxFQUFFQSxDQUFBQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFBQSxDQUFDQTtnQkFDTEEsSUFBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7WUFDNUJBLENBQUNBO1lBRURBLElBQUlBLENBQUNBLG1CQUFtQkEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7WUFFckNBLElBQUlBLENBQUNBLGFBQWFBLENBQUNBLE1BQU1BLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO1FBQ25DQSxDQUFDQTtRQUVNL0IseUNBQWlCQSxHQUF4QkEsVUFBeUJBLEdBQWNBO1lBQ25DZ0MsSUFBSUEsSUFBSUEsR0FBR0EsSUFBSUEsQ0FBQ0E7WUFFaEJBLElBQUlBLENBQUNBLGVBQWVBLENBQUNBLGdCQUFnQkEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7WUFDM0NBLElBQUlBLENBQUNBLG1CQUFtQkEsQ0FBQ0EsZ0JBQWdCQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtZQUMvQ0EsSUFBSUEsQ0FBQ0EsZ0JBQWdCQSxDQUFDQSxnQkFBZ0JBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO1lBRTVDQSxJQUFJQSxDQUFDQSwrQkFBK0JBO2lCQUMvQkEsTUFBTUEsQ0FBQ0EsVUFBQ0EsRUFBY0E7b0JBQWJBLFlBQVlBO2dCQUNsQkEsTUFBTUEsQ0FBQ0EsYUFBVUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsWUFBWUEsRUFBRUEsR0FBR0EsQ0FBQ0EsQ0FBQ0E7WUFDakRBLENBQUNBLENBQUNBO2lCQUNEQSxPQUFPQSxDQUFDQSxVQUFDQSxFQUF3QkE7b0JBQXZCQSxzQkFBc0JBO2dCQUM3QkEsSUFBSUEsQ0FBQ0EsdUJBQXVCQSxDQUFDQSxnQkFBZ0JBLENBQUNBLHNCQUFzQkEsQ0FBQ0EsQ0FBQUE7WUFDekVBLENBQUNBLENBQUNBLENBQUNBO1FBQ1hBLENBQUNBO1FBRU1oQyw4QkFBTUEsR0FBYkEsVUFBY0EsV0FBa0JBO1lBQzVCaUMsSUFBSUEsQ0FBQ0EsbUJBQW1CQSxDQUFDQSx1QkFBdUJBLEVBQUVBLENBQUNBO1lBRW5EQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxJQUFJQSxDQUFDQSxXQUFRQSxDQUFDQSxXQUFXQSxFQUFFQSxDQUFDQSxZQUFZQSxFQUFFQSxHQUFHQSxJQUFJQSxDQUFDQSxDQUFDQTtZQUU5REEsSUFBSUEsQ0FBQ0EsbUJBQW1CQSxDQUFDQSw2QkFBNkJBLEVBQUVBLENBQUNBO1FBQzdEQSxDQUFDQTtRQUVPakMsb0NBQVlBLEdBQXBCQSxVQUFxQkEsR0FBY0E7WUFDL0JrQyxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxhQUFhQSxDQUFDQSx3QkFBd0JBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO1FBQzVEQSxDQUFDQTtRQUVPbEMsc0NBQWNBLEdBQXRCQSxVQUF1QkEsR0FBY0EsRUFBRUEsUUFBZUE7WUFDbERtQyxJQUFJQSxJQUFJQSxHQUFHQSxJQUFJQSxDQUFDQSxtQkFBbUJBLENBQUNBLG9CQUFvQkEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7WUFFOURBLEVBQUVBLENBQUFBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLENBQUFBLENBQUNBO2dCQUNOQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQTtZQUNoQkEsQ0FBQ0E7WUFFREEsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsQ0FBQ0E7UUFDMUJBLENBQUNBO1FBRU9uQyxzQ0FBY0EsR0FBdEJBLFVBQXVCQSxHQUFjQSxFQUFFQSxRQUFlQSxFQUFFQSxJQUFXQTtZQUMvRG9DLElBQUlBLElBQUlBLEdBQUdBLElBQUlBLENBQUNBLG1CQUFtQkEsQ0FBQ0Esb0JBQW9CQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtZQUU5REEsRUFBRUEsQ0FBQUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQUEsQ0FBQ0E7Z0JBQ05BLE1BQU1BLENBQUNBLElBQUlBLENBQUNBO1lBQ2hCQSxDQUFDQTtZQUVEQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQTtRQUMxQkEsQ0FBQ0E7UUFFT3BDLG9DQUFZQSxHQUFwQkEsVUFBcUJBLEdBQWNBLEVBQUVBLFFBQWVBO1lBQ2hEcUMsSUFBSUEsSUFBSUEsR0FBR0EsSUFBSUEsQ0FBQ0EsbUJBQW1CQSxDQUFDQSxvQkFBb0JBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO1lBRTlEQSxFQUFFQSxDQUFBQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFBQSxDQUFDQTtnQkFDTkEsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0E7WUFDaEJBLENBQUNBO1lBRURBLE1BQU1BLENBQUNBLGNBQVdBLENBQUNBLHNCQUFzQkEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDOURBLENBQUNBO1FBRU9yQyxvQ0FBWUEsR0FBcEJBLFVBQXFCQSxHQUFjQSxFQUFFQSxRQUFlQSxFQUFFQSxJQUFZQTtZQUM5RHNDLElBQUlBLElBQUlBLEdBQUdBLElBQUlBLENBQUNBLG1CQUFtQkEsQ0FBQ0Esb0JBQW9CQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtZQUU5REEsRUFBRUEsQ0FBQUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQUEsQ0FBQ0E7Z0JBQ05BLE1BQU1BLENBQUNBLElBQUlBLENBQUNBO1lBQ2hCQSxDQUFDQTtZQUVEQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxHQUFHQSxjQUFXQSxDQUFDQSxzQkFBc0JBLENBQUNBLElBQUlBLENBQUNBLENBQUNBO1FBQzlEQSxDQUFDQTtRQWtCT3RDLHdDQUFnQkEsR0FoQnhCQSxVQWdCeUJBLEdBQWNBLEVBQUVBLFFBQWVBO1lBQ3BEdUMsSUFBSUEsTUFBTUEsR0FBR0EsSUFBSUEsRUFDYkEsZUFBZUEsR0FBR0EsSUFBSUEsQ0FBQ0EsWUFBWUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7WUFFN0NBLEVBQUVBLENBQUFBLENBQUNBLENBQUNBLGVBQWVBLENBQUNBLENBQUFBLENBQUNBO2dCQUNqQkEsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0E7WUFDaEJBLENBQUNBO1lBRURBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLGFBQWFBLENBQUNBLHNCQUFzQkEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsS0FBS0EsRUFBRUEsZUFBZUEsRUFBRUEsUUFBUUEsQ0FBQ0EsQ0FBQ0E7UUFDNUZBLENBQUNBO1FBRU92Qyx3Q0FBZ0JBLEdBQXhCQSxVQUF5QkEsR0FBY0EsRUFBRUEsUUFBZUEsRUFBRUEsSUFBV0E7WUFDakV3QyxJQUFJQSxLQUFLQSxHQUFHQSxJQUFJQSxDQUFDQSxLQUFLQSxFQUNsQkEsZUFBZUEsR0FBR0EsSUFBSUEsQ0FBQ0EsWUFBWUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7WUFFN0NBLEVBQUVBLENBQUFBLENBQUNBLENBQUNBLGVBQWVBLENBQUNBLENBQUFBLENBQUNBO2dCQUNqQkEsTUFBR0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsNkNBQTZDQSxDQUFDQSxDQUFDQTtnQkFFeERBLE1BQU1BLENBQUNBO1lBQ1hBLENBQUNBO1lBRURBLElBQUlBLENBQUNBLGFBQWFBLENBQUNBLHNCQUFzQkEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsS0FBS0EsRUFBRUEsZUFBZUEsRUFBRUEsUUFBUUEsRUFBRUEsSUFBSUEsQ0FBQ0EsQ0FBQ0E7UUFDM0ZBLENBQUNBO1FBdENEeEM7WUFBQ0EsVUFBT0EsQ0FBQ0EsVUFBU0EsR0FBY0EsRUFBRUEsUUFBZUE7Z0JBQzdDLElBQUksU0FBUyxHQUFHLEVBQUUsRUFDZCxTQUFTLEdBQUcsSUFBSSxFQUNoQixlQUFlLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFFN0MsRUFBRSxDQUFBLENBQUMsQ0FBQyxlQUFlLENBQUMsQ0FBQSxDQUFDO29CQUNqQixNQUFNLENBQUMsSUFBSSxDQUFDO2dCQUNoQixDQUFDO2dCQUVELFNBQVMsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsZUFBZSxDQUFDLENBQUM7Z0JBRWhGLFNBQVMsR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3pCLEdBQUcsQ0FBQSxDQUFhLFVBQVMsRUFBckIscUJBQVEsRUFBUixJQUFxQixDQUFDO29CQUF0QixJQUFJLElBQUksR0FBSSxTQUFTLElBQWI7b0JBQ1IsU0FBTSxDQUFDLElBQUksS0FBSyxTQUFTLEVBQUUsTUFBRyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsK0RBQStELEVBQUUsYUFBYSxDQUFDLENBQUMsQ0FBQztpQkFDcEk7WUFDTCxDQUFDLENBQUNBO1dBQ01BLDJDQUFnQkEsUUFTdkJBO1FBY0xBLG9CQUFDQTtJQUFEQSxDQTdSQWgzQyxBQTZSQ2czQyxJQUFBaDNDO0lBN1JZQSxnQkFBYUEsZ0JBNlJ6QkEsQ0FBQUE7QUFDTEEsQ0FBQ0EsRUEvUk0sRUFBRSxLQUFGLEVBQUUsUUErUlI7QUMvUkQsSUFBTyxFQUFFLENBMEhSO0FBMUhELFdBQU8sRUFBRSxFQUFDLENBQUM7SUFDUEE7UUFDSXk1QyxvQkFBWUEsS0FBa0JBLEVBQUVBLGtCQUEyQ0EsRUFBRUEsWUFBK0JBO1lBTWxHQyxVQUFLQSxHQUFnQkEsSUFBSUEsQ0FBQ0E7WUFDMUJBLGlCQUFZQSxHQUFzQkEsSUFBSUEsQ0FBQ0E7WUFDdkNBLG1CQUFjQSxHQUE0QkEsSUFBSUEsQ0FBQ0E7WUFQckRBLElBQUlBLENBQUNBLEtBQUtBLEdBQUdBLEtBQUtBLENBQUNBO1lBQ25CQSxJQUFJQSxDQUFDQSxjQUFjQSxHQUFHQSxrQkFBa0JBLENBQUNBO1lBQ3pDQSxJQUFJQSxDQUFDQSxZQUFZQSxHQUFHQSxZQUFZQSxDQUFDQTtRQUNyQ0EsQ0FBQ0E7UUFNTUQsNEJBQU9BLEdBQWRBLFVBQWVBLFlBQXVCQSxFQUFFQSxJQUFRQTtZQUM1Q0UsSUFBSUEsSUFBSUEsR0FBR0EsSUFBSUEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7WUFFakNBLEVBQUVBLENBQUFBLENBQUNBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLFFBQVFBLEVBQUVBLEdBQUdBLENBQUNBLENBQUNBLENBQUFBLENBQUNBO2dCQUM3QkEsSUFBSUEsQ0FBQ0EsYUFBYUEsQ0FBQ0EsWUFBWUEsRUFBRUEsSUFBSUEsQ0FBQ0EsUUFBUUEsRUFBRUEsSUFBSUEsQ0FBQ0EsQ0FBQ0E7WUFDMURBLENBQUNBO1lBQ0RBLElBQUlBLENBQUFBLENBQUNBO2dCQUNEQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxJQUFJQSxDQUFDQSxZQUFZQSxDQUFDQSxZQUFZQSxDQUFDQSxZQUFZQSxDQUFXQSxXQUFRQSxDQUFDQSxDQUFDQSxLQUFLQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUMxRkEsQ0FBQ0E7WUFFREEsSUFBSUEsQ0FBQ0EsYUFBYUEsQ0FBQ0EsSUFBSUEsRUFBRUEsSUFBSUEsQ0FBQ0EsQ0FBQ0E7WUFFL0JBLElBQUlBLENBQUNBLFFBQVFBLEdBQUdBLElBQUlBLENBQUNBLGVBQWVBLENBQUNBLFlBQVlBLEVBQUVBLElBQUlBLENBQUNBLFFBQVFBLEVBQUVBLElBQUlBLENBQUNBLFdBQVdBLENBQUNBLENBQUNBO1lBQ3BGQSxJQUFJQSxDQUFDQSxRQUFRQSxHQUFHQSxjQUFXQSxDQUFDQSxzQkFBc0JBLENBQUNBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLENBQUNBO1lBQ2xFQSxJQUFJQSxDQUFDQSxVQUFVQSxHQUFHQSxjQUFXQSxDQUFDQSx5QkFBeUJBLENBQUNBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLENBQUNBO1lBRXZFQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxPQUFPQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtZQUl6QkEsSUFBSUEsQ0FBQ0EsY0FBY0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsWUFBWUEsRUFBRUEsSUFBSUEsQ0FBQ0EsQ0FBQ0E7WUFFNUNBLElBQUlBLENBQUNBLGlCQUFpQkEsQ0FBQ0EsSUFBSUEsRUFBRUEsSUFBSUEsQ0FBQ0EsZ0JBQWdCQSxFQUFFQSxJQUFJQSxDQUFDQSxTQUFTQSxFQUFFQSxJQUFJQSxDQUFDQSxjQUFjQSxDQUFDQSxDQUFDQTtZQUV6RkEsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0E7UUFDaEJBLENBQUNBO1FBS1NGLGtDQUFhQSxHQUR2QkEsVUFDd0JBLElBQWdCQSxFQUFFQSxJQUFRQTtRQUNsREcsQ0FBQ0E7UUFFT0gsaUNBQVlBLEdBQXBCQSxVQUFxQkEsS0FBV0E7WUFDNUJJLElBQUlBLFdBQVdBLEdBQUdBLElBQUlBLENBQUNBO1lBRXZCQSxFQUFFQSxDQUFDQSxDQUFDQSxLQUFLQSxZQUFZQSxZQUFTQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFDN0JBLFdBQVdBLEdBQUdBLElBQUlBLE1BQU1BLENBQUNBLEdBQUdBLENBQUNBLGNBQVdBLENBQUNBLHNCQUFzQkEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsV0FBV0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDeEZBLENBQUNBO1lBQ0RBLElBQUlBLENBQUNBLEVBQUVBLENBQUNBLENBQUNBLEtBQUtBLFlBQVlBLGNBQVdBLENBQUNBLENBQUNBLENBQUNBO2dCQUNwQ0EsV0FBV0EsR0FBR0EsSUFBSUEsTUFBTUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0E7WUFDbERBLENBQUNBO1lBRURBLE1BQU1BLENBQUNBLFdBQVdBLENBQUNBO1FBQ3ZCQSxDQUFDQTtRQUVPSixzQ0FBaUJBLEdBQXpCQSxVQUEwQkEsVUFBc0JBLEVBQUVBLGdCQUFtREEsRUFBRUEsU0FBNENBLEVBQUVBLGNBQWlEQTtZQUNsTUssSUFBSUEsSUFBSUEsR0FBR0EsSUFBSUEsQ0FBQ0E7WUFFaEJBLFVBQVVBLENBQUNBLGdCQUFnQkEsQ0FBQ0EsU0FBU0EsRUFBRUEsVUFBQ0EsQ0FBQ0E7Z0JBQ3JDQSxJQUFJQSxZQUFZQSxHQUFHQSxJQUFJQSxDQUFDQSxjQUFjQSxDQUFDQSxvQkFBb0JBLENBQUNBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLEVBQy9EQSxhQUFhQSxHQUFHQSxJQUFJQSxDQUFDQTtnQkFFekJBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBLFlBQVlBLENBQUNBLENBQUNBLENBQUNBO29CQUNoQkEsTUFBTUEsQ0FBQ0E7Z0JBQ1hBLENBQUNBO2dCQUVEQSxhQUFhQSxHQUFHQSxZQUFZQSxDQUFDQTtnQkFFN0JBLGdCQUFnQkEsQ0FBQ0EsYUFBYUEsQ0FBQ0EsQ0FBQ0E7Z0JBQ2hDQSxTQUFTQSxDQUFDQSxhQUFhQSxDQUFDQSxDQUFDQTtnQkFDekJBLGNBQWNBLENBQUNBLGFBQWFBLENBQUNBLENBQUNBO1lBQ2xDQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUNQQSxDQUFDQTtRQUVPTCxvQ0FBZUEsR0FBdkJBLFVBQXdCQSxZQUF1QkEsRUFBRUEsUUFBZUEsRUFBRUEsV0FBa0JBO1lBQ2hGTSxJQUFJQSxRQUFRQSxHQUFHQSxJQUFJQSxFQUNmQSxlQUFlQSxHQUFHQSxJQUFJQSxDQUFDQTtZQUUzQkEsUUFBUUEsR0FBR0EsSUFBSUEsQ0FBQ0EsWUFBWUEsQ0FBQ0EsWUFBWUEsQ0FBQ0EsQ0FBQ0E7WUFFM0NBLEVBQUVBLENBQUNBLENBQUNBLFFBQVFBLENBQUNBLENBQUNBLENBQUNBO2dCQUNYQSxNQUFNQSxDQUFDQSxRQUFRQSxDQUFDQTtZQUNwQkEsQ0FBQ0E7WUFFREEsZUFBZUEsR0FBR0EsSUFBSUEsTUFBTUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsQ0FBQ0E7WUFFbERBLElBQUlBLENBQUNBLFlBQVlBLENBQUNBLFlBQVlBLEVBQUVBLGVBQWVBLEVBQUVBLFFBQVFBLEVBQUVBLFdBQVdBLENBQUNBLENBQUNBO1lBRXhFQSxNQUFNQSxDQUFDQSxlQUFlQSxDQUFDQTtRQUMzQkEsQ0FBQ0E7UUFFT04saUNBQVlBLEdBQXBCQSxVQUFxQkEsR0FBY0E7WUFDL0JPLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLFlBQVlBLENBQUNBLHdCQUF3QkEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7UUFDM0RBLENBQUNBO1FBRU9QLGlDQUFZQSxHQUFwQkEsVUFBcUJBLFlBQXVCQSxFQUFFQSxlQUErQkEsRUFBRUEsUUFBZUEsRUFBRUEsV0FBa0JBO1lBQzlHUSxJQUFJQSxDQUFDQSxZQUFZQSxDQUFDQSxHQUFHQSxDQUFDQSxZQUFZQSxFQUFFQSxlQUFlQSxDQUFDQSxDQUFDQTtZQUNyREEsSUFBSUEsQ0FBQ0EsWUFBWUEsQ0FBQ0Esa0JBQWtCQSxDQUFDQSxJQUFJQSxDQUFDQSxLQUFLQSxFQUFFQSxlQUFlQSxFQUFFQSxRQUFRQSxFQUFFQSxXQUFXQSxDQUFDQSxDQUFDQTtRQUM3RkEsQ0FBQ0E7UUFRT1Isa0NBQWFBLEdBTnJCQSxVQU1zQkEsWUFBdUJBLEVBQUVBLFFBQW9DQSxFQUFFQSxJQUFnQkE7WUFOckdTLGlCQWlCQ0E7WUFWR0EsSUFBSUEsUUFBUUEsR0FBR0EsWUFBWUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsUUFBUUEsRUFDMUNBLFFBQVFBLEdBQUdBLFlBQVlBLENBQUNBLFNBQVNBLENBQUNBLFFBQVFBLENBQUNBO1lBRS9DQSxRQUFRQSxDQUFDQSxPQUFPQSxDQUFDQSxVQUFDQSxLQUFnQkE7Z0JBQzlCQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUNUQSxLQUFJQSxDQUFDQSxZQUFZQSxDQUFDQSxLQUFLQSxDQUFDQSxZQUFZQSxDQUFXQSxXQUFRQSxDQUFDQSxDQUFDQSxLQUFLQSxDQUFDQSxFQUMvREEsY0FBV0EsQ0FBQ0Esc0JBQXNCQSxDQUFDQSxLQUFLQSxDQUFDQSxTQUFTQSxDQUFDQSxRQUFRQSxDQUFDQSxJQUFJQSxFQUFFQSxDQUFDQSxHQUFHQSxDQUFDQSxRQUFRQSxDQUFDQSxDQUFDQSxFQUNqRkEsY0FBV0EsQ0FBQ0EseUJBQXlCQSxDQUFDQSxLQUFLQSxDQUFDQSxTQUFTQSxDQUFDQSxRQUFRQSxDQUFDQSxJQUFJQSxFQUFFQSxDQUFDQSxHQUFHQSxDQUFDQSxRQUFRQSxDQUFDQSxDQUFDQSxDQUN2RkEsQ0FBQ0E7WUFDTkEsQ0FBQ0EsRUFBRUEsSUFBSUEsQ0FBQ0EsQ0FBQ0E7UUFDYkEsQ0FBQ0E7UUEvRURUO1lBQUNBLFVBQU9BO1dBQ0VBLHFDQUFhQSxRQUN0QkE7UUE0RERBO1lBQUNBLFVBQU9BLENBQUNBLFVBQVVBLFlBQXVCQSxFQUFFQSxRQUFvQ0EsRUFBRUEsSUFBZ0JBO2dCQUM5RixRQUFRLENBQUMsT0FBTyxDQUFDLFVBQUMsS0FBZ0I7b0JBQzlCLFNBQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxXQUFRLENBQUMsRUFBRSxNQUFHLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLG9CQUFvQixDQUFDLENBQUMsQ0FBQztvQkFDeEYsU0FBTSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFXLFdBQVEsQ0FBQyxDQUFDLEtBQUssRUFBRSxNQUFHLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDLENBQUM7Z0JBQzFHLENBQUMsQ0FBQyxDQUFDO1lBQ1AsQ0FBQyxDQUFDQTtXQUNNQSxxQ0FBYUEsUUFXcEJBO1FBQ0xBLGlCQUFDQTtJQUFEQSxDQXhIQXo1QyxBQXdIQ3k1QyxJQUFBejVDO0lBeEhxQkEsYUFBVUEsYUF3SC9CQSxDQUFBQTtBQUNMQSxDQUFDQSxFQTFITSxFQUFFLEtBQUYsRUFBRSxRQTBIUjtBQzFIRCxJQUFPLEVBQUUsQ0FxQ1I7QUFyQ0QsV0FBTyxFQUFFLEVBQUMsQ0FBQztJQUNQQTtRQUF1Q202QyxxQ0FBVUE7UUFBakRBO1lBQXVDQyw4QkFBVUE7UUFtQ2pEQSxDQUFDQTtRQWxDaUJELHdCQUFNQSxHQUFwQkEsVUFBcUJBLEtBQWtCQSxFQUFFQSxrQkFBMkNBLEVBQUVBLFlBQStCQTtZQUNwSEUsSUFBSUEsR0FBR0EsR0FBR0EsSUFBSUEsSUFBSUEsQ0FBQ0EsS0FBS0EsRUFBRUEsa0JBQWtCQSxFQUFFQSxZQUFZQSxDQUFDQSxDQUFDQTtZQUU1REEsTUFBTUEsQ0FBQ0EsR0FBR0EsQ0FBQ0E7UUFDWkEsQ0FBQ0E7UUFFU0Ysc0NBQVVBLEdBQXBCQSxVQUFxQkEsRUFNaEJBO2dCQUxERyxJQUFJQSxZQUNKQSxhQUFhQSxxQkFDYkEsY0FBY0Esc0JBQ2RBLFFBQVFBLGdCQUNSQSxlQUFlQTtZQUVmQSxNQUFNQSxDQUFDQSxJQUFJQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQTtnQkFDbkJBLElBQUlBLEVBQUVBLElBQUlBO2dCQUNWQSxhQUFhQSxFQUFFQSxhQUFhQTtnQkFDNUJBLGNBQWNBLEVBQUVBLGNBQWNBO2dCQUM5QkEsUUFBUUEsRUFBRUEsY0FBV0EsQ0FBQ0Esc0JBQXNCQSxDQUFDQSxRQUFRQSxDQUFDQTtnQkFDdERBLGVBQWVBLEVBQUVBLGNBQVdBLENBQUNBLHNCQUFzQkEsQ0FBQ0EsZUFBZUEsQ0FBQ0E7YUFDdkVBLENBQUNBLENBQUNBO1FBQ1BBLENBQUNBO1FBRVNILHlDQUFhQSxHQUF2QkEsVUFBd0JBLElBQWdCQSxFQUFFQSxFQUlyQ0E7Z0JBSERJLE9BQU9BLGVBQ1BBLEtBQUtBLGFBQ0xBLFFBQVFBO1lBRVJBLEVBQUVBLENBQUFBLENBQUNBLE9BQU9BLElBQUlBLFFBQVFBLENBQUNBLENBQUFBLENBQUNBO2dCQUNwQkEsSUFBSUEsQ0FBQ0EsWUFBWUEsQ0FBQ0EsY0FBV0EsQ0FBQ0Esc0JBQXNCQSxDQUFDQSxPQUFPQSxDQUFDQSxFQUFFQSxjQUFXQSxDQUFDQSxzQkFBc0JBLENBQUNBLFFBQVFBLENBQUNBLENBQUNBLENBQUNBO1lBQ2pIQSxDQUFDQTtZQUNEQSxFQUFFQSxDQUFBQSxDQUFDQSxLQUFLQSxJQUFJQSxRQUFRQSxDQUFDQSxDQUFBQSxDQUFDQTtnQkFDbEJBLElBQUlBLENBQUNBLFVBQVVBLENBQUNBLGNBQVdBLENBQUNBLHNCQUFzQkEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsRUFBRUEsY0FBV0EsQ0FBQ0Esc0JBQXNCQSxDQUFDQSxRQUFRQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUM3R0EsQ0FBQ0E7UUFDTEEsQ0FBQ0E7UUFDTEosd0JBQUNBO0lBQURBLENBbkNBbjZDLEFBbUNDbTZDLEVBbkNzQ242QyxhQUFVQSxFQW1DaERBO0lBbkNZQSxvQkFBaUJBLG9CQW1DN0JBLENBQUFBO0FBQ0xBLENBQUNBLEVBckNNLEVBQUUsS0FBRixFQUFFLFFBcUNSO0FDckNELElBQU8sRUFBRSxDQXNCUjtBQXRCRCxXQUFPLEVBQUUsRUFBQyxDQUFDO0lBQ1BBO1FBQXlDdzZDLHVDQUFVQTtRQUFuREE7WUFBeUNDLDhCQUFVQTtRQW9CbkRBLENBQUNBO1FBbkJpQkQsMEJBQU1BLEdBQXBCQSxVQUFxQkEsS0FBa0JBLEVBQUVBLGtCQUEyQ0EsRUFBRUEsWUFBK0JBO1lBQ2pIRSxJQUFJQSxHQUFHQSxHQUFHQSxJQUFJQSxJQUFJQSxDQUFDQSxLQUFLQSxFQUFFQSxrQkFBa0JBLEVBQUVBLFlBQVlBLENBQUNBLENBQUNBO1lBRTVEQSxNQUFNQSxDQUFDQSxHQUFHQSxDQUFDQTtRQUNmQSxDQUFDQTtRQUVTRix3Q0FBVUEsR0FBcEJBLFVBQXFCQSxFQUloQkE7Z0JBSERHLElBQUlBLFlBQ0pBLFFBQVFBLGdCQUNSQSxlQUFlQTtZQUVmQSxNQUFNQSxDQUFDQSxJQUFJQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQTtnQkFDbkJBLElBQUlBLEVBQUVBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLFNBQVNBO2dCQUUzQkEsSUFBSUEsRUFBRUEsSUFBSUE7Z0JBQ1ZBLFFBQVFBLEVBQUVBLGNBQVdBLENBQUNBLHNCQUFzQkEsQ0FBQ0EsUUFBUUEsQ0FBQ0E7Z0JBQ3REQSxlQUFlQSxFQUFFQSxjQUFXQSxDQUFDQSxzQkFBc0JBLENBQUNBLGVBQWVBLENBQUNBO2FBQ3ZFQSxDQUFDQSxDQUFDQTtRQUNQQSxDQUFDQTtRQUNMSCwwQkFBQ0E7SUFBREEsQ0FwQkF4NkMsQUFvQkN3NkMsRUFwQndDeDZDLGFBQVVBLEVBb0JsREE7SUFwQllBLHNCQUFtQkEsc0JBb0IvQkEsQ0FBQUE7QUFDTEEsQ0FBQ0EsRUF0Qk0sRUFBRSxLQUFGLEVBQUUsUUFzQlI7QUN0QkQsSUFBTyxFQUFFLENBZVI7QUFmRCxXQUFPLEVBQUUsRUFBQyxDQUFDO0lBQ1BBO1FBQXNDNDZDLG9DQUFVQTtRQUFoREE7WUFBc0NDLDhCQUFVQTtRQWFoREEsQ0FBQ0E7UUFaaUJELHVCQUFNQSxHQUFwQkEsVUFBcUJBLEtBQWtCQSxFQUFFQSxrQkFBMkNBLEVBQUVBLFlBQStCQTtZQUNqSEUsSUFBSUEsR0FBR0EsR0FBR0EsSUFBSUEsSUFBSUEsQ0FBQ0EsS0FBS0EsRUFBRUEsa0JBQWtCQSxFQUFFQSxZQUFZQSxDQUFDQSxDQUFDQTtZQUU1REEsTUFBTUEsQ0FBQ0EsR0FBR0EsQ0FBQ0E7UUFDZkEsQ0FBQ0E7UUFFU0YscUNBQVVBLEdBQXBCQSxVQUFxQkEsRUFDaEJBO1lBQ0RHLE1BQU1BLENBQUNBLElBQUlBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBO2dCQUNuQkEsSUFBSUEsRUFBRUEsQ0FBQ0E7YUFDVkEsQ0FBQ0EsQ0FBQ0E7UUFDUEEsQ0FBQ0E7UUFDTEgsdUJBQUNBO0lBQURBLENBYkE1NkMsQUFhQzQ2QyxFQWJxQzU2QyxhQUFVQSxFQWEvQ0E7SUFiWUEsbUJBQWdCQSxtQkFhNUJBLENBQUFBO0FBQ0xBLENBQUNBLEVBZk0sRUFBRSxLQUFGLEVBQUUsUUFlUjtBQ2ZELElBQU8sRUFBRSxDQWtDUjtBQWxDRCxXQUFPLEVBQUUsRUFBQSxDQUFDO0lBQ05BO1FBQ0lnN0MsMEJBQVlBLEtBQWtCQSxFQUFFQSxrQkFBMkNBLEVBQUVBLGtCQUFzQkE7WUFNekZDLFVBQUtBLEdBQWdCQSxJQUFJQSxDQUFDQTtZQUMxQkEsbUJBQWNBLEdBQTRCQSxJQUFJQSxDQUFDQTtZQUMvQ0EsdUJBQWtCQSxHQUFPQSxJQUFJQSxDQUFDQTtZQVBwQ0EsSUFBSUEsQ0FBQ0EsS0FBS0EsR0FBR0EsS0FBS0EsQ0FBQ0E7WUFDbkJBLElBQUlBLENBQUNBLGNBQWNBLEdBQUdBLGtCQUFrQkEsQ0FBQ0E7WUFDekNBLElBQUlBLENBQUNBLGtCQUFrQkEsR0FBR0Esa0JBQWtCQSxDQUFDQTtRQUNqREEsQ0FBQ0E7UUFVTUQsd0NBQWFBLEdBSnBCQSxVQUlxQkEsWUFBdUJBLEVBQUVBLGdCQUFvQkE7WUFDOURFLElBQUlBLFVBQVVBLEdBQUdBLElBQUlBLEVBQ2pCQSxJQUFJQSxHQUFlQSxJQUFJQSxDQUFDQSxjQUFjQSxDQUFDQSxvQkFBb0JBLENBQUNBLFlBQVlBLENBQUNBLENBQUNBO1lBRTlFQSxVQUFVQSxHQUFHQSxJQUFJQSxDQUFDQSxzQkFBc0JBLENBQUNBLElBQUlBLEVBQUVBLGdCQUFnQkEsQ0FBQ0EsQ0FBQ0E7WUFFakVBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBLGFBQWFBLENBQUNBLFVBQVVBLENBQUNBLENBQUNBO1lBRXJDQSxJQUFJQSxDQUFDQSx1QkFBdUJBLENBQUNBLFlBQVlBLEVBQUVBLGdCQUFnQkEsRUFBRUEsVUFBVUEsQ0FBQ0EsQ0FBQ0E7UUFDN0VBLENBQUNBO1FBS1NGLG1DQUFRQSxHQUFsQkEsVUFBbUJBLFNBQW1CQTtZQUNsQ0csTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsY0FBY0EsQ0FBQ0Esb0JBQW9CQSxDQUFDQSxTQUFTQSxDQUFDQSxZQUFZQSxDQUFDQSxDQUFDQTtRQUM1RUEsQ0FBQ0E7UUFwQkRIO1lBQUNBLFVBQU9BLENBQUNBLFVBQVNBLFlBQXVCQSxFQUFFQSxzQkFBNkNBO2dCQUNwRixTQUFNLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxvQkFBb0IsQ0FBQyxZQUFZLENBQUMsS0FBSyxJQUFJLEVBQUUsTUFBRyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDO2dCQUNoSCxTQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxzQkFBc0IsQ0FBQyxhQUFhLENBQUMsRUFBRSxNQUFHLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLENBQUM7WUFDM0csQ0FBQyxDQUFDQTtXQUNLQSwyQ0FBYUEsUUFTbkJBO1FBUUxBLHVCQUFDQTtJQUFEQSxDQWhDQWg3QyxBQWdDQ2c3QyxJQUFBaDdDO0lBaENxQkEsbUJBQWdCQSxtQkFnQ3JDQSxDQUFBQTtBQUNMQSxDQUFDQSxFQWxDTSxFQUFFLEtBQUYsRUFBRSxRQWtDUjtBQ2xDRCxJQUFPLEVBQUUsQ0FnQlI7QUFoQkQsV0FBTyxFQUFFLEVBQUEsQ0FBQztJQUNOQTtRQUFxRG83QywwQ0FBZ0JBO1FBQXJFQTtZQUFxREMsOEJBQWdCQTtRQWNyRUEsQ0FBQ0E7UUFiVUQsaURBQWdCQSxHQUF2QkEsVUFBd0JBLFlBQXVCQTtZQUMzQ0UsSUFBSUEsVUFBVUEsR0FBR0EsSUFBSUEsQ0FBQ0Esa0JBQWtCQSxDQUFDQSwwQkFBMEJBLENBQUNBLFlBQVlBLENBQUNBLENBQUNBO1lBRWxGQSxFQUFFQSxDQUFBQSxDQUFDQSxVQUFVQSxDQUFDQSxDQUFBQSxDQUFDQTtnQkFDWEEsSUFBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsZ0JBQWdCQSxDQUFDQSxVQUFVQSxDQUFDQSxDQUFDQTtZQUM1Q0EsQ0FBQ0E7WUFFREEsSUFBSUEsQ0FBQ0Esa0JBQWtCQSxDQUFDQSxNQUFNQSxDQUFDQSxZQUFZQSxDQUFDQSxDQUFDQTtRQUNqREEsQ0FBQ0E7UUFFU0Ysd0RBQXVCQSxHQUFqQ0EsVUFBa0NBLFlBQXVCQSxFQUFFQSxnQkFBK0JBLEVBQUVBLGdCQUFrQ0E7WUFDMUhHLElBQUlBLENBQUNBLGtCQUFrQkEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsWUFBWUEsRUFBRUEsZ0JBQWdCQSxDQUFDQSxDQUFDQTtRQUNoRUEsQ0FBQ0E7UUFDTEgsNkJBQUNBO0lBQURBLENBZEFwN0MsQUFjQ283QyxFQWRvRHA3QyxtQkFBZ0JBLEVBY3BFQTtJQWRxQkEseUJBQXNCQSx5QkFjM0NBLENBQUFBO0FBQ0xBLENBQUNBLEVBaEJNLEVBQUUsS0FBRixFQUFFLFFBZ0JSO0FDaEJELElBQU8sRUFBRSxDQXlCUjtBQXpCRCxXQUFPLEVBQUUsRUFBQSxDQUFDO0lBQ05BO1FBQTBDdzdDLHdDQUFzQkE7UUFBaEVBO1lBQTBDQyw4QkFBc0JBO1FBdUJoRUEsQ0FBQ0E7UUF0QmlCRCwyQkFBTUEsR0FBcEJBLFVBQXFCQSxLQUFrQkEsRUFBRUEsa0JBQTJDQSxFQUFFQSxrQkFBK0NBO1lBQ3BJRSxJQUFJQSxHQUFHQSxHQUFHQSxJQUFJQSxJQUFJQSxDQUFDQSxLQUFLQSxFQUFFQSxrQkFBa0JBLEVBQUVBLGtCQUFrQkEsQ0FBQ0EsQ0FBQ0E7WUFFbEVBLE1BQU1BLENBQUNBLEdBQUdBLENBQUNBO1FBQ1pBLENBQUNBO1FBS1NGLHFEQUFzQkEsR0FBaENBLFVBQWlDQSxJQUFnQkEsRUFBRUEsY0FBNkJBO1lBQzVFRyxJQUFJQSxVQUFVQSxHQUFxQkEsSUFBSUEsRUFDbkNBLGFBQWFBLEdBQWVBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLGNBQWNBLENBQUNBLGFBQWFBLENBQUNBLENBQUNBO1lBRTVFQSxFQUFFQSxDQUFBQSxDQUFDQSxjQUFjQSxDQUFDQSxRQUFRQSxDQUFDQSxDQUFBQSxDQUFDQTtnQkFDeEJBLFVBQVVBLEdBQUdBLElBQUlBLE1BQU1BLENBQUNBLGNBQWNBLENBQUNBLElBQUlBLEVBQUVBLGFBQWFBLEVBQUVBLGNBQWNBLENBQUNBLFFBQVFBLENBQUNBLENBQUNBO1lBQ3pGQSxDQUFDQTtZQUNEQSxJQUFJQSxDQUFBQSxDQUFDQTtnQkFDREEsVUFBVUEsR0FBR0EsSUFBSUEsTUFBTUEsQ0FBQ0EsY0FBY0EsQ0FBQ0EsSUFBSUEsRUFBRUEsYUFBYUEsQ0FBQ0EsQ0FBQ0E7WUFDaEVBLENBQUNBO1lBRURBLE1BQU1BLENBQUNBLFVBQVVBLENBQUNBO1FBQ3RCQSxDQUFDQTtRQUNMSCwyQkFBQ0E7SUFBREEsQ0F2QkF4N0MsQUF1QkN3N0MsRUF2QnlDeDdDLHlCQUFzQkEsRUF1Qi9EQTtJQXZCWUEsdUJBQW9CQSx1QkF1QmhDQSxDQUFBQTtBQUNMQSxDQUFDQSxFQXpCTSxFQUFFLEtBQUYsRUFBRSxRQXlCUjtBQ3pCRCxJQUFPLEVBQUUsQ0F5Q1I7QUF6Q0QsV0FBTyxFQUFFLEVBQUEsQ0FBQztJQUNOQTtRQUFrRDQ3QyxnREFBZ0JBO1FBQWxFQTtZQUFrREMsOEJBQWdCQTtRQXVDbEVBLENBQUNBO1FBdENpQkQsbUNBQU1BLEdBQXBCQSxVQUFxQkEsS0FBa0JBLEVBQUVBLGtCQUEyQ0EsRUFBRUEsa0JBQXVEQTtZQUM1SUUsSUFBSUEsR0FBR0EsR0FBR0EsSUFBSUEsSUFBSUEsQ0FBQ0EsS0FBS0EsRUFBRUEsa0JBQWtCQSxFQUFFQSxrQkFBa0JBLENBQUNBLENBQUNBO1lBRWxFQSxNQUFNQSxDQUFDQSxHQUFHQSxDQUFDQTtRQUNaQSxDQUFDQTtRQUtNRix1REFBZ0JBLEdBQXZCQSxVQUF3QkEsc0JBQTZDQTtZQUNqRUcsSUFBSUEsVUFBVUEsR0FBR0EsSUFBSUEsQ0FBQ0Esa0JBQWtCQSxDQUFDQSw0Q0FBNENBLENBQUNBLHNCQUFzQkEsQ0FBQ0EsQ0FBQ0E7WUFFOUdBLEVBQUVBLENBQUFBLENBQUNBLFVBQVVBLENBQUNBLENBQUFBLENBQUNBO2dCQUNYQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxnQkFBZ0JBLENBQUNBLFVBQVVBLENBQUNBLENBQUNBO1lBQzVDQSxDQUFDQTtZQUVEQSxJQUFJQSxDQUFDQSxrQkFBa0JBLENBQUNBLE1BQU1BLENBQUNBLHNCQUFzQkEsQ0FBQ0EsQ0FBQ0E7UUFDM0RBLENBQUNBO1FBRVNILDZEQUFzQkEsR0FBaENBLFVBQWlDQSxJQUFnQkEsRUFBRUEsc0JBQTZDQTtZQUM1RkksSUFBSUEsVUFBVUEsR0FBcUJBLElBQUlBLEVBQ25DQSxhQUFhQSxHQUFlQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxzQkFBc0JBLENBQUNBLGFBQWFBLENBQUNBLEVBQy9FQSxNQUFNQSxHQUFHQSxjQUFXQSxDQUFDQSxzQkFBc0JBLENBQUNBLHNCQUFzQkEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsRUFDMUVBLE1BQU1BLEdBQUdBLGNBQVdBLENBQUNBLHNCQUFzQkEsQ0FBQ0Esc0JBQXNCQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQTtZQUUvRUEsRUFBRUEsQ0FBQUEsQ0FBQ0Esc0JBQXNCQSxDQUFDQSxRQUFRQSxDQUFDQSxDQUFBQSxDQUFDQTtnQkFDaENBLFVBQVVBLEdBQUdBLElBQUlBLE1BQU1BLENBQUNBLHNCQUFzQkEsQ0FBQ0EsSUFBSUEsRUFBRUEsTUFBTUEsRUFBRUEsYUFBYUEsRUFBRUEsTUFBTUEsRUFBRUEsc0JBQXNCQSxDQUFDQSxRQUFRQSxDQUFDQSxDQUFDQTtZQUN6SEEsQ0FBQ0E7WUFDREEsSUFBSUEsQ0FBQUEsQ0FBQ0E7Z0JBQ0RBLFVBQVVBLEdBQUdBLElBQUlBLE1BQU1BLENBQUNBLHNCQUFzQkEsQ0FBQ0EsSUFBSUEsRUFBRUEsTUFBTUEsRUFBRUEsYUFBYUEsRUFBRUEsTUFBTUEsQ0FBQ0EsQ0FBQ0E7WUFDeEZBLENBQUNBO1lBRURBLE1BQU1BLENBQUNBLFVBQVVBLENBQUNBO1FBQ3RCQSxDQUFDQTtRQUVTSiw4REFBdUJBLEdBQWpDQSxVQUFrQ0EsWUFBdUJBLEVBQUVBLGdCQUF1Q0EsRUFBRUEsZ0JBQWtDQTtZQUNsSUssSUFBSUEsQ0FBQ0Esa0JBQWtCQSxDQUFDQSxHQUFHQSxDQUFDQSxZQUFZQSxFQUFFQSxnQkFBZ0JBLEVBQUVBLGdCQUFnQkEsQ0FBQ0EsQ0FBQ0E7UUFDbEZBLENBQUNBO1FBQ0xMLG1DQUFDQTtJQUFEQSxDQXZDQTU3QyxBQXVDQzQ3QyxFQXZDaUQ1N0MsbUJBQWdCQSxFQXVDakVBO0lBdkNZQSwrQkFBNEJBLCtCQXVDeENBLENBQUFBO0FBQ0xBLENBQUNBLEVBekNNLEVBQUUsS0FBRixFQUFFLFFBeUNSO0FDekNELElBQU8sRUFBRSxDQW9CUjtBQXBCRCxXQUFPLEVBQUUsRUFBQSxDQUFDO0lBQ05BO1FBQThDazhDLDRDQUFzQkE7UUFBcEVBO1lBQThDQyw4QkFBc0JBO1FBa0JwRUEsQ0FBQ0E7UUFqQmlCRCwrQkFBTUEsR0FBcEJBLFVBQXFCQSxLQUFrQkEsRUFBRUEsa0JBQTJDQSxFQUFFQSxrQkFBbURBO1lBQ3hJRSxJQUFJQSxHQUFHQSxHQUFHQSxJQUFJQSxJQUFJQSxDQUFDQSxLQUFLQSxFQUFFQSxrQkFBa0JBLEVBQUVBLGtCQUFrQkEsQ0FBQ0EsQ0FBQ0E7WUFFbEVBLE1BQU1BLENBQUNBLEdBQUdBLENBQUNBO1FBQ1pBLENBQUNBO1FBS1NGLHlEQUFzQkEsR0FBaENBLFVBQWlDQSxJQUFnQkEsRUFBRUEsa0JBQXFDQTtZQUNwRkcsSUFBSUEsVUFBVUEsR0FBcUJBLElBQUlBLEVBQ25DQSxhQUFhQSxHQUFlQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxrQkFBa0JBLENBQUNBLGFBQWFBLENBQUNBLENBQUNBO1lBRWhGQSxVQUFVQSxHQUFHQSxJQUFJQSxNQUFNQSxDQUFDQSxrQkFBa0JBLENBQUNBLElBQUlBLEVBQUVBLGFBQWFBLEVBQUVBLGtCQUFrQkEsQ0FBQ0EsUUFBUUEsS0FBS0EsSUFBSUEsR0FBR0Esa0JBQWtCQSxDQUFDQSxRQUFRQSxHQUFHQSxLQUFLQSxDQUFDQSxFQUFFQSxrQkFBa0JBLENBQUNBLFFBQVFBLEtBQUtBLElBQUlBLEdBQUdBLGtCQUFrQkEsQ0FBQ0EsUUFBUUEsR0FBR0EsS0FBS0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFFMU5BLE1BQU1BLENBQUNBLFVBQVVBLENBQUNBO1FBQ3RCQSxDQUFDQTtRQUNMSCwrQkFBQ0E7SUFBREEsQ0FsQkFsOEMsQUFrQkNrOEMsRUFsQjZDbDhDLHlCQUFzQkEsRUFrQm5FQTtJQWxCWUEsMkJBQXdCQSwyQkFrQnBDQSxDQUFBQTtBQUNMQSxDQUFDQSxFQXBCTSxFQUFFLEtBQUYsRUFBRSxRQW9CUjtBQ3BCRCxJQUFPLEVBQUUsQ0F5Q1I7QUF6Q0QsV0FBTyxFQUFFLEVBQUEsQ0FBQztJQUNOQTtRQUEyQ3M4Qyx5Q0FBc0JBO1FBQWpFQTtZQUEyQ0MsOEJBQXNCQTtRQXVDakVBLENBQUNBO1FBdENpQkQsNEJBQU1BLEdBQXBCQSxVQUFxQkEsS0FBa0JBLEVBQUVBLGtCQUEyQ0EsRUFBRUEsa0JBQWdEQTtZQUNySUUsSUFBSUEsR0FBR0EsR0FBR0EsSUFBSUEsSUFBSUEsQ0FBQ0EsS0FBS0EsRUFBRUEsa0JBQWtCQSxFQUFFQSxrQkFBa0JBLENBQUNBLENBQUNBO1lBRWxFQSxNQUFNQSxDQUFDQSxHQUFHQSxDQUFDQTtRQUNaQSxDQUFDQTtRQUtTRixzREFBc0JBLEdBQWhDQSxVQUFpQ0EsSUFBZ0JBLEVBQUVBLGVBQStCQTtZQUM5RUcsSUFBSUEsVUFBVUEsR0FBcUJBLElBQUlBLEVBQ25DQSxhQUFhQSxHQUFlQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxlQUFlQSxDQUFDQSxhQUFhQSxDQUFDQSxFQUN4RUEsTUFBTUEsR0FBR0EsY0FBV0EsQ0FBQ0Esc0JBQXNCQSxDQUFDQSxlQUFlQSxDQUFDQSxNQUFNQSxDQUFDQSxFQUNuRUEsS0FBS0EsR0FBR0EsY0FBV0EsQ0FBQ0Esc0JBQXNCQSxDQUFDQSxlQUFlQSxDQUFDQSxLQUFLQSxDQUFDQSxFQUNqRUEsTUFBTUEsR0FBR0EsY0FBV0EsQ0FBQ0Esc0JBQXNCQSxDQUFDQSxlQUFlQSxDQUFDQSxNQUFNQSxDQUFDQSxFQUNuRUEsS0FBS0EsR0FBR0EsY0FBV0EsQ0FBQ0Esc0JBQXNCQSxDQUFDQSxlQUFlQSxDQUFDQSxLQUFLQSxDQUFDQSxFQUNqRUEsT0FBT0EsR0FBT0EsRUFBRUEsQ0FBQ0E7WUFFckJBLEVBQUVBLENBQUFBLENBQUNBLGVBQWVBLENBQUNBLE1BQU1BLENBQUNBLENBQUFBLENBQUNBO2dCQUN2QkEsT0FBT0EsQ0FBQ0EsTUFBTUEsR0FBR0EsTUFBTUEsQ0FBQ0E7WUFDNUJBLENBQUNBO1lBQ0RBLEVBQUVBLENBQUFBLENBQUNBLGVBQWVBLENBQUNBLEtBQUtBLENBQUNBLENBQUFBLENBQUNBO2dCQUN0QkEsT0FBT0EsQ0FBQ0EsS0FBS0EsR0FBR0EsS0FBS0EsQ0FBQ0E7WUFDMUJBLENBQUNBO1lBQ0RBLEVBQUVBLENBQUFBLENBQUNBLGVBQWVBLENBQUNBLE1BQU1BLENBQUNBLENBQUFBLENBQUNBO2dCQUN2QkEsT0FBT0EsQ0FBQ0EsTUFBTUEsR0FBR0EsTUFBTUEsQ0FBQ0E7WUFDNUJBLENBQUNBO1lBQ0RBLEVBQUVBLENBQUFBLENBQUNBLGVBQWVBLENBQUNBLEtBQUtBLENBQUNBLENBQUFBLENBQUNBO2dCQUN0QkEsT0FBT0EsQ0FBQ0EsS0FBS0EsR0FBR0EsS0FBS0EsQ0FBQ0E7WUFDMUJBLENBQUNBO1lBQ0RBLEVBQUVBLENBQUFBLENBQUNBLGVBQWVBLENBQUNBLFFBQVFBLENBQUNBLENBQUFBLENBQUNBO2dCQUN6QkEsT0FBT0EsQ0FBQ0EsUUFBUUEsR0FBR0EsZUFBZUEsQ0FBQ0EsUUFBUUEsQ0FBQ0E7WUFDaERBLENBQUNBO1lBRURBLFVBQVVBLEdBQUdBLElBQUlBLE1BQU1BLENBQUNBLGVBQWVBLENBQUNBLElBQUlBLEVBQUVBLGFBQWFBLEVBQUVBLE9BQU9BLENBQUNBLENBQUNBO1lBRXRFQSxNQUFNQSxDQUFDQSxVQUFVQSxDQUFDQTtRQUN0QkEsQ0FBQ0E7UUFDTEgsNEJBQUNBO0lBQURBLENBdkNBdDhDLEFBdUNDczhDLEVBdkMwQ3Q4Qyx5QkFBc0JBLEVBdUNoRUE7SUF2Q1lBLHdCQUFxQkEsd0JBdUNqQ0EsQ0FBQUE7QUFDTEEsQ0FBQ0EsRUF6Q00sRUFBRSxLQUFGLEVBQUUsUUF5Q1I7QUN6Q0QsSUFBTyxFQUFFLENBNkNSO0FBN0NELFdBQU8sRUFBRSxFQUFDLENBQUM7SUFDUEE7UUFBb0MwOEMseUJBQVNBO1FBQTdDQTtZQUFvQ0MsOEJBQVNBO1lBS2pDQSxvQkFBZUEsR0FBVUEsSUFBSUEsQ0FBQ0E7WUFjOUJBLHFCQUFnQkEsR0FBVUEsSUFBSUEsQ0FBQ0E7WUFnQmhDQSxVQUFLQSxHQUFTQSxRQUFLQSxDQUFDQSxNQUFNQSxDQUFDQSxTQUFTQSxDQUFDQSxDQUFDQTtZQUN0Q0EsZUFBVUEsR0FBV0EsS0FBS0EsQ0FBQ0E7WUFDM0JBLHFCQUFnQkEsR0FBVUEsR0FBR0EsQ0FBQ0E7WUFDOUJBLG9CQUFlQSxHQUFVQSxJQUFJQSxDQUFDQTtZQUM5QkEsZUFBVUEsR0FBVUEsY0FBV0EsQ0FBQ0EsSUFBSUEsQ0FBQ0E7WUFDckNBLG1CQUFjQSxHQUFVQSxDQUFDQSxDQUFDQTtZQUMxQkEsY0FBU0EsR0FBcUJBLElBQUlBLENBQUNBO1lBQ25DQSxzQkFBaUJBLEdBQXdCQSxJQUFJQSxDQUFDQTtRQUN6REEsQ0FBQ0E7UUExQ0dELHNCQUFJQSwyQkFBUUE7aUJBQVpBO2dCQUNJRSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxZQUFZQSxDQUFDQSxTQUFTQSxDQUFDQSxRQUFRQSxDQUFDQTtZQUNoREEsQ0FBQ0E7OztXQUFBRjtRQUdEQSxzQkFBSUEsaUNBQWNBO2lCQUFsQkE7Z0JBQ0lHLElBQUlBLHFCQUFxQkEsR0FBR0EsY0FBV0EsQ0FBQ0EsV0FBV0EsRUFBRUEsQ0FBQ0EscUJBQXFCQSxDQUFDQTtnQkFFNUVBLEVBQUVBLENBQUFBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLGVBQWVBLElBQUlBLElBQUlBLENBQUNBLGVBQWVBLEdBQUdBLHFCQUFxQkEsQ0FBQ0EsQ0FBQUEsQ0FBQ0E7b0JBQ3RFQSxNQUFNQSxDQUFDQSxxQkFBcUJBLENBQUFBO2dCQUNoQ0EsQ0FBQ0E7Z0JBRURBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLGVBQWVBLENBQUNBO1lBQ2hDQSxDQUFDQTtpQkFDREgsVUFBbUJBLGNBQXFCQTtnQkFDcENHLElBQUlBLENBQUNBLGVBQWVBLEdBQUdBLGNBQWNBLENBQUNBO1lBQzFDQSxDQUFDQTs7O1dBSEFIO1FBTURBLHNCQUFJQSxrQ0FBZUE7aUJBQW5CQTtnQkFDSUksSUFBSUEscUJBQXFCQSxHQUFHQSxjQUFXQSxDQUFDQSxXQUFXQSxFQUFFQSxDQUFDQSxxQkFBcUJBLENBQUNBO2dCQUU1RUEsRUFBRUEsQ0FBQUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsZ0JBQWdCQSxJQUFJQSxJQUFJQSxDQUFDQSxnQkFBZ0JBLEdBQUdBLHFCQUFxQkEsQ0FBQ0EsQ0FBQUEsQ0FBQ0E7b0JBQ3hFQSxNQUFNQSxDQUFDQSxxQkFBcUJBLENBQUFBO2dCQUNoQ0EsQ0FBQ0E7Z0JBRURBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLGdCQUFnQkEsQ0FBQ0E7WUFDakNBLENBQUNBO2lCQUNESixVQUFvQkEsZUFBc0JBO2dCQUN0Q0ksSUFBSUEsQ0FBQ0EsZ0JBQWdCQSxHQUFHQSxlQUFlQSxDQUFDQTtZQUM1Q0EsQ0FBQ0E7OztXQUhBSjtRQWVMQSxZQUFDQTtJQUFEQSxDQTNDQTE4QyxBQTJDQzA4QyxFQTNDbUMxOEMsWUFBU0EsRUEyQzVDQTtJQTNDcUJBLFFBQUtBLFFBMkMxQkEsQ0FBQUE7QUFDTEEsQ0FBQ0EsRUE3Q00sRUFBRSxLQUFGLEVBQUUsUUE2Q1I7QUM3Q0QsSUFBTyxFQUFFLENBVVI7QUFWRCxXQUFPLEVBQUUsRUFBQSxDQUFDO0lBQ05BO1FBQWtDKzhDLGdDQUFLQTtRQUF2Q0E7WUFBa0NDLDhCQUFLQTtRQVF2Q0EsQ0FBQ0E7UUFMaUJELG1CQUFNQSxHQUFwQkE7WUFDSUUsSUFBSUEsR0FBR0EsR0FBR0EsSUFBSUEsSUFBSUEsRUFBRUEsQ0FBQ0E7WUFFckJBLE1BQU1BLENBQUNBLEdBQUdBLENBQUNBO1FBQ2ZBLENBQUNBO1FBTmFGLGlCQUFJQSxHQUFVQSxjQUFjQSxDQUFDQTtRQU8vQ0EsbUJBQUNBO0lBQURBLENBUkEvOEMsQUFRQys4QyxFQVJpQy84QyxRQUFLQSxFQVF0Q0E7SUFSWUEsZUFBWUEsZUFReEJBLENBQUFBO0FBQ0xBLENBQUNBLEVBVk0sRUFBRSxLQUFGLEVBQUUsUUFVUjtBQ1ZELElBQU8sRUFBRSxDQWtDUjtBQWxDRCxXQUFPLEVBQUUsRUFBQSxDQUFDO0lBQ05BO1FBQTBDazlDLCtCQUFLQTtRQUEvQ0E7WUFBMENDLDhCQUFLQTtZQUNuQ0EsNEJBQXVCQSxHQUFxQkEsSUFBSUEsQ0FBQ0E7UUErQjdEQSxDQUFDQTtRQTdCVUQsb0NBQWNBLEdBQXJCQTtZQUNJRSxJQUFJQSxJQUFJQSxHQUFHQSxJQUFJQSxDQUFDQTtZQUVoQkEsSUFBSUEsQ0FBQ0EsdUJBQXVCQSxHQUFHQSxlQUFZQSxDQUFDQSxTQUFTQSxDQUFNQSxjQUFXQSxDQUFDQSxzQkFBc0JBLENBQUNBO2lCQUN6RkEsU0FBU0EsQ0FBQ0E7Z0JBQ1BBLElBQUlBLENBQUNBLGlCQUFpQkEsRUFBRUEsQ0FBQ0E7WUFDN0JBLENBQUNBLENBQUNBLENBQUNBO1FBQ1hBLENBQUNBO1FBRU1GLDZCQUFPQSxHQUFkQTtZQUNJRyxJQUFJQSxDQUFDQSxTQUFTQSxJQUFJQSxJQUFJQSxDQUFDQSxTQUFTQSxDQUFDQSxPQUFPQSxFQUFFQSxDQUFDQTtZQUUzQ0EsV0FBUUEsQ0FBQ0EsV0FBV0EsRUFBRUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsMEJBQTBCQSxDQUFDQSxJQUFJQSxDQUFDQSxpQkFBaUJBLENBQUNBLENBQUNBO1lBRWhGQSxJQUFJQSxDQUFDQSx1QkFBdUJBLElBQUlBLElBQUlBLENBQUNBLHVCQUF1QkEsQ0FBQ0EsT0FBT0EsRUFBRUEsQ0FBQ0E7UUFDM0VBLENBQUNBO1FBR1NILHVDQUFpQkEsR0FEM0JBO1lBRUlJLEVBQUVBLENBQUFBLENBQUNBLElBQUlBLENBQUNBLFVBQVVBLENBQUNBLENBQUFBLENBQUNBO2dCQUNoQkEsSUFBSUEsQ0FBQ0EsU0FBU0EsR0FBR0EsSUFBSUEsQ0FBQ0EsZUFBZUEsRUFBRUEsQ0FBQ0E7Z0JBRXhDQSxJQUFJQSxDQUFDQSxpQkFBaUJBLEdBQUdBLElBQUlBLENBQUNBLHVCQUF1QkEsRUFBRUEsQ0FBQ0E7Z0JBQ3hEQSxXQUFRQSxDQUFDQSxXQUFXQSxFQUFFQSxDQUFDQSxLQUFLQSxDQUFDQSx1QkFBdUJBLENBQUNBLElBQUlBLENBQUNBLGlCQUFpQkEsQ0FBQ0EsQ0FBQ0E7WUFDakZBLENBQUNBO1FBQ0xBLENBQUNBO1FBUkRKO1lBQUNBLGVBQVlBLENBQUNBLGVBQWVBLENBQUNBO1dBQ3BCQSwwQ0FBaUJBLFFBTzFCQTtRQUlMQSxrQkFBQ0E7SUFBREEsQ0FoQ0FsOUMsQUFnQ0NrOUMsRUFoQ3lDbDlDLFFBQUtBLEVBZ0M5Q0E7SUFoQ3FCQSxjQUFXQSxjQWdDaENBLENBQUFBO0FBQ0xBLENBQUNBLEVBbENNLEVBQUUsS0FBRixFQUFFLFFBa0NSO0FDbENELElBQU8sRUFBRSxDQTBDUjtBQTFDRCxXQUFPLEVBQUUsRUFBQSxDQUFDO0lBQ05BO1FBQW9DdTlDLGtDQUFXQTtRQUEvQ0E7WUFBb0NDLDhCQUFXQTtZQVluQ0Esc0JBQWlCQSxHQUErQkEsSUFBSUEsQ0FBQ0E7WUFXdERBLGNBQVNBLEdBQVVBLENBQUNBLENBQUNBO1lBRXJCQSxxQkFBZ0JBLEdBQVVBLENBQUNBLElBQUlBLENBQUNBO1lBQ2hDQSxzQkFBaUJBLEdBQVVBLElBQUlBLENBQUNBO1lBQ2hDQSxvQkFBZUEsR0FBVUEsSUFBSUEsQ0FBQ0E7WUFDOUJBLHVCQUFrQkEsR0FBVUEsQ0FBQ0EsSUFBSUEsQ0FBQ0E7UUFZN0NBLENBQUNBO1FBcENpQkQscUJBQU1BLEdBQXBCQTtZQUNJRSxJQUFJQSxHQUFHQSxHQUFHQSxJQUFJQSxJQUFJQSxFQUFFQSxDQUFDQTtZQUVyQkEsR0FBR0EsQ0FBQ0EsY0FBY0EsRUFBRUEsQ0FBQ0E7WUFFckJBLE1BQU1BLENBQUNBLEdBQUdBLENBQUNBO1FBQ2ZBLENBQUNBO1FBR0RGLHNCQUFJQSw0Q0FBZ0JBO2lCQUFwQkE7Z0JBQ0lHLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLGlCQUFpQkEsQ0FBQ0E7WUFDbENBLENBQUNBO2lCQUNESCxVQUdxQkEsZ0JBQW9CQTtnQkFDckNHLElBQUlBLENBQUNBLGlCQUFpQkEsR0FBR0EsSUFBSUEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsTUFBTUEsQ0FBYUEsZ0JBQWdCQSxDQUFDQSxDQUFDQTtZQUNsRkEsQ0FBQ0E7OztXQU5BSDtRQWtCU0Esd0NBQWVBLEdBQXpCQTtZQUNJSSxNQUFNQSxDQUFDQSx1QkFBb0JBLENBQUNBLE1BQU1BLEVBQUVBLENBQUNBO1FBQ3pDQSxDQUFDQTtRQUVTSixnREFBdUJBLEdBQWpDQTtZQUNJSyxNQUFNQSxDQUFDQSxvQ0FBaUNBLENBQUNBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLENBQUNBO1FBQzFEQSxDQUFDQTtRQXRDYUwsbUJBQUlBLEdBQVVBLGdCQUFnQkEsQ0FBQ0E7UUFDL0JBLDhCQUFlQSxHQUFXQSxVQUFPQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxFQUFFQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQTtRQXNDcEVBLHFCQUFDQTtJQUFEQSxDQXhDQXY5QyxBQXdDQ3U5QyxFQXhDbUN2OUMsY0FBV0EsRUF3QzlDQTtJQXhDWUEsaUJBQWNBLGlCQXdDMUJBLENBQUFBO0FBQ0xBLENBQUNBLEVBMUNNLEVBQUUsS0FBRixFQUFFLFFBMENSO0FDMUNELElBQU8sRUFBRSxDQXVGUjtBQXZGRCxXQUFPLEVBQUUsRUFBQSxDQUFDO0lBQ05BO1FBQWdDNjlDLDhCQUFXQTtRQUEzQ0E7WUFBZ0NDLDhCQUFXQTtZQVcvQkEsZ0JBQVdBLEdBQVVBLElBQUlBLENBQUNBO1lBeUIxQkEsc0JBQWlCQSxHQUEwQ0EsSUFBSUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsTUFBTUEsRUFBK0JBLENBQUNBO1lBbUM1R0EsY0FBU0EsR0FBVUEsQ0FBQ0EsQ0FBQ0E7WUFLcEJBLGlCQUFZQSxHQUFlQSxjQUFXQSxDQUFDQSxNQUFNQSxFQUFFQSxDQUFDQTtRQVM1REEsQ0FBQ0E7UUFsRmlCRCxpQkFBTUEsR0FBcEJBO1lBQ0lFLElBQUlBLEdBQUdBLEdBQUdBLElBQUlBLElBQUlBLEVBQUVBLENBQUNBO1lBRXJCQSxHQUFHQSxDQUFDQSxjQUFjQSxFQUFFQSxDQUFDQTtZQUVyQkEsTUFBTUEsQ0FBQ0EsR0FBR0EsQ0FBQ0E7UUFDZkEsQ0FBQ0E7UUFHREYsc0JBQUlBLGtDQUFVQTtpQkFBZEE7Z0JBQ0lHLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLFdBQVdBLENBQUNBO1lBQzVCQSxDQUFDQTtpQkFDREgsVUFBZUEsVUFBaUJBO2dCQUM1QkcsSUFBSUEsQ0FBQ0EsV0FBV0EsR0FBR0EsVUFBVUEsQ0FBQ0E7Z0JBQzlCQSxJQUFJQSxDQUFDQSxZQUFZQSxDQUFDQSxVQUFVQSxHQUFHQSxJQUFJQSxDQUFDQSxXQUFXQSxDQUFDQTtZQUNwREEsQ0FBQ0E7OztXQUpBSDtRQU1EQSxzQkFBSUEsNkJBQUtBO2lCQUFUQTtnQkFDSUksTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsWUFBWUEsQ0FBQ0EsS0FBS0EsQ0FBQ0E7WUFDbkNBLENBQUNBOzs7V0FBQUo7UUFFREEsc0JBQUlBLGdDQUFRQTtpQkFBWkE7Z0JBQ0lLLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLFlBQVlBLENBQUNBLFFBQVFBLENBQUNBO1lBQ3RDQSxDQUFDQTs7O1dBQUFMO1FBRURBLHNCQUFJQSw4QkFBTUE7aUJBQVZBO2dCQUNJTSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxZQUFZQSxDQUFDQSxNQUFNQSxDQUFDQTtZQUNwQ0EsQ0FBQ0E7OztXQUFBTjtRQUVEQSxzQkFBSUEsaUNBQVNBO2lCQUFiQTtnQkFDSU8sTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsWUFBWUEsQ0FBQ0EsU0FBU0EsQ0FBQ0E7WUFDdkNBLENBQUNBOzs7V0FBQVA7UUFHREEsc0JBQUlBLHdDQUFnQkE7aUJBQXBCQTtnQkFDSVEsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsaUJBQWlCQSxDQUFDQTtZQUNsQ0EsQ0FBQ0E7aUJBQ0RSLFVBWXFCQSxnQkFBb0JBO2dCQUNyQ1EsZ0JBQWdCQSxHQU9iQSxnQkFBZ0JBLENBQUNBO2dCQUVwQkEsR0FBR0EsQ0FBQUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsU0FBU0EsSUFBSUEsZ0JBQWdCQSxDQUFDQSxDQUFBQSxDQUFDQTtvQkFDbkNBLEVBQUVBLENBQUFBLENBQUNBLGdCQUFnQkEsQ0FBQ0EsY0FBY0EsQ0FBQ0EsU0FBU0EsQ0FBQ0EsQ0FBQ0EsQ0FBQUEsQ0FBQ0E7d0JBQzNDQSxJQUFJQSxJQUFJQSxHQUFHQSxnQkFBZ0JBLENBQUNBLFNBQVNBLENBQUNBLENBQUNBO3dCQUV2Q0EsSUFBSUEsQ0FBQ0EsaUJBQWlCQSxDQUFDQSxRQUFRQSxDQUFDQSxTQUFTQSxFQUFFQSxJQUFJQSxDQUFDQSxVQUFVQSxDQUFDQSxNQUFNQSxDQUFhQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQTtvQkFDekZBLENBQUNBO2dCQUNMQSxDQUFDQTtZQUNMQSxDQUFDQTs7O1dBOUJBUjtRQXVDU0Esb0NBQWVBLEdBQXpCQTtZQUNJUyxNQUFNQSxDQUFDQSwwQkFBdUJBLENBQUNBLE1BQU1BLEVBQUVBLENBQUNBO1FBQzVDQSxDQUFDQTtRQUVTVCw0Q0FBdUJBLEdBQWpDQTtZQUNJVSxNQUFNQSxDQUFDQSx1Q0FBb0NBLENBQUNBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLENBQUNBO1FBQzdEQSxDQUFDQTtRQW5GYVYsZUFBSUEsR0FBVUEsWUFBWUEsQ0FBQ0E7UUFvRjdDQSxpQkFBQ0E7SUFBREEsQ0FyRkE3OUMsQUFxRkM2OUMsRUFyRitCNzlDLGNBQVdBLEVBcUYxQ0E7SUFyRllBLGFBQVVBLGFBcUZ0QkEsQ0FBQUE7QUFDTEEsQ0FBQ0EsRUF2Rk0sRUFBRSxLQUFGLEVBQUUsUUF1RlI7QUN2RkQsSUFBTyxFQUFFLENBeUdSO0FBekdELFdBQU8sRUFBRSxFQUFDLENBQUM7SUFDUEE7UUFBQXcrQztZQVdZQyxXQUFNQSxHQUFVQSxJQUFJQSxDQUFDQTtZQUtyQkEsWUFBT0EsR0FBVUEsSUFBSUEsQ0FBQ0E7WUFLdEJBLGVBQVVBLEdBQVVBLElBQUlBLENBQUNBO1lBS3pCQSxnQkFBV0EsR0FBVUEsQ0FBQ0EsQ0FBQ0E7UUE2RW5DQSxDQUFDQTtRQXRHaUJELGtCQUFNQSxHQUFwQkE7WUFDSUUsSUFBSUEsR0FBR0EsR0FBR0EsSUFBSUEsSUFBSUEsRUFBRUEsQ0FBQ0E7WUFFckJBLE1BQU1BLENBQUNBLEdBQUdBLENBQUNBO1FBQ2ZBLENBQUNBO1FBRURGLHNCQUFJQSxpQ0FBUUE7aUJBQVpBO2dCQUNJRyxNQUFNQSxDQUFDQSxHQUFHQSxDQUFDQTtZQUNmQSxDQUFDQTs7O1dBQUFIO1FBR0RBLHNCQUFJQSw4QkFBS0E7aUJBQVRBO2dCQUNJSSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQTtZQUN2QkEsQ0FBQ0E7OztXQUFBSjtRQUdEQSxzQkFBSUEsK0JBQU1BO2lCQUFWQTtnQkFDSUssTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsT0FBT0EsQ0FBQ0E7WUFDeEJBLENBQUNBOzs7V0FBQUw7UUFHREEsc0JBQUlBLGtDQUFTQTtpQkFBYkE7Z0JBQ0lNLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLFVBQVVBLENBQUNBO1lBQzNCQSxDQUFDQTs7O1dBQUFOO1FBR0RBLHNCQUFJQSxtQ0FBVUE7aUJBQWRBO2dCQUNJTyxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxXQUFXQSxDQUFDQTtZQUM1QkEsQ0FBQ0E7aUJBQ0RQLFVBQWVBLFVBQWlCQTtnQkFDNUJPLElBQUlBLENBQUNBLFdBQVdBLEdBQUdBLFVBQVVBLENBQUNBO2dCQUU5QkEsSUFBSUEsQ0FBQ0EsZUFBZUEsRUFBRUEsQ0FBQ0E7WUFDM0JBLENBQUNBOzs7V0FMQVA7UUFPTUEscUNBQWVBLEdBQXRCQTtZQUNJUSxNQUFNQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxXQUFXQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFDdkJBLEtBQUtBLENBQUNBO29CQUNGQSxJQUFJQSxDQUFDQSxNQUFNQSxHQUFHQSxDQUFDQSxDQUFDQTtvQkFDaEJBLElBQUlBLENBQUNBLE9BQU9BLEdBQUdBLEdBQUdBLENBQUNBO29CQUNuQkEsSUFBSUEsQ0FBQ0EsVUFBVUEsR0FBR0EsR0FBR0EsQ0FBQ0E7b0JBQ3RCQSxLQUFLQSxDQUFDQTtnQkFDVkEsS0FBS0EsQ0FBQ0E7b0JBQ0ZBLElBQUlBLENBQUNBLE1BQU1BLEdBQUdBLEVBQUVBLENBQUNBO29CQUNqQkEsSUFBSUEsQ0FBQ0EsT0FBT0EsR0FBR0EsSUFBSUEsQ0FBQ0E7b0JBQ3BCQSxJQUFJQSxDQUFDQSxVQUFVQSxHQUFHQSxJQUFJQSxDQUFDQTtvQkFDdkJBLEtBQUtBLENBQUNBO2dCQUNWQSxLQUFLQSxDQUFDQTtvQkFDRkEsSUFBSUEsQ0FBQ0EsTUFBTUEsR0FBR0EsRUFBRUEsQ0FBQ0E7b0JBQ2pCQSxJQUFJQSxDQUFDQSxPQUFPQSxHQUFHQSxJQUFJQSxDQUFDQTtvQkFDcEJBLElBQUlBLENBQUNBLFVBQVVBLEdBQUdBLElBQUlBLENBQUNBO29CQUN2QkEsS0FBS0EsQ0FBQ0E7Z0JBQ1ZBLEtBQUtBLENBQUNBO29CQUNGQSxJQUFJQSxDQUFDQSxNQUFNQSxHQUFHQSxFQUFFQSxDQUFDQTtvQkFDakJBLElBQUlBLENBQUNBLE9BQU9BLEdBQUdBLElBQUlBLENBQUNBO29CQUNwQkEsSUFBSUEsQ0FBQ0EsVUFBVUEsR0FBR0EsSUFBSUEsQ0FBQ0E7b0JBQ3ZCQSxLQUFLQSxDQUFDQTtnQkFDVkEsS0FBS0EsQ0FBQ0E7b0JBQ0ZBLElBQUlBLENBQUNBLE1BQU1BLEdBQUdBLEVBQUVBLENBQUNBO29CQUNqQkEsSUFBSUEsQ0FBQ0EsT0FBT0EsR0FBR0EsSUFBSUEsQ0FBQ0E7b0JBQ3BCQSxJQUFJQSxDQUFDQSxVQUFVQSxHQUFHQSxLQUFLQSxDQUFDQTtvQkFDeEJBLEtBQUtBLENBQUNBO2dCQUNWQSxLQUFLQSxDQUFDQTtvQkFDRkEsSUFBSUEsQ0FBQ0EsTUFBTUEsR0FBR0EsRUFBRUEsQ0FBQ0E7b0JBQ2pCQSxJQUFJQSxDQUFDQSxPQUFPQSxHQUFHQSxJQUFJQSxDQUFDQTtvQkFDcEJBLElBQUlBLENBQUNBLFVBQVVBLEdBQUdBLEtBQUtBLENBQUNBO29CQUN4QkEsS0FBS0EsQ0FBQ0E7Z0JBQ1ZBLEtBQUtBLENBQUNBO29CQUNGQSxJQUFJQSxDQUFDQSxNQUFNQSxHQUFHQSxHQUFHQSxDQUFDQTtvQkFDbEJBLElBQUlBLENBQUNBLE9BQU9BLEdBQUdBLEtBQUtBLENBQUNBO29CQUNyQkEsSUFBSUEsQ0FBQ0EsVUFBVUEsR0FBR0EsTUFBTUEsQ0FBQ0E7b0JBQ3pCQSxLQUFLQSxDQUFDQTtnQkFDVkEsS0FBS0EsQ0FBQ0E7b0JBQ0ZBLElBQUlBLENBQUNBLE1BQU1BLEdBQUdBLEdBQUdBLENBQUNBO29CQUNsQkEsSUFBSUEsQ0FBQ0EsT0FBT0EsR0FBR0EsS0FBS0EsQ0FBQ0E7b0JBQ3JCQSxJQUFJQSxDQUFDQSxVQUFVQSxHQUFHQSxNQUFNQSxDQUFDQTtvQkFDekJBLEtBQUtBLENBQUNBO2dCQUNWQSxLQUFLQSxDQUFDQTtvQkFDRkEsSUFBSUEsQ0FBQ0EsTUFBTUEsR0FBR0EsR0FBR0EsQ0FBQ0E7b0JBQ2xCQSxJQUFJQSxDQUFDQSxPQUFPQSxHQUFHQSxLQUFLQSxDQUFDQTtvQkFDckJBLElBQUlBLENBQUNBLFVBQVVBLEdBQUdBLE1BQU1BLENBQUNBO29CQUN6QkEsS0FBS0EsQ0FBQ0E7Z0JBQ1ZBLEtBQUtBLENBQUNBO29CQUNGQSxJQUFJQSxDQUFDQSxNQUFNQSxHQUFHQSxHQUFHQSxDQUFDQTtvQkFDbEJBLElBQUlBLENBQUNBLE9BQU9BLEdBQUdBLEtBQUtBLENBQUNBO29CQUNyQkEsSUFBSUEsQ0FBQ0EsVUFBVUEsR0FBR0EsTUFBTUEsQ0FBQ0E7b0JBQ3pCQSxLQUFLQSxDQUFDQTtnQkFDVkEsS0FBS0EsRUFBRUE7b0JBQ0hBLElBQUlBLENBQUNBLE1BQU1BLEdBQUdBLEdBQUdBLENBQUNBO29CQUNsQkEsSUFBSUEsQ0FBQ0EsT0FBT0EsR0FBR0EsS0FBS0EsQ0FBQ0E7b0JBQ3JCQSxJQUFJQSxDQUFDQSxVQUFVQSxHQUFHQSxNQUFNQSxDQUFDQTtvQkFDekJBLEtBQUtBLENBQUNBO2dCQUNWQSxLQUFLQSxFQUFFQTtvQkFDSEEsSUFBSUEsQ0FBQ0EsTUFBTUEsR0FBR0EsSUFBSUEsQ0FBQ0E7b0JBQ25CQSxJQUFJQSxDQUFDQSxPQUFPQSxHQUFHQSxNQUFNQSxDQUFDQTtvQkFDdEJBLElBQUlBLENBQUNBLFVBQVVBLEdBQUdBLFFBQVFBLENBQUNBO29CQUMzQkEsS0FBS0EsQ0FBQ0E7Z0JBQ1ZBO29CQUNJQSxNQUFHQSxDQUFDQSxLQUFLQSxDQUFDQSxJQUFJQSxFQUFFQSxrQkFBa0JBLENBQUNBLENBQUNBO29CQUNwQ0EsS0FBS0EsQ0FBQ0E7WUFDZEEsQ0FBQ0E7UUFDTEEsQ0FBQ0E7UUFDTFIsa0JBQUNBO0lBQURBLENBdkdBeCtDLEFBdUdDdytDLElBQUF4K0M7SUF2R1lBLGNBQVdBLGNBdUd2QkEsQ0FBQUE7QUFDTEEsQ0FBQ0EsRUF6R00sRUFBRSxLQUFGLEVBQUUsUUF5R1I7QUN6R0QsSUFBTyxFQUFFLENBK0lSO0FBL0lELFdBQU8sRUFBRSxFQUFDLENBQUM7SUFDUEE7UUFBaUNpL0Msc0JBQVNBO1FBQTFDQTtZQUFpQ0MsOEJBQVNBO1lBZ0MvQkEsWUFBT0EsR0FBNEJBLElBQUlBLENBQUNBO1FBNkduREEsQ0FBQ0E7UUE1SUdELHNCQUNJQSxxQkFBS0E7aUJBRFRBO2dCQUVJRSxJQUFJQSxRQUFRQSxHQUFHQSxJQUFJQSxDQUFDQSxhQUFhQSxFQUFFQSxDQUFDQTtnQkFFcENBLEVBQUVBLENBQUFBLENBQUNBLENBQUNBLFFBQVFBLENBQUNBLENBQUFBLENBQUNBO29CQUNWQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQTtnQkFDaEJBLENBQUNBO2dCQUVEQSxNQUFNQSxDQUFDQSxRQUFRQSxDQUFDQSxLQUFLQSxDQUFDQTtZQUMxQkEsQ0FBQ0E7aUJBQ0RGLFVBQVVBLEtBQWFBO2dCQUNuQkUsRUFBRUEsQ0FBQUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsQ0FBQUEsQ0FBQ0E7b0JBQ05BLElBQUlBLFFBQVFBLEdBQUdBLElBQUlBLENBQUNBLGFBQWFBLEVBQUVBLENBQUNBO29CQUVwQ0EsRUFBRUEsQ0FBQUEsQ0FBQ0EsQ0FBQ0EsUUFBUUEsQ0FBQ0EsQ0FBQUEsQ0FBQ0E7d0JBQ1ZBLE1BQU1BLENBQUNBO29CQUNYQSxDQUFDQTtvQkFFREEsUUFBUUEsQ0FBQ0EsS0FBS0EsR0FBR0EsS0FBS0EsQ0FBQ0E7Z0JBQzNCQSxDQUFDQTtZQUNMQSxDQUFDQTs7O1dBWEFGO1FBYURBLHNCQUFJQSxxQkFBS0E7aUJBQVRBO2dCQUNJRyxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxZQUFZQSxHQUFHQSxJQUFJQSxDQUFDQSxZQUFZQSxDQUFDQSxTQUFTQSxDQUFDQSxLQUFLQSxHQUFHQSxJQUFJQSxDQUFDQTtZQUN4RUEsQ0FBQ0E7OztXQUFBSDtRQUVEQSxzQkFBSUEsc0JBQU1BO2lCQUFWQTtnQkFDSUksTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsWUFBWUEsR0FBR0EsSUFBSUEsQ0FBQ0EsWUFBWUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsTUFBTUEsR0FBR0EsSUFBSUEsQ0FBQ0E7WUFDekVBLENBQUNBOzs7V0FBQUo7UUFNTUEsaUJBQUlBLEdBQVhBO1lBQ0lLLElBQUlBLENBQUNBLE9BQU9BLEdBQUdBLElBQUlBLENBQUNBLFVBQVVBLEVBQUVBLENBQUNBO1FBQ3JDQSxDQUFDQTtRQUVNTCx3QkFBV0EsR0FBbEJBLFVBQW1CQSxZQUFxQkE7WUFDcENNLGdCQUFLQSxDQUFDQSxXQUFXQSxZQUFDQSxZQUFZQSxDQUFDQSxDQUFDQTtZQUVoQ0EsWUFBWUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsUUFBUUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7UUFDMUNBLENBQUNBO1FBRU1OLDZCQUFnQkEsR0FBdkJBLFVBQXdCQSxZQUFxQkE7WUFDekNPLGdCQUFLQSxDQUFDQSxnQkFBZ0JBLFlBQUNBLFlBQVlBLENBQUNBLENBQUNBO1lBRXJDQSxZQUFZQSxDQUFDQSxTQUFTQSxDQUFDQSxXQUFXQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtRQUM3Q0EsQ0FBQ0E7UUFLTVAsbUJBQU1BLEdBSGJBLFVBR2NBLFdBQWtCQTtZQUM1QlEsSUFBSUEsT0FBT0EsR0FBR0EsSUFBSUEsQ0FBQ0EsT0FBT0EsQ0FBQ0E7WUFFM0JBLEVBQUVBLENBQUFBLENBQUNBLElBQUlBLENBQUNBLGVBQWVBLEVBQUVBLENBQUNBLENBQUFBLENBQUNBO2dCQUN2QkEsTUFBTUEsQ0FBQ0E7WUFDWEEsQ0FBQ0E7WUFFREEsT0FBT0EsQ0FBQ0EsSUFBSUEsRUFBRUEsQ0FBQ0E7WUFFZkEsSUFBSUEsQ0FBQ0EsOEJBQThCQSxFQUFFQSxDQUFDQTtZQUV0Q0EsSUFBSUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsV0FBV0EsQ0FBQ0EsQ0FBQ0E7WUFFdkJBLE9BQU9BLENBQUNBLE9BQU9BLEVBQUVBLENBQUNBO1FBQ3RCQSxDQUFDQTtRQUdTUixpQkFBSUEsR0FEZEEsVUFDZUEsV0FBa0JBO1FBQ2pDUyxDQUFDQTtRQUdTVCw0QkFBZUEsR0FEekJBO1lBRUlVLE1BQU1BLENBQUNBLEtBQUtBLENBQUNBO1FBQ2pCQSxDQUFDQTtRQUVTVix1QkFBVUEsR0FBcEJBO1lBQ0lXLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLGFBQWFBLEVBQUVBLENBQUNBLE9BQU9BLENBQUNBO1FBQ3hDQSxDQUFDQTtRQUVTWCxzQkFBU0EsR0FBbkJBO1lBQ0lZLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLGFBQWFBLEVBQUVBLENBQUNBLE1BQU1BLENBQUNBO1FBQ3ZDQSxDQUFDQTtRQUtTWiwwQkFBYUEsR0FBdkJBO1lBQ0lhLEVBQUVBLENBQUFBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLFlBQVlBLENBQUNBLENBQUFBLENBQUNBO2dCQUNuQkEsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0E7WUFDaEJBLENBQUNBO1lBRURBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLFlBQVlBLENBQUNBLFlBQVlBLENBQWFBLGFBQVVBLENBQUNBLENBQUNBO1FBQ2xFQSxDQUFDQTtRQU1TYiw4QkFBaUJBLEdBQTNCQTtZQUE0QmMsY0FBT0E7aUJBQVBBLFdBQU9BLENBQVBBLHNCQUFPQSxDQUFQQSxJQUFPQTtnQkFBUEEsNkJBQU9BOztZQUMvQkEsSUFBSUEsT0FBT0EsR0FBNEJBLElBQUlBLENBQUNBLENBQUNBLENBQUNBLEVBQzFDQSxNQUFNQSxHQUFPQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUV6QkEsRUFBRUEsQ0FBQUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsTUFBTUEsS0FBS0EsQ0FBQ0EsQ0FBQ0EsQ0FBQUEsQ0FBQ0E7Z0JBQ2xCQSxJQUFJQSxRQUFRQSxHQUFXQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQSxFQUMxQkEsS0FBS0EsR0FBVUEsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsRUFDdEJBLE1BQU1BLEdBQVVBLElBQUlBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO2dCQUU1QkEsT0FBT0EsQ0FBQ0EsU0FBU0EsQ0FDYkEsTUFBTUEsRUFDTkEsUUFBUUEsQ0FBQ0EsQ0FBQ0EsR0FBR0EsS0FBS0EsR0FBR0EsQ0FBQ0EsRUFBRUEsUUFBUUEsQ0FBQ0EsQ0FBQ0EsR0FBR0EsTUFBTUEsR0FBR0EsQ0FBQ0EsRUFDL0NBLEtBQUtBLEVBQ0xBLE1BQU1BLENBQ1RBLENBQUNBO1lBQ05BLENBQUNBO1lBQ0RBLElBQUlBLENBQUNBLEVBQUVBLENBQUFBLENBQUNBLElBQUlBLENBQUNBLE1BQU1BLEtBQUtBLENBQUNBLENBQUNBLENBQUFBLENBQUNBO2dCQUN2QkEsSUFBSUEsRUFBRUEsR0FBVUEsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsRUFDbkJBLEVBQUVBLEdBQVVBLElBQUlBLENBQUNBLENBQUNBLENBQUNBLEVBQ25CQSxFQUFFQSxHQUFVQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQSxFQUNuQkEsRUFBRUEsR0FBVUEsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsRUFDbkJBLFFBQVFBLEdBQVdBLElBQUlBLENBQUNBLENBQUNBLENBQUNBLEVBQzFCQSxLQUFLQSxHQUFVQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQSxFQUN0QkEsTUFBTUEsR0FBVUEsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBRTVCQSxPQUFPQSxDQUFDQSxTQUFTQSxDQUNiQSxNQUFNQSxFQUFFQSxFQUFFQSxFQUFFQSxFQUFFQSxF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LEdBQUdBLFFBQVFBLElBQUlBLFNBQVNBLEdBQUdBLFlBQVlBLEVBQUVBLENBQUNBO29CQUNsREEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsUUFBUUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7d0JBQ1hBLElBQUlBLElBQUlBLEdBQUdBLFFBQVFBLENBQUNBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLENBQUNBO3dCQUNuQ0EsT0FBT0EsR0FBR0EsSUFBSUEsR0FBR0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsTUFBTUEsR0FBR0EsQ0FBQ0EsQ0FBQ0E7b0JBQ3hDQSxDQUFDQTtvQkFFREEsb0JBQW9CQSxHQUFHQSxvQkFBb0JBLEdBQUdBLE9BQU9BLENBQUNBO29CQUN0REEsUUFBUUEsR0FBR0EsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0Esb0JBQW9CQSxDQUFDQSxDQUFDQTtvQkFDN0NBLEtBQUtBLEdBQUdBLFFBQVFBLEdBQUdBLEtBQUlBLENBQUNBLFFBQVFBLENBQUNBLFFBQVFBLENBQUNBLENBQUNBO29CQUMzQ0EsU0FBU0EsR0FBR0EsU0FBU0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7Z0JBQzlCQSxDQUFDQTtZQUNMQSxDQUFDQSxDQUFBQTtZQUVEQSxJQUFJQSwwQkFBMEJBLEdBQUdBO2dCQUk3QkEsRUFBRUEsQ0FBQ0EsQ0FBQ0Esb0JBQW9CQSxDQUFDQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtvQkFDdENBLElBQUlBLFNBQU9BLEdBQUdBLElBQUlBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBLEVBQUVBLG9CQUFvQkEsQ0FBQ0EsRUFDOUNBLEtBQUtBLEdBQUdBLG1CQUFtQkEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsU0FBT0EsQ0FBQ0EsQ0FBQ0E7b0JBRTlDQSxFQUFFQSxDQUFDQSxDQUFDQSxLQUFLQSxDQUFDQSxDQUFDQSxDQUFDQTt3QkFDUkEsb0JBQW9CQSxHQUFHQSxvQkFBb0JBLEdBQUdBLEtBQUtBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLE1BQU1BLENBQUNB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Z0JBRURBLFlBQVlBLEdBQUdBLElBQUlBLENBQUNBLHVDQUF1Q0EsQ0FBQ0EsT0FBT0EsRUFBRUEsS0FBS0EsRUFBRUEsQ0FBQ0EsRUFBRUEsSUFBSUEsRUFBRUEsVUFBVUEsQ0FBQ0EsQ0FBQ0E7Z0JBRWpHQSxnQkFBZ0JBLEdBQUdBLFlBQVlBLENBQUNBLGdCQUFnQkEsQ0FBQ0E7Z0JBQ2pEQSxRQUFRQSxHQUFHQSxZQUFZQSxDQUFDQSxRQUFRQSxDQUFDQTtnQkFFakNBLElBQUlBLENBQUNBLDRCQUE0QkEsQ0FBQ0EsZ0JBQWdCQSxFQUFFQSxRQUFRQSxDQUFDQSxDQUFDQSxHQUFHQSxpQkFBaUJBLEdBQUdBLE9BQU9BLENBQUNBLE9BQU9BLEVBQUVBLFFBQVFBLENBQUNBLENBQUNBLEdBQUdBLGlCQUFpQkEsR0FBR0EsT0FBT0EsQ0FBQ0EsT0FBT0EsQ0FBQ0EsQ0FBQ0E7Z0JBRXhKQSxRQUFRQSxDQUFDQSxTQUFTQSxHQUFHQSxpQkFBaUJBLENBQUNBO2dCQUN2Q0EsUUFBUUEsQ0FBQ0EsUUFBUUEsR0FBR0EsT0FBT0EsQ0FBQ0EsUUFBUUEsQ0FBQ0E7Z0JBRXJDQSxpQkFBaUJBLEdBQUdBLGlCQUFpQkEsR0FBR0EsT0FBT0EsQ0FBQ0EsUUFBUUEsQ0FBQ0E7WUFDN0RBLENBQUNBO1FBQ0xBLENBQUNBO1FBRU9WLDZEQUF3Q0EsR0FBaERBLFVBQWlEQSxLQUFZQSxFQUFFQSxJQUFXQSxFQUFFQSxVQUFxQkE7WUFDN0ZXLElBQUlBLGdCQUFnQkEsR0FBWUEsSUFBSUEsQ0FBQ0EscUJBQXFCQSxDQUFDQSxLQUFLQSxDQUFDQSxFQUM3REEsUUFBUUEsR0FBWUEsSUFBSUEsQ0FBQ0E7WUFFN0JBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBLGdCQUFnQkEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBQ3BCQSxJQUFJQSxZQUFZQSxHQUFHQSxJQUFJQSxDQUFDQSxlQUFlQSxDQUFDQSxLQUFLQSxFQUFFQSxVQUFVQSxDQUFDQSxDQUFDQTtnQkFFM0RBLGdCQUFnQkEsR0FBR0EsWUFBWUEsQ0FBQ0EsZ0JBQWdC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LEtBQUtBLEdBQUdBLENBQUNBLEdBQUdBLFdBQVdBLEdBQUdBLENBQUNBLEVBQUVBLFFBQVFBLENBQUNBLENBQUNBLENBQUNBLEVBQUVBLFdBQVdBLEVBQUVBLElBQUlBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBO1FBQzdHQSxDQUFDQTtRQUVPUCxpQ0FBV0EsR0FBbkJBLFVBQW9CQSxRQUFnQkE7WUFDaENRLG1CQUFnQkEsQ0FBQ0EsZUFBZUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsT0FBT0EsRUFBRUEsSUFBSUEsQ0FBQ0EsV0FBV0EsRUFBRUEsSUFBSUEsRUFBRUEsUUFBUUEsQ0FBQ0EsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsS0FBS0EsR0FBR0EsQ0FBQ0EsRUFBRUEsUUFBUUEsQ0FBQ0EsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsTUFBTUEsR0FBR0EsQ0FBQ0EsRUFBRUEsSUFBSUEsQ0FBQ0EsS0FBS0EsRUFBRUEsSUFBSUEsQ0FBQ0EsTUFBTUEsRUFBRUEsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0E7UUFDNUtBLENBQUNBO1FBRU9SLDRDQUFzQkEsR0FBOUJBO1lBQ0lTLElBQUlBLE1BQU1BLEdBQUdBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLE1BQU1BLENBQUNBLG1CQUFtQkEsQ0FBQ0EsQ0FBQ0E7WUFFdkRBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLE9BQU9BLEVBQUVBLElBQUlBLENBQUNBLE9BQU9BLENBQUNBLE1BQU1BLENBQUNBLEtBQUtBLENBQUNBLENBQUNBO1lBQ2hEQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxRQUFRQSxFQUFFQSxJQUFJQSxDQUFDQSxPQUFPQSxDQUFDQSxNQUFNQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQTtZQUVsREEsSUFBSUEsQ0FBQ0EsZ0JBQWdCQSxHQUFHQSxNQUFNQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUV0Q0EsSUFBSUEsQ0FBQ0EsaUJBQWlCQSxHQUFHQSxJQUFJQSxDQUFDQSxnQkFBZ0JBLENBQUNB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S0FBS0EsQ0FBQ0EsQ0FBQ0EsRUFDaEJBLFNBQVNBLEdBQUdBLElBQUlBLEVBQ2hCQSxNQUFNQSxHQUFHQSxJQUFJQSxDQUFDQTtZQUVsQkEsT0FBT0EsQ0FBQ0Esd0JBQXdCQSxHQUFHQSxNQUFNQSxDQUFDQTtZQUUxQ0EsSUFBSUEsQ0FBQ0EsaUJBQWlCQSxDQUFDQSxJQUFJQSxDQUFDQSxPQUFPQSxFQUFFQSxJQUFJQSxDQUFDQSxjQUFjQSxFQUFFQSxDQUFDQSxNQUFNQSxFQUFFQSxJQUFJQSxDQUFDQSxZQUFZQSxDQUFDQSxTQUFTQSxDQUFDQSxRQUFRQSxFQUFFQSxJQUFJQSxDQUFDQSxLQUFLQSxFQUFFQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQTtZQUVsSUEsU0FBU0EsR0FBR0EsT0FBT0EsQ0FBQ0EsWUFBWUEsQ0FBQ0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsRUFBRUEsTUFBTUEsQ0FBQ0EsS0FBS0EsRUFBRUEsTUFBTUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0E7WUFDcEVBLE1BQU1BLEdBQUdBLFNBQVNBLENBQUNBLElBQUlBLENBQUNBO1lBRXhCQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxFQUFFQSxHQUFHQSxHQUFHQSxNQUFNQSxDQUFDQSxNQUFNQSxFQUFFQSxDQUFDQSxHQUFHQSxHQUFHQSxFQUFFQSxDQUFDQSxJQUFJQSxDQUFDQSxFQUFFQSxDQUFDQTtnQkFDbkRBLE1BQU1BLENBQUNBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLENBQUNBO2dCQUNmQSxNQUFNQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtnQkFDbkJBLE1BQU1BLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLENBQUNBO1lBQ3ZCQSxDQUFDQTtZQUVEQSxPQUFPQSxDQUFDQSxZQUFZQSxDQUFDQSxTQUFTQSxFQUFFQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUMxQ0Es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QSxJQUFJQSxDQUFDQSxTQUFTQSxDQUFDQSxtQkFBZ0JBLENBQUNBLFVBQVVBLENBQUNBLENBQUNBLFlBQVlBLENBQVFBLFFBQUtBLENBQUNBLENBQUNBLFdBQVdBLEdBQUdBLE1BQU1BLENBQUNBO29CQUM1RkEsS0FBS0EsQ0FBQ0E7Z0JBQ1ZBO29CQUNJQSxNQUFHQSxDQUFDQSxLQUFLQSxDQUFDQSxJQUFJQSxFQUFFQSxNQUFHQSxDQUFDQSxJQUFJQSxDQUFDQSxhQUFhQSxDQUFDQSxnQkFBZ0JBLENBQUNBLENBQUNBLENBQUNBO29CQUMxREEsS0FBS0EsQ0FBQ0E7WUFDZEEsQ0FBQ0E7UUFDTEEsQ0FBQ0E7UUFFT2Isd0NBQXVCQSxHQUEvQkE7WUFDSWMsSUFBSUEsTUFBTUEsR0FBR0EsV0FBUUEsQ0FBQ0EsTUFBTUEsRUFBRUEsRUFDMUJBLEtBQUtBLEdBQUdBLFFBQUtBLENBQUNBLE1BQU1BLEVBQUVBLEVBQ3RCQSxTQUFTQSxHQUFHQSxJQUFJQSxDQUFDQSxZQUFZQSxDQUFDQSxTQUFTQSxDQUFDQTtZQUU1Q0EsTUFBTUEsQ0FBQ0EsWUFBWUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsQ0FBQ0E7WUFFM0JBLE1BQU1BLENBQUNBLFlBQVlBLENBQUNBLElBQUlBLENBQUNBLGFBQWFBLEVBQUVBLENBQUNBLENBQUNBO1lBRTFDQSxNQUFNQSxDQUFDQSxTQUFTQSxDQUFDQSxLQUFLQSxHQUFHQSxTQUFTQSxDQUFDQSxLQUFLQSxDQUFDQTtZQUN6Q0EsTUFBTUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsTUFBTUEsR0FBR0EsU0FBU0EsQ0FBQ0EsTUFBTUEsQ0FBQ0E7WUFFM0NBLE1BQU1BLENBQUNBLFNBQVNBLENBQUNBLE1BQU1BLEdBQUdBLENBQUNBLENBQUNBO1lBRTVCQSxNQUFNQSxDQUFDQSxJQUFJQSxHQUFRQSxtQkFBZ0JBLENBQUNBLFVBQVVBLENBQUNBO1lBRS9DQSxNQUFNQSxDQUFDQSxNQUFNQSxDQUFDQTtRQUNsQkEsQ0FBQ0E7UUFFT2Qsa0NBQWlCQSxHQUF6QkE7WUFDSWUsSUFBSUEsVUFBVUEs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QUNBO29CQUNGQSxJQUFJQSxHQUFHQSxJQUFJQSxDQUFDQTtvQkFDWkEsS0FBS0EsQ0FBQ0E7Z0JBQ1ZBLEtBQUtBLENBQUNBO29CQUNGQSxJQUFJQSxHQUFHQSxJQUFJQSxDQUFDQTtvQkFDWkEsS0FBS0EsQ0FBQ0E7Z0JBQ1ZBLEtBQUtBLENBQUNBO29CQUNGQSxJQUFJQSxHQUFHQSxJQUFJQSxDQUFDQTtvQkFDWkEsS0FBS0EsQ0FBQ0E7Z0JBQ1ZBLEtBQUtBLENBQUNBO29CQUNGQSxJQUFJQSxHQUFHQSxJQUFJQSxDQUFDQTtvQkFDWkEsS0FBS0EsQ0FBQ0E7Z0JBQ1ZBLEtBQUtBLENBQUNBO29CQUNGQSxJQUFJQSxHQUFHQSxJQUFJQSxDQUFDQTtvQkFDWkEsS0FBS0EsQ0FBQ0E7Z0JBQ1ZBLEtBQUtBLENBQUNBO29CQUNGQSxJQUFJQSxHQUFHQSxJQUFJQSxDQUFDQTtvQkFDWkEsS0FBS0EsQ0FBQ0E7Z0JBQ1ZBO29CQUNJQSxLQUFLQSxDQUFDQTtZQUNkQSxDQUFDQTtZQUVEQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQTtRQUNoQkEsQ0FBQ0E7UUFFT1AsaURBQVdBLEdBQW5CQSxVQUFvQkEsTUFBaUJBLEVBQUVBLFFBQWdCQSxFQUFFQSxLQUFZQTtZQUNqRVEsTUFBTUEsQ0FBQ0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsQ0FBQUEsQ0FBQ0E7Z0JBQ1hBLEtBQUtBLENBQUNBO29CQUNGQSxNQUFNQSxDQUFDQSxTQUFTQSxDQUFDQSxNQUFNQSxDQUFDQSxRQUFRQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxFQUFFQSxRQUFRQSxDQUFDQSxDQUFDQSxFQUFFQSxRQUFRQSxDQUFDQSxDQUFDQSxFQUFFQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQTtvQkFDMUVBLEtBQUtBLENBQUNBO2dCQUNWQSxLQUFLQSxDQUFDQTtvQkFDRkEsTUFBTUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsQ0FBQ0EsR0FBQ0EsQ0FBQ0EsRUFBRUEsUUFBUUEsQ0FBQ0EsQ0FBQ0EsRUFBRUEsUUFBUUEsQ0FBQ0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7b0JBQ3hFQSxLQUFLQSxDQUFDQTtnQkFDVkEsS0FBS0EsQ0FBQ0E7b0JBQ0ZBLE1BQU1BLENBQUNBLFNBQVNBLENBQUNBLE1BQU1BLENBQUNBLFFBQVFBLENBQUNBLENBQUNBLEVBQUVBLFFBQVFBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLEVBQUVBLFFBQVFBLENBQUNBLENBQUNBLEVBQUVBLENBQUNBLEVBQUVBLENBQUNBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBO29CQUN6RUEsS0FBS0EsQ0FBQ0E7Z0JBQ1ZBLEtBQUtBLENBQUNBO29CQUNGQSxNQUFNQSxDQUFDQSxTQUFTQSxDQUFDQSxNQUFNQSxDQUFDQSxRQUFRQSxDQUFDQSxDQUFDQSxFQUFFQSxRQUFRQSxDQUFDQSxDQUFDQSxHQUFDQSxDQUFDQSxFQUFFQSxRQUFRQSxDQUFDQSxDQUFDQSxFQUFFQSxDQUFDQSxFQUFFQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtvQkFDeEVBLEtBQUtBLENBQUNBO2dCQUNWQSxLQUFLQSxDQUFDQTtvQkFDRkEsTUFBTUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsQ0FBQ0EsRUFBRUEsUUFBUUEsQ0FBQ0EsQ0FBQ0EsRUFBRUEsUUFBUUEsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7b0JBQzFFQSxLQUFLQSxDQUFDQTtnQkFDVkEsS0FBS0EsQ0FBQ0E7b0JBQ0ZBLE1BQU1BLENBQUNBLFNBQVNBLENBQUNBLE1BQU1BLENBQUNBLFFBQVFBLENBQUNBLENBQUNBLEVBQUVBLFFBQVFBLENBQUNBLENBQUNBLEVBQUVBLFFBQVFBLENBQUNBLENBQUNBLEdBQUNBLENBQUNBLEVBQUVBLENB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QUFDQSxXQUFXQSxFQUFFQSxDQUFDQSxLQUFLQSxDQUFDQTtZQUV6REEsRUFBRUEsQ0FBQUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsV0FBV0EsQ0FBQ0EsQ0FBQUEsQ0FBQ0E7Z0JBQ2pCQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxNQUFNQSxDQUFDQSxzQkFBbUJBLENBQUNBLE1BQU1BLEVBQUVBLENBQUNBLENBQUNBO1lBQ3JEQSxDQUFDQTtZQUNEQSxJQUFJQSxDQUFBQSxDQUFDQTtnQkFDREEsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsTUFBTUEsQ0FBQ0Esd0JBQXFCQSxDQUFDQSxNQUFNQSxFQUFFQSxDQUFDQSxDQUFDQTtZQUN2REEsQ0FBQ0E7WUFFREEsRUFBRUEsQ0FBQUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsWUFBWUEsQ0FBQ0EsQ0FBQUEsQ0FBQ0E7Z0JBQ2xCQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxNQUFNQSxDQUFDQSx1QkFBb0JBLENBQUNBLE1BQU1BLEVBQUVBLENBQUNBLENBQUNBO1lBQ3REQSxDQUFDQTtZQUNEQSxJQUFJQSxDQUFBQSxDQUFDQTtnQkFDREEsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EseUJBQXNCQSxDQUFDQSxNQUFNQSxFQUFFQSxDQUFDQSxDQUFDQTtZQUN4REEsQ0FBQ0E7WUFFREEsRUFBRUEsQ0FBQUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsQ0FBQUEsQ0FBQ0E7Z0JBQ2hCQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxNQUFNQSxDQUFDQSxxQkFBa0JBLENBQUNBLE1BQU1BLEVBQUVBLENBQUNBLENBQUNBO1lBQ3BEQSxDQUFDQTtZQUNEQSxJQUFJQSxDQUFBQSxDQUFDQTtnQkFDREEsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsdUJBQW9CQSxDQUFDQSxNQUFNQSxFQUFFQSxDQUFDQSxDQUFDQTtZQUN0REEsQ0FBQ0E7WUFFREEsRUFBRUEsQ0FBQUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsU0FBU0EsQ0FB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QUdBLENBQUNBO29CQUNmQSxDQUFDQTtZQUNUQSxDQUFDQTtZQUVEQSxHQUFHQSxDQUFDQSxXQUFXQSxHQUFHQSxDQUFDQSxDQUFDQTtZQUVwQkEsRUFBRUEsQ0FBQ0EsQ0FBRUEsTUFBTUEsQ0FBRUEsU0FBU0EsQ0FBRUEsR0FBR0EsZ0JBQWdCQSxJQUFJQSxXQUFXQSxLQUFLQSxLQUFNQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFDcEVBLEdBQUdBLENBQUNBLFdBQVdBLEdBQUdBLElBQUlBLENBQUNBLEdBQUdBLENBQUVBLENBQUNBLEVBQUVBLE1BQU1BLENBQUVBLGVBQWVBLENBQUVBLENBQUVBLENBQUNBO1lBQy9EQSxDQUFDQTtZQUlEQSxHQUFHQSxDQUFDQSxTQUFTQSxHQUFHQSxNQUFNQSxDQUFFQSxTQUFTQSxDQUFFQSxHQUFHQSxnQkFBZ0JBLEdBQUdBLElBQUlBLEdBQUdBLEtBQUtBLENBQUNBO1lBRXRFQSxHQUFHQSxDQUFDQSxLQUFLQSxHQUFHQSxNQUFNQSxDQUFFQSxTQUFTQSxDQUFFQSxDQUFDQTtZQUNoQ0EsR0FBR0EsQ0FBQ0EsTUFBTUEsR0FBR0EsTUFBTUEsQ0FBRUEsVUFBVUEsQ0FBRUEsQ0FBQ0E7WUFFbENBLFVBQVVBLEdBQUdBLE1BQU1BLENBQUVBLFFBQVFBLENBQUVBLEdBQUdBLENBQUNBLENBQUNBO1lBSXBDQSxLQUFLQSxHQUFHQSxHQUFHQSxDQUFDQSxLQUFLQSxDQUFDQTtZQUNsQkEsTUFBTUEsR0FBR0EsR0FBR0EsQ0FBQ0EsTUFBTUEsQ0FBQ0E7WUFFcEJBLEtBQUtBLEdBQUdBLEdBQUdBLENBQUNBLFNBQVNBLEdBQUdBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO1lBRTlCQSxHQUFHQSxDQUFDQSxDQUFFQSxHQUFHQSxDQUFDQSxJQUFJQSxHQUFHQSxDQUFDQSxFQUFFQSxJQUFJQSxHQUFHQSxLQUFLQSxFQUFFQSxJQUFJQSxFQUFHQSxFQUFHQSxDQUFDQTtnQkFFekNBLEdBQUdBLENBQUNBLENBQUVBLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLEVBQUVBLENBQUNBLEdBQUdBLEdBQUdBLENBQUNBLFdBQVdBLEVBQUVBLENBQUNBLEVBQUdBLEVBQUdBLENBQUNBO29CQUMxQ0EsSUFBSUEsTUFBTUEsR0FBR0EsSUFBSUEsRUFDYkEsU0FBU0EsR0FBR0EsSUFBSUEsRUFDaEJBLFVBQVVBLEdBQUdBLElBQUlBLENBQUNBO29CQUV0QkEsRUFBRUEsQ0FBQ0EsQ0FBRUEsa0JBQW1CQSxDQUFDQSxDQUFDQSxDQUFDQTt3QkFDdkJBLFNBQVNBLEdBQUdBLElBQUlBLENBQUNBLFlBQVlBLENBQUVBLE1BQU1BLEVBQUVBLFVBQVVBLEVBQUVBLEtBQUtBLEVBQUVBLE1BQU1BLENBQUVBLENBQUNBO3dCQUNuRUEsVUFBVUEsR0FBR0EsU0FBU0EsQ0FBQ0EsTUFBTUEsQ0FBQ0E7b0JBQ2xDQSxDQUFDQTtvQkFDREEsSUFBSUEsQ0FBQ0EsQ0FBQ0E7d0JBQ0ZBLFVBQVVBLEdBQUdBLElBQUlBLENBQUNBLEdBQUdBLENBQUVBLENBQUNBLEVBQUVBLEtBQUtBLENBQUVBLEdBQUdBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLEdBQUdBLENBQUVBLENBQUNBLEVBQUVBLE1BQU1BLENBQUVBLEdBQUdBLENBQUNBLEdBQUdBLFVBQVVBLENBQUNBO3dCQUMvRUEsU0FBU0EsR0FBR0EsSUFBSUEsVUFBVUEsQ0FBRUEsTUFBTUEsRUFBRUEsVUFBVUEsRUFBRUEsVUFBVUEsQ0FBRUEsQ0FBQ0E7b0JBQ2pFQSxDQUFDQTtvQkFFREEsTUFBTUEsR0FBNEJBLEVBQUVBLE1BQU1BLEVBQUVBLFNBQVNBLEVBQUVBLE9BQU9BLEVBQUVBLEtBQUtBLEVBQUVBLFFBQVFBLEVBQUVBLE1BQU1BLEVBQUVBLENBQUNBO29CQUMxRkEsR0FBR0EsQ0FBQ0EsT0FBT0EsQ0FBQ0EsUUFBUUEsQ0FBRUEsTUFBTUEsQ0FBRUEsQ0FBQ0E7b0JBRS9CQSxVQUFVQSxJQUFJQSxVQUFVQSxDQUFDQTtvQkFFekJBLEtBQUtBLEdBQUdBLElBQUlBLENBQUNBLEdBQUdBLENBQUVBLEtBQUtBLEdBQUdBLEdBQUdB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LEVBQUVBLHdIQUF3SEEsRUFBQ0EsV0FBV0EsRUFBRUEsRUFBRUEsRUFBQ0EsVUFBVUEsRUFBRUEsRUFBRUEsRUFBQ0EsSUFBSUEsRUFBRUEsNklBQTZJQSxHQUFFQSxDQUFBQTtRQUM1WEEsa0JBQUNBO0lBQURBLENBN0RBNW1GLEFBNkRDNG1GLElBQUE1bUY7SUE3RFlBLGNBQVdBLGNBNkR2QkEsQ0FBQUE7QUFFREEsQ0FBQ0EsRUFoRU0sRUFBRSxLQUFGLEVBQUUsUUFnRVIiLCJmaWxlIjoid2QuZGVidWcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUgd2R7XG4gICAgZXhwb3J0IHZhciBEZWJ1Z0NvbmZpZyA9IHtcbiAgICAgICAgaXNUZXN0OmZhbHNlLFxuICAgICAgICBkZWJ1Z0NvbGxpc2lvbjpmYWxzZSxcbiAgICAgICAgc2hvd0RlYnVnUGFuZWw6IGZhbHNlXG4gICAgfVxufVxuXG4iLCJtb2R1bGUgd2R7XG4gICAgLy90b2RvIHVzZSB1aSBjb21wb25lbnQgdG8gZHJhdyBkZWJ1ZyBwYW5lbCFcbiAgICBleHBvcnQgY2xhc3MgRGVidWdTdGF0aXN0aWNze1xuICAgICAgICBwdWJsaWMgc3RhdGljIGNvdW50ID0ge1xuICAgICAgICAgICAgZ2V0IHRvdGFsR2FtZU9iamVjdHMoKXtcbiAgICAgICAgICAgICAgICB2YXIgY291bnQgPSAwO1xuXG4gICAgICAgICAgICAgICAgRGlyZWN0b3IuZ2V0SW5zdGFuY2UoKS5zY2VuZS5nZXRDaGlsZHJlbigpLmZvckVhY2goKGNoaWxkOkVudGl0eU9iamVjdCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZihjaGlsZC5oYXNDb21wb25lbnQoT2N0cmVlKSl7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb3VudCArPSBjaGlsZC5nZXRDb21wb25lbnQ8T2N0cmVlPihPY3RyZWUpLmdldENoaWxkcmVuKCkuZ2V0Q291bnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGNvdW50ICsrO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvdW50O1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgcmVuZGVyR2FtZU9iamVjdHM6MCxcbiAgICAgICAgICAgIGRyYXdDYWxsczowXG4gICAgICAgIH07XG5cbiAgICAgICAgcHVibGljIHN0YXRpYyBkdXJpbmcgPSB7XG4gICAgICAgICAgICBnZXQgZnBzKCl7XG4gICAgICAgICAgICAgICAgcmV0dXJuIERpcmVjdG9yLmdldEluc3RhbmNlKCkuZnBzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy90b2RvIGNvbXB1dGUgcG90ZW50aWFsIGZwcz9cbiAgICAgICAgfTtcblxuICAgICAgICBwcml2YXRlIHN0YXRpYyBfc3RhcnRMb29wU3Vic2NyaXB0aW9uOndkRnJwLklEaXNwb3NhYmxlID0gbnVsbDtcblxuICAgICAgICBwdWJsaWMgc3RhdGljIGNsZWFyKCl7XG4gICAgICAgICAgICB0aGlzLmNvdW50LnJlbmRlckdhbWVPYmplY3RzID0gMDtcbiAgICAgICAgICAgIHRoaXMuY291bnQuZHJhd0NhbGxzID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgaW5pdCgpe1xuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgICAgICAgICB0aGlzLl9zdGFydExvb3BTdWJzY3JpcHRpb24gPSBFdmVudE1hbmFnZXIuZnJvbUV2ZW50KDxhbnk+RW5naW5lRXZlbnQuU1RBUlRMT09QKVxuICAgICAgICAgICAgLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYoRGVidWdDb25maWcuc2hvd0RlYnVnUGFuZWwpe1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgdG90YWxHYW1lT2JqZWN0czoke3NlbGYuY291bnQudG90YWxHYW1lT2JqZWN0c30sIHJlbmRlckdhbWVPYmplY3RzOiR7c2VsZi5jb3VudC5yZW5kZXJHYW1lT2JqZWN0c30sIGRyYXdDYWxsczoke3NlbGYuY291bnQuZHJhd0NhbGxzfWApO1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgZnBzOiR7c2VsZi5kdXJpbmcuZnBzfWApO1xuXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuY2xlYXIoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgZGlzcG9zZSgpe1xuICAgICAgICAgICAgdGhpcy5fc3RhcnRMb29wU3Vic2NyaXB0aW9uLmRpc3Bvc2UoKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsIm1vZHVsZSB3ZEZycHtcbiAgICBleHBvcnQgdmFyIGZyb21Db2xsZWN0aW9uID0gKGNvbGxlY3Rpb246d2RDYi5Db2xsZWN0aW9uPGFueT4sIHNjaGVkdWxlciA9IFNjaGVkdWxlci5jcmVhdGUoKSkgPT57XG4gICAgICAgIHZhciBhcnIgPSBjb2xsZWN0aW9uLnRvQXJyYXkoKTtcblxuICAgICAgICByZXR1cm4gYXJyLmxlbmd0aCA9PT0gMCA/IGVtcHR5KCkgOiBmcm9tQXJyYXkoYXJyLCBzY2hlZHVsZXIpO1xuICAgIH07XG59XG4iLCJtb2R1bGUgd2R7XG4gICAgZXhwb3J0IGZ1bmN0aW9uIGFzc2VydChjb25kOmJvb2xlYW4sIG1lc3NhZ2U6c3RyaW5nPVwiY29udHJhY3QgZXJyb3JcIil7XG4gICAgICAgIExvZy5lcnJvcighY29uZCwgbWVzc2FnZSk7XG4gICAgfVxuXG4gICAgZXhwb3J0IGZ1bmN0aW9uIHJlcXVpcmUoSW5GdW5jKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0LCBuYW1lLCBkZXNjcmlwdG9yKSB7XG4gICAgICAgICAgICB2YXIgdmFsdWUgPSBkZXNjcmlwdG9yLnZhbHVlO1xuXG4gICAgICAgICAgICBkZXNjcmlwdG9yLnZhbHVlID0gZnVuY3Rpb24oLi4uYXJncyl7XG4gICAgICAgICAgICAgICAgaWYoTWFpbi5pc1Rlc3Qpe1xuICAgICAgICAgICAgICAgICAgICBJbkZ1bmMuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgcmV0dXJuIGRlc2NyaXB0b3I7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBleHBvcnQgZnVuY3Rpb24gZW5zdXJlKE91dEZ1bmMpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQsIG5hbWUsIGRlc2NyaXB0b3IpIHtcbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IGRlc2NyaXB0b3IudmFsdWU7XG5cbiAgICAgICAgICAgIGRlc2NyaXB0b3IudmFsdWUgPSBmdW5jdGlvbiAoLi4uYXJncykge1xuICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmdzKSxcbiAgICAgICAgICAgICAgICAgICAgcGFyYW1zID0gW3Jlc3VsdF0uY29uY2F0KGFyZ3MpO1xuXG4gICAgICAgICAgICAgICAgaWYoTWFpbi5pc1Rlc3QpIHtcbiAgICAgICAgICAgICAgICAgICAgT3V0RnVuYy5hcHBseSh0aGlzLCBwYXJhbXMpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICByZXR1cm4gZGVzY3JpcHRvcjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGV4cG9ydCBmdW5jdGlvbiByZXF1aXJlR2V0dGVyKEluRnVuYykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCwgbmFtZSwgZGVzY3JpcHRvcikge1xuICAgICAgICAgICAgdmFyIGdldHRlciA9IGRlc2NyaXB0b3IuZ2V0O1xuXG4gICAgICAgICAgICBkZXNjcmlwdG9yLmdldCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGlmKE1haW4uaXNUZXN0KXtcbiAgICAgICAgICAgICAgICAgICAgSW5GdW5jLmNhbGwodGhpcyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGdldHRlci5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgcmV0dXJuIGRlc2NyaXB0b3I7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBleHBvcnQgZnVuY3Rpb24gcmVxdWlyZVNldHRlcihJbkZ1bmMpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQsIG5hbWUsIGRlc2NyaXB0b3IpIHtcbiAgICAgICAgICAgIHZhciBzZXR0ZXIgPSBkZXNjcmlwdG9yLnNldDtcblxuICAgICAgICAgICAgZGVzY3JpcHRvci5zZXQgPSBmdW5jdGlvbih2YWwpIHtcbiAgICAgICAgICAgICAgICBpZihNYWluLmlzVGVzdCl7XG4gICAgICAgICAgICAgICAgICAgIEluRnVuYy5jYWxsKHRoaXMsIHZhbCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgc2V0dGVyLmNhbGwodGhpcywgdmFsKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHJldHVybiBkZXNjcmlwdG9yO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGVuc3VyZUdldHRlcihPdXRGdW5jKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0LCBuYW1lLCBkZXNjcmlwdG9yKSB7XG4gICAgICAgICAgICB2YXIgZ2V0dGVyID0gZGVzY3JpcHRvci5nZXQ7XG5cbiAgICAgICAgICAgIGRlc2NyaXB0b3IuZ2V0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IGdldHRlci5jYWxsKHRoaXMpO1xuXG4gICAgICAgICAgICAgICAgaWYoTWFpbi5pc1Rlc3Qpe1xuICAgICAgICAgICAgICAgICAgICBPdXRGdW5jLmNhbGwodGhpcywgcmVzdWx0KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgcmV0dXJuIGRlc2NyaXB0b3I7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBleHBvcnQgZnVuY3Rpb24gZW5zdXJlU2V0dGVyKE91dEZ1bmMpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQsIG5hbWUsIGRlc2NyaXB0b3IpIHtcbiAgICAgICAgICAgIHZhciBzZXR0ZXIgPSBkZXNjcmlwdG9yLnNldDtcblxuICAgICAgICAgICAgZGVzY3JpcHRvci5zZXQgPSBmdW5jdGlvbih2YWwpIHtcbiAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gc2V0dGVyLmNhbGwodGhpcywgdmFsKSxcbiAgICAgICAgICAgICAgICAgICAgcGFyYW1zID0gW3Jlc3VsdCwgdmFsXTtcblxuICAgICAgICAgICAgICAgIGlmKE1haW4uaXNUZXN0KXtcbiAgICAgICAgICAgICAgICAgICAgT3V0RnVuYy5hcHBseSh0aGlzLCBwYXJhbXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHJldHVybiBkZXNjcmlwdG9yO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGludmFyaWFudChmdW5jKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgICAgICAgICBpZihNYWluLmlzVGVzdCkge1xuICAgICAgICAgICAgICAgIGZ1bmModGFyZ2V0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbiIsIm1vZHVsZSB3ZHtcbiAgICBleHBvcnQgZnVuY3Rpb24gY2FjaGVHZXR0ZXIoanVkZ2VGdW5jOigpID0+IGJvb2xlYW4sIHJldHVybkNhY2hlVmFsdWVGdW5jOigpID0+IGFueSwgc2V0Q2FjaGVGdW5jOihyZXR1cm5WYWwpID0+IHZvaWQpe1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCwgbmFtZSwgZGVzY3JpcHRvcikge1xuICAgICAgICAgICAgdmFyIGdldHRlciA9IGRlc2NyaXB0b3IuZ2V0O1xuXG4gICAgICAgICAgICBkZXNjcmlwdG9yLmdldCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBudWxsO1xuXG4gICAgICAgICAgICAgICAgaWYoanVkZ2VGdW5jLmNhbGwodGhpcykpe1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmV0dXJuQ2FjaGVWYWx1ZUZ1bmMuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXN1bHQgPSBnZXR0ZXIuY2FsbCh0aGlzKTtcblxuICAgICAgICAgICAgICAgIHNldENhY2hlRnVuYy5jYWxsKHRoaXMsIHJlc3VsdCk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgcmV0dXJuIGRlc2NyaXB0b3I7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBleHBvcnQgZnVuY3Rpb24gY2FjaGUoanVkZ2VGdW5jOiguLi5hcmdzKSA9PiBib29sZWFuLCByZXR1cm5DYWNoZVZhbHVlRnVuYzooLi4uYXJncykgPT4gYW55LCBzZXRDYWNoZUZ1bmM6KC4uLnJldHVyblZhbCkgPT4gdm9pZCl7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0LCBuYW1lLCBkZXNjcmlwdG9yKSB7XG4gICAgICAgICAgICB2YXIgdmFsdWUgPSBkZXNjcmlwdG9yLnZhbHVlO1xuXG4gICAgICAgICAgICBkZXNjcmlwdG9yLnZhbHVlID0gZnVuY3Rpb24oLi4uYXJncyl7XG4gICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IG51bGw7XG5cbiAgICAgICAgICAgICAgICBpZihqdWRnZUZ1bmMuYXBwbHkodGhpcywgYXJncykpe1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmV0dXJuQ2FjaGVWYWx1ZUZ1bmMuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gdmFsdWUuYXBwbHkodGhpcywgYXJncyk7XG5cbiAgICAgICAgICAgICAgICBzZXRDYWNoZUZ1bmMuYXBwbHkodGhpcywgW3Jlc3VsdF0uY29uY2F0KGFyZ3MpKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICByZXR1cm4gZGVzY3JpcHRvcjtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsIm1vZHVsZSB3ZCB7XG4gICAgZXhwb3J0IGZ1bmN0aW9uIHZpcnR1YWwodGFyZ2V0LCBuYW1lLCBkZXNjcmlwdG9yKSB7XG4gICAgICAgIHJldHVybiBkZXNjcmlwdG9yO1xuICAgIH1cbn1cbiIsIm1vZHVsZSB3ZCB7XG4gICAgZXhwb3J0IGZ1bmN0aW9uIG9wZXJhdGVCb2R5RGF0YUdldHRlckFuZFNldHRlcihkYXRhTmFtZSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCwgbmFtZSwgZGVzY3JpcHRvcikge1xuICAgICAgICAgICAgdmFyIGdldHRlciA9IGRlc2NyaXB0b3IuZ2V0LFxuICAgICAgICAgICAgICAgIHNldHRlciA9IGRlc2NyaXB0b3Iuc2V0O1xuXG4gICAgICAgICAgICBkZXNjcmlwdG9yLmdldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpZih0aGlzLmlzUGh5c2ljc0VuZ2luZUFkYXB0ZXJFeGlzdCgpKXtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGRhdGEgPSB0aGlzLmdldFBoeXNpY3NFbmdpbmVBZGFwdGVyKClbYGdldCR7ZGF0YU5hbWV9YF0odGhpcy5lbnRpdHlPYmplY3QpO1xuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkYXRhICE9PSBudWxsID8gZGF0YSA6IHRoaXNbYF8ke2xvd2VyRmlyc3RDaGFyKGRhdGFOYW1lKX1gXTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gZ2V0dGVyLmNhbGwodGhpcyk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBkZXNjcmlwdG9yLnNldCA9IGZ1bmN0aW9uKHZhbCl7XG4gICAgICAgICAgICAgICAgc2V0dGVyLmNhbGwodGhpcywgdmFsKTtcblxuICAgICAgICAgICAgICAgIGlmKHRoaXMuaXNQaHlzaWNzRW5naW5lQWRhcHRlckV4aXN0KCkpe1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmdldFBoeXNpY3NFbmdpbmVBZGFwdGVyKClbYHNldCR7ZGF0YU5hbWV9YF0odGhpcy5lbnRpdHlPYmplY3QsIHZhbCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgcmV0dXJuIGRlc2NyaXB0b3I7XG4gICAgICAgIH1cbiAgICB9XG5cblxuICAgIGV4cG9ydCBmdW5jdGlvbiBvcGVyYXRlV29ybGREYXRhR2V0dGVyQW5kU2V0dGVyKGRhdGFOYW1lKSB7XG5cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQsIG5hbWUsIGRlc2NyaXB0b3IpIHtcbiAgICAgICAgICAgICAgICB2YXIgZ2V0dGVyID0gZGVzY3JpcHRvci5nZXQsXG4gICAgICAgICAgICAgICAgc2V0dGVyID0gZGVzY3JpcHRvci5zZXQ7XG5cbiAgICAgICAgICAgIGRlc2NyaXB0b3IuZ2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBzY2VuZSA9IERpcmVjdG9yLmdldEluc3RhbmNlKCkuc2NlbmU7XG5cbiAgICAgICAgICAgICAgICBpZihpc1dvcmxkRGVmaW5lZChzY2VuZSkpe1xuICAgICAgICAgICAgICAgICAgICBsZXQgZGF0YSA9IHNjZW5lLnBoeXNpY3NFbmdpbmVBZGFwdGVyW2BnZXQke2RhdGFOYW1lfWBdKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRhdGEgIT09IG51bGwgPyBkYXRhIDogdGhpc1tgXyR7bG93ZXJGaXJzdENoYXIoZGF0YU5hbWUpfWBdO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiBnZXR0ZXIuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGRlc2NyaXB0b3Iuc2V0ID0gZnVuY3Rpb24odmFsKXtcbiAgICAgICAgICAgICAgICB2YXIgc2NlbmUgPSBEaXJlY3Rvci5nZXRJbnN0YW5jZSgpLnNjZW5lO1xuXG4gICAgICAgICAgICAgICAgc2V0dGVyLmNhbGwodGhpcywgdmFsKTtcblxuICAgICAgICAgICAgICAgIGlmKGlzV29ybGREZWZpbmVkKHNjZW5lKSl7XG4gICAgICAgICAgICAgICAgICAgIHNjZW5lLnBoeXNpY3NFbmdpbmVBZGFwdGVyW2BzZXQke2RhdGFOYW1lfWBdKHZhbCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgcmV0dXJuIGRlc2NyaXB0b3I7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc1dvcmxkRGVmaW5lZChzY2VuZTpTY2VuZURpc3BhdGNoZXIpe1xuICAgICAgICByZXR1cm4gc2NlbmUucGh5c2ljc0VuZ2luZUFkYXB0ZXIgJiYgc2NlbmUucGh5c2ljc0VuZ2luZUFkYXB0ZXIud29ybGQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbG93ZXJGaXJzdENoYXIoc3RyKXtcbiAgICAgICAgdmFyIGZpcnN0Q2hhciA9IHN0ci5zbGljZSgwLCAxKTtcblxuICAgICAgICByZXR1cm4gYCR7Zmlyc3RDaGFyLnRvTG93ZXJDYXNlKCl9JHtzdHIuc2xpY2UoMSl9YDtcbiAgICB9XG59XG4iLCJtb2R1bGUgd2Qge1xuICAgIGV4cG9ydCBmdW5jdGlvbiBzY3JpcHQoc2NyaXB0TmFtZTpzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICAgICAgICAgIFNjcmlwdC5hZGRTY3JpcHQoc2NyaXB0TmFtZSwgdGFyZ2V0KTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsIm1vZHVsZSB3ZCB7XG4gICAgZXhwb3J0IGZ1bmN0aW9uIGV4ZWNPbmx5T25jZShmbGFnTmFtZTpzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQsIG5hbWUsIGRlc2NyaXB0b3IpIHtcbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IGRlc2NyaXB0b3IudmFsdWU7XG5cbiAgICAgICAgICAgIGRlc2NyaXB0b3IudmFsdWUgPSBmdW5jdGlvbiAoLi4uYXJncykge1xuICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBudWxsO1xuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXNbZmxhZ05hbWVdKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0aGlzW2ZsYWdOYW1lXSA9IHRydWU7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWUuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICByZXR1cm4gZGVzY3JpcHRvcjtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuIiwibW9kdWxlIHdkIHtcbiAgICBleHBvcnQgY29uc3QgQUJTVFJBQ1RfQVRUUklCVVRFID0gbnVsbDtcbn1cblxuIiwibW9kdWxlIHdke1xuICAgIGV4cG9ydCB2YXIgcm9vdDphbnk7XG59XG5cbmRlY2xhcmUgdmFyIGdsb2JhbDphbnksd2luZG93OldpbmRvdztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KHdkLCBcInJvb3RcIiwge1xuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmKHdkLkp1ZGdlVXRpbHMuaXNOb2RlSnMoKSl7XG4gICAgICAgICAgICByZXR1cm4gZ2xvYmFsO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHdpbmRvdztcbiAgICB9XG59KTtcbiIsIm1vZHVsZSB3ZCB7XG4gICAgZGVjbGFyZSB2YXIgTWF0aDphbnk7XG5cbiAgICAvKipcbiAgICAgKiBAbmFtZSBERUdfVE9fUkFEXG4gICAgICogQGRlc2NyaXB0aW9uIENvbnZlcnNpb24gZmFjdG9yIGJldHdlZW4gZGVncmVlcyBhbmQgcmFkaWFuc1xuICAgICAqIEB0eXBlIE51bWJlclxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gQ29udmVydCAxODAgZGVncmVlcyB0byBwaSByYWRpYW5zXG4gICAgICogdmFyIHJhZCA9IDE4MCAqIERFR19UT19SQUQ7XG4gICAgICovXG4gICAgZXhwb3J0IGNvbnN0IERFR19UT19SQUQgPSBNYXRoLlBJIC8gMTgwO1xuXG4gICAgLyoqXG4gICAgICogQG5hbWUgUkFEX1RPX0RFR1xuICAgICAqIEBkZXNjcmlwdGlvbiBDb252ZXJzaW9uIGZhY3RvciBiZXR3ZWVuIGRlZ3JlZXMgYW5kIHJhZGlhbnNcbiAgICAgKiBAdHlwZSBOdW1iZXJcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIENvbnZlcnQgcGkgcmFkaWFucyB0byAxODAgZGVncmVlc1xuICAgICAqIHZhciBkZWcgPSBNYXRoLlBJICogUkFEX1RPX0RFRztcbiAgICAgKi9cbiAgICBleHBvcnQgY29uc3QgUkFEX1RPX0RFRyA9IDE4MCAvIE1hdGguUEk7XG59XG4iLCJtb2R1bGUgd2R7XG4gICAgZXhwb3J0IGNsYXNzIFZlY3RvcjJ7XG4gICAgICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlKHgsIHkpOlZlY3RvcjIgO1xuICAgICAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZSgpOlZlY3RvcjIgO1xuXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlKC4uLmFyZ3MpOlZlY3RvcjIge1xuICAgICAgICAgICAgdmFyIG0gPSBudWxsO1xuXG4gICAgICAgICAgICBpZihhcmdzLmxlbmd0aCA9PT0gMCl7XG4gICAgICAgICAgICAgICAgbSA9IG5ldyB0aGlzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgIG0gPSBuZXcgdGhpcyhhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIG07XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdHJ1Y3Rvcih4LCB5KTtcbiAgICAgICAgY29uc3RydWN0b3IoKTtcbiAgICAgICAgY29uc3RydWN0b3IoLi4uYXJncyl7XG4gICAgICAgICAgICB0aGlzLnZhbHVlcyA9IG5ldyBGbG9hdDMyQXJyYXkoMik7XG5cbiAgICAgICAgICAgIGlmKGFyZ3MubGVuZ3RoID4gMCl7XG4gICAgICAgICAgICAgICAgdGhpcy52YWx1ZXNbMF0gPSBhcmdzWzBdO1xuICAgICAgICAgICAgICAgIHRoaXMudmFsdWVzWzFdID0gYXJnc1sxXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGdldCB4KCl7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy52YWx1ZXNbMF07XG4gICAgICAgIH1cbiAgICAgICAgc2V0IHgoeDpudW1iZXIpe1xuICAgICAgICAgICAgdGhpcy52YWx1ZXNbMF0gPSB4O1xuICAgICAgICB9XG5cbiAgICAgICAgZ2V0IHkoKXtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnZhbHVlc1sxXTtcbiAgICAgICAgfVxuICAgICAgICBzZXQgeSh5Om51bWJlcil7XG4gICAgICAgICAgICB0aGlzLnZhbHVlc1sxXSA9IHk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgdmFsdWVzOiBGbG9hdDMyQXJyYXk7XG5cbiAgICAgICAgcHVibGljIHNldCh4Om51bWJlciwgeTpudW1iZXIpe1xuICAgICAgICAgICAgdGhpcy54ID0geDtcbiAgICAgICAgICAgIHRoaXMueSA9IHk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgYWRkKHY6VmVjdG9yMil7XG4gICAgICAgICAgICB0aGlzLnZhbHVlc1swXSA9IHRoaXMudmFsdWVzWzBdICsgdi52YWx1ZXNbMF07XG4gICAgICAgICAgICB0aGlzLnZhbHVlc1sxXSA9IHRoaXMudmFsdWVzWzFdICsgdi52YWx1ZXNbMV07XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIG11bCh2OlZlY3RvcjIpe1xuICAgICAgICAgICAgdGhpcy52YWx1ZXNbMF0gPSB0aGlzLnZhbHVlc1swXSAqIHYudmFsdWVzWzBdO1xuICAgICAgICAgICAgdGhpcy52YWx1ZXNbMV0gPSB0aGlzLnZhbHVlc1sxXSAqIHYudmFsdWVzWzFdO1xuXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBjb3B5KCl7XG4gICAgICAgICAgICByZXR1cm4gVmVjdG9yMi5jcmVhdGUodGhpcy54LCB0aGlzLnkpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4iLCJtb2R1bGUgd2R7XG4gICAgZGVjbGFyZSB2YXIgTWF0aDphbnk7XG5cbiAgICBleHBvcnQgY2xhc3MgVmVjdG9yM3tcbiAgICAgICAgcHVibGljIHN0YXRpYyB1cCA9IFZlY3RvcjMuY3JlYXRlKDAsIDEsIDApO1xuICAgICAgICBwdWJsaWMgc3RhdGljIGZvcndhcmQgPSBWZWN0b3IzLmNyZWF0ZSgwLCAwLCAxKTtcbiAgICAgICAgcHVibGljIHN0YXRpYyByaWdodCA9IFZlY3RvcjMuY3JlYXRlKDEsIDAsIDApO1xuXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlKHgsIHksIHopOlZlY3RvcjMgO1xuICAgICAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZSgpOlZlY3RvcjMgO1xuXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlKC4uLmFyZ3MpOlZlY3RvcjMge1xuICAgICAgICAgICAgdmFyIG0gPSBudWxsO1xuXG4gICAgICAgICAgICBpZihhcmdzLmxlbmd0aCA9PT0gMCl7XG4gICAgICAgICAgICAgICAgbSA9IG5ldyB0aGlzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgIG0gPSBuZXcgdGhpcyhhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIG07XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdHJ1Y3Rvcih4LCB5LCB6KTtcbiAgICAgICAgY29uc3RydWN0b3IoKTtcbiAgICAgICAgY29uc3RydWN0b3IoLi4uYXJncyl7XG4gICAgICAgICAgICB0aGlzLnZhbHVlcyA9IG5ldyBGbG9hdDMyQXJyYXkoMyk7XG5cbiAgICAgICAgICAgIGlmKGFyZ3MubGVuZ3RoID4gMCl7XG4gICAgICAgICAgICAgICAgdGhpcy52YWx1ZXNbMF0gPSBhcmdzWzBdO1xuICAgICAgICAgICAgICAgIHRoaXMudmFsdWVzWzFdID0gYXJnc1sxXTtcbiAgICAgICAgICAgICAgICB0aGlzLnZhbHVlc1syXSA9YXJnc1syXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGdldCB4KCl7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy52YWx1ZXNbMF07XG4gICAgICAgIH1cbiAgICAgICAgc2V0IHgoeDpudW1iZXIpe1xuICAgICAgICAgICAgdGhpcy52YWx1ZXNbMF0gPSB4O1xuICAgICAgICB9XG5cbiAgICAgICAgZ2V0IHkoKXtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnZhbHVlc1sxXTtcbiAgICAgICAgfVxuICAgICAgICBzZXQgeSh5Om51bWJlcil7XG4gICAgICAgICAgICB0aGlzLnZhbHVlc1sxXSA9IHk7XG4gICAgICAgIH1cblxuICAgICAgICBnZXQgeigpe1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudmFsdWVzWzJdO1xuICAgICAgICB9XG4gICAgICAgIHNldCB6KHo6bnVtYmVyKXtcbiAgICAgICAgICAgIHRoaXMudmFsdWVzWzJdID0gejtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyB2YWx1ZXM6IEZsb2F0MzJBcnJheSA9IG51bGw7XG5cbiAgICAgICAgcHVibGljIG5vcm1hbGl6ZSgpOiBWZWN0b3Ize1xuICAgICAgICAgICAgdmFyIHYgPSB0aGlzLnZhbHVlcztcbiAgICAgICAgICAgIHZhciBkID0gTWF0aC5zcXJ0KFxuICAgICAgICAgICAgICAgIHZbMF0gKiB2WzBdICsgdlsxXSAqIHZbMV0gKyB2WzJdICogdlsyXVxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgaWYoZCA9PT0gMCl7XG4gICAgICAgICAgICAgICAgdlswXSA9IDA7XG4gICAgICAgICAgICAgICAgdlsxXSA9IDA7XG4gICAgICAgICAgICAgICAgdlsyXSA9IDA7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZbMF0gPSB2WzBdIC8gZDtcbiAgICAgICAgICAgIHZbMV0gPSB2WzFdIC8gZDtcbiAgICAgICAgICAgIHZbMl0gPSB2WzJdIC8gZDtcblxuICAgICAgICAgICAgLy8gZm9yIGphc21pbmUgdGVzdDpcbiAgICAgICAgICAgIC8vIC0wLmlzRXF1YWwoMCk7Ly9ub3QgcGFzcywgc28gaGVyZSBjaGFuZ2UgLTAgdG8gMFxuICAgICAgICAgICAgaWYodlswXSA9PT0gLTApe1xuICAgICAgICAgICAgICAgIHZbMF0gPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYodlsxXSA9PT0gLTApe1xuICAgICAgICAgICAgICAgIHZbMV0gPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYodlsyXSA9PT0gLTApe1xuICAgICAgICAgICAgICAgIHZbMl0gPSAwO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBpc1plcm8oKXtcbiAgICAgICAgICAgIHZhciB2ID0gdGhpcy52YWx1ZXM7XG5cbiAgICAgICAgICAgIHJldHVybiB2WzBdID09PSAwICYmIHZbMV0gPT09IDAgJiYgdlsyXSA9PT0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBzY2FsZShzY2FsYXI6bnVtYmVyKTtcbiAgICAgICAgcHVibGljIHNjYWxlKHg6bnVtYmVyLCB5Om51bWJlciwgejpudW1iZXIpO1xuXG4gICAgICAgIHB1YmxpYyBzY2FsZSguLi5hcmdzKSB7XG4gICAgICAgICAgICB2YXIgdiA9IHRoaXMudmFsdWVzO1xuXG4gICAgICAgICAgICBpZihhcmdzLmxlbmd0aCA9PT0gMSl7XG4gICAgICAgICAgICAgICAgbGV0IHNjYWxhciA9IGFyZ3NbMF07XG5cbiAgICAgICAgICAgICAgICB2WzBdICo9IHNjYWxhcjtcbiAgICAgICAgICAgICAgICB2WzFdICo9IHNjYWxhcjtcbiAgICAgICAgICAgICAgICB2WzJdICo9IHNjYWxhcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYoYXJncy5sZW5ndGggPT09IDMpe1xuICAgICAgICAgICAgICAgIGxldCB4ID0gYXJnc1swXSxcbiAgICAgICAgICAgICAgICAgICAgeSA9IGFyZ3NbMV0sXG4gICAgICAgICAgICAgICAgICAgIHogPSBhcmdzWzJdO1xuXG4gICAgICAgICAgICAgICAgdlswXSAqPSB4O1xuICAgICAgICAgICAgICAgIHZbMV0gKj0geTtcbiAgICAgICAgICAgICAgICB2WzJdICo9IHo7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHNldCh2OlZlY3RvcjMpO1xuICAgICAgICBwdWJsaWMgc2V0KHg6bnVtYmVyLCB5Om51bWJlciwgejpudW1iZXIpO1xuXG4gICAgICAgIHB1YmxpYyBzZXQoLi4uYXJncyl7XG4gICAgICAgICAgICBpZihhcmdzLmxlbmd0aCA9PT0gMyl7XG4gICAgICAgICAgICAgICAgdGhpcy54ID0gYXJnc1swXTtcbiAgICAgICAgICAgICAgICB0aGlzLnkgPSBhcmdzWzFdO1xuICAgICAgICAgICAgICAgIHRoaXMueiA9IGFyZ3NbMl07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgIGxldCB2OlZlY3RvcjMgPSBhcmdzWzBdO1xuXG4gICAgICAgICAgICAgICAgdGhpcy54ID0gdi54O1xuICAgICAgICAgICAgICAgIHRoaXMueSA9IHYueTtcbiAgICAgICAgICAgICAgICB0aGlzLnogPSB2Lno7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgc3ViKHY6VmVjdG9yMyk6VmVjdG9yMyB7XG4gICAgICAgICAgICB0aGlzLnZhbHVlc1swXSA9IHRoaXMudmFsdWVzWzBdIC0gdi52YWx1ZXNbMF07XG4gICAgICAgICAgICB0aGlzLnZhbHVlc1sxXSA9IHRoaXMudmFsdWVzWzFdIC0gdi52YWx1ZXNbMV07XG4gICAgICAgICAgICB0aGlzLnZhbHVlc1syXSA9IHRoaXMudmFsdWVzWzJdIC0gdi52YWx1ZXNbMl07XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHN1YjIodjE6VmVjdG9yMywgdjI6VmVjdG9yMyl7XG4gICAgICAgICAgICB0aGlzLnZhbHVlc1swXSA9IHYxLnZhbHVlc1swXSAtIHYyLnZhbHVlc1swXTtcbiAgICAgICAgICAgIHRoaXMudmFsdWVzWzFdID0gdjEudmFsdWVzWzFdIC0gdjIudmFsdWVzWzFdO1xuICAgICAgICAgICAgdGhpcy52YWx1ZXNbMl0gPSB2MS52YWx1ZXNbMl0gLSB2Mi52YWx1ZXNbMl07XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGFkZCh2OlZlY3RvcjMpe1xuICAgICAgICAgICAgdGhpcy52YWx1ZXNbMF0gPSB0aGlzLnZhbHVlc1swXSArIHYudmFsdWVzWzBdO1xuICAgICAgICAgICAgdGhpcy52YWx1ZXNbMV0gPSB0aGlzLnZhbHVlc1sxXSArIHYudmFsdWVzWzFdO1xuICAgICAgICAgICAgdGhpcy52YWx1ZXNbMl0gPSB0aGlzLnZhbHVlc1syXSArIHYudmFsdWVzWzJdO1xuXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBhZGQyKHYxOlZlY3RvcjMsIHYyOlZlY3RvcjMpe1xuICAgICAgICAgICAgdGhpcy52YWx1ZXNbMF0gPSB2MS52YWx1ZXNbMF0gKyB2Mi52YWx1ZXNbMF07XG4gICAgICAgICAgICB0aGlzLnZhbHVlc1sxXSA9IHYxLnZhbHVlc1sxXSArIHYyLnZhbHVlc1sxXTtcbiAgICAgICAgICAgIHRoaXMudmFsdWVzWzJdID0gdjEudmFsdWVzWzJdICsgdjIudmFsdWVzWzJdO1xuXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBtdWwodjpWZWN0b3IzKXtcbiAgICAgICAgICAgIHRoaXMudmFsdWVzWzBdID0gdGhpcy52YWx1ZXNbMF0gKiB2LnZhbHVlc1swXTtcbiAgICAgICAgICAgIHRoaXMudmFsdWVzWzFdID0gdGhpcy52YWx1ZXNbMV0gKiB2LnZhbHVlc1sxXTtcbiAgICAgICAgICAgIHRoaXMudmFsdWVzWzJdID0gdGhpcy52YWx1ZXNbMl0gKiAgdi52YWx1ZXNbMl07XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIG11bDIodjE6VmVjdG9yMywgdjI6VmVjdG9yMyl7XG4gICAgICAgICAgICB0aGlzLnZhbHVlc1swXSA9IHYxLnZhbHVlc1swXSAqIHYyLnZhbHVlc1swXTtcbiAgICAgICAgICAgIHRoaXMudmFsdWVzWzFdID0gdjEudmFsdWVzWzFdICogdjIudmFsdWVzWzFdO1xuICAgICAgICAgICAgdGhpcy52YWx1ZXNbMl0gPSB2MS52YWx1ZXNbMl0gKiAgdjIudmFsdWVzWzJdO1xuXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyByZXZlcnNlKCk6VmVjdG9yM3tcbiAgICAgICAgICAgIHRoaXMudmFsdWVzWzBdID0gLXRoaXMudmFsdWVzWzBdO1xuICAgICAgICAgICAgdGhpcy52YWx1ZXNbMV0gPSAtdGhpcy52YWx1ZXNbMV07XG4gICAgICAgICAgICB0aGlzLnZhbHVlc1syXSA9IC10aGlzLnZhbHVlc1syXTtcblxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgY29weSgpOiBWZWN0b3Ize1xuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IFZlY3RvcjMuY3JlYXRlKCksXG4gICAgICAgICAgICAgICAgaSA9IDAsXG4gICAgICAgICAgICAgICAgbGVuID0gdGhpcy52YWx1ZXMubGVuZ3RoO1xuXG4gICAgICAgICAgICBmb3IoaSA9IDA7IGkgPCBsZW47IGkrKyl7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnZhbHVlc1tpXSA9IHRoaXMudmFsdWVzW2ldO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHRvVmVjdG9yNCgpOiBWZWN0b3I0e1xuICAgICAgICAgICAgcmV0dXJuIFZlY3RvcjQuY3JlYXRlKHRoaXMudmFsdWVzWzBdLCB0aGlzLnZhbHVlc1sxXSwgdGhpcy52YWx1ZXNbMl0sIDEuMCk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgbGVuZ3RoKCkge1xuICAgICAgICAgICAgdmFyIHYgPSB0aGlzLnZhbHVlcztcblxuICAgICAgICAgICAgcmV0dXJuIE1hdGguc3FydCh2WzBdICogdlswXSArIHZbMV0gKiB2WzFdICsgdlsyXSAqIHZbMl0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBmdW5jdGlvblxuICAgICAgICAgKiBAbmFtZSBjcm9zc1xuICAgICAgICAgKiBAZGVzY3JpcHRpb24gUmV0dXJucyB0aGUgcmVzdWx0IG9mIGEgY3Jvc3MgcHJvZHVjdCBvcGVyYXRpb24gcGVyZm9ybWVkIG9uIHRoZSB0d28gc3BlY2lmaWVkIDMtZGltZW5zaW9uYWwgdmVjdG9ycy5cbiAgICAgICAgICogQHBhcmFtIHtWZWMzfSBsaHMgVGhlIGZpcnN0IDMtZGltZW5zaW9uYWwgdmVjdG9yIG9wZXJhbmQgb2YgdGhlIGNyb3NzIHByb2R1Y3QuXG4gICAgICAgICAqIEBwYXJhbSB7VmVjM30gcmhzIFRoZSBzZWNvbmQgMy1kaW1lbnNpb25hbCB2ZWN0b3Igb3BlcmFuZCBvZiB0aGUgY3Jvc3MgcHJvZHVjdC5cbiAgICAgICAgICogQHJldHVybnMge1ZlYzN9IFNlbGYgZm9yIGNoYWluaW5nLlxuICAgICAgICAgKiBAZXhhbXBsZVxuICAgICAgICAgKiB2YXIgYmFjayA9IG5ldyBWZWMzKCkuY3Jvc3MoVmVjMy5SSUdIVCwgVmVjMy5VUCk7XG4gICAgICAgICAqXG4gICAgICAgICAqIC8vIFNob3VsZCBwcmludCB0aGUgWiBheGlzIChpLmUuIFswLCAwLCAxXSlcbiAgICAgICAgICogY29uc29sZS5sb2coXCJUaGUgcmVzdWx0IG9mIHRoZSBjcm9zcyBwcm9kdWN0IGlzOiBcIiArIGJhY2sudG9TdHJpbmcoKSk7XG4gICAgICAgICAqL1xuICAgICAgICBwdWJsaWMgY3Jvc3MobGhzOlZlY3RvcjMsIHJoczpWZWN0b3IzKSB7XG4gICAgICAgICAgICB2YXIgYSwgYiwgciwgYXgsIGF5LCBheiwgYngsIGJ5LCBiejtcblxuICAgICAgICAgICAgYSA9IGxocy52YWx1ZXM7XG4gICAgICAgICAgICBiID0gcmhzLnZhbHVlcztcbiAgICAgICAgICAgIHIgPSB0aGlzLnZhbHVlcztcblxuICAgICAgICAgICAgYXggPSBhWzBdO1xuICAgICAgICAgICAgYXkgPSBhWzFdO1xuICAgICAgICAgICAgYXogPSBhWzJdO1xuICAgICAgICAgICAgYnggPSBiWzBdO1xuICAgICAgICAgICAgYnkgPSBiWzFdO1xuICAgICAgICAgICAgYnogPSBiWzJdO1xuXG4gICAgICAgICAgICByWzBdID0gYXkgKiBieiAtIGJ5ICogYXo7XG4gICAgICAgICAgICByWzFdID0gYXogKiBieCAtIGJ6ICogYXg7XG4gICAgICAgICAgICByWzJdID0gYXggKiBieSAtIGJ4ICogYXk7XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBmdW5jdGlvblxuICAgICAgICAgKiBAbmFtZSBsZXJwXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBSZXR1cm5zIHRoZSByZXN1bHQgb2YgYSBsaW5lYXIgaW50ZXJwb2xhdGlvbiBiZXR3ZWVuIHR3byBzcGVjaWZpZWQgMy1kaW1lbnNpb25hbCB2ZWN0b3JzLlxuICAgICAgICAgKiBAcGFyYW0ge1ZlYzN9IGxocyBUaGUgMy1kaW1lbnNpb25hbCB0byBpbnRlcnBvbGF0ZSBmcm9tLlxuICAgICAgICAgKiBAcGFyYW0ge1ZlYzN9IHJocyBUaGUgMy1kaW1lbnNpb25hbCB0byBpbnRlcnBvbGF0ZSB0by5cbiAgICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IGFscGhhIFRoZSB2YWx1ZSBjb250cm9sbGluZyB0aGUgcG9pbnQgb2YgaW50ZXJwb2xhdGlvbi4gQmV0d2VlbiAwIGFuZCAxLCB0aGUgbGluZWFyIGludGVycG9sYW50XG4gICAgICAgICAqIHdpbGwgb2NjdXIgb24gYSBzdHJhaWdodCBsaW5lIGJldHdlZW4gbGhzIGFuZCByaHMuIE91dHNpZGUgb2YgdGhpcyByYW5nZSwgdGhlIGxpbmVhciBpbnRlcnBvbGFudCB3aWxsIG9jY3VyIG9uXG4gICAgICAgICAqIGEgcmF5IGV4dHJhcG9sYXRlZCBmcm9tIHRoaXMgbGluZS5cbiAgICAgICAgICogQHJldHVybnMge1ZlYzN9IFNlbGYgZm9yIGNoYWluaW5nLlxuICAgICAgICAgKiBAZXhhbXBsZVxuICAgICAgICAgKiB2YXIgYSA9IG5ldyBWZWMzKDAsIDAsIDApO1xuICAgICAgICAgKiB2YXIgYiA9IG5ldyBWZWMzKDEwLCAxMCwgMTApO1xuICAgICAgICAgKiB2YXIgciA9IG5ldyBWZWMzKCk7XG4gICAgICAgICAqXG4gICAgICAgICAqIHIubGVycChhLCBiLCAwKTsgICAvLyByIGlzIGVxdWFsIHRvIGFcbiAgICAgICAgICogci5sZXJwKGEsIGIsIDAuNSk7IC8vIHIgaXMgNSwgNSwgNVxuICAgICAgICAgKiByLmxlcnAoYSwgYiwgMSk7ICAgLy8gciBpcyBlcXVhbCB0byBiXG4gICAgICAgICAqL1xuICAgICAgICBwdWJsaWMgbGVycChsaHM6VmVjdG9yMywgcmhzOlZlY3RvcjMsIGFscGhhOm51bWJlcikge1xuICAgICAgICAgICAgdmFyIGEgPSBsaHMudmFsdWVzLFxuICAgICAgICAgICAgICAgIGIgPSByaHMudmFsdWVzLFxuICAgICAgICAgICAgICAgIHIgPSB0aGlzLnZhbHVlcztcblxuICAgICAgICAgICAgclswXSA9IGFbMF0gKyBhbHBoYSAqIChiWzBdIC0gYVswXSk7XG4gICAgICAgICAgICByWzFdID0gYVsxXSArIGFscGhhICogKGJbMV0gLSBhWzFdKTtcbiAgICAgICAgICAgIHJbMl0gPSBhWzJdICsgYWxwaGEgKiAoYlsyXSAtIGFbMl0pO1xuXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAZnVuY3Rpb25cbiAgICAgICAgICogQG5hbWUgZG90XG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBSZXR1cm5zIHRoZSByZXN1bHQgb2YgYSBkb3QgcHJvZHVjdCBvcGVyYXRpb24gcGVyZm9ybWVkIG9uIHRoZSB0d28gc3BlY2lmaWVkIDMtZGltZW5zaW9uYWwgdmVjdG9ycy5cbiAgICAgICAgICogQHBhcmFtIHtWZWMzfSByaHMgVGhlIHNlY29uZCAzLWRpbWVuc2lvbmFsIHZlY3RvciBvcGVyYW5kIG9mIHRoZSBkb3QgcHJvZHVjdC5cbiAgICAgICAgICogQHJldHVybnMge051bWJlcn0gVGhlIHJlc3VsdCBvZiB0aGUgZG90IHByb2R1Y3Qgb3BlcmF0aW9uLlxuICAgICAgICAgKiBAZXhhbXBsZVxuICAgICAgICAgKiB2YXIgdjEgPSBuZXcgVmVjMyg1LCAxMCwgMjApO1xuICAgICAgICAgKiB2YXIgdjIgPSBuZXcgVmVjMygxMCwgMjAsIDQwKTtcbiAgICAgICAgICogdmFyIHYxZG90djIgPSB2MS5kb3QodjIpO1xuICAgICAgICAgKiBjb25zb2xlLmxvZyhcIlRoZSByZXN1bHQgb2YgdGhlIGRvdCBwcm9kdWN0IGlzOiBcIiArIHYxZG90djIpO1xuICAgICAgICAgKi9cbiAgICAgICAgcHVibGljIGRvdChyaHMpIHtcbiAgICAgICAgICAgIHZhciBhID0gdGhpcy52YWx1ZXMsXG4gICAgICAgICAgICAgICAgYiA9IHJocy52YWx1ZXM7XG5cbiAgICAgICAgICAgIHJldHVybiBhWzBdICogYlswXSArIGFbMV0gKiBiWzFdICsgYVsyXSAqIGJbMl07XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgbWluKHY6VmVjdG9yMykge1xuICAgICAgICAgICAgaWYgKHRoaXMueCA+IHYueCkge1xuICAgICAgICAgICAgICAgIHRoaXMueCA9IHYueDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLnkgPiB2LnkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnkgPSB2Lnk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy56ID4gdi56KSB7XG4gICAgICAgICAgICAgICAgdGhpcy56ID0gdi56O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcblxuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIG1heCh2OlZlY3RvcjMpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnggPCB2LngpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnggPSB2Lng7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy55IDwgdi55KSB7XG4gICAgICAgICAgICAgICAgdGhpcy55ID0gdi55O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMueiA8IHYueikge1xuICAgICAgICAgICAgICAgIHRoaXMueiA9IHYuejtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBpc0VxdWFsKHY6VmVjdG9yMyl7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy54ID09PSB2LnggJiYgdGhpcy55ID09PSB2LnkgJiYgdGhpcy56ID09PSB2Lno7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgdG9BcnJheSgpe1xuICAgICAgICAgICAgcmV0dXJuIFt0aGlzLngsIHRoaXMueSwgdGhpcy56XTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBhcHBseU1hdHJpeDQobTpNYXRyaXg0KSB7XG4gICAgICAgICAgICB2YXIgeCA9IHRoaXMueCxcbiAgICAgICAgICAgICAgICB5ID0gdGhpcy55LFxuICAgICAgICAgICAgICAgIHogPSB0aGlzLnosXG4gICAgICAgICAgICAgICAgZSA9IG0udmFsdWVzO1xuXG4gICAgICAgICAgICB0aGlzLnggPSBlWyAwIF0gKiB4ICsgZVsgNCBdICogeSArIGVbIDggXSAgKiB6ICsgZVsgMTIgXTtcbiAgICAgICAgICAgIHRoaXMueSA9IGVbIDEgXSAqIHggKyBlWyA1IF0gKiB5ICsgZVsgOSBdICAqIHogKyBlWyAxMyBdO1xuICAgICAgICAgICAgdGhpcy56ID0gZVsgMiBdICogeCArIGVbIDYgXSAqIHkgKyBlWyAxMCBdICogeiArIGVbIDE0IF07XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGRpc3RhbmNlVG8odjpWZWN0b3IzKSB7XG4gICAgICAgICAgICByZXR1cm4gTWF0aC5zcXJ0KHRoaXMuZGlzdGFuY2VUb1NxdWFyZWQodikpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGRpc3RhbmNlVG9TcXVhcmVkKHY6VmVjdG9yMykge1xuICAgICAgICAgICAgdmFyIGR4ID0gdGhpcy54IC0gdi54LFxuICAgICAgICAgICAgICAgIGR5ID0gdGhpcy55IC0gdi55LFxuICAgICAgICAgICAgICAgIGR6ID0gdGhpcy56IC0gdi56O1xuXG4gICAgICAgICAgICByZXR1cm4gZHgqKjIgKyBkeSoqMiArIGR6KioyO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwibW9kdWxlIHdke1xuICAgIGRlY2xhcmUgdmFyIE1hdGg6YW55O1xuXG4gICAgZXhwb3J0IGNsYXNzIFZlY3RvcjR7XG4gICAgICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlKHgsIHksIHosIHcpO1xuICAgICAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZSgpO1xuICAgICAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZSguLi5hcmdzKXtcbiAgICAgICAgICAgIHZhciBtID0gbnVsbDtcblxuICAgICAgICAgICAgaWYoYXJncy5sZW5ndGggPT09IDApe1xuICAgICAgICAgICAgICAgIG0gPSBuZXcgdGhpcygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICBtID0gbmV3IHRoaXMoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBtO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3RydWN0b3IoeCwgeSwgeiwgdyk7XG4gICAgICAgIGNvbnN0cnVjdG9yKCk7XG4gICAgICAgIGNvbnN0cnVjdG9yKC4uLmFyZ3Mpe1xuICAgICAgICAgICAgdGhpcy52YWx1ZXMgPSBuZXcgRmxvYXQzMkFycmF5KDQpO1xuXG4gICAgICAgICAgICBpZihhcmdzLmxlbmd0aCA+IDApe1xuICAgICAgICAgICAgICAgIHRoaXMudmFsdWVzWzBdID0gYXJnc1swXTtcbiAgICAgICAgICAgICAgICB0aGlzLnZhbHVlc1sxXSA9IGFyZ3NbMV07XG4gICAgICAgICAgICAgICAgdGhpcy52YWx1ZXNbMl0gPWFyZ3NbMl07XG4gICAgICAgICAgICAgICAgdGhpcy52YWx1ZXNbM10gPWFyZ3NbM107XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBnZXQgeCgpe1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudmFsdWVzWzBdO1xuICAgICAgICB9XG4gICAgICAgIHNldCB4KHg6bnVtYmVyKXtcbiAgICAgICAgICAgIHRoaXMudmFsdWVzWzBdID0geDtcbiAgICAgICAgfVxuXG4gICAgICAgIGdldCB5KCl7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy52YWx1ZXNbMV07XG4gICAgICAgIH1cbiAgICAgICAgc2V0IHkoeTpudW1iZXIpe1xuICAgICAgICAgICAgdGhpcy52YWx1ZXNbMV0gPSB5O1xuICAgICAgICB9XG5cbiAgICAgICAgZ2V0IHooKXtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnZhbHVlc1syXTtcbiAgICAgICAgfVxuICAgICAgICBzZXQgeih6Om51bWJlcil7XG4gICAgICAgICAgICB0aGlzLnZhbHVlc1syXSA9IHo7XG4gICAgICAgIH1cblxuICAgICAgICBnZXQgdygpe1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudmFsdWVzWzNdO1xuICAgICAgICB9XG4gICAgICAgIHNldCB3KHc6bnVtYmVyKXtcbiAgICAgICAgICAgIHRoaXMudmFsdWVzWzNdID0gdztcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyB2YWx1ZXM6IEZsb2F0MzJBcnJheTtcblxuICAgICAgICBwdWJsaWMgbm9ybWFsaXplKCk6IFZlY3RvcjR7XG4gICAgICAgICAgICB2YXIgdiA9IHRoaXMudmFsdWVzO1xuICAgICAgICAgICAgdmFyIGQgPSBNYXRoLnNxcnQoXG4gICAgICAgICAgICAgICAgdlswXSAqIHZbMF0gKyB2WzFdICogdlsxXSArIHZbMl0gKiB2WzJdICsgdlszXSAqIHZbM11cbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIGlmKGQgPT09IDApe1xuICAgICAgICAgICAgICAgIHJldHVybiBWZWN0b3I0LmNyZWF0ZSgwLCAwLCAwLCAwKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdlswXSA9IHZbMF0gLyBkO1xuICAgICAgICAgICAgdlsxXSA9IHZbMV0gLyBkO1xuICAgICAgICAgICAgdlsyXSA9IHZbMl0gLyBkO1xuICAgICAgICAgICAgdlszXSA9IHZbM10gLyBkO1xuXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBjb3B5KCk6VmVjdG9yNHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvcHlIZWxwZXIoVmVjdG9yNC5jcmVhdGUoKSk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgdG9WZWN0b3IzKCk6IFZlY3RvcjN7XG4gICAgICAgICAgICByZXR1cm4gVmVjdG9yMy5jcmVhdGUodGhpcy52YWx1ZXNbMF0sIHRoaXMudmFsdWVzWzFdLCB0aGlzLnZhbHVlc1syXSk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgbXVsdGlwbHlTY2FsYXIoc2NhbGFyOm51bWJlcikge1xuICAgICAgICAgICAgdGhpcy54ICo9IHNjYWxhcjtcbiAgICAgICAgICAgIHRoaXMueSAqPSBzY2FsYXI7XG4gICAgICAgICAgICB0aGlzLnogKj0gc2NhbGFyO1xuICAgICAgICAgICAgdGhpcy53ICo9IHNjYWxhcjtcblxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgZG90KHY6VmVjdG9yNCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMueCAqIHYueCArIHRoaXMueSAqIHYueSArIHRoaXMueiAqIHYueiArIHRoaXMudyAqIHYudztcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBzZXQoeDpudW1iZXIsIHk6bnVtYmVyLCB6Om51bWJlciwgdzpudW1iZXIpe1xuICAgICAgICAgICAgdGhpcy54ID0geDtcbiAgICAgICAgICAgIHRoaXMueSA9IHk7XG4gICAgICAgICAgICB0aGlzLnogPSB6O1xuICAgICAgICAgICAgdGhpcy53ID0gdztcbiAgICAgICAgfVxuXG4gICAgICAgIHByb3RlY3RlZCBjb3B5SGVscGVyKHZlY3RvcjQ6VmVjdG9yNCk6YW55e1xuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHZlY3RvcjQsXG4gICAgICAgICAgICAgICAgaSA9IDAsXG4gICAgICAgICAgICAgICAgbGVuID0gdGhpcy52YWx1ZXMubGVuZ3RoO1xuXG4gICAgICAgICAgICBmb3IoaSA9IDA7IGkgPCBsZW47IGkrKyl7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnZhbHVlc1tpXSA9IHRoaXMudmFsdWVzW2ldO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgfVxufVxuIiwibW9kdWxlIHdke1xuICAgIGRlY2xhcmUgdmFyIE1hdGg6YW55O1xuXG4gICAgLyohXG4gICAgIOazqOaEj++8muefqemYteWFg+e0oOaYr+aMieWIl+S4u+W6j+WtmOWCqOWcqOaVsOe7hOS4reeahOOAglxuICAgICAqL1xuICAgIGV4cG9ydCBjbGFzcyBNYXRyaXg0e1xuICAgICAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZShtYXQ6RmxvYXQzMkFycmF5KTpNYXRyaXg0O1xuICAgICAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZSgpOk1hdHJpeDQ7XG5cbiAgICAgICAgcHVibGljIHN0YXRpYyBjcmVhdGUoLi4uYXJncyk6TWF0cml4NCB7XG4gICAgICAgICAgICB2YXIgbSA9IG51bGw7XG5cbiAgICAgICAgICAgIGlmKGFyZ3MubGVuZ3RoID09PSAwKXtcbiAgICAgICAgICAgICAgICBtID0gbmV3IHRoaXMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICAgICAgbSA9IG5ldyB0aGlzKGFyZ3NbMF0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gbTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0cnVjdG9yKG1hdDpGbG9hdDMyQXJyYXkpO1xuICAgICAgICBjb25zdHJ1Y3RvcigpO1xuXG4gICAgICAgIGNvbnN0cnVjdG9yKC4uLmFyZ3MpIHtcbiAgICAgICAgICAgIGlmIChhcmdzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgICAgIHRoaXMudmFsdWVzID0gYXJnc1swXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMudmFsdWVzID0gbmV3IEZsb2F0MzJBcnJheShbMSwgMCwgMCwgMCwgMCwgMSwgMCwgMCwgMCwgMCwgMSwgMCwgMCwgMCwgMCwgMV0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLl9tYXRyaXhBcnIgPSBbXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyB2YWx1ZXM6IEZsb2F0MzJBcnJheSA9IG51bGw7XG5cbiAgICAgICAgcHJpdmF0ZSBfbWF0cml4QXJyOkFycmF5PEZsb2F0MzJBcnJheT4gPSBudWxsO1xuXG4gICAgICAgIHB1YmxpYyBwdXNoKCl7XG4gICAgICAgICAgICB0aGlzLl9tYXRyaXhBcnIucHVzaCh0aGlzLnZhbHVlcyk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgcG9wKCl7XG4gICAgICAgICAgICB0aGlzLnZhbHVlcyA9IHRoaXMuX21hdHJpeEFyci5wb3AoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBzZXRJZGVudGl0eSAoKTogTWF0cml4NCB7XG4gICAgICAgICAgICB2YXIgZSA9IHRoaXMudmFsdWVzO1xuICAgICAgICAgICAgZVswXSA9IDE7ICAgZVs0XSA9IDA7ICAgZVs4XSAgPSAwOyAgIGVbMTJdID0gMDtcbiAgICAgICAgICAgIGVbMV0gPSAwOyAgIGVbNV0gPSAxOyAgIGVbOV0gID0gMDsgICBlWzEzXSA9IDA7XG4gICAgICAgICAgICBlWzJdID0gMDsgICBlWzZdID0gMDsgICBlWzEwXSA9IDE7ICAgZVsxNF0gPSAwO1xuICAgICAgICAgICAgZVszXSA9IDA7ICAgZVs3XSA9IDA7ICAgZVsxMV0gPSAwOyAgIGVbMTVdID0gMTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENhbGN1bGF0ZSB0aGUgaW52ZXJzZSBtYXRyaXggb2Ygc3BlY2lmaWVkIG1hdHJpeCwgYW5kIHNldCB0byB0aGlzLlxuICAgICAgICAgKiBAcGFyYW0gb3RoZXIgVGhlIHNvdXJjZSBtYXRyaXhcbiAgICAgICAgICogQHJldHVybiB0aGlzXG4gICAgICAgICAqL1xuICAgICAgICBwdWJsaWMgaW52ZXJ0ICgpOk1hdHJpeDQge1xuICAgICAgICAgICAgdmFyIGEwMCwgYTAxLCBhMDIsIGEwMyxcbiAgICAgICAgICAgICAgICBhMTAsIGExMSwgYTEyLCBhMTMsXG4gICAgICAgICAgICAgICAgYTIwLCBhMjEsIGEyMiwgYTIzLFxuICAgICAgICAgICAgICAgIGEzMCwgYTMxLCBhMzIsIGEzMyxcbiAgICAgICAgICAgICAgICBiMDAsIGIwMSwgYjAyLCBiMDMsXG4gICAgICAgICAgICAgICAgYjA0LCBiMDUsIGIwNiwgYjA3LFxuICAgICAgICAgICAgICAgIGIwOCwgYjA5LCBiMTAsIGIxMSxcbiAgICAgICAgICAgICAgICBpbnZEZXQsIG07XG5cbiAgICAgICAgICAgIG0gPSB0aGlzLnZhbHVlcztcbiAgICAgICAgICAgIGEwMCA9IG1bMF07XG4gICAgICAgICAgICBhMDEgPSBtWzFdO1xuICAgICAgICAgICAgYTAyID0gbVsyXTtcbiAgICAgICAgICAgIGEwMyA9IG1bM107XG4gICAgICAgICAgICBhMTAgPSBtWzRdO1xuICAgICAgICAgICAgYTExID0gbVs1XTtcbiAgICAgICAgICAgIGExMiA9IG1bNl07XG4gICAgICAgICAgICBhMTMgPSBtWzddO1xuICAgICAgICAgICAgYTIwID0gbVs4XTtcbiAgICAgICAgICAgIGEyMSA9IG1bOV07XG4gICAgICAgICAgICBhMjIgPSBtWzEwXTtcbiAgICAgICAgICAgIGEyMyA9IG1bMTFdO1xuICAgICAgICAgICAgYTMwID0gbVsxMl07XG4gICAgICAgICAgICBhMzEgPSBtWzEzXTtcbiAgICAgICAgICAgIGEzMiA9IG1bMTRdO1xuICAgICAgICAgICAgYTMzID0gbVsxNV07XG5cbiAgICAgICAgICAgIGIwMCA9IGEwMCAqIGExMSAtIGEwMSAqIGExMDtcbiAgICAgICAgICAgIGIwMSA9IGEwMCAqIGExMiAtIGEwMiAqIGExMDtcbiAgICAgICAgICAgIGIwMiA9IGEwMCAqIGExMyAtIGEwMyAqIGExMDtcbiAgICAgICAgICAgIGIwMyA9IGEwMSAqIGExMiAtIGEwMiAqIGExMTtcbiAgICAgICAgICAgIGIwNCA9IGEwMSAqIGExMyAtIGEwMyAqIGExMTtcbiAgICAgICAgICAgIGIwNSA9IGEwMiAqIGExMyAtIGEwMyAqIGExMjtcbiAgICAgICAgICAgIGIwNiA9IGEyMCAqIGEzMSAtIGEyMSAqIGEzMDtcbiAgICAgICAgICAgIGIwNyA9IGEyMCAqIGEzMiAtIGEyMiAqIGEzMDtcbiAgICAgICAgICAgIGIwOCA9IGEyMCAqIGEzMyAtIGEyMyAqIGEzMDtcbiAgICAgICAgICAgIGIwOSA9IGEyMSAqIGEzMiAtIGEyMiAqIGEzMTtcbiAgICAgICAgICAgIGIxMCA9IGEyMSAqIGEzMyAtIGEyMyAqIGEzMTtcbiAgICAgICAgICAgIGIxMSA9IGEyMiAqIGEzMyAtIGEyMyAqIGEzMjtcblxuICAgICAgICAgICAgaW52RGV0ID0gMSAvIChiMDAgKiBiMTEgLSBiMDEgKiBiMTAgKyBiMDIgKiBiMDkgKyBiMDMgKiBiMDggLSBiMDQgKiBiMDcgKyBiMDUgKiBiMDYpO1xuXG4gICAgICAgICAgICBtWzBdID0gKGExMSAqIGIxMSAtIGExMiAqIGIxMCArIGExMyAqIGIwOSkgKiBpbnZEZXQ7XG4gICAgICAgICAgICBtWzFdID0gKC1hMDEgKiBiMTEgKyBhMDIgKiBiMTAgLSBhMDMgKiBiMDkpICogaW52RGV0O1xuICAgICAgICAgICAgbVsyXSA9IChhMzEgKiBiMDUgLSBhMzIgKiBiMDQgKyBhMzMgKiBiMDMpICogaW52RGV0O1xuICAgICAgICAgICAgbVszXSA9ICgtYTIxICogYjA1ICsgYTIyICogYjA0IC0gYTIzICogYjAzKSAqIGludkRldDtcbiAgICAgICAgICAgIG1bNF0gPSAoLWExMCAqIGIxMSArIGExMiAqIGIwOCAtIGExMyAqIGIwNykgKiBpbnZEZXQ7XG4gICAgICAgICAgICBtWzVdID0gKGEwMCAqIGIxMSAtIGEwMiAqIGIwOCArIGEwMyAqIGIwNykgKiBpbnZEZXQ7XG4gICAgICAgICAgICBtWzZdID0gKC1hMzAgKiBiMDUgKyBhMzIgKiBiMDIgLSBhMzMgKiBiMDEpICogaW52RGV0O1xuICAgICAgICAgICAgbVs3XSA9IChhMjAgKiBiMDUgLSBhMjIgKiBiMDIgKyBhMjMgKiBiMDEpICogaW52RGV0O1xuICAgICAgICAgICAgbVs4XSA9IChhMTAgKiBiMTAgLSBhMTEgKiBiMDggKyBhMTMgKiBiMDYpICogaW52RGV0O1xuICAgICAgICAgICAgbVs5XSA9ICgtYTAwICogYjEwICsgYTAxICogYjA4IC0gYTAzICogYjA2KSAqIGludkRldDtcbiAgICAgICAgICAgIG1bMTBdID0gKGEzMCAqIGIwNCAtIGEzMSAqIGIwMiArIGEzMyAqIGIwMCkgKiBpbnZEZXQ7XG4gICAgICAgICAgICBtWzExXSA9ICgtYTIwICogYjA0ICsgYTIxICogYjAyIC0gYTIzICogYjAwKSAqIGludkRldDtcbiAgICAgICAgICAgIG1bMTJdID0gKC1hMTAgKiBiMDkgKyBhMTEgKiBiMDcgLSBhMTIgKiBiMDYpICogaW52RGV0O1xuICAgICAgICAgICAgbVsxM10gPSAoYTAwICogYjA5IC0gYTAxICogYjA3ICsgYTAyICogYjA2KSAqIGludkRldDtcbiAgICAgICAgICAgIG1bMTRdID0gKC1hMzAgKiBiMDMgKyBhMzEgKiBiMDEgLSBhMzIgKiBiMDApICogaW52RGV0O1xuICAgICAgICAgICAgbVsxNV0gPSAoYTIwICogYjAzIC0gYTIxICogYjAxICsgYTIyICogYjAwKSAqIGludkRldDtcblxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgaW52ZXJ0VG8zeDMoKTpNYXRyaXgzIHtcbiAgICAgICAgdmFyIGExMSwgYTIxLCBhMzEsIGExMiwgYTIyLCBhMzIsIGExMywgYTIzLCBhMzMsXG4gICAgICAgICAgICBtLCByLCBkZXQsIGlkZXQ7XG4gICAgICAgICAgICB2YXIgbWF0MyA9IE1hdHJpeDMuY3JlYXRlKCk7XG5cbiAgICAgICAgbSA9IHRoaXMudmFsdWVzO1xuXG4gICAgICAgIHIgPSBtYXQzLnZhbHVlcztcblxuICAgICAgICBhMTEgPSAgbVsxMF0gKiBtWzVdIC0gbVs2XSAqIG1bOV07XG4gICAgICAgIGEyMSA9IC1tWzEwXSAqIG1bMV0gKyBtWzJdICogbVs5XTtcbiAgICAgICAgYTMxID0gIG1bNl0gICogbVsxXSAtIG1bMl0gKiBtWzVdO1xuICAgICAgICBhMTIgPSAtbVsxMF0gKiBtWzRdICsgbVs2XSAqIG1bOF07XG4gICAgICAgIGEyMiA9ICBtWzEwXSAqIG1bMF0gLSBtWzJdICogbVs4XTtcbiAgICAgICAgYTMyID0gLW1bNl0gICogbVswXSArIG1bMl0gKiBtWzRdO1xuICAgICAgICBhMTMgPSAgbVs5XSAgKiBtWzRdIC0gbVs1XSAqIG1bOF07XG4gICAgICAgIGEyMyA9IC1tWzldICAqIG1bMF0gKyBtWzFdICogbVs4XTtcbiAgICAgICAgYTMzID0gIG1bNV0gICogbVswXSAtIG1bMV0gKiBtWzRdO1xuXG4gICAgICAgIGRldCA9ICBtWzBdICogYTExICsgbVsxXSAqIGExMiArIG1bMl0gKiBhMTM7XG4gICAgICAgIGlmIChkZXQgPT09IDApIHsgLy8gbm8gaW52ZXJzZVxuICAgICAgICAgICAgICAgIExvZy53YXJuKFwiY2FuJ3QgaW52ZXJ0IG1hdHJpeCwgZGV0ZXJtaW5hbnQgaXMgMFwiKTtcblxuICAgICAgICAgICAgcmV0dXJuIG1hdDM7XG4gICAgICAgIH1cblxuICAgICAgICBpZGV0ID0gMSAvIGRldDtcblxuICAgICAgICByWzBdID0gaWRldCAqIGExMTtcbiAgICAgICAgclsxXSA9IGlkZXQgKiBhMjE7XG4gICAgICAgIHJbMl0gPSBpZGV0ICogYTMxO1xuICAgICAgICByWzNdID0gaWRldCAqIGExMjtcbiAgICAgICAgcls0XSA9IGlkZXQgKiBhMjI7XG4gICAgICAgIHJbNV0gPSBpZGV0ICogYTMyO1xuICAgICAgICByWzZdID0gaWRldCAqIGExMztcbiAgICAgICAgcls3XSA9IGlkZXQgKiBhMjM7XG4gICAgICAgIHJbOF0gPSBpZGV0ICogYTMzO1xuXG4gICAgICAgIHJldHVybiBtYXQzO1xuICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogVHJhbnNwb3NlIHRoZSBtYXRyaXguXG4gICAgICAgICAqIEByZXR1cm4gdGhpc1xuICAgICAgICAgKi9cbiAgICAgICAgcHVibGljIHRyYW5zcG9zZSAoKTpNYXRyaXg0IHtcbiAgICAgICAgICAgIHZhciB0ZSA9IHRoaXMudmFsdWVzO1xuICAgICAgICAgICAgdmFyIHRtcDtcblxuICAgICAgICAgICAgdG1wID0gdGVbIDEgXTsgdGVbIDEgXSA9IHRlWyA0IF07IHRlWyA0IF0gPSB0bXA7XG4gICAgICAgICAgICB0bXAgPSB0ZVsgMiBdOyB0ZVsgMiBdID0gdGVbIDggXTsgdGVbIDggXSA9IHRtcDtcbiAgICAgICAgICAgIHRtcCA9IHRlWyA2IF07IHRlWyA2IF0gPSB0ZVsgOSBdOyB0ZVsgOSBdID0gdG1wO1xuXG4gICAgICAgICAgICB0bXAgPSB0ZVsgMyBdOyB0ZVsgMyBdID0gdGVbIDEyIF07IHRlWyAxMiBdID0gdG1wO1xuICAgICAgICAgICAgdG1wID0gdGVbIDcgXTsgdGVbIDcgXSA9IHRlWyAxMyBdOyB0ZVsgMTMgXSA9IHRtcDtcbiAgICAgICAgICAgIHRtcCA9IHRlWyAxMSBdOyB0ZVsgMTEgXSA9IHRlWyAxNCBdOyB0ZVsgMTQgXSA9IHRtcDtcblxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogU2V0IHRoZSBtYXRyaXggZm9yIHRyYW5zbGF0aW9uLlxuICAgICAgICAgKiBAcGFyYW0geCBUaGUgWCB2YWx1ZSBvZiBhIHRyYW5zbGF0aW9uLlxuICAgICAgICAgKiBAcGFyYW0geSBUaGUgWSB2YWx1ZSBvZiBhIHRyYW5zbGF0aW9uLlxuICAgICAgICAgKiBAcGFyYW0geiBUaGUgWiB2YWx1ZSBvZiBhIHRyYW5zbGF0aW9uLlxuICAgICAgICAgKiBAcmV0dXJuIHRoaXNcbiAgICAgICAgICovXG4gICAgICAgIHB1YmxpYyBzZXRUcmFuc2xhdGUgKHgsIHksIHopOiBNYXRyaXg0IHtcbiAgICAgICAgICAgIHZhciBlID0gdGhpcy52YWx1ZXM7XG4gICAgICAgICAgICBlWzBdID0gMTsgIGVbNF0gPSAwOyAgZVs4XSAgPSAwOyAgZVsxMl0gPSB4O1xuICAgICAgICAgICAgZVsxXSA9IDA7ICBlWzVdID0gMTsgIGVbOV0gID0gMDsgIGVbMTNdID0geTtcbiAgICAgICAgICAgIGVbMl0gPSAwOyAgZVs2XSA9IDA7ICBlWzEwXSA9IDE7ICBlWzE0XSA9IHo7XG4gICAgICAgICAgICBlWzNdID0gMDsgIGVbN10gPSAwOyAgZVsxMV0gPSAwOyAgZVsxNV0gPSAxO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogTXVsdGlwbHkgdGhlIG1hdHJpeCBmb3IgdHJhbnNsYXRpb24gZnJvbSB0aGUgcmlnaHQuXG4gICAgICAgICAqIEBwYXJhbSB4IFRoZSBYIHZhbHVlIG9mIGEgdHJhbnNsYXRpb24uXG4gICAgICAgICAqIEBwYXJhbSB5IFRoZSBZIHZhbHVlIG9mIGEgdHJhbnNsYXRpb24uXG4gICAgICAgICAqIEBwYXJhbSB6IFRoZSBaIHZhbHVlIG9mIGEgdHJhbnNsYXRpb24uXG4gICAgICAgICAqIEByZXR1cm4gdGhpc1xuICAgICAgICAgKi9cbiAgICAgICAgcHVibGljIHRyYW5zbGF0ZSAoeCwgeSwgeik6IE1hdHJpeDQge1xuICAgICAgICAgICAgdGhpcy5hcHBseU1hdHJpeChNYXRyaXg0LmNyZWF0ZSgpLnNldFRyYW5zbGF0ZSh4LCB5LCB6KSk7XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNldCB0aGUgbWF0cml4IGZvciByb3RhdGlvbi5cbiAgICAgICAgICogVGhlIHZlY3RvciBvZiByb3RhdGlvbiBheGlzIG1heSBub3QgYmUgbm9ybWFsaXplZC5cbiAgICAgICAgICogQHBhcmFtIGFuZ2xlIFRoZSBhbmdsZSBvZiByb3RhdGlvbiAoZGVncmVlcylcbiAgICAgICAgICogQHBhcmFtIHggVGhlIFggY29vcmRpbmF0ZSBvZiB2ZWN0b3Igb2Ygcm90YXRpb24gYXhpcy5cbiAgICAgICAgICogQHBhcmFtIHkgVGhlIFkgY29vcmRpbmF0ZSBvZiB2ZWN0b3Igb2Ygcm90YXRpb24gYXhpcy5cbiAgICAgICAgICogQHBhcmFtIHogVGhlIFogY29vcmRpbmF0ZSBvZiB2ZWN0b3Igb2Ygcm90YXRpb24gYXhpcy5cbiAgICAgICAgICogQHJldHVybiB0aGlzXG4gICAgICAgICAqL1xuICAgICAgICBwdWJsaWMgc2V0Um90YXRlIChhbmdsZTogbnVtYmVyLCB4OiBudW1iZXIsIHk6IG51bWJlciwgejpudW1iZXIpOiBNYXRyaXg0IHtcbiAgICAgICAgICAgIHZhciBlLCBzLCBjLCBsZW4sIHJsZW4sIG5jLCB4eSwgeXosIHp4LCB4cywgeXMsIHpzO1xuXG4gICAgICAgICAgICB2YXIgYW5nbGUgPSBNYXRoLlBJICogYW5nbGUgLyAxODA7XG4gICAgICAgICAgICBlID0gdGhpcy52YWx1ZXM7XG5cbiAgICAgICAgICAgIHMgPSBNYXRoLnNpbihhbmdsZSk7XG4gICAgICAgICAgICBjID0gTWF0aC5jb3MoYW5nbGUpO1xuXG4gICAgICAgICAgICBpZiAoMCAhPT0geCAmJiAwID09PSB5ICYmIDAgPT09IHopIHtcbiAgICAgICAgICAgICAgICAvLyBSb3RhdGlvbiBhcm91bmQgWCBheGlzXG4gICAgICAgICAgICAgICAgaWYgKHggPCAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHMgPSAtcztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZVswXSA9IDE7ICBlWzRdID0gMDsgIGVbIDhdID0gMDsgIGVbMTJdID0gMDtcbiAgICAgICAgICAgICAgICBlWzFdID0gMDsgIGVbNV0gPSBjOyAgZVsgOV0gPS1zOyAgZVsxM10gPSAwO1xuICAgICAgICAgICAgICAgIGVbMl0gPSAwOyAgZVs2XSA9IHM7ICBlWzEwXSA9IGM7ICBlWzE0XSA9IDA7XG4gICAgICAgICAgICAgICAgZVszXSA9IDA7ICBlWzddID0gMDsgIGVbMTFdID0gMDsgIGVbMTVdID0gMTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoMCA9PT0geCAmJiAwICE9PSB5ICYmIDAgPT09IHopIHtcbiAgICAgICAgICAgICAgICAvLyBSb3RhdGlvbiBhcm91bmQgWSBheGlzXG4gICAgICAgICAgICAgICAgaWYgKHkgPCAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHMgPSAtcztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZVswXSA9IGM7ICBlWzRdID0gMDsgIGVbIDhdID0gczsgIGVbMTJdID0gMDtcbiAgICAgICAgICAgICAgICBlWzFdID0gMDsgIGVbNV0gPSAxOyAgZVsgOV0gPSAwOyAgZVsxM10gPSAwO1xuICAgICAgICAgICAgICAgIGVbMl0gPS1zOyAgZVs2XSA9IDA7ICBlWzEwXSA9IGM7ICBlWzE0XSA9IDA7XG4gICAgICAgICAgICAgICAgZVszXSA9IDA7ICBlWzddID0gMDsgIGVbMTFdID0gMDsgIGVbMTVdID0gMTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoMCA9PT0geCAmJiAwID09PSB5ICYmIDAgIT09IHopIHtcbiAgICAgICAgICAgICAgICAvLyBSb3RhdGlvbiBhcm91bmQgWiBheGlzXG4gICAgICAgICAgICAgICAgaWYgKHogPCAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHMgPSAtcztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZVswXSA9IGM7ICBlWzRdID0tczsgIGVbIDhdID0gMDsgIGVbMTJdID0gMDtcbiAgICAgICAgICAgICAgICBlWzFdID0gczsgIGVbNV0gPSBjOyAgZVsgOV0gPSAwOyAgZVsxM10gPSAwO1xuICAgICAgICAgICAgICAgIGVbMl0gPSAwOyAgZVs2XSA9IDA7ICBlWzEwXSA9IDE7ICBlWzE0XSA9IDA7XG4gICAgICAgICAgICAgICAgZVszXSA9IDA7ICBlWzddID0gMDsgIGVbMTFdID0gMDsgIGVbMTVdID0gMTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gUm90YXRpb24gYXJvdW5kIGFub3RoZXIgYXhpc1xuICAgICAgICAgICAgICAgIGxlbiA9IE1hdGguc3FydCh4KnggKyB5KnkgKyB6KnopO1xuICAgICAgICAgICAgICAgIGlmIChsZW4gIT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgLy/ovazmjaLkuLrljZXkvY3lkJHph49cbiAgICAgICAgICAgICAgICAgICAgcmxlbiA9IDEgLyBsZW47XG4gICAgICAgICAgICAgICAgICAgIHggKj0gcmxlbjtcbiAgICAgICAgICAgICAgICAgICAgeSAqPSBybGVuO1xuICAgICAgICAgICAgICAgICAgICB6ICo9IHJsZW47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgbmMgPSAxIC0gYztcbiAgICAgICAgICAgICAgICB4eSA9IHggKiB5O1xuICAgICAgICAgICAgICAgIHl6ID0geSAqIHo7XG4gICAgICAgICAgICAgICAgenggPSB6ICogeDtcbiAgICAgICAgICAgICAgICB4cyA9IHggKiBzO1xuICAgICAgICAgICAgICAgIHlzID0geSAqIHM7XG4gICAgICAgICAgICAgICAgenMgPSB6ICogcztcblxuICAgICAgICAgICAgICAgIGVbIDBdID0geCp4Km5jICsgIGM7XG4gICAgICAgICAgICAgICAgZVsgMV0gPSB4eSAqbmMgKyB6cztcbiAgICAgICAgICAgICAgICBlWyAyXSA9IHp4ICpuYyAtIHlzO1xuICAgICAgICAgICAgICAgIGVbIDNdID0gMDtcblxuICAgICAgICAgICAgICAgIGVbIDRdID0geHkgKm5jIC0genM7XG4gICAgICAgICAgICAgICAgZVsgNV0gPSB5KnkqbmMgKyAgYztcbiAgICAgICAgICAgICAgICBlWyA2XSA9IHl6ICpuYyArIHhzO1xuICAgICAgICAgICAgICAgIGVbIDddID0gMDtcblxuICAgICAgICAgICAgICAgIGVbIDhdID0genggKm5jICsgeXM7XG4gICAgICAgICAgICAgICAgZVsgOV0gPSB5eiAqbmMgLSB4cztcbiAgICAgICAgICAgICAgICBlWzEwXSA9IHoqeipuYyArICBjO1xuICAgICAgICAgICAgICAgIGVbMTFdID0gMDtcblxuICAgICAgICAgICAgICAgIGVbMTJdID0gMDtcbiAgICAgICAgICAgICAgICBlWzEzXSA9IDA7XG4gICAgICAgICAgICAgICAgZVsxNF0gPSAwO1xuICAgICAgICAgICAgICAgIGVbMTVdID0gMTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogTXVsdGlwbHkgdGhlIG1hdHJpeCBmb3Igcm90YXRpb24gZnJvbSB0aGUgcmlnaHQuXG4gICAgICAgICAqIFRoZSB2ZWN0b3Igb2Ygcm90YXRpb24gYXhpcyBtYXkgbm90IGJlIG5vcm1hbGl6ZWQuXG4gICAgICAgICAqIEBwYXJhbSBhbmdsZSBUaGUgYW5nbGUgb2Ygcm90YXRpb24gKGRlZ3JlZXMpXG4gICAgICAgICAqIEBwYXJhbSB4IFRoZSBYIGNvb3JkaW5hdGUgb2YgdmVjdG9yIG9mIHJvdGF0aW9uIGF4aXMuXG4gICAgICAgICAqIEBwYXJhbSB5IFRoZSBZIGNvb3JkaW5hdGUgb2YgdmVjdG9yIG9mIHJvdGF0aW9uIGF4aXMuXG4gICAgICAgICAqIEBwYXJhbSB6IFRoZSBaIGNvb3JkaW5hdGUgb2YgdmVjdG9yIG9mIHJvdGF0aW9uIGF4aXMuXG4gICAgICAgICAqIEByZXR1cm4gdGhpc1xuICAgICAgICAgKi9cbiAgICAgICAgcHVibGljIHJvdGF0ZSAoYW5nbGUsIHZlY3RvcjM6VmVjdG9yMyk6IE1hdHJpeDQ7XG4gICAgICAgIHB1YmxpYyByb3RhdGUgKGFuZ2xlLCB4LCB5LCB6KTogTWF0cml4NDtcblxuICAgICAgICBwdWJsaWMgcm90YXRlICguLi5hcmdzKTogTWF0cml4NCB7XG4gICAgICAgICAgICB2YXIgYW5nbGUgPSBhcmdzWzBdO1xuXG4gICAgICAgICAgICBpZihhcmdzLmxlbmd0aCA9PT0gMil7XG4gICAgICAgICAgICAgICAgbGV0IHZlY3RvcjMgPSBhcmdzWzFdO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5hcHBseU1hdHJpeChNYXRyaXg0LmNyZWF0ZSgpLnNldFJvdGF0ZShhbmdsZSwgdmVjdG9yMy52YWx1ZXNbMF0sIHZlY3RvcjMudmFsdWVzWzFdLCB2ZWN0b3IzLnZhbHVlc1syXSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZihhcmdzLmxlbmd0aCA9PT0gNCl7XG4gICAgICAgICAgICAgICAgbGV0IHggPSBhcmdzWzFdLFxuICAgICAgICAgICAgICAgICAgICB5ID0gYXJnc1syXSxcbiAgICAgICAgICAgICAgICAgICAgeiA9IGFyZ3NbM107XG5cbiAgICAgICAgICAgICAgICB0aGlzLmFwcGx5TWF0cml4KE1hdHJpeDQuY3JlYXRlKCkuc2V0Um90YXRlKGFuZ2xlLCB4LCB5LCB6KSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNldCB0aGUgbWF0cml4IGZvciBzY2FsaW5nLlxuICAgICAgICAgKiBAcGFyYW0geCBUaGUgc2NhbGUgZmFjdG9yIGFsb25nIHRoZSBYIGF4aXNcbiAgICAgICAgICogQHBhcmFtIHkgVGhlIHNjYWxlIGZhY3RvciBhbG9uZyB0aGUgWSBheGlzXG4gICAgICAgICAqIEBwYXJhbSB6IFRoZSBzY2FsZSBmYWN0b3IgYWxvbmcgdGhlIFogYXhpc1xuICAgICAgICAgKiBAcmV0dXJuIHRoaXNcbiAgICAgICAgICovXG4gICAgICAgIHB1YmxpYyBzZXRTY2FsZSAoeCwgeSwgeik6TWF0cml4NCB7XG4gICAgICAgICAgICB2YXIgZSA9IHRoaXMudmFsdWVzO1xuICAgICAgICAgICAgZVswXSA9IHg7ICBlWzRdID0gMDsgIGVbOF0gID0gMDsgIGVbMTJdID0gMDtcbiAgICAgICAgICAgIGVbMV0gPSAwOyAgZVs1XSA9IHk7ICBlWzldICA9IDA7ICBlWzEzXSA9IDA7XG4gICAgICAgICAgICBlWzJdID0gMDsgIGVbNl0gPSAwOyAgZVsxMF0gPSB6OyAgZVsxNF0gPSAwO1xuICAgICAgICAgICAgZVszXSA9IDA7ICBlWzddID0gMDsgIGVbMTFdID0gMDsgIGVbMTVdID0gMTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIE11bHRpcGx5IHRoZSBtYXRyaXggZm9yIHNjYWxpbmcgZnJvbSB0aGUgcmlnaHQuXG4gICAgICAgICAqIEBwYXJhbSB4IFRoZSBzY2FsZSBmYWN0b3IgYWxvbmcgdGhlIFggYXhpc1xuICAgICAgICAgKiBAcGFyYW0geSBUaGUgc2NhbGUgZmFjdG9yIGFsb25nIHRoZSBZIGF4aXNcbiAgICAgICAgICogQHBhcmFtIHogVGhlIHNjYWxlIGZhY3RvciBhbG9uZyB0aGUgWiBheGlzXG4gICAgICAgICAqIEByZXR1cm4gdGhpc1xuICAgICAgICAgKi9cbiAgICAgICAgcHVibGljIHNjYWxlICh4LCB5LCB6KTpNYXRyaXg0IHtcbiAgICAgICAgICAgIHRoaXMuYXBwbHlNYXRyaXgoTWF0cml4NC5jcmVhdGUoKS5zZXRTY2FsZSh4LCB5LCB6KSk7XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHNldExvb2tBdCAoZXllOlZlY3RvcjMsIGNlbnRlcjpWZWN0b3IzLCB1cDpWZWN0b3IzKTpNYXRyaXg0O1xuICAgICAgICBwdWJsaWMgc2V0TG9va0F0IChleWVYOm51bWJlciwgZXllWTpudW1iZXIsIGV5ZVo6bnVtYmVyLCBjZW50ZXJYOm51bWJlciwgY2VudGVyWTpudW1iZXIsIGNlbnRlclo6bnVtYmVyLCB1cFg6bnVtYmVyLCB1cFk6bnVtYmVyLCB1cFo6bnVtYmVyKTpNYXRyaXg0O1xuICAgICAgICBcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBmdW5jdGlvblxuICAgICAgICAgKiBAbmFtZSBzZXRMb29rQXRcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIFNldHMgdGhlIHNwZWNpZmllZCBtYXRyaXggdG8gYSB2aWV3aW5nIG1hdHJpeCBkZXJpdmVkIGZyb20gYW4gZXllIHBvaW50LCBhIHRhcmdldCBwb2ludFxuICAgICAgICAgKiBhbmQgYW4gdXAgdmVjdG9yLiBUaGUgbWF0cml4IG1hcHMgdGhlIHRhcmdldCBwb2ludCB0byB0aGUgbmVnYXRpdmUgei1heGlzIGFuZCB0aGUgZXllIHBvaW50IHRvIHRoZVxuICAgICAgICAgKiBvcmlnaW4sIHNvIHRoYXQgd2hlbiB5b3UgdXNlIGEgdHlwaWNhbCBwcm9qZWN0aW9uIG1hdHJpeCwgdGhlIGNlbnRlciBvZiB0aGUgc2NlbmUgbWFwcyB0byB0aGUgY2VudGVyXG4gICAgICAgICAqIG9mIHRoZSB2aWV3cG9ydC4gU2ltaWxhcmx5LCB0aGUgZGlyZWN0aW9uIGRlc2NyaWJlZCBieSB0aGUgdXAgdmVjdG9yIHByb2plY3RlZCBvbnRvIHRoZSB2aWV3aW5nIHBsYW5lXG4gICAgICAgICAqIGlzIG1hcHBlZCB0byB0aGUgcG9zaXRpdmUgeS1heGlzIHNvIHRoYXQgaXQgcG9pbnRzIHVwd2FyZCBpbiB0aGUgdmlld3BvcnQuIFRoZSB1cCB2ZWN0b3IgbXVzdCBub3QgYmVcbiAgICAgICAgICogcGFyYWxsZWwgdG8gdGhlIGxpbmUgb2Ygc2lnaHQgZnJvbSB0aGUgZXllIHRvIHRoZSByZWZlcmVuY2UgcG9pbnQuXG4gICAgICAgICAqIEBwYXJhbSB7VmVjM30gcG9zaXRpb24gMy1kIHZlY3RvciBob2xkaW5nIHZpZXcgcG9zaXRpb24uXG4gICAgICAgICAqIEBwYXJhbSB7VmVjM30gdGFyZ2V0IDMtZCB2ZWN0b3IgaG9sZGluZyByZWZlcmVuY2UgcG9pbnQuXG4gICAgICAgICAqIEBwYXJhbSB7VmVjM30gdXAgMy1kIHZlY3RvciBob2xkaW5nIHRoZSB1cCBkaXJlY3Rpb24uXG4gICAgICAgICAqIEByZXR1cm5zIHtNYXQ0fSBTZWxmIGZvciBjaGFpbmluZy5cbiAgICAgICAgICovXG4gICAgICAgIHB1YmxpYyBzZXRMb29rQXQoLi4uYXJncykge1xuICAgICAgICAgICAgdmFyIHgsIHksIHosXG4gICAgICAgICAgICAgICAgZXllLCBjZW50ZXIsIHVwO1xuXG4gICAgICAgICAgICBpZihhcmdzLmxlbmd0aCA9PT0gMyl7XG4gICAgICAgICAgICAgICAgZXllID0gYXJnc1swXTtcbiAgICAgICAgICAgICAgICBjZW50ZXIgPSBhcmdzWzFdO1xuICAgICAgICAgICAgICAgIHVwID0gYXJnc1syXVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZihhcmdzLmxlbmd0aCA9PT0gOSl7XG4gICAgICAgICAgICAgICAgZXllID0gVmVjdG9yMy5jcmVhdGUoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgICAgICAgICAgICAgY2VudGVyID0gVmVjdG9yMy5jcmVhdGUoYXJnc1szXSwgYXJnc1s0XSwgYXJnc1s1XSk7XG4gICAgICAgICAgICAgICAgdXAgPSBWZWN0b3IzLmNyZWF0ZShhcmdzWzZdLCBhcmdzWzddLCBhcmdzWzhdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHggPSBWZWN0b3IzLmNyZWF0ZSgpO1xuXG4gICAgICAgICAgICB6ID0gZXllLmNvcHkoKS5zdWIoY2VudGVyKS5ub3JtYWxpemUoKTtcblxuICAgICAgICAgICAgeSA9IHVwLmNvcHkoKS5ub3JtYWxpemUoKTtcbiAgICAgICAgICAgIHguY3Jvc3MoeSwgeikubm9ybWFsaXplKCk7XG4gICAgICAgICAgICB5LmNyb3NzKHosIHgpO1xuXG4gICAgICAgICAgICB2YXIgciA9IHRoaXMudmFsdWVzO1xuXG4gICAgICAgICAgICByWzBdICA9IHgueDtcbiAgICAgICAgICAgIHJbMV0gID0geC55O1xuICAgICAgICAgICAgclsyXSAgPSB4Lno7XG4gICAgICAgICAgICByWzNdICA9IDA7XG4gICAgICAgICAgICByWzRdICA9IHkueDtcbiAgICAgICAgICAgIHJbNV0gID0geS55O1xuICAgICAgICAgICAgcls2XSAgPSB5Lno7XG4gICAgICAgICAgICByWzddICA9IDA7XG4gICAgICAgICAgICByWzhdICA9IHoueDtcbiAgICAgICAgICAgIHJbOV0gID0gei55O1xuICAgICAgICAgICAgclsxMF0gPSB6Lno7XG4gICAgICAgICAgICByWzExXSA9IDA7XG4gICAgICAgICAgICByWzEyXSA9IGV5ZS54O1xuICAgICAgICAgICAgclsxM10gPSBleWUueTtcbiAgICAgICAgICAgIHJbMTRdID0gZXllLno7XG4gICAgICAgICAgICByWzE1XSA9IDE7XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIE11bHRpcGx5IHRoZSB2aWV3aW5nIG1hdHJpeCBmcm9tIHRoZSByaWdodC5cbiAgICAgICAgICogQHBhcmFtIGV5ZVgsIGV5ZVksIGV5ZVogVGhlIHBvc2l0aW9uIG9mIHRoZSBleWUgcG9pbnQuXG4gICAgICAgICAqIEBwYXJhbSBjZW50ZXJYLCBjZW50ZXJZLCBjZW50ZXJaIFRoZSBwb3NpdGlvbiBvZiB0aGUgcmVmZXJlbmNlIHBvaW50LlxuICAgICAgICAgKiBAcGFyYW0gdXBYLCB1cFksIHVwWiBUaGUgZGlyZWN0aW9uIG9mIHRoZSB1cCB2ZWN0b3IuXG4gICAgICAgICAqIEByZXR1cm4gdGhpc1xuICAgICAgICAgKi9cbiAgICAgICAgcHVibGljIGxvb2tBdCAoZXllOlZlY3RvcjMsIGNlbnRlcjpWZWN0b3IzLCB1cDpWZWN0b3IzKTpNYXRyaXg0O1xuICAgICAgICBwdWJsaWMgbG9va0F0IChleWVYOm51bWJlciwgZXllWTpudW1iZXIsIGV5ZVo6bnVtYmVyLCBjZW50ZXJYOm51bWJlciwgY2VudGVyWTpudW1iZXIsIGNlbnRlclo6bnVtYmVyLCB1cFg6bnVtYmVyLCB1cFk6bnVtYmVyLCB1cFo6bnVtYmVyKTpNYXRyaXg0O1xuXG4gICAgICAgIHB1YmxpYyBsb29rQXQgKC4uLmFyZ3MpOk1hdHJpeDQge1xuICAgICAgICAgICAgdmFyIG1hdHJpeCA9IE1hdHJpeDQuY3JlYXRlKCk7XG5cbiAgICAgICAgICAgIHRoaXMuYXBwbHlNYXRyaXgobWF0cml4LnNldExvb2tBdC5hcHBseShtYXRyaXgsIGFyZ3MpKTtcblxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICBAcmVxdWlyZShmdW5jdGlvbihsZWZ0Om51bWJlciwgcmlnaHQ6bnVtYmVyLCBib3R0b206bnVtYmVyLCB0b3A6bnVtYmVyLCBuZWFyOm51bWJlciwgZmFyOm51bWJlcil7XG4gICAgICAgICAgICBhc3NlcnQobGVmdCAhPT0gcmlnaHQgJiYgYm90dG9tICE9PSB0b3AgJiYgbmVhciAhPT0gZmFyLCBMb2cuaW5mby5GVU5DX01VU1RfTk9UX0JFKFwiZnJ1c3R1bVwiLCBcIm51bGxcIikpO1xuICAgICAgICB9KVxuICAgICAgICBwdWJsaWMgc2V0T3J0aG8gKGxlZnQ6bnVtYmVyLCByaWdodDpudW1iZXIsIGJvdHRvbTpudW1iZXIsIHRvcDpudW1iZXIsIG5lYXI6bnVtYmVyLCBmYXI6bnVtYmVyKTpNYXRyaXg0IHtcbiAgICAgICAgICAgIHZhciBlID0gdGhpcy52YWx1ZXMsXG4gICAgICAgICAgICAgICAgcncsXG4gICAgICAgICAgICAgICAgcmgsXG4gICAgICAgICAgICAgICAgcmQ7XG5cbiAgICAgICAgICAgIHJ3ID0gMSAvIChyaWdodCAtIGxlZnQpO1xuICAgICAgICAgICAgcmggPSAxIC8gKHRvcCAtIGJvdHRvbSk7XG4gICAgICAgICAgICByZCA9IDEgLyAoZmFyIC0gbmVhcik7XG5cbiAgICAgICAgICAgIGVbMF0gID0gMiAqIHJ3O1xuICAgICAgICAgICAgZVsxXSAgPSAwO1xuICAgICAgICAgICAgZVsyXSAgPSAwO1xuICAgICAgICAgICAgZVszXSAgPSAwO1xuXG4gICAgICAgICAgICBlWzRdICA9IDA7XG4gICAgICAgICAgICBlWzVdICA9IDIgKiByaDtcbiAgICAgICAgICAgIGVbNl0gID0gMDtcbiAgICAgICAgICAgIGVbN10gID0gMDtcblxuICAgICAgICAgICAgZVs4XSAgPSAwO1xuICAgICAgICAgICAgZVs5XSAgPSAwO1xuICAgICAgICAgICAgZVsxMF0gPSAtMiAqIHJkO1xuICAgICAgICAgICAgZVsxMV0gPSAwO1xuXG4gICAgICAgICAgICBlWzEyXSA9IC0ocmlnaHQgKyBsZWZ0KSAqIHJ3O1xuICAgICAgICAgICAgZVsxM10gPSAtKHRvcCArIGJvdHRvbSkgKiByaDtcbiAgICAgICAgICAgIGVbMTRdID0gLShmYXIgKyBuZWFyKSAqIHJkO1xuICAgICAgICAgICAgZVsxNV0gPSAxO1xuXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBvcnRobyAobGVmdDpudW1iZXIsIHJpZ2h0Om51bWJlciwgYm90dG9tOm51bWJlciwgdG9wOm51bWJlciwgbmVhcjpudW1iZXIsIGZhcjpudW1iZXIpOk1hdHJpeDR7XG4gICAgICAgICAgICB0aGlzLmFwcGx5TWF0cml4KE1hdHJpeDQuY3JlYXRlKCkuc2V0T3J0aG8obGVmdCwgcmlnaHQsIGJvdHRvbSwgdG9wLCBuZWFyLCBmYXIpKTtcblxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogU2V0IHRoZSBwZXJzcGVjdGl2ZSBwcm9qZWN0aW9uIG1hdHJpeCBieSBmb3Z5IGFuZCBhc3BlY3QuXG4gICAgICAgICAqIEBwYXJhbSBmb3Z5IFRoZSBhbmdsZSBiZXR3ZWVuIHRoZSB1cHBlciBhbmQgbG93ZXIgc2lkZXMgb2YgdGhlIGZydXN0dW0uXG4gICAgICAgICAqIEBwYXJhbSBhc3BlY3QgVGhlIGFzcGVjdCByYXRpbyBvZiB0aGUgZnJ1c3R1bS4gKHdpZHRoL2hlaWdodClcbiAgICAgICAgICogQHBhcmFtIG5lYXIgVGhlIGRpc3RhbmNlcyB0byB0aGUgbmVhcmVyIGRlcHRoIGNsaXBwaW5nIHBsYW5lLiBUaGlzIHZhbHVlIG11c3QgYmUgcGx1cyB2YWx1ZS5cbiAgICAgICAgICogQHBhcmFtIGZhciBUaGUgZGlzdGFuY2VzIHRvIHRoZSBmYXJ0aGVyIGRlcHRoIGNsaXBwaW5nIHBsYW5lLiBUaGlzIHZhbHVlIG11c3QgYmUgcGx1cyB2YWx1ZS5cbiAgICAgICAgICogQHJldHVybiB0aGlzXG4gICAgICAgICAqL1xuICAgICAgICBAcmVxdWlyZShmdW5jdGlvbihmb3Z5OiBudW1iZXIsIGFzcGVjdDpudW1iZXIsIG5lYXI6bnVtYmVyLCBmYXI6bnVtYmVyKXtcbiAgICAgICAgICAgIGFzc2VydChuZWFyICE9PSBmYXIgJiYgYXNwZWN0ICE9PSAwLCBMb2cuaW5mby5GVU5DX01VU1RfTk9UX0JFKFwiZnJ1c3R1bVwiLCBcIm51bGxcIikpO1xuICAgICAgICAgICAgYXNzZXJ0KG5lYXIgPiAwLCBMb2cuaW5mby5GVU5DX01VU1QoXCJuZWFyXCIsIFwiPiAwXCIpKTtcbiAgICAgICAgICAgIGFzc2VydChmYXIgPiAwLCBMb2cuaW5mby5GVU5DX01VU1QoXCJmYXJcIiwgXCI+IDBcIikpO1xuXG4gICAgICAgIH0pXG4gICAgICAgIHB1YmxpYyBzZXRQZXJzcGVjdGl2ZSAoZm92eTogbnVtYmVyLCBhc3BlY3Q6bnVtYmVyLCBuZWFyOm51bWJlciwgZmFyOm51bWJlcik6TWF0cml4NCB7XG4gICAgICAgICAgICB2YXIgZSA9IG51bGwsXG4gICAgICAgICAgICAgICAgcmQgPSBudWxsLFxuICAgICAgICAgICAgICAgIHMgPSBudWxsLFxuICAgICAgICAgICAgICAgIGN0ID0gbnVsbCxcbiAgICAgICAgICAgICAgICBmb3Z5ID0gTWF0aC5QSSAqIGZvdnkgLyAxODAgLyAyO1xuXG4gICAgICAgICAgICBzID0gTWF0aC5zaW4oZm92eSk7XG4gICAgICAgICAgICBMb2cuZXJyb3IocyA9PT0gMCwgTG9nLmluZm8uRlVOQ19NVVNUX05PVF9CRShcImZydXN0dW1cIiwgXCJudWxsXCIpKTtcblxuICAgICAgICAgICAgcmQgPSAxIC8gKGZhciAtIG5lYXIpO1xuICAgICAgICAgICAgY3QgPSBNYXRoLmNvcyhmb3Z5KSAvIHM7XG5cbiAgICAgICAgICAgIGUgPSB0aGlzLnZhbHVlcztcblxuICAgICAgICAgICAgZVswXSAgPSBjdCAvIGFzcGVjdDtcbiAgICAgICAgICAgIGVbMV0gID0gMDtcbiAgICAgICAgICAgIGVbMl0gID0gMDtcbiAgICAgICAgICAgIGVbM10gID0gMDtcblxuICAgICAgICAgICAgZVs0XSAgPSAwO1xuICAgICAgICAgICAgZVs1XSAgPSBjdDtcbiAgICAgICAgICAgIGVbNl0gID0gMDtcbiAgICAgICAgICAgIGVbN10gID0gMDtcblxuICAgICAgICAgICAgZVs4XSAgPSAwO1xuICAgICAgICAgICAgZVs5XSAgPSAwO1xuICAgICAgICAgICAgZVsxMF0gPSAtKGZhciArIG5lYXIpICogcmQ7XG4gICAgICAgICAgICBlWzExXSA9IC0xO1xuXG4gICAgICAgICAgICBlWzEyXSA9IDA7XG4gICAgICAgICAgICBlWzEzXSA9IDA7XG4gICAgICAgICAgICBlWzE0XSA9IC0yICogbmVhciAqIGZhciAqIHJkO1xuICAgICAgICAgICAgZVsxNV0gPSAwO1xuXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBwZXJzcGVjdGl2ZSAoZm92eTogbnVtYmVyLCBhc3BlY3Q6bnVtYmVyLCBuZWFyOm51bWJlciwgZmFyOm51bWJlcik6TWF0cml4NHtcbiAgICAgICAgICAgIHRoaXMuYXBwbHlNYXRyaXgoTWF0cml4NC5jcmVhdGUoKS5zZXRQZXJzcGVjdGl2ZShmb3Z5LCBhc3BlY3QsIG5lYXIsIGZhcikpO1xuXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBhcHBseU1hdHJpeCAob3RoZXI6TWF0cml4NCk6TWF0cml4NHtcbiAgICAgICAgICAgIHZhciBhID0gdGhpcyxcbiAgICAgICAgICAgICAgICBiID0gb3RoZXIuY29weSgpO1xuXG4gICAgICAgICAgICAvL3RoaXMudmFsdWVzID0gTWF0aFV0aWxzLm11bHRpcGx5KGEsIGIpO1xuICAgICAgICAgICAgICAgIC8vYiph77yM6ICM5LiN5pivYSpiXG4gICAgICAgICAgICAgICAgLy/ov5nmmK/lm6DkuLrlnKh3ZWJnbOS4re+8jOWQkemHj+aYr+WPs+S5mOeahO+8jFxuICAgICAgICAgICAgICAgIC8v5q2k5aSE5biM5pyb5Z2Q5qCH5ZCR6YeP5YWI6L+b6KGMdGhpcy52YWx1ZXPnmoTlj5jmjaLvvIznhLblkI7ov5vooYxvdGhlci52YWx1ZXPnmoTlj5jmjaLvvIzlm6DmraTopoFiKmHvvIzku47ogIzlnKjlj7PkuZjlkJHph4/ml7bkuLpiKmEqdmVjXG4gICAgICAgICAgICAgICAgdGhpcy52YWx1ZXMgPSBiLm11bHRpcGx5KGEpLnZhbHVlcztcblxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgbXVsdGlwbHkobWF0cml4Ok1hdHJpeDQpOk1hdHJpeDQ7XG4gICAgICAgIHB1YmxpYyBtdWx0aXBseShtYXRyaXgxOk1hdHJpeDQsIG1hdHJpeDI6TWF0cml4NCk6TWF0cml4NDtcblxuICAgICAgICBwdWJsaWMgbXVsdGlwbHkoLi4uYXJncyk6TWF0cml4NCB7XG4gICAgICAgICAgICB2YXIgbWF0MSA9IG51bGwsXG4gICAgICAgICAgICAgICAgbWF0MiA9IG51bGwsXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gbnVsbDtcblxuICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy52YWx1ZXM7XG5cbiAgICAgICAgICAgIGlmKGFyZ3MubGVuZ3RoID09PSAxKXtcbiAgICAgICAgICAgICAgICBtYXQxID0gdGhpcy52YWx1ZXM7XG4gICAgICAgICAgICAgICAgbWF0MiA9IGFyZ3NbMF0udmFsdWVzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZihhcmdzLmxlbmd0aCA9PT0gMil7XG4gICAgICAgICAgICAgICAgbWF0MSA9IGFyZ3NbMF0udmFsdWVzO1xuICAgICAgICAgICAgICAgIG1hdDIgPSBhcmdzWzFdLnZhbHVlcztcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgYSA9IG1hdDFbMF0sIGIgPSBtYXQxWzFdLCBjID0gbWF0MVsyXSwgZCA9IG1hdDFbM10sXG4gICAgICAgICAgICAgICAgZSA9IG1hdDFbNF0sIGYgPSBtYXQxWzVdLCBnID0gbWF0MVs2XSwgaCA9IG1hdDFbN10sXG4gICAgICAgICAgICAgICAgaSA9IG1hdDFbOF0sIGogPSBtYXQxWzldLCBrID0gbWF0MVsxMF0sIGwgPSBtYXQxWzExXSxcbiAgICAgICAgICAgICAgICBtID0gbWF0MVsxMl0sIG4gPSBtYXQxWzEzXSwgbyA9IG1hdDFbMTRdLCBwID0gbWF0MVsxNV0sXG4gICAgICAgICAgICAgICAgQSA9IG1hdDJbMF0sIEIgPSBtYXQyWzFdLCBDID0gbWF0MlsyXSwgRCA9IG1hdDJbM10sXG4gICAgICAgICAgICAgICAgRSA9IG1hdDJbNF0sIEYgPSBtYXQyWzVdLCBHID0gbWF0Mls2XSwgSCA9IG1hdDJbN10sXG4gICAgICAgICAgICAgICAgSSA9IG1hdDJbOF0sIEogPSBtYXQyWzldLCBLID0gbWF0MlsxMF0sIEwgPSBtYXQyWzExXSxcbiAgICAgICAgICAgICAgICBNID0gbWF0MlsxMl0sIE4gPSBtYXQyWzEzXSwgTyA9IG1hdDJbMTRdLCBQID0gbWF0MlsxNV07XG5cbiAgICAgICAgICAgIHJlc3VsdFswXSA9IEEgKiBhICsgQiAqIGUgKyBDICogaSArIEQgKiBtO1xuICAgICAgICAgICAgcmVzdWx0WzFdID0gQSAqIGIgKyBCICogZiArIEMgKiBqICsgRCAqIG47XG4gICAgICAgICAgICByZXN1bHRbMl0gPSBBICogYyArIEIgKiBnICsgQyAqIGsgKyBEICogbztcbiAgICAgICAgICAgIHJlc3VsdFszXSA9IEEgKiBkICsgQiAqIGggKyBDICogbCArIEQgKiBwO1xuICAgICAgICAgICAgcmVzdWx0WzRdID0gRSAqIGEgKyBGICogZSArIEcgKiBpICsgSCAqIG07XG4gICAgICAgICAgICByZXN1bHRbNV0gPSBFICogYiArIEYgKiBmICsgRyAqIGogKyBIICogbjtcbiAgICAgICAgICAgIHJlc3VsdFs2XSA9IEUgKiBjICsgRiAqIGcgKyBHICogayArIEggKiBvO1xuICAgICAgICAgICAgcmVzdWx0WzddID0gRSAqIGQgKyBGICogaCArIEcgKiBsICsgSCAqIHA7XG4gICAgICAgICAgICByZXN1bHRbOF0gPSBJICogYSArIEogKiBlICsgSyAqIGkgKyBMICogbTtcbiAgICAgICAgICAgIHJlc3VsdFs5XSA9IEkgKiBiICsgSiAqIGYgKyBLICogaiArIEwgKiBuO1xuICAgICAgICAgICAgcmVzdWx0WzEwXSA9IEkgKiBjICsgSiAqIGcgKyBLICogayArIEwgKiBvO1xuICAgICAgICAgICAgcmVzdWx0WzExXSA9IEkgKiBkICsgSiAqIGggKyBLICogbCArIEwgKiBwO1xuICAgICAgICAgICAgcmVzdWx0WzEyXSA9IE0gKiBhICsgTiAqIGUgKyBPICogaSArIFAgKiBtO1xuICAgICAgICAgICAgcmVzdWx0WzEzXSA9IE0gKiBiICsgTiAqIGYgKyBPICogaiArIFAgKiBuO1xuICAgICAgICAgICAgcmVzdWx0WzE0XSA9IE0gKiBjICsgTiAqIGcgKyBPICogayArIFAgKiBvO1xuICAgICAgICAgICAgcmVzdWx0WzE1XSA9IE0gKiBkICsgTiAqIGggKyBPICogbCArIFAgKiBwO1xuXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBtdWx0aXBseVZlY3RvcjQodmVjdG9yOlZlY3RvcjQpOlZlY3RvcjQge1xuICAgICAgICAgICAgdmFyIG1hdDEgPSB0aGlzLnZhbHVlcyxcbiAgICAgICAgICAgICAgICB2ZWM0ID0gdmVjdG9yLnZhbHVlcztcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBbXTtcblxuICAgICAgICAgICAgcmVzdWx0WzBdID0gdmVjNFswXSAqIG1hdDFbMF0gKyB2ZWM0WzFdICogbWF0MVs0XSArIHZlYzRbMl0gKiBtYXQxWzhdICsgdmVjNFszXSAqIG1hdDFbMTJdO1xuICAgICAgICAgICAgcmVzdWx0WzFdID0gdmVjNFswXSAqIG1hdDFbMV0gKyB2ZWM0WzFdICogbWF0MVs1XSArIHZlYzRbMl0gKiBtYXQxWzldICsgdmVjNFszXSAqIG1hdDFbMTNdO1xuICAgICAgICAgICAgcmVzdWx0WzJdID0gdmVjNFswXSAqIG1hdDFbMl0gKyB2ZWM0WzFdICogbWF0MVs2XSArIHZlYzRbMl0gKiBtYXQxWzEwXSArIHZlYzRbM10gKiBtYXQxWzE0XTtcbiAgICAgICAgICAgIHJlc3VsdFszXSA9IHZlYzRbMF0gKiBtYXQxWzNdICsgdmVjNFsxXSAqIG1hdDFbN10gKyB2ZWM0WzJdICogbWF0MVsxMV0gKyB2ZWM0WzNdICogbWF0MVsxNV07XG5cbiAgICAgICAgICAgIHJldHVybiBWZWN0b3I0LmNyZWF0ZShyZXN1bHRbMF0sIHJlc3VsdFsxXSwgcmVzdWx0WzJdLCByZXN1bHRbM10pO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIG11bHRpcGx5VmVjdG9yMyh2ZWN0b3I6VmVjdG9yMyk6VmVjdG9yMyB7XG4gICAgICAgICAgICB2YXIgbWF0MSA9IHRoaXMudmFsdWVzLFxuICAgICAgICAgICAgICAgIHZlYzMgPSB2ZWN0b3IudmFsdWVzO1xuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuXG4gICAgICAgICAgICByZXN1bHRbMF0gPSB2ZWMzWzBdICogbWF0MVswXSArIHZlYzNbMV0gKiBtYXQxWzRdICsgdmVjM1syXSAqIG1hdDFbOF07XG4gICAgICAgICAgICByZXN1bHRbMV0gPSB2ZWMzWzBdICogbWF0MVsxXSArIHZlYzNbMV0gKiBtYXQxWzVdICsgdmVjM1syXSAqIG1hdDFbOV07XG4gICAgICAgICAgICByZXN1bHRbMl0gPSB2ZWMzWzBdICogbWF0MVsyXSArIHZlYzNbMV0gKiBtYXQxWzZdICsgdmVjM1syXSAqIG1hdDFbMTBdO1xuXG4gICAgICAgICAgICByZXR1cm4gVmVjdG9yMy5jcmVhdGUocmVzdWx0WzBdLCByZXN1bHRbMV0sIHJlc3VsdFsyXSk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgbXVsdGlwbHlQb2ludCh2ZWN0b3I6VmVjdG9yMyk6VmVjdG9yMyB7XG4gICAgICAgICAgICB2YXIgbWF0MSA9IHRoaXMudmFsdWVzLFxuICAgICAgICAgICAgICAgIHZlYzMgPSB2ZWN0b3IudmFsdWVzO1xuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuXG4gICAgICAgICAgICByZXN1bHRbMF0gPSB2ZWMzWzBdICogbWF0MVswXSArIHZlYzNbMV0gKiBtYXQxWzRdICsgdmVjM1syXSAqIG1hdDFbOF0gKyBtYXQxWzEyXTtcbiAgICAgICAgICAgIHJlc3VsdFsxXSA9IHZlYzNbMF0gKiBtYXQxWzFdICsgdmVjM1sxXSAqIG1hdDFbNV0gKyB2ZWMzWzJdICogbWF0MVs5XSArIG1hdDFbMTNdO1xuICAgICAgICAgICAgcmVzdWx0WzJdID0gdmVjM1swXSAqIG1hdDFbMl0gKyB2ZWMzWzFdICogbWF0MVs2XSArIHZlYzNbMl0gKiBtYXQxWzEwXSArIG1hdDFbMTRdO1xuXG4gICAgICAgICAgICByZXR1cm4gVmVjdG9yMy5jcmVhdGUocmVzdWx0WzBdLCByZXN1bHRbMV0sIHJlc3VsdFsyXSk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgY29weSgpOiBNYXRyaXg0e1xuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IE1hdHJpeDQuY3JlYXRlKCksXG4gICAgICAgICAgICAgICAgaSA9IDAsXG4gICAgICAgICAgICAgICAgbGVuID0gdGhpcy52YWx1ZXMubGVuZ3RoO1xuXG4gICAgICAgICAgICBmb3IoaSA9IDA7IGkgPCBsZW47IGkrKyl7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnZhbHVlc1tpXSA9IHRoaXMudmFsdWVzW2ldO1xuICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgZ2V0WCgpe1xuICAgICAgICAgICAgcmV0dXJuIFZlY3RvcjMuY3JlYXRlKHRoaXMudmFsdWVzWzBdLCB0aGlzLnZhbHVlc1sxXSwgdGhpcy52YWx1ZXNbMl0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGdldFkoKXtcbiAgICAgICAgICAgIHJldHVybiBWZWN0b3IzLmNyZWF0ZSh0aGlzLnZhbHVlc1s0XSwgdGhpcy52YWx1ZXNbNV0sIHRoaXMudmFsdWVzWzZdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBnZXRaKCl7XG4gICAgICAgICAgICByZXR1cm4gVmVjdG9yMy5jcmVhdGUodGhpcy52YWx1ZXNbOF0sIHRoaXMudmFsdWVzWzldLCB0aGlzLnZhbHVlc1sxMF0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGdldFRyYW5zbGF0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIFZlY3RvcjMuY3JlYXRlKHRoaXMudmFsdWVzWzEyXSwgdGhpcy52YWx1ZXNbMTNdLCB0aGlzLnZhbHVlc1sxNF0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGdldFNjYWxlKCkge1xuICAgICAgICAgICAgcmV0dXJuIFZlY3RvcjMuY3JlYXRlKHRoaXMuZ2V0WCgpLmxlbmd0aCgpLCB0aGlzLmdldFkoKS5sZW5ndGgoKSwgdGhpcy5nZXRaKCkubGVuZ3RoKCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGdldEV1bGVyQW5nbGVzKCkge1xuICAgICAgICAgICAgdmFyIHgsIHksIHosIHN4LCBzeSwgc3osIG0sIGhhbGZQaTtcbiAgICAgICAgICAgIHZhciBzY2FsZSA9IHRoaXMuZ2V0U2NhbGUoKTtcblxuICAgICAgICAgICAgc3ggPSBzY2FsZS54O1xuICAgICAgICAgICAgc3kgPSBzY2FsZS55O1xuICAgICAgICAgICAgc3ogPSBzY2FsZS56O1xuXG4gICAgICAgICAgICBtID0gdGhpcy52YWx1ZXM7XG5cbiAgICAgICAgICAgIHkgPSBNYXRoLmFzaW4oLW1bMl0gLyBzeCk7XG4gICAgICAgICAgICBoYWxmUGkgPSBNYXRoLlBJICogMC41O1xuXG4gICAgICAgICAgICBpZiAoeSA8IGhhbGZQaSkge1xuICAgICAgICAgICAgICAgIGlmICh5ID4gLWhhbGZQaSkge1xuICAgICAgICAgICAgICAgICAgICB4ID0gTWF0aC5hdGFuMihtWzZdIC8gc3ksIG1bMTBdIC8gc3opO1xuICAgICAgICAgICAgICAgICAgICB6ID0gTWF0aC5hdGFuMihtWzFdIC8gc3gsIG1bMF0gLyBzeCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gTm90IGEgdW5pcXVlIHNvbHV0aW9uXG4gICAgICAgICAgICAgICAgICAgIHogPSAwO1xuICAgICAgICAgICAgICAgICAgICB4ID0gLU1hdGguYXRhbjIobVs0XSAvIHN5LCBtWzVdIC8gc3kpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gTm90IGEgdW5pcXVlIHNvbHV0aW9uXG4gICAgICAgICAgICAgICAgeiA9IDA7XG4gICAgICAgICAgICAgICAgeCA9IE1hdGguYXRhbjIobVs0XSAvIHN5LCBtWzVdIC8gc3kpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gVmVjdG9yMy5jcmVhdGUoeCwgeSwgeikuc2NhbGUoUkFEX1RPX0RFRyk7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogQGZ1bmN0aW9uXG4gICAgICAgICAqIEBuYW1lIHNldFRSU1xuICAgICAgICAgKiBAZGVzY3JpcHRpb24gU2V0cyB0aGUgc3BlY2lmaWVkIG1hdHJpeCB0byB0aGUgY29uY2F0ZW5hdGlvbiBvZiBhIHRyYW5zbGF0aW9uLCBhXG4gICAgICAgICAqIHF1YXRlcm5pb24gcm90YXRpb24gYW5kIGEgc2NhbGUuXG4gICAgICAgICAqIEBwYXJhbSB7VmVjM30gdCBBIDMtZCB2ZWN0b3IgdHJhbnNsYXRpb24uXG4gICAgICAgICAqIEBwYXJhbSB7UXVhdH0gciBBIHF1YXRlcm5pb24gcm90YXRpb24uXG4gICAgICAgICAqIEBwYXJhbSB7VmVjM30gcyBBIDMtZCB2ZWN0b3Igc2NhbGUuXG4gICAgICAgICAqIEByZXR1cm5zIHtNYXQ0fSBTZWxmIGZvciBjaGFpbmluZy5cbiAgICAgICAgICogQGV4YW1wbGVcbiAgICAgICAgICogdmFyIHQgPSBuZXcgVmVjMygxMCwgMjAsIDMwKTtcbiAgICAgICAgICogdmFyIHIgPSBuZXcgUXVhdCgpO1xuICAgICAgICAgKiB2YXIgcyA9IG5ldyBWZWMzKDIsIDIsIDIpO1xuICAgICAgICAgKlxuICAgICAgICAgKiB2YXIgbSA9IG5ldyBNYXQ0KCk7XG4gICAgICAgICAqIG0uY29tcG9zZSh0LCByLCBzKTtcbiAgICAgICAgICovXG4gICAgICAgIHB1YmxpYyBzZXRUUlModDpWZWN0b3IzLCByOlF1YXRlcm5pb24sIHM6VmVjdG9yMykge1xuICAgICAgICAgICAgdmFyIHR4LCB0eSwgdHosIHF4LCBxeSwgcXosIHF3LCBzeCwgc3ksIHN6LFxuICAgICAgICAgICAgICAgIHgyLCB5MiwgejIsIHh4LCB4eSwgeHosIHl5LCB5eiwgenosIHd4LCB3eSwgd3osIG07XG5cbiAgICAgICAgICAgIHR4ID0gdC54O1xuICAgICAgICAgICAgdHkgPSB0Lnk7XG4gICAgICAgICAgICB0eiA9IHQuejtcblxuICAgICAgICAgICAgcXggPSByLng7XG4gICAgICAgICAgICBxeSA9IHIueTtcbiAgICAgICAgICAgIHF6ID0gci56O1xuICAgICAgICAgICAgcXcgPSByLnc7XG5cbiAgICAgICAgICAgIHN4ID0gcy54O1xuICAgICAgICAgICAgc3kgPSBzLnk7XG4gICAgICAgICAgICBzeiA9IHMuejtcblxuICAgICAgICAgICAgeDIgPSBxeCArIHF4O1xuICAgICAgICAgICAgeTIgPSBxeSArIHF5O1xuICAgICAgICAgICAgejIgPSBxeiArIHF6O1xuICAgICAgICAgICAgeHggPSBxeCAqIHgyO1xuICAgICAgICAgICAgeHkgPSBxeCAqIHkyO1xuICAgICAgICAgICAgeHogPSBxeCAqIHoyO1xuICAgICAgICAgICAgeXkgPSBxeSAqIHkyO1xuICAgICAgICAgICAgeXogPSBxeSAqIHoyO1xuICAgICAgICAgICAgenogPSBxeiAqIHoyO1xuICAgICAgICAgICAgd3ggPSBxdyAqIHgyO1xuICAgICAgICAgICAgd3kgPSBxdyAqIHkyO1xuICAgICAgICAgICAgd3ogPSBxdyAqIHoyO1xuXG4gICAgICAgICAgICBtID0gdGhpcy52YWx1ZXM7XG5cbiAgICAgICAgICAgIG1bMF0gPSAoMSAtICh5eSArIHp6KSkgKiBzeDtcbiAgICAgICAgICAgIG1bMV0gPSAoeHkgKyB3eikgKiBzeDtcbiAgICAgICAgICAgIG1bMl0gPSAoeHogLSB3eSkgKiBzeDtcbiAgICAgICAgICAgIG1bM10gPSAwO1xuXG4gICAgICAgICAgICBtWzRdID0gKHh5IC0gd3opICogc3k7XG4gICAgICAgICAgICBtWzVdID0gKDEgLSAoeHggKyB6eikpICogc3k7XG4gICAgICAgICAgICBtWzZdID0gKHl6ICsgd3gpICogc3k7XG4gICAgICAgICAgICBtWzddID0gMDtcblxuICAgICAgICAgICAgbVs4XSA9ICh4eiArIHd5KSAqIHN6O1xuICAgICAgICAgICAgbVs5XSA9ICh5eiAtIHd4KSAqIHN6O1xuICAgICAgICAgICAgbVsxMF0gPSAoMSAtICh4eCArIHl5KSkgKiBzejtcbiAgICAgICAgICAgIG1bMTFdID0gMDtcblxuICAgICAgICAgICAgbVsxMl0gPSB0eDtcbiAgICAgICAgICAgIG1bMTNdID0gdHk7XG4gICAgICAgICAgICBtWzE0XSA9IHR6O1xuICAgICAgICAgICAgbVsxNV0gPSAxO1xuXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsIm1vZHVsZSB3ZCB7XG4gICAgZXhwb3J0IGNsYXNzIE1hdHJpeDMge1xuICAgICAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZShtYXQ6RmxvYXQzMkFycmF5KTpNYXRyaXgzO1xuICAgICAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZSgpOk1hdHJpeDM7XG5cbiAgICAgICAgcHVibGljIHN0YXRpYyBjcmVhdGUoLi4uYXJncyk6TWF0cml4MyB7XG4gICAgICAgICAgICB2YXIgbSA9IG51bGw7XG5cbiAgICAgICAgICAgIGlmIChhcmdzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIG0gPSBuZXcgdGhpcygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbSA9IG5ldyB0aGlzKGFyZ3NbMF0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gbTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0cnVjdG9yKG1hdDpGbG9hdDMyQXJyYXkpO1xuICAgICAgICBjb25zdHJ1Y3RvcigpO1xuXG4gICAgICAgIGNvbnN0cnVjdG9yKC4uLmFyZ3MpIHtcbiAgICAgICAgICAgIGlmIChhcmdzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgICAgIHRoaXMudmFsdWVzID0gYXJnc1swXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMudmFsdWVzID0gbmV3IEZsb2F0MzJBcnJheShbMSwgMCwgMCwgMCwgMSwgMCwgMCwgMCwgMV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZ2V0IGEoKTpudW1iZXIge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudmFsdWVzWzBdO1xuICAgICAgICB9XG4gICAgICAgIHNldCBhKGE6bnVtYmVyKXtcbiAgICAgICAgICAgIHRoaXMudmFsdWVzWzBdID0gYTtcbiAgICAgICAgfVxuXG4gICAgICAgIGdldCBjKCk6bnVtYmVyIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnZhbHVlc1sxXTtcbiAgICAgICAgfVxuICAgICAgICBzZXQgYyhjOm51bWJlcil7XG4gICAgICAgICAgICB0aGlzLnZhbHVlc1sxXSA9IGM7XG4gICAgICAgIH1cblxuICAgICAgICBnZXQgYigpOm51bWJlciB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy52YWx1ZXNbM107XG4gICAgICAgIH1cbiAgICAgICAgc2V0IGIoYjpudW1iZXIpe1xuICAgICAgICAgICAgdGhpcy52YWx1ZXNbM10gPSBiO1xuICAgICAgICB9XG5cbiAgICAgICAgZ2V0IGQoKTpudW1iZXIge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudmFsdWVzWzRdO1xuICAgICAgICB9XG4gICAgICAgIHNldCBkKGQ6bnVtYmVyKXtcbiAgICAgICAgICAgIHRoaXMudmFsdWVzWzRdID0gZDtcbiAgICAgICAgfVxuXG4gICAgICAgIGdldCB0eCgpOm51bWJlciB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy52YWx1ZXNbNl07XG4gICAgICAgIH1cbiAgICAgICAgc2V0IHR4KHR4Om51bWJlcil7XG4gICAgICAgICAgICB0aGlzLnZhbHVlc1s2XSA9IHR4O1xuICAgICAgICB9XG5cbiAgICAgICAgZ2V0IHR5KCk6bnVtYmVyIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnZhbHVlc1s3XTtcbiAgICAgICAgfVxuICAgICAgICBzZXQgdHkodHk6bnVtYmVyKXtcbiAgICAgICAgICAgIHRoaXMudmFsdWVzWzddID0gdHk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgdmFsdWVzOkZsb2F0MzJBcnJheSA9IG51bGw7XG5cbiAgICAgICAgcHVibGljIHNldElkZW50aXR5KCk6TWF0cml4MyB7XG4gICAgICAgICAgICB2YXIgZSA9IHRoaXMudmFsdWVzO1xuXG4gICAgICAgICAgICBlWzBdID0gMTtcbiAgICAgICAgICAgIGVbM10gPSAwO1xuICAgICAgICAgICAgZVs2XSA9IDA7XG4gICAgICAgICAgICBlWzFdID0gMDtcbiAgICAgICAgICAgIGVbNF0gPSAxO1xuICAgICAgICAgICAgZVs3XSA9IDA7XG4gICAgICAgICAgICBlWzJdID0gMDtcbiAgICAgICAgICAgIGVbNV0gPSAwO1xuICAgICAgICAgICAgZVs4XSA9IDE7XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGludmVydCgpOk1hdHJpeDMge1xuICAgICAgICAgICAgdmFyIGExID0gdGhpcy52YWx1ZXNbMF07XG4gICAgICAgICAgICB2YXIgYjEgPSB0aGlzLnZhbHVlc1sxXTtcbiAgICAgICAgICAgIHZhciBjMSA9IHRoaXMudmFsdWVzWzNdO1xuICAgICAgICAgICAgdmFyIGQxID0gdGhpcy52YWx1ZXNbNF07XG4gICAgICAgICAgICB2YXIgdHgxID0gdGhpcy52YWx1ZXNbNl07XG4gICAgICAgICAgICB2YXIgdHkxID0gdGhpcy52YWx1ZXNbN107XG4gICAgICAgICAgICB2YXIgbiA9IGExKmQxLWIxKmMxO1xuXG4gICAgICAgICAgICB0aGlzLnZhbHVlc1swXSA9IGQxL247XG4gICAgICAgICAgICB0aGlzLnZhbHVlc1sxXSA9IC1iMS9uO1xuICAgICAgICAgICAgdGhpcy52YWx1ZXNbM10gPSAtYzEvbjtcbiAgICAgICAgICAgIHRoaXMudmFsdWVzWzRdID0gYTEvbjtcbiAgICAgICAgICAgIHRoaXMudmFsdWVzWzZdID0gKGMxKnR5MS1kMSp0eDEpL247XG4gICAgICAgICAgICB0aGlzLnZhbHVlc1s3XSA9IC0oYTEqdHkxLWIxKnR4MSkvbjtcblxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgbXVsdGlwbHlTY2FsYXIoczpudW1iZXIpIHtcbiAgICAgICAgICAgIHZhciB0ZSA9IHRoaXMudmFsdWVzO1xuXG4gICAgICAgICAgICB0ZVswXSAqPSBzO1xuICAgICAgICAgICAgdGVbM10gKj0gcztcbiAgICAgICAgICAgIHRlWzZdICo9IHM7XG4gICAgICAgICAgICB0ZVsxXSAqPSBzO1xuICAgICAgICAgICAgdGVbNF0gKj0gcztcbiAgICAgICAgICAgIHRlWzddICo9IHM7XG4gICAgICAgICAgICB0ZVsyXSAqPSBzO1xuICAgICAgICAgICAgdGVbNV0gKj0gcztcbiAgICAgICAgICAgIHRlWzhdICo9IHM7XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIG11bHRpcGx5VmVjdG9yMiggdmVjdG9yOlZlY3RvcjIgKSB7XG4gICAgICAgICAgICB2YXIgeCA9IHZlY3Rvci54LFxuICAgICAgICAgICAgICAgIHkgPSB2ZWN0b3IueSxcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBWZWN0b3IyLmNyZWF0ZSgpLFxuICAgICAgICAgICAgICAgIGUgPSB0aGlzLnZhbHVlcztcblxuICAgICAgICAgICAgcmVzdWx0LnggPSBlWyAwIF0gKiB4ICsgZVsgMyBdICogeTtcbiAgICAgICAgICAgIHJlc3VsdC55ID0gZVsgMSBdICogeCArIGVbIDQgXSAqIHk7XG5cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgbXVsdGlwbHlQb2ludCggdmVjdG9yOlZlY3RvcjIgKSB7XG4gICAgICAgICAgICB2YXIgeCA9IHZlY3Rvci54LFxuICAgICAgICAgICAgICAgIHkgPSB2ZWN0b3IueSxcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBWZWN0b3IyLmNyZWF0ZSgpLFxuICAgICAgICAgICAgICAgIGUgPSB0aGlzLnZhbHVlcztcblxuICAgICAgICAgICAgcmVzdWx0LnggPSBlWyAwIF0gKiB4ICsgZVsgMyBdICogeSArIHRoaXMudHg7XG4gICAgICAgICAgICByZXN1bHQueSA9IGVbIDEgXSAqIHggKyBlWyA0IF0gKiB5ICsgdGhpcy50eTtcblxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBtdWx0aXBseShtYXRyaXg6TWF0cml4Mykge1xuICAgICAgICAgICAgdmFyIG0xMSA9IHRoaXMuYSAqIG1hdHJpeC5hICsgdGhpcy5jICogbWF0cml4LmI7XG4gICAgICAgICAgICB2YXIgbTEyID0gdGhpcy5iICogbWF0cml4LmEgKyB0aGlzLmQgKiBtYXRyaXguYjtcblxuICAgICAgICAgICAgdmFyIG0yMSA9IHRoaXMuYSAqIG1hdHJpeC5jICsgdGhpcy5jICogbWF0cml4LmQ7XG4gICAgICAgICAgICB2YXIgbTIyID0gdGhpcy5iICogbWF0cml4LmMgKyB0aGlzLmQgKiBtYXRyaXguZDtcblxuICAgICAgICAgICAgdmFyIGR4ID0gdGhpcy5hICogbWF0cml4LnR4ICsgdGhpcy5jICogbWF0cml4LnR5ICsgdGhpcy50eDtcbiAgICAgICAgICAgIHZhciBkeSA9IHRoaXMuYiAqIG1hdHJpeC50eCArIHRoaXMuZCAqIG1hdHJpeC50eSArIHRoaXMudHk7XG5cbiAgICAgICAgICAgIHRoaXMuYSA9IG0xMTtcbiAgICAgICAgICAgIHRoaXMuYiA9IG0xMjtcbiAgICAgICAgICAgIHRoaXMuYyA9IG0yMTtcbiAgICAgICAgICAgIHRoaXMuZCA9IG0yMjtcbiAgICAgICAgICAgIHRoaXMudHggPSBkeDtcbiAgICAgICAgICAgIHRoaXMudHkgPSBkeTtcblxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgdHJhbnNwb3NlKCk6TWF0cml4MyB7XG4gICAgICAgICAgICB2YXIgdG1wLCBtID0gdGhpcy52YWx1ZXM7XG5cbiAgICAgICAgICAgIHRtcCA9IG1bMV07XG4gICAgICAgICAgICBtWzFdID0gbVszXTtcbiAgICAgICAgICAgIG1bM10gPSB0bXA7XG4gICAgICAgICAgICB0bXAgPSBtWzJdO1xuICAgICAgICAgICAgbVsyXSA9IG1bNl07XG4gICAgICAgICAgICBtWzZdID0gdG1wO1xuICAgICAgICAgICAgdG1wID0gbVs1XTtcbiAgICAgICAgICAgIG1bNV0gPSBtWzddO1xuICAgICAgICAgICAgbVs3XSA9IHRtcDtcblxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgY29weSgpIHtcbiAgICAgICAgICAgIHJldHVybiBNYXRyaXgzLmNyZWF0ZSgpLnNldCh0aGlzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBzZXQobWF0cml4Ok1hdHJpeDMpIHtcbiAgICAgICAgICAgIHZhciB0ZSA9IHRoaXMudmFsdWVzLFxuICAgICAgICAgICAgICAgIHZhbHVlcyA9IG1hdHJpeC52YWx1ZXM7XG5cbiAgICAgICAgICAgIHRlWyAwIF0gPSB2YWx1ZXNbMF07IHRlWyAzIF0gPSB2YWx1ZXNbM107IHRlWyA2IF0gPSB2YWx1ZXNbNl07XG4gICAgICAgICAgICB0ZVsgMSBdID0gdmFsdWVzWzFdOyB0ZVsgNCBdID0gdmFsdWVzWzRdOyB0ZVsgNyBdID0gdmFsdWVzWzddO1xuICAgICAgICAgICAgdGVbIDIgXSA9IHZhbHVlc1syXTsgdGVbIDUgXSA9IHZhbHVlc1s1XTsgdGVbIDggXSA9IHZhbHVlc1s4XTtcblxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgc2V0VFModDpWZWN0b3IyLCBzOlZlY3RvcjIpe1xuICAgICAgICAgICAgdGhpcy5zZXRQb3NpdGlvbih0LngsIHQueSk7XG4gICAgICAgICAgICB0aGlzLnNldFNjYWxlKHMueCwgcy55KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyByb3RhdGUoYW5nbGU6bnVtYmVyKSB7XG4gICAgICAgICAgICB2YXIgcmFkID0gYW5nbGUgKiBERUdfVE9fUkFEO1xuICAgICAgICAgICAgdmFyIGMgPSBNYXRoLmNvcyhyYWQpO1xuICAgICAgICAgICAgdmFyIHMgPSBNYXRoLnNpbihyYWQpO1xuICAgICAgICAgICAgdmFyIG0xMSA9IHRoaXMuYSAqIGMgKyB0aGlzLmMgKiBzO1xuICAgICAgICAgICAgdmFyIG0xMiA9IHRoaXMuYiAqIGMgKyB0aGlzLmQgKiBzO1xuICAgICAgICAgICAgdmFyIG0yMSA9IHRoaXMuYSAqIC1zICsgdGhpcy5jICogYztcbiAgICAgICAgICAgIHZhciBtMjIgPSB0aGlzLmIgKiAtcyArIHRoaXMuZCAqIGM7XG4gICAgICAgICAgICB0aGlzLmEgPSBtMTE7XG4gICAgICAgICAgICB0aGlzLmIgPSBtMTI7XG4gICAgICAgICAgICB0aGlzLmMgPSBtMjE7XG4gICAgICAgICAgICB0aGlzLmQgPSBtMjI7XG5cbiAgICAgICAgICAgIC8vdmFyIHJhZCA9IGFuZ2xlICogREVHX1RPX1JBRDtcbiAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAvL3ZhciBjb3NfYSA9IE1hdGguY29zKHJhZCk7XG4gICAgICAgICAgICAvL3ZhciBzaW5fYSA9IE1hdGguc2luKHJhZCk7XG4gICAgICAgICAgICAvL1xuICAgICAgICAgICAgLy92YXIgdmFsdWVzID0gdGhpcy52YWx1ZXM7XG4gICAgICAgICAgICAvL1xuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIC8vdmFyIG0wMCA9IHZhbHVlc1swXTtcbiAgICAgICAgICAgIC8vdmFyIG0xMCA9IHZhbHVlc1sxXTtcbiAgICAgICAgICAgIC8vdmFyIG0yMCA9IHZhbHVlc1syXTtcbiAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAvL3ZhciBtMDEgPSB2YWx1ZXNbM107XG4gICAgICAgICAgICAvL3ZhciBtMTEgPSB2YWx1ZXNbNF07XG4gICAgICAgICAgICAvL3ZhciBtMjEgPSB2YWx1ZXNbNV07XG4gICAgICAgICAgICAvL1xuICAgICAgICAgICAgLy92YXIgbTAyID0gdmFsdWVzWzZdO1xuICAgICAgICAgICAgLy92YXIgbTEyID0gdmFsdWVzWzddO1xuICAgICAgICAgICAgLy92YXIgbTIyID0gdmFsdWVzWzhdO1xuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIC8vdmFsdWVzWzBdID0gY29zX2EgKiBtMDAgLSBzaW5fYSAqIG0xMDtcbiAgICAgICAgICAgIC8vdmFsdWVzWzFdID0gc2luX2EgKiBtMDAgKyBjb3NfYSAqIG0xMDtcbiAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAvL3ZhbHVlc1szXSA9IGNvc19hICogbTAxIC0gc2luX2EgKiBtMTE7XG4gICAgICAgICAgICAvL3ZhbHVlc1s0XSA9IHNpbl9hICogbTAxICsgY29zX2EgKiBtMTE7XG4gICAgICAgICAgICAvL1xuICAgICAgICAgICAgLy92YWx1ZXNbNl0gPSBjb3NfYSAqIG0wMiAtIHNpbl9hICogbTEyO1xuICAgICAgICAgICAgLy92YWx1ZXNbN10gPSBzaW5fYSAqIG0wMiArIGNvc19hICogbTEyO1xuXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBzZXRSb3RhdGlvbihhbmdsZTpudW1iZXIpe1xuICAgICAgICAgICAgdmFyIHJhZCA9IGFuZ2xlICogREVHX1RPX1JBRDtcblxuICAgICAgICAgICAgdmFyIGNvc19hID0gTWF0aC5jb3MocmFkKTtcbiAgICAgICAgICAgIHZhciBzaW5fYSA9IE1hdGguc2luKHJhZCk7XG4gICAgICAgICAgICB2YXIgdmFsdWVzID0gdGhpcy52YWx1ZXM7XG5cbiAgICAgICAgICAgIC8vdmFsdWVzWzBdID0gY29zX2E7XG4gICAgICAgICAgICAvL3ZhbHVlc1sxXSA9IHNpbl9hO1xuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIC8vdmFsdWVzWzNdID0gLXNpbl9hO1xuICAgICAgICAgICAgLy92YWx1ZXNbNF0gPSBjb3NfYTtcbiAgICAgICAgICAgIHZhbHVlc1swXSA9IGNvc19hO1xuICAgICAgICAgICAgdmFsdWVzWzFdID0gLXNpbl9hO1xuXG4gICAgICAgICAgICB2YWx1ZXNbM10gPSBzaW5fYTtcbiAgICAgICAgICAgIHZhbHVlc1s0XSA9IGNvc19hO1xuXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyB0cmFuc2xhdGUoeDpudW1iZXIsIHk6bnVtYmVyKSB7XG4gICAgICAgICAgICB0aGlzLnR4ICs9IHRoaXMuYSAqIHggKyB0aGlzLmMgKiB5O1xuICAgICAgICAgICAgdGhpcy50eSArPSB0aGlzLmIgKiB4ICsgdGhpcy5kICogeTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBzZXRQb3NpdGlvbih4Om51bWJlciwgeTpudW1iZXIpe1xuICAgICAgICAgICAgdGhpcy50eCA9IHg7XG4gICAgICAgICAgICB0aGlzLnR5ID0geTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBzY2FsZSh4Om51bWJlciwgeTpudW1iZXIpIHtcbiAgICAgICAgICAgIHRoaXMuYSAqPSB4O1xuICAgICAgICAgICAgdGhpcy5iICo9IHg7XG4gICAgICAgICAgICB0aGlzLmMgKj0geTtcbiAgICAgICAgICAgIHRoaXMuZCAqPSB5O1xuXG4gICAgICAgICAgICAvL3ZhciB2YWx1ZXMgPSB0aGlzLnZhbHVlcztcbiAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAvL3ZhbHVlc1swXSAqPSB4O1xuICAgICAgICAgICAgLy92YWx1ZXNbMV0gKj0geDtcbiAgICAgICAgICAgIC8vdmFsdWVzWzJdICo9IHg7XG4gICAgICAgICAgICAvL1xuICAgICAgICAgICAgLy92YWx1ZXNbM10gKj0geTtcbiAgICAgICAgICAgIC8vdmFsdWVzWzRdICo9IHk7XG4gICAgICAgICAgICAvL3ZhbHVlc1s1XSAqPSB5O1xuXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcblxuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHNldFNjYWxlKHg6bnVtYmVyLCB5Om51bWJlcil7XG4gICAgICAgICAgICB2YXIgdmFsdWVzID0gdGhpcy52YWx1ZXM7XG5cbiAgICAgICAgICAgIHZhbHVlc1swXSA9IHg7XG4gICAgICAgICAgICB2YWx1ZXNbNF0gPSB5O1xuXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBnZXRUcmFuc2xhdGlvbigpe1xuICAgICAgICAgICAgcmV0dXJuIFZlY3RvcjIuY3JlYXRlKHRoaXMudHgsIHRoaXMudHkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGdldFNjYWxlKCl7XG4gICAgICAgICAgICByZXR1cm4gVmVjdG9yMi5jcmVhdGUoXG4gICAgICAgICAgICAgICAgTWF0aC5zcXJ0KHRoaXMuYSAqIHRoaXMuYSArIHRoaXMuYiAqIHRoaXMuYiksXG4gICAgICAgICAgICAgICAgTWF0aC5zcXJ0KHRoaXMuYyAqIHRoaXMuYyArIHRoaXMuZCAqIHRoaXMuZClcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgZ2V0Um90YXRpb24oKXtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9nZXRTa2V3WCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGdldFNrZXcoKXtcbiAgICAgICAgICAgIHJldHVybiBWZWN0b3IyLmNyZWF0ZShcbiAgICAgICAgICAgICAgICB0aGlzLl9nZXRTa2V3WCgpLFxuICAgICAgICAgICAgICAgIHRoaXMuX2dldFNrZXdZKClcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9nZXREZWx0YVRyYW5zZm9ybVBvaW50KG1hdHJpeDpNYXRyaXgzLCBwb2ludDp7eDpudW1iZXIsIHk6bnVtYmVyfSkgIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgeDogcG9pbnQueCAqIG1hdHJpeC5hICsgcG9pbnQueSAqIG1hdHJpeC5jICsgMCxcbiAgICAgICAgICAgICAgICB5OiBwb2ludC54ICogbWF0cml4LmIgKyBwb2ludC55ICogbWF0cml4LmQgKyAwXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfZ2V0U2tld1goKXtcbiAgICAgICAgICAgIHZhciBweCA9IHRoaXMuX2dldERlbHRhVHJhbnNmb3JtUG9pbnQodGhpcywge3g6IDAsIHk6IDF9KTtcblxuICAgICAgICAgICAgcmV0dXJuICgoMTgwIC8gTWF0aC5QSSkgKiBNYXRoLmF0YW4yKHB4LnksIHB4LngpIC0gOTApO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfZ2V0U2tld1koKXtcbiAgICAgICAgICAgIHZhciBweSA9IHRoaXMuX2dldERlbHRhVHJhbnNmb3JtUG9pbnQodGhpcywgeyB4OiAxLCB5OiAwIH0pO1xuXG4gICAgICAgICAgICByZXR1cm4gKCgxODAgLyBNYXRoLlBJKSAqIE1hdGguYXRhbjIocHkueSwgcHkueCkpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4iLCJtb2R1bGUgd2Qge1xuICAgIGRlY2xhcmUgdmFyIE1hdGg6YW55O1xuXG4gICAgZXhwb3J0IGNsYXNzIFF1YXRlcm5pb24ge1xuICAgICAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZSh4PzpudW1iZXIsIHk/Om51bWJlciwgej86bnVtYmVyLCB3PzpudW1iZXIpIHtcbiAgICAgICAgICAgIHZhciBvYmogPSBuZXcgdGhpcyh4LCB5LCB6LCB3KTtcblxuICAgICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0cnVjdG9yKHg6bnVtYmVyID0gMCwgeTpudW1iZXIgPSAwLCB6Om51bWJlciA9IDAsIHc6bnVtYmVyID0gMSkge1xuICAgICAgICAgICAgdGhpcy54ID0geDtcbiAgICAgICAgICAgIHRoaXMueSA9IHk7XG4gICAgICAgICAgICB0aGlzLnogPSB6O1xuICAgICAgICAgICAgdGhpcy53ID0gdztcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyB4Om51bWJlciA9IG51bGw7XG4gICAgICAgIHB1YmxpYyB5Om51bWJlciA9IG51bGw7XG4gICAgICAgIHB1YmxpYyB6Om51bWJlciA9IG51bGw7XG4gICAgICAgIHB1YmxpYyB3Om51bWJlciA9IG51bGw7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBmdW5jdGlvblxuICAgICAgICAgKiBAbmFtZSBzZXRGcm9tRXVsZXJBbmdsZXNcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIFNldHMgYSBxdWF0ZXJuaW9uIGZyb20gRXVsZXIgYW5nbGVzIHNwZWNpZmllZCBpbiBYWVogb3JkZXIuXG4gICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBleCBBbmdsZSB0byByb3RhdGUgYXJvdW5kIFggYXhpcyBpbiBkZWdyZWVzLlxuICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0gZXkgQW5nbGUgdG8gcm90YXRlIGFyb3VuZCBZIGF4aXMgaW4gZGVncmVlcy5cbiAgICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IGV6IEFuZ2xlIHRvIHJvdGF0ZSBhcm91bmQgWiBheGlzIGluIGRlZ3JlZXMuXG4gICAgICAgICAqIEByZXR1cm5zIHtRdWF0fSBTZWxmIGZvciBjaGFpbmluZy5cbiAgICAgICAgICogQGV4YW1wbGVcbiAgICAgICAgICogdmFyIHEgPSBuZXcgUXVhdCgpO1xuICAgICAgICAgKiBxLnNldEZyb21FdWxlckFuZ2xlcyg0NSwgOTAsIDE4MCk7XG4gICAgICAgICAqL1xuICAgICAgICBwdWJsaWMgc2V0RnJvbUV1bGVyQW5nbGVzKGV1bGVyQW5nbGVzOlZlY3RvcjMpIHtcbiAgICAgICAgICAgIHZhciBzeCwgY3gsIHN5LCBjeSwgc3osIGN6LCBoYWxmVG9SYWQsXG4gICAgICAgICAgICAgICAgZXggPSBldWxlckFuZ2xlcy54LFxuICAgICAgICAgICAgICAgIGV5ID0gZXVsZXJBbmdsZXMueSxcbiAgICAgICAgICAgICAgICBleiA9IGV1bGVyQW5nbGVzLno7XG5cbiAgICAgICAgICAgIGhhbGZUb1JhZCA9IDAuNSAqIERFR19UT19SQUQ7XG4gICAgICAgICAgICBleCAqPSBoYWxmVG9SYWQ7XG4gICAgICAgICAgICBleSAqPSBoYWxmVG9SYWQ7XG4gICAgICAgICAgICBleiAqPSBoYWxmVG9SYWQ7XG5cbiAgICAgICAgICAgIHN4ID0gTWF0aC5zaW4oZXgpO1xuICAgICAgICAgICAgY3ggPSBNYXRoLmNvcyhleCk7XG4gICAgICAgICAgICBzeSA9IE1hdGguc2luKGV5KTtcbiAgICAgICAgICAgIGN5ID0gTWF0aC5jb3MoZXkpO1xuICAgICAgICAgICAgc3ogPSBNYXRoLnNpbihleik7XG4gICAgICAgICAgICBjeiA9IE1hdGguY29zKGV6KTtcblxuICAgICAgICAgICAgdGhpcy54ID0gc3ggKiBjeSAqIGN6IC0gY3ggKiBzeSAqIHN6O1xuICAgICAgICAgICAgdGhpcy55ID0gY3ggKiBzeSAqIGN6ICsgc3ggKiBjeSAqIHN6O1xuICAgICAgICAgICAgdGhpcy56ID0gY3ggKiBjeSAqIHN6IC0gc3ggKiBzeSAqIGN6O1xuICAgICAgICAgICAgdGhpcy53ID0gY3ggKiBjeSAqIGN6ICsgc3ggKiBzeSAqIHN6O1xuXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBtdWx0aXBseShyaHM6UXVhdGVybmlvbik7XG4gICAgICAgIHB1YmxpYyBtdWx0aXBseShyaHMxOlF1YXRlcm5pb24sIHJoczI6UXVhdGVybmlvbik7XG5cbiAgICAgICAgcHVibGljIG11bHRpcGx5KC4uLmFyZ3MpIHtcbiAgICAgICAgICAgIHZhciBxMXgsIHExeSwgcTF6LCBxMXcsIHEyeCwgcTJ5LCBxMnosIHEydyxcbiAgICAgICAgICAgICAgICByaHMxLCByaHMyLFxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRoaXM7XG5cbiAgICAgICAgICAgIGlmKGFyZ3MubGVuZ3RoID09PSAxKXtcbiAgICAgICAgICAgICAgICByaHMxID0gdGhpcztcbiAgICAgICAgICAgICAgICByaHMyID0gYXJnc1swXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYoYXJncy5sZW5ndGggPT09IDIpe1xuICAgICAgICAgICAgICAgIHJoczEgPSBhcmdzWzBdO1xuICAgICAgICAgICAgICAgIHJoczIgPSBhcmdzWzFdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBxMXggPSByaHMxLng7XG4gICAgICAgICAgICBxMXkgPSByaHMxLnk7XG4gICAgICAgICAgICBxMXogPSByaHMxLno7XG4gICAgICAgICAgICBxMXcgPSByaHMxLnc7XG5cbiAgICAgICAgICAgIHEyeCA9IHJoczIueDtcbiAgICAgICAgICAgIHEyeSA9IHJoczIueTtcbiAgICAgICAgICAgIHEyeiA9IHJoczIuejtcbiAgICAgICAgICAgIHEydyA9IHJoczIudztcblxuICAgICAgICAgICAgcmVzdWx0LnggPSBxMXcgKiBxMnggKyBxMXggKiBxMncgKyBxMXkgKiBxMnogLSBxMXogKiBxMnk7XG4gICAgICAgICAgICByZXN1bHQueSA9IHExdyAqIHEyeSArIHExeSAqIHEydyArIHExeiAqIHEyeCAtIHExeCAqIHEyejtcbiAgICAgICAgICAgIHJlc3VsdC56ID0gcTF3ICogcTJ6ICsgcTF6ICogcTJ3ICsgcTF4ICogcTJ5IC0gcTF5ICogcTJ4O1xuICAgICAgICAgICAgcmVzdWx0LncgPSBxMXcgKiBxMncgLSBxMXggKiBxMnggLSBxMXkgKiBxMnkgLSBxMXogKiBxMno7XG5cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogQGZ1bmN0aW9uXG4gICAgICAgICAqIEBuYW1lIHNldEZyb21NYXQ0XG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBDb252ZXJ0cyB0aGUgc3BlY2lmaWVkIDR4NCBtYXRyaXggdG8gYSBxdWF0ZXJuaW9uLiBOb3RlIHRoYXQgc2luY2VcbiAgICAgICAgICogYSBxdWF0ZXJuaW9uIGlzIHB1cmVseSBhIHJlcHJlc2VudGF0aW9uIGZvciBvcmllbnRhdGlvbiwgb25seSB0aGUgdHJhbnNsYXRpb25hbCBwYXJ0XG4gICAgICAgICAqIG9mIHRoZSBtYXRyaXggaXMgbG9zdC5cbiAgICAgICAgICogQHBhcmFtIHtNYXQ0fSBtIFRoZSA0eDQgbWF0cml4IHRvIGNvbnZlcnQuXG4gICAgICAgICAqIEByZXR1cm5zIHtRdWF0fSBTZWxmIGZvciBjaGFpbmluZy5cbiAgICAgICAgICogQGV4YW1wbGVcbiAgICAgICAgICogLy8gQ3JlYXRlIGEgNHg0IHJvdGF0aW9uIG1hdHJpeCBvZiAxODAgZGVncmVlcyBhcm91bmQgdGhlIHktYXhpc1xuICAgICAgICAgKiB2YXIgcm90ID0gbmV3IE1hdDQoKS5zZXRGcm9tQXhpc0FuZ2xlKFZlYzMuVVAsIDE4MCk7XG4gICAgICAgICAqXG4gICAgICAgICAqIC8vIENvbnZlcnQgdG8gYSBxdWF0ZXJuaW9uXG4gICAgICAgICAqIHZhciBxID0gbmV3IFF1YXQoKS5zZXRGcm9tTWF0NChyb3QpO1xuICAgICAgICAgKi9cbiAgICAgICAgcHVibGljIHNldEZyb21NYXRyaXgobWF0cml4Ok1hdHJpeDQpIHtcbiAgICAgICAgICAgIHZhciBtMDAsIG0wMSwgbTAyLCBtMTAsIG0xMSwgbTEyLCBtMjAsIG0yMSwgbTIyLFxuICAgICAgICAgICAgICAgIHRyLCBzLCBycywgbHgsIGx5LCBseiwgbTtcblxuICAgICAgICAgICAgbSA9IG1hdHJpeC52YWx1ZXM7XG5cbiAgICAgICAgICAgIC8vIENhY2hlIG1hdHJpeCB2YWx1ZXMgZm9yIHN1cGVyLXNwZWVkXG4gICAgICAgICAgICBtMDAgPSBtWzBdO1xuICAgICAgICAgICAgbTAxID0gbVsxXTtcbiAgICAgICAgICAgIG0wMiA9IG1bMl07XG4gICAgICAgICAgICBtMTAgPSBtWzRdO1xuICAgICAgICAgICAgbTExID0gbVs1XTtcbiAgICAgICAgICAgIG0xMiA9IG1bNl07XG4gICAgICAgICAgICBtMjAgPSBtWzhdO1xuICAgICAgICAgICAgbTIxID0gbVs5XTtcbiAgICAgICAgICAgIG0yMiA9IG1bMTBdO1xuXG4gICAgICAgICAgICAvLyBSZW1vdmUgdGhlIHNjYWxlIGZyb20gdGhlIG1hdHJpeFxuICAgICAgICAgICAgbHggPSAxIC8gTWF0aC5zcXJ0KG0wMCAqIG0wMCArIG0wMSAqIG0wMSArIG0wMiAqIG0wMik7XG4gICAgICAgICAgICBseSA9IDEgLyBNYXRoLnNxcnQobTEwICogbTEwICsgbTExICogbTExICsgbTEyICogbTEyKTtcbiAgICAgICAgICAgIGx6ID0gMSAvIE1hdGguc3FydChtMjAgKiBtMjAgKyBtMjEgKiBtMjEgKyBtMjIgKiBtMjIpO1xuXG4gICAgICAgICAgICBtMDAgKj0gbHg7XG4gICAgICAgICAgICBtMDEgKj0gbHg7XG4gICAgICAgICAgICBtMDIgKj0gbHg7XG4gICAgICAgICAgICBtMTAgKj0gbHk7XG4gICAgICAgICAgICBtMTEgKj0gbHk7XG4gICAgICAgICAgICBtMTIgKj0gbHk7XG4gICAgICAgICAgICBtMjAgKj0gbHo7XG4gICAgICAgICAgICBtMjEgKj0gbHo7XG4gICAgICAgICAgICBtMjIgKj0gbHo7XG5cbiAgICAgICAgICAgIC8vIGh0dHA6Ly93d3cuY3MudWNyLmVkdS9+dmJ6L3Jlc291cmNlcy9xdWF0dXQucGRmXG5cbiAgICAgICAgICAgIHRyID0gbTAwICsgbTExICsgbTIyO1xuICAgICAgICAgICAgaWYgKHRyID49IDApIHtcbiAgICAgICAgICAgICAgICBzID0gTWF0aC5zcXJ0KHRyICsgMSk7XG4gICAgICAgICAgICAgICAgdGhpcy53ID0gcyAqIDAuNTtcbiAgICAgICAgICAgICAgICBzID0gMC41IC8gcztcbiAgICAgICAgICAgICAgICB0aGlzLnggPSAobTEyIC0gbTIxKSAqIHM7XG4gICAgICAgICAgICAgICAgdGhpcy55ID0gKG0yMCAtIG0wMikgKiBzO1xuICAgICAgICAgICAgICAgIHRoaXMueiA9IChtMDEgLSBtMTApICogcztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKG0wMCA+IG0xMSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAobTAwID4gbTIyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBYRGlhZ0RvbU1hdHJpeFxuICAgICAgICAgICAgICAgICAgICAgICAgcnMgPSAobTAwIC0gKG0xMSArIG0yMikpICsgMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJzID0gTWF0aC5zcXJ0KHJzKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy54ID0gcnMgKiAwLjU7XG4gICAgICAgICAgICAgICAgICAgICAgICBycyA9IDAuNSAvIHJzO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy53ID0gKG0xMiAtIG0yMSkgKiBycztcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMueSA9IChtMDEgKyBtMTApICogcnM7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnogPSAobTAyICsgbTIwKSAqIHJzO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gWkRpYWdEb21NYXRyaXhcbiAgICAgICAgICAgICAgICAgICAgICAgIHJzID0gKG0yMiAtIChtMDAgKyBtMTEpKSArIDE7XG4gICAgICAgICAgICAgICAgICAgICAgICBycyA9IE1hdGguc3FydChycyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMueiA9IHJzICogMC41O1xuICAgICAgICAgICAgICAgICAgICAgICAgcnMgPSAwLjUgLyBycztcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudyA9IChtMDEgLSBtMTApICogcnM7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnggPSAobTIwICsgbTAyKSAqIHJzO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy55ID0gKG0yMSArIG0xMikgKiBycztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobTExID4gbTIyKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFlEaWFnRG9tTWF0cml4XG4gICAgICAgICAgICAgICAgICAgIHJzID0gKG0xMSAtIChtMjIgKyBtMDApKSArIDE7XG4gICAgICAgICAgICAgICAgICAgIHJzID0gTWF0aC5zcXJ0KHJzKTtcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLnkgPSBycyAqIDAuNTtcbiAgICAgICAgICAgICAgICAgICAgcnMgPSAwLjUgLyBycztcbiAgICAgICAgICAgICAgICAgICAgdGhpcy53ID0gKG0yMCAtIG0wMikgKiBycztcbiAgICAgICAgICAgICAgICAgICAgdGhpcy56ID0gKG0xMiArIG0yMSkgKiBycztcbiAgICAgICAgICAgICAgICAgICAgdGhpcy54ID0gKG0xMCArIG0wMSkgKiBycztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBaRGlhZ0RvbU1hdHJpeFxuICAgICAgICAgICAgICAgICAgICBycyA9IChtMjIgLSAobTAwICsgbTExKSkgKyAxO1xuICAgICAgICAgICAgICAgICAgICBycyA9IE1hdGguc3FydChycyk7XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy56ID0gcnMgKiAwLjU7XG4gICAgICAgICAgICAgICAgICAgIHJzID0gMC41IC8gcnM7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudyA9IChtMDEgLSBtMTApICogcnM7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMueCA9IChtMjAgKyBtMDIpICogcnM7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMueSA9IChtMjEgKyBtMTIpICogcnM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAZnVuY3Rpb25cbiAgICAgICAgICogQG5hbWUgc2V0RnJvbUF4aXNBbmdsZVxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gU2V0cyBhIHF1YXRlcm5pb24gZnJvbSBhbiBhbmd1bGFyIHJvdGF0aW9uIGFyb3VuZCBhbiBheGlzLlxuICAgICAgICAgKiBAcGFyYW0ge1ZlYzN9IGF4aXMgV29ybGQgc3BhY2UgYXhpcyBhcm91bmQgd2hpY2ggdG8gcm90YXRlLlxuICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0gYW5nbGUgQW5nbGUgdG8gcm90YXRlIGFyb3VuZCB0aGUgZ2l2ZW4gYXhpcyBpbiBkZWdyZWVzLlxuICAgICAgICAgKiBAcmV0dXJucyB7UXVhdH0gU2VsZiBmb3IgY2hhaW5pbmcuXG4gICAgICAgICAqIEBleGFtcGxlXG4gICAgICAgICAqIHZhciBxID0gbmV3IFF1YXQoKTtcbiAgICAgICAgICogcS5zZXRGcm9tQXhpc0FuZ2xlKFZlYzMuVVAsIDkwKTtcbiAgICAgICAgICovXG4gICAgICAgIHB1YmxpYyBzZXRGcm9tQXhpc0FuZ2xlKGFuZ2xlOm51bWJlciwgYXhpczpWZWN0b3IzKSB7XG4gICAgICAgICAgICB2YXIgc2EsIGNhO1xuXG4gICAgICAgICAgICBheGlzID0gYXhpcy5ub3JtYWxpemUoKTtcblxuICAgICAgICAgICAgYW5nbGUgKj0gMC41ICogREVHX1RPX1JBRDtcblxuICAgICAgICAgICAgc2EgPSBNYXRoLnNpbihhbmdsZSk7XG4gICAgICAgICAgICBjYSA9IE1hdGguY29zKGFuZ2xlKTtcblxuICAgICAgICAgICAgdGhpcy54ID0gc2EgKiBheGlzLng7XG4gICAgICAgICAgICB0aGlzLnkgPSBzYSAqIGF4aXMueTtcbiAgICAgICAgICAgIHRoaXMueiA9IHNhICogYXhpcy56O1xuICAgICAgICAgICAgdGhpcy53ID0gY2E7XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBmdW5jdGlvblxuICAgICAgICAgKiBAbmFtZSBpbnZlcnRcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIEdlbmVyYXRlcyB0aGUgaW52ZXJzZSBvZiB0aGUgc3BlY2lmaWVkIHF1YXRlcm5pb24uXG4gICAgICAgICAqIEByZXR1cm5zIHtRdWF0fSBTZWxmIGZvciBjaGFpbmluZy5cbiAgICAgICAgICogQGV4YW1wbGVcbiAgICAgICAgICogLy8gQ3JlYXRlIGEgcXVhdGVybmlvbiByb3RhdGVkIDE4MCBkZWdyZWVzIGFyb3VuZCB0aGUgeS1heGlzXG4gICAgICAgICAqIHZhciByb3QgPSBuZXcgUXVhdCgpLnNldEZyb21FdWxlckFuZ2xlcygwLCAxODAsIDApO1xuICAgICAgICAgKlxuICAgICAgICAgKiAvLyBJbnZlcnQgaW4gcGxhY2VcbiAgICAgICAgICogcm90LmludmVydCgpO1xuICAgICAgICAgKi9cbiAgICAgICAgcHVibGljIGludmVydCgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbmp1Z2F0ZSgpLm5vcm1hbGl6ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGNvbmp1Z2F0ZSgpIHtcbiAgICAgICAgICAgIHRoaXMueCAqPSAtMTtcbiAgICAgICAgICAgIHRoaXMueSAqPSAtMTtcbiAgICAgICAgICAgIHRoaXMueiAqPSAtMTtcblxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogQGZ1bmN0aW9uXG4gICAgICAgICAqIEBuYW1lIGNsb25lXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBSZXR1cm5zIGFuIGlkZW50aWNhbCBjb3B5IG9mIHRoZSBzcGVjaWZpZWQgcXVhdGVybmlvbi5cbiAgICAgICAgICogQHJldHVybnMge1F1YXR9IEEgcXVhdGVybmlvbiBjb250YWluaW5nIHRoZSByZXN1bHQgb2YgdGhlIGNsb25pbmcuXG4gICAgICAgICAqIEBleGFtcGxlXG4gICAgICAgICAqIHZhciBxID0gbmV3IFF1YXQoLTAuMTEsIC0wLjE1LCAtMC40NiwgMC44Nyk7XG4gICAgICAgICAqIHZhciBxY2xvbmUgPSBxLmNsb25lKCk7XG4gICAgICAgICAqXG4gICAgICAgICAqIGNvbnNvbGUubG9nKFwiVGhlIHJlc3VsdCBvZiB0aGUgY2xvbmluZyBpczogXCIgKyBxLnRvU3RyaW5nKCkpO1xuICAgICAgICAgKi9cbiAgICAgICAgcHVibGljIGNsb25lKCkge1xuICAgICAgICAgICAgcmV0dXJuIFF1YXRlcm5pb24uY3JlYXRlKHRoaXMueCwgdGhpcy55LCB0aGlzLnosIHRoaXMudyk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgY29weSgpIHtcbiAgICAgICAgICAgIHJldHVybiBRdWF0ZXJuaW9uLmNyZWF0ZSh0aGlzLngsIHRoaXMueSwgdGhpcy56LCB0aGlzLncpO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBmdW5jdGlvblxuICAgICAgICAgKiBAbmFtZSBub3JtYWxpemVcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIFJldHVybnMgdGhlIHNwZWNpZmllZCBxdWF0ZXJuaW9uIGNvbnZlcnRlZCBpbiBwbGFjZSB0byBhIHVuaXQgcXVhdGVybmlvbi5cbiAgICAgICAgICogQHJldHVybnMge1F1YXR9IFRoZSByZXN1bHQgb2YgdGhlIG5vcm1hbGl6YXRpb24uXG4gICAgICAgICAqIEBleGFtcGxlXG4gICAgICAgICAqIHZhciB2ID0gbmV3IFF1YXQoMCwgMCwgMCwgNSk7XG4gICAgICAgICAqXG4gICAgICAgICAqIHYubm9ybWFsaXplKCk7XG4gICAgICAgICAqXG4gICAgICAgICAqIC8vIFNob3VsZCBvdXRwdXQgMCwgMCwgMCwgMVxuICAgICAgICAgKiBjb25zb2xlLmxvZyhcIlRoZSByZXN1bHQgb2YgdGhlIHZlY3RvciBub3JtYWxpemF0aW9uIGlzOiBcIiArIHYudG9TdHJpbmcoKSk7XG4gICAgICAgICAqL1xuICAgICAgICBwdWJsaWMgbm9ybWFsaXplKCkge1xuICAgICAgICAgICAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoKCk7XG4gICAgICAgICAgICBpZiAobGVuID09PSAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy54ID0gdGhpcy55ID0gdGhpcy56ID0gMDtcbiAgICAgICAgICAgICAgICB0aGlzLncgPSAxO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBsZW4gPSAxIC8gbGVuO1xuICAgICAgICAgICAgICAgIHRoaXMueCAqPSBsZW47XG4gICAgICAgICAgICAgICAgdGhpcy55ICo9IGxlbjtcbiAgICAgICAgICAgICAgICB0aGlzLnogKj0gbGVuO1xuICAgICAgICAgICAgICAgIHRoaXMudyAqPSBsZW47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBmdW5jdGlvblxuICAgICAgICAgKiBAbmFtZSBsZW5ndGhcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIFJldHVybnMgdGhlIG1hZ25pdHVkZSBvZiB0aGUgc3BlY2lmaWVkIHF1YXRlcm5pb24uXG4gICAgICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9IFRoZSBtYWduaXR1ZGUgb2YgdGhlIHNwZWNpZmllZCBxdWF0ZXJuaW9uLlxuICAgICAgICAgKiBAZXhhbXBsZVxuICAgICAgICAgKiB2YXIgcSA9IG5ldyBRdWF0KDAsIDAsIDAsIDUpO1xuICAgICAgICAgKiB2YXIgbGVuID0gcS5sZW5ndGgoKTtcbiAgICAgICAgICogLy8gU2hvdWxkIG91dHB1dCA1XG4gICAgICAgICAqIGNvbnNvbGUubG9nKFwiVGhlIGxlbmd0aCBvZiB0aGUgcXVhdGVybmlvbiBpczogXCIgKyBsZW4pO1xuICAgICAgICAgKi9cbiAgICAgICAgcHVibGljIGxlbmd0aCgpIHtcbiAgICAgICAgICAgIHZhciB4LCB5LCB6LCB3O1xuXG4gICAgICAgICAgICB4ID0gdGhpcy54O1xuICAgICAgICAgICAgeSA9IHRoaXMueTtcbiAgICAgICAgICAgIHogPSB0aGlzLno7XG4gICAgICAgICAgICB3ID0gdGhpcy53O1xuXG4gICAgICAgICAgICByZXR1cm4gTWF0aC5zcXJ0KHggKiB4ICsgeSAqIHkgKyB6ICogeiArIHcgKiB3KTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgcHVibGljIG11bHRpcGx5VmVjdG9yMyh2ZWN0b3I6VmVjdG9yMykge1xuICAgICAgICAgICAgdmFyIHEgPSB0aGlzO1xuICAgICAgICAgICAgdmFyIHggPSB2ZWN0b3IueDtcbiAgICAgICAgICAgIHZhciB5ID0gdmVjdG9yLnk7XG4gICAgICAgICAgICB2YXIgeiA9IHZlY3Rvci56O1xuXG4gICAgICAgICAgICB2YXIgcXggPSBxLng7XG4gICAgICAgICAgICB2YXIgcXkgPSBxLnk7XG4gICAgICAgICAgICB2YXIgcXogPSBxLno7XG4gICAgICAgICAgICB2YXIgcXcgPSBxLnc7XG5cbiAgICAgICAgICAgIC8vIGNhbGN1bGF0ZSBxdWF0ICogdmVjdG9yXG5cbiAgICAgICAgICAgIHZhciBpeCA9ICBxdyAqIHggKyBxeSAqIHogLSBxeiAqIHk7XG4gICAgICAgICAgICB2YXIgaXkgPSAgcXcgKiB5ICsgcXogKiB4IC0gcXggKiB6O1xuICAgICAgICAgICAgdmFyIGl6ID0gIHF3ICogeiArIHF4ICogeSAtIHF5ICogeDtcbiAgICAgICAgICAgIHZhciBpdyA9IC0gcXggKiB4IC0gcXkgKiB5IC0gcXogKiB6O1xuXG4gICAgICAgICAgICAvLyBjYWxjdWxhdGUgcmVzdWx0ICogaW52ZXJzZSBxdWF0XG5cbiAgICAgICAgICAgIHJldHVybiBWZWN0b3IzLmNyZWF0ZShcbiAgICAgICAgICAgICAgICBpeCAqIHF3ICsgaXcgKiAtIHF4ICsgaXkgKiAtIHF6IC0gaXogKiAtIHF5LFxuICAgICAgICAgICAgICAgIGl5ICogcXcgKyBpdyAqIC0gcXkgKyBpeiAqIC0gcXggLSBpeCAqIC0gcXosXG4gICAgICAgICAgICAgICAgaXogKiBxdyArIGl3ICogLSBxeiArIGl4ICogLSBxeSAtIGl5ICogLSBxeFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBzZXQoeDpudW1iZXIsIHk6bnVtYmVyLCB6Om51bWJlciwgdzpudW1iZXIpe1xuICAgICAgICAgICAgdGhpcy54ID0geDtcbiAgICAgICAgICAgIHRoaXMueSA9IHk7XG4gICAgICAgICAgICB0aGlzLnogPSB6O1xuICAgICAgICAgICAgdGhpcy53ID0gdztcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBzdWIocXVhdDpRdWF0ZXJuaW9uKXtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBxdWF0LmNvcHkoKS5pbnZlcnQoKS5tdWx0aXBseSh0aGlzKTtcblxuICAgICAgICAgICAgdGhpcy5zZXQocmVzdWx0LngsIHJlc3VsdC55LCByZXN1bHQueiwgcmVzdWx0LncpO1xuXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAZnVuY3Rpb25cbiAgICAgICAgICogQG5hbWUgZ2V0RXVsZXJBbmdsZXNcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIENvbnZlcnRzIHRoZSBzdXBwbGllZCBxdWF0ZXJuaW9uIHRvIEV1bGVyIGFuZ2xlcy5cbiAgICAgICAgICogQHBhcmFtIHtWZWMzfSBbZXVsZXJzXSBUaGUgMy1kaW1lbnNpb25hbCB2ZWN0b3IgdG8gcmVjZWl2ZSB0aGUgRXVsZXIgYW5nbGVzLlxuICAgICAgICAgKiBAcmV0dXJucyB7VmVjM30gVGhlIDMtZGltZW5zaW9uYWwgdmVjdG9yIGhvbGRpbmcgdGhlIEV1bGVyIGFuZ2xlcyB0aGF0XG4gICAgICAgICAqIGNvcnJlc3BvbmQgdG8gdGhlIHN1cHBsaWVkIHF1YXRlcm5pb24uXG4gICAgICAgICAqL1xuICAgICAgICBwdWJsaWMgZ2V0RXVsZXJBbmdsZXMoKSB7XG4gICAgICAgICAgICB2YXIgeCwgeSwgeiwgcXgsIHF5LCBxeiwgcXcsIGEyO1xuXG4gICAgICAgICAgICBxeCA9IHRoaXMueDtcbiAgICAgICAgICAgIHF5ID0gdGhpcy55O1xuICAgICAgICAgICAgcXogPSB0aGlzLno7XG4gICAgICAgICAgICBxdyA9IHRoaXMudztcblxuICAgICAgICAgICAgYTIgPSAyICogKHF3ICogcXkgLSBxeCAqIHF6KTtcbiAgICAgICAgICAgIGlmIChhMiA8PSAtMC45OTk5OSkge1xuICAgICAgICAgICAgICAgIHggPSAyICogTWF0aC5hdGFuMihxeCwgcXcpO1xuICAgICAgICAgICAgICAgIHkgPSAtTWF0aC5QSSAvIDI7XG4gICAgICAgICAgICAgICAgeiA9IDA7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGEyID49IDAuOTk5OTkpIHtcbiAgICAgICAgICAgICAgICB4ID0gMiAqIE1hdGguYXRhbjIocXgsIHF3KTtcbiAgICAgICAgICAgICAgICB5ID0gTWF0aC5QSSAvIDI7XG4gICAgICAgICAgICAgICAgeiA9IDA7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHggPSBNYXRoLmF0YW4yKDIgKiAocXcgKiBxeCArIHF5ICogcXopLCAxIC0gMiAqIChxeCAqIHF4ICsgcXkgKiBxeSkpO1xuICAgICAgICAgICAgICAgIHkgPSBNYXRoLmFzaW4oYTIpO1xuICAgICAgICAgICAgICAgIHogPSBNYXRoLmF0YW4yKDIgKiAocXcgKiBxeiArIHF4ICogcXkpLCAxIC0gMiAqIChxeSAqIHF5ICsgcXogKiBxeikpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gVmVjdG9yMy5jcmVhdGUoeCwgeSwgeikuc2NhbGUoUkFEX1RPX0RFRyk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJtb2R1bGUgd2Qge1xuICAgIGRlY2xhcmUgdmFyIE1hdGg6YW55O1xuXG4gICAgZXhwb3J0IGNsYXNzIFBsYW5le1xuICAgICAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZShhOiBudW1iZXIsIGI6IG51bWJlciwgYzogbnVtYmVyLCBkOiBudW1iZXIpIHtcbiAgICAgICAgXHR2YXIgb2JqID0gbmV3IHRoaXMoYSwgYiwgYywgZCk7XG5cbiAgICAgICAgXHRyZXR1cm4gb2JqO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3RydWN0b3IoYTogbnVtYmVyLCBiOiBudW1iZXIsIGM6IG51bWJlciwgZDogbnVtYmVyKXtcbiAgICAgICAgICAgIHRoaXMubm9ybWFsID0gVmVjdG9yMy5jcmVhdGUoYSwgYiwgYyk7XG4gICAgICAgICAgICB0aGlzLmQgPSBkO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIG5vcm1hbDpWZWN0b3IzID0gVmVjdG9yMy5jcmVhdGUoMCwgMSwgMCk7XG4gICAgICAgIHB1YmxpYyBkOm51bWJlciA9IDA7XG5cbiAgICAgICAgcHVibGljIGdldFJlZmxlY3Rpb25NYXRyaXgoKTpNYXRyaXg0IHtcbiAgICAgICAgICAgIHRoaXMubm9ybWFsaXplKCk7XG4gICAgICAgICAgICB2YXIgeCA9IHRoaXMubm9ybWFsLng7XG4gICAgICAgICAgICB2YXIgeSA9IHRoaXMubm9ybWFsLnk7XG4gICAgICAgICAgICB2YXIgeiA9IHRoaXMubm9ybWFsLno7XG4gICAgICAgICAgICB2YXIgdGVtcCA9IC0yICogeDtcbiAgICAgICAgICAgIHZhciB0ZW1wMiA9IC0yICogeTtcbiAgICAgICAgICAgIHZhciB0ZW1wMyA9IC0yICogejtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBNYXRyaXg0LmNyZWF0ZSgpO1xuXG4gICAgICAgICAgICByZXN1bHQudmFsdWVzWzBdID0gKHRlbXAgKiB4KSArIDE7XG4gICAgICAgICAgICByZXN1bHQudmFsdWVzWzFdID0gdGVtcDIgKiB4O1xuICAgICAgICAgICAgcmVzdWx0LnZhbHVlc1syXSA9IHRlbXAzICogeDtcbiAgICAgICAgICAgIHJlc3VsdC52YWx1ZXNbM10gPSAwLjA7XG4gICAgICAgICAgICByZXN1bHQudmFsdWVzWzRdID0gdGVtcCAqIHk7XG4gICAgICAgICAgICByZXN1bHQudmFsdWVzWzVdID0gKHRlbXAyICogeSkgKyAxO1xuICAgICAgICAgICAgcmVzdWx0LnZhbHVlc1s2XSA9IHRlbXAzICogeTtcbiAgICAgICAgICAgIHJlc3VsdC52YWx1ZXNbN10gPSAwLjA7XG4gICAgICAgICAgICByZXN1bHQudmFsdWVzWzhdID0gdGVtcCAqIHo7XG4gICAgICAgICAgICByZXN1bHQudmFsdWVzWzldID0gdGVtcDIgKiB6O1xuICAgICAgICAgICAgcmVzdWx0LnZhbHVlc1sxMF0gPSAodGVtcDMgKiB6KSArIDE7XG4gICAgICAgICAgICByZXN1bHQudmFsdWVzWzExXSA9IDAuMDtcbiAgICAgICAgICAgIHJlc3VsdC52YWx1ZXNbMTJdID0gdGVtcCAqIHRoaXMuZDtcbiAgICAgICAgICAgIHJlc3VsdC52YWx1ZXNbMTNdID0gdGVtcDIgKiB0aGlzLmQ7XG4gICAgICAgICAgICByZXN1bHQudmFsdWVzWzE0XSA9IHRlbXAzICogdGhpcy5kO1xuICAgICAgICAgICAgcmVzdWx0LnZhbHVlc1sxNV0gPSAxLjA7XG5cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgbm9ybWFsaXplKCk6UGxhbmUge1xuICAgICAgICAgICAgdmFyIG5vcm0gPSAoTWF0aC5zcXJ0KCh0aGlzLm5vcm1hbC54ICogdGhpcy5ub3JtYWwueCkgKyAodGhpcy5ub3JtYWwueSAqIHRoaXMubm9ybWFsLnkpICsgKHRoaXMubm9ybWFsLnogKiB0aGlzLm5vcm1hbC56KSkpO1xuICAgICAgICAgICAgdmFyIG1hZ25pdHVkZSA9IDA7XG5cbiAgICAgICAgICAgIGlmIChub3JtICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgbWFnbml0dWRlID0gMS4wIC8gbm9ybTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5ub3JtYWwueCAqPSBtYWduaXR1ZGU7XG4gICAgICAgICAgICB0aGlzLm5vcm1hbC55ICo9IG1hZ25pdHVkZTtcbiAgICAgICAgICAgIHRoaXMubm9ybWFsLnogKj0gbWFnbml0dWRlO1xuXG4gICAgICAgICAgICB0aGlzLmQgKj0gbWFnbml0dWRlO1xuXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBjb3B5KCk6IFBsYW5lIHtcbiAgICAgICAgICAgIHJldHVybiBQbGFuZS5jcmVhdGUodGhpcy5ub3JtYWwueCwgdGhpcy5ub3JtYWwueSwgdGhpcy5ub3JtYWwueiwgdGhpcy5kKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBkb3RDb29yZGluYXRlKHBvaW50KTogbnVtYmVyIHtcbiAgICAgICAgICAgIHJldHVybiAoKCgodGhpcy5ub3JtYWwueCAqIHBvaW50LngpICsgKHRoaXMubm9ybWFsLnkgKiBwb2ludC55KSkgKyAodGhpcy5ub3JtYWwueiAqIHBvaW50LnopKSArIHRoaXMuZCk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJtb2R1bGUgd2R7XG4gICAgZXhwb3J0IGNsYXNzIFJheSB7XG4gICAgICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlKG9yaWdpbjogVmVjdG9yMywgZGlyZWN0aW9uOiBWZWN0b3IzKSB7XG4gICAgICAgICAgICB2YXIgb2JqID0gbmV3IHRoaXMob3JpZ2luLCBkaXJlY3Rpb24pO1xuXG4gICAgICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3RydWN0b3Iob3JpZ2luOiBWZWN0b3IzLCBkaXJlY3Rpb246IFZlY3RvcjMpe1xuICAgICAgICAgICAgdGhpcy5fb3JpZ2luID0gb3JpZ2luO1xuICAgICAgICAgICAgdGhpcy5fZGlyZWN0aW9uID0gZGlyZWN0aW9uO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfb3JpZ2luOlZlY3RvcjMgPSBudWxsO1xuICAgICAgICBwcml2YXRlIF9kaXJlY3Rpb246VmVjdG9yMyA9IG51bGw7XG5cblxuICAgICAgICBwdWJsaWMgaXNJbnRlcnNlY3RXaXRoQUFCQihhYWJiOkFBQkJTaGFwZSk6IGJvb2xlYW47XG4gICAgICAgIHB1YmxpYyBpc0ludGVyc2VjdFdpdGhBQUJCKG1pblBvaW50OiBWZWN0b3IzLCBtYXhQb2ludDogVmVjdG9yMyk6IGJvb2xlYW47XG5cbiAgICAgICAgcHVibGljIGlzSW50ZXJzZWN0V2l0aEFBQkIoLi4uYXJncyk6IGJvb2xlYW4ge1xuICAgICAgICAgICAgdmFyIGNlbnRlcjpWZWN0b3IzID0gbnVsbCxcbiAgICAgICAgICAgICAgICBoYWxmRXh0ZW5kczpWZWN0b3IzID0gbnVsbCxcbiAgICAgICAgICAgICAgICBkaWZmID0gVmVjdG9yMy5jcmVhdGUoKSxcbiAgICAgICAgICAgICAgICBhYnNEaWZmID0gbnVsbCxcbiAgICAgICAgICAgICAgICBhYnNEaXIgPSBudWxsLFxuICAgICAgICAgICAgICAgIGNyb3NzID0gVmVjdG9yMy5jcmVhdGUoKSxcbiAgICAgICAgICAgICAgICBwcm9kID0gVmVjdG9yMy5jcmVhdGUoKSxcbiAgICAgICAgICAgICAgICByYXlPcmlnaW4gPSB0aGlzLl9vcmlnaW4sXG4gICAgICAgICAgICAgICAgcmF5RGlyID0gdGhpcy5fZGlyZWN0aW9uO1xuXG4gICAgICAgICAgICBpZihhcmdzLmxlbmd0aCA9PT0gMSl7XG4gICAgICAgICAgICAgICAgbGV0IGFhYmI6QUFCQlNoYXBlID0gYXJnc1swXTtcblxuICAgICAgICAgICAgICAgIGNlbnRlciA9IGFhYmIuY2VudGVyO1xuICAgICAgICAgICAgICAgIGhhbGZFeHRlbmRzID0gYWFiYi5oYWxmRXh0ZW50cztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYoYXJncy5sZW5ndGggPT09IDIpe1xuICAgICAgICAgICAgICAgIGxldCBtaW5Qb2ludCA9IGFyZ3NbMF0sXG4gICAgICAgICAgICAgICAgICAgIG1heFBvaW50ID0gYXJnc1sxXTtcblxuICAgICAgICAgICAgICAgIGNlbnRlciA9IEFBQkJTaGFwZS5nZXRDZW50ZXIobWluUG9pbnQsIG1heFBvaW50KTtcbiAgICAgICAgICAgICAgICBoYWxmRXh0ZW5kcyA9IEFBQkJTaGFwZS5nZXRIYWxmRXh0ZW50cyhtaW5Qb2ludCwgbWF4UG9pbnQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBkaWZmLnN1YjIocmF5T3JpZ2luLCBjZW50ZXIpO1xuICAgICAgICAgICAgYWJzRGlmZiA9IFZlY3RvcjMuY3JlYXRlKE1hdGguYWJzKGRpZmYueCksIE1hdGguYWJzKGRpZmYueSksIE1hdGguYWJzKGRpZmYueikpO1xuXG4gICAgICAgICAgICBwcm9kLm11bDIoZGlmZiwgcmF5RGlyKTtcblxuICAgICAgICAgICAgaWYgKGFic0RpZmYueCA+IGhhbGZFeHRlbmRzLnggJiYgcHJvZC54ID49IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYWJzRGlmZi55ID4gaGFsZkV4dGVuZHMueSAmJiBwcm9kLnkgPj0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChhYnNEaWZmLnogPiBoYWxmRXh0ZW5kcy56ICYmIHByb2QueiA+PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBhYnNEaXIgPSBWZWN0b3IzLmNyZWF0ZShNYXRoLmFicyhyYXlEaXIueCksIE1hdGguYWJzKHJheURpci55KSwgTWF0aC5hYnMocmF5RGlyLnopKTtcbiAgICAgICAgICAgIGNyb3NzLmNyb3NzKHJheURpciwgZGlmZik7XG4gICAgICAgICAgICBjcm9zcy5zZXQoTWF0aC5hYnMoY3Jvc3MueCksIE1hdGguYWJzKGNyb3NzLnkpLCBNYXRoLmFicyhjcm9zcy56KSk7XG5cbiAgICAgICAgICAgIGlmIChjcm9zcy54ID4gaGFsZkV4dGVuZHMueSAqIGFic0Rpci56ICsgaGFsZkV4dGVuZHMueiAqIGFic0Rpci55KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNyb3NzLnkgPiBoYWxmRXh0ZW5kcy54ICogYWJzRGlyLnogKyBoYWxmRXh0ZW5kcy56ICogYWJzRGlyLngpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY3Jvc3MueiA+IGhhbGZFeHRlbmRzLnggKiBhYnNEaXIueSArIGhhbGZFeHRlbmRzLnkgKiBhYnNEaXIueCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgaXNJbnRlcnNlY3RXaXRoU3BoZXJlKHNwaGVyZTpTcGhlcmVTaGFwZSk6IGJvb2xlYW4ge1xuICAgICAgICAgICAgdmFyIGNlbnRlcjpWZWN0b3IzID0gc3BoZXJlLmNlbnRlcixcbiAgICAgICAgICAgICAgICByYWRpdXM6bnVtYmVyID0gc3BoZXJlLnJhZGl1cyxcbiAgICAgICAgICAgICAgICBkaWZmID0gVmVjdG9yMy5jcmVhdGUoKSxcbiAgICAgICAgICAgICAgICBhID0gMCxcbiAgICAgICAgICAgICAgICBiID0gMCxcbiAgICAgICAgICAgICAgICBjID0gMCxcbiAgICAgICAgICAgICAgICBkaXNjciA9IDAsXG4gICAgICAgICAgICAgICAgcmF5T3JpZ2luID0gdGhpcy5fb3JpZ2luLFxuICAgICAgICAgICAgICAgIHJheURpciA9IHRoaXMuX2RpcmVjdGlvbjtcblxuICAgICAgICAgICAgZGlmZi5zdWIyKHJheU9yaWdpbiwgY2VudGVyKTtcbiAgICAgICAgICAgIGlmIChkaWZmLmRvdChkaWZmKSA8IHJhZGl1cyAqIHJhZGl1cyApIHtcbiAgICAgICAgICAgICAgICAvLyBzdGFydHMgaW5zaWRlIHRoaXNcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYSA9IHJheURpci5kb3QocmF5RGlyKTtcbiAgICAgICAgICAgIGIgPSAyICogcmF5RGlyLmRvdChkaWZmKTtcbiAgICAgICAgICAgIGMgPSBjZW50ZXIuZG90KGNlbnRlcik7XG4gICAgICAgICAgICBjICs9IHJheU9yaWdpbi5kb3QocmF5T3JpZ2luKTtcbiAgICAgICAgICAgIGMgLT0gMiAqIGNlbnRlci5kb3QocmF5T3JpZ2luKTtcbiAgICAgICAgICAgIGMgLT0gcmFkaXVzICogcmFkaXVzO1xuXG4gICAgICAgICAgICBkaXNjciA9IChiICogYikgLSAoNCAqIGEgKiBjKTtcbiAgICAgICAgICAgIGlmIChkaXNjciA8IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4iLCJtb2R1bGUgd2Qge1xuICAgIGV4cG9ydCBhYnN0cmFjdCBjbGFzcyBFbnRpdHkge1xuICAgICAgICBwcml2YXRlIHN0YXRpYyBfY291bnQ6bnVtYmVyID0gMTtcblxuICAgICAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgICAgIHRoaXMudWlkID0gRW50aXR5Ll9jb3VudDtcbiAgICAgICAgICAgIEVudGl0eS5fY291bnQgKz0gMTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyB1aWQ6bnVtYmVyID0gbnVsbDtcblxuICAgICAgICBwcml2YXRlIF90YWdMaXN0OndkQ2IuQ29sbGVjdGlvbjxzdHJpbmc+ID0gd2RDYi5Db2xsZWN0aW9uLmNyZWF0ZTxzdHJpbmc+KCk7XG5cblxuICAgICAgICBwdWJsaWMgYWRkVGFnKHRhZzpzdHJpbmcpIHtcbiAgICAgICAgICAgIHRoaXMuX3RhZ0xpc3QuYWRkQ2hpbGQodGFnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyByZW1vdmVUYWcodGFnOnN0cmluZykge1xuICAgICAgICAgICAgdGhpcy5fdGFnTGlzdC5yZW1vdmVDaGlsZCh0YWcpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGdldFRhZ0xpc3QoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fdGFnTGlzdDtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBoYXNUYWcodGFnOnN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3RhZ0xpc3QuaGFzQ2hpbGQodGFnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBjb250YWluVGFnKHRhZzpzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl90YWdMaXN0Lmhhc0NoaWxkKCh0OnN0cmluZykgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiB0LmluZGV4T2YodGFnKSA+IC0xO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsIm1vZHVsZSB3ZHtcbiAgICBleHBvcnQgYWJzdHJhY3QgY2xhc3MgQ29tcG9uZW50IGV4dGVuZHMgRW50aXR5e1xuICAgICAgICBwdWJsaWMgZW50aXR5T2JqZWN0OkVudGl0eU9iamVjdCA9IG51bGw7XG5cbiAgICAgICAgQHZpcnR1YWxcbiAgICAgICAgcHVibGljIGluaXQoKXtcbiAgICAgICAgfVxuXG4gICAgICAgIEB2aXJ0dWFsXG4gICAgICAgIHB1YmxpYyBkaXNwb3NlKCl7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgZ2V0IHRyYW5zZm9ybSgpOlRyYW5zZm9ybSB7XG4gICAgICAgICAgICBpZighdGhpcy5lbnRpdHlPYmplY3QpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZW50aXR5T2JqZWN0LnRyYW5zZm9ybTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBhZGRUb09iamVjdChlbnRpdHlPYmplY3Q6RW50aXR5T2JqZWN0KXtcbiAgICAgICAgICAgIGlmKHRoaXMuZW50aXR5T2JqZWN0KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lbnRpdHlPYmplY3QucmVtb3ZlQ29tcG9uZW50KHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5lbnRpdHlPYmplY3QgPSBlbnRpdHlPYmplY3Q7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgcmVtb3ZlRnJvbU9iamVjdChlbnRpdHlPYmplY3Q6RW50aXR5T2JqZWN0KXtcbiAgICAgICAgICAgIHRoaXMuZW50aXR5T2JqZWN0ID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsIm1vZHVsZSB3ZHtcbiAgICBleHBvcnQgY2xhc3MgU2NoZWR1bGVye1xuICAgICAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZSgpIHtcbiAgICAgICAgICAgIHZhciBvYmogPSBuZXcgdGhpcygpO1xuXG4gICAgICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfc2NoZWR1bGVDb3VudCA9IDA7XG4gICAgICAgIHByaXZhdGUgX3NjaGVkdWxlczp3ZENiLkhhc2g8YW55PiA9IHdkQ2IuSGFzaC5jcmVhdGU8YW55PigpO1xuXG4gICAgICAgIHB1YmxpYyB1cGRhdGUoZWxhcHNlZFRpbWU6bnVtYmVyKSB7XG4gICAgICAgICAgICB0aGlzLl9zY2hlZHVsZXMuZm9yRWFjaCgoc2NoZWR1bGVJdGVtOmFueSwgc2NoZWR1bGVJZDpzdHJpbmcpID0+IHtcbiAgICAgICAgICAgICAgICBpZihzY2hlZHVsZUl0ZW0uaXNTdG9wIHx8IHNjaGVkdWxlSXRlbS5pc1BhdXNlKXtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHNjaGVkdWxlSXRlbS51cGRhdGUoZWxhcHNlZFRpbWUpO1xuXG4gICAgICAgICAgICAgICAgaWYoc2NoZWR1bGVJdGVtLmlzRmluaXNoKXtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW1vdmUoc2NoZWR1bGVJZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogc2NoZWR1bGUgdGhlIHRhc2sgdG8gZWFjaCBmcmFtZVxuICAgICAgICAgKiBAcGFyYW0gdGFza1xuICAgICAgICAgKiBAcGFyYW0gYXJnc1xuICAgICAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBzY2hlZHVsZSBpZFxuICAgICAgICAgKi9cbiAgICAgICAgcHVibGljIHNjaGVkdWxlTG9vcCh0YXNrOkZ1bmN0aW9uLCBhcmdzOkFycmF5PGFueT49W10pIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9zY2hlZHVsZShMb29wU2NoZWR1bGVJdGVtLCBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDApKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBzY2hlZHVsZSB0aGUgdGFzayB0byB0aGUgbmV4dCBzcGVmaWNpZWQgZnJhbWVcbiAgICAgICAgICogQHBhcmFtIHRhc2tcbiAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IGZyYW1lXG4gICAgICAgICAqIEBwYXJhbSBhcmdzXG4gICAgICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IHNjaGVkdWxlIGlkXG4gICAgICAgICAqL1xuICAgICAgICBwdWJsaWMgc2NoZWR1bGVGcmFtZSh0YXNrLCBmcmFtZT0xLCBhcmdzPykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3NjaGVkdWxlKEZyYW1lU2NoZWR1bGVJdGVtLCBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDApKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBzY2hlZHVsZSB0aGUgdGFzayB0byBpbnRlcm5hbCwgbGlrZSBzZXRJbnRlcnZhbFxuICAgICAgICAgKiBAcGFyYW0gdGFza1xuICAgICAgICAgKiBAcGFyYW0gdGltZVxuICAgICAgICAgKiBAcGFyYW0gYXJnc1xuICAgICAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBzY2hlZHVsZSBpZFxuICAgICAgICAgKi9cbiAgICAgICAgcHVibGljIHNjaGVkdWxlSW50ZXJ2YWwodGFzaywgdGltZT0wLCBhcmdzPykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3NjaGVkdWxlKEludGVydmFsU2NoZWR1bGVJdGVtLCBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDApKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBzY2hlZHVsZSB0aGUgdGFzayB0byB0aW1lLCBsaWtlIHNldFRpbWVvdXRcbiAgICAgICAgICogQHBhcmFtIHRhc2tcbiAgICAgICAgICogQHBhcmFtIHRpbWVcbiAgICAgICAgICogQHBhcmFtIGFyZ3NcbiAgICAgICAgICogQHJldHVybnMge3N0cmluZ30gc2NoZWR1bGUgaWRcbiAgICAgICAgICovXG4gICAgICAgIHB1YmxpYyBzY2hlZHVsZVRpbWUodGFzaywgdGltZT0wLCBhcmdzPykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3NjaGVkdWxlKFRpbWVTY2hlZHVsZUl0ZW0sIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIHBhdXNlIHRoZSBzcGVjaWZpZWQgc2NoZWR1bGVcbiAgICAgICAgICogQHBhcmFtIHNjaGVkdWxlSWRcbiAgICAgICAgICovXG4gICAgICAgIHB1YmxpYyBwYXVzZShzY2hlZHVsZUlkPzpzdHJpbmcpIHtcbiAgICAgICAgICAgIGlmKGFyZ3VtZW50cy5sZW5ndGggPT09IDApe1xuICAgICAgICAgICAgICAgIGxldCBzZWxmID0gdGhpcztcblxuICAgICAgICAgICAgICAgIHRoaXMuX3NjaGVkdWxlcy5mb3JFYWNoKChzY2hlZHVsZUl0ZW06YW55LCBzY2hlZHVsZUlkOnN0cmluZykgPT4ge1xuICAgICAgICAgICAgICAgICAgICBzZWxmLnBhdXNlKHNjaGVkdWxlSWQpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZihhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAgICAgbGV0IHNjaGVkdWxlSXRlbSA9IHRoaXMuX3NjaGVkdWxlcy5nZXRDaGlsZChhcmd1bWVudHNbMF0pO1xuXG4gICAgICAgICAgICAgICAgc2NoZWR1bGVJdGVtLnBhdXNlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogcmVzdW1lIHRoZSBzcGVjaWZpZWQgc2NoZWR1bGVcbiAgICAgICAgICogQHBhcmFtIHNjaGVkdWxlSWRcbiAgICAgICAgICovXG4gICAgICAgIHB1YmxpYyByZXN1bWUoc2NoZWR1bGVJZD86c3RyaW5nKSB7XG4gICAgICAgICAgICBpZihhcmd1bWVudHMubGVuZ3RoID09PSAwKXtcbiAgICAgICAgICAgICAgICBsZXQgc2VsZiA9IHRoaXM7XG5cbiAgICAgICAgICAgICAgICB0aGlzLl9zY2hlZHVsZXMuZm9yRWFjaCgoc2NoZWR1bGVJdGVtOmFueSwgc2NoZWR1bGVJZDpzdHJpbmcpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5yZXN1bWUoc2NoZWR1bGVJZCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgICAgICBsZXQgc2NoZWR1bGVJdGVtID0gdGhpcy5fc2NoZWR1bGVzLmdldENoaWxkKGFyZ3VtZW50c1swXSk7XG5cbiAgICAgICAgICAgICAgICBzY2hlZHVsZUl0ZW0ucmVzdW1lKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgc3RhcnQoc2NoZWR1bGVJZD86c3RyaW5nKXtcbiAgICAgICAgICAgIGlmKGFyZ3VtZW50cy5sZW5ndGggPT09IDApe1xuICAgICAgICAgICAgICAgIGxldCBzZWxmID0gdGhpcztcblxuICAgICAgICAgICAgICAgIHRoaXMuX3NjaGVkdWxlcy5mb3JFYWNoKChzY2hlZHVsZUl0ZW06YW55LCBzY2hlZHVsZUlkOnN0cmluZykgPT4ge1xuICAgICAgICAgICAgICAgICAgICBzZWxmLnN0YXJ0KHNjaGVkdWxlSWQpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZihhcmd1bWVudHMubGVuZ3RoID09PSAxKXtcbiAgICAgICAgICAgICAgICBsZXQgc2NoZWR1bGVJdGVtID0gdGhpcy5fc2NoZWR1bGVzLmdldENoaWxkKGFyZ3VtZW50c1swXSk7XG5cbiAgICAgICAgICAgICAgICBzY2hlZHVsZUl0ZW0uc3RhcnQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBzdG9wKHNjaGVkdWxlSWQ/OnN0cmluZyl7XG4gICAgICAgICAgICBpZihhcmd1bWVudHMubGVuZ3RoID09PSAwKXtcbiAgICAgICAgICAgICAgICBsZXQgc2VsZiA9IHRoaXM7XG5cbiAgICAgICAgICAgICAgICB0aGlzLl9zY2hlZHVsZXMuZm9yRWFjaCgoc2NoZWR1bGVJdGVtOmFueSwgc2NoZWR1bGVJZDpzdHJpbmcpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5zdG9wKHNjaGVkdWxlSWQpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZihhcmd1bWVudHMubGVuZ3RoID09PSAxKXtcbiAgICAgICAgICAgICAgICBsZXQgc2NoZWR1bGVJdGVtID0gdGhpcy5fc2NoZWR1bGVzLmdldENoaWxkKGFyZ3VtZW50c1swXSk7XG5cbiAgICAgICAgICAgICAgICBzY2hlZHVsZUl0ZW0uc3RvcCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGhhcyhzY2hlZHVsZUlkOnN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuICEhdGhpcy5fc2NoZWR1bGVzLmhhc0NoaWxkKHNjaGVkdWxlSWQpXG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogcmVtb3ZlIHRoZSBzcGVjaWZ5IHNjaGVkdWxlIGJ5IGlkXG4gICAgICAgICAqIEBwYXJhbSBpZFxuICAgICAgICAgKi9cbiAgICAgICAgcHVibGljIHJlbW92ZShzY2hlZHVsZUlkOnN0cmluZykge1xuICAgICAgICAgICAgdGhpcy5fc2NoZWR1bGVzLnJlbW92ZUNoaWxkKHNjaGVkdWxlSWQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHJlbW92ZUFsbCgpe1xuICAgICAgICAgICAgdGhpcy5fc2NoZWR1bGVzLnJlbW92ZUFsbENoaWxkcmVuKCk7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9zY2hlZHVsZShfY2xhc3M6YW55LCBhcmdzOkFycmF5PGFueT4pe1xuICAgICAgICAgICAgdmFyIHNjaGVkdWxlSWQgPSB0aGlzLl9idWlsZElkKCk7XG5cbiAgICAgICAgICAgIHRoaXMuX3NjaGVkdWxlcy5zZXRWYWx1ZShzY2hlZHVsZUlkLCBfY2xhc3MuY3JlYXRlLmFwcGx5KF9jbGFzcywgYXJncykpO1xuXG4gICAgICAgICAgICByZXR1cm4gc2NoZWR1bGVJZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX2J1aWxkSWQoKXtcbiAgICAgICAgICAgIHJldHVybiAnU2NoZWR1bGVfJyArICh0aGlzLl9zY2hlZHVsZUNvdW50KyspO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY2xhc3MgU2NoZWR1bGVJdGVte1xuICAgICAgICBjb25zdHJ1Y3Rvcih0YXNrOkZ1bmN0aW9uLCBhcmdzOkFycmF5PGFueT4pe1xuICAgICAgICAgICAgdGhpcy50YXNrID0gdGFzaztcbiAgICAgICAgICAgIHRoaXMuYXJncyA9IGFyZ3M7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgaXNQYXVzZTpib29sZWFuID0gZmFsc2U7XG4gICAgICAgIHB1YmxpYyBpc1N0b3A6Ym9vbGVhbiA9IGZhbHNlO1xuICAgICAgICBwdWJsaWMgcGF1c2VUaW1lOm51bWJlciA9IG51bGw7XG4gICAgICAgIHB1YmxpYyBwYXVzZUVsYXBzZWQ6bnVtYmVyID0gbnVsbDtcbiAgICAgICAgcHVibGljIHN0YXJ0VGltZTpudW1iZXIgPSBudWxsO1xuICAgICAgICBwdWJsaWMgaXNGaW5pc2g6Ym9vbGVhbiA9IGZhbHNlO1xuXG4gICAgICAgIHByb3RlY3RlZCB0YXNrOkZ1bmN0aW9uID0gbnVsbDtcbiAgICAgICAgcHJvdGVjdGVkIGFyZ3M6QXJyYXk8YW55PiA9IG51bGw7XG4gICAgICAgIHByb3RlY3RlZCB0aW1lQ29udHJvbGxlcjpDb21tb25UaW1lQ29udHJvbGxlciA9IENvbW1vblRpbWVDb250cm9sbGVyLmNyZWF0ZSgpO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBwYXVzZSB0aGUgc3BlY2lmaWVkIHNjaGVkdWxlXG4gICAgICAgICAqIEBwYXJhbSBzY2hlZHVsZUlkXG4gICAgICAgICAqL1xuICAgICAgICBwdWJsaWMgcGF1c2UoKSB7XG4gICAgICAgICAgICB0aGlzLmlzUGF1c2UgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy50aW1lQ29udHJvbGxlci5wYXVzZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIHJlc3VtZSB0aGUgc3BlY2lmaWVkIHNjaGVkdWxlXG4gICAgICAgICAqIEBwYXJhbSBzY2hlZHVsZUlkXG4gICAgICAgICAqL1xuICAgICAgICBwdWJsaWMgcmVzdW1lKCl7XG4gICAgICAgICAgICB0aGlzLmlzUGF1c2UgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMudGltZUNvbnRyb2xsZXIucmVzdW1lKCk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgc3RhcnQoKXtcbiAgICAgICAgICAgIHRoaXMuaXNTdG9wID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLnRpbWVDb250cm9sbGVyLnN0YXJ0KCk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgc3RvcCgpe1xuICAgICAgICAgICAgdGhpcy5pc1N0b3AgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy50aW1lQ29udHJvbGxlci5zdG9wKCk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgZmluaXNoKCl7XG4gICAgICAgICAgICB0aGlzLmlzRmluaXNoID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNsYXNzIFRpbWVTY2hlZHVsZUl0ZW0gZXh0ZW5kcyBTY2hlZHVsZUl0ZW17XG4gICAgICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlKHRhc2s6RnVuY3Rpb24sIHRpbWU6bnVtYmVyID0gMCwgYXJnczpBcnJheTxhbnk+ID0gW10pIHtcbiAgICAgICAgICAgIHZhciBvYmogPSBuZXcgdGhpcyh0YXNrLCB0aW1lLCBhcmdzKTtcblxuICAgICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0cnVjdG9yKHRhc2s6RnVuY3Rpb24sIHRpbWU6bnVtYmVyID0gMCwgYXJnczpBcnJheTxhbnk+ID0gW10pe1xuICAgICAgICAgICAgc3VwZXIodGFzaywgYXJncyk7XG5cbiAgICAgICAgICAgIHRoaXMuX3RpbWUgPSB0aW1lO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfdGltZTpudW1iZXIgPSBudWxsO1xuXG4gICAgICAgIHB1YmxpYyB1cGRhdGUoZWxhcHNlZFRpbWU6bnVtYmVyKXtcbiAgICAgICAgICAgIHZhciBlbGFwc2VkID0gdGhpcy50aW1lQ29udHJvbGxlci5jb21wdXRlRWxhcHNlVGltZShlbGFwc2VkVGltZSk7XG5cbiAgICAgICAgICAgIGlmIChlbGFwc2VkID49IHRoaXMuX3RpbWUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnRhc2suYXBwbHkodGhpcywgdGhpcy5hcmdzKTtcbiAgICAgICAgICAgICAgICB0aGlzLmZpbmlzaCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgY2xhc3MgSW50ZXJ2YWxTY2hlZHVsZUl0ZW0gZXh0ZW5kcyBTY2hlZHVsZUl0ZW17XG4gICAgICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlKHRhc2s6RnVuY3Rpb24sIHRpbWU6bnVtYmVyID0gMCwgYXJnczpBcnJheTxhbnk+ID0gW10pIHtcbiAgICAgICAgICAgIHZhciBvYmogPSBuZXcgdGhpcyh0YXNrLCB0aW1lLCBhcmdzKTtcblxuICAgICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0cnVjdG9yKHRhc2s6RnVuY3Rpb24sIHRpbWU6bnVtYmVyID0gMCwgYXJnczpBcnJheTxhbnk+ID0gW10pIHtcbiAgICAgICAgICAgIHN1cGVyKHRhc2ssIGFyZ3MpO1xuXG4gICAgICAgICAgICB0aGlzLl9pbnRlcnZhbFRpbWUgPSB0aW1lO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfaW50ZXJ2YWxUaW1lOm51bWJlciA9IG51bGw7XG4gICAgICAgIHByaXZhdGUgX2VsYXBzZWQ6bnVtYmVyID0gMDtcblxuICAgICAgICBwdWJsaWMgdXBkYXRlKGVsYXBzZWRUaW1lOm51bWJlcil7XG4gICAgICAgICAgICB2YXIgZWxhcHNlZCA9IHRoaXMudGltZUNvbnRyb2xsZXIuY29tcHV0ZUVsYXBzZVRpbWUoZWxhcHNlZFRpbWUpO1xuXG4gICAgICAgICAgICBpZiAoZWxhcHNlZCAtIHRoaXMuX2VsYXBzZWQgPj0gdGhpcy5faW50ZXJ2YWxUaW1lKSB7XG4gICAgICAgICAgICAgICAgdGhpcy50YXNrLmFwcGx5KHRoaXMsIHRoaXMuYXJncyk7XG4gICAgICAgICAgICAgICAgdGhpcy5fZWxhcHNlZCA9ICBlbGFwc2VkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHN0YXJ0KCl7XG4gICAgICAgICAgICBzdXBlci5zdGFydCgpO1xuXG4gICAgICAgICAgICB0aGlzLl9lbGFwc2VkID0gMDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNsYXNzIExvb3BTY2hlZHVsZUl0ZW0gZXh0ZW5kcyBTY2hlZHVsZUl0ZW17XG4gICAgICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlKHRhc2s6RnVuY3Rpb24sIGFyZ3M6QXJyYXk8YW55PiA9IFtdKSB7XG4gICAgICAgICAgICB2YXIgb2JqID0gbmV3IHRoaXModGFzaywgYXJncyk7XG5cbiAgICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgdXBkYXRlKGVsYXBzZWRUaW1lOm51bWJlcil7XG4gICAgICAgICAgICB0aGlzLnRhc2suYXBwbHkodGhpcywgdGhpcy5hcmdzKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNsYXNzIEZyYW1lU2NoZWR1bGVJdGVtIGV4dGVuZHMgU2NoZWR1bGVJdGVtIHtcbiAgICAgICAgcHVibGljIHN0YXRpYyBjcmVhdGUodGFzazpGdW5jdGlvbiwgZnJhbWU6bnVtYmVyID0gMSwgYXJnczpBcnJheTxhbnk+ID0gW10pIHtcbiAgICAgICAgICAgIHZhciBvYmogPSBuZXcgdGhpcyh0YXNrLCBmcmFtZSwgYXJncyk7XG5cbiAgICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdHJ1Y3Rvcih0YXNrOkZ1bmN0aW9uLCBmcmFtZTpudW1iZXIgPSAxLCBhcmdzOkFycmF5PGFueT4gPSBbXSkge1xuICAgICAgICAgICAgc3VwZXIodGFzaywgYXJncyk7XG5cbiAgICAgICAgICAgIHRoaXMuX2ZyYW1lID0gZnJhbWU7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9mcmFtZTpudW1iZXIgPSBudWxsO1xuXG4gICAgICAgIHB1YmxpYyB1cGRhdGUoZWxhcHNlZFRpbWU6bnVtYmVyKXtcbiAgICAgICAgICAgIHRoaXMuX2ZyYW1lLS07XG5cbiAgICAgICAgICAgIGlmICh0aGlzLl9mcmFtZSA8PSAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy50YXNrLmFwcGx5KHRoaXMsIHRoaXMuYXJncyk7XG4gICAgICAgICAgICAgICAgdGhpcy5maW5pc2goKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbiIsIm1vZHVsZSB3ZHtcbiAgICBlbnVtIEdhbWVTdGF0ZXtcbiAgICAgICAgTk9STUFMLFxuICAgICAgICBTVE9QLFxuICAgICAgICBQQVVTRVxuICAgIH1cblxuICAgIC8vdG9kbyBpbnZva2Ugc2NlbmUub25FeGl0XG5cbiAgICBleHBvcnQgY2xhc3MgRGlyZWN0b3J7XG4gICAgICAgIHByaXZhdGUgc3RhdGljIF9pbnN0YW5jZSA9IG51bGw7XG5cbiAgICAgICAgcHVibGljIHN0YXRpYyBnZXRJbnN0YW5jZSgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9pbnN0YW5jZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2luc3RhbmNlID0gbmV3IHRoaXMoKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9pbnN0YW5jZS5pbml0V2hlbkNyZWF0ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2luc3RhbmNlO1xuICAgICAgICB9XG5cbiAgICAgICAgZ2V0IGdhbWVUaW1lKCl7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fdGltZUNvbnRyb2xsZXIuZ2FtZVRpbWU7XG4gICAgICAgIH1cblxuICAgICAgICBnZXQgZnBzKCl7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fdGltZUNvbnRyb2xsZXIuZnBzO1xuICAgICAgICB9XG5cbiAgICAgICAgZ2V0IGlzTm9ybWFsKCl7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZ2FtZVN0YXRlID09PSBHYW1lU3RhdGUuTk9STUFMO1xuICAgICAgICB9XG5cbiAgICAgICAgZ2V0IGlzU3RvcCgpe1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2dhbWVTdGF0ZSA9PT0gR2FtZVN0YXRlLlNUT1A7XG4gICAgICAgIH1cblxuICAgICAgICBnZXQgaXNQYXVzZSgpe1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2dhbWVTdGF0ZSA9PT0gR2FtZVN0YXRlLlBBVVNFO1xuICAgICAgICB9XG5cbiAgICAgICAgZ2V0IGlzVGltZUNoYW5nZSgpe1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3RpbWVDb250cm9sbGVyLmlzVGltZUNoYW5nZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGdldCBlbGFwc2VkKCl7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fdGltZUNvbnRyb2xsZXIuZWxhcHNlZDtcbiAgICAgICAgfVxuXG4gICAgICAgIGdldCB2aWV3KCl7XG4gICAgICAgICAgICByZXR1cm4gRGV2aWNlTWFuYWdlci5nZXRJbnN0YW5jZSgpLnZpZXc7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgc2NlbmU6U2NlbmVEaXNwYXRjaGVyID0gbnVsbDtcbiAgICAgICAgcHVibGljIHNjaGVkdWxlcjpTY2hlZHVsZXIgPSBudWxsO1xuICAgICAgICBwdWJsaWMgcmVuZGVyZXI6UmVuZGVyZXI9IG51bGw7XG5cbiAgICAgICAgcHJpdmF0ZSBfZ2FtZUxvb3A6d2RGcnAuSURpc3Bvc2FibGUgPSBudWxsO1xuICAgICAgICBwcml2YXRlIF9ldmVudFN1YnNjcmlwdGlvbjp3ZEZycC5JRGlzcG9zYWJsZSA9IG51bGw7XG4gICAgICAgIHByaXZhdGUgX2dhbWVTdGF0ZTpHYW1lU3RhdGUgPSBHYW1lU3RhdGUuTk9STUFMO1xuICAgICAgICBwcml2YXRlIF90aW1lQ29udHJvbGxlcjpEaXJlY3RvclRpbWVDb250cm9sbGVyPSBEaXJlY3RvclRpbWVDb250cm9sbGVyLmNyZWF0ZSgpO1xuICAgICAgICBwcml2YXRlIF9kb21FdmVudE1hbmFnZXI6RG9tRXZlbnRNYW5hZ2VyID0gRG9tRXZlbnRNYW5hZ2VyLmNyZWF0ZSgpO1xuXG5cbiAgICAgICAgcHVibGljIGluaXRXaGVuQ3JlYXRlKCl7XG4gICAgICAgICAgICB0aGlzLnNjZW5lID0gU2NlbmVEaXNwYXRjaGVyLmNyZWF0ZSgpO1xuICAgICAgICAgICAgdGhpcy5zY2hlZHVsZXIgPSBTY2hlZHVsZXIuY3JlYXRlKCk7XG4gICAgICAgICAgICB0aGlzLnJlbmRlcmVyID0gV2ViR0xSZW5kZXJlci5jcmVhdGUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBzdGFydCgpe1xuICAgICAgICAgICAgdGhpcy5fZ2FtZVN0YXRlID0gR2FtZVN0YXRlLk5PUk1BTDtcblxuICAgICAgICAgICAgdGhpcy5fc3RhcnRMb29wKCk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgc3RvcCgpe1xuICAgICAgICAgICAgdGhpcy5fZ2FtZUxvb3AgJiYgdGhpcy5fZ2FtZUxvb3AuZGlzcG9zZSgpO1xuICAgICAgICAgICAgdGhpcy5fZ2FtZVN0YXRlID0gR2FtZVN0YXRlLlNUT1A7XG4gICAgICAgICAgICB0aGlzLl90aW1lQ29udHJvbGxlci5zdG9wKCk7XG4gICAgICAgICAgICB0aGlzLnNjaGVkdWxlci5zdG9wKCk7XG4gICAgICAgICAgICB0aGlzLl9ldmVudFN1YnNjcmlwdGlvbiAmJiB0aGlzLl9ldmVudFN1YnNjcmlwdGlvbi5kaXNwb3NlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgcGF1c2UoKXtcbiAgICAgICAgICAgIGlmICh0aGlzLl9nYW1lU3RhdGUgPT09IEdhbWVTdGF0ZS5QQVVTRSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5fZ2FtZVN0YXRlID0gR2FtZVN0YXRlLlBBVVNFO1xuICAgICAgICAgICAgdGhpcy5fdGltZUNvbnRyb2xsZXIucGF1c2UoKTtcbiAgICAgICAgICAgIHRoaXMuc2NoZWR1bGVyLnBhdXNlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgcmVzdW1lKCl7XG4gICAgICAgICAgICB0aGlzLl9nYW1lU3RhdGUgPSBHYW1lU3RhdGUuTk9STUFMO1xuICAgICAgICAgICAgdGhpcy5fdGltZUNvbnRyb2xsZXIucmVzdW1lKCk7XG4gICAgICAgICAgICB0aGlzLnNjaGVkdWxlci5yZXN1bWUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vdG9kbyBhZGQgZGlzcG9zZVxuXG4gICAgICAgIHB1YmxpYyBnZXREZWx0YVRpbWUoKXtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl90aW1lQ29udHJvbGxlci5kZWx0YVRpbWU7XG4gICAgICAgIH1cblxuICAgICAgICBAZXhlY09ubHlPbmNlKFwiX2lzSW5pdFVJU2NlbmVcIilcbiAgICAgICAgcHVibGljIGluaXRVSU9iamVjdFNjZW5lKCl7XG4gICAgICAgICAgICB2YXIgdWlPYmplY3RTY2VuZTpVSU9iamVjdFNjZW5lID0gdGhpcy5zY2VuZS51aU9iamVjdFNjZW5lO1xuXG4gICAgICAgICAgICB0aGlzLl9pbml0RG9tRXZlbnQoKTtcblxuICAgICAgICAgICAgdWlPYmplY3RTY2VuZS5vbkVudGVyKCk7XG4gICAgICAgICAgICB1aU9iamVjdFNjZW5lLmluaXQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBydW5VSU9iamVjdFNjZW5lKGVsYXBzZVRpbWU6bnVtYmVyKXtcbiAgICAgICAgICAgIHZhciB1aU9iamVjdFNjZW5lOlVJT2JqZWN0U2NlbmUgPSB0aGlzLnNjZW5lLnVpT2JqZWN0U2NlbmU7XG5cbiAgICAgICAgICAgIEV2ZW50TWFuYWdlci50cmlnZ2VyKHVpT2JqZWN0U2NlbmUsIEN1c3RvbUV2ZW50LmNyZWF0ZSg8YW55PkVuZ2luZUV2ZW50LlNUQVJUTE9PUCkpO1xuXG4gICAgICAgICAgICB1aU9iamVjdFNjZW5lLnVwZGF0ZShlbGFwc2VUaW1lKTtcblxuICAgICAgICAgICAgRXZlbnRNYW5hZ2VyLnRyaWdnZXIodWlPYmplY3RTY2VuZSwgQ3VzdG9tRXZlbnQuY3JlYXRlKDxhbnk+RW5naW5lRXZlbnQuRU5ETE9PUCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfc3RhcnRMb29wKCkge1xuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgICAgICAgICB0aGlzLl9nYW1lTG9vcCA9IHRoaXMuX2J1aWxkSW5pdFN0cmVhbSgpXG4gICAgICAgICAgICAgICAgLmlnbm9yZUVsZW1lbnRzKClcbiAgICAgICAgICAgICAgICAuY29uY2F0KHRoaXMuX2J1aWxkTG9vcFN0cmVhbSgpKVxuICAgICAgICAgICAgICAgIC5zdWJzY3JpYmUoKHRpbWUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgLy90b2RvIG5lZWQgcG9seWZpbGxcbiAgICAgICAgICAgICAgICAgICAgLyohXG4gICAgICAgICAgICAgICAgICAgICBJIGFzc3VtZSB0aGF0IHRoZSB0aW1lIGlzIERPTUhpZ2hSZXNUaW1lU3RhbXAsIGJ1dCBpdCBtYXkgYmUgRE9NVGltZVN0YW1wIGluIHNvbWUgYnJvd3NlciFcbiAgICAgICAgICAgICAgICAgICAgIHNvIGl0IG5lZWQgcG9seWZpbGxcbiAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuX2xvb3BCb2R5KHRpbWUpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfYnVpbGRJbml0U3RyZWFtKCl7XG4gICAgICAgICAgICByZXR1cm4gd2RGcnAuY2FsbEZ1bmMoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuX2luaXQoKTtcbiAgICAgICAgICAgIH0sIHRoaXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfaW5pdCgpe1xuICAgICAgICAgICAgdGhpcy5faW5pdEdhbWVPYmplY3RTY2VuZSgpO1xuXG4gICAgICAgICAgICB0aGlzLmluaXRVSU9iamVjdFNjZW5lKCk7XG5cbiAgICAgICAgICAgIERlYnVnU3RhdGlzdGljcy5pbml0KCk7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9pbml0R2FtZU9iamVjdFNjZW5lKCl7XG4gICAgICAgICAgICB2YXIgZ2FtZU9iamVjdFNjZW5lOkdhbWVPYmplY3RTY2VuZSA9IHRoaXMuc2NlbmUuZ2FtZU9iamVjdFNjZW5lO1xuXG4gICAgICAgICAgICB0aGlzLl9pbml0RG9tRXZlbnQoKTtcblxuICAgICAgICAgICAgRXZlbnRNYW5hZ2VyLnRyaWdnZXIoQ3VzdG9tRXZlbnQuY3JlYXRlKDxhbnk+RW5naW5lRXZlbnQuQkVGT1JFX0dBTUVPQkpFQ1RfSU5JVCkpO1xuXG4gICAgICAgICAgICBnYW1lT2JqZWN0U2NlbmUub25FbnRlcigpO1xuICAgICAgICAgICAgZ2FtZU9iamVjdFNjZW5lLmluaXQoKTtcblxuICAgICAgICAgICAgLy90b2RvIG5vdCBwdXQgaGVyZT9cbiAgICAgICAgICAgIHRoaXMucmVuZGVyZXIuaW5pdCgpO1xuXG4gICAgICAgICAgICB0aGlzLl90aW1lQ29udHJvbGxlci5zdGFydCgpO1xuICAgICAgICAgICAgdGhpcy5zY2hlZHVsZXIuc3RhcnQoKTtcblxuICAgICAgICAgICAgRXZlbnRNYW5hZ2VyLnRyaWdnZXIoQ3VzdG9tRXZlbnQuY3JlYXRlKDxhbnk+RW5naW5lRXZlbnQuQUZURVJfR0FNRU9CSkVDVF9JTklUKSk7XG4gICAgICAgICAgICBFdmVudE1hbmFnZXIudHJpZ2dlcihDdXN0b21FdmVudC5jcmVhdGUoPGFueT5FbmdpbmVFdmVudC5BRlRFUl9HQU1FT0JKRUNUX0lOSVRfUklHSURCT0RZX0FERF9DT05TVFJBSU5UKSk7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9idWlsZExvb3BTdHJlYW0oKXtcbiAgICAgICAgICAgIHJldHVybiB3ZEZycC5pbnRlcnZhbFJlcXVlc3QoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX2xvb3BCb2R5KHRpbWUpIHtcbiAgICAgICAgICAgIHZhciBlbGFwc2VUaW1lID0gbnVsbDtcblxuICAgICAgICAgICAgaWYodGhpcy5fZ2FtZVN0YXRlID09PSBHYW1lU3RhdGUuUEFVU0UgfHwgdGhpcy5fZ2FtZVN0YXRlID09PSBHYW1lU3RhdGUuU1RPUCl7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBlbGFwc2VUaW1lID0gdGhpcy5fdGltZUNvbnRyb2xsZXIuY29tcHV0ZUVsYXBzZVRpbWUodGltZSk7XG5cbiAgICAgICAgICAgIHRoaXMuX3J1bihlbGFwc2VUaW1lKTtcblxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9ydW4oZWxhcHNlVGltZTpudW1iZXIpe1xuICAgICAgICAgICAgdGhpcy5fcnVuR2FtZU9iamVjdFNjZW5lKGVsYXBzZVRpbWUpO1xuXG4gICAgICAgICAgICB0aGlzLnJ1blVJT2JqZWN0U2NlbmUoZWxhcHNlVGltZSk7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9ydW5HYW1lT2JqZWN0U2NlbmUoZWxhcHNlVGltZTpudW1iZXIpIHtcbiAgICAgICAgICAgIHZhciBnYW1lT2JqZWN0U2NlbmU6R2FtZU9iamVjdFNjZW5lID0gdGhpcy5zY2VuZS5nYW1lT2JqZWN0U2NlbmU7XG5cbiAgICAgICAgICAgIHRoaXMuX3RpbWVDb250cm9sbGVyLnRpY2soZWxhcHNlVGltZSk7XG5cbiAgICAgICAgICAgIEV2ZW50TWFuYWdlci50cmlnZ2VyKEN1c3RvbUV2ZW50LmNyZWF0ZSg8YW55PkVuZ2luZUV2ZW50LlNUQVJUTE9PUCkpO1xuXG4gICAgICAgICAgICB0aGlzLnNjaGVkdWxlci51cGRhdGUoZWxhcHNlVGltZSk7XG5cbiAgICAgICAgICAgIGdhbWVPYmplY3RTY2VuZS51cGRhdGUoZWxhcHNlVGltZSk7XG4gICAgICAgICAgICBnYW1lT2JqZWN0U2NlbmUucmVuZGVyKHRoaXMucmVuZGVyZXIpO1xuXG4gICAgICAgICAgICBpZih0aGlzLnJlbmRlcmVyLmhhc0NvbW1hbmQoKSl7XG4gICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJlci5yZW5kZXIoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgRXZlbnRNYW5hZ2VyLnRyaWdnZXIoQ3VzdG9tRXZlbnQuY3JlYXRlKDxhbnk+RW5naW5lRXZlbnQuRU5ETE9PUCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgQGV4ZWNPbmx5T25jZShcIl9pc0luaXREb21FdmVudFwiKVxuICAgICAgICBwcml2YXRlIF9pbml0RG9tRXZlbnQoKXtcbiAgICAgICAgICAgIHRoaXMuX2V2ZW50U3Vic2NyaXB0aW9uID0gdGhpcy5fZG9tRXZlbnRNYW5hZ2VyLmluaXREb21FdmVudCgpO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwibW9kdWxlIHdke1xuICAgIGV4cG9ydCBjbGFzcyBNYWlue1xuICAgICAgICBwcml2YXRlIHN0YXRpYyBfaXNUZXN0OmJvb2xlYW4gPSBmYWxzZTtcbiAgICAgICAgc3RhdGljIGdldCBpc1Rlc3QoKXtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9pc1Rlc3Q7XG4gICAgICAgIH1cbiAgICAgICAgc3RhdGljIHNldCBpc1Rlc3QoaXNUZXN0OmJvb2xlYW4pe1xuICAgICAgICAgICAgdGhpcy5faXNUZXN0ID0gaXNUZXN0O1xuXG4gICAgICAgICAgICB3ZEZycC5NYWluLmlzVGVzdCA9IGlzVGVzdDtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgc2NyZWVuU2l6ZTphbnkgPSBudWxsO1xuXG4gICAgICAgIHByaXZhdGUgc3RhdGljIF9jYW52YXNJZDpzdHJpbmcgPSBudWxsO1xuXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgc2V0Q29uZmlnKHtcbiAgICAgICAgICAgIGNhbnZhc0lkLFxuICAgICAgICAgICAgaXNUZXN0ID0gRGVidWdDb25maWcuaXNUZXN0LFxuICAgICAgICAgICAgc2NyZWVuU2l6ZSA9IFNjcmVlblNpemUuRlVMTFxuICAgICAgICAgICAgfSl7XG4gICAgICAgICAgICB0aGlzLmlzVGVzdCA9IGlzVGVzdDtcbiAgICAgICAgICAgIHRoaXMuc2NyZWVuU2l6ZSA9IHNjcmVlblNpemU7XG4gICAgICAgICAgICB0aGlzLl9jYW52YXNJZCA9IGNhbnZhc0lkO1xuXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgc3RhdGljIGluaXQoKXtcbiAgICAgICAgICAgIHdkLkRldmljZU1hbmFnZXIuZ2V0SW5zdGFuY2UoKS5jcmVhdGVHTCh0aGlzLl9jYW52YXNJZCk7XG4gICAgICAgICAgICB3ZC5EZXZpY2VNYW5hZ2VyLmdldEluc3RhbmNlKCkuc2V0U2NyZWVuKCk7XG4gICAgICAgICAgICBHUFVEZXRlY3Rvci5nZXRJbnN0YW5jZSgpLmRldGVjdCgpO1xuXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsIm1vZHVsZSB3ZHtcbiAgICBkZWNsYXJlIHZhciBkb2N1bWVudDphbnk7XG5cbiAgICBleHBvcnQgY2xhc3MgRG9tRXZlbnRNYW5hZ2Vye1xuICAgICAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZSgpIHtcbiAgICAgICAgXHR2YXIgb2JqID0gbmV3IHRoaXMoKTtcblxuICAgICAgICBcdHJldHVybiBvYmo7XG4gICAgICAgIH1cblxuICAgICAgICBnZXQgc2NlbmUoKTpTY2VuZURpc3BhdGNoZXJ7XG4gICAgICAgICAgICByZXR1cm4gRGlyZWN0b3IuZ2V0SW5zdGFuY2UoKS5zY2VuZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX2xhc3RUcmlnZ2VyTGlzdDphbnkgPSBudWxsO1xuXG4gICAgICAgIHB1YmxpYyBpbml0RG9tRXZlbnQoKXtcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgICAgICAgICAgcmV0dXJuIHdkRnJwLmZyb21BcnJheShcbiAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgIEV2ZW50TWFuYWdlci5mcm9tRXZlbnQoRXZlbnROYW1lLkNMSUNLKSxcbiAgICAgICAgICAgICAgICAgICAgRXZlbnRNYW5hZ2VyLmZyb21FdmVudChFdmVudE5hbWUuTU9VU0VET1dOKSxcbiAgICAgICAgICAgICAgICAgICAgRXZlbnRNYW5hZ2VyLmZyb21FdmVudChFdmVudE5hbWUuTU9VU0VVUCksXG4gICAgICAgICAgICAgICAgICAgIEV2ZW50TWFuYWdlci5mcm9tRXZlbnQoRXZlbnROYW1lLk1PVVNFV0hFRUwpLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9idWlsZE1vdXNlRHJhZ1N0cmVhbSgpXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAubWVyZ2VBbGwoKVxuICAgICAgICAgICAgICAgIC5maWx0ZXIoKGU6TW91c2VFdmVudCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gIURpcmVjdG9yLmdldEluc3RhbmNlKCkuaXNQYXVzZSA7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAubWFwKChlOk1vdXNlRXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlbGYuX2dldE1vdXNlRXZlbnRUcmlnZ2VyTGlzdERhdGEoZSk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAubWVyZ2UoXG4gICAgICAgICAgICAgICAgICAgIEV2ZW50TWFuYWdlci5mcm9tRXZlbnQoRXZlbnROYW1lLk1PVVNFTU9WRSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5maWx0ZXIoKGU6TW91c2VFdmVudCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAhRGlyZWN0b3IuZ2V0SW5zdGFuY2UoKS5pc1BhdXNlIDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAubWFwKChlOk1vdXNlRXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdHJpZ2dlckxpc3QgPSBzZWxmLl9nZXRNb3VzZUV2ZW50VHJpZ2dlckxpc3QoZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHttb3VzZW92ZXJPYmplY3RzLCBtb3VzZW91dE9iamVjdHN9ID0gc2VsZi5fZ2V0TW91c2VPdmVyQW5kTW91c2VPdXRPYmplY3QodHJpZ2dlckxpc3QsIHNlbGYuX2xhc3RUcmlnZ2VyTGlzdCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLl9zZXRNb3VzZU92ZXJUYWcobW91c2VvdmVyT2JqZWN0cyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5fc2V0TW91c2VPdXRUYWcobW91c2VvdXRPYmplY3RzKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuX2xhc3RUcmlnZ2VyTGlzdCA9IHRyaWdnZXJMaXN0LmNvcHkoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyaWdnZXJMaXN0ID0gbW91c2VvdXRPYmplY3RzLmFkZENoaWxkcmVuKHRyaWdnZXJMaXN0KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzZWxmLl9nZXRNb3VzZUV2ZW50VHJpZ2dlckxpc3REYXRhKGUsIHRyaWdnZXJMaXN0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIC5maWx0ZXIoKFt0cmlnZ2VyTGlzdCwgZV0pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRyaWdnZXJMaXN0LmdldENvdW50KCkgPiAwO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLnN1YnNjcmliZSgoW3RyaWdnZXJMaXN0LCBlXSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyTGlzdC5mb3JFYWNoKChlbnRpdHlPYmplY3Q6RW50aXR5T2JqZWN0KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLl90cmlnZ2VyKGUuY29weSgpLCBlbnRpdHlPYmplY3QpO1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfYnVpbGRNb3VzZURyYWdTdHJlYW0oKXtcbiAgICAgICAgICAgIC8qIVxuICAgICAgICAgICAgIGhlcmUgYmluZCBvbiBkb2N1bWVudChub3Qgb24gZG9jdW1lbnQuYm9keSksIHNvIHRoZSBldmVudCBoYW5kbGVyIGJpbmRlZCB3aWxsIG5vdCBhZmZlY3RlZCBieSBvdGhlciBldmVudCBoYW5kbGVyIGJpbmRlZCBvbiB0aGUgc2FtZSBldmVudFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICByZXR1cm4gRXZlbnRNYW5hZ2VyLmZyb21FdmVudChkb2N1bWVudCwgRXZlbnROYW1lLk1PVVNFRE9XTilcbiAgICAgICAgICAgICAgICAuZmxhdE1hcCgoZTpNb3VzZUV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBFdmVudE1hbmFnZXIuZnJvbUV2ZW50KGRvY3VtZW50LCBFdmVudE5hbWUuTU9VU0VNT1ZFKS50YWtlVW50aWwoRXZlbnRNYW5hZ2VyLmZyb21FdmVudChkb2N1bWVudCwgRXZlbnROYW1lLk1PVVNFVVApKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5tYXAoKGU6TW91c2VFdmVudCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBlLm5hbWUgPSBFdmVudE5hbWUuTU9VU0VEUkFHO1xuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9nZXRNb3VzZU92ZXJBbmRNb3VzZU91dE9iamVjdChjdXJyZW50VHJpZ2dlckxpc3Q6d2RDYi5Db2xsZWN0aW9uPEVudGl0eU9iamVjdD4sIGxhc3RUcmlnZ2VyTGlzdDp3ZENiLkNvbGxlY3Rpb248RW50aXR5T2JqZWN0Pil7XG4gICAgICAgICAgICB2YXIgbW91c2VvdmVyT2JqZWN0cyA9IHdkQ2IuQ29sbGVjdGlvbi5jcmVhdGU8RW50aXR5T2JqZWN0PigpLFxuICAgICAgICAgICAgICAgIG1vdXNlb3V0T2JqZWN0cyA9IHdkQ2IuQ29sbGVjdGlvbi5jcmVhdGU8RW50aXR5T2JqZWN0PigpO1xuXG4gICAgICAgICAgICBpZighbGFzdFRyaWdnZXJMaXN0KXtcbiAgICAgICAgICAgICAgICBtb3VzZW92ZXJPYmplY3RzID0gY3VycmVudFRyaWdnZXJMaXN0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICAvL3RvZG8gb3B0aW1pemVcbiAgICAgICAgICAgICAgICBsYXN0VHJpZ2dlckxpc3QuZm9yRWFjaCgobGFzdE9iamVjdDpFbnRpdHlPYmplY3QpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYoIWN1cnJlbnRUcmlnZ2VyTGlzdC5oYXNDaGlsZCgoY3VycmVudE9iamVjdDpFbnRpdHlPYmplY3QpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gSnVkZ2VVdGlscy5pc0VxdWFsKGN1cnJlbnRPYmplY3QsIGxhc3RPYmplY3QpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSkpe1xuICAgICAgICAgICAgICAgICAgICAgICAgbW91c2VvdXRPYmplY3RzLmFkZENoaWxkKGxhc3RPYmplY3QpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBjdXJyZW50VHJpZ2dlckxpc3QuZm9yRWFjaCgoY3VycmVudE9iamVjdDpFbnRpdHlPYmplY3QpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYoIWxhc3RUcmlnZ2VyTGlzdC5oYXNDaGlsZCgobGFzdE9iamVjdDpFbnRpdHlPYmplY3QpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gSnVkZ2VVdGlscy5pc0VxdWFsKGN1cnJlbnRPYmplY3QsIGxhc3RPYmplY3QpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSkpe1xuICAgICAgICAgICAgICAgICAgICAgICAgbW91c2VvdmVyT2JqZWN0cy5hZGRDaGlsZChjdXJyZW50T2JqZWN0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIG1vdXNlb3Zlck9iamVjdHM6IG1vdXNlb3Zlck9iamVjdHMsXG4gICAgICAgICAgICAgICAgbW91c2VvdXRPYmplY3RzOiBtb3VzZW91dE9iamVjdHNcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX3NldE1vdXNlT3ZlclRhZyhvYmplY3RzOndkQ2IuQ29sbGVjdGlvbjxFbnRpdHlPYmplY3Q+KXtcbiAgICAgICAgICAgIG9iamVjdHMuZm9yRWFjaCgob2JqZWN0OkVudGl0eU9iamVjdCkgPT4ge1xuICAgICAgICAgICAgICAgIG9iamVjdC5hZGRUYWcoPGFueT5FdmVudFRhZy5NT1VTRV9PVkVSKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9zZXRNb3VzZU91dFRhZyhvYmplY3RzOndkQ2IuQ29sbGVjdGlvbjxFbnRpdHlPYmplY3Q+KXtcbiAgICAgICAgICAgIG9iamVjdHMuZm9yRWFjaCgob2JqZWN0OkVudGl0eU9iamVjdCkgPT4ge1xuICAgICAgICAgICAgICAgIG9iamVjdC5hZGRUYWcoPGFueT5FdmVudFRhZy5NT1VTRV9PVVQpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX3NldEV2ZW50TmFtZUJ5RXZlbnRUYWcob2JqZWN0OkVudGl0eU9iamVjdCwgZTpNb3VzZUV2ZW50KXtcbiAgICAgICAgICAgIGlmKG9iamVjdC5oYXNUYWcoPGFueT5FdmVudFRhZy5NT1VTRV9PVkVSKSl7XG4gICAgICAgICAgICAgICAgZS5uYW1lID0gRXZlbnROYW1lLk1PVVNFT1ZFUjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYob2JqZWN0Lmhhc1RhZyg8YW55PkV2ZW50VGFnLk1PVVNFX09VVCkpe1xuICAgICAgICAgICAgICAgIGUubmFtZSA9IEV2ZW50TmFtZS5NT1VTRU9VVDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGU7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9yZW1vdmVFdmVudFRhZyhvYmplY3Q6RW50aXR5T2JqZWN0KXtcbiAgICAgICAgICAgIG9iamVjdC5yZW1vdmVUYWcoPGFueT5FdmVudFRhZy5NT1VTRV9PVkVSKTtcbiAgICAgICAgICAgIG9iamVjdC5yZW1vdmVUYWcoPGFueT5FdmVudFRhZy5NT1VTRV9PVVQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfdHJpZ2dlcihlOk1vdXNlRXZlbnQsIGVudGl0eU9iamVjdDpFbnRpdHlPYmplY3QpO1xuICAgICAgICBwcml2YXRlIF90cmlnZ2VyKGU6TW91c2VFdmVudCwgZW50aXR5T2JqZWN0OkVudGl0eU9iamVjdCwgaXNCdWJibGU6Ym9vbGVhbik7XG5cbiAgICAgICAgcHJpdmF0ZSBfdHJpZ2dlciguLi5hcmdzKSB7XG4gICAgICAgICAgICB2YXIgZTpNb3VzZUV2ZW50ID0gYXJnc1swXSxcbiAgICAgICAgICAgICAgICBlbnRpdHlPYmplY3Q6RW50aXR5T2JqZWN0ID0gYXJnc1sxXSxcbiAgICAgICAgICAgICAgICBub3RTZXRUYXJnZXQgPSBmYWxzZSxcbiAgICAgICAgICAgICAgICBldmVudDpNb3VzZUV2ZW50ID0gbnVsbCxcbiAgICAgICAgICAgICAgICBjdXN0b21FdmVudDpDdXN0b21FdmVudCA9IG51bGwsXG4gICAgICAgICAgICAgICAgaGFuZGxlck5hbWUgPSBudWxsO1xuXG4gICAgICAgICAgICBpZihhcmdzLmxlbmd0aCA9PT0gMyAmJiBhcmdzWzJdKXtcbiAgICAgICAgICAgICAgICBub3RTZXRUYXJnZXQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGV2ZW50ID0gZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICAgICAgZXZlbnQgPSB0aGlzLl9zZXRFdmVudE5hbWVCeUV2ZW50VGFnKGVudGl0eU9iamVjdCwgZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5fcmVtb3ZlRXZlbnRUYWcoZW50aXR5T2JqZWN0KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaGFuZGxlck5hbWUgPSBFdmVudFRyaWdnZXJUYWJsZS5nZXRTY3JpcHRIYW5kbGVyTmFtZShldmVudC5uYW1lKTtcblxuICAgICAgICAgICAgY3VzdG9tRXZlbnQgPSBDdXN0b21FdmVudC5jcmVhdGUoPGFueT5FbmdpbmVFdmVudFtFdmVudFRyaWdnZXJUYWJsZS5nZXRTY3JpcHRFbmdpbmVFdmVudChldmVudC5uYW1lKV0pO1xuXG4gICAgICAgICAgICBjdXN0b21FdmVudC5nZXREYXRhRnJvbURvbUV2ZW50KGV2ZW50KTtcblxuICAgICAgICAgICAgLy90b2RvIHJlZmFjdG9yOiBzdXBwb3J0IGRpcmVjdGx5IHRyaWdnZXIgbW91c2UgZXZlbnQgb24gdGFyZ2V0XG4gICAgICAgICAgICBFdmVudE1hbmFnZXIudHJpZ2dlcihlbnRpdHlPYmplY3QsIGN1c3RvbUV2ZW50LCBldmVudCwgbm90U2V0VGFyZ2V0KTtcblxuICAgICAgICAgICAgZXZlbnQuZ2V0RGF0YUZyb21DdXN0b21FdmVudChjdXN0b21FdmVudCk7XG5cbiAgICAgICAgICAgIGVudGl0eU9iamVjdC5leGVjRXZlbnRTY3JpcHQoaGFuZGxlck5hbWUsIGV2ZW50KTtcblxuICAgICAgICAgICAgaWYgKCFldmVudC5pc1N0b3BQcm9wYWdhdGlvbiAmJiBlbnRpdHlPYmplY3QuYnViYmxlUGFyZW50KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdHJpZ2dlcihldmVudC5jb3B5KCksIGVudGl0eU9iamVjdC5idWJibGVQYXJlbnQsIHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfZ2V0TW91c2VFdmVudFRyaWdnZXJMaXN0KGU6TW91c2VFdmVudCl7XG4gICAgICAgICAgICB2YXIgdG9wR2FtZU9iamVjdDpHYW1lT2JqZWN0ID0gbnVsbCxcbiAgICAgICAgICAgICAgICB0b3BVSU9iamVjdDpVSU9iamVjdCA9IG51bGwsXG4gICAgICAgICAgICAgICAgdHJpZ2dlckxpc3QgPSB3ZENiLkNvbGxlY3Rpb24uY3JlYXRlPEVudGl0eU9iamVjdD4oKTtcblxuXG4gICAgICAgICAgICB0b3BHYW1lT2JqZWN0ID0gdGhpcy5fZmluZFRvcEdhbWVPYmplY3QoZSwgdGhpcy5zY2VuZS5nYW1lT2JqZWN0U2NlbmUpO1xuICAgICAgICAgICAgdG9wVUlPYmplY3QgPSB0aGlzLl9maW5kVG9wVUlPYmplY3QoZSwgdGhpcy5zY2VuZS51aU9iamVjdFNjZW5lKTtcblxuICAgICAgICAgICAgaWYodG9wR2FtZU9iamVjdCl7XG4gICAgICAgICAgICAgICAgdHJpZ2dlckxpc3QuYWRkQ2hpbGQodG9wR2FtZU9iamVjdCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmKHRvcFVJT2JqZWN0KXtcbiAgICAgICAgICAgICAgICB0cmlnZ2VyTGlzdC5hZGRDaGlsZCh0b3BVSU9iamVjdCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmKHRoaXMuX2lzU2NlbmVBc1RvcE9uZShlLCB0cmlnZ2VyTGlzdCkpe1xuICAgICAgICAgICAgICAgIHRyaWdnZXJMaXN0LmFkZENoaWxkKHRoaXMuc2NlbmUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdHJpZ2dlckxpc3Q7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9pc1NjZW5lQXNUb3BPbmUoZTpNb3VzZUV2ZW50LCB0cmlnZ2VyTGlzdDp3ZENiLkNvbGxlY3Rpb248RW50aXR5T2JqZWN0Pil7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5faXNUcmlnZ2VyU2NlbmUoZSkgJiYgdHJpZ2dlckxpc3QuZ2V0Q291bnQoKSA9PT0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX2ZpbmRUb3BHYW1lT2JqZWN0KGU6TW91c2VFdmVudCwgZ2FtZU9iamVjdFNjZW5lOkdhbWVPYmplY3RTY2VuZSl7XG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9maW5kVHJpZ2dlckdhbWVPYmplY3RMaXN0KGUsIGdhbWVPYmplY3RTY2VuZSkuc29ydCgoYTpHYW1lT2JqZWN0LCBiOkdhbWVPYmplY3QpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlbGYuX2dldERpc3RhbmNlVG9DYW1lcmEoYSkgLSBzZWxmLl9nZXREaXN0YW5jZVRvQ2FtZXJhKGIpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmdldENoaWxkKDApO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfZ2V0RGlzdGFuY2VUb0NhbWVyYShvYmo6R2FtZU9iamVjdCl7XG4gICAgICAgICAgICByZXR1cm4gb2JqLnRyYW5zZm9ybS5wb3NpdGlvbi5jb3B5KCkuc3ViKERpcmVjdG9yLmdldEluc3RhbmNlKCkuc2NlbmUuY2FtZXJhLnRyYW5zZm9ybS5wb3NpdGlvbikubGVuZ3RoKCk7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9maW5kVG9wVUlPYmplY3QoZTpNb3VzZUV2ZW50LCB1aU9iamVjdFNjZW5lOlVJT2JqZWN0U2NlbmUpe1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2ZpbmRUcmlnZ2VyVUlPYmplY3RMaXN0KGUsIHVpT2JqZWN0U2NlbmUpLnNvcnQoKGE6VUlPYmplY3QsIGI6VUlPYmplY3QpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGIudHJhbnNmb3JtLnpJbmRleCAtIGEudHJhbnNmb3JtLnpJbmRleDtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5nZXRDaGlsZCgwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX2ZpbmRUcmlnZ2VyR2FtZU9iamVjdExpc3QoZTpNb3VzZUV2ZW50LCBvYmplY3RTY2VuZTpHYW1lT2JqZWN0U2NlbmUpOndkQ2IuQ29sbGVjdGlvbjxHYW1lT2JqZWN0PntcbiAgICAgICAgICAgIHZhciB0cmlnZ2VyT2JqZWN0TGlzdCA9IHdkQ2IuQ29sbGVjdGlvbi5jcmVhdGU8YW55PigpLFxuICAgICAgICAgICAgICAgIHNlbGYgPSB0aGlzO1xuICAgICAgICAgICAgdmFyIGZpbmQgPSAoZW50aXR5T2JqZWN0OkdhbWVPYmplY3QpID0+IHtcbiAgICAgICAgICAgICAgICBpZihlbnRpdHlPYmplY3QuaGFzQ29tcG9uZW50KE9jdHJlZSkpe1xuICAgICAgICAgICAgICAgICAgICBlbnRpdHlPYmplY3QuZ2V0T2N0cmVlKCkuZ2V0SW50ZXJzZWN0TGlzdFdpdGhSYXkoZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5mb3JFYWNoKChlbnRpdHlPYmplY3Q6R2FtZU9iamVjdCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuX2FkZFRyaWdnZXJPYmplY3RCeVF1ZXJ5RGV0ZWN0b3IoZW50aXR5T2JqZWN0LCBlLCB0cmlnZ2VyT2JqZWN0TGlzdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5fYWRkVHJpZ2dlck9iamVjdEJ5UXVlcnlEZXRlY3RvcihlbnRpdHlPYmplY3QsIGUsIHRyaWdnZXJPYmplY3RMaXN0KTtcblxuICAgICAgICAgICAgICAgICAgICBlbnRpdHlPYmplY3QuZm9yRWFjaCgoY2hpbGQ6R2FtZU9iamVjdCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgZmluZChjaGlsZCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgb2JqZWN0U2NlbmUuZm9yRWFjaCgoY2hpbGQ6R2FtZU9iamVjdCkgPT4ge1xuICAgICAgICAgICAgICAgIGZpbmQoY2hpbGQpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHJldHVybiB0cmlnZ2VyT2JqZWN0TGlzdDtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX2ZpbmRUcmlnZ2VyVUlPYmplY3RMaXN0KGU6TW91c2VFdmVudCwgb2JqZWN0U2NlbmU6VUlPYmplY3RTY2VuZSk6d2RDYi5Db2xsZWN0aW9uPFVJT2JqZWN0PntcbiAgICAgICAgICAgIHZhciB0cmlnZ2VyT2JqZWN0TGlzdCA9IHdkQ2IuQ29sbGVjdGlvbi5jcmVhdGU8YW55PigpLFxuICAgICAgICAgICAgICAgIHNlbGYgPSB0aGlzO1xuICAgICAgICAgICAgdmFyIGZpbmQgPSAoZW50aXR5T2JqZWN0OlVJT2JqZWN0KSA9PiB7XG4gICAgICAgICAgICAgICAgc2VsZi5fYWRkVHJpZ2dlck9iamVjdEJ5UXVlcnlEZXRlY3RvcihlbnRpdHlPYmplY3QsIGUsIHRyaWdnZXJPYmplY3RMaXN0KTtcblxuICAgICAgICAgICAgICAgIGVudGl0eU9iamVjdC5mb3JFYWNoKChjaGlsZDpVSU9iamVjdCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBmaW5kKGNoaWxkKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgb2JqZWN0U2NlbmUuZm9yRWFjaCgoY2hpbGQ6VUlPYmplY3QpID0+IHtcbiAgICAgICAgICAgICAgICBmaW5kKGNoaWxkKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICByZXR1cm4gdHJpZ2dlck9iamVjdExpc3Q7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9hZGRUcmlnZ2VyT2JqZWN0QnlRdWVyeURldGVjdG9yKGVudGl0eU9iamVjdDpFbnRpdHlPYmplY3QsIGU6TW91c2VFdmVudCwgdHJpZ2dlck9iamVjdExpc3Q6d2RDYi5Db2xsZWN0aW9uPEVudGl0eU9iamVjdD4pe1xuICAgICAgICAgICAgaWYgKGVudGl0eU9iamVjdC5oYXNDb21wb25lbnQoRXZlbnRUcmlnZ2VyRGV0ZWN0b3IpKSB7XG4gICAgICAgICAgICAgICAgbGV0IGRldGVjdG9yID0gZW50aXR5T2JqZWN0LmdldENvbXBvbmVudDxFdmVudFRyaWdnZXJEZXRlY3Rvcj4oRXZlbnRUcmlnZ2VyRGV0ZWN0b3IpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGRldGVjdG9yLmlzVHJpZ2dlcihlKSkge1xuICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyT2JqZWN0TGlzdC5hZGRDaGlsZChlbnRpdHlPYmplY3QpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX2lzVHJpZ2dlclNjZW5lKGU6TW91c2VFdmVudCl7XG4gICAgICAgICAgICB2YXIgZGV0ZWN0b3IgPSB0aGlzLnNjZW5lLmdldENvbXBvbmVudDxFdmVudFRyaWdnZXJEZXRlY3Rvcj4oRXZlbnRUcmlnZ2VyRGV0ZWN0b3IpO1xuXG4gICAgICAgICAgICByZXR1cm4gZGV0ZWN0b3IuaXNUcmlnZ2VyKGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfZ2V0TW91c2VFdmVudFRyaWdnZXJMaXN0RGF0YShlOk1vdXNlRXZlbnQpO1xuICAgICAgICBwcml2YXRlIF9nZXRNb3VzZUV2ZW50VHJpZ2dlckxpc3REYXRhKGU6TW91c2VFdmVudCwgdHJpZ2dlckxpc3Q6d2RDYi5Db2xsZWN0aW9uPEVudGl0eU9iamVjdD4pO1xuXG4gICAgICAgIHByaXZhdGUgX2dldE1vdXNlRXZlbnRUcmlnZ2VyTGlzdERhdGEoLi4uYXJncyl7XG4gICAgICAgICAgICBpZihhcmdzLmxlbmd0aCA9PT0gMSl7XG4gICAgICAgICAgICAgICAgbGV0IGU6TW91c2VFdmVudCA9IGFyZ3NbMF07XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gW3RoaXMuX2dldE1vdXNlRXZlbnRUcmlnZ2VyTGlzdChlKSwgZV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgIGxldCBlOk1vdXNlRXZlbnQgPSBhcmdzWzBdLFxuICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyTGlzdDp3ZENiLkNvbGxlY3Rpb248RW50aXR5T2JqZWN0PiA9IGFyZ3NbMV07XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gW3RyaWdnZXJMaXN0LCBlXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGVudW0gRXZlbnRUYWd7XG4gICAgICAgIE1PVVNFX09WRVIgPSA8YW55PlwiTU9VU0VfT1ZFUlwiLFxuICAgICAgICBNT1VTRV9PVVQgPSA8YW55PlwiTU9VU0VfT1VUXCJcbiAgICB9XG59XG4iLCJtb2R1bGUgd2Qge1xuICAgIC8vdG9kbyBhZGQgY29weSBtZXRob2RcbiAgICBleHBvcnQgYWJzdHJhY3QgY2xhc3MgRW50aXR5T2JqZWN0IGV4dGVuZHMgRW50aXR5e1xuICAgICAgICBwcml2YXRlIF9zY3JpcHRMaXN0OndkQ2IuSGFzaDxJU2NyaXB0QmVoYXZpb3I+ID0gd2RDYi5IYXNoLmNyZWF0ZTxJU2NyaXB0QmVoYXZpb3I+KCk7XG4gICAgICAgIGdldCBzY3JpcHRMaXN0KCl7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fc2NyaXB0TGlzdDtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX2J1YmJsZVBhcmVudDpFbnRpdHlPYmplY3QgPSBudWxsO1xuICAgICAgICBnZXQgYnViYmxlUGFyZW50KCl7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fYnViYmxlUGFyZW50ID8gdGhpcy5fYnViYmxlUGFyZW50IDogdGhpcy5wYXJlbnQ7XG4gICAgICAgIH1cbiAgICAgICAgc2V0IGJ1YmJsZVBhcmVudChidWJibGVQYXJlbnQ6RW50aXR5T2JqZWN0KXtcbiAgICAgICAgICAgIHRoaXMuX2J1YmJsZVBhcmVudCA9IGJ1YmJsZVBhcmVudDtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBuYW1lOnN0cmluZyA9IG51bGw7XG4gICAgICAgIHB1YmxpYyB0cmFuc2Zvcm06YW55ID0gbnVsbDtcbiAgICAgICAgcHVibGljIHBhcmVudDpFbnRpdHlPYmplY3QgPSBudWxsO1xuXG4gICAgICAgIHB1YmxpYyBhY3Rpb25NYW5hZ2VyOkFjdGlvbk1hbmFnZXIgPSBBY3Rpb25NYW5hZ2VyLmNyZWF0ZSgpO1xuXG4gICAgICAgIHByb3RlY3RlZCBjaGlsZHJlbjp3ZENiLkNvbGxlY3Rpb248YW55PiA9IHdkQ2IuQ29sbGVjdGlvbi5jcmVhdGU8YW55PigpO1xuICAgICAgICBwcm90ZWN0ZWQgc3RhcnRMb29wSGFuZGxlcjooKSA9PiB2b2lkID0gbnVsbDtcbiAgICAgICAgcHJvdGVjdGVkIGVuZExvb3BIYW5kbGVyOigpID0+IHZvaWQgPSBudWxsO1xuICAgICAgICBwcm90ZWN0ZWQgY29tcG9uZW50czp3ZENiLkNvbGxlY3Rpb248YW55PiA9IHdkQ2IuQ29sbGVjdGlvbi5jcmVhdGU8YW55PigpO1xuXG4gICAgICAgIHByaXZhdGUgX3NjcmlwdEV4ZWN1dGVIaXN0b3J5OndkQ2IuSGFzaDxib29sZWFuPiA9IHdkQ2IuSGFzaC5jcmVhdGU8Ym9vbGVhbj4oKTtcblxuICAgICAgICBAdmlydHVhbFxuICAgICAgICBwdWJsaWMgaW5pdFdoZW5DcmVhdGUoKXtcbiAgICAgICAgICAgIHRoaXMudHJhbnNmb3JtID0gdGhpcy5jcmVhdGVUcmFuc2Zvcm0oKTtcblxuICAgICAgICAgICAgaWYodGhpcy50cmFuc2Zvcm0pe1xuICAgICAgICAgICAgICAgIHRoaXMuYWRkQ29tcG9uZW50KHRoaXMudHJhbnNmb3JtKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBpbml0KCkge1xuICAgICAgICAgICAgdGhpcy5zdGFydExvb3BIYW5kbGVyID0gd2RDYi5GdW5jdGlvblV0aWxzLmJpbmQodGhpcywgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMub25TdGFydExvb3AoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5lbmRMb29wSGFuZGxlciA9IHdkQ2IuRnVuY3Rpb25VdGlscy5iaW5kKHRoaXMsICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLm9uRW5kTG9vcCgpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHRoaXMuYmluZFN0YXJ0TG9vcEV2ZW50KCk7XG4gICAgICAgICAgICB0aGlzLmJpbmRFbmRMb29wRXZlbnQoKTtcblxuICAgICAgICAgICAgdGhpcy5pbml0Q29tcG9uZW50KCk7XG5cbiAgICAgICAgICAgIHRoaXMuZm9yRWFjaCgoY2hpbGQ6RW50aXR5T2JqZWN0KSA9PiB7XG4gICAgICAgICAgICAgICAgY2hpbGQuaW5pdCgpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHRoaXMuYWZ0ZXJJbml0Q2hpbGRyZW4oKTtcblxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgb25TdGFydExvb3AoKSB7XG4gICAgICAgICAgICB0aGlzLmV4ZWNTY3JpcHQoXCJvblN0YXJ0TG9vcFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBvbkVuZExvb3AoKSB7XG4gICAgICAgICAgICB0aGlzLmV4ZWNTY3JpcHQoXCJvbkVuZExvb3BcIik7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgb25FbnRlcigpIHtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBvbkV4aXQoKSB7XG4gICAgICAgICAgICB0aGlzLmV4ZWNTY3JpcHQoXCJvbkV4aXRcIik7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgb25EaXNwb3NlKCl7XG4gICAgICAgICAgICB0aGlzLmV4ZWNTY3JpcHQoXCJvbkRpc3Bvc2VcIik7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgZGlzcG9zZSgpIHtcbiAgICAgICAgICAgIHZhciBjb21wb25lbnRzID0gbnVsbDtcblxuICAgICAgICAgICAgdGhpcy5vbkRpc3Bvc2UoKTtcblxuICAgICAgICAgICAgaWYodGhpcy5wYXJlbnQpe1xuICAgICAgICAgICAgICAgIHRoaXMucGFyZW50LnJlbW92ZUNoaWxkKHRoaXMpO1xuICAgICAgICAgICAgICAgIHRoaXMucGFyZW50ID0gbnVsbDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgRXZlbnRNYW5hZ2VyLm9mZih0aGlzKTtcblxuICAgICAgICAgICAgRXZlbnRNYW5hZ2VyLm9mZig8YW55PkVuZ2luZUV2ZW50LlNUQVJUTE9PUCwgdGhpcy5zdGFydExvb3BIYW5kbGVyKTtcbiAgICAgICAgICAgIEV2ZW50TWFuYWdlci5vZmYoPGFueT5FbmdpbmVFdmVudC5FTkRMT09QLCB0aGlzLmVuZExvb3BIYW5kbGVyKTtcblxuICAgICAgICAgICAgY29tcG9uZW50cyA9IHRoaXMucmVtb3ZlQWxsQ29tcG9uZW50KCk7XG5cbiAgICAgICAgICAgIGNvbXBvbmVudHMuZm9yRWFjaCgoY29tcG9uZW50OkNvbXBvbmVudCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbXBvbmVudC5kaXNwb3NlKCk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdGhpcy5mb3JFYWNoKChjaGlsZDpFbnRpdHlPYmplY3QpID0+IHtcbiAgICAgICAgICAgICAgICBjaGlsZC5kaXNwb3NlKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBoYXNDaGlsZChjaGlsZDpFbnRpdHlPYmplY3QpOmJvb2xlYW4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2hpbGRyZW4uaGFzQ2hpbGQoY2hpbGQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGFkZENoaWxkKGNoaWxkOkVudGl0eU9iamVjdCk6RW50aXR5T2JqZWN0IHtcbiAgICAgICAgICAgIGlmIChjaGlsZC5wYXJlbnQpIHtcbiAgICAgICAgICAgICAgICBjaGlsZC5wYXJlbnQucmVtb3ZlQ2hpbGQoY2hpbGQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjaGlsZC5wYXJlbnQgPSB0aGlzO1xuICAgICAgICAgICAgY2hpbGQudHJhbnNmb3JtLnBhcmVudCA9IHRoaXMudHJhbnNmb3JtO1xuXG4gICAgICAgICAgICB0aGlzLmNoaWxkcmVuLmFkZENoaWxkKGNoaWxkKTtcblxuICAgICAgICAgICAgLyohXG4gICAgICAgICAgICAgbm8gbmVlZCB0byBzb3J0IVxuICAgICAgICAgICAgIGJlY2F1c2UgV2ViR0xSZW5kZXJlciBlbmFibGUgZGVwdGggdGVzdCwgaXQgd2lsbCBzb3J0IHdoZW4gbmVlZGVkKGp1c3QgYXMgV2ViR0xSZW5kZXJlci0+cmVuZGVyU29ydGVkVHJhbnNwYXJlbnRDb21tYW5kcyBzb3J0IHRoZSBjb21tYW5kcylcbiAgICAgICAgICAgICAqL1xuXG4gICAgICAgICAgICBjaGlsZC5vbkVudGVyKCk7XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGFkZENoaWxkcmVuKGNoaWxkcmVuOkVudGl0eU9iamVjdCk7XG4gICAgICAgIHB1YmxpYyBhZGRDaGlsZHJlbihjaGlsZHJlbjpBcnJheTxFbnRpdHlPYmplY3Q+KTtcbiAgICAgICAgcHVibGljIGFkZENoaWxkcmVuKGNoaWxkcmVuOndkQ2IuQ29sbGVjdGlvbjxFbnRpdHlPYmplY3Q+KTtcblxuICAgICAgICBwdWJsaWMgYWRkQ2hpbGRyZW4oLi4uYXJncykge1xuICAgICAgICAgICAgdGhpcy5jaGlsZHJlbi5hZGRDaGlsZHJlbihhcmdzWzBdKTtcblxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgZm9yRWFjaChmdW5jOihlbnRpdHlPYmplY3Q6RW50aXR5T2JqZWN0KSA9PiB2b2lkKXtcbiAgICAgICAgICAgIHRoaXMuY2hpbGRyZW4uZm9yRWFjaChmdW5jKTtcblxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgZmlsdGVyKGZ1bmM6KGVudGl0eU9iamVjdDpFbnRpdHlPYmplY3QpID0+IGJvb2xlYW4pe1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2hpbGRyZW4uZmlsdGVyKGZ1bmMpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHNvcnQoZnVuYzooYTpFbnRpdHlPYmplY3QsIGI6RW50aXR5T2JqZWN0KSA9PiBhbnksIGlzU29ydFNlbGYgPSBmYWxzZSl7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jaGlsZHJlbi5zb3J0KGZ1bmMsIGlzU29ydFNlbGYpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGdldENoaWxkcmVuKCl7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jaGlsZHJlbjtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBnZXRDaGlsZChpbmRleDpudW1iZXIpe1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2hpbGRyZW4uZ2V0Q2hpbGQoaW5kZXgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGZpbmRDaGlsZEJ5VWlkKHVpZDpudW1iZXIpe1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2hpbGRyZW4uZmluZE9uZSgoY2hpbGQ6RW50aXR5T2JqZWN0KSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNoaWxkLnVpZCA9PT0gdWlkO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgZmluZENoaWxkQnlUYWcodGFnOnN0cmluZyl7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jaGlsZHJlbi5maW5kT25lKChjaGlsZDpFbnRpdHlPYmplY3QpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY2hpbGQuaGFzVGFnKHRhZyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBmaW5kQ2hpbGRCeU5hbWUobmFtZTpzdHJpbmcpe1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2hpbGRyZW4uZmluZE9uZSgoY2hpbGQ6RW50aXR5T2JqZWN0KSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNoaWxkLm5hbWUuc2VhcmNoKG5hbWUpID4gLTE7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBmaW5kQ2hpbGRyZW5CeU5hbWUobmFtZTpzdHJpbmcpOndkQ2IuQ29sbGVjdGlvbjxFbnRpdHlPYmplY3Q+e1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2hpbGRyZW4uZmlsdGVyKChjaGlsZDpFbnRpdHlPYmplY3QpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY2hpbGQubmFtZS5zZWFyY2gobmFtZSkgPiAtMTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGdldENvbXBvbmVudDxUPihfY2xhc3M6RnVuY3Rpb24pOlR7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb21wb25lbnRzLmZpbmRPbmUoKGNvbXBvbmVudDpDb21wb25lbnQpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29tcG9uZW50IGluc3RhbmNlb2YgX2NsYXNzO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgZmluZENvbXBvbmVudEJ5VWlkKHVpZDpudW1iZXIpe1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29tcG9uZW50cy5maW5kT25lKChjb21wb25lbnQ6Q29tcG9uZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbXBvbmVudC51aWQgPT09IHVpZDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGdldEZpcnN0Q29tcG9uZW50KCk6Q29tcG9uZW50IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbXBvbmVudHMuZ2V0Q2hpbGQoMCk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgZm9yRWFjaENvbXBvbmVudChmdW5jOihjb21wb25lbnQ6Q29tcG9uZW50KSA9PiB2b2lkKXtcbiAgICAgICAgICAgIHRoaXMuY29tcG9uZW50cy5mb3JFYWNoKGZ1bmMpO1xuXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyByZW1vdmVDaGlsZChjaGlsZDpFbnRpdHlPYmplY3QpOkVudGl0eU9iamVjdCB7XG4gICAgICAgICAgICBjaGlsZC5vbkV4aXQoKTtcblxuICAgICAgICAgICAgdGhpcy5jaGlsZHJlbi5yZW1vdmVDaGlsZChjaGlsZCk7XG5cbiAgICAgICAgICAgIGNoaWxkLnBhcmVudCA9IG51bGw7XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGhhc0NvbXBvbmVudChjb21wb25lbnQ6Q29tcG9uZW50KTpib29sZWFuO1xuICAgICAgICBwdWJsaWMgaGFzQ29tcG9uZW50KF9jbGFzczpGdW5jdGlvbik6Ym9vbGVhbjtcblxuICAgICAgICBwdWJsaWMgaGFzQ29tcG9uZW50KC4uLmFyZ3Mpe1xuICAgICAgICAgICAgaWYoYXJnc1swXSBpbnN0YW5jZW9mIENvbXBvbmVudCl7XG4gICAgICAgICAgICAgICAgbGV0IGNvbXBvbmVudCA9IGFyZ3NbMF07XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jb21wb25lbnRzLmhhc0NoaWxkKGNvbXBvbmVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgIGxldCBfY2xhc3MgPSBhcmdzWzBdO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29tcG9uZW50cy5oYXNDaGlsZCgoY29tcG9uZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjb21wb25lbnQgaW5zdGFuY2VvZiBfY2xhc3M7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBhZGRDb21wb25lbnQoY29tcG9uZW50OkNvbXBvbmVudCl7XG4gICAgICAgICAgICBpZih0aGlzLmhhc0NvbXBvbmVudChjb21wb25lbnQpKXtcbiAgICAgICAgICAgICAgICBMb2cuYXNzZXJ0KGZhbHNlLCBcInRoZSBjb21wb25lbnQgYWxyZWFkeSBleGlzdFwiKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5jb21wb25lbnRzLmFkZENoaWxkKGNvbXBvbmVudCk7XG5cbiAgICAgICAgICAgIGNvbXBvbmVudC5hZGRUb09iamVjdCh0aGlzKTtcblxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgcmVtb3ZlQ29tcG9uZW50KGNvbXBvbmVudDpDb21wb25lbnQpO1xuICAgICAgICBwdWJsaWMgcmVtb3ZlQ29tcG9uZW50KF9jbGFzczpGdW5jdGlvbik7XG5cbiAgICAgICAgcHVibGljIHJlbW92ZUNvbXBvbmVudCguLi5hcmdzKXtcbiAgICAgICAgICAgIHZhciBjb21wb25lbnQ6Q29tcG9uZW50ID0gbnVsbDtcblxuICAgICAgICAgICAgaWYoYXJnc1swXSBpbnN0YW5jZW9mIENvbXBvbmVudCl7XG4gICAgICAgICAgICAgICAgY29tcG9uZW50ID0gPENvbXBvbmVudD5hcmdzWzBdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICBjb21wb25lbnQgPSB0aGlzLmdldENvbXBvbmVudDxhbnk+KDxGdW5jdGlvbj5hcmdzWzBdKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5jb21wb25lbnRzLnJlbW92ZUNoaWxkKGNvbXBvbmVudCk7XG5cbiAgICAgICAgICAgIHRoaXMuX3JlbW92ZUNvbXBvbmVudEhhbmRsZXIoY29tcG9uZW50KTtcblxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgcmVtb3ZlQWxsQ29tcG9uZW50KCl7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gd2RDYi5Db2xsZWN0aW9uLmNyZWF0ZTxDb21wb25lbnQ+KCk7XG5cbiAgICAgICAgICAgIHRoaXMuY29tcG9uZW50cy5mb3JFYWNoKChjb21wb25lbnQ6Q29tcG9uZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fcmVtb3ZlQ29tcG9uZW50SGFuZGxlcihjb21wb25lbnQpO1xuXG4gICAgICAgICAgICAgICAgcmVzdWx0LmFkZENoaWxkKGNvbXBvbmVudClcbiAgICAgICAgICAgIH0sIHRoaXMpO1xuXG4gICAgICAgICAgICB0aGlzLmNvbXBvbmVudHMucmVtb3ZlQWxsQ2hpbGRyZW4oKTtcblxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyByZW5kZXIocmVuZGVyZXI6UmVuZGVyZXIsIGNhbWVyYTpHYW1lT2JqZWN0KTp2b2lkIHtcbiAgICAgICAgICAgIHZhciBnZW9tZXRyeSA9IHRoaXMuX2dldEdlb21ldHJ5KCksXG4gICAgICAgICAgICAgICAgcmVuZGVyZXJDb21wb25lbnQgPSB0aGlzLl9nZXRSZW5kZXJlckNvbXBvbmVudCgpO1xuXG4gICAgICAgICAgICBpZihyZW5kZXJlckNvbXBvbmVudCAmJiBnZW9tZXRyeSl7XG4gICAgICAgICAgICAgICAgcmVuZGVyZXJDb21wb25lbnQucmVuZGVyKHJlbmRlcmVyLCBnZW9tZXRyeSwgIGNhbWVyYSk7XG5cbiAgICAgICAgICAgICAgICBEZWJ1Z1N0YXRpc3RpY3MuY291bnQucmVuZGVyR2FtZU9iamVjdHMrKztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5nZXRSZW5kZXJMaXN0KCkuZm9yRWFjaCgoY2hpbGQ6RW50aXR5T2JqZWN0KSA9PiB7XG4gICAgICAgICAgICAgICAgY2hpbGQucmVuZGVyKHJlbmRlcmVyLCBjYW1lcmEpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgdXBkYXRlKGVsYXBzZWRUaW1lOm51bWJlcik6dm9pZCB7XG4gICAgICAgICAgICB2YXIgY2FtZXJhID0gdGhpcy5fZ2V0Q2FtZXJhKCksXG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uID0gdGhpcy5fZ2V0QW5pbWF0aW9uKCksXG4gICAgICAgICAgICAgICAgY29sbGlkZXIgPSB0aGlzLl9nZXRDb2xsaWRlcigpO1xuXG5cbiAgICAgICAgICAgIGlmKGNhbWVyYSl7XG4gICAgICAgICAgICAgICAgY2FtZXJhLnVwZGF0ZShlbGFwc2VkVGltZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmKGFuaW1hdGlvbil7XG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uLnVwZGF0ZShlbGFwc2VkVGltZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuYWN0aW9uTWFuYWdlci51cGRhdGUoZWxhcHNlZFRpbWUpO1xuXG4gICAgICAgICAgICB0aGlzLmV4ZWNTY3JpcHQoXCJ1cGRhdGVcIiwgZWxhcHNlZFRpbWUpO1xuXG4gICAgICAgICAgICBpZihjb2xsaWRlcil7XG4gICAgICAgICAgICAgICAgY29sbGlkZXIudXBkYXRlKGVsYXBzZWRUaW1lKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5iZWZvcmVVcGRhdGVDaGlsZHJlbihlbGFwc2VkVGltZSk7XG5cbiAgICAgICAgICAgIHRoaXMuZm9yRWFjaCgoY2hpbGQ6RW50aXR5T2JqZWN0KSA9PiB7XG4gICAgICAgICAgICAgICAgY2hpbGQudXBkYXRlKGVsYXBzZWRUaW1lKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGV4ZWNTY3JpcHQobWV0aG9kOnN0cmluZyk7XG4gICAgICAgIHB1YmxpYyBleGVjU2NyaXB0KG1ldGhvZDpzdHJpbmcsIGFyZzphbnkpO1xuICAgICAgICBwdWJsaWMgZXhlY1NjcmlwdChtZXRob2Q6c3RyaW5nLCBhcmc6YW55LCBpc0V4ZWNPbmx5T25jZTpib29sZWFuKTtcblxuICAgICAgICBwdWJsaWMgZXhlY1NjcmlwdCguLi5hcmdzKXtcbiAgICAgICAgICAgIHZhciBtZXRob2Q6c3RyaW5nID0gYXJnc1swXSxcbiAgICAgICAgICAgICAgICBzZWxmID0gdGhpcztcblxuICAgICAgICAgICAgaWYoYXJncy5sZW5ndGggPT09IDEpe1xuICAgICAgICAgICAgICAgIHRoaXMuX3NjcmlwdExpc3QuZm9yRWFjaCgoc2NyaXB0OklTY3JpcHRCZWhhdmlvciwgc2NyaXB0TmFtZTpzdHJpbmcpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgc2NyaXB0W21ldGhvZF0gJiYgc2NyaXB0W21ldGhvZF0oKTtcblxuICAgICAgICAgICAgICAgICAgICBzZWxmLl9hZGRUb1NjcmlwdEV4ZWN1dGVIaXN0b3J5KHNjcmlwdE5hbWUsIG1ldGhvZCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmKGFyZ3MubGVuZ3RoID09PSAyKXtcbiAgICAgICAgICAgICAgICBsZXQgYXJnOmFueSA9IGFyZ3NbMV07XG5cbiAgICAgICAgICAgICAgICB0aGlzLl9zY3JpcHRMaXN0LmZvckVhY2goKHNjcmlwdDpJU2NyaXB0QmVoYXZpb3IsIHNjcmlwdE5hbWU6c3RyaW5nKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHNjcmlwdFttZXRob2RdICYmIHNjcmlwdFttZXRob2RdKGFyZyk7XG5cbiAgICAgICAgICAgICAgICAgICAgc2VsZi5fYWRkVG9TY3JpcHRFeGVjdXRlSGlzdG9yeShzY3JpcHROYW1lLCBtZXRob2QpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZihhcmdzLmxlbmd0aCA9PT0gMyl7XG4gICAgICAgICAgICAgICAgbGV0IGFyZzphbnkgPSBhcmdzWzFdLFxuICAgICAgICAgICAgICAgICAgICBpc0V4ZWNPbmx5T25jZTpib29sZWFuID0gYXJnc1syXTtcblxuICAgICAgICAgICAgICAgIHRoaXMuX3NjcmlwdExpc3QuZm9yRWFjaCgoc2NyaXB0OklTY3JpcHRCZWhhdmlvciwgc2NyaXB0TmFtZTpzdHJpbmcpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYoaXNFeGVjT25seU9uY2UgJiYgc2VsZi5faXNTY3JpcHRFeGVjdXRlZChzY3JpcHROYW1lLCBtZXRob2QpKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHNjcmlwdFttZXRob2RdICYmIHNjcmlwdFttZXRob2RdKGFyZyk7XG5cbiAgICAgICAgICAgICAgICAgICAgc2VsZi5fYWRkVG9TY3JpcHRFeGVjdXRlSGlzdG9yeShzY3JpcHROYW1lLCBtZXRob2QpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGV4ZWNFdmVudFNjcmlwdChtZXRob2Q6c3RyaW5nLCBhcmc/OmFueSl7XG4gICAgICAgICAgICB0aGlzLl9zY3JpcHRMaXN0LmZvckVhY2goKHNjcmlwdDpJRXZlbnRTY3JpcHRCZWhhdmlvcikgPT4ge1xuICAgICAgICAgICAgICAgIHNjcmlwdFttZXRob2RdICYmIChhcmcgPyBzY3JpcHRbbWV0aG9kXShhcmcpIDogc2NyaXB0W21ldGhvZF0oKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByb3RlY3RlZCBhYnN0cmFjdCBjcmVhdGVUcmFuc2Zvcm0oKTpUcmFuc2Zvcm07XG5cbiAgICAgICAgQHZpcnR1YWxcbiAgICAgICAgcHJvdGVjdGVkIGJlZm9yZVVwZGF0ZUNoaWxkcmVuKGVsYXBzZWRUaW1lOm51bWJlcil7XG4gICAgICAgIH1cblxuICAgICAgICBAdmlydHVhbFxuICAgICAgICBwcm90ZWN0ZWQgYWZ0ZXJJbml0Q2hpbGRyZW4oKXtcbiAgICAgICAgfVxuXG4gICAgICAgIEB2aXJ0dWFsXG4gICAgICAgIHByb3RlY3RlZCBiaW5kU3RhcnRMb29wRXZlbnQoKXtcbiAgICAgICAgICAgIEV2ZW50TWFuYWdlci5vbig8YW55PkVuZ2luZUV2ZW50LlNUQVJUTE9PUCwgdGhpcy5zdGFydExvb3BIYW5kbGVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIEB2aXJ0dWFsXG4gICAgICAgIHByb3RlY3RlZCBiaW5kRW5kTG9vcEV2ZW50KCl7XG4gICAgICAgICAgICBFdmVudE1hbmFnZXIub24oPGFueT5FbmdpbmVFdmVudC5FTkRMT09QLCB0aGlzLmVuZExvb3BIYW5kbGVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIEB2aXJ0dWFsXG4gICAgICAgIHByb3RlY3RlZCBnZXRSZW5kZXJMaXN0KCl7XG4gICAgICAgICAgICBpZih0aGlzLmNoaWxkcmVuLmdldENvdW50KCkgPiAxMDApe1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHRoaXMuY2hpbGRyZW4uZ2V0Q291bnQoKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNoaWxkcmVuO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJvdGVjdGVkIGluaXRDb21wb25lbnQoKXtcbiAgICAgICAgICAgIGlmKHRoaXMuaGFzQ29tcG9uZW50KEdlb21ldHJ5KSl7XG4gICAgICAgICAgICAgICAgdGhpcy5nZXRDb21wb25lbnQ8R2VvbWV0cnk+KEdlb21ldHJ5KS5pbml0KCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuY29tcG9uZW50cy5maWx0ZXIoKGNvbXBvbmVudDpDb21wb25lbnQpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gIShjb21wb25lbnQgaW5zdGFuY2VvZiBHZW9tZXRyeSk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmZvckVhY2goKGNvbXBvbmVudDpDb21wb25lbnQpID0+IHtcbiAgICAgICAgICAgICAgICBjb21wb25lbnQuaW5pdCgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBwcm90ZWN0ZWQgZ2V0QWxsQ2hpbGRyZW4oKXtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSB3ZENiLkNvbGxlY3Rpb24uY3JlYXRlPEVudGl0eU9iamVjdD4oKTtcbiAgICAgICAgICAgIHZhciBnZXRDaGlsZHJlbiA9IChlbnRpdHlPYmplY3Q6RW50aXR5T2JqZWN0KSA9PiB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LmFkZENoaWxkcmVuKGVudGl0eU9iamVjdC5nZXRDaGlsZHJlbigpKTtcblxuICAgICAgICAgICAgICAgIGVudGl0eU9iamVjdC5mb3JFYWNoKChjaGlsZDpFbnRpdHlPYmplY3QpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZ2V0Q2hpbGRyZW4oY2hpbGQpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBnZXRDaGlsZHJlbih0aGlzKTtcblxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuXG4gICAgICAgIEByZXF1aXJlKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBhc3NlcnQodGhpcy5nZXRDb21wb25lbnRDb3VudChHZW9tZXRyeSkgPD0gMSwgTG9nLmluZm8uRlVOQ19TSE9VTERfTk9UKFwiZW50aXR5T2JqZWN0XCIsIFwiY29udGFpbiBtb3JlIHRoYW4gMSBnZW9tZXRyeSBjb21wb25lbnRcIikpO1xuICAgICAgICB9KVxuICAgICAgICBwcml2YXRlIF9nZXRHZW9tZXRyeSgpOkdlb21ldHJ5e1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Q29tcG9uZW50PEdlb21ldHJ5PihHZW9tZXRyeSk7XG4gICAgICAgIH1cblxuICAgICAgICBAcmVxdWlyZShmdW5jdGlvbigpe1xuICAgICAgICAgICAgYXNzZXJ0KHRoaXMuZ2V0Q29tcG9uZW50Q291bnQoQ2FtZXJhQ29udHJvbGxlcikgPD0gMSwgTG9nLmluZm8uRlVOQ19TSE9VTERfTk9UKFwiZW50aXR5T2JqZWN0XCIsIFwiY29udGFpbiBtb3JlIHRoYW4gMSBjYW1lcmEgY29udHJvbGxlclwiKSk7XG4gICAgICAgIH0pXG4gICAgICAgIHByaXZhdGUgX2dldENhbWVyYSgpOkNhbWVyYUNvbnRyb2xsZXJ7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRDb21wb25lbnQ8Q2FtZXJhQ29udHJvbGxlcj4oQ2FtZXJhQ29udHJvbGxlcik7XG4gICAgICAgIH1cblxuICAgICAgICBAcmVxdWlyZShmdW5jdGlvbigpe1xuICAgICAgICAgICAgYXNzZXJ0KHRoaXMuZ2V0Q29tcG9uZW50Q291bnQoQW5pbWF0aW9uKSA8PSAxLCBMb2cuaW5mby5GVU5DX1NIT1VMRF9OT1QoXCJlbnRpdHlPYmplY3RcIiwgXCJjb250YWluIG1vcmUgdGhhbiAxIGFuaW1hdGlvbiBjb21wb25lbnRcIikpO1xuICAgICAgICB9KVxuICAgICAgICBwcml2YXRlIF9nZXRBbmltYXRpb24oKTpBbmltYXRpb257XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRDb21wb25lbnQ8QW5pbWF0aW9uPihBbmltYXRpb24pO1xuICAgICAgICB9XG5cbiAgICAgICAgQHJlcXVpcmUoZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIGFzc2VydCh0aGlzLmdldENvbXBvbmVudENvdW50KFJlbmRlcmVyQ29tcG9uZW50KSA8PSAxLCBMb2cuaW5mby5GVU5DX1NIT1VMRF9OT1QoXCJlbnRpdHlPYmplY3RcIiwgXCJjb250YWluIG1vcmUgdGhhbiAxIHJlbmRlcmVyQ29tcG9uZW50XCIpKTtcbiAgICAgICAgfSlcbiAgICAgICAgcHJpdmF0ZSBfZ2V0UmVuZGVyZXJDb21wb25lbnQoKTpSZW5kZXJlckNvbXBvbmVudHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldENvbXBvbmVudDxSZW5kZXJlckNvbXBvbmVudD4oUmVuZGVyZXJDb21wb25lbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgQHJlcXVpcmUoZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIGFzc2VydCh0aGlzLmdldENvbXBvbmVudENvdW50KENvbGxpZGVyKSA8PSAxLCBMb2cuaW5mby5GVU5DX1NIT1VMRF9OT1QoXCJlbnRpdHlPYmplY3RcIiwgXCJjb250YWluIG1vcmUgdGhhbiAxIGNvbGxpZGVyIGNvbXBvbmVudFwiKSk7XG4gICAgICAgIH0pXG4gICAgICAgIHByaXZhdGUgX2dldENvbGxpZGVyKCk6Q29sbGlkZXJ7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRDb21wb25lbnQ8Q29sbGlkZXI+KENvbGxpZGVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBnZXRDb21wb25lbnRDb3VudChfY2xhc3M6RnVuY3Rpb24pe1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29tcG9uZW50cy5maWx0ZXIoKGNvbXBvbmVudDpDb21wb25lbnQpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29tcG9uZW50IGluc3RhbmNlb2YgX2NsYXNzO1xuICAgICAgICAgICAgfSkuZ2V0Q291bnQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX3JlbW92ZUNvbXBvbmVudEhhbmRsZXIoY29tcG9uZW50OkNvbXBvbmVudCl7XG4gICAgICAgICAgICBjb21wb25lbnQucmVtb3ZlRnJvbU9iamVjdCh0aGlzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX2FkZFRvU2NyaXB0RXhlY3V0ZUhpc3Rvcnkoc2NyaXB0TmFtZTpzdHJpbmcsIG1ldGhvZDpzdHJpbmcpe1xuICAgICAgICAgICAgdGhpcy5fc2NyaXB0RXhlY3V0ZUhpc3RvcnkuYWRkQ2hpbGQodGhpcy5fYnVpbGRTY3JpcHRIaXN0b3J5S2V5KHNjcmlwdE5hbWUsIG1ldGhvZCksIHRydWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfaXNTY3JpcHRFeGVjdXRlZChzY3JpcHROYW1lOnN0cmluZywgbWV0aG9kOnN0cmluZyk6Ym9vbGVhbntcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9zY3JpcHRFeGVjdXRlSGlzdG9yeS5nZXRDaGlsZCh0aGlzLl9idWlsZFNjcmlwdEhpc3RvcnlLZXkoc2NyaXB0TmFtZSwgbWV0aG9kKSk7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9idWlsZFNjcmlwdEhpc3RvcnlLZXkoc2NyaXB0TmFtZTpzdHJpbmcsIG1ldGhvZDpzdHJpbmcpe1xuICAgICAgICAgICAgcmV0dXJuIGAke3NjcmlwdE5hbWV9XyR7bWV0aG9kfWA7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJtb2R1bGUgd2Qge1xuICAgIGV4cG9ydCBjbGFzcyBVSU9iamVjdCBleHRlbmRzIEVudGl0eU9iamVjdHtcbiAgICAgICAgcHVibGljIHN0YXRpYyBjcmVhdGUoKSB7XG4gICAgICAgICAgICB2YXIgb2JqID0gbmV3IHRoaXMoKTtcblxuICAgICAgICAgICAgb2JqLmluaXRXaGVuQ3JlYXRlKCk7XG5cbiAgICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgdHJhbnNmb3JtOlJlY3RUcmFuc2Zvcm07XG5cbiAgICAgICAgcHVibGljIG5hbWU6c3RyaW5nID0gYHVpT2JqZWN0JHtTdHJpbmcodGhpcy51aWQpfWA7XG4gICAgICAgIHB1YmxpYyB1aU1hbmFnZXI6VUlNYW5hZ2VyID0gVUlNYW5hZ2VyLmNyZWF0ZSh0aGlzKTtcblxuICAgICAgICBwcm90ZWN0ZWQgY2hpbGRyZW46d2RDYi5Db2xsZWN0aW9uPFVJT2JqZWN0PjtcblxuICAgICAgICBwcm90ZWN0ZWQgYmVmb3JlVXBkYXRlQ2hpbGRyZW4oZWxhcHNlZFRpbWU6bnVtYmVyKXtcbiAgICAgICAgICAgIHRoaXMudWlNYW5hZ2VyLnVwZGF0ZShlbGFwc2VkVGltZSk7XG4gICAgICAgIH1cblxuICAgICAgICBwcm90ZWN0ZWQgY3JlYXRlVHJhbnNmb3JtKCl7XG4gICAgICAgICAgICByZXR1cm4gUmVjdFRyYW5zZm9ybS5jcmVhdGUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIEByZXF1aXJlKGZ1bmN0aW9uKGNvbXBvbmVudDpDb21wb25lbnQpe1xuICAgICAgICAgICAgaWYoY29tcG9uZW50IGluc3RhbmNlb2YgVUkpe1xuICAgICAgICAgICAgICAgIGFzc2VydCghISF0aGlzLmdldENvbXBvbmVudChVSSksIExvZy5pbmZvLkZVTkNfU0hPVUxEKFwib25seSBoYXMgb25lIFVJIGNvbXBvbmVudFwiKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICAgIHB1YmxpYyBhZGRDb21wb25lbnQoY29tcG9uZW50OkNvbXBvbmVudCl7XG4gICAgICAgICAgICBzdXBlci5hZGRDb21wb25lbnQoY29tcG9uZW50KTtcblxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICBAcmVxdWlyZShmdW5jdGlvbihjaGlsZDpFbnRpdHlPYmplY3Qpe1xuICAgICAgICAgICAgYXNzZXJ0KHRoaXMuZ2V0Q29tcG9uZW50KFVJUmVuZGVyZXIpID09PSBjaGlsZC5nZXRDb21wb25lbnQoVUlSZW5kZXJlciksIExvZy5pbmZvLkZVTkNfTVVTVF9CRShcInRoZSBVSVJlbmRlcmVyIG9mIFVJT2JqZWN0IGFuZCBpdHMgY2hpbGRyZW5cIiwgXCJ0aGUgc2FtZSBvbmVcIikpXG4gICAgICAgIH0pXG4gICAgICAgIHB1YmxpYyBhZGRDaGlsZChjaGlsZDpFbnRpdHlPYmplY3Qpe1xuICAgICAgICAgICAgc3VwZXIuYWRkQ2hpbGQoY2hpbGQpO1xuXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcblxuICAgICAgICB9XG4gICAgfVxufVxuXG4iLCJtb2R1bGUgd2Qge1xuICAgIGV4cG9ydCBjbGFzcyBHYW1lT2JqZWN0IGV4dGVuZHMgRW50aXR5T2JqZWN0e1xuICAgICAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZSgpIHtcbiAgICAgICAgICAgIHZhciBvYmogPSBuZXcgdGhpcygpO1xuXG4gICAgICAgICAgICBvYmouaW5pdFdoZW5DcmVhdGUoKTtcblxuICAgICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyB0cmFuc2Zvcm06VGhyZWVEVHJhbnNmb3JtO1xuXG4gICAgICAgIHB1YmxpYyBuYW1lOnN0cmluZyA9IGBnYW1lT2JqZWN0JHtTdHJpbmcodGhpcy51aWQpfWA7XG5cbiAgICAgICAgcHJvdGVjdGVkIGNoaWxkcmVuOndkQ2IuQ29sbGVjdGlvbjxHYW1lT2JqZWN0PjtcblxuXG4gICAgICAgIHB1YmxpYyBnZXRPY3RyZWUoKXtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldENvbXBvbmVudDxPY3RyZWU+KE9jdHJlZSk7XG4gICAgICAgIH1cblxuICAgICAgICBwcm90ZWN0ZWQgY3JlYXRlVHJhbnNmb3JtKCl7XG4gICAgICAgICAgICByZXR1cm4gVGhyZWVEVHJhbnNmb3JtLmNyZWF0ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJvdGVjdGVkIGdldFJlbmRlckxpc3QoKXtcbiAgICAgICAgICAgIGlmKHRoaXMuaGFzQ29tcG9uZW50KE9jdHJlZSkpe1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldE9jdHJlZSgpLmdldFJlbmRlckxpc3RCeUZydXN0dW1DdWxsKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNoaWxkcmVuO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJvdGVjdGVkIGFmdGVySW5pdENoaWxkcmVuKCl7XG4gICAgICAgICAgICBpZih0aGlzLmhhc0NvbXBvbmVudChPY3RyZWUpKXtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRPY3RyZWUoKS5idWlsZCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuXG4iLCJtb2R1bGUgd2Qge1xuICAgIGV4cG9ydCBjbGFzcyBTY2VuZURpc3BhdGNoZXIgZXh0ZW5kcyBFbnRpdHlPYmplY3R7XG4gICAgICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlKCkge1xuICAgICAgICAgICAgdmFyIG9iaiA9IG5ldyB0aGlzKCk7XG5cbiAgICAgICAgICAgIG9iai5pbml0V2hlbkNyZWF0ZSgpO1xuXG4gICAgICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgICB9XG5cbiAgICAgICAgLyohXG4gICAgICAgICB1c2UgZ2FtZU9iamVjdFNjZW5lLT5zY3JpcHRMaXN0IGFzIHNjZW5lLT5zY3JpcHRMaXN0XG4gICAgICAgICAqL1xuICAgICAgICBnZXQgc2NyaXB0TGlzdCgpe1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2FtZU9iamVjdFNjZW5lLnNjcmlwdExpc3Q7XG4gICAgICAgIH1cblxuICAgICAgICAvKiFcbiAgICAgICAgIHVzZSBnYW1lT2JqZWN0U2NlbmUtPmFjdGlvbk1hbmFnZXIgYXMgc2NlbmUtPmFjdGlvbk1hbmFnZXJcbiAgICAgICAgICovXG4gICAgICAgIGdldCBhY3Rpb25NYW5hZ2VyKCl7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nYW1lT2JqZWN0U2NlbmUuYWN0aW9uTWFuYWdlcjtcbiAgICAgICAgfVxuXG4gICAgICAgIGdldCBhbWJpZW50TGlnaHQoKTpHYW1lT2JqZWN0IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdhbWVPYmplY3RTY2VuZS5hbWJpZW50TGlnaHQ7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGdldCBkaXJlY3Rpb25MaWdodHMoKTogd2RDYi5Db2xsZWN0aW9uPEdhbWVPYmplY3Q+e1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2FtZU9iamVjdFNjZW5lLmRpcmVjdGlvbkxpZ2h0cztcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgZ2V0IHBvaW50TGlnaHRzKCk6IHdkQ2IuQ29sbGVjdGlvbjxHYW1lT2JqZWN0PntcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdhbWVPYmplY3RTY2VuZS5wb2ludExpZ2h0cztcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgZ2V0IHNpZGUoKXtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdhbWVPYmplY3RTY2VuZS5zaWRlO1xuICAgICAgICB9XG4gICAgICAgIHNldCBzaWRlKHNpZGU6U2lkZSl7XG4gICAgICAgICAgICB0aGlzLmdhbWVPYmplY3RTY2VuZS5zaWRlID0gc2lkZTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgZ2V0IHNoYWRvd01hcCgpe1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2FtZU9iamVjdFNjZW5lLnNoYWRvd01hcDtcbiAgICAgICAgfVxuICAgICAgICBzZXQgc2hhZG93TWFwKHNoYWRvd01hcDphbnkpe1xuICAgICAgICAgICAgdGhpcy5nYW1lT2JqZWN0U2NlbmUuc2hhZG93TWFwID0gc2hhZG93TWFwO1xuICAgICAgICB9XG5cbiAgICAgICAgZ2V0IHNoYWRlcigpe1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2FtZU9iamVjdFNjZW5lLnNoYWRlcjtcbiAgICAgICAgfVxuICAgICAgICBzZXQgc2hhZGVyKHNoYWRlcjpTaGFkZXIpe1xuICAgICAgICAgICAgdGhpcy5nYW1lT2JqZWN0U2NlbmUuc2hhZGVyID0gc2hhZGVyO1xuICAgICAgICB9XG5cbiAgICAgICAgZ2V0IGNhbWVyYSgpe1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2FtZU9iamVjdFNjZW5lLmNhbWVyYTtcbiAgICAgICAgfVxuICAgICAgICBzZXQgY2FtZXJhKGNhbWVyYTpHYW1lT2JqZWN0KXtcbiAgICAgICAgICAgIHRoaXMuZ2FtZU9iamVjdFNjZW5lLmNhbWVyYSA9IGNhbWVyYTtcbiAgICAgICAgfVxuXG4gICAgICAgIGdldCBpc1VzZVByb2dyYW0oKXtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdhbWVPYmplY3RTY2VuZS5pc1VzZVByb2dyYW07XG4gICAgICAgIH1cbiAgICAgICAgc2V0IGlzVXNlUHJvZ3JhbShpc1VzZVByb2dyYW06Ym9vbGVhbil7XG4gICAgICAgICAgICB0aGlzLmdhbWVPYmplY3RTY2VuZS5pc1VzZVByb2dyYW0gPSBpc1VzZVByb2dyYW07XG4gICAgICAgIH1cblxuICAgICAgICBnZXQgcGh5c2ljcygpe1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2FtZU9iamVjdFNjZW5lLnBoeXNpY3M7XG4gICAgICAgIH1cbiAgICAgICAgc2V0IHBoeXNpY3MocGh5c2ljczpQaHlzaWNzQ29uZmlnKXtcbiAgICAgICAgICAgIHRoaXMuZ2FtZU9iamVjdFNjZW5lLnBoeXNpY3MgPSBwaHlzaWNzO1xuICAgICAgICB9XG5cbiAgICAgICAgZ2V0IHBoeXNpY3NFbmdpbmVBZGFwdGVyKCl7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nYW1lT2JqZWN0U2NlbmUucGh5c2ljc0VuZ2luZUFkYXB0ZXI7XG4gICAgICAgIH1cbiAgICAgICAgc2V0IHBoeXNpY3NFbmdpbmVBZGFwdGVyKHBoeXNpY3NFbmdpbmVBZGFwdGVyOklQaHlzaWNzRW5naW5lQWRhcHRlcil7XG4gICAgICAgICAgICB0aGlzLmdhbWVPYmplY3RTY2VuZS5waHlzaWNzRW5naW5lQWRhcHRlciA9IHBoeXNpY3NFbmdpbmVBZGFwdGVyO1xuICAgICAgICB9XG5cblxuICAgICAgICBwdWJsaWMgbmFtZTpzdHJpbmcgPSBgc2NlbmUke1N0cmluZyh0aGlzLnVpZCl9YDtcblxuICAgICAgICBwdWJsaWMgdWlPYmplY3RTY2VuZTpVSU9iamVjdFNjZW5lID0gVUlPYmplY3RTY2VuZS5jcmVhdGUoKTtcbiAgICAgICAgcHVibGljIGdhbWVPYmplY3RTY2VuZTpHYW1lT2JqZWN0U2NlbmUgPSBHYW1lT2JqZWN0U2NlbmUuY3JlYXRlKCk7XG5cbiAgICAgICAgcHVibGljIGluaXRXaGVuQ3JlYXRlKCl7XG4gICAgICAgICAgICBzdXBlci5pbml0V2hlbkNyZWF0ZSgpO1xuXG4gICAgICAgICAgICB0aGlzLmFkZENvbXBvbmVudChTY2VuZUV2ZW50VHJpZ2dlckRldGVjdG9yLmNyZWF0ZSgpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyB1c2VQcm9ncmFtKHNoYWRlcjpTaGFkZXIpe1xuICAgICAgICAgICAgdGhpcy5nYW1lT2JqZWN0U2NlbmUudXNlUHJvZ3JhbShzaGFkZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHVuVXNlUHJvZ3JhbSgpe1xuICAgICAgICAgICAgdGhpcy5nYW1lT2JqZWN0U2NlbmUudW5Vc2VQcm9ncmFtKCk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgYWRkQ2hpbGQoY2hpbGQ6RW50aXR5T2JqZWN0KTpFbnRpdHlPYmplY3R7XG4gICAgICAgICAgICBpZihjaGlsZCBpbnN0YW5jZW9mIEdhbWVPYmplY3Qpe1xuICAgICAgICAgICAgICAgIHRoaXMuZ2FtZU9iamVjdFNjZW5lLmFkZENoaWxkKGNoaWxkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYoY2hpbGQgaW5zdGFuY2VvZiBVSU9iamVjdCl7XG4gICAgICAgICAgICAgICAgdGhpcy51aU9iamVjdFNjZW5lLmFkZENoaWxkKGNoaWxkKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY2hpbGQucGFyZW50ID0gdGhpcztcblxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgYWRkUmVuZGVyVGFyZ2V0UmVuZGVyZXIocmVuZGVyVGFyZ2V0UmVuZGVyZXI6UmVuZGVyVGFyZ2V0UmVuZGVyZXIpe1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2FtZU9iamVjdFNjZW5lLmFkZFJlbmRlclRhcmdldFJlbmRlcmVyKHJlbmRlclRhcmdldFJlbmRlcmVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyByZW1vdmVSZW5kZXJUYXJnZXRSZW5kZXJlcihyZW5kZXJUYXJnZXRSZW5kZXJlcjpSZW5kZXJUYXJnZXRSZW5kZXJlcil7XG4gICAgICAgICAgICB0aGlzLmdhbWVPYmplY3RTY2VuZS5yZW1vdmVSZW5kZXJUYXJnZXRSZW5kZXJlcihyZW5kZXJUYXJnZXRSZW5kZXJlcik7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgZGlzcG9zZSgpe1xuICAgICAgICAgICAgdGhpcy5nYW1lT2JqZWN0U2NlbmUuZGlzcG9zZSgpO1xuICAgICAgICAgICAgdGhpcy51aU9iamVjdFNjZW5lLmRpc3Bvc2UoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBoYXNDaGlsZChjaGlsZDpFbnRpdHlPYmplY3QpOmJvb2xlYW4ge1xuICAgICAgICAgICAgaWYoY2hpbGQgaW5zdGFuY2VvZiBHYW1lT2JqZWN0KXtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5nYW1lT2JqZWN0U2NlbmUuaGFzQ2hpbGQoY2hpbGQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZihjaGlsZCBpbnN0YW5jZW9mIFVJT2JqZWN0KXtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy51aU9iamVjdFNjZW5lLmhhc0NoaWxkKGNoaWxkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBhZGRDaGlsZHJlbihjaGlsZHJlbjpFbnRpdHlPYmplY3QpO1xuICAgICAgICBwdWJsaWMgYWRkQ2hpbGRyZW4oY2hpbGRyZW46QXJyYXk8RW50aXR5T2JqZWN0Pik7XG4gICAgICAgIHB1YmxpYyBhZGRDaGlsZHJlbihjaGlsZHJlbjp3ZENiLkNvbGxlY3Rpb248RW50aXR5T2JqZWN0Pik7XG5cbiAgICAgICAgcHVibGljIGFkZENoaWxkcmVuKC4uLmFyZ3MpIHtcbiAgICAgICAgICAgIGlmKGFyZ3NbMF0gaW5zdGFuY2VvZiBFbnRpdHlPYmplY3Qpe1xuICAgICAgICAgICAgICAgIGxldCBjaGlsZDpFbnRpdHlPYmplY3QgPSA8RW50aXR5T2JqZWN0PmFyZ3NbMF07XG5cbiAgICAgICAgICAgICAgICB0aGlzLmFkZENoaWxkKGNoaWxkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKGFyZ3NbMF0gaW5zdGFuY2VvZiB3ZENiLkNvbGxlY3Rpb24pe1xuICAgICAgICAgICAgICAgIGxldCBjaGlsZHJlbjp3ZENiLkNvbGxlY3Rpb248RW50aXR5T2JqZWN0PiA9IDx3ZENiLkNvbGxlY3Rpb248RW50aXR5T2JqZWN0Pj5hcmdzWzBdLFxuICAgICAgICAgICAgICAgICAgICBzZWxmID0gdGhpcztcblxuICAgICAgICAgICAgICAgIGNoaWxkcmVuLmZvckVhY2goKGNoaWxkOkVudGl0eU9iamVjdCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBzZWxmLmFkZENoaWxkKGNoaWxkKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYoSnVkZ2VVdGlscy5pc0FycmF5KGFyZ3NbMF0pKXtcbiAgICAgICAgICAgICAgICBsZXQgY2hpbGRyZW46QXJyYXk8RW50aXR5T2JqZWN0PiA9IDxBcnJheTxFbnRpdHlPYmplY3Q+PmFyZ3NbMF07XG5cbiAgICAgICAgICAgICAgICBmb3IobGV0IGNoaWxkIG9mIGNoaWxkcmVuKXtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGRDaGlsZChjaGlsZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBnZXRDaGlsZHJlbigpe1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2FtZU9iamVjdFNjZW5lLmdldENoaWxkcmVuKCkuYWRkQ2hpbGRyZW4odGhpcy51aU9iamVjdFNjZW5lLmdldENoaWxkcmVuKCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGZpbmRDaGlsZEJ5VWlkKHVpZDpudW1iZXIpe1xuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHRoaXMuZ2FtZU9iamVjdFNjZW5lLmZpbmRDaGlsZEJ5VWlkKHVpZCk7XG5cbiAgICAgICAgICAgIGlmKCFyZXN1bHQpe1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMudWlPYmplY3RTY2VuZS5maW5kQ2hpbGRCeVVpZCh1aWQpXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgZmluZENoaWxkQnlUYWcodGFnOnN0cmluZyl7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gdGhpcy5nYW1lT2JqZWN0U2NlbmUuZmluZENoaWxkQnlUYWcodGFnKTtcblxuICAgICAgICAgICAgaWYoIXJlc3VsdCl7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy51aU9iamVjdFNjZW5lLmZpbmRDaGlsZEJ5VGFnKHRhZylcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBmaW5kQ2hpbGRCeU5hbWUobmFtZTpzdHJpbmcpe1xuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHRoaXMuZ2FtZU9iamVjdFNjZW5lLmZpbmRDaGlsZEJ5TmFtZShuYW1lKTtcblxuICAgICAgICAgICAgaWYoIXJlc3VsdCl7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy51aU9iamVjdFNjZW5lLmZpbmRDaGlsZEJ5TmFtZShuYW1lKVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGZpbmRDaGlsZHJlbkJ5TmFtZShuYW1lOnN0cmluZyk6d2RDYi5Db2xsZWN0aW9uPEVudGl0eU9iamVjdD57XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nYW1lT2JqZWN0U2NlbmUuZmluZENoaWxkcmVuQnlOYW1lKG5hbWUpLmFkZENoaWxkcmVuKHRoaXMudWlPYmplY3RTY2VuZS5maW5kQ2hpbGRyZW5CeU5hbWUobmFtZSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHJlbW92ZUNoaWxkKGNoaWxkOkVudGl0eU9iamVjdCk6RW50aXR5T2JqZWN0IHtcbiAgICAgICAgICAgIGlmKGNoaWxkIGluc3RhbmNlb2YgR2FtZU9iamVjdCl7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2FtZU9iamVjdFNjZW5lLnJlbW92ZUNoaWxkKGNoaWxkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYoY2hpbGQgaW5zdGFuY2VvZiBVSU9iamVjdCl7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudWlPYmplY3RTY2VuZS5yZW1vdmVDaGlsZChjaGlsZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgb25TdGFydExvb3AoKSB7XG4gICAgICAgICAgICB0aGlzLmdhbWVPYmplY3RTY2VuZS5vblN0YXJ0TG9vcCgpO1xuICAgICAgICAgICAgdGhpcy51aU9iamVjdFNjZW5lLm9uU3RhcnRMb29wKCk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgb25FbmRMb29wKCkge1xuICAgICAgICAgICAgdGhpcy5nYW1lT2JqZWN0U2NlbmUub25FbmRMb29wKCk7XG4gICAgICAgICAgICB0aGlzLnVpT2JqZWN0U2NlbmUub25FbmRMb29wKCk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgb25FbnRlcigpIHtcbiAgICAgICAgICAgIHRoaXMuZ2FtZU9iamVjdFNjZW5lLm9uRW50ZXIoKTtcbiAgICAgICAgICAgIHRoaXMudWlPYmplY3RTY2VuZS5vbkVudGVyKCk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgb25FeGl0KCkge1xuICAgICAgICAgICAgdGhpcy5nYW1lT2JqZWN0U2NlbmUub25FeGl0KCk7XG4gICAgICAgICAgICB0aGlzLnVpT2JqZWN0U2NlbmUub25FeGl0KCk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgb25EaXNwb3NlKCl7XG4gICAgICAgICAgICB0aGlzLmdhbWVPYmplY3RTY2VuZS5vbkRpc3Bvc2UoKTtcbiAgICAgICAgICAgIHRoaXMudWlPYmplY3RTY2VuZS5vbkRpc3Bvc2UoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBleGVjU2NyaXB0KG1ldGhvZDpzdHJpbmcsIGFyZz86YW55KXtcbiAgICAgICAgICAgIHRoaXMuZ2FtZU9iamVjdFNjZW5lLmV4ZWNTY3JpcHQuYXBwbHkodGhpcy5nYW1lT2JqZWN0U2NlbmUsIGFyZ3VtZW50cyk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgZXhlY0V2ZW50U2NyaXB0KG1ldGhvZDpzdHJpbmcsIGFyZz86YW55KXtcbiAgICAgICAgICAgIHRoaXMuZ2FtZU9iamVjdFNjZW5lLmV4ZWNFdmVudFNjcmlwdC5hcHBseSh0aGlzLmdhbWVPYmplY3RTY2VuZSwgYXJndW1lbnRzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByb3RlY3RlZCBjcmVhdGVUcmFuc2Zvcm0oKXtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4iLCJtb2R1bGUgd2Qge1xuICAgIGV4cG9ydCBhYnN0cmFjdCBjbGFzcyBTY2VuZSBleHRlbmRzIEVudGl0eU9iamVjdCB7XG4gICAgfVxufVxuXG4iLCJtb2R1bGUgd2Qge1xuICAgIGV4cG9ydCBjbGFzcyBHYW1lT2JqZWN0U2NlbmUgZXh0ZW5kcyBTY2VuZXtcbiAgICAgICAgcHVibGljIHN0YXRpYyBjcmVhdGUoKSB7XG4gICAgICAgICAgICB2YXIgb2JqID0gbmV3IHRoaXMoKTtcblxuICAgICAgICAgICAgb2JqLmluaXRXaGVuQ3JlYXRlKCk7XG5cbiAgICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgIH1cblxuICAgICAgICBnZXQgYW1iaWVudExpZ2h0KCk6R2FtZU9iamVjdCB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbGlnaHRNYW5hZ2VyLmFtYmllbnRMaWdodDtcbiAgICAgICAgfVxuXG4gICAgICAgIGdldCBkaXJlY3Rpb25MaWdodHMoKTogd2RDYi5Db2xsZWN0aW9uPEdhbWVPYmplY3Q+e1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2xpZ2h0TWFuYWdlci5kaXJlY3Rpb25MaWdodHM7XG4gICAgICAgIH1cblxuICAgICAgICBnZXQgcG9pbnRMaWdodHMoKTogd2RDYi5Db2xsZWN0aW9uPEdhbWVPYmplY3Q+e1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2xpZ2h0TWFuYWdlci5wb2ludExpZ2h0cztcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBzaWRlOlNpZGUgPSBudWxsO1xuICAgICAgICBwdWJsaWMgc2hhZG93TWFwID0ge1xuICAgICAgICAgICAgZW5hYmxlOiB0cnVlLFxuICAgICAgICAgICAgc29mdFR5cGU6IFNoYWRvd01hcFNvZnRUeXBlLk5PTkVcbiAgICAgICAgfTtcbiAgICAgICAgcHVibGljIHNoYWRlcjpTaGFkZXIgPSBudWxsO1xuICAgICAgICBwdWJsaWMgY2FtZXJhOkdhbWVPYmplY3QgPSBudWxsO1xuICAgICAgICBwdWJsaWMgaXNVc2VQcm9ncmFtOmJvb2xlYW4gPSBmYWxzZTtcbiAgICAgICAgcHVibGljIHBoeXNpY3MgPSBQaHlzaWNzQ29uZmlnLmNyZWF0ZSgpO1xuICAgICAgICBwdWJsaWMgcGh5c2ljc0VuZ2luZUFkYXB0ZXI6SVBoeXNpY3NFbmdpbmVBZGFwdGVyID0gbnVsbDtcblxuICAgICAgICBwcml2YXRlIF9saWdodE1hbmFnZXI6TGlnaHRNYW5hZ2VyID0gTGlnaHRNYW5hZ2VyLmNyZWF0ZSgpO1xuICAgICAgICBwcml2YXRlIF9yZW5kZXJUYXJnZXRSZW5kZXJlcnM6d2RDYi5Db2xsZWN0aW9uPFJlbmRlclRhcmdldFJlbmRlcmVyPiA9IHdkQ2IuQ29sbGVjdGlvbi5jcmVhdGU8UmVuZGVyVGFyZ2V0UmVuZGVyZXI+KCk7XG4gICAgICAgIHByaXZhdGUgX2NvbGxpc2lvbkRldGVjdG9yOkNvbGxpc2lvbkRldGVjdG9yID0gQ29sbGlzaW9uRGV0ZWN0b3IuY3JlYXRlKCk7XG5cbiAgICAgICAgcHVibGljIGluaXQoKXtcbiAgICAgICAgICAgIGlmKHRoaXMucGh5c2ljcy5lbmFibGUpe1xuICAgICAgICAgICAgICAgIHRoaXMucGh5c2ljc0VuZ2luZUFkYXB0ZXIgPSBQaHlzaWNzRW5naW5lRmFjdG9yeS5jcmVhdGUodGhpcy5waHlzaWNzLmVuZ2luZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5waHlzaWNzRW5naW5lQWRhcHRlci5pbml0KCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHN1cGVyLmluaXQoKTtcblxuICAgICAgICAgICAgdGhpcy5fcmVuZGVyVGFyZ2V0UmVuZGVyZXJzLmZvckVhY2goKHJlbmRlclRhcmdldFJlbmRlcmVyOlJlbmRlclRhcmdldFJlbmRlcmVyKSA9PiByZW5kZXJUYXJnZXRSZW5kZXJlci5pbml0KCkpO1xuXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyB1c2VQcm9ncmFtKHNoYWRlcjpTaGFkZXIpe1xuICAgICAgICAgICAgdGhpcy5pc1VzZVByb2dyYW0gPSB0cnVlO1xuXG4gICAgICAgICAgICB0aGlzLnNoYWRlciA9IHNoYWRlcjtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyB1blVzZVByb2dyYW0oKXtcbiAgICAgICAgICAgIHRoaXMuaXNVc2VQcm9ncmFtID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgYWRkQ2hpbGQoY2hpbGQ6R2FtZU9iamVjdCk6R2FtZU9iamVjdHtcbiAgICAgICAgICAgIGlmKHRoaXMuX2lzQ2FtZXJhKGNoaWxkKSl7XG4gICAgICAgICAgICAgICAgdGhpcy5jYW1lcmEgPSBjaGlsZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYodGhpcy5faXNMaWdodChjaGlsZCkpe1xuICAgICAgICAgICAgICAgIHRoaXMuX2xpZ2h0TWFuYWdlci5hZGRDaGlsZChjaGlsZCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiA8R2FtZU9iamVjdD5zdXBlci5hZGRDaGlsZChjaGlsZCk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgYWRkUmVuZGVyVGFyZ2V0UmVuZGVyZXIocmVuZGVyVGFyZ2V0UmVuZGVyZXI6UmVuZGVyVGFyZ2V0UmVuZGVyZXIpe1xuICAgICAgICAgICAgdGhpcy5fcmVuZGVyVGFyZ2V0UmVuZGVyZXJzLmFkZENoaWxkKHJlbmRlclRhcmdldFJlbmRlcmVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyByZW1vdmVSZW5kZXJUYXJnZXRSZW5kZXJlcihyZW5kZXJUYXJnZXRSZW5kZXJlcjpSZW5kZXJUYXJnZXRSZW5kZXJlcil7XG4gICAgICAgICAgICB0aGlzLl9yZW5kZXJUYXJnZXRSZW5kZXJlcnMucmVtb3ZlQ2hpbGQocmVuZGVyVGFyZ2V0UmVuZGVyZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHVwZGF0ZShlbGFwc2VkVGltZTpudW1iZXIpe1xuICAgICAgICAgICAgaWYodGhpcy5waHlzaWNzLmVuYWJsZSl7XG4gICAgICAgICAgICAgICAgdGhpcy5waHlzaWNzRW5naW5lQWRhcHRlci51cGRhdGUoZWxhcHNlZFRpbWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBzdXBlci51cGRhdGUoZWxhcHNlZFRpbWUpO1xuXG4gICAgICAgICAgICB0aGlzLl9jb2xsaXNpb25EZXRlY3Rvci5kZXRlY3QodGhpcyk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgcmVuZGVyKHJlbmRlcmVyOlJlbmRlcmVyKSB7XG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICAgICAgICAgIHRoaXMuX3JlbmRlclRhcmdldFJlbmRlcmVycy5mb3JFYWNoKCh0YXJnZXQ6UmVuZGVyVGFyZ2V0UmVuZGVyZXIpID0+e1xuICAgICAgICAgICAgICAgIHRhcmdldC5yZW5kZXIocmVuZGVyZXIsIHNlbGYuY2FtZXJhKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBzdXBlci5yZW5kZXIocmVuZGVyZXIsIHRoaXMuY2FtZXJhKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByb3RlY3RlZCBjcmVhdGVUcmFuc2Zvcm0oKXtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfaXNDYW1lcmEoY2hpbGQ6R2FtZU9iamVjdCl7XG4gICAgICAgICAgICByZXR1cm4gY2hpbGQuaGFzQ29tcG9uZW50KENhbWVyYUNvbnRyb2xsZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfaXNMaWdodChjaGlsZDpHYW1lT2JqZWN0KXtcbiAgICAgICAgICAgIHJldHVybiBjaGlsZC5oYXNDb21wb25lbnQoTGlnaHQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZXhwb3J0IGNsYXNzIFBoeXNpY3NDb25maWd7XG4gICAgICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlKCkge1xuICAgICAgICAgICAgdmFyIG9iaiA9IG5ldyB0aGlzKCk7XG5cbiAgICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9ncmF2aXR5OlZlY3RvcjMgPSBWZWN0b3IzLmNyZWF0ZSgwLCAtOS44LCAwKTtcbiAgICAgICAgQG9wZXJhdGVXb3JsZERhdGFHZXR0ZXJBbmRTZXR0ZXIoXCJHcmF2aXR5XCIpXG4gICAgICAgIGdldCBncmF2aXR5KCl7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZ3Jhdml0eTtcbiAgICAgICAgfVxuICAgICAgICBzZXQgZ3Jhdml0eShncmF2aXR5OlZlY3RvcjMpe1xuICAgICAgICAgICAgdGhpcy5fZ3Jhdml0eSA9IGdyYXZpdHk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgZW5hYmxlOmJvb2xlYW4gPSBmYWxzZTtcbiAgICAgICAgcHVibGljIGVuZ2luZTpQaHlzaWNzRW5naW5lVHlwZSA9IFBoeXNpY3NFbmdpbmVUeXBlLkNBTk5PTjtcbiAgICAgICAgcHVibGljIGl0ZXJhdGlvbnM6bnVtYmVyID0gMTA7XG4gICAgfVxuXG5cbiAgICBleHBvcnQgdHlwZSBTaGFkb3dNYXBDb25maWcgPSB7XG4gICAgICAgIGVuYWJsZTpib29sZWFuO1xuICAgICAgICBzb2Z0VHlwZTpTaGFkb3dNYXBTb2Z0VHlwZVxuICAgIH1cblxuICAgIGV4cG9ydCBlbnVtIFNoYWRvd01hcFNvZnRUeXBle1xuICAgICAgICBOT05FLFxuICAgICAgICBQQ0ZcbiAgICB9XG59XG5cbiIsIm1vZHVsZSB3ZCB7XG4gICAgZXhwb3J0IGNsYXNzIFVJT2JqZWN0U2NlbmUgZXh0ZW5kcyBTY2VuZXtcbiAgICAgICAgcHVibGljIHN0YXRpYyBjcmVhdGUoKSB7XG4gICAgICAgICAgICB2YXIgb2JqID0gbmV3IHRoaXMoKTtcblxuICAgICAgICAgICAgb2JqLmluaXRXaGVuQ3JlYXRlKCk7XG5cbiAgICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgb25FbmRMb29wKCkge1xuICAgICAgICAgICAgc3VwZXIub25FbmRMb29wKCk7XG5cbiAgICAgICAgICAgIHRoaXMuX3Jlc2V0QWxsVHJhbnNmb3JtU3RhdGUoKTtcbiAgICAgICAgICAgIHRoaXMuX3Jlc2V0QWxsUmVuZGVyZXJDbGVhckNhbnZhc0ZsYWcoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBvblN0YXJ0TG9vcCgpe1xuICAgICAgICAgICAgc3VwZXIub25TdGFydExvb3AoKTtcblxuICAgICAgICAgICAgdGhpcy5fc29ydFNpYmxpbmdDaGlsZHJlbigpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJvdGVjdGVkIGNyZWF0ZVRyYW5zZm9ybSgpe1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBAcmVxdWlyZShmdW5jdGlvbihlbGFwc2VkVGltZTpudW1iZXIpe1xuICAgICAgICAgICAgdGhpcy5mb3JFYWNoKChjaGlsZDpVSU9iamVjdCkgPT4ge1xuICAgICAgICAgICAgICAgIGFzc2VydChjaGlsZCBpbnN0YW5jZW9mIFVJT2JqZWN0LCBMb2cuaW5mby5GVU5DX01VU1RfQkUoXCJjaGlsZFwiLCBcIlVJT2JqZWN0XCIpKTtcbiAgICAgICAgICAgICAgICBhc3NlcnQoY2hpbGQuaGFzQ29tcG9uZW50KFVJKSwgTG9nLmluZm8uRlVOQ19TSE9VTEQoXCJVSU9iamVjdFwiLCBcImNvbnRhaW4gdWkgY29tcG9uZW50XCIpKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pXG4gICAgICAgIHByb3RlY3RlZCBiZWZvcmVVcGRhdGVDaGlsZHJlbihlbGFwc2VkVGltZTpudW1iZXIpe1xuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgICAgICAgICB0aGlzLl9yZXNldEFsbFJlbmRlcmVyU3RhdGUoKTtcblxuICAgICAgICAgICAgdGhpcy5mb3JFYWNoKChjaGlsZDpVSU9iamVjdCkgPT4ge1xuICAgICAgICAgICAgICAgIHZhciByZW5kZXJlciA9IHNlbGYuX2dldFVJUmVuZGVyZXIoY2hpbGQpO1xuXG4gICAgICAgICAgICAgICAgaWYocmVuZGVyZXIuZGlydHkpe1xuICAgICAgICAgICAgICAgICAgICBpZighcmVuZGVyZXIuaXNDbGVhckNhbnZhcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVyZXIuY2xlYXJDYW52YXMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlcmVyLmRpcnR5RHVyaW5nQ3VycmVudExvb3AgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHJlbmRlcmVyLnN0YXRlID0gVUlSZW5kZXJlclN0YXRlLkRJUlRZO1xuXG4gICAgICAgICAgICAgICAgICAgIHJlbmRlcmVyLnJlc2V0RGlydHkoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgaWYocmVuZGVyZXIuc3RhdGUgIT09IFVJUmVuZGVyZXJTdGF0ZS5ESVJUWSl7XG4gICAgICAgICAgICAgICAgICAgICAgICByZW5kZXJlci5zdGF0ZSA9IFVJUmVuZGVyZXJTdGF0ZS5OT1RfRElSVFk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByb3RlY3RlZCBiaW5kU3RhcnRMb29wRXZlbnQoKXtcbiAgICAgICAgICAgIEV2ZW50TWFuYWdlci5vbih0aGlzLCA8YW55PkVuZ2luZUV2ZW50LlNUQVJUTE9PUCwgdGhpcy5zdGFydExvb3BIYW5kbGVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByb3RlY3RlZCBiaW5kRW5kTG9vcEV2ZW50KCl7XG4gICAgICAgICAgICBFdmVudE1hbmFnZXIub24odGhpcywgPGFueT5FbmdpbmVFdmVudC5FTkRMT09QLCB0aGlzLmVuZExvb3BIYW5kbGVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIEByZXF1aXJlKGZ1bmN0aW9uKHVpT2JqZWN0OlVJT2JqZWN0KXtcbiAgICAgICAgICAgIGFzc2VydCh1aU9iamVjdC5nZXRDb21wb25lbnRDb3VudChVSVJlbmRlcmVyKSA8PSAxLCBMb2cuaW5mby5GVU5DX1NIT1VMRF9OT1QoXCJ1aU9iamVjdFwiLCBcImNvbnRhaW4gbW9yZSB0aGFuIDEgdWlSZW5kZXJlciBjb21wb25lbnRcIikpO1xuICAgICAgICB9KVxuICAgICAgICBwcml2YXRlIF9nZXRVSVJlbmRlcmVyKHVpT2JqZWN0OlVJT2JqZWN0KTpVSVJlbmRlcmVye1xuICAgICAgICAgICAgcmV0dXJuIHVpT2JqZWN0LmdldENvbXBvbmVudDxVSVJlbmRlcmVyPihVSVJlbmRlcmVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIEBlbnN1cmUoZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgICAgICAgICAgdGhpcy5nZXRBbGxDaGlsZHJlbigpLmZvckVhY2goKGNoaWxkOkVudGl0eU9iamVjdCkgPT4ge1xuICAgICAgICAgICAgICAgIHZhciByZW5kZXJlciA9IHNlbGYuX2dldFVJUmVuZGVyZXIoY2hpbGQpO1xuXG4gICAgICAgICAgICAgICAgYXNzZXJ0KCFyZW5kZXJlci5pc0NsZWFyQ2FudmFzLCBMb2cuaW5mby5GVU5DX1NIT1VMRChcInJlc2V0IGFsbCBVSVJlbmRlcmVycy0+aXNDbGVhckNhbnZhc1wiKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSlcbiAgICAgICAgcHJpdmF0ZSBfcmVzZXRBbGxSZW5kZXJlckNsZWFyQ2FudmFzRmxhZygpe1xuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgICAgICAgICB0aGlzLmZvckVhY2goKGNoaWxkOlVJT2JqZWN0KSA9PiB7XG4gICAgICAgICAgICAgICAgdmFyIHJlbmRlcmVyID0gc2VsZi5fZ2V0VUlSZW5kZXJlcihjaGlsZCk7XG4gICAgICAgICAgICAgICAgcmVuZGVyZXIuaXNDbGVhckNhbnZhcyA9IGZhbHNlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBAZW5zdXJlKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICAgICAgICAgIHRoaXMuZ2V0QWxsQ2hpbGRyZW4oKS5mb3JFYWNoKChjaGlsZDpFbnRpdHlPYmplY3QpID0+IHtcbiAgICAgICAgICAgICAgICB2YXIgcmVuZGVyZXIgPSBzZWxmLl9nZXRVSVJlbmRlcmVyKGNoaWxkKTtcblxuICAgICAgICAgICAgICAgIGFzc2VydChyZW5kZXJlci5zdGF0ZSA9PT0gVUlSZW5kZXJlclN0YXRlLk5PUk1BTCwgTG9nLmluZm8uRlVOQ19TSE9VTEQoXCJyZXNldCBhbGwgVUlSZW5kZXJlcnMtPnN0YXRlXCIpKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KVxuICAgICAgICBwcml2YXRlIF9yZXNldEFsbFJlbmRlcmVyU3RhdGUoKXtcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgICAgICAgICAgdGhpcy5mb3JFYWNoKChjaGlsZDpVSU9iamVjdCkgPT4ge1xuICAgICAgICAgICAgICAgIHZhciByZW5kZXJlciA9IHNlbGYuX2dldFVJUmVuZGVyZXIoY2hpbGQpO1xuXG4gICAgICAgICAgICAgICAgcmVuZGVyZXIuc3RhdGUgPSBVSVJlbmRlcmVyU3RhdGUuTk9STUFMO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9yZXNldEFsbFRyYW5zZm9ybVN0YXRlKCl7XG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICAgICAgICAgIHZhciByZXNldCA9ICh1aU9iamVjdDpVSU9iamVjdCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmKHNlbGYuX2lzTm90RGlydHlEdXJpbmdUaGlzTG9vcChzZWxmLl9nZXRVSVJlbmRlcmVyKHVpT2JqZWN0KSkpe1xuICAgICAgICAgICAgICAgICAgICBzZWxmLl9yZXNldFRyYW5zZm9ybUZsYWcodWlPYmplY3QpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHVpT2JqZWN0LmZvckVhY2goKGNoaWxkOlVJT2JqZWN0KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJlc2V0KGNoaWxkKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5mb3JFYWNoKChjaGlsZDpVSU9iamVjdCkgPT4ge1xuICAgICAgICAgICAgICAgIHJlc2V0KGNoaWxkKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfaXNOb3REaXJ0eUR1cmluZ1RoaXNMb29wKHJlbmRlcmVyOlVJUmVuZGVyZXIpe1xuICAgICAgICAgICAgcmV0dXJuICFyZW5kZXJlci5kaXJ0eUR1cmluZ0N1cnJlbnRMb29wO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfcmVzZXRUcmFuc2Zvcm1GbGFnKHVpT2JqZWN0OlVJT2JqZWN0KXtcbiAgICAgICAgICAgIHZhciB0cmFuc2Zvcm06UmVjdFRyYW5zZm9ybSA9IHVpT2JqZWN0LnRyYW5zZm9ybTtcblxuICAgICAgICAgICAgdHJhbnNmb3JtLmlzVHJhbnNsYXRlID0gZmFsc2U7XG4gICAgICAgICAgICB0cmFuc2Zvcm0uaXNTY2FsZSA9IGZhbHNlO1xuICAgICAgICAgICAgdHJhbnNmb3JtLmlzUm90YXRlID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICAvL3RvZG8gc3VwcG9ydCBcInB1dCBhbGwgY2hpbGRyZW4gdG9nZXRoZXIsIHNvIGl0IGNhbiBzb3J0IGFsbCBjaGlsZHJlbiBieSB6SW5kZXhcIj9cbiAgICAgICAgcHJpdmF0ZSBfc29ydFNpYmxpbmdDaGlsZHJlbigpe1xuICAgICAgICAgICAgdmFyIHNvcnQgPSAodWlPYmplY3Q6RW50aXR5T2JqZWN0KSA9PiB7XG4gICAgICAgICAgICAgICAgdWlPYmplY3Quc29ydCgoYTpVSU9iamVjdCwgYjpVSU9iamVjdCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYS50cmFuc2Zvcm0uekluZGV4IC0gYi50cmFuc2Zvcm0uekluZGV4O1xuICAgICAgICAgICAgICAgIH0sIHRydWUpO1xuXG4gICAgICAgICAgICAgICAgdWlPYmplY3QuZm9yRWFjaCgoY2hpbGQ6VUlPYmplY3QpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgc29ydChjaGlsZCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHNvcnQodGhpcyk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbiIsIm1vZHVsZSB3ZCB7XG4gICAgLyohaXQncyBmbGlwWCB3aGVuIHZpZXdlciBpcyBpbnNpZGUgdGhlIHNreWJveCovXG5cbiAgICBleHBvcnQgY2xhc3MgU2t5Ym94IGV4dGVuZHMgR2FtZU9iamVjdHtcbiAgICAgICAgcHVibGljIHN0YXRpYyBjcmVhdGUoKSB7XG4gICAgICAgICAgICB2YXIgb2JqID0gbmV3IHRoaXMoKTtcblxuICAgICAgICAgICAgb2JqLmluaXRXaGVuQ3JlYXRlKCk7XG5cbiAgICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgaW5pdFdoZW5DcmVhdGUoKXtcbiAgICAgICAgICAgIHN1cGVyLmluaXRXaGVuQ3JlYXRlKCk7XG5cbiAgICAgICAgICAgIHRoaXMuYWRkQ29tcG9uZW50KFNreWJveFJlbmRlcmVyLmNyZWF0ZSgpKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuIiwibW9kdWxlIHdke1xuICAgIGV4cG9ydCBjbGFzcyBDb2xsaXNpb25EZXRlY3RvcntcbiAgICAgICAgcHVibGljIHN0YXRpYyBjcmVhdGUoKSB7XG4gICAgICAgIFx0dmFyIG9iaiA9IG5ldyB0aGlzKCk7XG5cbiAgICAgICAgXHRyZXR1cm4gb2JqO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfbGFzdENvbGxpZGVPYmplY3RzOndkQ2IuQ29sbGVjdGlvbjxHYW1lT2JqZWN0PiA9IG51bGw7XG4gICAgICAgIHByaXZhdGUgX2NvbGxpc2lvblRhYmxlOndkQ2IuSGFzaDx3ZENiLkNvbGxlY3Rpb248R2FtZU9iamVjdD4+ID0gd2RDYi5IYXNoLmNyZWF0ZTx3ZENiLkNvbGxlY3Rpb248R2FtZU9iamVjdD4+KCk7XG5cbiAgICAgICAgcHVibGljIGRldGVjdChzY2VuZTpHYW1lT2JqZWN0U2NlbmUpe1xuICAgICAgICAgICAgLy90b2RvIG9wdGltaXplOnVzZSB3b3JrZXJcbiAgICAgICAgICAgIHZhciBjaGVja1RhcmdldExpc3QgPSBzY2VuZS5maWx0ZXIoKGVudGl0eU9iamVjdDpHYW1lT2JqZWN0KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlbnRpdHlPYmplY3QuaGFzQ29tcG9uZW50KENvbGxpZGVyKSB8fCBKdWRnZVV0aWxzLmlzT2N0cmVlT2JqZWN0KGVudGl0eU9iamVjdCk7XG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgc2VsZiA9IHRoaXM7XG5cbiAgICAgICAgICAgIHRoaXMuX2NsZWFyQ29sbGlzaW9uVGFibGUoKTtcblxuICAgICAgICAgICAgY2hlY2tUYXJnZXRMaXN0LmZvckVhY2goKGVudGl0eU9iamVjdDpHYW1lT2JqZWN0KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYoZW50aXR5T2JqZWN0Lmhhc0NvbXBvbmVudChSaWdpZEJvZHkpKXtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciB7dGFyZ2V0Q29sbGlkZU9iamVjdHMsIHNvdXJjZUNvbGxpZGVPYmplY3RzfSA9IHNlbGYuX2dldENvbGxpZGVPYmplY3RzKGVudGl0eU9iamVjdCwgY2hlY2tUYXJnZXRMaXN0KTtcblxuICAgICAgICAgICAgICAgIHNvdXJjZUNvbGxpZGVPYmplY3RzLmZvckVhY2goKHNvdXJjZU9iamVjdDpHYW1lT2JqZWN0KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmKHRhcmdldENvbGxpZGVPYmplY3RzLmdldENvdW50KCkgPiAwKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHNlbGYuX2lzQ29sbGlzaW9uU3RhcnQoc291cmNlT2JqZWN0KSl7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VPYmplY3QuZXhlY1NjcmlwdChcIm9uQ29sbGlzaW9uU3RhcnRcIiwgdGFyZ2V0Q29sbGlkZU9iamVjdHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZU9iamVjdC5leGVjU2NyaXB0KFwib25Db250YWN0XCIsIHRhcmdldENvbGxpZGVPYmplY3RzKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuX3RyaWdnZXJDb2xsaXNpb25FdmVudE9mQ29sbGlkZU9iamVjdFdoaWNoSGFzUmlnaWRCb2R5KHRhcmdldENvbGxpZGVPYmplY3RzLCBzb3VyY2VPYmplY3QsIFtcIm9uQ29sbGlzaW9uU3RhcnRcIiwgXCJvbkNvbnRhY3RcIl0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VPYmplY3QuZXhlY1NjcmlwdChcIm9uQ29udGFjdFwiLCB0YXJnZXRDb2xsaWRlT2JqZWN0cyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5fdHJpZ2dlckNvbGxpc2lvbkV2ZW50T2ZDb2xsaWRlT2JqZWN0V2hpY2hIYXNSaWdpZEJvZHkodGFyZ2V0Q29sbGlkZU9iamVjdHMsIHNvdXJjZU9iamVjdCwgW1wib25Db250YWN0XCJdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlT2JqZWN0LmFkZFRhZyg8YW55PkNvbGxpc2lvblRhZy5DT0xMSURFRCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLl9sYXN0Q29sbGlkZU9iamVjdHMgPSB0YXJnZXRDb2xsaWRlT2JqZWN0cztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYoc2VsZi5faXNDb2xsaXNpb25FbmQoc291cmNlT2JqZWN0KSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlT2JqZWN0LmV4ZWNTY3JpcHQoXCJvbkNvbGxpc2lvbkVuZFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLl90cmlnZ2VyQ29sbGlzaW9uRXZlbnRPZkNvbGxpZGVPYmplY3RXaGljaEhhc1JpZ2lkQm9keShzZWxmLl9sYXN0Q29sbGlkZU9iamVjdHMsIHNvdXJjZU9iamVjdCwgW1wib25Db2xsaXNpb25FbmRcIl0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VPYmplY3QucmVtb3ZlVGFnKDxhbnk+Q29sbGlzaW9uVGFnLkNPTExJREVEKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBAcmVxdWlyZShmdW5jdGlvbihzb3VyY2VPYmplY3Q6R2FtZU9iamVjdCwgY2hlY2tUYXJnZXRMaXN0OndkQ2IuQ29sbGVjdGlvbjxHYW1lT2JqZWN0Pil7XG4gICAgICAgICAgICBjaGVja1RhcmdldExpc3QuZm9yRWFjaCgodGFyZ2V0T2JqZWN0OkdhbWVPYmplY3QpID0+IHtcbiAgICAgICAgICAgICAgICBhc3NlcnQodGFyZ2V0T2JqZWN0IGluc3RhbmNlb2YgR2FtZU9iamVjdCwgTG9nLmluZm8uRlVOQ19TSE9VTEQoXCJ0YXJnZXRPYmplY3RcIiwgXCJiZSBHYW1lT2JqZWN0XCIpKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KVxuICAgICAgICBwcml2YXRlIF9nZXRDb2xsaWRlT2JqZWN0cyhzb3VyY2VPYmplY3Q6R2FtZU9iamVjdCwgY2hlY2tUYXJnZXRMaXN0OndkQ2IuQ29sbGVjdGlvbjxHYW1lT2JqZWN0Pil7XG4gICAgICAgICAgICB2YXIgdGFyZ2V0Q29sbGlkZU9iamVjdHMgPSB3ZENiLkNvbGxlY3Rpb24uY3JlYXRlPEdhbWVPYmplY3Q+KCksXG4gICAgICAgICAgICAgICAgc291cmNlQ29sbGlkZU9iamVjdHMgPSB3ZENiLkNvbGxlY3Rpb24uY3JlYXRlPEdhbWVPYmplY3Q+KCksXG4gICAgICAgICAgICAgICAgc2VsZiA9IHRoaXMsXG4gICAgICAgICAgICAgICAgc291cmNlQ29sbGlkZXI6Q29sbGlkZXIgPSBudWxsO1xuXG4gICAgICAgICAgICAgaWYoSnVkZ2VVdGlscy5pc09jdHJlZU9iamVjdChzb3VyY2VPYmplY3QpKXtcbiAgICAgICAgICAgICAgICAgY2hlY2tUYXJnZXRMaXN0LmZvckVhY2goKHRhcmdldE9iamVjdDpHYW1lT2JqZWN0KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICBpZihKdWRnZVV0aWxzLmlzU2VsZihzb3VyY2VPYmplY3QsIHRhcmdldE9iamVjdCkpe1xuICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgaWYoSnVkZ2VVdGlscy5pc09jdHJlZU9iamVjdCh0YXJnZXRPYmplY3QpKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLl9nZXRDb2xsaWRlT2JqZWN0c1dpdGhPY3RyZWUodGFyZ2V0T2JqZWN0LmdldE9jdHJlZSgpLCBzb3VyY2VPYmplY3QuZ2V0T2N0cmVlKCksIHRhcmdldENvbGxpZGVPYmplY3RzLCBzb3VyY2VDb2xsaWRlT2JqZWN0cyk7XG4gICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuX2dldENvbGxpZGVPYmplY3RzV2l0aE9jdHJlZSh0YXJnZXRPYmplY3QsIHNvdXJjZU9iamVjdC5nZXRPY3RyZWUoKSwgdGFyZ2V0Q29sbGlkZU9iamVjdHMsIHNvdXJjZUNvbGxpZGVPYmplY3RzKTtcbiAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgdGhpcy5fcmVjb3JkQ29sbGlzaW9uVGFyZ2V0cyh0YXJnZXRDb2xsaWRlT2JqZWN0cywgc291cmNlQ29sbGlkZU9iamVjdHMpO1xuXG4gICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICB0YXJnZXRDb2xsaWRlT2JqZWN0czp0YXJnZXRDb2xsaWRlT2JqZWN0cy5yZW1vdmVSZXBlYXRJdGVtcygpLFxuICAgICAgICAgICAgICAgICAgICAgc291cmNlQ29sbGlkZU9iamVjdHM6c291cmNlQ29sbGlkZU9iamVjdHMucmVtb3ZlUmVwZWF0SXRlbXMoKVxuICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBzb3VyY2VDb2xsaWRlciA9IHNvdXJjZU9iamVjdC5nZXRDb21wb25lbnQ8Q29sbGlkZXI+KENvbGxpZGVyKTtcblxuICAgICAgICAgICAgY2hlY2tUYXJnZXRMaXN0LmZvckVhY2goKHRhcmdldE9iamVjdDpHYW1lT2JqZWN0KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYoSnVkZ2VVdGlscy5pc1NlbGYoc291cmNlT2JqZWN0LCB0YXJnZXRPYmplY3QpKXtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmKEp1ZGdlVXRpbHMuaXNPY3RyZWVPYmplY3QodGFyZ2V0T2JqZWN0KSl7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuX2dldENvbGxpZGVPYmplY3RzV2l0aE9jdHJlZSh0YXJnZXRPYmplY3QuZ2V0T2N0cmVlKCksIHNvdXJjZUNvbGxpZGVyLCBzb3VyY2VPYmplY3QsIHRhcmdldENvbGxpZGVPYmplY3RzLCBzb3VyY2VDb2xsaWRlT2JqZWN0cyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuX2dldENvbGxpZGVPYmplY3RzQnlHYW1lT2JqZWN0VG9HYW1lT2JqZWN0KHNvdXJjZU9iamVjdCwgc291cmNlQ29sbGlkZXIsIHRhcmdldE9iamVjdCwgdGFyZ2V0Q29sbGlkZU9iamVjdHMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBzb3VyY2VDb2xsaWRlT2JqZWN0cy5hZGRDaGlsZChzb3VyY2VPYmplY3QpO1xuXG4gICAgICAgICAgICBpZih0YXJnZXRDb2xsaWRlT2JqZWN0cy5nZXRDb3VudCgpID4gMCl7XG4gICAgICAgICAgICAgICAgdGhpcy5fcmVjb3JkQ29sbGlzaW9uVGFyZ2V0cyh0YXJnZXRDb2xsaWRlT2JqZWN0cywgc291cmNlQ29sbGlkZU9iamVjdHMpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHRhcmdldENvbGxpZGVPYmplY3RzOnRhcmdldENvbGxpZGVPYmplY3RzLnJlbW92ZVJlcGVhdEl0ZW1zKCksXG4gICAgICAgICAgICAgICAgc291cmNlQ29sbGlkZU9iamVjdHM6c291cmNlQ29sbGlkZU9iamVjdHMucmVtb3ZlUmVwZWF0SXRlbXMoKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgQHJlcXVpcmUoZnVuY3Rpb24oc291cmNlT2JqZWN0OkdhbWVPYmplY3QsIHNvdXJjZUNvbGxpZGVyOkNvbGxpZGVyLCB0YXJnZXRPYmplY3Q6R2FtZU9iamVjdCwgdGFyZ2V0Q29sbGlkZU9iamVjdHM6d2RDYi5Db2xsZWN0aW9uPEdhbWVPYmplY3Q+KXtcbiAgICAgICAgICAgIGFzc2VydChzb3VyY2VPYmplY3QgaW5zdGFuY2VvZiBHYW1lT2JqZWN0ICYmIHRhcmdldE9iamVjdCBpbnN0YW5jZW9mIEdhbWVPYmplY3QsIExvZy5pbmZvLkZVTkNfU0hPVUxEKFwic291cmNlT2JqZWN0IGFuZCB0YXJnZXRPYmplY3RcIiwgXCJiZSBHYW1lT2JqZWN0XCIpKTtcbiAgICAgICAgfSlcbiAgICAgICAgcHJpdmF0ZSBfZ2V0Q29sbGlkZU9iamVjdHNCeUdhbWVPYmplY3RUb0dhbWVPYmplY3Qoc291cmNlT2JqZWN0OkdhbWVPYmplY3QsIHNvdXJjZUNvbGxpZGVyOkNvbGxpZGVyLCB0YXJnZXRPYmplY3Q6R2FtZU9iamVjdCwgdGFyZ2V0Q29sbGlkZU9iamVjdHM6d2RDYi5Db2xsZWN0aW9uPEdhbWVPYmplY3Q+KXtcbiAgICAgICAgICAgIGlmKHRoaXMuX2lzVGFyZ2V0Q29sbGlkZWRXaXRoU291cmNlSW5DdXJyZW50RnJhbWUoc291cmNlT2JqZWN0LCB0YXJnZXRPYmplY3QpKXtcbiAgICAgICAgICAgICAgICB0YXJnZXRDb2xsaWRlT2JqZWN0cy5hZGRDaGlsZCh0YXJnZXRPYmplY3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZihcbiAgICAgICAgICAgICAgICAhKHRoaXMuX2lzTm90VHJhbnNmb3JtKHNvdXJjZU9iamVjdCkgJiYgdGhpcy5faXNOb3RUcmFuc2Zvcm0odGFyZ2V0T2JqZWN0KSAmJiAhc291cmNlT2JqZWN0Lmhhc1RhZyg8YW55PkNvbGxpc2lvblRhZy5DT0xMSURFRCkpXG4gICAgICAgICAgICAgICAgJiYgc291cmNlQ29sbGlkZXIuaXNDb2xsaWRlKHRhcmdldE9iamVjdClcbiAgICAgICAgICAgICl7XG4gICAgICAgICAgICAgICAgdGFyZ2V0Q29sbGlkZU9iamVjdHMuYWRkQ2hpbGQodGFyZ2V0T2JqZWN0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX2NsZWFyQ29sbGlzaW9uVGFibGUoKXtcbiAgICAgICAgICAgIHRoaXMuX2NvbGxpc2lvblRhYmxlLnJlbW92ZUFsbENoaWxkcmVuKCk7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9pc1RhcmdldENvbGxpZGVkV2l0aFNvdXJjZUluQ3VycmVudEZyYW1lKHNvdXJjZU9iamVjdDpHYW1lT2JqZWN0LCB0YXJnZXRPYmplY3Q6R2FtZU9iamVjdCl7XG4gICAgICAgICAgICB2YXIgdGFyZ2V0Q29sbGlkZU9iamVjdHMgPSB0aGlzLl9jb2xsaXNpb25UYWJsZS5nZXRDaGlsZChTdHJpbmcodGFyZ2V0T2JqZWN0LnVpZCkpO1xuXG4gICAgICAgICAgICBpZighdGFyZ2V0Q29sbGlkZU9iamVjdHMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB0YXJnZXRDb2xsaWRlT2JqZWN0cy5oYXNDaGlsZCgodGFyZ2V0Q29sbGlkZU9iamVjdDpHYW1lT2JqZWN0KSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIEp1ZGdlVXRpbHMuaXNFcXVhbCh0YXJnZXRDb2xsaWRlT2JqZWN0LCBzb3VyY2VPYmplY3QpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9yZWNvcmRDb2xsaXNpb25UYXJnZXRzKHRhcmdldENvbGxpZGVPYmplY3RzOndkQ2IuQ29sbGVjdGlvbjxHYW1lT2JqZWN0Piwgc291cmNlQ29sbGlkZU9iamVjdHM6d2RDYi5Db2xsZWN0aW9uPEdhbWVPYmplY3Q+KXtcbiAgICAgICAgICAgIHZhciB0YWJsZSA9IHRoaXMuX2NvbGxpc2lvblRhYmxlO1xuXG4gICAgICAgICAgICBzb3VyY2VDb2xsaWRlT2JqZWN0cy5mb3JFYWNoKChzb3VyY2VPYmplY3Q6R2FtZU9iamVjdCkgPT4ge1xuICAgICAgICAgICAgICAgIHRhcmdldENvbGxpZGVPYmplY3RzLmZvckVhY2goKHRhcmdldE9iamVjdDpHYW1lT2JqZWN0KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRhYmxlLmFwcGVuZENoaWxkKFN0cmluZyhzb3VyY2VPYmplY3QudWlkKSwgdGFyZ2V0T2JqZWN0KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfZ2V0Q29sbGlkZU9iamVjdHNXaXRoT2N0cmVlKHRhcmdldE9iamVjdDpHYW1lT2JqZWN0LCBzb3VyY2VPY3RyZWU6T2N0cmVlLCB0YXJnZXRDb2xsaWRlT2JqZWN0czp3ZENiLkNvbGxlY3Rpb248R2FtZU9iamVjdD4sIHNvdXJjZUNvbGxpZGVPYmplY3RzOndkQ2IuQ29sbGVjdGlvbjxHYW1lT2JqZWN0Pik7XG4gICAgICAgIHByaXZhdGUgX2dldENvbGxpZGVPYmplY3RzV2l0aE9jdHJlZSh0YXJnZXRPY3RyZWU6T2N0cmVlLCBzb3VyY2VPY3RyZWU6T2N0cmVlLCB0YXJnZXRDb2xsaWRlT2JqZWN0czp3ZENiLkNvbGxlY3Rpb248R2FtZU9iamVjdD4sIHNvdXJjZUNvbGxpZGVPYmplY3RzOndkQ2IuQ29sbGVjdGlvbjxHYW1lT2JqZWN0Pik7XG5cbiAgICAgICAgcHJpdmF0ZSBfZ2V0Q29sbGlkZU9iamVjdHNXaXRoT2N0cmVlKHRhcmdldE9jdHJlZTpPY3RyZWUsIHNvdXJjZUNvbGxpZGVyOkNvbGxpZGVyLCBzb3VyY2VPYmplY3Q6R2FtZU9iamVjdCwgdGFyZ2V0Q29sbGlkZU9iamVjdHM6d2RDYi5Db2xsZWN0aW9uPEdhbWVPYmplY3Q+LCBzb3VyY2VDb2xsaWRlT2JqZWN0czp3ZENiLkNvbGxlY3Rpb248R2FtZU9iamVjdD4pO1xuXG4gICAgICAgIHByaXZhdGUgX2dldENvbGxpZGVPYmplY3RzV2l0aE9jdHJlZSguLi5hcmdzKSB7XG4gICAgICAgICAgICBpZihhcmdzLmxlbmd0aCA9PT0gNCl7XG4gICAgICAgICAgICAgICAgaWYoYXJnc1swXSBpbnN0YW5jZW9mIEdhbWVPYmplY3QgJiYgYXJnc1sxXSBpbnN0YW5jZW9mIE9jdHJlZSl7XG4gICAgICAgICAgICAgICAgICAgIGxldCB0YXJnZXRPYmplY3Q6R2FtZU9iamVjdCA9IGFyZ3NbMF0sXG4gICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VPY3RyZWU6T2N0cmVlID0gYXJnc1sxXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldENvbGxpZGVPYmplY3RzOndkQ2IuQ29sbGVjdGlvbjxHYW1lT2JqZWN0PiA9IGFyZ3NbMl0sXG4gICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VDb2xsaWRlT2JqZWN0czp3ZENiLkNvbGxlY3Rpb248R2FtZU9iamVjdD4gPSBhcmdzWzNdLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0Q29sbGlkZXIgPSB0YXJnZXRPYmplY3QuZ2V0Q29tcG9uZW50PENvbGxpZGVyPihDb2xsaWRlciksXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmID0gdGhpcztcblxuICAgICAgICAgICAgICAgICAgICBzb3VyY2VPY3RyZWUuZ2V0Q29sbGlkZU9iamVjdHModGFyZ2V0Q29sbGlkZXIuc2hhcGUpLmZvckVhY2goKHNvdXJjZU9iamVjdDpHYW1lT2JqZWN0KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLl9nZXRDb2xsaWRlT2JqZWN0c0J5R2FtZU9iamVjdFRvR2FtZU9iamVjdCh0YXJnZXRPYmplY3QsIHRhcmdldENvbGxpZGVyLCBzb3VyY2VPYmplY3QsIHNvdXJjZUNvbGxpZGVPYmplY3RzKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYoc291cmNlQ29sbGlkZU9iamVjdHMuZ2V0Q291bnQoKSA+IDApe1xuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0Q29sbGlkZU9iamVjdHMuYWRkQ2hpbGQodGFyZ2V0T2JqZWN0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZUNvbGxpZGVPYmplY3RzLnJlbW92ZUFsbENoaWxkcmVuKCk7XG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZUNvbGxpZGVPYmplY3RzLmFkZENoaWxkcmVuKHNvdXJjZU9jdHJlZS5nZXRDaGlsZHJlbigpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZihhcmdzWzBdIGluc3RhbmNlb2YgT2N0cmVlICYmIGFyZ3NbMV0gaW5zdGFuY2VvZiBPY3RyZWUpe1xuICAgICAgICAgICAgICAgICAgICBsZXQgdGFyZ2V0T2N0cmVlOk9jdHJlZSA9IGFyZ3NbMF0sXG4gICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VPY3RyZWU6T2N0cmVlID0gYXJnc1sxXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldENvbGxpZGVPYmplY3RzOndkQ2IuQ29sbGVjdGlvbjxHYW1lT2JqZWN0PiA9IGFyZ3NbMl0sXG4gICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VDb2xsaWRlT2JqZWN0czp3ZENiLkNvbGxlY3Rpb248R2FtZU9iamVjdD4gPSBhcmdzWzNdLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZiA9IHRoaXM7XG5cbiAgICAgICAgICAgICAgICAgICAgc291cmNlT2N0cmVlLmdldENoaWxkcmVuKClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5mb3JFYWNoKChzb3VyY2VPYmplY3Q6R2FtZU9iamVjdCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzb3VyY2VDb2xsaWRlciA9IHNvdXJjZU9iamVjdC5nZXRDb21wb25lbnQ8Q29sbGlkZXI+KENvbGxpZGVyKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuX2dldENvbGxpZGVPYmplY3RzV2l0aE9jdHJlZSh0YXJnZXRPY3RyZWUsIHNvdXJjZUNvbGxpZGVyLCBzb3VyY2VPYmplY3QsIHRhcmdldENvbGxpZGVPYmplY3RzLCBzb3VyY2VDb2xsaWRlT2JqZWN0cyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmKGFyZ3MubGVuZ3RoID09PSA1KXtcbiAgICAgICAgICAgICAgICBsZXQgdGFyZ2V0T2N0cmVlOk9jdHJlZSA9IGFyZ3NbMF0sXG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZUNvbGxpZGVyOkNvbGxpZGVyID0gYXJnc1sxXSxcbiAgICAgICAgICAgICAgICAgICAgc291cmNlT2JqZWN0ID0gYXJnc1syXSxcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0Q29sbGlkZU9iamVjdHM6d2RDYi5Db2xsZWN0aW9uPEdhbWVPYmplY3Q+ID0gYXJnc1szXSxcbiAgICAgICAgICAgICAgICAgICAgc291cmNlQ29sbGlkZU9iamVjdHM6d2RDYi5Db2xsZWN0aW9uPEdhbWVPYmplY3Q+ID0gYXJnc1s0XSxcbiAgICAgICAgICAgICAgICAgICAgc2VsZiA9IHRoaXM7XG5cbiAgICAgICAgICAgICAgICBpZighc291cmNlQ29sbGlkZXIpe1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdGFyZ2V0T2N0cmVlLmdldENvbGxpZGVPYmplY3RzKHNvdXJjZUNvbGxpZGVyLnNoYXBlKS5mb3JFYWNoKCh0YXJnZXRPYmplY3Q6R2FtZU9iamVjdCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBzZWxmLl9nZXRDb2xsaWRlT2JqZWN0c0J5R2FtZU9iamVjdFRvR2FtZU9iamVjdChzb3VyY2VPYmplY3QsIHNvdXJjZUNvbGxpZGVyLCB0YXJnZXRPYmplY3QsIHRhcmdldENvbGxpZGVPYmplY3RzKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHNvdXJjZUNvbGxpZGVPYmplY3RzLmFkZENoaWxkKHNvdXJjZU9iamVjdCk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9pc0NvbGxpc2lvblN0YXJ0KGVudGl0eU9iamVjdDpHYW1lT2JqZWN0KXtcbiAgICAgICAgICAgIHJldHVybiAhZW50aXR5T2JqZWN0Lmhhc1RhZyg8YW55PkNvbGxpc2lvblRhZy5DT0xMSURFRCk7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9pc0NvbGxpc2lvbkVuZChlbnRpdHlPYmplY3Q6R2FtZU9iamVjdCl7XG4gICAgICAgICAgICByZXR1cm4gZW50aXR5T2JqZWN0Lmhhc1RhZyg8YW55PkNvbGxpc2lvblRhZy5DT0xMSURFRCk7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF90cmlnZ2VyQ29sbGlzaW9uRXZlbnRPZkNvbGxpZGVPYmplY3RXaGljaEhhc1JpZ2lkQm9keShjb2xsaWRlT2JqZWN0czp3ZENiLkNvbGxlY3Rpb248R2FtZU9iamVjdD4sIGN1cnJlbnRHYW1lT2JqZWN0OkdhbWVPYmplY3QsIGV2ZW50TGlzdDpBcnJheTxzdHJpbmc+KXtcbiAgICAgICAgICAgIGNvbGxpZGVPYmplY3RzLmZpbHRlcigoZW50aXR5T2JqZWN0OkdhbWVPYmplY3QpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVudGl0eU9iamVjdC5oYXNDb21wb25lbnQoUmlnaWRCb2R5KTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5mb3JFYWNoKChjb2xsaWRlT2JqZWN0OkdhbWVPYmplY3QpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZm9yKGxldCBldmVudE5hbWUgb2YgZXZlbnRMaXN0KXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbGxpZGVPYmplY3QuZXhlY1NjcmlwdChldmVudE5hbWUsIHdkQ2IuQ29sbGVjdGlvbi5jcmVhdGUoW2N1cnJlbnRHYW1lT2JqZWN0XSkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9pc05vdFRyYW5zZm9ybShlbnRpdHlPYmplY3Q6R2FtZU9iamVjdCl7XG4gICAgICAgICAgICByZXR1cm4gIWVudGl0eU9iamVjdC50cmFuc2Zvcm0uaXNUcmFuc2Zvcm07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBlbnVtIENvbGxpc2lvblRhZ3tcbiAgICAgICAgQ09MTElERUQgPSA8YW55PlwiQ09MTElERURcIlxuICAgIH1cbn1cbiIsIm1vZHVsZSB3ZHtcbiAgICBleHBvcnQgYWJzdHJhY3QgY2xhc3MgRXZlbnRMaXN0ZW5lck1hcHtcbiAgICAgICAgcHJvdGVjdGVkIGxpc3RlbmVyTWFwOndkQ2IuSGFzaDx3ZENiLkNvbGxlY3Rpb248RXZlbnRSZWdpc3RlckRhdGE+PiA9IHdkQ2IuSGFzaC5jcmVhdGU8d2RDYi5Db2xsZWN0aW9uPEV2ZW50UmVnaXN0ZXJEYXRhPj4oKTtcblxuICAgICAgICBwdWJsaWMgYWJzdHJhY3QgZ2V0Q2hpbGQoLi4uYXJncyk6d2RDYi5Db2xsZWN0aW9uPGFueT47XG4gICAgICAgIHB1YmxpYyBhYnN0cmFjdCByZW1vdmVDaGlsZCguLi5hcmdzKTphbnk7XG5cbiAgICAgICAgcHVibGljIGhhc0NoaWxkKGZ1bmM6KC4uLmFyZ3MpID0+IGJvb2xlYW4pOmJvb2xlYW47XG4gICAgICAgIHB1YmxpYyBoYXNDaGlsZCh0YXJnZXQ6RW50aXR5T2JqZWN0LCBldmVudE5hbWU6RXZlbnROYW1lKTpib29sZWFuO1xuICAgICAgICBwdWJsaWMgaGFzQ2hpbGQoZG9tOkhUTUxFbGVtZW50LCBldmVudE5hbWU6RXZlbnROYW1lKTpib29sZWFuO1xuXG4gICAgICAgIHB1YmxpYyBoYXNDaGlsZCguLi5hcmdzKXtcbiAgICAgICAgICAgIGlmKGFyZ3MubGVuZ3RoID09PSAxICYmIEp1ZGdlVXRpbHMuaXNGdW5jdGlvbihhcmdzWzBdKSl7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubGlzdGVuZXJNYXAuaGFzQ2hpbGQoYXJnc1swXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgIGxldCB0YXJnZXQgPSBhcmdzWzBdLFxuICAgICAgICAgICAgICAgICAgICBldmVudE5hbWUgPSBhcmdzWzFdLFxuICAgICAgICAgICAgICAgICAgICBsaXN0ID0gdGhpcy5saXN0ZW5lck1hcC5nZXRDaGlsZCh0aGlzLmJ1aWxkS2V5KHRhcmdldCwgZXZlbnROYW1lKSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gbGlzdCAmJiBsaXN0LmdldENvdW50KCkgPiAwO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGFwcGVuZENoaWxkKHRhcmdldDpFbnRpdHlPYmplY3R8SFRNTEVsZW1lbnQsIGV2ZW50TmFtZTpFdmVudE5hbWUsIGRhdGE6YW55KXtcbiAgICAgICAgICAgIHRoaXMubGlzdGVuZXJNYXAuYXBwZW5kQ2hpbGQoXG4gICAgICAgICAgICAgICAgdGhpcy5idWlsZEtleSh0YXJnZXQsIGV2ZW50TmFtZSksXG4gICAgICAgICAgICAgICAgZGF0YVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBmaWx0ZXIoZnVuYzpGdW5jdGlvbil7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5saXN0ZW5lck1hcC5maWx0ZXIoZnVuYyk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgZm9yRWFjaChmdW5jOkZ1bmN0aW9uKXtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxpc3RlbmVyTWFwLmZvckVhY2goZnVuYyk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgZ2V0RXZlbnROYW1lRnJvbUtleShrZXk6c3RyaW5nKTpFdmVudE5hbWV7XG4gICAgICAgICAgICB2YXIgc2VwYXJhdG9yID0gdGhpcy5nZXRFdmVudFNlcGFyYXRvcigpO1xuXG4gICAgICAgICAgICByZXR1cm4ga2V5LmluZGV4T2Yoc2VwYXJhdG9yKSA+IC0xID8gPGFueT5rZXkuc3BsaXQoc2VwYXJhdG9yKVsxXSA6IGtleTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgcHJvdGVjdGVkIGFic3RyYWN0IGJ1aWxkS2V5KC4uLmFyZ3MpOnN0cmluZztcbiAgICAgICAgcHJvdGVjdGVkIGFic3RyYWN0IGdldEV2ZW50U2VwYXJhdG9yKCk6c3RyaW5nO1xuXG5cbiAgICAgICAgcHJvdGVjdGVkIGlzRXZlbnROYW1lKGtleTpzdHJpbmcsIGV2ZW50TmFtZTpFdmVudE5hbWUpe1xuICAgICAgICAgICAgcmV0dXJuIGtleS5pbmRleE9mKGAke3RoaXMuZ2V0RXZlbnRTZXBhcmF0b3IoKX0ke2V2ZW50TmFtZX1gKSA+IC0xXG4gICAgICAgICAgICAgICAgfHwga2V5ID09PSA8YW55PmV2ZW50TmFtZTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuIiwibW9kdWxlIHdke1xuICAgIGV4cG9ydCBjbGFzcyBDdXN0b21FdmVudExpc3RlbmVyTWFwIGV4dGVuZHMgRXZlbnRMaXN0ZW5lck1hcHtcbiAgICAgICAgcHVibGljIHN0YXRpYyBldmVudFNlcGFyYXRvciA9IFwiQFwiO1xuXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlKCkge1xuICAgICAgICBcdHZhciBvYmogPSBuZXcgdGhpcygpO1xuXG4gICAgICAgIFx0cmV0dXJuIG9iajtcbiAgICAgICAgfVxuXG4gICAgICAgIHByb3RlY3RlZCBsaXN0ZW5lck1hcDp3ZENiLkhhc2g8d2RDYi5Db2xsZWN0aW9uPEN1c3RvbUV2ZW50UmVnaXN0ZXJEYXRhPj47XG5cbiAgICAgICAgcHVibGljIGdldENoaWxkKGV2ZW50TmFtZTpFdmVudE5hbWUpOndkQ2IuQ29sbGVjdGlvbjxDdXN0b21FdmVudFJlZ2lzdGVyRGF0YT47XG4gICAgICAgIHB1YmxpYyBnZXRDaGlsZCh0YXJnZXQ6RW50aXR5T2JqZWN0KTp3ZENiLkNvbGxlY3Rpb248Q3VzdG9tRXZlbnRSZWdpc3RlckRhdGE+O1xuICAgICAgICBwdWJsaWMgZ2V0Q2hpbGQodGFyZ2V0OkVudGl0eU9iamVjdCwgZXZlbnROYW1lOkV2ZW50TmFtZSk6d2RDYi5Db2xsZWN0aW9uPEN1c3RvbUV2ZW50UmVnaXN0ZXJEYXRhPjtcblxuICAgICAgICBwdWJsaWMgZ2V0Q2hpbGQoLi4uYXJncyk6YW55e1xuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgICAgICAgICBpZihhcmdzLmxlbmd0aCA9PT0gMSAmJiBKdWRnZVV0aWxzLmlzU3RyaW5nKGFyZ3NbMF0pKXtcbiAgICAgICAgICAgICAgICBsZXQgZXZlbnROYW1lID0gYXJnc1swXTtcblxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmxpc3RlbmVyTWFwLmdldENoaWxkKGV2ZW50TmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmKGFyZ3MubGVuZ3RoID09PSAxICYmIGFyZ3NbMF0gaW5zdGFuY2VvZiBFbnRpdHlPYmplY3Qpe1xuICAgICAgICAgICAgICAgIGxldCB0YXJnZXQgPSBhcmdzWzBdO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubGlzdGVuZXJNYXAuZmlsdGVyKChsaXN0OndkQ2IuQ29sbGVjdGlvbjxDdXN0b21FdmVudFJlZ2lzdGVyRGF0YT4sIGtleTpzdHJpbmcpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlbGYuaXNUYXJnZXQoa2V5LCB0YXJnZXQsIGxpc3QpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZihhcmdzLmxlbmd0aCA9PT0gMil7XG4gICAgICAgICAgICAgICAgbGV0IHRhcmdldCA9IGFyZ3NbMF0sXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50TmFtZSA9IGFyZ3NbMV07XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5saXN0ZW5lck1hcC5nZXRDaGlsZCh0aGlzLmJ1aWxkS2V5KHRhcmdldCwgZXZlbnROYW1lKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgcmVtb3ZlQ2hpbGQoZXZlbnROYW1lOkV2ZW50TmFtZSk6dm9pZDtcbiAgICAgICAgcHVibGljIHJlbW92ZUNoaWxkKHRhcmdldDpFbnRpdHlPYmplY3QpOnZvaWQ7XG5cbiAgICAgICAgcHVibGljIHJlbW92ZUNoaWxkKGV2ZW50TmFtZTpFdmVudE5hbWUsIGhhbmRsZXI6RnVuY3Rpb24pOnZvaWQ7XG4gICAgICAgIHB1YmxpYyByZW1vdmVDaGlsZCh1aWQ6bnVtYmVyLCBldmVudE5hbWU6RXZlbnROYW1lKTp2b2lkO1xuICAgICAgICBwdWJsaWMgcmVtb3ZlQ2hpbGQodGFyZ2V0OkVudGl0eU9iamVjdCwgZXZlbnROYW1lOkV2ZW50TmFtZSk6dm9pZDtcblxuICAgICAgICBwdWJsaWMgcmVtb3ZlQ2hpbGQodGFyZ2V0OkVudGl0eU9iamVjdCwgZXZlbnROYW1lOkV2ZW50TmFtZSwgaGFuZGxlcjpGdW5jdGlvbik6dm9pZDtcblxuXG4gICAgICAgIHB1YmxpYyByZW1vdmVDaGlsZCguLi5hcmdzKTp2b2lke1xuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgICAgICAgICBpZihhcmdzLmxlbmd0aCA9PT0gMSAmJiBKdWRnZVV0aWxzLmlzU3RyaW5nKGFyZ3NbMF0pKXtcbiAgICAgICAgICAgICAgICBsZXQgZXZlbnROYW1lID0gYXJnc1swXTtcblxuICAgICAgICAgICAgICAgIHRoaXMubGlzdGVuZXJNYXAucmVtb3ZlQ2hpbGQoKGxpc3Q6d2RDYi5Db2xsZWN0aW9uPEN1c3RvbUV2ZW50UmVnaXN0ZXJEYXRhPiwga2V5OnN0cmluZykgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2VsZi5pc0V2ZW50TmFtZShrZXksIGV2ZW50TmFtZSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmKGFyZ3MubGVuZ3RoID09PSAxICYmIGFyZ3NbMF0gaW5zdGFuY2VvZiBFbnRpdHlPYmplY3Qpe1xuICAgICAgICAgICAgICAgIGxldCB0YXJnZXQgPSBhcmdzWzBdO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5saXN0ZW5lck1hcC5yZW1vdmVDaGlsZCgobGlzdDp3ZENiLkNvbGxlY3Rpb248Q3VzdG9tRXZlbnRSZWdpc3RlckRhdGE+LCBrZXk6c3RyaW5nKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzZWxmLmlzVGFyZ2V0KGtleSwgdGFyZ2V0LCBsaXN0KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYoYXJncy5sZW5ndGggPT09IDIgJiYgSnVkZ2VVdGlscy5pc1N0cmluZyhhcmdzWzBdKSl7XG4gICAgICAgICAgICAgICAgbGV0IGV2ZW50TmFtZSA9IGFyZ3NbMF0sXG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZXIgPSBhcmdzWzFdLFxuICAgICAgICAgICAgICAgICAgICBsaXN0OndkQ2IuQ29sbGVjdGlvbjxDdXN0b21FdmVudFJlZ2lzdGVyRGF0YT4gPSBudWxsO1xuXG5cbiAgICAgICAgICAgICAgICBpZih0aGlzLmxpc3RlbmVyTWFwLmhhc0NoaWxkKGV2ZW50TmFtZSkpe1xuICAgICAgICAgICAgICAgICAgICBsaXN0ID0gdGhpcy5saXN0ZW5lck1hcC5nZXRDaGlsZChldmVudE5hbWUpO1xuXG4gICAgICAgICAgICAgICAgICAgIHdkQ2IuQ29sbGVjdGlvbi5jcmVhdGUoKS5hZGRDaGlsZChsaXN0LnJlbW92ZUNoaWxkKCh2YWw6Q3VzdG9tRXZlbnRSZWdpc3RlckRhdGEpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWwub3JpZ2luSGFuZGxlciA9PT0gaGFuZGxlcjtcbiAgICAgICAgICAgICAgICAgICAgfSkpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmKGxpc3QuZ2V0Q291bnQoKSA9PT0gMCl7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxpc3RlbmVyTWFwLnJlbW92ZUNoaWxkKGV2ZW50TmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmKGFyZ3MubGVuZ3RoID09PSAyICYmIEp1ZGdlVXRpbHMuaXNOdW1iZXIoYXJnc1swXSkpe1xuICAgICAgICAgICAgICAgIGxldCB1aWQgPSBhcmdzWzBdLFxuICAgICAgICAgICAgICAgICAgICBldmVudE5hbWUgPSBhcmdzWzFdO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5saXN0ZW5lck1hcC5yZW1vdmVDaGlsZCh0aGlzLmJ1aWxkS2V5KHVpZCwgZXZlbnROYW1lKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmKGFyZ3MubGVuZ3RoID09PSAyICYmIGFyZ3NbMF0gaW5zdGFuY2VvZiBFbnRpdHlPYmplY3Qpe1xuICAgICAgICAgICAgICAgIGxldCB0YXJnZXQgPSBhcmdzWzBdLFxuICAgICAgICAgICAgICAgIGV2ZW50TmFtZSA9IGFyZ3NbMV07XG5cbiAgICAgICAgICAgICAgICB0aGlzLmxpc3RlbmVyTWFwLnJlbW92ZUNoaWxkKHRoaXMuYnVpbGRLZXkodGFyZ2V0LCBldmVudE5hbWUpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYoYXJncy5sZW5ndGggPT09IDMgJiYgYXJnc1swXSBpbnN0YW5jZW9mIEVudGl0eU9iamVjdCl7XG4gICAgICAgICAgICAgICAgbGV0IGV2ZW50TmFtZSA9IGFyZ3NbMV0sXG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZXIgPSBhcmdzWzJdO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5saXN0ZW5lck1hcC5mb3JFYWNoKChsaXN0OndkQ2IuQ29sbGVjdGlvbjxDdXN0b21FdmVudFJlZ2lzdGVyRGF0YT4sIGtleTpzdHJpbmcpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgbGlzdC5yZW1vdmVDaGlsZCgodmFsOkN1c3RvbUV2ZW50UmVnaXN0ZXJEYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsLm9yaWdpbkhhbmRsZXIgPT09IGhhbmRsZXI7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmKGxpc3QuZ2V0Q291bnQoKSA9PT0gMCl7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gd2RDYi4kUkVNT1ZFO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgZ2V0VWlkRnJvbUtleShrZXk6c3RyaW5nKTpudW1iZXJ7XG4gICAgICAgICAgICB2YXIgc2VwYXJhdG9yID0gYCR7Q3VzdG9tRXZlbnRMaXN0ZW5lck1hcC5ldmVudFNlcGFyYXRvcn1gO1xuXG4gICAgICAgICAgICByZXR1cm4ga2V5LmluZGV4T2Yoc2VwYXJhdG9yKSA+IC0xID8gTnVtYmVyKDxhbnk+a2V5LnNwbGl0KHNlcGFyYXRvcilbMF0pIDogbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBpc1RhcmdldChrZXk6c3RyaW5nLCB0YXJnZXQ6RW50aXR5T2JqZWN0LCBsaXN0OndkQ2IuQ29sbGVjdGlvbjxDdXN0b21FdmVudFJlZ2lzdGVyRGF0YT4pe1xuICAgICAgICAgICAgcmV0dXJuIGtleS5pbmRleE9mKHRoaXMuX2J1aWxkS2V5UHJlZml4KHRhcmdldC51aWQpKSA+IC0xICYmIGxpc3QgIT09IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHByb3RlY3RlZCBnZXRFdmVudFNlcGFyYXRvcigpOnN0cmluZ3tcbiAgICAgICAgICAgIHJldHVybiBgJHtDdXN0b21FdmVudExpc3RlbmVyTWFwLmV2ZW50U2VwYXJhdG9yfWA7XG4gICAgICAgIH1cblxuICAgICAgICBwcm90ZWN0ZWQgYnVpbGRLZXkodWlkOm51bWJlciwgZXZlbnROYW1lOkV2ZW50TmFtZSk6c3RyaW5nO1xuICAgICAgICBwcm90ZWN0ZWQgYnVpbGRLZXkodGFyZ2V0OkVudGl0eU9iamVjdCwgZXZlbnROYW1lOkV2ZW50TmFtZSk6c3RyaW5nO1xuXG4gICAgICAgIHByb3RlY3RlZCBidWlsZEtleSguLi5hcmdzKTpzdHJpbmd7XG4gICAgICAgICAgICBpZihKdWRnZVV0aWxzLmlzTnVtYmVyKGFyZ3NbMF0pKXtcbiAgICAgICAgICAgICAgICBsZXQgdWlkID0gYXJnc1swXSxcbiAgICAgICAgICAgICAgICAgICAgZXZlbnROYW1lID0gYXJnc1sxXTtcblxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9idWlsZEtleVdpdGhVaWQodWlkLCBldmVudE5hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZihhcmdzWzBdIGluc3RhbmNlb2YgRW50aXR5T2JqZWN0KXtcbiAgICAgICAgICAgICAgICBsZXQgdGFyZ2V0ID0gYXJnc1swXSxcbiAgICAgICAgICAgICAgICAgICAgZXZlbnROYW1lID0gYXJnc1sxXTtcblxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9idWlsZEtleVdpdGhVaWQodGFyZ2V0LnVpZCwgZXZlbnROYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYoYXJnc1swXSA9PT0gbnVsbCl7XG4gICAgICAgICAgICAgICAgbGV0IGV2ZW50TmFtZSA9IGFyZ3NbMV07XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gZXZlbnROYW1lO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfYnVpbGRLZXlXaXRoVWlkKHVpZDpudW1iZXIsIGV2ZW50TmFtZTpFdmVudE5hbWUpe1xuICAgICAgICAgICAgcmV0dXJuIGAke3RoaXMuX2J1aWxkS2V5UHJlZml4KHVpZCl9JHtDdXN0b21FdmVudExpc3RlbmVyTWFwLmV2ZW50U2VwYXJhdG9yfSR7ZXZlbnROYW1lfWA7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9idWlsZEtleVByZWZpeCh1aWQ6bnVtYmVyKXtcbiAgICAgICAgICAgIHJldHVybiBgJHtTdHJpbmcodWlkKX1gO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwibW9kdWxlIHdke1xuICAgIGV4cG9ydCBjbGFzcyBEb21FdmVudExpc3RlbmVyTWFwIGV4dGVuZHMgRXZlbnRMaXN0ZW5lck1hcHtcbiAgICAgICAgcHVibGljIHN0YXRpYyBldmVudFNlcGFyYXRvciA9IFwiQFwiO1xuXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlKCkge1xuICAgICAgICBcdHZhciBvYmogPSBuZXcgdGhpcygpO1xuXG4gICAgICAgIFx0cmV0dXJuIG9iajtcbiAgICAgICAgfVxuXG4gICAgICAgIHByb3RlY3RlZCBsaXN0ZW5lck1hcDp3ZENiLkhhc2g8d2RDYi5Db2xsZWN0aW9uPERvbUV2ZW50UmVnaXN0ZXJEYXRhPj47XG5cbiAgICAgICAgcHVibGljIGdldENoaWxkKGV2ZW50TmFtZTpFdmVudE5hbWUpOndkQ2IuQ29sbGVjdGlvbjxEb21FdmVudFJlZ2lzdGVyRGF0YT47XG4gICAgICAgIHB1YmxpYyBnZXRDaGlsZChkb206SFRNTEVsZW1lbnQsIGV2ZW50TmFtZTpFdmVudE5hbWUpOndkQ2IuQ29sbGVjdGlvbjxEb21FdmVudFJlZ2lzdGVyRGF0YT47XG5cbiAgICAgICAgcHVibGljIGdldENoaWxkKC4uLmFyZ3MpOmFueXtcbiAgICAgICAgICAgIGlmKGFyZ3MubGVuZ3RoID09PSAxKXtcbiAgICAgICAgICAgICAgICBsZXQgZXZlbnROYW1lID0gYXJnc1swXTtcblxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmxpc3RlbmVyTWFwLmdldENoaWxkKGV2ZW50TmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmKGFyZ3MubGVuZ3RoID09PSAyKXtcbiAgICAgICAgICAgICAgICBsZXQgZG9tID0gYXJnc1swXSxcbiAgICAgICAgICAgICAgICAgICAgZXZlbnROYW1lID0gYXJnc1sxXTtcblxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmxpc3RlbmVyTWFwLmdldENoaWxkKHRoaXMuYnVpbGRLZXkoZG9tLCBldmVudE5hbWUpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyByZW1vdmVDaGlsZChldmVudE5hbWU6RXZlbnROYW1lKTp3ZENiLkNvbGxlY3Rpb248d2RDYi5Db2xsZWN0aW9uPERvbUV2ZW50T2ZmRGF0YT4+O1xuXG4gICAgICAgIHB1YmxpYyByZW1vdmVDaGlsZChldmVudE5hbWU6RXZlbnROYW1lLCBoYW5kbGVyOkZ1bmN0aW9uKTp3ZENiLkNvbGxlY3Rpb248d2RDYi5Db2xsZWN0aW9uPERvbUV2ZW50T2ZmRGF0YT4+O1xuICAgICAgICBwdWJsaWMgcmVtb3ZlQ2hpbGQoZG9tOkhUTUxFbGVtZW50LCBldmVudE5hbWU6RXZlbnROYW1lKTp3ZENiLkNvbGxlY3Rpb248d2RDYi5Db2xsZWN0aW9uPERvbUV2ZW50T2ZmRGF0YT4+O1xuXG4gICAgICAgIHB1YmxpYyByZW1vdmVDaGlsZChkb206SFRNTEVsZW1lbnQsIGV2ZW50TmFtZTpFdmVudE5hbWUsIGhhbmRsZXI6RnVuY3Rpb24pOndkQ2IuQ29sbGVjdGlvbjx3ZENiLkNvbGxlY3Rpb248RG9tRXZlbnRPZmZEYXRhPj47XG5cblxuICAgICAgICBwdWJsaWMgcmVtb3ZlQ2hpbGQoLi4uYXJncyk6d2RDYi5Db2xsZWN0aW9uPHdkQ2IuQ29sbGVjdGlvbjxEb21FdmVudE9mZkRhdGE+PntcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcyxcbiAgICAgICAgICAgICAgICByZXN1bHQ6YW55ID0gbnVsbDtcblxuICAgICAgICAgICAgaWYoYXJncy5sZW5ndGggPT09IDEgJiYgSnVkZ2VVdGlscy5pc1N0cmluZyhhcmdzWzBdKSl7XG4gICAgICAgICAgICAgICAgbGV0IGV2ZW50TmFtZSA9IGFyZ3NbMF07XG5cbiAgICAgICAgICAgICAgICByZXN1bHQgPXRoaXMuX2dldEV2ZW50RGF0YU9mZkRhdGFMaXN0KGV2ZW50TmFtZSwgdGhpcy5saXN0ZW5lck1hcC5yZW1vdmVDaGlsZCgobGlzdDp3ZENiLkNvbGxlY3Rpb248RG9tRXZlbnRSZWdpc3RlckRhdGE+LCBrZXk6c3RyaW5nKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzZWxmLmlzRXZlbnROYW1lKGtleSwgZXZlbnROYW1lKTtcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmKGFyZ3MubGVuZ3RoID09PSAyICYmIEp1ZGdlVXRpbHMuaXNTdHJpbmcoYXJnc1swXSkpe1xuICAgICAgICAgICAgICAgIGxldCBldmVudE5hbWUgPSBhcmdzWzBdLFxuICAgICAgICAgICAgICAgICAgICBoYW5kbGVyID0gYXJnc1sxXSxcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0TGlzdCA9IHdkQ2IuQ29sbGVjdGlvbi5jcmVhdGUoKTtcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLmxpc3RlbmVyTWFwLmZvckVhY2goKGxpc3Q6d2RDYi5Db2xsZWN0aW9uPERvbUV2ZW50UmVnaXN0ZXJEYXRhPiwga2V5OnN0cmluZykgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYoc2VsZi5pc0V2ZW50TmFtZShrZXksIGV2ZW50TmFtZSkpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCByZXN1bHQgPSBsaXN0LnJlbW92ZUNoaWxkKCh2YWw6RG9tRXZlbnRSZWdpc3RlckRhdGEpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbC5vcmlnaW5IYW5kbGVyID09PSBoYW5kbGVyO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYocmVzdWx0LmdldENvdW50KCkgPiAwKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0TGlzdC5hZGRDaGlsZChyZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGxpc3QuZ2V0Q291bnQoKSA9PT0gMCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB3ZENiLiRSRU1PVkU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSB0aGlzLl9nZXRFdmVudERhdGFPZmZEYXRhTGlzdChldmVudE5hbWUsIHJlc3VsdExpc3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZihhcmdzLmxlbmd0aCA9PT0gMiAmJiBKdWRnZVV0aWxzLmlzRG9tKGFyZ3NbMF0pKXtcbiAgICAgICAgICAgICAgICBsZXQgZG9tID0gYXJnc1swXSxcbiAgICAgICAgICAgICAgICAgICAgZXZlbnROYW1lID0gYXJnc1sxXTtcblxuXG4gICAgICAgICAgICAgICAgcmVzdWx0ID10aGlzLl9nZXRFdmVudERhdGFPZmZEYXRhTGlzdChldmVudE5hbWUsIHRoaXMubGlzdGVuZXJNYXAucmVtb3ZlQ2hpbGQodGhpcy5idWlsZEtleShkb20sIGV2ZW50TmFtZSkpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYoYXJncy5sZW5ndGggPT09IDMgJiYgSnVkZ2VVdGlscy5pc0RvbShhcmdzWzBdKSl7XG4gICAgICAgICAgICAgICAgbGV0IGV2ZW50TmFtZSA9IGFyZ3NbMV0sXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdExpc3QgPSB3ZENiLkNvbGxlY3Rpb24uY3JlYXRlKCksXG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZXIgPSBhcmdzWzJdO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5saXN0ZW5lck1hcC5mb3JFYWNoKChsaXN0OndkQ2IuQ29sbGVjdGlvbjxEb21FdmVudFJlZ2lzdGVyRGF0YT4sIGtleTpzdHJpbmcpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJlc3VsdCA9IGxpc3QucmVtb3ZlQ2hpbGQoKHZhbDpEb21FdmVudFJlZ2lzdGVyRGF0YSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbC5vcmlnaW5IYW5kbGVyID09PSBoYW5kbGVyO1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICBpZihyZXN1bHQuZ2V0Q291bnQoKSA+IDApe1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0TGlzdC5hZGRDaGlsZChyZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYobGlzdC5nZXRDb3VudCgpID09PSAwKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB3ZENiLiRSRU1PVkU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMuX2dldEV2ZW50RGF0YU9mZkRhdGFMaXN0KGV2ZW50TmFtZSwgcmVzdWx0TGlzdCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgaXNEb20oa2V5OnN0cmluZywgZG9tOkhUTUxFbGVtZW50LCBsaXN0OndkQ2IuQ29sbGVjdGlvbjxEb21FdmVudFJlZ2lzdGVyRGF0YT4pe1xuICAgICAgICAgICAgcmV0dXJuIGtleS5pbmRleE9mKHRoaXMuX2J1aWxkS2V5UHJlZml4KGRvbSkpID4gLTEgJiYgbGlzdCAhPT0gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJvdGVjdGVkIGdldEV2ZW50U2VwYXJhdG9yKCk6c3RyaW5ne1xuICAgICAgICAgICAgcmV0dXJuIGAke0RvbUV2ZW50TGlzdGVuZXJNYXAuZXZlbnRTZXBhcmF0b3J9YDtcbiAgICAgICAgfVxuXG4gICAgICAgIHByb3RlY3RlZCBidWlsZEtleShkb206SFRNTEVsZW1lbnQsIGV2ZW50TmFtZTpFdmVudE5hbWUpOnN0cmluZ3tcbiAgICAgICAgICAgIHJldHVybiBgJHt0aGlzLl9idWlsZEtleVByZWZpeChkb20pfSR7RG9tRXZlbnRMaXN0ZW5lck1hcC5ldmVudFNlcGFyYXRvcn0ke2V2ZW50TmFtZX1gO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfYnVpbGRLZXlQcmVmaXgoZG9tOkhUTUxFbGVtZW50KXtcbiAgICAgICAgICAgIHJldHVybiBkb20uaWQgPyBgJHtkb20udGFnTmFtZX0ke2RvbS5pZH1gIDogYCR7ZG9tLnRhZ05hbWV9YDtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX2dldEV2ZW50RGF0YU9mZkRhdGFMaXN0KGV2ZW50TmFtZTpzdHJpbmcsIHJlc3VsdDphbnkpOmFueXtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQubWFwKChsaXN0OndkQ2IuQ29sbGVjdGlvbjxhbnk+KSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxpc3QubWFwKChkYXRhOkRvbUV2ZW50UmVnaXN0ZXJEYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkb206IGRhdGEuZG9tLFxuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnROYW1lOiBldmVudE5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBkb21IYW5kbGVyOiBkYXRhLmRvbUhhbmRsZXJcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBleHBvcnQgdHlwZSBEb21FdmVudE9mZkRhdGEgPSB7XG4gICAgICAgIGRvbTpIVE1MRWxlbWVudCxcbiAgICAgICAgZXZlbnROYW1lOkV2ZW50TmFtZSxcbiAgICAgICAgZG9tSGFuZGxlcjpGdW5jdGlvblxuICAgIH1cbn1cbiIsIm1vZHVsZSB3ZCB7XG4gICAgZXhwb3J0IGVudW0gRXZlbnRUeXBle1xuICAgICAgICBNT1VTRSxcbiAgICAgICAgS0VZQk9BUkQsXG4gICAgICAgIENVU1RPTVxuICAgIH1cbn1cbiIsIm1vZHVsZSB3ZHtcbiAgICBlbnVtIEJyb3dzZXJJZGVudGlmaWVye1xuICAgICAgICBGQUxMQkFDSyA9IDxhbnk+XCJmYWxsYmFja1wiLFxuICAgICAgICBGSVJFRk9YID0gPGFueT5cImZpcmVmb3hcIixcbiAgICAgICAgQ0hST01FID0gPGFueT5cImNocm9tZVwiXG4gICAgfVxuXG4gICAgZXhwb3J0IGVudW0gRXZlbnROYW1le1xuICAgICAgICBDTElDSyA9IDxhbnk+XCJjbGlja1wiLFxuICAgICAgICBNT1VTRU9WRVIgPSA8YW55PlwibW91c2VvdmVyXCIsXG4gICAgICAgIE1PVVNFVVAgPSA8YW55PlwibW91c2V1cFwiLFxuICAgICAgICBNT1VTRU9VVCA9IDxhbnk+XCJtb3VzZW91dFwiLFxuICAgICAgICBNT1VTRU1PVkUgPSA8YW55PlwibW91c2Vtb3ZlXCIsXG4gICAgICAgIE1PVVNFRE9XTiA9IDxhbnk+XCJtb3VzZWRvd25cIixcbiAgICAgICAgTU9VU0VXSEVFTCA9IDxhbnk+YG1vdXNld2hlZWx8RE9NTW91c2VTY3JvbGwqJHtCcm93c2VySWRlbnRpZmllci5GSVJFRk9YfWAsXG4gICAgICAgIE1PVVNFRFJBRyA9IDxhbnk+XCJtb3VzZWRyYWdcIixcblxuICAgICAgICBLRVlET1dOID0gPGFueT5cImtleWRvd25cIixcbiAgICAgICAgS0VZVVAgPSA8YW55Plwia2V5dXBcIixcbiAgICAgICAgS0VZUFJFU1MgPSA8YW55Plwia2V5cHJlc3NcIlxuICAgIH1cblxuICAgIGNvbnN0IEVWRU5UTkFNRV9TUExJVFRFUiA9ICd8JyxcbiAgICAgICAgQlJPV1NFUl9JREVOVElGSUVSID0gJyonO1xuXG4gICAgZXhwb3J0IGNsYXNzIEV2ZW50TmFtZUhhbmRsZXJ7XG4gICAgICAgIHB1YmxpYyBzdGF0aWMgaGFuZGxlRXZlbnROYW1lKGRvbUV2ZW50TmFtZTpFdmVudE5hbWUpe1xuICAgICAgICAgICAgdmFyIGV2ZW50TmFtZTpzdHJpbmcgPSA8YW55PmRvbUV2ZW50TmFtZSxcbiAgICAgICAgICAgICAgICBmYWxsYmFja0V2ZW50TmFtZSA9IG51bGwsXG4gICAgICAgICAgICAgICAgc3BlY2lmeUJyb3dzZXJFdmVudE5hbWVBcnIgPSBbXSxcbiAgICAgICAgICAgICAgICByZXN1bHQ6c3RyaW5nID0gbnVsbDtcblxuICAgICAgICAgICAgZm9yIChsZXQgbmFtZSBvZiBldmVudE5hbWUuc3BsaXQoRVZFTlROQU1FX1NQTElUVEVSKSl7XG5cbiAgICAgICAgICAgICAgICBpZih0aGlzLl9pc0ZhbGxiYWNrRXZlbnROYW1lKG5hbWUpKXtcbiAgICAgICAgICAgICAgICAgICAgZmFsbGJhY2tFdmVudE5hbWUgPSBuYW1lO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgICAgICBzcGVjaWZ5QnJvd3NlckV2ZW50TmFtZUFyci5wdXNoKG5hbWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy5fZ2V0U3BlY2lmeUJyb3dzZXJFdmVudE5hbWUoc3BlY2lmeUJyb3dzZXJFdmVudE5hbWVBcnIpO1xuXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0ICE9PSBudWxsID8gcmVzdWx0IDogZmFsbGJhY2tFdmVudE5hbWU7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIHN0YXRpYyBfaXNGYWxsYmFja0V2ZW50TmFtZShldmVudE5hbWU6c3RyaW5nKXtcbiAgICAgICAgICAgIHJldHVybiBldmVudE5hbWUuc3BsaXQoQlJPV1NFUl9JREVOVElGSUVSKS5sZW5ndGggPT09IDE7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIHN0YXRpYyBfZ2V0U3BlY2lmeUJyb3dzZXJFdmVudE5hbWUoc3BlY2lmeUJyb3dzZXJFdmVudE5hbWVBcnI6QXJyYXk8c3RyaW5nPil7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gbnVsbDtcblxuICAgICAgICAgICAgZm9yKGxldCBldmVudE5hbWUgb2Ygc3BlY2lmeUJyb3dzZXJFdmVudE5hbWVBcnIpe1xuICAgICAgICAgICAgICAgIGxldCBbZG9tRXZlbnROYW1lLCBicm93c2VySWRlbnRpZmllcl0gPSBldmVudE5hbWUuc3BsaXQoQlJPV1NFUl9JREVOVElGSUVSKTtcblxuICAgICAgICAgICAgICAgIHN3aXRjaCAoPGFueT5icm93c2VySWRlbnRpZmllcil7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgQnJvd3NlcklkZW50aWZpZXIuQ0hST01FOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoYm93c2VyLmNocm9tZSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gZG9tRXZlbnROYW1lO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgQnJvd3NlcklkZW50aWZpZXIuRklSRUZPWDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGJvd3Nlci5maXJlZm94KXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBkb21FdmVudE5hbWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vdG9kbyBqdWRnZSBJRVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYocmVzdWx0KXtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgfVxufVxuXG4iLCJtb2R1bGUgd2R7XG4gICAgZXhwb3J0IGVudW0gRXZlbnRQaGFzZXtcbiAgICAgICAgQlJPQURDQVNULFxuICAgICAgICBFTUlUXG4gICAgfVxufVxuIiwiLy90b2RvIGFkZCBtb3JlIGV2ZW50IHR5cGVcbm1vZHVsZSB3ZCB7XG4gICAgIGNvbnN0IF90YWJsZSA9IHdkQ2IuSGFzaC5jcmVhdGU8RXZlbnRUeXBlPigpO1xuXG4gICAgLy90b2RvIG5vdCBkZWNsYXJlIFwiPGFueT5cIiFcbiAgICBfdGFibGUuYWRkQ2hpbGQoPGFueT5FdmVudE5hbWUuQ0xJQ0ssIEV2ZW50VHlwZS5NT1VTRSk7XG4gICAgX3RhYmxlLmFkZENoaWxkKDxhbnk+RXZlbnROYW1lLk1PVVNFT1ZFUiwgRXZlbnRUeXBlLk1PVVNFKTtcbiAgICBfdGFibGUuYWRkQ2hpbGQoPGFueT5FdmVudE5hbWUuTU9VU0VPVVQsIEV2ZW50VHlwZS5NT1VTRSk7XG4gICAgX3RhYmxlLmFkZENoaWxkKDxhbnk+RXZlbnROYW1lLk1PVVNFTU9WRSwgRXZlbnRUeXBlLk1PVVNFKTtcbiAgICBfdGFibGUuYWRkQ2hpbGQoPGFueT5FdmVudE5hbWUuTU9VU0VET1dOLCBFdmVudFR5cGUuTU9VU0UpO1xuICAgIF90YWJsZS5hZGRDaGlsZCg8YW55PkV2ZW50TmFtZS5NT1VTRVVQLCBFdmVudFR5cGUuTU9VU0UpO1xuICAgIF90YWJsZS5hZGRDaGlsZCg8YW55PkV2ZW50TmFtZS5NT1VTRVdIRUVMLCBFdmVudFR5cGUuTU9VU0UpO1xuICAgIF90YWJsZS5hZGRDaGlsZCg8YW55PkV2ZW50TmFtZS5NT1VTRURSQUcsIEV2ZW50VHlwZS5NT1VTRSk7XG5cbiAgICBfdGFibGUuYWRkQ2hpbGQoPGFueT5FdmVudE5hbWUuS0VZRE9XTiwgRXZlbnRUeXBlLktFWUJPQVJEKTtcbiAgICBfdGFibGUuYWRkQ2hpbGQoPGFueT5FdmVudE5hbWUuS0VZUFJFU1MsIEV2ZW50VHlwZS5LRVlCT0FSRCk7XG4gICAgX3RhYmxlLmFkZENoaWxkKDxhbnk+RXZlbnROYW1lLktFWVVQLCBFdmVudFR5cGUuS0VZQk9BUkQpO1xuXG4gICAgZXhwb3J0IGNsYXNzIEV2ZW50VGFibGUge1xuICAgICAgICBwdWJsaWMgc3RhdGljIGdldEV2ZW50VHlwZShldmVudE5hbWU6RXZlbnROYW1lKTpFdmVudFR5cGUge1xuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IF90YWJsZS5nZXRDaGlsZCg8YW55PmV2ZW50TmFtZSk7XG5cbiAgICAgICAgICAgIGlmKHJlc3VsdCA9PT0gdm9pZCAwKXtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBFdmVudFR5cGUuQ1VTVE9NO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgfVxufVxuIiwibW9kdWxlIHdke1xuICAgIGV4cG9ydCBhYnN0cmFjdCBjbGFzcyBFdmVudHtcbiAgICAgICAgY29uc3RydWN0b3IoZXZlbnROYW1lOkV2ZW50TmFtZSkge1xuICAgICAgICAgICAgdGhpcy5uYW1lID0gZXZlbnROYW1lO1xuICAgICAgICB9XG5cblxuICAgICAgICBwcm90ZWN0ZWQgcF90eXBlOkV2ZW50VHlwZSA9IG51bGw7XG4gICAgICAgIGdldCB0eXBlKCl7XG4gICAgICAgICAgICBMb2cuZXJyb3IodGhpcy5wX3R5cGUgPT09IG51bGwsIExvZy5pbmZvLkFCU1RSQUNUX0FUVFJJQlVURSk7XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzLnBfdHlwZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBuYW1lOkV2ZW50TmFtZSA9IG51bGw7XG4gICAgICAgIC8vdGFyZ2V0IGlzIHRoZSBhY3R1YWwgdGFyZ2V0IHRoYXQgcmVjZWl2ZWQgdGhlIGV2ZW50LlxuICAgICAgICBwdWJsaWMgdGFyZ2V0OkhUTUxFbGVtZW50fEVudGl0eU9iamVjdDtcbiAgICAgICAgLy9jdXJyZW50VGFyZ2V0IGlzIGFsd2F5cyB0aGUgb2JqZWN0IGxpc3RlbmluZyBmb3IgdGhlIGV2ZW50XG4gICAgICAgIHB1YmxpYyBjdXJyZW50VGFyZ2V0OkhUTUxFbGVtZW50fEVudGl0eU9iamVjdCA9IG51bGw7XG4gICAgICAgIHB1YmxpYyBpc1N0b3BQcm9wYWdhdGlvbjpib29sZWFuID0gZmFsc2U7XG4gICAgICAgIHB1YmxpYyBwaGFzZTpFdmVudFBoYXNlID0gbnVsbDtcblxuICAgICAgICBwdWJsaWMgYWJzdHJhY3QgY29weSgpO1xuXG4gICAgICAgIHB1YmxpYyBzdG9wUHJvcGFnYXRpb24oKSB7XG4gICAgICAgICAgICB0aGlzLmlzU3RvcFByb3BhZ2F0aW9uID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByb3RlY3RlZCBjb3B5TWVtYmVyKGRlc3RpbmF0aW9uOkV2ZW50LCBzb3VyY2U6RXZlbnQsIG1lbWJlckFycjpbYW55XSl7XG4gICAgICAgICAgICBtZW1iZXJBcnIuZm9yRWFjaCgobWVtYmVyKSA9PiB7XG4gICAgICAgICAgICAgICAgZGVzdGluYXRpb25bbWVtYmVyXSA9IHNvdXJjZVttZW1iZXJdO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHJldHVybiBkZXN0aW5hdGlvbjtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsIm1vZHVsZSB3ZCB7XG4gICAgZXhwb3J0IGFic3RyYWN0IGNsYXNzIERvbUV2ZW50IGV4dGVuZHMgRXZlbnR7XG4gICAgICAgIGNvbnN0cnVjdG9yKGV2ZW50OmFueSwgZXZlbnROYW1lOkV2ZW50TmFtZSkge1xuICAgICAgICAgICAgc3VwZXIoZXZlbnROYW1lKTtcblxuICAgICAgICAgICAgdGhpcy5ldmVudCA9IGV2ZW50O1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfZXZlbnQ6YW55ID0gbnVsbDtcbiAgICAgICAgZ2V0IGV2ZW50KCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2V2ZW50O1xuICAgICAgICB9XG4gICAgICAgIHNldCBldmVudChldmVudDphbnkpIHtcbiAgICAgICAgICAgIHRoaXMuX2V2ZW50ID0gZXZlbnQgfHwgcm9vdC5ldmVudDtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBwcmV2ZW50RGVmYXVsdCgpe1xuICAgICAgICAgICAgdmFyIGUgPSB0aGlzLl9ldmVudDtcblxuICAgICAgICAgICAgaWYgKGJvd3Nlci5tc2llICYmIE51bWJlcihib3dzZXIudmVyc2lvbikgPD0gOCkge1xuICAgICAgICAgICAgICAgIGUucmV0dXJuVmFsdWUgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBnZXREYXRhRnJvbUN1c3RvbUV2ZW50KGV2ZW50OkN1c3RvbUV2ZW50KXtcbiAgICAgICAgICAgIHRoaXMudGFyZ2V0ID0gZXZlbnQudGFyZ2V0O1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50VGFyZ2V0ID0gZXZlbnQuY3VycmVudFRhcmdldDtcbiAgICAgICAgICAgIHRoaXMuaXNTdG9wUHJvcGFnYXRpb24gPSBldmVudC5pc1N0b3BQcm9wYWdhdGlvbjtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuIiwibW9kdWxlIHdkIHtcbiAgICBkZWNsYXJlIHZhciBkb2N1bWVudDphbnk7XG5cbiAgICBleHBvcnQgY2xhc3MgTW91c2VFdmVudCBleHRlbmRzIERvbUV2ZW50e1xuICAgICAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZShldmVudDphbnksIGV2ZW50TmFtZTpFdmVudE5hbWUpIHtcbiAgICAgICAgICAgIHZhciBvYmogPSBuZXcgdGhpcyhldmVudCwgZXZlbnROYW1lKTtcblxuICAgICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX2xvY2F0aW9uOlBvaW50ID0gbnVsbDtcbiAgICAgICAgLy9HZXQgY3Vyc29yIGxvY2F0aW9uKHJlbGF0ZWQgdG8gZG9jdW1lbnQpXG4gICAgICAgIGdldCBsb2NhdGlvbigpOlBvaW50IHtcbiAgICAgICAgICAgIHZhciBwb2ludDpQb2ludCA9IG51bGwsXG4gICAgICAgICAgICAgICAgZSA9IHRoaXMuZXZlbnQ7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLl9sb2NhdGlvbikge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9sb2NhdGlvbjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcG9pbnQgPSBQb2ludC5jcmVhdGUoKTtcblxuICAgICAgICAgICAgaWYgKGJvd3Nlci5tc2llKSB7XG4gICAgICAgICAgICAgICAgcG9pbnQueCA9IGUuY2xpZW50WCArIGRvY3VtZW50LmJvZHkuc2Nyb2xsTGVmdCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsTGVmdDtcbiAgICAgICAgICAgICAgICBwb2ludC55ID0gZS5jbGllbnRZICsgZG9jdW1lbnQuYm9keS5zY3JvbGxUb3AgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHBvaW50LnggPSBlLnBhZ2VYO1xuICAgICAgICAgICAgICAgIHBvaW50LnkgPSBlLnBhZ2VZO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gcG9pbnQ7XG4gICAgICAgIH1cbiAgICAgICAgc2V0IGxvY2F0aW9uKHBvaW50OlBvaW50KSB7XG4gICAgICAgICAgICB0aGlzLl9sb2NhdGlvbiA9IHBvaW50O1xuICAgICAgICB9XG5cblxuICAgICAgICBwcml2YXRlIF9sb2NhdGlvbkluVmlldzpQb2ludCA9IG51bGw7XG4gICAgICAgIC8vUmV0dXJucyB0aGUgY3VycmVudCBjdXJzb3IgbG9jYXRpb24gaW4gc2NyZWVuIGNvb3JkaW5hdGVzKHJlbGF0ZWQgdG8gY2FudmFzKVxuICAgICAgICBnZXQgbG9jYXRpb25JblZpZXcoKTpQb2ludCB7XG4gICAgICAgICAgICB2YXIgcG9pbnQ6UG9pbnQgPSBudWxsLFxuICAgICAgICAgICAgICAgIHZpZXdPZmZzZXQ6YW55ID0gbnVsbDtcblxuICAgICAgICAgICAgaWYgKHRoaXMuX2xvY2F0aW9uSW5WaWV3KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2xvY2F0aW9uSW5WaWV3O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBwb2ludCA9IHRoaXMubG9jYXRpb247XG5cblxuICAgICAgICAgICAgdmlld09mZnNldCA9IERldmljZU1hbmFnZXIuZ2V0SW5zdGFuY2UoKS52aWV3Lm9mZnNldDtcblxuICAgICAgICAgICAgcmV0dXJuIFBvaW50LmNyZWF0ZShwb2ludC54IC0gdmlld09mZnNldC54LCBwb2ludC55IC0gdmlld09mZnNldC55KTtcbiAgICAgICAgfVxuICAgICAgICBzZXQgbG9jYXRpb25JblZpZXcobG9jYXRpb25JblZpZXc6UG9pbnQpIHtcbiAgICAgICAgICAgIHRoaXMuX2xvY2F0aW9uSW5WaWV3ID0gbG9jYXRpb25JblZpZXc7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9idXR0b246bnVtYmVyID0gbnVsbDtcbiAgICAgICAgZ2V0IGJ1dHRvbigpIHtcbiAgICAgICAgICAgIHZhciBlID0gdGhpcy5ldmVudCxcbiAgICAgICAgICAgICAgICBtb3VzZUJ1dHRvbjpudW1iZXIgPSBudWxsO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5fYnV0dG9uKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2J1dHRvbjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGJvd3Nlci5tc2llKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChlLmJ1dHRvbikge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICBtb3VzZUJ1dHRvbiA9IE1vdXNlQnV0dG9uLkxFRlQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICAgICAgbW91c2VCdXR0b24gPSBNb3VzZUJ1dHRvbi5SSUdIVDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgICAgICBtb3VzZUJ1dHRvbiA9IE1vdXNlQnV0dG9uLkNFTlRFUjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgTG9nLmVycm9yKHRydWUsIExvZy5pbmZvLkZVTkNfTk9UX1NVUFBPUlQoXCJtdWx0aSBtb3VzZSBidXR0b25cIikpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChlLmJ1dHRvbikge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICBtb3VzZUJ1dHRvbiA9IE1vdXNlQnV0dG9uLkxFRlQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgbW91c2VCdXR0b24gPSBNb3VzZUJ1dHRvbi5SSUdIVDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgICAgICBtb3VzZUJ1dHRvbiA9IE1vdXNlQnV0dG9uLkNFTlRFUjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgTG9nLmVycm9yKHRydWUsIExvZy5pbmZvLkZVTkNfTk9UX1NVUFBPUlQoXCJtdWx0aSBtb3VzZSBidXR0b25cIikpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gbW91c2VCdXR0b247XG4gICAgICAgIH1cbiAgICAgICAgc2V0IGJ1dHRvbihidXR0b246bnVtYmVyKSB7XG4gICAgICAgICAgICB0aGlzLl9idXR0b24gPSBidXR0b247XG4gICAgICAgIH1cblxuICAgICAgICBnZXQgd2hlZWwoKXtcbiAgICAgICAgICAgIC8qIVxuICAgICAgICAgICAgIEZGIHVzZXMgJ2RldGFpbCcgYW5kIHJldHVybnMgYSB2YWx1ZSBpbiAnbm8uIG9mIGxpbmVzJyB0byBzY3JvbGxcbiAgICAgICAgICAgICBXZWJLaXQgYW5kIE9wZXJhIHVzZSAnd2hlZWxEZWx0YScsIFdlYktpdCBnb2VzIGluIG11bHRpcGxlcyBvZiAxMjAgcGVyIHdoZWVsIG5vdGNoXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHZhciBlID0gdGhpcy5ldmVudDtcblxuICAgICAgICAgICAgaWYgKGUuZGV0YWlsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIC0xICogZS5kZXRhaWw7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChlLndoZWVsRGVsdGEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZS53aGVlbERlbHRhIC8gMTIwO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIGdldCBtb3ZlbWVudERlbHRhKCl7XG4gICAgICAgICAgICB2YXIgZSA9IHRoaXMuZXZlbnQsXG4gICAgICAgICAgICAgICAgZHggPSBudWxsLFxuICAgICAgICAgICAgICAgIHdkID0gbnVsbDtcblxuICAgICAgICAgICAgaWYodGhpcy5faXNQb2ludGVyTG9ja2VkKCkpe1xuICAgICAgICAgICAgICAgIGR4ID0gZS5tb3ZlbWVudFggfHwgZS53ZWJraXRNb3ZlbWVudFggfHwgZS5tb3pNb3ZlbWVudFggfHwgMDtcbiAgICAgICAgICAgICAgICB3ZCA9IGUubW92ZW1lbnRZIHx8IGUud2Via2l0TW92ZW1lbnRZIHx8IGUubW96TW92ZW1lbnRZIHx8IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgIGxldCBsb2NhdGlvbiA9IHRoaXMubG9jYXRpb24sXG4gICAgICAgICAgICAgICAgICAgIGxhc3RYID0gdGhpcy5sYXN0WCxcbiAgICAgICAgICAgICAgICAgICAgbGFzdFkgPSB0aGlzLmxhc3RZO1xuXG4gICAgICAgICAgICAgICAgaWYobGFzdFggPT09IG51bGwgJiYgbGFzdFkgPT09IG51bGwpe1xuICAgICAgICAgICAgICAgICAgICBkeCA9IDA7XG4gICAgICAgICAgICAgICAgICAgIHdkID0gMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgZHggPSBsb2NhdGlvbi54IC0gbGFzdFg7XG4gICAgICAgICAgICAgICAgICAgIHdkID0gbG9jYXRpb24ueSAtIGxhc3RZO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB4OiBkeCxcbiAgICAgICAgICAgICAgICB5OiB3ZFxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGxhc3RYOm51bWJlciA9IG51bGw7XG4gICAgICAgIHB1YmxpYyBsYXN0WTpudW1iZXIgPSBudWxsO1xuXG4gICAgICAgIHByb3RlY3RlZCBwX3R5cGU6RXZlbnRUeXBlID0gRXZlbnRUeXBlLk1PVVNFO1xuXG5cbiAgICAgICAgcHVibGljIGNvcHkoKTpNb3VzZUV2ZW50e1xuICAgICAgICAgICAgdmFyIGV2ZW50T2JqID0gTW91c2VFdmVudC5jcmVhdGUodGhpcy5ldmVudCwgdGhpcy5uYW1lKTtcblxuICAgICAgICAgICAgcmV0dXJuIDxNb3VzZUV2ZW50PnRoaXMuY29weU1lbWJlcihldmVudE9iaiwgdGhpcywgW1widGFyZ2V0XCIsIFwiY3VycmVudFRhcmdldFwiLCBcImlzU3RvcFByb3BhZ2F0aW9uXCIsIFwicGhhc2VcIiwgXCJsYXN0WFwiLCBcImxhc3RZXCJdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX2lzUG9pbnRlckxvY2tlZCgpIHtcbiAgICAgICAgICAgIHJldHVybiAhIShkb2N1bWVudC5wb2ludGVyTG9ja0VsZW1lbnQgfHwgZG9jdW1lbnQubW96UG9pbnRlckxvY2tFbGVtZW50IHx8IGRvY3VtZW50LndlYmtpdFBvaW50ZXJMb2NrRWxlbWVudCk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJtb2R1bGUgd2Qge1xuICAgIGNvbnN0IFNQRUNJQUxfS0VZX01BUCA9IHtcbiAgICAgICAgICAgIDg6IFwiYmFja3NwYWNlXCIsXG4gICAgICAgICAgICA5OiBcInRhYlwiLFxuICAgICAgICAgICAgMTA6IFwicmV0dXJuXCIsXG4gICAgICAgICAgICAxMzogXCJyZXR1cm5cIixcbiAgICAgICAgICAgIDE2OiBcInNoaWZ0XCIsXG4gICAgICAgICAgICAxNzogXCJjdHJsXCIsXG4gICAgICAgICAgICAxODogXCJhbHRcIixcbiAgICAgICAgICAgIDE5OiBcInBhdXNlXCIsXG4gICAgICAgICAgICAyMDogXCJjYXBzbG9ja1wiLFxuICAgICAgICAgICAgMjc6IFwiZXNjXCIsXG4gICAgICAgICAgICAzMjogXCJzcGFjZVwiLFxuICAgICAgICAgICAgMzM6IFwicGFnZXVwXCIsXG4gICAgICAgICAgICAzNDogXCJwYWdlZG93blwiLFxuICAgICAgICAgICAgMzU6IFwiZW5kXCIsXG4gICAgICAgICAgICAzNjogXCJob21lXCIsXG4gICAgICAgICAgICAzNzogXCJsZWZ0XCIsXG4gICAgICAgICAgICAzODogXCJ1cFwiLFxuICAgICAgICAgICAgMzk6IFwicmlnaHRcIixcbiAgICAgICAgICAgIDQwOiBcImRvd25cIixcbiAgICAgICAgICAgIDQ1OiBcImluc2VydFwiLFxuICAgICAgICAgICAgNDY6IFwiZGVsXCIsXG4gICAgICAgICAgICA1OTogXCI7XCIsXG4gICAgICAgICAgICA2MTogXCI9XCIsXG4gICAgICAgICAgICA2NTogXCJhXCIsXG4gICAgICAgICAgICA2NjogXCJiXCIsXG4gICAgICAgICAgICA2NzogXCJjXCIsXG4gICAgICAgICAgICA2ODogXCJkXCIsXG4gICAgICAgICAgICA2OTogXCJlXCIsXG4gICAgICAgICAgICA3MDogXCJmXCIsXG4gICAgICAgICAgICA3MTogXCJnXCIsXG4gICAgICAgICAgICA3MjogXCJoXCIsXG4gICAgICAgICAgICA3MzogXCJpXCIsXG4gICAgICAgICAgICA3NDogXCJqXCIsXG4gICAgICAgICAgICA3NTogXCJrXCIsXG4gICAgICAgICAgICA3NjogXCJsXCIsXG4gICAgICAgICAgICA3NzogXCJtXCIsXG4gICAgICAgICAgICA3ODogXCJuXCIsXG4gICAgICAgICAgICA3OTogXCJvXCIsXG4gICAgICAgICAgICA4MDogXCJwXCIsXG4gICAgICAgICAgICA4MTogXCJxXCIsXG4gICAgICAgICAgICA4MjogXCJyXCIsXG4gICAgICAgICAgICA4MzogXCJzXCIsXG4gICAgICAgICAgICA4NDogXCJ0XCIsXG4gICAgICAgICAgICA4NTogXCJ1XCIsXG4gICAgICAgICAgICA4NjogXCJ2XCIsXG4gICAgICAgICAgICA4NzogXCJ3XCIsXG4gICAgICAgICAgICA4ODogXCJ4XCIsXG4gICAgICAgICAgICA4OTogXCJ5XCIsXG4gICAgICAgICAgICA5MDogXCJ6XCIsXG4gICAgICAgICAgICA5NjogXCIwXCIsXG4gICAgICAgICAgICA5NzogXCIxXCIsXG4gICAgICAgICAgICA5ODogXCIyXCIsXG4gICAgICAgICAgICA5OTogXCIzXCIsXG4gICAgICAgICAgICAxMDA6IFwiNFwiLFxuICAgICAgICAgICAgMTAxOiBcIjVcIixcbiAgICAgICAgICAgIDEwMjogXCI2XCIsXG4gICAgICAgICAgICAxMDM6IFwiN1wiLFxuICAgICAgICAgICAgMTA0OiBcIjhcIixcbiAgICAgICAgICAgIDEwNTogXCI5XCIsXG4gICAgICAgICAgICAxMDY6IFwiKlwiLFxuICAgICAgICAgICAgMTA3OiBcIitcIixcbiAgICAgICAgICAgIDEwOTogXCItXCIsXG4gICAgICAgICAgICAxMTA6IFwiLlwiLFxuICAgICAgICAgICAgMTExOiBcIi9cIixcbiAgICAgICAgICAgIDExMjogXCJmMVwiLFxuICAgICAgICAgICAgMTEzOiBcImYyXCIsXG4gICAgICAgICAgICAxMTQ6IFwiZjNcIixcbiAgICAgICAgICAgIDExNTogXCJmNFwiLFxuICAgICAgICAgICAgMTE2OiBcImY1XCIsXG4gICAgICAgICAgICAxMTc6IFwiZjZcIixcbiAgICAgICAgICAgIDExODogXCJmN1wiLFxuICAgICAgICAgICAgMTE5OiBcImY4XCIsXG4gICAgICAgICAgICAxMjA6IFwiZjlcIixcbiAgICAgICAgICAgIDEyMTogXCJmMTBcIixcbiAgICAgICAgICAgIDEyMjogXCJmMTFcIixcbiAgICAgICAgICAgIDEyMzogXCJmMTJcIixcbiAgICAgICAgICAgIDE0NDogXCJudW1sb2NrXCIsXG4gICAgICAgICAgICAxNDU6IFwic2Nyb2xsXCIsXG4gICAgICAgICAgICAxNzM6IFwiLVwiLFxuICAgICAgICAgICAgMTg2OiBcIjtcIixcbiAgICAgICAgICAgIDE4NzogXCI9XCIsXG4gICAgICAgICAgICAxODg6IFwiLFwiLFxuICAgICAgICAgICAgMTg5OiBcIi1cIixcbiAgICAgICAgICAgIDE5MDogXCIuXCIsXG4gICAgICAgICAgICAxOTE6IFwiL1wiLFxuICAgICAgICAgICAgMTkyOiBcImBcIixcbiAgICAgICAgICAgIDIxOTogXCJbXCIsXG4gICAgICAgICAgICAyMjA6IFwiXFxcXFwiLFxuICAgICAgICAgICAgMjIxOiBcIl1cIixcbiAgICAgICAgICAgIDIyMjogXCInXCJcbiAgICAgICAgfSxcbiAgICAgICAgU0hJRlRfS0VZX01BUCA9IHtcbiAgICAgICAgICAgIFwiYFwiOiBcIn5cIixcbiAgICAgICAgICAgIFwiMVwiOiBcIiFcIixcbiAgICAgICAgICAgIFwiMlwiOiBcIkBcIixcbiAgICAgICAgICAgIFwiM1wiOiBcIiNcIixcbiAgICAgICAgICAgIFwiNFwiOiBcIiRcIixcbiAgICAgICAgICAgIFwiNVwiOiBcIiVcIixcbiAgICAgICAgICAgIFwiNlwiOiBcIl5cIixcbiAgICAgICAgICAgIFwiN1wiOiBcIiZcIixcbiAgICAgICAgICAgIFwiOFwiOiBcIipcIixcbiAgICAgICAgICAgIFwiOVwiOiBcIihcIixcbiAgICAgICAgICAgIFwiMFwiOiBcIilcIixcbiAgICAgICAgICAgIFwiLVwiOiBcIl9cIixcbiAgICAgICAgICAgIFwiPVwiOiBcIitcIixcbiAgICAgICAgICAgIFwiO1wiOiBcIjogXCIsXG4gICAgICAgICAgICBcIidcIjogXCJcXFwiXCIsXG4gICAgICAgICAgICBcIixcIjogXCI8XCIsXG4gICAgICAgICAgICBcIi5cIjogXCI+XCIsXG4gICAgICAgICAgICBcIi9cIjogXCI/XCIsXG4gICAgICAgICAgICBcIlxcXFxcIjogXCJ8XCJcbiAgICAgICAgfTtcblxuICAgIGV4cG9ydCBjbGFzcyBLZXlib2FyZEV2ZW50IGV4dGVuZHMgRG9tRXZlbnR7XG4gICAgICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlKGV2ZW50OmFueSwgZXZlbnROYW1lOkV2ZW50TmFtZSkge1xuICAgICAgICAgICAgdmFyIG9iaiA9IG5ldyB0aGlzKGV2ZW50LCBldmVudE5hbWUpO1xuXG4gICAgICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJvdGVjdGVkIHBfdHlwZTpFdmVudFR5cGUgPSBFdmVudFR5cGUuS0VZQk9BUkQ7XG5cbiAgICAgICAgZ2V0IGN0cmxLZXkoKXtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmV2ZW50LmN0cmxLZXk7XG4gICAgICAgIH1cblxuICAgICAgICBnZXQgYWx0S2V5KCl7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5ldmVudC5hbHRLZXk7XG4gICAgICAgIH1cblxuICAgICAgICBnZXQgc2hpZnRLZXkoKXtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmV2ZW50LnNoaWZ0S2V5O1xuICAgICAgICB9XG5cbiAgICAgICAgZ2V0IG1ldGFLZXkoKXtcbiAgICAgICAgICAgIC8vcmV0dXJuIHRoaXMuZXZlbnQubWV0YUtleSAmJiAhdGhpcy5jdHJsS2V5O1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZXZlbnQubWV0YUtleTtcbiAgICAgICAgfVxuXG4gICAgICAgIGdldCBrZXlDb2RlKCl7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5ldmVudC5rZXlDb2RlO1xuICAgICAgICB9XG5cbiAgICAgICAgZ2V0IGtleSgpe1xuICAgICAgICAgICAgdmFyIGtleSA9IFNQRUNJQUxfS0VZX01BUFt0aGlzLmtleUNvZGVdLFxuICAgICAgICAgICAgICAgIGNoYXIgPSBudWxsO1xuXG4gICAgICAgICAgICBpZigha2V5KXtcbiAgICAgICAgICAgICAgICBjaGFyID0gU3RyaW5nLmZyb21DaGFyQ29kZSh0aGlzLmtleUNvZGUpLnRvTG93ZXJDYXNlKCk7XG5cbiAgICAgICAgICAgICAgICBpZih0aGlzLnNoaWZ0S2V5KXtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFNISUZUX0tFWV9NQVBbY2hhcl07XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNoYXI7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBrZXk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMga2V5U3RhdGU6YW55ID0gbnVsbDtcblxuICAgICAgICBwdWJsaWMgY29weSgpOktleWJvYXJkRXZlbnR7XG4gICAgICAgICAgICB2YXIgZXZlbnRPYmogPSBLZXlib2FyZEV2ZW50LmNyZWF0ZSh0aGlzLmV2ZW50LCB0aGlzLm5hbWUpO1xuXG4gICAgICAgICAgICByZXR1cm4gPEtleWJvYXJkRXZlbnQ+dGhpcy5jb3B5TWVtYmVyKGV2ZW50T2JqLCB0aGlzLCBbXCJ0YXJnZXRcIiwgXCJjdXJyZW50VGFyZ2V0XCIsIFwiaXNTdG9wUHJvcGFnYXRpb25cIiwgXCJwaGFzZVwiLCBcImFsdEtleVwiLCBcInNoaWZ0S2V5XCIsIFwiY3RybEtleVwiLCBcIm1ldGFLZXlcIiwgXCJrZXlDb2RlXCIsIFwia2V5XCJdKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsIm1vZHVsZSB3ZCB7XG4gICAgZXhwb3J0IGNsYXNzIEN1c3RvbUV2ZW50IGV4dGVuZHMgRXZlbnR7XG4gICAgICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlKGV2ZW50TmFtZTpzdHJpbmcpIHtcbiAgICAgICAgICAgIHZhciBvYmogPSBuZXcgdGhpcyg8YW55PmV2ZW50TmFtZSk7XG5cbiAgICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgdXNlckRhdGE6YW55ID0gbnVsbDtcblxuICAgICAgICBwcm90ZWN0ZWQgcF90eXBlOkV2ZW50VHlwZSA9IEV2ZW50VHlwZS5DVVNUT007XG5cblxuICAgICAgICBwdWJsaWMgY29weVB1YmxpY0F0dHJpKGRlc3RpbmF0aW9uLCBzb3VyY2U6YW55KXtcbiAgICAgICAgICAgIHZhciBwcm9wZXJ0eSA9IG51bGw7XG5cbiAgICAgICAgICAgIHdkQ2IuRXh0ZW5kVXRpbHMuZXh0ZW5kKGRlc3RpbmF0aW9uLCBmdW5jdGlvbihpdGVtLCBwcm9wZXJ0eSl7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHByb3BlcnR5LnNsaWNlKDAsIDEpICE9PSBcIl9cIlxuICAgICAgICAgICAgICAgICAgICAmJiAhSnVkZ2VVdGlscy5pc0Z1bmN0aW9uKGl0ZW0pO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHJldHVybiBkZXN0aW5hdGlvbjtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBjb3B5KCk6Q3VzdG9tRXZlbnR7XG4gICAgICAgICAgICB2YXIgZXZlbnRPYmogPSBDdXN0b21FdmVudC5jcmVhdGUoPGFueT50aGlzLm5hbWUpO1xuXG4gICAgICAgICAgICByZXR1cm4gPEN1c3RvbUV2ZW50PnRoaXMuY29weU1lbWJlcihldmVudE9iaiwgdGhpcywgW1widGFyZ2V0XCIsIFwiY3VycmVudFRhcmdldFwiLCBcImlzU3RvcFByb3BhZ2F0aW9uXCIsIFwicGhhc2VcIl0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy9AcmVxdWlyZShmdW5jdGlvbihldmVudDpNb3VzZUV2ZW50KXtcbiAgICAgICAgLy8gICAgaWYoZXZlbnQudGFyZ2V0KXtcbiAgICAgICAgLy8gICAgICAgIGFzc2VydChldmVudC50YXJnZXQgaW5zdGFuY2VvZiBFbnRpdHlPYmplY3QsIExvZy5pbmZvLkZVTkNfTVVTVF9CRShcInRhcmdldFwiLCBcIkVudGl0eU9iamVjdFwiKSk7XG4gICAgICAgIC8vICAgIH1cbiAgICAgICAgLy99KVxuICAgICAgICBwdWJsaWMgZ2V0RGF0YUZyb21Eb21FdmVudChldmVudDpNb3VzZUV2ZW50KXtcbiAgICAgICAgICAgIHRoaXMudGFyZ2V0ID0gPEVudGl0eU9iamVjdD5ldmVudC50YXJnZXQ7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRUYXJnZXQgPSBldmVudC5jdXJyZW50VGFyZ2V0O1xuICAgICAgICAgICAgdGhpcy5pc1N0b3BQcm9wYWdhdGlvbiA9IGV2ZW50LmlzU3RvcFByb3BhZ2F0aW9uO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwibW9kdWxlIHdkIHtcbiAgICBleHBvcnQgZW51bSBNb3VzZUJ1dHRvbntcbiAgICAgICAgTEVGVCxcbiAgICAgICAgUklHSFQsXG4gICAgICAgIENFTlRFUlxuICAgIH1cbn1cblxuIiwibW9kdWxlIHdkIHtcbiAgICBleHBvcnQgY2xhc3MgRXZlbnRMaXN0ZW5lciB7XG4gICAgICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlKG9wdGlvbikge1xuICAgICAgICAgICAgdmFyIG9iaiA9IG5ldyB0aGlzKG9wdGlvbik7XG5cbiAgICAgICAgICAgIG9iai5pbml0V2hlbkNyZWF0ZShvcHRpb24pO1xuXG4gICAgICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGV2ZW50VHlwZTpFdmVudFR5cGUgPSBudWxsO1xuICAgICAgICBwdWJsaWMgcHJpb3JpdHk6bnVtYmVyID0gbnVsbDtcbiAgICAgICAgcHVibGljIGhhbmRsZXJEYXRhTGlzdDp3ZENiLkNvbGxlY3Rpb248RXZlbnRIYW5kbGVyRGF0YT4gPSB3ZENiLkNvbGxlY3Rpb24uY3JlYXRlPEV2ZW50SGFuZGxlckRhdGE+KCk7XG5cbiAgICAgICAgY29uc3RydWN0b3Iob3B0aW9uOmFueSl7XG4gICAgICAgICAgICB0aGlzLmV2ZW50VHlwZSA9IG9wdGlvbi5ldmVudFR5cGU7XG4gICAgICAgICAgICB0aGlzLnByaW9yaXR5ID0gb3B0aW9uLnByaW9yaXR5IHx8IDE7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgaW5pdFdoZW5DcmVhdGUob3B0aW9uOnthbnl9KXtcbiAgICAgICAgICAgIHRoaXMuX3NldEhhbmRsZXJEYXRhTGlzdChvcHRpb24pO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfc2V0SGFuZGxlckRhdGFMaXN0KG9wdGlvbjp7YW55fSl7XG4gICAgICAgICAgICB2YXIgaSA9IG51bGwsXG4gICAgICAgICAgICAgICAgUkVHRVhfSEFOREVSID0gL29uXFx3Ky87XG5cbiAgICAgICAgICAgIGZvcihpIGluIG9wdGlvbil7XG4gICAgICAgICAgICAgICAgaWYob3B0aW9uLmhhc093blByb3BlcnR5KGkpKXtcbiAgICAgICAgICAgICAgICAgICAgaWYoUkVHRVhfSEFOREVSLnRlc3QoaSkpe1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVyRGF0YUxpc3QuYWRkQ2hpbGQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50TmFtZTogdGhpcy5fcGFyc2VFdmVudE5hbWUoaSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlcjogb3B0aW9uW2ldXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX3BhcnNlRXZlbnROYW1lKGhhbmRsZXJOYW1lKXtcbiAgICAgICAgICAgIHJldHVybiBoYW5kbGVyTmFtZS5zbGljZSgyKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZXhwb3J0IHR5cGUgRXZlbnRIYW5kbGVyRGF0YSA9IHtcbiAgICAgICAgZXZlbnROYW1lOkV2ZW50TmFtZTtcbiAgICAgICAgaGFuZGxlcjpGdW5jdGlvbjtcbiAgICB9XG59XG4iLCJtb2R1bGUgd2Qge1xuICAgIGV4cG9ydCBhYnN0cmFjdCBjbGFzcyBFdmVudEhhbmRsZXIge1xuICAgICAgICBwdWJsaWMgYWJzdHJhY3Qgb24oLi4uYXJncyk7XG4gICAgICAgIHB1YmxpYyBhYnN0cmFjdCBvZmYoLi4uYXJncyk7XG4gICAgICAgIHB1YmxpYyBhYnN0cmFjdCB0cmlnZ2VyKC4uLmFyZ3MpO1xuXG5cbiAgICB9XG59XG4iLCJtb2R1bGUgd2Qge1xuICAgIGV4cG9ydCBhYnN0cmFjdCBjbGFzcyBEb21FdmVudEhhbmRsZXIgZXh0ZW5kcyBFdmVudEhhbmRsZXJ7XG4gICAgICAgIHB1YmxpYyBvZmYoZXZlbnROYW1lOkV2ZW50TmFtZSk6dm9pZDtcblxuICAgICAgICBwdWJsaWMgb2ZmKGV2ZW50TmFtZTpFdmVudE5hbWUsIGhhbmRsZXI6RnVuY3Rpb24pOnZvaWQ7XG4gICAgICAgIHB1YmxpYyBvZmYoZG9tOkhUTUxFbGVtZW50LCBldmVudE5hbWU6RXZlbnROYW1lKTp2b2lkO1xuXG4gICAgICAgIHB1YmxpYyBvZmYoZG9tOkhUTUxFbGVtZW50LCBldmVudE5hbWU6RXZlbnROYW1lLCBoYW5kbGVyOkZ1bmN0aW9uKTp2b2lkO1xuXG4gICAgICAgIHB1YmxpYyBvZmYoLi4uYXJncykge1xuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzLFxuICAgICAgICAgICAgICAgIGV2ZW50UmVnaXN0ZXIgPSBEb21FdmVudFJlZ2lzdGVyLmdldEluc3RhbmNlKCksXG4gICAgICAgICAgICAgICAgZXZlbnRPZmZEYXRhTGlzdDp3ZENiLkNvbGxlY3Rpb248RG9tRXZlbnRPZmZEYXRhPiA9IG51bGw7XG5cbiAgICAgICAgICAgIGV2ZW50T2ZmRGF0YUxpc3QgPSBldmVudFJlZ2lzdGVyLnJlbW92ZS5hcHBseShldmVudFJlZ2lzdGVyLCBhcmdzKTtcblxuICAgICAgICAgICAgaWYoZXZlbnRPZmZEYXRhTGlzdCl7XG4gICAgICAgICAgICAgICAgZXZlbnRPZmZEYXRhTGlzdC5mb3JFYWNoKChsaXN0OndkQ2IuQ29sbGVjdGlvbjxEb21FdmVudE9mZkRhdGE+KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGxpc3QuZm9yRWFjaCgoZXZlbnRPZmZEYXRhOkRvbUV2ZW50T2ZmRGF0YSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5fdW5CaW5kKGV2ZW50T2ZmRGF0YS5kb20sIGV2ZW50T2ZmRGF0YS5ldmVudE5hbWUsIGV2ZW50T2ZmRGF0YS5kb21IYW5kbGVyKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy90aGlzLmNsZWFySGFuZGxlcigpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHRyaWdnZXIoZXZlbnQ6RXZlbnQpOnZvaWQ7XG4gICAgICAgIHB1YmxpYyB0cmlnZ2VyKGRvbTpIVE1MRWxlbWVudCwgZXZlbnQ6RXZlbnQpOnZvaWQ7XG5cbiAgICAgICAgcHVibGljIHRyaWdnZXIoLi4uYXJncyk6dm9pZHtcbiAgICAgICAgICAgIHZhciBkb20gPSBudWxsLFxuICAgICAgICAgICAgICAgIGV2ZW50ID0gbnVsbCxcbiAgICAgICAgICAgICAgICBldmVudE5hbWUgPSBudWxsLFxuICAgICAgICAgICAgICAgIHJlZ2lzdGVyRGF0YUxpc3Q6d2RDYi5Db2xsZWN0aW9uPERvbUV2ZW50UmVnaXN0ZXJEYXRhPiA9IG51bGw7XG5cbiAgICAgICAgICAgIGlmKGFyZ3MubGVuZ3RoID09PSAxKXtcbiAgICAgICAgICAgICAgICBldmVudCA9IGFyZ3NbMF07XG4gICAgICAgICAgICAgICAgZG9tID0gdGhpcy5nZXREZWZhdWx0RG9tKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgIGRvbSA9IGFyZ3NbMF07XG4gICAgICAgICAgICAgICAgZXZlbnQgPSBhcmdzWzFdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBldmVudE5hbWUgPSBldmVudC5uYW1lO1xuXG4gICAgICAgICAgICByZWdpc3RlckRhdGFMaXN0ID0gRG9tRXZlbnRSZWdpc3Rlci5nZXRJbnN0YW5jZSgpLmdldEV2ZW50UmVnaXN0ZXJEYXRhTGlzdChkb20sIGV2ZW50TmFtZSk7XG5cbiAgICAgICAgICAgIGlmIChyZWdpc3RlckRhdGFMaXN0ID09PSBudWxsIHx8IHJlZ2lzdGVyRGF0YUxpc3QuZ2V0Q291bnQoKT09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZWdpc3RlckRhdGFMaXN0LmZvckVhY2goKHJlZ2lzdGVyRGF0YTpEb21FdmVudFJlZ2lzdGVyRGF0YSkgPT4ge1xuICAgICAgICAgICAgICAgIHZhciBldmVudENvcHkgPSBldmVudC5jb3B5KCk7XG5cbiAgICAgICAgICAgICAgICByZWdpc3RlckRhdGEuaGFuZGxlcihldmVudENvcHksIHJlZ2lzdGVyRGF0YS5ldmVudERhdGEpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBwcm90ZWN0ZWQgYWJzdHJhY3QgdHJpZ2dlckRvbUV2ZW50KGRvbTpIVE1MRWxlbWVudCwgZXZlbnQ6RXZlbnQsIGV2ZW50TmFtZTpFdmVudE5hbWUpO1xuICAgICAgICBwcm90ZWN0ZWQgYWJzdHJhY3QgYWRkRW5naW5lSGFuZGxlcihldmVudE5hbWU6RXZlbnROYW1lLCBoYW5kbGVyOkZ1bmN0aW9uKTtcbiAgICAgICAgcHJvdGVjdGVkIGFic3RyYWN0IGdldERlZmF1bHREb20oKTpIVE1MRWxlbWVudDtcbiAgICAgICAgcHJvdGVjdGVkIGFic3RyYWN0IGNyZWF0ZUV2ZW50RGF0YSgpOndkQ2IuSGFzaDxhbnk+O1xuXG4gICAgICAgIEB2aXJ0dWFsXG4gICAgICAgIHByb3RlY3RlZCBjbGVhckhhbmRsZXIoKXtcbiAgICAgICAgfVxuXG4gICAgICAgIHByb3RlY3RlZCBidWlsZERvbUhhbmRsZXIoZG9tOkhUTUxFbGVtZW50LCBldmVudE5hbWU6RXZlbnROYW1lKXtcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcyxcbiAgICAgICAgICAgICAgICBjb250ZXh0ID0gcm9vdDtcblxuICAgICAgICAgICAgcmV0dXJuIHdkQ2IuRXZlbnRVdGlscy5iaW5kRXZlbnQoY29udGV4dCwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgc2VsZi50cmlnZ2VyRG9tRXZlbnQoZG9tLCBldmVudCwgZXZlbnROYW1lKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJvdGVjdGVkIGhhbmRsZXIoZG9tOkhUTUxFbGVtZW50LCBldmVudE5hbWU6RXZlbnROYW1lLCBoYW5kbGVyOkZ1bmN0aW9uLCBwcmlvcml0eTpudW1iZXIpe1xuICAgICAgICAgICAgdmFyIGRvbUhhbmRsZXIgPSBudWxsLFxuICAgICAgICAgICAgICAgIG9yaWdpbkhhbmRsZXIgPSBoYW5kbGVyO1xuXG4gICAgICAgICAgICBoYW5kbGVyID0gdGhpcy5hZGRFbmdpbmVIYW5kbGVyKGV2ZW50TmFtZSwgaGFuZGxlcik7XG5cbiAgICAgICAgICAgIGlmICghRG9tRXZlbnRSZWdpc3Rlci5nZXRJbnN0YW5jZSgpLmlzQmluZGVkKGRvbSwgZXZlbnROYW1lKSkge1xuICAgICAgICAgICAgICAgIGRvbUhhbmRsZXIgPSB0aGlzLl9iaW5kKGRvbSwgZXZlbnROYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICAgICAgZG9tSGFuZGxlciA9IERvbUV2ZW50UmVnaXN0ZXIuZ2V0SW5zdGFuY2UoKS5nZXREb21IYW5kbGVyKGRvbSwgZXZlbnROYW1lKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgRG9tRXZlbnRSZWdpc3Rlci5nZXRJbnN0YW5jZSgpLnJlZ2lzdGVyKFxuICAgICAgICAgICAgICAgIGRvbSxcbiAgICAgICAgICAgICAgICBldmVudE5hbWUsXG4gICAgICAgICAgICAgICAgdGhpcy5jcmVhdGVFdmVudERhdGEoKSxcbiAgICAgICAgICAgICAgICBoYW5kbGVyLFxuICAgICAgICAgICAgICAgIG9yaWdpbkhhbmRsZXIsXG4gICAgICAgICAgICAgICAgZG9tSGFuZGxlcixcbiAgICAgICAgICAgICAgICBwcmlvcml0eVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX2JpbmQoZG9tOkhUTUxFbGVtZW50LCBldmVudE5hbWU6RXZlbnROYW1lKXtcbiAgICAgICAgICAgIHZhciBkb21IYW5kbGVyID0gbnVsbDtcblxuICAgICAgICAgICAgZG9tSGFuZGxlciA9IHRoaXMuYnVpbGREb21IYW5kbGVyKGRvbSwgZXZlbnROYW1lKTtcblxuICAgICAgICAgICAgd2RDYi5FdmVudFV0aWxzLmFkZEV2ZW50KFxuICAgICAgICAgICAgICAgIGRvbSxcbiAgICAgICAgICAgICAgICBFdmVudE5hbWVIYW5kbGVyLmhhbmRsZUV2ZW50TmFtZShldmVudE5hbWUpLFxuICAgICAgICAgICAgICAgIGRvbUhhbmRsZXJcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIHJldHVybiBkb21IYW5kbGVyO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfdW5CaW5kKGRvbSwgZXZlbnROYW1lLCBoYW5kbGVyKXtcbiAgICAgICAgICAgIHdkQ2IuRXZlbnRVdGlscy5yZW1vdmVFdmVudChkb20sIEV2ZW50TmFtZUhhbmRsZXIuaGFuZGxlRXZlbnROYW1lKGV2ZW50TmFtZSksIGhhbmRsZXIpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4iLCJtb2R1bGUgd2Qge1xuICAgIGV4cG9ydCBjbGFzcyBNb3VzZUV2ZW50SGFuZGxlciBleHRlbmRzIERvbUV2ZW50SGFuZGxlcntcbiAgICAgICAgcHJpdmF0ZSBzdGF0aWMgX2luc3RhbmNlID0gbnVsbDtcblxuICAgICAgICBwdWJsaWMgc3RhdGljIGdldEluc3RhbmNlKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2luc3RhbmNlID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5faW5zdGFuY2UgPSBuZXcgdGhpcygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2luc3RhbmNlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy9wdWJsaWMgc3RhdGljIGNyZWF0ZSgpIHtcbiAgICAgICAgLy9cdHZhciBvYmogPSBuZXcgdGhpcygpO1xuICAgICAgICAvL1xuICAgICAgICAvL1x0cmV0dXJuIG9iajtcbiAgICAgICAgLy99XG5cblxuICAgICAgICAvL3B1YmxpYyBsYXN0WDpudW1iZXIgPSBudWxsO1xuICAgICAgICAvL3B1YmxpYyBsYXN0WTpudW1iZXIgPSBudWxsO1xuXG5cbiAgICAgICAgcHVibGljIG9uKGV2ZW50TmFtZTpFdmVudE5hbWUsIGhhbmRsZXI6KGV2ZW50Ok1vdXNlRXZlbnQpID0+IHZvaWQsIHByaW9yaXR5Om51bWJlcik7XG4gICAgICAgIHB1YmxpYyBvbihkb206SFRNTEVsZW1lbnQsIGV2ZW50TmFtZTpFdmVudE5hbWUsIGhhbmRsZXI6KGV2ZW50Ok1vdXNlRXZlbnQpID0+IHZvaWQsIHByaW9yaXR5Om51bWJlcik7XG5cbiAgICAgICAgQHJlcXVpcmUoZnVuY3Rpb24oLi4uYXJncyl7XG4gICAgICAgICAgICBpZihhcmdzLmxlbmd0aCA9PT0gNCl7XG4gICAgICAgICAgICAgICAgbGV0IGRvbSA9IGFyZ3NbMF07XG5cbiAgICAgICAgICAgICAgICBhc3NlcnQoSnVkZ2VVdGlscy5pc0RvbShkb20pLCBMb2cuaW5mby5GVU5DX01VU1RfQkUoXCJmaXJzdCBwYXJhbVwiLCBcIkhUTUxFbGVtZW50XCIpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgcHVibGljIG9uKC4uLmFyZ3MpIHtcbiAgICAgICAgICAgIHZhciBkb206SFRNTEVsZW1lbnQgPSBudWxsLFxuICAgICAgICAgICAgICAgIGV2ZW50TmFtZSA9IG51bGwsXG4gICAgICAgICAgICAgICAgaGFuZGxlciA9IG51bGwsXG4gICAgICAgICAgICAgICAgcHJpb3JpdHkgPSBudWxsO1xuXG4gICAgICAgICAgICBpZihhcmdzLmxlbmd0aCA9PT0gMyl7XG4gICAgICAgICAgICAgICAgZG9tID0gdGhpcy5nZXREZWZhdWx0RG9tKCk7XG5cbiAgICAgICAgICAgICAgICBldmVudE5hbWUgPSBhcmdzWzBdO1xuICAgICAgICAgICAgICAgIGhhbmRsZXIgPSBhcmdzWzFdO1xuICAgICAgICAgICAgICAgIHByaW9yaXR5ID0gYXJnc1syXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICAgICAgZG9tID0gYXJnc1swXTtcbiAgICAgICAgICAgICAgICBldmVudE5hbWUgPSBhcmdzWzFdO1xuICAgICAgICAgICAgICAgIGhhbmRsZXIgPSBhcmdzWzJdO1xuICAgICAgICAgICAgICAgIHByaW9yaXR5ID0gYXJnc1szXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5oYW5kbGVyKGRvbSwgZXZlbnROYW1lLCBoYW5kbGVyLCBwcmlvcml0eSk7XG4gICAgICAgIH1cblxuICAgICAgICBwcm90ZWN0ZWQgZ2V0RGVmYXVsdERvbSgpOkhUTUxFbGVtZW50e1xuICAgICAgICAgICAgcmV0dXJuIGRvY3VtZW50LmJvZHk7XG4gICAgICAgIH1cblxuICAgICAgICBwcm90ZWN0ZWQgdHJpZ2dlckRvbUV2ZW50KGRvbTpIVE1MRWxlbWVudCwgZXZlbnQ6RXZlbnQsIGV2ZW50TmFtZTpFdmVudE5hbWUpe1xuICAgICAgICAgICAgdmFyIGV2ZW50T2JqID0gdGhpcy5fY3JlYXRlRXZlbnRPYmplY3QoZG9tLCBldmVudCwgZXZlbnROYW1lKTtcblxuICAgICAgICAgICAgRXZlbnRNYW5hZ2VyLnRyaWdnZXIoZG9tLCBldmVudE9iaik7XG4gICAgICAgIH1cblxuICAgICAgICBwcm90ZWN0ZWQgYWRkRW5naW5lSGFuZGxlcihldmVudE5hbWU6RXZlbnROYW1lLCBoYW5kbGVyOihldmVudDpNb3VzZUV2ZW50KSA9PiB2b2lkKXtcbiAgICAgICAgICAgIHZhciByZXN1bHRIYW5kbGVyID0gbnVsbDtcblxuICAgICAgICAgICAgc3dpdGNoIChldmVudE5hbWUpe1xuICAgICAgICAgICAgICAgIGNhc2UgRXZlbnROYW1lLk1PVVNFTU9WRTpcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0SGFuZGxlciA9IHRoaXMuX2hhbmRsZU1vdmUoaGFuZGxlcik7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdEhhbmRsZXIgPSBoYW5kbGVyO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdEhhbmRsZXI7XG4gICAgICAgIH1cblxuICAgICAgICBwcm90ZWN0ZWQgY3JlYXRlRXZlbnREYXRhKCk6d2RDYi5IYXNoPGFueT57XG4gICAgICAgICAgICB2YXIgZXZlbnREYXRhID0gd2RDYi5IYXNoLmNyZWF0ZTxhbnk+KCk7XG5cbiAgICAgICAgICAgIGV2ZW50RGF0YS5hZGRDaGlsZChcImxhc3RYXCIsIG51bGwpO1xuICAgICAgICAgICAgZXZlbnREYXRhLmFkZENoaWxkKFwibGFzdFlcIiwgbnVsbCk7XG5cbiAgICAgICAgICAgIHJldHVybiBldmVudERhdGE7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9oYW5kbGVNb3ZlKGhhbmRsZXI6KGV2ZW50Ok1vdXNlRXZlbnQpID0+IHZvaWQpe1xuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgICAgICAgICByZXR1cm4gKGV2ZW50Ok1vdXNlRXZlbnQsIGV2ZW50RGF0YTp3ZENiLkhhc2g8YW55PikgPT4ge1xuICAgICAgICAgICAgICAgIHNlbGYuX2NvcHlFdmVudERhdGFUb0V2ZW50T2JqZWN0KGV2ZW50LCBldmVudERhdGEpO1xuXG4gICAgICAgICAgICAgICAgaGFuZGxlcihldmVudCk7XG5cbiAgICAgICAgICAgICAgICBzZWxmLl9zYXZlTG9jYXRpb24oZXZlbnQsIGV2ZW50RGF0YSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfY3JlYXRlRXZlbnRPYmplY3QoZG9tOkhUTUxFbGVtZW50LCBldmVudDphbnksIGV2ZW50TmFtZTpFdmVudE5hbWUpIHtcbiAgICAgICAgICAgIHZhciBvYmogPSBNb3VzZUV2ZW50LmNyZWF0ZShldmVudCA/IGV2ZW50IDogcm9vdC5ldmVudCwgZXZlbnROYW1lKTtcblxuICAgICAgICAgICAgb2JqLnRhcmdldCA9IGRvbTtcblxuICAgICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX2NvcHlFdmVudERhdGFUb0V2ZW50T2JqZWN0KGV2ZW50Ok1vdXNlRXZlbnQsIGV2ZW50RGF0YTp3ZENiLkhhc2g8YW55Pil7XG4gICAgICAgICAgICBldmVudC5sYXN0WCA9IGV2ZW50RGF0YS5nZXRDaGlsZChcImxhc3RYXCIpO1xuICAgICAgICAgICAgZXZlbnQubGFzdFkgPSBldmVudERhdGEuZ2V0Q2hpbGQoXCJsYXN0WVwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX3NhdmVMb2NhdGlvbihldmVudDpNb3VzZUV2ZW50LCBldmVudERhdGE6d2RDYi5IYXNoPGFueT4pe1xuICAgICAgICAgICAgdmFyIGxvY2F0aW9uID0gZXZlbnQubG9jYXRpb247XG5cbiAgICAgICAgICAgIGV2ZW50RGF0YS5hZGRDaGlsZChcImxhc3RYXCIsIGxvY2F0aW9uLngpO1xuICAgICAgICAgICAgZXZlbnREYXRhLmFkZENoaWxkKFwibGFzdFlcIiwgbG9jYXRpb24ueSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbiIsIm1vZHVsZSB3ZCB7XG4gICAgZGVjbGFyZSB2YXIgZG9jdW1lbnQ6YW55O1xuXG4gICAgLy90b2RvIGJpbmQgb24gRW50aXR5T2JqZWN0IHdoaWNoIGhhcyB0aGUgZm9jdXNcbiAgICBleHBvcnQgY2xhc3MgS2V5Ym9hcmRFdmVudEhhbmRsZXIgZXh0ZW5kcyBEb21FdmVudEhhbmRsZXJ7XG4gICAgICAgIHByaXZhdGUgc3RhdGljIF9pbnN0YW5jZSA9IG51bGw7XG5cbiAgICAgICAgcHVibGljIHN0YXRpYyBnZXRJbnN0YW5jZSgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9pbnN0YW5jZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2luc3RhbmNlID0gbmV3IHRoaXMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9pbnN0YW5jZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vcHVibGljIGtleVN0YXRlOmFueSA9IHt9O1xuXG4gICAgICAgIHB1YmxpYyBvbihldmVudE5hbWU6RXZlbnROYW1lLCBoYW5kbGVyOihldmVudDpNb3VzZUV2ZW50KSA9PiB2b2lkLCBwcmlvcml0eTpudW1iZXIpO1xuICAgICAgICBwdWJsaWMgb24oZG9tOkhUTUxFbGVtZW50LCBldmVudE5hbWU6RXZlbnROYW1lLCBoYW5kbGVyOihldmVudDpNb3VzZUV2ZW50KSA9PiB2b2lkLCBwcmlvcml0eTpudW1iZXIpO1xuXG4gICAgICAgIHB1YmxpYyBvbiguLi5hcmdzKSB7XG4gICAgICAgICAgICB2YXIgZXZlbnROYW1lID0gbnVsbCxcbiAgICAgICAgICAgICAgICBoYW5kbGVyID0gbnVsbCxcbiAgICAgICAgICAgICAgICBwcmlvcml0eSA9IG51bGw7XG5cbiAgICAgICAgICAgIGlmKGFyZ3MubGVuZ3RoID09PSAzKXtcbiAgICAgICAgICAgICAgICBldmVudE5hbWUgPSBhcmdzWzBdO1xuICAgICAgICAgICAgICAgIGhhbmRsZXIgPSBhcmdzWzFdO1xuICAgICAgICAgICAgICAgIHByaW9yaXR5ID0gYXJnc1syXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICAgICAgTG9nLndhcm4oXCJrZXlib2FyZCBldmVudCBjYW4gb25seSBiaW5kIG9uIGRvY3VtZW50LmJvZHlcIik7XG5cbiAgICAgICAgICAgICAgICBldmVudE5hbWUgPSBhcmdzWzFdO1xuICAgICAgICAgICAgICAgIGhhbmRsZXIgPSBhcmdzWzJdO1xuICAgICAgICAgICAgICAgIHByaW9yaXR5ID0gYXJnc1szXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5oYW5kbGVyKHRoaXMuZ2V0RGVmYXVsdERvbSgpLCBldmVudE5hbWUsIGhhbmRsZXIsIHByaW9yaXR5KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByb3RlY3RlZCB0cmlnZ2VyRG9tRXZlbnQoZG9tOkhUTUxFbGVtZW50LCBldmVudDpFdmVudCwgZXZlbnROYW1lOkV2ZW50TmFtZSl7XG4gICAgICAgICAgICB2YXIgZXZlbnRPYmogPSB0aGlzLl9jcmVhdGVFdmVudE9iamVjdChkb20sIGV2ZW50LCBldmVudE5hbWUpO1xuXG4gICAgICAgICAgICBFdmVudE1hbmFnZXIudHJpZ2dlcihkb20sIGV2ZW50T2JqKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByb3RlY3RlZCBnZXREZWZhdWx0RG9tKCk6SFRNTEVsZW1lbnR7XG4gICAgICAgICAgICByZXR1cm4gZG9jdW1lbnQuYm9keTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByb3RlY3RlZCBhZGRFbmdpbmVIYW5kbGVyKGV2ZW50TmFtZTpFdmVudE5hbWUsIGhhbmRsZXI6KGV2ZW50OktleWJvYXJkRXZlbnQpID0+IHZvaWQpe1xuICAgICAgICAgICAgdmFyIHJlc3VsdEhhbmRsZXIgPSBudWxsO1xuXG4gICAgICAgICAgICBzd2l0Y2ggKGV2ZW50TmFtZSl7XG4gICAgICAgICAgICAgICAgY2FzZSBFdmVudE5hbWUuS0VZRE9XTjpcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0SGFuZGxlciA9IHRoaXMuX2hhbmRsZUtleURvd24oaGFuZGxlcik7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgRXZlbnROYW1lLktFWVVQOlxuICAgICAgICAgICAgICAgICAgICByZXN1bHRIYW5kbGVyID0gdGhpcy5faGFuZGxlS2V5VXAoaGFuZGxlcik7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdEhhbmRsZXIgPSBoYW5kbGVyO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdEhhbmRsZXI7XG4gICAgICAgIH1cblxuICAgICAgICBwcm90ZWN0ZWQgY3JlYXRlRXZlbnREYXRhKCk6d2RDYi5IYXNoPGFueT57XG4gICAgICAgICAgICB2YXIgZXZlbnREYXRhID0gd2RDYi5IYXNoLmNyZWF0ZTxhbnk+KCk7XG5cbiAgICAgICAgICAgIGV2ZW50RGF0YS5hZGRDaGlsZChcImtleVN0YXRlXCIsIHt9KTtcblxuICAgICAgICAgICAgcmV0dXJuIGV2ZW50RGF0YTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX2hhbmRsZUtleURvd24oaGFuZGxlcjooZXZlbnQ6S2V5Ym9hcmRFdmVudCkgPT4gdm9pZCl7XG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICAgICAgICAgIHJldHVybiAoZXZlbnQ6S2V5Ym9hcmRFdmVudCwgZXZlbnREYXRhOndkQ2IuSGFzaDxhbnk+KSA9PiB7XG4gICAgICAgICAgICAgICAgdmFyIGtleVN0YXRlOmFueSA9IGV2ZW50RGF0YS5nZXRDaGlsZChcImtleVN0YXRlXCIpO1xuXG4gICAgICAgICAgICAgICAgc2VsZi5fc2V0S2V5U3RhdGVBbGxGYWxzZShrZXlTdGF0ZSk7XG4gICAgICAgICAgICAgICAga2V5U3RhdGVbZXZlbnQua2V5XSA9IHRydWU7XG5cbiAgICAgICAgICAgICAgICBzZWxmLl9jb3B5RXZlbnREYXRhVG9FdmVudE9iamVjdChldmVudCwgZXZlbnREYXRhKTtcblxuICAgICAgICAgICAgICAgIGhhbmRsZXIoZXZlbnQpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX2hhbmRsZUtleVVwKGhhbmRsZXI6KGV2ZW50OktleWJvYXJkRXZlbnQpID0+IHZvaWQpe1xuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgICAgICAgICByZXR1cm4gKGV2ZW50OktleWJvYXJkRXZlbnQsIGV2ZW50RGF0YTp3ZENiLkhhc2g8YW55PikgPT4ge1xuICAgICAgICAgICAgICAgIHNlbGYuX3NldEtleVN0YXRlQWxsRmFsc2UoZXZlbnREYXRhLmdldENoaWxkKFwia2V5U3RhdGVcIikpO1xuXG4gICAgICAgICAgICAgICAgc2VsZi5fY29weUV2ZW50RGF0YVRvRXZlbnRPYmplY3QoZXZlbnQsIGV2ZW50RGF0YSk7XG5cbiAgICAgICAgICAgICAgICBoYW5kbGVyKGV2ZW50KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9jb3B5RXZlbnREYXRhVG9FdmVudE9iamVjdChldmVudDpLZXlib2FyZEV2ZW50LCBldmVudERhdGE6d2RDYi5IYXNoPGFueT4pe1xuICAgICAgICAgICAgZXZlbnQua2V5U3RhdGUgPSBldmVudERhdGEuZ2V0Q2hpbGQoXCJrZXlTdGF0ZVwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX3NldEtleVN0YXRlQWxsRmFsc2Uoa2V5U3RhdGU6YW55KSB7XG4gICAgICAgICAgICBmb3IgKGxldCBpIGluIGtleVN0YXRlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGtleVN0YXRlLmhhc093blByb3BlcnR5KGkpKSB7XG4gICAgICAgICAgICAgICAgICAgIGtleVN0YXRlW2ldID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfY3JlYXRlRXZlbnRPYmplY3QoZG9tOkhUTUxFbGVtZW50LCBldmVudDphbnksIGV2ZW50TmFtZTpFdmVudE5hbWUpIHtcbiAgICAgICAgICAgIHZhciBvYmogPSBLZXlib2FyZEV2ZW50LmNyZWF0ZShldmVudCA/IGV2ZW50IDogcm9vdC5ldmVudCwgZXZlbnROYW1lKTtcblxuICAgICAgICAgICAgb2JqLnRhcmdldCA9IGRvbTtcblxuICAgICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuIiwibW9kdWxlIHdkIHtcbiAgICBleHBvcnQgY2xhc3MgQ3VzdG9tRXZlbnRIYW5kbGVyIGV4dGVuZHMgRXZlbnRIYW5kbGVye1xuICAgICAgICBwcml2YXRlIHN0YXRpYyBfaW5zdGFuY2UgPSBudWxsO1xuXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgZ2V0SW5zdGFuY2UoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5faW5zdGFuY2UgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9pbnN0YW5jZSA9IG5ldyB0aGlzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5faW5zdGFuY2U7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgb24oZXZlbnROYW1lOnN0cmluZywgaGFuZGxlcjpGdW5jdGlvbiwgcHJpb3JpdHk6bnVtYmVyKTp2b2lkO1xuICAgICAgICBwdWJsaWMgb24odGFyZ2V0OkVudGl0eU9iamVjdCwgZXZlbnROYW1lOnN0cmluZywgaGFuZGxlcjpGdW5jdGlvbiwgcHJpb3JpdHk6bnVtYmVyKTp2b2lkO1xuXG4gICAgICAgIHB1YmxpYyBvbiguLi5hcmdzKSB7XG4gICAgICAgICAgICBpZihhcmdzLmxlbmd0aCA9PT0gMyl7XG4gICAgICAgICAgICAgICAgbGV0IGV2ZW50TmFtZSA9IGFyZ3NbMF0sXG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZXIgPSBhcmdzWzFdLFxuICAgICAgICAgICAgICAgICAgICBvcmlnaW5IYW5kbGVyID0gaGFuZGxlcixcbiAgICAgICAgICAgICAgICAgICAgcHJpb3JpdHkgPSBhcmdzWzJdO1xuXG4gICAgICAgICAgICAgICAgQ3VzdG9tRXZlbnRSZWdpc3Rlci5nZXRJbnN0YW5jZSgpLnJlZ2lzdGVyKFxuICAgICAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgICAgICA8YW55PmV2ZW50TmFtZSxcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlcixcbiAgICAgICAgICAgICAgICAgICAgb3JpZ2luSGFuZGxlcixcbiAgICAgICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgcHJpb3JpdHlcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZihhcmdzLmxlbmd0aCA9PT0gNCl7XG4gICAgICAgICAgICAgICAgbGV0IHRhcmdldCA9IGFyZ3NbMF0sXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50TmFtZSA9IGFyZ3NbMV0sXG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZXIgPSBhcmdzWzJdLFxuICAgICAgICAgICAgICAgICAgICBvcmlnaW5IYW5kbGVyID0gaGFuZGxlcixcbiAgICAgICAgICAgICAgICAgICAgcHJpb3JpdHkgPSBhcmdzWzNdO1xuXG4gICAgICAgICAgICAgICAgQ3VzdG9tRXZlbnRSZWdpc3Rlci5nZXRJbnN0YW5jZSgpLnJlZ2lzdGVyKFxuICAgICAgICAgICAgICAgICAgICB0YXJnZXQsXG4gICAgICAgICAgICAgICAgICAgIDxhbnk+ZXZlbnROYW1lLFxuICAgICAgICAgICAgICAgICAgICBoYW5kbGVyLFxuICAgICAgICAgICAgICAgICAgICBvcmlnaW5IYW5kbGVyLFxuICAgICAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgICAgICBwcmlvcml0eVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgb2ZmKGV2ZW50TmFtZTpzdHJpbmcpOnZvaWQ7XG4gICAgICAgIHB1YmxpYyBvZmYodWlkOm51bWJlciwgZXZlbnROYW1lOnN0cmluZyk6dm9pZDtcbiAgICAgICAgcHVibGljIG9mZihldmVudE5hbWU6c3RyaW5nLCBoYW5kbGVyOkZ1bmN0aW9uKTp2b2lkO1xuICAgICAgICBwdWJsaWMgb2ZmKHRhcmdldDpFbnRpdHlPYmplY3QsIGV2ZW50TmFtZTpzdHJpbmcsIGhhbmRsZXI6RnVuY3Rpb24pOnZvaWQ7XG5cbiAgICAgICAgcHVibGljIG9mZiguLi5hcmdzKSB7XG4gICAgICAgICAgICB2YXIgZXZlbnRSZWdpc3RlciA9IEN1c3RvbUV2ZW50UmVnaXN0ZXIuZ2V0SW5zdGFuY2UoKTtcblxuICAgICAgICAgICAgZXZlbnRSZWdpc3Rlci5yZW1vdmUuYXBwbHkoZXZlbnRSZWdpc3RlciwgYXJncyk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgdHJpZ2dlcihldmVudDpFdmVudCk6Ym9vbGVhbjtcbiAgICAgICAgcHVibGljIHRyaWdnZXIoZXZlbnQ6RXZlbnQsIHVzZXJEYXRhOmFueSk6Ym9vbGVhbjtcbiAgICAgICAgcHVibGljIHRyaWdnZXIodGFyZ2V0OkVudGl0eU9iamVjdCwgZXZlbnQ6RXZlbnQsIG5vdFNldFRhcmdldDpib29sZWFuKTpib29sZWFuO1xuICAgICAgICBwdWJsaWMgdHJpZ2dlcih0YXJnZXQ6RW50aXR5T2JqZWN0LCBldmVudDpFdmVudCwgdXNlckRhdGE6YW55LCBub3RTZXRUYXJnZXQ6Ym9vbGVhbik6Ym9vbGVhbjtcblxuICAgICAgICBwdWJsaWMgdHJpZ2dlciguLi5hcmdzKTpib29sZWFuIHtcbiAgICAgICAgICAgIHZhciBldmVudDpFdmVudCA9IG51bGw7XG5cbiAgICAgICAgICAgIGlmKGFyZ3MubGVuZ3RoID09PSAxIHx8IGFyZ3MubGVuZ3RoID09PSAyKXtcbiAgICAgICAgICAgICAgICBsZXQgdXNlckRhdGEgPSBudWxsO1xuXG4gICAgICAgICAgICAgICAgaWYoYXJncy5sZW5ndGggPT09IDEpe1xuICAgICAgICAgICAgICAgICAgICBldmVudCA9IGFyZ3NbMF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICAgICAgICAgIGV2ZW50ID0gYXJnc1swXTtcbiAgICAgICAgICAgICAgICAgICAgdXNlckRhdGEgPSBhcmdzWzFdO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl90cmlnZ2VyRXZlbnRIYW5kbGVyKGV2ZW50LCB1c2VyRGF0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmKGFyZ3MubGVuZ3RoID09PSAzIHx8IGFyZ3MubGVuZ3RoID09PSA0KXtcbiAgICAgICAgICAgICAgICBsZXQgdGFyZ2V0ID0gbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgdXNlckRhdGEgPSBudWxsLFxuICAgICAgICAgICAgICAgICAgICBub3RTZXRUYXJnZXQgPSBudWxsO1xuXG4gICAgICAgICAgICAgICAgaWYoYXJncy5sZW5ndGggPT09IDMpe1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXQgPSBhcmdzWzBdO1xuICAgICAgICAgICAgICAgICAgICBldmVudCA9IGFyZ3NbMV07XG4gICAgICAgICAgICAgICAgICAgIG5vdFNldFRhcmdldCA9IGFyZ3NbMl07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldCA9IGFyZ3NbMF07XG4gICAgICAgICAgICAgICAgICAgIGV2ZW50ID0gYXJnc1sxXTtcbiAgICAgICAgICAgICAgICAgICAgdXNlckRhdGEgPSBhcmdzWzJdO1xuICAgICAgICAgICAgICAgICAgICBub3RTZXRUYXJnZXQgPSBhcmdzWzNdO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl90cmlnZ2VyVGFyZ2V0QW5kRXZlbnRIYW5kbGVyKHRhcmdldCwgZXZlbnQsIHVzZXJEYXRhLCBub3RTZXRUYXJnZXQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF90cmlnZ2VyRXZlbnRIYW5kbGVyKGV2ZW50LCB1c2VyRGF0YSl7XG4gICAgICAgICAgICB2YXIgcmVnaXN0ZXJEYXRhTGlzdDp3ZENiLkNvbGxlY3Rpb248Q3VzdG9tRXZlbnRSZWdpc3RlckRhdGE+ID0gbnVsbCxcbiAgICAgICAgICAgICAgICBzZWxmID0gdGhpcztcblxuICAgICAgICAgICAgcmVnaXN0ZXJEYXRhTGlzdCA9IEN1c3RvbUV2ZW50UmVnaXN0ZXIuZ2V0SW5zdGFuY2UoKS5nZXRFdmVudFJlZ2lzdGVyRGF0YUxpc3QoZXZlbnQubmFtZSk7XG5cbiAgICAgICAgICAgIGlmIChyZWdpc3RlckRhdGFMaXN0ID09PSBudWxsIHx8IHJlZ2lzdGVyRGF0YUxpc3QuZ2V0Q291bnQoKT09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZWdpc3RlckRhdGFMaXN0LmZvckVhY2goKHJlZ2lzdGVyRGF0YTpDdXN0b21FdmVudFJlZ2lzdGVyRGF0YSkgPT4ge1xuICAgICAgICAgICAgICAgIC8vdmFyIGV2ZW50Q29weSA9IGV2ZW50LmNvcHkoKTtcbiAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgIC8vZXZlbnRDb3B5LmN1cnJlbnRUYXJnZXQgPSByZWdpc3RlckRhdGEudGFyZ2V0O1xuICAgICAgICAgICAgICAgIC8vZXZlbnRDb3B5LnRhcmdldCA9IHJlZ2lzdGVyRGF0YS50YXJnZXQ7XG4gICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAvL3NlbGYuX3NldFVzZXJEYXRhKGV2ZW50Q29weSwgdXNlckRhdGEpO1xuICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgLy9yZWdpc3RlckRhdGEuaGFuZGxlcihldmVudENvcHkpO1xuICAgICAgICAgICAgICAgIGV2ZW50LmN1cnJlbnRUYXJnZXQgPSByZWdpc3RlckRhdGEudGFyZ2V0O1xuICAgICAgICAgICAgICAgIGV2ZW50LnRhcmdldCA9IHJlZ2lzdGVyRGF0YS50YXJnZXQ7XG5cbiAgICAgICAgICAgICAgICBzZWxmLl9zZXRVc2VyRGF0YShldmVudCwgdXNlckRhdGEpO1xuXG4gICAgICAgICAgICAgICAgcmVnaXN0ZXJEYXRhLmhhbmRsZXIoZXZlbnQpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfdHJpZ2dlclRhcmdldEFuZEV2ZW50SGFuZGxlcih0YXJnZXQsIGV2ZW50LCB1c2VyRGF0YSwgbm90U2V0VGFyZ2V0KXtcbiAgICAgICAgICAgIHZhciByZWdpc3RlckRhdGFMaXN0OndkQ2IuQ29sbGVjdGlvbjxDdXN0b21FdmVudFJlZ2lzdGVyRGF0YT4gPSBudWxsLFxuICAgICAgICAgICAgICAgIGlzU3RvcFByb3BhZ2F0aW9uID0gZmFsc2UsXG4gICAgICAgICAgICAgICAgc2VsZiA9IHRoaXM7XG5cbiAgICAgICAgICAgIGlmKCFub3RTZXRUYXJnZXQpe1xuICAgICAgICAgICAgICAgIGV2ZW50LnRhcmdldCA9IHRhcmdldDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmVnaXN0ZXJEYXRhTGlzdCA9IEN1c3RvbUV2ZW50UmVnaXN0ZXIuZ2V0SW5zdGFuY2UoKS5nZXRFdmVudFJlZ2lzdGVyRGF0YUxpc3QodGFyZ2V0LCBldmVudC5uYW1lKTtcblxuICAgICAgICAgICAgaWYgKHJlZ2lzdGVyRGF0YUxpc3QgPT09IG51bGwgfHwgcmVnaXN0ZXJEYXRhTGlzdC5nZXRDb3VudCgpPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJlZ2lzdGVyRGF0YUxpc3QuZm9yRWFjaCgocmVnaXN0ZXJEYXRhOkN1c3RvbUV2ZW50UmVnaXN0ZXJEYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgLy92YXIgZXZlbnRDb3B5ID0gZXZlbnQuY29weSgpO1xuXG4gICAgICAgICAgICAgICAgLy9ldmVudENvcHkuY3VycmVudFRhcmdldCA9IHJlZ2lzdGVyRGF0YS50YXJnZXQ7XG4gICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAvL3NlbGYuX3NldFVzZXJEYXRhKGV2ZW50Q29weSwgdXNlckRhdGEpO1xuICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgLy9yZWdpc3RlckRhdGEuaGFuZGxlcihldmVudENvcHkpO1xuICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgLy9pZihldmVudENvcHkuaXNTdG9wUHJvcGFnYXRpb24pe1xuICAgICAgICAgICAgICAgIC8vICAgIGlzU3RvcFByb3BhZ2F0aW9uID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAvL31cblxuXG5cbiAgICAgICAgICAgICAgICBldmVudC5jdXJyZW50VGFyZ2V0ID0gcmVnaXN0ZXJEYXRhLnRhcmdldDtcblxuICAgICAgICAgICAgICAgIHNlbGYuX3NldFVzZXJEYXRhKGV2ZW50LCB1c2VyRGF0YSk7XG5cbiAgICAgICAgICAgICAgICByZWdpc3RlckRhdGEuaGFuZGxlcihldmVudCk7XG5cbiAgICAgICAgICAgICAgICBpZihldmVudC5pc1N0b3BQcm9wYWdhdGlvbil7XG4gICAgICAgICAgICAgICAgICAgIGlzU3RvcFByb3BhZ2F0aW9uID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmV0dXJuIGlzU3RvcFByb3BhZ2F0aW9uO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfc2V0VXNlckRhdGEoZXZlbnQ6Q3VzdG9tRXZlbnQsIHVzZXJEYXRhKXtcbiAgICAgICAgICAgIGlmKHVzZXJEYXRhKXtcbiAgICAgICAgICAgICAgICBldmVudC51c2VyRGF0YSA9IHVzZXJEYXRhO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuIiwibW9kdWxlIHdkIHtcbiAgICBleHBvcnQgYWJzdHJhY3QgY2xhc3MgRXZlbnREaXNwYXRjaGVyIHtcbiAgICAgICAgcHVibGljIGFic3RyYWN0IHRyaWdnZXIoLi4uYXJncyk6YW55O1xuICAgIH1cbn1cblxuIiwibW9kdWxlIHdkIHtcbiAgICBleHBvcnQgY2xhc3MgQ3VzdG9tRXZlbnREaXNwYXRjaGVyIGV4dGVuZHMgRXZlbnREaXNwYXRjaGVye1xuICAgICAgICBwcml2YXRlIHN0YXRpYyBfaW5zdGFuY2UgPSBudWxsO1xuXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgZ2V0SW5zdGFuY2UoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5faW5zdGFuY2UgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9pbnN0YW5jZSA9IG5ldyB0aGlzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5faW5zdGFuY2U7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgdHJpZ2dlcihldmVudDpFdmVudCk6Ym9vbGVhbjtcblxuICAgICAgICBwdWJsaWMgdHJpZ2dlcihldmVudDpFdmVudCwgdXNlckRhdGE6YW55KTpib29sZWFuO1xuICAgICAgICBwdWJsaWMgdHJpZ2dlcih0YXJnZXQ6RW50aXR5T2JqZWN0LCBldmVudDpFdmVudCk6Ym9vbGVhbjtcblxuICAgICAgICBwdWJsaWMgdHJpZ2dlcih0YXJnZXQ6RW50aXR5T2JqZWN0LCBldmVudDpFdmVudCwgbm90U2V0VGFyZ2V0OmJvb2xlYW4pOmJvb2xlYW47XG4gICAgICAgIHB1YmxpYyB0cmlnZ2VyKHRhcmdldDpFbnRpdHlPYmplY3QsIGV2ZW50OkV2ZW50LCB1c2VyRGF0YTphbnkpOmJvb2xlYW47XG5cbiAgICAgICAgcHVibGljIHRyaWdnZXIodGFyZ2V0OkVudGl0eU9iamVjdCwgZXZlbnQ6RXZlbnQsIHVzZXJEYXRhOmFueSwgbm90U2V0VGFyZ2V0OmJvb2xlYW4pOmJvb2xlYW47XG5cbiAgICAgICAgcHVibGljIHRyaWdnZXIoLi4uYXJncyk6Ym9vbGVhbiB7XG4gICAgICAgICAgICBpZihhcmdzLmxlbmd0aCA9PT0gMSl7XG4gICAgICAgICAgICAgICAgbGV0IGV2ZW50ID0gYXJnc1swXSxcbiAgICAgICAgICAgICAgICAgICAgZXZlbnRUeXBlID0gZXZlbnQudHlwZTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBFdmVudEhhbmRsZXJGYWN0b3J5LmNyZWF0ZUV2ZW50SGFuZGxlcihldmVudFR5cGUpXG4gICAgICAgICAgICAgICAgICAgIC50cmlnZ2VyKGV2ZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYoYXJncy5sZW5ndGggPT09IDIgJiYgKGFyZ3NbMF0gaW5zdGFuY2VvZiBFdmVudCkpe1xuICAgICAgICAgICAgICAgIGxldCBldmVudCA9IGFyZ3NbMF0sXG4gICAgICAgICAgICAgICAgICAgIHVzZXJEYXRhID0gYXJnc1sxXSxcbiAgICAgICAgICAgICAgICAgICAgZXZlbnRUeXBlID0gZXZlbnQudHlwZTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBFdmVudEhhbmRsZXJGYWN0b3J5LmNyZWF0ZUV2ZW50SGFuZGxlcihldmVudFR5cGUpXG4gICAgICAgICAgICAgICAgICAgIC50cmlnZ2VyKGV2ZW50LCB1c2VyRGF0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmKChhcmdzLmxlbmd0aCA9PT0gMiAmJiBhcmdzWzBdIGluc3RhbmNlb2YgRW50aXR5T2JqZWN0KSB8fCAoYXJncy5sZW5ndGggPT09IDMgJiYgSnVkZ2VVdGlscy5pc0Jvb2xlYW4oYXJnc1syXSkpKXtcbiAgICAgICAgICAgICAgICBsZXQgdGFyZ2V0ID0gYXJnc1swXSxcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQgPSBhcmdzWzFdLFxuICAgICAgICAgICAgICAgICAgICBub3RTZXRUYXJnZXQgPSBhcmdzWzJdID09PSB2b2lkIDAgPyBmYWxzZSA6IGFyZ3NbMl0sXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50VHlwZSA9IGV2ZW50LnR5cGU7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gRXZlbnRIYW5kbGVyRmFjdG9yeS5jcmVhdGVFdmVudEhhbmRsZXIoZXZlbnRUeXBlKVxuICAgICAgICAgICAgICAgICAgICAudHJpZ2dlcih0YXJnZXQsIGV2ZW50LCBub3RTZXRUYXJnZXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZihhcmdzLmxlbmd0aCA9PT0gMyB8fCBhcmdzLmxlbmd0aCA9PT0gNCl7XG4gICAgICAgICAgICAgICAgbGV0IHRhcmdldCA9IGFyZ3NbMF0sXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50ID0gYXJnc1sxXSxcbiAgICAgICAgICAgICAgICAgICAgdXNlckRhdGEgPSBhcmdzWzJdLFxuICAgICAgICAgICAgICAgICAgICBub3RTZXRUYXJnZXQgPSBhcmdzWzNdID09PSB2b2lkIDAgPyBmYWxzZSA6IGFyZ3NbM10sXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50VHlwZSA9IGV2ZW50LnR5cGU7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gRXZlbnRIYW5kbGVyRmFjdG9yeS5jcmVhdGVFdmVudEhhbmRsZXIoZXZlbnRUeXBlKVxuICAgICAgICAgICAgICAgICAgICAudHJpZ2dlcih0YXJnZXQsIGV2ZW50LCB1c2VyRGF0YSwgbm90U2V0VGFyZ2V0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiB0cmFuc2ZlciBldmVudCB1cFxuICAgICAgICAgKiBAcGFyYW0gdGFyZ2V0XG4gICAgICAgICAqIEBwYXJhbSBldmVudE9iamVjdFxuICAgICAgICAgKi9cbiAgICAgICAgcHVibGljIGVtaXQodGFyZ2V0OkVudGl0eU9iamVjdCwgZXZlbnRPYmplY3Q6RXZlbnQsIHVzZXJEYXRhPzphbnkpIHtcbiAgICAgICAgICAgIHZhciBpc1N0b3BQcm9wYWdhdGlvbiA9IGZhbHNlO1xuXG4gICAgICAgICAgICBpZighdGFyZ2V0KXtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGV2ZW50T2JqZWN0LnBoYXNlID0gRXZlbnRQaGFzZS5FTUlUO1xuICAgICAgICAgICAgZXZlbnRPYmplY3QudGFyZ2V0ID0gdGFyZ2V0O1xuXG4gICAgICAgICAgICBkb3tcbiAgICAgICAgICAgICAgICBpc1N0b3BQcm9wYWdhdGlvbiA9IHRoaXMuX3RyaWdnZXJXaXRoVXNlckRhdGEodGFyZ2V0LCBldmVudE9iamVjdCwgdXNlckRhdGEsIHRydWUpO1xuXG4gICAgICAgICAgICAgICAgaWYoaXNTdG9wUHJvcGFnYXRpb24pe1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGFyZ2V0ID0gdGFyZ2V0LmJ1YmJsZVBhcmVudDtcbiAgICAgICAgICAgIH13aGlsZSh0YXJnZXQpO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIHRyYW5zZmVyIGV2ZW50IGRvd25cbiAgICAgICAgICogQHBhcmFtIHRhcmdldFxuICAgICAgICAgKiBAcGFyYW0gZXZlbnRPYmplY3RcbiAgICAgICAgICovXG4gICAgICAgIHB1YmxpYyBicm9hZGNhc3QodGFyZ2V0OkVudGl0eU9iamVjdCwgZXZlbnRPYmplY3Q6RXZlbnQsIHVzZXJEYXRhPzphbnkpIHtcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgICAgIHZhciBpdGVyYXRvciA9IChvYmo6RW50aXR5T2JqZWN0KSA9PiB7XG4gICAgICAgICAgICAgICAgdmFyIGNoaWxkcmVuOndkQ2IuQ29sbGVjdGlvbjxFbnRpdHlPYmplY3Q+ID0gb2JqLmdldENoaWxkcmVuKCk7XG5cbiAgICAgICAgICAgICAgICBpZihjaGlsZHJlbi5nZXRDb3VudCgpID09PSAwKXtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNoaWxkcmVuLmZvckVhY2goKGNoaWxkOkVudGl0eU9iamVjdCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBzZWxmLl90cmlnZ2VyV2l0aFVzZXJEYXRhKGNoaWxkLCBldmVudE9iamVjdCwgdXNlckRhdGEsIHRydWUpO1xuXG4gICAgICAgICAgICAgICAgICAgIGl0ZXJhdG9yKGNoaWxkKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYoIXRhcmdldCl7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBldmVudE9iamVjdC5waGFzZSA9IEV2ZW50UGhhc2UuQlJPQURDQVNUO1xuICAgICAgICAgICAgZXZlbnRPYmplY3QudGFyZ2V0ID0gdGFyZ2V0O1xuXG4gICAgICAgICAgICB0aGlzLl90cmlnZ2VyV2l0aFVzZXJEYXRhKHRhcmdldCwgZXZlbnRPYmplY3QsIHVzZXJEYXRhLCB0cnVlKTtcblxuICAgICAgICAgICAgaXRlcmF0b3IodGFyZ2V0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX3RyaWdnZXJXaXRoVXNlckRhdGEodGFyZ2V0LCBldmVudCwgdXNlckRhdGEsIG5vdFNldFRhcmdldCl7XG4gICAgICAgICAgICByZXR1cm4gdXNlckRhdGEgPyB0aGlzLnRyaWdnZXIodGFyZ2V0LCBldmVudCwgdXNlckRhdGEsIG5vdFNldFRhcmdldClcbiAgICAgICAgICAgICAgICA6IHRoaXMudHJpZ2dlcih0YXJnZXQsIGV2ZW50LCBub3RTZXRUYXJnZXQpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4iLCJtb2R1bGUgd2Qge1xuICAgIGV4cG9ydCBjbGFzcyBEb21FdmVudERpc3BhdGNoZXIgZXh0ZW5kcyBFdmVudERpc3BhdGNoZXJ7XG4gICAgICAgIHByaXZhdGUgc3RhdGljIF9pbnN0YW5jZSA9IG51bGw7XG5cbiAgICAgICAgcHVibGljIHN0YXRpYyBnZXRJbnN0YW5jZSgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9pbnN0YW5jZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2luc3RhbmNlID0gbmV3IHRoaXMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9pbnN0YW5jZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyB0cmlnZ2VyKGV2ZW50OkV2ZW50KTp2b2lkO1xuICAgICAgICBwdWJsaWMgdHJpZ2dlcihkb206SFRNTEVsZW1lbnQsIGV2ZW50OkV2ZW50KTp2b2lkO1xuXG4gICAgICAgIHB1YmxpYyB0cmlnZ2VyKC4uLmFyZ3MpOmFueSB7XG4gICAgICAgICAgICBpZihhcmdzLmxlbmd0aCA9PT0gMSl7XG4gICAgICAgICAgICAgICAgbGV0IGV2ZW50ID0gYXJnc1swXSxcbiAgICAgICAgICAgICAgICAgICAgZXZlbnRUeXBlID0gZXZlbnQudHlwZTtcblxuICAgICAgICAgICAgICAgIEV2ZW50SGFuZGxlckZhY3RvcnkuY3JlYXRlRXZlbnRIYW5kbGVyKGV2ZW50VHlwZSlcbiAgICAgICAgICAgICAgICAgICAgLnRyaWdnZXIoZXZlbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZihhcmdzLmxlbmd0aCA9PT0gMiAmJiBKdWRnZVV0aWxzLmlzRG9tKGFyZ3NbMF0pKXtcbiAgICAgICAgICAgICAgICBsZXQgZG9tID0gYXJnc1swXSxcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQgPSBhcmdzWzFdLFxuICAgICAgICAgICAgICAgICAgICBldmVudFR5cGUgPSBldmVudC50eXBlO1xuXG4gICAgICAgICAgICAgICAgRXZlbnRIYW5kbGVyRmFjdG9yeS5jcmVhdGVFdmVudEhhbmRsZXIoZXZlbnRUeXBlKVxuICAgICAgICAgICAgICAgICAgICAudHJpZ2dlcihkb20sIGV2ZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cblxuIiwibW9kdWxlIHdkIHtcbiAgICBleHBvcnQgYWJzdHJhY3QgY2xhc3MgRXZlbnRSZWdpc3RlciB7XG4gICAgICAgIHByb3RlY3RlZCBsaXN0ZW5lck1hcDpFdmVudExpc3RlbmVyTWFwID0gQUJTVFJBQ1RfQVRUUklCVVRFO1xuXG4gICAgICAgIHB1YmxpYyBhYnN0cmFjdCByZWdpc3RlciguLi5hcmdzKTp2b2lkO1xuICAgICAgICBwdWJsaWMgYWJzdHJhY3QgcmVtb3ZlKC4uLmFyZ3MpOnZvaWQ7XG5cbiAgICAgICAgcHVibGljIGdldEV2ZW50UmVnaXN0ZXJEYXRhTGlzdChldmVudE5hbWU6RXZlbnROYW1lKTphbnk7XG5cbiAgICAgICAgcHVibGljIGdldEV2ZW50UmVnaXN0ZXJEYXRhTGlzdChjdXJyZW50VGFyZ2V0OkVudGl0eU9iamVjdCwgZXZlbnROYW1lOkV2ZW50TmFtZSk6YW55O1xuICAgICAgICBwdWJsaWMgZ2V0RXZlbnRSZWdpc3RlckRhdGFMaXN0KGRvbTpIVE1MRWxlbWVudCwgZXZlbnROYW1lOkV2ZW50TmFtZSk6YW55O1xuXG4gICAgICAgIHB1YmxpYyBnZXRFdmVudFJlZ2lzdGVyRGF0YUxpc3QoLi4uYXJncykge1xuICAgICAgICAgICAgdmFyIHJlc3VsdDp3ZENiLkNvbGxlY3Rpb248RXZlbnRSZWdpc3RlckRhdGE+ID0gdGhpcy5saXN0ZW5lck1hcC5nZXRDaGlsZC5hcHBseSh0aGlzLmxpc3RlbmVyTWFwLCBhcmdzKTtcblxuICAgICAgICAgICAgaWYgKCFyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdC5zb3J0KGZ1bmN0aW9uIChkYXRhQSwgZGF0YUIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZGF0YUIucHJpb3JpdHkgLSBkYXRhQS5wcmlvcml0eTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGZpbHRlcihmdW5jOkZ1bmN0aW9uKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5saXN0ZW5lck1hcC5maWx0ZXIoZnVuYyk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgZm9yRWFjaChmdW5jOkZ1bmN0aW9uKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5saXN0ZW5lck1hcC5mb3JFYWNoKGZ1bmMpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGdldENoaWxkKGV2ZW50TmFtZTpFdmVudE5hbWUpO1xuICAgICAgICBwdWJsaWMgZ2V0Q2hpbGQodGFyZ2V0OkVudGl0eU9iamVjdCk7XG5cbiAgICAgICAgcHVibGljIGdldENoaWxkKHRhcmdldDpFbnRpdHlPYmplY3QsIGV2ZW50TmFtZTpFdmVudE5hbWUpO1xuICAgICAgICBwdWJsaWMgZ2V0Q2hpbGQoZG9tOkhUTUxFbGVtZW50LCBldmVudE5hbWU6RXZlbnROYW1lKTtcblxuICAgICAgICBwdWJsaWMgZ2V0Q2hpbGQoLi4uYXJncykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubGlzdGVuZXJNYXAuZ2V0Q2hpbGQuYXBwbHkoXG4gICAgICAgICAgICAgICAgdGhpcy5saXN0ZW5lck1hcCxcbiAgICAgICAgICAgICAgICBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDApXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGdldEV2ZW50TmFtZUZyb21LZXkoa2V5OnN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubGlzdGVuZXJNYXAuZ2V0RXZlbnROYW1lRnJvbUtleShrZXkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZXhwb3J0IHR5cGUgRXZlbnRSZWdpc3RlckRhdGEgPSB7XG4gICAgICAgIC8vdXNlcidzIGV2ZW50IGhhbmRsZXJcbiAgICAgICAgb3JpZ2luSGFuZGxlcjogRnVuY3Rpb24sXG4gICAgICAgIC8vd3JhcGVkIHVzZXIncyBldmVudCBoYW5kbGVyXG4gICAgICAgIGhhbmRsZXI6RnVuY3Rpb24sXG4gICAgICAgIC8vZG9tIGV2ZW50IGhhbmRsZXJcbiAgICAgICAgZG9tSGFuZGxlcjpGdW5jdGlvbixcbiAgICAgICAgcHJpb3JpdHk6bnVtYmVyXG4gICAgfTtcbn1cbiIsIm1vZHVsZSB3ZCB7XG4gICAgZXhwb3J0IGNsYXNzIEN1c3RvbUV2ZW50UmVnaXN0ZXIgZXh0ZW5kcyBFdmVudFJlZ2lzdGVye1xuICAgICAgICBwcml2YXRlIHN0YXRpYyBfaW5zdGFuY2UgPSBudWxsO1xuXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgZ2V0SW5zdGFuY2UoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5faW5zdGFuY2UgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9pbnN0YW5jZSA9IG5ldyB0aGlzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5faW5zdGFuY2U7XG4gICAgICAgIH1cblxuXG4gICAgICAgIHByb3RlY3RlZCBsaXN0ZW5lck1hcDpDdXN0b21FdmVudExpc3RlbmVyTWFwID0gQ3VzdG9tRXZlbnRMaXN0ZW5lck1hcC5jcmVhdGUoKTtcblxuXG4gICAgICAgIHB1YmxpYyByZWdpc3Rlcih0YXJnZXQ6RW50aXR5T2JqZWN0LCBldmVudE5hbWU6RXZlbnROYW1lLCBoYW5kbGVyOkZ1bmN0aW9uLCBvcmlnaW5IYW5kbGVyOkZ1bmN0aW9uLCBkb21IYW5kbGVyOkZ1bmN0aW9uLCBwcmlvcml0eTpudW1iZXIpIHtcbiAgICAgICAgICAgIHRoaXMubGlzdGVuZXJNYXAuYXBwZW5kQ2hpbGQodGFyZ2V0LCBldmVudE5hbWUsIDxDdXN0b21FdmVudFJlZ2lzdGVyRGF0YT57XG4gICAgICAgICAgICAgICAgdGFyZ2V0OiB0YXJnZXQsXG4gICAgICAgICAgICAgICAgZXZlbnROYW1lOiBldmVudE5hbWUsXG4gICAgICAgICAgICAgICAgaGFuZGxlcjogaGFuZGxlcixcbiAgICAgICAgICAgICAgICBvcmlnaW5IYW5kbGVyOiBvcmlnaW5IYW5kbGVyLFxuICAgICAgICAgICAgICAgIGRvbUhhbmRsZXI6IGRvbUhhbmRsZXIsXG4gICAgICAgICAgICAgICAgcHJpb3JpdHk6IHByaW9yaXR5XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyByZW1vdmUoZXZlbnROYW1lOkV2ZW50TmFtZSk7XG4gICAgICAgIHB1YmxpYyByZW1vdmUodGFyZ2V0OkVudGl0eU9iamVjdCk7XG5cbiAgICAgICAgcHVibGljIHJlbW92ZShldmVudE5hbWU6RXZlbnROYW1lLCBoYW5kbGVyOkZ1bmN0aW9uKTtcbiAgICAgICAgcHVibGljIHJlbW92ZSh1aWQ6bnVtYmVyLCBldmVudE5hbWU6RXZlbnROYW1lKTtcbiAgICAgICAgcHVibGljIHJlbW92ZSh0YXJnZXQ6RW50aXR5T2JqZWN0LCBldmVudE5hbWU6RXZlbnROYW1lKTtcblxuICAgICAgICBwdWJsaWMgcmVtb3ZlKHRhcmdldDpFbnRpdHlPYmplY3QsIGV2ZW50TmFtZTpFdmVudE5hbWUsIGhhbmRsZXI6RnVuY3Rpb24pO1xuXG5cbiAgICAgICAgcHVibGljIHJlbW92ZSguLi5hcmdzKSB7XG4gICAgICAgICAgICB2YXIgdGFyZ2V0ID0gYXJnc1swXTtcblxuICAgICAgICAgICAgaWYgKGFyZ3MubGVuZ3RoID09PSAxICYmIEp1ZGdlVXRpbHMuaXNTdHJpbmcoYXJnc1swXSkpIHtcbiAgICAgICAgICAgICAgICBsZXQgZXZlbnROYW1lID0gYXJnc1swXTtcblxuICAgICAgICAgICAgICAgIHRoaXMubGlzdGVuZXJNYXAucmVtb3ZlQ2hpbGQoZXZlbnROYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGFyZ3MubGVuZ3RoID09PSAxICYmIGFyZ3NbMF0gaW5zdGFuY2VvZiBFbnRpdHlPYmplY3QpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmxpc3RlbmVyTWFwLnJlbW92ZUNoaWxkKHRhcmdldCk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLl9oYW5kbGVBZnRlckFsbEV2ZW50SGFuZGxlclJlbW92ZWQodGFyZ2V0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGFyZ3MubGVuZ3RoID09PSAyICYmIEp1ZGdlVXRpbHMuaXNGdW5jdGlvbihhcmdzWzFdKSkge1xuICAgICAgICAgICAgICAgIGxldCBldmVudE5hbWUgPSBhcmdzWzBdLFxuICAgICAgICAgICAgICAgICAgICBoYW5kbGVyID0gYXJnc1sxXTtcblxuICAgICAgICAgICAgICAgIHRoaXMubGlzdGVuZXJNYXAucmVtb3ZlQ2hpbGQoZXZlbnROYW1lLCBoYW5kbGVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGFyZ3MubGVuZ3RoID09PSAyICYmIEp1ZGdlVXRpbHMuaXNOdW1iZXIoYXJnc1swXSkpIHtcbiAgICAgICAgICAgICAgICBsZXQgdWlkID0gYXJnc1swXSxcbiAgICAgICAgICAgICAgICAgICAgZXZlbnROYW1lID0gYXJnc1sxXTtcblxuICAgICAgICAgICAgICAgIHRoaXMubGlzdGVuZXJNYXAucmVtb3ZlQ2hpbGQodWlkLCBldmVudE5hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoKGFyZ3MubGVuZ3RoID09PSAyICYmIGFyZ3NbMF0gaW5zdGFuY2VvZiBFbnRpdHlPYmplY3QpIHx8IGFyZ3MubGVuZ3RoID09PSAzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5saXN0ZW5lck1hcC5yZW1vdmVDaGlsZC5hcHBseSh0aGlzLmxpc3RlbmVyTWFwLCBhcmdzKTtcblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9pc0FsbEV2ZW50SGFuZGxlclJlbW92ZWQodGFyZ2V0KSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9oYW5kbGVBZnRlckFsbEV2ZW50SGFuZGxlclJlbW92ZWQodGFyZ2V0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgc2V0QnViYmxlUGFyZW50KHRhcmdldDpFbnRpdHlPYmplY3QsIHBhcmVudDpFbnRpdHlPYmplY3QpIHtcbiAgICAgICAgICAgIHRhcmdldC5idWJibGVQYXJlbnQgPSBwYXJlbnQ7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgZ2V0VWlkRnJvbUtleShrZXk6c3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5saXN0ZW5lck1hcC5nZXRVaWRGcm9tS2V5KGtleSk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgaXNUYXJnZXQoa2V5OnN0cmluZywgdGFyZ2V0OkVudGl0eU9iamVjdCwgbGlzdDp3ZENiLkNvbGxlY3Rpb248Q3VzdG9tRXZlbnRSZWdpc3RlckRhdGE+KSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5saXN0ZW5lck1hcC5pc1RhcmdldChrZXksIHRhcmdldCwgbGlzdCk7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9pc0FsbEV2ZW50SGFuZGxlclJlbW92ZWQodGFyZ2V0OkVudGl0eU9iamVjdCkge1xuICAgICAgICAgICAgcmV0dXJuICF0aGlzLmxpc3RlbmVyTWFwLmhhc0NoaWxkKChsaXN0OndkQ2IuQ29sbGVjdGlvbjxDdXN0b21FdmVudFJlZ2lzdGVyRGF0YT4sIGtleTpzdHJpbmcpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4ga2V5LmluZGV4T2YoU3RyaW5nKHRhcmdldC51aWQpKSA+IC0xICYmIChsaXN0ICYmIGxpc3QuZ2V0Q291bnQoKSA+IDApO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9oYW5kbGVBZnRlckFsbEV2ZW50SGFuZGxlclJlbW92ZWQodGFyZ2V0OkVudGl0eU9iamVjdCkge1xuICAgICAgICAgICAgdGhpcy5zZXRCdWJibGVQYXJlbnQodGFyZ2V0LCBudWxsKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGV4cG9ydCB0eXBlIEN1c3RvbUV2ZW50UmVnaXN0ZXJEYXRhID0ge1xuICAgICAgICB0YXJnZXQ6RW50aXR5T2JqZWN0LFxuICAgICAgICAvL3VzZXIncyBldmVudCBoYW5kbGVyXG4gICAgICAgIG9yaWdpbkhhbmRsZXI6IEZ1bmN0aW9uLFxuICAgICAgICAvL3dyYXBlZCB1c2VyJ3MgZXZlbnQgaGFuZGxlclxuICAgICAgICBoYW5kbGVyOkZ1bmN0aW9uLFxuICAgICAgICAvL2RvbSBldmVudCBoYW5kbGVyXG4gICAgICAgIGRvbUhhbmRsZXI6RnVuY3Rpb24sXG4gICAgICAgIHByaW9yaXR5Om51bWJlclxuICAgIH07XG59XG4iLCJtb2R1bGUgd2Qge1xuICAgIGV4cG9ydCBjbGFzcyBEb21FdmVudFJlZ2lzdGVyIGV4dGVuZHMgRXZlbnRSZWdpc3RlciB7XG4gICAgICAgIHByaXZhdGUgc3RhdGljIF9pbnN0YW5jZSA9IG51bGw7XG5cbiAgICAgICAgcHVibGljIHN0YXRpYyBnZXRJbnN0YW5jZSgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9pbnN0YW5jZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2luc3RhbmNlID0gbmV3IHRoaXMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9pbnN0YW5jZTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgcHJvdGVjdGVkIGxpc3RlbmVyTWFwOkRvbUV2ZW50TGlzdGVuZXJNYXAgPSBEb21FdmVudExpc3RlbmVyTWFwLmNyZWF0ZSgpO1xuXG5cbiAgICAgICAgcHVibGljIHJlZ2lzdGVyKGRvbTpIVE1MRWxlbWVudCwgZXZlbnROYW1lOkV2ZW50TmFtZSwgZXZlbnREYXRhOndkQ2IuSGFzaDxhbnk+LCBoYW5kbGVyOkZ1bmN0aW9uLCBvcmlnaW5IYW5kbGVyOkZ1bmN0aW9uLCBkb21IYW5kbGVyOkZ1bmN0aW9uLCBwcmlvcml0eTpudW1iZXIpIHtcbiAgICAgICAgICAgIHRoaXMubGlzdGVuZXJNYXAuYXBwZW5kQ2hpbGQoZG9tLCBldmVudE5hbWUsIDxEb21FdmVudFJlZ2lzdGVyRGF0YT57XG4gICAgICAgICAgICAgICAgZG9tOiBkb20sXG4gICAgICAgICAgICAgICAgZXZlbnROYW1lOiBldmVudE5hbWUsXG4gICAgICAgICAgICAgICAgLy9ldmVudEhhbmRsZXI6IGV2ZW50SGFuZGxlcixcbiAgICAgICAgICAgICAgICBldmVudERhdGE6IGV2ZW50RGF0YSxcbiAgICAgICAgICAgICAgICBoYW5kbGVyOiBoYW5kbGVyLFxuICAgICAgICAgICAgICAgIG9yaWdpbkhhbmRsZXI6IG9yaWdpbkhhbmRsZXIsXG4gICAgICAgICAgICAgICAgZG9tSGFuZGxlcjogZG9tSGFuZGxlcixcbiAgICAgICAgICAgICAgICBwcmlvcml0eTogcHJpb3JpdHlcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHJlbW92ZShldmVudE5hbWU6RXZlbnROYW1lKTtcblxuICAgICAgICBwdWJsaWMgcmVtb3ZlKGV2ZW50TmFtZTpFdmVudE5hbWUsIGhhbmRsZXI6RnVuY3Rpb24pO1xuICAgICAgICBwdWJsaWMgcmVtb3ZlKGRvbTpIVE1MRWxlbWVudCwgZXZlbnROYW1lOkV2ZW50TmFtZSk7XG5cbiAgICAgICAgcHVibGljIHJlbW92ZShkb206SFRNTEVsZW1lbnQsIGV2ZW50TmFtZTpFdmVudE5hbWUsIGhhbmRsZXI6RnVuY3Rpb24pO1xuXG5cbiAgICAgICAgcHVibGljIHJlbW92ZSguLi5hcmdzKSB7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gbnVsbDtcblxuICAgICAgICAgICAgaWYgKGFyZ3MubGVuZ3RoID09PSAxICYmIEp1ZGdlVXRpbHMuaXNTdHJpbmcoYXJnc1swXSkpIHtcbiAgICAgICAgICAgICAgICBsZXQgZXZlbnROYW1lID0gYXJnc1swXTtcblxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMubGlzdGVuZXJNYXAucmVtb3ZlQ2hpbGQoZXZlbnROYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGFyZ3MubGVuZ3RoID09PSAyICYmIEp1ZGdlVXRpbHMuaXNGdW5jdGlvbihhcmdzWzFdKSkge1xuICAgICAgICAgICAgICAgIGxldCBldmVudE5hbWUgPSBhcmdzWzBdLFxuICAgICAgICAgICAgICAgICAgICBoYW5kbGVyID0gYXJnc1sxXTtcblxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMubGlzdGVuZXJNYXAucmVtb3ZlQ2hpbGQoZXZlbnROYW1lLCBoYW5kbGVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKChhcmdzLmxlbmd0aCA9PT0gMiAmJiBKdWRnZVV0aWxzLmlzRG9tKGFyZ3NbMF0pKSB8fCBhcmdzLmxlbmd0aCA9PT0gMykge1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMubGlzdGVuZXJNYXAucmVtb3ZlQ2hpbGQuYXBwbHkodGhpcy5saXN0ZW5lck1hcCwgYXJncyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgaXNCaW5kZWQoZG9tOkhUTUxFbGVtZW50LCBldmVudE5hbWU6RXZlbnROYW1lKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5saXN0ZW5lck1hcC5oYXNDaGlsZChkb20sIGV2ZW50TmFtZSk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgaXNEb20oa2V5OnN0cmluZywgZG9tOkhUTUxFbGVtZW50LCBsaXN0OndkQ2IuQ29sbGVjdGlvbjxEb21FdmVudFJlZ2lzdGVyRGF0YT4pe1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubGlzdGVuZXJNYXAuaXNEb20oa2V5LCBkb20sIGxpc3QpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGdldERvbUhhbmRsZXIoZG9tOkhUTUxFbGVtZW50LCBldmVudE5hbWU6RXZlbnROYW1lKSB7XG4gICAgICAgICAgICB2YXIgbGlzdDp3ZENiLkNvbGxlY3Rpb248RG9tRXZlbnRSZWdpc3RlckRhdGE+ID0gdGhpcy5nZXRDaGlsZChkb20sIGV2ZW50TmFtZSk7XG5cbiAgICAgICAgICAgIGlmIChsaXN0ICYmIGxpc3QuZ2V0Q291bnQoKSA+IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbGlzdC5nZXRDaGlsZCgwKS5kb21IYW5kbGVyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZXhwb3J0IHR5cGUgRG9tRXZlbnRSZWdpc3RlckRhdGEgPSB7XG4gICAgICAgIGRvbT86SFRNTEVsZW1lbnQsXG4gICAgICAgIHRhcmdldD86RW50aXR5T2JqZWN0LFxuICAgICAgICAvL2V2ZW50SGFuZGxlcjpFdmVudEhhbmRsZXIsXG4gICAgICAgIGV2ZW50RGF0YTp3ZENiLkhhc2g8YW55PixcbiAgICAgICAgLy91c2VyJ3MgZXZlbnQgaGFuZGxlclxuICAgICAgICBvcmlnaW5IYW5kbGVyOkZ1bmN0aW9uLFxuICAgICAgICAvL3dyYXBlZCB1c2VyJ3MgZXZlbnQgaGFuZGxlclxuICAgICAgICBoYW5kbGVyOkZ1bmN0aW9uLFxuICAgICAgICAvL2RvbSBldmVudCBoYW5kbGVyXG4gICAgICAgIGRvbUhhbmRsZXI6RnVuY3Rpb24sXG4gICAgICAgIHByaW9yaXR5Om51bWJlclxuICAgIH07XG59XG4iLCJtb2R1bGUgd2Qge1xuICAgIGV4cG9ydCBhYnN0cmFjdCBjbGFzcyBFdmVudEJpbmRlciB7XG4gICAgICAgIHB1YmxpYyBhYnN0cmFjdCBvbiguLi5hcmdzKTp2b2lkO1xuICAgICAgICBwdWJsaWMgYWJzdHJhY3Qgb2ZmKC4uLmFyZ3MpOnZvaWQ7XG4gICAgfVxufVxuIiwibW9kdWxlIHdkIHtcbiAgICBleHBvcnQgY2xhc3MgQ3VzdG9tRXZlbnRCaW5kZXIgZXh0ZW5kcyBFdmVudEJpbmRlcntcbiAgICAgICAgcHJpdmF0ZSBzdGF0aWMgX2luc3RhbmNlID0gbnVsbDtcblxuICAgICAgICBwdWJsaWMgc3RhdGljIGdldEluc3RhbmNlKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2luc3RhbmNlID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5faW5zdGFuY2UgPSBuZXcgdGhpcygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2luc3RhbmNlO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIG9uKGV2ZW50TmFtZTpFdmVudE5hbWV8c3RyaW5nLCBoYW5kbGVyOkZ1bmN0aW9uKTp2b2lkO1xuXG4gICAgICAgIHB1YmxpYyBvbihldmVudE5hbWU6RXZlbnROYW1lfHN0cmluZywgaGFuZGxlcjpGdW5jdGlvbiwgcHJpb3JpdHk6bnVtYmVyKTp2b2lkO1xuICAgICAgICBwdWJsaWMgb24odGFyZ2V0OkVudGl0eU9iamVjdCwgZXZlbnROYW1lOkV2ZW50TmFtZXxzdHJpbmcsIGhhbmRsZXI6RnVuY3Rpb24pOnZvaWQ7XG5cbiAgICAgICAgcHVibGljIG9uKHRhcmdldDpFbnRpdHlPYmplY3QsIGV2ZW50TmFtZTpFdmVudE5hbWV8c3RyaW5nLCBoYW5kbGVyOkZ1bmN0aW9uLCBwcmlvcml0eTpudW1iZXIpOnZvaWQ7XG5cbiAgICAgICAgQHJlcXVpcmUoZnVuY3Rpb24oLi4uYXJncyl7XG4gICAgICAgICAgICBpZihhcmdzLmxlbmd0aCA9PT0gMSl7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmKGFyZ3MubGVuZ3RoID09PSAyKXtcbiAgICAgICAgICAgICAgICBsZXQgZXZlbnROYW1lID0gYXJnc1swXTtcblxuICAgICAgICAgICAgICAgIHRoaXMuX2NoZWNrRXZlbnRTZXBhcmF0b3IoZXZlbnROYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYoYXJncy5sZW5ndGggPT09IDMgJiYgSnVkZ2VVdGlscy5pc1N0cmluZyhhcmdzWzBdKSl7XG4gICAgICAgICAgICAgICAgbGV0IGV2ZW50TmFtZSA9IGFyZ3NbMF07XG5cbiAgICAgICAgICAgICAgICB0aGlzLl9jaGVja0V2ZW50U2VwYXJhdG9yKGV2ZW50TmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmKGFyZ3MubGVuZ3RoID09PSAzICYmIGFyZ3NbMF0gaW5zdGFuY2VvZiBFbnRpdHlPYmplY3Qpe1xuICAgICAgICAgICAgICAgIGxldCBldmVudE5hbWUgPSBhcmdzWzFdO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5fY2hlY2tFdmVudFNlcGFyYXRvcihldmVudE5hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZihhcmdzLmxlbmd0aCA9PT0gNCkge1xuICAgICAgICAgICAgICAgIGxldCBldmVudE5hbWUgPSBhcmdzWzFdO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5fY2hlY2tFdmVudFNlcGFyYXRvcihldmVudE5hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgICBwdWJsaWMgb24oLi4uYXJncykge1xuICAgICAgICAgICAgaWYoYXJncy5sZW5ndGggPT09IDIpe1xuICAgICAgICAgICAgICAgIGxldCBldmVudE5hbWUgPSBhcmdzWzBdLFxuICAgICAgICAgICAgICAgICAgICBoYW5kbGVyID0gYXJnc1sxXTtcblxuICAgICAgICAgICAgICAgIEV2ZW50SGFuZGxlckZhY3RvcnkuY3JlYXRlRXZlbnRIYW5kbGVyKEV2ZW50VGFibGUuZ2V0RXZlbnRUeXBlKGV2ZW50TmFtZSkpXG4gICAgICAgICAgICAgICAgICAgIC5vbihldmVudE5hbWUsIGhhbmRsZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZihhcmdzLmxlbmd0aCA9PT0gMyAmJiBKdWRnZVV0aWxzLmlzU3RyaW5nKGFyZ3NbMF0pKXtcbiAgICAgICAgICAgICAgICBsZXQgZXZlbnROYW1lID0gYXJnc1swXSxcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlciA9IGFyZ3NbMV0sXG4gICAgICAgICAgICAgICAgICAgIHByaW9yaXR5ID0gYXJnc1syXTtcblxuICAgICAgICAgICAgICAgIEV2ZW50SGFuZGxlckZhY3RvcnkuY3JlYXRlRXZlbnRIYW5kbGVyKEV2ZW50VGFibGUuZ2V0RXZlbnRUeXBlKGV2ZW50TmFtZSkpXG4gICAgICAgICAgICAgICAgICAgIC5vbihldmVudE5hbWUsIGhhbmRsZXIsIHByaW9yaXR5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYoYXJncy5sZW5ndGggPT09IDMgJiYgYXJnc1swXSBpbnN0YW5jZW9mIEVudGl0eU9iamVjdCl7XG4gICAgICAgICAgICAgICAgbGV0IHRhcmdldCA9IGFyZ3NbMF0sXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50TmFtZSA9IGFyZ3NbMV0sXG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZXIgPSBhcmdzWzJdO1xuXG4gICAgICAgICAgICAgICAgRXZlbnRIYW5kbGVyRmFjdG9yeS5jcmVhdGVFdmVudEhhbmRsZXIoRXZlbnRUYWJsZS5nZXRFdmVudFR5cGUoZXZlbnROYW1lKSlcbiAgICAgICAgICAgICAgICAgICAgLm9uKHRhcmdldCwgZXZlbnROYW1lLCBoYW5kbGVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYoYXJncy5sZW5ndGggPT09IDQpIHtcbiAgICAgICAgICAgICAgICBsZXQgdGFyZ2V0ID0gYXJnc1swXSxcbiAgICAgICAgICAgICAgICAgICAgZXZlbnROYW1lID0gYXJnc1sxXSxcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlciA9IGFyZ3NbMl0sXG4gICAgICAgICAgICAgICAgICAgIHByaW9yaXR5ID0gYXJnc1szXTtcblxuICAgICAgICAgICAgICAgIEV2ZW50SGFuZGxlckZhY3RvcnkuY3JlYXRlRXZlbnRIYW5kbGVyKEV2ZW50VGFibGUuZ2V0RXZlbnRUeXBlKGV2ZW50TmFtZSkpXG4gICAgICAgICAgICAgICAgICAgIC5vbih0YXJnZXQsIGV2ZW50TmFtZSwgaGFuZGxlciwgcHJpb3JpdHkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIG9mZigpOnZvaWQ7XG5cbiAgICAgICAgcHVibGljIG9mZihldmVudE5hbWU6RXZlbnROYW1lfHN0cmluZyk6dm9pZDtcbiAgICAgICAgcHVibGljIG9mZih0YXJnZXQ6RW50aXR5T2JqZWN0KTp2b2lkO1xuXG4gICAgICAgIHB1YmxpYyBvZmYoZXZlbnROYW1lOkV2ZW50TmFtZXxzdHJpbmcsIGhhbmRsZXI6RnVuY3Rpb24pOnZvaWQ7XG4gICAgICAgIHB1YmxpYyBvZmYodGFyZ2V0OkVudGl0eU9iamVjdCwgZXZlbnROYW1lOkV2ZW50TmFtZXxzdHJpbmcpOnZvaWQ7XG5cbiAgICAgICAgcHVibGljIG9mZih0YXJnZXQ6RW50aXR5T2JqZWN0LCBldmVudE5hbWU6RXZlbnROYW1lfHN0cmluZywgaGFuZGxlcjpGdW5jdGlvbik6dm9pZDtcblxuICAgICAgICBwdWJsaWMgb2ZmKC4uLmFyZ3MpIHtcbiAgICAgICAgICAgIHZhciBldmVudFJlZ2lzdGVyID0gQ3VzdG9tRXZlbnRSZWdpc3Rlci5nZXRJbnN0YW5jZSgpO1xuXG4gICAgICAgICAgICBpZihhcmdzLmxlbmd0aCA9PT0gMCl7XG4gICAgICAgICAgICAgICAgZXZlbnRSZWdpc3Rlci5mb3JFYWNoKChsaXN0OndkQ2IuQ29sbGVjdGlvbjxFdmVudEhhbmRsZXJEYXRhPiwga2V5OnN0cmluZykgPT4ge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZXZlbnROYW1lID0gZXZlbnRSZWdpc3Rlci5nZXRFdmVudE5hbWVGcm9tS2V5KGtleSksXG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRVaWQgPSBldmVudFJlZ2lzdGVyLmdldFVpZEZyb21LZXkoa2V5KTtcblxuICAgICAgICAgICAgICAgICAgICBpZighdGFyZ2V0VWlkKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIEV2ZW50SGFuZGxlckZhY3RvcnkuY3JlYXRlRXZlbnRIYW5kbGVyKEV2ZW50VGFibGUuZ2V0RXZlbnRUeXBlKGV2ZW50TmFtZSkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLm9mZihldmVudE5hbWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICAgICAgICAgICAgICBFdmVudEhhbmRsZXJGYWN0b3J5LmNyZWF0ZUV2ZW50SGFuZGxlcihFdmVudFRhYmxlLmdldEV2ZW50VHlwZShldmVudE5hbWUpKS5vZmYodGFyZ2V0VWlkLCBldmVudE5hbWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmKGFyZ3MubGVuZ3RoID09PSAxICYmIEp1ZGdlVXRpbHMuaXNTdHJpbmcoYXJnc1swXSkpe1xuICAgICAgICAgICAgICAgIGxldCBldmVudE5hbWUgPSBhcmdzWzBdO1xuXG4gICAgICAgICAgICAgICAgZXZlbnRSZWdpc3Rlci5mb3JFYWNoKChsaXN0OndkQ2IuQ29sbGVjdGlvbjxFdmVudEhhbmRsZXJEYXRhPiwga2V5OnN0cmluZykgPT4ge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcmVnaXN0ZXJlZEV2ZW50TmFtZSA9IGV2ZW50UmVnaXN0ZXIuZ2V0RXZlbnROYW1lRnJvbUtleShrZXkpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmKHJlZ2lzdGVyZWRFdmVudE5hbWUgPT09IGV2ZW50TmFtZSl7XG4gICAgICAgICAgICAgICAgICAgICAgICBFdmVudEhhbmRsZXJGYWN0b3J5LmNyZWF0ZUV2ZW50SGFuZGxlcihFdmVudFRhYmxlLmdldEV2ZW50VHlwZShldmVudE5hbWUpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5vZmYoZXZlbnROYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZihhcmdzLmxlbmd0aCA9PT0gMSAmJiBhcmdzWzBdIGluc3RhbmNlb2YgRW50aXR5T2JqZWN0KXtcbiAgICAgICAgICAgICAgICBsZXQgdGFyZ2V0ID0gYXJnc1swXTtcblxuICAgICAgICAgICAgICAgIGV2ZW50UmVnaXN0ZXIuZm9yRWFjaCgobGlzdDp3ZENiLkNvbGxlY3Rpb248Q3VzdG9tRXZlbnRSZWdpc3RlckRhdGE+LCBrZXk6c3RyaW5nKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBldmVudE5hbWUgPSBldmVudFJlZ2lzdGVyLmdldEV2ZW50TmFtZUZyb21LZXkoa2V5KTtcblxuICAgICAgICAgICAgICAgICAgICBpZihldmVudFJlZ2lzdGVyLmlzVGFyZ2V0KGtleSwgdGFyZ2V0LCBsaXN0KSl7XG4gICAgICAgICAgICAgICAgICAgICAgICBFdmVudEhhbmRsZXJGYWN0b3J5LmNyZWF0ZUV2ZW50SGFuZGxlcihFdmVudFRhYmxlLmdldEV2ZW50VHlwZShldmVudE5hbWUpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5vZmYodGFyZ2V0LCBldmVudE5hbWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmKGFyZ3MubGVuZ3RoID09PSAyICYmIEp1ZGdlVXRpbHMuaXNTdHJpbmcoYXJnc1swXSkpe1xuICAgICAgICAgICAgICAgIGxldCBldmVudE5hbWUgPSBhcmdzWzBdLFxuICAgICAgICAgICAgICAgICAgICBoYW5kbGVyID0gYXJnc1sxXTtcblxuICAgICAgICAgICAgICAgIEV2ZW50SGFuZGxlckZhY3RvcnkuY3JlYXRlRXZlbnRIYW5kbGVyKEV2ZW50VGFibGUuZ2V0RXZlbnRUeXBlKGV2ZW50TmFtZSkpXG4gICAgICAgICAgICAgICAgICAgIC5vZmYoZXZlbnROYW1lLCBoYW5kbGVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYoYXJncy5sZW5ndGggPT09IDIgJiYgYXJnc1swXSBpbnN0YW5jZW9mIEVudGl0eU9iamVjdCl7XG4gICAgICAgICAgICAgICAgbGV0IHRhcmdldCA9IGFyZ3NbMF0sXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50TmFtZSA9IGFyZ3NbMV07XG5cbiAgICAgICAgICAgICAgICBFdmVudEhhbmRsZXJGYWN0b3J5LmNyZWF0ZUV2ZW50SGFuZGxlcihFdmVudFRhYmxlLmdldEV2ZW50VHlwZShldmVudE5hbWUpKVxuICAgICAgICAgICAgICAgICAgICAub2ZmKHRhcmdldCwgZXZlbnROYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYoYXJncy5sZW5ndGggPT09IDMgJiYgYXJnc1swXSBpbnN0YW5jZW9mIEVudGl0eU9iamVjdCl7XG4gICAgICAgICAgICAgICAgbGV0IHRhcmdldCA9IGFyZ3NbMF0sXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50TmFtZSA9IGFyZ3NbMV0sXG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZXIgPSBhcmdzWzJdO1xuXG4gICAgICAgICAgICAgICAgRXZlbnRIYW5kbGVyRmFjdG9yeS5jcmVhdGVFdmVudEhhbmRsZXIoRXZlbnRUYWJsZS5nZXRFdmVudFR5cGUoZXZlbnROYW1lKSlcbiAgICAgICAgICAgICAgICAgICAgLm9mZih0YXJnZXQsIGV2ZW50TmFtZSwgaGFuZGxlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9jaGVja0V2ZW50U2VwYXJhdG9yKGV2ZW50TmFtZTpzdHJpbmcpe1xuICAgICAgICAgICAgYXNzZXJ0KGV2ZW50TmFtZS5pbmRleE9mKEN1c3RvbUV2ZW50TGlzdGVuZXJNYXAuZXZlbnRTZXBhcmF0b3IpID09PSAtMSwgTG9nLmluZm8uRlVOQ19TSE9VTERfTk9UKFwiZXZlbnROYW1lXCIsIGBjb250YWluICR7Q3VzdG9tRXZlbnRMaXN0ZW5lck1hcC5ldmVudFNlcGFyYXRvcn1gKSk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJtb2R1bGUgd2Qge1xuICAgIGV4cG9ydCBjbGFzcyBEb21FdmVudEJpbmRlciBleHRlbmRzIEV2ZW50QmluZGVye1xuICAgICAgICBwcml2YXRlIHN0YXRpYyBfaW5zdGFuY2UgPSBudWxsO1xuXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgZ2V0SW5zdGFuY2UoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5faW5zdGFuY2UgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9pbnN0YW5jZSA9IG5ldyB0aGlzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5faW5zdGFuY2U7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgb24obGlzdGVuZXI6e318RXZlbnRMaXN0ZW5lcik6dm9pZDtcblxuICAgICAgICBwdWJsaWMgb24oZXZlbnROYW1lOkV2ZW50TmFtZXxzdHJpbmcsIGhhbmRsZXI6RnVuY3Rpb24pOnZvaWQ7XG4gICAgICAgIHB1YmxpYyBvbihkb206SFRNTEVsZW1lbnQsIGxpc3RlbmVyOnt9fEV2ZW50TGlzdGVuZXIpOnZvaWQ7XG5cbiAgICAgICAgcHVibGljIG9uKGV2ZW50TmFtZTpFdmVudE5hbWV8c3RyaW5nLCBoYW5kbGVyOkZ1bmN0aW9uLCBwcmlvcml0eTpudW1iZXIpOnZvaWQ7XG4gICAgICAgIHB1YmxpYyBvbihkb206SFRNTEVsZW1lbnQsIGV2ZW50TmFtZTpFdmVudE5hbWV8c3RyaW5nLCBoYW5kbGVyOkZ1bmN0aW9uKTp2b2lkO1xuXG4gICAgICAgIHB1YmxpYyBvbihkb206SFRNTEVsZW1lbnQsIGV2ZW50TmFtZTpFdmVudE5hbWV8c3RyaW5nLCBoYW5kbGVyOkZ1bmN0aW9uLCBwcmlvcml0eTpudW1iZXIpOnZvaWQ7XG5cbiAgICAgICAgQHJlcXVpcmUoZnVuY3Rpb24oLi4uYXJncyl7XG4gICAgICAgICAgICBpZihhcmdzLmxlbmd0aCA9PT0gMSl7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmKGFyZ3MubGVuZ3RoID09PSAyKXtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYoYXJncy5sZW5ndGggPT09IDMgJiYgSnVkZ2VVdGlscy5pc1N0cmluZyhhcmdzWzBdKSl7XG4gICAgICAgICAgICAgICAgbGV0IGV2ZW50TmFtZSA9IGFyZ3NbMF07XG5cbiAgICAgICAgICAgICAgICB0aGlzLl9jaGVja0V2ZW50U2VwYXJhdG9yKGV2ZW50TmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmKGFyZ3MubGVuZ3RoID09PSAzICYmIEp1ZGdlVXRpbHMuaXNEb20oYXJnc1swXSkpe1xuICAgICAgICAgICAgICAgIGxldCBldmVudE5hbWUgPSBhcmdzWzFdO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5fY2hlY2tFdmVudFNlcGFyYXRvcihldmVudE5hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZihhcmdzLmxlbmd0aCA9PT0gNCkge1xuICAgICAgICAgICAgICAgIGxldCBldmVudE5hbWUgPSBhcmdzWzFdO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5fY2hlY2tFdmVudFNlcGFyYXRvcihldmVudE5hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgICBwdWJsaWMgb24oLi4uYXJncykge1xuICAgICAgICAgICAgaWYoYXJncy5sZW5ndGggPT09IDEpe1xuICAgICAgICAgICAgICAgIGxldCBsaXN0ZW5lcjpFdmVudExpc3RlbmVyID0gIShhcmdzWzBdIGluc3RhbmNlb2YgRXZlbnRMaXN0ZW5lcikgPyAgRXZlbnRMaXN0ZW5lci5jcmVhdGUoYXJnc1swXSk6IGFyZ3NbMF07XG5cbiAgICAgICAgICAgICAgICBsaXN0ZW5lci5oYW5kbGVyRGF0YUxpc3QuZm9yRWFjaChmdW5jdGlvbiAoaGFuZGxlckRhdGE6RXZlbnRIYW5kbGVyRGF0YSkge1xuICAgICAgICAgICAgICAgICAgICBFdmVudEhhbmRsZXJGYWN0b3J5LmNyZWF0ZUV2ZW50SGFuZGxlcihsaXN0ZW5lci5ldmVudFR5cGUpXG4gICAgICAgICAgICAgICAgICAgICAgICAub24oaGFuZGxlckRhdGEuZXZlbnROYW1lLCBoYW5kbGVyRGF0YS5oYW5kbGVyLCBsaXN0ZW5lci5wcmlvcml0eSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmKGFyZ3MubGVuZ3RoID09PSAyICYmIEp1ZGdlVXRpbHMuaXNTdHJpbmcoYXJnc1swXSkpe1xuICAgICAgICAgICAgICAgIGxldCBldmVudE5hbWUgPSBhcmdzWzBdLFxuICAgICAgICAgICAgICAgICAgICBoYW5kbGVyID0gYXJnc1sxXTtcblxuICAgICAgICAgICAgICAgIEV2ZW50SGFuZGxlckZhY3RvcnkuY3JlYXRlRXZlbnRIYW5kbGVyKEV2ZW50VGFibGUuZ2V0RXZlbnRUeXBlKGV2ZW50TmFtZSkpXG4gICAgICAgICAgICAgICAgICAgIC5vbihldmVudE5hbWUsIGhhbmRsZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZihhcmdzLmxlbmd0aCA9PT0gMiAmJiBKdWRnZVV0aWxzLmlzRG9tKGFyZ3NbMF0pKXtcbiAgICAgICAgICAgICAgICBsZXQgZG9tID0gYXJnc1swXSxcbiAgICAgICAgICAgICAgICAgICAgbGlzdGVuZXI6RXZlbnRMaXN0ZW5lciA9ICEoYXJnc1swXSBpbnN0YW5jZW9mIEV2ZW50TGlzdGVuZXIpID8gIEV2ZW50TGlzdGVuZXIuY3JlYXRlKGFyZ3NbMF0pOiBhcmdzWzBdO1xuXG4gICAgICAgICAgICAgICAgbGlzdGVuZXIuaGFuZGxlckRhdGFMaXN0LmZvckVhY2goZnVuY3Rpb24gKGhhbmRsZXJEYXRhOkV2ZW50SGFuZGxlckRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgRXZlbnRIYW5kbGVyRmFjdG9yeS5jcmVhdGVFdmVudEhhbmRsZXIobGlzdGVuZXIuZXZlbnRUeXBlKVxuICAgICAgICAgICAgICAgICAgICAgICAgLm9uKGRvbSwgaGFuZGxlckRhdGEuZXZlbnROYW1lLCBoYW5kbGVyRGF0YS5oYW5kbGVyLCBsaXN0ZW5lci5wcmlvcml0eSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmKGFyZ3MubGVuZ3RoID09PSAzICYmIEp1ZGdlVXRpbHMuaXNTdHJpbmcoYXJnc1swXSkpe1xuICAgICAgICAgICAgICAgIGxldCBldmVudE5hbWUgPSBhcmdzWzBdLFxuICAgICAgICAgICAgICAgICAgICBoYW5kbGVyID0gYXJnc1sxXSxcbiAgICAgICAgICAgICAgICAgICAgcHJpb3JpdHkgPSBhcmdzWzJdO1xuXG4gICAgICAgICAgICAgICAgRXZlbnRIYW5kbGVyRmFjdG9yeS5jcmVhdGVFdmVudEhhbmRsZXIoRXZlbnRUYWJsZS5nZXRFdmVudFR5cGUoZXZlbnROYW1lKSlcbiAgICAgICAgICAgICAgICAgICAgLm9uKGV2ZW50TmFtZSwgaGFuZGxlciwgcHJpb3JpdHkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZihhcmdzLmxlbmd0aCA9PT0gMyAmJiBKdWRnZVV0aWxzLmlzRG9tKGFyZ3NbMF0pKXtcbiAgICAgICAgICAgICAgICBsZXQgZG9tID0gYXJnc1swXSxcbiAgICAgICAgICAgICAgICAgICAgZXZlbnROYW1lID0gYXJnc1sxXSxcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlciA9IGFyZ3NbMl07XG5cbiAgICAgICAgICAgICAgICBFdmVudEhhbmRsZXJGYWN0b3J5LmNyZWF0ZUV2ZW50SGFuZGxlcihFdmVudFRhYmxlLmdldEV2ZW50VHlwZShldmVudE5hbWUpKVxuICAgICAgICAgICAgICAgICAgICAub24oZG9tLCBldmVudE5hbWUsIGhhbmRsZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZihhcmdzLmxlbmd0aCA9PT0gNCkge1xuICAgICAgICAgICAgICAgIGxldCBkb20gPSBhcmdzWzBdLFxuICAgICAgICAgICAgICAgICAgICBldmVudE5hbWUgPSBhcmdzWzFdLFxuICAgICAgICAgICAgICAgICAgICBoYW5kbGVyID0gYXJnc1syXSxcbiAgICAgICAgICAgICAgICAgICAgcHJpb3JpdHkgPSBhcmdzWzNdO1xuXG4gICAgICAgICAgICAgICAgRXZlbnRIYW5kbGVyRmFjdG9yeS5jcmVhdGVFdmVudEhhbmRsZXIoRXZlbnRUYWJsZS5nZXRFdmVudFR5cGUoZXZlbnROYW1lKSlcbiAgICAgICAgICAgICAgICAgICAgLm9uKGRvbSwgZXZlbnROYW1lLCBoYW5kbGVyLCBwcmlvcml0eSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgb2ZmKCk6dm9pZDtcblxuICAgICAgICBwdWJsaWMgb2ZmKGV2ZW50TmFtZTpFdmVudE5hbWV8c3RyaW5nKTp2b2lkO1xuICAgICAgICBwdWJsaWMgb2ZmKGRvbTpIVE1MRWxlbWVudCk6dm9pZDtcblxuICAgICAgICBwdWJsaWMgb2ZmKGV2ZW50TmFtZTpFdmVudE5hbWV8c3RyaW5nLCBoYW5kbGVyOkZ1bmN0aW9uKTp2b2lkO1xuICAgICAgICBwdWJsaWMgb2ZmKGRvbTpIVE1MRWxlbWVudCwgZXZlbnROYW1lOkV2ZW50TmFtZSk6dm9pZDtcblxuICAgICAgICBwdWJsaWMgb2ZmKGRvbTpIVE1MRWxlbWVudCwgZXZlbnROYW1lOkV2ZW50TmFtZSwgaGFuZGxlcjpGdW5jdGlvbik6dm9pZDtcblxuICAgICAgICBwdWJsaWMgb2ZmKC4uLmFyZ3MpIHtcbiAgICAgICAgICAgIHZhciBldmVudFJlZ2lzdGVyID0gRG9tRXZlbnRSZWdpc3Rlci5nZXRJbnN0YW5jZSgpO1xuXG4gICAgICAgICAgICBpZihhcmdzLmxlbmd0aCA9PT0gMCl7XG4gICAgICAgICAgICAgICAgZXZlbnRSZWdpc3Rlci5mb3JFYWNoKChsaXN0OndkQ2IuQ29sbGVjdGlvbjxFdmVudEhhbmRsZXJEYXRhPiwga2V5OnN0cmluZykgPT4ge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZXZlbnROYW1lID0gZXZlbnRSZWdpc3Rlci5nZXRFdmVudE5hbWVGcm9tS2V5KGtleSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIEV2ZW50SGFuZGxlckZhY3RvcnkuY3JlYXRlRXZlbnRIYW5kbGVyKEV2ZW50VGFibGUuZ2V0RXZlbnRUeXBlKGV2ZW50TmFtZSkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLm9mZihldmVudE5hbWUpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZihhcmdzLmxlbmd0aCA9PT0gMSAmJiBKdWRnZVV0aWxzLmlzU3RyaW5nKGFyZ3NbMF0pKXtcbiAgICAgICAgICAgICAgICBsZXQgZXZlbnROYW1lID0gYXJnc1swXTtcblxuICAgICAgICAgICAgICAgIGV2ZW50UmVnaXN0ZXIuZm9yRWFjaCgobGlzdDp3ZENiLkNvbGxlY3Rpb248RXZlbnRIYW5kbGVyRGF0YT4sIGtleTpzdHJpbmcpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlZ2lzdGVyZWRFdmVudE5hbWUgPSBldmVudFJlZ2lzdGVyLmdldEV2ZW50TmFtZUZyb21LZXkoa2V5KTtcblxuICAgICAgICAgICAgICAgICAgICBpZihyZWdpc3RlcmVkRXZlbnROYW1lID09PSBldmVudE5hbWUpe1xuICAgICAgICAgICAgICAgICAgICAgICAgRXZlbnRIYW5kbGVyRmFjdG9yeS5jcmVhdGVFdmVudEhhbmRsZXIoRXZlbnRUYWJsZS5nZXRFdmVudFR5cGUoZXZlbnROYW1lKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAub2ZmKGV2ZW50TmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYoYXJncy5sZW5ndGggPT09IDEgJiYgSnVkZ2VVdGlscy5pc0RvbShhcmdzWzBdKSl7XG4gICAgICAgICAgICAgICAgbGV0IGRvbSA9IGFyZ3NbMF07XG5cbiAgICAgICAgICAgICAgICBldmVudFJlZ2lzdGVyLmZvckVhY2goKGxpc3Q6d2RDYi5Db2xsZWN0aW9uPEV2ZW50SGFuZGxlckRhdGE+LCBrZXk6c3RyaW5nKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBldmVudE5hbWUgPSBldmVudFJlZ2lzdGVyLmdldEV2ZW50TmFtZUZyb21LZXkoa2V5KTtcblxuICAgICAgICAgICAgICAgICAgICBpZihldmVudFJlZ2lzdGVyLmlzRG9tKGtleSwgZG9tLCBsaXN0KSl7XG4gICAgICAgICAgICAgICAgICAgICAgICBFdmVudEhhbmRsZXJGYWN0b3J5LmNyZWF0ZUV2ZW50SGFuZGxlcihFdmVudFRhYmxlLmdldEV2ZW50VHlwZShldmVudE5hbWUpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5vZmYoZG9tLCBldmVudE5hbWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmKGFyZ3MubGVuZ3RoID09PSAyICYmIEp1ZGdlVXRpbHMuaXNTdHJpbmcoYXJnc1swXSkpe1xuICAgICAgICAgICAgICAgIGxldCBldmVudE5hbWUgPSBhcmdzWzBdLFxuICAgICAgICAgICAgICAgICAgICBoYW5kbGVyID0gYXJnc1sxXTtcblxuICAgICAgICAgICAgICAgIEV2ZW50SGFuZGxlckZhY3RvcnkuY3JlYXRlRXZlbnRIYW5kbGVyKEV2ZW50VGFibGUuZ2V0RXZlbnRUeXBlKGV2ZW50TmFtZSkpXG4gICAgICAgICAgICAgICAgICAgIC5vZmYoZXZlbnROYW1lLCBoYW5kbGVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYoYXJncy5sZW5ndGggPT09IDIgJiYgSnVkZ2VVdGlscy5pc0RvbShhcmdzWzBdKSl7XG4gICAgICAgICAgICAgICAgbGV0IGRvbSA9IGFyZ3NbMF0sXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50TmFtZSA9IGFyZ3NbMV07XG5cbiAgICAgICAgICAgICAgICBFdmVudEhhbmRsZXJGYWN0b3J5LmNyZWF0ZUV2ZW50SGFuZGxlcihFdmVudFRhYmxlLmdldEV2ZW50VHlwZShldmVudE5hbWUpKVxuICAgICAgICAgICAgICAgICAgICAub2ZmKGRvbSwgZXZlbnROYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYoYXJncy5sZW5ndGggPT09IDMpe1xuICAgICAgICAgICAgICAgIGxldCBkb20gPSBhcmdzWzBdLFxuICAgICAgICAgICAgICAgICAgICBldmVudE5hbWUgPSBhcmdzWzFdLFxuICAgICAgICAgICAgICAgICAgICBoYW5kbGVyID0gYXJnc1syXTtcblxuICAgICAgICAgICAgICAgIEV2ZW50SGFuZGxlckZhY3RvcnkuY3JlYXRlRXZlbnRIYW5kbGVyKEV2ZW50VGFibGUuZ2V0RXZlbnRUeXBlKGV2ZW50TmFtZSkpXG4gICAgICAgICAgICAgICAgICAgIC5vZmYoZG9tLCBldmVudE5hbWUsIGhhbmRsZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfY2hlY2tFdmVudFNlcGFyYXRvcihldmVudE5hbWU6c3RyaW5nKXtcbiAgICAgICAgICAgIGFzc2VydChldmVudE5hbWUuaW5kZXhPZihEb21FdmVudExpc3RlbmVyTWFwLmV2ZW50U2VwYXJhdG9yKSA9PT0gLTEsIExvZy5pbmZvLkZVTkNfU0hPVUxEX05PVChcImV2ZW50TmFtZVwiLCBgY29udGFpbiAke0RvbUV2ZW50TGlzdGVuZXJNYXAuZXZlbnRTZXBhcmF0b3J9YCkpO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwibW9kdWxlIHdke1xuICAgIGV4cG9ydCBjbGFzcyBFdmVudEhhbmRsZXJGYWN0b3J5e1xuICAgICAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZUV2ZW50SGFuZGxlcihldmVudFR5cGU6RXZlbnRUeXBlKXtcbiAgICAgICAgICAgIGxldCBoYW5kbGVyID0gbnVsbDtcblxuICAgICAgICAgICAgc3dpdGNoIChldmVudFR5cGUpe1xuICAgICAgICAgICAgICAgIGNhc2UgRXZlbnRUeXBlLk1PVVNFOlxuICAgICAgICAgICAgICAgICAgICBoYW5kbGVyID0gTW91c2VFdmVudEhhbmRsZXIuZ2V0SW5zdGFuY2UoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBFdmVudFR5cGUuS0VZQk9BUkQ6XG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZXIgPSBLZXlib2FyZEV2ZW50SGFuZGxlci5nZXRJbnN0YW5jZSgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIEV2ZW50VHlwZS5DVVNUT006XG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZXIgPSBDdXN0b21FdmVudEhhbmRsZXIuZ2V0SW5zdGFuY2UoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgLy90b2RvIG1vcmUgdHlwZVxuICAgICAgICAgICAgICAgIGRlZmF1bHQgOlxuICAgICAgICAgICAgICAgICAgICBMb2cuZXJyb3IodHJ1ZSwgTG9nLmluZm8uRlVOQ19JTlZBTElEKFwiZXZlbnRUeXBlXCIpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBoYW5kbGVyO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwibW9kdWxlIHdke1xuICAgIGV4cG9ydCBjbGFzcyBFdmVudEJpbmRlckZhY3Rvcnl7XG4gICAgICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlRXZlbnRCaW5kZXIoZXZlbnROYW1lOkV2ZW50TmFtZSl7XG4gICAgICAgICAgICBsZXQgYmluZGVyID0gbnVsbCxcbiAgICAgICAgICAgICAgICBldmVudFR5cGUgPSBFdmVudFRhYmxlLmdldEV2ZW50VHlwZShldmVudE5hbWUpO1xuXG4gICAgICAgICAgICBzd2l0Y2ggKGV2ZW50VHlwZSl7XG4gICAgICAgICAgICAgICAgY2FzZSBFdmVudFR5cGUuTU9VU0U6XG4gICAgICAgICAgICAgICAgY2FzZSBFdmVudFR5cGUuS0VZQk9BUkQ6XG4gICAgICAgICAgICAgICAgICAgIGJpbmRlciA9IERvbUV2ZW50QmluZGVyLmdldEluc3RhbmNlKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgRXZlbnRUeXBlLkNVU1RPTTpcbiAgICAgICAgICAgICAgICAgICAgYmluZGVyID0gQ3VzdG9tRXZlbnRCaW5kZXIuZ2V0SW5zdGFuY2UoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdCA6XG4gICAgICAgICAgICAgICAgICAgIExvZy5lcnJvcih0cnVlLCBMb2cuaW5mby5GVU5DX0lOVkFMSUQoYGV2ZW50TmFtZToke2V2ZW50TmFtZX1gKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gYmluZGVyO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwibW9kdWxlIHdke1xuICAgIGV4cG9ydCBjbGFzcyBFdmVudERpc3BhdGNoZXJGYWN0b3J5e1xuICAgICAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZUV2ZW50RGlzcGF0Y2hlcihldmVudDpFdmVudCl7XG4gICAgICAgICAgICBsZXQgZGlzcGF0Y2hlciA9IG51bGwsXG4gICAgICAgICAgICAgICAgZXZlbnRUeXBlID0gZXZlbnQudHlwZTtcblxuICAgICAgICAgICAgc3dpdGNoIChldmVudFR5cGUpe1xuICAgICAgICAgICAgICAgIGNhc2UgRXZlbnRUeXBlLk1PVVNFOlxuICAgICAgICAgICAgICAgIGNhc2UgRXZlbnRUeXBlLktFWUJPQVJEOlxuICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaGVyID0gRG9tRXZlbnREaXNwYXRjaGVyLmdldEluc3RhbmNlKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgRXZlbnRUeXBlLkNVU1RPTTpcbiAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2hlciA9IEN1c3RvbUV2ZW50RGlzcGF0Y2hlci5nZXRJbnN0YW5jZSgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0IDpcbiAgICAgICAgICAgICAgICAgICAgTG9nLmVycm9yKHRydWUsIExvZy5pbmZvLkZVTkNfSU5WQUxJRChgZXZlbnQ6JHtldmVudH1gKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gZGlzcGF0Y2hlcjtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsIm1vZHVsZSB3ZCB7XG4gICAgZXhwb3J0IGNsYXNzIEV2ZW50TWFuYWdlciB7XG4gICAgICAgIHB1YmxpYyBzdGF0aWMgb24obGlzdGVuZXI6e318RXZlbnRMaXN0ZW5lcik6dm9pZDtcblxuICAgICAgICBwdWJsaWMgc3RhdGljIG9uKGV2ZW50TmFtZTpFdmVudE5hbWV8c3RyaW5nLCBoYW5kbGVyOkZ1bmN0aW9uKTp2b2lkO1xuICAgICAgICBwdWJsaWMgc3RhdGljIG9uKGRvbTpIVE1MRWxlbWVudCwgbGlzdGVuZXI6e318RXZlbnRMaXN0ZW5lcik6dm9pZDtcblxuICAgICAgICBwdWJsaWMgc3RhdGljIG9uKGV2ZW50TmFtZTpFdmVudE5hbWV8c3RyaW5nLCBoYW5kbGVyOkZ1bmN0aW9uLCBwcmlvcml0eTpudW1iZXIpOnZvaWQ7XG4gICAgICAgIHB1YmxpYyBzdGF0aWMgb24odGFyZ2V0OkVudGl0eU9iamVjdCwgZXZlbnROYW1lOkV2ZW50TmFtZXxzdHJpbmcsIGhhbmRsZXI6RnVuY3Rpb24pOnZvaWQ7XG4gICAgICAgIHB1YmxpYyBzdGF0aWMgb24oZG9tOkhUTUxFbGVtZW50LCBldmVudE5hbWU6RXZlbnROYW1lfHN0cmluZywgaGFuZGxlcjpGdW5jdGlvbik6dm9pZDtcblxuICAgICAgICBwdWJsaWMgc3RhdGljIG9uKHRhcmdldDpFbnRpdHlPYmplY3QsIGV2ZW50TmFtZTpFdmVudE5hbWV8c3RyaW5nLCBoYW5kbGVyOkZ1bmN0aW9uLCBwcmlvcml0eTpudW1iZXIpOnZvaWQ7XG4gICAgICAgIHB1YmxpYyBzdGF0aWMgb24oZG9tOkhUTUxFbGVtZW50LCBldmVudE5hbWU6RXZlbnROYW1lfHN0cmluZywgaGFuZGxlcjpGdW5jdGlvbiwgcHJpb3JpdHk6bnVtYmVyKTp2b2lkO1xuXG4gICAgICAgIEByZXF1aXJlKGZ1bmN0aW9uKC4uLmFyZ3Mpe1xuICAgICAgICAgICAgaWYoYXJnc1swXSBpbnN0YW5jZW9mIEVudGl0eU9iamVjdCl7XG4gICAgICAgICAgICAgICAgbGV0IGV2ZW50TmFtZSA9IGFyZ3NbMV07XG5cbiAgICAgICAgICAgICAgICBhc3NlcnQoRXZlbnRUYWJsZS5nZXRFdmVudFR5cGUoZXZlbnROYW1lKSA9PT0gRXZlbnRUeXBlLkNVU1RPTSwgTG9nLmluZm8uRlVOQ19NVVNUX0JFKFwiZXZlbnRcIiwgXCJjdXN0b20gZXZlbnRcIikpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZihKdWRnZVV0aWxzLmlzRG9tKGFyZ3NbMF0pKXtcbiAgICAgICAgICAgICAgICBsZXQgZXZlbnROYW1lID0gYXJnc1sxXSxcbiAgICAgICAgICAgICAgICAgICAgZXZlbnRUeXBlID0gRXZlbnRUYWJsZS5nZXRFdmVudFR5cGUoZXZlbnROYW1lKTtcblxuICAgICAgICAgICAgICAgIGFzc2VydChldmVudFR5cGUgPT09IEV2ZW50VHlwZS5NT1VTRSB8fCBldmVudFR5cGUgPT09IEV2ZW50VHlwZS5LRVlCT0FSRCwgTG9nLmluZm8uRlVOQ19NVVNUX0JFKFwiZXZlbnRcIiwgXCJkb20gZXZlbnRcIikpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgICBwdWJsaWMgc3RhdGljIG9uKC4uLmFyZ3MpIHtcbiAgICAgICAgICAgIGlmKGFyZ3MubGVuZ3RoID09PSAxKXtcbiAgICAgICAgICAgICAgICBsZXQgbGlzdGVuZXIgPSBhcmdzWzBdLFxuICAgICAgICAgICAgICAgICAgICBldmVudEJpbmRlciA9IERvbUV2ZW50QmluZGVyLmdldEluc3RhbmNlKCk7XG5cbiAgICAgICAgICAgICAgICBldmVudEJpbmRlci5vbihsaXN0ZW5lcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmKGFyZ3MubGVuZ3RoID09PSAyICYmIEp1ZGdlVXRpbHMuaXNTdHJpbmcoYXJnc1swXSkpe1xuICAgICAgICAgICAgICAgIGxldCBldmVudE5hbWUgPSBhcmdzWzBdLFxuICAgICAgICAgICAgICAgICAgICBoYW5kbGVyID0gYXJnc1sxXSxcbiAgICAgICAgICAgICAgICAgICAgcHJpb3JpdHkgPSAxLFxuICAgICAgICAgICAgICAgICAgICBldmVudEJpbmRlciA9IEV2ZW50QmluZGVyRmFjdG9yeS5jcmVhdGVFdmVudEJpbmRlcihldmVudE5hbWUpO1xuXG4gICAgICAgICAgICAgICAgZXZlbnRCaW5kZXIub24oZXZlbnROYW1lLCBoYW5kbGVyLCBwcmlvcml0eSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmKGFyZ3MubGVuZ3RoID09PSAyICYmIEp1ZGdlVXRpbHMuaXNEb20oYXJnc1swXSkpe1xuICAgICAgICAgICAgICAgIGxldCBkb20gPSBhcmdzWzBdLFxuICAgICAgICAgICAgICAgICAgICBsaXN0ZW5lciA9IGFyZ3NbMV0sXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50QmluZGVyID0gRG9tRXZlbnRCaW5kZXIuZ2V0SW5zdGFuY2UoKTtcblxuICAgICAgICAgICAgICAgIGV2ZW50QmluZGVyLm9uKGRvbSwgbGlzdGVuZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZihhcmdzLmxlbmd0aCA9PT0gMyAmJiBKdWRnZVV0aWxzLmlzU3RyaW5nKGFyZ3NbMF0pKXtcbiAgICAgICAgICAgICAgICBsZXQgZXZlbnROYW1lID0gYXJnc1swXSxcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlciA9IGFyZ3NbMV0sXG4gICAgICAgICAgICAgICAgICAgIHByaW9yaXR5ID0gYXJnc1syXSxcbiAgICAgICAgICAgICAgICAgICAgZXZlbnRCaW5kZXIgPSBFdmVudEJpbmRlckZhY3RvcnkuY3JlYXRlRXZlbnRCaW5kZXIoZXZlbnROYW1lKTtcblxuICAgICAgICAgICAgICAgIGV2ZW50QmluZGVyLm9uKGV2ZW50TmFtZSwgaGFuZGxlciwgcHJpb3JpdHkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZihhcmdzLmxlbmd0aCA9PT0gMyAmJiBhcmdzWzBdIGluc3RhbmNlb2YgRW50aXR5T2JqZWN0KXtcbiAgICAgICAgICAgICAgICBsZXQgdGFyZ2V0ID0gYXJnc1swXSxcbiAgICAgICAgICAgICAgICAgICAgZXZlbnROYW1lID0gYXJnc1sxXSxcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlciA9IGFyZ3NbMl0sXG4gICAgICAgICAgICAgICAgICAgIHByaW9yaXR5ID0gMSxcbiAgICAgICAgICAgICAgICAgICAgZXZlbnRCaW5kZXIgPSBDdXN0b21FdmVudEJpbmRlci5nZXRJbnN0YW5jZSgpO1xuXG4gICAgICAgICAgICAgICAgZXZlbnRCaW5kZXIub24odGFyZ2V0LCBldmVudE5hbWUsIGhhbmRsZXIsIHByaW9yaXR5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYoYXJncy5sZW5ndGggPT09IDMgJiYgSnVkZ2VVdGlscy5pc0RvbShhcmdzWzBdKSl7XG4gICAgICAgICAgICAgICAgbGV0IGRvbSA9IGFyZ3NbMF0sXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50TmFtZSA9IGFyZ3NbMV0sXG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZXIgPSBhcmdzWzJdLFxuICAgICAgICAgICAgICAgICAgICBwcmlvcml0eSA9IDEsXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50QmluZGVyID0gRG9tRXZlbnRCaW5kZXIuZ2V0SW5zdGFuY2UoKTtcblxuICAgICAgICAgICAgICAgIGV2ZW50QmluZGVyLm9uKGRvbSwgZXZlbnROYW1lLCBoYW5kbGVyLCBwcmlvcml0eSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmKGFyZ3MubGVuZ3RoID09PSA0ICYmIGFyZ3NbMF0gaW5zdGFuY2VvZiBFbnRpdHlPYmplY3Qpe1xuICAgICAgICAgICAgICAgIGxldCB0YXJnZXQgPSBhcmdzWzBdLFxuICAgICAgICAgICAgICAgICAgICBldmVudE5hbWUgPSBhcmdzWzFdLFxuICAgICAgICAgICAgICAgICAgICBoYW5kbGVyID0gYXJnc1syXSxcbiAgICAgICAgICAgICAgICAgICAgcHJpb3JpdHkgPSBhcmdzWzNdLFxuICAgICAgICAgICAgICAgICAgICBldmVudEJpbmRlciA9IEN1c3RvbUV2ZW50QmluZGVyLmdldEluc3RhbmNlKCk7XG5cbiAgICAgICAgICAgICAgICBldmVudEJpbmRlci5vbih0YXJnZXQsIGV2ZW50TmFtZSwgaGFuZGxlciwgcHJpb3JpdHkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZihhcmdzLmxlbmd0aCA9PT0gNCAmJiBKdWRnZVV0aWxzLmlzRG9tKGFyZ3NbMF0pKXtcbiAgICAgICAgICAgICAgICBsZXQgZG9tID0gYXJnc1swXSxcbiAgICAgICAgICAgICAgICAgICAgZXZlbnROYW1lID0gYXJnc1sxXSxcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlciA9IGFyZ3NbMl0sXG4gICAgICAgICAgICAgICAgICAgIHByaW9yaXR5ID0gYXJnc1szXSxcbiAgICAgICAgICAgICAgICAgICAgZXZlbnRCaW5kZXIgPSBEb21FdmVudEJpbmRlci5nZXRJbnN0YW5jZSgpO1xuXG4gICAgICAgICAgICAgICAgZXZlbnRCaW5kZXIub24oZG9tLCBldmVudE5hbWUsIGhhbmRsZXIsIHByaW9yaXR5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgb2ZmKCk6dm9pZDtcblxuICAgICAgICBwdWJsaWMgc3RhdGljIG9mZihldmVudE5hbWU6RXZlbnROYW1lfHN0cmluZyk6dm9pZDtcbiAgICAgICAgcHVibGljIHN0YXRpYyBvZmYodGFyZ2V0OkVudGl0eU9iamVjdCk6dm9pZDtcbiAgICAgICAgcHVibGljIHN0YXRpYyBvZmYoZG9tOkhUTUxFbGVtZW50KTp2b2lkO1xuXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgb2ZmKGV2ZW50TmFtZTpFdmVudE5hbWV8c3RyaW5nLCBoYW5kbGVyOkZ1bmN0aW9uKTp2b2lkO1xuICAgICAgICBwdWJsaWMgc3RhdGljIG9mZih0YXJnZXQ6RW50aXR5T2JqZWN0LCBldmVudE5hbWU6RXZlbnROYW1lfHN0cmluZyk6dm9pZDtcbiAgICAgICAgcHVibGljIHN0YXRpYyBvZmYoZG9tOkhUTUxFbGVtZW50LCBldmVudE5hbWU6RXZlbnROYW1lKTp2b2lkO1xuXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgb2ZmKHRhcmdldDpFbnRpdHlPYmplY3QsIGV2ZW50TmFtZTpFdmVudE5hbWV8c3RyaW5nLCBoYW5kbGVyOkZ1bmN0aW9uKTp2b2lkO1xuICAgICAgICBwdWJsaWMgc3RhdGljIG9mZihkb206SFRNTEVsZW1lbnQsIGV2ZW50TmFtZTpFdmVudE5hbWUsIGhhbmRsZXI6RnVuY3Rpb24pOnZvaWQ7XG5cblxuICAgICAgICBAcmVxdWlyZShmdW5jdGlvbiguLi5hcmdzKXtcbiAgICAgICAgICAgIGlmKGFyZ3MubGVuZ3RoID4gMiAmJiBhcmdzWzBdIGluc3RhbmNlb2YgRW50aXR5T2JqZWN0KXtcbiAgICAgICAgICAgICAgICBsZXQgZXZlbnROYW1lID0gYXJnc1sxXTtcblxuICAgICAgICAgICAgICAgIGFzc2VydChFdmVudFRhYmxlLmdldEV2ZW50VHlwZShldmVudE5hbWUpID09PSBFdmVudFR5cGUuQ1VTVE9NLCBMb2cuaW5mby5GVU5DX01VU1RfQkUoXCJldmVudFwiLCBcImN1c3RvbSBldmVudFwiKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmKGFyZ3MubGVuZ3RoID4gMiAmJiBKdWRnZVV0aWxzLmlzRG9tKGFyZ3NbMF0pKXtcbiAgICAgICAgICAgICAgICBsZXQgZXZlbnROYW1lID0gYXJnc1sxXSxcbiAgICAgICAgICAgICAgICAgICAgZXZlbnRUeXBlID0gRXZlbnRUYWJsZS5nZXRFdmVudFR5cGUoZXZlbnROYW1lKTtcblxuICAgICAgICAgICAgICAgIGFzc2VydChldmVudFR5cGUgPT09IEV2ZW50VHlwZS5NT1VTRSB8fCBldmVudFR5cGUgPT09IEV2ZW50VHlwZS5LRVlCT0FSRCwgTG9nLmluZm8uRlVOQ19NVVNUX0JFKFwiZXZlbnRcIiwgXCJkb20gZXZlbnRcIikpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgICBwdWJsaWMgc3RhdGljIG9mZiguLi5hcmdzKSB7XG4gICAgICAgICAgICBpZihhcmdzLmxlbmd0aCA9PT0gMCl7XG4gICAgICAgICAgICAgICAgbGV0IGN1c3RvbUV2ZW50QmluZGVyID0gQ3VzdG9tRXZlbnRCaW5kZXIuZ2V0SW5zdGFuY2UoKSxcbiAgICAgICAgICAgICAgICAgICAgZG9tRXZlbnRCaW5kZXIgPSBEb21FdmVudEJpbmRlci5nZXRJbnN0YW5jZSgpO1xuXG4gICAgICAgICAgICAgICAgY3VzdG9tRXZlbnRCaW5kZXIub2ZmKCk7XG4gICAgICAgICAgICAgICAgZG9tRXZlbnRCaW5kZXIub2ZmKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmKGFyZ3MubGVuZ3RoID09PSAxICYmIEp1ZGdlVXRpbHMuaXNTdHJpbmcoYXJnc1swXSkpe1xuICAgICAgICAgICAgICAgIGxldCBldmVudE5hbWUgPSBhcmdzWzBdLFxuICAgICAgICAgICAgICAgICAgICBldmVudEJpbmRlciA9IEV2ZW50QmluZGVyRmFjdG9yeS5jcmVhdGVFdmVudEJpbmRlcihldmVudE5hbWUpO1xuXG4gICAgICAgICAgICAgICAgZXZlbnRCaW5kZXIub2ZmKGV2ZW50TmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmKGFyZ3MubGVuZ3RoID09PSAxICYmIGFyZ3NbMF0gaW5zdGFuY2VvZiBFbnRpdHlPYmplY3Qpe1xuICAgICAgICAgICAgICAgIGxldCBldmVudE5hbWUgPSBhcmdzWzBdLFxuICAgICAgICAgICAgICAgICAgICBldmVudEJpbmRlciA9IEN1c3RvbUV2ZW50QmluZGVyLmdldEluc3RhbmNlKCk7XG5cbiAgICAgICAgICAgICAgICBldmVudEJpbmRlci5vZmYoZXZlbnROYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYoYXJncy5sZW5ndGggPT09IDEgJiYgSnVkZ2VVdGlscy5pc0RvbShhcmdzWzBdKSl7XG4gICAgICAgICAgICAgICAgbGV0IGV2ZW50TmFtZSA9IGFyZ3NbMF0sXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50QmluZGVyID0gRG9tRXZlbnRCaW5kZXIuZ2V0SW5zdGFuY2UoKTtcblxuICAgICAgICAgICAgICAgIGV2ZW50QmluZGVyLm9mZihldmVudE5hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZihhcmdzLmxlbmd0aCA9PT0gMiAmJiBKdWRnZVV0aWxzLmlzU3RyaW5nKGFyZ3NbMF0pKXtcbiAgICAgICAgICAgICAgICBsZXQgZXZlbnROYW1lID0gYXJnc1swXSxcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlciA9IGFyZ3NbMV0sXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50QmluZGVyID0gRXZlbnRCaW5kZXJGYWN0b3J5LmNyZWF0ZUV2ZW50QmluZGVyKGV2ZW50TmFtZSk7XG5cbiAgICAgICAgICAgICAgICBldmVudEJpbmRlci5vZmYoZXZlbnROYW1lLCBoYW5kbGVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYoYXJncy5sZW5ndGggPT09IDIgJiYgYXJnc1swXSBpbnN0YW5jZW9mIEVudGl0eU9iamVjdCl7XG4gICAgICAgICAgICAgICAgbGV0IHRhcmdldCA9IGFyZ3NbMF0sXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50TmFtZSA9IGFyZ3NbMV0sXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50QmluZGVyID0gQ3VzdG9tRXZlbnRCaW5kZXIuZ2V0SW5zdGFuY2UoKTtcblxuICAgICAgICAgICAgICAgIGV2ZW50QmluZGVyLm9mZih0YXJnZXQsIGV2ZW50TmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmKGFyZ3MubGVuZ3RoID09PSAyICYmIEp1ZGdlVXRpbHMuaXNEb20oYXJnc1swXSkpe1xuICAgICAgICAgICAgICAgIGxldCBkb20gPSBhcmdzWzBdLFxuICAgICAgICAgICAgICAgICAgICBldmVudE5hbWUgPSBhcmdzWzFdLFxuICAgICAgICAgICAgICAgICAgICBldmVudEJpbmRlciA9IERvbUV2ZW50QmluZGVyLmdldEluc3RhbmNlKCk7XG5cbiAgICAgICAgICAgICAgICBldmVudEJpbmRlci5vZmYoZG9tLCBldmVudE5hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZihhcmdzLmxlbmd0aCA9PT0gMyAmJiBhcmdzWzBdIGluc3RhbmNlb2YgRW50aXR5T2JqZWN0KXtcbiAgICAgICAgICAgICAgICBsZXQgdGFyZ2V0ID0gYXJnc1swXSxcbiAgICAgICAgICAgICAgICAgICAgZXZlbnROYW1lID0gYXJnc1sxXSxcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlciA9IGFyZ3NbMl0sXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50QmluZGVyID0gQ3VzdG9tRXZlbnRCaW5kZXIuZ2V0SW5zdGFuY2UoKTtcblxuICAgICAgICAgICAgICAgIGV2ZW50QmluZGVyLm9mZih0YXJnZXQsIGV2ZW50TmFtZSwgaGFuZGxlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmKGFyZ3MubGVuZ3RoID09PSAzICYmIEp1ZGdlVXRpbHMuaXNEb20oYXJnc1swXSkpe1xuICAgICAgICAgICAgICAgIGxldCBkb20gPSBhcmdzWzBdLFxuICAgICAgICAgICAgICAgICAgICBldmVudE5hbWUgPSBhcmdzWzFdLFxuICAgICAgICAgICAgICAgICAgICBoYW5kbGVyID0gYXJnc1syXSxcbiAgICAgICAgICAgICAgICAgICAgZXZlbnRCaW5kZXIgPSBEb21FdmVudEJpbmRlci5nZXRJbnN0YW5jZSgpO1xuXG4gICAgICAgICAgICAgICAgZXZlbnRCaW5kZXIub2ZmKGRvbSwgZXZlbnROYW1lLCBoYW5kbGVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgdHJpZ2dlcihldmVudDpFdmVudCk6dm9pZDtcblxuICAgICAgICBwdWJsaWMgc3RhdGljIHRyaWdnZXIoZXZlbnQ6RXZlbnQsIHVzZXJEYXRhOmFueSk6dm9pZDtcbiAgICAgICAgcHVibGljIHN0YXRpYyB0cmlnZ2VyKHRhcmdldDpFbnRpdHlPYmplY3QsIGV2ZW50OkV2ZW50KTp2b2lkO1xuICAgICAgICBwdWJsaWMgc3RhdGljIHRyaWdnZXIoZG9tOkhUTUxFbGVtZW50LCBldmVudDpFdmVudCk6dm9pZDtcblxuICAgICAgICBwdWJsaWMgc3RhdGljIHRyaWdnZXIodGFyZ2V0OkVudGl0eU9iamVjdCwgZXZlbnQ6RXZlbnQsIHVzZXJEYXRhOmFueSk6dm9pZDtcblxuICAgICAgICBwdWJsaWMgc3RhdGljIHRyaWdnZXIodGFyZ2V0OkVudGl0eU9iamVjdCwgZXZlbnQ6RXZlbnQsIHVzZXJEYXRhOmFueSwgbm90U2V0VGFyZ2V0OmJvb2xlYW4pOnZvaWQ7XG5cblxuICAgICAgICBAcmVxdWlyZShmdW5jdGlvbiguLi5hcmdzKXtcbiAgICAgICAgICAgIGlmKGFyZ3MubGVuZ3RoID09PSAyICYmIGFyZ3NbMF0gaW5zdGFuY2VvZiBFdmVudCl7XG4gICAgICAgICAgICAgICAgbGV0IGV2ZW50ID0gYXJnc1swXTtcblxuICAgICAgICAgICAgICAgIGFzc2VydChldmVudCBpbnN0YW5jZW9mIEN1c3RvbUV2ZW50LCBMb2cuaW5mby5GVU5DX01VU1RfQkUoXCJldmVudCB0eXBlXCIsIFwiQ1VTVE9NXCIpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYoYXJnc1swXSBpbnN0YW5jZW9mIEVudGl0eU9iamVjdCl7XG4gICAgICAgICAgICAgICAgbGV0IGV2ZW50ID0gYXJnc1sxXTtcblxuICAgICAgICAgICAgICAgIGFzc2VydChldmVudCBpbnN0YW5jZW9mIEN1c3RvbUV2ZW50LCBMb2cuaW5mby5GVU5DX01VU1RfQkUoXCJldmVudCB0eXBlXCIsIFwiQ1VTVE9NXCIpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgcHVibGljIHN0YXRpYyB0cmlnZ2VyKC4uLmFyZ3MpIHtcbiAgICAgICAgICAgIGlmKGFyZ3MubGVuZ3RoID09PSAxKXtcbiAgICAgICAgICAgICAgICBsZXQgZXZlbnQgPSBhcmdzWzBdLFxuICAgICAgICAgICAgICAgICAgICBldmVudERpc3BhdGNoZXIgPSBFdmVudERpc3BhdGNoZXJGYWN0b3J5LmNyZWF0ZUV2ZW50RGlzcGF0Y2hlcihldmVudCk7XG5cbiAgICAgICAgICAgICAgICBldmVudERpc3BhdGNoZXIudHJpZ2dlcihldmVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmKGFyZ3MubGVuZ3RoID09PSAyICYmIGFyZ3NbMF0gaW5zdGFuY2VvZiBFdmVudCl7XG4gICAgICAgICAgICAgICAgbGV0IGV2ZW50ID0gYXJnc1swXSxcbiAgICAgICAgICAgICAgICAgICAgdXNlckRhdGEgPSBhcmdzWzFdLFxuICAgICAgICAgICAgICAgICAgICBldmVudERpc3BhdGNoZXIgPSBDdXN0b21FdmVudERpc3BhdGNoZXIuZ2V0SW5zdGFuY2UoKTtcblxuICAgICAgICAgICAgICAgIGV2ZW50RGlzcGF0Y2hlci50cmlnZ2VyKGV2ZW50LCB1c2VyRGF0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmKGFyZ3MubGVuZ3RoID09PSAyICYmIGFyZ3NbMF0gaW5zdGFuY2VvZiBFbnRpdHlPYmplY3Qpe1xuICAgICAgICAgICAgICAgIGxldCB0YXJnZXQgPSBhcmdzWzBdLFxuICAgICAgICAgICAgICAgICAgICBldmVudCA9IGFyZ3NbMV0sXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50RGlzcGF0Y2hlciA9IEN1c3RvbUV2ZW50RGlzcGF0Y2hlci5nZXRJbnN0YW5jZSgpO1xuXG4gICAgICAgICAgICAgICAgZXZlbnREaXNwYXRjaGVyLnRyaWdnZXIodGFyZ2V0LCBldmVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmKGFyZ3MubGVuZ3RoID09PSAyICYmIEp1ZGdlVXRpbHMuaXNEb20oYXJnc1swXSkpe1xuICAgICAgICAgICAgICAgIGxldCBkb20gPSBhcmdzWzBdLFxuICAgICAgICAgICAgICAgICAgICBldmVudCA9IGFyZ3NbMV0sXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50RGlzcGF0Y2hlciA9IERvbUV2ZW50RGlzcGF0Y2hlci5nZXRJbnN0YW5jZSgpO1xuXG4gICAgICAgICAgICAgICAgZXZlbnREaXNwYXRjaGVyLnRyaWdnZXIoZG9tLCBldmVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmKGFyZ3MubGVuZ3RoID09PSAzKXtcbiAgICAgICAgICAgICAgICBsZXQgdGFyZ2V0ID0gYXJnc1swXSxcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQgPSBhcmdzWzFdLFxuICAgICAgICAgICAgICAgICAgICB1c2VyRGF0YSA9IGFyZ3NbMl0sXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50RGlzcGF0Y2hlciA9IEN1c3RvbUV2ZW50RGlzcGF0Y2hlci5nZXRJbnN0YW5jZSgpO1xuXG4gICAgICAgICAgICAgICAgZXZlbnREaXNwYXRjaGVyLnRyaWdnZXIodGFyZ2V0LCBldmVudCwgdXNlckRhdGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZihhcmdzLmxlbmd0aCA9PT0gNCl7XG4gICAgICAgICAgICAgICAgbGV0IHRhcmdldCA9IGFyZ3NbMF0sXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50ID0gYXJnc1sxXSxcbiAgICAgICAgICAgICAgICAgICAgdXNlckRhdGEgPSBhcmdzWzJdLFxuICAgICAgICAgICAgICAgICAgICBub3RTZXRUYXJnZXQgPSBhcmdzWzNdLFxuICAgICAgICAgICAgICAgICAgICBldmVudERpc3BhdGNoZXIgPSBDdXN0b21FdmVudERpc3BhdGNoZXIuZ2V0SW5zdGFuY2UoKTtcblxuICAgICAgICAgICAgICAgIGV2ZW50RGlzcGF0Y2hlci50cmlnZ2VyKHRhcmdldCwgZXZlbnQsIHVzZXJEYXRhLCBub3RTZXRUYXJnZXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cblxuICAgICAgICBwdWJsaWMgc3RhdGljIGJyb2FkY2FzdCh0YXJnZXQ6RW50aXR5T2JqZWN0LCBldmVudDpFdmVudCk7XG4gICAgICAgIHB1YmxpYyBzdGF0aWMgYnJvYWRjYXN0KHRhcmdldDpFbnRpdHlPYmplY3QsIGV2ZW50OkV2ZW50LCB1c2VyRGF0YTphbnkpO1xuXG4gICAgICAgIEByZXF1aXJlKGZ1bmN0aW9uKHRhcmdldDpFbnRpdHlPYmplY3QsIGV2ZW50T2JqZWN0OkV2ZW50LCB1c2VyRGF0YT86YW55KXtcbiAgICAgICAgICAgIGFzc2VydChldmVudE9iamVjdCBpbnN0YW5jZW9mIEN1c3RvbUV2ZW50LCBMb2cuaW5mby5GVU5DX01VU1RfQkUoXCJldmVudE9iamVjdFwiLCBcIkN1c3RvbUV2ZW50XCIpKTtcbiAgICAgICAgfSlcbiAgICAgICAgcHVibGljIHN0YXRpYyBicm9hZGNhc3QoLi4uYXJncykge1xuICAgICAgICAgICAgdmFyIGV2ZW50RGlzcGF0Y2hlciA9IEN1c3RvbUV2ZW50RGlzcGF0Y2hlci5nZXRJbnN0YW5jZSgpO1xuXG4gICAgICAgICAgICBldmVudERpc3BhdGNoZXIuYnJvYWRjYXN0LmFwcGx5KGV2ZW50RGlzcGF0Y2hlciwgYXJncyk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgc3RhdGljIGVtaXQodGFyZ2V0OkVudGl0eU9iamVjdCwgZXZlbnQ6RXZlbnQpO1xuICAgICAgICBwdWJsaWMgc3RhdGljIGVtaXQodGFyZ2V0OkVudGl0eU9iamVjdCwgZXZlbnQ6RXZlbnQsIHVzZXJEYXRhOmFueSk7XG5cbiAgICAgICAgQHJlcXVpcmUoZnVuY3Rpb24odGFyZ2V0OkVudGl0eU9iamVjdCwgZXZlbnRPYmplY3Q6RXZlbnQsIHVzZXJEYXRhPzphbnkpe1xuICAgICAgICAgICAgYXNzZXJ0KGV2ZW50T2JqZWN0IGluc3RhbmNlb2YgQ3VzdG9tRXZlbnQsIExvZy5pbmZvLkZVTkNfTVVTVF9CRShcImV2ZW50T2JqZWN0XCIsIFwiQ3VzdG9tRXZlbnRcIikpO1xuICAgICAgICB9KVxuICAgICAgICBwdWJsaWMgc3RhdGljIGVtaXQoLi4uYXJncykge1xuICAgICAgICAgICAgdmFyIGV2ZW50RGlzcGF0Y2hlciA9IEN1c3RvbUV2ZW50RGlzcGF0Y2hlci5nZXRJbnN0YW5jZSgpO1xuXG4gICAgICAgICAgICBldmVudERpc3BhdGNoZXIuZW1pdC5hcHBseShldmVudERpc3BhdGNoZXIsIGFyZ3MpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHN0YXRpYyBmcm9tRXZlbnQoZXZlbnROYW1lOkV2ZW50TmFtZSk6d2RGcnAuRnJvbUV2ZW50UGF0dGVyblN0cmVhbTtcblxuICAgICAgICBwdWJsaWMgc3RhdGljIGZyb21FdmVudChldmVudE5hbWU6RXZlbnROYW1lLCBwcmlvcml0eTpudW1iZXIpOndkRnJwLkZyb21FdmVudFBhdHRlcm5TdHJlYW07XG4gICAgICAgIHB1YmxpYyBzdGF0aWMgZnJvbUV2ZW50KHRhcmdldDpFbnRpdHlPYmplY3QsIGV2ZW50TmFtZTpFdmVudE5hbWUpOndkRnJwLkZyb21FdmVudFBhdHRlcm5TdHJlYW07XG4gICAgICAgIHB1YmxpYyBzdGF0aWMgZnJvbUV2ZW50KGRvbTpIVE1MRWxlbWVudCwgZXZlbnROYW1lOkV2ZW50TmFtZSk6d2RGcnAuRnJvbUV2ZW50UGF0dGVyblN0cmVhbTtcblxuICAgICAgICBwdWJsaWMgc3RhdGljIGZyb21FdmVudCh0YXJnZXQ6RW50aXR5T2JqZWN0LCBldmVudE5hbWU6RXZlbnROYW1lLCBwcmlvcml0eTpudW1iZXIpOndkRnJwLkZyb21FdmVudFBhdHRlcm5TdHJlYW07XG4gICAgICAgIHB1YmxpYyBzdGF0aWMgZnJvbUV2ZW50KGRvbTpIVE1MRWxlbWVudCwgZXZlbnROYW1lOkV2ZW50TmFtZSwgcHJpb3JpdHk6bnVtYmVyKTp3ZEZycC5Gcm9tRXZlbnRQYXR0ZXJuU3RyZWFtO1xuXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgZnJvbUV2ZW50KC4uLmFyZ3MpOmFueSB7XG4gICAgICAgICAgICB2YXIgYWRkSGFuZGxlciA9IG51bGwsXG4gICAgICAgICAgICAgICAgcmVtb3ZlSGFuZGxlciA9IG51bGw7XG5cbiAgICAgICAgICAgIGlmIChhcmdzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgICAgIGxldCBldmVudE5hbWUgPSBhcmdzWzBdO1xuXG4gICAgICAgICAgICAgICAgYWRkSGFuZGxlciA9IGZ1bmN0aW9uIChoYW5kbGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIEV2ZW50TWFuYWdlci5vbihldmVudE5hbWUsIGhhbmRsZXIpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgcmVtb3ZlSGFuZGxlciA9IGZ1bmN0aW9uIChoYW5kbGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIEV2ZW50TWFuYWdlci5vZmYoZXZlbnROYW1lLCBoYW5kbGVyKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoYXJncy5sZW5ndGggPT09IDIgJiYgSnVkZ2VVdGlscy5pc051bWJlcihhcmdzWzFdKSkge1xuICAgICAgICAgICAgICAgIGxldCBldmVudE5hbWUgPSBhcmdzWzBdLFxuICAgICAgICAgICAgICAgICAgICBwcmlvcml0eSA9IGFyZ3NbMV07XG5cbiAgICAgICAgICAgICAgICBhZGRIYW5kbGVyID0gZnVuY3Rpb24gKGhhbmRsZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgRXZlbnRNYW5hZ2VyLm9uKGV2ZW50TmFtZSwgaGFuZGxlciwgcHJpb3JpdHkpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgcmVtb3ZlSGFuZGxlciA9IGZ1bmN0aW9uIChoYW5kbGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIEV2ZW50TWFuYWdlci5vZmYoZXZlbnROYW1lLCBoYW5kbGVyKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoYXJncy5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgICAgICAgICBsZXQgZXZlbnROYW1lID0gYXJnc1sxXTtcblxuICAgICAgICAgICAgICAgIGFkZEhhbmRsZXIgPSBmdW5jdGlvbiAoaGFuZGxlcikge1xuICAgICAgICAgICAgICAgICAgICBFdmVudE1hbmFnZXIub24oYXJnc1swXSwgZXZlbnROYW1lLCBoYW5kbGVyKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHJlbW92ZUhhbmRsZXIgPSBmdW5jdGlvbiAoaGFuZGxlcikge1xuICAgICAgICAgICAgICAgICAgICBFdmVudE1hbmFnZXIub2ZmKGFyZ3NbMF0sIGV2ZW50TmFtZSwgaGFuZGxlcik7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGFyZ3MubGVuZ3RoID09PSAzKSB7XG4gICAgICAgICAgICAgICAgbGV0IGV2ZW50TmFtZSA9IGFyZ3NbMV0sXG4gICAgICAgICAgICAgICAgICAgIHByaW9yaXR5ID0gYXJnc1syXTtcblxuICAgICAgICAgICAgICAgIGFkZEhhbmRsZXIgPSBmdW5jdGlvbiAoaGFuZGxlcikge1xuICAgICAgICAgICAgICAgICAgICBFdmVudE1hbmFnZXIub24oYXJnc1swXSwgZXZlbnROYW1lLCBoYW5kbGVyLCBwcmlvcml0eSk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICByZW1vdmVIYW5kbGVyID0gZnVuY3Rpb24gKGhhbmRsZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgRXZlbnRNYW5hZ2VyLm9mZihhcmdzWzBdLCBldmVudE5hbWUsIGhhbmRsZXIpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB3ZEZycC5mcm9tRXZlbnRQYXR0ZXJuKGFkZEhhbmRsZXIsIHJlbW92ZUhhbmRsZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgQHJlcXVpcmUoZnVuY3Rpb24odGFyZ2V0OkVudGl0eU9iamVjdCwgcGFyZW50OmFueSl7XG4gICAgICAgICAgICBhc3NlcnQodGFyZ2V0IGluc3RhbmNlb2YgRW50aXR5T2JqZWN0LCBcIm9ubHkgRW50aXR5T2JqZWN0IGNhbiBzZXRCdWJsZVBhcmVudFwiKTtcbiAgICAgICAgfSlcbiAgICAgICAgcHVibGljIHN0YXRpYyBzZXRCdWJibGVQYXJlbnQodGFyZ2V0OkVudGl0eU9iamVjdCwgcGFyZW50OmFueSkge1xuICAgICAgICAgICAgQ3VzdG9tRXZlbnRSZWdpc3Rlci5nZXRJbnN0YW5jZSgpLnNldEJ1YmJsZVBhcmVudCh0YXJnZXQsIHBhcmVudCk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJtb2R1bGUgd2R7XG4gICAgZXhwb3J0IGVudW0gRW5naW5lRXZlbnR7XG4gICAgICAgIC8qISBnbG9iYWwgZXZlbnQgc2hvdWxkIGFkZCBcImR5X1wiIHByZWZpeCAqL1xuICAgICAgICBTVEFSVExPT1AgPSA8YW55PlwiZHlfc3RhcnRMb29wXCIsXG4gICAgICAgIEVORExPT1AgPSA8YW55PlwiZHlfZW5kTG9vcFwiLFxuICAgICAgICBCRUZPUkVfR0FNRU9CSkVDVF9JTklUID0gPGFueT5cImR5X2JlZm9yZUdhbWVPYmplY3RJbml0XCIsXG4gICAgICAgIEFGVEVSX0dBTUVPQkpFQ1RfSU5JVCA9IDxhbnk+XCJkeV9hZnRlckdhbWVPYmplY3RJbml0XCIsXG4gICAgICAgIEFGVEVSX0dBTUVPQkpFQ1RfSU5JVF9SSUdJREJPRFlfQUREX0NPTlNUUkFJTlQgPSA8YW55PlwiZHlfYWZ0ZXJHYW1lT2JqZWN0SW5pdF9yaWdpZEJvZHlfYWRkQ29uc3RyYWludFwiLFxuXG4gICAgICAgIE1PVVNFX0NMSUNLID0gPGFueT5cImR5X21vdXNlY2xpY2tcIixcbiAgICAgICAgTU9VU0VfRE9XTiA9IDxhbnk+XCJkeV9tb3VzZWRvd25cIixcbiAgICAgICAgTU9VU0VfVVAgPSA8YW55PlwiZHlfbW91c2V1cFwiLFxuICAgICAgICBNT1VTRV9NT1ZFID0gPGFueT5cImR5X21vdXNlbW92ZVwiLFxuICAgICAgICBNT1VTRV9PVkVSID0gPGFueT5cImR5X21vdXNlb3ZlclwiLFxuICAgICAgICBNT1VTRV9PVVQgPSA8YW55PlwiZHlfbW91c2VvdXRcIixcbiAgICAgICAgTU9VU0VfV0hFRUwgPSA8YW55PlwiZHlfbW91c2V3aGVlbFwiLFxuICAgICAgICBNT1VTRV9EUkFHID0gPGFueT5cImR5X21vdXNlZHJhZ1wiLFxuXG4gICAgICAgIE1BVEVSSUFMX0NIQU5HRSA9IDxhbnk+XCJkeV9tYXRlcmlhbF9jaGFuZ2VcIixcblxuICAgICAgICBVSV9XSURUSF9DSEFOR0UgPSA8YW55PlwiZHlfdWlfd2lkdGhfY2hhbmdlXCIsXG4gICAgICAgIFVJX0hFSUdIVF9DSEFOR0UgPSA8YW55PlwiZHlfdWlfaGVpZ2h0X2NoYW5nZVwiLFxuXG4gICAgICAgIFRSQU5TRk9STV9UUkFOU0xBVEUgPSA8YW55PlwiZHlfdHJhbnNmb3JtX3RyYW5zbGF0ZVwiLFxuICAgICAgICBUUkFOU0ZPUk1fUk9UQVRFID0gPGFueT5cImR5X3RyYW5zZm9ybV9yb3RhdGVcIixcbiAgICAgICAgVFJBTlNGT1JNX1NDQUxFID0gPGFueT5cImR5X3RyYW5zZm9ybV9zY2FsZVwiXG4gICAgfVxufVxuIiwibW9kdWxlIHdke1xuICAgIGV4cG9ydCBhYnN0cmFjdCBjbGFzcyBFdmVudFRyaWdnZXJEZXRlY3RvciBleHRlbmRzIENvbXBvbmVudHtcbiAgICAgICAgLy9wdWJsaWMgdHJpZ2dlck1vZGU6RXZlbnRUcmlnZ2VyTW9kZSA9IEV2ZW50VHJpZ2dlck1vZGUuVE9QO1xuXG4gICAgICAgIHB1YmxpYyBhYnN0cmFjdCBpc1RyaWdnZXIoZTpNb3VzZUV2ZW50KTpib29sZWFuO1xuICAgIH1cbn1cblxuIiwibW9kdWxlIHdkIHtcbiAgICAvL3RvZG8gc3VwcG9ydCBjaGFuZ2UgZXZlbnQgcmVjdCByYW5nZShiZWNhdXNlIGlmIHJvdGF0ZSwgdGhlIHRoZSBldmVudCByZWN0IHJhbmdlIG1heSBiZSBtdWNoIGRpZmZlcmVudCBmcm9tIHRoZSBvbmUgb2YgZHJhd2VkIGluIGNhbnZhcylcbiAgICBleHBvcnQgY2xhc3MgVUlFdmVudFRyaWdnZXJEZXRlY3RvciBleHRlbmRzIEV2ZW50VHJpZ2dlckRldGVjdG9yIHtcbiAgICAgICAgcHVibGljIHN0YXRpYyBjcmVhdGUoKSB7XG4gICAgICAgICAgICB2YXIgb2JqID0gbmV3IHRoaXMoKTtcblxuICAgICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBpc1RyaWdnZXIoZTpNb3VzZUV2ZW50KTpib29sZWFuIHtcbiAgICAgICAgICAgIHZhciB0cmFuc2Zvcm06UmVjdFRyYW5zZm9ybSA9IHRoaXMuZW50aXR5T2JqZWN0LnRyYW5zZm9ybSxcbiAgICAgICAgICAgICAgICB3aWR0aCA9IHRyYW5zZm9ybS53aWR0aCxcbiAgICAgICAgICAgICAgICBoZWlnaHQgPSB0cmFuc2Zvcm0uaGVpZ2h0LFxuICAgICAgICAgICAgICAgIHBvc2l0aW9uID0gdHJhbnNmb3JtLnBvc2l0aW9uLFxuICAgICAgICAgICAgICAgIGxvY2F0aW9uSW5WaWV3ID0gZS5sb2NhdGlvbkluVmlldyxcbiAgICAgICAgICAgICAgICBsZWZ0VXBDb3JuZXJQb3NpdGlvbiA9IG51bGw7XG5cbiAgICAgICAgICAgIGxlZnRVcENvcm5lclBvc2l0aW9uID0gVmVjdG9yMi5jcmVhdGUocG9zaXRpb24ueCAtIHdpZHRoIC8gMiwgcG9zaXRpb24ueSAtIGhlaWdodCAvIDIpO1xuXG4gICAgICAgICAgICByZXR1cm4gRXZlbnRUcmlnZ2VyRGV0ZWN0b3JVdGlscy5pc0luUmVjdChsb2NhdGlvbkluVmlldywgbGVmdFVwQ29ybmVyUG9zaXRpb24sIHdpZHRoLCBoZWlnaHQpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4iLCJtb2R1bGUgd2Qge1xuICAgIGV4cG9ydCBjbGFzcyBSYXlDYXN0ZXJFdmVudFRyaWdnZXJEZXRlY3RvciBleHRlbmRzIEV2ZW50VHJpZ2dlckRldGVjdG9yIHtcbiAgICAgICAgcHVibGljIHN0YXRpYyBjcmVhdGUoKSB7XG4gICAgICAgICAgICB2YXIgb2JqID0gbmV3IHRoaXMoKTtcblxuICAgICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBpc1RyaWdnZXIoZTpNb3VzZUV2ZW50KTpib29sZWFuIHtcbiAgICAgICAgICAgIHZhciBzY2VuZTpTY2VuZURpc3BhdGNoZXIgPSBEaXJlY3Rvci5nZXRJbnN0YW5jZSgpLnNjZW5lLFxuICAgICAgICAgICAgICAgIGNhbWVyYUNvbnRyb2xsZXI6Q2FtZXJhQ29udHJvbGxlciA9IHNjZW5lLmNhbWVyYS5nZXRDb21wb25lbnQ8Q2FtZXJhQ29udHJvbGxlcj4oQ2FtZXJhQ29udHJvbGxlciksXG4gICAgICAgICAgICAgICAgbG9jYXRpb25JblZpZXcgPSBlLmxvY2F0aW9uSW5WaWV3O1xuXG4gICAgICAgICAgICByZXR1cm4gY2FtZXJhQ29udHJvbGxlci5pc0ludGVyc2VjdFdpdGhSYXkoPEdhbWVPYmplY3Q+dGhpcy5lbnRpdHlPYmplY3QsIGxvY2F0aW9uSW5WaWV3LngsIGxvY2F0aW9uSW5WaWV3LnkpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4iLCJtb2R1bGUgd2Qge1xuICAgIGV4cG9ydCBjbGFzcyBTY2VuZUV2ZW50VHJpZ2dlckRldGVjdG9yIGV4dGVuZHMgRXZlbnRUcmlnZ2VyRGV0ZWN0b3Ige1xuICAgICAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZSgpIHtcbiAgICAgICAgICAgIHZhciBvYmogPSBuZXcgdGhpcygpO1xuXG4gICAgICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGlzVHJpZ2dlcihlOk1vdXNlRXZlbnQpOmJvb2xlYW4ge1xuICAgICAgICAgICAgdmFyIHZpZXc6SVZpZXcgPSBEZXZpY2VNYW5hZ2VyLmdldEluc3RhbmNlKCkudmlldyxcbiAgICAgICAgICAgICAgICB3aWR0aCA9IHZpZXcud2lkdGgsXG4gICAgICAgICAgICAgICAgaGVpZ2h0ID0gdmlldy5oZWlnaHQsXG4gICAgICAgICAgICAgICAgbG9jYXRpb25JblZpZXcgPSBlLmxvY2F0aW9uSW5WaWV3LFxuICAgICAgICAgICAgICAgIGxlZnRVcENvcm5lclBvc2l0aW9uID0gVmVjdG9yMi5jcmVhdGUoMCwgMCk7XG5cbiAgICAgICAgICAgIHJldHVybiBFdmVudFRyaWdnZXJEZXRlY3RvclV0aWxzLmlzSW5SZWN0KGxvY2F0aW9uSW5WaWV3LCBsZWZ0VXBDb3JuZXJQb3NpdGlvbiwgd2lkdGgsIGhlaWdodCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbiIsIm1vZHVsZSB3ZCB7XG4gICAgZXhwb3J0IGNsYXNzIEV2ZW50VHJpZ2dlckRldGVjdG9yVXRpbHMge1xuICAgICAgICBwdWJsaWMgc3RhdGljIGlzSW5SZWN0KGxvY2F0aW9uSW5WaWV3OlBvaW50LCBsZWZ0VXBDb3JuZXJQb3NpdGlvbjpWZWN0b3IyLCB3aWR0aDpudW1iZXIsIGhlaWdodDpudW1iZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBsb2NhdGlvbkluVmlldy54ID49IGxlZnRVcENvcm5lclBvc2l0aW9uLnggJiYgbG9jYXRpb25JblZpZXcueCA8PSBsZWZ0VXBDb3JuZXJQb3NpdGlvbi54ICsgd2lkdGggJiYgbG9jYXRpb25JblZpZXcueSA+PSBsZWZ0VXBDb3JuZXJQb3NpdGlvbi55ICYmIGxvY2F0aW9uSW5WaWV3LnkgPD0gbGVmdFVwQ29ybmVyUG9zaXRpb24ueSArIGhlaWdodDtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsIm1vZHVsZSB3ZHtcbiAgICBjb25zdCBfc2NyaXB0SGFuZGxlck5hbWVUYWJsZSA9IHdkQ2IuSGFzaC5jcmVhdGU8c3RyaW5nPigpLFxuICAgICAgICBfc2NyaXB0RW5naW5lRXZlbnRUYWJsZSA9IHdkQ2IuSGFzaC5jcmVhdGU8c3RyaW5nPigpO1xuXG4gICAgLy90b2RvIG5vdCBkZWNsYXJlIFwiPGFueT5cIiFcbiAgICBfc2NyaXB0SGFuZGxlck5hbWVUYWJsZS5hZGRDaGlsZCg8YW55PkV2ZW50TmFtZS5DTElDSywgXCJvbk1vdXNlQ2xpY2tcIik7XG4gICAgX3NjcmlwdEhhbmRsZXJOYW1lVGFibGUuYWRkQ2hpbGQoPGFueT5FdmVudE5hbWUuTU9VU0VPVkVSLCBcIm9uTW91c2VPdmVyXCIpO1xuICAgIF9zY3JpcHRIYW5kbGVyTmFtZVRhYmxlLmFkZENoaWxkKDxhbnk+RXZlbnROYW1lLk1PVVNFT1VULCBcIm9uTW91c2VPdXRcIik7XG4gICAgX3NjcmlwdEhhbmRsZXJOYW1lVGFibGUuYWRkQ2hpbGQoPGFueT5FdmVudE5hbWUuTU9VU0VNT1ZFLCBcIm9uTW91c2VNb3ZlXCIpO1xuICAgIF9zY3JpcHRIYW5kbGVyTmFtZVRhYmxlLmFkZENoaWxkKDxhbnk+RXZlbnROYW1lLk1PVVNFRE9XTiwgXCJvbk1vdXNlRG93blwiKTtcbiAgICBfc2NyaXB0SGFuZGxlck5hbWVUYWJsZS5hZGRDaGlsZCg8YW55PkV2ZW50TmFtZS5NT1VTRVVQLCBcIm9uTW91c2VVcFwiKTtcbiAgICBfc2NyaXB0SGFuZGxlck5hbWVUYWJsZS5hZGRDaGlsZCg8YW55PkV2ZW50TmFtZS5NT1VTRVdIRUVMLCBcIm9uTW91c2VXaGVlbFwiKTtcbiAgICBfc2NyaXB0SGFuZGxlck5hbWVUYWJsZS5hZGRDaGlsZCg8YW55PkV2ZW50TmFtZS5NT1VTRURSQUcsIFwib25Nb3VzZURyYWdcIik7XG5cblxuICAgIF9zY3JpcHRFbmdpbmVFdmVudFRhYmxlLmFkZENoaWxkKDxhbnk+RXZlbnROYW1lLkNMSUNLLCBcIk1PVVNFX0NMSUNLXCIpO1xuICAgIF9zY3JpcHRFbmdpbmVFdmVudFRhYmxlLmFkZENoaWxkKDxhbnk+RXZlbnROYW1lLk1PVVNFRE9XTiwgXCJNT1VTRV9ET1dOXCIpO1xuICAgIF9zY3JpcHRFbmdpbmVFdmVudFRhYmxlLmFkZENoaWxkKDxhbnk+RXZlbnROYW1lLk1PVVNFVVAsIFwiTU9VU0VfVVBcIik7XG4gICAgX3NjcmlwdEVuZ2luZUV2ZW50VGFibGUuYWRkQ2hpbGQoPGFueT5FdmVudE5hbWUuTU9VU0VNT1ZFLCBcIk1PVVNFX01PVkVcIik7XG4gICAgX3NjcmlwdEVuZ2luZUV2ZW50VGFibGUuYWRkQ2hpbGQoPGFueT5FdmVudE5hbWUuTU9VU0VPVkVSLCBcIk1PVVNFX09WRVJcIik7XG4gICAgX3NjcmlwdEVuZ2luZUV2ZW50VGFibGUuYWRkQ2hpbGQoPGFueT5FdmVudE5hbWUuTU9VU0VPVVQsIFwiTU9VU0VfT1VUXCIpO1xuICAgIF9zY3JpcHRFbmdpbmVFdmVudFRhYmxlLmFkZENoaWxkKDxhbnk+RXZlbnROYW1lLk1PVVNFV0hFRUwsIFwiTU9VU0VfV0hFRUxcIik7XG4gICAgX3NjcmlwdEVuZ2luZUV2ZW50VGFibGUuYWRkQ2hpbGQoPGFueT5FdmVudE5hbWUuTU9VU0VEUkFHLCBcIk1PVVNFX0RSQUdcIik7XG5cbiAgICBleHBvcnQgY2xhc3MgRXZlbnRUcmlnZ2VyVGFibGV7XG4gICAgICAgIHB1YmxpYyBzdGF0aWMgZ2V0U2NyaXB0SGFuZGxlck5hbWUoZXZlbnROYW1lOkV2ZW50TmFtZSl7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gX3NjcmlwdEhhbmRsZXJOYW1lVGFibGUuZ2V0Q2hpbGQoPGFueT5ldmVudE5hbWUpO1xuXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHN0YXRpYyBnZXRTY3JpcHRFbmdpbmVFdmVudChldmVudE5hbWU6RXZlbnROYW1lKXtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBfc2NyaXB0RW5naW5lRXZlbnRUYWJsZS5nZXRDaGlsZCg8YW55PmV2ZW50TmFtZSk7XG5cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICB9XG59IiwibW9kdWxlIHdke1xuICAgIGV4cG9ydCBjbGFzcyBTY3JpcHQgZXh0ZW5kcyBDb21wb25lbnR7XG4gICAgICAgIHB1YmxpYyBzdGF0aWMgc2NyaXB0TGlzdDp3ZENiLlN0YWNrPFNjcmlwdEZpbGVEYXRhPiA9IHdkQ2IuU3RhY2suY3JlYXRlPFNjcmlwdEZpbGVEYXRhPigpO1xuXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlKCk6U2NyaXB0O1xuICAgICAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZSh1cmw6c3RyaW5nKTpTY3JpcHQ7XG5cbiAgICAgICAgcHVibGljIHN0YXRpYyBjcmVhdGUoLi4uYXJncykge1xuICAgICAgICAgICAgaWYoYXJncy5sZW5ndGggPT09IDApe1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgdGhpcygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZihhcmdzLmxlbmd0aCA9PT0gMSl7XG4gICAgICAgICAgICAgICAgbGV0IHVybCA9IGFyZ3NbMF07XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IHRoaXModXJsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgYWRkU2NyaXB0KHNjcmlwdE5hbWU6c3RyaW5nLCBfY2xhc3M6RnVuY3Rpb24pe1xuICAgICAgICAgICAgdGhpcy5zY3JpcHRMaXN0LnB1c2goPFNjcmlwdEZpbGVEYXRhPntcbiAgICAgICAgICAgICAgICBuYW1lOiBzY3JpcHROYW1lLFxuICAgICAgICAgICAgICAgIGNsYXNzOiBfY2xhc3NcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3RydWN0b3IodXJsOnN0cmluZyA9IG51bGwpe1xuICAgICAgICAgICAgc3VwZXIoKTtcblxuICAgICAgICAgICAgdGhpcy51cmwgPSB1cmw7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgdXJsOnN0cmluZyA9IG51bGw7XG5cbiAgICAgICAgcHVibGljIGNyZWF0ZUxvYWRKc1N0cmVhbSgpe1xuICAgICAgICAgICAgTG9nLmVycm9yKCF0aGlzLnVybCwgTG9nLmluZm8uRlVOQ19NVVNUX0RFRklORShcInVybFwiKSk7XG5cbiAgICAgICAgICAgIHJldHVybiBMb2FkZXJNYW5hZ2VyLmdldEluc3RhbmNlKCkubG9hZCh0aGlzLnVybClcbiAgICAgICAgICAgIC5tYXAoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gU2NyaXB0LnNjcmlwdExpc3QucG9wKCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgYWRkVG9PYmplY3QoZW50aXR5T2JqZWN0OkVudGl0eU9iamVjdCl7XG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICAgICAgICAgIHN1cGVyLmFkZFRvT2JqZWN0KGVudGl0eU9iamVjdCk7XG5cbiAgICAgICAgICAgIHRoaXMuY3JlYXRlTG9hZEpzU3RyZWFtKClcbiAgICAgICAgICAgICAgICAuc3Vic2NyaWJlKChkYXRhOlNjcmlwdEZpbGVEYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuX2hhbmRsZXJBZnRlckxvYWRlZFNjcmlwdChkYXRhLCBlbnRpdHlPYmplY3QpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfaGFuZGxlckFmdGVyTG9hZGVkU2NyaXB0KGRhdGE6U2NyaXB0RmlsZURhdGEsIGVudGl0eU9iamVjdDpFbnRpdHlPYmplY3Qpe1xuICAgICAgICAgICAgdGhpcy5fYWRkU2NyaXB0VG9FbnRpdHlPYmplY3QoZW50aXR5T2JqZWN0LCBkYXRhKTtcbiAgICAgICAgICAgIGVudGl0eU9iamVjdC5leGVjU2NyaXB0KFwib25FbnRlclwiLCBudWxsLCB0cnVlKTtcblxuICAgICAgICAgICAgRXZlbnRNYW5hZ2VyLnRyaWdnZXIoQ3VzdG9tRXZlbnQuY3JlYXRlKDxhbnk+RW5naW5lRXZlbnQuQkVGT1JFX0dBTUVPQkpFQ1RfSU5JVCkpO1xuXG4gICAgICAgICAgICBlbnRpdHlPYmplY3QuZXhlY1NjcmlwdChcImluaXRcIiwgbnVsbCwgdHJ1ZSk7XG5cbiAgICAgICAgICAgIEV2ZW50TWFuYWdlci50cmlnZ2VyKEN1c3RvbUV2ZW50LmNyZWF0ZSg8YW55PkVuZ2luZUV2ZW50LkFGVEVSX0dBTUVPQkpFQ1RfSU5JVCkpO1xuXG4gICAgICAgICAgICBFdmVudE1hbmFnZXIudHJpZ2dlcihDdXN0b21FdmVudC5jcmVhdGUoPGFueT5FbmdpbmVFdmVudC5BRlRFUl9HQU1FT0JKRUNUX0lOSVRfUklHSURCT0RZX0FERF9DT05TVFJBSU5UKSk7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9hZGRTY3JpcHRUb0VudGl0eU9iamVjdChlbnRpdHlPYmplY3Q6RW50aXR5T2JqZWN0LCBkYXRhOlNjcmlwdEZpbGVEYXRhKXtcbiAgICAgICAgICAgIGVudGl0eU9iamVjdC5zY3JpcHRMaXN0LmFkZENoaWxkKGRhdGEubmFtZSwgbmV3IGRhdGEuY2xhc3MoZW50aXR5T2JqZWN0KSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBleHBvcnQgdHlwZSBTY3JpcHRGaWxlRGF0YSA9IHtcbiAgICAgICAgbmFtZTpzdHJpbmc7XG4gICAgICAgIGNsYXNzOmFueTtcbiAgICB9O1xufVxuIiwibW9kdWxlIHdke1xuICAgIGV4cG9ydCBjbGFzcyBUcmFuc2Zvcm0gZXh0ZW5kcyBDb21wb25lbnR7XG4gICAgICAgIHByb3RlY3RlZCBwX3BhcmVudDpUcmFuc2Zvcm0gPSBudWxsO1xuICAgICAgICBnZXQgcGFyZW50KCl7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wX3BhcmVudDtcbiAgICAgICAgfVxuICAgICAgICBzZXQgcGFyZW50KHBhcmVudDpUcmFuc2Zvcm0pe1xuICAgICAgICAgICAgdGhpcy5zZXRQYXJlbnQocGFyZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBkaXJ0eUxvY2FsOmJvb2xlYW4gPSB0cnVlO1xuXG4gICAgICAgIHByb3RlY3RlZCBjaGlsZHJlbjp3ZENiLkNvbGxlY3Rpb248VHJhbnNmb3JtPiA9IHdkQ2IuQ29sbGVjdGlvbi5jcmVhdGU8VHJhbnNmb3JtPigpO1xuXG5cbiAgICAgICAgcHVibGljIGFkZENoaWxkKGNoaWxkOlRyYW5zZm9ybSl7XG4gICAgICAgICAgICB0aGlzLmNoaWxkcmVuLmFkZENoaWxkKGNoaWxkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyByZW1vdmVDaGlsZChjaGlsZDpUcmFuc2Zvcm0pe1xuICAgICAgICAgICAgdGhpcy5jaGlsZHJlbi5yZW1vdmVDaGlsZChjaGlsZCk7XG4gICAgICAgIH1cblxuICAgICAgICBwcm90ZWN0ZWQgc2V0UGFyZW50KHBhcmVudDpUcmFuc2Zvcm0pe1xuICAgICAgICAgICAgaWYodGhpcy5wX3BhcmVudCl7XG4gICAgICAgICAgICAgICAgdGhpcy5wX3BhcmVudC5yZW1vdmVDaGlsZCh0aGlzKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYoIXBhcmVudCl7XG4gICAgICAgICAgICAgICAgdGhpcy5wX3BhcmVudCA9IG51bGw7XG5cbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMucF9wYXJlbnQgPSBwYXJlbnQ7XG4gICAgICAgICAgICB0aGlzLnBfcGFyZW50LmFkZENoaWxkKHRoaXMpO1xuXG4gICAgICAgICAgICAvL3RvZG8gY2FuIGhhcyBtdWx0aSBwYXJlbnQ/XG4gICAgICAgIH1cblxuICAgICAgICBwcm90ZWN0ZWQgZ2V0TWF0cml4KHN5bmNNZXRob2Q6c3RyaW5nLCBtYXRyaXhBdHRyaU5hbWU6c3RyaW5nKXtcbiAgICAgICAgICAgIHZhciBzeW5jTGlzdCA9IHdkQ2IuQ29sbGVjdGlvbi5jcmVhdGU8VHJhbnNmb3JtPigpLFxuICAgICAgICAgICAgICAgIGN1cnJlbnQgPSB0aGlzLnBfcGFyZW50O1xuXG4gICAgICAgICAgICBzeW5jTGlzdC5hZGRDaGlsZCh0aGlzKTtcblxuICAgICAgICAgICAgd2hpbGUgKGN1cnJlbnQgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBzeW5jTGlzdC5hZGRDaGlsZChjdXJyZW50KTtcbiAgICAgICAgICAgICAgICBjdXJyZW50ID0gY3VycmVudC5wYXJlbnQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHN5bmNMaXN0LnJldmVyc2UoKS5mb3JFYWNoKCh0cmFuc2Zvcm06VHJhbnNmb3JtKSA9PiB7XG4gICAgICAgICAgICAgICAgdHJhbnNmb3JtW3N5bmNNZXRob2RdKCk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmV0dXJuIHRoaXNbbWF0cml4QXR0cmlOYW1lXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByb3RlY3RlZCBzZXRDaGlsZHJlblRyYW5zZm9ybVN0YXRlKHRyYW5zZm9ybVN0YXRlOnN0cmluZyl7XG4gICAgICAgICAgICBpZih0aGlzW3RyYW5zZm9ybVN0YXRlXSl7XG4gICAgICAgICAgICAgICAgdGhpcy5jaGlsZHJlbi5mb3JFYWNoKChjaGlsZDpUcmFuc2Zvcm0pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY2hpbGRbdHJhbnNmb3JtU3RhdGVdID0gdHJhbnNmb3JtU3RhdGU7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgIH1cbn1cbiIsIm1vZHVsZSB3ZHtcbiAgICBleHBvcnQgY2xhc3MgVGhyZWVEVHJhbnNmb3JtIGV4dGVuZHMgVHJhbnNmb3Jte1xuICAgICAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZSgpIHtcbiAgICAgICAgICAgIHZhciBvYmogPSBuZXcgdGhpcygpO1xuXG4gICAgICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfbG9jYWxUb1dvcmxkTWF0cml4Ok1hdHJpeDQgPSBudWxsO1xuICAgICAgICBnZXQgbG9jYWxUb1dvcmxkTWF0cml4KCl7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRNYXRyaXgoXCJzeW5jXCIsIFwiX2xvY2FsVG9Xb3JsZE1hdHJpeFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX3Bvc2l0aW9uOlZlY3RvcjMgPSBWZWN0b3IzLmNyZWF0ZSgpO1xuICAgICAgICBnZXQgcG9zaXRpb24oKXtcbiAgICAgICAgICAgIHRoaXMuX3Bvc2l0aW9uID0gdGhpcy5sb2NhbFRvV29ybGRNYXRyaXguZ2V0VHJhbnNsYXRpb24oKTtcblxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3Bvc2l0aW9uO1xuICAgICAgICB9XG4gICAgICAgIHNldCBwb3NpdGlvbihwb3NpdGlvbjpWZWN0b3IzKXtcbiAgICAgICAgICAgIGlmICh0aGlzLnBfcGFyZW50ID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbG9jYWxQb3NpdGlvbiA9IHBvc2l0aW9uLmNvcHkoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuX2xvY2FsUG9zaXRpb24gPSB0aGlzLnBfcGFyZW50LmxvY2FsVG9Xb3JsZE1hdHJpeC5jb3B5KCkuaW52ZXJ0KCkubXVsdGlwbHlQb2ludChwb3NpdGlvbik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuaXNUcmFuc2xhdGUgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfcm90YXRpb246UXVhdGVybmlvbiA9IFF1YXRlcm5pb24uY3JlYXRlKDAsIDAsIDAsIDEpO1xuICAgICAgICBnZXQgcm90YXRpb24oKXtcbiAgICAgICAgICAgIHRoaXMuX3JvdGF0aW9uLnNldEZyb21NYXRyaXgodGhpcy5sb2NhbFRvV29ybGRNYXRyaXgpO1xuXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fcm90YXRpb247XG4gICAgICAgIH1cbiAgICAgICAgc2V0IHJvdGF0aW9uKHJvdGF0aW9uOlF1YXRlcm5pb24pe1xuICAgICAgICAgICAgaWYgKHRoaXMucF9wYXJlbnQgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9sb2NhbFJvdGF0aW9uID0gcm90YXRpb24uY29weSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbG9jYWxSb3RhdGlvbiA9IHRoaXMucF9wYXJlbnQucm90YXRpb24uY29weSgpLmludmVydCgpLm11bHRpcGx5KHJvdGF0aW9uKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5pc1JvdGF0ZSA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9zY2FsZTpWZWN0b3IzID0gVmVjdG9yMy5jcmVhdGUoMSwgMSwgMSk7XG4gICAgICAgIGdldCBzY2FsZSgpe1xuICAgICAgICAgICAgdGhpcy5fc2NhbGUgPSB0aGlzLmxvY2FsVG9Xb3JsZE1hdHJpeC5nZXRTY2FsZSgpO1xuXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fc2NhbGU7XG4gICAgICAgIH1cbiAgICAgICAgc2V0IHNjYWxlKHNjYWxlOlZlY3RvcjMpe1xuICAgICAgICAgICAgaWYgKHRoaXMucF9wYXJlbnQgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9sb2NhbFNjYWxlID0gc2NhbGUuY29weSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbG9jYWxTY2FsZSA9IHRoaXMucF9wYXJlbnQubG9jYWxUb1dvcmxkTWF0cml4LmNvcHkoKS5pbnZlcnQoKS5tdWx0aXBseVZlY3RvcjMoc2NhbGUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLmlzU2NhbGUgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfZXVsZXJBbmdsZXM6VmVjdG9yMyA9IG51bGw7XG4gICAgICAgIGdldCBldWxlckFuZ2xlcygpe1xuICAgICAgICAgICAgdGhpcy5fZXVsZXJBbmdsZXMgPSB0aGlzLmxvY2FsVG9Xb3JsZE1hdHJpeC5nZXRFdWxlckFuZ2xlcygpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2V1bGVyQW5nbGVzO1xuICAgICAgICB9XG4gICAgICAgIHNldCBldWxlckFuZ2xlcyhldWxlckFuZ2xlczpWZWN0b3IzKXtcbiAgICAgICAgICAgIHRoaXMuX2xvY2FsUm90YXRpb24uc2V0RnJvbUV1bGVyQW5nbGVzKGV1bGVyQW5nbGVzKTtcblxuICAgICAgICAgICAgaWYgKHRoaXMucF9wYXJlbnQgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9sb2NhbFJvdGF0aW9uID0gdGhpcy5wX3BhcmVudC5yb3RhdGlvbi5jb3B5KCkuaW52ZXJ0KCkubXVsdGlwbHkodGhpcy5fbG9jYWxSb3RhdGlvbik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuaXNSb3RhdGUgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfbG9jYWxQb3NpdGlvbjpWZWN0b3IzID0gVmVjdG9yMy5jcmVhdGUoMCwgMCwgMCk7XG4gICAgICAgIGdldCBsb2NhbFBvc2l0aW9uKCl7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbG9jYWxQb3NpdGlvbjtcbiAgICAgICAgfVxuICAgICAgICBzZXQgbG9jYWxQb3NpdGlvbihwb3NpdGlvbjpWZWN0b3IzKXtcbiAgICAgICAgICAgIHRoaXMuX2xvY2FsUG9zaXRpb24gPSBwb3NpdGlvbi5jb3B5KCk7XG5cbiAgICAgICAgICAgIHRoaXMuaXNUcmFuc2xhdGUgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfbG9jYWxSb3RhdGlvbjpRdWF0ZXJuaW9uID0gUXVhdGVybmlvbi5jcmVhdGUoMCwgMCwgMCwgMSk7XG4gICAgICAgIGdldCBsb2NhbFJvdGF0aW9uKCl7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbG9jYWxSb3RhdGlvbjtcbiAgICAgICAgfVxuICAgICAgICBzZXQgbG9jYWxSb3RhdGlvbihyb3RhdGlvbjpRdWF0ZXJuaW9uKXtcbiAgICAgICAgICAgIHRoaXMuX2xvY2FsUm90YXRpb24gPSByb3RhdGlvbi5jb3B5KCk7XG5cbiAgICAgICAgICAgIHRoaXMuaXNSb3RhdGUgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfbG9jYWxFdWxlckFuZ2xlczpWZWN0b3IzID0gbnVsbDtcbiAgICAgICAgZ2V0IGxvY2FsRXVsZXJBbmdsZXMoKXtcbiAgICAgICAgICAgIHRoaXMuX2xvY2FsRXVsZXJBbmdsZXMgPSB0aGlzLl9sb2NhbFJvdGF0aW9uLmdldEV1bGVyQW5nbGVzKCk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbG9jYWxFdWxlckFuZ2xlcztcbiAgICAgICAgfVxuICAgICAgICBzZXQgbG9jYWxFdWxlckFuZ2xlcyhsb2NhbEV1bGVyQW5nbGVzOlZlY3RvcjMpe1xuICAgICAgICAgICAgdGhpcy5fbG9jYWxSb3RhdGlvbi5zZXRGcm9tRXVsZXJBbmdsZXMobG9jYWxFdWxlckFuZ2xlcyk7XG5cbiAgICAgICAgICAgIHRoaXMuaXNSb3RhdGUgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfbG9jYWxTY2FsZTpWZWN0b3IzID0gVmVjdG9yMy5jcmVhdGUoMSwgMSwgMSk7XG4gICAgICAgIGdldCBsb2NhbFNjYWxlKCl7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbG9jYWxTY2FsZTtcbiAgICAgICAgfVxuICAgICAgICBzZXQgbG9jYWxTY2FsZShzY2FsZTpWZWN0b3IzKXtcbiAgICAgICAgICAgIHRoaXMuX2xvY2FsU2NhbGUgPSBzY2FsZS5jb3B5KCk7XG5cbiAgICAgICAgICAgIHRoaXMuaXNTY2FsZSA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBnZXQgdXAoKXtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxvY2FsVG9Xb3JsZE1hdHJpeC5nZXRZKCkubm9ybWFsaXplKCk7XG4gICAgICAgIH1cblxuICAgICAgICBnZXQgcmlnaHQoKXtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxvY2FsVG9Xb3JsZE1hdHJpeC5nZXRYKCkubm9ybWFsaXplKCk7XG4gICAgICAgIH1cblxuICAgICAgICBnZXQgZm9yd2FyZCgpe1xuICAgICAgICAgICAgLy90b2RvIHdoeSBzY2FsZSgtMSk/XG4gICAgICAgICAgICAvL3JldHVybiB0aGlzLmxvY2FsVG9Xb3JsZE1hdHJpeC5nZXRaKCkubm9ybWFsaXplKCk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5sb2NhbFRvV29ybGRNYXRyaXguZ2V0WigpLm5vcm1hbGl6ZSgpLnNjYWxlKC0xKTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgZ2V0IGlzVHJhbnNmb3JtKCl7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5pc1RyYW5zbGF0ZSB8fCB0aGlzLmlzUm90YXRlIHx8IHRoaXMuaXNTY2FsZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX2lzVHJhbnNsYXRlOmJvb2xlYW4gPSBmYWxzZTtcbiAgICAgICAgZ2V0IGlzVHJhbnNsYXRlKCl7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5faXNUcmFuc2xhdGU7XG4gICAgICAgIH1cbiAgICAgICAgc2V0IGlzVHJhbnNsYXRlKGlzVHJhbnNsYXRlOmJvb2xlYW4pe1xuICAgICAgICAgICAgdGhpcy5faXNUcmFuc2xhdGUgPSBpc1RyYW5zbGF0ZTtcblxuICAgICAgICAgICAgaWYoaXNUcmFuc2xhdGUpe1xuICAgICAgICAgICAgICAgIHRoaXMuZGlydHlMb2NhbCA9IHRydWU7XG5cbiAgICAgICAgICAgICAgICB0aGlzLnNldENoaWxkcmVuVHJhbnNmb3JtU3RhdGUoXCJpc1RyYW5zbGF0ZVwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX2lzUm90YXRlOmJvb2xlYW4gPSBmYWxzZTtcbiAgICAgICAgZ2V0IGlzUm90YXRlKCl7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5faXNSb3RhdGU7XG4gICAgICAgIH1cbiAgICAgICAgc2V0IGlzUm90YXRlKGlzUm90YXRlOmJvb2xlYW4pe1xuICAgICAgICAgICAgdGhpcy5faXNSb3RhdGUgPSBpc1JvdGF0ZTtcblxuICAgICAgICAgICAgaWYoaXNSb3RhdGUpe1xuICAgICAgICAgICAgICAgIHRoaXMuZGlydHlMb2NhbCA9IHRydWU7XG5cbiAgICAgICAgICAgICAgICB0aGlzLnNldENoaWxkcmVuVHJhbnNmb3JtU3RhdGUoXCJpc1JvdGF0ZVwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX2lzU2NhbGU6Ym9vbGVhbiA9IGZhbHNlO1xuICAgICAgICBnZXQgaXNTY2FsZSgpe1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2lzU2NhbGU7XG4gICAgICAgIH1cbiAgICAgICAgc2V0IGlzU2NhbGUoaXNTY2FsZTpib29sZWFuKXtcbiAgICAgICAgICAgIHRoaXMuX2lzU2NhbGUgPSBpc1NjYWxlO1xuXG4gICAgICAgICAgICBpZihpc1NjYWxlKXtcbiAgICAgICAgICAgICAgICB0aGlzLmRpcnR5TG9jYWwgPSB0cnVlO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRDaGlsZHJlblRyYW5zZm9ybVN0YXRlKFwiaXNTY2FsZVwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBkaXJ0eVdvcmxkOmJvb2xlYW4gPSBudWxsO1xuXG4gICAgICAgIHByb3RlY3RlZCBwX3BhcmVudDpUaHJlZURUcmFuc2Zvcm07XG4gICAgICAgIHByb3RlY3RlZCBjaGlsZHJlbjp3ZENiLkNvbGxlY3Rpb248VGhyZWVEVHJhbnNmb3JtPjtcblxuICAgICAgICBwcml2YXRlIF9sb2NhbFRvUGFyZW50TWF0cml4Ok1hdHJpeDQgPSBNYXRyaXg0LmNyZWF0ZSgpO1xuICAgICAgICBwcml2YXRlIF9lbmRMb29wU3Vic2NyaXB0aW9uOndkRnJwLklEaXNwb3NhYmxlID0gbnVsbDtcblxuXG4gICAgICAgIHB1YmxpYyBpbml0KCl7XG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICAgICAgICAgIHRoaXMuX2VuZExvb3BTdWJzY3JpcHRpb24gPSBFdmVudE1hbmFnZXIuZnJvbUV2ZW50KDxhbnk+RW5naW5lRXZlbnQuRU5ETE9PUClcbiAgICAgICAgICAgICAgICAuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5fcmVzZXRUcmFuc2Zvcm1GbGFnKCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgZGlzcG9zZSgpe1xuICAgICAgICAgICAgc3VwZXIuZGlzcG9zZSgpO1xuXG4gICAgICAgICAgICB0aGlzLl9lbmRMb29wU3Vic2NyaXB0aW9uICYmIHRoaXMuX2VuZExvb3BTdWJzY3JpcHRpb24uZGlzcG9zZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHN5bmMoKXtcbiAgICAgICAgICAgIGlmICh0aGlzLmRpcnR5TG9jYWwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9sb2NhbFRvUGFyZW50TWF0cml4LnNldFRSUyh0aGlzLl9sb2NhbFBvc2l0aW9uLCB0aGlzLl9sb2NhbFJvdGF0aW9uLCB0aGlzLl9sb2NhbFNjYWxlKTtcblxuICAgICAgICAgICAgICAgIHRoaXMuZGlydHlMb2NhbCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHRoaXMuZGlydHlXb3JsZCA9IHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0aGlzLmRpcnR5V29ybGQpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5wX3BhcmVudCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9sb2NhbFRvV29ybGRNYXRyaXggPSB0aGlzLl9sb2NhbFRvUGFyZW50TWF0cml4LmNvcHkoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2xvY2FsVG9Xb3JsZE1hdHJpeCA9IHRoaXMucF9wYXJlbnQubG9jYWxUb1dvcmxkTWF0cml4LmNvcHkoKS5tdWx0aXBseSh0aGlzLl9sb2NhbFRvUGFyZW50TWF0cml4KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0aGlzLmRpcnR5V29ybGQgPSBmYWxzZTtcblxuICAgICAgICAgICAgICAgIHRoaXMuY2hpbGRyZW4uZm9yRWFjaCgoY2hpbGQ6VGhyZWVEVHJhbnNmb3JtKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNoaWxkLmRpcnR5V29ybGQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHRyYW5zbGF0ZUxvY2FsKHRyYW5zbGF0aW9uOlZlY3RvcjMpO1xuICAgICAgICBwdWJsaWMgdHJhbnNsYXRlTG9jYWwoeDpudW1iZXIsIHk6bnVtYmVyLCB6Om51bWJlcik7XG5cblxuICAgICAgICBwdWJsaWMgdHJhbnNsYXRlTG9jYWwoLi4uYXJncykge1xuICAgICAgICAgICAgdmFyIHRyYW5zbGF0aW9uID0gbnVsbDtcblxuICAgICAgICAgICAgaWYoYXJncy5sZW5ndGggPT09IDMpe1xuICAgICAgICAgICAgICAgIHRyYW5zbGF0aW9uID0gVmVjdG9yMy5jcmVhdGUoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgIHRyYW5zbGF0aW9uID0gYXJnc1swXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5fbG9jYWxQb3NpdGlvbiA9IHRoaXMuX2xvY2FsUG9zaXRpb24uYWRkKHRoaXMuX2xvY2FsUm90YXRpb24ubXVsdGlwbHlWZWN0b3IzKHRyYW5zbGF0aW9uKSk7XG5cbiAgICAgICAgICAgIHRoaXMuaXNUcmFuc2xhdGUgPSB0cnVlO1xuXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyB0cmFuc2xhdGUodHJhbnNsYXRpb246VmVjdG9yMyk7XG4gICAgICAgIHB1YmxpYyB0cmFuc2xhdGUoeDpudW1iZXIsIHk6bnVtYmVyLCB6Om51bWJlcik7XG5cbiAgICAgICAgcHVibGljIHRyYW5zbGF0ZSguLi5hcmdzKXtcbiAgICAgICAgICAgIHZhciB0cmFuc2xhdGlvbiA9IG51bGw7XG5cbiAgICAgICAgICAgIGlmKGFyZ3MubGVuZ3RoID09PSAzKXtcbiAgICAgICAgICAgICAgICB0cmFuc2xhdGlvbiA9IFZlY3RvcjMuY3JlYXRlKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICB0cmFuc2xhdGlvbiA9IGFyZ3NbMF07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMucG9zaXRpb24gPSB0cmFuc2xhdGlvbi5hZGQodGhpcy5wb3NpdGlvbik7XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHJvdGF0ZShldWxlckFuZ2xlczpWZWN0b3IzKTtcbiAgICAgICAgcHVibGljIHJvdGF0ZSh4Om51bWJlciwgeTpudW1iZXIsIHo6bnVtYmVyKTtcblxuICAgICAgICBwdWJsaWMgcm90YXRlKC4uLmFyZ3Mpe1xuICAgICAgICAgICAgdmFyIGV1bGVyQW5nbGVzID0gbnVsbCxcbiAgICAgICAgICAgICAgICBxdWF0ZXJuaW9uID0gUXVhdGVybmlvbi5jcmVhdGUoKTtcblxuICAgICAgICAgICAgaWYoYXJncy5sZW5ndGggPT09IDMpe1xuICAgICAgICAgICAgICAgIGV1bGVyQW5nbGVzID0gVmVjdG9yMy5jcmVhdGUoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgIGV1bGVyQW5nbGVzID0gYXJnc1swXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcXVhdGVybmlvbi5zZXRGcm9tRXVsZXJBbmdsZXMoZXVsZXJBbmdsZXMpO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5wX3BhcmVudCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2xvY2FsUm90YXRpb24gPSBxdWF0ZXJuaW9uLm11bHRpcGx5KHRoaXMuX2xvY2FsUm90YXRpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy90b2RvIHdoeT9cbiAgICAgICAgICAgICAgICBxdWF0ZXJuaW9uID0gdGhpcy5wX3BhcmVudC5yb3RhdGlvbi5jb3B5KCkuaW52ZXJ0KCkubXVsdGlwbHkocXVhdGVybmlvbik7XG4gICAgICAgICAgICAgICAgdGhpcy5fbG9jYWxSb3RhdGlvbiA9IHF1YXRlcm5pb24ubXVsdGlwbHkodGhpcy5yb3RhdGlvbik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuaXNSb3RhdGUgPSB0cnVlO1xuXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyByb3RhdGVMb2NhbChldWxlckFuZ2xlczpWZWN0b3IzKTtcbiAgICAgICAgcHVibGljIHJvdGF0ZUxvY2FsKHg6bnVtYmVyLCB5Om51bWJlciwgejpudW1iZXIpO1xuXG4gICAgICAgIHB1YmxpYyByb3RhdGVMb2NhbCguLi5hcmdzKXtcbiAgICAgICAgICAgIHZhciBldWxlckFuZ2xlcyA9IG51bGwsXG4gICAgICAgICAgICAgICAgcXVhdGVybmlvbiA9IFF1YXRlcm5pb24uY3JlYXRlKCk7XG5cbiAgICAgICAgICAgIGlmKGFyZ3MubGVuZ3RoID09PSAzKXtcbiAgICAgICAgICAgICAgICBldWxlckFuZ2xlcyA9IFZlY3RvcjMuY3JlYXRlKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICBldWxlckFuZ2xlcyA9IGFyZ3NbMF07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHF1YXRlcm5pb24uc2V0RnJvbUV1bGVyQW5nbGVzKGV1bGVyQW5nbGVzKTtcblxuICAgICAgICAgICAgdGhpcy5fbG9jYWxSb3RhdGlvbi5tdWx0aXBseShxdWF0ZXJuaW9uKTtcblxuICAgICAgICAgICAgdGhpcy5pc1JvdGF0ZSA9IHRydWU7XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHJvdGF0ZUFyb3VuZChhbmdsZTpudW1iZXIsIGNlbnRlcjpWZWN0b3IzLCBheGlzOlZlY3RvcjMpO1xuICAgICAgICBwdWJsaWMgcm90YXRlQXJvdW5kKGFuZ2xlOm51bWJlciwgY2VudGVyWDpudW1iZXIsIGNlbnRlclk6bnVtYmVyLCBjZW50ZXJaOm51bWJlciwgYXhpc1g6bnVtYmVyLCBheGlzWTpudW1iZXIsIGF4aXNaOm51bWJlcik7XG5cbiAgICAgICAgcHVibGljIHJvdGF0ZUFyb3VuZCguLi5hcmdzKXtcbiAgICAgICAgICAgIHZhciBhbmdsZSA9IG51bGwsXG4gICAgICAgICAgICAgICAgY2VudGVyID0gbnVsbCxcbiAgICAgICAgICAgICAgICBheGlzID0gbnVsbCxcbiAgICAgICAgICAgICAgICByb3Q6UXVhdGVybmlvbiA9IG51bGwsXG4gICAgICAgICAgICAgICAgZGlyOlZlY3RvcjMgPSBudWxsO1xuXG4gICAgICAgICAgICBpZihhcmdzLmxlbmd0aCA9PT0gMyl7XG4gICAgICAgICAgICAgICAgYW5nbGUgPSBhcmdzWzBdO1xuICAgICAgICAgICAgICAgIGNlbnRlciA9IGFyZ3NbMV07XG4gICAgICAgICAgICAgICAgYXhpcyA9IGFyZ3NbMl07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgIGFuZ2xlID0gYXJnc1swXTtcbiAgICAgICAgICAgICAgICBjZW50ZXIgPSBWZWN0b3IzLmNyZWF0ZShhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdKTtcbiAgICAgICAgICAgICAgICBheGlzID0gVmVjdG9yMy5jcmVhdGUoYXJnc1s0XSwgYXJnc1s1XSwgYXJnc1s2XSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJvdCA9IFF1YXRlcm5pb24uY3JlYXRlKCkuc2V0RnJvbUF4aXNBbmdsZShhbmdsZSwgYXhpcyk7XG4gICAgICAgICAgICAvLyBmaW5kIGN1cnJlbnQgZGlyZWN0aW9uIHJlbGF0aXZlIHRvIGNlbnRlclxuICAgICAgICAgICAgZGlyID0gdGhpcy5wb3NpdGlvbi5jb3B5KCkuc3ViKGNlbnRlcik7XG5cbiAgICAgICAgICAgIC8vIHJvdGF0ZSB0aGUgZGlyZWN0aW9uXG4gICAgICAgICAgICBkaXIgPSByb3QubXVsdGlwbHlWZWN0b3IzKGRpcik7XG5cbiAgICAgICAgICAgIC8vIGRlZmluZSBuZXcgcG9zaXRpb25cbiAgICAgICAgICAgIHRoaXMucG9zaXRpb24gPSBjZW50ZXIuYWRkKGRpcik7XG4gICAgICAgICAgICAvL3RvZG8gd2h5IFwidGhpcy5yb3RhdGlvbiA9IHRoaXMucm90YXRpb24ubXVsdGlwbHkocm90KVwiIHdpbGwgY2F1c2UgZW50aXR5T2JqZWN0IHJvdGF0ZSBkaXJlY3Rpb24gYXJvdW5kIHNlbGY/XG4gICAgICAgICAgICB0aGlzLnJvdGF0aW9uID0gcm90Lm11bHRpcGx5KHRoaXMucm90YXRpb24pO1xuXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBsb29rQXQodGFyZ2V0OlZlY3RvcjMpO1xuICAgICAgICBwdWJsaWMgbG9va0F0KHRhcmdldFg6bnVtYmVyLCB0YXJnZXRZOm51bWJlciwgdGFyZ2V0WjpudW1iZXIpO1xuICAgICAgICBwdWJsaWMgbG9va0F0KHRhcmdldDpWZWN0b3IzLCB1cDpWZWN0b3IzKTtcbiAgICAgICAgcHVibGljIGxvb2tBdCh0YXJnZXRYOm51bWJlciwgdGFyZ2V0WTpudW1iZXIsIHRhcmdldFo6bnVtYmVyLCB1cFg6bnVtYmVyLCB1cFk6bnVtYmVyLCB1cFo6bnVtYmVyKTtcblxuICAgICAgICBwdWJsaWMgbG9va0F0KC4uLmFyZ3Mpe1xuICAgICAgICAgICAgdmFyIHRhcmdldCA9IG51bGwsXG4gICAgICAgICAgICAgICAgdXAgPSBudWxsO1xuXG4gICAgICAgICAgICBpZihhcmdzLmxlbmd0aCA9PT0gMSl7XG4gICAgICAgICAgICAgICAgdGFyZ2V0ID0gYXJnc1swXTtcbiAgICAgICAgICAgICAgICB1cCA9IFZlY3RvcjMudXA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmKGFyZ3MubGVuZ3RoID09PSAyKXtcbiAgICAgICAgICAgICAgICB0YXJnZXQgPSBhcmdzWzBdO1xuICAgICAgICAgICAgICAgIHVwID0gYXJnc1sxXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYoYXJncy5sZW5ndGggPT09IDMpe1xuICAgICAgICAgICAgICAgIHRhcmdldCA9IFZlY3RvcjMuY3JlYXRlKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgICAgICAgICAgICAgIHVwID0gVmVjdG9yMy51cDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICAgICAgdGFyZ2V0ID0gVmVjdG9yMy5jcmVhdGUoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgICAgICAgICAgICAgdXAgPSBWZWN0b3IzLmNyZWF0ZShhcmdzWzNdLCBhcmdzWzRdLCBhcmdzWzVdKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5yb3RhdGlvbiA9IFF1YXRlcm5pb24uY3JlYXRlKCkuc2V0RnJvbU1hdHJpeChNYXRyaXg0LmNyZWF0ZSgpLnNldExvb2tBdCh0aGlzLnBvc2l0aW9uLCB0YXJnZXQsIHVwKSk7XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfcmVzZXRUcmFuc2Zvcm1GbGFnKCl7XG4gICAgICAgICAgICB0aGlzLmlzVHJhbnNsYXRlID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLmlzU2NhbGUgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuaXNSb3RhdGUgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuIiwibW9kdWxlIHdke1xuICAgIGV4cG9ydCBjbGFzcyBSZWN0VHJhbnNmb3JtIGV4dGVuZHMgVHJhbnNmb3Jte1xuICAgICAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZSgpIHtcbiAgICAgICAgICAgIHZhciBvYmogPSBuZXcgdGhpcygpO1xuXG4gICAgICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfcm90YXRpb25NYXRyaXg6TWF0cml4MyA9IG51bGw7XG4gICAgICAgIGdldCByb3RhdGlvbk1hdHJpeCgpe1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0TWF0cml4KFwic3luY1JvdGF0aW9uXCIsIFwiX3JvdGF0aW9uTWF0cml4XCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfbG9jYWxQb3NpdGlvbkFuZFNjYWxlTWF0cml4Ok1hdHJpeDMgPSBNYXRyaXgzLmNyZWF0ZSgpO1xuICAgICAgICBnZXQgbG9jYWxQb3NpdGlvbkFuZFNjYWxlTWF0cml4KCl7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRNYXRyaXgoXCJzeW5jUG9zaXRpb25BbmRTY2FsZVwiLCBcIl9sb2NhbFBvc2l0aW9uQW5kU2NhbGVNYXRyaXhcIik7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9wb3NpdGlvbjpWZWN0b3IyID0gVmVjdG9yMi5jcmVhdGUoKTtcbiAgICAgICAgZ2V0IHBvc2l0aW9uKCl7XG4gICAgICAgICAgICB0aGlzLl9wb3NpdGlvbiA9IHRoaXMubG9jYWxQb3NpdGlvbkFuZFNjYWxlTWF0cml4LmdldFRyYW5zbGF0aW9uKCk7XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9wb3NpdGlvbjtcbiAgICAgICAgfVxuICAgICAgICBzZXQgcG9zaXRpb24ocG9zaXRpb246VmVjdG9yMil7XG4gICAgICAgICAgICBpZiAodGhpcy5wX3BhcmVudCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2xvY2FsUG9zaXRpb24gPSBwb3NpdGlvbi5jb3B5KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9sb2NhbFBvc2l0aW9uID0gdGhpcy5wX3BhcmVudC5sb2NhbFBvc2l0aW9uQW5kU2NhbGVNYXRyaXguY29weSgpLmludmVydCgpLm11bHRpcGx5UG9pbnQocG9zaXRpb24pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLmlzVHJhbnNsYXRlID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX3JvdGF0aW9uOm51bWJlciA9IDA7XG4gICAgICAgIGdldCByb3RhdGlvbigpe1xuICAgICAgICAgICAgdGhpcy5fcm90YXRpb24gPSB0aGlzLnJvdGF0aW9uTWF0cml4LmdldFJvdGF0aW9uKCk7XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9yb3RhdGlvbjtcbiAgICAgICAgfVxuICAgICAgICBzZXQgcm90YXRpb24oYW5nbGU6bnVtYmVyKXtcbiAgICAgICAgICAgIHRoaXMucmVzZXRSb3RhdGlvbigpO1xuICAgICAgICAgICAgdGhpcy5yb3RhdGUoYW5nbGUpO1xuXG4gICAgICAgICAgICB0aGlzLmRpcnR5Um90YXRpb24gPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5pc1JvdGF0ZSA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9zY2FsZTpWZWN0b3IyID0gVmVjdG9yMi5jcmVhdGUoMSwgMSk7XG4gICAgICAgIGdldCBzY2FsZSgpe1xuICAgICAgICAgICAgdGhpcy5fc2NhbGUgPSB0aGlzLmxvY2FsUG9zaXRpb25BbmRTY2FsZU1hdHJpeC5nZXRTY2FsZSgpO1xuXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fc2NhbGU7XG4gICAgICAgIH1cbiAgICAgICAgc2V0IHNjYWxlKHNjYWxlOlZlY3RvcjIpe1xuICAgICAgICAgICAgaWYgKHRoaXMucF9wYXJlbnQgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9sb2NhbFNjYWxlID0gc2NhbGUuY29weSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbG9jYWxTY2FsZSA9IHRoaXMucF9wYXJlbnQubG9jYWxQb3NpdGlvbkFuZFNjYWxlTWF0cml4LmNvcHkoKS5pbnZlcnQoKS5tdWx0aXBseVZlY3RvcjIoc2NhbGUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLmlzU2NhbGUgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy90b2RvIGFkZCBza2V3IGF0dHJpXG5cblxuICAgICAgICBwcml2YXRlIF9sb2NhbFBvc2l0aW9uOlZlY3RvcjIgPSBWZWN0b3IyLmNyZWF0ZSgwLCAwKTtcbiAgICAgICAgZ2V0IGxvY2FsUG9zaXRpb24oKXtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9sb2NhbFBvc2l0aW9uO1xuICAgICAgICB9XG4gICAgICAgIHNldCBsb2NhbFBvc2l0aW9uKHBvc2l0aW9uOlZlY3RvcjIpe1xuICAgICAgICAgICAgdGhpcy5fbG9jYWxQb3NpdGlvbiA9IHBvc2l0aW9uLmNvcHkoKTtcblxuICAgICAgICAgICAgdGhpcy5pc1RyYW5zbGF0ZSA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9sb2NhbFNjYWxlOlZlY3RvcjIgPSBWZWN0b3IyLmNyZWF0ZSgxLCAxKTtcbiAgICAgICAgZ2V0IGxvY2FsU2NhbGUoKXtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9sb2NhbFNjYWxlO1xuICAgICAgICB9XG4gICAgICAgIHNldCBsb2NhbFNjYWxlKHNjYWxlOlZlY3RvcjIpe1xuICAgICAgICAgICAgdGhpcy5fbG9jYWxTY2FsZSA9IHNjYWxlLmNvcHkoKTtcblxuICAgICAgICAgICAgdGhpcy5pc1NjYWxlID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vdG9kbyBleHRyYWN0IFJvb3RSZWN0VHJhbnNmb3JtP1xuXG4gICAgICAgIHByaXZhdGUgX2FuY2hvclg6VmVjdG9yMiA9IFZlY3RvcjIuY3JlYXRlKDAuNSwgMC41KTtcbiAgICAgICAgZ2V0IGFuY2hvclgoKXtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9hbmNob3JYO1xuICAgICAgICB9XG4gICAgICAgIEByZXF1aXJlU2V0dGVyKGZ1bmN0aW9uKGFuY2hvclg6VmVjdG9yMil7XG4gICAgICAgICAgICBhc3NlcnQoYW5jaG9yWC54IDw9IGFuY2hvclgueSwgTG9nLmluZm8uRlVOQ19TSE9VTEQoXCJtaW5YXCIsIFwiPD0gbWF4WVwiKSk7XG4gICAgICAgICAgICBhc3NlcnQoYW5jaG9yWC54ID49IDAgJiYgYW5jaG9yWC54IDw9IDEsIExvZy5pbmZvLkZVTkNfU0hPVUxEKFwibWluWFwiLCBcIj49IDAgJiYgPD0gMVwiKSk7XG4gICAgICAgICAgICBhc3NlcnQoYW5jaG9yWC55ID49IDAgJiYgYW5jaG9yWC55IDw9IDEsIExvZy5pbmZvLkZVTkNfU0hPVUxEKFwibWF4WFwiLCBcIj49IDAgJiYgPD0gMVwiKSk7XG4gICAgICAgIH0pXG4gICAgICAgIHNldCBhbmNob3JYKGFuY2hvclg6VmVjdG9yMil7XG4gICAgICAgICAgICB2YXIgcGFyZW50V2lkdGggPSBudWxsO1xuXG4gICAgICAgICAgICB0aGlzLl9hbmNob3JYID0gYW5jaG9yWDtcblxuICAgICAgICAgICAgaWYoYW5jaG9yWC54ID09PSBhbmNob3JYLnkpe1xuICAgICAgICAgICAgICAgIGxldCB3aWR0aEZyb21BbmNob3JUb1Bvc2l0aW9uID0gKGFuY2hvclgueCAtIDAuNSkgKiB0aGlzLl9nZXRQYXJlbnRXaWR0aCgpO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5wb3NpdGlvbiA9IFZlY3RvcjIuY3JlYXRlKHRoaXMuX2dldFBhcmVudFBvc2l0aW9uKCkueCArIHdpZHRoRnJvbUFuY2hvclRvUG9zaXRpb24sIHRoaXMucG9zaXRpb24ueSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHBhcmVudFdpZHRoID0gdGhpcy5fZ2V0UGFyZW50V2lkdGgoKTtcblxuICAgICAgICAgICAgdGhpcy5wb3NpdGlvbiA9IFZlY3RvcjIuY3JlYXRlKHRoaXMuX2dldFBhcmVudFBvc2l0aW9uKCkueCArIChhbmNob3JYLnggKyBhbmNob3JYLnkgLSAxKSAvIDIgKiBwYXJlbnRXaWR0aCwgdGhpcy5wb3NpdGlvbi55KTtcblxuICAgICAgICAgICAgdGhpcy53aWR0aCA9IHBhcmVudFdpZHRoIC8gdGhpcy5fZ2V0UGFyZW50U2NhbGUoKS54ICogKGFuY2hvclgueSAtIGFuY2hvclgueCkgKiB0aGlzLnNjYWxlLng7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9hbmNob3JZOlZlY3RvcjIgPSBWZWN0b3IyLmNyZWF0ZSgwLjUsIDAuNSk7XG4gICAgICAgIGdldCBhbmNob3JZKCl7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fYW5jaG9yWTtcbiAgICAgICAgfVxuICAgICAgICBAcmVxdWlyZVNldHRlcihmdW5jdGlvbihhbmNob3JZOlZlY3RvcjIpe1xuICAgICAgICAgICAgYXNzZXJ0KGFuY2hvclkueCA8PSBhbmNob3JZLnksIExvZy5pbmZvLkZVTkNfU0hPVUxEKFwibWluWVwiLCBcIjw9IG1heFlcIikpO1xuICAgICAgICAgICAgYXNzZXJ0KGFuY2hvclkueCA+PSAwICYmIGFuY2hvclkueCA8PSAxLCBMb2cuaW5mby5GVU5DX1NIT1VMRChcIm1pbllcIiwgXCI+PSAwICYmIDw9IDFcIikpO1xuICAgICAgICAgICAgYXNzZXJ0KGFuY2hvclkueSA+PSAwICYmIGFuY2hvclkueSA8PSAxLCBMb2cuaW5mby5GVU5DX1NIT1VMRChcIm1heFlcIiwgXCI+PSAwICYmIDw9IDFcIikpO1xuICAgICAgICB9KVxuICAgICAgICBzZXQgYW5jaG9yWShhbmNob3JZOlZlY3RvcjIpe1xuICAgICAgICAgICAgdmFyIHBhcmVudEhlaWdodCA9IG51bGw7XG5cbiAgICAgICAgICAgIHRoaXMuX2FuY2hvclkgPSBhbmNob3JZO1xuXG4gICAgICAgICAgICBpZihhbmNob3JZLnggPT09IGFuY2hvclkueSl7XG4gICAgICAgICAgICAgICAgbGV0IGhlaWdodEZyb21BbmNob3JUb1Bvc2l0aW9uID0gKGFuY2hvclkueCAtIDAuNSkgKiB0aGlzLl9nZXRQYXJlbnRIZWlnaHQoKTtcblxuICAgICAgICAgICAgICAgIHRoaXMucG9zaXRpb24gPSBWZWN0b3IyLmNyZWF0ZSh0aGlzLnBvc2l0aW9uLngsIHRoaXMuX2dldFBhcmVudFBvc2l0aW9uKCkueSArIGhlaWdodEZyb21BbmNob3JUb1Bvc2l0aW9uKTtcblxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcGFyZW50SGVpZ2h0ID0gdGhpcy5fZ2V0UGFyZW50SGVpZ2h0KCk7XG5cbiAgICAgICAgICAgIHRoaXMucG9zaXRpb24gPSBWZWN0b3IyLmNyZWF0ZSh0aGlzLnBvc2l0aW9uLngsIHRoaXMuX2dldFBhcmVudFBvc2l0aW9uKCkueSArIChhbmNob3JZLnggKyBhbmNob3JZLnkgLSAxKSAvIDIgKiBwYXJlbnRIZWlnaHQpO1xuXG4gICAgICAgICAgICB0aGlzLmhlaWdodCA9IHBhcmVudEhlaWdodCAvIHRoaXMuX2dldFBhcmVudFNjYWxlKCkueSAqIChhbmNob3JZLnkgLSBhbmNob3JZLngpICogdGhpcy5zY2FsZS55O1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfd2lkdGg6bnVtYmVyID0gbnVsbDtcbiAgICAgICAgZ2V0IHdpZHRoKCl7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fd2lkdGggKiB0aGlzLnNjYWxlLng7XG4gICAgICAgIH1cbiAgICAgICAgc2V0IHdpZHRoKHdpZHRoOm51bWJlcil7XG4gICAgICAgICAgICBpZih3aWR0aCAhPT0gdGhpcy5fd2lkdGgpe1xuICAgICAgICAgICAgICAgIHRoaXMuX3dpZHRoID0gd2lkdGg7XG5cbiAgICAgICAgICAgICAgICBFdmVudE1hbmFnZXIudHJpZ2dlcih0aGlzLmVudGl0eU9iamVjdCwgQ3VzdG9tRXZlbnQuY3JlYXRlKDxhbnk+RW5naW5lRXZlbnQuVUlfV0lEVEhfQ0hBTkdFKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9oZWlnaHQ6bnVtYmVyID0gbnVsbDtcbiAgICAgICAgZ2V0IGhlaWdodCgpe1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2hlaWdodCAqIHRoaXMuc2NhbGUueTtcbiAgICAgICAgfVxuICAgICAgICBzZXQgaGVpZ2h0KGhlaWdodDpudW1iZXIpe1xuICAgICAgICAgICAgaWYoaGVpZ2h0ICE9PSB0aGlzLl9oZWlnaHQpe1xuICAgICAgICAgICAgICAgIHRoaXMuX2hlaWdodCA9IGhlaWdodDtcblxuICAgICAgICAgICAgICAgIEV2ZW50TWFuYWdlci50cmlnZ2VyKHRoaXMuZW50aXR5T2JqZWN0LCBDdXN0b21FdmVudC5jcmVhdGUoPGFueT5FbmdpbmVFdmVudC5VSV9IRUlHSFRfQ0hBTkdFKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBnZXQgaXNUcmFuc2Zvcm0oKXtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmlzVHJhbnNsYXRlIHx8IHRoaXMuaXNSb3RhdGUgfHwgdGhpcy5pc1NjYWxlO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfaXNUcmFuc2xhdGU6Ym9vbGVhbiA9IGZhbHNlO1xuICAgICAgICBnZXQgaXNUcmFuc2xhdGUoKXtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9pc1RyYW5zbGF0ZTtcbiAgICAgICAgfVxuICAgICAgICBzZXQgaXNUcmFuc2xhdGUoaXNUcmFuc2xhdGU6Ym9vbGVhbil7XG4gICAgICAgICAgICB0aGlzLl9pc1RyYW5zbGF0ZSA9IGlzVHJhbnNsYXRlO1xuXG4gICAgICAgICAgICBpZihpc1RyYW5zbGF0ZSl7XG4gICAgICAgICAgICAgICAgdGhpcy5kaXJ0eUxvY2FsID0gdHJ1ZTtcblxuICAgICAgICAgICAgICAgIEV2ZW50TWFuYWdlci5icm9hZGNhc3QodGhpcy5lbnRpdHlPYmplY3QsIEN1c3RvbUV2ZW50LmNyZWF0ZSg8YW55PkVuZ2luZUV2ZW50LlRSQU5TRk9STV9UUkFOU0xBVEUpKTtcblxuXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRDaGlsZHJlblRyYW5zZm9ybVN0YXRlKFwiaXNUcmFuc2xhdGVcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9pc1JvdGF0ZTpib29sZWFuID0gZmFsc2U7XG4gICAgICAgIGdldCBpc1JvdGF0ZSgpe1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2lzUm90YXRlO1xuICAgICAgICB9XG4gICAgICAgIHNldCBpc1JvdGF0ZShpc1JvdGF0ZTpib29sZWFuKXtcbiAgICAgICAgICAgIHRoaXMuX2lzUm90YXRlID0gaXNSb3RhdGU7XG5cbiAgICAgICAgICAgIGlmKGlzUm90YXRlKXtcbiAgICAgICAgICAgICAgICB0aGlzLmRpcnR5TG9jYWwgPSB0cnVlO1xuXG4gICAgICAgICAgICAgICAgRXZlbnRNYW5hZ2VyLmJyb2FkY2FzdCh0aGlzLmVudGl0eU9iamVjdCwgQ3VzdG9tRXZlbnQuY3JlYXRlKDxhbnk+RW5naW5lRXZlbnQuVFJBTlNGT1JNX1JPVEFURSkpO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRDaGlsZHJlblRyYW5zZm9ybVN0YXRlKFwiaXNSb3RhdGVcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9pc1NjYWxlOmJvb2xlYW4gPSBmYWxzZTtcbiAgICAgICAgZ2V0IGlzU2NhbGUoKXtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9pc1NjYWxlO1xuICAgICAgICB9XG4gICAgICAgIHNldCBpc1NjYWxlKGlzU2NhbGU6Ym9vbGVhbil7XG4gICAgICAgICAgICB0aGlzLl9pc1NjYWxlID0gaXNTY2FsZTtcblxuICAgICAgICAgICAgaWYoaXNTY2FsZSl7XG4gICAgICAgICAgICAgICAgdGhpcy5kaXJ0eUxvY2FsID0gdHJ1ZTtcblxuICAgICAgICAgICAgICAgIEV2ZW50TWFuYWdlci5icm9hZGNhc3QodGhpcy5lbnRpdHlPYmplY3QsIEN1c3RvbUV2ZW50LmNyZWF0ZSg8YW55PkVuZ2luZUV2ZW50LlRSQU5TRk9STV9TQ0FMRSkpO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRDaGlsZHJlblRyYW5zZm9ybVN0YXRlKFwiaXNTY2FsZVwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBkaXJ0eVJvdGF0aW9uOmJvb2xlYW4gPSB0cnVlO1xuICAgICAgICBwdWJsaWMgZGlydHlQb3NpdGlvbkFuZFNjYWxlOmJvb2xlYW4gPSB0cnVlO1xuICAgICAgICBwdWJsaWMgcGl2b3Q6VmVjdG9yMiA9IFZlY3RvcjIuY3JlYXRlKDAsIDApO1xuICAgICAgICBwdWJsaWMgekluZGV4Om51bWJlciA9IDE7XG5cbiAgICAgICAgcHJvdGVjdGVkIHBfcGFyZW50OlJlY3RUcmFuc2Zvcm07XG4gICAgICAgIHByb3RlY3RlZCBjaGlsZHJlbjp3ZENiLkNvbGxlY3Rpb248UmVjdFRyYW5zZm9ybT47XG5cbiAgICAgICAgcHJpdmF0ZSBfbG9jYWxSb3RhdGlvbk1hdHJpeDpNYXRyaXgzID0gTWF0cml4My5jcmVhdGUoKTtcbiAgICAgICAgcHJpdmF0ZSBfbG9jYWxUb1BhcmVudE1hdHJpeDpNYXRyaXgzID0gTWF0cml4My5jcmVhdGUoKTtcblxuICAgICAgICBwdWJsaWMgc3luY1JvdGF0aW9uKCl7XG4gICAgICAgICAgICBpZih0aGlzLmRpcnR5Um90YXRpb24pe1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnBfcGFyZW50ID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3JvdGF0aW9uTWF0cml4ID0gdGhpcy5fbG9jYWxSb3RhdGlvbk1hdHJpeC5jb3B5KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9yb3RhdGlvbk1hdHJpeCA9IHRoaXMucF9wYXJlbnQucm90YXRpb25NYXRyaXguY29weSgpLm11bHRpcGx5KHRoaXMuX2xvY2FsUm90YXRpb25NYXRyaXgpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXMuY2hpbGRyZW4uZm9yRWFjaCgoY2hpbGQ6UmVjdFRyYW5zZm9ybSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjaGlsZC5kaXJ0eVJvdGF0aW9uID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBzeW5jUG9zaXRpb25BbmRTY2FsZSgpe1xuICAgICAgICAgICAgaWYgKHRoaXMuZGlydHlMb2NhbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2xvY2FsVG9QYXJlbnRNYXRyaXguc2V0VFModGhpcy5fbG9jYWxQb3NpdGlvbiwgdGhpcy5fbG9jYWxTY2FsZSk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLmRpcnR5TG9jYWwgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB0aGlzLmRpcnR5UG9zaXRpb25BbmRTY2FsZSA9IHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0aGlzLmRpcnR5UG9zaXRpb25BbmRTY2FsZSkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnBfcGFyZW50ID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2xvY2FsUG9zaXRpb25BbmRTY2FsZU1hdHJpeCA9IHRoaXMuX2xvY2FsVG9QYXJlbnRNYXRyaXguY29weSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbG9jYWxQb3NpdGlvbkFuZFNjYWxlTWF0cml4ID0gdGhpcy5wX3BhcmVudC5sb2NhbFBvc2l0aW9uQW5kU2NhbGVNYXRyaXguY29weSgpLm11bHRpcGx5KHRoaXMuX2xvY2FsVG9QYXJlbnRNYXRyaXgpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXMuZGlydHlMb2NhbCA9IGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5jaGlsZHJlbi5mb3JFYWNoKChjaGlsZDpSZWN0VHJhbnNmb3JtKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNoaWxkLmRpcnR5UG9zaXRpb25BbmRTY2FsZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgdHJhbnNsYXRlKHRyYW5zbGF0aW9uOlZlY3RvcjIpO1xuICAgICAgICBwdWJsaWMgdHJhbnNsYXRlKHg6bnVtYmVyLCB5Om51bWJlcik7XG5cbiAgICAgICAgcHVibGljIHRyYW5zbGF0ZSguLi5hcmdzKXtcbiAgICAgICAgICAgIHZhciB0cmFuc2xhdGlvbiA9IG51bGw7XG5cbiAgICAgICAgICAgIGlmKGFyZ3MubGVuZ3RoID09PSAyKXtcbiAgICAgICAgICAgICAgICB0cmFuc2xhdGlvbiA9IFZlY3RvcjIuY3JlYXRlKGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICB0cmFuc2xhdGlvbiA9IGFyZ3NbMF07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMucG9zaXRpb24gPSB0cmFuc2xhdGlvbi5hZGQodGhpcy5wb3NpdGlvbik7XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgLyohXG4gICAgICAgIGlmIHBpdm90IGlzIG5vdCB0aGUgY2VudGVyIHBvaW50LCB0aGUgYWN0dWFsIHBvc2l0aW9uIHdpbGwgY2hhbmdlLCBidXQgdGhlIFwicG9zaXRpb25cIiBhdHRyIHdpbGwgbm90IGNoYW5nZSBub3chXG5cbiAgICAgICAgLy90b2RvIGNoYW5nZSBcInBvc2l0aW9uXCIgd2hlbiByb3RhdGUgdG8gZ2V0IHRoZSBhY3R1YWwgcG9zaXRpb25cbiAgICAgICAgICovXG5cbiAgICAgICAgcHVibGljIHJvdGF0ZShhbmdsZTpudW1iZXIpe1xuICAgICAgICAgICAgdmFyIHBvc2l0aW9uID0gdGhpcy5wb3NpdGlvbjtcblxuICAgICAgICAgICAgdGhpcy5yb3RhdGVBcm91bmQoYW5nbGUsIHBvc2l0aW9uLnggKyB0aGlzLnBpdm90LngsIHBvc2l0aW9uLnkgLSB0aGlzLnBpdm90LnkpO1xuXG4gICAgICAgICAgICB0aGlzLmRpcnR5Um90YXRpb24gPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5pc1JvdGF0ZSA9IHRydWU7XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHJvdGF0ZUFyb3VuZChhbmdsZTpudW1iZXIsIGNlbnRlcjpWZWN0b3IyKTtcbiAgICAgICAgcHVibGljIHJvdGF0ZUFyb3VuZChhbmdsZTpudW1iZXIsIGNlbnRlclg6bnVtYmVyLCBjZW50ZXJZOm51bWJlcik7XG5cbiAgICAgICAgcHVibGljIHJvdGF0ZUFyb3VuZCguLi5hcmdzKXtcbiAgICAgICAgICAgIHZhciBhbmdsZSA9IG51bGwsXG4gICAgICAgICAgICAgICAgY2VudGVyID0gbnVsbCxcbiAgICAgICAgICAgICAgICBwb3NpdGlvbiA9IG51bGwsXG4gICAgICAgICAgICAgICAgeCA9IG51bGwsXG4gICAgICAgICAgICAgICAgeSA9IG51bGw7XG5cbiAgICAgICAgICAgIGlmKGFyZ3MubGVuZ3RoID09PSAyKXtcbiAgICAgICAgICAgICAgICBhbmdsZSA9IGFyZ3NbMF07XG4gICAgICAgICAgICAgICAgY2VudGVyID0gYXJnc1sxXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICAgICAgYW5nbGUgPSBhcmdzWzBdO1xuICAgICAgICAgICAgICAgIGNlbnRlciA9IFZlY3RvcjIuY3JlYXRlKGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB4ID0gY2VudGVyLng7XG4gICAgICAgICAgICB5ID0gY2VudGVyLnk7XG5cbiAgICAgICAgICAgIHRoaXMuX3RyYW5zbGF0ZUluUm90YXRpb25NYXRyaXgoeCwgeSk7XG4gICAgICAgICAgICB0aGlzLl9yb3RhdGVBcm91bmRDYW52YXNPcmlnaW5Qb2ludChhbmdsZSk7XG4gICAgICAgICAgICB0aGlzLl90cmFuc2xhdGVJblJvdGF0aW9uTWF0cml4KC14LCAteSk7XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfdHJhbnNsYXRlSW5Sb3RhdGlvbk1hdHJpeCh4Om51bWJlciwgeTpudW1iZXIpe1xuICAgICAgICAgICAgdGhpcy5fbG9jYWxSb3RhdGlvbk1hdHJpeC50cmFuc2xhdGUoeCwgeSk7XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHJlc2V0UG9zaXRpb24oKXtcbiAgICAgICAgICAgIHRoaXMucG9zaXRpb24gPSBWZWN0b3IyLmNyZWF0ZSgwLCAwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyByZXNldFNjYWxlKCl7XG4gICAgICAgICAgICB0aGlzLnNjYWxlID0gVmVjdG9yMi5jcmVhdGUoMSwgMSk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgcmVzZXRSb3RhdGlvbigpe1xuICAgICAgICAgICAgdGhpcy5fbG9jYWxSb3RhdGlvbk1hdHJpeC5zZXRJZGVudGl0eSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgLyohXG4gICAgICAgICAvL3RvZG8gYWRkIHNrZXcgdG8gaW1wbGVtZW50IHJvdGF0ZSBhcm91bmQgeC95L3ogYXhpcyBmb3IgM2Qgcm90YXRlP1xuXG4gICAgICAgICBjYW4gcmVmZXIgdG8gaHR0cDovL3d3dy5zZW5vY3VsYXIuY29tL2ZsYXNoL3R1dG9yaWFscy90cmFuc2Zvcm1tYXRyaXgvXG4gICAgICAgICAqL1xuXG5cblxuICAgICAgICBwdWJsaWMgc2V0Q2hpbGRyZW5UcmFuc2Zvcm0oKXtcbiAgICAgICAgICAgIHRoaXMuc2V0Q2hpbGRyZW5UcmFuc2Zvcm1TdGF0ZShcImlzVHJhbnNsYXRlXCIpO1xuICAgICAgICAgICAgdGhpcy5zZXRDaGlsZHJlblRyYW5zZm9ybVN0YXRlKFwiaXNSb3RhdGVcIik7XG4gICAgICAgICAgICB0aGlzLnNldENoaWxkcmVuVHJhbnNmb3JtU3RhdGUoXCJpc1NjYWxlXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfcm90YXRlQXJvdW5kQ2FudmFzT3JpZ2luUG9pbnQoYW5nbGU6bnVtYmVyKXtcbiAgICAgICAgICAgIHRoaXMuX2xvY2FsUm90YXRpb25NYXRyaXgucm90YXRlKGFuZ2xlKTtcblxuICAgICAgICAgICAgdGhpcy5kaXJ0eVJvdGF0aW9uID0gdHJ1ZTtcblxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9nZXRQYXJlbnRXaWR0aCgpe1xuICAgICAgICAgICAgaWYodGhpcy5wX3BhcmVudCA9PT0gbnVsbCl7XG4gICAgICAgICAgICAgICAgcmV0dXJuIERldmljZU1hbmFnZXIuZ2V0SW5zdGFuY2UoKS52aWV3LndpZHRoO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wX3BhcmVudC53aWR0aDtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX2dldFBhcmVudEhlaWdodCgpe1xuICAgICAgICAgICAgaWYodGhpcy5wX3BhcmVudCA9PT0gbnVsbCl7XG4gICAgICAgICAgICAgICAgcmV0dXJuIERldmljZU1hbmFnZXIuZ2V0SW5zdGFuY2UoKS52aWV3LmhlaWdodDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHRoaXMucF9wYXJlbnQuaGVpZ2h0O1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfZ2V0UGFyZW50UG9zaXRpb24oKXtcbiAgICAgICAgICAgIGlmKHRoaXMucF9wYXJlbnQgPT09IG51bGwpe1xuICAgICAgICAgICAgICAgIGxldCB2aWV3ID0gRGV2aWNlTWFuYWdlci5nZXRJbnN0YW5jZSgpLnZpZXc7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gVmVjdG9yMi5jcmVhdGUodmlldy53aWR0aCAvIDIsIHZpZXcuaGVpZ2h0IC8gMik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzLnBfcGFyZW50LnBvc2l0aW9uO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfZ2V0UGFyZW50U2NhbGUoKXtcbiAgICAgICAgICAgIGlmKHRoaXMucF9wYXJlbnQgPT09IG51bGwpe1xuICAgICAgICAgICAgICAgIHJldHVybiBWZWN0b3IyLmNyZWF0ZSgxLCAxKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHRoaXMucF9wYXJlbnQuc2NhbGU7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbiIsIm1vZHVsZSB3ZHtcbiAgICBleHBvcnQgYWJzdHJhY3QgY2xhc3MgQ29tcG9uZW50Q29udGFpbmVye1xuICAgICAgICBwcm90ZWN0ZWQgbGlzdDp3ZENiLkNvbGxlY3Rpb248Q29tcG9uZW50PiA9IHdkQ2IuQ29sbGVjdGlvbi5jcmVhdGU8Q29tcG9uZW50PigpO1xuXG4gICAgICAgIHB1YmxpYyBhZGRDaGlsZChjb21wb25lbnQ6Q29tcG9uZW50KXtcbiAgICAgICAgICAgIGlmKHRoaXMuaGFzQ2hpbGQoY29tcG9uZW50KSl7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLmxpc3QuYWRkQ2hpbGQoY29tcG9uZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyByZW1vdmVDaGlsZChjb21wb25lbnQ6Q29tcG9uZW50KXtcbiAgICAgICAgICAgIHRoaXMubGlzdC5yZW1vdmVDaGlsZChjb21wb25lbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGhhc0NoaWxkKGNvbXBvbmVudDpDb21wb25lbnQpe1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubGlzdC5oYXNDaGlsZChjb21wb25lbnQpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4iLCJtb2R1bGUgd2R7XG4gICAgZXhwb3J0IGNsYXNzIEFjdGlvbk1hbmFnZXIgZXh0ZW5kcyBDb21wb25lbnRDb250YWluZXJ7XG4gICAgICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlKCk6QWN0aW9uTWFuYWdlciB7XG4gICAgICAgICAgICB2YXIgb2JqID0gbmV3IHRoaXMoKTtcblxuICAgICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgfVxuXG4gICAgICAgIHByb3RlY3RlZCBsaXN0OndkQ2IuQ29sbGVjdGlvbjxBY3Rpb24+O1xuXG4gICAgICAgIHB1YmxpYyB1cGRhdGUoZWxhcHNlZFRpbWU6bnVtYmVyKXtcbiAgICAgICAgICAgIHZhciByZW1vdmVRdWV1ZSA9IFtdO1xuXG4gICAgICAgICAgICB0aGlzLmxpc3QuZm9yRWFjaChmdW5jdGlvbihjaGlsZDpBY3Rpb24pe1xuICAgICAgICAgICAgICAgIC8qIVxuICAgICAgICAgICAgICAgICBmaXggXCJpZiByZW1vdmUgb3RoZXIgYWN0aW9uIG9mIGNoaWxkcmVuIHdoZW4gaW52b2tlICdjaGlsZC51cGRhdGUnLCBpdCB3aWxsIGVycm9yIGluIGl0ZXJhdGlvbiBhZnRlclwiOlxuICAgICAgICAgICAgICAgICBkZWZlciB0byByZW1vdmVcbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICBpZiAoY2hpbGQuaXNGaW5pc2gpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlUXVldWUucHVzaChjaGlsZCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoY2hpbGQuaXNTdG9wIHx8IGNoaWxkLmlzUGF1c2UpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNoaWxkLnVwZGF0ZShlbGFwc2VkVGltZSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmVtb3ZlUXVldWUuZm9yRWFjaChmdW5jdGlvbiAoY2hpbGQ6QWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgY2hpbGQuZW50aXR5T2JqZWN0LnJlbW92ZUNvbXBvbmVudChjaGlsZCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbn0iLCJtb2R1bGUgd2Qge1xuICAgIGV4cG9ydCBjbGFzcyBVSU1hbmFnZXIgZXh0ZW5kcyBDb21wb25lbnRDb250YWluZXJ7XG4gICAgICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlKHVpT2JqZWN0OlVJT2JqZWN0KSB7XG4gICAgICAgICAgICB2YXIgb2JqID0gbmV3IHRoaXModWlPYmplY3QpO1xuXG4gICAgICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3RydWN0b3IodWlPYmplY3Q6VUlPYmplY3Qpe1xuICAgICAgICAgICAgc3VwZXIoKTtcblxuICAgICAgICAgICAgdGhpcy5fdWlPYmplY3QgPSB1aU9iamVjdDtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX3VpT2JqZWN0OlVJT2JqZWN0ID0gbnVsbDtcblxuICAgICAgICBAcmVxdWlyZShmdW5jdGlvbihlbGFwc2VkVGltZTpudW1iZXIpe1xuICAgICAgICAgICAgYXNzZXJ0KHRoaXMubGlzdC5nZXRDb3VudCgpIDw9IDEsIExvZy5pbmZvLkZVTkNfU0hPVUxEKFwib25seSBjb250YWluIG9uZSB1aSBjb21wb25lbnRcIikpO1xuICAgICAgICB9KVxuICAgICAgICBwdWJsaWMgdXBkYXRlKGVsYXBzZWRUaW1lOm51bWJlcil7XG4gICAgICAgICAgICBpZih0aGlzLmxpc3QuZ2V0Q291bnQoKSA9PT0gMCl7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZih0aGlzLl9pc0RpcnR5KCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmxpc3QuZm9yRWFjaCgodWk6VUkpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdWkudXBkYXRlKGVsYXBzZWRUaW1lKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX2lzRGlydHkoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fdWlPYmplY3QuZ2V0Q29tcG9uZW50PFVJUmVuZGVyZXI+KFVJUmVuZGVyZXIpLnN0YXRlID09PSBVSVJlbmRlcmVyU3RhdGUuRElSVFk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbiIsIm1vZHVsZSB3ZCB7XG4gICAgZXhwb3J0IGNsYXNzIExpZ2h0TWFuYWdlciB7XG4gICAgICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlKCkge1xuICAgICAgICAgICAgdmFyIG9iaiA9IG5ldyB0aGlzKCk7XG5cbiAgICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgIH1cblxuICAgICAgICBnZXQgYW1iaWVudExpZ2h0KCk6R2FtZU9iamVjdCB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbGlnaHRzLmdldENoaWxkKEFtYmllbnRMaWdodC50eXBlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGdldCBkaXJlY3Rpb25MaWdodHMoKTogd2RDYi5Db2xsZWN0aW9uPEdhbWVPYmplY3Q+e1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2xpZ2h0cy5nZXRDaGlsZChEaXJlY3Rpb25MaWdodC50eXBlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGdldCBwb2ludExpZ2h0cygpOiB3ZENiLkNvbGxlY3Rpb248R2FtZU9iamVjdD57XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbGlnaHRzLmdldENoaWxkKFBvaW50TGlnaHQudHlwZSk7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9saWdodHM6d2RDYi5IYXNoPGFueT4gPSB3ZENiLkhhc2guY3JlYXRlPGFueT4oKTtcblxuICAgICAgICBwdWJsaWMgYWRkQ2hpbGQobGlnaHQ6R2FtZU9iamVjdCl7XG4gICAgICAgICAgICBpZihsaWdodC5oYXNDb21wb25lbnQoQW1iaWVudExpZ2h0KSl7XG4gICAgICAgICAgICAgICAgdGhpcy5fbGlnaHRzLmFkZENoaWxkKEFtYmllbnRMaWdodC50eXBlLCBsaWdodCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmKGxpZ2h0Lmhhc0NvbXBvbmVudChEaXJlY3Rpb25MaWdodCkpe1xuICAgICAgICAgICAgICAgIHRoaXMuX2xpZ2h0cy5hcHBlbmRDaGlsZChEaXJlY3Rpb25MaWdodC50eXBlLCBsaWdodCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmKGxpZ2h0Lmhhc0NvbXBvbmVudChQb2ludExpZ2h0KSl7XG4gICAgICAgICAgICAgICAgdGhpcy5fbGlnaHRzLmFwcGVuZENoaWxkKFBvaW50TGlnaHQudHlwZSwgbGlnaHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICAgTG9nLmVycm9yKHRydWUsIExvZy5pbmZvLkZVTkNfSU5WQUxJRChcImxpZ2h0XCIpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cblxuIiwibW9kdWxlIHdke1xuICAgIGV4cG9ydCBhYnN0cmFjdCBjbGFzcyBBbmltYXRpb24gZXh0ZW5kcyBDb21wb25lbnR7XG4gICAgICAgIHB1YmxpYyBlbnRpdHlPYmplY3Q6R2FtZU9iamVjdDtcblxuICAgICAgICBwdWJsaWMgYWJzdHJhY3QgcGxheShhbmltTmFtZTpzdHJpbmcsIGZwczpudW1iZXIpO1xuICAgICAgICBwdWJsaWMgYWJzdHJhY3QgcGF1c2UoKTtcbiAgICAgICAgcHVibGljIGFic3RyYWN0IHJlc3VtZSgpO1xuICAgICAgICBwdWJsaWMgYWJzdHJhY3Qgc3RvcCgpO1xuICAgICAgICBwdWJsaWMgYWJzdHJhY3QgdXBkYXRlKGVsYXBzZWRUaW1lOm51bWJlcik7XG4gICAgfVxufVxuXG4iLCJtb2R1bGUgd2R7XG4gICAgZXhwb3J0IGNsYXNzIE1vcnBoQW5pbWF0aW9uIGV4dGVuZHMgQW5pbWF0aW9ue1xuICAgICAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZSgpIHtcbiAgICAgICAgXHR2YXIgb2JqID0gbmV3IHRoaXMoKTtcblxuICAgICAgICBcdHJldHVybiBvYmo7XG4gICAgICAgIH1cblxuICAgICAgICBnZXQgaXNTdGFydCgpe1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3N0YXRlID09PSBBbmltYXRpb25TdGF0ZS5SVU47XG4gICAgICAgIH1cbiAgICAgICAgZ2V0IGlzU3RvcCgpe1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3N0YXRlID09PSBBbmltYXRpb25TdGF0ZS5TVE9QO1xuICAgICAgICB9XG4gICAgICAgIGdldCBpc1BhdXNlKCl7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fc3RhdGUgPT09IEFuaW1hdGlvblN0YXRlLlBBVVNFO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGludGVycG9sYXRpb246bnVtYmVyID0gMDtcbiAgICAgICAgcHVibGljIGN1cnJlbnRGcmFtZTpudW1iZXIgPSAwO1xuICAgICAgICBwdWJsaWMgbmV4dEZyYW1lOm51bWJlciA9IDE7XG4gICAgICAgIHB1YmxpYyBkdXJhdGlvbjpudW1iZXIgPSBudWxsO1xuICAgICAgICBwdWJsaWMgZnBzOm51bWJlciA9IG51bGw7XG4gICAgICAgIHB1YmxpYyBjdXJyZW50QW5pbU5hbWU6c3RyaW5nID0gbnVsbDtcbiAgICAgICAgcHVibGljIGlzRnJhbWVDaGFuZ2U6Ym9vbGVhbiA9IGZhbHNlO1xuXG4gICAgICAgIHByaXZhdGUgX2N1cnJlbnRUaW1lOm51bWJlciA9IDA7XG4gICAgICAgIHByaXZhdGUgX29sZFRpbWU6bnVtYmVyID0gMDtcbiAgICAgICAgcHJpdmF0ZSBfZnJhbWVDb3VudDpudW1iZXIgPSBudWxsO1xuICAgICAgICBwcml2YXRlIF9zdGF0ZTpBbmltYXRpb25TdGF0ZSA9IEFuaW1hdGlvblN0YXRlLkRFRkFVTFQ7XG4gICAgICAgIHByaXZhdGUgX2lzUmVzdW1lOmJvb2xlYW4gPSBmYWxzZTtcbiAgICAgICAgcHJpdmF0ZSBfaXNTdGFydEZyb21TdG9wOmJvb2xlYW4gPSBmYWxzZTtcbiAgICAgICAgcHJpdmF0ZSBfcGF1c2VUaW1lOm51bWJlciA9IG51bGw7XG4gICAgICAgIHByaXZhdGUgX3Jlc3VtZVRpbWU6bnVtYmVyID0gbnVsbDtcblxuICAgICAgICBwdWJsaWMgaW5pdCgpe1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGRpc3Bvc2UoKXtcbiAgICAgICAgfVxuXG4gICAgICAgIEByZXF1aXJlKGZ1bmN0aW9uKGFuaW1OYW1lOnN0cmluZywgZnBzOm51bWJlcil7XG4gICAgICAgICAgICB2YXIgZ2VvbWV0cnkgPSB0aGlzLmVudGl0eU9iamVjdC5nZXRDb21wb25lbnQoTW9kZWxHZW9tZXRyeSk7XG5cbiAgICAgICAgICAgIGFzc2VydChnZW9tZXRyeSwgTG9nLmluZm8uRlVOQ19TSE9VTEQoXCJ0aGlzIGVudGl0eU9iamVjdFwiLCBcImFkZCBNb2RlbEdlb21ldHJ5IGNvbXBvbmVudFwiKSk7XG4gICAgICAgICAgICBhc3NlcnQoZ2VvbWV0cnkubW9ycGhUYXJnZXRzLmdldENoaWxkKGFuaW1OYW1lKSAmJiBnZW9tZXRyeS5tb3JwaFRhcmdldHMuZ2V0Q2hpbGQoYW5pbU5hbWUpLmdldENvdW50KCkgPiAwLCBMb2cuaW5mby5GVU5DX05PVF9FWElTVChgXCIke2FuaW1OYW1lfVwiIGFuaW1hdGlvbmApKTtcbiAgICAgICAgfSlcbiAgICAgICAgQGVuc3VyZShmdW5jdGlvbigpe1xuICAgICAgICAgICAgYXNzZXJ0KHRoaXMuX2ZyYW1lQ291bnQgPiAxLCBMb2cuaW5mby5GVU5DX1NIT1VMRChcImZyYW1lcy5jb3VudFwiLCBcIj4gMVwiKSk7XG4gICAgICAgIH0pXG4gICAgICAgIHB1YmxpYyBwbGF5KGFuaW1OYW1lOnN0cmluZywgZnBzOm51bWJlcil7XG4gICAgICAgICAgICB2YXIgZ2VvbWV0cnkgPSB0aGlzLmVudGl0eU9iamVjdC5nZXRDb21wb25lbnQ8TW9kZWxHZW9tZXRyeT4oTW9kZWxHZW9tZXRyeSk7XG5cbiAgICAgICAgICAgIHRoaXMuY3VycmVudEFuaW1OYW1lID0gYW5pbU5hbWU7XG4gICAgICAgICAgICB0aGlzLmZwcyA9IGZwcztcblxuICAgICAgICAgICAgdGhpcy5kdXJhdGlvbiA9IDEuMCAvIGZwcyAqIDEwMDA7XG5cbiAgICAgICAgICAgIHRoaXMuX2ZyYW1lQ291bnQgPSBnZW9tZXRyeS5tb3JwaFRhcmdldHMuZ2V0Q2hpbGQoYW5pbU5hbWUpLmdldENvdW50KCk7XG5cbiAgICAgICAgICAgIHRoaXMuX3N0YXJ0KCk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgcGF1c2UoKXtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlID0gQW5pbWF0aW9uU3RhdGUuUEFVU0U7XG4gICAgICAgICAgICB0aGlzLl9wYXVzZVRpbWUgPSB0aGlzLl9jdXJyZW50VGltZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyByZXN1bWUoKXtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlID0gQW5pbWF0aW9uU3RhdGUuUlVOO1xuXG4gICAgICAgICAgICB0aGlzLl9pc1Jlc3VtZSA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLl9yZXN1bWVUaW1lID0gdGhpcy5fb2xkVGltZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBzdG9wKCl7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSA9IEFuaW1hdGlvblN0YXRlLlNUT1A7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgdXBkYXRlKGVsYXBzZWRUaW1lOm51bWJlcil7XG4gICAgICAgICAgICBpZih0aGlzLl9zdGF0ZSA9PT0gQW5pbWF0aW9uU3RhdGUuREVGQVVMVCl7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZih0aGlzLmlzU3RvcCB8fCB0aGlzLmlzUGF1c2Upe1xuICAgICAgICAgICAgICAgIHRoaXMuX29sZFRpbWUgPSBlbGFwc2VkVGltZTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmKHRoaXMuX2lzUmVzdW1lKXtcbiAgICAgICAgICAgICAgICB0aGlzLl9pc1Jlc3VtZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHRoaXMuX2NvbnRpbnVlRnJvbVBhdXNlUG9pbnQoZWxhcHNlZFRpbWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLl9jdXJyZW50VGltZSA9IGVsYXBzZWRUaW1lO1xuXG4gICAgICAgICAgICBpZih0aGlzLl9pc1N0YXJ0RnJvbVN0b3Ape1xuICAgICAgICAgICAgICAgIHRoaXMuX2lzU3RhcnRGcm9tU3RvcCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHRoaXMuX3Jlc2V0QW5pbSgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZih0aGlzLl9jdXJyZW50VGltZSAtIHRoaXMuX29sZFRpbWUgPiB0aGlzLmR1cmF0aW9uKXtcbiAgICAgICAgICAgICAgICB0aGlzLmlzRnJhbWVDaGFuZ2UgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRoaXMuX29sZFRpbWUgPSB0aGlzLl9mbG9vcih0aGlzLl9jdXJyZW50VGltZSk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRGcmFtZSA9IHRoaXMubmV4dEZyYW1lO1xuICAgICAgICAgICAgICAgIHRoaXMubmV4dEZyYW1lICsrO1xuICAgICAgICAgICAgICAgIGlmKHRoaXMubmV4dEZyYW1lID49IHRoaXMuX2ZyYW1lQ291bnQpe1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm5leHRGcmFtZSA9IDA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICB0aGlzLmlzRnJhbWVDaGFuZ2UgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5pbnRlcnBvbGF0aW9uID0gdGhpcy5mcHMgKiAodGhpcy5fY3VycmVudFRpbWUgLSB0aGlzLl9vbGRUaW1lKSAvIDEwMDA7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9zdGFydCgpe1xuICAgICAgICAgICAgdGhpcy5fY3VycmVudFRpbWUgPSAwO1xuICAgICAgICAgICAgdGhpcy5fb2xkVGltZSA9IDA7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRGcmFtZSA9IDA7XG4gICAgICAgICAgICB0aGlzLm5leHRGcmFtZSA9IHRoaXMuY3VycmVudEZyYW1lICsgMTtcblxuICAgICAgICAgICAgaWYodGhpcy5pc1N0b3Ape1xuICAgICAgICAgICAgICAgIHRoaXMuX2lzU3RhcnRGcm9tU3RvcCA9IHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuX3N0YXRlID0gQW5pbWF0aW9uU3RhdGUuUlVOO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfZmxvb3IodGltZTpudW1iZXIpe1xuICAgICAgICAgICAgcmV0dXJuIHRpbWUgLSB0aW1lICUgdGhpcy5kdXJhdGlvbjtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX3Jlc2V0QW5pbSgpe1xuICAgICAgICAgICAgdGhpcy5fb2xkVGltZSA9IHRoaXMuX2N1cnJlbnRUaW1lO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfY29udGludWVGcm9tUGF1c2VQb2ludChjdXJyZW50VGltZTpudW1iZXIpe1xuICAgICAgICAgICAgdGhpcy5fb2xkVGltZSA9IGN1cnJlbnRUaW1lIC0gKHRoaXMuX3Jlc3VtZVRpbWUgLSB0aGlzLl9wYXVzZVRpbWUpICUgdGhpcy5kdXJhdGlvbjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGVudW0gQW5pbWF0aW9uU3RhdGV7XG4gICAgICAgIERFRkFVTFQsXG4gICAgICAgIFJVTixcbiAgICAgICAgU1RPUCxcbiAgICAgICAgUEFVU0VcbiAgICB9XG59XG5cbiIsIm1vZHVsZSB3ZHtcbiAgICBleHBvcnQgYWJzdHJhY3QgY2xhc3MgR2VvbWV0cnkgZXh0ZW5kcyBDb21wb25lbnR7XG4gICAgICAgIHByaXZhdGUgX21hdGVyaWFsOk1hdGVyaWFsID0gbnVsbDtcbiAgICAgICAgZ2V0IG1hdGVyaWFsKCl7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbWF0ZXJpYWw7XG4gICAgICAgIH1cbiAgICAgICAgc2V0IG1hdGVyaWFsKG1hdGVyaWFsOk1hdGVyaWFsKXtcbiAgICAgICAgICAgIGlmKCFKdWRnZVV0aWxzLmlzRXF1YWwobWF0ZXJpYWwsIHRoaXMuX21hdGVyaWFsKSl7XG4gICAgICAgICAgICAgICAgdGhpcy5fbWF0ZXJpYWwgPSBtYXRlcmlhbDtcbiAgICAgICAgICAgICAgICB0aGlzLl9tYXRlcmlhbC5nZW9tZXRyeSA9IHRoaXM7XG5cbiAgICAgICAgICAgICAgICBFdmVudE1hbmFnZXIudHJpZ2dlcih0aGlzLmVudGl0eU9iamVjdCwgQ3VzdG9tRXZlbnQuY3JlYXRlKDxhbnk+RW5naW5lRXZlbnQuTUFURVJJQUxfQ0hBTkdFKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBnZXQgZ2VvbWV0cnlEYXRhKCl7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5idWZmZXJzLmdlb21ldHJ5RGF0YTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBlbnRpdHlPYmplY3Q6R2FtZU9iamVjdDtcblxuICAgICAgICBwdWJsaWMgYnVmZmVyczpCdWZmZXJDb250YWluZXIgPSBudWxsO1xuXG4gICAgICAgIEBlbnN1cmUoZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIHZhciBnZW9tZXRyeURhdGEgPSB0aGlzLmJ1ZmZlcnMuZ2VvbWV0cnlEYXRhO1xuXG4gICAgICAgICAgICBhc3NlcnQoZ2VvbWV0cnlEYXRhLnZlcnRpY2VzLmxlbmd0aCA+IDAsIExvZy5pbmZvLkZVTkNfTVVTVChcInZlcnRpY2VzLmNvdW50XCIsIFwiPiAwXCIpKTtcbiAgICAgICAgICAgIGFzc2VydChnZW9tZXRyeURhdGEuZmFjZXMubGVuZ3RoICogMyA9PT0gZ2VvbWV0cnlEYXRhLmluZGljZXMubGVuZ3RoLCBMb2cuaW5mby5GVU5DX1NIT1VMRChcImZhY2VzLmNvdW50XCIsIGBiZSAke2dlb21ldHJ5RGF0YS5pbmRpY2VzLmxlbmd0aCAvIDN9LCBidXQgYWN0dWFsIGlzICR7Z2VvbWV0cnlEYXRhLmZhY2VzLmxlbmd0aH1gKSk7XG4gICAgICAgIH0pXG4gICAgICAgIHB1YmxpYyBpbml0KCl7XG4gICAgICAgICAgICB2YXIgZ2VvbWV0cnlEYXRhID0gbnVsbCxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHZlcnRpY2VzLFxuICAgICAgICAgICAgICAgICAgICBmYWNlcyxcbiAgICAgICAgICAgICAgICAgICAgdGV4Q29vcmRzLFxuICAgICAgICAgICAgICAgICAgICBjb2xvcnMsXG4gICAgICAgICAgICAgICAgICAgIG1vcnBoVGFyZ2V0c1xuICAgICAgICAgICAgICAgICAgICB9ID0gdGhpcy5jb21wdXRlRGF0YSgpO1xuXG4gICAgICAgICAgICB0aGlzLmJ1ZmZlcnMgPSB0aGlzLmNyZWF0ZUJ1ZmZlckNvbnRhaW5lcigpO1xuXG4gICAgICAgICAgICBnZW9tZXRyeURhdGEgPSB0aGlzLmNyZWF0ZUdlb21ldHJ5RGF0YSh2ZXJ0aWNlcywgZmFjZXMsIHRleENvb3JkcywgY29sb3JzLCBtb3JwaFRhcmdldHMpO1xuXG4gICAgICAgICAgICB0aGlzLmJ1ZmZlcnMuZ2VvbWV0cnlEYXRhID0gZ2VvbWV0cnlEYXRhO1xuXG4gICAgICAgICAgICB0aGlzLmJ1ZmZlcnMuaW5pdCgpO1xuXG4gICAgICAgICAgICB0aGlzLl9tYXRlcmlhbC5pbml0KCk7XG5cbiAgICAgICAgICAgIHRoaXMuY29tcHV0ZU5vcm1hbHMoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIEByZXF1aXJlKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBhc3NlcnQodGhpcy5idWZmZXJzICYmIHRoaXMuYnVmZmVycy5nZW9tZXRyeURhdGEsIExvZy5pbmZvLkZVTkNfTVVTVF9ERUZJTkUoXCJidWZmZXJzLT5nZW9tZXRyeURhdGFcIikpO1xuICAgICAgICB9KVxuICAgICAgICBwdWJsaWMgaGFzRmFjZU5vcm1hbHMoKXtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmJ1ZmZlcnMuZ2VvbWV0cnlEYXRhLmhhc0ZhY2VOb3JtYWxzKCk7XG4gICAgICAgIH1cblxuICAgICAgICBAcmVxdWlyZShmdW5jdGlvbigpe1xuICAgICAgICAgICAgYXNzZXJ0KHRoaXMuYnVmZmVycyAmJiB0aGlzLmJ1ZmZlcnMuZ2VvbWV0cnlEYXRhLCBMb2cuaW5mby5GVU5DX01VU1RfREVGSU5FKFwiYnVmZmVycy0+Z2VvbWV0cnlEYXRhXCIpKTtcbiAgICAgICAgfSlcbiAgICAgICAgcHVibGljIGhhc1ZlcnRleE5vcm1hbHMoKXtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmJ1ZmZlcnMuZ2VvbWV0cnlEYXRhLmhhc1ZlcnRleE5vcm1hbHMoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBpc1Ntb290aFNoYWRpbmcoKXtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9tYXRlcmlhbC5zaGFkaW5nID09PSBTaGFkaW5nLlNNT09USDtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBkaXNwb3NlKCl7XG4gICAgICAgICAgICB0aGlzLmJ1ZmZlcnMuZGlzcG9zZSgpO1xuXG4gICAgICAgICAgICB0aGlzLl9tYXRlcmlhbC5kaXNwb3NlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBAcmVxdWlyZShmdW5jdGlvbigpe1xuICAgICAgICAgICAgYXNzZXJ0KHRoaXMuYnVmZmVycyAmJiB0aGlzLmJ1ZmZlcnMuZ2VvbWV0cnlEYXRhLCBMb2cuaW5mby5GVU5DX01VU1RfREVGSU5FKFwiYnVmZmVycy0+Z2VvbWV0cnlEYXRhXCIpKTtcbiAgICAgICAgfSlcbiAgICAgICAgcHVibGljIGNvbXB1dGVGYWNlTm9ybWFscygpIHtcbiAgICAgICAgICAgIHRoaXMuYnVmZmVycy5nZW9tZXRyeURhdGEuY29tcHV0ZUZhY2VOb3JtYWxzKCk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgY29tcHV0ZVZlcnRleE5vcm1hbHMoKXtcbiAgICAgICAgICAgIHRoaXMuYnVmZmVycy5nZW9tZXRyeURhdGEuY29tcHV0ZVZlcnRleE5vcm1hbHMoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByb3RlY3RlZCBhYnN0cmFjdCBjb21wdXRlRGF0YSgpOiBHZW9tZXRyeURhdGFUeXBlO1xuXG4gICAgICAgIEB2aXJ0dWFsXG4gICAgICAgIHByb3RlY3RlZCBjb21wdXRlTm9ybWFscygpe1xuICAgICAgICAgICAgaWYodGhpcy5pc1Ntb290aFNoYWRpbmcoKSl7XG4gICAgICAgICAgICAgICAgaWYoIXRoaXMuaGFzVmVydGV4Tm9ybWFscygpKXtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb21wdXRlVmVydGV4Tm9ybWFscygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICAgICAgaWYoIXRoaXMuaGFzRmFjZU5vcm1hbHMoKSl7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29tcHV0ZUZhY2VOb3JtYWxzKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgQHZpcnR1YWxcbiAgICAgICAgcHJvdGVjdGVkIGNyZWF0ZUJ1ZmZlckNvbnRhaW5lcigpOkJ1ZmZlckNvbnRhaW5lcntcbiAgICAgICAgICAgIHJldHVybiBDb21tb25CdWZmZXJDb250YWluZXIuY3JlYXRlKHRoaXMuZW50aXR5T2JqZWN0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIEB2aXJ0dWFsXG4gICAgICAgIHByb3RlY3RlZCBjcmVhdGVHZW9tZXRyeURhdGEodmVydGljZXM6QXJyYXk8bnVtYmVyPiwgZmFjZXM6QXJyYXk8RmFjZTM+LCB0ZXhDb29yZHM6QXJyYXk8bnVtYmVyPiwgY29sb3JzOkFycmF5PG51bWJlcj4sIG1vcnBoVGFyZ2V0czp3ZENiLkhhc2g8RFlGaWxlUGFyc2VNb3JwaFRhcmdldHNEYXRhPik6R2VvbWV0cnlEYXRhe1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlQ29tbW9uR2VvbWV0cnlEYXRhKHZlcnRpY2VzLCBmYWNlcywgdGV4Q29vcmRzLCBjb2xvcnMpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJvdGVjdGVkIGNyZWF0ZUNvbW1vbkdlb21ldHJ5RGF0YSh2ZXJ0aWNlczpBcnJheTxudW1iZXI+LCBmYWNlczpBcnJheTxGYWNlMz4sIHRleENvb3JkczpBcnJheTxudW1iZXI+LCBjb2xvcnM6QXJyYXk8bnVtYmVyPil7XG4gICAgICAgICAgICB2YXIgZ2VvbWV0cnlEYXRhID0gQ29tbW9uR2VvbWV0cnlEYXRhLmNyZWF0ZSh0aGlzKTtcblxuICAgICAgICAgICAgZ2VvbWV0cnlEYXRhLnZlcnRpY2VzID0gdmVydGljZXM7XG4gICAgICAgICAgICBnZW9tZXRyeURhdGEuZmFjZXMgPSBmYWNlcztcbiAgICAgICAgICAgIGdlb21ldHJ5RGF0YS50ZXhDb29yZHMgPSB0ZXhDb29yZHM7XG4gICAgICAgICAgICBnZW9tZXRyeURhdGEuY29sb3JzID0gY29sb3JzO1xuXG4gICAgICAgICAgICByZXR1cm4gZ2VvbWV0cnlEYXRhO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZXhwb3J0IHR5cGUgR2VvbWV0cnlEYXRhVHlwZSA9IHtcbiAgICAgICAgdmVydGljZXM6QXJyYXk8bnVtYmVyPjtcbiAgICAgICAgZmFjZXM/OkFycmF5PEZhY2UzPjtcbiAgICAgICAgdGV4Q29vcmRzPzpBcnJheTxudW1iZXI+O1xuICAgICAgICBjb2xvcnM/OkFycmF5PG51bWJlcj47XG4gICAgICAgIG1vcnBoVGFyZ2V0cz86d2RDYi5IYXNoPERZRmlsZVBhcnNlTW9ycGhUYXJnZXRzRGF0YT47XG4gICAgfTtcbn1cblxuIiwibW9kdWxlIHdkIHtcbiAgICBleHBvcnQgY2xhc3MgR2VvbWV0cnlVdGlsc3tcbiAgICAgICAgcHVibGljIHN0YXRpYyBjb252ZXJ0VG9GYWNlcyhpbmRpY2VzOkFycmF5PG51bWJlcj4sIG5vcm1hbHM/OkFycmF5PG51bWJlcj4pOkFycmF5PEZhY2UzPntcbiAgICAgICAgdmFyIGhhc05vcm1hbHMgPSB0aGlzLmhhc0RhdGEobm9ybWFscyksXG4gICAgICAgICAgICBmYWNlcyA9IFtdO1xuXG4gICAgICAgIGZvcihsZXQgaSA9IDAsIGxlbiA9IGluZGljZXMubGVuZ3RoOyBpIDwgbGVuOyBpKz0zKXtcbiAgICAgICAgICAgIGxldCBhID0gaW5kaWNlc1tpXSxcbiAgICAgICAgICAgICAgICBiID0gaW5kaWNlc1tpICsgMV0sXG4gICAgICAgICAgICAgICAgYyA9IGluZGljZXNbaSArIDJdLFxuICAgICAgICAgICAgICAgIGZhY2UgPSBGYWNlMy5jcmVhdGUoYSwgYiwgYyk7XG5cbiAgICAgICAgICAgIGlmKGhhc05vcm1hbHMpe1xuICAgICAgICAgICAgICAgIGZhY2UudmVydGV4Tm9ybWFscy5hZGRDaGlsZHJlbihbXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ2V0VGhyZWVDb21wb25lbnQobm9ybWFscywgYSksXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ2V0VGhyZWVDb21wb25lbnQobm9ybWFscywgYiksXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ2V0VGhyZWVDb21wb25lbnQobm9ybWFscywgYylcbiAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgICAgICBmYWNlLmZhY2VOb3JtYWwgPSBmYWNlLnZlcnRleE5vcm1hbHMuZ2V0Q2hpbGQoMCkuY29weSgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmYWNlcy5wdXNoKGZhY2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZhY2VzO1xuICAgIH1cblxuICAgICAgICBAcmVxdWlyZShmdW5jdGlvbihkYXRhKXtcbiAgICAgICAgICAgIGlmKGRhdGEpe1xuICAgICAgICAgICAgICAgIGFzc2VydChkYXRhIGluc3RhbmNlb2Ygd2RDYi5Db2xsZWN0aW9uIHx8IGRhdGEgaW5zdGFuY2VvZiB3ZENiLkhhc2ggfHwgSnVkZ2VVdGlscy5pc0FycmF5KGRhdGEpLCBMb2cuaW5mby5GVU5DX1NIT1VMRChcImRhdGFcIiwgIFwiYmUgQXJyYXkgb3IgQ29sbGVjdGlvbiBvciBIYXNoXCIpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgcHVibGljIHN0YXRpYyBoYXNEYXRhKGRhdGE6YW55KXtcbiAgICAgICAgICAgIHJldHVybiBkYXRhICYmICgoZGF0YS5sZW5ndGggJiYgZGF0YS5sZW5ndGggPiAwKSB8fCAoZGF0YS5nZXRDb3VudCAmJiBkYXRhLmdldENvdW50KCkgPiAwKSk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgc3RhdGljIGdldFRocmVlQ29tcG9uZW50KHNvdXJjZURhdGE6QXJyYXk8bnVtYmVyPiwgaW5kZXg6bnVtYmVyKSB7XG4gICAgICAgICAgICB2YXIgc3RhcnRJbmRleCA9IDMgKiBpbmRleDtcblxuICAgICAgICAgICAgcmV0dXJuIFZlY3RvcjMuY3JlYXRlKFxuICAgICAgICAgICAgICAgIHNvdXJjZURhdGFbc3RhcnRJbmRleF0sXG4gICAgICAgICAgICAgICAgc291cmNlRGF0YVtzdGFydEluZGV4ICsgMV0sXG4gICAgICAgICAgICAgICAgc291cmNlRGF0YVtzdGFydEluZGV4ICsgMl1cbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBAcmVxdWlyZShmdW5jdGlvbihkYXRhQXJyOkFycmF5PG51bWJlcj4sIGl0ZXJhdG9yOih2OlZlY3RvcjMpID0+IHZvaWQpe1xuICAgICAgICAgICAgYXNzZXJ0KGRhdGFBcnIubGVuZ3RoICUgMyA9PT0gMCwgTG9nLmluZm8uRlVOQ19TSE9VTEQoXCJkYXRhQXJyLmxlbmd0aFwiLCBcInRpbWVzIG9mIHRocmVlXCIpKTtcbiAgICAgICAgfSlcbiAgICAgICAgcHVibGljIHN0YXRpYyBpdGVyYXRlVGhyZWVDb21wb25lbnQoZGF0YUFycjpBcnJheTxudW1iZXI+LCBpdGVyYXRvcjoodjpWZWN0b3IzKSA9PiB2b2lkKXtcbiAgICAgICAgICAgIGZvcihsZXQgaSA9IDAsIGxlbiA9IGRhdGFBcnIubGVuZ3RoOyBpIDwgbGVuOyBpICs9IDMpe1xuICAgICAgICAgICAgICAgIGl0ZXJhdG9yKFZlY3RvcjMuY3JlYXRlKGRhdGFBcnJbaV0sIGRhdGFBcnJbaSArIDFdLCBkYXRhQXJyW2kgKyAyXSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHN0YXRpYyBzZXRUaHJlZUNvbXBvbmVudCh0YXJnZXREYXRhOkFycmF5PG51bWJlcj4sIHNvdXJjZURhdGE6VmVjdG9yMywgaW5kZXg6bnVtYmVyKTtcbiAgICAgICAgcHVibGljIHN0YXRpYyBzZXRUaHJlZUNvbXBvbmVudCh0YXJnZXREYXRhOkFycmF5PG51bWJlcj4sIHNvdXJjZURhdGE6QXJyYXk8bnVtYmVyPiwgaW5kZXg6bnVtYmVyKTtcblxuICAgICAgICBwdWJsaWMgc3RhdGljIHNldFRocmVlQ29tcG9uZW50KHRhcmdldERhdGE6QXJyYXk8bnVtYmVyPiwgc291cmNlRGF0YTphbnksIGluZGV4Om51bWJlcikge1xuICAgICAgICAgICAgaWYoc291cmNlRGF0YSBpbnN0YW5jZW9mIFZlY3RvcjMpe1xuICAgICAgICAgICAgICAgIHRhcmdldERhdGFbaW5kZXggKiAzXSA9IHNvdXJjZURhdGEueDtcbiAgICAgICAgICAgICAgICB0YXJnZXREYXRhW2luZGV4ICogMyArIDFdID0gc291cmNlRGF0YS55O1xuICAgICAgICAgICAgICAgIHRhcmdldERhdGFbaW5kZXggKiAzICsgMl0gPSBzb3VyY2VEYXRhLno7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgIHRhcmdldERhdGFbaW5kZXggKiAzXSA9IHNvdXJjZURhdGFbMF07XG4gICAgICAgICAgICAgICAgdGFyZ2V0RGF0YVtpbmRleCAqIDMgKyAxXSA9IHNvdXJjZURhdGFbMV07XG4gICAgICAgICAgICAgICAgdGFyZ2V0RGF0YVtpbmRleCAqIDMgKyAyXSA9IHNvdXJjZURhdGFbMl07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5cbiIsIm1vZHVsZSB3ZHtcbiAgICAvL3RvZG8gc3VwcG9ydCBtb3JwaFRhcmdldHM/XG4gICAgZXhwb3J0IGNsYXNzIEN1c3RvbUdlb21ldHJ5IGV4dGVuZHMgR2VvbWV0cnl7XG4gICAgICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlKCl7XG4gICAgICAgICAgICB2YXIgZ2VvbSA9IG5ldyB0aGlzKCk7XG5cbiAgICAgICAgICAgIHJldHVybiBnZW9tO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfdmVydGljZXM6QXJyYXk8bnVtYmVyPiA9IFtdO1xuICAgICAgICBnZXQgdmVydGljZXMoKXtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl92ZXJ0aWNlcztcbiAgICAgICAgfVxuICAgICAgICBzZXQgdmVydGljZXModmVydGljZXM6QXJyYXk8bnVtYmVyPil7XG4gICAgICAgICAgICB0aGlzLl92ZXJ0aWNlcyA9IHZlcnRpY2VzO1xuXG4gICAgICAgICAgICBpZih0aGlzLmJ1ZmZlcnMpe1xuICAgICAgICAgICAgICAgIHRoaXMuYnVmZmVycy5nZW9tZXRyeURhdGEudmVydGljZXMgPSB2ZXJ0aWNlcztcbiAgICAgICAgICAgICAgICB0aGlzLmJ1ZmZlcnMucmVtb3ZlQ2FjaGUoQnVmZmVyRGF0YVR5cGUuVkVSVElDRSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF90ZXhDb29yZHM6QXJyYXk8bnVtYmVyPiA9IFtdO1xuICAgICAgICBnZXQgdGV4Q29vcmRzKCl7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fdGV4Q29vcmRzO1xuICAgICAgICB9XG4gICAgICAgIHNldCB0ZXhDb29yZHModGV4Q29vcmRzOkFycmF5PG51bWJlcj4pe1xuICAgICAgICAgICAgdGhpcy5fdGV4Q29vcmRzID0gdGV4Q29vcmRzO1xuXG4gICAgICAgICAgICBpZih0aGlzLmJ1ZmZlcnMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmJ1ZmZlcnMuZ2VvbWV0cnlEYXRhLnRleENvb3JkcyA9IHRleENvb3JkcztcbiAgICAgICAgICAgICAgICB0aGlzLmJ1ZmZlcnMucmVtb3ZlQ2FjaGUoQnVmZmVyRGF0YVR5cGUuVEVYQ09PUkQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfY29sb3JzOkFycmF5PG51bWJlcj4gPSBbXTtcbiAgICAgICAgZ2V0IGNvbG9ycygpe1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NvbG9ycztcbiAgICAgICAgfVxuICAgICAgICBzZXQgY29sb3JzKGNvbG9yczpBcnJheTxudW1iZXI+KXtcbiAgICAgICAgICAgIHRoaXMuX2NvbG9ycyA9IGNvbG9ycztcbiAgICAgICAgICAgIGlmKHRoaXMuYnVmZmVycykge1xuICAgICAgICAgICAgICAgIHRoaXMuYnVmZmVycy5nZW9tZXRyeURhdGEuY29sb3JzID0gY29sb3JzO1xuICAgICAgICAgICAgICAgIHRoaXMuYnVmZmVycy5yZW1vdmVDYWNoZShCdWZmZXJEYXRhVHlwZS5DT0xPUik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9pbmRpY2VzOkFycmF5PG51bWJlcj4gPSBbXTtcbiAgICAgICAgZ2V0IGluZGljZXMoKXtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9pbmRpY2VzO1xuICAgICAgICB9XG4gICAgICAgIHNldCBpbmRpY2VzKGluZGljZXM6QXJyYXk8bnVtYmVyPil7XG4gICAgICAgICAgICB0aGlzLl9pbmRpY2VzID0gaW5kaWNlcztcbiAgICAgICAgICAgIGlmKHRoaXMuYnVmZmVycykge1xuICAgICAgICAgICAgICAgIHRoaXMuYnVmZmVycy5nZW9tZXRyeURhdGEuZmFjZXMgPSBHZW9tZXRyeVV0aWxzLmNvbnZlcnRUb0ZhY2VzKGluZGljZXMsIHRoaXMubm9ybWFscyk7XG4gICAgICAgICAgICAgICAgdGhpcy5idWZmZXJzLnJlbW92ZUNhY2hlKEJ1ZmZlckRhdGFUeXBlLklORElDRSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9ub3JtYWxzOkFycmF5PG51bWJlcj4gPSBbXTtcbiAgICAgICAgZ2V0IG5vcm1hbHMoKXtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9ub3JtYWxzO1xuICAgICAgICB9XG4gICAgICAgIHNldCBub3JtYWxzKG5vcm1hbHM6QXJyYXk8bnVtYmVyPil7XG4gICAgICAgICAgICB0aGlzLl9ub3JtYWxzID0gbm9ybWFscztcbiAgICAgICAgICAgIGlmKHRoaXMuYnVmZmVycykge1xuICAgICAgICAgICAgICAgIHRoaXMuYnVmZmVycy5nZW9tZXRyeURhdGEuZmFjZXMgPSBHZW9tZXRyeVV0aWxzLmNvbnZlcnRUb0ZhY2VzKHRoaXMuaW5kaWNlcywgbm9ybWFscyk7XG4gICAgICAgICAgICAgICAgdGhpcy5idWZmZXJzLnJlbW92ZUNhY2hlKEJ1ZmZlckRhdGFUeXBlLk5PUk1BTCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBwcm90ZWN0ZWQgY29tcHV0ZURhdGEoKXtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdmVydGljZXM6IHRoaXMudmVydGljZXMsXG4gICAgICAgICAgICAgICAgZmFjZXM6IEdlb21ldHJ5VXRpbHMuY29udmVydFRvRmFjZXModGhpcy5pbmRpY2VzLCB0aGlzLm5vcm1hbHMpLFxuICAgICAgICAgICAgICAgIHRleENvb3JkczogdGhpcy50ZXhDb29yZHMsXG4gICAgICAgICAgICAgICAgY29sb3JzOiB0aGlzLmNvbG9yc1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuIiwibW9kdWxlIHdke1xuICAgIGV4cG9ydCBjbGFzcyBNb2RlbEdlb21ldHJ5IGV4dGVuZHMgR2VvbWV0cnl7XG4gICAgICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlKCl7XG4gICAgICAgICAgICB2YXIgZ2VvbSA9IG5ldyB0aGlzKCk7XG5cbiAgICAgICAgICAgIHJldHVybiBnZW9tO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHZlcnRpY2VzOkFycmF5PFZlY3RvcjM+ID0gbnVsbDtcbiAgICAgICAgcHVibGljIGNvbG9yczpBcnJheTxWZWN0b3IzPiA9IG51bGw7XG4gICAgICAgIHB1YmxpYyB0ZXhDb29yZHM6QXJyYXk8VmVjdG9yMj4gPSBudWxsO1xuICAgICAgICBwdWJsaWMgZmFjZXM6QXJyYXk8RmFjZTM+ID0gbnVsbDtcbiAgICAgICAgcHVibGljIG1vcnBoVGFyZ2V0czp3ZENiLkhhc2g8RFlGaWxlUGFyc2VNb3JwaFRhcmdldHNEYXRhPiA9IG51bGw7XG4gICAgICAgIHB1YmxpYyBtb3JwaEZhY2VOb3JtYWxzOndkQ2IuSGFzaDx3ZENiLkNvbGxlY3Rpb248QXJyYXk8bnVtYmVyPj4+ID0gd2RDYi5IYXNoLmNyZWF0ZTx3ZENiLkNvbGxlY3Rpb248QXJyYXk8bnVtYmVyPj4+KCk7XG4gICAgICAgIHB1YmxpYyBtb3JwaFZlcnRleE5vcm1hbHM6d2RDYi5IYXNoPHdkQ2IuQ29sbGVjdGlvbjxBcnJheTxudW1iZXI+Pj4gPSB3ZENiLkhhc2guY3JlYXRlPHdkQ2IuQ29sbGVjdGlvbjxBcnJheTxudW1iZXI+Pj4oKTtcblxuICAgICAgICBwdWJsaWMgYnVmZmVyczpNb3JwaEJ1ZmZlckNvbnRhaW5lcjtcblxuICAgICAgICBwdWJsaWMgaGFzQW5pbWF0aW9uKCl7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5faGFzTW9ycGhUYXJnZXRzKCkgJiYgKHRoaXMuZW50aXR5T2JqZWN0ICYmIHRoaXMuZW50aXR5T2JqZWN0Lmhhc0NvbXBvbmVudChNb3JwaEFuaW1hdGlvbikpO1xuICAgICAgICB9XG5cbiAgICAgICAgQHJlcXVpcmUoZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIGFzc2VydCh0aGlzLmJ1ZmZlcnMgJiYgdGhpcy5idWZmZXJzLmdlb21ldHJ5RGF0YSwgTG9nLmluZm8uRlVOQ19NVVNUX0RFRklORShcImJ1ZmZlcnMtPmdlb21ldHJ5RGF0YVwiKSk7XG4gICAgICAgIH0pXG4gICAgICAgIHB1YmxpYyBoYXNNb3JwaEZhY2VOb3JtYWxzKCl7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5idWZmZXJzLmdlb21ldHJ5RGF0YS5oYXNNb3JwaEZhY2VOb3JtYWxzKCk7XG4gICAgICAgIH1cblxuICAgICAgICBAcmVxdWlyZShmdW5jdGlvbigpe1xuICAgICAgICAgICAgYXNzZXJ0KHRoaXMuYnVmZmVycyAmJiB0aGlzLmJ1ZmZlcnMuZ2VvbWV0cnlEYXRhLCBMb2cuaW5mby5GVU5DX01VU1RfREVGSU5FKFwiYnVmZmVycy0+Z2VvbWV0cnlEYXRhXCIpKTtcbiAgICAgICAgfSlcbiAgICAgICAgcHVibGljIGhhc01vcnBoVmVydGV4Tm9ybWFscygpe1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYnVmZmVycy5nZW9tZXRyeURhdGEuaGFzTW9ycGhWZXJ0ZXhOb3JtYWxzKCk7XG4gICAgICAgIH1cblxuICAgICAgICBAcmVxdWlyZShmdW5jdGlvbigpe1xuICAgICAgICAgICAgYXNzZXJ0KHRoaXMuYnVmZmVycyAmJiB0aGlzLmJ1ZmZlcnMuZ2VvbWV0cnlEYXRhLCBMb2cuaW5mby5GVU5DX01VU1RfREVGSU5FKFwiYnVmZmVycy0+Z2VvbWV0cnlEYXRhXCIpKTtcbiAgICAgICAgfSlcbiAgICAgICAgcHVibGljIGNvbXB1dGVNb3JwaE5vcm1hbHMoKSB7XG4gICAgICAgICAgICB0aGlzLmJ1ZmZlcnMuZ2VvbWV0cnlEYXRhLmNvbXB1dGVNb3JwaE5vcm1hbHMoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByb3RlY3RlZCBjb21wdXRlTm9ybWFscygpe1xuICAgICAgICAgICAgc3VwZXIuY29tcHV0ZU5vcm1hbHMoKTtcblxuICAgICAgICAgICAgaWYodGhpcy5faGFzTW9ycGhUYXJnZXRzKCkpe1xuICAgICAgICAgICAgICAgIGlmKHRoaXMuaXNTbW9vdGhTaGFkaW5nKCkpe1xuICAgICAgICAgICAgICAgICAgICBpZighdGhpcy5oYXNNb3JwaFZlcnRleE5vcm1hbHMoKSl7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbXB1dGVNb3JwaE5vcm1hbHMoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgICAgICBpZighdGhpcy5oYXNNb3JwaEZhY2VOb3JtYWxzKCkpe1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb21wdXRlTW9ycGhOb3JtYWxzKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBwcm90ZWN0ZWQgY29tcHV0ZURhdGEoKXtcbiAgICAgICAgICAgIHJldHVybiA8YW55PntcbiAgICAgICAgICAgICAgICB2ZXJ0aWNlczogdGhpcy52ZXJ0aWNlcyxcbiAgICAgICAgICAgICAgICBmYWNlczogdGhpcy5mYWNlcyxcbiAgICAgICAgICAgICAgICB0ZXhDb29yZHM6IHRoaXMudGV4Q29vcmRzLFxuICAgICAgICAgICAgICAgIGNvbG9yczogdGhpcy5jb2xvcnMsXG4gICAgICAgICAgICAgICAgbW9ycGhUYXJnZXRzOiB0aGlzLm1vcnBoVGFyZ2V0c1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIEByZXF1aXJlKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBpZih0aGlzLmhhc0FuaW1hdGlvbigpKSB7XG4gICAgICAgICAgICAgICAgYXNzZXJ0KHRoaXMuZW50aXR5T2JqZWN0LmdldENvbXBvbmVudChNb3JwaEFuaW1hdGlvbiksIExvZy5pbmZvLkZVTkNfU0hPVUxEKFwiZW50aXR5T2JqZWN0IHdpdGggTW9kZWxHZW9tZXRyeVwiLCBcImFkZCBNb3JwaEFuaW1hdGlvbiBjb21wb25lbnRcIikpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgICBwcm90ZWN0ZWQgY3JlYXRlQnVmZmVyQ29udGFpbmVyKCk6QnVmZmVyQ29udGFpbmVye1xuICAgICAgICAgICAgaWYodGhpcy5oYXNBbmltYXRpb24oKSl7XG4gICAgICAgICAgICAgICAgcmV0dXJuIE1vcnBoQnVmZmVyQ29udGFpbmVyLmNyZWF0ZSh0aGlzLmVudGl0eU9iamVjdCwgdGhpcy5lbnRpdHlPYmplY3QuZ2V0Q29tcG9uZW50PE1vcnBoQW5pbWF0aW9uPihNb3JwaEFuaW1hdGlvbikpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gQ29tbW9uQnVmZmVyQ29udGFpbmVyLmNyZWF0ZSh0aGlzLmVudGl0eU9iamVjdCk7XG4gICAgICAgIH1cblxuICAgICAgICBwcm90ZWN0ZWQgY3JlYXRlR2VvbWV0cnlEYXRhKHZlcnRpY2VzOkFycmF5PG51bWJlcj4sIGZhY2VzOkFycmF5PEZhY2UzPiwgdGV4Q29vcmRzOkFycmF5PG51bWJlcj4sIGNvbG9yczpBcnJheTxudW1iZXI+LCBtb3JwaFRhcmdldHM6d2RDYi5IYXNoPERZRmlsZVBhcnNlTW9ycGhUYXJnZXRzRGF0YT4pOkdlb21ldHJ5RGF0YXtcbiAgICAgICAgICAgIGlmKHRoaXMuaGFzQW5pbWF0aW9uKCkpe1xuICAgICAgICAgICAgICAgIGxldCBnZW9tZXRyeURhdGEgPSBNb3JwaEdlb21ldHJ5RGF0YS5jcmVhdGUodGhpcyk7XG5cbiAgICAgICAgICAgICAgICBnZW9tZXRyeURhdGEudmVydGljZXMgPSB2ZXJ0aWNlcztcbiAgICAgICAgICAgICAgICBnZW9tZXRyeURhdGEuZmFjZXMgPSBmYWNlcztcbiAgICAgICAgICAgICAgICBnZW9tZXRyeURhdGEudGV4Q29vcmRzID0gdGV4Q29vcmRzO1xuICAgICAgICAgICAgICAgIGdlb21ldHJ5RGF0YS5jb2xvcnMgPSBjb2xvcnM7XG4gICAgICAgICAgICAgICAgZ2VvbWV0cnlEYXRhLm1vcnBoVGFyZ2V0cyA9IG1vcnBoVGFyZ2V0cztcblxuICAgICAgICAgICAgICAgIHJldHVybiBnZW9tZXRyeURhdGE7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZUNvbW1vbkdlb21ldHJ5RGF0YSh2ZXJ0aWNlcywgZmFjZXMsIHRleENvb3JkcywgY29sb3JzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX2hhc01vcnBoVGFyZ2V0cygpe1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubW9ycGhUYXJnZXRzICYmIHRoaXMubW9ycGhUYXJnZXRzLmdldENvdW50KCkgPiAwO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4iLCJtb2R1bGUgd2R7XG4gICAgZXhwb3J0IGNsYXNzIEJveEdlb21ldHJ5IGV4dGVuZHMgR2VvbWV0cnl7XG4gICAgICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlKCl7XG4gICAgICAgICAgICB2YXIgZ2VvbSA9IG5ldyB0aGlzKCk7XG5cbiAgICAgICAgICAgIHJldHVybiBnZW9tO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHdpZHRoOm51bWJlciA9IG51bGw7XG4gICAgICAgIHB1YmxpYyBoZWlnaHQ6bnVtYmVyID0gbnVsbDtcbiAgICAgICAgcHVibGljIGRlcHRoOm51bWJlciA9IG51bGw7XG4gICAgICAgIHB1YmxpYyB3aWR0aFNlZ21lbnRzOm51bWJlciA9IDE7XG4gICAgICAgIHB1YmxpYyBoZWlnaHRTZWdtZW50czpudW1iZXIgPSAxO1xuICAgICAgICBwdWJsaWMgZGVwdGhTZWdtZW50czpudW1iZXIgPSAxO1xuXG4gICAgICAgIHByb3RlY3RlZCBjb21wdXRlRGF0YSgpe1xuICAgICAgICAgICAgdmFyIHdpZHRoID0gdGhpcy53aWR0aCxcbiAgICAgICAgICAgICAgICBoZWlnaHQgPSB0aGlzLmhlaWdodCxcbiAgICAgICAgICAgICAgICBkZXB0aCA9IHRoaXMuZGVwdGgsXG4gICAgICAgICAgICAgICAgd2lkdGhTZWdtZW50cyA9IHRoaXMud2lkdGhTZWdtZW50cyxcbiAgICAgICAgICAgICAgICBoZWlnaHRTZWdtZW50cyA9IHRoaXMuaGVpZ2h0U2VnbWVudHMsXG4gICAgICAgICAgICAgICAgZGVwdGhTZWdtZW50cyA9IHRoaXMuZGVwdGhTZWdtZW50cyxcbiAgICAgICAgICAgICAgICBzaWRlcyA9IHtcbiAgICAgICAgICAgICAgICAgICAgRlJPTlQgIDogMCxcbiAgICAgICAgICAgICAgICAgICAgQkFDSyAgIDogMSxcbiAgICAgICAgICAgICAgICAgICAgVE9QICAgIDogMixcbiAgICAgICAgICAgICAgICAgICAgQk9UVE9NIDogMyxcbiAgICAgICAgICAgICAgICAgICAgUklHSFQgIDogNCxcbiAgICAgICAgICAgICAgICAgICAgTEVGVCAgIDogNVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB2YXIgZmFjZUF4ZXMgPSBbXG4gICAgICAgICAgICAgICAgWyAwLCAxLCAzIF0sIC8vIEZST05UXG4gICAgICAgICAgICAgICAgWyA0LCA1LCA3IF0sIC8vIEJBQ0tcbiAgICAgICAgICAgICAgICBbIDMsIDIsIDYgXSwgLy8gVE9QXG4gICAgICAgICAgICAgICAgWyAxLCAwLCA0IF0sIC8vIEJPVFRPTVxuICAgICAgICAgICAgICAgIFsgMSwgNCwgMiBdLCAvLyBSSUdIVFxuICAgICAgICAgICAgICAgIFsgNSwgMCwgNiBdICAvLyBMRUZUXG4gICAgICAgICAgICBdO1xuXG4gICAgICAgICAgICB2YXIgZmFjZU5vcm1hbHMgPSBbXG4gICAgICAgICAgICAgICAgWyAgMCwgIDAsICAxIF0sIC8vIEZST05UXG4gICAgICAgICAgICAgICAgWyAgMCwgIDAsIC0xIF0sIC8vIEJBQ0tcbiAgICAgICAgICAgICAgICBbICAwLCAgMSwgIDAgXSwgLy8gVE9QXG4gICAgICAgICAgICAgICAgWyAgMCwgLTEsICAwIF0sIC8vIEJPVFRPTVxuICAgICAgICAgICAgICAgIFsgIDEsICAwLCAgMCBdLCAvLyBSSUdIVFxuICAgICAgICAgICAgICAgIFsgLTEsICAwLCAgMCBdICAvLyBMRUZUXG4gICAgICAgICAgICBdO1xuICAgICAgICAgICAgdmFyIGNvcm5lcnMgPSBbXG4gICAgICAgICAgICAgICAgVmVjdG9yMy5jcmVhdGUoLXdpZHRoLCAtaGVpZ2h0LCBkZXB0aCksXG4gICAgICAgICAgICAgICAgVmVjdG9yMy5jcmVhdGUoIHdpZHRoLCAtaGVpZ2h0LCBkZXB0aCksXG4gICAgICAgICAgICAgICAgVmVjdG9yMy5jcmVhdGUoIHdpZHRoLCAgaGVpZ2h0LCBkZXB0aCksXG4gICAgICAgICAgICAgICAgVmVjdG9yMy5jcmVhdGUoLXdpZHRoLCAgaGVpZ2h0LCBkZXB0aCksXG4gICAgICAgICAgICAgICAgVmVjdG9yMy5jcmVhdGUoIHdpZHRoLCAtaGVpZ2h0LCAtZGVwdGgpLFxuICAgICAgICAgICAgICAgIFZlY3RvcjMuY3JlYXRlKC13aWR0aCwgLWhlaWdodCwgLWRlcHRoKSxcbiAgICAgICAgICAgICAgICBWZWN0b3IzLmNyZWF0ZSgtd2lkdGgsICBoZWlnaHQsIC1kZXB0aCksXG4gICAgICAgICAgICAgICAgVmVjdG9yMy5jcmVhdGUoIHdpZHRoLCAgaGVpZ2h0LCAtZGVwdGgpXG4gICAgICAgICAgICBdO1xuXG4gICAgICAgICAgICB2YXIgdmVydGljZXMgPSBbXTtcbiAgICAgICAgICAgIHZhciBub3JtYWxzID0gW107XG4gICAgICAgICAgICB2YXIgdGV4Q29vcmRzID0gW107XG4gICAgICAgICAgICB2YXIgaW5kaWNlcyA9IFtdO1xuXG4gICAgICAgICAgICBmdW5jdGlvbiBnZW5lcmF0ZUZhY2Uoc2lkZSwgdVNlZ21lbnRzLCB2U2VnbWVudHMpIHtcbiAgICAgICAgICAgICAgICB2YXIgeCwgeSwgeiwgdSwgdjtcbiAgICAgICAgICAgICAgICB2YXIgaSwgajtcbiAgICAgICAgICAgICAgICB2YXIgb2Zmc2V0ID0gdmVydGljZXMubGVuZ3RoIC8gMztcblxuICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPD0gdVNlZ21lbnRzOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChqID0gMDsgaiA8PSB2U2VnbWVudHM7IGorKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHRlbXAxID0gVmVjdG9yMy5jcmVhdGUoKVxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRlbXAyID0gVmVjdG9yMy5jcmVhdGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ZW1wMyA9IFZlY3RvcjMuY3JlYXRlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgciA9IFZlY3RvcjMuY3JlYXRlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wMS5sZXJwKGNvcm5lcnNbZmFjZUF4ZXNbc2lkZV1bMF1dLCBjb3JuZXJzW2ZhY2VBeGVzW3NpZGVdWzFdXSwgaSAvIHVTZWdtZW50cyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wMi5sZXJwKGNvcm5lcnNbZmFjZUF4ZXNbc2lkZV1bMF1dLCBjb3JuZXJzW2ZhY2VBeGVzW3NpZGVdWzJdXSwgaiAvIHZTZWdtZW50cyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wMy5zdWIyKHRlbXAyLCBjb3JuZXJzW2ZhY2VBeGVzW3NpZGVdWzBdXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByLmFkZDIodGVtcDEsIHRlbXAzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHUgPSBpIC8gdVNlZ21lbnRzO1xuICAgICAgICAgICAgICAgICAgICAgICAgdiA9IGogLyB2U2VnbWVudHM7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZlcnRpY2VzLnB1c2goci54LCByLnksIHIueik7XG4gICAgICAgICAgICAgICAgICAgICAgICBub3JtYWxzLnB1c2goZmFjZU5vcm1hbHNbc2lkZV1bMF0sIGZhY2VOb3JtYWxzW3NpZGVdWzFdLCBmYWNlTm9ybWFsc1tzaWRlXVsyXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXhDb29yZHMucHVzaCh1LCB2KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChpIDwgdVNlZ21lbnRzKSAmJiAoaiA8IHZTZWdtZW50cykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRpY2VzLnB1c2gob2Zmc2V0ICsgaiArIGkgKiAodVNlZ21lbnRzICsgMSksICAgICAgIG9mZnNldCArIGogKyAoaSArIDEpICogKHVTZWdtZW50cyArIDEpLCAgICAgb2Zmc2V0ICsgaiArIGkgKiAodVNlZ21lbnRzICsgMSkgKyAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRpY2VzLnB1c2gob2Zmc2V0ICsgaiArIChpICsgMSkgKiAodVNlZ21lbnRzICsgMSksIG9mZnNldCArIGogKyAoaSArIDEpICogKHVTZWdtZW50cyArIDEpICsgMSwgb2Zmc2V0ICsgaiArIGkgKiAodVNlZ21lbnRzICsgMSkgKyAxKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBnZW5lcmF0ZUZhY2Uoc2lkZXMuRlJPTlQsIHdpZHRoU2VnbWVudHMsIGhlaWdodFNlZ21lbnRzKTtcbiAgICAgICAgICAgIGdlbmVyYXRlRmFjZShzaWRlcy5CQUNLLCB3aWR0aFNlZ21lbnRzLCBoZWlnaHRTZWdtZW50cyk7XG4gICAgICAgICAgICBnZW5lcmF0ZUZhY2Uoc2lkZXMuVE9QLCB3aWR0aFNlZ21lbnRzLCBkZXB0aFNlZ21lbnRzKTtcbiAgICAgICAgICAgIGdlbmVyYXRlRmFjZShzaWRlcy5CT1RUT00sIHdpZHRoU2VnbWVudHMsIGRlcHRoU2VnbWVudHMpO1xuICAgICAgICAgICAgZ2VuZXJhdGVGYWNlKHNpZGVzLlJJR0hULCBkZXB0aFNlZ21lbnRzLCBoZWlnaHRTZWdtZW50cyk7XG4gICAgICAgICAgICBnZW5lcmF0ZUZhY2Uoc2lkZXMuTEVGVCwgZGVwdGhTZWdtZW50cywgaGVpZ2h0U2VnbWVudHMpO1xuXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHZlcnRpY2VzOiB2ZXJ0aWNlcyxcbiAgICAgICAgICAgICAgICAvL3RvZG8gZGlyZWN0IGFkZCB0byBmYWNlcywgcmVtb3ZlIGluZGljZXMsbm9ybWFsc1xuICAgICAgICAgICAgICAgIGZhY2VzOiBHZW9tZXRyeVV0aWxzLmNvbnZlcnRUb0ZhY2VzKGluZGljZXMsIG5vcm1hbHMpLFxuICAgICAgICAgICAgICAgIHRleENvb3JkczogdGV4Q29vcmRzXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxufVxuXG4iLCJtb2R1bGUgd2R7XG4gICAgZXhwb3J0IGNsYXNzIFJlY3RHZW9tZXRyeSBleHRlbmRzIEdlb21ldHJ5e1xuICAgICAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZSgpe1xuICAgICAgICAgICAgICAgIHZhciBnZW9tID0gbmV3IHRoaXMoKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBnZW9tO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyB3aWR0aDpudW1iZXIgPSBudWxsO1xuICAgICAgICBwdWJsaWMgaGVpZ2h0Om51bWJlciA9IG51bGw7XG5cbiAgICAgICAgcHJvdGVjdGVkIGNvbXB1dGVEYXRhKCl7XG4gICAgICAgICAgICB2YXIgd2lkdGggPSB0aGlzLndpZHRoLFxuICAgICAgICAgICAgICAgIGhlaWdodCA9IHRoaXMuaGVpZ2h0LFxuICAgICAgICAgICAgICAgIGxlZnQgPSAtd2lkdGggLyAyLFxuICAgICAgICAgICAgICAgIHJpZ2h0ID0gd2lkdGggLyAyLFxuICAgICAgICAgICAgICAgIHVwID0gaGVpZ2h0IC8gMixcbiAgICAgICAgICAgICAgICBkb3duID0gLWhlaWdodCAvIDIsXG4gICAgICAgICAgICAgICAgdmVydGljZXMgPSBbXSxcbiAgICAgICAgICAgICAgICB0ZXhDb29yZHMgPSBbXSxcbiAgICAgICAgICAgICAgICBpbmRpY2VzID0gW10sXG4gICAgICAgICAgICAgICAgbm9ybWFscyA9IFtdO1xuXG4gICAgICAgICAgICB2ZXJ0aWNlcyA9IFtcbiAgICAgICAgICAgICAgICByaWdodCwgdXAsIDAsXG4gICAgICAgICAgICAgICAgbGVmdCwgdXAsIDAsXG4gICAgICAgICAgICAgICAgbGVmdCwgZG93biwgMCxcbiAgICAgICAgICAgICAgICByaWdodCwgZG93biwgMFxuICAgICAgICAgICAgXTtcblxuICAgICAgICAgICAgaW5kaWNlcyA9IFtcbiAgICAgICAgICAgICAgICAwLCAxLCAyLCAgIDAsIDIsIDNcbiAgICAgICAgICAgIF07XG5cbiAgICAgICAgICAgIHRleENvb3JkcyA9IFtcbiAgICAgICAgICAgICAgICAxLjAsIDEuMCxcbiAgICAgICAgICAgICAgICAwLjAsIDEuMCxcbiAgICAgICAgICAgICAgICAwLjAsIDAuMCxcbiAgICAgICAgICAgICAgICAxLjAsIDAuMFxuICAgICAgICAgICAgXTtcblxuICAgICAgICAgICAgbm9ybWFscyA9IFtcbiAgICAgICAgICAgICAgICAwLCAwLCAxLFxuICAgICAgICAgICAgICAgIDAsIDAsIDEsXG4gICAgICAgICAgICAgICAgMCwgMCwgMSxcbiAgICAgICAgICAgICAgICAwLCAwLCAxXG4gICAgICAgICAgICBdO1xuXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHZlcnRpY2VzOiB2ZXJ0aWNlcyxcbiAgICAgICAgICAgICAgICBmYWNlczogR2VvbWV0cnlVdGlscy5jb252ZXJ0VG9GYWNlcyhpbmRpY2VzLCBub3JtYWxzKSxcbiAgICAgICAgICAgICAgICB0ZXhDb29yZHM6IHRleENvb3Jkc1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuIiwibW9kdWxlIHdke1xuICAgIGV4cG9ydCBjbGFzcyBQbGFuZUdlb21ldHJ5IGV4dGVuZHMgR2VvbWV0cnl7XG4gICAgICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlKCl7XG4gICAgICAgICAgICB2YXIgZ2VvbSA9IG5ldyB0aGlzKCk7XG5cbiAgICAgICAgICAgIHJldHVybiBnZW9tO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHdpZHRoOm51bWJlciA9IG51bGw7XG4gICAgICAgIHB1YmxpYyBoZWlnaHQ6bnVtYmVyID0gbnVsbDtcbiAgICAgICAgcHVibGljIHdpZHRoU2VnbWVudHM6bnVtYmVyID0gMTtcbiAgICAgICAgcHVibGljIGhlaWdodFNlZ21lbnRzOm51bWJlciA9IDE7XG5cbiAgICAgICAgcHJvdGVjdGVkIGNvbXB1dGVEYXRhKCl7XG4gICAgICAgICAgICB2YXIgd2lkdGggPSB0aGlzLndpZHRoLFxuICAgICAgICAgICAgICAgIGhlaWdodCA9IHRoaXMuaGVpZ2h0LFxuICAgICAgICAgICAgICAgIHdpZHRoU2VnbWVudHMgPSB0aGlzLndpZHRoU2VnbWVudHMsXG4gICAgICAgICAgICAgICAgaGVpZ2h0U2VnbWVudHMgPSB0aGlzLmhlaWdodFNlZ21lbnRzLFxuICAgICAgICAgICAgICAgIHggPSBudWxsLFxuICAgICAgICAgICAgICAgIHkgPSBudWxsLFxuICAgICAgICAgICAgICAgIHogPSBudWxsLFxuICAgICAgICAgICAgICAgIHUgPSBudWxsLFxuICAgICAgICAgICAgICAgIHYgPSBudWxsLFxuICAgICAgICAgICAgICAgIGkgPSBudWxsLFxuICAgICAgICAgICAgICAgIGogPSBudWxsLFxuICAgICAgICAgICAgICAgIHZlcnRpY2VzID0gW10sXG4gICAgICAgICAgICAgICAgdGV4Q29vcmRzID0gW10sXG4gICAgICAgICAgICAgICAgbm9ybWFscyA9IFtdLFxuICAgICAgICAgICAgICAgIGluZGljZXMgPSBbXTtcblxuICAgICAgICAgICAgLy8gR2VuZXJhdGUgcGxhbmUgYXMgZm9sbG93cyAoYXNzaWduZWQgVVZzIGRlbm90ZWQgYXQgY29ybmVycyk6XG4gICAgICAgICAgICAvLyAoMCwxKXgtLS0tLS0tLS14KDEsMSlcbiAgICAgICAgICAgIC8vICAgICAgfCAgICAgICAgIHxcbiAgICAgICAgICAgIC8vICAgICAgfCAgICAgICAgIHxcbiAgICAgICAgICAgIC8vICAgICAgfCAgICBPLS1YIHxsZW5ndGhcbiAgICAgICAgICAgIC8vICAgICAgfCAgICB8ICAgIHxcbiAgICAgICAgICAgIC8vICAgICAgfCAgICBaICAgIHxcbiAgICAgICAgICAgIC8vICgwLDApeC0tLS0tLS0tLXgoMSwwKVxuICAgICAgICAgICAgLy8gICAgICAgICB3aWR0aFxuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8PSB3aWR0aFNlZ21lbnRzOyBpKyspIHtcbiAgICAgICAgICAgICAgICBmb3IgKGogPSAwOyBqIDw9IGhlaWdodFNlZ21lbnRzOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgeCA9IC13aWR0aCArIDIuMCAqIHdpZHRoICogaSAvIHdpZHRoU2VnbWVudHM7XG4gICAgICAgICAgICAgICAgICAgIHkgPSAwLjA7XG4gICAgICAgICAgICAgICAgICAgIHogPSAtKC1oZWlnaHQgKyAyLjAgKiBoZWlnaHQgKiBqIC8gaGVpZ2h0U2VnbWVudHMpO1xuICAgICAgICAgICAgICAgICAgICB1ID0gaSAvIHdpZHRoU2VnbWVudHM7XG4gICAgICAgICAgICAgICAgICAgIHYgPSBqIC8gaGVpZ2h0U2VnbWVudHM7XG5cbiAgICAgICAgICAgICAgICAgICAgdmVydGljZXMucHVzaCh4LCB5LCB6KTtcbiAgICAgICAgICAgICAgICAgICAgbm9ybWFscy5wdXNoKDAuMCwgMS4wLCAwLjApO1xuICAgICAgICAgICAgICAgICAgICB0ZXhDb29yZHMucHVzaCh1LCB2KTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoKGkgPCB3aWR0aFNlZ21lbnRzKSAmJiAoaiA8IGhlaWdodFNlZ21lbnRzKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5kaWNlcy5wdXNoKGogKyBpICogKHdpZHRoU2VnbWVudHMgKyAxKSwgICAgICAgaiArIChpICsgMSkgKiAod2lkdGhTZWdtZW50cyArIDEpLCAgICAgaiArIGkgKiAod2lkdGhTZWdtZW50cyArIDEpICsgMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbmRpY2VzLnB1c2goaiArIChpICsgMSkgKiAod2lkdGhTZWdtZW50cyArIDEpLCBqICsgKGkgKyAxKSAqICh3aWR0aFNlZ21lbnRzICsgMSkgKyAxLCBqICsgaSAqICh3aWR0aFNlZ21lbnRzICsgMSkgKyAxKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB2ZXJ0aWNlczogdmVydGljZXMsXG4gICAgICAgICAgICAgICAgZmFjZXM6IEdlb21ldHJ5VXRpbHMuY29udmVydFRvRmFjZXMoaW5kaWNlcywgbm9ybWFscyksXG4gICAgICAgICAgICAgICAgdGV4Q29vcmRzOiB0ZXhDb29yZHNcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG59XG5cbiIsIm1vZHVsZSB3ZHtcbiAgICBleHBvcnQgZW51bSBTcGhlcmVEcmF3TW9kZXtcbiAgICAgICAgTEFUSVRVREVMT05HVElUVURFXG4gICAgICAgIC8vREVDT01QT1NJVElPTlxuICAgIH1cbn1cbiIsIm1vZHVsZSB3ZHtcbiAgICBkZWNsYXJlIHZhciBNYXRoOmFueTtcblxuICAgIGV4cG9ydCBjbGFzcyBTcGhlcmVHZW9tZXRyeSBleHRlbmRzIEdlb21ldHJ5e1xuICAgICAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZSgpe1xuICAgICAgICAgICAgdmFyIGdlb20gPSBuZXcgdGhpcygpO1xuXG4gICAgICAgICAgICByZXR1cm4gZ2VvbTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyByYWRpdXM6bnVtYmVyID0gMTtcbiAgICAgICAgcHVibGljIGRyYXdNb2RlOlNwaGVyZURyYXdNb2RlID0gU3BoZXJlRHJhd01vZGUuTEFUSVRVREVMT05HVElUVURFO1xuICAgICAgICBwdWJsaWMgc2VnbWVudHM6bnVtYmVyID0gMjA7XG5cbiAgICAgICAgcHJvdGVjdGVkIGNvbXB1dGVEYXRhKCl7XG4gICAgICAgICAgICB2YXIgcmFkaXVzID0gdGhpcy5yYWRpdXMsXG4gICAgICAgICAgICAgICAgZHJhd01vZGUgPSB0aGlzLmRyYXdNb2RlLFxuICAgICAgICAgICAgICAgIHNlZ21lbnRzID0gdGhpcy5zZWdtZW50cyxcbiAgICAgICAgICAgICAgICBkYXRhID0gbnVsbDtcblxuICAgICAgICAgICAgaWYoZHJhd01vZGUgPT09IFNwaGVyZURyYXdNb2RlLkxBVElUVURFTE9OR1RJVFVERSl7XG4gICAgICAgICAgICAgICAgdmFyIHsgdmVydGljZXMsIGluZGljZXMsIG5vcm1hbHMsIHRleENvb3JkcyB9ID0gR2V0RGF0YUJ5TGF0aXR1ZGVMb25ndGl0dWRlLmNyZWF0ZShyYWRpdXMsIHNlZ21lbnRzKS5nZXREYXRhKCk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICB2ZXJ0aWNlczogdmVydGljZXMsXG4gICAgICAgICAgICAgICAgICAgIGZhY2VzOiBHZW9tZXRyeVV0aWxzLmNvbnZlcnRUb0ZhY2VzKGluZGljZXMsIG5vcm1hbHMpLFxuICAgICAgICAgICAgICAgICAgICB0ZXhDb29yZHM6IHRleENvb3Jkc1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vZWxzZSBpZihkcmF3TW9kZSA9PT0gU3BoZXJlRHJhd01vZGUuREVDT01QT1NJVElPTil7XG4gICAgICAgICAgICAvLyAgICBkYXRhID0gR2V0RGF0YUJ5RGVjb21wb3NpdGlvbi5jcmVhdGUocmFkaXVzLCBzZWdtZW50cykuZ2V0RGF0YSgpO1xuICAgICAgICAgICAgLy99XG5cbiAgICAgICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY2xhc3MgR2V0RGF0YUJ5TGF0aXR1ZGVMb25ndGl0dWRle1xuICAgICAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZShyYWRpdXM6bnVtYmVyLCBiYW5kczpudW1iZXIpOkdldERhdGFCeUxhdGl0dWRlTG9uZ3RpdHVkZSB7XG4gICAgICAgICAgICB2YXIgZ2VvbSA9IG5ldyB0aGlzKHJhZGl1cywgYmFuZHMpO1xuXG4gICAgICAgICAgICByZXR1cm4gZ2VvbTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX3JhZGl1czpudW1iZXIgPSBudWxsO1xuICAgICAgICBwcml2YXRlIF9sYXRpdHVkZUJhbmRzOm51bWJlciA9IG51bGw7XG4gICAgICAgIHByaXZhdGUgX2xvbmdpdHVkZUJhbmRzOm51bWJlciA9IG51bGw7XG5cbiAgICAgICAgY29uc3RydWN0b3IocmFkaXVzOm51bWJlciwgYmFuZHM6bnVtYmVyKXtcbiAgICAgICAgICAgIHRoaXMuX3JhZGl1cyA9IHJhZGl1cztcbiAgICAgICAgICAgIHRoaXMuX2xhdGl0dWRlQmFuZHMgPSBiYW5kcztcbiAgICAgICAgICAgIHRoaXMuX2xvbmdpdHVkZUJhbmRzID0gYmFuZHM7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgZ2V0RGF0YSgpe1xuICAgICAgICAgICAgdmFyIHZlcnRpY2VzID0gW107XG4gICAgICAgICAgICB2YXIgbm9ybWFscyA9IFtdO1xuICAgICAgICAgICAgdmFyIHRleENvb3JkcyA9IFtdO1xuICAgICAgICAgICAgdmFyIGluZGljZXMgPSBbXTtcblxuXG4gICAgICAgICAgICBmb3IgKHZhciBsYXROdW1iZXIgPSAwOyBsYXROdW1iZXIgPD0gdGhpcy5fbGF0aXR1ZGVCYW5kczsgbGF0TnVtYmVyKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhldGEgPSBsYXROdW1iZXIgKiBNYXRoLlBJIC8gdGhpcy5fbGF0aXR1ZGVCYW5kcztcbiAgICAgICAgICAgICAgICB2YXIgc2luVGhldGEgPSBNYXRoLnNpbih0aGV0YSk7XG4gICAgICAgICAgICAgICAgdmFyIGNvc1RoZXRhID0gTWF0aC5jb3ModGhldGEpO1xuXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgbG9uZ051bWJlciA9IDA7IGxvbmdOdW1iZXIgPD0gdGhpcy5fbG9uZ2l0dWRlQmFuZHM7IGxvbmdOdW1iZXIrKykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcGhpID0gbG9uZ051bWJlciAqIDIgKiBNYXRoLlBJIC8gdGhpcy5fbG9uZ2l0dWRlQmFuZHM7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzaW5QaGkgPSBNYXRoLnNpbihwaGkpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgY29zUGhpID0gTWF0aC5jb3MocGhpKTtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgeCA9IHRoaXMuX3JhZGl1cyAqIGNvc1BoaSAqIHNpblRoZXRhO1xuICAgICAgICAgICAgICAgICAgICB2YXIgeSA9IHRoaXMuX3JhZGl1cyAqY29zVGhldGE7XG4gICAgICAgICAgICAgICAgICAgIHZhciB6ID0gdGhpcy5fcmFkaXVzICpzaW5QaGkgKiBzaW5UaGV0YTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHUgPSAxIC0gKGxvbmdOdW1iZXIgLyB0aGlzLl9sb25naXR1ZGVCYW5kcyk7XG4gICAgICAgICAgICAgICAgICAgIHZhciB2ID0gMSAtIChsYXROdW1iZXIgLyB0aGlzLl9sYXRpdHVkZUJhbmRzKTtcblxuICAgICAgICAgICAgICAgICAgICBub3JtYWxzLnB1c2goeCk7XG4gICAgICAgICAgICAgICAgICAgIG5vcm1hbHMucHVzaCh5KTtcbiAgICAgICAgICAgICAgICAgICAgbm9ybWFscy5wdXNoKHopO1xuICAgICAgICAgICAgICAgICAgICB0ZXhDb29yZHMucHVzaCh1KTtcbiAgICAgICAgICAgICAgICAgICAgdGV4Q29vcmRzLnB1c2godik7XG4gICAgICAgICAgICAgICAgICAgIHZlcnRpY2VzLnB1c2goeCk7XG4gICAgICAgICAgICAgICAgICAgIHZlcnRpY2VzLnB1c2goeSk7XG4gICAgICAgICAgICAgICAgICAgIHZlcnRpY2VzLnB1c2goeik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgIGZvciAodmFyIGxhdE51bWJlciA9IDA7IGxhdE51bWJlciA8IHRoaXMuX2xhdGl0dWRlQmFuZHM7IGxhdE51bWJlcisrKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgbG9uZ051bWJlciA9IDA7IGxvbmdOdW1iZXIgPCB0aGlzLl9sb25naXR1ZGVCYW5kczsgbG9uZ051bWJlcisrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBmaXJzdCA9IGxhdE51bWJlciAqICh0aGlzLl9sb25naXR1ZGVCYW5kcyArIDEpICsgbG9uZ051bWJlcjtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNlY29uZCA9IGZpcnN0ICsgdGhpcy5fbG9uZ2l0dWRlQmFuZHMgKyAxO1xuICAgICAgICAgICAgICAgICAgICBpbmRpY2VzLnB1c2goZmlyc3QgKyAxKTtcbiAgICAgICAgICAgICAgICAgICAgaW5kaWNlcy5wdXNoKHNlY29uZCk7XG4gICAgICAgICAgICAgICAgICAgIGluZGljZXMucHVzaChmaXJzdCk7XG5cbiAgICAgICAgICAgICAgICAgICAgaW5kaWNlcy5wdXNoKGZpcnN0ICsgMSk7XG4gICAgICAgICAgICAgICAgICAgIGluZGljZXMucHVzaChzZWNvbmQgKyAxKTtcbiAgICAgICAgICAgICAgICAgICAgaW5kaWNlcy5wdXNoKHNlY29uZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHZlcnRpY2VzOiB2ZXJ0aWNlcyxcbiAgICAgICAgICAgICAgICBpbmRpY2VzOiBpbmRpY2VzLFxuICAgICAgICAgICAgICAgIG5vcm1hbHM6IG5vcm1hbHMsXG4gICAgICAgICAgICAgICAgdGV4Q29vcmRzOiB0ZXhDb29yZHNcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgfVxuXG4gICAgLy90b2RvIGFkZCB0ZXhDb29yZHNcbiAgICAvL2NsYXNzIEdldERhdGFCeURlY29tcG9zaXRpb257XG4gICAgLy8gICAgcHVibGljIHN0YXRpYyBjcmVhdGUocmFkaXVzOm51bWJlciwgY291bnQ6bnVtYmVyKTpHZXREYXRhQnlEZWNvbXBvc2l0aW9uIHtcbiAgICAvLyAgICAgICAgdmFyIGdlb20gPSBuZXcgdGhpcyhyYWRpdXMsIGNvdW50KTtcbiAgICAvL1xuICAgIC8vICAgICAgICByZXR1cm4gZ2VvbTtcbiAgICAvLyAgICB9XG4gICAgLy9cbiAgICAvLyAgICBwcml2YXRlIF92ZXJ0aWNlczpudW1iZXJbXSA9IFtdO1xuICAgIC8vICAgIGdldCB2ZXJ0aWNlcygpe1xuICAgIC8vICAgICAgICByZXR1cm4gdGhpcy5fdmVydGljZXM7XG4gICAgLy8gICAgfVxuICAgIC8vICAgIHNldCB2ZXJ0aWNlcyh2ZXJ0aWNlczpudW1iZXJbXSl7XG4gICAgLy8gICAgICAgIHRoaXMuX3ZlcnRpY2VzID0gdmVydGljZXM7XG4gICAgLy8gICAgfVxuICAgIC8vXG4gICAgLy8gICAgcHJpdmF0ZSBfaW5kaWNlczpudW1iZXJbXSA9IFtdO1xuICAgIC8vICAgIGdldCBpbmRpY2VzKCl7XG4gICAgLy8gICAgICAgIHJldHVybiB0aGlzLl9pbmRpY2VzO1xuICAgIC8vICAgIH1cbiAgICAvLyAgICBzZXQgaW5kaWNlcyhpbmRpY2VzOm51bWJlcltdKXtcbiAgICAvLyAgICAgICAgdGhpcy5faW5kaWNlcyA9IGluZGljZXM7XG4gICAgLy8gICAgfVxuICAgIC8vXG4gICAgLy8gICAgcHJpdmF0ZSBfdkxlbjpudW1iZXIgPSBudWxsO1xuICAgIC8vICAgIHByaXZhdGUgcmFkaXVzOm51bWJlciA9IG51bGw7XG4gICAgLy8gICAgcHJpdmF0ZSBfY291bnQ6bnVtYmVyID0gbnVsbDtcbiAgICAvL1xuICAgIC8vICAgIGNvbnN0cnVjdG9yKHJhZGl1cywgY291bnQpe1xuICAgIC8vICAgICAgICB0aGlzLnJhZGl1cyA9IHJhZGl1cztcbiAgICAvLyAgICAgICAgdGhpcy5fY291bnQgPSBjb3VudDtcbiAgICAvLyAgICB9XG4gICAgLy9cbiAgICAvLyAgICBwdWJsaWMgZ2V0RGF0YSgpe1xuICAgIC8vICAgICAgICB2YXIgb3JpZ2luVmVydGljZXMgPSBbXG4gICAgLy8gICAgICAgICAgICBbdGhpcy5yYWRpdXMsIDAsIDBdLFxuICAgIC8vICAgICAgICAgICAgWy10aGlzLnJhZGl1cywgMCwgMF0sXG4gICAgLy8gICAgICAgICAgICBbMCwgdGhpcy5yYWRpdXMsIDBdLFxuICAgIC8vICAgICAgICAgICAgWzAsIC10aGlzLnJhZGl1cywgMF0sXG4gICAgLy8gICAgICAgICAgICBbMCwgMCwgdGhpcy5yYWRpdXNdLFxuICAgIC8vICAgICAgICAgICAgWzAsIDAsIC10aGlzLnJhZGl1c11cbiAgICAvLyAgICAgICAgXTtcbiAgICAvLyAgICAgICAgdmFyIG9yaWdpbkluZGljZXMgPSBbXG4gICAgLy8gICAgICAgICAgICAvL1syLDQsMF0sWzIsMCw1XSxbMiw1LDFdLFsyLDEsNF0sICAgWzMsMCw0XSxbMyw1LDBdLFszLDEsNV0sWzMsNCwxXVxuICAgIC8vICAgICAgICAgICAgLy9bMiw0LDBdXG4gICAgLy8gICAgICAgICAgICBbMiw0LDBdLFsyLDAsNV0sWzIsNSwxXSxbMiwxLDRdLFxuICAgIC8vICAgICAgICAgICAgWzMsMCw0XSxbMyw1LDBdLFszLDEsNV0sWzMsNCwxXVxuICAgIC8vICAgICAgICBdO1xuICAgIC8vXG4gICAgLy8gICAgICAgIHRoaXMuX3ZMZW4gPSBvcmlnaW5WZXJ0aWNlcy5sZW5ndGg7XG4gICAgLy9cbiAgICAvLyAgICAgICAgdmFyIGogPSAwO1xuICAgIC8vICAgICAgICB2YXIgbGVuID0gb3JpZ2luVmVydGljZXMubGVuZ3RoO1xuICAgIC8vXG4gICAgLy8gICAgICAgIGZvcihqID0gMDsgaiA8IGxlbjsgaiArKyl7XG4gICAgLy8gICAgICAgICAgICB0aGlzLl92ZXJ0aWNlcyA9IHRoaXMuX3ZlcnRpY2VzLmNvbmNhdChvcmlnaW5WZXJ0aWNlc1tqXSk7XG4gICAgLy8gICAgICAgIH1cbiAgICAvL1xuICAgIC8vICAgICAgICB2YXIgaiA9IDAsXG4gICAgLy8gICAgICAgICAgICBsZW4gPSBvcmlnaW5JbmRpY2VzLmxlbmd0aDsgIC8vOOmdouS9k1xuICAgIC8vXG4gICAgLy8gICAgICAgIGZvciAoaiA9IDA7IGogPCBsZW47IGogKyspe1xuICAgIC8vICAgICAgICAgICAgLy9mb3IgKGkgPSAwOyBpIDwgdGhpcy5fY291bnQ7IGkrKyl7XG4gICAgLy8gICAgICAgICAgICAvL3RoaXMuX3ZlcnRpY2VzID0gdGhpcy5fdmVydGljZXMuY29uY2F0KG9yaWdpblZlcnRpY2VzW29yaWdpbkluZGljZXNbal1bMF1dLFxuICAgIC8vICAgICAgICAgICAgLy8gICAgb3JpZ2luVmVydGljZXNbb3JpZ2luSW5kaWNlc1tqXVsxXV0sXG4gICAgLy8gICAgICAgICAgICAvLyAgICBvcmlnaW5WZXJ0aWNlc1tvcmlnaW5JbmRpY2VzW2pdWzJdXSk7XG4gICAgLy9cbiAgICAvLyAgICAgICAgICAgIHRoaXMuX3N1YkRpdmlkZShvcmlnaW5WZXJ0aWNlc1tvcmlnaW5JbmRpY2VzW2pdWzBdXSxcbiAgICAvLyAgICAgICAgICAgICAgICBvcmlnaW5WZXJ0aWNlc1tvcmlnaW5JbmRpY2VzW2pdWzFdXSxcbiAgICAvLyAgICAgICAgICAgICAgICBvcmlnaW5WZXJ0aWNlc1tvcmlnaW5JbmRpY2VzW2pdWzJdXSxcbiAgICAvLyAgICAgICAgICAgICAgICBvcmlnaW5JbmRpY2VzW2pdLFxuICAgIC8vICAgICAgICAgICAgICAgIHRoaXMuX2NvdW50LFxuICAgIC8vICAgICAgICAgICAgICAgIHRoaXMucmFkaXVzKTtcbiAgICAvL1xuICAgIC8vICAgICAgICAgICAgLy99XG4gICAgLy9cbiAgICAvLyAgICAgICAgfVxuICAgIC8vXG4gICAgLy8gICAgICAgIHJldHVybiB7XG4gICAgLy8gICAgICAgICAgICB2ZXJ0aWNlczogQXJyYXlCdWZmZXIuY3JlYXRlKG5ldyBGbG9hdDMyQXJyYXkodGhpcy5fdmVydGljZXMpLFxuICAgIC8vICAgICAgICAgICAgICAgIDMsIEJ1ZmZlclR5cGUuRkxPQVQpLFxuICAgIC8vICAgICAgICAgICAgaW5kaWNlczogRWxlbWVudEJ1ZmZlci5jcmVhdGUobmV3IFVpbnQxNkFycmF5KHRoaXMuX2luZGljZXMpLFxuICAgIC8vICAgICAgICAgICAgICAgIEJ1ZmZlclR5cGUuVU5TSUdORURfU0hPUlQpXG4gICAgLy8gICAgICAgIH1cbiAgICAvLyAgICB9XG4gICAgLy9cbiAgICAvLyAgICBwcml2YXRlIF9zdWJEaXZpZGUodjE6bnVtYmVyW10sIHYyOm51bWJlcltdLCB2MzpudW1iZXJbXSwgaW5kOm51bWJlcltdLGNvdW50Om51bWJlciwgcmFkaXVzOm51bWJlcik6IHZvaWR7XG4gICAgLy8gICAgICAgIGlmKGNvdW50IDw9IDApe1xuICAgIC8vICAgICAgICAgICAgdGhpcy5faW5kaWNlcyA9IHRoaXMuX2luZGljZXMuY29uY2F0KGluZCk7XG4gICAgLy9cbiAgICAvLyAgICAgICAgICAgIHJldHVybjtcbiAgICAvLyAgICAgICAgfVxuICAgIC8vICAgICAgICAvL1xuICAgIC8vICAgICAgICB2YXIgaSA9IDA7XG4gICAgLy8gICAgICAgIHZhciB2MTIgPSBbXSxcbiAgICAvLyAgICAgICAgICAgIHYyMyA9IFtdLFxuICAgIC8vICAgICAgICAgICAgdjMxID0gW107XG4gICAgLy9cbiAgICAvLyAgICAgICAgLy/msYLlkJHph4/kuK3lv4PngrlcbiAgICAvLyAgICAgICAgZm9yKGkgPSAwOyBpIDwgMzsgaSsrKXtcbiAgICAvLyAgICAgICAgICAgIHYxMltpXSA9ICh2MVtpXSt2MltpXSkvMjsgIC8v5rGC5Y+W562J5YiG55qE5Lit54K55Z2Q5qCHXG4gICAgLy8gICAgICAgICAgICB2MjNbaV0gPSAodjJbaV0rdjNbaV0pLzI7XG4gICAgLy8gICAgICAgICAgICB2MzFbaV0gPSAodjNbaV0rdjFbaV0pLzI7XG4gICAgLy8gICAgICAgIH1cbiAgICAvL1xuICAgIC8vICAgICAgICAvL+aooemVv+aJqeWxlVxuICAgIC8vICAgICAgICB0aGlzLl9ub3JtYWxpemUodjEyLCByYWRpdXMpO1xuICAgIC8vICAgICAgICB0aGlzLl9ub3JtYWxpemUodjIzLCByYWRpdXMpO1xuICAgIC8vICAgICAgICB0aGlzLl9ub3JtYWxpemUodjMxLCByYWRpdXMpO1xuICAgIC8vXG4gICAgLy8gICAgICAgIHRoaXMuX3ZlcnRpY2VzID0gdGhpcy5fdmVydGljZXMuY29uY2F0KHYxMiwgdjIzLCB2MzEpO1xuICAgIC8vXG4gICAgLy8gICAgICAgIHZhciBpVjEgPSBpbmRbMF0sXG4gICAgLy8gICAgICAgICAgICBpVjIgPSBpbmRbMV0sXG4gICAgLy8gICAgICAgICAgICBpVjMgPSBpbmRbMl0sXG4gICAgLy8gICAgICAgICAgICBpVjEyID10aGlzLl92TGVuLFxuICAgIC8vICAgICAgICAgICAgaVYyMyA9dGhpcy5fdkxlbiArIDEsXG4gICAgLy8gICAgICAgICAgICBpVjMxID10aGlzLl92TGVuICsgMjtcbiAgICAvL1xuICAgIC8vICAgICAgICB2YXIgaW4xID1bXG4gICAgLy8gICAgICAgICAgICBpVjEsIGlWMTIsIGlWMzFcbiAgICAvLyAgICAgICAgXTtcbiAgICAvLyAgICAgICAgdmFyIGluMiA9W1xuICAgIC8vICAgICAgICAgICAgaVYzMSwgaVYxMiwgaVYyM1xuICAgIC8vICAgICAgICBdO1xuICAgIC8vICAgICAgICB2YXIgaW4zID1bXG4gICAgLy8gICAgICAgICAgICBpVjEyLCBpVjIsIGlWMjNcbiAgICAvLyAgICAgICAgXTtcbiAgICAvLyAgICAgICAgdmFyIGluNCA9W1xuICAgIC8vICAgICAgICAgICAgaVYzMSwgaVYyMywgaVYzXG4gICAgLy8gICAgICAgIF07XG4gICAgLy9cbiAgICAvLyAgICAgICAgdGhpcy5fdkxlbiA9dGhpcy5fdkxlbiArIDM7XG4gICAgLy9cbiAgICAvL1xuICAgIC8vXG4gICAgLy8gICAgICAgIC8v57un57ut5YiH5YiG5LiJ6KeS5b2iXG4gICAgLy8gICAgICAgIHRoaXMuX3N1YkRpdmlkZSh2MSx2MTIsdjMxLGluMSwgY291bnQtMSwgcmFkaXVzKTsgLy/lr7nmiYDkuqfnlJ/nmoQ05Liq5paw55qE5LiJ6KeS6Z2i5YaN6L+b6KGM562J5YiGXG4gICAgLy8gICAgICAgIHRoaXMuX3N1YkRpdmlkZSh2MzEsdjEyLCB2MjMsIGluMiwgY291bnQtMSwgcmFkaXVzKTtcbiAgICAvLyAgICAgICAgdGhpcy5fc3ViRGl2aWRlKHYxMiwgdjIsIHYyMywgaW4zLCBjb3VudC0xLCByYWRpdXMpO1xuICAgIC8vICAgICAgICB0aGlzLl9zdWJEaXZpZGUodjMxLCB2MjMsIHYzLCBpbjQsIGNvdW50LTEsIHJhZGl1cyk7XG4gICAgLy8gICAgfVxuICAgIC8vXG4gICAgLy8gICAgcHJpdmF0ZSBfbm9ybWFsaXplKHY6bnVtYmVyW10sIHJhZGl1czpudW1iZXIpOiBudW1iZXJbXXtcbiAgICAvLyAgICAgICAgdmFyIGQgPSBNYXRoLnNxcnQoXG4gICAgLy8gICAgICAgICAgICB2WzBdICogdlswXSArIHZbMV0gKiB2WzFdICsgdlsyXSAqIHZbMl1cbiAgICAvLyAgICAgICAgKTtcbiAgICAvL1xuICAgIC8vICAgICAgICBpZihkID09PSAwKXtcbiAgICAvLyAgICAgICAgICAgIHJldHVybiBbMCwgMCwgMF07XG4gICAgLy8gICAgICAgIH1cbiAgICAvL1xuICAgIC8vICAgICAgICB2WzBdID0gcmFkaXVzICogdlswXSAvIGQ7XG4gICAgLy8gICAgICAgIHZbMV0gPSByYWRpdXMgKiB2WzFdIC8gZDtcbiAgICAvLyAgICAgICAgdlsyXSA9IHJhZGl1cyAqIHZbMl0gLyBkO1xuICAgIC8vXG4gICAgLy8gICAgICAgIHJldHVybiB2O1xuICAgIC8vICAgIH1cbiAgICAvL31cbn1cbiIsIm1vZHVsZSB3ZHtcbiAgICBleHBvcnQgY2xhc3MgVHJpYW5nbGVHZW9tZXRyeSBleHRlbmRzIEdlb21ldHJ5e1xuICAgICAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZSgpe1xuICAgICAgICAgICAgdmFyIGdlb20gPSBuZXcgdGhpcygpO1xuXG4gICAgICAgICAgICByZXR1cm4gZ2VvbTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyB3aWR0aDpudW1iZXIgPSBudWxsO1xuICAgICAgICBwdWJsaWMgaGVpZ2h0Om51bWJlciA9IG51bGw7XG5cbiAgICAgICAgcHJvdGVjdGVkIGNvbXB1dGVEYXRhKCl7XG4gICAgICAgICAgICB2YXIgd2lkdGggPSB0aGlzLndpZHRoLFxuICAgICAgICAgICAgICAgIGhlaWdodCA9IHRoaXMuaGVpZ2h0LFxuICAgICAgICAgICAgICAgIGxlZnQgPSAtd2lkdGggLyAyLFxuICAgICAgICAgICAgICAgIHJpZ2h0ID0gd2lkdGggLyAyLFxuICAgICAgICAgICAgICAgIHVwID0gaGVpZ2h0IC8gMixcbiAgICAgICAgICAgICAgICBkb3duID0gLWhlaWdodCAvIDIsXG4gICAgICAgICAgICAgICAgdmVydGljZXMgPSBbXSxcbiAgICAgICAgICAgICAgICB0ZXhDb29yZHMgPSBbXSxcbiAgICAgICAgICAgICAgICBpbmRpY2VzID0gW10sXG4gICAgICAgICAgICAgICAgbm9ybWFscyA9IFtdO1xuXG4gICAgICAgICAgICB2ZXJ0aWNlcyA9IFtcbiAgICAgICAgICAgICAgICAwLjAsIHVwLCAwLFxuICAgICAgICAgICAgICAgIGxlZnQsIGRvd24sIDAsXG4gICAgICAgICAgICAgICAgcmlnaHQsIGRvd24sIDBcbiAgICAgICAgICAgIF07XG5cbiAgICAgICAgICAgIGluZGljZXMgPSBbXG4gICAgICAgICAgICAgICAgMCwgMSwgMlxuICAgICAgICAgICAgXTtcblxuICAgICAgICAgICAgdGV4Q29vcmRzID0gW1xuICAgICAgICAgICAgICAgIDAuNSwgMS4wLFxuICAgICAgICAgICAgICAgIDAuMCwgMC4wLFxuICAgICAgICAgICAgICAgIDEuMCwgMC4wXG4gICAgICAgICAgICBdO1xuXG4gICAgICAgICAgICBub3JtYWxzID0gW1xuICAgICAgICAgICAgICAgIDAsIDAsIDEsXG4gICAgICAgICAgICAgICAgMCwgMCwgMSxcbiAgICAgICAgICAgICAgICAwLCAwLCAxXG4gICAgICAgICAgICBdO1xuXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHZlcnRpY2VzOiB2ZXJ0aWNlcyxcbiAgICAgICAgICAgICAgICBmYWNlczogR2VvbWV0cnlVdGlscy5jb252ZXJ0VG9GYWNlcyhpbmRpY2VzLCBub3JtYWxzKSxcbiAgICAgICAgICAgICAgICB0ZXhDb29yZHM6IHRleENvb3Jkc1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuIiwibW9kdWxlIHdkIHtcbiAgICBleHBvcnQgYWJzdHJhY3QgY2xhc3MgR2VvbWV0cnlEYXRhIHtcbiAgICAgICAgY29uc3RydWN0b3IoZ2VvbWV0cnk6R2VvbWV0cnkpIHtcbiAgICAgICAgICAgIHRoaXMuZ2VvbWV0cnkgPSBnZW9tZXRyeTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX3ZlcnRpY2VzOkFycmF5PG51bWJlcj4gPSBudWxsO1xuICAgICAgICBnZXQgdmVydGljZXMoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fdmVydGljZXM7XG4gICAgICAgIH1cblxuICAgICAgICBzZXQgdmVydGljZXModmVydGljZXM6QXJyYXk8bnVtYmVyPikge1xuICAgICAgICAgICAgdGhpcy5fdmVydGljZXMgPSB2ZXJ0aWNlcztcbiAgICAgICAgICAgIHRoaXMuaXNUYW5nZW50RGlydHkgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgQHJlcXVpcmVHZXR0ZXIoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgYXNzZXJ0KHRoaXMuX2ZhY2VzLmxlbmd0aCA+IDAsIExvZy5pbmZvLkZVTkNfU0hPVUxEKFwiZmFjZXMuY291bnRcIiwgXCI+IDBcIikpO1xuXG4gICAgICAgICAgICBmb3IgKGxldCBmYWNlIG9mIHRoaXMuX2ZhY2VzKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZ2VvbWV0cnkuaXNTbW9vdGhTaGFkaW5nKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgYXNzZXJ0KGZhY2UudmVydGV4Tm9ybWFscyAmJiBmYWNlLnZlcnRleE5vcm1hbHMuZ2V0Q291bnQoKSA9PT0gMywgTG9nLmluZm8uRlVOQ19TSE9VTEQoXCJmYWNlcy0+dmVydGV4Tm9ybWFscy5jb3VudFwiLCBcIj09PSAzXCIpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGFzc2VydChmYWNlLmhhc0ZhY2VOb3JtYWwoKSwgTG9nLmluZm8uRlVOQ19TSE9VTEQoXCJmYWNlcy0+ZmFjZU5vcm1hbFwiLCBcImhhcyBkYXRhXCIpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICAgIEBjYWNoZUdldHRlcihmdW5jdGlvbigpe1xuICAgICAgICAgICAgcmV0dXJuICF0aGlzLl9ub3JtYWxEaXJ0eSAmJiB0aGlzLl9ub3JtYWxDYWNoZTtcbiAgICAgICAgfSwgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9ub3JtYWxDYWNoZTtcbiAgICAgICAgfSwgZnVuY3Rpb24ocmVzdWx0KXtcbiAgICAgICAgICAgIHRoaXMuX25vcm1hbENhY2hlID0gcmVzdWx0O1xuICAgICAgICAgICAgdGhpcy5fbm9ybWFsRGlydHkgPSBmYWxzZTtcbiAgICAgICAgfSlcbiAgICAgICAgZ2V0IG5vcm1hbHMoKSB7XG4gICAgICAgICAgICB2YXIgZ2VvbWV0cnkgPSB0aGlzLmdlb21ldHJ5O1xuXG4gICAgICAgICAgICBpZiAoZ2VvbWV0cnkuaXNTbW9vdGhTaGFkaW5nKCkpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuaGFzVmVydGV4Tm9ybWFscygpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29tcHV0ZVZlcnRleE5vcm1hbHMoKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5ub3JtYWxzRnJvbVZlcnRleE5vcm1hbHM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXRoaXMuaGFzRmFjZU5vcm1hbHMoKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuY29tcHV0ZUZhY2VOb3JtYWxzKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzLm5vcm1hbHNGcm9tRmFjZU5vcm1hbDtcbiAgICAgICAgfVxuXG4gICAgICAgIEByZXF1aXJlR2V0dGVyKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBhc3NlcnQodGhpcy5fZmFjZXMubGVuZ3RoID4gMCwgTG9nLmluZm8uRlVOQ19TSE9VTEQoXCJnZW9tZXRyeVwiLCBcImhhcyBmYWNlc1wiKSk7XG4gICAgICAgIH0pXG4gICAgICAgIEBlbnN1cmVHZXR0ZXIoZnVuY3Rpb24gKG5vcm1hbHMpIHtcbiAgICAgICAgICAgIGZvcihsZXQgZGF0YSBvZiBub3JtYWxzKXtcbiAgICAgICAgICAgICAgICBhc3NlcnQoSnVkZ2VVdGlscy5pc051bWJlcihkYXRhKSwgTG9nLmluZm8uRlVOQ19TSE9VTEQoXCJub3JtYWxzIGRhdGFcIiwgXCJiZSBudW1iZXJcIikpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgICBAY2FjaGVHZXR0ZXIoZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIHJldHVybiAhdGhpcy5fbm9ybWFsRGlydHkgJiYgdGhpcy5fbm9ybWFsRnJvbUZhY2VDYWNoZTtcbiAgICAgICAgfSwgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9ub3JtYWxGcm9tRmFjZUNhY2hlO1xuICAgICAgICB9LCBmdW5jdGlvbihyZXN1bHQpe1xuICAgICAgICAgICAgdGhpcy5fbm9ybWFsRnJvbUZhY2VDYWNoZSA9IHJlc3VsdDtcbiAgICAgICAgICAgIHRoaXMuX25vcm1hbERpcnR5ID0gZmFsc2U7XG4gICAgICAgIH0pXG4gICAgICAgIGdldCBub3JtYWxzRnJvbUZhY2VOb3JtYWwoKXtcbiAgICAgICAgICAgIHZhciBub3JtYWxzID0gbnVsbDtcblxuICAgICAgICAgICAgaWYoIXRoaXMuaGFzRmFjZU5vcm1hbHMoKSl7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBub3JtYWxzID0gW107XG5cbiAgICAgICAgICAgIHRoaXMuX2ZhY2VzLmZvckVhY2goKGZhY2U6RmFjZTMpID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgbm9ybWFsID0gZmFjZS5mYWNlTm9ybWFsO1xuXG4gICAgICAgICAgICAgICAgR2VvbWV0cnlVdGlscy5zZXRUaHJlZUNvbXBvbmVudChub3JtYWxzLCBub3JtYWwsIGZhY2UuYUluZGV4KTtcbiAgICAgICAgICAgICAgICBHZW9tZXRyeVV0aWxzLnNldFRocmVlQ29tcG9uZW50KG5vcm1hbHMsIG5vcm1hbCwgZmFjZS5iSW5kZXgpO1xuICAgICAgICAgICAgICAgIEdlb21ldHJ5VXRpbHMuc2V0VGhyZWVDb21wb25lbnQobm9ybWFscywgbm9ybWFsLCBmYWNlLmNJbmRleCk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy90b2RvIG9wdGltaXplOm5vdCBmaWxsLCBrZWVwIE5hTj9cbiAgICAgICAgICAgIHRoaXMuX2ZpbGxFbXB0eURhdGEobm9ybWFscyk7XG5cbiAgICAgICAgICAgIHJldHVybiBub3JtYWxzO1xuICAgICAgICB9XG5cbiAgICAgICAgQHJlcXVpcmVHZXR0ZXIoZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIGFzc2VydCh0aGlzLl9mYWNlcy5sZW5ndGggPiAwLCBMb2cuaW5mby5GVU5DX1NIT1VMRChcImdlb21ldHJ5XCIsIFwiaGFzIGZhY2VzXCIpKTtcbiAgICAgICAgfSlcbiAgICAgICAgQGVuc3VyZUdldHRlcihmdW5jdGlvbiAobm9ybWFscykge1xuICAgICAgICAgICAgZm9yKGxldCBkYXRhIG9mIG5vcm1hbHMpe1xuICAgICAgICAgICAgICAgIGFzc2VydChKdWRnZVV0aWxzLmlzTnVtYmVyKGRhdGEpLCBMb2cuaW5mby5GVU5DX1NIT1VMRChcIm5vcm1hbHMgZGF0YVwiLCBcImJlIG51bWJlclwiKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICAgIEBjYWNoZUdldHRlcihmdW5jdGlvbigpe1xuICAgICAgICAgICAgcmV0dXJuICF0aGlzLl9ub3JtYWxEaXJ0eSAmJiB0aGlzLl9ub3JtYWxGcm9tVmVydGV4Q2FjaGU7XG4gICAgICAgIH0sIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbm9ybWFsRnJvbVZlcnRleENhY2hlO1xuICAgICAgICB9LCBmdW5jdGlvbihyZXN1bHQpe1xuICAgICAgICAgICAgdGhpcy5fbm9ybWFsRnJvbVZlcnRleENhY2hlID0gcmVzdWx0O1xuICAgICAgICAgICAgdGhpcy5fbm9ybWFsRGlydHkgPSBmYWxzZTtcbiAgICAgICAgfSlcbiAgICAgICAgZ2V0IG5vcm1hbHNGcm9tVmVydGV4Tm9ybWFscygpe1xuICAgICAgICAgICAgdmFyIG5vcm1hbHMgPSBudWxsO1xuXG4gICAgICAgICAgICBpZighdGhpcy5oYXNWZXJ0ZXhOb3JtYWxzKCkpe1xuICAgICAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbm9ybWFscyA9IFtdO1xuXG4gICAgICAgICAgICB0aGlzLl9mYWNlcy5mb3JFYWNoKChmYWNlOkZhY2UzKSA9PiB7XG4gICAgICAgICAgICAgICAgR2VvbWV0cnlVdGlscy5zZXRUaHJlZUNvbXBvbmVudChub3JtYWxzLCBmYWNlLnZlcnRleE5vcm1hbHMuZ2V0Q2hpbGQoMCksIGZhY2UuYUluZGV4KTtcbiAgICAgICAgICAgICAgICBHZW9tZXRyeVV0aWxzLnNldFRocmVlQ29tcG9uZW50KG5vcm1hbHMsIGZhY2UudmVydGV4Tm9ybWFscy5nZXRDaGlsZCgxKSwgZmFjZS5iSW5kZXgpO1xuICAgICAgICAgICAgICAgIEdlb21ldHJ5VXRpbHMuc2V0VGhyZWVDb21wb25lbnQobm9ybWFscywgZmFjZS52ZXJ0ZXhOb3JtYWxzLmdldENoaWxkKDIpLCBmYWNlLmNJbmRleCk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy90b2RvIG9wdGltaXplOm5vdCBmaWxsLCByZW1haW4gTmFOP1xuICAgICAgICAgICAgdGhpcy5fZmlsbEVtcHR5RGF0YShub3JtYWxzKTtcblxuICAgICAgICAgICAgcmV0dXJuIG5vcm1hbHM7XG4gICAgICAgIH1cblxuICAgICAgICBAY2FjaGVHZXR0ZXIoZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIHJldHVybiAhdGhpcy5faW5kaWNlRGlydHkgJiYgdGhpcy5faW5kaWNlQ2FjaGU7XG4gICAgICAgIH0sIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5faW5kaWNlQ2FjaGU7XG4gICAgICAgIH0sIGZ1bmN0aW9uKHJlc3VsdCl7XG4gICAgICAgICAgICB0aGlzLl9pbmRpY2VDYWNoZSA9IHJlc3VsdDtcbiAgICAgICAgICAgIHRoaXMuX2luZGljZURpcnR5ID0gZmFsc2U7XG4gICAgICAgIH0pXG4gICAgICAgIGdldCBpbmRpY2VzKCk6QXJyYXk8bnVtYmVyPiB7XG4gICAgICAgICAgICB2YXIgaW5kaWNlcyA9IFtdO1xuXG4gICAgICAgICAgICBmb3IgKGxldCBmYWNlIG9mIHRoaXMuX2ZhY2VzKSB7XG4gICAgICAgICAgICAgICAgaW5kaWNlcy5wdXNoKGZhY2UuYUluZGV4LCBmYWNlLmJJbmRleCwgZmFjZS5jSW5kZXgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gaW5kaWNlcztcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX2ZhY2VzOkFycmF5PEZhY2UzPiA9IG51bGw7XG4gICAgICAgIGdldCBmYWNlcygpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9mYWNlcztcbiAgICAgICAgfVxuXG4gICAgICAgIHNldCBmYWNlcyhmYWNlczpBcnJheTxGYWNlMz4pIHtcbiAgICAgICAgICAgIHRoaXMuX2ZhY2VzID0gZmFjZXM7XG4gICAgICAgICAgICB0aGlzLm9uQ2hhbmdlRmFjZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfdGV4Q29vcmRzOkFycmF5PG51bWJlcj4gPSBudWxsO1xuICAgICAgICBnZXQgdGV4Q29vcmRzKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3RleENvb3JkcztcbiAgICAgICAgfVxuXG4gICAgICAgIHNldCB0ZXhDb29yZHModGV4Q29vcmRzOkFycmF5PG51bWJlcj4pIHtcbiAgICAgICAgICAgIHRoaXMuX3RleENvb3JkcyA9IHRleENvb3JkcztcbiAgICAgICAgICAgIHRoaXMuaXNUYW5nZW50RGlydHkgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfY29sb3JzOkFycmF5PG51bWJlcj4gPSBudWxsO1xuICAgICAgICBnZXQgY29sb3JzKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2dldENvbG9ycyh0aGlzLl9jb2xvcnMsIHRoaXMuX3ZlcnRpY2VzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHNldCBjb2xvcnMoY29sb3JzOkFycmF5PG51bWJlcj4pIHtcbiAgICAgICAgICAgIHRoaXMuX2NvbG9ycyA9IGNvbG9ycztcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX3RhbmdlbnRzOkFycmF5PG51bWJlcj4gPSBudWxsO1xuICAgICAgICBnZXQgdGFuZ2VudHMoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5pc1RhbmdlbnREaXJ0eSkge1xuICAgICAgICAgICAgICAgIHRoaXMuaXNUYW5nZW50RGlydHkgPSBmYWxzZTtcblxuICAgICAgICAgICAgICAgIHRoaXMuX3RhbmdlbnRzID0gdGhpcy5fY2FsY3VsYXRlVGFuZ2VudHModGhpcy5fdmVydGljZXMsIHRoaXMubm9ybWFscywgdGhpcy50ZXhDb29yZHMsIHRoaXMuaW5kaWNlcyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzLl90YW5nZW50cztcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBpc1RhbmdlbnREaXJ0eTpib29sZWFuID0gdHJ1ZTtcblxuICAgICAgICBwcm90ZWN0ZWQgZ2VvbWV0cnk6R2VvbWV0cnkgPSBudWxsO1xuXG4gICAgICAgIHByaXZhdGUgX25vcm1hbENhY2hlOkFycmF5PG51bWJlcj4gPSBudWxsO1xuICAgICAgICBwcml2YXRlIF9ub3JtYWxGcm9tRmFjZUNhY2hlOkFycmF5PG51bWJlcj4gPSBudWxsO1xuICAgICAgICBwcml2YXRlIF9ub3JtYWxGcm9tVmVydGV4Q2FjaGU6QXJyYXk8bnVtYmVyPiA9IG51bGw7XG4gICAgICAgIHByaXZhdGUgX2luZGljZUNhY2hlOkFycmF5PG51bWJlcj4gPSBudWxsO1xuICAgICAgICBwcml2YXRlIF9ub3JtYWxEaXJ0eTpib29sZWFuID0gdHJ1ZTtcbiAgICAgICAgcHJpdmF0ZSBfaW5kaWNlRGlydHk6Ym9vbGVhbiA9IHRydWU7XG5cbiAgICAgICAgQHJlcXVpcmUoZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIGFzc2VydChHZW9tZXRyeVV0aWxzLmhhc0RhdGEodGhpcy52ZXJ0aWNlcyksIExvZy5pbmZvLkZVTkNfTVVTVChcImNvbnRhaW4gdmVydGljZXNcIikpO1xuICAgICAgICB9KVxuICAgICAgICBAZW5zdXJlKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBmb3IobGV0IGZhY2Ugb2YgdGhpcy5fZmFjZXMpIHtcbiAgICAgICAgICAgICAgICBhc3NlcnQoZmFjZS5mYWNlTm9ybWFsIGluc3RhbmNlb2YgVmVjdG9yMywgTG9nLmluZm8uRlVOQ19TSE9VTERfTk9UKFwiZmFjZU5vcm1hbFwiLCBcImJlIG51bGxcIikpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgICBwdWJsaWMgY29tcHV0ZUZhY2VOb3JtYWxzKCkge1xuICAgICAgICAgICAgdmFyIHZlcnRpY2VzID0gdGhpcy5fdmVydGljZXM7XG5cbiAgICAgICAgICAgIGZvciAobGV0IGZhY2Ugb2YgdGhpcy5fZmFjZXMpIHtcbiAgICAgICAgICAgICAgICBmYWNlLmZhY2VOb3JtYWwgPSB0aGlzLmNvbXB1dGVGYWNlTm9ybWFsc0hlbHBlcih2ZXJ0aWNlcywgZmFjZS5hSW5kZXgsIGZhY2UuYkluZGV4LCBmYWNlLmNJbmRleCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgY29tcHV0ZVZlcnRleE5vcm1hbHMoKSB7XG4gICAgICAgICAgICB2YXIgbm9ybWFscyA9IG51bGw7XG5cbiAgICAgICAgICAgIGlmKCF0aGlzLmhhc0ZhY2VOb3JtYWxzKCkpe1xuICAgICAgICAgICAgICAgIHRoaXMuY29tcHV0ZUZhY2VOb3JtYWxzKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG5vcm1hbHMgPSB0aGlzLmNvbXB1dGVWZXJ0ZXhOb3JtYWxzSGVscGVyKHRoaXMuX3ZlcnRpY2VzKTtcblxuICAgICAgICAgICAgZm9yIChsZXQgZmFjZSBvZiB0aGlzLl9mYWNlcykge1xuICAgICAgICAgICAgICAgIGZhY2UudmVydGV4Tm9ybWFscyA9IHdkQ2IuQ29sbGVjdGlvbi5jcmVhdGU8VmVjdG9yMz4oW1xuICAgICAgICAgICAgICAgICAgICBub3JtYWxzW2ZhY2UuYUluZGV4XSxcbiAgICAgICAgICAgICAgICAgICAgbm9ybWFsc1tmYWNlLmJJbmRleF0sXG4gICAgICAgICAgICAgICAgICAgIG5vcm1hbHNbZmFjZS5jSW5kZXhdXG4gICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgaGFzRmFjZU5vcm1hbHMoKXtcbiAgICAgICAgICAgIC8vdG9kbyBvcHRpbWl6ZTpvbmx5IGp1ZGdlIHRoZSBmaXJzdCBmYWNlP1xuICAgICAgICAgICAgZm9yKGxldCBmYWNlIG9mIHRoaXMuX2ZhY2VzKXtcbiAgICAgICAgICAgICAgICBpZighZmFjZS5oYXNGYWNlTm9ybWFsKCkpe1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBoYXNWZXJ0ZXhOb3JtYWxzKCl7XG4gICAgICAgICAgICAvL3RvZG8gb3B0aW1pemU6b25seSBqdWRnZSB0aGUgZmlyc3QgZmFjZT9cbiAgICAgICAgICAgIGZvcihsZXQgZmFjZSBvZiB0aGlzLl9mYWNlcyl7XG4gICAgICAgICAgICAgICAgaWYoIWZhY2UuaGFzVmVydGV4Tm9ybWFsKCkpe1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIEB2aXJ0dWFsXG4gICAgICAgIHByb3RlY3RlZCBvbkNoYW5nZUZhY2UoKXtcbiAgICAgICAgICAgIHRoaXMuaXNUYW5nZW50RGlydHkgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5fbm9ybWFsRGlydHkgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5faW5kaWNlRGlydHkgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJvdGVjdGVkIGNvbXB1dGVGYWNlTm9ybWFsc0hlbHBlcih2ZXJ0aWNlczpBcnJheTxudW1iZXI+LCBhSW5kZXg6bnVtYmVyLCBiSW5kZXg6bnVtYmVyLCBjSW5kZXg6bnVtYmVyKSB7XG4gICAgICAgICAgICB2YXIgcDAgPSBHZW9tZXRyeVV0aWxzLmdldFRocmVlQ29tcG9uZW50KHZlcnRpY2VzLCBhSW5kZXgpLFxuICAgICAgICAgICAgICAgIHAxID0gR2VvbWV0cnlVdGlscy5nZXRUaHJlZUNvbXBvbmVudCh2ZXJ0aWNlcywgYkluZGV4KSxcbiAgICAgICAgICAgICAgICBwMiA9IEdlb21ldHJ5VXRpbHMuZ2V0VGhyZWVDb21wb25lbnQodmVydGljZXMsIGNJbmRleCksXG4gICAgICAgICAgICAgICAgdjAgPSBWZWN0b3IzLmNyZWF0ZSgpLnN1YjIocDIsIHAxKSxcbiAgICAgICAgICAgICAgICB2MSA9IFZlY3RvcjMuY3JlYXRlKCkuc3ViMihwMCwgcDEpO1xuXG4gICAgICAgICAgICByZXR1cm4gVmVjdG9yMy5jcmVhdGUoKS5jcm9zcyh2MCwgdjEpLm5vcm1hbGl6ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJvdGVjdGVkIGNvbXB1dGVWZXJ0ZXhOb3JtYWxzSGVscGVyKHZlcnRpY2VzOkFycmF5PG51bWJlcj4pe1xuICAgICAgICAgICAgdmFyIHZsID0gdmVydGljZXMubGVuZ3RoIC8gMyxcbiAgICAgICAgICAgICAgICBub3JtYWxzID0gbnVsbDtcblxuICAgICAgICAgICAgbm9ybWFscyA9IG5ldyBBcnJheSh2bCk7XG5cbiAgICAgICAgICAgIGZvciAobGV0IHYgPSAwOyB2IDwgdmw7IHYrKykge1xuICAgICAgICAgICAgICAgIG5vcm1hbHNbdl0gPSBWZWN0b3IzLmNyZWF0ZSgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmb3IgKGxldCBmYWNlIG9mIHRoaXMuX2ZhY2VzKSB7XG4gICAgICAgICAgICAgICAgbGV0IGZhY2VOb3JtYWwgPSBudWxsO1xuXG4gICAgICAgICAgICAgICAgZmFjZU5vcm1hbCA9IGZhY2UuZmFjZU5vcm1hbDtcblxuICAgICAgICAgICAgICAgIG5vcm1hbHNbZmFjZS5hSW5kZXhdLmFkZChmYWNlTm9ybWFsKTtcbiAgICAgICAgICAgICAgICBub3JtYWxzW2ZhY2UuYkluZGV4XS5hZGQoZmFjZU5vcm1hbCk7XG4gICAgICAgICAgICAgICAgbm9ybWFsc1tmYWNlLmNJbmRleF0uYWRkKGZhY2VOb3JtYWwpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmb3IgKGxldCB2ID0gMDsgdiA8IHZsOyB2KyspIHtcbiAgICAgICAgICAgICAgICBub3JtYWxzW3ZdLm5vcm1hbGl6ZSgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gbm9ybWFscztcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX2dldENvbG9ycyhjb2xvcnM6QXJyYXk8bnVtYmVyPiwgdmVydGljZXM6QXJyYXk8bnVtYmVyPikge1xuICAgICAgICAgICAgaWYgKGNvbG9ycyAmJiBjb2xvcnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjb2xvcnM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fZ2V0Q29sb3JzRnJvbU1hdGVyaWFsKHZlcnRpY2VzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vdG9kbyBvcHRpbWl6ZTphZGQgY2FjaGVcbiAgICAgICAgcHJpdmF0ZSBfZ2V0Q29sb3JzRnJvbU1hdGVyaWFsKHZlcnRpY2VzOkFycmF5PG51bWJlcj4pIHtcbiAgICAgICAgICAgIHZhciBhcnIgPSBbXSxcbiAgICAgICAgICAgICAgICBpID0gMCxcbiAgICAgICAgICAgICAgICBtYXRlcmlhbCA9IHRoaXMuZ2VvbWV0cnkubWF0ZXJpYWwsXG4gICAgICAgICAgICAgICAgY29sb3IgPSBtYXRlcmlhbC5jb2xvcixcbiAgICAgICAgICAgICAgICBsZW4gPSBudWxsO1xuXG4gICAgICAgICAgICB3ZENiLkxvZy5lcnJvcighdmVydGljZXMgfHwgdmVydGljZXMubGVuZ3RoID09PSAwLCB3ZENiLkxvZy5pbmZvLkZVTkNfTVVTVChcImhhcyB2ZXJ0aWNlIGRhdGFcIikpO1xuXG4gICAgICAgICAgICBsZW4gPSB2ZXJ0aWNlcy5sZW5ndGg7XG5cbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgICAgIGFyci5wdXNoKGNvbG9yLnIsIGNvbG9yLmcsIGNvbG9yLmIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGFycjtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX2ZpbGxFbXB0eURhdGEoZGF0YTpBcnJheTxudW1iZXI+KXtcbiAgICAgICAgICAgIGZvcihsZXQgaSA9IDAsbGVuID0gZGF0YS5sZW5ndGg7IGkgPCBsZW47IGkrKyl7XG4gICAgICAgICAgICAgICAgaWYoaXNOYU4oZGF0YVtpXSkpe1xuICAgICAgICAgICAgICAgICAgICBkYXRhW2ldID0gMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9jYWxjdWxhdGVUYW5nZW50cyh2ZXJ0aWNlczpBcnJheTxudW1iZXI+LCBub3JtYWxzOkFycmF5PG51bWJlcj4sIHRleENvb3JkczpBcnJheTxudW1iZXI+LCBpbmRpY2VzOkFycmF5PG51bWJlcj4pIHtcbiAgICAgICAgICAgIHZhciB0cmlhbmdsZUNvdW50ID0gaW5kaWNlcy5sZW5ndGggLyAzLFxuICAgICAgICAgICAgICAgIHZlcnRleENvdW50ID0gdmVydGljZXMubGVuZ3RoIC8gMyxcbiAgICAgICAgICAgICAgICBpMSwgaTIsIGkzLFxuICAgICAgICAgICAgICAgIHgxLCB4MiwgeTEsIHkyLCB6MSwgejIsIHMxLCBzMiwgdDEsIHQyLCByLFxuICAgICAgICAgICAgICAgIHNkaXIgPSBWZWN0b3IzLmNyZWF0ZSgpLFxuICAgICAgICAgICAgICAgIHRkaXIgPSBWZWN0b3IzLmNyZWF0ZSgpLFxuICAgICAgICAgICAgICAgIHYxID0gVmVjdG9yMy5jcmVhdGUoKSxcbiAgICAgICAgICAgICAgICB2MiA9IFZlY3RvcjMuY3JlYXRlKCksXG4gICAgICAgICAgICAgICAgdjMgPSBWZWN0b3IzLmNyZWF0ZSgpLFxuICAgICAgICAgICAgICAgIHcxID0gVmVjdG9yMi5jcmVhdGUoKSxcbiAgICAgICAgICAgICAgICB3MiA9IFZlY3RvcjIuY3JlYXRlKCksXG4gICAgICAgICAgICAgICAgdzMgPSBWZWN0b3IyLmNyZWF0ZSgpLFxuICAgICAgICAgICAgICAgIGksIC8vIExvb3AgY291bnRlXG4gICAgICAgICAgICAgICAgdGFuMSA9IG5ldyBGbG9hdDMyQXJyYXkodmVydGV4Q291bnQgKiAzKSxcbiAgICAgICAgICAgICAgICB0YW4yID0gbmV3IEZsb2F0MzJBcnJheSh2ZXJ0ZXhDb3VudCAqIDMpLFxuICAgICAgICAgICAgICAgIG4gPSBWZWN0b3IzLmNyZWF0ZSgpLFxuICAgICAgICAgICAgICAgIHRlbXAgPSBWZWN0b3IzLmNyZWF0ZSgpLFxuICAgICAgICAgICAgICAgIHRhbmdlbnRzID0gW107XG5cbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCB0cmlhbmdsZUNvdW50OyBpKyspIHtcbiAgICAgICAgICAgICAgICBpMSA9IGluZGljZXNbaSAqIDNdO1xuICAgICAgICAgICAgICAgIGkyID0gaW5kaWNlc1tpICogMyArIDFdO1xuICAgICAgICAgICAgICAgIGkzID0gaW5kaWNlc1tpICogMyArIDJdO1xuXG4gICAgICAgICAgICAgICAgdjEuc2V0KHZlcnRpY2VzW2kxICogM10sIHZlcnRpY2VzW2kxICogMyArIDFdLCB2ZXJ0aWNlc1tpMSAqIDMgKyAyXSk7XG4gICAgICAgICAgICAgICAgdjIuc2V0KHZlcnRpY2VzW2kyICogM10sIHZlcnRpY2VzW2kyICogMyArIDFdLCB2ZXJ0aWNlc1tpMiAqIDMgKyAyXSk7XG4gICAgICAgICAgICAgICAgdjMuc2V0KHZlcnRpY2VzW2kzICogM10sIHZlcnRpY2VzW2kzICogMyArIDFdLCB2ZXJ0aWNlc1tpMyAqIDMgKyAyXSk7XG5cbiAgICAgICAgICAgICAgICB3MS5zZXQodGV4Q29vcmRzW2kxICogMl0sIHRleENvb3Jkc1tpMSAqIDIgKyAxXSk7XG4gICAgICAgICAgICAgICAgdzIuc2V0KHRleENvb3Jkc1tpMiAqIDJdLCB0ZXhDb29yZHNbaTIgKiAyICsgMV0pO1xuICAgICAgICAgICAgICAgIHczLnNldCh0ZXhDb29yZHNbaTMgKiAyXSwgdGV4Q29vcmRzW2kzICogMiArIDFdKTtcblxuICAgICAgICAgICAgICAgIHgxID0gdjIueCAtIHYxLng7XG4gICAgICAgICAgICAgICAgeDIgPSB2My54IC0gdjEueDtcbiAgICAgICAgICAgICAgICB5MSA9IHYyLnkgLSB2MS55O1xuICAgICAgICAgICAgICAgIHkyID0gdjMueSAtIHYxLnk7XG4gICAgICAgICAgICAgICAgejEgPSB2Mi56IC0gdjEuejtcbiAgICAgICAgICAgICAgICB6MiA9IHYzLnogLSB2MS56O1xuXG4gICAgICAgICAgICAgICAgczEgPSB3Mi54IC0gdzEueDtcbiAgICAgICAgICAgICAgICBzMiA9IHczLnggLSB3MS54O1xuICAgICAgICAgICAgICAgIHQxID0gdzIueSAtIHcxLnk7XG4gICAgICAgICAgICAgICAgdDIgPSB3My55IC0gdzEueTtcblxuICAgICAgICAgICAgICAgIHIgPSAxLjAgLyAoczEgKiB0MiAtIHMyICogdDEpO1xuICAgICAgICAgICAgICAgIHNkaXIuc2V0KCh0MiAqIHgxIC0gdDEgKiB4MikgKiByLFxuICAgICAgICAgICAgICAgICAgICAodDIgKiB5MSAtIHQxICogeTIpICogcixcbiAgICAgICAgICAgICAgICAgICAgKHQyICogejEgLSB0MSAqIHoyKSAqIHIpO1xuICAgICAgICAgICAgICAgIHRkaXIuc2V0KChzMSAqIHgyIC0gczIgKiB4MSkgKiByLFxuICAgICAgICAgICAgICAgICAgICAoczEgKiB5MiAtIHMyICogeTEpICogcixcbiAgICAgICAgICAgICAgICAgICAgKHMxICogejIgLSBzMiAqIHoxKSAqIHIpO1xuXG4gICAgICAgICAgICAgICAgdGFuMVtpMSAqIDMgKyAwXSArPSBzZGlyLng7XG4gICAgICAgICAgICAgICAgdGFuMVtpMSAqIDMgKyAxXSArPSBzZGlyLnk7XG4gICAgICAgICAgICAgICAgdGFuMVtpMSAqIDMgKyAyXSArPSBzZGlyLno7XG4gICAgICAgICAgICAgICAgdGFuMVtpMiAqIDMgKyAwXSArPSBzZGlyLng7XG4gICAgICAgICAgICAgICAgdGFuMVtpMiAqIDMgKyAxXSArPSBzZGlyLnk7XG4gICAgICAgICAgICAgICAgdGFuMVtpMiAqIDMgKyAyXSArPSBzZGlyLno7XG4gICAgICAgICAgICAgICAgdGFuMVtpMyAqIDMgKyAwXSArPSBzZGlyLng7XG4gICAgICAgICAgICAgICAgdGFuMVtpMyAqIDMgKyAxXSArPSBzZGlyLnk7XG4gICAgICAgICAgICAgICAgdGFuMVtpMyAqIDMgKyAyXSArPSBzZGlyLno7XG5cbiAgICAgICAgICAgICAgICB0YW4yW2kxICogMyArIDBdICs9IHRkaXIueDtcbiAgICAgICAgICAgICAgICB0YW4yW2kxICogMyArIDFdICs9IHRkaXIueTtcbiAgICAgICAgICAgICAgICB0YW4yW2kxICogMyArIDJdICs9IHRkaXIuejtcbiAgICAgICAgICAgICAgICB0YW4yW2kyICogMyArIDBdICs9IHRkaXIueDtcbiAgICAgICAgICAgICAgICB0YW4yW2kyICogMyArIDFdICs9IHRkaXIueTtcbiAgICAgICAgICAgICAgICB0YW4yW2kyICogMyArIDJdICs9IHRkaXIuejtcbiAgICAgICAgICAgICAgICB0YW4yW2kzICogMyArIDBdICs9IHRkaXIueDtcbiAgICAgICAgICAgICAgICB0YW4yW2kzICogMyArIDFdICs9IHRkaXIueTtcbiAgICAgICAgICAgICAgICB0YW4yW2kzICogMyArIDJdICs9IHRkaXIuejtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdDEgPSBWZWN0b3IzLmNyZWF0ZSgpO1xuICAgICAgICAgICAgdDIgPSBWZWN0b3IzLmNyZWF0ZSgpO1xuXG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdmVydGV4Q291bnQ7IGkrKykge1xuICAgICAgICAgICAgICAgIGxldCBuZG90dCA9IG51bGw7XG5cbiAgICAgICAgICAgICAgICBuLnNldChub3JtYWxzW2kgKiAzXSwgbm9ybWFsc1tpICogMyArIDFdLCBub3JtYWxzW2kgKiAzICsgMl0pO1xuICAgICAgICAgICAgICAgIHQxLnNldCh0YW4xW2kgKiAzXSwgdGFuMVtpICogMyArIDFdLCB0YW4xW2kgKiAzICsgMl0pO1xuICAgICAgICAgICAgICAgIHQyLnNldCh0YW4yW2kgKiAzXSwgdGFuMltpICogMyArIDFdLCB0YW4yW2kgKiAzICsgMl0pO1xuXG4gICAgICAgICAgICAgICAgLy8gR3JhbS1TY2htaWR0IG9ydGhvZ29uYWxpemVcbiAgICAgICAgICAgICAgICBuZG90dCA9IG4uZG90KHQxKTtcbiAgICAgICAgICAgICAgICB0ZW1wID0gbi5jb3B5KCkuc2NhbGUobmRvdHQpO1xuICAgICAgICAgICAgICAgIHRlbXAuc3ViMih0MSwgdGVtcCkubm9ybWFsaXplKCk7XG5cbiAgICAgICAgICAgICAgICB0YW5nZW50c1tpICogNF0gPSB0ZW1wLng7XG4gICAgICAgICAgICAgICAgdGFuZ2VudHNbaSAqIDQgKyAxXSA9IHRlbXAueTtcbiAgICAgICAgICAgICAgICB0YW5nZW50c1tpICogNCArIDJdID0gdGVtcC56O1xuXG4gICAgICAgICAgICAgICAgLy8gQ2FsY3VsYXRlIGhhbmRlZG5lc3NcbiAgICAgICAgICAgICAgICB0ZW1wLmNyb3NzKG4sIHQxKTtcbiAgICAgICAgICAgICAgICB0YW5nZW50c1tpICogNCArIDNdID0gKHRlbXAuZG90KHQyKSA8IDAuMCkgPyAtMS4wIDogMS4wO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdGFuZ2VudHM7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbiIsIm1vZHVsZSB3ZCB7XG4gICAgZXhwb3J0IGNsYXNzIENvbW1vbkdlb21ldHJ5RGF0YSBleHRlbmRzIEdlb21ldHJ5RGF0YXtcbiAgICAgICAgcHVibGljIHN0YXRpYyBjcmVhdGUoZ2VvbWV0cnk6R2VvbWV0cnkpIHtcbiAgICAgICAgICAgIHZhciBvYmogPSBuZXcgdGhpcyhnZW9tZXRyeSk7XG5cbiAgICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbiIsIm1vZHVsZSB3ZCB7XG4gICAgZXhwb3J0IGNsYXNzIE1vcnBoR2VvbWV0cnlEYXRhIGV4dGVuZHMgR2VvbWV0cnlEYXRhe1xuICAgICAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZShnZW9tZXRyeTpHZW9tZXRyeSkge1xuICAgICAgICAgICAgdmFyIG9iaiA9IG5ldyB0aGlzKGdlb21ldHJ5KTtcblxuICAgICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgfVxuXG4gICAgICAgIEBjYWNoZUdldHRlcihmdW5jdGlvbigpe1xuICAgICAgICAgICAgcmV0dXJuICF0aGlzLl9tb3JwaE5vcm1hbERpcnR5ICYmIHRoaXMuX21vcnBoTm9ybWFsQ2FjaGU7XG4gICAgICAgIH0sIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbW9ycGhOb3JtYWxDYWNoZTtcbiAgICAgICAgfSwgZnVuY3Rpb24ocmVzdWx0KXtcbiAgICAgICAgICAgIHRoaXMuX21vcnBoTm9ybWFsQ2FjaGUgPSByZXN1bHQ7XG4gICAgICAgIH0pXG4gICAgICAgIGdldCBtb3JwaE5vcm1hbHMoKTphbnkge1xuICAgICAgICAgICAgdmFyIGdlb21ldHJ5Ok1vZGVsR2VvbWV0cnkgPSA8YW55PnRoaXMuZ2VvbWV0cnk7XG5cbiAgICAgICAgICAgIHRoaXMuX21vcnBoTm9ybWFsRGlydHkgPSBmYWxzZTtcblxuICAgICAgICAgICAgaWYgKGdlb21ldHJ5LmlzU21vb3RoU2hhZGluZygpKSB7XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmhhc01vcnBoVmVydGV4Tm9ybWFscygpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29tcHV0ZU1vcnBoTm9ybWFscygpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiBnZW9tZXRyeS5tb3JwaFZlcnRleE5vcm1hbHM7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghdGhpcy5oYXNNb3JwaEZhY2VOb3JtYWxzKCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbXB1dGVNb3JwaE5vcm1hbHMoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGdlb21ldHJ5Lm1vcnBoRmFjZU5vcm1hbHM7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9tb3JwaFRhcmdldHM6d2RDYi5IYXNoPERZRmlsZVBhcnNlTW9ycGhUYXJnZXRzRGF0YT4gPSBudWxsO1xuICAgICAgICBnZXQgbW9ycGhUYXJnZXRzKCl7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbW9ycGhUYXJnZXRzO1xuICAgICAgICB9XG4gICAgICAgIHNldCBtb3JwaFRhcmdldHMobW9ycGhUYXJnZXRzOndkQ2IuSGFzaDxEWUZpbGVQYXJzZU1vcnBoVGFyZ2V0c0RhdGE+KXtcbiAgICAgICAgICAgIHRoaXMuX21vcnBoVGFyZ2V0cyA9IG1vcnBoVGFyZ2V0cztcbiAgICAgICAgICAgIHRoaXMuX21vcnBoTm9ybWFsRGlydHkgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJvdGVjdGVkIGdlb21ldHJ5Ok1vZGVsR2VvbWV0cnk7XG5cbiAgICAgICAgcHJpdmF0ZSBfbW9ycGhOb3JtYWxDYWNoZTpBcnJheTxudW1iZXI+ID0gbnVsbDtcbiAgICAgICAgcHJpdmF0ZSBfbW9ycGhOb3JtYWxEaXJ0eTpib29sZWFuID0gdHJ1ZTtcblxuICAgICAgICBwdWJsaWMgY29tcHV0ZU1vcnBoTm9ybWFscygpIHtcbiAgICAgICAgICAgICAgICB2YXIgZ2VvbWV0cnkgPSB0aGlzLmdlb21ldHJ5LFxuICAgICAgICAgICAgICAgIHNlbGYgPSB0aGlzO1xuXG4gICAgICAgICAgICB0aGlzLl9tb3JwaFRhcmdldHMuZm9yRWFjaCgoZnJhbWVzOkRZRmlsZVBhcnNlTW9ycGhUYXJnZXRzRGF0YSwgYW5pbU5hbWUpID0+IHtcbiAgICAgICAgICAgICAgICB2YXIgZmFjZU5vcm1hbExpc3QgPSB3ZENiLkNvbGxlY3Rpb24uY3JlYXRlPEFycmF5PG51bWJlcj4+KCksXG4gICAgICAgICAgICAgICAgICAgIHZlcnRleE5vcm1hbExpc3QgPSB3ZENiLkNvbGxlY3Rpb24uY3JlYXRlPEFycmF5PG51bWJlcj4+KCk7XG5cbiAgICAgICAgICAgICAgICBmcmFtZXMuZm9yRWFjaCgodmVydGljZXM6QXJyYXk8bnVtYmVyPikgPT4ge1xuICAgICAgICAgICAgICAgICAgICBsZXQgdGVtcEdlb21ldHJ5RGF0YSA9IE1vcnBoR2VvbWV0cnlEYXRhLmNyZWF0ZShnZW9tZXRyeSksXG4gICAgICAgICAgICAgICAgICAgICAgICBmYWNlTm9ybWFsc09mRWFjaEZyYW1lID0gbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZlcnRleE5vcm1hbHNPZkVhY2hGcmFtZSA9IG51bGw7XG5cbiAgICAgICAgICAgICAgICAgICAgdGVtcEdlb21ldHJ5RGF0YS52ZXJ0aWNlcyA9IHZlcnRpY2VzO1xuICAgICAgICAgICAgICAgICAgICB0ZW1wR2VvbWV0cnlEYXRhLmZhY2VzID0gc2VsZi5fY29weUZhY2VzKGdlb21ldHJ5LmZhY2VzKTtcblxuICAgICAgICAgICAgICAgICAgICB0ZW1wR2VvbWV0cnlEYXRhLmNvbXB1dGVGYWNlTm9ybWFscygpO1xuICAgICAgICAgICAgICAgICAgICB0ZW1wR2VvbWV0cnlEYXRhLmNvbXB1dGVWZXJ0ZXhOb3JtYWxzKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgW2ZhY2VOb3JtYWxzT2ZFYWNoRnJhbWUsIHZlcnRleE5vcm1hbHNPZkVhY2hGcmFtZV0gPSBzZWxmLl9nZXRNb3JwaE5vcm1hbHModGVtcEdlb21ldHJ5RGF0YSk7XG5cbiAgICAgICAgICAgICAgICAgICAgZmFjZU5vcm1hbExpc3QuYWRkQ2hpbGQoZmFjZU5vcm1hbHNPZkVhY2hGcmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIHZlcnRleE5vcm1hbExpc3QuYWRkQ2hpbGQodmVydGV4Tm9ybWFsc09mRWFjaEZyYW1lKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGdlb21ldHJ5Lm1vcnBoRmFjZU5vcm1hbHMuYWRkQ2hpbGQoYW5pbU5hbWUsIGZhY2VOb3JtYWxMaXN0KTtcbiAgICAgICAgICAgICAgICBnZW9tZXRyeS5tb3JwaFZlcnRleE5vcm1hbHMuYWRkQ2hpbGQoYW5pbU5hbWUsIHZlcnRleE5vcm1hbExpc3QpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgaGFzTW9ycGhGYWNlTm9ybWFscygpe1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2VvbWV0cnkubW9ycGhGYWNlTm9ybWFscy5nZXRDb3VudCgpID4gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBoYXNNb3JwaFZlcnRleE5vcm1hbHMoKXtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdlb21ldHJ5Lm1vcnBoVmVydGV4Tm9ybWFscy5nZXRDb3VudCgpID4gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIHByb3RlY3RlZCBvbkNoYW5nZUZhY2UoKXtcbiAgICAgICAgICAgIHRoaXMuX21vcnBoTm9ybWFsRGlydHkgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfY29weUZhY2VzKGZhY2VzOkFycmF5PEZhY2UzPil7XG4gICAgICAgICAgICB2YXIgY29weUZhY2VzID0gW107XG5cbiAgICAgICAgICAgIGZvciAobGV0IGZhY2Ugb2YgZmFjZXMpe1xuICAgICAgICAgICAgICAgIGNvcHlGYWNlcy5wdXNoKGZhY2UuY29weSgpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGNvcHlGYWNlcztcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX2dldE1vcnBoTm9ybWFscyhnZW9tZXRyeURhdGE6TW9ycGhHZW9tZXRyeURhdGEpe1xuICAgICAgICAgICAgcmV0dXJuIFtnZW9tZXRyeURhdGEubm9ybWFsc0Zyb21GYWNlTm9ybWFsLCBnZW9tZXRyeURhdGEubm9ybWFsc0Zyb21WZXJ0ZXhOb3JtYWxzXTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuIiwibW9kdWxlIHdkIHtcbiAgICBleHBvcnQgYWJzdHJhY3QgY2xhc3MgQnVmZmVyQ29udGFpbmVyIHtcbiAgICAgICAgY29uc3RydWN0b3IoZW50aXR5T2JqZWN0OkdhbWVPYmplY3QpIHtcbiAgICAgICAgICAgIHRoaXMuZW50aXR5T2JqZWN0ID0gZW50aXR5T2JqZWN0O1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGdlb21ldHJ5RGF0YTpHZW9tZXRyeURhdGEgPSBudWxsO1xuXG4gICAgICAgIHByb3RlY3RlZCBlbnRpdHlPYmplY3Q6R2FtZU9iamVjdCA9IG51bGw7XG4gICAgICAgIHByb3RlY3RlZCBjb250YWluZXI6d2RDYi5IYXNoPEJ1ZmZlcj4gPSB3ZENiLkhhc2guY3JlYXRlPEJ1ZmZlcj4oKTtcblxuICAgICAgICBwcml2YXRlIF9jb2xvckJ1ZmZlcjpBcnJheUJ1ZmZlciA9IG51bGw7XG4gICAgICAgIHByaXZhdGUgX3RleENvb3JkQnVmZmVyOkFycmF5QnVmZmVyID0gbnVsbDtcbiAgICAgICAgcHJpdmF0ZSBfdGFuZ2VudEJ1ZmZlcjpBcnJheUJ1ZmZlciA9IG51bGw7XG4gICAgICAgIHByaXZhdGUgX2luZGljZUJ1ZmZlcjpFbGVtZW50QnVmZmVyID0gbnVsbDtcblxuICAgICAgICBwdWJsaWMgaW5pdCgpe1xuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgICAgICAgICBFdmVudE1hbmFnZXIub24odGhpcy5lbnRpdHlPYmplY3QsIDxhbnk+RW5naW5lRXZlbnQuTUFURVJJQUxfQ0hBTkdFLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgc2VsZi5yZW1vdmVDYWNoZShCdWZmZXJEYXRhVHlwZS5DT0xPUik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyByZW1vdmVDYWNoZSh0eXBlOkJ1ZmZlckRhdGFUeXBlKXtcbiAgICAgICAgICAgIHRoaXMuY29udGFpbmVyLnJlbW92ZUNoaWxkKHR5cGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGdldENoaWxkKHR5cGU6QnVmZmVyRGF0YVR5cGUpIHtcbiAgICAgICAgICAgIHZhciByZXN1bHQ6YW55ID0gbnVsbDtcblxuICAgICAgICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBCdWZmZXJEYXRhVHlwZS5WRVJUSUNFOlxuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSB0aGlzLmdldFZlcnRpY2UodHlwZSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgQnVmZmVyRGF0YVR5cGUuTk9STUFMOlxuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSB0aGlzLmdldE5vcm1hbCh0eXBlKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBCdWZmZXJEYXRhVHlwZS5UQU5HRU5UOlxuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSB0aGlzLl9nZXRUYW5nZW50KHR5cGUpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIEJ1ZmZlckRhdGFUeXBlLkNPTE9SOlxuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSB0aGlzLl9nZXRDb2xvcih0eXBlKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBCdWZmZXJEYXRhVHlwZS5JTkRJQ0U6XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMuX2dldEluZGljZSh0eXBlKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBCdWZmZXJEYXRhVHlwZS5URVhDT09SRDpcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy5fZ2V0VGV4Q29vcmQodHlwZSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHdkQ2IuTG9nLmVycm9yKHRydWUsIHdkQ2IuTG9nLmluZm8uRlVOQ19VTktOT1coYEJ1ZmZlckRhdGFUeXBlOiAke3R5cGV9YCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcblxuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGhhc0NoaWxkKHR5cGU6QnVmZmVyRGF0YVR5cGUpIHtcbiAgICAgICAgICAgIHZhciBkYXRhID0gdGhpcy5nZW9tZXRyeURhdGFbQnVmZmVyRGF0YVRhYmxlLmdldEdlb21ldHJ5RGF0YU5hbWUodHlwZSldO1xuXG4gICAgICAgICAgICByZXR1cm4gZGF0YSAmJiBkYXRhLmxlbmd0aCA+IDA7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgZGlzcG9zZSgpe1xuICAgICAgICAgICAgdGhpcy5jb250YWluZXIuZm9yRWFjaCgoYnVmZmVyOkJ1ZmZlcikgPT4ge1xuICAgICAgICAgICAgICAgIGJ1ZmZlci5kaXNwb3NlKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByb3RlY3RlZCBhYnN0cmFjdCBnZXRWZXJ0aWNlKHR5cGUpO1xuICAgICAgICBwcm90ZWN0ZWQgYWJzdHJhY3QgZ2V0Tm9ybWFsKHR5cGUpO1xuXG4gICAgICAgIHByb3RlY3RlZCBjcmVhdGVCdWZmZXJPbmx5T25jZShidWZmZXJBdHRyaU5hbWU6c3RyaW5nLCBidWZmZXJDbGFzczphbnkpe1xuICAgICAgICAgICAgaWYodGhpc1tidWZmZXJBdHRyaU5hbWVdKXtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXNbYnVmZmVyQXR0cmlOYW1lXSA9IGJ1ZmZlckNsYXNzLmNyZWF0ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgQGNhY2hlKGZ1bmN0aW9uKHR5cGU6QnVmZmVyRGF0YVR5cGUpe1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29udGFpbmVyLmhhc0NoaWxkKDxhbnk+dHlwZSkgJiYgIXRoaXMuX25lZWRSZUNhbGN1dGVUYW5nZW50KHR5cGUpO1xuICAgICAgICB9LCBmdW5jdGlvbih0eXBlKXtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbnRhaW5lci5nZXRDaGlsZCg8YW55PnR5cGUpXG4gICAgICAgIH0sIGZ1bmN0aW9uKHJlc3VsdCwgdHlwZSl7XG4gICAgICAgICAgICB0aGlzLmNvbnRhaW5lci5hZGRDaGlsZCg8YW55PnR5cGUsIHJlc3VsdCk7XG4gICAgICAgIH0pXG4gICAgICAgIHByaXZhdGUgX2dldFRhbmdlbnQodHlwZSl7XG4gICAgICAgICAgICB2YXIgZ2VvbWV0cnlEYXRhID0gbnVsbDtcblxuICAgICAgICAgICAgdGhpcy5jcmVhdGVCdWZmZXJPbmx5T25jZShcIl90YW5nZW50QnVmZmVyXCIsIEFycmF5QnVmZmVyKTtcblxuICAgICAgICAgICAgZ2VvbWV0cnlEYXRhID0gdGhpcy5nZW9tZXRyeURhdGFbQnVmZmVyRGF0YVRhYmxlLmdldEdlb21ldHJ5RGF0YU5hbWUodHlwZSldO1xuICAgICAgICAgICAgdGhpcy5fdGFuZ2VudEJ1ZmZlci5yZXNldERhdGEobmV3IEZsb2F0MzJBcnJheShnZW9tZXRyeURhdGEpLCAzLCBCdWZmZXJUeXBlLkZMT0FUKTtcblxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3RhbmdlbnRCdWZmZXI7XG4gICAgICAgIH1cblxuICAgICAgICBAY2FjaGUoZnVuY3Rpb24odHlwZTpCdWZmZXJEYXRhVHlwZSl7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb250YWluZXIuaGFzQ2hpbGQoPGFueT50eXBlKTtcbiAgICAgICAgfSwgZnVuY3Rpb24odHlwZSl7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb250YWluZXIuZ2V0Q2hpbGQoPGFueT50eXBlKVxuICAgICAgICB9LCBmdW5jdGlvbihyZXN1bHQsIHR5cGUpe1xuICAgICAgICAgICAgdGhpcy5jb250YWluZXIuYWRkQ2hpbGQoPGFueT50eXBlLCByZXN1bHQpO1xuICAgICAgICB9KVxuICAgICAgICBwcml2YXRlIF9nZXRDb2xvcih0eXBlKSB7XG4gICAgICAgICAgICB2YXIgZ2VvbWV0cnlEYXRhID0gbnVsbDtcblxuICAgICAgICAgICAgdGhpcy5jcmVhdGVCdWZmZXJPbmx5T25jZShcIl9jb2xvckJ1ZmZlclwiLCBBcnJheUJ1ZmZlcik7XG5cbiAgICAgICAgICAgIGdlb21ldHJ5RGF0YSA9IHRoaXMuZ2VvbWV0cnlEYXRhW0J1ZmZlckRhdGFUYWJsZS5nZXRHZW9tZXRyeURhdGFOYW1lKHR5cGUpXTtcbiAgICAgICAgICAgIHRoaXMuX2NvbG9yQnVmZmVyLnJlc2V0RGF0YShuZXcgRmxvYXQzMkFycmF5KGdlb21ldHJ5RGF0YSksIDMsIEJ1ZmZlclR5cGUuRkxPQVQpO1xuXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fY29sb3JCdWZmZXI7XG4gICAgICAgIH1cblxuICAgICAgICBAY2FjaGUoZnVuY3Rpb24odHlwZTpCdWZmZXJEYXRhVHlwZSl7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb250YWluZXIuaGFzQ2hpbGQoPGFueT50eXBlKTtcbiAgICAgICAgfSwgZnVuY3Rpb24odHlwZSl7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb250YWluZXIuZ2V0Q2hpbGQoPGFueT50eXBlKVxuICAgICAgICB9LCBmdW5jdGlvbihyZXN1bHQsIHR5cGUpe1xuICAgICAgICAgICAgdGhpcy5jb250YWluZXIuYWRkQ2hpbGQoPGFueT50eXBlLCByZXN1bHQpO1xuICAgICAgICB9KVxuICAgICAgICBwcml2YXRlIF9nZXRJbmRpY2UodHlwZSl7XG4gICAgICAgICAgICB2YXIgZ2VvbWV0cnlEYXRhID0gbnVsbDtcblxuICAgICAgICAgICAgdGhpcy5jcmVhdGVCdWZmZXJPbmx5T25jZShcIl9pbmRpY2VCdWZmZXJcIiwgRWxlbWVudEJ1ZmZlcik7XG5cbiAgICAgICAgICAgIGdlb21ldHJ5RGF0YSA9IHRoaXMuZ2VvbWV0cnlEYXRhW0J1ZmZlckRhdGFUYWJsZS5nZXRHZW9tZXRyeURhdGFOYW1lKHR5cGUpXTtcblxuICAgICAgICAgICAgdGhpcy5faW5kaWNlQnVmZmVyLnJlc2V0RGF0YShuZXcgVWludDE2QXJyYXkoZ2VvbWV0cnlEYXRhKSwgQnVmZmVyVHlwZS5VTlNJR05FRF9TSE9SVCk7XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9pbmRpY2VCdWZmZXI7XG4gICAgICAgIH1cblxuICAgICAgICBAY2FjaGUoZnVuY3Rpb24odHlwZTpCdWZmZXJEYXRhVHlwZSl7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb250YWluZXIuaGFzQ2hpbGQoPGFueT50eXBlKTtcbiAgICAgICAgfSwgZnVuY3Rpb24odHlwZSl7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb250YWluZXIuZ2V0Q2hpbGQoPGFueT50eXBlKVxuICAgICAgICB9LCBmdW5jdGlvbihyZXN1bHQsIHR5cGUpe1xuICAgICAgICAgICAgdGhpcy5jb250YWluZXIuYWRkQ2hpbGQoPGFueT50eXBlLCByZXN1bHQpO1xuICAgICAgICB9KVxuICAgICAgICBwcml2YXRlIF9nZXRUZXhDb29yZCh0eXBlKXtcbiAgICAgICAgICAgIHZhciBnZW9tZXRyeURhdGEgPSBudWxsO1xuXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUJ1ZmZlck9ubHlPbmNlKFwiX3RleENvb3JkQnVmZmVyXCIsIEFycmF5QnVmZmVyKTtcblxuICAgICAgICAgICAgZ2VvbWV0cnlEYXRhID0gdGhpcy5nZW9tZXRyeURhdGFbQnVmZmVyRGF0YVRhYmxlLmdldEdlb21ldHJ5RGF0YU5hbWUodHlwZSldO1xuXG4gICAgICAgICAgICB0aGlzLl90ZXhDb29yZEJ1ZmZlci5yZXNldERhdGEobmV3IEZsb2F0MzJBcnJheShnZW9tZXRyeURhdGEpLCAyLCBCdWZmZXJUeXBlLkZMT0FUKTtcblxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3RleENvb3JkQnVmZmVyO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfbmVlZFJlQ2FsY3V0ZVRhbmdlbnQodHlwZTpCdWZmZXJEYXRhVHlwZSl7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZW9tZXRyeURhdGEuaXNUYW5nZW50RGlydHkgJiYgdHlwZSA9PT0gQnVmZmVyRGF0YVR5cGUuVEFOR0VOVDtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsIm1vZHVsZSB3ZCB7XG4gICAgZXhwb3J0IGNsYXNzIENvbW1vbkJ1ZmZlckNvbnRhaW5lciBleHRlbmRzIEJ1ZmZlckNvbnRhaW5lcntcbiAgICAgICAgcHVibGljIHN0YXRpYyBjcmVhdGUoZW50aXR5T2JqZWN0OkdhbWVPYmplY3QpIHtcbiAgICAgICAgXHR2YXIgb2JqID0gbmV3IHRoaXMoZW50aXR5T2JqZWN0KTtcblxuICAgICAgICBcdHJldHVybiBvYmo7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgZ2VvbWV0cnlEYXRhOkNvbW1vbkdlb21ldHJ5RGF0YTtcblxuICAgICAgICBwcml2YXRlIF92ZXJ0aWNlQnVmZmVyOkFycmF5QnVmZmVyID0gbnVsbDtcbiAgICAgICAgcHJpdmF0ZSBfbm9ybWFsQnVmZmVyOkFycmF5QnVmZmVyID0gbnVsbDtcblxuICAgICAgICBAY2FjaGUoZnVuY3Rpb24odHlwZTpCdWZmZXJEYXRhVHlwZSl7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb250YWluZXIuaGFzQ2hpbGQoPGFueT50eXBlKTtcbiAgICAgICAgfSwgZnVuY3Rpb24odHlwZSl7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb250YWluZXIuZ2V0Q2hpbGQoPGFueT50eXBlKVxuICAgICAgICB9LCBmdW5jdGlvbihyZXN1bHQsIHR5cGUpe1xuICAgICAgICAgICAgdGhpcy5jb250YWluZXIuYWRkQ2hpbGQoPGFueT50eXBlLCByZXN1bHQpO1xuICAgICAgICB9KVxuICAgICAgICBwcm90ZWN0ZWQgZ2V0VmVydGljZSh0eXBlOkJ1ZmZlckRhdGFUeXBlKSB7XG4gICAgICAgICAgICB2YXIgZ2VvbWV0cnlEYXRhPSB0aGlzLmdlb21ldHJ5RGF0YVtCdWZmZXJEYXRhVGFibGUuZ2V0R2VvbWV0cnlEYXRhTmFtZSh0eXBlKV07XG5cbiAgICAgICAgICAgIHRoaXMuY3JlYXRlQnVmZmVyT25seU9uY2UoXCJfdmVydGljZUJ1ZmZlclwiLCBBcnJheUJ1ZmZlcik7XG5cbiAgICAgICAgICAgIHRoaXMuX3ZlcnRpY2VCdWZmZXIucmVzZXREYXRhKG5ldyBGbG9hdDMyQXJyYXkoZ2VvbWV0cnlEYXRhKSwgMywgQnVmZmVyVHlwZS5GTE9BVCk7XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzLl92ZXJ0aWNlQnVmZmVyO1xuICAgICAgICB9XG5cbiAgICAgICAgQGNhY2hlKGZ1bmN0aW9uKHR5cGU6QnVmZmVyRGF0YVR5cGUpe1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29udGFpbmVyLmhhc0NoaWxkKDxhbnk+dHlwZSk7XG4gICAgICAgIH0sIGZ1bmN0aW9uKHR5cGUpe1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29udGFpbmVyLmdldENoaWxkKDxhbnk+dHlwZSlcbiAgICAgICAgfSwgZnVuY3Rpb24ocmVzdWx0LCB0eXBlKXtcbiAgICAgICAgICAgIHRoaXMuY29udGFpbmVyLmFkZENoaWxkKDxhbnk+dHlwZSwgcmVzdWx0KTtcbiAgICAgICAgfSlcbiAgICAgICAgcHJvdGVjdGVkIGdldE5vcm1hbCh0eXBlOkJ1ZmZlckRhdGFUeXBlKSB7XG4gICAgICAgICAgICB2YXIgZ2VvbWV0cnlEYXRhPSB0aGlzLmdlb21ldHJ5RGF0YVtCdWZmZXJEYXRhVGFibGUuZ2V0R2VvbWV0cnlEYXRhTmFtZSh0eXBlKV07XG5cbiAgICAgICAgICAgIHRoaXMuY3JlYXRlQnVmZmVyT25seU9uY2UoXCJfbm9ybWFsQnVmZmVyXCIsIEFycmF5QnVmZmVyKTtcblxuICAgICAgICAgICAgdGhpcy5fbm9ybWFsQnVmZmVyLnJlc2V0RGF0YShuZXcgRmxvYXQzMkFycmF5KGdlb21ldHJ5RGF0YSksIDMsIEJ1ZmZlclR5cGUuRkxPQVQpO1xuXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbm9ybWFsQnVmZmVyO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwibW9kdWxlIHdkIHtcbiAgICBleHBvcnQgY2xhc3MgTW9ycGhCdWZmZXJDb250YWluZXIgZXh0ZW5kcyBCdWZmZXJDb250YWluZXIge1xuICAgICAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZShlbnRpdHlPYmplY3Q6R2FtZU9iamVjdCwgYW5pbWF0aW9uOk1vcnBoQW5pbWF0aW9uKSB7XG4gICAgICAgICAgICB2YXIgb2JqID0gbmV3IHRoaXMoZW50aXR5T2JqZWN0LCBhbmltYXRpb24pO1xuXG4gICAgICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3RydWN0b3IoZW50aXR5T2JqZWN0OkdhbWVPYmplY3QsIGFuaW1hdGlvbjpNb3JwaEFuaW1hdGlvbikge1xuICAgICAgICAgICAgc3VwZXIoZW50aXR5T2JqZWN0KTtcblxuICAgICAgICAgICAgdGhpcy5fYW5pbWF0aW9uID0gYW5pbWF0aW9uO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGdlb21ldHJ5RGF0YTpNb3JwaEdlb21ldHJ5RGF0YTtcblxuICAgICAgICBwcm90ZWN0ZWQgY29udGFpbmVyOndkQ2IuSGFzaDxCdWZmZXImQXJyYXk8QXJyYXlCdWZmZXI+PjtcblxuICAgICAgICBwcml2YXRlIF9hbmltYXRpb246TW9ycGhBbmltYXRpb24gPSBudWxsO1xuICAgICAgICBwcml2YXRlIF9pc0NhY2hlQ2hhbmdlRmxhZzphbnkgPSB7fTtcbiAgICAgICAgcHJpdmF0ZSBfaXNDYWNoZUNoYW5nZUluTGFzdExvb3AgPSB7fTtcbiAgICAgICAgcHJpdmF0ZSBfY3VycmVudFZlcnRpY2VCdWZmZXI6QXJyYXlCdWZmZXIgPSBudWxsO1xuICAgICAgICBwcml2YXRlIF9uZXh0VmVydGljZUJ1ZmZlcjpBcnJheUJ1ZmZlciA9IG51bGw7XG4gICAgICAgIHByaXZhdGUgX2N1cnJlbnROb3JtYWxCdWZmZXI6QXJyYXlCdWZmZXIgPSBudWxsO1xuICAgICAgICBwcml2YXRlIF9uZXh0Tm9ybWFsQnVmZmVyOkFycmF5QnVmZmVyID0gbnVsbDtcblxuICAgICAgICBAcmVxdWlyZShmdW5jdGlvbiAodHlwZTpCdWZmZXJEYXRhVHlwZSkge1xuICAgICAgICAgICAgYXNzZXJ0KHRoaXMuZ2VvbWV0cnlEYXRhLm1vcnBoVGFyZ2V0cyAmJiB0aGlzLmdlb21ldHJ5RGF0YS5tb3JwaFRhcmdldHMuZ2V0Q291bnQoKSA+IDAsIExvZy5pbmZvLkZVTkNfU0hPVUxEKFwic2V0IG1vcnBoVGFyZ2V0c1wiKSk7XG4gICAgICAgIH0pXG4gICAgICAgIHByb3RlY3RlZCBnZXRWZXJ0aWNlKHR5cGU6QnVmZmVyRGF0YVR5cGUpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9nZXRNb3JwaERhdGEodHlwZSwgdGhpcy5nZW9tZXRyeURhdGEubW9ycGhUYXJnZXRzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIEByZXF1aXJlKGZ1bmN0aW9uICh0eXBlOkJ1ZmZlckRhdGFUeXBlKSB7XG4gICAgICAgICAgICBhc3NlcnQodGhpcy5nZW9tZXRyeURhdGEubW9ycGhUYXJnZXRzICYmIHRoaXMuZ2VvbWV0cnlEYXRhLm1vcnBoVGFyZ2V0cy5nZXRDb3VudCgpID4gMCwgTG9nLmluZm8uRlVOQ19TSE9VTEQoXCJzZXQgbW9ycGhUYXJnZXRzXCIpKTtcbiAgICAgICAgfSlcbiAgICAgICAgcHJvdGVjdGVkIGdldE5vcm1hbCh0eXBlOkJ1ZmZlckRhdGFUeXBlKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZ2V0TW9ycGhEYXRhKHR5cGUsIHRoaXMuZ2VvbWV0cnlEYXRhLm1vcnBoTm9ybWFscyk7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9nZXRNb3JwaERhdGEodHlwZTpCdWZmZXJEYXRhVHlwZSwgbW9ycGhEYXRhVGFyZ2V0czp3ZENiLkhhc2g8d2RDYi5Db2xsZWN0aW9uPEFycmF5PG51bWJlcj4+Pik6QXJyYXk8QXJyYXlCdWZmZXI+IHtcbiAgICAgICAgICAgIHZhciBjYWNoZURhdGEgPSBudWxsLFxuICAgICAgICAgICAgICAgIGZyYW1lcyA9IG51bGwsXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gbnVsbDtcblxuICAgICAgICAgICAgaWYodGhpcy5faXNOb3RQbGF5QW5pbWF0aW9uKCkpe1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9nZXRTdGF0aWNEYXRhKHR5cGUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmcmFtZXMgPSBtb3JwaERhdGFUYXJnZXRzLmdldENoaWxkKHRoaXMuX2FuaW1hdGlvbi5jdXJyZW50QW5pbU5hbWUpO1xuXG4gICAgICAgICAgICB3ZENiLkxvZy5lcnJvcighZnJhbWVzLCB3ZENiLkxvZy5pbmZvLkZVTkNfU0hPVUxEKGBcIiR7dGhpcy5fYW5pbWF0aW9uLmN1cnJlbnRBbmltTmFtZX1cIiBhbmltYXRpb25gLCBcImNvbnRhaW4gZnJhbWUgZGF0YVwiKSk7XG5cbiAgICAgICAgICAgIGNhY2hlRGF0YSA9IHRoaXMuY29udGFpbmVyLmdldENoaWxkKDxhbnk+dHlwZSk7XG5cbiAgICAgICAgICAgIGlmICghY2FjaGVEYXRhKSB7XG4gICAgICAgICAgICAgICAgbGV0IGN1cnJlbnRCdWZmZXIgPSB0aGlzLl9nZXRDdXJyZW50QnVmZmVyKHR5cGUpLFxuICAgICAgICAgICAgICAgICAgICBuZXh0QnVmZmVyID0gdGhpcy5fZ2V0TmV4dEJ1ZmZlcih0eXBlKTtcblxuICAgICAgICAgICAgICAgIGN1cnJlbnRCdWZmZXIucmVzZXREYXRhKG5ldyBGbG9hdDMyQXJyYXkoZnJhbWVzLmdldENoaWxkKHRoaXMuX2FuaW1hdGlvbi5jdXJyZW50RnJhbWUpKSwgMywgQnVmZmVyVHlwZS5GTE9BVCk7XG4gICAgICAgICAgICAgICAgbmV4dEJ1ZmZlci5yZXNldERhdGEobmV3IEZsb2F0MzJBcnJheShmcmFtZXMuZ2V0Q2hpbGQodGhpcy5fYW5pbWF0aW9uLm5leHRGcmFtZSkpLCAzLCBCdWZmZXJUeXBlLkZMT0FUKTtcblxuXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gW2N1cnJlbnRCdWZmZXIsIG5leHRCdWZmZXJdO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5jb250YWluZXIuYWRkQ2hpbGQoPGFueT50eXBlLCByZXN1bHQpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2lzQ2FjaGVDaGFuZ2VJbkxhc3RMb29wW3R5cGVdID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fYW5pbWF0aW9uLmlzRnJhbWVDaGFuZ2UgJiYgKHRoaXMuX2lzQ2FjaGVDaGFuZ2VJbkxhc3RMb29wW3R5cGVdIHx8IHRoaXMuX2lzQ2FjaGVOb3RDaGFuZ2UodHlwZSkpKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBbY3VycmVudEJ1ZmZlciwgbmV4dEJ1ZmZlcl0gPSBjYWNoZURhdGEsXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdDdXJyZW50QnVmZmVyID0gbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld05leHRCdWZmZXIgPSBudWxsO1xuXG5cbiAgICAgICAgICAgICAgICAgICAgLy90b2RvIHVzZSBkb3VibGUtYnVmZmVyIGNhY2hlP1xuICAgICAgICAgICAgICAgICAgICBuZXdDdXJyZW50QnVmZmVyID0gbmV4dEJ1ZmZlcjtcbiAgICAgICAgICAgICAgICAgICAgbmV3TmV4dEJ1ZmZlciA9IGN1cnJlbnRCdWZmZXIucmVzZXREYXRhKG5ldyBGbG9hdDMyQXJyYXkoZnJhbWVzLmdldENoaWxkKHRoaXMuX2FuaW1hdGlvbi5uZXh0RnJhbWUpKSk7XG5cbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gW25ld0N1cnJlbnRCdWZmZXIsIG5ld05leHRCdWZmZXJdO1xuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGFpbmVyLmFkZENoaWxkKDxhbnk+dHlwZSwgcmVzdWx0KTtcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9pc0NhY2hlQ2hhbmdlRmxhZ1t0eXBlXSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2lzQ2FjaGVDaGFuZ2VJbkxhc3RMb29wW3R5cGVdID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2lzQ2FjaGVDaGFuZ2VGbGFnW3R5cGVdID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2lzQ2FjaGVDaGFuZ2VJbkxhc3RMb29wW3R5cGVdID0gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gY2FjaGVEYXRhO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuXG4gICAgICAgIEByZXF1aXJlKGZ1bmN0aW9uKHR5cGU6QnVmZmVyRGF0YVR5cGUpe1xuICAgICAgICAgICAgYXNzZXJ0KHR5cGUgPT09IEJ1ZmZlckRhdGFUeXBlLlZFUlRJQ0UgfHwgdHlwZSA9PT0gQnVmZmVyRGF0YVR5cGUuTk9STUFMLCBMb2cuaW5mby5GVU5DX1NIT1VMRChcInR5cGVcIiwgXCJiZSBCdWZmZXJEYXRhVHlwZS5WRVJUSUNFIG9yIEJ1ZmZlckRhdGFUeXBlLk5PUk1BTFwiKSk7XG4gICAgICAgIH0pXG4gICAgICAgIHByaXZhdGUgX2dldEN1cnJlbnRCdWZmZXIodHlwZTpCdWZmZXJEYXRhVHlwZSl7XG4gICAgICAgICAgICBpZih0eXBlID09PSBCdWZmZXJEYXRhVHlwZS5WRVJUSUNFKXtcbiAgICAgICAgICAgICAgICB0aGlzLmNyZWF0ZUJ1ZmZlck9ubHlPbmNlKFwiX2N1cnJlbnRWZXJ0aWNlQnVmZmVyXCIsIEFycmF5QnVmZmVyKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9jdXJyZW50VmVydGljZUJ1ZmZlcjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5jcmVhdGVCdWZmZXJPbmx5T25jZShcIl9jdXJyZW50Tm9ybWFsQnVmZmVyXCIsIEFycmF5QnVmZmVyKTtcblxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2N1cnJlbnROb3JtYWxCdWZmZXI7XG4gICAgICAgIH1cblxuICAgICAgICBAcmVxdWlyZShmdW5jdGlvbih0eXBlOkJ1ZmZlckRhdGFUeXBlKXtcbiAgICAgICAgICAgIGFzc2VydCh0eXBlID09PSBCdWZmZXJEYXRhVHlwZS5WRVJUSUNFIHx8IHR5cGUgPT09IEJ1ZmZlckRhdGFUeXBlLk5PUk1BTCwgTG9nLmluZm8uRlVOQ19TSE9VTEQoXCJ0eXBlXCIsIFwiYmUgQnVmZmVyRGF0YVR5cGUuVkVSVElDRSBvciBCdWZmZXJEYXRhVHlwZS5OT1JNQUxcIikpO1xuICAgICAgICB9KVxuICAgICAgICBwcml2YXRlIF9nZXROZXh0QnVmZmVyKHR5cGU6QnVmZmVyRGF0YVR5cGUpe1xuICAgICAgICAgICAgaWYodHlwZSA9PT0gQnVmZmVyRGF0YVR5cGUuVkVSVElDRSl7XG4gICAgICAgICAgICAgICAgdGhpcy5jcmVhdGVCdWZmZXJPbmx5T25jZShcIl9uZXh0VmVydGljZUJ1ZmZlclwiLCBBcnJheUJ1ZmZlcik7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fbmV4dFZlcnRpY2VCdWZmZXI7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuY3JlYXRlQnVmZmVyT25seU9uY2UoXCJfbmV4dE5vcm1hbEJ1ZmZlclwiLCBBcnJheUJ1ZmZlcik7XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9uZXh0Tm9ybWFsQnVmZmVyO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfaXNDYWNoZU5vdENoYW5nZSh0eXBlOkJ1ZmZlckRhdGFUeXBlKXtcbiAgICAgICAgICAgIHJldHVybiAhdGhpcy5faXNDYWNoZUNoYW5nZUZsYWdbdHlwZV07XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9pc05vdFBsYXlBbmltYXRpb24oKXtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9hbmltYXRpb24uY3VycmVudEFuaW1OYW1lID09PSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgQGNhY2hlKGZ1bmN0aW9uKHR5cGU6QnVmZmVyRGF0YVR5cGUpe1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29udGFpbmVyLmhhc0NoaWxkKHRoaXMuX2dldFN0YXRpY0RhdGFDYWNoZURhdGEodHlwZSkpO1xuICAgICAgICB9LCBmdW5jdGlvbih0eXBlKXtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbnRhaW5lci5nZXRDaGlsZCh0aGlzLl9nZXRTdGF0aWNEYXRhQ2FjaGVEYXRhKHR5cGUpKVxuICAgICAgICB9LCBmdW5jdGlvbihyZXN1bHQsIHR5cGUpe1xuICAgICAgICAgICAgdGhpcy5jb250YWluZXIuYWRkQ2hpbGQodGhpcy5fZ2V0U3RhdGljRGF0YUNhY2hlRGF0YSh0eXBlKSwgcmVzdWx0KTtcbiAgICAgICAgfSlcbiAgICAgICAgcHJpdmF0ZSBfZ2V0U3RhdGljRGF0YSh0eXBlOkJ1ZmZlckRhdGFUeXBlKXtcbiAgICAgICAgICAgIHZhciBkYXRhID0gbnVsbCxcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBudWxsO1xuXG4gICAgICAgICAgICBzd2l0Y2godHlwZSl7XG4gICAgICAgICAgICAgICAgY2FzZSBCdWZmZXJEYXRhVHlwZS5WRVJUSUNFOlxuICAgICAgICAgICAgICAgICAgICBkYXRhID0gdGhpcy5nZW9tZXRyeURhdGEudmVydGljZXM7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgQnVmZmVyRGF0YVR5cGUuTk9STUFMOlxuICAgICAgICAgICAgICAgICAgICBkYXRhID0gdGhpcy5nZW9tZXRyeURhdGEubm9ybWFscztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgTG9nLmVycm9yKHRydWUsIExvZy5pbmZvLkZVTkNfU0hPVUxEKFwidHlwZVwiLCBcImJlIEJ1ZmZlckRhdGFUeXBlLlZFUlRJQ0Ugb3IgQnVmZmVyRGF0YVR5cGUuTk9STUFMXCIpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuX2FuaW1hdGlvbi5pbnRlcnBvbGF0aW9uID0gMDtcblxuICAgICAgICAgICAgcmVzdWx0ID0gW1xuICAgICAgICAgICAgICAgIHRoaXMuX2dldEN1cnJlbnRCdWZmZXIodHlwZSkucmVzZXREYXRhKFxuICAgICAgICAgICAgICAgICAgICBuZXcgRmxvYXQzMkFycmF5KGRhdGEpLCAzLCBCdWZmZXJUeXBlLkZMT0FUXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICB0aGlzLl9nZXROZXh0QnVmZmVyKHR5cGUpLnJlc2V0RGF0YShcbiAgICAgICAgICAgICAgICAgICAgbmV3IEZsb2F0MzJBcnJheShkYXRhKSwgMywgQnVmZmVyVHlwZS5GTE9BVFxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICBdO1xuXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfZ2V0U3RhdGljRGF0YUNhY2hlRGF0YSh0eXBlOkJ1ZmZlckRhdGFUeXBlKXtcbiAgICAgICAgICAgIHJldHVybiBgc3RhdGljXyR7dHlwZX1gO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwibW9kdWxlIHdke1xuICAgIC8vdG9kbyBhZGQgYmFja2dyb3VuZENvbG9yXG4gICAgLy90b2RvIGFkZCBGcnVzdHVtP1xuICAgIGV4cG9ydCBhYnN0cmFjdCBjbGFzcyBDYW1lcmF7XG4gICAgICAgIEByZXF1aXJlR2V0dGVyKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBhc3NlcnQodGhpcy5lbnRpdHlPYmplY3QsIExvZy5pbmZvLkZVTkNfTVVTVF9ERUZJTkUoXCJlbnRpdHlPYmplY3RcIikpO1xuICAgICAgICB9KVxuICAgICAgICBnZXQgY2FtZXJhVG9Xb3JsZE1hdHJpeCgpe1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZW50aXR5T2JqZWN0LnRyYW5zZm9ybS5sb2NhbFRvV29ybGRNYXRyaXguY29weSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfd29ybGRUb0NhbWVyYU1hdHJpeCA9IG51bGw7XG4gICAgICAgIGdldCB3b3JsZFRvQ2FtZXJhTWF0cml4KCl7XG4gICAgICAgICAgICBpZih0aGlzLl93b3JsZFRvQ2FtZXJhTWF0cml4KXtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fd29ybGRUb0NhbWVyYU1hdHJpeDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2FtZXJhVG9Xb3JsZE1hdHJpeC5pbnZlcnQoKTtcbiAgICAgICAgfVxuICAgICAgICBzZXQgd29ybGRUb0NhbWVyYU1hdHJpeChtYXRyaXg6TWF0cml4NCl7XG4gICAgICAgICAgICB0aGlzLl93b3JsZFRvQ2FtZXJhTWF0cml4ID0gbWF0cml4O1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfbmVhcjpudW1iZXIgPSBudWxsO1xuICAgICAgICBnZXQgbmVhcigpe1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX25lYXI7XG4gICAgICAgIH1cbiAgICAgICAgc2V0IG5lYXIobmVhcjpudW1iZXIpe1xuICAgICAgICAgICAgdGhpcy5fbmVhciA9IG5lYXI7XG4gICAgICAgICAgICB0aGlzLmRpcnR5ID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX2ZhcjpudW1iZXIgPSBudWxsO1xuICAgICAgICBnZXQgZmFyKCl7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZmFyO1xuICAgICAgICB9XG4gICAgICAgIHNldCBmYXIoZmFyOm51bWJlcil7XG4gICAgICAgICAgICB0aGlzLl9mYXIgPSBmYXI7XG4gICAgICAgICAgICB0aGlzLmRpcnR5ID0gdHJ1ZTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgcHVibGljIHBNYXRyaXg6TWF0cml4NCA9IE1hdHJpeDQuY3JlYXRlKCk7XG4gICAgICAgIHB1YmxpYyBlbnRpdHlPYmplY3Q6R2FtZU9iamVjdCA9IG51bGw7XG5cbiAgICAgICAgcHJvdGVjdGVkIGRpcnR5OmJvb2xlYW4gPSBmYWxzZTtcblxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbmFtZSBjb252ZXJ0U2NyZWVuVG9Xb3JsZFxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gQ29udmVydCBhIHBvaW50IGZyb20gMkQgY2FudmFzIHBpeGVsIHNwYWNlIHRvIDNEIHdvcmxkIHNwYWNlLlxuICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0gc2NyZWVuWCB4IGNvb3JkaW5hdGUgb24gY2FudmFzIGVsZW1lbnQuXG4gICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBzY3JlZW5ZIHkgY29vcmRpbmF0ZSBvbiBjYW52YXMgZWxlbWVudC5cbiAgICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IGRpc3RhbmNlRnJvbUNhbWVyYSBUaGUgZGlzdGFuY2UgZnJvbSB0aGUgY2FtZXJhIGluIHdvcmxkIHNwYWNlIHRvIGNyZWF0ZSB0aGUgbmV3IHBvaW50LlxuICAgICAgICAgKiBAcmV0dXJucyB7VmVjdG9yM30gVGhlIHdvcmxkIHNwYWNlIGNvb3JkaW5hdGUuXG4gICAgICAgICAqL1xuICAgICAgICBwdWJsaWMgYWJzdHJhY3QgY29udmVydFNjcmVlblRvV29ybGQoc2NyZWVuWDpudW1iZXIsIHNjcmVlblk6bnVtYmVyLCBkaXN0YW5jZUZyb21DYW1lcmE6bnVtYmVyKTpWZWN0b3IzO1xuXG4gICAgICAgIEB2aXJ0dWFsXG4gICAgICAgIHB1YmxpYyBpbml0KCl7XG4gICAgICAgICAgICBpZih0aGlzLmRpcnR5KSB7XG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVQcm9qZWN0aW9uTWF0cml4KCk7XG4gICAgICAgICAgICAgICAgdGhpcy5kaXJ0eSA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgQHZpcnR1YWxcbiAgICAgICAgcHVibGljIGRpc3Bvc2UoKXtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyB1cGRhdGUoZWxhcHNlZFRpbWU6bnVtYmVyKXtcbiAgICAgICAgICAgIGlmKHRoaXMuZGlydHkpe1xuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5kaXJ0eSA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcHJvdGVjdGVkIGFic3RyYWN0IHVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcblxuICAgICAgICBwcm90ZWN0ZWQgZ2V0SW52Vmlld1Byb2pNYXQoKXtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnBNYXRyaXguY29weSgpLm11bHRpcGx5KHRoaXMud29ybGRUb0NhbWVyYU1hdHJpeCkuaW52ZXJ0KCk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJtb2R1bGUgd2R7XG4gICAgZXhwb3J0IGNsYXNzIE9ydGhvZ3JhcGhpY0NhbWVyYSBleHRlbmRzIENhbWVyYXtcbiAgICAgICAgcHVibGljIHN0YXRpYyBjcmVhdGUoKSB7XG4gICAgICAgICAgICB2YXIgb2JqID0gbmV3IHRoaXMoKTtcblxuICAgICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX2xlZnQ6bnVtYmVyID0gbnVsbDtcbiAgICAgICAgZ2V0IGxlZnQoKXtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9sZWZ0O1xuICAgICAgICB9XG4gICAgICAgIHNldCBsZWZ0KGxlZnQ6bnVtYmVyKXtcbiAgICAgICAgICAgIHRoaXMuX2xlZnQgPSBsZWZ0O1xuICAgICAgICAgICAgdGhpcy5kaXJ0eSA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9yaWdodDpudW1iZXIgPSBudWxsO1xuICAgICAgICBnZXQgcmlnaHQoKXtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9yaWdodDtcbiAgICAgICAgfVxuICAgICAgICBzZXQgcmlnaHQocmlnaHQ6bnVtYmVyKXtcbiAgICAgICAgICAgIHRoaXMuX3JpZ2h0ID0gcmlnaHQ7XG4gICAgICAgICAgICB0aGlzLmRpcnR5ID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX2JvdHRvbTpudW1iZXIgPSBudWxsO1xuICAgICAgICBnZXQgYm90dG9tKCl7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fYm90dG9tO1xuICAgICAgICB9XG4gICAgICAgIHNldCBib3R0b20oYm90dG9tOm51bWJlcil7XG4gICAgICAgICAgICB0aGlzLl9ib3R0b20gPSBib3R0b207XG4gICAgICAgICAgICB0aGlzLmRpcnR5ID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX3RvcDpudW1iZXIgPSBudWxsO1xuICAgICAgICBnZXQgdG9wKCl7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fdG9wO1xuICAgICAgICB9XG4gICAgICAgIHNldCB0b3AodG9wOm51bWJlcil7XG4gICAgICAgICAgICB0aGlzLl90b3AgPSB0b3A7XG4gICAgICAgICAgICB0aGlzLmRpcnR5ID0gdHJ1ZTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgcHVibGljIGNvbnZlcnRTY3JlZW5Ub1dvcmxkKHNjcmVlblg6bnVtYmVyLCBzY3JlZW5ZOm51bWJlciwgZGlzdGFuY2VGcm9tQ2FtZXJhOm51bWJlcik6VmVjdG9yM3tcbiAgICAgICAgICAgIHZhciBkZXZpY2U6RGV2aWNlTWFuYWdlciA9IERldmljZU1hbmFnZXIuZ2V0SW5zdGFuY2UoKSxcbiAgICAgICAgICAgICAgICB3aWR0aCA9IGRldmljZS52aWV3LndpZHRoLFxuICAgICAgICAgICAgICAgIGhlaWdodCA9IGRldmljZS52aWV3LmhlaWdodCxcbiAgICAgICAgICAgICAgICBub3JtYWxpemVkRGV2aWNlQ29vcmRpbmF0ZSA9IFZlY3RvcjMuY3JlYXRlKDIgKiBzY3JlZW5YIC8gd2lkdGggLSAxLCAoaGVpZ2h0IC0gc2NyZWVuWSkgLyBoZWlnaHQgKiAyIC0gMSwgKGRpc3RhbmNlRnJvbUNhbWVyYSAtIHRoaXMuZmFyKSAvICh0aGlzLmZhciAtIHRoaXMubmVhcikgKiAyICsgMSk7XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldEludlZpZXdQcm9qTWF0KCkubXVsdGlwbHlQb2ludChub3JtYWxpemVkRGV2aWNlQ29vcmRpbmF0ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBwcm90ZWN0ZWQgdXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpe1xuICAgICAgICAgICAgdGhpcy5wTWF0cml4LnNldE9ydGhvKHRoaXMuX2xlZnQsIHRoaXMuX3JpZ2h0LCB0aGlzLl9ib3R0b20sIHRoaXMuX3RvcCwgdGhpcy5uZWFyLCB0aGlzLmZhcik7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJtb2R1bGUgd2R7XG4gICAgZGVjbGFyZSB2YXIgTWF0aDphbnk7XG5cbiAgICBleHBvcnQgY2xhc3MgUGVyc3BlY3RpdmVDYW1lcmEgZXh0ZW5kcyBDYW1lcmF7XG4gICAgICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlKCkge1xuICAgICAgICAgICAgdmFyIG9iaiA9IG5ldyB0aGlzKCk7XG5cbiAgICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9mb3Z5Om51bWJlcj0gbnVsbDtcbiAgICAgICAgZ2V0IGZvdnkoKXtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9mb3Z5O1xuICAgICAgICB9XG4gICAgICAgIHNldCBmb3Z5KGZvdnk6bnVtYmVyKXtcbiAgICAgICAgICAgIHRoaXMuX2ZvdnkgPSBmb3Z5O1xuICAgICAgICAgICAgdGhpcy5kaXJ0eSA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9hc3BlY3Q6bnVtYmVyID0gbnVsbDtcbiAgICAgICAgZ2V0IGFzcGVjdCgpe1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2FzcGVjdDtcbiAgICAgICAgfVxuICAgICAgICBzZXQgYXNwZWN0KGFzcGVjdDpudW1iZXIpe1xuICAgICAgICAgICAgdGhpcy5fYXNwZWN0ID0gYXNwZWN0O1xuICAgICAgICAgICAgdGhpcy5kaXJ0eSA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgem9vbUluKHNwZWVkOm51bWJlciwgbWluOm51bWJlciA9IDEpe1xuICAgICAgICAgICAgdGhpcy5mb3Z5ID0gTWF0aC5tYXgodGhpcy5mb3Z5IC0gc3BlZWQsIG1pbik7XG4gICAgICAgIH1cbiAgICAgICAgcHVibGljIHpvb21PdXQoc3BlZWQ6bnVtYmVyLCBtYXg6bnVtYmVyID0gMTc5KXtcbiAgICAgICAgICAgIHRoaXMuZm92eSA9IE1hdGgubWluKHRoaXMuZm92eSArIHNwZWVkLCBtYXgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGNvbnZlcnRTY3JlZW5Ub1dvcmxkKHNjcmVlblg6bnVtYmVyLCBzY3JlZW5ZOm51bWJlciwgZGlzdGFuY2VGcm9tQ2FtZXJhOm51bWJlcik6VmVjdG9yM3tcbiAgICAgICAgICAgIHZhciBkZXZpY2U6RGV2aWNlTWFuYWdlciA9IERldmljZU1hbmFnZXIuZ2V0SW5zdGFuY2UoKSxcbiAgICAgICAgICAgICAgICB3aWR0aCA9IGRldmljZS52aWV3LndpZHRoLFxuICAgICAgICAgICAgICAgIGhlaWdodCA9IGRldmljZS52aWV3LmhlaWdodCxcbiAgICAgICAgICAgICAgICBub3JtYWxpemVkRGV2aWNlQ29vcmRpbmF0ZSA9IFZlY3RvcjMuY3JlYXRlKDIgKiBzY3JlZW5YIC8gd2lkdGggLSAxLCAxIC0gMiAqIHNjcmVlblkgLyBoZWlnaHQsIDEpLFxuICAgICAgICAgICAgICAgIGludlZpZXdQcm9qTWF0ID0gdGhpcy5nZXRJbnZWaWV3UHJvak1hdCgpLFxuICAgICAgICAgICAgICAgIHBvaW50ID0gbnVsbCxcbiAgICAgICAgICAgICAgICB3ID0gbnVsbDtcblxuICAgICAgICAgICAgcG9pbnQgPSBpbnZWaWV3UHJvak1hdC5tdWx0aXBseVBvaW50KG5vcm1hbGl6ZWREZXZpY2VDb29yZGluYXRlKTtcblxuICAgICAgICAgICAgdyA9IG5vcm1hbGl6ZWREZXZpY2VDb29yZGluYXRlLnggKiBpbnZWaWV3UHJvak1hdC52YWx1ZXNbM10gK1xuICAgICAgICAgICAgICAgIG5vcm1hbGl6ZWREZXZpY2VDb29yZGluYXRlLnkgKiBpbnZWaWV3UHJvak1hdC52YWx1ZXNbN10gK1xuICAgICAgICAgICAgICAgIG5vcm1hbGl6ZWREZXZpY2VDb29yZGluYXRlLnogKiBpbnZWaWV3UHJvak1hdC52YWx1ZXNbMTFdICtcbiAgICAgICAgICAgICAgICBpbnZWaWV3UHJvak1hdC52YWx1ZXNbMTVdO1xuXG4gICAgICAgICAgICBwb2ludC5zY2FsZSgxIC8gdyk7XG5cbiAgICAgICAgICAgIHJldHVybiBWZWN0b3IzLmNyZWF0ZSgpLmxlcnAodGhpcy5lbnRpdHlPYmplY3QudHJhbnNmb3JtLnBvc2l0aW9uLCBwb2ludCwgZGlzdGFuY2VGcm9tQ2FtZXJhIC8gdGhpcy5mYXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJvdGVjdGVkIHVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKXtcbiAgICAgICAgICAgIHRoaXMucE1hdHJpeC5zZXRQZXJzcGVjdGl2ZSh0aGlzLl9mb3Z5LCB0aGlzLl9hc3BlY3QsIHRoaXMubmVhciwgdGhpcy5mYXIpO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwibW9kdWxlIHdkIHtcbiAgICBleHBvcnQgYWJzdHJhY3QgY2xhc3MgQ2FtZXJhQ29udHJvbGxlciBleHRlbmRzIENvbXBvbmVudCB7XG4gICAgICAgIGNvbnN0cnVjdG9yKGNhbWVyYUNvbXBvbmVudDpDYW1lcmEpe1xuICAgICAgICAgICAgc3VwZXIoKTtcblxuICAgICAgICAgICAgdGhpcy5jYW1lcmEgPSBjYW1lcmFDb21wb25lbnQ7XG4gICAgICAgIH1cblxuICAgICAgICBnZXQgY2FtZXJhVG9Xb3JsZE1hdHJpeCgpe1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2FtZXJhLmNhbWVyYVRvV29ybGRNYXRyaXg7XG4gICAgICAgIH1cblxuICAgICAgICBnZXQgd29ybGRUb0NhbWVyYU1hdHJpeCgpe1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2FtZXJhLndvcmxkVG9DYW1lcmFNYXRyaXg7XG4gICAgICAgIH1cbiAgICAgICAgc2V0IHdvcmxkVG9DYW1lcmFNYXRyaXgobWF0cml4Ok1hdHJpeDQpe1xuICAgICAgICAgICAgdGhpcy5jYW1lcmEud29ybGRUb0NhbWVyYU1hdHJpeCA9IG1hdHJpeDtcbiAgICAgICAgfVxuXG4gICAgICAgIGdldCBwTWF0cml4KCl7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jYW1lcmEucE1hdHJpeDtcbiAgICAgICAgfVxuICAgICAgICBzZXQgcE1hdHJpeChwTWF0cml4Ok1hdHJpeDQpe1xuICAgICAgICAgICAgdGhpcy5jYW1lcmEucE1hdHJpeCA9IHBNYXRyaXg7XG4gICAgICAgIH1cblxuXG4gICAgICAgIHB1YmxpYyBlbnRpdHlPYmplY3Q6R2FtZU9iamVjdDtcblxuICAgICAgICBwdWJsaWMgY2FtZXJhOkNhbWVyYSA9IG51bGw7XG5cbiAgICAgICAgcHVibGljIGluaXQoKSB7XG4gICAgICAgICAgICB0aGlzLmNhbWVyYS5lbnRpdHlPYmplY3QgPSA8R2FtZU9iamVjdD50aGlzLmVudGl0eU9iamVjdDtcbiAgICAgICAgICAgIHRoaXMuY2FtZXJhLmluaXQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyB1cGRhdGUoZWxhcHNlZFRpbWU6bnVtYmVyKXtcbiAgICAgICAgICAgIHRoaXMuY2FtZXJhLnVwZGF0ZShlbGFwc2VkVGltZSk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgZGlzcG9zZSgpe1xuICAgICAgICAgICAgdGhpcy5jYW1lcmEuZGlzcG9zZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGlzSW50ZXJzZWN0V2l0aFJheShlbnRpdHlPYmplY3Q6R2FtZU9iamVjdCwgc2NyZWVuWDpudW1iZXIsIHNjcmVlblk6bnVtYmVyKTpib29sZWFue1xuICAgICAgICAgICAgdmFyIHNoYXBlID0gbnVsbDtcblxuICAgICAgICAgICAgaWYoIWVudGl0eU9iamVjdC5oYXNDb21wb25lbnQoQ29sbGlkZXIpKXtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHNoYXBlID0gZW50aXR5T2JqZWN0LmdldENvbXBvbmVudDxDb2xsaWRlcj4oQ29sbGlkZXIpLnNoYXBlO1xuXG4gICAgICAgICAgICByZXR1cm4gc2hhcGUuaXNJbnRlcnNlY3RXaXRoUmF5KHRoaXMuY3JlYXRlUmF5KHNjcmVlblgsIHNjcmVlblkpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBjcmVhdGVSYXkoc2NyZWVuWDpudW1iZXIsIHNjcmVlblk6bnVtYmVyKXtcbiAgICAgICAgICAgIHZhciBmcm9tID0gdGhpcy5jb252ZXJ0U2NyZWVuVG9Xb3JsZChzY3JlZW5YLCBzY3JlZW5ZLCB0aGlzLmNhbWVyYS5uZWFyKSxcbiAgICAgICAgICAgICAgICB0byA9IHRoaXMuY29udmVydFNjcmVlblRvV29ybGQoc2NyZWVuWCwgc2NyZWVuWSwgdGhpcy5jYW1lcmEuZmFyKTtcblxuICAgICAgICAgICAgcmV0dXJuIFJheS5jcmVhdGUoZnJvbSwgdG8uc3ViKGZyb20pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBjb252ZXJ0U2NyZWVuVG9Xb3JsZChzY3JlZW5YOm51bWJlciwgc2NyZWVuWTpudW1iZXIsIGRpc3RhbmNlRnJvbUNhbWVyYTpudW1iZXIpOlZlY3RvcjN7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jYW1lcmEuY29udmVydFNjcmVlblRvV29ybGQoc2NyZWVuWCwgc2NyZWVuWSwgZGlzdGFuY2VGcm9tQ2FtZXJhKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBnZXRQbGFuZXMoKTpBcnJheTxQbGFuZT4ge1xuICAgICAgICAgICAgdmFyIGZydXN0dW1QbGFuZXMgPSBbXSxcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm0gPSB0aGlzLndvcmxkVG9DYW1lcmFNYXRyaXguYXBwbHlNYXRyaXgodGhpcy5wTWF0cml4KTtcblxuICAgICAgICAgICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IDY7IGluZGV4KyspIHtcbiAgICAgICAgICAgICAgICBmcnVzdHVtUGxhbmVzLnB1c2goUGxhbmUuY3JlYXRlKDAsIDAsIDAsIDApKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5fc2V0UGxhbmVzKHRyYW5zZm9ybSwgZnJ1c3R1bVBsYW5lcyk7XG5cbiAgICAgICAgICAgIHJldHVybiBmcnVzdHVtUGxhbmVzO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfc2V0UGxhbmVzKHRyYW5zZm9ybTpNYXRyaXg0LCBmcnVzdHVtUGxhbmVzOiBBcnJheTxQbGFuZT4pOiB2b2lkIHtcbiAgICAgICAgICAgIC8qIVxuICAgICAgICAgICAgcmVmZXIgdG8gaHR0cDovL2dhbWVkZXZzLm9yZy91cGxvYWRzL2Zhc3QtZXh0cmFjdGlvbi12aWV3aW5nLWZydXN0dW0tcGxhbmVzLWZyb20td29ybGQtdmlldy1wcm9qZWN0aW9uLW1hdHJpeC5wZGZcbiAgICAgICAgICAgICAqL1xuXG4gICAgICAgICAgICAvLyBOZWFyXG4gICAgICAgICAgICBmcnVzdHVtUGxhbmVzWzBdLm5vcm1hbC54ID0gdHJhbnNmb3JtLnZhbHVlc1szXSArIHRyYW5zZm9ybS52YWx1ZXNbMl07XG4gICAgICAgICAgICBmcnVzdHVtUGxhbmVzWzBdLm5vcm1hbC55ID0gdHJhbnNmb3JtLnZhbHVlc1s3XSArIHRyYW5zZm9ybS52YWx1ZXNbNl07XG4gICAgICAgICAgICBmcnVzdHVtUGxhbmVzWzBdLm5vcm1hbC56ID0gdHJhbnNmb3JtLnZhbHVlc1sxMV0gKyB0cmFuc2Zvcm0udmFsdWVzWzEwXTtcbiAgICAgICAgICAgIGZydXN0dW1QbGFuZXNbMF0uZCA9IHRyYW5zZm9ybS52YWx1ZXNbMTVdICsgdHJhbnNmb3JtLnZhbHVlc1sxNF07XG4gICAgICAgICAgICBmcnVzdHVtUGxhbmVzWzBdLm5vcm1hbGl6ZSgpO1xuXG4gICAgICAgICAgICAvLyBGYXJcbiAgICAgICAgICAgIGZydXN0dW1QbGFuZXNbMV0ubm9ybWFsLnggPSB0cmFuc2Zvcm0udmFsdWVzWzNdIC0gdHJhbnNmb3JtLnZhbHVlc1syXTtcbiAgICAgICAgICAgIGZydXN0dW1QbGFuZXNbMV0ubm9ybWFsLnkgPSB0cmFuc2Zvcm0udmFsdWVzWzddIC0gdHJhbnNmb3JtLnZhbHVlc1s2XTtcbiAgICAgICAgICAgIGZydXN0dW1QbGFuZXNbMV0ubm9ybWFsLnogPSB0cmFuc2Zvcm0udmFsdWVzWzExXSAtIHRyYW5zZm9ybS52YWx1ZXNbMTBdO1xuICAgICAgICAgICAgZnJ1c3R1bVBsYW5lc1sxXS5kID0gdHJhbnNmb3JtLnZhbHVlc1sxNV0gLSB0cmFuc2Zvcm0udmFsdWVzWzE0XTtcbiAgICAgICAgICAgIGZydXN0dW1QbGFuZXNbMV0ubm9ybWFsaXplKCk7XG5cbiAgICAgICAgICAgIC8vIExlZnRcbiAgICAgICAgICAgIGZydXN0dW1QbGFuZXNbMl0ubm9ybWFsLnggPSB0cmFuc2Zvcm0udmFsdWVzWzNdICsgdHJhbnNmb3JtLnZhbHVlc1swXTtcbiAgICAgICAgICAgIGZydXN0dW1QbGFuZXNbMl0ubm9ybWFsLnkgPSB0cmFuc2Zvcm0udmFsdWVzWzddICsgdHJhbnNmb3JtLnZhbHVlc1s0XTtcbiAgICAgICAgICAgIGZydXN0dW1QbGFuZXNbMl0ubm9ybWFsLnogPSB0cmFuc2Zvcm0udmFsdWVzWzExXSArIHRyYW5zZm9ybS52YWx1ZXNbOF07XG4gICAgICAgICAgICBmcnVzdHVtUGxhbmVzWzJdLmQgPSB0cmFuc2Zvcm0udmFsdWVzWzE1XSArIHRyYW5zZm9ybS52YWx1ZXNbMTJdO1xuICAgICAgICAgICAgZnJ1c3R1bVBsYW5lc1syXS5ub3JtYWxpemUoKTtcblxuICAgICAgICAgICAgLy8gUmlnaHRcbiAgICAgICAgICAgIGZydXN0dW1QbGFuZXNbM10ubm9ybWFsLnggPSB0cmFuc2Zvcm0udmFsdWVzWzNdIC0gdHJhbnNmb3JtLnZhbHVlc1swXTtcbiAgICAgICAgICAgIGZydXN0dW1QbGFuZXNbM10ubm9ybWFsLnkgPSB0cmFuc2Zvcm0udmFsdWVzWzddIC0gdHJhbnNmb3JtLnZhbHVlc1s0XTtcbiAgICAgICAgICAgIGZydXN0dW1QbGFuZXNbM10ubm9ybWFsLnogPSB0cmFuc2Zvcm0udmFsdWVzWzExXSAtIHRyYW5zZm9ybS52YWx1ZXNbOF07XG4gICAgICAgICAgICBmcnVzdHVtUGxhbmVzWzNdLmQgPSB0cmFuc2Zvcm0udmFsdWVzWzE1XSAtIHRyYW5zZm9ybS52YWx1ZXNbMTJdO1xuICAgICAgICAgICAgZnJ1c3R1bVBsYW5lc1szXS5ub3JtYWxpemUoKTtcblxuICAgICAgICAgICAgLy8gVG9wXG4gICAgICAgICAgICBmcnVzdHVtUGxhbmVzWzRdLm5vcm1hbC54ID0gdHJhbnNmb3JtLnZhbHVlc1szXSAtIHRyYW5zZm9ybS52YWx1ZXNbMV07XG4gICAgICAgICAgICBmcnVzdHVtUGxhbmVzWzRdLm5vcm1hbC55ID0gdHJhbnNmb3JtLnZhbHVlc1s3XSAtIHRyYW5zZm9ybS52YWx1ZXNbNV07XG4gICAgICAgICAgICBmcnVzdHVtUGxhbmVzWzRdLm5vcm1hbC56ID0gdHJhbnNmb3JtLnZhbHVlc1sxMV0gLSB0cmFuc2Zvcm0udmFsdWVzWzldO1xuICAgICAgICAgICAgZnJ1c3R1bVBsYW5lc1s0XS5kID0gdHJhbnNmb3JtLnZhbHVlc1sxNV0gLSB0cmFuc2Zvcm0udmFsdWVzWzEzXTtcbiAgICAgICAgICAgIGZydXN0dW1QbGFuZXNbNF0ubm9ybWFsaXplKCk7XG5cbiAgICAgICAgICAgIC8vIEJvdHRvbVxuICAgICAgICAgICAgZnJ1c3R1bVBsYW5lc1s1XS5ub3JtYWwueCA9IHRyYW5zZm9ybS52YWx1ZXNbM10gKyB0cmFuc2Zvcm0udmFsdWVzWzFdO1xuICAgICAgICAgICAgZnJ1c3R1bVBsYW5lc1s1XS5ub3JtYWwueSA9IHRyYW5zZm9ybS52YWx1ZXNbN10gKyB0cmFuc2Zvcm0udmFsdWVzWzVdO1xuICAgICAgICAgICAgZnJ1c3R1bVBsYW5lc1s1XS5ub3JtYWwueiA9IHRyYW5zZm9ybS52YWx1ZXNbMTFdICsgdHJhbnNmb3JtLnZhbHVlc1s5XTtcbiAgICAgICAgICAgIGZydXN0dW1QbGFuZXNbNV0uZCA9IHRyYW5zZm9ybS52YWx1ZXNbMTVdICsgdHJhbnNmb3JtLnZhbHVlc1sxM107XG4gICAgICAgICAgICBmcnVzdHVtUGxhbmVzWzVdLm5vcm1hbGl6ZSgpO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwibW9kdWxlIHdkIHtcbiAgICBleHBvcnQgY2xhc3MgQmFzaWNDYW1lcmFDb250cm9sbGVyIGV4dGVuZHMgQ2FtZXJhQ29udHJvbGxlciB7XG4gICAgICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlKGNhbWVyYUNvbXBvbmVudDpDYW1lcmEpIHtcbiAgICAgICAgICAgIHZhciBvYmogPSBuZXcgdGhpcyhjYW1lcmFDb21wb25lbnQpO1xuXG4gICAgICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwibW9kdWxlIHdkIHtcbiAgICBleHBvcnQgY2xhc3MgRmx5Q2FtZXJhQ29udHJvbGxlciBleHRlbmRzIENhbWVyYUNvbnRyb2xsZXIge1xuICAgICAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZShjYW1lcmFDb21wb25lbnQ6Q2FtZXJhKSB7XG4gICAgICAgICAgICB2YXIgb2JqID0gbmV3IHRoaXMoY2FtZXJhQ29tcG9uZW50KTtcblxuICAgICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0cnVjdG9yKGNhbWVyYUNvbXBvbmVudDpDYW1lcmEpe1xuICAgICAgICAgICAgc3VwZXIoY2FtZXJhQ29tcG9uZW50KTtcblxuICAgICAgICAgICAgaWYoY2FtZXJhQ29tcG9uZW50IGluc3RhbmNlb2YgUGVyc3BlY3RpdmVDYW1lcmEpe1xuICAgICAgICAgICAgICAgIHRoaXMuX2NvbnRyb2wgPSBGbHlQZXJzcGVjdGl2ZUNhbWVyYUNvbnRyb2wuY3JlYXRlKDxQZXJzcGVjdGl2ZUNhbWVyYT5jYW1lcmFDb21wb25lbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICB0aGlzLl9jb250cm9sID0gRmx5T3J0aG9ncmFwaGljQ2FtZXJhQ29udHJvbC5jcmVhdGUoPE9ydGhvZ3JhcGhpY0NhbWVyYT5jYW1lcmFDb21wb25lbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfY29udHJvbDpGbHlDYW1lcmFDb250cm9sID0gbnVsbDtcblxuICAgICAgICBwdWJsaWMgaW5pdCgpIHtcbiAgICAgICAgICAgIHN1cGVyLmluaXQoKTtcblxuICAgICAgICAgICAgdGhpcy5fY29udHJvbC5pbml0KHRoaXMuZW50aXR5T2JqZWN0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyB1cGRhdGUoZWxhcHNlZFRpbWU6bnVtYmVyKXtcbiAgICAgICAgICAgIHN1cGVyLnVwZGF0ZShlbGFwc2VkVGltZSk7XG5cbiAgICAgICAgICAgIHRoaXMuX2NvbnRyb2wudXBkYXRlKGVsYXBzZWRUaW1lKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBkaXNwb3NlKCkge1xuICAgICAgICAgICAgc3VwZXIuZGlzcG9zZSgpO1xuXG4gICAgICAgICAgICB0aGlzLl9jb250cm9sLmRpc3Bvc2UoKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsIm1vZHVsZSB3ZCB7XG4gICAgZGVjbGFyZSB2YXIgZG9jdW1lbnQ6YW55O1xuXG4gICAgZXhwb3J0IGFic3RyYWN0IGNsYXNzIEZseUNhbWVyYUNvbnRyb2wge1xuICAgICAgICBjb25zdHJ1Y3RvcihjYW1lcmFDb21wb25lbnQ6Q2FtZXJhKSB7XG4gICAgICAgICAgICB0aGlzLmNhbWVyYUNvbXBvbmVudCA9IGNhbWVyYUNvbXBvbmVudDtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBtb3ZlU3BlZWQ6bnVtYmVyID0gMS4yO1xuICAgICAgICBwdWJsaWMgcm90YXRlU3BlZWQ6bnVtYmVyID0gMTAwO1xuXG4gICAgICAgIHByb3RlY3RlZCBjYW1lcmFDb21wb25lbnQ6Q2FtZXJhID0gbnVsbDtcblxuICAgICAgICBwcml2YXRlIF9yb3RhdGVYOm51bWJlciA9IDA7XG4gICAgICAgIHByaXZhdGUgX3JvdGF0ZVk6bnVtYmVyID0gMDtcbiAgICAgICAgcHJpdmF0ZSBfaXNSb3RhdGU6Ym9vbGVhbiA9IGZhbHNlO1xuICAgICAgICBwcml2YXRlIF9tb3VzZURyYWdTdWJzY3JpcHRpb246d2RGcnAuSURpc3Bvc2FibGUgPSBudWxsO1xuICAgICAgICBwcml2YXRlIF9rZXlkb3duU3Vic2NyaXB0aW9uOndkRnJwLklEaXNwb3NhYmxlID0gbnVsbDtcbiAgICAgICAgcHJpdmF0ZSBfZ2FtZU9iamVjdDpHYW1lT2JqZWN0ID0gbnVsbDtcblxuICAgICAgICBwdWJsaWMgaW5pdChlbnRpdHlPYmplY3Q6R2FtZU9iamVjdCkge1xuICAgICAgICAgICAgdmFyIGV1bGVyQW5nbGVzID0gZW50aXR5T2JqZWN0LnRyYW5zZm9ybS5ldWxlckFuZ2xlcztcblxuICAgICAgICAgICAgdGhpcy5fcm90YXRlWCA9IGV1bGVyQW5nbGVzLng7XG4gICAgICAgICAgICB0aGlzLl9yb3RhdGVZID0gZXVsZXJBbmdsZXMueTtcblxuICAgICAgICAgICAgdGhpcy5fZ2FtZU9iamVjdCA9IGVudGl0eU9iamVjdDtcblxuICAgICAgICAgICAgdGhpcy5fYmluZENhbnZhc0V2ZW50KCk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgdXBkYXRlKGVsYXBzZWRUaW1lOm51bWJlcil7XG4gICAgICAgICAgICBpZiAoIXRoaXMuX2lzUm90YXRlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLl9pc1JvdGF0ZSA9IGZhbHNlO1xuXG4gICAgICAgICAgICB0aGlzLl9nYW1lT2JqZWN0LnRyYW5zZm9ybS5ldWxlckFuZ2xlcyA9IFZlY3RvcjMuY3JlYXRlKHRoaXMuX3JvdGF0ZVgsIHRoaXMuX3JvdGF0ZVksIDApO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGRpc3Bvc2UoKSB7XG4gICAgICAgICAgICB0aGlzLl9yZW1vdmVFdmVudCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJvdGVjdGVkIGFic3RyYWN0IHpvb20oZXZlbnQ6S2V5Ym9hcmRFdmVudCk7XG5cbiAgICAgICAgcHJpdmF0ZSBfbW92ZShldmVudDpLZXlib2FyZEV2ZW50KSB7XG4gICAgICAgICAgICB2YXIgc3BlZWQgPSB0aGlzLm1vdmVTcGVlZCxcbiAgICAgICAgICAgICAgICBlbnRpdHlPYmplY3QgPSB0aGlzLl9nYW1lT2JqZWN0LFxuICAgICAgICAgICAgICAgIGtleVN0YXRlID0gZXZlbnQua2V5U3RhdGU7XG5cbiAgICAgICAgICAgIGlmIChrZXlTdGF0ZVtcImFcIl0gfHwga2V5U3RhdGVbXCJsZWZ0XCJdKSB7XG4gICAgICAgICAgICAgICAgZW50aXR5T2JqZWN0LnRyYW5zZm9ybS50cmFuc2xhdGVMb2NhbChWZWN0b3IzLmNyZWF0ZSgtc3BlZWQsIDAsIDApKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYoa2V5U3RhdGVbXCJkXCJdIHx8IGtleVN0YXRlW1wicmlnaHRcIl0pIHtcbiAgICAgICAgICAgICAgICBlbnRpdHlPYmplY3QudHJhbnNmb3JtLnRyYW5zbGF0ZUxvY2FsKFZlY3RvcjMuY3JlYXRlKHNwZWVkLCAwLCAwKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmKGtleVN0YXRlW1wid1wiXSB8fCBrZXlTdGF0ZVtcInVwXCJdKSB7XG4gICAgICAgICAgICAgICAgZW50aXR5T2JqZWN0LnRyYW5zZm9ybS50cmFuc2xhdGVMb2NhbChWZWN0b3IzLmNyZWF0ZSgwLCAwLCAtc3BlZWQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYoa2V5U3RhdGVbXCJzXCJdIHx8IGtleVN0YXRlW1wiZG93blwiXSkge1xuICAgICAgICAgICAgICAgIGVudGl0eU9iamVjdC50cmFuc2Zvcm0udHJhbnNsYXRlTG9jYWwoVmVjdG9yMy5jcmVhdGUoMCwgMCwgc3BlZWQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX2JpbmRDYW52YXNFdmVudCgpIHtcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcyxcbiAgICAgICAgICAgICAgICByb3RhdGVTcGVlZCA9IHRoaXMucm90YXRlU3BlZWQsXG4gICAgICAgICAgICAgICAgbW91c2VkcmFnID0gRXZlbnRNYW5hZ2VyLmZyb21FdmVudChEaXJlY3Rvci5nZXRJbnN0YW5jZSgpLnNjZW5lLCA8YW55PkVuZ2luZUV2ZW50Lk1PVVNFX0RSQUcpLFxuICAgICAgICAgICAgICAgIGtleWRvd24gPSBFdmVudE1hbmFnZXIuZnJvbUV2ZW50KEV2ZW50TmFtZS5LRVlET1dOKSxcbiAgICAgICAgICAgICAgICBjYW52YXMgPSBEaXJlY3Rvci5nZXRJbnN0YW5jZSgpLnZpZXc7XG5cbiAgICAgICAgICAgIHRoaXMuX21vdXNlRHJhZ1N1YnNjcmlwdGlvbiA9IG1vdXNlZHJhZ1xuICAgICAgICAgICAgICAgIC5tYXAoKGU6Q3VzdG9tRXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1vdmVtZW50RGVsdGEgPSBlLnVzZXJEYXRhLm1vdmVtZW50RGVsdGEsXG4gICAgICAgICAgICAgICAgICAgICAgICBkeCA9IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICBkeSA9IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICBmYWN0b3IgPSByb3RhdGVTcGVlZCAvIGNhbnZhcy5oZWlnaHQ7XG5cbiAgICAgICAgICAgICAgICAgICAgZHggPSBmYWN0b3IgKiBtb3ZlbWVudERlbHRhLng7XG4gICAgICAgICAgICAgICAgICAgIGR5ID0gZmFjdG9yICogbW92ZW1lbnREZWx0YS55O1xuXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuX2lzUm90YXRlID0gdHJ1ZTtcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgZHg6IGR4LFxuICAgICAgICAgICAgICAgICAgICAgICAgZHk6IGR5XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAuc3Vic2NyaWJlKGZ1bmN0aW9uIChwb3MpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5fcm90YXRlWSAtPSBwb3MuZHg7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuX3JvdGF0ZVggLT0gcG9zLmR5O1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB0aGlzLl9rZXlkb3duU3Vic2NyaXB0aW9uID0ga2V5ZG93bi5zdWJzY3JpYmUoKGU6S2V5Ym9hcmRFdmVudCkgPT4ge1xuICAgICAgICAgICAgICAgIHNlbGYuX21vdmUoZSk7XG4gICAgICAgICAgICAgICAgc2VsZi56b29tKGUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9yZW1vdmVFdmVudCgpIHtcbiAgICAgICAgICAgIHRoaXMuX21vdXNlRHJhZ1N1YnNjcmlwdGlvbi5kaXNwb3NlKCk7XG4gICAgICAgICAgICB0aGlzLl9rZXlkb3duU3Vic2NyaXB0aW9uLmRpc3Bvc2UoKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsIm1vZHVsZSB3ZCB7XG4gICAgZXhwb3J0IGNsYXNzIEZseVBlcnNwZWN0aXZlQ2FtZXJhQ29udHJvbCBleHRlbmRzIEZseUNhbWVyYUNvbnRyb2wge1xuICAgICAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZShjYW1lcmFDb21wb25lbnQ6Q2FtZXJhKSB7XG4gICAgICAgICAgICB2YXIgb2JqID0gbmV3IHRoaXMoY2FtZXJhQ29tcG9uZW50KTtcblxuICAgICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyB6b29tU3BlZWQ6bnVtYmVyID0gMTA7XG5cbiAgICAgICAgcHJvdGVjdGVkIGNhbWVyYUNvbXBvbmVudDpQZXJzcGVjdGl2ZUNhbWVyYTtcblxuICAgICAgICBwcm90ZWN0ZWQgem9vbShldmVudDpLZXlib2FyZEV2ZW50KXtcbiAgICAgICAgICAgIHZhciBzcGVlZCA9IHRoaXMuem9vbVNwZWVkLFxuICAgICAgICAgICAgICAgIGtleVN0YXRlID0gZXZlbnQua2V5U3RhdGU7XG5cbiAgICAgICAgICAgIGlmIChrZXlTdGF0ZVtcImdcIl0pIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNhbWVyYUNvbXBvbmVudC56b29tSW4oc3BlZWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoa2V5U3RhdGVbXCJoXCJdKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jYW1lcmFDb21wb25lbnQuem9vbU91dChzcGVlZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJtb2R1bGUgd2Qge1xuICAgIGV4cG9ydCBjbGFzcyBGbHlPcnRob2dyYXBoaWNDYW1lcmFDb250cm9sIGV4dGVuZHMgRmx5Q2FtZXJhQ29udHJvbCB7XG4gICAgICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlKGNhbWVyYUNvbXBvbmVudDpDYW1lcmEpIHtcbiAgICAgICAgICAgIHZhciBvYmogPSBuZXcgdGhpcyhjYW1lcmFDb21wb25lbnQpO1xuXG4gICAgICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJvdGVjdGVkIHpvb20oZXZlbnQ6S2V5Ym9hcmRFdmVudCl7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJtb2R1bGUgd2Qge1xuICAgIGRlY2xhcmUgdmFyIE1hdGg6YW55LFxuICAgICAgICBkb2N1bWVudDphbnk7XG5cbiAgICBleHBvcnQgY2xhc3MgQXJjYmFsbENhbWVyYUNvbnRyb2xsZXIgZXh0ZW5kcyBDYW1lcmFDb250cm9sbGVyIHtcbiAgICAgICAgcHVibGljIHN0YXRpYyBjcmVhdGUoY2FtZXJhQ29tcG9uZW50OkNhbWVyYSkge1xuICAgICAgICAgICAgdmFyIG9iaiA9IG5ldyB0aGlzKGNhbWVyYUNvbXBvbmVudCk7XG5cbiAgICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgbW92ZVNwZWVkWDpudW1iZXIgPSAxO1xuICAgICAgICBwdWJsaWMgbW92ZVNwZWVkWTpudW1iZXIgPSAxO1xuICAgICAgICBwdWJsaWMgcm90YXRlU3BlZWQ6bnVtYmVyID0gMTtcbiAgICAgICAgcHVibGljIGRpc3RhbmNlOm51bWJlciA9IDEwO1xuICAgICAgICBwdWJsaWMgcGhpOm51bWJlciA9IE1hdGguUEkgLyAyO1xuICAgICAgICBwdWJsaWMgdGhldGE6bnVtYmVyID0gTWF0aC5QSSAvIDI7XG4gICAgICAgIHB1YmxpYyB0YXJnZXQ6VmVjdG9yMyA9IFZlY3RvcjMuY3JlYXRlKDAsIDAsIDApO1xuICAgICAgICBwdWJsaWMgdGhldGFNYXJnaW4gPSAwLjA1O1xuICAgICAgICBwdWJsaWMgbWluRGlzdGFuY2U6bnVtYmVyID0gMC4wNTtcblxuICAgICAgICBwcml2YXRlIF9pc0NoYW5nZTpib29sZWFuID0gdHJ1ZTtcbiAgICAgICAgcHJpdmF0ZSBfbW91c2VEcmFnU3Vic2NyaXB0aW9uOndkRnJwLklEaXNwb3NhYmxlID0gbnVsbDtcbiAgICAgICAgcHJpdmF0ZSBfbW91c2VXaGVlbFN1YnNjcmlwdGlvbjp3ZEZycC5JRGlzcG9zYWJsZSA9IG51bGw7XG4gICAgICAgIHByaXZhdGUgX2tleWRvd25TdWJzY3JpcHRpb246d2RGcnAuSURpc3Bvc2FibGUgPSBudWxsO1xuXG4gICAgICAgIHB1YmxpYyBpbml0KCkge1xuICAgICAgICAgICAgc3VwZXIuaW5pdCgpO1xuXG4gICAgICAgICAgICB0aGlzLl9iaW5kQ2FudmFzRXZlbnQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyB1cGRhdGUoZWxhcHNlZFRpbWU6bnVtYmVyKSB7XG4gICAgICAgICAgICAvKiFcbiAgICAgICAgICAgICBYPSByKmNvcyhwaGkpKnNpbih0aGV0YSk7XG4gICAgICAgICAgICAgWj0gcipzaW4ocGhpKSpzaW4odGhldGEpO1xuICAgICAgICAgICAgIFk9IHIqY29zKHRoZXRhKTtcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdmFyIHggPSBudWxsLFxuICAgICAgICAgICAgICAgIHkgPSBudWxsLFxuICAgICAgICAgICAgICAgIHogPSBudWxsO1xuXG4gICAgICAgICAgICBzdXBlci51cGRhdGUoZWxhcHNlZFRpbWUpO1xuXG4gICAgICAgICAgICBpZighdGhpcy5faXNDaGFuZ2Upe1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5faXNDaGFuZ2UgPSBmYWxzZTtcblxuICAgICAgICAgICAgeCA9ICgodGhpcy5kaXN0YW5jZSkgKiBNYXRoLmNvcyh0aGlzLnBoaSkgKiBNYXRoLnNpbih0aGlzLnRoZXRhKSArIHRoaXMudGFyZ2V0LngpO1xuICAgICAgICAgICAgeiA9ICgodGhpcy5kaXN0YW5jZSkgKiBNYXRoLnNpbih0aGlzLnBoaSkgKiBNYXRoLnNpbih0aGlzLnRoZXRhKSArIHRoaXMudGFyZ2V0LnopO1xuICAgICAgICAgICAgeSA9ICgodGhpcy5kaXN0YW5jZSkgKiBNYXRoLmNvcyh0aGlzLnRoZXRhKSArIHRoaXMudGFyZ2V0LnkpO1xuXG4gICAgICAgICAgICB0aGlzLmVudGl0eU9iamVjdC50cmFuc2Zvcm0ucG9zaXRpb24gPSBWZWN0b3IzLmNyZWF0ZSh4LCB5LCB6KTtcbiAgICAgICAgICAgIHRoaXMuZW50aXR5T2JqZWN0LnRyYW5zZm9ybS5sb29rQXQodGhpcy50YXJnZXQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGRpc3Bvc2UoKSB7XG4gICAgICAgICAgICBzdXBlci5kaXNwb3NlKCk7XG5cbiAgICAgICAgICAgIHRoaXMuX3JlbW92ZUV2ZW50KCk7XG4gICAgICAgIH1cblxuICAgICAgICAvL3RvZG8gdHJlYXQgcGlja2VkIGl0ZW0gYXMgdGhlIHRhcmdldFxuICAgICAgICBwcml2YXRlIF9iaW5kQ2FudmFzRXZlbnQoKSB7XG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXMsXG4gICAgICAgICAgICAgICAgbW91c2V3aGVlbCA9IEV2ZW50TWFuYWdlci5mcm9tRXZlbnQoRGlyZWN0b3IuZ2V0SW5zdGFuY2UoKS5zY2VuZSwgPGFueT5FbmdpbmVFdmVudC5NT1VTRV9XSEVFTCksXG4gICAgICAgICAgICAgICAgbW91c2VkcmFnID0gRXZlbnRNYW5hZ2VyLmZyb21FdmVudChEaXJlY3Rvci5nZXRJbnN0YW5jZSgpLnNjZW5lLCA8YW55PkVuZ2luZUV2ZW50Lk1PVVNFX0RSQUcpLFxuICAgICAgICAgICAga2V5ZG93biA9IEV2ZW50TWFuYWdlci5mcm9tRXZlbnQoRXZlbnROYW1lLktFWURPV04pO1xuXG4gICAgICAgICAgICB0aGlzLl9tb3VzZURyYWdTdWJzY3JpcHRpb24gPSBtb3VzZWRyYWcuc3Vic2NyaWJlKChlOkN1c3RvbUV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgc2VsZi5fY2hhbmdlT3JiaXQoZS51c2VyRGF0YSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdGhpcy5fbW91c2VXaGVlbFN1YnNjcmlwdGlvbiA9IG1vdXNld2hlZWwuc3Vic2NyaWJlKChlOkN1c3RvbUV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgdmFyIG1vdXNlRXZlbnQ6TW91c2VFdmVudCA9IGUudXNlckRhdGE7XG5cbiAgICAgICAgICAgICAgICBtb3VzZUV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgICAgICAgICBzZWxmLl9jaGFuZ2VEaXN0YW5jZShtb3VzZUV2ZW50KTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB0aGlzLl9rZXlkb3duU3Vic2NyaXB0aW9uID0ga2V5ZG93bi5zdWJzY3JpYmUoZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICBzZWxmLl9jaGFuZ2VUYXJnZXQoZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX2NoYW5nZU9yYml0KGU6TW91c2VFdmVudCkge1xuICAgICAgICAgICAgdmFyIG1vdmVtZW50RGVsdGEgPSBlLm1vdmVtZW50RGVsdGE7XG5cbiAgICAgICAgICAgIHRoaXMuX2lzQ2hhbmdlID0gdHJ1ZTtcblxuICAgICAgICAgICAgdGhpcy5waGkgKz0gbW92ZW1lbnREZWx0YS54IC8gKDEwMCAvIHRoaXMucm90YXRlU3BlZWQpO1xuICAgICAgICAgICAgdGhpcy50aGV0YSAtPSBtb3ZlbWVudERlbHRhLnkgLyAoMTAwIC8gdGhpcy5yb3RhdGVTcGVlZCk7XG5cbiAgICAgICAgICAgIHRoaXMuX2NvbnRyYWluVGhldGEoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX2NoYW5nZVRhcmdldChlOktleWJvYXJkRXZlbnQpe1xuICAgICAgICAgICAgdmFyIG1vdmVTcGVlZFggPSB0aGlzLm1vdmVTcGVlZFgsXG4gICAgICAgICAgICAgICAgbW92ZVNwZWVkWSA9IHRoaXMubW92ZVNwZWVkWSxcbiAgICAgICAgICAgICAgICBkeCA9IG51bGwsXG4gICAgICAgICAgICAgICAgZHkgPSBudWxsLFxuICAgICAgICAgICAgICAgIGtleVN0YXRlID0gZS5rZXlTdGF0ZSxcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm0gPSB0aGlzLmVudGl0eU9iamVjdC50cmFuc2Zvcm07XG5cbiAgICAgICAgICAgIHRoaXMuX2lzQ2hhbmdlID0gdHJ1ZTtcblxuICAgICAgICAgICAgaWYgKGtleVN0YXRlW1wiYVwiXSB8fCBrZXlTdGF0ZVtcImxlZnRcIl0pIHtcbiAgICAgICAgICAgICAgICBkeCA9IC1tb3ZlU3BlZWRYO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZihrZXlTdGF0ZVtcImRcIl0gfHwga2V5U3RhdGVbXCJyaWdodFwiXSkge1xuICAgICAgICAgICAgICAgIGR4ID0gbW92ZVNwZWVkWDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYoa2V5U3RhdGVbXCJ3XCJdIHx8IGtleVN0YXRlW1widXBcIl0pIHtcbiAgICAgICAgICAgICAgICBkeSA9IG1vdmVTcGVlZFk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmKGtleVN0YXRlW1wic1wiXSB8fCBrZXlTdGF0ZVtcImRvd25cIl0pIHtcbiAgICAgICAgICAgICAgICBkeSA9IC1tb3ZlU3BlZWRZO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLnRhcmdldC5hZGQoVmVjdG9yMy5jcmVhdGUodHJhbnNmb3JtLnJpZ2h0LnggKiAoZHgpLCAwLCB0cmFuc2Zvcm0ucmlnaHQueiAqIChkeCkpKTtcbiAgICAgICAgICAgIHRoaXMudGFyZ2V0LmFkZChWZWN0b3IzLmNyZWF0ZSh0cmFuc2Zvcm0udXAueCAqIGR5LCB0cmFuc2Zvcm0udXAueSAqIGR5LCAwKSk7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9jaGFuZ2VEaXN0YW5jZShlOk1vdXNlRXZlbnQpe1xuICAgICAgICAgICAgdGhpcy5faXNDaGFuZ2UgPSB0cnVlO1xuXG4gICAgICAgICAgICB0aGlzLmRpc3RhbmNlIC09IGUud2hlZWw7XG4gICAgICAgICAgICB0aGlzLl9jb250cmFpbkRpc3RhbmNlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9jb250cmFpbkRpc3RhbmNlKCkge1xuICAgICAgICAgICAgdGhpcy5kaXN0YW5jZSA9IE1hdGhVdGlscy5iaWdUaGFuKHRoaXMuZGlzdGFuY2UsIHRoaXMubWluRGlzdGFuY2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfY29udHJhaW5UaGV0YSgpIHtcbiAgICAgICAgICAgIHRoaXMudGhldGEgPSBNYXRoVXRpbHMuY2xhbXAodGhpcy50aGV0YSwgdGhpcy50aGV0YU1hcmdpbiwgTWF0aC5QSSAtIHRoaXMudGhldGFNYXJnaW4pO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfcmVtb3ZlRXZlbnQoKSB7XG4gICAgICAgICAgICB0aGlzLl9tb3VzZURyYWdTdWJzY3JpcHRpb24uZGlzcG9zZSgpO1xuICAgICAgICAgICAgdGhpcy5fbW91c2VXaGVlbFN1YnNjcmlwdGlvbi5kaXNwb3NlKCk7XG4gICAgICAgICAgICB0aGlzLl9rZXlkb3duU3Vic2NyaXB0aW9uLmRpc3Bvc2UoKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsIm1vZHVsZSB3ZHtcbiAgICBleHBvcnQgYWJzdHJhY3QgY2xhc3MgQWN0aW9uIGV4dGVuZHMgQ29tcG9uZW50e1xuICAgICAgICBnZXQgaXNTdGFydCgpIHtcbiAgICAgICAgICAgIHJldHVybiAhdGhpcy5pc1N0b3A7XG4gICAgICAgIH1cblxuICAgICAgICBnZXQgaXNTdG9wKCkge1xuICAgICAgICAgICAgcmV0dXJuIExvZy5lcnJvcih0cnVlLCBMb2cuaW5mby5BQlNUUkFDVF9BVFRSSUJVVEUpO1xuICAgICAgICB9XG5cbiAgICAgICAgZ2V0IGlzUGF1c2UoKSB7XG4gICAgICAgICAgICByZXR1cm4gTG9nLmVycm9yKHRydWUsIExvZy5pbmZvLkFCU1RSQUNUX0FUVFJJQlVURSk7XG4gICAgICAgIH1cblxuICAgICAgICBwcm90ZWN0ZWQgcF90YXJnZXQ6RW50aXR5T2JqZWN0ID0gbnVsbDtcbiAgICAgICAgZ2V0IHRhcmdldCgpe1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucF90YXJnZXQ7XG4gICAgICAgIH1cbiAgICAgICAgc2V0IHRhcmdldCh0YXJnZXQ6RW50aXR5T2JqZWN0KXtcbiAgICAgICAgICAgIHRoaXMucF90YXJnZXQgPSB0YXJnZXQ7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgaXNGaW5pc2g6Ym9vbGVhbiA9IGZhbHNlO1xuXG4gICAgICAgIHB1YmxpYyByZXNldCgpIHtcbiAgICAgICAgICAgIHRoaXMuaXNGaW5pc2ggPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBhYnN0cmFjdCB1cGRhdGUoZWxhcHNlZFRpbWU6bnVtYmVyKTtcblxuICAgICAgICBwdWJsaWMgYWJzdHJhY3Qgc3RhcnQoKTtcblxuICAgICAgICBwdWJsaWMgYWJzdHJhY3Qgc3RvcCgpO1xuXG4gICAgICAgIHB1YmxpYyBhYnN0cmFjdCBwYXVzZSgpO1xuXG4gICAgICAgIHB1YmxpYyBhYnN0cmFjdCByZXN1bWUoKTtcblxuICAgICAgICBwdWJsaWMgYWJzdHJhY3QgY29weSgpO1xuXG4gICAgICAgIHB1YmxpYyBhYnN0cmFjdCByZXZlcnNlKCk7XG5cbiAgICAgICAgcHVibGljIGFkZFRvT2JqZWN0KGVudGl0eU9iamVjdDpFbnRpdHlPYmplY3Qpe1xuICAgICAgICAgICAgc3VwZXIuYWRkVG9PYmplY3QoZW50aXR5T2JqZWN0KTtcblxuICAgICAgICAgICAgdGhpcy50YXJnZXQgPSBlbnRpdHlPYmplY3Q7XG4gICAgICAgICAgICBlbnRpdHlPYmplY3QuYWN0aW9uTWFuYWdlci5hZGRDaGlsZCh0aGlzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyByZW1vdmVGcm9tT2JqZWN0KGVudGl0eU9iamVjdDpFbnRpdHlPYmplY3Qpe1xuICAgICAgICAgICAgc3VwZXIucmVtb3ZlRnJvbU9iamVjdChlbnRpdHlPYmplY3QpO1xuXG4gICAgICAgICAgICBlbnRpdHlPYmplY3QuYWN0aW9uTWFuYWdlci5yZW1vdmVDaGlsZCh0aGlzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBpbml0KCl7XG4gICAgICAgICAgICB0aGlzLnN0YXJ0KCk7XG4gICAgICAgIH1cblxuICAgICAgICBwcm90ZWN0ZWQgZmluaXNoKCl7XG4gICAgICAgICAgICB0aGlzLmlzRmluaXNoID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuc3RvcCgpO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwibW9kdWxlIHdkIHtcbiAgICBleHBvcnQgYWJzdHJhY3QgY2xhc3MgQWN0aW9uSW5zdGFudCBleHRlbmRzIEFjdGlvbiB7XG4gICAgICAgIGdldCBpc1N0b3AoKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBnZXQgaXNQYXVzZSgpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBzdGFydCgpIHtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBzdG9wKCkge1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHBhdXNlKCkge1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHJlc3VtZSgpIHtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsIm1vZHVsZSB3ZCB7XG4gICAgZXhwb3J0IGNsYXNzIENhbGxGdW5jIGV4dGVuZHMgQWN0aW9uSW5zdGFudHtcbiAgICAgICAgcHVibGljIHN0YXRpYyBjcmVhdGUoZnVuYzpGdW5jdGlvbiwgY29udGV4dDphbnksIC4uLmRhdGEpIHtcbiAgICAgICAgICAgIHZhciBkYXRhQXJyID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAyKSxcbiAgICAgICAgICAgICAgICBhY3Rpb24gPSBuZXcgdGhpcyhmdW5jLCBjb250ZXh0LCBkYXRhQXJyKTtcblxuICAgICAgICAgICAgcmV0dXJuIGFjdGlvbjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0cnVjdG9yKGZ1bmM6RnVuY3Rpb24sIGNvbnRleHQ6YW55LCBkYXRhQXJyOkFycmF5PGFueT4pe1xuICAgICAgICAgICAgc3VwZXIoKTtcblxuICAgICAgICAgICAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQgfHwgcm9vdDtcbiAgICAgICAgICAgIHRoaXMuX2NhbGxGdW5jID0gZnVuYztcbiAgICAgICAgICAgIHRoaXMuX2RhdGFBcnIgPSB3ZENiLkNvbGxlY3Rpb24uY3JlYXRlPGFueT4oZGF0YUFycik7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9jb250ZXh0OmFueSA9IG51bGw7XG4gICAgICAgIHByaXZhdGUgX2NhbGxGdW5jOkZ1bmN0aW9uID0gbnVsbDtcbiAgICAgICAgcHJpdmF0ZSBfZGF0YUFycjp3ZENiLkNvbGxlY3Rpb248YW55PiA9IG51bGw7XG5cbiAgICAgICAgcHVibGljIHJldmVyc2UoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICBwdWJsaWMgdXBkYXRlKGVsYXBzZWRUaW1lKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5fY2FsbEZ1bmMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9jYWxsRnVuYy5jYWxsKHRoaXMuX2NvbnRleHQsIHRoaXMucF90YXJnZXQsIHRoaXMuX2RhdGFBcnIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLmZpbmlzaCgpO1xuICAgICAgICB9XG4gICAgICAgIHB1YmxpYyBjb3B5KCkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBDYWxsRnVuYyh0aGlzLl9jb250ZXh0LCB0aGlzLl9jYWxsRnVuYywgdGhpcy5fZGF0YUFyci5jb3B5KHRydWUpLmdldENoaWxkcmVuKCkpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4iLCJtb2R1bGUgd2Qge1xuICAgIGV4cG9ydCBhYnN0cmFjdCBjbGFzcyBBY3Rpb25JbnRlcnZhbCBleHRlbmRzIEFjdGlvbntcbiAgICAgICAgcHJvdGVjdGVkIGVsYXBzZWQ6bnVtYmVyID0gbnVsbDtcbiAgICAgICAgcHJvdGVjdGVkIGR1cmF0aW9uOm51bWJlciA9IG51bGw7XG5cbiAgICAgICAgcHJpdmF0ZSBfaXNTdG9wOmJvb2xlYW4gPSB0cnVlO1xuICAgICAgICBwcml2YXRlIF9pc1BhdXNlOmJvb2xlYW4gPSBmYWxzZTtcbiAgICAgICAgcHJpdmF0ZSBfdGltZUNvbnRyb2xsZXI6Q29tbW9uVGltZUNvbnRyb2xsZXIgPSBDb21tb25UaW1lQ29udHJvbGxlci5jcmVhdGUoKTtcblxuICAgICAgICBnZXQgaXNTdG9wKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2lzU3RvcDtcbiAgICAgICAgfVxuXG4gICAgICAgIGdldCBpc1BhdXNlKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2lzUGF1c2U7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgdXBkYXRlKGVsYXBzZWRUaW1lOm51bWJlcil7XG4gICAgICAgICAgICBpZiAoZWxhcHNlZFRpbWUgPCB0aGlzLl90aW1lQ29udHJvbGxlci5zdGFydFRpbWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuZWxhcHNlZCA9IHRoaXMuX2NvbnZlcnRUb1JhdGlvKHRoaXMuX3RpbWVDb250cm9sbGVyLmNvbXB1dGVFbGFwc2VUaW1lKGVsYXBzZWRUaW1lKSk7XG5cbiAgICAgICAgICAgIHRoaXMudXBkYXRlQm9keShlbGFwc2VkVGltZSk7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLmVsYXBzZWQgPT09IDEpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmZpbmlzaCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHN0YXJ0KCkge1xuICAgICAgICAgICAgdGhpcy5faXNTdG9wID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLl90aW1lQ29udHJvbGxlci5zdGFydCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHN0b3AoKSB7XG4gICAgICAgICAgICB0aGlzLl9pc1N0b3AgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5fdGltZUNvbnRyb2xsZXIuc3RvcCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHJlc2V0KCkge1xuICAgICAgICAgICAgc3VwZXIucmVzZXQoKTtcblxuICAgICAgICAgICAgdGhpcy5faXNTdG9wID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBwYXVzZSgpIHtcbiAgICAgICAgICAgIHRoaXMuX2lzUGF1c2UgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5fdGltZUNvbnRyb2xsZXIucGF1c2UoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyByZXN1bWUoKXtcbiAgICAgICAgICAgIHRoaXMuX2lzUGF1c2UgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuX3RpbWVDb250cm9sbGVyLnJlc3VtZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgQHZpcnR1YWxcbiAgICAgICAgcHJvdGVjdGVkIHVwZGF0ZUJvZHkodGltZTpudW1iZXIpe1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfY29udmVydFRvUmF0aW8oZWxhcHNlZDpudW1iZXIpe1xuICAgICAgICAgICAgdmFyIHJhdGlvID0gZWxhcHNlZCAvIHRoaXMuZHVyYXRpb247XG5cbiAgICAgICAgICAgIHJldHVybiByYXRpbyA+IDEgPyAxIDogcmF0aW87XG4gICAgICAgIH1cbiAgICB9XG59XG5cbiIsIm1vZHVsZSB3ZCB7XG4gICAgZXhwb3J0IGFic3RyYWN0IGNsYXNzIENvbnRyb2wgZXh0ZW5kcyBBY3Rpb25JbnRlcnZhbHtcbiAgICAgICAgc2V0IHRhcmdldCh0YXJnZXQ6RW50aXR5T2JqZWN0KXtcbiAgICAgICAgICAgIHRoaXMucF90YXJnZXQgPSB0YXJnZXQ7XG5cbiAgICAgICAgICAgIHRoaXMuZ2V0SW5uZXJBY3Rpb25zKCkuZm9yRWFjaCgoYWN0aW9uOkFjdGlvbikgPT4ge1xuICAgICAgICAgICAgICAgIGFjdGlvbi50YXJnZXQgPSB0YXJnZXQ7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBhYnN0cmFjdCBnZXRJbm5lckFjdGlvbnMoKTtcblxuICAgICAgICBwdWJsaWMgaW5pdCgpIHtcbiAgICAgICAgICAgIHN1cGVyLmluaXQoKTtcblxuICAgICAgICAgICAgdGhpcy5pdGVyYXRlKFwiaW5pdFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyByZXZlcnNlKCkge1xuICAgICAgICAgICAgdGhpcy5pdGVyYXRlKFwicmV2ZXJzZVwiKTtcblxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgcmVzZXQoKSB7XG4gICAgICAgICAgICBzdXBlci5yZXNldCgpO1xuXG4gICAgICAgICAgICB0aGlzLml0ZXJhdGUoXCJyZXNldFwiKTtcblxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICBwcm90ZWN0ZWQgaXRlcmF0ZShtZXRob2Q6c3RyaW5nLCBhcmdBcnI/OkFycmF5PGFueT4pIHtcbiAgICAgICAgICAgIHRoaXMuZ2V0SW5uZXJBY3Rpb25zKCkuZm9yRWFjaCgoYWN0aW9uKSA9PiB7XG4gICAgICAgICAgICAgICAgYWN0aW9uW21ldGhvZF0uYXBwbHkoYWN0aW9uLCBhcmdBcnIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbiIsIm1vZHVsZSB3ZCB7XG4gICAgZXhwb3J0IGNsYXNzIFNlcXVlbmNlIGV4dGVuZHMgQ29udHJvbHtcbiAgICAgICAgcHVibGljIHN0YXRpYyBjcmVhdGUoLi4uYXJncykge1xuICAgICAgICAgICAgdmFyIHNlcXVlbmNlID0gbnVsbDtcblxuICAgICAgICAgICAgTG9nLmFzc2VydChhcmdzLmxlbmd0aCA+PSAyLCBcIlNlcXVlbmNlIHNob3VsZCBoYXMgdHdvIGFjdGlvbnMgYXQgbGVhc3RcIik7XG5cbiAgICAgICAgICAgIHNlcXVlbmNlID0gbmV3IHRoaXMoYXJncyk7XG5cbiAgICAgICAgICAgIHNlcXVlbmNlLmluaXRXaGVuQ3JlYXRlKCk7XG5cbiAgICAgICAgICAgIHJldHVybiBzZXF1ZW5jZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0cnVjdG9yKGFjdGlvbkFycjpBcnJheTxBY3Rpb24+KXtcbiAgICAgICAgICAgIHN1cGVyKCk7XG5cbiAgICAgICAgICAgIHRoaXMuX2FjdGlvbnMuYWRkQ2hpbGRyZW4oYWN0aW9uQXJyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX2FjdGlvbnM6d2RDYi5Db2xsZWN0aW9uPEFjdGlvbj4gPSB3ZENiLkNvbGxlY3Rpb24uY3JlYXRlPEFjdGlvbj4oKTtcbiAgICAgICAgcHJpdmF0ZSBfY3VycmVudEFjdGlvbjpBY3Rpb24gPSBudWxsO1xuICAgICAgICBwcml2YXRlIF9hY3Rpb25JbmRleDpudW1iZXIgPSAwO1xuXG4gICAgICAgIHB1YmxpYyBpbml0V2hlbkNyZWF0ZSgpIHtcbiAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRBY3Rpb24gPSB0aGlzLl9hY3Rpb25zLmdldENoaWxkKDApO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHVwZGF0ZShlbGFwc2VkVGltZSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2FjdGlvbkluZGV4ID09PSB0aGlzLl9hY3Rpb25zLmdldENvdW50KCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmZpbmlzaCgpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5fY3VycmVudEFjdGlvbiA9IHRoaXMuX2FjdGlvbnMuZ2V0Q2hpbGQodGhpcy5fYWN0aW9uSW5kZXgpO1xuXG4gICAgICAgICAgICBpZih0aGlzLl9jdXJyZW50QWN0aW9uLmlzRmluaXNoKXtcbiAgICAgICAgICAgICAgICB0aGlzLl9zdGFydE5leHRBY3Rpb25BbmRKdWRnZUZpbmlzaCgpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLl9jdXJyZW50QWN0aW9uLnVwZGF0ZShlbGFwc2VkVGltZSk7XG5cbiAgICAgICAgICAgIGlmKHRoaXMuX2N1cnJlbnRBY3Rpb24uaXNGaW5pc2gpe1xuICAgICAgICAgICAgICAgIHRoaXMuX3N0YXJ0TmV4dEFjdGlvbkFuZEp1ZGdlRmluaXNoKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGNvcHkoKSB7XG4gICAgICAgICAgICB2YXIgYWN0aW9uQXJyID0gW107XG5cbiAgICAgICAgICAgIHRoaXMuX2FjdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgYWN0aW9uQXJyLnB1c2goYWN0aW9uLmNvcHkoKSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmV0dXJuIFNlcXVlbmNlLmNyZWF0ZS5hcHBseShTZXF1ZW5jZSwgYWN0aW9uQXJyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyByZXNldCgpIHtcbiAgICAgICAgICAgIHN1cGVyLnJlc2V0KCk7XG5cbiAgICAgICAgICAgIHRoaXMuX2FjdGlvbkluZGV4ID0gMDtcbiAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRBY3Rpb24gPSB0aGlzLl9hY3Rpb25zLmdldENoaWxkKHRoaXMuX2FjdGlvbkluZGV4KTtcblxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgc3RhcnQoKSB7XG4gICAgICAgICAgICBzdXBlci5zdGFydCgpO1xuXG4gICAgICAgICAgICB0aGlzLl9jdXJyZW50QWN0aW9uLnN0YXJ0KCk7XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHN0b3AoKSB7XG4gICAgICAgICAgICBzdXBlci5zdG9wKCk7XG5cbiAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRBY3Rpb24uc3RvcCgpO1xuXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBwYXVzZSgpIHtcbiAgICAgICAgICAgIHN1cGVyLnBhdXNlKCk7XG5cbiAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRBY3Rpb24ucGF1c2UoKTtcblxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgcmVzdW1lKCkge1xuICAgICAgICAgICAgc3VwZXIucmVzdW1lKCk7XG5cbiAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRBY3Rpb24ucmVzdW1lKCk7XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHJldmVyc2UoKSB7XG4gICAgICAgICAgICB0aGlzLl9hY3Rpb25zID0gdGhpcy5fYWN0aW9ucy5yZXZlcnNlKCk7XG5cbiAgICAgICAgICAgIHN1cGVyLnJldmVyc2UoKTtcblxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgZ2V0SW5uZXJBY3Rpb25zKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2FjdGlvbnM7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9zdGFydE5leHRBY3Rpb25BbmRKdWRnZUZpbmlzaCgpe1xuICAgICAgICAgICAgdGhpcy5fYWN0aW9uSW5kZXggKys7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLl9hY3Rpb25JbmRleCA9PT0gdGhpcy5fYWN0aW9ucy5nZXRDb3VudCgpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5maW5pc2goKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuX2FjdGlvbnMuZ2V0Q2hpbGQodGhpcy5fYWN0aW9uSW5kZXgpLnN0YXJ0KCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbiIsIm1vZHVsZSB3ZCB7XG4gICAgZXhwb3J0IGNsYXNzIFNwYXduIGV4dGVuZHMgQ29udHJvbHtcbiAgICAgICAgcHVibGljIHN0YXRpYyBjcmVhdGUoLi4uYXJncykge1xuICAgICAgICAgICAgdmFyIHNwYXduID0gbnVsbDtcblxuICAgICAgICAgICAgTG9nLmFzc2VydChhcmdzLmxlbmd0aCA+PSAyLCBcIlNlcXVlbmNlIHNob3VsZCBoYXMgdHdvIGFjdGlvbnMgYXQgbGVhc3RcIik7XG5cbiAgICAgICAgICAgIHNwYXduID0gbmV3IHRoaXMoYXJncyk7XG5cbiAgICAgICAgICAgIHJldHVybiBzcGF3bjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0cnVjdG9yKGFjdGlvbkFycjpBcnJheTxBY3Rpb24+KXtcbiAgICAgICAgICAgIHN1cGVyKCk7XG5cbiAgICAgICAgICAgIHRoaXMuX2FjdGlvbnMuYWRkQ2hpbGRyZW4oYWN0aW9uQXJyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX2FjdGlvbnM6d2RDYi5Db2xsZWN0aW9uPEFjdGlvbj4gPSB3ZENiLkNvbGxlY3Rpb24uY3JlYXRlPEFjdGlvbj4oKTtcblxuICAgICAgICBwdWJsaWMgdXBkYXRlKGVsYXBzZWRUaW1lKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5faXNGaW5pc2goKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZmluaXNoKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLml0ZXJhdGUoXCJ1cGRhdGVcIiwgW2VsYXBzZWRUaW1lXSk7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLl9pc0ZpbmlzaCgpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5maW5pc2goKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBzdGFydCgpIHtcbiAgICAgICAgICAgIHN1cGVyLnN0YXJ0KCk7XG5cbiAgICAgICAgICAgIHRoaXMuaXRlcmF0ZShcInN0YXJ0XCIpO1xuXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBzdG9wKCkge1xuICAgICAgICAgICAgc3VwZXIuc3RvcCgpO1xuXG4gICAgICAgICAgICB0aGlzLml0ZXJhdGUoXCJzdG9wXCIpO1xuXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBwYXVzZSgpIHtcbiAgICAgICAgICAgIHN1cGVyLnBhdXNlKCk7XG5cbiAgICAgICAgICAgIHRoaXMuaXRlcmF0ZShcInBhdXNlXCIpO1xuXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyByZXN1bWUoKSB7XG4gICAgICAgICAgICBzdXBlci5yZXN1bWUoKTtcblxuICAgICAgICAgICAgdGhpcy5pdGVyYXRlKFwicmVzdW1lXCIpO1xuXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBjb3B5KCkge1xuICAgICAgICAgICAgdmFyIGFjdGlvbnMgPSBbXTtcblxuICAgICAgICAgICAgdGhpcy5fYWN0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICAgICAgICAgICAgICBhY3Rpb25zLnB1c2goYWN0aW9uLmNvcHkoKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBTcGF3bi5jcmVhdGUuYXBwbHkoU3Bhd24sIGFjdGlvbnMpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHJlc2V0KCkge1xuICAgICAgICAgICAgc3VwZXIucmVzZXQoKTtcblxuICAgICAgICAgICAgdGhpcy5pdGVyYXRlKFwicmVzZXRcIik7XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHJldmVyc2UoKSB7XG4gICAgICAgICAgICB0aGlzLl9hY3Rpb25zID0gdGhpcy5fYWN0aW9ucy5yZXZlcnNlKCk7XG5cbiAgICAgICAgICAgIHN1cGVyLnJldmVyc2UoKTtcblxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgZ2V0SW5uZXJBY3Rpb25zKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2FjdGlvbnM7XG4gICAgICAgIH1cblxuICAgICAgICBwcm90ZWN0ZWQgaXRlcmF0ZShtZXRob2Q6c3RyaW5nLCBhcmdBcnI/OkFycmF5PGFueT4pIHtcbiAgICAgICAgICAgIHRoaXMuX2FjdGlvbnMuZm9yRWFjaCgoYWN0aW9uOkFjdGlvbikgPT4ge1xuICAgICAgICAgICAgICAgIGFjdGlvblttZXRob2RdLmFwcGx5KGFjdGlvbiwgYXJnQXJyKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfaXNGaW5pc2goKSB7XG4gICAgICAgICAgICB2YXIgaXNGaW5pc2ggPSB0cnVlO1xuXG4gICAgICAgICAgICB0aGlzLl9hY3Rpb25zLmZvckVhY2goKGFjdGlvbjpBY3Rpb24pID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIWFjdGlvbi5pc0ZpbmlzaCkge1xuICAgICAgICAgICAgICAgICAgICBpc0ZpbmlzaCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gd2RDYi4kQlJFQUs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHJldHVybiBpc0ZpbmlzaDtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuIiwibW9kdWxlIHdkIHtcbiAgICBleHBvcnQgY2xhc3MgRGVsYXlUaW1lIGV4dGVuZHMgQWN0aW9uSW50ZXJ2YWwge1xuICAgICAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZShkZWxheVRpbWU6bnVtYmVyKSB7XG4gICAgICAgICAgICB2YXIgYWN0aW9uID0gbmV3IHRoaXMoZGVsYXlUaW1lKTtcblxuICAgICAgICAgICAgcmV0dXJuIGFjdGlvbjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0cnVjdG9yKGRlbGF5VGltZTpudW1iZXIpIHtcbiAgICAgICAgICAgIHN1cGVyKCk7XG5cbiAgICAgICAgICAgIHRoaXMuZHVyYXRpb24gPSBkZWxheVRpbWU7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgcmV2ZXJzZSgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGNvcHkoKSB7XG4gICAgICAgICAgICByZXR1cm4gRGVsYXlUaW1lLmNyZWF0ZSh0aGlzLmR1cmF0aW9uKTtcbiAgICAgICAgfVxuXG4gICAgfVxufVxuXG4iLCJtb2R1bGUgd2Qge1xuICAgIGV4cG9ydCBjbGFzcyBSZXBlYXQgZXh0ZW5kcyBDb250cm9sIHtcbiAgICAgICAgcHVibGljIHN0YXRpYyBjcmVhdGUoYWN0aW9uOkFjdGlvbiwgdGltZXM6bnVtYmVyKSB7XG4gICAgICAgICAgICB2YXIgcmVwZWF0ID0gbmV3IHRoaXMoYWN0aW9uLCB0aW1lcyk7XG5cbiAgICAgICAgICAgIHJlcGVhdC5pbml0V2hlbkNyZWF0ZSgpO1xuXG4gICAgICAgICAgICByZXR1cm4gcmVwZWF0O1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3RydWN0b3IoYWN0aW9uOkFjdGlvbiwgdGltZXM6bnVtYmVyKSB7XG4gICAgICAgICAgICBzdXBlcigpO1xuXG4gICAgICAgICAgICB0aGlzLl9pbm5lckFjdGlvbiA9IGFjdGlvbjtcbiAgICAgICAgICAgIHRoaXMuX3RpbWVzID0gdGltZXM7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9pbm5lckFjdGlvbjpBY3Rpb24gPSBudWxsO1xuICAgICAgICBwcml2YXRlIF9vcmlnaW5UaW1lczpudW1iZXIgPSBudWxsO1xuICAgICAgICBwcml2YXRlIF90aW1lczpudW1iZXIgPSBudWxsO1xuXG4gICAgICAgIHB1YmxpYyBpbml0V2hlbkNyZWF0ZSgpIHtcbiAgICAgICAgICAgIHRoaXMuX29yaWdpblRpbWVzID0gdGhpcy5fdGltZXM7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgdXBkYXRlKGVsYXBzZWRUaW1lKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5fdGltZXMgPT09IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLmZpbmlzaCgpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5faW5uZXJBY3Rpb24udXBkYXRlKGVsYXBzZWRUaW1lKTtcblxuICAgICAgICAgICAgaWYgKHRoaXMuX2lubmVyQWN0aW9uLmlzRmluaXNoKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdGltZXMgLT0gMTtcblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl90aW1lcyAhPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9pbm5lckFjdGlvbi5yZXNldCgpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9pbm5lckFjdGlvbi5zdGFydCgpO1xuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5maW5pc2goKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBjb3B5KCkge1xuICAgICAgICAgICAgcmV0dXJuIFJlcGVhdC5jcmVhdGUodGhpcy5faW5uZXJBY3Rpb24uY29weSgpLCB0aGlzLl90aW1lcyk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgcmVzZXQoKSB7XG4gICAgICAgICAgICBzdXBlci5yZXNldCgpO1xuXG4gICAgICAgICAgICB0aGlzLl90aW1lcyA9IHRoaXMuX29yaWdpblRpbWVzO1xuXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBzdGFydCgpIHtcbiAgICAgICAgICAgIHN1cGVyLnN0YXJ0KCk7XG5cbiAgICAgICAgICAgIHRoaXMuX2lubmVyQWN0aW9uLnN0YXJ0KCk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgc3RvcCgpIHtcbiAgICAgICAgICAgIHN1cGVyLnN0b3AoKTtcblxuICAgICAgICAgICAgdGhpcy5faW5uZXJBY3Rpb24uc3RvcCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHBhdXNlKCkge1xuICAgICAgICAgICAgc3VwZXIucGF1c2UoKTtcblxuICAgICAgICAgICAgdGhpcy5faW5uZXJBY3Rpb24ucGF1c2UoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyByZXN1bWUoKSB7XG4gICAgICAgICAgICBzdXBlci5yZXN1bWUoKTtcblxuICAgICAgICAgICAgdGhpcy5faW5uZXJBY3Rpb24ucmVzdW1lKCk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgZ2V0SW5uZXJBY3Rpb25zKCkge1xuICAgICAgICAgICAgcmV0dXJuIHdkQ2IuQ29sbGVjdGlvbi5jcmVhdGU8QWN0aW9uPihbdGhpcy5faW5uZXJBY3Rpb25dKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuIiwibW9kdWxlIHdkIHtcbiAgICBleHBvcnQgY2xhc3MgUmVwZWF0Rm9yZXZlciBleHRlbmRzIENvbnRyb2wge1xuICAgICAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZShhY3Rpb246QWN0aW9uKSB7XG4gICAgICAgICAgICB2YXIgcmVwZWF0ID0gbmV3IHRoaXMoYWN0aW9uKTtcblxuICAgICAgICAgICAgcmV0dXJuIHJlcGVhdDtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0cnVjdG9yKGFjdGlvbjpBY3Rpb24pIHtcbiAgICAgICAgICAgIHN1cGVyKCk7XG5cbiAgICAgICAgICAgIHRoaXMuX2lubmVyQWN0aW9uID0gYWN0aW9uO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfaW5uZXJBY3Rpb246QWN0aW9uID0gbnVsbDtcblxuICAgICAgICBwdWJsaWMgdXBkYXRlKGVsYXBzZWRUaW1lKSB7XG4gICAgICAgICAgICB0aGlzLl9pbm5lckFjdGlvbi51cGRhdGUoZWxhcHNlZFRpbWUpO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5faW5uZXJBY3Rpb24uaXNGaW5pc2gpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9pbm5lckFjdGlvbi5yZXNldCgpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2lubmVyQWN0aW9uLnN0YXJ0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgY29weSgpIHtcbiAgICAgICAgICAgIHJldHVybiBSZXBlYXRGb3JldmVyLmNyZWF0ZSh0aGlzLl9pbm5lckFjdGlvbi5jb3B5KCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHN0YXJ0KCkge1xuICAgICAgICAgICAgc3VwZXIuc3RhcnQoKTtcblxuICAgICAgICAgICAgdGhpcy5faW5uZXJBY3Rpb24uc3RhcnQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBzdG9wKCkge1xuICAgICAgICAgICAgc3VwZXIuc3RvcCgpO1xuXG4gICAgICAgICAgICB0aGlzLl9pbm5lckFjdGlvbi5zdG9wKCk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgcGF1c2UoKSB7XG4gICAgICAgICAgICBzdXBlci5wYXVzZSgpO1xuXG4gICAgICAgICAgICB0aGlzLl9pbm5lckFjdGlvbi5wYXVzZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHJlc3VtZSgpIHtcbiAgICAgICAgICAgIHN1cGVyLnJlc3VtZSgpO1xuXG4gICAgICAgICAgICB0aGlzLl9pbm5lckFjdGlvbi5yZXN1bWUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBnZXRJbm5lckFjdGlvbnMoKSB7XG4gICAgICAgICAgICByZXR1cm4gd2RDYi5Db2xsZWN0aW9uLmNyZWF0ZTxBY3Rpb24+KFt0aGlzLl9pbm5lckFjdGlvbl0pO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4iLCJtb2R1bGUgd2Qge1xuICAgIGRlY2xhcmUgdmFyIE1hdGg6YW55O1xuXG4gICAgLyohIHJlZmVyZW5jZWQgZnJvbTpcbiAgICAgaHR0cHM6Ly9naXRodWIuY29tL3R3ZWVuanMvdHdlZW4uanNcbiAgICAgKi9cbiAgICBleHBvcnQgY2xhc3MgVHdlZW4gZXh0ZW5kcyBBY3Rpb25JbnRlcnZhbCB7XG4gICAgICAgIHB1YmxpYyBzdGF0aWMgRWFzaW5nID0ge1xuICAgICAgICAgICAgTGluZWFyOiB7XG5cbiAgICAgICAgICAgICAgICBOb25lOiBmdW5jdGlvbiAoaykge1xuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBrO1xuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBRdWFkcmF0aWM6IHtcblxuICAgICAgICAgICAgICAgIEluOiBmdW5jdGlvbiAoaykge1xuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBrICogaztcblxuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICBPdXQ6IGZ1bmN0aW9uIChrKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGsgKiAoIDIgLSBrICk7XG5cbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgSW5PdXQ6IGZ1bmN0aW9uIChrKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCggayAqPSAyICkgPCAxKSByZXR1cm4gMC41ICogayAqIGs7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAtMC41ICogKCAtLWsgKiAoIGsgLSAyICkgLSAxICk7XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIEN1YmljOiB7XG5cbiAgICAgICAgICAgICAgICBJbjogZnVuY3Rpb24gKGspIHtcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gayAqIGsgKiBrO1xuXG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIE91dDogZnVuY3Rpb24gKGspIHtcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gLS1rICogayAqIGsgKyAxO1xuXG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIEluT3V0OiBmdW5jdGlvbiAoaykge1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICgoIGsgKj0gMiApIDwgMSkgcmV0dXJuIDAuNSAqIGsgKiBrICogaztcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDAuNSAqICggKCBrIC09IDIgKSAqIGsgKiBrICsgMiApO1xuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBRdWFydGljOiB7XG5cbiAgICAgICAgICAgICAgICBJbjogZnVuY3Rpb24gKGspIHtcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gayAqIGsgKiBrICogaztcblxuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICBPdXQ6IGZ1bmN0aW9uIChrKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDEgLSAoIC0tayAqIGsgKiBrICogayApO1xuXG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIEluT3V0OiBmdW5jdGlvbiAoaykge1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICgoIGsgKj0gMiApIDwgMSkgcmV0dXJuIDAuNSAqIGsgKiBrICogayAqIGs7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAtMC41ICogKCAoIGsgLT0gMiApICogayAqIGsgKiBrIC0gMiApO1xuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBRdWludGljOiB7XG5cbiAgICAgICAgICAgICAgICBJbjogZnVuY3Rpb24gKGspIHtcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gayAqIGsgKiBrICogayAqIGs7XG5cbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgT3V0OiBmdW5jdGlvbiAoaykge1xuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAtLWsgKiBrICogayAqIGsgKiBrICsgMTtcblxuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICBJbk91dDogZnVuY3Rpb24gKGspIHtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoKCBrICo9IDIgKSA8IDEpIHJldHVybiAwLjUgKiBrICogayAqIGsgKiBrICogaztcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDAuNSAqICggKCBrIC09IDIgKSAqIGsgKiBrICogayAqIGsgKyAyICk7XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIFNpbnVzb2lkYWw6IHtcblxuICAgICAgICAgICAgICAgIEluOiBmdW5jdGlvbiAoaykge1xuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAxIC0gTWF0aC5jb3MoayAqIE1hdGguUEkgLyAyKTtcblxuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICBPdXQ6IGZ1bmN0aW9uIChrKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE1hdGguc2luKGsgKiBNYXRoLlBJIC8gMik7XG5cbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgSW5PdXQ6IGZ1bmN0aW9uIChrKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDAuNSAqICggMSAtIE1hdGguY29zKE1hdGguUEkgKiBrKSApO1xuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBFeHBvbmVudGlhbDoge1xuXG4gICAgICAgICAgICAgICAgSW46IGZ1bmN0aW9uIChrKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGsgPT09IDAgPyAwIDogTWF0aC5wb3coMTAyNCwgayAtIDEpO1xuXG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIE91dDogZnVuY3Rpb24gKGspIHtcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gayA9PT0gMSA/IDEgOiAxIC0gTWF0aC5wb3coMiwgLTEwICogayk7XG5cbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgSW5PdXQ6IGZ1bmN0aW9uIChrKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGsgPT09IDApIHJldHVybiAwO1xuICAgICAgICAgICAgICAgICAgICBpZiAoayA9PT0gMSkgcmV0dXJuIDE7XG4gICAgICAgICAgICAgICAgICAgIGlmICgoIGsgKj0gMiApIDwgMSkgcmV0dXJuIDAuNSAqIE1hdGgucG93KDEwMjQsIGsgLSAxKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDAuNSAqICggLU1hdGgucG93KDIsIC0xMCAqICggayAtIDEgKSkgKyAyICk7XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIENpcmN1bGFyOiB7XG5cbiAgICAgICAgICAgICAgICBJbjogZnVuY3Rpb24gKGspIHtcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gMSAtIE1hdGguc3FydCgxIC0gayAqIGspO1xuXG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIE91dDogZnVuY3Rpb24gKGspIHtcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gTWF0aC5zcXJ0KDEgLSAoIC0tayAqIGsgKSk7XG5cbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgSW5PdXQ6IGZ1bmN0aW9uIChrKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCggayAqPSAyICkgPCAxKSByZXR1cm4gLTAuNSAqICggTWF0aC5zcXJ0KDEgLSBrICogaykgLSAxKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDAuNSAqICggTWF0aC5zcXJ0KDEgLSAoIGsgLT0gMikgKiBrKSArIDEpO1xuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBFbGFzdGljOiB7XG5cbiAgICAgICAgICAgICAgICBJbjogZnVuY3Rpb24gKGspIHtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgcywgYSA9IDAuMSwgcCA9IDAuNDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGsgPT09IDApIHJldHVybiAwO1xuICAgICAgICAgICAgICAgICAgICBpZiAoayA9PT0gMSkgcmV0dXJuIDE7XG4gICAgICAgICAgICAgICAgICAgIGlmICghYSB8fCBhIDwgMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYSA9IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICBzID0gcCAvIDQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBzID0gcCAqIE1hdGguYXNpbigxIC8gYSkgLyAoIDIgKiBNYXRoLlBJICk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAtKCBhICogTWF0aC5wb3coMiwgMTAgKiAoIGsgLT0gMSApKSAqIE1hdGguc2luKCggayAtIHMgKSAqICggMiAqIE1hdGguUEkgKSAvIHApICk7XG5cbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgT3V0OiBmdW5jdGlvbiAoaykge1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBzLCBhID0gMC4xLCBwID0gMC40O1xuICAgICAgICAgICAgICAgICAgICBpZiAoayA9PT0gMCkgcmV0dXJuIDA7XG4gICAgICAgICAgICAgICAgICAgIGlmIChrID09PSAxKSByZXR1cm4gMTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFhIHx8IGEgPCAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhID0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHMgPSBwIC8gNDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHMgPSBwICogTWF0aC5hc2luKDEgLyBhKSAvICggMiAqIE1hdGguUEkgKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICggYSAqIE1hdGgucG93KDIsIC0xMCAqIGspICogTWF0aC5zaW4oKCBrIC0gcyApICogKCAyICogTWF0aC5QSSApIC8gcCkgKyAxICk7XG5cbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgSW5PdXQ6IGZ1bmN0aW9uIChrKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIHMsIGEgPSAwLjEsIHAgPSAwLjQ7XG4gICAgICAgICAgICAgICAgICAgIGlmIChrID09PSAwKSByZXR1cm4gMDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGsgPT09IDEpIHJldHVybiAxO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWEgfHwgYSA8IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGEgPSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgcyA9IHAgLyA0O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgcyA9IHAgKiBNYXRoLmFzaW4oMSAvIGEpIC8gKCAyICogTWF0aC5QSSApO1xuICAgICAgICAgICAgICAgICAgICBpZiAoKCBrICo9IDIgKSA8IDEpIHJldHVybiAtMC41ICogKCBhICogTWF0aC5wb3coMiwgMTAgKiAoIGsgLT0gMSApKSAqIE1hdGguc2luKCggayAtIHMgKSAqICggMiAqIE1hdGguUEkgKSAvIHApICk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhICogTWF0aC5wb3coMiwgLTEwICogKCBrIC09IDEgKSkgKiBNYXRoLnNpbigoIGsgLSBzICkgKiAoIDIgKiBNYXRoLlBJICkgLyBwKSAqIDAuNSArIDE7XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIEJhY2s6IHtcblxuICAgICAgICAgICAgICAgIEluOiBmdW5jdGlvbiAoaykge1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBzID0gMS43MDE1ODtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGsgKiBrICogKCAoIHMgKyAxICkgKiBrIC0gcyApO1xuXG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIE91dDogZnVuY3Rpb24gKGspIHtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgcyA9IDEuNzAxNTg7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAtLWsgKiBrICogKCAoIHMgKyAxICkgKiBrICsgcyApICsgMTtcblxuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICBJbk91dDogZnVuY3Rpb24gKGspIHtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgcyA9IDEuNzAxNTggKiAxLjUyNTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCggayAqPSAyICkgPCAxKSByZXR1cm4gMC41ICogKCBrICogayAqICggKCBzICsgMSApICogayAtIHMgKSApO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gMC41ICogKCAoIGsgLT0gMiApICogayAqICggKCBzICsgMSApICogayArIHMgKSArIDIgKTtcblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgQm91bmNlOiB7XG5cbiAgICAgICAgICAgICAgICBJbjogZnVuY3Rpb24gKGspIHtcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gMSAtIFR3ZWVuLkVhc2luZy5Cb3VuY2UuT3V0KDEgLSBrKTtcblxuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICBPdXQ6IGZ1bmN0aW9uIChrKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGsgPCAoIDEgLyAyLjc1ICkpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDcuNTYyNSAqIGsgKiBrO1xuXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoayA8ICggMiAvIDIuNzUgKSkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gNy41NjI1ICogKCBrIC09ICggMS41IC8gMi43NSApICkgKiBrICsgMC43NTtcblxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGsgPCAoIDIuNSAvIDIuNzUgKSkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gNy41NjI1ICogKCBrIC09ICggMi4yNSAvIDIuNzUgKSApICogayArIDAuOTM3NTtcblxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gNy41NjI1ICogKCBrIC09ICggMi42MjUgLyAyLjc1ICkgKSAqIGsgKyAwLjk4NDM3NTtcblxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgSW5PdXQ6IGZ1bmN0aW9uIChrKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGsgPCAwLjUpIHJldHVybiBUd2Vlbi5FYXNpbmcuQm91bmNlLkluKGsgKiAyKSAqIDAuNTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFR3ZWVuLkVhc2luZy5Cb3VuY2UuT3V0KGsgKiAyIC0gMSkgKiAwLjUgKyAwLjU7XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9O1xuXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgSW50ZXJwb2xhdGlvbiA9IHtcbiAgICAgICAgICAgIExpbmVhcjogZnVuY3Rpb24gKHYsIGspIHtcblxuICAgICAgICAgICAgICAgIHZhciBtID0gdi5sZW5ndGggLSAxLCBmID0gbSAqIGssIGkgPSBNYXRoLmZsb29yKGYpLCBmbiA9IFR3ZWVuLkludGVycG9sYXRpb24uVXRpbHMuTGluZWFyO1xuXG4gICAgICAgICAgICAgICAgaWYgKGsgPCAwKSByZXR1cm4gZm4odlswXSwgdlsxXSwgZik7XG4gICAgICAgICAgICAgICAgaWYgKGsgPiAxKSByZXR1cm4gZm4odlttXSwgdlttIC0gMV0sIG0gLSBmKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBmbih2W2ldLCB2W2kgKyAxID4gbSA/IG0gOiBpICsgMV0sIGYgLSBpKTtcblxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgQmV6aWVyOiBmdW5jdGlvbiAodiwgaykge1xuXG4gICAgICAgICAgICAgICAgdmFyIGIgPSAwLCBuID0gdi5sZW5ndGggLSAxLCBwdyA9IE1hdGgucG93LCBibiA9IFR3ZWVuLkludGVycG9sYXRpb24uVXRpbHMuQmVybnN0ZWluLCBpO1xuXG4gICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8PSBuOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgYiArPSBwdygxIC0gaywgbiAtIGkpICogcHcoaywgaSkgKiB2W2ldICogYm4obiwgaSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGI7XG5cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIENhdG11bGxSb206IGZ1bmN0aW9uICh2LCBrKSB7XG5cbiAgICAgICAgICAgICAgICB2YXIgbSA9IHYubGVuZ3RoIC0gMSwgZiA9IG0gKiBrLCBpID0gTWF0aC5mbG9vcihmKSwgZm4gPSBUd2Vlbi5JbnRlcnBvbGF0aW9uLlV0aWxzLkNhdG11bGxSb207XG5cbiAgICAgICAgICAgICAgICBpZiAodlswXSA9PT0gdlttXSkge1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChrIDwgMCkgaSA9IE1hdGguZmxvb3IoZiA9IG0gKiAoIDEgKyBrICkpO1xuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmbih2WyggaSAtIDEgKyBtICkgJSBtXSwgdltpXSwgdlsoIGkgKyAxICkgJSBtXSwgdlsoIGkgKyAyICkgJSBtXSwgZiAtIGkpO1xuXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoayA8IDApIHJldHVybiB2WzBdIC0gKCBmbih2WzBdLCB2WzBdLCB2WzFdLCB2WzFdLCAtZikgLSB2WzBdICk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChrID4gMSkgcmV0dXJuIHZbbV0gLSAoIGZuKHZbbV0sIHZbbV0sIHZbbSAtIDFdLCB2W20gLSAxXSwgZiAtIG0pIC0gdlttXSApO1xuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmbih2W2kgPyBpIC0gMSA6IDBdLCB2W2ldLCB2W20gPCBpICsgMSA/IG0gOiBpICsgMV0sIHZbbSA8IGkgKyAyID8gbSA6IGkgKyAyXSwgZiAtIGkpO1xuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBVdGlsczoge1xuXG4gICAgICAgICAgICAgICAgTGluZWFyOiBmdW5jdGlvbiAocDAsIHAxLCB0KSB7XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICggcDEgLSBwMCApICogdCArIHAwO1xuXG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIEJlcm5zdGVpbjogZnVuY3Rpb24gKG4sIGkpIHtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgZmMgPSBUd2Vlbi5JbnRlcnBvbGF0aW9uLlV0aWxzLkZhY3RvcmlhbDtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZjKG4pIC8gZmMoaSkgLyBmYyhuIC0gaSk7XG5cbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgRmFjdG9yaWFsOiAoZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBhID0gWzFdO1xuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAobikge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcyA9IDEsIGk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYVtuXSkgcmV0dXJuIGFbbl07XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSBuOyBpID4gMTsgaS0tKSBzICo9IGk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYVtuXSA9IHM7XG5cbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIH0pKCksXG5cbiAgICAgICAgICAgICAgICBDYXRtdWxsUm9tOiBmdW5jdGlvbiAocDAsIHAxLCBwMiwgcDMsIHQpIHtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgdjAgPSAoIHAyIC0gcDAgKSAqIDAuNSwgdjEgPSAoIHAzIC0gcDEgKSAqIDAuNSwgdDIgPSB0ICogdCwgdDMgPSB0ICogdDI7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoIDIgKiBwMSAtIDIgKiBwMiArIHYwICsgdjEgKSAqIHQzICsgKCAtMyAqIHAxICsgMyAqIHAyIC0gMiAqIHYwIC0gdjEgKSAqIHQyICsgdjAgKiB0ICsgcDE7XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9O1xuXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlKCkge1xuICAgICAgICAgICAgdmFyIG9iaiA9IG5ldyB0aGlzKCk7XG5cbiAgICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9vYmplY3Q6d2RDYi5IYXNoPGFueT4gPSBudWxsO1xuICAgICAgICBwcml2YXRlIF92YWx1ZXNTdGFydDp3ZENiLkhhc2g8YW55PiA9IHdkQ2IuSGFzaC5jcmVhdGU8YW55PigpO1xuICAgICAgICBwcml2YXRlIF92YWx1ZXNFbmQ6d2RDYi5IYXNoPGFueT4gPSB3ZENiLkhhc2guY3JlYXRlPGFueT4oKTtcbiAgICAgICAgcHJpdmF0ZSBfZWFzaW5nRnVuY3Rpb24gPSBUd2Vlbi5FYXNpbmcuTGluZWFyLk5vbmU7XG4gICAgICAgIHByaXZhdGUgX2ludGVycG9sYXRpb25GdW5jdGlvbiA9IFR3ZWVuLkludGVycG9sYXRpb24uTGluZWFyO1xuICAgICAgICBwcml2YXRlIF9vblN0YXJ0Q2FsbGJhY2sgPSBudWxsO1xuICAgICAgICBwcml2YXRlIF9vblN0YXJ0Q2FsbGJhY2tGaXJlZCA9IGZhbHNlO1xuICAgICAgICBwcml2YXRlIF9vblVwZGF0ZUNhbGxiYWNrID0gbnVsbDtcbiAgICAgICAgcHJpdmF0ZSBfb25GaW5pc2hDYWxsYmFjayA9IG51bGw7XG4gICAgICAgIHByaXZhdGUgX29uU3RvcENhbGxiYWNrID0gbnVsbDtcblxuICAgICAgICBwcm90ZWN0ZWQgdXBkYXRlQm9keSh0aW1lOm51bWJlcikge1xuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzLFxuICAgICAgICAgICAgICAgIGVhc2VWYWx1ZSA9IG51bGw7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLl9vblN0YXJ0Q2FsbGJhY2tGaXJlZCA9PT0gZmFsc2UpIHtcblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9vblN0YXJ0Q2FsbGJhY2sgIT09IG51bGwpIHtcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9vblN0YXJ0Q2FsbGJhY2suY2FsbCh0aGlzLl9vYmplY3QuZ2V0Q2hpbGRyZW4oKSk7XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0aGlzLl9vblN0YXJ0Q2FsbGJhY2tGaXJlZCA9IHRydWU7XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZWFzZVZhbHVlID0gdGhpcy5fZWFzaW5nRnVuY3Rpb24odGhpcy5lbGFwc2VkKTtcblxuICAgICAgICAgICAgdGhpcy5fdmFsdWVzRW5kLmZvckVhY2goKHZhbHVlOmFueSwga2V5OnN0cmluZykgPT4ge1xuICAgICAgICAgICAgICAgIHZhciBzdGFydCA9IHNlbGYuX3ZhbHVlc1N0YXJ0LmdldENoaWxkKGtleSksXG4gICAgICAgICAgICAgICAgICAgIGVuZCA9IHZhbHVlO1xuXG4gICAgICAgICAgICAgICAgaWYgKGVuZCBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuX29iamVjdC5zZXRWYWx1ZShrZXksIHNlbGYuX2ludGVycG9sYXRpb25GdW5jdGlvbihlbmQsIGVhc2VWYWx1ZSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gUGFyc2VzIHJlbGF0aXZlIGVuZCB2YWx1ZXMgd2l0aCBzdGFydCBhcyBiYXNlIChlLmcuOiArMTAsIC0zKVxuICAgICAgICAgICAgICAgICAgICBpZiAoSnVkZ2VVdGlscy5pc1N0cmluZyhlbmQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbmQgPSBzdGFydCArIHJvb3QucGFyc2VGbG9hdChlbmQsIDEwKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIC8vIHByb3RlY3QgYWdhaW5zdCBub24gbnVtZXJpYyBwcm9wZXJ0aWVzLlxuICAgICAgICAgICAgICAgICAgICBpZiAoSnVkZ2VVdGlscy5pc051bWJlcihlbmQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLl9vYmplY3Quc2V0VmFsdWUoa2V5LCBzdGFydCArICggZW5kIC0gc3RhcnQgKSAqIGVhc2VWYWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuXG4gICAgICAgICAgICBpZiAoIHRoaXMuX29uVXBkYXRlQ2FsbGJhY2sgIT09IG51bGwgKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fb25VcGRhdGVDYWxsYmFjay5jYWxsKHRoaXMuX29iamVjdC5nZXRDaGlsZHJlbigpLCBlYXNlVmFsdWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBmcm9tKG9iamVjdDphbnkpIHtcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgICAgICAgICAgdGhpcy5fb2JqZWN0ID0gd2RDYi5IYXNoLmNyZWF0ZTxhbnk+KG9iamVjdCk7XG5cbiAgICAgICAgICAgIC8vIFNldCBhbGwgc3RhcnRpbmcgdmFsdWVzIHByZXNlbnQgb24gdGhlIHRhcmdldCBvYmplY3RcbiAgICAgICAgICAgIHRoaXMuX29iamVjdC5mb3JFYWNoKCh2YWx1ZTphbnksIGtleTpzdHJpbmcpID0+IHtcbiAgICAgICAgICAgICAgICBzZWxmLl92YWx1ZXNTdGFydC5hZGRDaGlsZChrZXksIHJvb3QucGFyc2VGbG9hdCh2YWx1ZSwgMTApKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyB0byhwcm9wZXJ0aWVzOmFueSwgZHVyYXRpb246bnVtYmVyID0gMTAwMCkge1xuICAgICAgICAgICAgdGhpcy5kdXJhdGlvbiA9IGR1cmF0aW9uO1xuICAgICAgICAgICAgdGhpcy5fdmFsdWVzRW5kID0gd2RDYi5IYXNoLmNyZWF0ZTxhbnk+KHByb3BlcnRpZXMpO1xuXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBpbml0KCl7XG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICAgICAgICAgIHN1cGVyLmluaXQoKTtcblxuICAgICAgICAgICAgdGhpcy5fdmFsdWVzRW5kLmZvckVhY2goKHZhbHVlOmFueSwga2V5OnN0cmluZykgPT4ge1xuICAgICAgICAgICAgICAgIC8vIGNoZWNrIGlmIGFuIEFycmF5IHdhcyBwcm92aWRlZCBhcyBwcm9wZXJ0eSB2YWx1ZVxuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIEFycmF5KSB7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gY3JlYXRlIGEgbG9jYWwgY29weSBvZiB0aGUgQXJyYXkgd2l0aCB0aGUgc3RhcnQgdmFsdWUgYXQgdGhlIGZyb250XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuX3ZhbHVlc0VuZC5zZXRWYWx1ZShrZXksIFtzZWxmLl9vYmplY3QuZ2V0Q2hpbGQoa2V5KV0uY29uY2F0KHNlbGYuX3ZhbHVlc0VuZC5nZXRDaGlsZChrZXkpKSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgc2VsZi5fdmFsdWVzU3RhcnQuc2V0VmFsdWUoa2V5LCBzZWxmLl9vYmplY3QuZ2V0Q2hpbGQoa2V5KSk7XG5cbiAgICAgICAgICAgICAgICBpZiAoKCBzZWxmLl92YWx1ZXNTdGFydC5nZXRDaGlsZChrZXkpIGluc3RhbmNlb2YgQXJyYXkgKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5fdmFsdWVzU3RhcnQuc2V0VmFsdWUoa2V5LCBzZWxmLl92YWx1ZXNTdGFydC5nZXRDaGlsZChrZXkpICogMS4wKTsgLy8gRW5zdXJlcyB3ZSdyZSB1c2luZyBudW1iZXJzLCBub3Qgc3RyaW5nc1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHN0YXJ0KCkge1xuICAgICAgICAgICAgc3VwZXIuc3RhcnQoKTtcblxuICAgICAgICAgICAgdGhpcy5fb25TdGFydENhbGxiYWNrRmlyZWQgPSBmYWxzZTtcblxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgc3RvcCgpIHtcbiAgICAgICAgICAgIHN1cGVyLnN0b3AoKTtcblxuICAgICAgICAgICAgaWYgKHRoaXMuX29uU3RvcENhbGxiYWNrICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fb25TdG9wQ2FsbGJhY2suY2FsbCh0aGlzLl9vYmplY3QuZ2V0Q2hpbGRyZW4oKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGNvcHkoKSB7XG4gICAgICAgICAgICByZXR1cm4gVHdlZW4uY3JlYXRlKCkuZnJvbSh0aGlzLl92YWx1ZXNTdGFydC5nZXRDaGlsZHJlbigpKVxuICAgICAgICAgICAgLnRvKHRoaXMuX3ZhbHVlc0VuZC5nZXRDaGlsZHJlbigpLCB0aGlzLmR1cmF0aW9uKVxuICAgICAgICAgICAgICAgIC5lYXNpbmcodGhpcy5fZWFzaW5nRnVuY3Rpb24pXG4gICAgICAgICAgICAgICAgLmludGVycG9sYXRpb24odGhpcy5faW50ZXJwb2xhdGlvbkZ1bmN0aW9uKVxuICAgICAgICAgICAgICAgIC5vblN0YXJ0KHRoaXMuX29uU3RhcnRDYWxsYmFjaylcbiAgICAgICAgICAgICAgICAub25TdG9wKHRoaXMuX29uU3RvcENhbGxiYWNrKVxuICAgICAgICAgICAgICAgIC5vbkZpbmlzaCh0aGlzLl9vbkZpbmlzaENhbGxiYWNrKVxuICAgICAgICAgICAgICAgIC5vblVwZGF0ZSh0aGlzLl9vblVwZGF0ZUNhbGxiYWNrKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyByZXZlcnNlKCkge1xuICAgICAgICAgICAgdmFyIHRtcCA9IHRoaXMuX3ZhbHVlc1N0YXJ0O1xuXG4gICAgICAgICAgICB0aGlzLl92YWx1ZXNTdGFydCA9IHRoaXMuX3ZhbHVlc0VuZDtcbiAgICAgICAgICAgIHRoaXMuX3ZhbHVlc0VuZCA9IHRtcDtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBlYXNpbmcoZWFzaW5nKSB7XG4gICAgICAgICAgICB0aGlzLl9lYXNpbmdGdW5jdGlvbiA9IGVhc2luZztcblxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgaW50ZXJwb2xhdGlvbihpbnRlcnBvbGF0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLl9pbnRlcnBvbGF0aW9uRnVuY3Rpb24gPSBpbnRlcnBvbGF0aW9uO1xuXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBvblVwZGF0ZShjYWxsYmFjazpGdW5jdGlvbikge1xuICAgICAgICAgICAgdGhpcy5fb25VcGRhdGVDYWxsYmFjayA9IGNhbGxiYWNrO1xuXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBvbkZpbmlzaChjYWxsYmFjazpGdW5jdGlvbikge1xuICAgICAgICAgICAgdGhpcy5fb25GaW5pc2hDYWxsYmFjayA9IGNhbGxiYWNrO1xuXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBvblN0YXJ0KGNhbGxiYWNrOkZ1bmN0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLl9vblN0YXJ0Q2FsbGJhY2sgPSBjYWxsYmFjaztcblxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgb25TdG9wKGNhbGxiYWNrOkZ1bmN0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLl9vblN0b3BDYWxsYmFjayA9IGNhbGxiYWNrO1xuXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIHByb3RlY3RlZCBmaW5pc2goKXtcbiAgICAgICAgICAgIHN1cGVyLmZpbmlzaCgpO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5fb25GaW5pc2hDYWxsYmFjayAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX29uRmluaXNoQ2FsbGJhY2suY2FsbCh0aGlzLl9vYmplY3QuZ2V0Q2hpbGRyZW4oKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5cbiIsIm1vZHVsZSB3ZCB7XG4gICAgZXhwb3J0IGFic3RyYWN0IGNsYXNzIFJlbmRlcmVyQ29tcG9uZW50IGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgICAgICAgcHVibGljIGFic3RyYWN0IHJlbmRlcihyZW5kZXJlcjpSZW5kZXJlciwgZ2VvbWV0cnk6R2VvbWV0cnksIGNhbWVyYTpHYW1lT2JqZWN0KTtcbiAgICB9XG59XG5cbiIsIm1vZHVsZSB3ZCB7XG4gICAgZXhwb3J0IGNsYXNzIE1lc2hSZW5kZXJlciBleHRlbmRzIFJlbmRlcmVyQ29tcG9uZW50IHtcbiAgICAgICAgcHVibGljIHN0YXRpYyBjcmVhdGUoKSB7XG4gICAgICAgIFx0dmFyIG9iaiA9IG5ldyB0aGlzKCk7XG5cbiAgICAgICAgXHRyZXR1cm4gb2JqO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGVudGl0eU9iamVjdDpHYW1lT2JqZWN0O1xuXG4gICAgICAgIHB1YmxpYyBkcmF3TW9kZTpEcmF3TW9kZSA9IERyYXdNb2RlLlRSSUFOR0xFUztcblxuICAgICAgICBwdWJsaWMgcmVuZGVyKHJlbmRlcmVyOlJlbmRlcmVyLCBnZW9tZXRyeTpHZW9tZXRyeSwgY2FtZXJhOkdhbWVPYmplY3Qpe1xuICAgICAgICAgICAgcmVuZGVyZXIuYWRkQ29tbWFuZCh0aGlzLmNyZWF0ZURyYXdDb21tYW5kKHJlbmRlcmVyLCBnZW9tZXRyeSwgY2FtZXJhKSk7XG4gICAgICAgIH1cblxuICAgICAgICBAcmVxdWlyZShmdW5jdGlvbihyZW5kZXJlcjpSZW5kZXJlciwgZ2VvbWV0cnk6R2VvbWV0cnksIGNhbWVyYTpHYW1lT2JqZWN0KXtcbiAgICAgICAgICAgIHZhciBjb250cm9sbGVyID0gY2FtZXJhLmdldENvbXBvbmVudDxDYW1lcmFDb250cm9sbGVyPihDYW1lcmFDb250cm9sbGVyKTtcblxuICAgICAgICAgICAgYXNzZXJ0KCEhY29udHJvbGxlciAmJiAhIWNvbnRyb2xsZXIuY2FtZXJhLCBMb2cuaW5mby5GVU5DX01VU1QoXCJjYW1lcmFcIiAsIFwiYWRkIENhbWVyYSBDb21wb25lbnRcIikpO1xuICAgICAgICAgICAgYXNzZXJ0KCEhZ2VvbWV0cnksIExvZy5pbmZvLkZVTkNfTVVTVChcIk1lc2hcIiwgXCJhZGQgZ2VvbWV0cnkgY29tcG9uZW50XCIpKTtcbiAgICAgICAgfSlcbiAgICAgICAgcHJvdGVjdGVkIGNyZWF0ZURyYXdDb21tYW5kKHJlbmRlcmVyOlJlbmRlcmVyLCBnZW9tZXRyeTpHZW9tZXRyeSwgY2FtZXJhOkdhbWVPYmplY3Qpe1xuICAgICAgICAgICAgIHZhciBxdWFkQ21kID0gcmVuZGVyZXIuY3JlYXRlUXVhZENvbW1hbmQoKSxcbiAgICAgICAgICAgICAgICBjYW1lcmFDb21wb25lbnQgPSBjYW1lcmEuZ2V0Q29tcG9uZW50PENhbWVyYUNvbnRyb2xsZXI+KENhbWVyYUNvbnRyb2xsZXIpLFxuICAgICAgICAgICAgICAgIG1hdGVyaWFsOk1hdGVyaWFsID0gZ2VvbWV0cnkubWF0ZXJpYWw7XG5cbiAgICAgICAgICAgIHF1YWRDbWQuYnVmZmVycyA9IGdlb21ldHJ5LmJ1ZmZlcnM7XG5cbiAgICAgICAgICAgIHF1YWRDbWQuYW5pbWF0aW9uID0gZ2VvbWV0cnkuZW50aXR5T2JqZWN0LmdldENvbXBvbmVudChBbmltYXRpb24pO1xuXG4gICAgICAgICAgICBxdWFkQ21kLm1NYXRyaXggPSB0aGlzLmVudGl0eU9iamVjdC50cmFuc2Zvcm0ubG9jYWxUb1dvcmxkTWF0cml4O1xuXG4gICAgICAgICAgICBxdWFkQ21kLnZNYXRyaXggPSBjYW1lcmFDb21wb25lbnQud29ybGRUb0NhbWVyYU1hdHJpeDtcbiAgICAgICAgICAgIHF1YWRDbWQucE1hdHJpeCA9IGNhbWVyYUNvbXBvbmVudC5wTWF0cml4O1xuXG4gICAgICAgICAgICBxdWFkQ21kLm1hdGVyaWFsID0gbWF0ZXJpYWw7XG5cbiAgICAgICAgICAgIHF1YWRDbWQueiA9IHRoaXMuZW50aXR5T2JqZWN0LnRyYW5zZm9ybS5wb3NpdGlvbi56O1xuXG4gICAgICAgICAgICBxdWFkQ21kLmRyYXdNb2RlID0gdGhpcy5kcmF3TW9kZTtcblxuICAgICAgICAgICAgcmV0dXJuIHF1YWRDbWQ7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJtb2R1bGUgd2Qge1xuICAgIGV4cG9ydCBjbGFzcyBTa3lib3hSZW5kZXJlciBleHRlbmRzIE1lc2hSZW5kZXJlciB7XG4gICAgICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlKCkge1xuICAgICAgICAgICAgdmFyIG9iaiA9IG5ldyB0aGlzKCk7XG5cbiAgICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgcmVuZGVyKHJlbmRlcmVyOlJlbmRlcmVyLCBnZW9tZXRyeTpHZW9tZXRyeSwgY2FtZXJhOkdhbWVPYmplY3QpOnZvaWQge1xuICAgICAgICAgICAgcmVuZGVyZXIuc2t5Ym94Q29tbWFuZCA9IHRoaXMuY3JlYXRlRHJhd0NvbW1hbmQocmVuZGVyZXIsIGdlb21ldHJ5LCBjYW1lcmEpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4iLCJtb2R1bGUgd2Qge1xuICAgIGV4cG9ydCBjbGFzcyBVSVJlbmRlcmVyIGV4dGVuZHMgUmVuZGVyZXJDb21wb25lbnQge1xuICAgICAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZSgpIHtcbiAgICAgICAgICAgIHZhciBvYmogPSBuZXcgdGhpcygpO1xuXG4gICAgICAgICAgICBvYmouaW5pdFdoZW5DcmVhdGUoKTtcblxuICAgICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX3pJbmRleDpudW1iZXIgPSAxO1xuICAgICAgICBnZXQgekluZGV4KCl7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fekluZGV4O1xuICAgICAgICB9XG4gICAgICAgIHNldCB6SW5kZXgoekluZGV4Om51bWJlcil7XG4gICAgICAgICAgICBpZih6SW5kZXggIT09IHRoaXMuX3pJbmRleCl7XG4gICAgICAgICAgICAgICAgdGhpcy5fekluZGV4ID0gekluZGV4O1xuXG4gICAgICAgICAgICAgICAgaWYodGhpcy5jYW52YXMpe1xuICAgICAgICAgICAgICAgICAgICB3ZENiLkRvbVF1ZXJ5LmNyZWF0ZSh0aGlzLmNhbnZhcykuY3NzKFwiekluZGV4XCIsIHpJbmRleCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGRpcnR5RHVyaW5nQ3VycmVudExvb3A6Ym9vbGVhbiA9IGZhbHNlO1xuICAgICAgICBwcml2YXRlIF9kaXJ0eTpib29sZWFuID0gdHJ1ZTtcbiAgICAgICAgZ2V0IGRpcnR5KCl7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZGlydHk7XG4gICAgICAgIH1cbiAgICAgICAgc2V0IGRpcnR5KGRpcnR5OmJvb2xlYW4pe1xuICAgICAgICAgICAgaWYoZGlydHkpe1xuICAgICAgICAgICAgICAgIHRoaXMuX2RpcnR5ID0gdHJ1ZTtcblxuICAgICAgICAgICAgICAgIHRoaXMuZGlydHlEdXJpbmdDdXJyZW50TG9vcCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgY29udGV4dDphbnkgPSBudWxsO1xuICAgICAgICBwdWJsaWMgaXNDbGVhckNhbnZhczpib29sZWFuID0gZmFsc2U7XG4gICAgICAgIHB1YmxpYyBzdGF0ZTpVSVJlbmRlcmVyU3RhdGUgPSBVSVJlbmRlcmVyU3RhdGUuTk9STUFMO1xuICAgICAgICBwdWJsaWMgY2FudmFzOkhUTUxDYW52YXNFbGVtZW50ID0gbnVsbDtcblxuICAgICAgICBwcml2YXRlIF9yZWZlcmVuY2VMaXN0OndkQ2IuQ29sbGVjdGlvbjxVSU9iamVjdD4gPSB3ZENiLkNvbGxlY3Rpb24uY3JlYXRlPFVJT2JqZWN0PigpO1xuXG4gICAgICAgIHB1YmxpYyByZXNldERpcnR5KCl7XG4gICAgICAgICAgICB0aGlzLl9kaXJ0eSA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGFkZFRvT2JqZWN0KG9iamVjdDpVSU9iamVjdCl7XG4gICAgICAgICAgICB0aGlzLl9yZWZlcmVuY2VMaXN0LmFkZENoaWxkKG9iamVjdCk7XG5cbiAgICAgICAgICAgIC8qIVxuICAgICAgICAgICAgIHVpUmVuZGVyZXIgbWF5IGJlIHNoYXJlZCBieSBtdWx0aSBvYmplY3RzLCBzbyB0aGlzLm9iamVjdCBpcyB0aGUgbGFzdCBvbmUgd2hpY2ggc2hhcmUgdGhpc1xuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB0aGlzLmVudGl0eU9iamVjdCA9IG9iamVjdDtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyByZW1vdmVGcm9tT2JqZWN0KG9iamVjdDpVSU9iamVjdCl7XG4gICAgICAgICAgICB0aGlzLl9yZWZlcmVuY2VMaXN0LnJlbW92ZUNoaWxkKG9iamVjdCk7XG5cbiAgICAgICAgICAgIGlmKHRoaXMuX3JlZmVyZW5jZUxpc3QuZ2V0Q291bnQoKSA+IDApe1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc3VwZXIucmVtb3ZlRnJvbU9iamVjdChvYmplY3QpO1xuICAgICAgICB9XG5cbiAgICAgICAgQGV4ZWNPbmx5T25jZShcIl9pc0luaXRcIilcbiAgICAgICAgcHVibGljIGluaXQoKXtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBpbml0V2hlbkNyZWF0ZSgpe1xuICAgICAgICAgICAgdGhpcy5fY3JlYXRlT3ZlcmxheUNhbnZhcygpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGRpc3Bvc2UoKXtcbiAgICAgICAgICAgIGlmKHRoaXMuX3JlZmVyZW5jZUxpc3QuZ2V0Q291bnQoKSA+IDApe1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgd2RDYi5Eb21RdWVyeS5jcmVhdGUodGhpcy5jYW52YXMpLnJlbW92ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHJlbmRlcihyZW5kZXJlcjpSZW5kZXJlciwgZ2VvbWV0cnk6R2VvbWV0cnksIGNhbWVyYTpHYW1lT2JqZWN0KXtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBjbGVhckNhbnZhcygpe1xuICAgICAgICAgICAgdGhpcy5jb250ZXh0LmNsZWFyUmVjdCgwLCAwLCB0aGlzLmNhbnZhcy53aWR0aCwgdGhpcy5jYW52YXMuaGVpZ2h0KTtcblxuICAgICAgICAgICAgdGhpcy5pc0NsZWFyQ2FudmFzID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX2NyZWF0ZU92ZXJsYXlDYW52YXMoKXtcbiAgICAgICAgICAgIHZhciBjYW52YXMgPSBudWxsLFxuICAgICAgICAgICAgICAgIHZpZXcgPSBudWxsO1xuXG4gICAgICAgICAgICBpZih0aGlzLmNhbnZhcyl7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjYW52YXMgPSB3ZENiLkRvbVF1ZXJ5LmNyZWF0ZShcIjxjYW52YXM+PC9jYW52YXM+XCIpLnByZXBlbmRUbyhcImJvZHlcIik7XG4gICAgICAgICAgICB2aWV3ID0gRGV2aWNlTWFuYWdlci5nZXRJbnN0YW5jZSgpLnZpZXc7XG5cbiAgICAgICAgICAgIGNhbnZhcy5jc3MoXCJwb3NpdGlvblwiLCBcImFic29sdXRlXCIpO1xuICAgICAgICAgICAgY2FudmFzLmNzcyhcImxlZnRcIiwgYCR7dmlldy54fXB4YCk7XG4gICAgICAgICAgICBjYW52YXMuY3NzKFwidG9wXCIsIGAke3ZpZXcueX1weGApO1xuICAgICAgICAgICAgY2FudmFzLmNzcyhcInpJbmRleFwiLCB0aGlzLnpJbmRleCk7XG5cbiAgICAgICAgICAgIGNhbnZhcy5hdHRyKFwid2lkdGhcIiwgdmlldy53aWR0aCk7XG4gICAgICAgICAgICBjYW52YXMuYXR0cihcImhlaWdodFwiLCB2aWV3LmhlaWdodCk7XG5cbiAgICAgICAgICAgIHRoaXMuY2FudmFzID0gY2FudmFzLmdldCgwKTtcbiAgICAgICAgICAgIHRoaXMuY29udGV4dCA9IHRoaXMuY2FudmFzLmdldENvbnRleHQoXCIyZFwiKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsIm1vZHVsZSB3ZHtcbiAgICBleHBvcnQgZW51bSBVSVJlbmRlcmVyU3RhdGV7XG4gICAgICAgIE5PUk1BTCxcbiAgICAgICAgRElSVFksXG4gICAgICAgIE5PVF9ESVJUWVxuICAgIH1cbn1cbiIsIm1vZHVsZSB3ZCB7XG4gICAgZXhwb3J0IGNsYXNzIE9jdHJlZSBleHRlbmRzIENvbXBvbmVudCB7XG4gICAgICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlKCkge1xuICAgICAgICBcdHZhciBvYmogPSBuZXcgdGhpcygpO1xuXG4gICAgICAgIFx0cmV0dXJuIG9iajtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBtYXhEZXB0aDpudW1iZXIgPSAyO1xuICAgICAgICBwdWJsaWMgbWF4Tm9kZUNhcGFjaXR5Om51bWJlciA9IDY0O1xuXG4gICAgICAgIHByaXZhdGUgX3Jvb3Q6T2N0cmVlTm9kZSA9IG51bGw7XG4gICAgICAgIHByaXZhdGUgX3NlbGVjdGlvbkxpc3Q6d2RDYi5Db2xsZWN0aW9uPEdhbWVPYmplY3Q+ID0gd2RDYi5Db2xsZWN0aW9uLmNyZWF0ZTxHYW1lT2JqZWN0PigpO1xuXG4gICAgICAgIEByZXF1aXJlKGZ1bmN0aW9uKGVudGl0eU9iamVjdDpHYW1lT2JqZWN0KXtcbiAgICAgICAgICAgIGFzc2VydChlbnRpdHlPYmplY3QgaW5zdGFuY2VvZiBHYW1lT2JqZWN0LCBMb2cuaW5mby5GVU5DX1NIT1VMRChcIk9jdHJlZSBjb21wb25lbnRcIiwgXCJhZGQgdG8gR2FtZU9iamVjdFwiKSk7XG4gICAgICAgIH0pXG4gICAgICAgIHB1YmxpYyBhZGRUb09iamVjdChlbnRpdHlPYmplY3Q6R2FtZU9iamVjdCl7XG4gICAgICAgICAgICBzdXBlci5hZGRUb09iamVjdChlbnRpdHlPYmplY3QpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGJ1aWxkKCkge1xuICAgICAgICAgICAgdmFyIGVudGl0eU9iamVjdExpc3Q6d2RDYi5Db2xsZWN0aW9uPEdhbWVPYmplY3Q+ID0gdGhpcy5nZXRDaGlsZHJlbigpLFxuICAgICAgICAgICAgICAgIGN1cnJlbnREZXB0aCA9IDAsXG4gICAgICAgICAgICAgICAgbWF4Tm9kZUNhcGFjaXR5ID0gdGhpcy5tYXhOb2RlQ2FwYWNpdHksXG4gICAgICAgICAgICAgICAgbWF4RGVwdGggPSB0aGlzLm1heERlcHRoO1xuXG4gICAgICAgICAgICB2YXIgYnVpbGRUcmVlID0gKHdvcmxkTWluOlZlY3RvcjMsIHdvcmxkTWF4OlZlY3RvcjMsIGN1cnJlbnREZXB0aCwgZW50aXR5T2JqZWN0TGlzdDp3ZENiLkNvbGxlY3Rpb248R2FtZU9iamVjdD4sIHBhcmVudE5vZGU6T2N0cmVlTm9kZSkgPT4ge1xuICAgICAgICAgICAgICAgIHZhciBoYWxmRXh0ZW5kcyA9IG5ldyBWZWN0b3IzKCh3b3JsZE1heC54IC0gd29ybGRNaW4ueCkgLyAyLCAod29ybGRNYXgueSAtIHdvcmxkTWluLnkpIC8gMiwgKHdvcmxkTWF4LnogLSB3b3JsZE1pbi56KSAvIDIpO1xuXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgeCA9IDA7IHggPCAyOyB4KyspIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgeSA9IDA7IHkgPCAyOyB5KyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IHogPSAwOyB6IDwgMjsgeisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGxvY2FsTWluID0gd29ybGRNaW4uY29weSgpLmFkZChoYWxmRXh0ZW5kcy5jb3B5KCkuc2NhbGUoeCwgeSwgeikpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhbE1heCA9IHdvcmxkTWluLmNvcHkoKS5hZGQoaGFsZkV4dGVuZHMuY29weSgpLnNjYWxlKHggKyAxLCB5ICsgMSwgeiArIDEpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZSA9IE9jdHJlZU5vZGUuY3JlYXRlKGxvY2FsTWluLCBsb2NhbE1heCwgbWF4Tm9kZUNhcGFjaXR5LCBjdXJyZW50RGVwdGggKyAxLCBtYXhEZXB0aCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlLmFkZEVudGl0eU9iamVjdHMoZW50aXR5T2JqZWN0TGlzdCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobm9kZS5lbnRpdHlPYmplY3RDb3VudCA+IG1heE5vZGVDYXBhY2l0eSAmJiBjdXJyZW50RGVwdGggPCBtYXhEZXB0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBidWlsZFRyZWUobG9jYWxNaW4sIGxvY2FsTWF4LCBjdXJyZW50RGVwdGggKyAxLCBlbnRpdHlPYmplY3RMaXN0LCBub2RlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnROb2RlLmFkZE5vZGUobm9kZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuX3VwZGF0ZUNvbGxpZGVyRm9yRmlyc3RDaGVjayhlbnRpdHlPYmplY3RMaXN0KTtcblxuICAgICAgICAgICAgdmFyIHsgd29ybGRNaW4sIHdvcmxkTWF4IH0gPSB0aGlzLl9nZXRXb3JsZEV4dGVuZHMoZW50aXR5T2JqZWN0TGlzdCk7XG5cbiAgICAgICAgICAgIHRoaXMuX3Jvb3QgPSBPY3RyZWVOb2RlLmNyZWF0ZSh3b3JsZE1pbiwgd29ybGRNYXgsIG1heE5vZGVDYXBhY2l0eSwgY3VycmVudERlcHRoICsgMSwgbWF4RGVwdGgpO1xuXG4gICAgICAgICAgICBidWlsZFRyZWUod29ybGRNaW4sIHdvcmxkTWF4LCBjdXJyZW50RGVwdGgsIGVudGl0eU9iamVjdExpc3QsIHRoaXMuX3Jvb3QpO1xuICAgICAgICB9XG5cbiAgICAgICAgQHJlcXVpcmUoZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIGFzc2VydCghIURpcmVjdG9yLmdldEluc3RhbmNlKCkuc2NlbmUuY2FtZXJhLmdldENvbXBvbmVudChDYW1lcmFDb250cm9sbGVyKSwgTG9nLmluZm8uRlVOQ19TSE9VTEQoXCJjb250YWluIENhbWVyYUNvbnRyb2xsZXIgY29tcG9uZW50XCIpKTtcbiAgICAgICAgfSlcbiAgICAgICAgcHVibGljIGdldFJlbmRlckxpc3RCeUZydXN0dW1DdWxsKCl7XG4gICAgICAgICAgICB2YXIgZnJ1c3R1bVBsYW5lcyA9IERpcmVjdG9yLmdldEluc3RhbmNlKCkuc2NlbmUuY2FtZXJhLmdldENvbXBvbmVudChDYW1lcmFDb250cm9sbGVyKS5nZXRQbGFuZXMoKTtcblxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3Zpc2l0Um9vdChcImZpbmRBbmRBZGRUb1JlbmRlckxpc3RcIiwgW2ZydXN0dW1QbGFuZXMsIHRoaXMuX3NlbGVjdGlvbkxpc3RdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIEByZXF1aXJlKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBhc3NlcnQoISFEaXJlY3Rvci5nZXRJbnN0YW5jZSgpLnNjZW5lLmNhbWVyYS5nZXRDb21wb25lbnQoQ2FtZXJhQ29udHJvbGxlciksIExvZy5pbmZvLkZVTkNfU0hPVUxEKFwiY29udGFpbiBDYW1lcmFDb250cm9sbGVyIGNvbXBvbmVudFwiKSk7XG4gICAgICAgIH0pXG4gICAgICAgIHB1YmxpYyBnZXRJbnRlcnNlY3RMaXN0V2l0aFJheShlOk1vdXNlRXZlbnQpe1xuICAgICAgICAgICAgdmFyIGxvY2F0aW9uSW5WaWV3ID0gZS5sb2NhdGlvbkluVmlldztcblxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3Zpc2l0Um9vdChcImZpbmRBbmRBZGRUb0ludGVyc2VjdExpc3RcIiwgW0RpcmVjdG9yLmdldEluc3RhbmNlKCkuc2NlbmUuY2FtZXJhLmdldENvbXBvbmVudChDYW1lcmFDb250cm9sbGVyKS5jcmVhdGVSYXkobG9jYXRpb25JblZpZXcueCwgbG9jYXRpb25JblZpZXcueSksIHRoaXMuX3NlbGVjdGlvbkxpc3RdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBnZXRDb2xsaWRlT2JqZWN0cyhzaGFwZTpTaGFwZSl7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fdmlzaXRSb290KFwiZmluZEFuZEFkZFRvQ29sbGlkZUxpc3RcIiwgW3NoYXBlLCB0aGlzLl9zZWxlY3Rpb25MaXN0XSk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgZ2V0Q2hpbGRyZW4oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lbnRpdHlPYmplY3QuZ2V0Q2hpbGRyZW4oKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX3Zpc2l0Um9vdChtZXRob2Q6c3RyaW5nLCBhcmdzOkFycmF5PGFueT4pOmFueXtcbiAgICAgICAgICAgIHRoaXMuX3NlbGVjdGlvbkxpc3QucmVtb3ZlQWxsQ2hpbGRyZW4oKTtcblxuICAgICAgICAgICAgdGhpcy5fcm9vdC5ub2RlTGlzdC5mb3JFYWNoKCh0b3BOb2RlOk9jdHJlZU5vZGUpID0+IHtcbiAgICAgICAgICAgICAgICB0b3BOb2RlW21ldGhvZF0uYXBwbHkodG9wTm9kZSwgYXJncyk7XG4gICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICB0aGlzLl9zZWxlY3Rpb25MaXN0ID0gdGhpcy5fc2VsZWN0aW9uTGlzdC5yZW1vdmVSZXBlYXRJdGVtcygpO1xuXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fc2VsZWN0aW9uTGlzdDtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX3VwZGF0ZUNvbGxpZGVyRm9yRmlyc3RDaGVjayhlbnRpdHlPYmplY3RMaXN0OndkQ2IuQ29sbGVjdGlvbjxHYW1lT2JqZWN0Pikge1xuICAgICAgICAgICAgdmFyIGNvbGxpZGVyOkJveENvbGxpZGVyRm9yRmlyc3RDaGVjayA9IG51bGwsXG4gICAgICAgICAgICAgICAgc2VsZiA9IHRoaXM7XG5cbiAgICAgICAgICAgIGVudGl0eU9iamVjdExpc3QuZm9yRWFjaCgoZW50aXR5T2JqZWN0OkdhbWVPYmplY3QpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIWVudGl0eU9iamVjdC5oYXNDb21wb25lbnQoQ29sbGlkZXJGb3JGaXJzdENoZWNrKSkge1xuICAgICAgICAgICAgICAgICAgICBjb2xsaWRlciA9IHNlbGYuX2NyZWF0ZUNvbGxpZGVyKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgZW50aXR5T2JqZWN0LmFkZENvbXBvbmVudChjb2xsaWRlcik7XG5cbiAgICAgICAgICAgICAgICAgICAgY29sbGlkZXIuaW5pdCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgICAgICBjb2xsaWRlciA9IGVudGl0eU9iamVjdC5nZXRDb21wb25lbnQ8Qm94Q29sbGlkZXJGb3JGaXJzdENoZWNrPihCb3hDb2xsaWRlckZvckZpcnN0Q2hlY2spO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNvbGxpZGVyLnVwZGF0ZShudWxsKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfZ2V0V29ybGRFeHRlbmRzKGVudGl0eU9iamVjdExpc3Q6d2RDYi5Db2xsZWN0aW9uPEdhbWVPYmplY3Q+KTp7d29ybGRNaW46VmVjdG9yMywgd29ybGRNYXg6VmVjdG9yM30ge1xuICAgICAgICAgICAgdmFyIHdvcmxkTWluID0gVmVjdG9yMy5jcmVhdGUoTnVtYmVyLk1BWF9WQUxVRSwgTnVtYmVyLk1BWF9WQUxVRSwgTnVtYmVyLk1BWF9WQUxVRSksXG4gICAgICAgICAgICB3b3JsZE1heCA9IFZlY3RvcjMuY3JlYXRlKC1OdW1iZXIuTUFYX1ZBTFVFLCAtTnVtYmVyLk1BWF9WQUxVRSwgLU51bWJlci5NQVhfVkFMVUUpLFxuICAgICAgICAgICAgICAgIHNlbGYgPSB0aGlzO1xuXG4gICAgICAgICAgICBlbnRpdHlPYmplY3RMaXN0LmZvckVhY2goKGVudGl0eU9iamVjdDpHYW1lT2JqZWN0KSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IG1pbiA9IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIG1heCA9IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIGNvbGxpZGVyOkJveENvbGxpZGVyRm9yRmlyc3RDaGVjayA9IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIHNoYXBlOkFBQkJTaGFwZSA9IG51bGw7XG5cbiAgICAgICAgICAgICAgICBjb2xsaWRlciA9IGVudGl0eU9iamVjdC5nZXRDb21wb25lbnQ8Qm94Q29sbGlkZXJGb3JGaXJzdENoZWNrPihCb3hDb2xsaWRlckZvckZpcnN0Q2hlY2spO1xuXG4gICAgICAgICAgICAgICAgc2hhcGUgPSA8QUFCQlNoYXBlPmNvbGxpZGVyLnNoYXBlO1xuICAgICAgICAgICAgICAgIG1pbiA9IHNoYXBlLmdldE1pbigpO1xuICAgICAgICAgICAgICAgIG1heCA9IHNoYXBlLmdldE1heCgpO1xuXG4gICAgICAgICAgICAgICAgc2VsZi5fY2hlY2tFeHRlbmRzKG1pbiwgd29ybGRNaW4sIHdvcmxkTWF4KTtcbiAgICAgICAgICAgICAgICBzZWxmLl9jaGVja0V4dGVuZHMobWF4LCB3b3JsZE1pbiwgd29ybGRNYXgpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgd29ybGRNaW46IHdvcmxkTWluLFxuICAgICAgICAgICAgICAgIHdvcmxkTWF4OiB3b3JsZE1heFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX2NyZWF0ZUNvbGxpZGVyKCl7XG4gICAgICAgICAgICByZXR1cm4gQm94Q29sbGlkZXJGb3JGaXJzdENoZWNrLmNyZWF0ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfY2hlY2tFeHRlbmRzKHY6IFZlY3RvcjMsIG1pbjogVmVjdG9yMywgbWF4OiBWZWN0b3IzKTogdm9pZCB7XG4gICAgICAgICAgICBpZiAodi54IDwgbWluLngpe1xuICAgICAgICAgICAgICAgIG1pbi54ID0gdi54O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodi55IDwgbWluLnkpe1xuICAgICAgICAgICAgICAgIG1pbi55ID0gdi55O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodi56IDwgbWluLnope1xuICAgICAgICAgICAgICAgIG1pbi56ID0gdi56O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodi54ID4gbWF4Lngpe1xuICAgICAgICAgICAgICAgIG1heC54ID0gdi54O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodi55ID4gbWF4Lnkpe1xuICAgICAgICAgICAgICAgIG1heC55ID0gdi55O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodi56ID4gbWF4Lnope1xuICAgICAgICAgICAgICAgIG1heC56ID0gdi56O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufSIsIm1vZHVsZSB3ZHtcbiAgICBleHBvcnQgY2xhc3MgT2N0cmVlTm9kZXtcbiAgICAgICAgcHVibGljIHN0YXRpYyBjcmVhdGUobWluUG9pbnQ6IFZlY3RvcjMsIG1heFBvaW50OiBWZWN0b3IzLCBjYXBhY2l0eTogbnVtYmVyLCBkZXB0aDogbnVtYmVyLCBtYXhEZXB0aDogbnVtYmVyKSB7XG4gICAgICAgICAgICB2YXIgb2JqID0gbmV3IHRoaXMobWluUG9pbnQsIG1heFBvaW50LCBjYXBhY2l0eSwgZGVwdGgsIG1heERlcHRoKTtcblxuICAgICAgICAgICAgb2JqLmluaXRXaGVuQ3JlYXRlKCk7XG5cbiAgICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgIH1cblxuICAgICAgICBnZXQgZW50aXR5T2JqZWN0Q291bnQoKXtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmVudGl0eU9iamVjdExpc3QuZ2V0Q291bnQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBlbnRpdHlPYmplY3RMaXN0OndkQ2IuQ29sbGVjdGlvbjxFbnRpdHlPYmplY3Q+ID0gd2RDYi5Db2xsZWN0aW9uLmNyZWF0ZTxFbnRpdHlPYmplY3Q+KCk7XG4gICAgICAgIHB1YmxpYyBub2RlTGlzdDp3ZENiLkNvbGxlY3Rpb248T2N0cmVlTm9kZT4gPSB3ZENiLkNvbGxlY3Rpb24uY3JlYXRlPE9jdHJlZU5vZGU+KCk7XG5cbiAgICAgICAgcHJpdmF0ZSBfZGVwdGg6bnVtYmVyID0gbnVsbDtcbiAgICAgICAgcHJpdmF0ZSBfbWF4RGVwdGg6bnVtYmVyID0gbnVsbDtcbiAgICAgICAgcHJpdmF0ZSBfY2FwYWNpdHk6bnVtYmVyID0gbnVsbDtcbiAgICAgICAgcHJpdmF0ZSBfbWluUG9pbnQ6VmVjdG9yMyA9IG51bGw7XG4gICAgICAgIHByaXZhdGUgX21heFBvaW50OlZlY3RvcjMgPSBudWxsO1xuICAgICAgICBwcml2YXRlIF9ib3VuZGluZ1ZlY3RvcnM6QXJyYXk8VmVjdG9yMz4gPSBudWxsO1xuXG4gICAgICAgIGNvbnN0cnVjdG9yKG1pblBvaW50OiBWZWN0b3IzLCBtYXhQb2ludDogVmVjdG9yMywgY2FwYWNpdHk6IG51bWJlciwgZGVwdGg6IG51bWJlciwgbWF4RGVwdGg6IG51bWJlcikge1xuICAgICAgICAgICAgdGhpcy5fY2FwYWNpdHkgPSBjYXBhY2l0eTtcbiAgICAgICAgICAgIHRoaXMuX2RlcHRoID0gZGVwdGg7XG4gICAgICAgICAgICB0aGlzLl9tYXhEZXB0aCA9IG1heERlcHRoO1xuXG4gICAgICAgICAgICB0aGlzLl9taW5Qb2ludCA9IG1pblBvaW50O1xuICAgICAgICAgICAgdGhpcy5fbWF4UG9pbnQgPSBtYXhQb2ludDtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBpbml0V2hlbkNyZWF0ZSgpe1xuICAgICAgICAgICAgdGhpcy5fYm91bmRpbmdWZWN0b3JzID0gQm91bmRpbmdSZWdpb25VdGlscy5idWlsZEJvdW5kaW5nVmVjdG9ycyh0aGlzLl9taW5Qb2ludCwgdGhpcy5fbWF4UG9pbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgQHJlcXVpcmUoZnVuY3Rpb24oZW50aXR5T2JqZWN0TGlzdDp3ZENiLkNvbGxlY3Rpb248R2FtZU9iamVjdD4pe1xuICAgICAgICAgICAgZW50aXR5T2JqZWN0TGlzdC5mb3JFYWNoKChlbnRpdHlPYmplY3Q6R2FtZU9iamVjdCkgPT4ge1xuICAgICAgICAgICAgICAgIGFzc2VydChlbnRpdHlPYmplY3QgaW5zdGFuY2VvZiBHYW1lT2JqZWN0LCBMb2cuaW5mby5GVU5DX1NIT1VMRChcImFkZCBnYW1lT2JqZWN0c1wiKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSlcbiAgICAgICAgcHVibGljIGFkZEVudGl0eU9iamVjdHMoZW50aXR5T2JqZWN0TGlzdDp3ZENiLkNvbGxlY3Rpb248R2FtZU9iamVjdD4pe1xuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzLFxuICAgICAgICAgICAgICAgIGxvY2FsTWluID0gdGhpcy5fbWluUG9pbnQsXG4gICAgICAgICAgICAgICAgbG9jYWxNYXggPSB0aGlzLl9tYXhQb2ludDtcblxuICAgICAgICAgICAgZW50aXR5T2JqZWN0TGlzdC5mb3JFYWNoKChlbnRpdHlPYmplY3Q6R2FtZU9iamVjdCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmKGVudGl0eU9iamVjdC5nZXRDb21wb25lbnQ8Qm94Q29sbGlkZXJGb3JGaXJzdENoZWNrPihCb3hDb2xsaWRlckZvckZpcnN0Q2hlY2spLnNoYXBlLmlzSW50ZXJzZWN0V2l0aEJveChsb2NhbE1pbiwgbG9jYWxNYXgpKXtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5lbnRpdHlPYmplY3RMaXN0LmFkZENoaWxkKGVudGl0eU9iamVjdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgYWRkTm9kZShub2RlOk9jdHJlZU5vZGUpe1xuICAgICAgICAgICAgdGhpcy5ub2RlTGlzdC5hZGRDaGlsZChub2RlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBmaW5kQW5kQWRkVG9SZW5kZXJMaXN0KGZydXN0dW1QbGFuZXM6QXJyYXk8UGxhbmU+LCBzZWxlY3Rpb25MaXN0OndkQ2IuQ29sbGVjdGlvbjxFbnRpdHlPYmplY3Q+KTp2b2lke1xuICAgICAgICAgICAgaWYgKEJvdW5kaW5nUmVnaW9uVXRpbHMuaXNBQUJCSW50ZXJzZWN0RnJ1c3R1bSh0aGlzLl9ib3VuZGluZ1ZlY3RvcnMsIGZydXN0dW1QbGFuZXMpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2hhc05vZGUoKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm5vZGVMaXN0LmZvckVhY2goKG5vZGU6T2N0cmVlTm9kZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5maW5kQW5kQWRkVG9SZW5kZXJMaXN0KGZydXN0dW1QbGFuZXMsIHNlbGVjdGlvbkxpc3QpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgc2VsZWN0aW9uTGlzdC5hZGRDaGlsZHJlbih0aGlzLmVudGl0eU9iamVjdExpc3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGZpbmRBbmRBZGRUb0ludGVyc2VjdExpc3QocmF5OlJheSwgc2VsZWN0aW9uTGlzdDp3ZENiLkNvbGxlY3Rpb248RW50aXR5T2JqZWN0Pil7XG4gICAgICAgICAgICBpZiAocmF5LmlzSW50ZXJzZWN0V2l0aEFBQkIodGhpcy5fbWluUG9pbnQsIHRoaXMuX21heFBvaW50KSkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9oYXNOb2RlKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ub2RlTGlzdC5mb3JFYWNoKChub2RlOk9jdHJlZU5vZGUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUuZmluZEFuZEFkZFRvSW50ZXJzZWN0TGlzdChyYXksIHNlbGVjdGlvbkxpc3QpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgc2VsZWN0aW9uTGlzdC5hZGRDaGlsZHJlbih0aGlzLmVudGl0eU9iamVjdExpc3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGZpbmRBbmRBZGRUb0NvbGxpZGVMaXN0KHNoYXBlOlNoYXBlLCBzZWxlY3Rpb25MaXN0OndkQ2IuQ29sbGVjdGlvbjxFbnRpdHlPYmplY3Q+KTp2b2lke1xuICAgICAgICAgICAgaWYoc2hhcGUuaXNJbnRlcnNlY3RXaXRoQm94KHRoaXMuX21pblBvaW50LCB0aGlzLl9tYXhQb2ludCkpe1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9oYXNOb2RlKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ub2RlTGlzdC5mb3JFYWNoKChub2RlOk9jdHJlZU5vZGUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUuZmluZEFuZEFkZFRvQ29sbGlkZUxpc3Qoc2hhcGUsIHNlbGVjdGlvbkxpc3QpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgc2VsZWN0aW9uTGlzdC5hZGRDaGlsZHJlbih0aGlzLmVudGl0eU9iamVjdExpc3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfaGFzTm9kZSgpe1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubm9kZUxpc3QuZ2V0Q291bnQoKSA+IDA7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJtb2R1bGUgd2Qge1xuICAgIGV4cG9ydCBhYnN0cmFjdCBjbGFzcyBDb2xsaWRlckZvckZpcnN0Q2hlY2sgZXh0ZW5kcyBDb21wb25lbnQge1xuICAgICAgICBwdWJsaWMgZW50aXR5T2JqZWN0OkdhbWVPYmplY3Q7XG5cbiAgICAgICAgcHVibGljIGFic3RyYWN0IGluaXQoKTtcbiAgICAgICAgcHVibGljIGFic3RyYWN0IHVwZGF0ZShlbGFwc2VkVGltZTpudW1iZXIpO1xuICAgIH1cbn1cblxuIiwibW9kdWxlIHdkIHtcbiAgICBleHBvcnQgY2xhc3MgQm94Q29sbGlkZXJGb3JGaXJzdENoZWNrIGV4dGVuZHMgQ29sbGlkZXJGb3JGaXJzdENoZWNrIHtcbiAgICAgICAgcHVibGljIHN0YXRpYyBjcmVhdGUoKSB7XG4gICAgICAgIFx0dmFyIG9iaiA9IG5ldyB0aGlzKCk7XG5cbiAgICAgICAgXHRyZXR1cm4gb2JqO1xuICAgICAgICB9XG5cblxuICAgICAgICBnZXQgc2hhcGUoKTpTaGFwZXtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9jb2xsaWRlci5zaGFwZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX2NvbGxpZGVyOkJveENvbGxpZGVyID0gQm94Q29sbGlkZXIuY3JlYXRlKCk7XG5cbiAgICAgICAgcHVibGljIGluaXQoKXtcbiAgICAgICAgICAgIHRoaXMuX2NvbGxpZGVyLmVudGl0eU9iamVjdCA9IHRoaXMuZW50aXR5T2JqZWN0O1xuXG4gICAgICAgICAgICB0aGlzLl9jb2xsaWRlci5pbml0KCk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgdXBkYXRlKGVsYXBzZWRUaW1lOm51bWJlcil7XG4gICAgICAgICAgICB0aGlzLl9jb2xsaWRlci51cGRhdGUoZWxhcHNlZFRpbWUpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4iLCJtb2R1bGUgd2Qge1xuICAgIGV4cG9ydCBhYnN0cmFjdCBjbGFzcyBDb2xsaWRlciBleHRlbmRzIENvbXBvbmVudCB7XG4gICAgICAgIGdldCBzaGFwZSgpOlNoYXBle1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYm91bmRpbmdSZWdpb24uc2hhcGU7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgZW50aXR5T2JqZWN0OkdhbWVPYmplY3Q7XG5cbiAgICAgICAgcHVibGljIHR5cGU6c3RyaW5nID0gQUJTVFJBQ1RfQVRUUklCVVRFO1xuXG4gICAgICAgIHB1YmxpYyBib3VuZGluZ1JlZ2lvbjpCb3VuZGluZ1JlZ2lvbiA9IG51bGw7XG5cbiAgICAgICAgcHVibGljIGFic3RyYWN0IGNyZWF0ZUJvdW5kaW5nUmVnaW9uKCk7XG4gICAgICAgIHB1YmxpYyBhYnN0cmFjdCBidWlsZEJvdW5kaW5nUmVnaW9uKCk7XG5cbiAgICAgICAgcHVibGljIGluaXQoKXtcbiAgICAgICAgICAgIHRoaXMuYm91bmRpbmdSZWdpb24gPSB0aGlzLmNyZWF0ZUJvdW5kaW5nUmVnaW9uKCk7XG4gICAgICAgICAgICB0aGlzLmJvdW5kaW5nUmVnaW9uLmluaXQoKTtcblxuICAgICAgICAgICAgdGhpcy5idWlsZEJvdW5kaW5nUmVnaW9uKCk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgdXBkYXRlKGVsYXBzZWRUaW1lOm51bWJlcil7XG4gICAgICAgICAgICB0aGlzLmJvdW5kaW5nUmVnaW9uLnVwZGF0ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHVwZGF0ZVNoYXBlKCl7XG4gICAgICAgICAgICB0aGlzLmJvdW5kaW5nUmVnaW9uLnVwZGF0ZVNoYXBlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBAcmVxdWlyZShmdW5jdGlvbihjb2xsaWRlcjpDb2xsaWRlcil7XG4gICAgICAgICAgICBhc3NlcnQoY29sbGlkZXIgaW5zdGFuY2VvZiBDb2xsaWRlciwgTG9nLmluZm8uRlVOQ19TSE9VTEQoXCJ0YXJnZXRcIiwgXCJiZSBjb2xsaWRlclwiKSlcbiAgICAgICAgfSlcbiAgICAgICAgcHVibGljIGlzSW50ZXJzZWN0V2l0aChjb2xsaWRlcjpDb2xsaWRlcil7XG4gICAgICAgICAgICBpZihjb2xsaWRlciBpbnN0YW5jZW9mIEJveENvbGxpZGVyKXtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5ib3VuZGluZ1JlZ2lvbi5pc0ludGVyc2VjdFdpdGhCb3goY29sbGlkZXIuYm91bmRpbmdSZWdpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZihjb2xsaWRlciBpbnN0YW5jZW9mIFNwaGVyZUNvbGxpZGVyKXtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5ib3VuZGluZ1JlZ2lvbi5pc0ludGVyc2VjdFdpdGhTcGhlcmUoY29sbGlkZXIuYm91bmRpbmdSZWdpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICBMb2cud2FybihMb2cuaW5mby5GVU5DX05PVF9TVVBQT1JUKGAke3RoaXMudHlwZX0gY29sbGlkZXJgLCBgaW50ZXJzZWN0IHdpdGggJHtjb2xsaWRlci50eXBlfSBjb2xsaWRlcmApKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBpc0NvbGxpZGUodGFyZ2V0T2JqZWN0OkdhbWVPYmplY3QpOmJvb2xlYW57XG4gICAgICAgICAgICB2YXIgY29sbGlkZXI6Q29sbGlkZXIgPSBudWxsO1xuXG4gICAgICAgICAgICBpZih0aGlzLl9pc1NlbGYodGFyZ2V0T2JqZWN0KSB8fCAhdGFyZ2V0T2JqZWN0Lmhhc0NvbXBvbmVudChDb2xsaWRlcikpe1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29sbGlkZXIgPSB0YXJnZXRPYmplY3QuZ2V0Q29tcG9uZW50PENvbGxpZGVyPihDb2xsaWRlcik7XG5cbiAgICAgICAgICAgIGlmKHRhcmdldE9iamVjdC5oYXNDb21wb25lbnQoUmlnaWRCb2R5KSl7XG4gICAgICAgICAgICAgICAgY29sbGlkZXIudXBkYXRlU2hhcGUoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaXNJbnRlcnNlY3RXaXRoKGNvbGxpZGVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX2lzU2VsZihlbnRpdHlPYmplY3Q6R2FtZU9iamVjdCl7XG4gICAgICAgICAgICByZXR1cm4gSnVkZ2VVdGlscy5pc1NlbGYodGhpcy5lbnRpdHlPYmplY3QsIGVudGl0eU9iamVjdCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbiIsIm1vZHVsZSB3ZCB7XG4gICAgZXhwb3J0IGNsYXNzIEJveENvbGxpZGVyIGV4dGVuZHMgQ29sbGlkZXIge1xuICAgICAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZSgpIHtcbiAgICAgICAgICAgIHZhciBvYmogPSBuZXcgdGhpcygpO1xuXG4gICAgICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGJvdW5kaW5nUmVnaW9uOkJveEJvdW5kaW5nUmVnaW9uO1xuXG4gICAgICAgIHB1YmxpYyBjZW50ZXI6VmVjdG9yMyA9IFZlY3RvcjMuY3JlYXRlKDAsIDAsIDApO1xuICAgICAgICBwdWJsaWMgaGFsZkV4dGVudHM6VmVjdG9yMyA9IG51bGw7XG4gICAgICAgIHB1YmxpYyB0eXBlOnN0cmluZyA9IDxhbnk+Q29sbGlkZXJUeXBlLkJPWDtcblxuICAgICAgICBwdWJsaWMgY3JlYXRlQm91bmRpbmdSZWdpb24oKXtcbiAgICAgICAgICAgIHJldHVybiBCb3hCb3VuZGluZ1JlZ2lvbi5jcmVhdGUodGhpcy5lbnRpdHlPYmplY3QpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGJ1aWxkQm91bmRpbmdSZWdpb24oKXtcbiAgICAgICAgICAgIHRoaXMuYm91bmRpbmdSZWdpb24uYnVpbGQodGhpcy5jZW50ZXIsIHRoaXMuaGFsZkV4dGVudHMpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4iLCJtb2R1bGUgd2Qge1xuICAgIGV4cG9ydCBjbGFzcyBTcGhlcmVDb2xsaWRlciBleHRlbmRzIENvbGxpZGVyIHtcbiAgICAgICAgcHVibGljIHN0YXRpYyBjcmVhdGUoKSB7XG4gICAgICAgICAgICB2YXIgb2JqID0gbmV3IHRoaXMoKTtcblxuICAgICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBib3VuZGluZ1JlZ2lvbjpTcGhlcmVCb3VuZGluZ1JlZ2lvbjtcblxuICAgICAgICBwdWJsaWMgY2VudGVyOlZlY3RvcjMgPSBWZWN0b3IzLmNyZWF0ZSgwLCAwLCAwKTtcbiAgICAgICAgcHVibGljIHJhZGl1czpudW1iZXIgPSBudWxsO1xuICAgICAgICBwdWJsaWMgdHlwZTpzdHJpbmcgPSA8YW55PkNvbGxpZGVyVHlwZS5TUEhFUkU7XG5cbiAgICAgICAgcHVibGljIGNyZWF0ZUJvdW5kaW5nUmVnaW9uKCl7XG4gICAgICAgICAgICByZXR1cm4gU3BoZXJlQm91bmRpbmdSZWdpb24uY3JlYXRlKHRoaXMuZW50aXR5T2JqZWN0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBidWlsZEJvdW5kaW5nUmVnaW9uKCl7XG4gICAgICAgICAgICB0aGlzLmJvdW5kaW5nUmVnaW9uLmJ1aWxkKHRoaXMuY2VudGVyLCB0aGlzLnJhZGl1cyk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbiIsIm1vZHVsZSB3ZCB7XG4gICAgZXhwb3J0IGFic3RyYWN0IGNsYXNzIEJvdW5kaW5nUmVnaW9ue1xuICAgICAgICBjb25zdHJ1Y3RvcihlbnRpdHlPYmplY3Q6R2FtZU9iamVjdCl7XG4gICAgICAgICAgICB0aGlzLmVudGl0eU9iamVjdCA9IGVudGl0eU9iamVjdDtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBzaGFwZTpTaGFwZSA9IG51bGw7XG5cbiAgICAgICAgcHJvdGVjdGVkIGVudGl0eU9iamVjdDpHYW1lT2JqZWN0ID0gbnVsbDtcbiAgICAgICAgcHJvdGVjdGVkIGlzVXNlclNwZWNpZnlUaGVSZWdpb246Ym9vbGVhbiA9IGZhbHNlO1xuICAgICAgICBwcm90ZWN0ZWQgb3JpZ2luU2hhcGU6U2hhcGUgPSBudWxsO1xuICAgICAgICBwcm90ZWN0ZWQgZGVidWdPYmplY3Q6R2FtZU9iamVjdCA9IG51bGw7XG5cblxuICAgICAgICBwdWJsaWMgYWJzdHJhY3QgdXBkYXRlU2hhcGUoKTtcblxuICAgICAgICBwdWJsaWMgaW5pdCgpe1xuICAgICAgICAgICAgdGhpcy5zaGFwZSA9IHRoaXMuY3JlYXRlU2hhcGUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIEBlbnN1cmUoZnVuY3Rpb24ocmV0dXJuVmFsdWUsIGNlbnRlciwgLi4uYXJncyl7XG4gICAgICAgICAgICBpZih0aGlzLmlzQnVpbGRVc2VyU3BlY2lmeUJvdW5kaW5nUmVnaW9uLmFwcGx5KHRoaXMsIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSkpKXtcbiAgICAgICAgICAgICAgICBhc3NlcnQodGhpcy5zaGFwZS5jZW50ZXIuaXNFcXVhbChjZW50ZXIpLCBMb2cuaW5mby5GVU5DX1NIT1VMRF9OT1QoXCJ0cmFuc2Zvcm0gc2hhcGUgd2hlbiBidWlsZFwiKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvL2Vsc2V7XG4gICAgICAgICAgICAvLyAgICBhc3NlcnQodGhpcy5zaGFwZS5jZW50ZXIuaXNaZXJvKCksIExvZy5pbmZvLkZVTkNfU0hPVUxEX05PVChcInRyYW5zZm9ybSBzaGFwZSB3aGVuIGJ1aWxkXCIpKTtcbiAgICAgICAgICAgIC8vfVxuICAgICAgICB9KVxuICAgICAgICBwdWJsaWMgYnVpbGQoY2VudGVyOlZlY3RvcjMsIC4uLmFyZ3Mpe1xuICAgICAgICAgICAgdmFyIHBhcmFtcyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMCk7XG5cbiAgICAgICAgICAgIGlmKHRoaXMuaXNCdWlsZFVzZXJTcGVjaWZ5Qm91bmRpbmdSZWdpb24uYXBwbHkodGhpcywgcGFyYW1zKSl7XG4gICAgICAgICAgICAgICAgdGhpcy5pc1VzZXJTcGVjaWZ5VGhlUmVnaW9uID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLnNoYXBlLnNldEZyb21TaGFwZVBhcmFtLmFwcGx5KHRoaXMuc2hhcGUsIHBhcmFtcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgIHRoaXMuc2hhcGUuc2V0RnJvbVBvaW50cyhDb2xsaWRlclV0aWxzLmdldFZlcnRpY2VzKHRoaXMuZW50aXR5T2JqZWN0KSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMub3JpZ2luU2hhcGUgPSB0aGlzLnNoYXBlLmNvcHkoKTtcblxuICAgICAgICAgICAgaWYoRGVidWdDb25maWcuZGVidWdDb2xsaXNpb24pe1xuICAgICAgICAgICAgICAgIHRoaXMuZGVidWdPYmplY3QgPSB0aGlzLmJ1aWxkRGVidWdPYmplY3RGcm9tU2hhcGUodGhpcy5zaGFwZSk7XG4gICAgICAgICAgICAgICAgRGlyZWN0b3IuZ2V0SW5zdGFuY2UoKS5zY2VuZS5hZGRDaGlsZCh0aGlzLmRlYnVnT2JqZWN0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyB1cGRhdGUoKXtcbiAgICAgICAgICAgIC8vdG9kbyBjb25zaWRlciBtb3JwaFRhcmdldHMoaWYgaGFzIG1vcnBoVGFyZ2V0cyBhbmQgbm90IGNoYW5nZSB0YXJnZXQsIHJldHVybik/XG4gICAgICAgICAgICBpZih0aGlzLmlzTm90VHJhbnNmb3JtZWQoKSl7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZihEZWJ1Z0NvbmZpZy5kZWJ1Z0NvbGxpc2lvbil7XG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVTaGFwZSgpO1xuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlRGVidWdPYmplY3RGcm9tU2hhcGUodGhpcy5zaGFwZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmKCF0aGlzLmVudGl0eU9iamVjdC5oYXNDb21wb25lbnQoUmlnaWRCb2R5KSl7XG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVTaGFwZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGlzSW50ZXJzZWN0V2l0aFNwaGVyZShib3VuZGluZ1JlZ2lvbjpTcGhlcmVCb3VuZGluZ1JlZ2lvbil7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zaGFwZS5pc0ludGVyc2VjdFdpdGhTcGhlcmUoYm91bmRpbmdSZWdpb24uc2hhcGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGlzSW50ZXJzZWN0V2l0aEJveChib3VuZGluZ1JlZ2lvbjpCb3hCb3VuZGluZ1JlZ2lvbil7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zaGFwZS5pc0ludGVyc2VjdFdpdGhCb3goYm91bmRpbmdSZWdpb24uc2hhcGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJvdGVjdGVkIGFic3RyYWN0IGNyZWF0ZVNoYXBlKCk6U2hhcGU7XG4gICAgICAgIHByb3RlY3RlZCBhYnN0cmFjdCBpc0J1aWxkVXNlclNwZWNpZnlCb3VuZGluZ1JlZ2lvbiguLi5hcmdzKTpib29sZWFuO1xuICAgICAgICBwcm90ZWN0ZWQgYWJzdHJhY3QgaXNOb3RUcmFuc2Zvcm1lZCgpOmJvb2xlYW47XG4gICAgICAgIHByb3RlY3RlZCBhYnN0cmFjdCB1cGRhdGVEZWJ1Z09iamVjdEZyb21TaGFwZShzaGFwZTpTaGFwZSk7XG4gICAgICAgIHByb3RlY3RlZCBhYnN0cmFjdCBzZXREZWJ1Z09iamVjdEdlb21ldHJ5KGdlb21ldHJ5OkN1c3RvbUdlb21ldHJ5LCBzaGFwZTpTaGFwZSk7XG5cbiAgICAgICAgcHJvdGVjdGVkIGJ1aWxkRGVidWdPYmplY3RGcm9tU2hhcGUoc2hhcGU6U2hhcGUpe1xuICAgICAgICAgICAgdmFyIG1hdGVyaWFsID0gbnVsbCxcbiAgICAgICAgICAgICAgICBnZW9tZXRyeSA9IG51bGwsXG4gICAgICAgICAgICAgICAgcmVuZGVyZXIgPSBudWxsLFxuICAgICAgICAgICAgICAgIGVudGl0eU9iamVjdCA9IG51bGw7XG5cbiAgICAgICAgICAgIG1hdGVyaWFsID0gd2QuQmFzaWNNYXRlcmlhbC5jcmVhdGUoKTtcbiAgICAgICAgICAgIG1hdGVyaWFsLmNvbG9yID0gd2QuQ29sb3IuY3JlYXRlKFwicmdiKDI1NSwwLDApXCIpO1xuXG4gICAgICAgICAgICBnZW9tZXRyeSA9IHdkLkN1c3RvbUdlb21ldHJ5LmNyZWF0ZSgpO1xuICAgICAgICAgICAgZ2VvbWV0cnkubWF0ZXJpYWwgPSBtYXRlcmlhbDtcbiAgICAgICAgICAgIHRoaXMuc2V0RGVidWdPYmplY3RHZW9tZXRyeShnZW9tZXRyeSwgc2hhcGUpO1xuXG4gICAgICAgICAgICByZW5kZXJlciA9IHdkLk1lc2hSZW5kZXJlci5jcmVhdGUoKTtcbiAgICAgICAgICAgIHJlbmRlcmVyLmRyYXdNb2RlID0gRHJhd01vZGUuTElORVM7XG5cbiAgICAgICAgICAgIGVudGl0eU9iamVjdCA9IHdkLkdhbWVPYmplY3QuY3JlYXRlKCk7XG4gICAgICAgICAgICBlbnRpdHlPYmplY3QuYWRkQ29tcG9uZW50KGdlb21ldHJ5KTtcbiAgICAgICAgICAgIGVudGl0eU9iamVjdC5hZGRDb21wb25lbnQocmVuZGVyZXIpO1xuXG4gICAgICAgICAgICBlbnRpdHlPYmplY3QudHJhbnNmb3JtLnRyYW5zbGF0ZShzaGFwZS5jZW50ZXIpO1xuXG4gICAgICAgICAgICBlbnRpdHlPYmplY3QubmFtZSA9IGBkZWJ1Z0JvdW5kaW5nUmVnaW9uJHt0aGlzLmVudGl0eU9iamVjdC51aWR9YDtcblxuICAgICAgICAgICAgZW50aXR5T2JqZWN0LmluaXQoKTtcblxuICAgICAgICAgICAgcmV0dXJuIGVudGl0eU9iamVjdDtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuIiwibW9kdWxlIHdkIHtcbiAgICBleHBvcnQgY2xhc3MgQm94Qm91bmRpbmdSZWdpb24gZXh0ZW5kcyBCb3VuZGluZ1JlZ2lvbntcbiAgICAgICAgcHVibGljIHN0YXRpYyBjcmVhdGUoZW50aXR5T2JqZWN0OkdhbWVPYmplY3QpIHtcbiAgICAgICAgICAgIHZhciBvYmogPSBuZXcgdGhpcyhlbnRpdHlPYmplY3QpO1xuXG4gICAgICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHNoYXBlOkFBQkJTaGFwZTtcblxuICAgICAgICBwcm90ZWN0ZWQgb3JpZ2luU2hhcGU6QUFCQlNoYXBlO1xuXG5cbiAgICAgICAgcHVibGljIHVwZGF0ZVNoYXBlKCl7XG4gICAgICAgICAgICB2YXIgdHJhbnNmb3JtID0gdGhpcy5lbnRpdHlPYmplY3QudHJhbnNmb3JtO1xuXG4gICAgICAgICAgICBpZih0aGlzLmlzVXNlclNwZWNpZnlUaGVSZWdpb24pe1xuICAgICAgICAgICAgICAgIHRoaXMuc2hhcGUuc2V0RnJvbVRyYW5zbGF0aW9uQW5kU2NhbGUodGhpcy5vcmlnaW5TaGFwZSwgdHJhbnNmb3JtLmxvY2FsVG9Xb3JsZE1hdHJpeClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICAgICAgaWYodHJhbnNmb3JtLmlzUm90YXRlKXtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zaGFwZS5zZXRGcm9tT2JqZWN0KHRoaXMuZW50aXR5T2JqZWN0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgLy90b2RvIG9wdGltaXplOnNldCB3aGVuIGlzVHJhbnNsYXRlL2lzU2NhbGU/XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2hhcGUuc2V0RnJvbVRyYW5zbGF0aW9uQW5kU2NhbGUodGhpcy5vcmlnaW5TaGFwZSwgdHJhbnNmb3JtLmxvY2FsVG9Xb3JsZE1hdHJpeClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBwcm90ZWN0ZWQgY3JlYXRlU2hhcGUoKXtcbiAgICAgICAgICAgIC8vdG9kbyBhZGQgT0JCU2hhcGVcbiAgICAgICAgICAgIHJldHVybiBBQUJCU2hhcGUuY3JlYXRlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBAcmVxdWlyZShmdW5jdGlvbihzaGFwZTpBQUJCU2hhcGUpe1xuICAgICAgICAgICAgYXNzZXJ0KHRoaXMuZGVidWdPYmplY3QsIExvZy5pbmZvLkZVTkNfU0hPVUxEKFwiYnVpbGQgZGVidWdPYmplY3RcIikpO1xuICAgICAgICB9KVxuICAgICAgICBwcm90ZWN0ZWQgdXBkYXRlRGVidWdPYmplY3RGcm9tU2hhcGUoc2hhcGU6QUFCQlNoYXBlKXtcbiAgICAgICAgICAgIHZhciBnZW9tZXRyeSA9IHRoaXMuZGVidWdPYmplY3QuZ2V0Q29tcG9uZW50PEN1c3RvbUdlb21ldHJ5PihDdXN0b21HZW9tZXRyeSk7XG5cbiAgICAgICAgICAgIHRoaXMuc2V0RGVidWdPYmplY3RHZW9tZXRyeShnZW9tZXRyeSwgc2hhcGUpO1xuXG4gICAgICAgICAgICB0aGlzLmRlYnVnT2JqZWN0LnRyYW5zZm9ybS5wb3NpdGlvbiA9IHNoYXBlLmNlbnRlcjtcbiAgICAgICAgfVxuXG4gICAgICAgIEByZXF1aXJlKGZ1bmN0aW9uKGdlb21ldHJ5OkN1c3RvbUdlb21ldHJ5LCBzaGFwZTpBQUJCU2hhcGUpe1xuICAgICAgICAgICAgYXNzZXJ0KHNoYXBlLmhhbGZFeHRlbnRzICYmICFzaGFwZS5oYWxmRXh0ZW50cy5pc1plcm8oKSwgTG9nLmluZm8uRlVOQ19TSE9VTERfTk9UKFwiaGFsZkV4dGVudHNcIiwgXCJiZSB6ZXJvXCIpKTtcbiAgICAgICAgfSlcbiAgICAgICAgcHJvdGVjdGVkIHNldERlYnVnT2JqZWN0R2VvbWV0cnkoZ2VvbWV0cnk6Q3VzdG9tR2VvbWV0cnksIHNoYXBlOkFBQkJTaGFwZSl7XG4gICAgICAgICAgICB2YXIgaGFsZkV4dGVudHMgPSBzaGFwZS5oYWxmRXh0ZW50cyxcbiAgICAgICAgICAgICAgICB4ID0gaGFsZkV4dGVudHMueCxcbiAgICAgICAgICAgICAgICB5ID0gaGFsZkV4dGVudHMueSxcbiAgICAgICAgICAgICAgICB6ID0gaGFsZkV4dGVudHMuejtcblxuICAgICAgICAgICAgZ2VvbWV0cnkudmVydGljZXMgPSBbXG4gICAgICAgICAgICAgICAgLXgsIC15LCAteiwgLXgsIC15LCB6LCB4LCAteSwgeiwgeCwgLXksIC16LFxuICAgICAgICAgICAgICAgIC14LCB5LCAteiwgLXgsIHksIHosIHgsIHksIHosIHgsIHksIC16XG4gICAgICAgICAgICBdO1xuXG4gICAgICAgICAgICAvKiFcbiAgICAgICAgICAgICAvL3RvZG8gb3B0aW1pemU6IHNldCBFbGVtZW50QnVmZmVyIHRvIGNyZWF0ZSBVaW50OEFycmF5LCBCdWZmZXJUeXBlLlVOU0lHTkVEX0JZVEVcbiAgICAgICAgICAgICBnZW9tZXRyeSBhZGQgYnVmZmVyIHR5cGUgdGFibGU/XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGdlb21ldHJ5LmluZGljZXMgPSBbXG4gICAgICAgICAgICAgICAgMCwxLDEsMiwyLDMsMywwLFxuICAgICAgICAgICAgICAgIDQsNSw1LDYsNiw3LDcsNCxcbiAgICAgICAgICAgICAgICAwLDQsMSw1LDIsNiwzLDdcbiAgICAgICAgICAgIF07XG4gICAgICAgIH1cblxuICAgICAgICBwcm90ZWN0ZWQgaXNCdWlsZFVzZXJTcGVjaWZ5Qm91bmRpbmdSZWdpb24oY2VudGVyOlZlY3RvcjMsIGhhbGZFeHRlbnRzOlZlY3RvcjMpe1xuICAgICAgICAgICAgcmV0dXJuICEhY2VudGVyICYmICEhaGFsZkV4dGVudHM7XG4gICAgICAgIH1cblxuICAgICAgICBwcm90ZWN0ZWQgaXNOb3RUcmFuc2Zvcm1lZCgpe1xuICAgICAgICAgICAgdmFyIHRyYW5zZm9ybSA9IHRoaXMuZW50aXR5T2JqZWN0LnRyYW5zZm9ybTtcblxuICAgICAgICAgICAgcmV0dXJuICF0cmFuc2Zvcm0uaXNSb3RhdGUgJiYgIXRyYW5zZm9ybS5pc1RyYW5zbGF0ZSAmJiAhdHJhbnNmb3JtLmlzU2NhbGU7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbiIsIm1vZHVsZSB3ZCB7XG4gICAgZXhwb3J0IGNsYXNzIFNwaGVyZUJvdW5kaW5nUmVnaW9uIGV4dGVuZHMgQm91bmRpbmdSZWdpb257XG4gICAgICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlKGVudGl0eU9iamVjdDpHYW1lT2JqZWN0KSB7XG4gICAgICAgICAgICB2YXIgb2JqID0gbmV3IHRoaXMoZW50aXR5T2JqZWN0KTtcblxuICAgICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBzaGFwZTpTcGhlcmVTaGFwZTtcblxuICAgICAgICBwcm90ZWN0ZWQgb3JpZ2luU2hhcGU6U3BoZXJlU2hhcGU7XG5cblxuICAgICAgICBwdWJsaWMgdXBkYXRlU2hhcGUoKXtcbiAgICAgICAgICAgIHZhciB0cmFuc2Zvcm0gPSB0aGlzLmVudGl0eU9iamVjdC50cmFuc2Zvcm07XG5cbiAgICAgICAgICAgIHRoaXMuc2hhcGUuc2V0RnJvbVRyYW5zbGF0aW9uQW5kU2NhbGUodGhpcy5vcmlnaW5TaGFwZSwgdHJhbnNmb3JtLmxvY2FsVG9Xb3JsZE1hdHJpeCk7XG4gICAgICAgIH1cblxuICAgICAgICBwcm90ZWN0ZWQgY3JlYXRlU2hhcGUoKXtcbiAgICAgICAgICAgIHJldHVybiBTcGhlcmVTaGFwZS5jcmVhdGUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIEByZXF1aXJlKGZ1bmN0aW9uKHNoYXBlOlNwaGVyZVNoYXBlKXtcbiAgICAgICAgICAgIGFzc2VydCh0aGlzLmRlYnVnT2JqZWN0LCBMb2cuaW5mby5GVU5DX1NIT1VMRChcImJ1aWxkIGRlYnVnT2JqZWN0XCIpKTtcbiAgICAgICAgfSlcbiAgICAgICAgcHJvdGVjdGVkIHVwZGF0ZURlYnVnT2JqZWN0RnJvbVNoYXBlKHNoYXBlOlNwaGVyZVNoYXBlKXtcbiAgICAgICAgICAgIHRoaXMuZGVidWdPYmplY3QudHJhbnNmb3JtLnBvc2l0aW9uID0gc2hhcGUuY2VudGVyO1xuXG4gICAgICAgICAgICB2YXIgc2NhbGVUaW1lcyA9IHNoYXBlLnJhZGl1cyAvIHRoaXMub3JpZ2luU2hhcGUucmFkaXVzO1xuICAgICAgICAgICAgdGhpcy5kZWJ1Z09iamVjdC50cmFuc2Zvcm0uc2NhbGUgPSBWZWN0b3IzLmNyZWF0ZShzY2FsZVRpbWVzLCBzY2FsZVRpbWVzLCBzY2FsZVRpbWVzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByb3RlY3RlZCBpc05vdFRyYW5zZm9ybWVkKCl7XG4gICAgICAgICAgICB2YXIgdHJhbnNmb3JtID0gdGhpcy5lbnRpdHlPYmplY3QudHJhbnNmb3JtO1xuXG4gICAgICAgICAgICByZXR1cm4gIXRyYW5zZm9ybS5pc1RyYW5zbGF0ZSAmJiAhdHJhbnNmb3JtLmlzU2NhbGU7XG4gICAgICAgIH1cblxuICAgICAgICBwcm90ZWN0ZWQgaXNCdWlsZFVzZXJTcGVjaWZ5Qm91bmRpbmdSZWdpb24oY2VudGVyOlZlY3RvcjMsIHJhZGl1cyl7XG4gICAgICAgICAgICByZXR1cm4gISFjZW50ZXIgJiYgISFyYWRpdXM7XG4gICAgICAgIH1cblxuICAgICAgICBAcmVxdWlyZShmdW5jdGlvbihnZW9tZXRyeTpDdXN0b21HZW9tZXRyeSwgc2hhcGU6U3BoZXJlU2hhcGUpe1xuICAgICAgICAgICAgYXNzZXJ0KHNoYXBlLnJhZGl1cyA+IDAsIExvZy5pbmZvLkZVTkNfU0hPVUxEKFwicmFkaXVzXCIsIFwiPiAwXCIpKTtcbiAgICAgICAgfSlcbiAgICAgICAgcHJvdGVjdGVkIHNldERlYnVnT2JqZWN0R2VvbWV0cnkoZ2VvbWV0cnk6Q3VzdG9tR2VvbWV0cnksIHNoYXBlOlNwaGVyZVNoYXBlKXtcbiAgICAgICAgICAgIGNvbnN0IFNFR01FTlRTID0gNDAsXG4gICAgICAgICAgICAgICAgUklOR0NPVU5UID0gMztcbiAgICAgICAgICAgIHZhciByYWRpdXMgPSBzaGFwZS5yYWRpdXMsXG4gICAgICAgICAgICAgICAgdmVydGljZXMgPSBbXSxcbiAgICAgICAgICAgICAgICB4ID0gMDtcblxuICAgICAgICAgICAgZm9yIChsZXQgcmluZyA9IDA7IHJpbmcgPCBSSU5HQ09VTlQ7IHJpbmcrKykge1xuICAgICAgICAgICAgICAgIGxldCB4byA9IDAsXG4gICAgICAgICAgICAgICAgICAgIHlvID0gMSxcbiAgICAgICAgICAgICAgICAgICAgem8gPSAyLFxuICAgICAgICAgICAgICAgICAgICB0aGV0YSA9IG51bGw7XG5cbiAgICAgICAgICAgICAgICBpZiAocmluZyA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICB4byA9IDE7XG4gICAgICAgICAgICAgICAgICAgIHlvID0gMDtcbiAgICAgICAgICAgICAgICAgICAgem8gPSAyO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChyaW5nID09PSAyKSB7XG4gICAgICAgICAgICAgICAgICAgIHhvID0gMDtcbiAgICAgICAgICAgICAgICAgICAgeW8gPSAyO1xuICAgICAgICAgICAgICAgICAgICB6byA9IDE7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBTRUdNRU5UUzsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoZXRhID0gMiAqIE1hdGguUEkgKiAoaSAvIFNFR01FTlRTKTtcbiAgICAgICAgICAgICAgICAgICAgdmVydGljZXNbeCt4b10gPSByYWRpdXMgKiBNYXRoLmNvcyh0aGV0YSk7XG4gICAgICAgICAgICAgICAgICAgIHZlcnRpY2VzW3greW9dID0gMDtcbiAgICAgICAgICAgICAgICAgICAgdmVydGljZXNbeCt6b10gPSByYWRpdXMgKiBNYXRoLnNpbih0aGV0YSk7XG4gICAgICAgICAgICAgICAgICAgIHggKz0gMztcblxuICAgICAgICAgICAgICAgICAgICB0aGV0YSA9IDIgKiBNYXRoLlBJICogKChpICsgMSkgLyBTRUdNRU5UUyk7XG4gICAgICAgICAgICAgICAgICAgIHZlcnRpY2VzW3greG9dID0gcmFkaXVzICogTWF0aC5jb3ModGhldGEpO1xuICAgICAgICAgICAgICAgICAgICB2ZXJ0aWNlc1t4K3lvXSA9IDA7XG4gICAgICAgICAgICAgICAgICAgIHZlcnRpY2VzW3grem9dID0gcmFkaXVzICogTWF0aC5zaW4odGhldGEpO1xuICAgICAgICAgICAgICAgICAgICB4ICs9IDM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBnZW9tZXRyeS52ZXJ0aWNlcyA9IHZlcnRpY2VzO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4iLCJtb2R1bGUgd2R7XG4gICAgZXhwb3J0IGNsYXNzIEJvdW5kaW5nUmVnaW9uVXRpbHN7XG4gICAgICAgIHB1YmxpYyBzdGF0aWMgaXNBQUJCSW5GcnVzdHVtKG1pblBvaW50OlZlY3RvcjMsIG1heFBvaW50OlZlY3RvcjMsIGZydXN0dW1QbGFuZXM6IEFycmF5PFBsYW5lPik6IGJvb2xlYW47XG4gICAgICAgIHB1YmxpYyBzdGF0aWMgaXNBQUJCSW5GcnVzdHVtKGJvdW5kaW5nVmVjdG9yczogVmVjdG9yM1tdLCBmcnVzdHVtUGxhbmVzOiBQbGFuZVtdKTogYm9vbGVhbjtcblxuICAgICAgICBwdWJsaWMgc3RhdGljIGlzQUFCQkluRnJ1c3R1bSguLi5hcmdzKTogYm9vbGVhbiB7XG4gICAgICAgICAgICB2YXIgYm91bmRpbmdWZWN0b3JzID0gbnVsbCxcbiAgICAgICAgICAgICAgICBmcnVzdHVtUGxhbmVzID0gbnVsbDtcblxuICAgICAgICAgICAgaWYoYXJncy5sZW5ndGggPT09IDIpe1xuICAgICAgICAgICAgICAgIGJvdW5kaW5nVmVjdG9ycyA9IGFyZ3NbMF07XG4gICAgICAgICAgICAgICAgZnJ1c3R1bVBsYW5lcyA9IGFyZ3NbMV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmKGFyZ3MubGVuZ3RoID09PSAzKXtcbiAgICAgICAgICAgICAgICBsZXQgbWluUG9pbnQgPSBhcmdzWzBdLFxuICAgICAgICAgICAgICAgICAgICBtYXhQb2ludCA9IGFyZ3NbMV07XG5cbiAgICAgICAgICAgICAgICBib3VuZGluZ1ZlY3RvcnMgPSB0aGlzLmJ1aWxkQm91bmRpbmdWZWN0b3JzKG1pblBvaW50LCBtYXhQb2ludCk7XG5cbiAgICAgICAgICAgICAgICBmcnVzdHVtUGxhbmVzID0gYXJnc1syXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZm9yIChsZXQgcCA9IDA7IHAgPCA2OyBwKyspIHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZnJ1c3R1bVBsYW5lc1twXS5kb3RDb29yZGluYXRlKGJvdW5kaW5nVmVjdG9yc1tpXSkgPCAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHN0YXRpYyBpc0FBQkJJbnRlcnNlY3RGcnVzdHVtKG1pblBvaW50OlZlY3RvcjMsIG1heFBvaW50OlZlY3RvcjMsIGZydXN0dW1QbGFuZXM6IEFycmF5PFBsYW5lPik6IGJvb2xlYW47XG4gICAgICAgIHB1YmxpYyBzdGF0aWMgaXNBQUJCSW50ZXJzZWN0RnJ1c3R1bShib3VuZGluZ1ZlY3RvcnM6QXJyYXk8VmVjdG9yMz4sIGZydXN0dW1QbGFuZXM6IEFycmF5PFBsYW5lPik6IGJvb2xlYW47XG5cbiAgICAgICAgcHVibGljIHN0YXRpYyBpc0FBQkJJbnRlcnNlY3RGcnVzdHVtKC4uLmFyZ3MpOiBib29sZWFuIHtcbiAgICAgICAgdmFyIGJvdW5kaW5nVmVjdG9ycyA9IG51bGwsXG4gICAgICAgICAgICBmcnVzdHVtUGxhbmVzID0gbnVsbDtcblxuICAgICAgICAgICAgaWYoYXJncy5sZW5ndGggPT09IDIpe1xuICAgICAgICAgICAgICAgIGJvdW5kaW5nVmVjdG9ycyA9IGFyZ3NbMF07XG4gICAgICAgICAgICAgICAgZnJ1c3R1bVBsYW5lcyA9IGFyZ3NbMV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmKGFyZ3MubGVuZ3RoID09PSAzKXtcbiAgICAgICAgICAgICAgICBsZXQgbWluUG9pbnQgPSBhcmdzWzBdLFxuICAgICAgICAgICAgICAgICAgICBtYXhQb2ludCA9IGFyZ3NbMV07XG5cbiAgICAgICAgICAgICAgICBib3VuZGluZ1ZlY3RvcnMgPSB0aGlzLmJ1aWxkQm91bmRpbmdWZWN0b3JzKG1pblBvaW50LCBtYXhQb2ludCk7XG5cbiAgICAgICAgICAgICAgICBmcnVzdHVtUGxhbmVzID0gYXJnc1syXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZm9yIChsZXQgcCA9IDA7IHAgPCA2OyBwKyspIHtcbiAgICAgICAgICAgICAgICBsZXQgaW5Db3VudCA9IDg7XG5cbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZnJ1c3R1bVBsYW5lc1twXS5kb3RDb29yZGluYXRlKGJvdW5kaW5nVmVjdG9yc1tpXSkgPCAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbkNvdW50LS07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoaW5Db3VudCA9PT0gMCl7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHN0YXRpYyBidWlsZEJvdW5kaW5nVmVjdG9ycyhtaW5Qb2ludDpWZWN0b3IzLCBtYXhQb2ludDpWZWN0b3IzKXtcbiAgICAgICAgICAgIHZhciBib3VuZGluZ1ZlY3RvcnMgPSBbXTtcblxuICAgICAgICAgICAgYm91bmRpbmdWZWN0b3JzLnB1c2gobWluUG9pbnQuY29weSgpKTtcbiAgICAgICAgICAgIGJvdW5kaW5nVmVjdG9ycy5wdXNoKG1heFBvaW50LmNvcHkoKSk7XG5cbiAgICAgICAgICAgIGJvdW5kaW5nVmVjdG9ycy5wdXNoKG1pblBvaW50LmNvcHkoKSk7XG4gICAgICAgICAgICBib3VuZGluZ1ZlY3RvcnNbMl0ueCA9IG1heFBvaW50Lng7XG5cbiAgICAgICAgICAgIGJvdW5kaW5nVmVjdG9ycy5wdXNoKG1pblBvaW50LmNvcHkoKSk7XG4gICAgICAgICAgICBib3VuZGluZ1ZlY3RvcnNbM10ueSA9IG1heFBvaW50Lnk7XG5cbiAgICAgICAgICAgIGJvdW5kaW5nVmVjdG9ycy5wdXNoKG1pblBvaW50LmNvcHkoKSk7XG4gICAgICAgICAgICBib3VuZGluZ1ZlY3RvcnNbNF0ueiA9IG1heFBvaW50Lno7XG5cbiAgICAgICAgICAgIGJvdW5kaW5nVmVjdG9ycy5wdXNoKG1heFBvaW50LmNvcHkoKSk7XG4gICAgICAgICAgICBib3VuZGluZ1ZlY3RvcnNbNV0ueiA9IG1pblBvaW50Lno7XG5cbiAgICAgICAgICAgIGJvdW5kaW5nVmVjdG9ycy5wdXNoKG1heFBvaW50LmNvcHkoKSk7XG4gICAgICAgICAgICBib3VuZGluZ1ZlY3RvcnNbNl0ueCA9IG1pblBvaW50Lng7XG5cbiAgICAgICAgICAgIGJvdW5kaW5nVmVjdG9ycy5wdXNoKG1heFBvaW50LmNvcHkoKSk7XG4gICAgICAgICAgICBib3VuZGluZ1ZlY3RvcnNbN10ueSA9IG1pblBvaW50Lnk7XG5cbiAgICAgICAgICAgIHJldHVybiBib3VuZGluZ1ZlY3RvcnM7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJtb2R1bGUgd2Qge1xuICAgIGV4cG9ydCBhYnN0cmFjdCBjbGFzcyBTaGFwZXtcbiAgICAgICAgcHVibGljIGNlbnRlcjpWZWN0b3IzID0gVmVjdG9yMy5jcmVhdGUoMCwgMCwgMCk7XG5cbiAgICAgICAgcHVibGljIGFic3RyYWN0IHNldEZyb21TaGFwZVBhcmFtKC4uLmFyZ3MpO1xuICAgICAgICBwdWJsaWMgYWJzdHJhY3Qgc2V0RnJvbVBvaW50cyhwb2ludHM6QXJyYXk8bnVtYmVyPik7XG4gICAgICAgIHB1YmxpYyBhYnN0cmFjdCBjb3B5KCk6U2hhcGU7XG5cbiAgICAgICAgcHVibGljIGFic3RyYWN0IGlzSW50ZXJzZWN0V2l0aEJveChzaGFwZTpBQUJCU2hhcGUpO1xuICAgICAgICBwdWJsaWMgYWJzdHJhY3QgaXNJbnRlcnNlY3RXaXRoQm94KG1pbjpWZWN0b3IzLCBtYXg6VmVjdG9yMyk7XG5cbiAgICAgICAgcHVibGljIGFic3RyYWN0IGlzSW50ZXJzZWN0V2l0aFNwaGVyZShzaGFwZTpTcGhlcmVTaGFwZSk7XG4gICAgICAgIHB1YmxpYyBhYnN0cmFjdCBpc0ludGVyc2VjdFdpdGhSYXkocmF5OlJheSk7XG5cbiAgICAgICAgcHJvdGVjdGVkIGlzQm94QW5kU3BoZXJlSW50ZXJzZWN0ZWQoYm94OkFBQkJTaGFwZSwgc3BoZXJlOlNwaGVyZVNoYXBlKSB7XG4gICAgICAgICAgICB2YXIgc3BoZXJlQ2VudGVyID0gc3BoZXJlLmNlbnRlcixcbiAgICAgICAgICAgICAgICBzcGhlcmVSYWRpdXMgPSBzcGhlcmUucmFkaXVzO1xuXG4gICAgICAgICAgICByZXR1cm4gc3BoZXJlQ2VudGVyLmRpc3RhbmNlVG9TcXVhcmVkKGJveC5jbG9zZXN0UG9pbnRUbyhzcGhlcmVDZW50ZXIpKSA8IHNwaGVyZVJhZGl1cyoqMjtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuIiwibW9kdWxlIHdkIHtcbiAgICBleHBvcnQgY2xhc3MgQUFCQlNoYXBlIGV4dGVuZHMgU2hhcGUge1xuICAgICAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZSgpIHtcbiAgICAgICAgICAgIHZhciBvYmogPSBuZXcgdGhpcygpO1xuXG4gICAgICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHN0YXRpYyBnZXRDZW50ZXIobWluOlZlY3RvcjMsIG1heDpWZWN0b3IzKXtcbiAgICAgICAgICAgIHJldHVybiBWZWN0b3IzLmNyZWF0ZSgpLmFkZDIobWF4LCBtaW4pLnNjYWxlKDAuNSk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgc3RhdGljIGdldEhhbGZFeHRlbnRzKG1pbjpWZWN0b3IzLCBtYXg6VmVjdG9yMyl7XG4gICAgICAgICAgICByZXR1cm4gVmVjdG9yMy5jcmVhdGUoKS5zdWIyKG1heCwgbWluKS5zY2FsZSgwLjUpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGhhbGZFeHRlbnRzOlZlY3RvcjMgPSBWZWN0b3IzLmNyZWF0ZSgwLjUsIDAuNSwgMC41KTtcblxuICAgICAgICBwdWJsaWMgc2V0TWluTWF4KG1pbjpWZWN0b3IzLCBtYXg6VmVjdG9yMykge1xuICAgICAgICAgICAgdGhpcy5jZW50ZXIgPSBBQUJCU2hhcGUuZ2V0Q2VudGVyKG1pbiwgbWF4KTtcbiAgICAgICAgICAgIHRoaXMuaGFsZkV4dGVudHMgPSBBQUJCU2hhcGUuZ2V0SGFsZkV4dGVudHMobWluLCBtYXgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGdldE1pbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNlbnRlci5jb3B5KCkuc3ViKHRoaXMuaGFsZkV4dGVudHMpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGdldE1heCgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNlbnRlci5jb3B5KCkuYWRkKHRoaXMuaGFsZkV4dGVudHMpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHNldEZyb21TaGFwZVBhcmFtKGNlbnRlcjpWZWN0b3IzLCBoYWxmRXh0ZW50czpWZWN0b3IzKXtcbiAgICAgICAgICAgIHRoaXMuY2VudGVyID0gY2VudGVyO1xuICAgICAgICAgICAgdGhpcy5oYWxmRXh0ZW50cyA9IGhhbGZFeHRlbnRzO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHNldEZyb21Qb2ludHMocG9pbnRzOkFycmF5PG51bWJlcj4pIHtcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcyxcbiAgICAgICAgICAgICAgICBtaW4gPSB0aGlzLl9nZXRFbXB0eU1pbigpLFxuICAgICAgICAgICAgICAgIG1heCA9IHRoaXMuX2dldEVtcHR5TWF4KCk7XG5cbiAgICAgICAgICAgIEdlb21ldHJ5VXRpbHMuaXRlcmF0ZVRocmVlQ29tcG9uZW50KHBvaW50cywgKHBvaW50OlZlY3RvcjMpID0+IHtcbiAgICAgICAgICAgICAgICBzZWxmLl9leHBhbmRCeVBvaW50KHBvaW50LCBtaW4sIG1heCk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdGhpcy5zZXRNaW5NYXgobWluLCBtYXgpO1xuXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcblxuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIHNldCBhYWJiIGVuY2xvc2Ugc3BlY2lmeSBhYWJiXG4gICAgICAgICAqIEBwYXJhbSB7YWFiYn0gYWFiYiBpc24ndCB5ZXQgdHJhbnNmb3JtZWQgYnkgbWF0cml4XG4gICAgICAgICAqIEBwYXJhbSB7bWF0cml4fSBtYXRyaXggaXMgdG8gdHJhbnNmb3JtIHRoZSBhYWJiXG4gICAgICAgICAqL1xuICAgICAgICBwdWJsaWMgc2V0RnJvbVRyYW5zZm9ybWVkQUFCQihhYWJiOkFBQkJTaGFwZSwgbWF0cml4Ok1hdHJpeDQpIHtcbiAgICAgICAgICAgIHZhciBiYyA9IHRoaXMuY2VudGVyLFxuICAgICAgICAgICAgICAgIGJyID0gdGhpcy5oYWxmRXh0ZW50cyxcbiAgICAgICAgICAgICAgICBhYyA9IGFhYmIuY2VudGVyLnZhbHVlcyxcbiAgICAgICAgICAgICAgICBhciA9IGFhYmIuaGFsZkV4dGVudHMudmFsdWVzLFxuICAgICAgICAgICAgICAgIG0gPSBtYXRyaXgudmFsdWVzLFxuICAgICAgICAgICAgICAgIG14MCA9IG1bMF0sXG4gICAgICAgICAgICAgICAgbXgxID0gbVs0XSxcbiAgICAgICAgICAgICAgICBteDIgPSBtWzhdLFxuICAgICAgICAgICAgICAgIG15MCA9IG1bMV0sXG4gICAgICAgICAgICAgICAgbXkxID0gbVs1XSxcbiAgICAgICAgICAgICAgICBteTIgPSBtWzldLFxuICAgICAgICAgICAgICAgIG16MCA9IG1bMl0sXG4gICAgICAgICAgICAgICAgbXoxID0gbVs2XSxcbiAgICAgICAgICAgICAgICBtejIgPSBtWzEwXSxcbiAgICAgICAgICAgICAgICBteDBhID0gTWF0aC5hYnMobXgwKSxcbiAgICAgICAgICAgICAgICBteDFhID0gTWF0aC5hYnMobXgxKSxcbiAgICAgICAgICAgICAgICBteDJhID0gTWF0aC5hYnMobXgyKSxcbiAgICAgICAgICAgICAgICBteTBhID0gTWF0aC5hYnMobXkwKSxcbiAgICAgICAgICAgICAgICBteTFhID0gTWF0aC5hYnMobXkxKSxcbiAgICAgICAgICAgICAgICBteTJhID0gTWF0aC5hYnMobXkyKSxcbiAgICAgICAgICAgICAgICBtejBhID0gTWF0aC5hYnMobXowKSxcbiAgICAgICAgICAgICAgICBtejFhID0gTWF0aC5hYnMobXoxKSxcbiAgICAgICAgICAgICAgICBtejJhID0gTWF0aC5hYnMobXoyKTtcblxuICAgICAgICAgICAgYmMuc2V0KFxuICAgICAgICAgICAgICAgIG1bMTJdICsgbXgwICogYWNbMF0gKyBteDEgKiBhY1sxXSArIG14MiAqIGFjWzJdLFxuICAgICAgICAgICAgICAgIG1bMTNdICsgbXkwICogYWNbMF0gKyBteTEgKiBhY1sxXSArIG15MiAqIGFjWzJdLFxuICAgICAgICAgICAgICAgIG1bMTRdICsgbXowICogYWNbMF0gKyBtejEgKiBhY1sxXSArIG16MiAqIGFjWzJdXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBici5zZXQoXG4gICAgICAgICAgICAgICAgbXgwYSAqIGFyWzBdICsgbXgxYSAqIGFyWzFdICsgbXgyYSAqIGFyWzJdLFxuICAgICAgICAgICAgICAgIG15MGEgKiBhclswXSArIG15MWEgKiBhclsxXSArIG15MmEgKiBhclsyXSxcbiAgICAgICAgICAgICAgICBtejBhICogYXJbMF0gKyBtejFhICogYXJbMV0gKyBtejJhICogYXJbMl1cbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgc2V0RnJvbVRyYW5zbGF0aW9uQW5kU2NhbGUoYWFiYjpBQUJCU2hhcGUsIG1hdHJpeDpNYXRyaXg0KXtcbiAgICAgICAgICAgIHZhciB0cmFuc2xhdGlvbiA9IG1hdHJpeC5nZXRUcmFuc2xhdGlvbigpLFxuICAgICAgICAgICAgICAgIHNjYWxlID0gbWF0cml4LmdldFNjYWxlKCk7XG5cbiAgICAgICAgICAgIHRoaXMuY2VudGVyID0gYWFiYi5jZW50ZXIuY29weSgpLmFkZCh0cmFuc2xhdGlvbik7XG4gICAgICAgICAgICAvKiFcbiAgICAgICAgICAgIHRoZSBzY2FsZSBtYXkgaGFzIGZsb2F0IGRldmlhdGlvbiwgc28gbWF5IHRoZSBoYWxmRXh0ZW50cy5cbiAgICAgICAgICAgIHRvZG8gZml4IGhhbGZFeHRlbnRzIGZsb2F0IGRldmlhdGlvbj8odXNlIHRvRml4ZWQ/KVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB0aGlzLmhhbGZFeHRlbnRzID0gYWFiYi5oYWxmRXh0ZW50cy5jb3B5KCkubXVsKHNjYWxlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIEByZXF1aXJlKGZ1bmN0aW9uIChlbnRpdHlPYmplY3Q6R2FtZU9iamVjdCkge1xuICAgICAgICAgICAgdmFyIHZlcnRpY2VzID0gQ29sbGlkZXJVdGlscy5nZXRWZXJ0aWNlcyhlbnRpdHlPYmplY3QpO1xuXG4gICAgICAgICAgICBhc3NlcnQodmVydGljZXMgJiYgdmVydGljZXMubGVuZ3RoID4gMCwgTG9nLmluZm8uRlVOQ19NVVNUX0RFRklORShcInZlcnRpY2VzXCIpKTtcbiAgICAgICAgfSlcbiAgICAgICAgcHVibGljIHNldEZyb21PYmplY3QoZW50aXR5T2JqZWN0OkdhbWVPYmplY3QpIHtcbiAgICAgICAgICAgIHZhciBtb2RlbE1hdHJpeCA9IGVudGl0eU9iamVjdC50cmFuc2Zvcm0ubG9jYWxUb1dvcmxkTWF0cml4LFxuICAgICAgICAgICAgICAgIHZlcnRpY2VzID0gQ29sbGlkZXJVdGlscy5nZXRWZXJ0aWNlcyhlbnRpdHlPYmplY3QpLFxuICAgICAgICAgICAgICAgIHNlbGYgPSB0aGlzLFxuICAgICAgICAgICAgICAgIG1pbiA9IHRoaXMuX2dldEVtcHR5TWluKCksXG4gICAgICAgICAgICAgICAgbWF4ID0gdGhpcy5fZ2V0RW1wdHlNYXgoKTtcblxuXG4gICAgICAgICAgICBHZW9tZXRyeVV0aWxzLml0ZXJhdGVUaHJlZUNvbXBvbmVudCh2ZXJ0aWNlcywgKHBvaW50OlZlY3RvcjMpID0+IHtcbiAgICAgICAgICAgICAgICBwb2ludC5hcHBseU1hdHJpeDQobW9kZWxNYXRyaXgpO1xuICAgICAgICAgICAgICAgIHNlbGYuX2V4cGFuZEJ5UG9pbnQocG9pbnQsIG1pbiwgbWF4KTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB0aGlzLnNldE1pbk1heChtaW4sIG1heCk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgaXNJbnRlcnNlY3RXaXRoQm94KHNoYXBlOkFBQkJTaGFwZSk7XG4gICAgICAgIHB1YmxpYyBpc0ludGVyc2VjdFdpdGhCb3gobWluOlZlY3RvcjMsIG1heDpWZWN0b3IzKTtcblxuICAgICAgICBwdWJsaWMgaXNJbnRlcnNlY3RXaXRoQm94KC4uLmFyZ3MpIHtcbiAgICAgICAgICAgIHZhciBhTWF4ID0gdGhpcy5nZXRNYXgoKSxcbiAgICAgICAgICAgICAgICBhTWluID0gdGhpcy5nZXRNaW4oKSxcbiAgICAgICAgICAgICAgICBiTWF4ID0gbnVsbCxcbiAgICAgICAgICAgICAgICBiTWluID0gbnVsbDtcblxuICAgICAgICAgICAgaWYoYXJncy5sZW5ndGggPT09IDEpe1xuICAgICAgICAgICAgICAgIGxldCBzaGFwZSA9IGFyZ3NbMF07XG5cbiAgICAgICAgICAgICAgICBiTWluID0gc2hhcGUuZ2V0TWluKCk7XG4gICAgICAgICAgICAgICAgYk1heCA9IHNoYXBlLmdldE1heCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZihhcmdzLmxlbmd0aCA9PT0gMil7XG4gICAgICAgICAgICAgICAgYk1pbiA9IGFyZ3NbMF07XG4gICAgICAgICAgICAgICAgYk1heCA9IGFyZ3NbMV07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiAoYU1pbi54IDw9IGJNYXgueCkgJiYgKGFNYXgueCA+PSBiTWluLngpICYmXG4gICAgICAgICAgICAgICAgKGFNaW4ueSA8PSBiTWF4LnkpICYmIChhTWF4LnkgPj0gYk1pbi55KSAmJlxuICAgICAgICAgICAgICAgIChhTWluLnogPD0gYk1heC56KSAmJiAoYU1heC56ID49IGJNaW4ueik7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgaXNJbnRlcnNlY3RXaXRoU3BoZXJlKHNoYXBlOlNwaGVyZVNoYXBlKXtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmlzQm94QW5kU3BoZXJlSW50ZXJzZWN0ZWQodGhpcywgc2hhcGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGlzSW50ZXJzZWN0V2l0aFJheShyYXk6UmF5KXtcbiAgICAgICAgICAgIHJldHVybiByYXkuaXNJbnRlcnNlY3RXaXRoQUFCQih0aGlzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBjbG9zZXN0UG9pbnRUbyhwb2ludDpWZWN0b3IzKXtcbiAgICAgICAgICAgIHZhciBtaW4gPSB0aGlzLmdldE1pbigpLFxuICAgICAgICAgICAgICAgIG1heCA9IHRoaXMuZ2V0TWF4KCksXG4gICAgICAgICAgICAgICAgcmVzdWx0UG9pbnQgPSBWZWN0b3IzLmNyZWF0ZSgpO1xuXG4gICAgICAgICAgICBpZiAocG9pbnQueCA8IG1pbi54KSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0UG9pbnQueCA9IG1pbi54O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAocG9pbnQueCA+IG1heC54KSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0UG9pbnQueCA9IG1heC54O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0UG9pbnQueCA9IHBvaW50Lng7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChwb2ludC55IDwgbWluLnkpIHtcbiAgICAgICAgICAgICAgICByZXN1bHRQb2ludC55ID0gbWluLnk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChwb2ludC55ID4gbWF4LnkpIHtcbiAgICAgICAgICAgICAgICByZXN1bHRQb2ludC55ID0gbWF4Lnk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXN1bHRQb2ludC55ID0gcG9pbnQueTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHBvaW50LnogPCBtaW4ueikge1xuICAgICAgICAgICAgICAgIHJlc3VsdFBvaW50LnogPSBtaW4uejtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHBvaW50LnogPiBtYXgueikge1xuICAgICAgICAgICAgICAgIHJlc3VsdFBvaW50LnogPSBtYXguejtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlc3VsdFBvaW50LnogPSBwb2ludC56O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0UG9pbnQ7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgY29udGFpblBvaW50KHBvaW50OlZlY3RvcjMpIHtcbiAgICAgICAgICAgIHZhciBtaW4gPSB0aGlzLmdldE1pbigpLFxuICAgICAgICAgICAgICAgIG1heCA9IHRoaXMuZ2V0TWF4KCk7XG5cbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMzsgKytpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHBvaW50LnZhbHVlc1tpXSA8IG1pbi52YWx1ZXNbaV0gfHwgcG9pbnQudmFsdWVzW2ldID4gbWF4LnZhbHVlc1tpXSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBjb3B5KCkge1xuICAgICAgICAgICAgdmFyIHNoYXBlID0gQUFCQlNoYXBlLmNyZWF0ZSgpO1xuXG4gICAgICAgICAgICBzaGFwZS5jZW50ZXIgPSB0aGlzLmNlbnRlci5jb3B5KCk7XG4gICAgICAgICAgICBzaGFwZS5oYWxmRXh0ZW50cyA9IHRoaXMuaGFsZkV4dGVudHMuY29weSgpO1xuXG4gICAgICAgICAgICByZXR1cm4gc2hhcGU7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9nZXRFbXB0eU1pbigpIHtcbiAgICAgICAgICAgIHJldHVybiBWZWN0b3IzLmNyZWF0ZShJbmZpbml0eSwgSW5maW5pdHksIEluZmluaXR5KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX2dldEVtcHR5TWF4KCkge1xuICAgICAgICAgICAgcmV0dXJuIFZlY3RvcjMuY3JlYXRlKC1JbmZpbml0eSwgLUluZmluaXR5LCAtSW5maW5pdHkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfZXhwYW5kQnlQb2ludChwb2ludDpWZWN0b3IzLCBtaW46VmVjdG9yMywgbWF4OlZlY3RvcjMpOnZvaWQge1xuICAgICAgICAgICAgbWluLm1pbihwb2ludCk7XG4gICAgICAgICAgICBtYXgubWF4KHBvaW50KTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuIiwibW9kdWxlIHdkIHtcbiAgICBleHBvcnQgY2xhc3MgU3BoZXJlU2hhcGUgZXh0ZW5kcyBTaGFwZSB7XG4gICAgICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlKCkge1xuICAgICAgICAgICAgdmFyIG9iaiA9IG5ldyB0aGlzKCk7XG5cbiAgICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgcmFkaXVzOm51bWJlciA9IDE7XG5cbiAgICAgICAgcHVibGljIHNldEZyb21TaGFwZVBhcmFtKGNlbnRlcjpWZWN0b3IzLCByYWRpdXM6bnVtYmVyKXtcbiAgICAgICAgICAgIHRoaXMuY2VudGVyID0gY2VudGVyO1xuICAgICAgICAgICAgdGhpcy5yYWRpdXMgPSByYWRpdXM7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgc2V0RnJvbVBvaW50cyhwb2ludHM6QXJyYXk8bnVtYmVyPikge1xuICAgICAgICAgICAgdmFyIGFhYmIgPSBBQUJCU2hhcGUuY3JlYXRlKCk7XG5cbiAgICAgICAgICAgIHRoaXMuY2VudGVyID0gYWFiYi5zZXRGcm9tUG9pbnRzKHBvaW50cykuY2VudGVyO1xuICAgICAgICAgICAgdGhpcy5yYWRpdXMgPSB0aGlzLl9maW5kTWF4RGlzdGFuY2VPZlBvaW50c1RvQ2VudGVyKHBvaW50cyk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgc2V0RnJvbVRyYW5zbGF0aW9uQW5kU2NhbGUoc3BoZXJlOlNwaGVyZVNoYXBlLCBtYXRyaXg6TWF0cml4NCl7XG4gICAgICAgICAgICB2YXIgdHJhbnNsYXRpb24gPSBtYXRyaXguZ2V0VHJhbnNsYXRpb24oKSxcbiAgICAgICAgICAgICAgICBzY2FsZSA9IG1hdHJpeC5nZXRTY2FsZSgpO1xuXG4gICAgICAgICAgICB0aGlzLmNlbnRlciA9IHNwaGVyZS5jZW50ZXIuY29weSgpLmFkZCh0cmFuc2xhdGlvbik7XG4gICAgICAgICAgICB0aGlzLnJhZGl1cyA9IHNwaGVyZS5yYWRpdXMgKiBNYXRoLm1heChzY2FsZS54LCBzY2FsZS55LCBzY2FsZS56KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBpc0ludGVyc2VjdFdpdGhTcGhlcmUoc2hhcGU6U3BoZXJlU2hhcGUpIHtcbiAgICAgICAgICAgIHZhciByYWRpdXNTdW0gPSB0aGlzLnJhZGl1cyArIHNoYXBlLnJhZGl1cztcblxuICAgICAgICAgICAgcmV0dXJuIHNoYXBlLmNlbnRlci5kaXN0YW5jZVRvU3F1YXJlZCh0aGlzLmNlbnRlcikgPD0gKCByYWRpdXNTdW0qKjIpO1xuICAgICAgICB9XG5cblxuICAgICAgICBwdWJsaWMgaXNJbnRlcnNlY3RXaXRoQm94KHNoYXBlOkFBQkJTaGFwZSk7XG4gICAgICAgIHB1YmxpYyBpc0ludGVyc2VjdFdpdGhCb3gobWluOlZlY3RvcjMsIG1heDpWZWN0b3IzKTtcblxuICAgICAgICBwdWJsaWMgaXNJbnRlcnNlY3RXaXRoQm94KC4uLmFyZ3MpIHtcbiAgICAgICAgICAgIHZhciBzaGFwZTpBQUJCU2hhcGUgPSBudWxsO1xuXG4gICAgICAgICAgICBpZihhcmdzLmxlbmd0aCA9PT0gMSl7XG4gICAgICAgICAgICAgICAgc2hhcGUgPSBhcmdzWzBdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZihhcmdzLmxlbmd0aCA9PT0gMil7XG4gICAgICAgICAgICAgICAgbGV0IG1pbjpWZWN0b3IzID0gYXJnc1swXSxcbiAgICAgICAgICAgICAgICAgICAgbWF4OlZlY3RvcjMgPSBhcmdzWzFdO1xuXG4gICAgICAgICAgICAgICAgc2hhcGUgPSBBQUJCU2hhcGUuY3JlYXRlKCk7XG4gICAgICAgICAgICAgICAgc2hhcGUuc2V0TWluTWF4KG1pbiwgbWF4KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaXNCb3hBbmRTcGhlcmVJbnRlcnNlY3RlZChzaGFwZSwgdGhpcyk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgaXNJbnRlcnNlY3RXaXRoUmF5KHJheTpSYXkpe1xuICAgICAgICAgICAgcmV0dXJuIHJheS5pc0ludGVyc2VjdFdpdGhTcGhlcmUodGhpcyk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgY29udGFpblBvaW50KHBvaW50OlZlY3RvcjMpIHtcbiAgICAgICAgICAgIHJldHVybiBwb2ludC5kaXN0YW5jZVRvU3F1YXJlZCh0aGlzLmNlbnRlcikgPD0gKHRoaXMucmFkaXVzKioyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBjb3B5KCkge1xuICAgICAgICAgICAgdmFyIHNoYXBlID0gU3BoZXJlU2hhcGUuY3JlYXRlKCk7XG5cbiAgICAgICAgICAgIHNoYXBlLmNlbnRlciA9IHRoaXMuY2VudGVyLmNvcHkoKTtcbiAgICAgICAgICAgIHNoYXBlLnJhZGl1cyA9IHRoaXMucmFkaXVzO1xuXG4gICAgICAgICAgICByZXR1cm4gc2hhcGU7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9maW5kTWF4RGlzdGFuY2VPZlBvaW50c1RvQ2VudGVyKHBvaW50czpBcnJheTxudW1iZXI+KXtcbiAgICAgICAgICAgIHZhciBtYXhSYWRpdXNTcSA9IDAsXG4gICAgICAgICAgICAgICAgY2VudGVyID0gdGhpcy5jZW50ZXI7XG5cblxuICAgICAgICAgICAgR2VvbWV0cnlVdGlscy5pdGVyYXRlVGhyZWVDb21wb25lbnQocG9pbnRzLCAocG9pbnQ6VmVjdG9yMykgPT4ge1xuICAgICAgICAgICAgICAgIG1heFJhZGl1c1NxID0gTWF0aC5tYXgoIG1heFJhZGl1c1NxLCBjZW50ZXIuZGlzdGFuY2VUb1NxdWFyZWQocG9pbnQpICk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmV0dXJuIE1hdGguc3FydChtYXhSYWRpdXNTcSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbiIsIm1vZHVsZSB3ZHtcbiAgICBleHBvcnQgZW51bSBDb2xsaWRlclR5cGV7XG4gICAgICAgIEJPWCA9IDxhbnk+XCJib3hcIixcbiAgICAgICAgU1BIRVJFID0gPGFueT5cInNwaGVyZVwiXG4gICAgfVxufVxuIiwibW9kdWxlIHdke1xuICAgIGV4cG9ydCBjbGFzcyBDb2xsaWRlclV0aWxze1xuICAgICAgICBAcmVxdWlyZShmdW5jdGlvbihlbnRpdHlPYmplY3Q6RW50aXR5T2JqZWN0KXtcbiAgICAgICAgICAgIGlmKCFlbnRpdHlPYmplY3QuaGFzQ29tcG9uZW50KEdlb21ldHJ5KSl7XG4gICAgICAgICAgICAgICAgaWYoZW50aXR5T2JqZWN0Lmhhc1RhZyg8YW55PldEVGFnLkNPTlRBSU5FUikpe1xuICAgICAgICAgICAgICAgICAgICBsZXQgZmlyc3RDaGlsZFZlcnRpY2VzID0gZW50aXR5T2JqZWN0LmdldENoaWxkKDApLmdldENvbXBvbmVudChHZW9tZXRyeSkudmVydGljZXMsXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWNvbmRDaGlsZFZlcnRpY2VzID0gZW50aXR5T2JqZWN0LmdldENoaWxkKDEpLmdldENvbXBvbmVudChHZW9tZXRyeSkudmVydGljZXM7XG5cbiAgICAgICAgICAgICAgICAgICAgYXNzZXJ0KCEhZmlyc3RDaGlsZFZlcnRpY2VzICYmIGZpcnN0Q2hpbGRWZXJ0aWNlcy5sZW5ndGggPT09IHNlY29uZENoaWxkVmVydGljZXMubGVuZ3RoLCBMb2cuaW5mby5GVU5DX1NIT1VMRChcImlmIGVudGl0eU9iamVjdCBpcyBXRFRhZy5DT05UQUlORVIsIHRoZW4gaXRzIGNoaWxkcmVuIHNob3VsZCBoYXMgaXRzIHZlcnRpY2VzXCIpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgZ2V0VmVydGljZXMoZW50aXR5T2JqZWN0OkVudGl0eU9iamVjdCl7XG4gICAgICAgICAgICBpZighZW50aXR5T2JqZWN0Lmhhc0NvbXBvbmVudChHZW9tZXRyeSkpe1xuICAgICAgICAgICAgICAgIGlmKGVudGl0eU9iamVjdC5oYXNUYWcoPGFueT5XRFRhZy5DT05UQUlORVIpKXtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVudGl0eU9iamVjdC5nZXRDaGlsZCgwKS5nZXRDb21wb25lbnQoR2VvbWV0cnkpLnZlcnRpY2VzO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gZW50aXR5T2JqZWN0LmdldENvbXBvbmVudDxHZW9tZXRyeT4oR2VvbWV0cnkpLmdlb21ldHJ5RGF0YS52ZXJ0aWNlcztcbiAgICAgICAgfVxuICAgIH1cbn0iLCJtb2R1bGUgd2Qge1xuICAgIGV4cG9ydCBhYnN0cmFjdCBjbGFzcyBSaWdpZEJvZHkgZXh0ZW5kcyBDb21wb25lbnQge1xuICAgICAgICBwcml2YXRlIF9mcmljdGlvbjpudW1iZXIgPSAwO1xuICAgICAgICBAb3BlcmF0ZUJvZHlEYXRhR2V0dGVyQW5kU2V0dGVyKFwiRnJpY3Rpb25cIilcbiAgICAgICAgZ2V0IGZyaWN0aW9uKCl7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZnJpY3Rpb247XG4gICAgICAgIH1cbiAgICAgICAgc2V0IGZyaWN0aW9uKGZyaWN0aW9uOm51bWJlcil7XG4gICAgICAgICAgICB0aGlzLl9mcmljdGlvbiA9IGZyaWN0aW9uO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfcmVzdGl0dXRpb246bnVtYmVyID0gMDtcbiAgICAgICAgQG9wZXJhdGVCb2R5RGF0YUdldHRlckFuZFNldHRlcihcIlJlc3RpdHV0aW9uXCIpXG4gICAgICAgIGdldCByZXN0aXR1dGlvbigpe1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3Jlc3RpdHV0aW9uO1xuICAgICAgICB9XG4gICAgICAgIHNldCByZXN0aXR1dGlvbihyZXN0aXR1dGlvbjpudW1iZXIpe1xuICAgICAgICAgICAgdGhpcy5fcmVzdGl0dXRpb24gPSByZXN0aXR1dGlvbjtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX2NoaWxkcmVuOndkQ2IuQ29sbGVjdGlvbjxHYW1lT2JqZWN0PiA9IHdkQ2IuQ29sbGVjdGlvbi5jcmVhdGU8R2FtZU9iamVjdD4oKTtcbiAgICAgICAgZ2V0IGNoaWxkcmVuKCl7XG4gICAgICAgICAgICByZXR1cm4gIHRoaXMuX2NoaWxkcmVuO1xuICAgICAgICB9XG4gICAgICAgIHNldCBjaGlsZHJlbihjaGlsZHJlbjphbnkpe1xuICAgICAgICAgICAgaWYoSnVkZ2VVdGlscy5pc0FycmF5KGNoaWxkcmVuKSl7XG4gICAgICAgICAgICAgICAgbGV0IGFyciA9IDxBcnJheTxHYW1lT2JqZWN0Pj5jaGlsZHJlbjtcblxuICAgICAgICAgICAgICAgIHRoaXMuX2NoaWxkcmVuID0gd2RDYi5Db2xsZWN0aW9uLmNyZWF0ZTxHYW1lT2JqZWN0PihhcnIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICBsZXQgbGlzdCA9IDx3ZENiLkNvbGxlY3Rpb248R2FtZU9iamVjdD4+Y2hpbGRyZW47XG5cbiAgICAgICAgICAgICAgICB0aGlzLl9jaGlsZHJlbiA9IGxpc3Q7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuX2NoaWxkcmVuLmZvckVhY2goKGNoaWxkOkdhbWVPYmplY3QpID0+IHtcbiAgICAgICAgICAgICAgICBjaGlsZC5hZGRUYWcoXCJpc1JpZ2lkYm9keUNoaWxkXCIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgZW50aXR5T2JqZWN0OkdhbWVPYmplY3Q7XG5cbiAgICAgICAgcHVibGljIGxvY2tDb25zdHJhaW50OkxvY2tDb25zdHJhaW50ID0gTG9ja0NvbnN0cmFpbnQuY3JlYXRlKHRoaXMpO1xuICAgICAgICBwdWJsaWMgZGlzdGFuY2VDb25zdHJhaW50OkRpc3RhbmNlQ29uc3RyYWludCA9IERpc3RhbmNlQ29uc3RyYWludC5jcmVhdGUodGhpcyk7XG4gICAgICAgIHB1YmxpYyBoaW5nZUNvbnN0cmFpbnQ6SGluZ2VDb25zdHJhaW50ID0gSGluZ2VDb25zdHJhaW50LmNyZWF0ZSh0aGlzKTtcbiAgICAgICAgcHVibGljIHBvaW50VG9Qb2ludENvbnN0cmFpbnRMaXN0OlBvaW50VG9Qb2ludENvbnN0cmFpbnRMaXN0ID0gUG9pbnRUb1BvaW50Q29uc3RyYWludExpc3QuY3JlYXRlKHRoaXMpO1xuXG4gICAgICAgIHByaXZhdGUgX2FmdGVySW5pdFN1YnNjcmlwdGlvbjp3ZEZycC5JRGlzcG9zYWJsZSA9IG51bGw7XG4gICAgICAgIHByaXZhdGUgX2FmdGVySW5pdFJpZ2lkYm9keUFkZENvbnN0cmFpbnRTdWJzY3JpcHRpb246d2RGcnAuSURpc3Bvc2FibGUgPSBudWxsO1xuXG4gICAgICAgIHB1YmxpYyBpbml0KCkge1xuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgICAgICAgICAvKiFcbiAgICAgICAgICAgIGFkZEJvZHkgc2hvdWxkIGFmdGVyIGl0cyBhbmQgaXRzIGNoaWxkcmVuJ3MgY29sbGlkZXIgY29tcG9uZW50IGluaXRcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdGhpcy5fYWZ0ZXJJbml0U3Vic2NyaXB0aW9uID0gRXZlbnRNYW5hZ2VyLmZyb21FdmVudCg8YW55PkVuZ2luZUV2ZW50LkFGVEVSX0dBTUVPQkpFQ1RfSU5JVClcbiAgICAgICAgICAgICAgICAuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5fYWZ0ZXJJbml0SGFuZGxlcigpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvKiFcbiAgICAgICAgICAgIGFkZCBjb25zdHJhaW50IHNob3VsZCBhZnRlciBhbGwgYm9keSBhZGRlZFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB0aGlzLl9hZnRlckluaXRSaWdpZGJvZHlBZGRDb25zdHJhaW50U3Vic2NyaXB0aW9uID0gRXZlbnRNYW5hZ2VyLmZyb21FdmVudCg8YW55PkVuZ2luZUV2ZW50LkFGVEVSX0dBTUVPQkpFQ1RfSU5JVF9SSUdJREJPRFlfQUREX0NPTlNUUkFJTlQpXG4gICAgICAgICAgICAgICAgLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuX2FmdGVySW5pdFJpZ2lkYm9keUFkZENvbnN0cmFpbnRIYW5kbGVyKCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgYWRkQ29uc3RyYWludCgpe1xuICAgICAgICAgICAgdmFyIGVuZ2luZUFkYXB0ZXI6SVBoeXNpY3NFbmdpbmVBZGFwdGVyID0gdGhpcy5nZXRQaHlzaWNzRW5naW5lQWRhcHRlcigpO1xuXG4gICAgICAgICAgICBpZih0aGlzLmxvY2tDb25zdHJhaW50ICYmIHRoaXMubG9ja0NvbnN0cmFpbnQuY29ubmVjdGVkQm9keSl7XG4gICAgICAgICAgICAgICAgZW5naW5lQWRhcHRlci5hZGRMb2NrQ29uc3RyYWludCh0aGlzLmVudGl0eU9iamVjdCwgdGhpcy5sb2NrQ29uc3RyYWludCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmKHRoaXMuZGlzdGFuY2VDb25zdHJhaW50ICYmIHRoaXMuZGlzdGFuY2VDb25zdHJhaW50LmNvbm5lY3RlZEJvZHkpe1xuICAgICAgICAgICAgICAgIGVuZ2luZUFkYXB0ZXIuYWRkRGlzdGFuY2VDb25zdHJhaW50KHRoaXMuZW50aXR5T2JqZWN0LCB0aGlzLmRpc3RhbmNlQ29uc3RyYWludCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmKHRoaXMuaGluZ2VDb25zdHJhaW50ICYmIHRoaXMuaGluZ2VDb25zdHJhaW50LmNvbm5lY3RlZEJvZHkpe1xuICAgICAgICAgICAgICAgIGVuZ2luZUFkYXB0ZXIuYWRkSGluZ2VDb25zdHJhaW50KHRoaXMuZW50aXR5T2JqZWN0LCB0aGlzLmhpbmdlQ29uc3RyYWludCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmKHRoaXMucG9pbnRUb1BvaW50Q29uc3RyYWludExpc3QgJiYgdGhpcy5wb2ludFRvUG9pbnRDb25zdHJhaW50TGlzdC5nZXRDb3VudCgpID4gMCl7XG4gICAgICAgICAgICAgICAgdGhpcy5wb2ludFRvUG9pbnRDb25zdHJhaW50TGlzdC5mb3JFYWNoKChjb25zdHJhaW50OlBvaW50VG9Qb2ludENvbnN0cmFpbnQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZW5naW5lQWRhcHRlci5hZGRQb2ludFRvUG9pbnRDb25zdHJhaW50KHRoaXMuZW50aXR5T2JqZWN0LCBjb25zdHJhaW50KTtcbiAgICAgICAgICAgICAgICB9LCB0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyByZW1vdmVGcm9tT2JqZWN0KGVudGl0eU9iamVjdDpHYW1lT2JqZWN0KXtcbiAgICAgICAgICAgIHZhciBlbmdpbmVBZGFwdGVyOklQaHlzaWNzRW5naW5lQWRhcHRlciA9IHRoaXMuZ2V0UGh5c2ljc0VuZ2luZUFkYXB0ZXIoKTtcblxuICAgICAgICAgICAgaWYoZW5naW5lQWRhcHRlcil7XG4gICAgICAgICAgICAgICAgdGhpcy5nZXRQaHlzaWNzRW5naW5lQWRhcHRlcigpLnJlbW92ZUdhbWVPYmplY3QoZW50aXR5T2JqZWN0KTtcblxuICAgICAgICAgICAgICAgIHRoaXMuZ2V0UGh5c2ljc0VuZ2luZUFkYXB0ZXIoKS5yZW1vdmVDb25zdHJhaW50cyhlbnRpdHlPYmplY3QpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBzdXBlci5yZW1vdmVGcm9tT2JqZWN0KGVudGl0eU9iamVjdCk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgZGlzcG9zZSgpe1xuICAgICAgICAgICAgdGhpcy5fY2hpbGRyZW4uZm9yRWFjaCgoY2hpbGQ6R2FtZU9iamVjdCkgPT4ge1xuICAgICAgICAgICAgICAgIGNoaWxkLnJlbW92ZVRhZyhcImlzUmlnaWRib2R5Q2hpbGRcIik7XG4gICAgICAgICAgICB9LCB0aGlzKTtcblxuICAgICAgICAgICAgdGhpcy5fYWZ0ZXJJbml0U3Vic2NyaXB0aW9uICYmIHRoaXMuX2FmdGVySW5pdFN1YnNjcmlwdGlvbi5kaXNwb3NlKCk7XG4gICAgICAgICAgICB0aGlzLl9hZnRlckluaXRSaWdpZGJvZHlBZGRDb25zdHJhaW50U3Vic2NyaXB0aW9uICYmIHRoaXMuX2FmdGVySW5pdFJpZ2lkYm9keUFkZENvbnN0cmFpbnRTdWJzY3JpcHRpb24uZGlzcG9zZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGdldFBoeXNpY3NFbmdpbmVBZGFwdGVyKCkge1xuICAgICAgICAgICAgcmV0dXJuIERpcmVjdG9yLmdldEluc3RhbmNlKCkuc2NlbmUucGh5c2ljc0VuZ2luZUFkYXB0ZXI7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgaXNQaHlzaWNzRW5naW5lQWRhcHRlckV4aXN0KCl7XG4gICAgICAgICAgICByZXR1cm4gISFEaXJlY3Rvci5nZXRJbnN0YW5jZSgpLnNjZW5lICYmICEhRGlyZWN0b3IuZ2V0SW5zdGFuY2UoKS5zY2VuZS5waHlzaWNzRW5naW5lQWRhcHRlcjtcbiAgICAgICAgfVxuXG4gICAgICAgIHByb3RlY3RlZCBhYnN0cmFjdCBhZGRCb2R5KCk7XG5cbiAgICAgICAgQHJlcXVpcmUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYodGhpcy5faXNDb250YWluZXIodGhpcy5lbnRpdHlPYmplY3QpKXtcbiAgICAgICAgICAgICAgICBhc3NlcnQoIXRoaXMuZW50aXR5T2JqZWN0LmdldENvbXBvbmVudChDb2xsaWRlciksIExvZy5pbmZvLkZVTkNfU0hPVUxEX05PVChcImNvbnRhaW5lclwiLCBcImFkZCBjb2xsaWRlciBjb21wb25lbnQgaW4gdGhlIGNhc2Ugb2YgY29tcG91bmRcIikpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICBhc3NlcnQoISF0aGlzLmVudGl0eU9iamVjdC5nZXRDb21wb25lbnQoQ29sbGlkZXIpLCBMb2cuaW5mby5GVU5DX01VU1RfREVGSU5FKFwiY29sbGlkZXIgY29tcG9uZW50IHdoZW4gYWRkIHJpZ2lkIGJvZHkgY29tcG9uZW50XCIpKTtcbiAgICAgICAgICAgICAgICBhc3NlcnQoISF0aGlzLmVudGl0eU9iamVjdC5nZXRDb21wb25lbnQoQ29sbGlkZXIpLnNoYXBlLCBMb2cuaW5mby5GVU5DX1NIT1VMRChcImNyZWF0ZSBjb2xsaWRlci5zaGFwZSBiZWZvcmUgYWRkaW5nIHJpZ2lkIGJvZHkgY29tcG9uZW50XCIpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgcHJvdGVjdGVkIGFkZEJvZHlUb1BoeXNpY3NFbmdpbmUobWV0aG9kOnN0cmluZywgZGF0YTphbnkgPSB7fSkge1xuICAgICAgICAgICAgdmFyIGVuZ2luZUFkYXB0ZXI6SVBoeXNpY3NFbmdpbmVBZGFwdGVyID0gdGhpcy5nZXRQaHlzaWNzRW5naW5lQWRhcHRlcigpLFxuICAgICAgICAgICAgICAgIHBvc2l0aW9uID0gdGhpcy5lbnRpdHlPYmplY3QudHJhbnNmb3JtLnBvc2l0aW9uLFxuICAgICAgICAgICAgICAgIHJvdGF0aW9uID0gdGhpcy5lbnRpdHlPYmplY3QudHJhbnNmb3JtLnJvdGF0aW9uO1xuXG4gICAgICAgICAgICBlbmdpbmVBZGFwdGVyW21ldGhvZF0oXG4gICAgICAgICAgICAgICAgdGhpcy5lbnRpdHlPYmplY3QsIHdkQ2IuRXh0ZW5kVXRpbHMuZXh0ZW5kKHtcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IHBvc2l0aW9uLFxuICAgICAgICAgICAgICAgICAgICByb3RhdGlvbjogcm90YXRpb24sXG5cbiAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IHRoaXMuX2NoaWxkcmVuLFxuXG4gICAgICAgICAgICAgICAgICAgIGxvY2tDb25zdHJhaW50OiB0aGlzLmxvY2tDb25zdHJhaW50LFxuXG4gICAgICAgICAgICAgICAgICAgIG9uQ29udGFjdDogd2RDYi5GdW5jdGlvblV0aWxzLmJpbmQodGhpcywgdGhpcy5fb25Db250YWN0KSxcbiAgICAgICAgICAgICAgICAgICAgb25Db2xsaXNpb25TdGFydDogd2RDYi5GdW5jdGlvblV0aWxzLmJpbmQodGhpcywgdGhpcy5fb25Db2xsaXNpb25TdGFydCksXG4gICAgICAgICAgICAgICAgICAgIG9uQ29sbGlzaW9uRW5kOiB3ZENiLkZ1bmN0aW9uVXRpbHMuYmluZCh0aGlzLCB0aGlzLl9vbkNvbGxpc2lvbkVuZCksXG5cbiAgICAgICAgICAgICAgICAgICAgZnJpY3Rpb246IHRoaXMuZnJpY3Rpb24sXG4gICAgICAgICAgICAgICAgICAgIHJlc3RpdHV0aW9uOiB0aGlzLnJlc3RpdHV0aW9uXG4gICAgICAgICAgICAgICAgfSwgZGF0YSlcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9vbkNvbnRhY3QoY29sbGlkZU9iamVjdDpHYW1lT2JqZWN0KSB7XG4gICAgICAgICAgICB0aGlzLmVudGl0eU9iamVjdC5leGVjU2NyaXB0KFwib25Db250YWN0XCIsIHdkQ2IuQ29sbGVjdGlvbi5jcmVhdGUoW2NvbGxpZGVPYmplY3RdKSk7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9vbkNvbGxpc2lvblN0YXJ0KGNvbGxpZGVPYmplY3Q6R2FtZU9iamVjdCkge1xuICAgICAgICAgICAgdGhpcy5lbnRpdHlPYmplY3QuZXhlY1NjcmlwdChcIm9uQ29sbGlzaW9uU3RhcnRcIiwgd2RDYi5Db2xsZWN0aW9uLmNyZWF0ZShbY29sbGlkZU9iamVjdF0pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX29uQ29sbGlzaW9uRW5kKCkge1xuICAgICAgICAgICAgdGhpcy5lbnRpdHlPYmplY3QuZXhlY1NjcmlwdChcIm9uQ29sbGlzaW9uRW5kXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfaXNDb250YWluZXIoZW50aXR5T2JqZWN0OkdhbWVPYmplY3Qpe1xuICAgICAgICAgICAgdmFyIHJpZ2lkQm9keSA9IGVudGl0eU9iamVjdC5nZXRDb21wb25lbnQ8UmlnaWRCb2R5PihSaWdpZEJvZHkpO1xuXG4gICAgICAgICAgICByZXR1cm4gcmlnaWRCb2R5LmNoaWxkcmVuLmdldENvdW50KCkgPiAwO1xuICAgICAgICB9XG5cbiAgICAgICAgQGV4ZWNPbmx5T25jZShcIl9pc0FmdGVySW5pdFwiKVxuICAgICAgICBwcml2YXRlIF9hZnRlckluaXRIYW5kbGVyKCl7XG4gICAgICAgICAgICB0aGlzLmFkZEJvZHkoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIEBleGVjT25seU9uY2UoXCJfaXNBZnRlckluaXRSaWdpZGJvZHlBZGRDb25zdHJhaW50XCIpXG4gICAgICAgIHByaXZhdGUgX2FmdGVySW5pdFJpZ2lkYm9keUFkZENvbnN0cmFpbnRIYW5kbGVyKCl7XG4gICAgICAgICAgICB0aGlzLmFkZENvbnN0cmFpbnQoKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsIm1vZHVsZSB3ZCB7XG4gICAgZXhwb3J0IGNsYXNzIER5bmFtaWNSaWdpZEJvZHkgZXh0ZW5kcyBSaWdpZEJvZHl7XG4gICAgICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlKCkge1xuICAgICAgICBcdHZhciBvYmogPSBuZXcgdGhpcygpO1xuXG4gICAgICAgIFx0cmV0dXJuIG9iajtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX2xpbmVhckRhbXBpbmc6bnVtYmVyID0gMDtcbiAgICAgICAgQG9wZXJhdGVCb2R5RGF0YUdldHRlckFuZFNldHRlcihcIkxpbmVhckRhbXBpbmdcIilcbiAgICAgICAgZ2V0IGxpbmVhckRhbXBpbmcoKXtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9saW5lYXJEYW1waW5nO1xuICAgICAgICB9XG4gICAgICAgIHNldCBsaW5lYXJEYW1waW5nKGxpbmVhckRhbXBpbmc6bnVtYmVyKXtcbiAgICAgICAgICAgIHRoaXMuX2xpbmVhckRhbXBpbmcgPSBsaW5lYXJEYW1waW5nO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfYW5ndWxhckRhbXBpbmc6bnVtYmVyID0gMDtcbiAgICAgICAgQG9wZXJhdGVCb2R5RGF0YUdldHRlckFuZFNldHRlcihcIkFuZ3VsYXJEYW1waW5nXCIpXG4gICAgICAgIGdldCBhbmd1bGFyRGFtcGluZygpe1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2FuZ3VsYXJEYW1waW5nO1xuICAgICAgICB9XG4gICAgICAgIHNldCBhbmd1bGFyRGFtcGluZyhhbmd1bGFyRGFtcGluZzpudW1iZXIpe1xuICAgICAgICAgICAgdGhpcy5fYW5ndWxhckRhbXBpbmcgPSBhbmd1bGFyRGFtcGluZztcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX3ZlbG9jaXR5OlZlY3RvcjMgPSBWZWN0b3IzLmNyZWF0ZSgwLCAwLCAwKTtcbiAgICAgICAgQG9wZXJhdGVCb2R5RGF0YUdldHRlckFuZFNldHRlcihcIlZlbG9jaXR5XCIpXG4gICAgICAgIGdldCB2ZWxvY2l0eSgpe1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3ZlbG9jaXR5O1xuICAgICAgICB9XG4gICAgICAgIHNldCB2ZWxvY2l0eSh2ZWxvY2l0eTpWZWN0b3IzKXtcbiAgICAgICAgICAgIHRoaXMuX3ZlbG9jaXR5ID0gdmVsb2NpdHk7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9hbmd1bGFyVmVsb2NpdHk6VmVjdG9yMyA9IFZlY3RvcjMuY3JlYXRlKDAsIDAsIDApO1xuICAgICAgICBAb3BlcmF0ZUJvZHlEYXRhR2V0dGVyQW5kU2V0dGVyKFwiQW5ndWxhclZlbG9jaXR5XCIpXG4gICAgICAgIGdldCBhbmd1bGFyVmVsb2NpdHkoKXtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9hbmd1bGFyVmVsb2NpdHk7XG4gICAgICAgIH1cbiAgICAgICAgc2V0IGFuZ3VsYXJWZWxvY2l0eShhbmd1bGFyVmVsb2NpdHk6VmVjdG9yMyl7XG4gICAgICAgICAgICB0aGlzLl9hbmd1bGFyVmVsb2NpdHkgPSBhbmd1bGFyVmVsb2NpdHk7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9tYXNzOm51bWJlciA9IDE7XG4gICAgICAgIEBvcGVyYXRlQm9keURhdGFHZXR0ZXJBbmRTZXR0ZXIoXCJNYXNzXCIpXG4gICAgICAgIGdldCBtYXNzKCl7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbWFzcztcbiAgICAgICAgfVxuICAgICAgICBzZXQgbWFzcyhtYXNzOm51bWJlcil7XG4gICAgICAgICAgICB0aGlzLl9tYXNzID0gbWFzcztcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBpbXB1bHNlOlZlY3RvcjMgPSBudWxsO1xuICAgICAgICBwdWJsaWMgZm9yY2U6VmVjdG9yMyA9IG51bGw7XG4gICAgICAgIHB1YmxpYyBoaXRQb2ludDpWZWN0b3IzID0gbnVsbDtcblxuICAgICAgICBwcm90ZWN0ZWQgYWRkQm9keSgpIHtcbiAgICAgICAgICAgIHRoaXMuYWRkQm9keVRvUGh5c2ljc0VuZ2luZShcImFkZER5bmFtaWNCb2R5XCIsIHtcbiAgICAgICAgICAgICAgICBtYXNzOiB0aGlzLm1hc3MsXG5cbiAgICAgICAgICAgICAgICBsaW5lYXJEYW1waW5nOiB0aGlzLmxpbmVhckRhbXBpbmcsXG4gICAgICAgICAgICAgICAgYW5ndWxhckRhbXBpbmc6IHRoaXMuYW5ndWxhckRhbXBpbmcsXG4gICAgICAgICAgICAgICAgdmVsb2NpdHk6IHRoaXMudmVsb2NpdHksXG4gICAgICAgICAgICAgICAgYW5ndWxhclZlbG9jaXR5OiB0aGlzLmFuZ3VsYXJWZWxvY2l0eSxcblxuICAgICAgICAgICAgICAgIGltcHVsc2U6IHRoaXMuaW1wdWxzZSxcbiAgICAgICAgICAgICAgICBmb3JjZTogdGhpcy5mb3JjZSxcbiAgICAgICAgICAgICAgICBoaXRQb2ludDogdGhpcy5oaXRQb2ludFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbiIsIm1vZHVsZSB3ZCB7XG4gICAgZXhwb3J0IGNsYXNzIEtpbmVtYXRpY1JpZ2lkQm9keSBleHRlbmRzIFJpZ2lkQm9keSB7XG4gICAgICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlKCkge1xuICAgICAgICAgICAgdmFyIG9iaiA9IG5ldyB0aGlzKCk7XG5cbiAgICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF92ZWxvY2l0eTpWZWN0b3IzID0gVmVjdG9yMy5jcmVhdGUoMCwgMCwgMCk7XG4gICAgICAgIEBvcGVyYXRlQm9keURhdGFHZXR0ZXJBbmRTZXR0ZXIoXCJWZWxvY2l0eVwiKVxuICAgICAgICBnZXQgdmVsb2NpdHkoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fdmVsb2NpdHk7XG4gICAgICAgIH1cblxuICAgICAgICBzZXQgdmVsb2NpdHkodmVsb2NpdHk6VmVjdG9yMykge1xuICAgICAgICAgICAgdGhpcy5fdmVsb2NpdHkgPSB2ZWxvY2l0eTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX2FuZ3VsYXJWZWxvY2l0eTpWZWN0b3IzID0gVmVjdG9yMy5jcmVhdGUoMCwgMCwgMCk7XG4gICAgICAgIEBvcGVyYXRlQm9keURhdGFHZXR0ZXJBbmRTZXR0ZXIoXCJBbmd1bGFyVmVsb2NpdHlcIilcbiAgICAgICAgZ2V0IGFuZ3VsYXJWZWxvY2l0eSgpe1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2FuZ3VsYXJWZWxvY2l0eTtcbiAgICAgICAgfVxuICAgICAgICBzZXQgYW5ndWxhclZlbG9jaXR5KGFuZ3VsYXJWZWxvY2l0eTpWZWN0b3IzKXtcbiAgICAgICAgICAgIHRoaXMuX2FuZ3VsYXJWZWxvY2l0eSA9IGFuZ3VsYXJWZWxvY2l0eTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX21hc3M6bnVtYmVyID0gMTtcbiAgICAgICAgQG9wZXJhdGVCb2R5RGF0YUdldHRlckFuZFNldHRlcihcIk1hc3NcIilcbiAgICAgICAgZ2V0IG1hc3MoKXtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9tYXNzO1xuICAgICAgICB9XG4gICAgICAgIHNldCBtYXNzKG1hc3M6bnVtYmVyKXtcbiAgICAgICAgICAgIHRoaXMuX21hc3MgPSBtYXNzO1xuICAgICAgICB9XG5cblxuICAgICAgICBwcm90ZWN0ZWQgYWRkQm9keSgpIHtcbiAgICAgICAgICAgIHRoaXMuYWRkQm9keVRvUGh5c2ljc0VuZ2luZShcImFkZEtpbmVtYXRpY0JvZHlcIiwge1xuICAgICAgICAgICAgICAgIG1hc3M6IHRoaXMubWFzcyxcbiAgICAgICAgICAgICAgICB2ZWxvY2l0eTogdGhpcy52ZWxvY2l0eSxcbiAgICAgICAgICAgICAgICBhbmd1bGFyVmVsb2NpdHk6IHRoaXMuYW5ndWxhclZlbG9jaXR5XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuIiwibW9kdWxlIHdkIHtcbiAgICBleHBvcnQgY2xhc3MgU3RhdGljUmlnaWRCb2R5IGV4dGVuZHMgUmlnaWRCb2R5IHtcbiAgICAgICAgcHVibGljIHN0YXRpYyBjcmVhdGUoKSB7XG4gICAgICAgICAgICB2YXIgb2JqID0gbmV3IHRoaXMoKTtcblxuICAgICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgfVxuXG4gICAgICAgIHByb3RlY3RlZCBhZGRCb2R5KCkge1xuICAgICAgICAgICAgdGhpcy5hZGRCb2R5VG9QaHlzaWNzRW5naW5lKFwiYWRkU3RhdGljQm9keVwiKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuIiwibW9kdWxlIHdke1xuICAgIGV4cG9ydCBhYnN0cmFjdCBjbGFzcyBQaHlzaWNzQ29uc3RyYWludHtcbiAgICAgICAgY29uc3RydWN0b3IocmlnaWRCb2R5OlJpZ2lkQm9keSl7XG4gICAgICAgICAgICB0aGlzLnJpZ2lkQm9keSA9IHJpZ2lkQm9keTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBtYXhGb3JjZTpudW1iZXIgPSBudWxsO1xuXG4gICAgICAgIHByb3RlY3RlZCByaWdpZEJvZHk6UmlnaWRCb2R5ID0gbnVsbDtcbiAgICB9XG5cbiAgICBleHBvcnQgY2xhc3MgTG9ja0NvbnN0cmFpbnQgZXh0ZW5kcyBQaHlzaWNzQ29uc3RyYWludHtcbiAgICAgICAgcHVibGljIHN0YXRpYyBjcmVhdGUocmlnaWRCb2R5OlJpZ2lkQm9keSkge1xuICAgICAgICAgICAgdmFyIG9iaiA9IG5ldyB0aGlzKHJpZ2lkQm9keSk7XG5cbiAgICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9jb25uZWN0ZWRCb2R5OlJpZ2lkQm9keSA9IG51bGw7XG4gICAgICAgIGdldCBjb25uZWN0ZWRCb2R5KCl7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fY29ubmVjdGVkQm9keTtcbiAgICAgICAgfVxuICAgICAgICBzZXQgY29ubmVjdGVkQm9keShjb25uZWN0ZWRCb2R5OlJpZ2lkQm9keSl7XG4gICAgICAgICAgICB2YXIgZW5naW5lQWRhcHRlcjpJUGh5c2ljc0VuZ2luZUFkYXB0ZXIgPSBudWxsO1xuXG4gICAgICAgICAgICB0aGlzLl9jb25uZWN0ZWRCb2R5ID0gY29ubmVjdGVkQm9keTtcblxuICAgICAgICAgICAgaWYoIXRoaXMucmlnaWRCb2R5LmlzUGh5c2ljc0VuZ2luZUFkYXB0ZXJFeGlzdCgpKXtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGVuZ2luZUFkYXB0ZXIgPSB0aGlzLnJpZ2lkQm9keS5nZXRQaHlzaWNzRW5naW5lQWRhcHRlcigpO1xuXG4gICAgICAgICAgICBlbmdpbmVBZGFwdGVyLnJlbW92ZUxvY2tDb25zdHJhaW50KHRoaXMucmlnaWRCb2R5LmVudGl0eU9iamVjdCk7XG5cbiAgICAgICAgICAgIHRoaXMucmlnaWRCb2R5LmFkZENvbnN0cmFpbnQoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGV4cG9ydCBjbGFzcyBEaXN0YW5jZUNvbnN0cmFpbnQgZXh0ZW5kcyBQaHlzaWNzQ29uc3RyYWludHtcbiAgICAgICAgcHVibGljIHN0YXRpYyBjcmVhdGUocmlnaWRCb2R5OlJpZ2lkQm9keSkge1xuICAgICAgICAgICAgdmFyIG9iaiA9IG5ldyB0aGlzKHJpZ2lkQm9keSk7XG5cbiAgICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9jb25uZWN0ZWRCb2R5OlJpZ2lkQm9keSA9IG51bGw7XG4gICAgICAgIGdldCBjb25uZWN0ZWRCb2R5KCl7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fY29ubmVjdGVkQm9keTtcbiAgICAgICAgfVxuICAgICAgICBzZXQgY29ubmVjdGVkQm9keShjb25uZWN0ZWRCb2R5OlJpZ2lkQm9keSl7XG4gICAgICAgICAgICB2YXIgZW5naW5lQWRhcHRlcjpJUGh5c2ljc0VuZ2luZUFkYXB0ZXIgPSBudWxsO1xuXG4gICAgICAgICAgICB0aGlzLl9jb25uZWN0ZWRCb2R5ID0gY29ubmVjdGVkQm9keTtcblxuICAgICAgICAgICAgaWYoIXRoaXMucmlnaWRCb2R5LmlzUGh5c2ljc0VuZ2luZUFkYXB0ZXJFeGlzdCgpKXtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGVuZ2luZUFkYXB0ZXIgPSB0aGlzLnJpZ2lkQm9keS5nZXRQaHlzaWNzRW5naW5lQWRhcHRlcigpO1xuXG4gICAgICAgICAgICBlbmdpbmVBZGFwdGVyLnJlbW92ZURpc3RhbmNlQ29uc3RyYWludCh0aGlzLnJpZ2lkQm9keS5lbnRpdHlPYmplY3QpO1xuXG4gICAgICAgICAgICB0aGlzLnJpZ2lkQm9keS5hZGRDb25zdHJhaW50KCk7XG4gICAgICAgIH1cblxuICAgICAgICAvL3RvZG8gc3VwcG9ydCBjaGFuZ2UgZGlzdGFuY2VcbiAgICAgICAgcHVibGljIGRpc3RhbmNlOm51bWJlciA9IG51bGw7XG4gICAgfVxuXG4gICAgZXhwb3J0IGNsYXNzIEhpbmdlQ29uc3RyYWludCBleHRlbmRzIFBoeXNpY3NDb25zdHJhaW50e1xuICAgICAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZShyaWdpZEJvZHk6UmlnaWRCb2R5KSB7XG4gICAgICAgICAgICB2YXIgb2JqID0gbmV3IHRoaXMocmlnaWRCb2R5KTtcblxuICAgICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX2Nvbm5lY3RlZEJvZHk6UmlnaWRCb2R5ID0gbnVsbDtcbiAgICAgICAgZ2V0IGNvbm5lY3RlZEJvZHkoKXtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9jb25uZWN0ZWRCb2R5O1xuICAgICAgICB9XG4gICAgICAgIHNldCBjb25uZWN0ZWRCb2R5KGNvbm5lY3RlZEJvZHk6UmlnaWRCb2R5KXtcbiAgICAgICAgICAgIHZhciBlbmdpbmVBZGFwdGVyOklQaHlzaWNzRW5naW5lQWRhcHRlciA9IG51bGw7XG5cbiAgICAgICAgICAgIHRoaXMuX2Nvbm5lY3RlZEJvZHkgPSBjb25uZWN0ZWRCb2R5O1xuXG4gICAgICAgICAgICBpZighdGhpcy5yaWdpZEJvZHkuaXNQaHlzaWNzRW5naW5lQWRhcHRlckV4aXN0KCkpe1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZW5naW5lQWRhcHRlciA9IHRoaXMucmlnaWRCb2R5LmdldFBoeXNpY3NFbmdpbmVBZGFwdGVyKCk7XG5cbiAgICAgICAgICAgIGVuZ2luZUFkYXB0ZXIucmVtb3ZlSGluZ2VDb25zdHJhaW50KHRoaXMucmlnaWRCb2R5LmVudGl0eU9iamVjdCk7XG5cbiAgICAgICAgICAgIHRoaXMucmlnaWRCb2R5LmFkZENvbnN0cmFpbnQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vdG9kbyBzdXBwb3J0IGNoYW5nZSBwaXZvdFxuICAgICAgICBwdWJsaWMgcGl2b3RBOlZlY3RvcjMgPSBudWxsO1xuICAgICAgICBwdWJsaWMgcGl2b3RCOlZlY3RvcjMgPSBudWxsO1xuICAgICAgICAvL3RvZG8gc3VwcG9ydCBjaGFuZ2UgYXhpc1xuICAgICAgICBwdWJsaWMgYXhpc0E6VmVjdG9yMyA9IG51bGw7XG4gICAgICAgIHB1YmxpYyBheGlzQjpWZWN0b3IzID0gbnVsbDtcbiAgICB9XG5cbiAgICBleHBvcnQgY2xhc3MgUG9pbnRUb1BvaW50Q29uc3RyYWludCBleHRlbmRzIFBoeXNpY3NDb25zdHJhaW50e1xuICAgICAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZShyaWdpZEJvZHk6UmlnaWRCb2R5KSB7XG4gICAgICAgICAgICB2YXIgb2JqID0gbmV3IHRoaXMocmlnaWRCb2R5KTtcblxuICAgICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBjb25uZWN0ZWRCb2R5OlJpZ2lkQm9keSA9IG51bGw7XG5cbiAgICAgICAgLy90b2RvIHN1cHBvcnQgY2hhbmdlIHBpdm90XG4gICAgICAgIHB1YmxpYyBwaXZvdEE6VmVjdG9yMyA9IG51bGw7XG4gICAgICAgIHB1YmxpYyBwaXZvdEI6VmVjdG9yMyA9IG51bGw7XG4gICAgfVxuXG4gICAgZXhwb3J0IGNsYXNzIFBvaW50VG9Qb2ludENvbnN0cmFpbnRMaXN0e1xuICAgICAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZShyaWdpZEJvZHk6UmlnaWRCb2R5KSB7XG4gICAgICAgICAgICB2YXIgb2JqID0gbmV3IHRoaXMocmlnaWRCb2R5KTtcblxuICAgICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0cnVjdG9yKHJpZ2lkQm9keTpSaWdpZEJvZHkpe1xuICAgICAgICAgICAgdGhpcy5fcmlnaWRCb2R5ID0gcmlnaWRCb2R5O1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfcmlnaWRCb2R5OlJpZ2lkQm9keSA9IG51bGw7XG4gICAgICAgIHByaXZhdGUgX2xpc3Q6d2RDYi5Db2xsZWN0aW9uPFBvaW50VG9Qb2ludENvbnN0cmFpbnQ+ID0gd2RDYi5Db2xsZWN0aW9uLmNyZWF0ZTxQb2ludFRvUG9pbnRDb25zdHJhaW50PigpO1xuXG4gICAgICAgIHB1YmxpYyBmb3JFYWNoKGZ1bmM6KFBvaW50VG9Qb2ludENvbnN0cmFpbnQpID0+IHZvaWQsIGNvbnRleHQgPSByb290KXtcbiAgICAgICAgICAgIHRoaXMuX2xpc3QuZm9yRWFjaChmdW5jLCBjb250ZXh0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBnZXRDb3VudCgpe1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2xpc3QuZ2V0Q291bnQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBhZGRDaGlsZChjb25zdHJhaW50OlBvaW50VG9Qb2ludENvbnN0cmFpbnQpe1xuICAgICAgICAgICAgdmFyIGVuZ2luZUFkYXB0ZXI6SVBoeXNpY3NFbmdpbmVBZGFwdGVyID0gbnVsbDtcblxuICAgICAgICAgICAgdGhpcy5fbGlzdC5hZGRDaGlsZChjb25zdHJhaW50KTtcblxuICAgICAgICAgICAgaWYoIXRoaXMuX3JpZ2lkQm9keS5pc1BoeXNpY3NFbmdpbmVBZGFwdGVyRXhpc3QoKSl7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBlbmdpbmVBZGFwdGVyID0gdGhpcy5fcmlnaWRCb2R5LmdldFBoeXNpY3NFbmdpbmVBZGFwdGVyKCk7XG5cbiAgICAgICAgICAgIGVuZ2luZUFkYXB0ZXIuYWRkUG9pbnRUb1BvaW50Q29uc3RyYWludCh0aGlzLl9yaWdpZEJvZHkuZW50aXR5T2JqZWN0LCBjb25zdHJhaW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBhZGRDaGlsZHJlbihhcmc6QXJyYXk8UG9pbnRUb1BvaW50Q29uc3RyYWludD58d2RDYi5MaXN0PFBvaW50VG9Qb2ludENvbnN0cmFpbnQ+KXtcbiAgICAgICAgICAgIGlmKEp1ZGdlVXRpbHMuaXNBcnJheShhcmcpKXtcbiAgICAgICAgICAgICAgICBmb3IobGV0IGNvbnN0cmFpbnQgb2YgPEFycmF5PFBvaW50VG9Qb2ludENvbnN0cmFpbnQ+PmFyZyl7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkQ2hpbGQoY29uc3RyYWludCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICBsZXQgY29uc3RyYWludExpc3QgPSA8d2RDYi5MaXN0PFBvaW50VG9Qb2ludENvbnN0cmFpbnQ+PmFyZztcblxuICAgICAgICAgICAgICAgIGNvbnN0cmFpbnRMaXN0LmZvckVhY2goKGNvbnN0cmFpbnQ6UG9pbnRUb1BvaW50Q29uc3RyYWludCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZENoaWxkKGNvbnN0cmFpbnQpO1xuICAgICAgICAgICAgICAgIH0sIHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHJlbW92ZUNoaWxkKGNvbnN0cmFpbnQ6UG9pbnRUb1BvaW50Q29uc3RyYWludCl7XG4gICAgICAgICAgICB2YXIgZW5naW5lQWRhcHRlciA9IG51bGw7XG5cbiAgICAgICAgICAgIHRoaXMuX2xpc3QucmVtb3ZlQ2hpbGQoY29uc3RyYWludCk7XG5cbiAgICAgICAgICAgIGlmKCF0aGlzLl9yaWdpZEJvZHkuaXNQaHlzaWNzRW5naW5lQWRhcHRlckV4aXN0KCkpe1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZW5naW5lQWRhcHRlciA9IHRoaXMuX3JpZ2lkQm9keS5nZXRQaHlzaWNzRW5naW5lQWRhcHRlcigpO1xuXG4gICAgICAgICAgICBlbmdpbmVBZGFwdGVyLnJlbW92ZVBvaW50VG9Qb2ludENvbnN0cmFpbnQoY29uc3RyYWludCk7XG4gICAgICAgIH1cbiAgICB9XG5cbn1cbiIsIm1vZHVsZSB3ZHtcbiAgICBleHBvcnQgY2xhc3MgUGh5c2ljc0VuZ2luZUZhY3Rvcnl7XG4gICAgICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlKHR5cGU6UGh5c2ljc0VuZ2luZVR5cGUpe1xuICAgICAgICAgICAgdmFyIHJlc3VsdDpJUGh5c2ljc0VuZ2luZUFkYXB0ZXIgPSBudWxsO1xuXG4gICAgICAgICAgICBzd2l0Y2ggKHR5cGUpe1xuICAgICAgICAgICAgICAgIGNhc2UgUGh5c2ljc0VuZ2luZVR5cGUuQ0FOTk9OOlxuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBDYW5ub25BZGFwdGVyLmNyZWF0ZSgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICB3ZENiLkxvZy5lcnJvcih0cnVlLCB3ZENiLkxvZy5pbmZvLkZVTkNfVU5FWFBFQ1QoXCJwaHlzaWNzIGVuZ2luZSB0eXBlXCIpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJtb2R1bGUgd2R7XG4gICAgZXhwb3J0IGVudW0gUGh5c2ljc0VuZ2luZVR5cGV7XG4gICAgICAgIENBTk5PTlxuICAgIH1cbn1cbiIsIm1vZHVsZSB3ZCB7XG4gICAgZXhwb3J0IGFic3RyYWN0IGNsYXNzIENhbm5vbkRhdGFMaXN0IHtcbiAgICAgICAgcHVibGljIGdldENvdW50KCl7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5kYXRhTGlzdC5nZXRDb3VudCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJvdGVjdGVkIGRhdGFMaXN0OndkQ2IuQ29sbGVjdGlvbjxhbnk+ID0gd2RDYi5Db2xsZWN0aW9uLmNyZWF0ZTxhbnk+KCk7XG5cbiAgICAgICAgcHJvdGVjdGVkIHJlbW92ZUJ5R2FtZU9iamVjdChvYmo6R2FtZU9iamVjdCl7XG4gICAgICAgICAgICB0aGlzLmRhdGFMaXN0LnJlbW92ZUNoaWxkKCh7ZW50aXR5T2JqZWN0LCBib2R5fSkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBKdWRnZVV0aWxzLmlzRXF1YWwoZW50aXR5T2JqZWN0LCBvYmopO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbiIsIm1vZHVsZSB3ZCB7XG4gICAgZXhwb3J0IGNsYXNzIENhbm5vbkdhbWVPYmplY3REYXRhTGlzdCBleHRlbmRzIENhbm5vbkRhdGFMaXN0e1xuICAgICAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZSgpIHtcbiAgICAgICAgICAgIHZhciBvYmogPSBuZXcgdGhpcygpO1xuXG4gICAgICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJvdGVjdGVkIGRhdGFMaXN0OndkQ2IuQ29sbGVjdGlvbjxDYW5ub25HYW1lT2JqZWN0RGF0YT47XG5cbiAgICAgICAgcHVibGljIHJlbW92ZShvYmo6R2FtZU9iamVjdCl7XG4gICAgICAgICAgICB0aGlzLnJlbW92ZUJ5R2FtZU9iamVjdChvYmopO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHVwZGF0ZUJvZHlUcmFuc2Zvcm1EYXRhKCl7XG4gICAgICAgICAgICB0aGlzLmRhdGFMaXN0LmZvckVhY2goKHtlbnRpdHlPYmplY3QsYm9keX0pID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgdHJhbnNmb3JtID0gZW50aXR5T2JqZWN0LnRyYW5zZm9ybTtcblxuICAgICAgICAgICAgICAgIC8vdG9kbyBjb25zaWRlciBpc1NjYWxlP1xuICAgICAgICAgICAgICAgIGlmKHRyYW5zZm9ybS5pc1RyYW5zbGF0ZSB8fCB0cmFuc2Zvcm0uaXNSb3RhdGUpe1xuICAgICAgICAgICAgICAgICAgICBib2R5LnBvc2l0aW9uID0gQ2Fubm9uVXRpbHMuY29udmVydFRvQ2Fubm9uVmVjdG9yMyhlbnRpdHlPYmplY3QudHJhbnNmb3JtLnBvc2l0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgYm9keS5xdWF0ZXJuaW9uID0gQ2Fubm9uVXRpbHMuY29udmVydFRvQ2Fubm9uUXVhdGVybmlvbihlbnRpdHlPYmplY3QudHJhbnNmb3JtLnJvdGF0aW9uKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHVwZGF0ZUdhbWVPYmplY3RUcmFuc2Zvcm1EYXRhKCl7XG4gICAgICAgICAgICB0aGlzLmRhdGFMaXN0LmZvckVhY2goKHtlbnRpdHlPYmplY3QsYm9keX0pID0+IHtcbiAgICAgICAgICAgICAgICBpZihlbnRpdHlPYmplY3QuaGFzVGFnKFwiaXNSaWdpZGJvZHlDaGlsZFwiKSl7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBlbnRpdHlPYmplY3QudHJhbnNmb3JtLnBvc2l0aW9uID0gQ2Fubm9uVXRpbHMuY29udmVydFRvV29uZGVyVmVjdG9yMyhib2R5LnBvc2l0aW9uKTtcbiAgICAgICAgICAgICAgICBlbnRpdHlPYmplY3QudHJhbnNmb3JtLnJvdGF0aW9uID0gQ2Fubm9uVXRpbHMuY29udmVydFRvV29uZGVyUXVhdGVybmlvbihib2R5LnF1YXRlcm5pb24pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgYWRkKG9iajpHYW1lT2JqZWN0LCBib2R5OkNBTk5PTi5Cb2R5KXtcbiAgICAgICAgICAgIHRoaXMuZGF0YUxpc3QuYWRkQ2hpbGQoe1xuICAgICAgICAgICAgICAgIGVudGl0eU9iamVjdDpvYmosXG4gICAgICAgICAgICAgICAgYm9keTpib2R5XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBmaW5kR2FtZU9iamVjdEJ5Qm9keShiOkNBTk5PTi5Cb2R5KXtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSB0aGlzLmRhdGFMaXN0LmZpbmRPbmUoKHtlbnRpdHlPYmplY3QsIGJvZHl9KSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGJvZHkgPT09IGI7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCAhPT0gbnVsbCA/IHJlc3VsdC5lbnRpdHlPYmplY3QgOiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGZpbmRCb2R5QnlHYW1lT2JqZWN0KG9iajpHYW1lT2JqZWN0KTphbnl7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gdGhpcy5kYXRhTGlzdC5maW5kT25lKCh7ZW50aXR5T2JqZWN0LCBib2R5fSkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBKdWRnZVV0aWxzLmlzRXF1YWwoZW50aXR5T2JqZWN0LCBvYmopO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQgIT09IG51bGwgPyByZXN1bHQuYm9keSA6IG51bGw7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBleHBvcnQgdHlwZSBDYW5ub25HYW1lT2JqZWN0RGF0YSA9IHtcbiAgICAgICAgZW50aXR5T2JqZWN0OkdhbWVPYmplY3QsXG4gICAgICAgIGJvZHk6Q0FOTk9OLkJvZHlcbiAgICB9XG59XG4iLCJtb2R1bGUgd2Qge1xuICAgIGV4cG9ydCBjbGFzcyBDYW5ub25NYXRlcmlhbExpc3QgZXh0ZW5kcyBDYW5ub25EYXRhTGlzdHtcbiAgICAgICAgcHVibGljIHN0YXRpYyBjcmVhdGUoKSB7XG4gICAgICAgICAgICB2YXIgb2JqID0gbmV3IHRoaXMoKTtcblxuICAgICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgfVxuXG4gICAgICAgIHByb3RlY3RlZCBkYXRhTGlzdDp3ZENiLkNvbGxlY3Rpb248Q2Fubm9uTWF0ZXJpYWxEYXRhPjtcblxuICAgICAgICBwdWJsaWMgcmVtb3ZlKG9iajpHYW1lT2JqZWN0KXtcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlQnlHYW1lT2JqZWN0KG9iaik7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgZmluZE1hdGVyaWFsQnlHYW1lT2JqZWN0KG9iajpHYW1lT2JqZWN0KXtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSB0aGlzLmRhdGFMaXN0LmZpbmRPbmUoKHtlbnRpdHlPYmplY3QsIG1hdGVyaWFsfSkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBKdWRnZVV0aWxzLmlzRXF1YWwoZW50aXR5T2JqZWN0LCBvYmopO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQgIT09IG51bGwgPyByZXN1bHQubWF0ZXJpYWwgOiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGFkZChvYmo6R2FtZU9iamVjdCwgbWF0ZXJpYWw6Q0FOTk9OLk1hdGVyaWFsKXtcbiAgICAgICAgICAgIHRoaXMuZGF0YUxpc3QuYWRkQ2hpbGQoe1xuICAgICAgICAgICAgICAgIGVudGl0eU9iamVjdDpvYmosXG4gICAgICAgICAgICAgICAgbWF0ZXJpYWw6bWF0ZXJpYWxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGFkZENvbnRhY3RNYXRlcmlhbCh3b3JsZDpDQU5OT04uV29ybGQsIGN1cnJlbnRNYXRlcmlhbDpDQU5OT04uTWF0ZXJpYWwsIGZyaWN0aW9uOm51bWJlciwgcmVzdGl0dXRpb246bnVtYmVyKXtcbiAgICAgICAgICAgIHRoaXMuZGF0YUxpc3QuZm9yRWFjaCgoe2VudGl0eU9iamVjdCwgbWF0ZXJpYWx9KSA9PiB7XG4gICAgICAgICAgICAgICAgd29ybGQuYWRkQ29udGFjdE1hdGVyaWFsKG5ldyBDQU5OT04uQ29udGFjdE1hdGVyaWFsKG1hdGVyaWFsLCBjdXJyZW50TWF0ZXJpYWwsIHtcbiAgICAgICAgICAgICAgICAgICAgZnJpY3Rpb246IGZyaWN0aW9uLFxuICAgICAgICAgICAgICAgICAgICByZXN0aXR1dGlvbjogcmVzdGl0dXRpb25cbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBnZXRDb250YWN0TWF0ZXJpYWxEYXRhKHdvcmxkOkNBTk5PTi5Xb3JsZCwgY3VycmVudE1hdGVyaWFsOkNBTk5PTi5NYXRlcmlhbCwgZGF0YU5hbWU6c3RyaW5nKXtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBudWxsO1xuXG4gICAgICAgICAgICB0aGlzLmRhdGFMaXN0LmZvckVhY2goKHtlbnRpdHlPYmplY3QsIG1hdGVyaWFsfSkgPT4ge1xuICAgICAgICAgICAgICAgIGxldCBjb250YWN0TWF0ZXJpYWwgPSB3b3JsZC5nZXRDb250YWN0TWF0ZXJpYWwobWF0ZXJpYWwsIGN1cnJlbnRNYXRlcmlhbCk7XG5cbiAgICAgICAgICAgICAgICBpZighY29udGFjdE1hdGVyaWFsKXtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IGNvbnRhY3RNYXRlcmlhbFtkYXRhTmFtZV07XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gd2RDYi4kQlJFQUs7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBnZXRDb250YWN0TWF0ZXJpYWxzKHdvcmxkOkNBTk5PTi5Xb3JsZCwgY3VycmVudE1hdGVyaWFsOkNBTk5PTi5NYXRlcmlhbCl7XG4gICAgICAgICAgICB2YXIgcmVzdWx0QXJyID0gW107XG5cbiAgICAgICAgICAgIHRoaXMuZGF0YUxpc3QuZm9yRWFjaCgoe2VudGl0eU9iamVjdCwgbWF0ZXJpYWx9KSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IGNvbnRhY3RNYXRlcmlhbCA9IHdvcmxkLmdldENvbnRhY3RNYXRlcmlhbChtYXRlcmlhbCwgY3VycmVudE1hdGVyaWFsKTtcblxuICAgICAgICAgICAgICAgIGlmKCFjb250YWN0TWF0ZXJpYWwpe1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmVzdWx0QXJyLnB1c2goY29udGFjdE1hdGVyaWFsKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0QXJyO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHNldENvbnRhY3RNYXRlcmlhbERhdGEod29ybGQ6Q0FOTk9OLldvcmxkLCBjdXJyZW50TWF0ZXJpYWw6Q0FOTk9OLk1hdGVyaWFsLCBkYXRhTmFtZTpzdHJpbmcsIGRhdGE6YW55KXtcbiAgICAgICAgICAgIHRoaXMuZGF0YUxpc3QuZm9yRWFjaCgoe2VudGl0eU9iamVjdCwgbWF0ZXJpYWx9KSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IGNvbnRhY3RNYXRlcmlhbCA9IHdvcmxkLmdldENvbnRhY3RNYXRlcmlhbChtYXRlcmlhbCwgY3VycmVudE1hdGVyaWFsKTtcblxuICAgICAgICAgICAgICAgIGlmKCFjb250YWN0TWF0ZXJpYWwpe1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY29udGFjdE1hdGVyaWFsW2RhdGFOYW1lXSA9IGRhdGE7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGV4cG9ydCB0eXBlIENhbm5vbk1hdGVyaWFsRGF0YSA9IHtcbiAgICAgICAgZW50aXR5T2JqZWN0OkdhbWVPYmplY3QsXG4gICAgICAgIG1hdGVyaWFsOkNBTk5PTi5NYXRlcmlhbFxuICAgIH1cbn1cbiIsIm1vZHVsZSB3ZCB7XG4gICAgZXhwb3J0IGFic3RyYWN0IGNsYXNzIENhbm5vbkNvbnN0cmFpbnREYXRhTGlzdCBleHRlbmRzIENhbm5vbkRhdGFMaXN0e1xuICAgIH1cbn1cbiIsIm1vZHVsZSB3ZCB7XG4gICAgZXhwb3J0IGFic3RyYWN0IGNsYXNzIENhbm5vblNpbmdsZUNvbnN0cmFpbnREYXRhTGlzdCBleHRlbmRzIENhbm5vbkNvbnN0cmFpbnREYXRhTGlzdHtcbiAgICAgICAgcHVibGljIGFkZChvYmo6R2FtZU9iamVjdCwgY29uc3RyYWludDpDQU5OT04uQ29uc3RyYWludCl7XG4gICAgICAgICAgICB0aGlzLmRhdGFMaXN0LmFkZENoaWxkKHtcbiAgICAgICAgICAgICAgICBlbnRpdHlPYmplY3Q6b2JqLFxuICAgICAgICAgICAgICAgIGNvbnN0cmFpbnQ6Y29uc3RyYWludFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgcmVtb3ZlKG9iajpHYW1lT2JqZWN0KXtcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlQnlHYW1lT2JqZWN0KG9iaik7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgZmluZENvbnN0cmFpbnRCeUdhbWVPYmplY3Qob2JqOkdhbWVPYmplY3Qpe1xuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHRoaXMuZGF0YUxpc3QuZmluZE9uZSgoe2VudGl0eU9iamVjdH0pID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gSnVkZ2VVdGlscy5pc0VxdWFsKGVudGl0eU9iamVjdCwgb2JqKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0ICE9PSBudWxsID8gcmVzdWx0LmNvbnN0cmFpbnQgOiBudWxsO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwibW9kdWxlIHdkIHtcbiAgICBleHBvcnQgY2xhc3MgQ2Fubm9uTG9ja0NvbnN0cmFpbnREYXRhTGlzdCBleHRlbmRzIENhbm5vblNpbmdsZUNvbnN0cmFpbnREYXRhTGlzdHtcbiAgICAgICAgcHVibGljIHN0YXRpYyBjcmVhdGUoKSB7XG4gICAgICAgICAgICB2YXIgb2JqID0gbmV3IHRoaXMoKTtcblxuICAgICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgfVxuXG4gICAgICAgIHByb3RlY3RlZCBkYXRhTGlzdDp3ZENiLkNvbGxlY3Rpb248Q2Fubm9uTG9ja0NvbnN0cmFpbnREYXRhPjtcbiAgICB9XG5cbiAgICBleHBvcnQgdHlwZSBDYW5ub25Mb2NrQ29uc3RyYWludERhdGEgPSB7XG4gICAgICAgIGVudGl0eU9iamVjdDpHYW1lT2JqZWN0LFxuICAgICAgICBjb25zdHJhaW50OkNBTk5PTi5Db25zdHJhaW50XG4gICAgfVxufVxuIiwibW9kdWxlIHdkIHtcbiAgICBleHBvcnQgY2xhc3MgQ2Fubm9uUG9pbnRUb1BvaW50Q29uc3RyYWludERhdGFMaXN0IGV4dGVuZHMgQ2Fubm9uQ29uc3RyYWludERhdGFMaXN0e1xuICAgICAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZSgpIHtcbiAgICAgICAgICAgIHZhciBvYmogPSBuZXcgdGhpcygpO1xuXG4gICAgICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJvdGVjdGVkIGRhdGFMaXN0OndkQ2IuQ29sbGVjdGlvbjxDYW5ub25Qb2ludFRvUG9pbnRDb25zdHJhaW50RGF0YT47XG5cbiAgICAgICAgcHVibGljIGZpbHRlcihmdW5jOihkYXRhOkNhbm5vblBvaW50VG9Qb2ludENvbnN0cmFpbnREYXRhKSA9PiBib29sZWFuKXtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRhdGFMaXN0LmZpbHRlcihmdW5jKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBmb3JFYWNoKGZ1bmM6KGRhdGE6Q2Fubm9uUG9pbnRUb1BvaW50Q29uc3RyYWludERhdGEpID0+IHZvaWQpe1xuICAgICAgICAgICAgdGhpcy5kYXRhTGlzdC5mb3JFYWNoKGZ1bmMpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGFkZChlbnRpdHlPYmplY3Q6R2FtZU9iamVjdCwgcG9pbnRUb1BvaW50Q29uc3RyYWludDpQb2ludFRvUG9pbnRDb25zdHJhaW50LCBjb25zdHJhaW50OkNBTk5PTi5Db25zdHJhaW50KXtcbiAgICAgICAgICAgIHRoaXMuZGF0YUxpc3QuYWRkQ2hpbGQoe1xuICAgICAgICAgICAgICAgIGVudGl0eU9iamVjdDplbnRpdHlPYmplY3QsXG4gICAgICAgICAgICAgICAgcG9pbnRUb1BvaW50Q29uc3RyYWludDogcG9pbnRUb1BvaW50Q29uc3RyYWludCxcbiAgICAgICAgICAgICAgICBjYW5ub25Db25zdHJhaW50OmNvbnN0cmFpbnRcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHJlbW92ZShjb25zdHJhaW50OiBQb2ludFRvUG9pbnRDb25zdHJhaW50KXtcbiAgICAgICAgICAgIHRoaXMuZGF0YUxpc3QucmVtb3ZlQ2hpbGQoKHtwb2ludFRvUG9pbnRDb25zdHJhaW50fSkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBKdWRnZVV0aWxzLmlzRXF1YWwocG9pbnRUb1BvaW50Q29uc3RyYWludCwgY29uc3RyYWludCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBmaW5kQ2Fubm9uQ29uc3RyYWludEJ5UG9pbnRUb1BvaW50Q29uc3RyYWludChjb25zdHJhaW50OiBQb2ludFRvUG9pbnRDb25zdHJhaW50KXtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSB0aGlzLmRhdGFMaXN0LmZpbmRPbmUoKHtwb2ludFRvUG9pbnRDb25zdHJhaW50fSkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBKdWRnZVV0aWxzLmlzRXF1YWwocG9pbnRUb1BvaW50Q29uc3RyYWludCwgY29uc3RyYWludCk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCAhPT0gbnVsbCA/IHJlc3VsdC5jYW5ub25Db25zdHJhaW50IDogbnVsbDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGV4cG9ydCB0eXBlIENhbm5vblBvaW50VG9Qb2ludENvbnN0cmFpbnREYXRhID0ge1xuICAgICAgICBlbnRpdHlPYmplY3Q6R2FtZU9iamVjdCxcbiAgICAgICAgcG9pbnRUb1BvaW50Q29uc3RyYWludDpQb2ludFRvUG9pbnRDb25zdHJhaW50LFxuICAgICAgICBjYW5ub25Db25zdHJhaW50OkNBTk5PTi5Db25zdHJhaW50XG4gICAgfVxufVxuIiwibW9kdWxlIHdkIHtcbiAgICBleHBvcnQgY2xhc3MgQ2Fubm9uRGlzdGFuY2VDb25zdHJhaW50RGF0YUxpc3QgZXh0ZW5kcyBDYW5ub25TaW5nbGVDb25zdHJhaW50RGF0YUxpc3R7XG4gICAgICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlKCkge1xuICAgICAgICAgICAgdmFyIG9iaiA9IG5ldyB0aGlzKCk7XG5cbiAgICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgIH1cblxuICAgICAgICBwcm90ZWN0ZWQgZGF0YUxpc3Q6d2RDYi5Db2xsZWN0aW9uPENhbm5vbkRpc3RhbmNlQ29uc3RyYWludERhdGE+O1xuICAgIH1cblxuICAgIGV4cG9ydCB0eXBlIENhbm5vbkRpc3RhbmNlQ29uc3RyYWludERhdGEgPSB7XG4gICAgICAgIGVudGl0eU9iamVjdDpHYW1lT2JqZWN0LFxuICAgICAgICBjb25zdHJhaW50OkNBTk5PTi5Db25zdHJhaW50XG4gICAgfVxufVxuIiwibW9kdWxlIHdkIHtcbiAgICBleHBvcnQgY2xhc3MgQ2Fubm9uSGluZ2VDb25zdHJhaW50RGF0YUxpc3QgZXh0ZW5kcyBDYW5ub25TaW5nbGVDb25zdHJhaW50RGF0YUxpc3R7XG4gICAgICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlKCkge1xuICAgICAgICAgICAgdmFyIG9iaiA9IG5ldyB0aGlzKCk7XG5cbiAgICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgIH1cblxuICAgICAgICBwcm90ZWN0ZWQgZGF0YUxpc3Q6d2RDYi5Db2xsZWN0aW9uPENhbm5vbkhpbmdlQ29uc3RyYWludERhdGE+O1xuICAgIH1cblxuICAgIGV4cG9ydCB0eXBlIENhbm5vbkhpbmdlQ29uc3RyYWludERhdGEgPSB7XG4gICAgICAgIGVudGl0eU9iamVjdDpHYW1lT2JqZWN0LFxuICAgICAgICBjb25zdHJhaW50OkNBTk5PTi5Db25zdHJhaW50XG4gICAgfVxufVxuIiwibW9kdWxlIHdkIHtcbiAgICBleHBvcnQgY2xhc3MgQ2Fubm9uVXRpbHN7XG4gICAgICAgIHB1YmxpYyBzdGF0aWMgY29udmVydFRvQ2Fubm9uVmVjdG9yMyh2OlZlY3RvcjMpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgQ0FOTk9OLlZlYzModi54LCB2LnksIHYueik7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgc3RhdGljIGNvbnZlcnRUb0Nhbm5vblF1YXRlcm5pb24ocm90YXRpb246UXVhdGVybmlvbil7XG4gICAgICAgICAgICByZXR1cm4gbmV3IENBTk5PTi5RdWF0ZXJuaW9uKHJvdGF0aW9uLngsIHJvdGF0aW9uLnksIHJvdGF0aW9uLnosIHJvdGF0aW9uLncpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHN0YXRpYyBjb252ZXJ0VG9Xb25kZXJWZWN0b3IzKHY6Q0FOTk9OLlZlYzMpIHtcbiAgICAgICAgICAgIHJldHVybiBWZWN0b3IzLmNyZWF0ZSh2LngsIHYueSwgdi56KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgY29udmVydFRvV29uZGVyUXVhdGVybmlvbihyOkNBTk5PTi5RdWF0ZXJuaW9uKXtcbiAgICAgICAgICAgIHJldHVybiBRdWF0ZXJuaW9uLmNyZWF0ZShyLngsIHIueSwgci56LCByLncpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4iLCJtb2R1bGUgd2Qge1xuICAgIGV4cG9ydCBjbGFzcyBDYW5ub25BZGFwdGVyIGltcGxlbWVudHMgSVBoeXNpY3NFbmdpbmVBZGFwdGVyIHtcbiAgICAgICAgcHVibGljIHN0YXRpYyBjcmVhdGUoKSB7XG4gICAgICAgICAgICB2YXIgb2JqID0gbmV3IHRoaXMoKTtcblxuICAgICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyB3b3JsZDpDQU5OT04uV29ybGQgPSBudWxsO1xuXG4gICAgICAgIHByaXZhdGUgX21hdGVyaWFsTGlzdDpDYW5ub25NYXRlcmlhbExpc3QgPSBDYW5ub25NYXRlcmlhbExpc3QuY3JlYXRlKCk7XG4gICAgICAgIHByaXZhdGUgX2dhbWVPYmplY3REYXRhTGlzdDpDYW5ub25HYW1lT2JqZWN0RGF0YUxpc3QgPSBDYW5ub25HYW1lT2JqZWN0RGF0YUxpc3QuY3JlYXRlKCk7XG4gICAgICAgIHByaXZhdGUgX2xvY2tDb25zdHJhaW50RGF0YUxpc3Q6Q2Fubm9uTG9ja0NvbnN0cmFpbnREYXRhTGlzdCA9IENhbm5vbkxvY2tDb25zdHJhaW50RGF0YUxpc3QuY3JlYXRlKCk7XG4gICAgICAgIHByaXZhdGUgX2Rpc3RhbmNlQ29uc3RyYWludERhdGFMaXN0OkNhbm5vbkRpc3RhbmNlQ29uc3RyYWludERhdGFMaXN0ID0gQ2Fubm9uRGlzdGFuY2VDb25zdHJhaW50RGF0YUxpc3QuY3JlYXRlKCk7XG4gICAgICAgIHByaXZhdGUgX2hpbmdlQ29uc3RyYWludERhdGFMaXN0OkNhbm5vbkhpbmdlQ29uc3RyYWludERhdGFMaXN0ID0gQ2Fubm9uSGluZ2VDb25zdHJhaW50RGF0YUxpc3QuY3JlYXRlKCk7XG4gICAgICAgIHByaXZhdGUgX3BvaW50VG9Qb2ludENvbnN0cmFpbnREYXRhTGlzdDpDYW5ub25Qb2ludFRvUG9pbnRDb25zdHJhaW50RGF0YUxpc3QgPSBDYW5ub25Qb2ludFRvUG9pbnRDb25zdHJhaW50RGF0YUxpc3QuY3JlYXRlKCk7XG5cbiAgICAgICAgcHJpdmF0ZSBfZHluYW1pY0JvZHk6Q2Fubm9uRHluYW1pY0JvZHkgPSBudWxsO1xuICAgICAgICBwcml2YXRlIF9raW5lbWF0aWNCb2R5OkNhbm5vbktpbmVtYXRpY0JvZHkgPSBudWxsO1xuICAgICAgICBwcml2YXRlIF9zdGF0aWNCb2R5OkNhbm5vblN0YXRpY0JvZHkgPSBudWxsO1xuICAgICAgICBwcml2YXRlIF9sb2NrQ29uc3RyYWludDpDYW5ub25Mb2NrQ29uc3RyYWludCA9IG51bGw7XG4gICAgICAgIHByaXZhdGUgX2Rpc3RhbmNlQ29uc3RyYWludDpDYW5ub25EaXN0YW5jZUNvbnN0cmFpbnQgPSBudWxsO1xuICAgICAgICBwcml2YXRlIF9oaW5nZUNvbnN0cmFpbnQ6Q2Fubm9uSGluZ2VDb25zdHJhaW50ID0gbnVsbDtcbiAgICAgICAgcHJpdmF0ZSBfcG9pbnRUb1BvaW50Q29uc3RyYWludDpDYW5ub25Qb2ludFRvUG9pbnRDb25zdHJhaW50ID0gbnVsbDtcblxuICAgICAgICBwdWJsaWMgZ2V0R3Jhdml0eShncmF2aXR5Om51bWJlcil7XG4gICAgICAgICAgICByZXR1cm4gQ2Fubm9uVXRpbHMuY29udmVydFRvV29uZGVyVmVjdG9yMyh0aGlzLndvcmxkLmdyYXZpdHkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHNldEdyYXZpdHkoIGdyYXZpdHk6VmVjdG9yMyl7XG4gICAgICAgICAgICB0aGlzLndvcmxkLmdyYXZpdHkgPSBDYW5ub25VdGlscy5jb252ZXJ0VG9DYW5ub25WZWN0b3IzKGdyYXZpdHkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGdldEZyaWN0aW9uKG9iajpHYW1lT2JqZWN0LCBmcmljdGlvbjpudW1iZXIpe1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2dldE1hdGVyaWFsRGF0YShvYmosIFwiZnJpY3Rpb25cIik7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgc2V0RnJpY3Rpb24ob2JqOkdhbWVPYmplY3QsIGZyaWN0aW9uOm51bWJlcil7XG4gICAgICAgICAgICB0aGlzLl9zZXRNYXRlcmlhbERhdGEob2JqLCBcImZyaWN0aW9uXCIsIGZyaWN0aW9uKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBnZXRSZXN0aXR1dGlvbihvYmo6R2FtZU9iamVjdCwgcmVzdGl0dXRpb246bnVtYmVyKXtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9nZXRNYXRlcmlhbERhdGEob2JqLCBcInJlc3RpdHV0aW9uXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHNldFJlc3RpdHV0aW9uKG9iajpHYW1lT2JqZWN0LCByZXN0aXR1dGlvbjpudW1iZXIpe1xuICAgICAgICAgICAgdGhpcy5fc2V0TWF0ZXJpYWxEYXRhKG9iaiwgXCJyZXN0aXR1dGlvblwiLCByZXN0aXR1dGlvbik7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgZ2V0TGluZWFyRGFtcGluZyhvYmo6R2FtZU9iamVjdCl7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZ2V0TnVtYmVyRGF0YShvYmosIFwibGluZWFyRGFtcGluZ1wiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBzZXRMaW5lYXJEYW1waW5nKG9iajpHYW1lT2JqZWN0LCBsaW5lYXJEYW1waW5nOm51bWJlcil7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fc2V0TnVtYmVyRGF0YShvYmosIFwibGluZWFyRGFtcGluZ1wiLCBsaW5lYXJEYW1waW5nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBnZXRBbmd1bGFyRGFtcGluZyhvYmo6R2FtZU9iamVjdCl7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZ2V0TnVtYmVyRGF0YShvYmosIFwiYW5ndWxhckRhbXBpbmdcIik7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgc2V0QW5ndWxhckRhbXBpbmcob2JqOkdhbWVPYmplY3QsIGFuZ3VsYXJEYW1waW5nOm51bWJlcil7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fc2V0TnVtYmVyRGF0YShvYmosIFwiYW5ndWxhckRhbXBpbmdcIiwgYW5ndWxhckRhbXBpbmcpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGdldE1hc3Mob2JqOkdhbWVPYmplY3Qpe1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2dldE51bWJlckRhdGEob2JqLCBcIm1hc3NcIik7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgc2V0TWFzcyhvYmo6R2FtZU9iamVjdCwgbWFzczpudW1iZXIpe1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3NldE51bWJlckRhdGEob2JqLCBcIm1hc3NcIiwgbWFzcyk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgZ2V0VmVsb2NpdHkob2JqOkdhbWVPYmplY3Qpe1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2dldFZlYzNEYXRhKG9iaiwgXCJ2ZWxvY2l0eVwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBzZXRWZWxvY2l0eShvYmo6R2FtZU9iamVjdCwgdmVsb2NpdHk6VmVjdG9yMyl7XG4gICAgICAgICAgICB0aGlzLl9zZXRWZWMzRGF0YShvYmosIFwidmVsb2NpdHlcIiwgdmVsb2NpdHkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGdldEFuZ3VsYXJWZWxvY2l0eShvYmo6R2FtZU9iamVjdCl7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZ2V0VmVjM0RhdGEob2JqLCBcImFuZ3VsYXJWZWxvY2l0eVwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBzZXRBbmd1bGFyVmVsb2NpdHkob2JqOkdhbWVPYmplY3QsIGFuZ3VsYXJWZWxvY2l0eTpWZWN0b3IzKXtcbiAgICAgICAgICAgIHRoaXMuX3NldFZlYzNEYXRhKG9iaiwgXCJhbmd1bGFyVmVsb2NpdHlcIiwgYW5ndWxhclZlbG9jaXR5KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBpbml0KCkge1xuICAgICAgICAgICAgdmFyIHtcbiAgICAgICAgICAgICAgICBncmF2aXR5LFxuICAgICAgICAgICAgICAgIGl0ZXJhdGlvbnNcbiAgICAgICAgICAgICAgICB9PSBEaXJlY3Rvci5nZXRJbnN0YW5jZSgpLnNjZW5lLnBoeXNpY3M7XG5cbiAgICAgICAgICAgIHRoaXMud29ybGQgPSBuZXcgQ0FOTk9OLldvcmxkKCk7XG5cbiAgICAgICAgICAgIHRoaXMud29ybGQuYnJvYWRwaGFzZSA9IG5ldyBDQU5OT04uTmFpdmVCcm9hZHBoYXNlKCk7XG5cbiAgICAgICAgICAgIHRoaXMud29ybGQuc29sdmVyLml0ZXJhdGlvbnMgPSBpdGVyYXRpb25zO1xuICAgICAgICAgICAgdGhpcy53b3JsZC5ncmF2aXR5LnNldChncmF2aXR5LngsIGdyYXZpdHkueSwgZ3Jhdml0eS56KTtcblxuICAgICAgICAgICAgdGhpcy5fZHluYW1pY0JvZHkgPSBDYW5ub25EeW5hbWljQm9keS5jcmVhdGUodGhpcy53b3JsZCwgdGhpcy5fZ2FtZU9iamVjdERhdGFMaXN0LCB0aGlzLl9tYXRlcmlhbExpc3QpO1xuICAgICAgICAgICAgdGhpcy5fa2luZW1hdGljQm9keSA9IENhbm5vbktpbmVtYXRpY0JvZHkuY3JlYXRlKHRoaXMud29ybGQsIHRoaXMuX2dhbWVPYmplY3REYXRhTGlzdCwgdGhpcy5fbWF0ZXJpYWxMaXN0KTtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRpY0JvZHkgPSBDYW5ub25TdGF0aWNCb2R5LmNyZWF0ZSh0aGlzLndvcmxkLCB0aGlzLl9nYW1lT2JqZWN0RGF0YUxpc3QsIHRoaXMuX21hdGVyaWFsTGlzdCk7XG5cbiAgICAgICAgICAgIHRoaXMuX2xvY2tDb25zdHJhaW50ID0gQ2Fubm9uTG9ja0NvbnN0cmFpbnQuY3JlYXRlKHRoaXMud29ybGQsIHRoaXMuX2dhbWVPYmplY3REYXRhTGlzdCwgdGhpcy5fbG9ja0NvbnN0cmFpbnREYXRhTGlzdCk7XG4gICAgICAgICAgICB0aGlzLl9kaXN0YW5jZUNvbnN0cmFpbnQgPSBDYW5ub25EaXN0YW5jZUNvbnN0cmFpbnQuY3JlYXRlKHRoaXMud29ybGQsIHRoaXMuX2dhbWVPYmplY3REYXRhTGlzdCwgdGhpcy5fZGlzdGFuY2VDb25zdHJhaW50RGF0YUxpc3QpO1xuICAgICAgICAgICAgdGhpcy5faGluZ2VDb25zdHJhaW50ID0gQ2Fubm9uSGluZ2VDb25zdHJhaW50LmNyZWF0ZSh0aGlzLndvcmxkLCB0aGlzLl9nYW1lT2JqZWN0RGF0YUxpc3QsIHRoaXMuX2hpbmdlQ29uc3RyYWludERhdGFMaXN0KTtcbiAgICAgICAgICAgIHRoaXMuX3BvaW50VG9Qb2ludENvbnN0cmFpbnQgPSBDYW5ub25Qb2ludFRvUG9pbnRDb25zdHJhaW50LmNyZWF0ZSh0aGlzLndvcmxkLCB0aGlzLl9nYW1lT2JqZWN0RGF0YUxpc3QsIHRoaXMuX3BvaW50VG9Qb2ludENvbnN0cmFpbnREYXRhTGlzdCk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgYWRkRHluYW1pY0JvZHkoZW50aXR5T2JqZWN0OkdhbWVPYmplY3QsIGRhdGE6YW55KSB7XG4gICAgICAgICAgICB0aGlzLl9keW5hbWljQm9keS5hZGRCb2R5KGVudGl0eU9iamVjdCwgZGF0YSk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgYWRkS2luZW1hdGljQm9keShlbnRpdHlPYmplY3Q6R2FtZU9iamVjdCwgZGF0YTphbnkpIHtcbiAgICAgICAgICAgIHRoaXMuX2tpbmVtYXRpY0JvZHkuYWRkQm9keShlbnRpdHlPYmplY3QsIGRhdGEpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGFkZFN0YXRpY0JvZHkoZW50aXR5T2JqZWN0OkdhbWVPYmplY3QsIGRhdGE6YW55KSB7XG4gICAgICAgICAgICB0aGlzLl9zdGF0aWNCb2R5LmFkZEJvZHkoZW50aXR5T2JqZWN0LCBkYXRhKTtcbiAgICAgICAgfVxuICAgICAgICAvL1xuICAgICAgICAvL0ByZXF1aXJlKGZ1bmN0aW9uKGVudGl0eU9iamVjdDpHYW1lT2JqZWN0KXtcbiAgICAgICAgLy8gICAgYXNzZXJ0KCEhdGhpcy5fZ2FtZU9iamVjdERhdGFMaXN0LmZpbmRCb2R5QnlHYW1lT2JqZWN0KGVudGl0eU9iamVjdCksIExvZy5pbmZvLkZVTkNfU0hPVUxEKFwiYWRkIHBoeXNpY3MgYm9keVwiKSk7XG4gICAgICAgIC8vfSlcbiAgICAgICAgLy9wdWJsaWMgdXBkYXRlQ29sbGlkZXJTaGFwZUZyb21Cb2R5KGVudGl0eU9iamVjdDpHYW1lT2JqZWN0KXtcbiAgICAgICAgLy8gICAgdmFyIGJvZHk6Q0FOTk9OLkJvZHkgPSB0aGlzLl9nYW1lT2JqZWN0RGF0YUxpc3QuZmluZEJvZHlCeUdhbWVPYmplY3QoZW50aXR5T2JqZWN0KTtcbiAgICAgICAgLy9cbiAgICAgICAgLy8gICAgYm9keS5cbiAgICAgICAgLy9cbiAgICAgICAgLy99XG5cbiAgICAgICAgcHVibGljIGFkZExvY2tDb25zdHJhaW50KGVudGl0eU9iamVjdDpHYW1lT2JqZWN0LCBsb2NrQ29uc3RyYWludDpMb2NrQ29uc3RyYWludCl7XG4gICAgICAgICAgICB0aGlzLl9sb2NrQ29uc3RyYWludC5hZGRDb25zdHJhaW50KGVudGl0eU9iamVjdCwgbG9ja0NvbnN0cmFpbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHJlbW92ZUxvY2tDb25zdHJhaW50KGVudGl0eU9iamVjdDpHYW1lT2JqZWN0KXtcbiAgICAgICAgICAgIHRoaXMuX2xvY2tDb25zdHJhaW50LnJlbW92ZUNvbnN0cmFpbnQoZW50aXR5T2JqZWN0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBhZGREaXN0YW5jZUNvbnN0cmFpbnQoZW50aXR5T2JqZWN0OkdhbWVPYmplY3QsIGRpc3RhbmNlQ29uc3RyYWludDpEaXN0YW5jZUNvbnN0cmFpbnQpe1xuICAgICAgICAgICAgdGhpcy5fZGlzdGFuY2VDb25zdHJhaW50LmFkZENvbnN0cmFpbnQoZW50aXR5T2JqZWN0LCBkaXN0YW5jZUNvbnN0cmFpbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHJlbW92ZURpc3RhbmNlQ29uc3RyYWludChlbnRpdHlPYmplY3Q6R2FtZU9iamVjdCl7XG4gICAgICAgICAgICB0aGlzLl9kaXN0YW5jZUNvbnN0cmFpbnQucmVtb3ZlQ29uc3RyYWludChlbnRpdHlPYmplY3QpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGFkZEhpbmdlQ29uc3RyYWludChlbnRpdHlPYmplY3Q6R2FtZU9iamVjdCwgaGluZ2VDb25zdHJhaW50OkhpbmdlQ29uc3RyYWludCl7XG4gICAgICAgICAgICB0aGlzLl9oaW5nZUNvbnN0cmFpbnQuYWRkQ29uc3RyYWludChlbnRpdHlPYmplY3QsIGhpbmdlQ29uc3RyYWludCk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgcmVtb3ZlSGluZ2VDb25zdHJhaW50KGVudGl0eU9iamVjdDpHYW1lT2JqZWN0KXtcbiAgICAgICAgICAgIHRoaXMuX2hpbmdlQ29uc3RyYWludC5yZW1vdmVDb25zdHJhaW50KGVudGl0eU9iamVjdCk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgYWRkUG9pbnRUb1BvaW50Q29uc3RyYWludChlbnRpdHlPYmplY3Q6R2FtZU9iamVjdCwgcG9pbnRUb1BvaW50Q29uc3RyYWludDpQb2ludFRvUG9pbnRDb25zdHJhaW50KXtcbiAgICAgICAgICAgIHRoaXMuX3BvaW50VG9Qb2ludENvbnN0cmFpbnQuYWRkQ29uc3RyYWludChlbnRpdHlPYmplY3QsIHBvaW50VG9Qb2ludENvbnN0cmFpbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHJlbW92ZVBvaW50VG9Qb2ludENvbnN0cmFpbnQocG9pbnRUb1BvaW50Q29uc3RyYWludDpQb2ludFRvUG9pbnRDb25zdHJhaW50KXtcbiAgICAgICAgICAgIHRoaXMuX3BvaW50VG9Qb2ludENvbnN0cmFpbnQucmVtb3ZlQ29uc3RyYWludChwb2ludFRvUG9pbnRDb25zdHJhaW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyByZW1vdmVHYW1lT2JqZWN0KG9iajpHYW1lT2JqZWN0KXtcbiAgICAgICAgICAgIHZhciBtYXRlcmlhbCA9IHRoaXMuX2dldE1hdGVyaWFsKG9iaiksXG4gICAgICAgICAgICAgICAgYm9keSA9IHRoaXMuX2dhbWVPYmplY3REYXRhTGlzdC5maW5kQm9keUJ5R2FtZU9iamVjdChvYmopO1xuXG4gICAgICAgICAgICBpZihib2R5KXtcbiAgICAgICAgICAgICAgICB0aGlzLndvcmxkLnJlbW92ZShib2R5KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5fZ2FtZU9iamVjdERhdGFMaXN0LnJlbW92ZShvYmopO1xuXG4gICAgICAgICAgICB0aGlzLl9tYXRlcmlhbExpc3QucmVtb3ZlKG9iaik7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgcmVtb3ZlQ29uc3RyYWludHMob2JqOkdhbWVPYmplY3Qpe1xuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgICAgICAgICB0aGlzLl9sb2NrQ29uc3RyYWludC5yZW1vdmVDb25zdHJhaW50KG9iaik7XG4gICAgICAgICAgICB0aGlzLl9kaXN0YW5jZUNvbnN0cmFpbnQucmVtb3ZlQ29uc3RyYWludChvYmopO1xuICAgICAgICAgICAgdGhpcy5faGluZ2VDb25zdHJhaW50LnJlbW92ZUNvbnN0cmFpbnQob2JqKTtcblxuICAgICAgICAgICAgdGhpcy5fcG9pbnRUb1BvaW50Q29uc3RyYWludERhdGFMaXN0XG4gICAgICAgICAgICAgICAgLmZpbHRlcigoe2VudGl0eU9iamVjdH0pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEp1ZGdlVXRpbHMuaXNFcXVhbChlbnRpdHlPYmplY3QsIG9iaik7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAuZm9yRWFjaCgoe3BvaW50VG9Qb2ludENvbnN0cmFpbnR9KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuX3BvaW50VG9Qb2ludENvbnN0cmFpbnQucmVtb3ZlQ29uc3RyYWludChwb2ludFRvUG9pbnRDb25zdHJhaW50KVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHVwZGF0ZShlbGFwc2VkVGltZTpudW1iZXIpOnZvaWQge1xuICAgICAgICAgICAgdGhpcy5fZ2FtZU9iamVjdERhdGFMaXN0LnVwZGF0ZUJvZHlUcmFuc2Zvcm1EYXRhKCk7XG5cbiAgICAgICAgICAgIHRoaXMud29ybGQuc3RlcChEaXJlY3Rvci5nZXRJbnN0YW5jZSgpLmdldERlbHRhVGltZSgpIC8gMTAwMCk7XG5cbiAgICAgICAgICAgIHRoaXMuX2dhbWVPYmplY3REYXRhTGlzdC51cGRhdGVHYW1lT2JqZWN0VHJhbnNmb3JtRGF0YSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfZ2V0TWF0ZXJpYWwob2JqOkdhbWVPYmplY3QpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9tYXRlcmlhbExpc3QuZmluZE1hdGVyaWFsQnlHYW1lT2JqZWN0KG9iaik7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9nZXROdW1iZXJEYXRhKG9iajpHYW1lT2JqZWN0LCBkYXRhTmFtZTpzdHJpbmcpe1xuICAgICAgICAgICAgdmFyIGJvZHkgPSB0aGlzLl9nYW1lT2JqZWN0RGF0YUxpc3QuZmluZEJvZHlCeUdhbWVPYmplY3Qob2JqKTtcblxuICAgICAgICAgICAgaWYoIWJvZHkpe1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gYm9keVtkYXRhTmFtZV07XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9zZXROdW1iZXJEYXRhKG9iajpHYW1lT2JqZWN0LCBkYXRhTmFtZTpzdHJpbmcsIGRhdGE6bnVtYmVyKXtcbiAgICAgICAgICAgIHZhciBib2R5ID0gdGhpcy5fZ2FtZU9iamVjdERhdGFMaXN0LmZpbmRCb2R5QnlHYW1lT2JqZWN0KG9iaik7XG5cbiAgICAgICAgICAgIGlmKCFib2R5KXtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYm9keVtkYXRhTmFtZV0gPSBkYXRhO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfZ2V0VmVjM0RhdGEob2JqOkdhbWVPYmplY3QsIGRhdGFOYW1lOnN0cmluZyl7XG4gICAgICAgICAgICB2YXIgYm9keSA9IHRoaXMuX2dhbWVPYmplY3REYXRhTGlzdC5maW5kQm9keUJ5R2FtZU9iamVjdChvYmopO1xuXG4gICAgICAgICAgICBpZighYm9keSl7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBDYW5ub25VdGlscy5jb252ZXJ0VG9Xb25kZXJWZWN0b3IzKGJvZHlbZGF0YU5hbWVdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX3NldFZlYzNEYXRhKG9iajpHYW1lT2JqZWN0LCBkYXRhTmFtZTpzdHJpbmcsIGRhdGE6VmVjdG9yMyl7XG4gICAgICAgICAgICB2YXIgYm9keSA9IHRoaXMuX2dhbWVPYmplY3REYXRhTGlzdC5maW5kQm9keUJ5R2FtZU9iamVjdChvYmopO1xuXG4gICAgICAgICAgICBpZighYm9keSl7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGJvZHlbZGF0YU5hbWVdID0gQ2Fubm9uVXRpbHMuY29udmVydFRvQ2Fubm9uVmVjdG9yMyhkYXRhKTtcbiAgICAgICAgfVxuXG4gICAgICAgIEByZXF1aXJlKGZ1bmN0aW9uKG9iajpHYW1lT2JqZWN0LCBkYXRhTmFtZTpzdHJpbmcpe1xuICAgICAgICAgICAgdmFyIHJlc3VsdEFyciA9IFtdLFxuICAgICAgICAgICAgICAgIGZpcnN0RGF0YSA9IG51bGwsXG4gICAgICAgICAgICAgICAgY3VycmVudE1hdGVyaWFsID0gdGhpcy5fZ2V0TWF0ZXJpYWwob2JqKTtcblxuICAgICAgICAgICAgaWYoIWN1cnJlbnRNYXRlcmlhbCl7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJlc3VsdEFyciA9IHRoaXMuX21hdGVyaWFsTGlzdC5nZXRDb250YWN0TWF0ZXJpYWxzKHRoaXMud29ybGQsIGN1cnJlbnRNYXRlcmlhbCk7XG5cbiAgICAgICAgICAgIGZpcnN0RGF0YSA9IHJlc3VsdEFyclswXTtcbiAgICAgICAgICAgIGZvcihsZXQgZGF0YSBvZiByZXN1bHRBcnIpe1xuICAgICAgICAgICAgICAgIGFzc2VydChkYXRhID09PSBmaXJzdERhdGEsIExvZy5pbmZvLkZVTkNfU0hPVUxEKFwidGhlIGRhdGEgb2YgY29udGFjdCBtYXRlcmlhbCB3aGljaCBjb250YWlucyB0aGUgc2FtZSBtYXRlcmlhbFwiLCBcImJlIHRoZSBzYW1lXCIpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgcHJpdmF0ZSBfZ2V0TWF0ZXJpYWxEYXRhKG9iajpHYW1lT2JqZWN0LCBkYXRhTmFtZTpzdHJpbmcpe1xuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IG51bGwsXG4gICAgICAgICAgICAgICAgY3VycmVudE1hdGVyaWFsID0gdGhpcy5fZ2V0TWF0ZXJpYWwob2JqKTtcblxuICAgICAgICAgICAgaWYoIWN1cnJlbnRNYXRlcmlhbCl7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9tYXRlcmlhbExpc3QuZ2V0Q29udGFjdE1hdGVyaWFsRGF0YSh0aGlzLndvcmxkLCBjdXJyZW50TWF0ZXJpYWwsIGRhdGFOYW1lKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX3NldE1hdGVyaWFsRGF0YShvYmo6R2FtZU9iamVjdCwgZGF0YU5hbWU6c3RyaW5nLCBkYXRhOm51bWJlcil7XG4gICAgICAgICAgICB2YXIgd29ybGQgPSB0aGlzLndvcmxkLFxuICAgICAgICAgICAgICAgIGN1cnJlbnRNYXRlcmlhbCA9IHRoaXMuX2dldE1hdGVyaWFsKG9iaik7XG5cbiAgICAgICAgICAgIGlmKCFjdXJyZW50TWF0ZXJpYWwpe1xuICAgICAgICAgICAgICAgIExvZy53YXJuKFwibm8gbWF0ZXJpYWwgZmluZCwgcGxlYXNlIGFkZCBtYXRlcmlhbCBmaXJzdFwiKTtcblxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5fbWF0ZXJpYWxMaXN0LnNldENvbnRhY3RNYXRlcmlhbERhdGEodGhpcy53b3JsZCwgY3VycmVudE1hdGVyaWFsLCBkYXRhTmFtZSwgZGF0YSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbiIsIm1vZHVsZSB3ZCB7XG4gICAgZXhwb3J0IGFic3RyYWN0IGNsYXNzIENhbm5vbkJvZHkge1xuICAgICAgICBjb25zdHJ1Y3Rvcih3b3JsZDpDQU5OT04uV29ybGQsIGdhbWVPYmplY3REYXRhTGlzdDpDYW5ub25HYW1lT2JqZWN0RGF0YUxpc3QsIG1hdGVyaWFsTGlzdDpDYW5ub25NYXRlcmlhbExpc3QpIHtcbiAgICAgICAgICAgIHRoaXMud29ybGQgPSB3b3JsZDtcbiAgICAgICAgICAgIHRoaXMuZ2FtZU9iamVjdExpc3QgPSBnYW1lT2JqZWN0RGF0YUxpc3Q7XG4gICAgICAgICAgICB0aGlzLm1hdGVyaWFsTGlzdCA9IG1hdGVyaWFsTGlzdDtcbiAgICAgICAgfVxuXG4gICAgICAgIHByb3RlY3RlZCB3b3JsZDpDQU5OT04uV29ybGQgPSBudWxsO1xuICAgICAgICBwcm90ZWN0ZWQgbWF0ZXJpYWxMaXN0OkNhbm5vbk1hdGVyaWFsTGlzdCA9IG51bGw7XG4gICAgICAgIHByb3RlY3RlZCBnYW1lT2JqZWN0TGlzdDpDYW5ub25HYW1lT2JqZWN0RGF0YUxpc3QgPSBudWxsO1xuXG4gICAgICAgIHB1YmxpYyBhZGRCb2R5KGVudGl0eU9iamVjdDpHYW1lT2JqZWN0LCBkYXRhOmFueSkge1xuICAgICAgICAgICAgdmFyIGJvZHkgPSB0aGlzLmNyZWF0ZUJvZHkoZGF0YSk7XG5cbiAgICAgICAgICAgIGlmKGRhdGEuY2hpbGRyZW4uZ2V0Q291bnQoKSA+IDApe1xuICAgICAgICAgICAgICAgIHRoaXMuX2FkZENvbXBvdW5kcyhlbnRpdHlPYmplY3QsIGRhdGEuY2hpbGRyZW4sIGJvZHkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICBib2R5LmFkZFNoYXBlKHRoaXMuX2NyZWF0ZVNoYXBlKGVudGl0eU9iamVjdC5nZXRDb21wb25lbnQ8Q29sbGlkZXI+KENvbGxpZGVyKS5zaGFwZSkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLmFmdGVyQWRkU2hhcGUoYm9keSwgZGF0YSk7XG5cbiAgICAgICAgICAgIGJvZHkubWF0ZXJpYWwgPSB0aGlzLl9jcmVhdGVNYXRlcmlhbChlbnRpdHlPYmplY3QsIGRhdGEuZnJpY3Rpb24sIGRhdGEucmVzdGl0dXRpb24pO1xuICAgICAgICAgICAgYm9keS5wb3NpdGlvbiA9IENhbm5vblV0aWxzLmNvbnZlcnRUb0Nhbm5vblZlY3RvcjMoZGF0YS5wb3NpdGlvbik7XG4gICAgICAgICAgICBib2R5LnF1YXRlcm5pb24gPSBDYW5ub25VdGlscy5jb252ZXJ0VG9DYW5ub25RdWF0ZXJuaW9uKGRhdGEucm90YXRpb24pO1xuXG4gICAgICAgICAgICB0aGlzLndvcmxkLmFkZEJvZHkoYm9keSk7XG5cblxuXG4gICAgICAgICAgICB0aGlzLmdhbWVPYmplY3RMaXN0LmFkZChlbnRpdHlPYmplY3QsIGJvZHkpO1xuXG4gICAgICAgICAgICB0aGlzLl9iaW5kQ29sbGlkZUV2ZW50KGJvZHksIGRhdGEub25Db2xsaXNpb25TdGFydCwgZGF0YS5vbkNvbnRhY3QsIGRhdGEub25Db2xsaXNpb25FbmQpO1xuXG4gICAgICAgICAgICByZXR1cm4gYm9keTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByb3RlY3RlZCBhYnN0cmFjdCBjcmVhdGVCb2R5KGRhdGE6YW55KTpDQU5OT04uQm9keTtcblxuICAgICAgICBAdmlydHVhbFxuICAgICAgICBwcm90ZWN0ZWQgYWZ0ZXJBZGRTaGFwZShib2R5OkNBTk5PTi5Cb2R5LCBkYXRhOmFueSk6dm9pZHtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX2NyZWF0ZVNoYXBlKHNoYXBlOlNoYXBlKSB7XG4gICAgICAgICAgICB2YXIgY2Fubm9uU2hhcGUgPSBudWxsO1xuXG4gICAgICAgICAgICBpZiAoc2hhcGUgaW5zdGFuY2VvZiBBQUJCU2hhcGUpIHtcbiAgICAgICAgICAgICAgICBjYW5ub25TaGFwZSA9IG5ldyBDQU5OT04uQm94KENhbm5vblV0aWxzLmNvbnZlcnRUb0Nhbm5vblZlY3RvcjMoc2hhcGUuaGFsZkV4dGVudHMpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHNoYXBlIGluc3RhbmNlb2YgU3BoZXJlU2hhcGUpIHtcbiAgICAgICAgICAgICAgICBjYW5ub25TaGFwZSA9IG5ldyBDQU5OT04uU3BoZXJlKHNoYXBlLnJhZGl1cyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBjYW5ub25TaGFwZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX2JpbmRDb2xsaWRlRXZlbnQodGFyZ2V0Qm9keTpDQU5OT04uQm9keSwgb25Db2xsaXNpb25TdGFydDooY29sbGlkZU9iamVjdDpHYW1lT2JqZWN0KSA9PiB2b2lkLCBvbkNvbnRhY3Q6KGNvbGxpZGVPYmplY3Q6R2FtZU9iamVjdCkgPT4gdm9pZCwgb25Db2xsaXNpb25FbmQ6KGNvbGxpZGVPYmplY3Q6R2FtZU9iamVjdCkgPT4gdm9pZCkge1xuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgICAgICAgICB0YXJnZXRCb2R5LmFkZEV2ZW50TGlzdGVuZXIoXCJjb2xsaWRlXCIsIChlKSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IGVudGl0eU9iamVjdCA9IHNlbGYuZ2FtZU9iamVjdExpc3QuZmluZEdhbWVPYmplY3RCeUJvZHkoZS5ib2R5KSxcbiAgICAgICAgICAgICAgICAgICAgY29sbGlkZU9iamVjdCA9IG51bGw7XG5cbiAgICAgICAgICAgICAgICBpZiAoIWVudGl0eU9iamVjdCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY29sbGlkZU9iamVjdCA9IGVudGl0eU9iamVjdDtcblxuICAgICAgICAgICAgICAgIG9uQ29sbGlzaW9uU3RhcnQoY29sbGlkZU9iamVjdCk7XG4gICAgICAgICAgICAgICAgb25Db250YWN0KGNvbGxpZGVPYmplY3QpO1xuICAgICAgICAgICAgICAgIG9uQ29sbGlzaW9uRW5kKGNvbGxpZGVPYmplY3QpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9jcmVhdGVNYXRlcmlhbChlbnRpdHlPYmplY3Q6R2FtZU9iamVjdCwgZnJpY3Rpb246bnVtYmVyLCByZXN0aXR1dGlvbjpudW1iZXIpIHtcbiAgICAgICAgICAgIHZhciBtYXRlcmlhbCA9IG51bGwsXG4gICAgICAgICAgICAgICAgY3VycmVudE1hdGVyaWFsID0gbnVsbDtcblxuICAgICAgICAgICAgbWF0ZXJpYWwgPSB0aGlzLl9nZXRNYXRlcmlhbChlbnRpdHlPYmplY3QpO1xuXG4gICAgICAgICAgICBpZiAobWF0ZXJpYWwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbWF0ZXJpYWw7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGN1cnJlbnRNYXRlcmlhbCA9IG5ldyBDQU5OT04uTWF0ZXJpYWwoXCJtYXRlcmlhbFwiKTtcblxuICAgICAgICAgICAgdGhpcy5fYWRkTWF0ZXJpYWwoZW50aXR5T2JqZWN0LCBjdXJyZW50TWF0ZXJpYWwsIGZyaWN0aW9uLCByZXN0aXR1dGlvbik7XG5cbiAgICAgICAgICAgIHJldHVybiBjdXJyZW50TWF0ZXJpYWw7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9nZXRNYXRlcmlhbChvYmo6R2FtZU9iamVjdCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubWF0ZXJpYWxMaXN0LmZpbmRNYXRlcmlhbEJ5R2FtZU9iamVjdChvYmopO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfYWRkTWF0ZXJpYWwoZW50aXR5T2JqZWN0OkdhbWVPYmplY3QsIGN1cnJlbnRNYXRlcmlhbDpDQU5OT04uTWF0ZXJpYWwsIGZyaWN0aW9uOm51bWJlciwgcmVzdGl0dXRpb246bnVtYmVyKSB7XG4gICAgICAgICAgICB0aGlzLm1hdGVyaWFsTGlzdC5hZGQoZW50aXR5T2JqZWN0LCBjdXJyZW50TWF0ZXJpYWwpO1xuICAgICAgICAgICAgdGhpcy5tYXRlcmlhbExpc3QuYWRkQ29udGFjdE1hdGVyaWFsKHRoaXMud29ybGQsIGN1cnJlbnRNYXRlcmlhbCwgZnJpY3Rpb24sIHJlc3RpdHV0aW9uKTtcbiAgICAgICAgfVxuXG4gICAgICAgIEByZXF1aXJlKGZ1bmN0aW9uIChlbnRpdHlPYmplY3Q6R2FtZU9iamVjdCwgY2hpbGRyZW46d2RDYi5Db2xsZWN0aW9uPEdhbWVPYmplY3Q+LCBib2R5OkNBTk5PTi5Cb2R5KSB7XG4gICAgICAgICAgICBjaGlsZHJlbi5mb3JFYWNoKChjaGlsZDpHYW1lT2JqZWN0KSA9PiB7XG4gICAgICAgICAgICAgICAgYXNzZXJ0KCEhY2hpbGQuZ2V0Q29tcG9uZW50KENvbGxpZGVyKSwgTG9nLmluZm8uRlVOQ19NVVNUX0RFRklORShcImNvbGxpZGVyIGNvbXBvbmVudFwiKSk7XG4gICAgICAgICAgICAgICAgYXNzZXJ0KCEhY2hpbGQuZ2V0Q29tcG9uZW50PENvbGxpZGVyPihDb2xsaWRlcikuc2hhcGUsIExvZy5pbmZvLkZVTkNfU0hPVUxEKFwiY3JlYXRlIGNvbGxpZGVyLnNoYXBlXCIpKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KVxuICAgICAgICBwcml2YXRlIF9hZGRDb21wb3VuZHMoZW50aXR5T2JqZWN0OkdhbWVPYmplY3QsIGNoaWxkcmVuOndkQ2IuQ29sbGVjdGlvbjxHYW1lT2JqZWN0PiwgYm9keTpDQU5OT04uQm9keSl7XG4gICAgICAgICAgICB2YXIgcG9zaXRpb24gPSBlbnRpdHlPYmplY3QudHJhbnNmb3JtLnBvc2l0aW9uLFxuICAgICAgICAgICAgICAgIHJvdGF0aW9uID0gZW50aXR5T2JqZWN0LnRyYW5zZm9ybS5yb3RhdGlvbjtcblxuICAgICAgICAgICAgY2hpbGRyZW4uZm9yRWFjaCgoY2hpbGQ6R2FtZU9iamVjdCkgPT4ge1xuICAgICAgICAgICAgICAgIGJvZHkuYWRkU2hhcGUoXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2NyZWF0ZVNoYXBlKGNoaWxkLmdldENvbXBvbmVudDxDb2xsaWRlcj4oQ29sbGlkZXIpLnNoYXBlKSxcbiAgICAgICAgICAgICAgICAgICAgQ2Fubm9uVXRpbHMuY29udmVydFRvQ2Fubm9uVmVjdG9yMyhjaGlsZC50cmFuc2Zvcm0ucG9zaXRpb24uY29weSgpLnN1Yihwb3NpdGlvbikpLFxuICAgICAgICAgICAgICAgICAgICBDYW5ub25VdGlscy5jb252ZXJ0VG9DYW5ub25RdWF0ZXJuaW9uKGNoaWxkLnRyYW5zZm9ybS5yb3RhdGlvbi5jb3B5KCkuc3ViKHJvdGF0aW9uKSlcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSwgdGhpcyk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbiIsIm1vZHVsZSB3ZCB7XG4gICAgZXhwb3J0IGNsYXNzIENhbm5vbkR5bmFtaWNCb2R5IGV4dGVuZHMgQ2Fubm9uQm9keSB7XG4gICAgICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlKHdvcmxkOkNBTk5PTi5Xb3JsZCwgZ2FtZU9iamVjdERhdGFMaXN0OkNhbm5vbkdhbWVPYmplY3REYXRhTGlzdCwgbWF0ZXJpYWxMaXN0OkNhbm5vbk1hdGVyaWFsTGlzdCkge1xuICAgICAgICBcdHZhciBvYmogPSBuZXcgdGhpcyh3b3JsZCwgZ2FtZU9iamVjdERhdGFMaXN0LCBtYXRlcmlhbExpc3QpO1xuXG4gICAgICAgIFx0cmV0dXJuIG9iajtcbiAgICAgICAgfVxuXG4gICAgICAgIHByb3RlY3RlZCBjcmVhdGVCb2R5KHtcbiAgICAgICAgICAgIG1hc3MsXG4gICAgICAgICAgICBsaW5lYXJEYW1waW5nLFxuICAgICAgICAgICAgYW5ndWxhckRhbXBpbmcsXG4gICAgICAgICAgICB2ZWxvY2l0eSxcbiAgICAgICAgICAgIGFuZ3VsYXJWZWxvY2l0eVxuICAgICAgICAgICAgfSk6Q0FOTk9OLkJvZHl7XG4gICAgICAgICAgICByZXR1cm4gbmV3IENBTk5PTi5Cb2R5KHtcbiAgICAgICAgICAgICAgICBtYXNzOiBtYXNzLFxuICAgICAgICAgICAgICAgIGxpbmVhckRhbXBpbmc6IGxpbmVhckRhbXBpbmcsXG4gICAgICAgICAgICAgICAgYW5ndWxhckRhbXBpbmc6IGFuZ3VsYXJEYW1waW5nLFxuICAgICAgICAgICAgICAgIHZlbG9jaXR5OiBDYW5ub25VdGlscy5jb252ZXJ0VG9DYW5ub25WZWN0b3IzKHZlbG9jaXR5KSxcbiAgICAgICAgICAgICAgICBhbmd1bGFyVmVsb2NpdHk6IENhbm5vblV0aWxzLmNvbnZlcnRUb0Nhbm5vblZlY3RvcjMoYW5ndWxhclZlbG9jaXR5KVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBwcm90ZWN0ZWQgYWZ0ZXJBZGRTaGFwZShib2R5OkNBTk5PTi5Cb2R5LCB7XG4gICAgICAgICAgICBpbXB1bHNlLFxuICAgICAgICAgICAgZm9yY2UsXG4gICAgICAgICAgICBoaXRQb2ludFxuICAgICAgICAgICAgfSk6dm9pZHtcbiAgICAgICAgICAgIGlmKGltcHVsc2UgJiYgaGl0UG9pbnQpe1xuICAgICAgICAgICAgICAgIGJvZHkuYXBwbHlJbXB1bHNlKENhbm5vblV0aWxzLmNvbnZlcnRUb0Nhbm5vblZlY3RvcjMoaW1wdWxzZSksIENhbm5vblV0aWxzLmNvbnZlcnRUb0Nhbm5vblZlY3RvcjMoaGl0UG9pbnQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKGZvcmNlICYmIGhpdFBvaW50KXtcbiAgICAgICAgICAgICAgICBib2R5LmFwcGx5Rm9yY2UoQ2Fubm9uVXRpbHMuY29udmVydFRvQ2Fubm9uVmVjdG9yMyhmb3JjZSksIENhbm5vblV0aWxzLmNvbnZlcnRUb0Nhbm5vblZlY3RvcjMoaGl0UG9pbnQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cblxuIiwibW9kdWxlIHdkIHtcbiAgICBleHBvcnQgY2xhc3MgQ2Fubm9uS2luZW1hdGljQm9keSBleHRlbmRzIENhbm5vbkJvZHkge1xuICAgICAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZSh3b3JsZDpDQU5OT04uV29ybGQsIGdhbWVPYmplY3REYXRhTGlzdDpDYW5ub25HYW1lT2JqZWN0RGF0YUxpc3QsIG1hdGVyaWFsTGlzdDpDYW5ub25NYXRlcmlhbExpc3QpIHtcbiAgICAgICAgICAgIHZhciBvYmogPSBuZXcgdGhpcyh3b3JsZCwgZ2FtZU9iamVjdERhdGFMaXN0LCBtYXRlcmlhbExpc3QpO1xuXG4gICAgICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJvdGVjdGVkIGNyZWF0ZUJvZHkoe1xuICAgICAgICAgICAgbWFzcyxcbiAgICAgICAgICAgIHZlbG9jaXR5LFxuICAgICAgICAgICAgYW5ndWxhclZlbG9jaXR5XG4gICAgICAgICAgICB9KTpDQU5OT04uQm9keXtcbiAgICAgICAgICAgIHJldHVybiBuZXcgQ0FOTk9OLkJvZHkoe1xuICAgICAgICAgICAgICAgIHR5cGU6IENBTk5PTi5Cb2R5LktJTkVNQVRJQyxcblxuICAgICAgICAgICAgICAgIG1hc3M6IG1hc3MsXG4gICAgICAgICAgICAgICAgdmVsb2NpdHk6IENhbm5vblV0aWxzLmNvbnZlcnRUb0Nhbm5vblZlY3RvcjModmVsb2NpdHkpLFxuICAgICAgICAgICAgICAgIGFuZ3VsYXJWZWxvY2l0eTogQ2Fubm9uVXRpbHMuY29udmVydFRvQ2Fubm9uVmVjdG9yMyhhbmd1bGFyVmVsb2NpdHkpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuIiwibW9kdWxlIHdkIHtcbiAgICBleHBvcnQgY2xhc3MgQ2Fubm9uU3RhdGljQm9keSBleHRlbmRzIENhbm5vbkJvZHkge1xuICAgICAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZSh3b3JsZDpDQU5OT04uV29ybGQsIGdhbWVPYmplY3REYXRhTGlzdDpDYW5ub25HYW1lT2JqZWN0RGF0YUxpc3QsIG1hdGVyaWFsTGlzdDpDYW5ub25NYXRlcmlhbExpc3QpIHtcbiAgICAgICAgICAgIHZhciBvYmogPSBuZXcgdGhpcyh3b3JsZCwgZ2FtZU9iamVjdERhdGFMaXN0LCBtYXRlcmlhbExpc3QpO1xuXG4gICAgICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJvdGVjdGVkIGNyZWF0ZUJvZHkoe1xuICAgICAgICAgICAgfSk6Q0FOTk9OLkJvZHl7XG4gICAgICAgICAgICByZXR1cm4gbmV3IENBTk5PTi5Cb2R5KHtcbiAgICAgICAgICAgICAgICBtYXNzOiAwXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuIiwibW9kdWxlIHdke1xuICAgIGV4cG9ydCBhYnN0cmFjdCBjbGFzcyBDYW5ub25Db25zdHJhaW50e1xuICAgICAgICBjb25zdHJ1Y3Rvcih3b3JsZDpDQU5OT04uV29ybGQsIGdhbWVPYmplY3REYXRhTGlzdDpDYW5ub25HYW1lT2JqZWN0RGF0YUxpc3QsIGNvbnN0cmFpbnREYXRhTGlzdDphbnkpIHtcbiAgICAgICAgICAgIHRoaXMud29ybGQgPSB3b3JsZDtcbiAgICAgICAgICAgIHRoaXMuZ2FtZU9iamVjdExpc3QgPSBnYW1lT2JqZWN0RGF0YUxpc3Q7XG4gICAgICAgICAgICB0aGlzLmNvbnN0cmFpbnREYXRhTGlzdCA9IGNvbnN0cmFpbnREYXRhTGlzdDtcbiAgICAgICAgfVxuXG4gICAgICAgIHByb3RlY3RlZCB3b3JsZDpDQU5OT04uV29ybGQgPSBudWxsO1xuICAgICAgICBwcm90ZWN0ZWQgZ2FtZU9iamVjdExpc3Q6Q2Fubm9uR2FtZU9iamVjdERhdGFMaXN0ID0gbnVsbDtcbiAgICAgICAgcHJvdGVjdGVkIGNvbnN0cmFpbnREYXRhTGlzdDphbnkgPSBudWxsO1xuXG4gICAgICAgIEByZXF1aXJlKGZ1bmN0aW9uKGVudGl0eU9iamVjdDpHYW1lT2JqZWN0LCBwb2ludFRvUG9pbnRDb25zdHJhaW50OlBvaW50VG9Qb2ludENvbnN0cmFpbnQpe1xuICAgICAgICAgICAgYXNzZXJ0KHRoaXMuZ2FtZU9iamVjdExpc3QuZmluZEJvZHlCeUdhbWVPYmplY3QoZW50aXR5T2JqZWN0KSAhPT0gbnVsbCwgTG9nLmluZm8uRlVOQ19TSE9VTEQoXCJhZGQgcmlnaWQgYm9keVwiKSk7XG4gICAgICAgICAgICBhc3NlcnQodGhpcy5maW5kQm9keShwb2ludFRvUG9pbnRDb25zdHJhaW50LmNvbm5lY3RlZEJvZHkpLCBMb2cuaW5mby5GVU5DX1NIT1VMRChcImFkZCBjb25uZWN0ZWRCb2R5XCIpKTtcbiAgICAgICAgfSlcbiAgICAgICAgcHVibGljIGFkZENvbnN0cmFpbnQoZW50aXR5T2JqZWN0OkdhbWVPYmplY3QsIHdvbmRlckNvbnN0cmFpbnQ6YW55KXtcbiAgICAgICAgICAgIHZhciBjb25zdHJhaW50ID0gbnVsbCxcbiAgICAgICAgICAgICAgICBib2R5OkNBTk5PTi5Cb2R5ID0gdGhpcy5nYW1lT2JqZWN0TGlzdC5maW5kQm9keUJ5R2FtZU9iamVjdChlbnRpdHlPYmplY3QpO1xuXG4gICAgICAgICAgICBjb25zdHJhaW50ID0gdGhpcy5jcmVhdGVDYW5ub25Db25zdHJhaW50KGJvZHksIHdvbmRlckNvbnN0cmFpbnQpO1xuXG4gICAgICAgICAgICB0aGlzLndvcmxkLmFkZENvbnN0cmFpbnQoY29uc3RyYWludCk7XG5cbiAgICAgICAgICAgIHRoaXMuYWRkVG9Db25zdHJhaW50RGF0YUxpc3QoZW50aXR5T2JqZWN0LCB3b25kZXJDb25zdHJhaW50LCBjb25zdHJhaW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByb3RlY3RlZCBhYnN0cmFjdCBjcmVhdGVDYW5ub25Db25zdHJhaW50KGJvZHk6Q0FOTk9OLkJvZHksIHdvbmRlckNvbnN0cmFpbnQ6UGh5c2ljc0NvbnN0cmFpbnQpOkNBTk5PTi5Db25zdHJhaW50O1xuICAgICAgICBwcm90ZWN0ZWQgYWJzdHJhY3QgYWRkVG9Db25zdHJhaW50RGF0YUxpc3QoZW50aXR5T2JqZWN0OkdhbWVPYmplY3QsIHdvbmRlckNvbnN0cmFpbnQ6UGh5c2ljc0NvbnN0cmFpbnQsIGNhbm5vbkNvbnN0cmFpbnQ6Q0FOTk9OLkNvbnN0cmFpbnQpOnZvaWQ7XG5cbiAgICAgICAgcHJvdGVjdGVkIGZpbmRCb2R5KHJpZ2lkQm9keTpSaWdpZEJvZHkpe1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2FtZU9iamVjdExpc3QuZmluZEJvZHlCeUdhbWVPYmplY3QocmlnaWRCb2R5LmVudGl0eU9iamVjdCk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJtb2R1bGUgd2R7XG4gICAgZXhwb3J0IGFic3RyYWN0IGNsYXNzIENhbm5vblNpbmdsZUNvbnN0cmFpbnQgZXh0ZW5kcyBDYW5ub25Db25zdHJhaW50e1xuICAgICAgICBwdWJsaWMgcmVtb3ZlQ29uc3RyYWludChlbnRpdHlPYmplY3Q6R2FtZU9iamVjdCl7XG4gICAgICAgICAgICB2YXIgY29uc3RyYWludCA9IHRoaXMuY29uc3RyYWludERhdGFMaXN0LmZpbmRDb25zdHJhaW50QnlHYW1lT2JqZWN0KGVudGl0eU9iamVjdCk7XG5cbiAgICAgICAgICAgIGlmKGNvbnN0cmFpbnQpe1xuICAgICAgICAgICAgICAgIHRoaXMud29ybGQucmVtb3ZlQ29uc3RyYWludChjb25zdHJhaW50KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5jb25zdHJhaW50RGF0YUxpc3QucmVtb3ZlKGVudGl0eU9iamVjdCk7XG4gICAgICAgIH1cblxuICAgICAgICBwcm90ZWN0ZWQgYWRkVG9Db25zdHJhaW50RGF0YUxpc3QoZW50aXR5T2JqZWN0OkdhbWVPYmplY3QsIHdvbmRlckNvbnN0cmFpbnQ6TG9ja0NvbnN0cmFpbnQsIGNhbm5vbkNvbnN0cmFpbnQ6Q0FOTk9OLkNvbnN0cmFpbnQpe1xuICAgICAgICAgICAgdGhpcy5jb25zdHJhaW50RGF0YUxpc3QuYWRkKGVudGl0eU9iamVjdCwgY2Fubm9uQ29uc3RyYWludCk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJtb2R1bGUgd2R7XG4gICAgZXhwb3J0IGNsYXNzIENhbm5vbkxvY2tDb25zdHJhaW50IGV4dGVuZHMgQ2Fubm9uU2luZ2xlQ29uc3RyYWludHtcbiAgICAgICAgcHVibGljIHN0YXRpYyBjcmVhdGUod29ybGQ6Q0FOTk9OLldvcmxkLCBnYW1lT2JqZWN0RGF0YUxpc3Q6Q2Fubm9uR2FtZU9iamVjdERhdGFMaXN0LCBjb25zdHJhaW50RGF0YUxpc3Q6Q2Fubm9uTG9ja0NvbnN0cmFpbnREYXRhTGlzdCkge1xuICAgICAgICBcdHZhciBvYmogPSBuZXcgdGhpcyh3b3JsZCwgZ2FtZU9iamVjdERhdGFMaXN0LCBjb25zdHJhaW50RGF0YUxpc3QpO1xuXG4gICAgICAgIFx0cmV0dXJuIG9iajtcbiAgICAgICAgfVxuXG4gICAgICAgIHByb3RlY3RlZCBjb25zdHJhaW50RGF0YUxpc3Q6Q2Fubm9uTG9ja0NvbnN0cmFpbnREYXRhTGlzdDtcblxuXG4gICAgICAgIHByb3RlY3RlZCBjcmVhdGVDYW5ub25Db25zdHJhaW50KGJvZHk6Q0FOTk9OLkJvZHksIGxvY2tDb25zdHJhaW50OkxvY2tDb25zdHJhaW50KXtcbiAgICAgICAgICAgIHZhciBjb25zdHJhaW50OkNBTk5PTi5Db25zdHJhaW50ID0gbnVsbCxcbiAgICAgICAgICAgICAgICBjb25uZWN0ZWRCb2R5OkNBTk5PTi5Cb2R5ID0gdGhpcy5maW5kQm9keShsb2NrQ29uc3RyYWludC5jb25uZWN0ZWRCb2R5KTtcblxuICAgICAgICAgICAgaWYobG9ja0NvbnN0cmFpbnQubWF4Rm9yY2Upe1xuICAgICAgICAgICAgICAgIGNvbnN0cmFpbnQgPSBuZXcgQ0FOTk9OLkxvY2tDb25zdHJhaW50KGJvZHksIGNvbm5lY3RlZEJvZHksIGxvY2tDb25zdHJhaW50Lm1heEZvcmNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICAgICAgY29uc3RyYWludCA9IG5ldyBDQU5OT04uTG9ja0NvbnN0cmFpbnQoYm9keSwgY29ubmVjdGVkQm9keSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBjb25zdHJhaW50O1xuICAgICAgICB9XG4gICAgfVxufVxuIiwibW9kdWxlIHdke1xuICAgIGV4cG9ydCBjbGFzcyBDYW5ub25Qb2ludFRvUG9pbnRDb25zdHJhaW50IGV4dGVuZHMgQ2Fubm9uQ29uc3RyYWludHtcbiAgICAgICAgcHVibGljIHN0YXRpYyBjcmVhdGUod29ybGQ6Q0FOTk9OLldvcmxkLCBnYW1lT2JqZWN0RGF0YUxpc3Q6Q2Fubm9uR2FtZU9iamVjdERhdGFMaXN0LCBjb25zdHJhaW50RGF0YUxpc3Q6Q2Fubm9uUG9pbnRUb1BvaW50Q29uc3RyYWludERhdGFMaXN0KSB7XG4gICAgICAgIFx0dmFyIG9iaiA9IG5ldyB0aGlzKHdvcmxkLCBnYW1lT2JqZWN0RGF0YUxpc3QsIGNvbnN0cmFpbnREYXRhTGlzdCk7XG5cbiAgICAgICAgXHRyZXR1cm4gb2JqO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJvdGVjdGVkIGNvbnN0cmFpbnREYXRhTGlzdDpDYW5ub25Qb2ludFRvUG9pbnRDb25zdHJhaW50RGF0YUxpc3Q7XG5cblxuICAgICAgICBwdWJsaWMgcmVtb3ZlQ29uc3RyYWludChwb2ludFRvUG9pbnRDb25zdHJhaW50OlBvaW50VG9Qb2ludENvbnN0cmFpbnQpe1xuICAgICAgICAgICAgdmFyIGNvbnN0cmFpbnQgPSB0aGlzLmNvbnN0cmFpbnREYXRhTGlzdC5maW5kQ2Fubm9uQ29uc3RyYWludEJ5UG9pbnRUb1BvaW50Q29uc3RyYWludChwb2ludFRvUG9pbnRDb25zdHJhaW50KTtcblxuICAgICAgICAgICAgaWYoY29uc3RyYWludCl7XG4gICAgICAgICAgICAgICAgdGhpcy53b3JsZC5yZW1vdmVDb25zdHJhaW50KGNvbnN0cmFpbnQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLmNvbnN0cmFpbnREYXRhTGlzdC5yZW1vdmUocG9pbnRUb1BvaW50Q29uc3RyYWludCk7XG4gICAgICAgIH1cblxuICAgICAgICBwcm90ZWN0ZWQgY3JlYXRlQ2Fubm9uQ29uc3RyYWludChib2R5OkNBTk5PTi5Cb2R5LCBwb2ludFRvUG9pbnRDb25zdHJhaW50OlBvaW50VG9Qb2ludENvbnN0cmFpbnQpe1xuICAgICAgICAgICAgdmFyIGNvbnN0cmFpbnQ6Q0FOTk9OLkNvbnN0cmFpbnQgPSBudWxsLFxuICAgICAgICAgICAgICAgIGNvbm5lY3RlZEJvZHk6Q0FOTk9OLkJvZHkgPSB0aGlzLmZpbmRCb2R5KHBvaW50VG9Qb2ludENvbnN0cmFpbnQuY29ubmVjdGVkQm9keSksXG4gICAgICAgICAgICAgICAgcGl2b3RBID0gQ2Fubm9uVXRpbHMuY29udmVydFRvQ2Fubm9uVmVjdG9yMyhwb2ludFRvUG9pbnRDb25zdHJhaW50LnBpdm90QSksXG4gICAgICAgICAgICAgICAgcGl2b3RCID0gQ2Fubm9uVXRpbHMuY29udmVydFRvQ2Fubm9uVmVjdG9yMyhwb2ludFRvUG9pbnRDb25zdHJhaW50LnBpdm90Qik7XG5cbiAgICAgICAgICAgIGlmKHBvaW50VG9Qb2ludENvbnN0cmFpbnQubWF4Rm9yY2Upe1xuICAgICAgICAgICAgICAgIGNvbnN0cmFpbnQgPSBuZXcgQ0FOTk9OLlBvaW50VG9Qb2ludENvbnN0cmFpbnQoYm9keSwgcGl2b3RBLCBjb25uZWN0ZWRCb2R5LCBwaXZvdEIsIHBvaW50VG9Qb2ludENvbnN0cmFpbnQubWF4Rm9yY2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICBjb25zdHJhaW50ID0gbmV3IENBTk5PTi5Qb2ludFRvUG9pbnRDb25zdHJhaW50KGJvZHksIHBpdm90QSwgY29ubmVjdGVkQm9keSwgcGl2b3RCKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGNvbnN0cmFpbnQ7XG4gICAgICAgIH1cblxuICAgICAgICBwcm90ZWN0ZWQgYWRkVG9Db25zdHJhaW50RGF0YUxpc3QoZW50aXR5T2JqZWN0OkdhbWVPYmplY3QsIHdvbmRlckNvbnN0cmFpbnQ6UG9pbnRUb1BvaW50Q29uc3RyYWludCwgY2Fubm9uQ29uc3RyYWludDpDQU5OT04uQ29uc3RyYWludCl7XG4gICAgICAgICAgICB0aGlzLmNvbnN0cmFpbnREYXRhTGlzdC5hZGQoZW50aXR5T2JqZWN0LCB3b25kZXJDb25zdHJhaW50LCBjYW5ub25Db25zdHJhaW50KTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsIm1vZHVsZSB3ZHtcbiAgICBleHBvcnQgY2xhc3MgQ2Fubm9uRGlzdGFuY2VDb25zdHJhaW50IGV4dGVuZHMgQ2Fubm9uU2luZ2xlQ29uc3RyYWludHtcbiAgICAgICAgcHVibGljIHN0YXRpYyBjcmVhdGUod29ybGQ6Q0FOTk9OLldvcmxkLCBnYW1lT2JqZWN0RGF0YUxpc3Q6Q2Fubm9uR2FtZU9iamVjdERhdGFMaXN0LCBjb25zdHJhaW50RGF0YUxpc3Q6Q2Fubm9uRGlzdGFuY2VDb25zdHJhaW50RGF0YUxpc3QpIHtcbiAgICAgICAgXHR2YXIgb2JqID0gbmV3IHRoaXMod29ybGQsIGdhbWVPYmplY3REYXRhTGlzdCwgY29uc3RyYWludERhdGFMaXN0KTtcblxuICAgICAgICBcdHJldHVybiBvYmo7XG4gICAgICAgIH1cblxuICAgICAgICBwcm90ZWN0ZWQgY29uc3RyYWludERhdGFMaXN0OkNhbm5vbkRpc3RhbmNlQ29uc3RyYWludERhdGFMaXN0O1xuXG5cbiAgICAgICAgcHJvdGVjdGVkIGNyZWF0ZUNhbm5vbkNvbnN0cmFpbnQoYm9keTpDQU5OT04uQm9keSwgZGlzdGFuY2VDb25zdHJhaW50OkRpc3RhbmNlQ29uc3RyYWludCl7XG4gICAgICAgICAgICB2YXIgY29uc3RyYWludDpDQU5OT04uQ29uc3RyYWludCA9IG51bGwsXG4gICAgICAgICAgICAgICAgY29ubmVjdGVkQm9keTpDQU5OT04uQm9keSA9IHRoaXMuZmluZEJvZHkoZGlzdGFuY2VDb25zdHJhaW50LmNvbm5lY3RlZEJvZHkpO1xuXG4gICAgICAgICAgICBjb25zdHJhaW50ID0gbmV3IENBTk5PTi5EaXN0YW5jZUNvbnN0cmFpbnQoYm9keSwgY29ubmVjdGVkQm9keSwgZGlzdGFuY2VDb25zdHJhaW50LmRpc3RhbmNlICE9PSBudWxsID8gZGlzdGFuY2VDb25zdHJhaW50LmRpc3RhbmNlIDogdm9pZCAwLCBkaXN0YW5jZUNvbnN0cmFpbnQubWF4Rm9yY2UgIT09IG51bGwgPyBkaXN0YW5jZUNvbnN0cmFpbnQubWF4Rm9yY2UgOiB2b2lkIDApO1xuXG4gICAgICAgICAgICByZXR1cm4gY29uc3RyYWludDtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsIm1vZHVsZSB3ZHtcbiAgICBleHBvcnQgY2xhc3MgQ2Fubm9uSGluZ2VDb25zdHJhaW50IGV4dGVuZHMgQ2Fubm9uU2luZ2xlQ29uc3RyYWludHtcbiAgICAgICAgcHVibGljIHN0YXRpYyBjcmVhdGUod29ybGQ6Q0FOTk9OLldvcmxkLCBnYW1lT2JqZWN0RGF0YUxpc3Q6Q2Fubm9uR2FtZU9iamVjdERhdGFMaXN0LCBjb25zdHJhaW50RGF0YUxpc3Q6Q2Fubm9uSGluZ2VDb25zdHJhaW50RGF0YUxpc3QpIHtcbiAgICAgICAgXHR2YXIgb2JqID0gbmV3IHRoaXMod29ybGQsIGdhbWVPYmplY3REYXRhTGlzdCwgY29uc3RyYWludERhdGFMaXN0KTtcblxuICAgICAgICBcdHJldHVybiBvYmo7XG4gICAgICAgIH1cblxuICAgICAgICBwcm90ZWN0ZWQgY29uc3RyYWludERhdGFMaXN0OkNhbm5vbkhpbmdlQ29uc3RyYWludERhdGFMaXN0O1xuXG5cbiAgICAgICAgcHJvdGVjdGVkIGNyZWF0ZUNhbm5vbkNvbnN0cmFpbnQoYm9keTpDQU5OT04uQm9keSwgaGluZ2VDb25zdHJhaW50OkhpbmdlQ29uc3RyYWludCl7XG4gICAgICAgICAgICB2YXIgY29uc3RyYWludDpDQU5OT04uQ29uc3RyYWludCA9IG51bGwsXG4gICAgICAgICAgICAgICAgY29ubmVjdGVkQm9keTpDQU5OT04uQm9keSA9IHRoaXMuZmluZEJvZHkoaGluZ2VDb25zdHJhaW50LmNvbm5lY3RlZEJvZHkpLFxuICAgICAgICAgICAgICAgIHBpdm90QSA9IENhbm5vblV0aWxzLmNvbnZlcnRUb0Nhbm5vblZlY3RvcjMoaGluZ2VDb25zdHJhaW50LnBpdm90QSksXG4gICAgICAgICAgICAgICAgYXhpc0EgPSBDYW5ub25VdGlscy5jb252ZXJ0VG9DYW5ub25WZWN0b3IzKGhpbmdlQ29uc3RyYWludC5heGlzQSksXG4gICAgICAgICAgICAgICAgcGl2b3RCID0gQ2Fubm9uVXRpbHMuY29udmVydFRvQ2Fubm9uVmVjdG9yMyhoaW5nZUNvbnN0cmFpbnQucGl2b3RCKSxcbiAgICAgICAgICAgICAgICBheGlzQiA9IENhbm5vblV0aWxzLmNvbnZlcnRUb0Nhbm5vblZlY3RvcjMoaGluZ2VDb25zdHJhaW50LmF4aXNCKSxcbiAgICAgICAgICAgICAgICBvcHRpb25zOmFueSA9IHt9O1xuXG4gICAgICAgICAgICBpZihoaW5nZUNvbnN0cmFpbnQucGl2b3RBKXtcbiAgICAgICAgICAgICAgICBvcHRpb25zLnBpdm90QSA9IHBpdm90QTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKGhpbmdlQ29uc3RyYWludC5heGlzQSl7XG4gICAgICAgICAgICAgICAgb3B0aW9ucy5heGlzQSA9IGF4aXNBO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYoaGluZ2VDb25zdHJhaW50LnBpdm90Qil7XG4gICAgICAgICAgICAgICAgb3B0aW9ucy5waXZvdEIgPSBwaXZvdEI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZihoaW5nZUNvbnN0cmFpbnQuYXhpc0Ipe1xuICAgICAgICAgICAgICAgIG9wdGlvbnMuYXhpc0IgPSBheGlzQjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKGhpbmdlQ29uc3RyYWludC5tYXhGb3JjZSl7XG4gICAgICAgICAgICAgICAgb3B0aW9ucy5tYXhGb3JjZSA9IGhpbmdlQ29uc3RyYWludC5tYXhGb3JjZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3RyYWludCA9IG5ldyBDQU5OT04uSGluZ2VDb25zdHJhaW50KGJvZHksIGNvbm5lY3RlZEJvZHksIG9wdGlvbnMpO1xuXG4gICAgICAgICAgICByZXR1cm4gY29uc3RyYWludDtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsIm1vZHVsZSB3ZCB7XG4gICAgZXhwb3J0IGFic3RyYWN0IGNsYXNzIExpZ2h0IGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgICAgICAgZ2V0IHBvc2l0aW9uKCl7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lbnRpdHlPYmplY3QudHJhbnNmb3JtLnBvc2l0aW9uO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfc2hhZG93TWFwV2lkdGg6bnVtYmVyID0gbnVsbDtcbiAgICAgICAgZ2V0IHNoYWRvd01hcFdpZHRoKCl7XG4gICAgICAgICAgICB2YXIgbWF4Q3ViZW1hcFRleHR1cmVTaXplID0gR1BVRGV0ZWN0b3IuZ2V0SW5zdGFuY2UoKS5tYXhDdWJlbWFwVGV4dHVyZVNpemU7XG5cbiAgICAgICAgICAgIGlmKCF0aGlzLl9zaGFkb3dNYXBXaWR0aCB8fCB0aGlzLl9zaGFkb3dNYXBXaWR0aCA+IG1heEN1YmVtYXBUZXh0dXJlU2l6ZSl7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1heEN1YmVtYXBUZXh0dXJlU2l6ZVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fc2hhZG93TWFwV2lkdGg7XG4gICAgICAgIH1cbiAgICAgICAgc2V0IHNoYWRvd01hcFdpZHRoKHNoYWRvd01hcFdpZHRoOm51bWJlcil7XG4gICAgICAgICAgICB0aGlzLl9zaGFkb3dNYXBXaWR0aCA9IHNoYWRvd01hcFdpZHRoO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfc2hhZG93TWFwSGVpZ2h0Om51bWJlciA9IG51bGw7XG4gICAgICAgIGdldCBzaGFkb3dNYXBIZWlnaHQoKXtcbiAgICAgICAgICAgIHZhciBtYXhDdWJlbWFwVGV4dHVyZVNpemUgPSBHUFVEZXRlY3Rvci5nZXRJbnN0YW5jZSgpLm1heEN1YmVtYXBUZXh0dXJlU2l6ZTtcblxuICAgICAgICAgICAgaWYoIXRoaXMuX3NoYWRvd01hcEhlaWdodCB8fCB0aGlzLl9zaGFkb3dNYXBIZWlnaHQgPiBtYXhDdWJlbWFwVGV4dHVyZVNpemUpe1xuICAgICAgICAgICAgICAgIHJldHVybiBtYXhDdWJlbWFwVGV4dHVyZVNpemVcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3NoYWRvd01hcEhlaWdodDtcbiAgICAgICAgfVxuICAgICAgICBzZXQgc2hhZG93TWFwSGVpZ2h0KHNoYWRvd01hcEhlaWdodDpudW1iZXIpe1xuICAgICAgICAgICAgdGhpcy5fc2hhZG93TWFwSGVpZ2h0ID0gc2hhZG93TWFwSGVpZ2h0O1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGVudGl0eU9iamVjdDpHYW1lT2JqZWN0O1xuXG4gICAgICAgIHB1YmxpYyBjb2xvcjpDb2xvciA9IENvbG9yLmNyZWF0ZShcIiNmZmZmZmZcIik7XG4gICAgICAgIHB1YmxpYyBjYXN0U2hhZG93OmJvb2xlYW4gPSBmYWxzZTtcbiAgICAgICAgcHVibGljIHNoYWRvd0NhbWVyYU5lYXI6bnVtYmVyID0gMC4xO1xuICAgICAgICBwdWJsaWMgc2hhZG93Q2FtZXJhRmFyOm51bWJlciA9IDUwMDA7XG4gICAgICAgIHB1YmxpYyBzaGFkb3dCaWFzOm51bWJlciA9IFNoYWRlckNodW5rLk5VTEw7XG4gICAgICAgIHB1YmxpYyBzaGFkb3dEYXJrbmVzczpudW1iZXIgPSAwO1xuICAgICAgICBwdWJsaWMgc2hhZG93TWFwOklTaGFkb3dNYXBUZXh0dXJlID0gbnVsbDtcbiAgICAgICAgcHVibGljIHNoYWRvd01hcFJlbmRlcmVyOlJlbmRlclRhcmdldFJlbmRlcmVyID0gbnVsbDtcbiAgICB9XG59XG5cbiIsIm1vZHVsZSB3ZHtcbiAgICBleHBvcnQgY2xhc3MgQW1iaWVudExpZ2h0IGV4dGVuZHMgTGlnaHR7XG4gICAgICAgIHB1YmxpYyBzdGF0aWMgdHlwZTpzdHJpbmcgPSBcImFtYmllbnRMaWdodFwiO1xuXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlKCkge1xuICAgICAgICAgICAgdmFyIG9iaiA9IG5ldyB0aGlzKCk7XG5cbiAgICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbiIsIm1vZHVsZSB3ZHtcbiAgICBleHBvcnQgYWJzdHJhY3QgY2xhc3MgU291cmNlTGlnaHQgZXh0ZW5kcyBMaWdodHtcbiAgICAgICAgcHJpdmF0ZSBfYmVmb3JlSW5pdFN1YnNjcmlwdGlvbjp3ZEZycC5JRGlzcG9zYWJsZSA9IG51bGw7XG5cbiAgICAgICAgcHVibGljIGluaXRXaGVuQ3JlYXRlKCl7XG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICAgICAgICAgIHRoaXMuX2JlZm9yZUluaXRTdWJzY3JpcHRpb24gPSBFdmVudE1hbmFnZXIuZnJvbUV2ZW50KDxhbnk+RW5naW5lRXZlbnQuQkVGT1JFX0dBTUVPQkpFQ1RfSU5JVClcbiAgICAgICAgICAgICAgICAuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5iZWZvcmVJbml0SGFuZGxlcigpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGRpc3Bvc2UoKXtcbiAgICAgICAgICAgIHRoaXMuc2hhZG93TWFwICYmIHRoaXMuc2hhZG93TWFwLmRpc3Bvc2UoKTtcblxuICAgICAgICAgICAgRGlyZWN0b3IuZ2V0SW5zdGFuY2UoKS5zY2VuZS5yZW1vdmVSZW5kZXJUYXJnZXRSZW5kZXJlcih0aGlzLnNoYWRvd01hcFJlbmRlcmVyKTtcblxuICAgICAgICAgICAgdGhpcy5fYmVmb3JlSW5pdFN1YnNjcmlwdGlvbiAmJiB0aGlzLl9iZWZvcmVJbml0U3Vic2NyaXB0aW9uLmRpc3Bvc2UoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIEBleGVjT25seU9uY2UoXCJfaXNCZWZvcmVJbml0XCIpXG4gICAgICAgIHByb3RlY3RlZCBiZWZvcmVJbml0SGFuZGxlcigpe1xuICAgICAgICAgICAgaWYodGhpcy5jYXN0U2hhZG93KXtcbiAgICAgICAgICAgICAgICB0aGlzLnNoYWRvd01hcCA9IHRoaXMuY3JlYXRlU2hhZG93TWFwKCk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLnNoYWRvd01hcFJlbmRlcmVyID0gdGhpcy5jcmVhdGVTaGFkb3dNYXBSZW5kZXJlcigpO1xuICAgICAgICAgICAgICAgIERpcmVjdG9yLmdldEluc3RhbmNlKCkuc2NlbmUuYWRkUmVuZGVyVGFyZ2V0UmVuZGVyZXIodGhpcy5zaGFkb3dNYXBSZW5kZXJlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBwcm90ZWN0ZWQgYWJzdHJhY3QgY3JlYXRlU2hhZG93TWFwKCk7XG4gICAgICAgIHByb3RlY3RlZCBhYnN0cmFjdCBjcmVhdGVTaGFkb3dNYXBSZW5kZXJlcigpO1xuICAgIH1cbn1cblxuIiwibW9kdWxlIHdke1xuICAgIGV4cG9ydCBjbGFzcyBEaXJlY3Rpb25MaWdodCBleHRlbmRzIFNvdXJjZUxpZ2h0e1xuICAgICAgICBwdWJsaWMgc3RhdGljIHR5cGU6c3RyaW5nID0gXCJkaXJlY3Rpb25MaWdodFwiO1xuICAgICAgICBwdWJsaWMgc3RhdGljIGRlZmF1bHRQb3NpdGlvbjpWZWN0b3IzID0gVmVjdG9yMy5jcmVhdGUoMCwgMCwgMSk7XG5cbiAgICAgICAgcHVibGljIHN0YXRpYyBjcmVhdGUoKSB7XG4gICAgICAgICAgICB2YXIgb2JqID0gbmV3IHRoaXMoKTtcblxuICAgICAgICAgICAgb2JqLmluaXRXaGVuQ3JlYXRlKCk7XG5cbiAgICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9zaGFkb3dSZW5kZXJMaXN0OndkQ2IuQ29sbGVjdGlvbjxHYW1lT2JqZWN0PiA9IG51bGw7XG4gICAgICAgIGdldCBzaGFkb3dSZW5kZXJMaXN0KCl7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fc2hhZG93UmVuZGVyTGlzdDtcbiAgICAgICAgfVxuICAgICAgICBAcmVxdWlyZVNldHRlcihmdW5jdGlvbihzaGFkb3dSZW5kZXJMaXN0OmFueSl7XG4gICAgICAgICAgICBhc3NlcnQoSnVkZ2VVdGlscy5pc0FycmF5KHNoYWRvd1JlbmRlckxpc3QpLCBMb2cuZXJyb3IodHJ1ZSwgTG9nLmluZm8uRlVOQ19NVVNUX0JFKFwic2hhZG93UmVuZGVyTGlzdFwiLCBcImFycmF5XCIpKSk7XG4gICAgICAgIH0pXG4gICAgICAgIHNldCBzaGFkb3dSZW5kZXJMaXN0KHNoYWRvd1JlbmRlckxpc3Q6YW55KSB7XG4gICAgICAgICAgICB0aGlzLl9zaGFkb3dSZW5kZXJMaXN0ID0gd2RDYi5Db2xsZWN0aW9uLmNyZWF0ZTxHYW1lT2JqZWN0PihzaGFkb3dSZW5kZXJMaXN0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBpbnRlbnNpdHk6bnVtYmVyID0gMTtcbiAgICAgICAgLy90b2RvIGV4dHJhY3QgU2hhZG93IGNsYXNzP1xuICAgICAgICBwdWJsaWMgc2hhZG93Q2FtZXJhTGVmdDpudW1iZXIgPSAtMTAwMDtcbiAgICAgICAgcHVibGljIHNoYWRvd0NhbWVyYVJpZ2h0Om51bWJlciA9IDEwMDA7XG4gICAgICAgIHB1YmxpYyBzaGFkb3dDYW1lcmFUb3A6bnVtYmVyID0gMTAwMDtcbiAgICAgICAgcHVibGljIHNoYWRvd0NhbWVyYUJvdHRvbTpudW1iZXIgPSAtMTAwMDtcblxuICAgICAgICBwdWJsaWMgc2hhZG93TWFwOlR3b0RTaGFkb3dNYXBUZXh0dXJlO1xuICAgICAgICBwdWJsaWMgc2hhZG93TWFwUmVuZGVyZXI6VHdvRFNoYWRvd01hcFJlbmRlclRhcmdldFJlbmRlcmVyO1xuXG4gICAgICAgIHByb3RlY3RlZCBjcmVhdGVTaGFkb3dNYXAoKXtcbiAgICAgICAgICAgIHJldHVybiBUd29EU2hhZG93TWFwVGV4dHVyZS5jcmVhdGUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByb3RlY3RlZCBjcmVhdGVTaGFkb3dNYXBSZW5kZXJlcigpe1xuICAgICAgICAgICAgcmV0dXJuIFR3b0RTaGFkb3dNYXBSZW5kZXJUYXJnZXRSZW5kZXJlci5jcmVhdGUodGhpcyk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbiIsIm1vZHVsZSB3ZHtcbiAgICBleHBvcnQgY2xhc3MgUG9pbnRMaWdodCBleHRlbmRzIFNvdXJjZUxpZ2h0e1xuICAgICAgICBwdWJsaWMgc3RhdGljIHR5cGU6c3RyaW5nID0gXCJwb2ludExpZ2h0XCI7XG5cbiAgICAgICAgcHVibGljIHN0YXRpYyBjcmVhdGUoKSB7XG4gICAgICAgICAgICB2YXIgb2JqID0gbmV3IHRoaXMoKTtcblxuICAgICAgICAgICAgb2JqLmluaXRXaGVuQ3JlYXRlKCk7XG5cbiAgICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9yYW5nZUxldmVsOm51bWJlciA9IG51bGw7XG4gICAgICAgIGdldCByYW5nZUxldmVsKCl7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fcmFuZ2VMZXZlbDtcbiAgICAgICAgfVxuICAgICAgICBzZXQgcmFuZ2VMZXZlbChyYW5nZUxldmVsOm51bWJlcil7XG4gICAgICAgICAgICB0aGlzLl9yYW5nZUxldmVsID0gcmFuZ2VMZXZlbDtcbiAgICAgICAgICAgIHRoaXMuX2F0dGVudWF0aW9uLnJhbmdlTGV2ZWwgPSB0aGlzLl9yYW5nZUxldmVsO1xuICAgICAgICB9XG5cbiAgICAgICAgZ2V0IHJhbmdlKCl7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fYXR0ZW51YXRpb24ucmFuZ2U7XG4gICAgICAgIH1cblxuICAgICAgICBnZXQgY29uc3RhbnQoKXtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9hdHRlbnVhdGlvbi5jb25zdGFudDtcbiAgICAgICAgfVxuXG4gICAgICAgIGdldCBsaW5lYXIoKXtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9hdHRlbnVhdGlvbi5saW5lYXI7XG4gICAgICAgIH1cblxuICAgICAgICBnZXQgcXVhZHJhdGljKCl7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fYXR0ZW51YXRpb24ucXVhZHJhdGljO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfc2hhZG93UmVuZGVyTGlzdDp3ZENiLkhhc2g8d2RDYi5Db2xsZWN0aW9uPEdhbWVPYmplY3Q+PiA9IHdkQ2IuSGFzaC5jcmVhdGU8d2RDYi5Db2xsZWN0aW9uPEdhbWVPYmplY3Q+PigpO1xuICAgICAgICBnZXQgc2hhZG93UmVuZGVyTGlzdCgpe1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3NoYWRvd1JlbmRlckxpc3Q7XG4gICAgICAgIH1cbiAgICAgICAgQHJlcXVpcmVTZXR0ZXIoZnVuY3Rpb24oc2hhZG93UmVuZGVyTGlzdDphbnkpe1xuICAgICAgICAgICAgYXNzZXJ0KEp1ZGdlVXRpbHMuaXNEaXJlY3RPYmplY3Qoc2hhZG93UmVuZGVyTGlzdCksIExvZy5lcnJvcih0cnVlLCBMb2cuaW5mby5GVU5DX01VU1RfQkUoXCJzaGFkb3dSZW5kZXJMaXN0XCIsIFwib2JqZWN0XCIpKSk7XG5cbiAgICAgICAgICAgIGZvcihsZXQgZGlyZWN0aW9uIGluIHNoYWRvd1JlbmRlckxpc3Qpe1xuICAgICAgICAgICAgICAgIGlmKHNoYWRvd1JlbmRlckxpc3QuaGFzT3duUHJvcGVydHkoZGlyZWN0aW9uKSl7XG4gICAgICAgICAgICAgICAgICAgIGxldCBsaXN0ID0gc2hhZG93UmVuZGVyTGlzdFtkaXJlY3Rpb25dO1xuXG4gICAgICAgICAgICAgICAgICAgIGFzc2VydChKdWRnZVV0aWxzLmlzQXJyYXkobGlzdCkgfHwgc2hhZG93UmVuZGVyTGlzdCBpbnN0YW5jZW9mIHdkQ2IuSGFzaCwgTG9nLmVycm9yKHRydWUsIExvZy5pbmZvLkZVTkNfTVVTVF9CRShcInJlbmRlckxpc3QgaW4gZWFjaCBkaXJlY3Rpb24gb2Ygc2hhZG93UmVuZGVyTGlzdFwiLCBcImFycmF5XCIpKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0pXG4gICAgICAgIHNldCBzaGFkb3dSZW5kZXJMaXN0KHNoYWRvd1JlbmRlckxpc3Q6YW55KSB7XG4gICAgICAgICAgICBzaGFkb3dSZW5kZXJMaXN0ID0gPHtcbiAgICAgICAgICAgICAgICBweDpBcnJheTxHYW1lT2JqZWN0PixcbiAgICAgICAgICAgICAgICBueDpBcnJheTxHYW1lT2JqZWN0PixcbiAgICAgICAgICAgICAgICBweTpBcnJheTxHYW1lT2JqZWN0PixcbiAgICAgICAgICAgICAgICBueTpBcnJheTxHYW1lT2JqZWN0PixcbiAgICAgICAgICAgICAgICBwejpBcnJheTxHYW1lT2JqZWN0PixcbiAgICAgICAgICAgICAgICBuejpBcnJheTxHYW1lT2JqZWN0PlxuICAgICAgICAgICAgfT4gc2hhZG93UmVuZGVyTGlzdDtcblxuICAgICAgICAgICAgZm9yKGxldCBkaXJlY3Rpb24gaW4gc2hhZG93UmVuZGVyTGlzdCl7XG4gICAgICAgICAgICAgICAgaWYoc2hhZG93UmVuZGVyTGlzdC5oYXNPd25Qcm9wZXJ0eShkaXJlY3Rpb24pKXtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGxpc3QgPSBzaGFkb3dSZW5kZXJMaXN0W2RpcmVjdGlvbl07XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2hhZG93UmVuZGVyTGlzdC5hZGRDaGlsZChkaXJlY3Rpb24sIHdkQ2IuQ29sbGVjdGlvbi5jcmVhdGU8R2FtZU9iamVjdD4obGlzdCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBpbnRlbnNpdHk6bnVtYmVyID0gMTtcblxuICAgICAgICBwdWJsaWMgc2hhZG93TWFwOkN1YmVtYXBTaGFkb3dNYXBUZXh0dXJlO1xuICAgICAgICBwdWJsaWMgc2hhZG93TWFwUmVuZGVyZXI6Q3ViZW1hcFNoYWRvd01hcFJlbmRlclRhcmdldFJlbmRlcmVyO1xuXG4gICAgICAgIHByaXZhdGUgX2F0dGVudWF0aW9uOkF0dGVudWF0aW9uID0gQXR0ZW51YXRpb24uY3JlYXRlKCk7XG5cbiAgICAgICAgcHJvdGVjdGVkIGNyZWF0ZVNoYWRvd01hcCgpe1xuICAgICAgICAgICAgcmV0dXJuIEN1YmVtYXBTaGFkb3dNYXBUZXh0dXJlLmNyZWF0ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJvdGVjdGVkIGNyZWF0ZVNoYWRvd01hcFJlbmRlcmVyKCl7XG4gICAgICAgICAgICByZXR1cm4gQ3ViZW1hcFNoYWRvd01hcFJlbmRlclRhcmdldFJlbmRlcmVyLmNyZWF0ZSh0aGlzKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsIm1vZHVsZSB3ZCB7XG4gICAgZXhwb3J0IGNsYXNzIEF0dGVudWF0aW9uIHtcbiAgICAgICAgcHVibGljIHN0YXRpYyBjcmVhdGUoKSB7XG4gICAgICAgICAgICB2YXIgb2JqID0gbmV3IHRoaXMoKTtcblxuICAgICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgfVxuXG4gICAgICAgIGdldCBjb25zdGFudCgpIHtcbiAgICAgICAgICAgIHJldHVybiAxLjA7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9yYW5nZTpudW1iZXIgPSBudWxsO1xuICAgICAgICBnZXQgcmFuZ2UoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fcmFuZ2U7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9saW5lYXI6bnVtYmVyID0gbnVsbDtcbiAgICAgICAgZ2V0IGxpbmVhcigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9saW5lYXI7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9xdWFkcmF0aWM6bnVtYmVyID0gbnVsbDtcbiAgICAgICAgZ2V0IHF1YWRyYXRpYygpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9xdWFkcmF0aWM7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9yYW5nZUxldmVsOm51bWJlciA9IDA7XG4gICAgICAgIGdldCByYW5nZUxldmVsKCl7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fcmFuZ2VMZXZlbDtcbiAgICAgICAgfVxuICAgICAgICBzZXQgcmFuZ2VMZXZlbChyYW5nZUxldmVsOm51bWJlcil7XG4gICAgICAgICAgICB0aGlzLl9yYW5nZUxldmVsID0gcmFuZ2VMZXZlbDtcblxuICAgICAgICAgICAgdGhpcy5zZXRCeVJhbmdlTGV2ZWwoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBzZXRCeVJhbmdlTGV2ZWwoKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHRoaXMuX3JhbmdlTGV2ZWwpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3JhbmdlID0gNztcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbGluZWFyID0gMC43O1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9xdWFkcmF0aWMgPSAxLjg7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmFuZ2UgPSAxMztcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbGluZWFyID0gMC4zNTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcXVhZHJhdGljID0gMC40NDtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9yYW5nZSA9IDIwO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9saW5lYXIgPSAwLjIyO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9xdWFkcmF0aWMgPSAwLjIwO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3JhbmdlID0gMzI7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2xpbmVhciA9IDAuMTQ7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3F1YWRyYXRpYyA9IDAuMDc7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmFuZ2UgPSA1MDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbGluZWFyID0gMC4wOTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcXVhZHJhdGljID0gMC4wMzI7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmFuZ2UgPSA2NTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbGluZWFyID0gMC4wNztcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcXVhZHJhdGljID0gMC4wMTc7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmFuZ2UgPSAxMDA7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2xpbmVhciA9IDAuMDQ1O1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9xdWFkcmF0aWMgPSAwLjAwNzU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNzpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmFuZ2UgPSAxNjA7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2xpbmVhciA9IDAuMDI3O1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9xdWFkcmF0aWMgPSAwLjAwMjg7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgODpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmFuZ2UgPSAyMDA7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2xpbmVhciA9IDAuMDIyO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9xdWFkcmF0aWMgPSAwLjAwMTk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgOTpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmFuZ2UgPSAzMjU7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2xpbmVhciA9IDAuMDE0O1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9xdWFkcmF0aWMgPSAwLjAwMDc7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMTA6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3JhbmdlID0gNjAwO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9saW5lYXIgPSAwLjAwNztcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcXVhZHJhdGljID0gMC4wMDAyO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDExOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9yYW5nZSA9IDMyNTA7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2xpbmVhciA9IDAuMDAxNDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcXVhZHJhdGljID0gMC4wMDAwMDc7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQgOlxuICAgICAgICAgICAgICAgICAgICBMb2cuZXJyb3IodHJ1ZSwgXCJvdmVyIGxpZ2h0IHJhbmdlXCIpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbiIsIm1vZHVsZSB3ZCB7XG4gICAgZXhwb3J0IGFic3RyYWN0IGNsYXNzIFVJIGV4dGVuZHMgQ29tcG9uZW50e1xuICAgICAgICBAdmlydHVhbFxuICAgICAgICBnZXQgZGlydHkoKXtcbiAgICAgICAgICAgIHZhciByZW5kZXJlciA9IHRoaXMuZ2V0VUlSZW5kZXJlcigpO1xuXG4gICAgICAgICAgICBpZighcmVuZGVyZXIpe1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gcmVuZGVyZXIuZGlydHk7XG4gICAgICAgIH1cbiAgICAgICAgc2V0IGRpcnR5KGRpcnR5OmJvb2xlYW4pe1xuICAgICAgICAgICAgaWYoZGlydHkpe1xuICAgICAgICAgICAgICAgIHZhciByZW5kZXJlciA9IHRoaXMuZ2V0VUlSZW5kZXJlcigpO1xuXG4gICAgICAgICAgICAgICAgaWYoIXJlbmRlcmVyKXtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJlbmRlcmVyLmRpcnR5ID0gZGlydHk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBnZXQgd2lkdGgoKXtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmVudGl0eU9iamVjdCA/IHRoaXMuZW50aXR5T2JqZWN0LnRyYW5zZm9ybS53aWR0aCA6IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBnZXQgaGVpZ2h0KCl7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lbnRpdHlPYmplY3QgPyB0aGlzLmVudGl0eU9iamVjdC50cmFuc2Zvcm0uaGVpZ2h0IDogbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBlbnRpdHlPYmplY3Q6VUlPYmplY3Q7XG4gICAgICAgIHB1YmxpYyBjb250ZXh0OkNhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCA9IG51bGw7XG5cblxuICAgICAgICBwdWJsaWMgaW5pdCgpe1xuICAgICAgICAgICAgdGhpcy5jb250ZXh0ID0gdGhpcy5nZXRDb250ZXh0KCk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgYWRkVG9PYmplY3QoZW50aXR5T2JqZWN0OlVJT2JqZWN0KXtcbiAgICAgICAgICAgIHN1cGVyLmFkZFRvT2JqZWN0KGVudGl0eU9iamVjdCk7XG5cbiAgICAgICAgICAgIGVudGl0eU9iamVjdC51aU1hbmFnZXIuYWRkQ2hpbGQodGhpcyk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgcmVtb3ZlRnJvbU9iamVjdChlbnRpdHlPYmplY3Q6VUlPYmplY3Qpe1xuICAgICAgICAgICAgc3VwZXIucmVtb3ZlRnJvbU9iamVjdChlbnRpdHlPYmplY3QpO1xuXG4gICAgICAgICAgICBlbnRpdHlPYmplY3QudWlNYW5hZ2VyLnJlbW92ZUNoaWxkKHRoaXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgQHJlcXVpcmUoZnVuY3Rpb24oZWxhcHNlZFRpbWU6bnVtYmVyKXtcbiAgICAgICAgICAgIGFzc2VydCh0aGlzLmNvbnRleHQgIT09IG51bGwsIExvZy5pbmZvLkZVTkNfU0hPVUxEKFwic2V0IGNvbnRleHRcIikpO1xuICAgICAgICB9KVxuICAgICAgICBwdWJsaWMgdXBkYXRlKGVsYXBzZWRUaW1lOm51bWJlcil7XG4gICAgICAgICAgICB2YXIgY29udGV4dCA9IHRoaXMuY29udGV4dDtcblxuICAgICAgICAgICAgaWYodGhpcy5zaG91bGROb3RVcGRhdGUoKSl7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb250ZXh0LnNhdmUoKTtcblxuICAgICAgICAgICAgdGhpcy5fc2V0Q2FudmFzVHJhbnNmb3JtRm9yUm90YXRpb24oKTtcblxuICAgICAgICAgICAgdGhpcy5kcmF3KGVsYXBzZWRUaW1lKTtcblxuICAgICAgICAgICAgY29udGV4dC5yZXN0b3JlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBAdmlydHVhbFxuICAgICAgICBwcm90ZWN0ZWQgZHJhdyhlbGFwc2VkVGltZTpudW1iZXIpe1xuICAgICAgICB9XG5cbiAgICAgICAgQHZpcnR1YWxcbiAgICAgICAgcHJvdGVjdGVkIHNob3VsZE5vdFVwZGF0ZSgpe1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJvdGVjdGVkIGdldENvbnRleHQoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRVSVJlbmRlcmVyKCkuY29udGV4dDtcbiAgICAgICAgfVxuXG4gICAgICAgIHByb3RlY3RlZCBnZXRDYW52YXMoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRVSVJlbmRlcmVyKCkuY2FudmFzO1xuICAgICAgICB9XG5cbiAgICAgICAgLy9AcmVxdWlyZShmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vICAgIGFzc2VydCh0aGlzLmVudGl0eU9iamVjdC5oYXNDb21wb25lbnQoVUlSZW5kZXJlciksIExvZy5pbmZvLkZVTkNfU0hPVUxEKFwiZW50aXR5T2JqZWN0XCIsIFwiY29udGFpbiBVSVJlbmRlcmVyXCIpKVxuICAgICAgICAvL30pXG4gICAgICAgIHByb3RlY3RlZCBnZXRVSVJlbmRlcmVyKCl7XG4gICAgICAgICAgICBpZighdGhpcy5lbnRpdHlPYmplY3Qpe1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lbnRpdHlPYmplY3QuZ2V0Q29tcG9uZW50PFVJUmVuZGVyZXI+KFVJUmVuZGVyZXIpO1xuICAgICAgICB9XG5cblxuICAgICAgICBwcm90ZWN0ZWQgZHJhd0luQ2VudGVyUG9pbnQoY29udGV4dDpDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQsIHNvdXJjZTphbnksIHBvc2l0aW9uOlZlY3RvcjIsIHdpZHRoOm51bWJlciwgaGVpZ2h0Om51bWJlcik7XG4gICAgICAgIHByb3RlY3RlZCBkcmF3SW5DZW50ZXJQb2ludChjb250ZXh0OkNhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCwgc291cmNlOmFueSwgc3g6bnVtYmVyLCBzeTpudW1iZXIsIHN3Om51bWJlciwgc2g6bnVtYmVyLCBwb3NpdGlvbjpWZWN0b3IyLCB3aWR0aDpudW1iZXIsIGhlaWdodDpudW1iZXIpO1xuXG4gICAgICAgIHByb3RlY3RlZCBkcmF3SW5DZW50ZXJQb2ludCguLi5hcmdzKXtcbiAgICAgICAgICAgIHZhciBjb250ZXh0OkNhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCA9IGFyZ3NbMF0sXG4gICAgICAgICAgICAgICAgc291cmNlOmFueSA9IGFyZ3NbMV07XG5cbiAgICAgICAgICAgIGlmKGFyZ3MubGVuZ3RoID09PSA1KXtcbiAgICAgICAgICAgICAgICBsZXQgcG9zaXRpb246VmVjdG9yMiA9IGFyZ3NbMl0sXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOm51bWJlciA9IGFyZ3NbM10sXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDpudW1iZXIgPSBhcmdzWzRdO1xuXG4gICAgICAgICAgICAgICAgY29udGV4dC5kcmF3SW1hZ2UoXG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZSxcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb24ueCAtIHdpZHRoIC8gMiwgcG9zaXRpb24ueSAtIGhlaWdodCAvIDIsXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoLFxuICAgICAgICAgICAgICAgICAgICBoZWlnaHRcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZihhcmdzLmxlbmd0aCA9PT0gOSl7XG4gICAgICAgICAgICAgICAgbGV0IHN4Om51bWJlciA9IGFyZ3NbMl0sXG4gICAgICAgICAgICAgICAgICAgIHN5Om51bWJlciA9IGFyZ3NbM10sXG4gICAgICAgICAgICAgICAgICAgIHN3Om51bWJlciA9IGFyZ3NbNF0sXG4gICAgICAgICAgICAgICAgICAgIHNoOm51bWJlciA9IGFyZ3NbNV0sXG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOlZlY3RvcjIgPSBhcmdzWzZdLFxuICAgICAgICAgICAgICAgICAgICB3aWR0aDpudW1iZXIgPSBhcmdzWzddLFxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6bnVtYmVyID0gYXJnc1s4XTtcblxuICAgICAgICAgICAgICAgIGNvbnRleHQuZHJhd0ltYWdlKFxuICAgICAgICAgICAgICAgICAgICBzb3VyY2UsIHN4LCBzeSwgc3csIHNoLFxuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbi54IC0gd2lkdGggLyAyLCBwb3NpdGlvbi55IC0gaGVpZ2h0IC8gMixcbiAgICAgICAgICAgICAgICAgICAgd2lkdGgsXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9zZXRDYW52YXNUcmFuc2Zvcm1Gb3JSb3RhdGlvbigpe1xuICAgICAgICAgICAgdmFyIG1hdHJpeCA9IHRoaXMuZW50aXR5T2JqZWN0LnRyYW5zZm9ybS5yb3RhdGlvbk1hdHJpeDtcblxuICAgICAgICAgICAgdGhpcy5jb250ZXh0LnNldFRyYW5zZm9ybShtYXRyaXguYSwgbWF0cml4LmIsIG1hdHJpeC5jLCBtYXRyaXguZCwgbWF0cml4LnR4LCBtYXRyaXgudHkpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4iLCJtb2R1bGUgd2R7XG4gICAgZXhwb3J0IGVudW0gRm9udFhBbGlnbm1lbnR7XG4gICAgICAgIExFRlQsXG4gICAgICAgIENFTlRFUixcbiAgICAgICAgUklHSFRcbiAgICB9XG59XG4iLCJtb2R1bGUgd2R7XG4gICAgZXhwb3J0IGVudW0gRm9udFlBbGlnbm1lbnR7XG4gICAgICAgIFRPUCxcbiAgICAgICAgTUlERExFLFxuICAgICAgICBCT1RUT01cbiAgICB9XG59XG4iLCJtb2R1bGUgd2R7XG4gICAgZXhwb3J0IGVudW0gRm9udERpbWVuc2lvbntcbiAgICAgICAgQVVUTyA9IDxhbnk+XCJhdXRvXCJcbiAgICB9XG59XG4iLCJtb2R1bGUgd2Qge1xuICAgIGV4cG9ydCBhYnN0cmFjdCBjbGFzcyBGb250IGV4dGVuZHMgVUkge1xuICAgICAgICBwcm90ZWN0ZWQgbmVlZEZvcm1hdDpib29sZWFuID0gZmFsc2U7XG5cbiAgICAgICAgcHJpdmF0ZSBfaXNGaXJzdFVwZGF0ZTpib29sZWFuID0gdHJ1ZTtcbiAgICAgICAgcHJpdmF0ZSBfc2l6ZUNoYW5nZUV2ZW50U3Vic2NyaXB0aW9uOndkRnJwLklEaXNwb3NhYmxlID0gbnVsbDtcblxuICAgICAgICBwdWJsaWMgaW5pdCgpIHtcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgICAgICAgICAgc3VwZXIuaW5pdCgpO1xuXG4gICAgICAgICAgICB0aGlzLl9zaXplQ2hhbmdlRXZlbnRTdWJzY3JpcHRpb24gPSBFdmVudE1hbmFnZXIuZnJvbUV2ZW50KHRoaXMuZW50aXR5T2JqZWN0LCA8YW55PkVuZ2luZUV2ZW50LlVJX1dJRFRIX0NIQU5HRSlcbiAgICAgICAgICAgICAgICAubWVyZ2UoRXZlbnRNYW5hZ2VyLmZyb21FdmVudCh0aGlzLmVudGl0eU9iamVjdCwgPGFueT5FbmdpbmVFdmVudC5VSV9IRUlHSFRfQ0hBTkdFKSlcbiAgICAgICAgICAgICAgICAuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5kaXJ0eSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYubmVlZEZvcm1hdCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgZGlzcG9zZSgpe1xuICAgICAgICAgICAgaWYodGhpcy5fc2l6ZUNoYW5nZUV2ZW50U3Vic2NyaXB0aW9uKXtcbiAgICAgICAgICAgICAgICB0aGlzLl9zaXplQ2hhbmdlRXZlbnRTdWJzY3JpcHRpb24uZGlzcG9zZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHVwZGF0ZShlbGFwc2VkVGltZTpudW1iZXIpe1xuICAgICAgICAgICAgaWYoIXRoaXMuX2lzRmlyc3RVcGRhdGUpe1xuICAgICAgICAgICAgICAgIGlmKHRoaXMubmVlZEZvcm1hdCl7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVGb3JtYXQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgIHRoaXMuX2lzRmlyc3RVcGRhdGUgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5uZWVkRm9ybWF0ID0gZmFsc2U7XG5cbiAgICAgICAgICAgIHN1cGVyLnVwZGF0ZShlbGFwc2VkVGltZSk7XG4gICAgICAgIH1cblxuICAgICAgICBAdmlydHVhbFxuICAgICAgICBwcm90ZWN0ZWQgcmVGb3JtYXQoKXtcbiAgICAgICAgfVxuXG4gICAgICAgIHByb3RlY3RlZCBnZXRMZWZ0Q29ybmVyUG9zaXRpb24oKXtcbiAgICAgICAgICAgIHZhciB0cmFuc2Zvcm0gPSB0aGlzLmVudGl0eU9iamVjdC50cmFuc2Zvcm0sXG4gICAgICAgICAgICAgICAgcG9zaXRpb24gPSB0cmFuc2Zvcm0ucG9zaXRpb247XG5cbiAgICAgICAgICAgIHJldHVybiBWZWN0b3IyLmNyZWF0ZShwb3NpdGlvbi54IC0gdHJhbnNmb3JtLndpZHRoIC8gMiwgcG9zaXRpb24ueSAtIHRyYW5zZm9ybS5oZWlnaHQgLyAyKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuIiwibW9kdWxlIHdkIHtcbiAgICBjb25zdCBXT1JEX1JFWCA9IC8oW2EtekEtWjAtOV0rfFxcUykvLFxuICAgICAgICBGSVJTVF9FTkdMSVNIX09SX05VTSA9IC9eW2EtekEtWjAtOV0vLFxuICAgICAgICBMQVNUX0VOR0xJU0hfT1JfTlVNID0gL1thLXpBLVowLTldKyQvLFxuICAgICAgICBMQVNUX0lOVkFMSURfQ0hBUiA9IC9cXHMrJC87XG5cbiAgICAvL3RvZG8gbm93IG9ubHkgc3VwcG9ydCBFbmdsaXNoLCBuZWVkIHN1cHBvcnQgbW9yZSBsYW5ndWFnZXMgbGlrZSBGcmVuY2gsR2VybWFuXG4gICAgZXhwb3J0IGNsYXNzIFBsYWluRm9udCBleHRlbmRzIEZvbnQge1xuICAgICAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZSgpIHtcbiAgICAgICAgICAgIHZhciBvYmogPSBuZXcgdGhpcygpO1xuXG4gICAgICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfdGV4dDpzdHJpbmcgPSBcIlwiO1xuICAgICAgICBnZXQgdGV4dCgpe1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3RleHQ7XG4gICAgICAgIH1cbiAgICAgICAgc2V0IHRleHQodGV4dDpzdHJpbmcpe1xuICAgICAgICAgICAgaWYodGV4dCAhPT0gdGhpcy5fdGV4dCl7XG4gICAgICAgICAgICAgICAgdGhpcy5fdGV4dCA9IHRleHQ7XG5cbiAgICAgICAgICAgICAgICB0aGlzLmRpcnR5ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLm5lZWRGb3JtYXQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfZm9udFNpemU6bnVtYmVyID0gMTA7XG4gICAgICAgIGdldCBmb250U2l6ZSgpe1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2ZvbnRTaXplO1xuICAgICAgICB9XG4gICAgICAgIHNldCBmb250U2l6ZShmb250U2l6ZTpudW1iZXIpe1xuICAgICAgICAgICAgaWYoZm9udFNpemUgIT09IHRoaXMuX2ZvbnRTaXplKXtcbiAgICAgICAgICAgICAgICB0aGlzLl9mb250U2l6ZSA9IGZvbnRTaXplO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5kaXJ0eSA9IHRydWU7XG4gICAgICAgICAgICAgICAgdGhpcy5uZWVkRm9ybWF0ID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX2ZvbnRGYW1pbHk6c3RyaW5nID0gXCJzYW5zLXNlcmlmXCI7XG4gICAgICAgIGdldCBmb250RmFtaWx5KCl7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZm9udEZhbWlseTtcbiAgICAgICAgfVxuICAgICAgICBzZXQgZm9udEZhbWlseShmb250RmFtaWx5OnN0cmluZyl7XG4gICAgICAgICAgICBpZihmb250RmFtaWx5ICE9PSB0aGlzLl9mb250RmFtaWx5KXtcbiAgICAgICAgICAgICAgICB0aGlzLl9mb250RmFtaWx5ID0gZm9udEZhbWlseTtcblxuICAgICAgICAgICAgICAgIHRoaXMuZGlydHkgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRoaXMubmVlZEZvcm1hdCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF94QWxpZ25tZW50OkZvbnRYQWxpZ25tZW50ID0gRm9udFhBbGlnbm1lbnQuTEVGVDtcbiAgICAgICAgZ2V0IHhBbGlnbm1lbnQoKXtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl94QWxpZ25tZW50O1xuICAgICAgICB9XG4gICAgICAgIHNldCB4QWxpZ25tZW50KHhBbGlnbm1lbnQ6Rm9udFhBbGlnbm1lbnQpe1xuICAgICAgICAgICAgaWYoeEFsaWdubWVudCAhPT0gdGhpcy5feEFsaWdubWVudCl7XG4gICAgICAgICAgICAgICAgdGhpcy5feEFsaWdubWVudCA9IHhBbGlnbm1lbnQ7XG5cbiAgICAgICAgICAgICAgICB0aGlzLmRpcnR5ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLm5lZWRGb3JtYXQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfeUFsaWdubWVudDpGb250WUFsaWdubWVudCA9IEZvbnRZQWxpZ25tZW50LlRPUDtcbiAgICAgICAgZ2V0IHlBbGlnbm1lbnQoKXtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl95QWxpZ25tZW50O1xuICAgICAgICB9XG4gICAgICAgIHNldCB5QWxpZ25tZW50KHlBbGlnbm1lbnQ6Rm9udFlBbGlnbm1lbnQpe1xuICAgICAgICAgICAgaWYoeUFsaWdubWVudCAhPT0gdGhpcy5feUFsaWdubWVudCl7XG4gICAgICAgICAgICAgICAgdGhpcy5feUFsaWdubWVudCA9IHlBbGlnbm1lbnQ7XG5cbiAgICAgICAgICAgICAgICB0aGlzLmRpcnR5ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLm5lZWRGb3JtYXQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfZmlsbEVuYWJsZWQ6Ym9vbGVhbiA9IHRydWU7XG4gICAgICAgIHByaXZhdGUgX2ZpbGxTdHlsZTpzdHJpbmcgPSBcInJnYmEoMCwgMCwgMCwgMSlcIjtcbiAgICAgICAgcHJpdmF0ZSBfc3Ryb2tlRW5hYmxlZDpib29sZWFuID0gZmFsc2U7XG4gICAgICAgIHByaXZhdGUgX3N0cm9rZVN0eWxlOnN0cmluZyA9IG51bGw7XG4gICAgICAgIHByaXZhdGUgX3N0cm9rZVNpemU6bnVtYmVyID0gbnVsbDtcbiAgICAgICAgcHJpdmF0ZSBfZm9udENsaWVudEhlaWdodENhY2hlOndkQ2IuSGFzaDxudW1iZXI+ID0gd2RDYi5IYXNoLmNyZWF0ZTxudW1iZXI+KCk7XG4gICAgICAgIHByaXZhdGUgX2xpbmVIZWlnaHQ6bnVtYmVyID0gbnVsbDtcbiAgICAgICAgcHJpdmF0ZSBfc3RyQXJyOkFycmF5PHN0cmluZz4gPSBbXTtcblxuICAgICAgICBwdWJsaWMgaW5pdCgpIHtcbiAgICAgICAgICAgIHN1cGVyLmluaXQoKTtcblxuICAgICAgICAgICAgdGhpcy5fZm9ybWF0VGV4dCgpO1xuICAgICAgICAgICAgdGhpcy5fbGluZUhlaWdodCA9IHRoaXMuX2dldERlZmF1bHRMaW5lSGVpZ2h0KCk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgc2V0RmlsbFN0eWxlKGZpbGxTdHlsZTpzdHJpbmcpIHtcbiAgICAgICAgICAgIHRoaXMuX2ZpbGxTdHlsZSA9IGZpbGxTdHlsZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBlbmFibGVTdHJva2Uoc3Ryb2tlU3R5bGU6c3RyaW5nLCBzdHJva2VTaXplOm51bWJlcikge1xuICAgICAgICAgICAgdGhpcy5fc3Ryb2tlRW5hYmxlZCA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLl9maWxsRW5hYmxlZCA9IGZhbHNlO1xuXG4gICAgICAgICAgICB0aGlzLl9zdHJva2VTdHlsZSA9IHN0cm9rZVN0eWxlO1xuICAgICAgICAgICAgdGhpcy5fc3Ryb2tlU2l6ZSA9IHN0cm9rZVNpemU7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgZW5hYmxlRmlsbChmaWxsU3R5bGU6c3RyaW5nKSB7XG4gICAgICAgICAgICB0aGlzLl9maWxsRW5hYmxlZCA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLl9zdHJva2VFbmFibGVkID0gZmFsc2U7XG5cbiAgICAgICAgICAgIHRoaXMuX2ZpbGxTdHlsZSA9IGZpbGxTdHlsZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBzZXRMaW5lSGVpZ2h0KGxpbmVIZWlnaHQ6bnVtYmVyKSB7XG4gICAgICAgICAgICB0aGlzLl9saW5lSGVpZ2h0ID0gbGluZUhlaWdodDtcbiAgICAgICAgfVxuXG4gICAgICAgIHByb3RlY3RlZCByZUZvcm1hdCgpe1xuICAgICAgICAgICAgdGhpcy5fZm9ybWF0VGV4dCgpO1xuICAgICAgICAgICAgdGhpcy5fbGluZUhlaWdodCA9IHRoaXMuX2dldERlZmF1bHRMaW5lSGVpZ2h0KCk7XG4gICAgICAgIH1cblxuICAgICAgICBwcm90ZWN0ZWQgZHJhdygpe1xuICAgICAgICAgICAgdmFyIGNvbnRleHQgPSB0aGlzLmNvbnRleHQ7XG5cbiAgICAgICAgICAgIGNvbnRleHQuZm9udCA9IGAke3RoaXMuZm9udFNpemV9cHggJyR7dGhpcy5mb250RmFtaWx5fSdgO1xuXG4gICAgICAgICAgICBjb250ZXh0LnRleHRCYXNlbGluZSA9IFwidG9wXCI7XG4gICAgICAgICAgICBjb250ZXh0LnRleHRBbGlnbiA9IFwic3RhcnRcIjtcblxuICAgICAgICAgICAgaWYgKHRoaXMuX3N0ckFyci5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZHJhd011bHRpTGluZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZHJhd1NpbmdsZUxpbmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX2Zvcm1hdFRleHQoKSB7XG4gICAgICAgICAgICB2YXIgbWF4V2lkdGggPSB0aGlzLndpZHRoO1xuXG4gICAgICAgICAgICB0aGlzLl90cmltU3RyKCk7XG5cbiAgICAgICAgICAgIGlmIChtYXhXaWR0aCAhPT0gMCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3N0ckFyciA9IHRoaXMuX3RleHQuc3BsaXQoJ1xcbicpO1xuXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9zdHJBcnIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHRleHQgPSB0aGlzLl9zdHJBcnJbaV0sXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGxXaWR0aCA9IHRoaXMuX21lYXN1cmUodGV4dCk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGFsbFdpZHRoID4gbWF4V2lkdGggJiYgdGV4dC5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9mb3JtYXRNdWx0aUxpbmUoaSwgdGV4dCwgYWxsV2lkdGgsIG1heFdpZHRoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX3RyaW1TdHIoKSB7XG4gICAgICAgICAgICB0aGlzLl90ZXh0ID0gdGhpcy5fdGV4dC5yZXBsYWNlKExBU1RfSU5WQUxJRF9DSEFSLCBcIlwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX2Zvcm1hdE11bHRpTGluZShpOm51bWJlciwgdGV4dDpzdHJpbmcsIGFsbFdpZHRoOm51bWJlciwgbWF4V2lkdGg6bnVtYmVyKSB7XG4gICAgICAgICAgICBjb25zdCBMT09QX01BWF9OVU0gPSAxMDA7XG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXMsXG4gICAgICAgICAgICAgICAgcHJlVGV4dCA9IG51bGwsXG4gICAgICAgICAgICAgICAgdHJ1bmNhdGlvblBvaW50SW5kZXggPSB0ZXh0Lmxlbmd0aCAqICggbWF4V2lkdGggLyBhbGxXaWR0aCApIHwgMCxcbiAgICAgICAgICAgICAgICBuZXh0VGV4dCA9IHRleHQuc3Vic3RyKHRydW5jYXRpb25Qb2ludEluZGV4KSxcbiAgICAgICAgICAgICAgICBsb29wSW5kZXggPSAwLFxuICAgICAgICAgICAgICAgIHdpZHRoID0gYWxsV2lkdGggLSB0aGlzLl9tZWFzdXJlKG5leHRUZXh0KSxcbiAgICAgICAgICAgICAgICBwdXNoTnVtID0gMDtcblxuXG4gICAgICAgICAgICB2YXIgdHJ1bmNhdGUgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgLyohIHRydW5jYXRlIHN0cmluZyBieSB0aGUgbWF4V2lkdGggLyB3aWR0aCByYXRpb1xuICAgICAgICAgICAgICAgIGlmIHN0cmluZyBzdGlsbCBleGNlZWQgbWF4V2lkdGgsIHRydW5jYXRlIHdpdGggdGhlIHNhbWUgcmF0aW8gcmVjdXJzaXZlXG5cbiAgICAgICAgICAgICAgICBhZnRlciBsb29wLCB0cnVuY2F0aW9uUG9pbnRJbmRleCB3aWxsIDw9IHRoZSB0cnVlIG9uZVxuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIHdoaWxlICh3aWR0aCA+IG1heFdpZHRoICYmIGxvb3BJbmRleCA8IExPT1BfTUFYX05VTSkge1xuICAgICAgICAgICAgICAgICAgICB0cnVuY2F0aW9uUG9pbnRJbmRleCAqPSBtYXhXaWR0aCAvIHdpZHRoO1xuICAgICAgICAgICAgICAgICAgICB0cnVuY2F0aW9uUG9pbnRJbmRleCA9IE1hdGguZmxvb3IodHJ1bmNhdGlvblBvaW50SW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICBuZXh0VGV4dCA9IHRleHQuc3Vic3RyKHRydW5jYXRpb25Qb2ludEluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgd2lkdGggPSBhbGxXaWR0aCAtIHRoaXMuX21lYXN1cmUobmV4dFRleHQpO1xuICAgICAgICAgICAgICAgICAgICBsb29wSW5kZXggPSBsb29wSW5kZXggKyAxO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGxvb3BJbmRleCA9IDA7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBmaW5kVHJ1bmNhdGlvblBvaW50ID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIC8qISBmaW5kIHRoZSB0cnVuY2F0aW9uIHBvaW50IHRvIGdldCB0aGUgdHJ1ZSB0cnVuY2F0aW9uUG9pbnRJbmRleFxuICAgICAgICAgICAgICAgIHN0ZXAgYnkgd29yZChpZiBpdCdzIGNoaW5lc2UsIHRoZSBzdGVwIHdpbGwgYmUgMSlcbiAgICAgICAgICAgICAgICBhZnRlciBsb29wLCB0cnVuY2F0aW9uUG9pbnRJbmRleCB3aWxsIGJlIHRoZSBpbmRleCBvZiBsYXN0IGNoYXIgb2YgdGhlIHdvcmQgd2hpY2ggZXhjZWVkIG1heFdpZHRoXG4gICAgICAgICAgICAgICAgICovXG5cbiAgICAgICAgICAgICAgICB3aGlsZSAod2lkdGggPCBtYXhXaWR0aCAmJiBsb29wSW5kZXggPCBMT09QX01BWF9OVU0pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5leHRUZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgZXhlYyA9IFdPUkRfUkVYLmV4ZWMobmV4dFRleHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcHVzaE51bSA9IGV4ZWMgPyBleGVjWzBdLmxlbmd0aCA6IDE7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB0cnVuY2F0aW9uUG9pbnRJbmRleCA9IHRydW5jYXRpb25Qb2ludEluZGV4ICsgcHVzaE51bTtcbiAgICAgICAgICAgICAgICAgICAgbmV4dFRleHQgPSB0ZXh0LnN1YnN0cih0cnVuY2F0aW9uUG9pbnRJbmRleCk7XG4gICAgICAgICAgICAgICAgICAgIHdpZHRoID0gYWxsV2lkdGggLSB0aGlzLl9tZWFzdXJlKG5leHRUZXh0KTtcbiAgICAgICAgICAgICAgICAgICAgbG9vcEluZGV4ID0gbG9vcEluZGV4ICsgMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBoYW5kbGVUcnVuY2F0aW9uUG9pbnRJbmRleCA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICAvKiFcbiAgICAgICAgICAgICAgICBzaG91bGRuJ3QgdHJ1bmNhdGUgdGhlIHdvcmRcbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICBpZiAoRklSU1RfRU5HTElTSF9PUl9OVU0udGVzdChuZXh0VGV4dCkpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHByZVRleHQgPSB0ZXh0LnN1YnN0cigwLCB0cnVuY2F0aW9uUG9pbnRJbmRleCksXG4gICAgICAgICAgICAgICAgICAgICAgICBwRXhlYyA9IExBU1RfRU5HTElTSF9PUl9OVU0uZXhlYyhwcmVUZXh0KTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAocEV4ZWMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRydW5jYXRpb25Qb2ludEluZGV4ID0gdHJ1bmNhdGlvblBvaW50SW5kZXggLSBwRXhlY1swXS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRydW5jYXRpb25Qb2ludEluZGV4ID0gdHJ1bmNhdGlvblBvaW50SW5kZXggLSBwdXNoTnVtO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICh0cnVuY2F0aW9uUG9pbnRJbmRleCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICB0cnVuY2F0aW9uUG9pbnRJbmRleCA9IDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgc2V0U3RyaW5nID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIG5leHRUZXh0ID0gdGV4dC5zdWJzdHIodHJ1bmNhdGlvblBvaW50SW5kZXgpO1xuICAgICAgICAgICAgICAgIHByZVRleHQgPSB0ZXh0LnN1YnN0cigwLCB0cnVuY2F0aW9uUG9pbnRJbmRleCk7XG5cblxuICAgICAgICAgICAgICAgIHNlbGYuX3N0ckFycltpXSA9IG5leHRUZXh0O1xuICAgICAgICAgICAgICAgIHNlbGYuX3N0ckFyci5zcGxpY2UoaSwgMCwgcHJlVGV4dCk7XG4gICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgdHJ1bmNhdGUoKTtcbiAgICAgICAgICAgIGZpbmRUcnVuY2F0aW9uUG9pbnQoKTtcbiAgICAgICAgICAgIGhhbmRsZVRydW5jYXRpb25Qb2ludEluZGV4KCk7XG4gICAgICAgICAgICBzZXRTdHJpbmcoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX21lYXN1cmUodGV4dCkge1xuICAgICAgICAgICAgdmFyIGNvbnRleHQgPSB0aGlzLmNvbnRleHQ7XG5cbiAgICAgICAgICAgIGNvbnRleHQuZm9udCA9IGAke3RoaXMuZm9udFNpemV9cHggJyR7dGhpcy5mb250RmFtaWx5fSdgO1xuXG4gICAgICAgICAgICByZXR1cm4gY29udGV4dC5tZWFzdXJlVGV4dCh0ZXh0KS53aWR0aDtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX2dldERlZmF1bHRMaW5lSGVpZ2h0KCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NvbXB1dGVMaW5lSGVpZ2h0KFwibm9ybWFsXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfY29tcHV0ZUxpbmVIZWlnaHQobGluZUhlaWdodCkge1xuICAgICAgICAgICAgdmFyIGRpdiA9IHdkQ2IuRG9tUXVlcnkuY3JlYXRlKFwiPGRpdj48L2Rpdj5cIiksXG4gICAgICAgICAgICAgICAgZG9tID0gZGl2LmdldCgwKSxcbiAgICAgICAgICAgICAgICByZXN1bHRMaW5lSGVpZ2h0ID0gbnVsbDtcblxuICAgICAgICAgICAgZG9tLnN0eWxlLmNzc1RleHQgPSBgXG4gICAgICAgICAgICAgZm9udC1mYW1pbHk6ICR7dGhpcy5mb250RmFtaWx5fTtcbiAgICAgICAgICAgICBmb250LXNpemU6ICR7dGhpcy5mb250U2l6ZX1weDtcbiAgICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgICAgICAgbGVmdDogLTEwMHB4O1xuICAgICAgICAgICAgIHRvcDogLTEwMHB4O1xuICAgICAgICAgICAgIGxpbmUtaGVpZ2h0OiAke2xpbmVIZWlnaHR9O1xuICAgICAgICAgICAgIGA7XG5cbiAgICAgICAgICAgIGRpdi5wcmVwZW5kVG8oXCJib2R5XCIpO1xuXG4gICAgICAgICAgICBkb20uaW5uZXJIVE1MID0gXCJhYmMhXCI7XG5cbiAgICAgICAgICAgIHJlc3VsdExpbmVIZWlnaHQgPSBkb20uY2xpZW50SGVpZ2h0O1xuXG4gICAgICAgICAgICBkaXYucmVtb3ZlKCk7XG5cbiAgICAgICAgICAgIHJldHVybiByZXN1bHRMaW5lSGVpZ2h0O1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfZ2V0Rm9udENsaWVudEhlaWdodCgpIHtcbiAgICAgICAgICAgIHZhciBmb250U2l6ZSA9IHRoaXMuZm9udFNpemUsXG4gICAgICAgICAgICAgICAgZm9udE5hbWUgPSB0aGlzLmZvbnRGYW1pbHksXG4gICAgICAgICAgICAgICAga2V5ID0gYCR7Zm9udFNpemV9LiR7Zm9udE5hbWV9YCxcbiAgICAgICAgICAgICAgICBjYWNoZUhlaWdodCA9IHRoaXMuX2ZvbnRDbGllbnRIZWlnaHRDYWNoZS5nZXRDaGlsZChrZXkpLFxuICAgICAgICAgICAgICAgIGhlaWdodCA9IG51bGw7XG5cbiAgICAgICAgICAgIGlmIChjYWNoZUhlaWdodCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjYWNoZUhlaWdodDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaGVpZ2h0ID0gdGhpcy5fY29tcHV0ZUxpbmVIZWlnaHQoMSk7XG4gICAgICAgICAgICB0aGlzLl9mb250Q2xpZW50SGVpZ2h0Q2FjaGUuYWRkQ2hpbGQoa2V5LCBoZWlnaHQpO1xuXG4gICAgICAgICAgICByZXR1cm4gaGVpZ2h0O1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfZHJhd011bHRpTGluZSgpe1xuICAgICAgICAgICAgdmFyIGNvbnRleHQgPSB0aGlzLmNvbnRleHQsXG4gICAgICAgICAgICAgICAgLy9wb3NpdGlvbiA9IHRoaXMuZ2V0Q2FudmFzUG9zaXRpb24oKSxcbiAgICAgICAgICAgICAgICBwb3NpdGlvbiA9IHRoaXMuZ2V0TGVmdENvcm5lclBvc2l0aW9uKCksXG4gICAgICAgICAgICAgICAgeCA9IHBvc2l0aW9uLngsXG4gICAgICAgICAgICAgICAgeSA9IHBvc2l0aW9uLnksXG4gICAgICAgICAgICAgICAgbGluZUhlaWdodCA9IHRoaXMuX2xpbmVIZWlnaHQsXG4gICAgICAgICAgICAgICAgZm9udENsaWVudEhlaWdodCA9IHRoaXMuX2dldEZvbnRDbGllbnRIZWlnaHQoKSxcbiAgICAgICAgICAgICAgICBzZWxmID0gdGhpcyxcbiAgICAgICAgICAgICAgICBsaW5lQ291bnQgPSB0aGlzLl9zdHJBcnIubGVuZ3RoLFxuICAgICAgICAgICAgLyohIHRoZSBsaW5lSGVpZ2h0IG9mIGxhc3QgbGluZSBpcyB0aGUgaGVpZ2h0IG9mIGZvbnQgKi9cbiAgICAgICAgICAgICAgICBsaW5lVG90YWxIZWlnaHQgPSAobGluZUNvdW50IC0gMSkgKiBsaW5lSGVpZ2h0ICsgZm9udENsaWVudEhlaWdodDtcblxuICAgICAgICAgICAgaWYgKHNlbGYueUFsaWdubWVudCA9PT0gRm9udFlBbGlnbm1lbnQuQk9UVE9NKSB7XG4gICAgICAgICAgICAgICAgeSA9IHkgKyBzZWxmLmhlaWdodCAtIGxpbmVUb3RhbEhlaWdodDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHNlbGYueUFsaWdubWVudCA9PT0gRm9udFlBbGlnbm1lbnQuTUlERExFKSB7XG4gICAgICAgICAgICAgICAgeSA9IHkgKyAoc2VsZi5oZWlnaHQgLSBsaW5lVG90YWxIZWlnaHQpIC8gMjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZm9yIChsZXQgc3RyIG9mIHRoaXMuX3N0ckFycikge1xuICAgICAgICAgICAgICAgIGlmIChzZWxmLnhBbGlnbm1lbnQgPT09IEZvbnRYQWxpZ25tZW50LlJJR0hUKSB7XG4gICAgICAgICAgICAgICAgICAgIHggPSB4ICsgc2VsZi53aWR0aCAtIHNlbGYuX21lYXN1cmUoc3RyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoc2VsZi54QWxpZ25tZW50ID09IEZvbnRYQWxpZ25tZW50LkNFTlRFUikge1xuICAgICAgICAgICAgICAgICAgICB4ID0geCArIChzZWxmLndpZHRoIC0gc2VsZi5fbWVhc3VyZShzdHIpKSAvIDI7XG4gICAgICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgICAgICBpZiAoc2VsZi5fZmlsbEVuYWJsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dC5maWxsU3R5bGUgPSBzZWxmLl9maWxsU3R5bGU7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQuZmlsbFRleHQoc3RyLCB4LCB5KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoc2VsZi5fc3Ryb2tlRW5hYmxlZCkge1xuICAgICAgICAgICAgICAgICAgICBjb250ZXh0LnN0cm9rZVN0eWxlID0gc2VsZi5fc3Ryb2tlU3R5bGU7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQubGluZVdpZHRoID0gc2VsZi5fc3Ryb2tlU2l6ZTtcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dC5zdHJva2VUZXh0KHN0ciwgeCwgeSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgeCA9IHBvc2l0aW9uLng7XG4gICAgICAgICAgICAgICAgeSA9IHkgKyBsaW5lSGVpZ2h0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfZHJhd1NpbmdsZUxpbmUoKSB7XG4gICAgICAgICAgICB2YXIgY29udGV4dCA9IHRoaXMuY29udGV4dCxcbiAgICAgICAgICAgICAgICBwb3NpdGlvbiA9IHRoaXMuZ2V0TGVmdENvcm5lclBvc2l0aW9uKCksXG4gICAgICAgICAgICAgICAgeCA9IHBvc2l0aW9uLngsXG4gICAgICAgICAgICAgICAgeSA9IHBvc2l0aW9uLnksXG4gICAgICAgICAgICAgICAgZm9udENsaWVudEhlaWdodCA9IHRoaXMuX2dldEZvbnRDbGllbnRIZWlnaHQoKSxcbiAgICAgICAgICAgICAgICBzZWxmID0gdGhpcyxcbiAgICAgICAgICAgICAgICBsaW5lQ291bnQgPSAxLFxuICAgICAgICAgICAgLyohIHRoZSBsaW5lSGVpZ2h0IGlzIHRoZSBoZWlnaHQgb2YgZm9udCAqL1xuICAgICAgICAgICAgICAgIGxpbmVUb3RhbEhlaWdodCA9IGZvbnRDbGllbnRIZWlnaHQsXG4gICAgICAgICAgICAgICAgc3RyID0gdGhpcy5fc3RyQXJyWzBdO1xuXG4gICAgICAgICAgICBpZiAoc2VsZi55QWxpZ25tZW50ID09PSBGb250WUFsaWdubWVudC5CT1RUT00pIHtcbiAgICAgICAgICAgICAgICB5ID0geSArIHNlbGYuaGVpZ2h0IC0gbGluZVRvdGFsSGVpZ2h0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoc2VsZi55QWxpZ25tZW50ID09PSBGb250WUFsaWdubWVudC5NSURETEUpIHtcbiAgICAgICAgICAgICAgICB5ID0geSArIChzZWxmLmhlaWdodCAtIGxpbmVUb3RhbEhlaWdodCkgLyAyO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoc2VsZi54QWxpZ25tZW50ID09PSBGb250WEFsaWdubWVudC5SSUdIVCkge1xuICAgICAgICAgICAgICAgIHggPSB4ICsgc2VsZi53aWR0aCAtIHNlbGYuX21lYXN1cmUoc3RyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHNlbGYueEFsaWdubWVudCA9PSBGb250WEFsaWdubWVudC5DRU5URVIpIHtcbiAgICAgICAgICAgICAgICB4ID0geCArIChzZWxmLndpZHRoIC0gc2VsZi5fbWVhc3VyZShzdHIpKSAvIDI7XG4gICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgaWYgKHNlbGYuX2ZpbGxFbmFibGVkKSB7XG4gICAgICAgICAgICAgICAgY29udGV4dC5maWxsU3R5bGUgPSBzZWxmLl9maWxsU3R5bGU7XG4gICAgICAgICAgICAgICAgY29udGV4dC5maWxsVGV4dChzdHIsIHgsIHkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoc2VsZi5fc3Ryb2tlRW5hYmxlZCkge1xuICAgICAgICAgICAgICAgIGNvbnRleHQuc3Ryb2tlU3R5bGUgPSBzZWxmLl9zdHJva2VTdHlsZTtcbiAgICAgICAgICAgICAgICBjb250ZXh0LmxpbmVXaWR0aCA9IHNlbGYuX3N0cm9rZVNpemU7XG4gICAgICAgICAgICAgICAgY29udGV4dC5zdHJva2VUZXh0KHN0ciwgeCwgeSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5cbiIsIm1vZHVsZSB3ZCB7XG4gICAgLy90b2RvIHN1cHBvcnQgeUFsaWduXG4gICAgLy90b2RvIHN1cHBvcnQgcm90YXRlIEJpdG1hcEZvbnQuZW50aXR5T2JqZWN0KGl0IHNob3VsZCByb3RhdGUgYWxsIGl0cyBDaGFyRm9udCBVSU9iamVjdCBhcm91bmQgcGl2b3QpKHJlZmVyIHRvIEJ1dHRvbi0+dGV4dCwgc2hvdWxkIHNldENoaWxkcmVuVHJhbnNmb3JtIHdoZW4gaW5pdClcbiAgICBleHBvcnQgY2xhc3MgQml0bWFwRm9udCBleHRlbmRzIEZvbnR7XG4gICAgICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlKCkge1xuICAgICAgICAgICAgdmFyIG9iaiA9IG5ldyB0aGlzKCk7XG5cbiAgICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF90ZXh0OnN0cmluZyA9IFwiXCI7XG4gICAgICAgIGdldCB0ZXh0KCl7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fdGV4dDtcbiAgICAgICAgfVxuICAgICAgICBzZXQgdGV4dCh0ZXh0OnN0cmluZyl7XG4gICAgICAgICAgICBpZih0ZXh0ICE9PSB0aGlzLl90ZXh0KXtcbiAgICAgICAgICAgICAgICB0aGlzLl90ZXh0ID0gdGV4dDtcblxuICAgICAgICAgICAgICAgIHRoaXMuZGlydHkgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRoaXMubmVlZEZvcm1hdCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF94QWxpZ25tZW50OkZvbnRYQWxpZ25tZW50ID0gRm9udFhBbGlnbm1lbnQuTEVGVDtcbiAgICAgICAgZ2V0IHhBbGlnbm1lbnQoKXtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl94QWxpZ25tZW50O1xuICAgICAgICB9XG4gICAgICAgIHNldCB4QWxpZ25tZW50KHhBbGlnbm1lbnQ6Rm9udFhBbGlnbm1lbnQpe1xuICAgICAgICAgICAgaWYoeEFsaWdubWVudCAhPT0gdGhpcy5feEFsaWdubWVudCl7XG4gICAgICAgICAgICAgICAgdGhpcy5feEFsaWdubWVudCA9IHhBbGlnbm1lbnQ7XG5cbiAgICAgICAgICAgICAgICB0aGlzLmRpcnR5ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLm5lZWRGb3JtYXQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGZudElkOnN0cmluZyA9IG51bGw7XG4gICAgICAgIHB1YmxpYyBiaXRtYXBJZDpzdHJpbmcgPSBudWxsO1xuXG4gICAgICAgIHByaXZhdGUgX2NoYXJGb250TGlzdDp3ZENiLkNvbGxlY3Rpb248VUlPYmplY3Q+ID0gd2RDYi5Db2xsZWN0aW9uLmNyZWF0ZTxVSU9iamVjdD4oKTtcblxuXG4gICAgICAgIHB1YmxpYyBpbml0KCl7XG4gICAgICAgICAgICB2YXIgZm50T2JqID0gdGhpcy5fZ2V0Rm50T2JqKCksXG4gICAgICAgICAgICAgICAgaW1hZ2VBc3NldDpJbWFnZVRleHR1cmVBc3NldCA9IHRoaXMuX2dldEltYWdlQXNzZXQoKTtcblxuICAgICAgICAgICAgaWYgKCFmbnRPYmopIHtcbiAgICAgICAgICAgICAgICBMb2cubG9nKFwiaW1wb3NzaWJsZSB0byBjcmVhdGUgZm9udDogbm90IGZpbmQgZm50IGZpbGVcIik7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmKCFpbWFnZUFzc2V0KXtcbiAgICAgICAgICAgICAgICBMb2cubG9nKFwiaW1wb3NzaWJsZSB0byBjcmVhdGUgZm9udDogbm90IGZpbmQgYml0bWFwIGZpbGVcIik7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHN1cGVyLmluaXQoKTtcblxuICAgICAgICAgICAgdGhpcy5fY3JlYXRlQW5kQWRkRm9udENoYXJVSU9iamVjdHMoZm50T2JqLCBpbWFnZUFzc2V0LnNvdXJjZSk7XG5cbiAgICAgICAgICAgIHRoaXMuX2Zvcm1hdFRleHQoZm50T2JqKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBkaXNwb3NlKCl7XG4gICAgICAgICAgICBzdXBlci5kaXNwb3NlKCk7XG4gICAgICAgICAgICB0aGlzLl9yZW1vdmVBbGxDaGFyRm9udCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJvdGVjdGVkIHJlRm9ybWF0KCl7XG4gICAgICAgICAgICB2YXIgZm50T2JqID0gdGhpcy5fZ2V0Rm50T2JqKCksXG4gICAgICAgICAgICAgICAgaW1hZ2VBc3NldDpJbWFnZVRleHR1cmVBc3NldCA9IHRoaXMuX2dldEltYWdlQXNzZXQoKTtcblxuICAgICAgICAgICAgdGhpcy5fcmVtb3ZlQWxsQ2hhckZvbnQoKTtcblxuICAgICAgICAgICAgaWYgKCFmbnRPYmopIHtcbiAgICAgICAgICAgICAgICBMb2cubG9nKFwiaW1wb3NzaWJsZSB0byBjcmVhdGUgZm9udDogbm90IGZpbmQgZm50IGZpbGVcIik7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZighaW1hZ2VBc3NldCl7XG4gICAgICAgICAgICAgICAgTG9nLmxvZyhcImltcG9zc2libGUgdG8gY3JlYXRlIGZvbnQ6IG5vdCBmaW5kIGJpdG1hcCBmaWxlXCIpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLl9jcmVhdGVBbmRBZGRGb250Q2hhclVJT2JqZWN0cyhmbnRPYmosIGltYWdlQXNzZXQuc291cmNlKTtcblxuICAgICAgICAgICAgdGhpcy5fZm9ybWF0VGV4dChmbnRPYmopO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfZ2V0Rm50T2JqKCl7XG4gICAgICAgICAgICByZXR1cm4gTG9hZGVyTWFuYWdlci5nZXRJbnN0YW5jZSgpLmdldCh0aGlzLmZudElkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX2dldEltYWdlQXNzZXQoKXtcbiAgICAgICAgICAgIHJldHVybiBMb2FkZXJNYW5hZ2VyLmdldEluc3RhbmNlKCkuZ2V0KHRoaXMuYml0bWFwSWQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfY3JlYXRlQW5kQWRkRm9udENoYXJVSU9iamVjdHMoZm50T2JqOmFueSwgaW1hZ2U6SFRNTEltYWdlRWxlbWVudCkge1xuICAgICAgICAgICAgdmFyIGxvY1N0ciA9IHRoaXMudGV4dCxcbiAgICAgICAgICAgICAgICBsb2NGb250RGljdCA9IGZudE9iai5mb250RGVmRGljdGlvbmFyeSxcbiAgICAgICAgICAgICAgICBuZXh0Rm9udFBvc2l0aW9uWCA9IDAsXG4gICAgICAgICAgICAgICAgbmV4dEZvbnRQb3NpdGlvblkgPSAwLFxuICAgICAgICAgICAgICAgIHBvc2l0aW9uID0gdGhpcy5nZXRMZWZ0Q29ybmVyUG9zaXRpb24oKSxcbiAgICAgICAgICAgICAgICAvL3Bvc2l0aW9uID0gdGhpcy5lbnRpdHlPYmplY3QudHJhbnNmb3JtLnBvc2l0aW9uLFxuICAgICAgICAgICAgICAgIHVpUmVuZGVyZXI6VUlSZW5kZXJlciA9IHRoaXMuZ2V0VUlSZW5kZXJlcigpLFxuICAgICAgICAgICAgICAgIGNoYXJGb250VUlPYmplY3Q6VUlPYmplY3QgPSBudWxsLFxuICAgICAgICAgICAgICAgIGNoYXJGb250OkNoYXJGb250ID0gbnVsbDtcblxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIHN0cmluZ0xlbiA9IGxvY1N0ci5sZW5ndGg7IGkgPCBzdHJpbmdMZW47IGkrKykge1xuICAgICAgICAgICAgICAgIGxldCBrZXkgPSBTdHJpbmcobG9jU3RyLmNoYXJDb2RlQXQoaSkpLFxuICAgICAgICAgICAgICAgICAgICBjaGFyID0gbG9jU3RyW2ldO1xuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2lzTmV3TGluZShjaGFyKSkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgY2hhckZvbnREYXRhID0gdGhpcy5fY3JlYXRlQW5kQWRkRm9udENoYXJPYmplY3RPZk5ld0xpbmVDaGFyKGksIGNoYXIsIHVpUmVuZGVyZXIpO1xuICAgICAgICAgICAgICAgICAgICBjaGFyRm9udFVJT2JqZWN0ID0gY2hhckZvbnREYXRhLmNoYXJGb250VUlPYmplY3Q7XG4gICAgICAgICAgICAgICAgICAgIGNoYXJGb250ID0gY2hhckZvbnREYXRhLmNoYXJGb250O1xuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NldENoYXJGb250VUlPYmplY3RQb3NpdGlvbihjaGFyRm9udFVJT2JqZWN0LCBwb3NpdGlvbi54ICsgbmV4dEZvbnRQb3NpdGlvblgsIHBvc2l0aW9uLnkgKyBuZXh0Rm9udFBvc2l0aW9uWSk7XG5cbiAgICAgICAgICAgICAgICAgICAgY2hhckZvbnQuc3RhcnRQb3NYID0gbmV4dEZvbnRQb3NpdGlvblg7XG4gICAgICAgICAgICAgICAgICAgIGNoYXJGb250LnhBZHZhbmNlID0gMDtcblxuICAgICAgICAgICAgICAgICAgICBuZXh0Rm9udFBvc2l0aW9uWCA9IDA7XG4gICAgICAgICAgICAgICAgICAgIG5leHRGb250UG9zaXRpb25ZID0gbmV4dEZvbnRQb3NpdGlvblkgKyBmbnRPYmouY29tbW9uSGVpZ2h0O1xuXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cblxuXG4gICAgICAgICAgICAgICAgbGV0IGZvbnREZWYgPSB0aGlzLl9nZXRGb250RGVmKGxvY0ZvbnREaWN0LCBrZXkpLFxuICAgICAgICAgICAgICAgICAgICBjaGFyRm9udERhdGE6e2NoYXJGb250VUlPYmplY3Q6VUlPYmplY3QsY2hhckZvbnQ6Q2hhckZvbnR9ID0gbnVsbDtcblxuICAgICAgICAgICAgICAgIGlmICghZm9udERlZikge1xuICAgICAgICAgICAgICAgICAgICBMb2cubG9nKGBjaGFyYWN0ZXIgbm90IGZvdW5kICR7Y2hhcn1gKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY2hhckZvbnREYXRhID0gdGhpcy5fY3JlYXRlQW5kQWRkRm9udENoYXJPYmplY3RPZkNvbW1vbkNoYXIoZm9udERlZiwgaW1hZ2UsIGksIGNoYXIsIHVpUmVuZGVyZXIpO1xuXG4gICAgICAgICAgICAgICAgY2hhckZvbnRVSU9iamVjdCA9IGNoYXJGb250RGF0YS5jaGFyRm9udFVJT2JqZWN0O1xuICAgICAgICAgICAgICAgIGNoYXJGb250ID0gY2hhckZvbnREYXRhLmNoYXJGb250O1xuXG4gICAgICAgICAgICAgICAgdGhpcy5fc2V0Q2hhckZvbnRVSU9iamVjdFBvc2l0aW9uKGNoYXJGb250VUlPYmplY3QsIHBvc2l0aW9uLnggKyBuZXh0Rm9udFBvc2l0aW9uWCArIGZvbnREZWYueE9mZnNldCwgcG9zaXRpb24ueSArIG5leHRGb250UG9zaXRpb25ZICsgZm9udERlZi55T2Zmc2V0KTtcblxuICAgICAgICAgICAgICAgIGNoYXJGb250LnN0YXJ0UG9zWCA9IG5leHRGb250UG9zaXRpb25YO1xuICAgICAgICAgICAgICAgIGNoYXJGb250LnhBZHZhbmNlID0gZm9udERlZi54QWR2YW5jZTtcblxuICAgICAgICAgICAgICAgIG5leHRGb250UG9zaXRpb25YID0gbmV4dEZvbnRQb3NpdGlvblggKyBmb250RGVmLnhBZHZhbmNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfY3JlYXRlQW5kQWRkRm9udENoYXJPYmplY3RPZk5ld0xpbmVDaGFyKGluZGV4Om51bWJlciwgY2hhcjpzdHJpbmcsIHVpUmVuZGVyZXI6VUlSZW5kZXJlcil7XG4gICAgICAgICAgICB2YXIgY2hhckZvbnRVSU9iamVjdDpVSU9iamVjdCA9IHRoaXMuX2ZpbmRDaGFyRm9udFVJT2JqZWN0KGluZGV4KSxcbiAgICAgICAgICAgICAgICBjaGFyRm9udDpDaGFyRm9udCA9IG51bGw7XG5cbiAgICAgICAgICAgIGlmICghY2hhckZvbnRVSU9iamVjdCkge1xuICAgICAgICAgICAgICAgIGxldCBjaGFyRm9udERhdGEgPSB0aGlzLl9jcmVhdGVDaGFyRm9udChpbmRleCwgdWlSZW5kZXJlcik7XG5cbiAgICAgICAgICAgICAgICBjaGFyRm9udFVJT2JqZWN0ID0gY2hhckZvbnREYXRhLmNoYXJGb250VUlPYmplY3Q7XG4gICAgICAgICAgICAgICAgY2hhckZvbnQgPSBjaGFyRm9udERhdGEuY2hhckZvbnQ7XG5cbiAgICAgICAgICAgICAgICB0aGlzLl9hZGRDaGFyRm9udFVJT2JqZWN0KGNoYXJGb250VUlPYmplY3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICBjaGFyRm9udCA9IGNoYXJGb250VUlPYmplY3QuZ2V0Q29tcG9uZW50PENoYXJGb250PihDaGFyRm9udCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNoYXJGb250LmNoYXIgPSBjaGFyO1xuXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGNoYXJGb250VUlPYmplY3Q6Y2hhckZvbnRVSU9iamVjdCxcbiAgICAgICAgICAgICAgICBjaGFyRm9udDpjaGFyRm9udFxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfY3JlYXRlQW5kQWRkRm9udENoYXJPYmplY3RPZkNvbW1vbkNoYXIoZm9udERlZjphbnksIGltYWdlOkhUTUxJbWFnZUVsZW1lbnQsIGluZGV4Om51bWJlciwgY2hhcjpzdHJpbmcsIHVpUmVuZGVyZXI6VUlSZW5kZXJlcil7XG4gICAgICAgICAgICB2YXIgcmVjdCA9IFJlY3RSZWdpb24uY3JlYXRlKGZvbnREZWYucmVjdC54LCBmb250RGVmLnJlY3QueSwgZm9udERlZi5yZWN0LndpZHRoLCBmb250RGVmLnJlY3QuaGVpZ2h0KSxcbiAgICAgICAgICAgICAgICBjaGFyRm9udFVJT2JqZWN0OlVJT2JqZWN0ID0gdGhpcy5fZmluZENoYXJGb250VUlPYmplY3QoaW5kZXgpLFxuICAgICAgICAgICAgICAgIGNoYXJGb250OkNoYXJGb250ID0gbnVsbDtcblxuXG4gICAgICAgICAgICBpZiAoIWNoYXJGb250VUlPYmplY3QpIHtcbiAgICAgICAgICAgICAgICBsZXQgY2hhckZvbnREYXRhID0gdGhpcy5fY3JlYXRlQ2hhckZvbnQoaW5kZXgsIHVpUmVuZGVyZXIpLFxuICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm06UmVjdFRyYW5zZm9ybSA9IG51bGw7XG5cbiAgICAgICAgICAgICAgICBjaGFyRm9udFVJT2JqZWN0ID0gY2hhckZvbnREYXRhLmNoYXJGb250VUlPYmplY3Q7XG4gICAgICAgICAgICAgICAgdHJhbnNmb3JtID0gY2hhckZvbnRVSU9iamVjdC50cmFuc2Zvcm0sXG4gICAgICAgICAgICAgICAgY2hhckZvbnQgPSBjaGFyRm9udERhdGEuY2hhckZvbnQ7XG5cblxuICAgICAgICAgICAgICAgIGNoYXJGb250LmltYWdlID0gaW1hZ2U7XG4gICAgICAgICAgICAgICAgY2hhckZvbnQucmVjdFJlZ2lvbiA9IHJlY3Q7XG5cbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm0ud2lkdGggPSByZWN0LndpZHRoO1xuICAgICAgICAgICAgICAgIHRyYW5zZm9ybS5oZWlnaHQgPSByZWN0LmhlaWdodDtcblxuXG4gICAgICAgICAgICAgICAgdGhpcy5fYWRkQ2hhckZvbnRVSU9iamVjdChjaGFyRm9udFVJT2JqZWN0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICAgICAgY2hhckZvbnQgPSBjaGFyRm9udFVJT2JqZWN0LmdldENvbXBvbmVudDxDaGFyRm9udD4oQ2hhckZvbnQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjaGFyRm9udC5jaGFyID0gY2hhcjtcblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBjaGFyRm9udFVJT2JqZWN0OmNoYXJGb250VUlPYmplY3QsXG4gICAgICAgICAgICAgICAgY2hhckZvbnQ6Y2hhckZvbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIEByZXF1aXJlKGZ1bmN0aW9uKGZudE9iajphbnkpe1xuICAgICAgICAgICAgaWYgKHRoaXMud2lkdGggPiAwKSB7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDEsIHN0cmluZ0xlbiA9IHRoaXMudGV4dC5sZW5ndGg7IGkgPCBzdHJpbmdMZW47IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBsZXQgY2hhcmFjdGVyVUlPYmplY3QgPSB0aGlzLmVudGl0eU9iamVjdC5maW5kQ2hpbGRCeVRhZyhTdHJpbmcoaSkpO1xuXG4gICAgICAgICAgICAgICAgICAgIGFzc2VydCghIWNoYXJhY3RlclVJT2JqZWN0LCBcImNoYXIgbm90IGhhcyBjb3JyZXNwb25kaW5nIGVudGl0eU9iamVjdFwiKTtcbiAgICAgICAgICAgICAgICAgICAgYXNzZXJ0KGNoYXJhY3RlclVJT2JqZWN0Lmhhc0NvbXBvbmVudChDaGFyRm9udCksIExvZy5pbmZvLkZVTkNfU0hPVUxEKFwiY2hhciBlbnRpdHlPYmplY3RcIiwgXCJjb250YWluIENoYXJGb250IGNvbXBvbmVudFwiKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgICBwcml2YXRlIF9mb3JtYXRUZXh0KGZudE9iajphbnkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLndpZHRoID4gMCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2Zvcm1hdE11bHRpTGluZShmbnRPYmopO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLl9mb3JtYXRBbGlnbigpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfZm9ybWF0TXVsdGlMaW5lKGZudE9iajphbnkpe1xuICAgICAgICAgICAgdmFyIGVudGl0eU9iamVjdCA9IHRoaXMuZW50aXR5T2JqZWN0LFxuICAgICAgICAgICAgICAgIGNoYXJhY3RlclVJT2JqZWN0OlVJT2JqZWN0ID0gbnVsbCxcbiAgICAgICAgICAgICAgICBjaGFyRm9udDpDaGFyRm9udCA9IG51bGwsXG4gICAgICAgICAgICAgICAgLy9wb3NpdGlvbiA9IGVudGl0eU9iamVjdC50cmFuc2Zvcm0ucG9zaXRpb24sXG4gICAgICAgICAgICAgICAgcG9zaXRpb24gPSB0aGlzLmdldExlZnRDb3JuZXJQb3NpdGlvbigpLFxuICAgICAgICAgICAgICAgIHggPSAwLFxuICAgICAgICAgICAgICAgIHkgPSAwLFxuICAgICAgICAgICAgICAgIGxpbmVIZWlnaHQgPSBmbnRPYmouY29tbW9uSGVpZ2h0O1xuXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMSwgc3RyaW5nTGVuID0gdGhpcy50ZXh0Lmxlbmd0aDsgaSA8IHN0cmluZ0xlbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgY2hhcmFjdGVyVUlPYmplY3QgPSB0aGlzLl9maW5kQ2hhckZvbnRVSU9iamVjdChpKTtcbiAgICAgICAgICAgICAgICBjaGFyRm9udCA9IGNoYXJhY3RlclVJT2JqZWN0LmdldENvbXBvbmVudDxDaGFyRm9udD4oQ2hhckZvbnQpO1xuXG4gICAgICAgICAgICAgICAgLyohXG4gICAgICAgICAgICAgICAgIHNob3VsZCBtYXJrIHRoZSBsYXN0IGNoYXIgb2YgdGhlIGxpbmUgaXNOZXdMaW5lL2lzRnVsbExpbmVcbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5faXNOZXdMaW5lKGNoYXJGb250LmNoYXIpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNoYXJGb250LmlzTmV3TGluZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGNoYXJGb250LmlzRnVsbExpbmUgPSBmYWxzZTtcblxuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3RyYW5zbGF0ZUNoYXJGb250VUlPYmplY3QoY2hhcmFjdGVyVUlPYmplY3QsIC14LCB5KTtcblxuICAgICAgICAgICAgICAgICAgICB4ID0gMDtcbiAgICAgICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9pc0V4Y2VlZFdpZHRoKHBvc2l0aW9uLCBjaGFyRm9udCwgeCkpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHByZXZDaGFyVUlPYmplY3Q6VUlPYmplY3QgPSB0aGlzLl9maW5kQ2hhckZvbnRVSU9iamVjdChpIC0gMSk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHByZXZDaGFyVUlPYmplY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBwcmV2Q2hhckZvbnQgPSBwcmV2Q2hhclVJT2JqZWN0LmdldENvbXBvbmVudDxDaGFyRm9udD4oQ2hhckZvbnQpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBwcmV2Q2hhckZvbnQuaXNOZXdMaW5lID0gdHJ1ZTtcblxuXG4gICAgICAgICAgICAgICAgICAgICAgICAvKiFcbiAgICAgICAgICAgICAgICAgICAgICAgICBpZiB0aGUgcHJldiBjaGFyIGlzIHNwYWNlIGNoYXIoaXQncyB0aGUgbGFzdCBjaGFyIG9mIHRoaXMgbGluZSksIHRoaXMgbGluZSBpcyBub3QgXCJmdWxsTGluZVwiKGJlY2F1c2UgdGhlIGxhc3Qgc3BhY2UgY2hhciBvZiB0aGUgbGluZSB3aWxsIGJlIHJlbW92ZWQgd2hlbiBhbGlnbikuXG4gICAgICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5faXNTcGFjZVVuaWNvZGUocHJldkNoYXJGb250LmNoYXIpKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmV2Q2hhckZvbnQuaXNGdWxsTGluZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgICAgICAgICAgeCA9IHRoaXMuX2dldExldHRlclBvc1hMZWZ0KGNoYXJGb250KTtcbiAgICAgICAgICAgICAgICAgICAgeSA9IHkgKyBsaW5lSGVpZ2h0O1xuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3RyYW5zbGF0ZUNoYXJGb250VUlPYmplY3QoY2hhcmFjdGVyVUlPYmplY3QsIC14LCB5KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3RyYW5zbGF0ZUNoYXJGb250VUlPYmplY3QoY2hhcmFjdGVyVUlPYmplY3QsIC14LCB5KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9mb3JtYXRBbGlnbigpe1xuICAgICAgICAgICAgLy92YXIgcG9zaXRpb24gPSB0aGlzLmVudGl0eU9iamVjdC50cmFuc2Zvcm0ucG9zaXRpb24sXG4gICAgICAgICAgICB2YXIgcG9zaXRpb24gPSB0aGlzLmdldExlZnRDb3JuZXJQb3NpdGlvbigpLFxuICAgICAgICAgICAgICAgIHNlbGYgPSB0aGlzO1xuXG4gICAgICAgICAgICAvKiFcbiAgICAgICAgICAgICBpdGVyYXRlIHRoZSBsaW5lc1xuXG4gICAgICAgICAgICAgaWYgdGhlIGxpbmUgaXMgXCJmdWxsTGluZVwiLCBub3QgYWxpZ247XG4gICAgICAgICAgICAgZWxzZSwgYWRqdXN0IHRoZSBjaGFycyBvZiB0aGUgbGluZSBhY2NvcmRpbmcgdG8geEFsaWdubWVudChub3QgbGluZSBmZWVkKS5cbiAgICAgICAgICAgICAqL1xuXG4gICAgICAgICAgICBpZiAodGhpcy5feEFsaWdubWVudCAhPSBGb250WEFsaWdubWVudC5MRUZUKSB7XG4gICAgICAgICAgICAgICAgbGV0IGxpbmUgPSBbXTtcblxuICAgICAgICAgICAgICAgIHRoaXMuX2NoYXJGb250TGlzdC5mb3JFYWNoKChjaGFyRm9udFVJT2JqZWN0OlVJT2JqZWN0KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBjaGFyRm9udCA9IGNoYXJGb250VUlPYmplY3QuZ2V0Q29tcG9uZW50PENoYXJGb250PihDaGFyRm9udCk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjaGFyRm9udC5pc05ld0xpbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmUucHVzaChjaGFyRm9udCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAoY2hhckZvbnQuaXNOZXdMaW5lICYmIGNoYXJGb250LmlzRnVsbExpbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmUgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgICAgICAgICAgc2VsZi5fYWxpZ25MaW5lKHBvc2l0aW9uLCBsaW5lLCBsaW5lW2xpbmUubGVuZ3RoIC0gMV0pO1xuXG4gICAgICAgICAgICAgICAgICAgIGxpbmUgPSBbXTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIC8vaGFuZGxlIHRoZSBsYXN0IGxpbmVcbiAgICAgICAgICAgICAgICBpZiAobGluZS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuX2FsaWduTGluZShwb3NpdGlvbiwgbGluZSwgbGluZVtsaW5lLmxlbmd0aCAtIDFdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9jcmVhdGVDaGFyRm9udChpbmRleDpudW1iZXIsIHVpUmVuZGVyZXI6VUlSZW5kZXJlcil7XG4gICAgICAgICAgICB2YXIgY2hhckZvbnRVSU9iamVjdCA9IFVJT2JqZWN0LmNyZWF0ZSgpLFxuICAgICAgICAgICAgICAgIGNoYXJGb250ID0gQ2hhckZvbnQuY3JlYXRlKCk7XG5cbiAgICAgICAgICAgIGNoYXJGb250VUlPYmplY3QuYWRkQ29tcG9uZW50KGNoYXJGb250KTtcbiAgICAgICAgICAgIGNoYXJGb250VUlPYmplY3QuYWRkQ29tcG9uZW50KHVpUmVuZGVyZXIpO1xuXG5cbiAgICAgICAgICAgIGNoYXJGb250VUlPYmplY3QuYWRkVGFnKFN0cmluZyhpbmRleCkpO1xuXG4gICAgICAgICAgICBjaGFyRm9udFVJT2JqZWN0LmluaXQoKTtcblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBjaGFyRm9udFVJT2JqZWN0OmNoYXJGb250VUlPYmplY3QsXG4gICAgICAgICAgICAgICAgY2hhckZvbnQ6Y2hhckZvbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX2FkZENoYXJGb250VUlPYmplY3QoY2hhckZvbnRVSU9iamVjdDpVSU9iamVjdCl7XG4gICAgICAgICAgICB0aGlzLl9jaGFyRm9udExpc3QuYWRkQ2hpbGQoY2hhckZvbnRVSU9iamVjdCk7XG4gICAgICAgICAgICB0aGlzLmVudGl0eU9iamVjdC5hZGRDaGlsZChjaGFyRm9udFVJT2JqZWN0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX2ZpbmRDaGFyRm9udFVJT2JqZWN0KGluZGV4Om51bWJlcil7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lbnRpdHlPYmplY3QuZmluZENoaWxkQnlUYWcoU3RyaW5nKGluZGV4KSk7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9pc1NwYWNlVW5pY29kZShjaGFyOnN0cmluZykge1xuICAgICAgICAgICAgdmFyIGNoYXJDb2RlID0gY2hhci5jaGFyQ29kZUF0KDApO1xuXG4gICAgICAgICAgICByZXR1cm4gY2hhckNvZGUgPT0gMzIgfHwgY2hhckNvZGUgPT0gMTMzIHx8IGNoYXJDb2RlID09IDE2MCB8fCBjaGFyQ29kZSA9PSA1NzYwIHx8IChjaGFyQ29kZSA+PSA4MTkyICYmIGNoYXJDb2RlIDw9IDgyMDIpIHx8IGNoYXJDb2RlID09IDgyMzIgfHwgY2hhckNvZGUgPT0gODIzMyB8fCBjaGFyQ29kZSA9PSA4MjM5IHx8IGNoYXJDb2RlID09IDgyODcgfHwgY2hhckNvZGUgPT0gMTIyODg7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9pc05ld0xpbmUoY2hhcikge1xuICAgICAgICAgICAgcmV0dXJuIGNoYXIuY2hhckNvZGVBdCgwKSA9PSAxMDtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX2dldExldHRlclBvc1hMZWZ0KHNwOkNoYXJGb250KSB7XG4gICAgICAgICAgICByZXR1cm4gc3Auc3RhcnRQb3NYO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfZ2V0TGV0dGVyUG9zWFJpZ2h0KGxlZnRDb3JuZXJQb3NpdGlvbjpWZWN0b3IyLCBzcDpDaGFyRm9udCkge1xuICAgICAgICAgICAgcmV0dXJuIENvb3JkaW5hdGVVdGlscy5jb252ZXJ0Q2VudGVyUG9zaXRpb25YVG9MZWZ0Q29ybmVyUG9zaXRpb25YKHNwLngsIHNwLndpZHRoKSAtIGxlZnRDb3JuZXJQb3NpdGlvbi54ICsgc3AueEFkdmFuY2U7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9nZXRGb250RGVmKGZvbnREaWN0OmFueSwga2V5OnN0cmluZyl7XG4gICAgICAgICAgICByZXR1cm4gZm9udERpY3Rba2V5XTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX2lzRXhjZWVkV2lkdGgobGVmdENvcm5lclBvc2l0aW9uOlZlY3RvcjIsIGNoYXJGb250OkNoYXJGb250LCB4Om51bWJlcil7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZ2V0TGV0dGVyUG9zWFJpZ2h0KGxlZnRDb3JuZXJQb3NpdGlvbiwgY2hhckZvbnQpIC0geCA+IHRoaXMud2lkdGhcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX2FsaWduTGluZShsZWZ0Q29ybmVyUG9zaXRpb246VmVjdG9yMiwgbGluZTpBcnJheTxDaGFyRm9udD4sIGxhc3RDaGFyRm9udDpDaGFyRm9udCkge1xuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgICAgICAgICBsaW5lID0gdGhpcy5fdHJpbUJvdHRvbVNwYWNlQ2hhcihsaW5lKTtcblxuICAgICAgICAgICAgbGFzdENoYXJGb250ID0gbGluZVtsaW5lLmxlbmd0aCAtIDFdO1xuXG4gICAgICAgICAgICBsaW5lLmZvckVhY2goZnVuY3Rpb24gKGNwOkNoYXJGb250KSB7XG4gICAgICAgICAgICAgICAgbGV0IHNoaWZ0ID0gbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgbGluZVdpZHRoID0gc2VsZi5fZ2V0TGV0dGVyUG9zWFJpZ2h0KGxlZnRDb3JuZXJQb3NpdGlvbiwgbGFzdENoYXJGb250KTtcblxuICAgICAgICAgICAgICAgIHN3aXRjaCAoc2VsZi5feEFsaWdubWVudCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIEZvbnRYQWxpZ25tZW50LkNFTlRFUjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHNoaWZ0ID0gKHNlbGYud2lkdGggLSBsaW5lV2lkdGgpIC8gMjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIEZvbnRYQWxpZ25tZW50LlJJR0hUOlxuICAgICAgICAgICAgICAgICAgICAgICAgc2hpZnQgPSBzZWxmLndpZHRoIC0gbGluZVdpZHRoO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjcC54ID0gY3AueCArIHNoaWZ0O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF90cmltQm90dG9tU3BhY2VDaGFyKGxpbmU6QXJyYXk8Q2hhckZvbnQ+KSB7XG4gICAgICAgICAgICB2YXIgaSA9IGxpbmUubGVuZ3RoIC0gMTtcblxuICAgICAgICAgICAgaWYodGhpcy5faXNOZXdMaW5lKGxpbmVbaV0uY2hhcikpe1xuICAgICAgICAgICAgICAgIGkgPSBpIC0gMTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgd2hpbGUoaSA+PSAwICYmIHRoaXMuX2lzU3BhY2VVbmljb2RlKGxpbmVbaV0uY2hhcikpe1xuICAgICAgICAgICAgICAgIGkgPSBpIC0gMTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbGluZSA9IGxpbmUuc3BsaWNlKDAsIGkgKyAxKTtcblxuICAgICAgICAgICAgcmV0dXJuIGxpbmU7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9zZXRDaGFyRm9udFVJT2JqZWN0UG9zaXRpb24oY2hhckZvbnRVSU9iamVjdDpVSU9iamVjdCwgeDpudW1iZXIsIHk6bnVtYmVyKXtcbiAgICAgICAgICAgIHZhciB0cmFuc2Zvcm0gPSBjaGFyRm9udFVJT2JqZWN0LnRyYW5zZm9ybTtcblxuICAgICAgICAgICAgY2hhckZvbnRVSU9iamVjdC50cmFuc2Zvcm0ucG9zaXRpb24gPSBDb29yZGluYXRlVXRpbHMuY29udmVydExlZnRDb3JuZXJQb3NpdGlvblRvQ2VudGVyUG9zaXRpb24oVmVjdG9yMi5jcmVhdGUoeCwgeSksIHRyYW5zZm9ybS53aWR0aCwgdHJhbnNmb3JtLmhlaWdodCk7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF90cmFuc2xhdGVDaGFyRm9udFVJT2JqZWN0KGNoYXJGb250VUlPYmplY3Q6VUlPYmplY3QsIHg6bnVtYmVyLCB5Om51bWJlcil7XG4gICAgICAgICAgICAvL2NoYXJGb250VUlPYmplY3QudHJhbnNmb3JtLnRyYW5zbGF0ZSh4LCAteSk7XG4gICAgICAgICAgICBjaGFyRm9udFVJT2JqZWN0LnRyYW5zZm9ybS50cmFuc2xhdGUoeCwgeSk7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9yZW1vdmVBbGxDaGFyRm9udCgpe1xuICAgICAgICAgICAgdGhpcy5fY2hhckZvbnRMaXN0LmZvckVhY2goKGNoYXJGb250OlVJT2JqZWN0KSA9PiB7XG4gICAgICAgICAgICAgICAgY2hhckZvbnQuZGlzcG9zZSgpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHRoaXMuX2NoYXJGb250TGlzdC5yZW1vdmVBbGxDaGlsZHJlbigpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4iLCJtb2R1bGUgd2Qge1xuICAgIGV4cG9ydCBjbGFzcyBDaGFyRm9udCBleHRlbmRzIEZvbnQge1xuICAgICAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZSgpIHtcbiAgICAgICAgICAgIHZhciBvYmogPSBuZXcgdGhpcygpO1xuXG4gICAgICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgICB9XG5cbiAgICAgICAgZ2V0IHgoKXtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmVudGl0eU9iamVjdC50cmFuc2Zvcm0ucG9zaXRpb24ueDtcbiAgICAgICAgfVxuICAgICAgICBzZXQgeCh4Om51bWJlcil7XG4gICAgICAgICAgICB2YXIgcG9zaXRpb24gPSB0aGlzLmVudGl0eU9iamVjdC50cmFuc2Zvcm0ucG9zaXRpb247XG5cbiAgICAgICAgICAgIHRoaXMuZW50aXR5T2JqZWN0LnRyYW5zZm9ybS5wb3NpdGlvbiA9IFZlY3RvcjIuY3JlYXRlKHgsIHBvc2l0aW9uLnkpO1xuICAgICAgICB9XG5cbiAgICAgICAgZ2V0IHkoKXtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmVudGl0eU9iamVjdC50cmFuc2Zvcm0ucG9zaXRpb24ueTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX2NoYXI6c3RyaW5nID0gbnVsbDtcbiAgICAgICAgZ2V0IGNoYXIoKXtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9jaGFyO1xuICAgICAgICB9XG4gICAgICAgIHNldCBjaGFyKGNoYXI6c3RyaW5nKXtcbiAgICAgICAgICAgIGlmKHRoaXMuX2NoYXIgIT09IG51bGwpe1xuICAgICAgICAgICAgICAgIExvZy5sb2coTG9nLmluZm8uRlVOQ19OT1RfU1VQUE9SVChcImNoYW5nZSBjaGFyXCIpKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuX2NoYXIgPSBjaGFyO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHN0YXJ0UG9zWDpudW1iZXIgPSBudWxsO1xuICAgICAgICBwdWJsaWMgeEFkdmFuY2U6bnVtYmVyID0gbnVsbDtcbiAgICAgICAgcHVibGljIGltYWdlOkhUTUxJbWFnZUVsZW1lbnQgPSBudWxsO1xuICAgICAgICBwdWJsaWMgcmVjdFJlZ2lvbjpSZWN0UmVnaW9uID0gbnVsbDtcbiAgICAgICAgcHVibGljIGlzTmV3TGluZTpib29sZWFuID0gZmFsc2U7XG4gICAgICAgIHB1YmxpYyBpc0Z1bGxMaW5lOmJvb2xlYW4gPSBmYWxzZTtcblxuICAgICAgICBwcml2YXRlIF9zdWJzY3JpcHRpb246d2RGcnAuSURpc3Bvc2FibGUgPSBudWxsO1xuXG4gICAgICAgIEBleGVjT25seU9uY2UoXCJfaXNJbml0XCIpXG4gICAgICAgIHB1YmxpYyBpbml0KCl7XG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICAgICAgICAgIHN1cGVyLmluaXQoKTtcblxuICAgICAgICAgICAgdGhpcy5fc3Vic2NyaXB0aW9uID0gd2RGcnAuZnJvbUFycmF5KFtFdmVudE1hbmFnZXIuZnJvbUV2ZW50KHRoaXMuZW50aXR5T2JqZWN0LCA8YW55PkVuZ2luZUV2ZW50LlRSQU5TRk9STV9UUkFOU0xBVEUpLCBFdmVudE1hbmFnZXIuZnJvbUV2ZW50KHRoaXMuZW50aXR5T2JqZWN0LCA8YW55PkVuZ2luZUV2ZW50LlRSQU5TRk9STV9ST1RBVEUpLCBFdmVudE1hbmFnZXIuZnJvbUV2ZW50KHRoaXMuZW50aXR5T2JqZWN0LCA8YW55PkVuZ2luZUV2ZW50LlRSQU5TRk9STV9TQ0FMRSldKVxuICAgICAgICAgICAgLm1lcmdlQWxsKClcbiAgICAgICAgICAgIC5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHNlbGYuZGlydHkgPSB0cnVlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgZGlzcG9zZSgpe1xuICAgICAgICAgICAgc3VwZXIuZGlzcG9zZSgpO1xuXG4gICAgICAgICAgICB0aGlzLl9zdWJzY3JpcHRpb24uZGlzcG9zZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJvdGVjdGVkIHNob3VsZE5vdFVwZGF0ZSgpe1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVjdFJlZ2lvbiA9PT0gbnVsbCB8fCAodGhpcy53aWR0aCA9PT0gMCAmJiB0aGlzLmhlaWdodCA9PT0gMCk7XG4gICAgICAgIH1cblxuICAgICAgICBwcm90ZWN0ZWQgZHJhdyhlbGFwc2VkVGltZTpudW1iZXIpe1xuICAgICAgICAgICAgdmFyIHRyYW5zZm9ybTpSZWN0VHJhbnNmb3JtID0gbnVsbCxcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjpWZWN0b3IyID0gbnVsbCxcbiAgICAgICAgICAgICAgICBkdyA9IG51bGwsXG4gICAgICAgICAgICAgICAgZGggPSBudWxsO1xuXG4gICAgICAgICAgICB0cmFuc2Zvcm0gPSB0aGlzLmVudGl0eU9iamVjdC50cmFuc2Zvcm07XG4gICAgICAgICAgICBwb3NpdGlvbiA9IHRyYW5zZm9ybS5wb3NpdGlvbjtcblxuICAgICAgICAgICAgZHcgPSB0aGlzLndpZHRoO1xuICAgICAgICAgICAgZGggPSB0aGlzLmhlaWdodDtcblxuICAgICAgICAgICAgdGhpcy5kcmF3SW5DZW50ZXJQb2ludCh0aGlzLmNvbnRleHQsIHRoaXMuaW1hZ2UsIHRoaXMucmVjdFJlZ2lvbi54LCB0aGlzLnJlY3RSZWdpb24ueSwgdGhpcy5yZWN0UmVnaW9uLndpZHRoLCB0aGlzLnJlY3RSZWdpb24uaGVpZ2h0LFxuICAgICAgICAgICAgICAgIHBvc2l0aW9uLCBkdywgZGgpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4iLCJtb2R1bGUgd2Qge1xuICAgIGV4cG9ydCBjbGFzcyBQcm9ncmVzc0JhciBleHRlbmRzIFVJIHtcbiAgICAgICAgcHVibGljIHN0YXRpYyBjcmVhdGUoKSB7XG4gICAgICAgICAgICB2YXIgb2JqID0gbmV3IHRoaXMoKTtcblxuICAgICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX3BlcmNlbnQ6bnVtYmVyID0gMDtcbiAgICAgICAgZ2V0IHBlcmNlbnQoKXtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9wZXJjZW50O1xuICAgICAgICB9XG4gICAgICAgIHNldCBwZXJjZW50KHBlcmNlbnQ6bnVtYmVyKXtcbiAgICAgICAgICAgIGlmKHRoaXMuX3BlcmNlbnQgIT09IHBlcmNlbnQpe1xuICAgICAgICAgICAgICAgIHRoaXMuX3BlcmNlbnQgPSBwZXJjZW50O1xuXG4gICAgICAgICAgICAgICAgdGhpcy5kaXJ0eSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgYm9yZGVyU3R5bGU6c3RyaW5nID0gXCJyZ2JhKDAsIDAsIDAsIDEpXCI7XG4gICAgICAgIHB1YmxpYyBmaWxsU3R5bGU6c3RyaW5nID0gXCJyZ2JhKDI1NSwgMCwgMCwgMSlcIjtcbiAgICAgICAgcHVibGljIHJhZGl1czpudW1iZXIgPSA1O1xuXG4gICAgICAgIHByaXZhdGUgX29mZlNjcmVlbkNhbnZhczpIVE1MQ2FudmFzRWxlbWVudCA9IG51bGw7XG4gICAgICAgIHByaXZhdGUgX29mZlNjcmVlbkNvbnRleHQ6Q2FudmFzUmVuZGVyaW5nQ29udGV4dDJEID0gbnVsbDtcblxuICAgICAgICBwdWJsaWMgaW5pdCgpe1xuICAgICAgICAgICAgc3VwZXIuaW5pdCgpO1xuXG4gICAgICAgICAgICB0aGlzLl9jcmVhdGVPZmZTY3JlZW5DYW52YXMoKTtcblxuICAgICAgICAgICAgdGhpcy5fZHJhd1Byb2dyZXNzQmFyKCk7XG4gICAgICAgIH1cblxuICAgICAgICBwcm90ZWN0ZWQgc2hvdWxkTm90VXBkYXRlKCl7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wZXJjZW50IDw9IDA7XG4gICAgICAgIH1cblxuICAgICAgICBAcmVxdWlyZShmdW5jdGlvbihlbGFwc2VkVGltZTpudW1iZXIpe1xuICAgICAgICAgICAgYXNzZXJ0KHRoaXMucGVyY2VudCA+PSAwICYmIHRoaXMucGVyY2VudCA8PSAxLCBMb2cuaW5mby5GVU5DX1NIT1VMRChcInBlcmNlbnRcIiwgXCIgPj0gMCBhbmQgPD0gMVwiKSk7XG4gICAgICAgIH0pXG4gICAgICAgIHByb3RlY3RlZCBkcmF3KGVsYXBzZWRUaW1lOm51bWJlcil7XG4gICAgICAgICAgICB2YXIgcG9zaXRpb24gPSB0aGlzLmVudGl0eU9iamVjdC50cmFuc2Zvcm0ucG9zaXRpb247XG5cbiAgICAgICAgICAgIHRoaXMuX2RyYXdGcm9tTGVmdChwb3NpdGlvbik7XG4gICAgICAgICAgICB0aGlzLl9kcmF3Qm9yZGVyKHBvc2l0aW9uKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX2RyYXdGcm9tTGVmdChwb3NpdGlvbil7XG4gICAgICAgICAgICB2YXIgb2Zmc2NyZWVuQ2FudmFzID0gdGhpcy5fb2ZmU2NyZWVuQ2FudmFzLFxuICAgICAgICAgICAgICAgIGxvYWRlZFdpZHRoID0gdGhpcy53aWR0aCAqIHRoaXMucGVyY2VudDtcblxuICAgICAgICAgICAgdGhpcy5kcmF3SW5DZW50ZXJQb2ludCh0aGlzLmNvbnRleHQsIG9mZnNjcmVlbkNhbnZhcywgMCwgMCwgbG9hZGVkV2lkdGgsIHRoaXMuaGVpZ2h0LFxuICAgICAgICAgICAgICAgIFZlY3RvcjIuY3JlYXRlKHBvc2l0aW9uLnggLSB0aGlzLndpZHRoIC8gMiArIGxvYWRlZFdpZHRoIC8gMiwgcG9zaXRpb24ueSksIGxvYWRlZFdpZHRoLCB0aGlzLmhlaWdodCk7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9kcmF3Qm9yZGVyKHBvc2l0aW9uOlZlY3RvcjIpe1xuICAgICAgICAgICAgUm91bmRlZFJlY3RVdGlscy5kcmF3Um91bmRlZFJlY3QodGhpcy5jb250ZXh0LCB0aGlzLmJvcmRlclN0eWxlLCBudWxsLCBwb3NpdGlvbi54IC0gdGhpcy53aWR0aCAvIDIsIHBvc2l0aW9uLnkgLSB0aGlzLmhlaWdodCAvIDIsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0LCB0aGlzLnJhZGl1cyk7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9jcmVhdGVPZmZTY3JlZW5DYW52YXMoKXtcbiAgICAgICAgICAgIHZhciBjYW52YXMgPSB3ZENiLkRvbVF1ZXJ5LmNyZWF0ZShcIjxjYW52YXM+PC9jYW52YXM+XCIpO1xuXG4gICAgICAgICAgICBjYW52YXMuYXR0cihcIndpZHRoXCIsIHRoaXMuY29udGV4dC5jYW52YXMud2lkdGgpO1xuICAgICAgICAgICAgY2FudmFzLmF0dHIoXCJoZWlnaHRcIiwgdGhpcy5jb250ZXh0LmNhbnZhcy5oZWlnaHQpO1xuXG4gICAgICAgICAgICB0aGlzLl9vZmZTY3JlZW5DYW52YXMgPSBjYW52YXMuZ2V0KDApO1xuXG4gICAgICAgICAgICB0aGlzLl9vZmZTY3JlZW5Db250ZXh0ID0gdGhpcy5fb2ZmU2NyZWVuQ2FudmFzLmdldENvbnRleHQoXCIyZFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX2RyYXdQcm9ncmVzc0Jhcigpe1xuICAgICAgICAgICAgdGhpcy5fb2ZmU2NyZWVuQ29udGV4dC5jbGVhclJlY3QoMCwgMCwgdGhpcy5fb2ZmU2NyZWVuQ2FudmFzLndpZHRoLCB0aGlzLl9vZmZTY3JlZW5DYW52YXMuaGVpZ2h0KTtcblxuICAgICAgICAgICAgUm91bmRlZFJlY3RVdGlscy5kcmF3Um91bmRlZFJlY3QodGhpcy5fb2ZmU2NyZWVuQ29udGV4dCwgdGhpcy5ib3JkZXJTdHlsZSwgdGhpcy5maWxsU3R5bGUsIDAsIDAsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0LCB0aGlzLnJhZGl1cyk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbiIsIm1vZHVsZSB3ZCB7XG4gICAgZnVuY3Rpb24gX2NhblVzZU5ld0NhbnZhc0JsZW5kTW9kZXMoKXtcbiAgICAgICAgdmFyIGNhbnZhcyA9IG51bGwsXG4gICAgICAgICAgICBjb250ZXh0ID0gbnVsbDtcblxuICAgICAgICBpZiAodHlwZW9mIGRvY3VtZW50ID09PSAndW5kZWZpbmVkJyl7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcbiAgICAgICAgY2FudmFzLndpZHRoID0gMTtcbiAgICAgICAgY2FudmFzLmhlaWdodCA9IDE7XG5cbiAgICAgICAgY29udGV4dCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuICAgICAgICBjb250ZXh0LmZpbGxTdHlsZSA9ICcjMDAwJztcbiAgICAgICAgY29udGV4dC5maWxsUmVjdCgwLDAsMSwxKTtcbiAgICAgICAgY29udGV4dC5nbG9iYWxDb21wb3NpdGVPcGVyYXRpb24gPSAnbXVsdGlwbHknO1xuICAgICAgICBjb250ZXh0LmZpbGxTdHlsZSA9ICcjZmZmJztcbiAgICAgICAgY29udGV4dC5maWxsUmVjdCgwLDAsMSwxKTtcblxuICAgICAgICByZXR1cm4gY29udGV4dC5nZXRJbWFnZURhdGEoMCwwLDEsMSkuZGF0YVswXSA9PT0gMDtcbiAgICB9XG4gICAgLy90b2RvIHN1cHBvcnQgLmdpZiBhbmltYXRpb24obm93IGNhbiBvbmx5IHNob3cgc3RhdGljIHBpY3R1cmUpXG4gICAgLy90b2RvIHN1cHBvcnQgZHJhdyBhIHBhcnQgb2YgaW1hZ2UgYXNzZXRcbiAgICBleHBvcnQgY2xhc3MgSW1hZ2UgZXh0ZW5kcyBVSSB7XG4gICAgICAgIC8qIVxuICAgICAgICAgY2FuJ3QgY2hhbmdlIHByb3RvdHlwZSBkaXJlY3RseVxuICAgICAgICAgKGFzOlxuICAgICAgICAgSW1hZ2UucHJvdG90eXBlLl9ibGVuZENvbG9yV2l0aFNvdXJjZSA9IF9jYW5Vc2VOZXdDYW52YXNCbGVuZE1vZGVzKCkgP1xuICAgICAgICAgSW1hZ2UucHJvdG90eXBlLl9ibGVuZEJ5TXVsdGlwbHkgOiBJbWFnZS5wcm90b3R5cGUuX2JsZW5kQnlQZXJQaXhlbDtcbiAgICAgICAgIClcbiAgICAgICAgIGJlY2F1c2UgaXQgcGFzcyBjb21waWxlIHRoYXQgc2F5cyBpdCBjYW4ndCBpbnZva2UgcHJpdmF0ZSBtZXRob2QoX2JsZW5keHh4IGlzIHByaXZhdGUgbWV0aG9kKVxuICAgICAgICAgc28gdXNlIGhhY2sgaGVyZS5cbiAgICAgICAgIHNlZSBtb3JlIGluZm86IGh0dHBzOi8vdHlwZXNjcmlwdC5jb2RlcGxleC5jb20vZGlzY3Vzc2lvbnMvNDQ0Nzc3XG4gICAgICAgICAqL1xuICAgICAgICBwdWJsaWMgc3RhdGljIGNvbnN0cnVjdG9yRm9yQmxlbmQgPSBmdW5jdGlvbihvYmopIHtcbiAgICAgICAgICAgIG9iai5fYmxlbmRDb2xvcldpdGhTb3VyY2UgPSBfY2FuVXNlTmV3Q2FudmFzQmxlbmRNb2RlcygpID9cbiAgICAgICAgICAgICAgICBvYmouX2JsZW5kQnlNdWx0aXBseSA6IG9iai5fYmxlbmRCeVBlclBpeGVsO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH07XG5cbiAgICAgICAgcHVibGljIHN0YXRpYyBjb25zdHJ1Y3RvckluaXRGb3JCbGVuZCA9IEltYWdlLmNvbnN0cnVjdG9yRm9yQmxlbmQoSW1hZ2UucHJvdG90eXBlKTtcblxuICAgICAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZSgpIHtcbiAgICAgICAgICAgIHZhciBvYmogPSBuZXcgdGhpcygpO1xuXG4gICAgICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfc291cmNlOkltYWdlVGV4dHVyZUFzc2V0ID0gbnVsbDtcbiAgICAgICAgZ2V0IHNvdXJjZSgpe1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3NvdXJjZTtcbiAgICAgICAgfVxuICAgICAgICBzZXQgc291cmNlKHNvdXJjZTpJbWFnZVRleHR1cmVBc3NldCl7XG4gICAgICAgICAgICBpZihzb3VyY2UgIT09IHRoaXMuX3NvdXJjZSl7XG4gICAgICAgICAgICAgICAgdGhpcy5fc291cmNlID0gc291cmNlO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5kaXJ0eSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgY29sb3I6Q29sb3IgPSBudWxsO1xuICAgICAgICBwdWJsaWMgdGFyZ2V0U291cmNlOkltYWdlVGV4dHVyZUFzc2V0ID0gbnVsbDtcbiAgICAgICAgcHVibGljIHRhcmdldENvbG9yOkNvbG9yID0gbnVsbDtcblxuICAgICAgICAvL2ltcGxlbWVudCBpdCBpbiBTVEFUSUNfQ09OU1RSVUNUT1JcbiAgICAgICAgcHJpdmF0ZSBfYmxlbmRDb2xvcldpdGhTb3VyY2U6RnVuY3Rpb247XG5cbiAgICAgICAgcHJvdGVjdGVkIHNob3VsZE5vdFVwZGF0ZSgpe1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2dldERyYXdTb3VyY2UoKSA9PT0gbnVsbCAmJiB0aGlzLl9nZXREcmF3Q29sb3IoKSA9PT0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHByb3RlY3RlZCBkcmF3KGVsYXBzZWRUaW1lOm51bWJlcil7XG4gICAgICAgICAgICB2YXIgZHJhd0NvbG9yID0gdGhpcy5fZ2V0RHJhd0NvbG9yKCksXG4gICAgICAgICAgICAgICAgZHJhd1NvdXJjZSA9IHRoaXMuX2dldERyYXdTb3VyY2UoKTtcblxuICAgICAgICAgICAgaWYoZHJhd0NvbG9yICE9PSBudWxsKXtcbiAgICAgICAgICAgICAgICBsZXQgcG9zaXRpb24gPSB0aGlzLmVudGl0eU9iamVjdC50cmFuc2Zvcm0ucG9zaXRpb247XG5cbiAgICAgICAgICAgICAgICB0aGlzLl9zZXRGaWxsU3R5bGUoZHJhd0NvbG9yLnRvU3RyaW5nKCkpO1xuXG4gICAgICAgICAgICAgICAgaWYoZHJhd0NvbG9yLmEgPCAxKXtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2V0R2xvYmFsQWxwaGEodGhpcy5jb250ZXh0LCBkcmF3Q29sb3IuYSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmZpbGxSZWN0KHBvc2l0aW9uLnggLSB0aGlzLndpZHRoIC8gMiwgcG9zaXRpb24ueSAtIHRoaXMuaGVpZ2h0IC8gMiwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQpO1xuXG4gICAgICAgICAgICAgICAgaWYoZHJhd1NvdXJjZSl7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2JsZW5kQ29sb3JXaXRoU291cmNlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICB0aGlzLmRyYXdJbkNlbnRlclBvaW50KHRoaXMuY29udGV4dCwgZHJhd1NvdXJjZS5zb3VyY2UsIHRoaXMuZW50aXR5T2JqZWN0LnRyYW5zZm9ybS5wb3NpdGlvbiwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfc2V0RmlsbFN0eWxlKHN0eWxlOnN0cmluZyl7XG4gICAgICAgICAgICB0aGlzLmNvbnRleHQuZmlsbFN0eWxlID0gc3R5bGU7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9nZXREcmF3U291cmNlKCk6SW1hZ2VUZXh0dXJlQXNzZXR7XG4gICAgICAgICAgICBpZih0aGlzLnRhcmdldFNvdXJjZSl7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudGFyZ2V0U291cmNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zb3VyY2U7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9nZXREcmF3Q29sb3IoKTpDb2xvcntcbiAgICAgICAgICAgIGlmKHRoaXMudGFyZ2V0Q29sb3Ipe1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnRhcmdldENvbG9yO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb2xvcjtcbiAgICAgICAgfVxuXG4gICAgICAgIEByZXF1aXJlKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBhc3NlcnQoISF0aGlzLl9nZXREcmF3U291cmNlKCksIExvZy5pbmZvLkZVTkNfU0hPVUxEKFwic291cmNlXCIsIFwiZXhpc3RcIikpO1xuICAgICAgICB9KVxuICAgICAgICBwcml2YXRlIF9ibGVuZEJ5TXVsdGlwbHkoKXtcbiAgICAgICAgICAgIHRoaXMuX3NldEdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbih0aGlzLmNvbnRleHQsIFwibXVsdGlwbHlcIik7XG5cbiAgICAgICAgICAgIHRoaXMuZHJhd0luQ2VudGVyUG9pbnQodGhpcy5jb250ZXh0LCB0aGlzLl9nZXREcmF3U291cmNlKCkuc291cmNlLCB0aGlzLmVudGl0eU9iamVjdC50cmFuc2Zvcm0ucG9zaXRpb24sIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIEByZXF1aXJlKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBhc3NlcnQoISF0aGlzLl9nZXREcmF3U291cmNlKCksIExvZy5pbmZvLkZVTkNfU0hPVUxEKFwic291cmNlXCIsIFwiZXhpc3RcIikpO1xuICAgICAgICB9KVxuICAgICAgICBwcml2YXRlIF9ibGVuZEJ5UGVyUGl4ZWwoKXtcbiAgICAgICAgICAgIHZhciBjb250ZXh0ID0gdGhpcy5jb250ZXh0LFxuICAgICAgICAgICAgICAgIGNhbnZhcyA9IHRoaXMuZ2V0Q2FudmFzKCksXG4gICAgICAgICAgICAgICAgciA9IHRoaXMuY29sb3IucixcbiAgICAgICAgICAgICAgICBnID0gdGhpcy5jb2xvci5nLFxuICAgICAgICAgICAgICAgIGIgPSB0aGlzLmNvbG9yLmIsXG4gICAgICAgICAgICAgICAgcGl4ZWxEYXRhID0gbnVsbCxcbiAgICAgICAgICAgICAgICBwaXhlbHMgPSBudWxsO1xuXG4gICAgICAgICAgICBjb250ZXh0Lmdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbiA9IFwiY29weVwiO1xuXG4gICAgICAgICAgICB0aGlzLmRyYXdJbkNlbnRlclBvaW50KHRoaXMuY29udGV4dCwgdGhpcy5fZ2V0RHJhd1NvdXJjZSgpLnNvdXJjZSwgdGhpcy5lbnRpdHlPYmplY3QudHJhbnNmb3JtLnBvc2l0aW9uLCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCk7XG5cbiAgICAgICAgICAgIHBpeGVsRGF0YSA9IGNvbnRleHQuZ2V0SW1hZ2VEYXRhKDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7XG4gICAgICAgICAgICBwaXhlbHMgPSBwaXhlbERhdGEuZGF0YTtcblxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHBpeGVscy5sZW5ndGg7IGkgPCBsZW47IGkgKz0gNCkge1xuICAgICAgICAgICAgICAgIHBpeGVsc1tpXSAqPSByO1xuICAgICAgICAgICAgICAgIHBpeGVsc1tpICsgMV0gKj0gZztcbiAgICAgICAgICAgICAgICBwaXhlbHNbaSArIDJdICo9IGI7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnRleHQucHV0SW1hZ2VEYXRhKHBpeGVsRGF0YSwgMCwgMCk7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9zZXRHbG9iYWxDb21wb3NpdGVPcGVyYXRpb24oY29udGV4dDphbnksIG1vZGU6c3RyaW5nKXtcbiAgICAgICAgICAgIGNvbnRleHQuZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uID0gbW9kZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX3NldEdsb2JhbEFscGhhKGNvbnRleHQ6YW55LCBhbHBoYTpudW1iZXIpe1xuICAgICAgICAgICAgY29udGV4dC5nbG9iYWxBbHBoYSA9IGFscGhhO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4iLCJtb2R1bGUgd2R7XG4gICAgZXhwb3J0IGFic3RyYWN0IGNsYXNzIEludGVyYWN0aW9uVUkgZXh0ZW5kcyBVSXtcbiAgICAgICAgcHJvdGVjdGVkIHBfdHJhbnNpdGlvbk1vZGU6VHJhbnNpdGlvbk1vZGUgPSBudWxsO1xuICAgICAgICBnZXQgdHJhbnNpdGlvbk1vZGUoKXtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnBfdHJhbnNpdGlvbk1vZGU7XG4gICAgICAgIH1cbiAgICAgICAgc2V0IHRyYW5zaXRpb25Nb2RlKHRyYW5zaXRpb25Nb2RlOlRyYW5zaXRpb25Nb2RlKXtcbiAgICAgICAgICAgIHRoaXMucF90cmFuc2l0aW9uTW9kZSA9IHRyYW5zaXRpb25Nb2RlO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHRyYW5zaXRpb25NYW5hZ2VyOlRyYW5zaXRpb25NYW5hZ2VyID0gVHJhbnNpdGlvbk1hbmFnZXIuY3JlYXRlKHRoaXMpO1xuICAgIH1cbn1cbiIsIm1vZHVsZSB3ZCB7XG4gICAgZXhwb3J0IGNsYXNzIEJ1dHRvbiBleHRlbmRzIEludGVyYWN0aW9uVUkge1xuICAgICAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZSgpIHtcbiAgICAgICAgICAgIHZhciBvYmogPSBuZXcgdGhpcygpO1xuXG4gICAgICAgICAgICBvYmouaW5pdFdoZW5DcmVhdGUoKTtcblxuICAgICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX3RleHQ6c3RyaW5nID0gbnVsbDtcbiAgICAgICAgZ2V0IHRleHQoKXtcbiAgICAgICAgICAgIHZhciBmb250T2JqZWN0ID0gbnVsbDtcblxuICAgICAgICAgICAgaWYodGhpcy5lbnRpdHlPYmplY3QgPT09IG51bGwpe1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl90ZXh0O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmb250T2JqZWN0ID0gdGhpcy5nZXRPYmplY3QoQnV0dG9uT2JqZWN0TmFtZS5URVhUKTtcblxuICAgICAgICAgICAgaWYoZm9udE9iamVjdCl7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZvbnRPYmplY3QuZ2V0Q29tcG9uZW50KFBsYWluRm9udCkudGV4dDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgc2V0IHRleHQodGV4dDpzdHJpbmcpe1xuICAgICAgICAgICAgdmFyIGZvbnRPYmplY3Q6VUlPYmplY3QgPSBudWxsO1xuXG4gICAgICAgICAgICB0aGlzLl90ZXh0ID0gdGV4dDtcblxuICAgICAgICAgICAgaWYodGhpcy5lbnRpdHlPYmplY3QgPT09IG51bGwgfHwgIXRoaXMuZ2V0VUlSZW5kZXJlcigpKXtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZvbnRPYmplY3QgPSB0aGlzLmdldE9iamVjdChCdXR0b25PYmplY3ROYW1lLlRFWFQpO1xuXG4gICAgICAgICAgICBpZihmb250T2JqZWN0KXtcbiAgICAgICAgICAgICAgICBmb250T2JqZWN0LmdldENvbXBvbmVudDxQbGFpbkZvbnQ+KFBsYWluRm9udCkudGV4dCA9IHRleHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgIHRoaXMuZW50aXR5T2JqZWN0LmFkZENoaWxkKHRoaXMuX2NyZWF0ZUZvbnRPYmplY3QoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBnZXQgaXNEaXNhYmxlZCgpe1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3N0YXRlTWFjaGluZS5jdXJyZW50U3RhdGUgPT09IFVJU3RhdGUuRElTQUJMRUQ7XG4gICAgICAgIH1cblxuICAgICAgICBnZXQgY3VycmVudFN0YXRlKCl7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fc3RhdGVNYWNoaW5lLmN1cnJlbnRTdGF0ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX21vdXNlZG93blN1YnNjcmlwdGlvbjp3ZEZycC5JRGlzcG9zYWJsZSA9IG51bGw7XG4gICAgICAgIHByaXZhdGUgX21vdXNldXBTdWJzY3JpcHRpb246d2RGcnAuSURpc3Bvc2FibGUgPSBudWxsO1xuICAgICAgICBwcml2YXRlIF9tb3VzZW92ZXJTdWJzY3JpcHRpb246d2RGcnAuSURpc3Bvc2FibGUgPSBudWxsO1xuICAgICAgICBwcml2YXRlIF9tb3VzZW91dFN1YnNjcmlwdGlvbjp3ZEZycC5JRGlzcG9zYWJsZSA9IG51bGw7XG4gICAgICAgIHByaXZhdGUgX3N0YXRlTWFjaGluZTpVSVN0YXRlTWFjaGluZSA9IFVJU3RhdGVNYWNoaW5lLmNyZWF0ZSh0aGlzKTtcblxuICAgICAgICBwdWJsaWMgaW5pdFdoZW5DcmVhdGUoKSB7XG4gICAgICAgICAgICB0aGlzLnRyYW5zaXRpb25Nb2RlID0gVHJhbnNpdGlvbk1vZGUuU1BSSVRFO1xuICAgICAgICAgICAgdGhpcy50ZXh0ID0gXCJidXR0b25cIjtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBpbml0KCl7XG4gICAgICAgICAgICBzdXBlci5pbml0KCk7XG5cbiAgICAgICAgICAgIGlmKCF0aGlzLl9oYXNGb250T2JqZWN0KCkpe1xuICAgICAgICAgICAgICAgIHRoaXMuZW50aXR5T2JqZWN0LmFkZENoaWxkKHRoaXMuX2NyZWF0ZUZvbnRPYmplY3QoKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuZW50aXR5T2JqZWN0LmFkZENoaWxkKHRoaXMuX2NyZWF0ZUJhY2tncm91bmRPYmplY3QoKSk7XG5cbiAgICAgICAgICAgIHRoaXMuX2JpbmRFdmVudCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGRpc3Bvc2UoKXtcbiAgICAgICAgICAgIHN1cGVyLmRpc3Bvc2UoKTtcblxuICAgICAgICAgICAgdGhpcy5fbW91c2Vkb3duU3Vic2NyaXB0aW9uLmRpc3Bvc2UoKTtcbiAgICAgICAgICAgIHRoaXMuX21vdXNldXBTdWJzY3JpcHRpb24uZGlzcG9zZSgpO1xuICAgICAgICAgICAgdGhpcy5fbW91c2VvdmVyU3Vic2NyaXB0aW9uLmRpc3Bvc2UoKTtcbiAgICAgICAgICAgIHRoaXMuX21vdXNlb3V0U3Vic2NyaXB0aW9uLmRpc3Bvc2UoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBnZXRPYmplY3Qob2JqZWN0TmFtZTpCdXR0b25PYmplY3ROYW1lKTpVSU9iamVjdHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmVudGl0eU9iamVjdC5maW5kQ2hpbGRCeU5hbWUoPGFueT5vYmplY3ROYW1lKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBnZXRPYmplY3RUcmFuc2l0aW9uKG9iamVjdE5hbWU6QnV0dG9uT2JqZWN0TmFtZSk6VHJhbnNpdGlvbntcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnRyYW5zaXRpb25NYW5hZ2VyLmdldE9iamVjdFRyYW5zaXRpb24ob2JqZWN0TmFtZSk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgZW5hYmxlKCkge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGVNYWNoaW5lLmNoYW5nZVN0YXRlKFVJU3RhdGUuTk9STUFMKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBkaXNhYmxlKCkge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGVNYWNoaW5lLmNoYW5nZVN0YXRlKFVJU3RhdGUuRElTQUJMRUQpO1xuICAgICAgICB9XG5cbiAgICAgICAgQHJlcXVpcmUoZnVuY3Rpb24oZWxhcHNlZFRpbWU6bnVtYmVyKXtcbiAgICAgICAgICAgIGFzc2VydCh0aGlzLmdldE9iamVjdChCdXR0b25PYmplY3ROYW1lLkJBQ0tHUk9VTkQpLmhhc0NvbXBvbmVudChJbWFnZSksIExvZy5pbmZvLkZVTkNfU0hPVUxEKFwiQnV0dG9uIFVJT2JqZWN0XCIsIFwiY29udGFpbiBJbWFnZSBjb21wb25lbnRcIikpO1xuICAgICAgICB9KVxuICAgICAgICBwdWJsaWMgdXBkYXRlKGVsYXBzZWRUaW1lOm51bWJlcikge1xuICAgICAgICAgICAgdmFyIHRhcmdldCA9IHRoaXMudHJhbnNpdGlvbk1hbmFnZXIuZ2V0T2JqZWN0VGFyZ2V0KEJ1dHRvbk9iamVjdE5hbWUuQkFDS0dST1VORCk7XG5cbiAgICAgICAgICAgIGlmKCF0YXJnZXQpe1xuICAgICAgICAgICAgICAgIGxldCBpbWFnZSA9IHRoaXMuZ2V0T2JqZWN0KEJ1dHRvbk9iamVjdE5hbWUuQkFDS0dST1VORCkuZ2V0Q29tcG9uZW50PEltYWdlPihJbWFnZSk7XG5cbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHRoaXMucF90cmFuc2l0aW9uTW9kZSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIFRyYW5zaXRpb25Nb2RlLlNQUklURTpcbiAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlLnRhcmdldFNvdXJjZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBUcmFuc2l0aW9uTW9kZS5DT0xPUjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlLnRhcmdldENvbG9yID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgTG9nLmVycm9yKHRydWUsIExvZy5pbmZvLkZVTkNfVU5FWFBFQ1QoXCJ0cmFuc2l0aW9uTW9kZVwiKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHN3aXRjaCAodGhpcy5wX3RyYW5zaXRpb25Nb2RlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBUcmFuc2l0aW9uTW9kZS5TUFJJVEU6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ2V0T2JqZWN0KEJ1dHRvbk9iamVjdE5hbWUuQkFDS0dST1VORCkuZ2V0Q29tcG9uZW50PEltYWdlPihJbWFnZSkudGFyZ2V0U291cmNlID0gdGFyZ2V0O1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFRyYW5zaXRpb25Nb2RlLkNPTE9SOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmdldE9iamVjdChCdXR0b25PYmplY3ROYW1lLkJBQ0tHUk9VTkQpLmdldENvbXBvbmVudDxJbWFnZT4oSW1hZ2UpLnRhcmdldENvbG9yID0gdGFyZ2V0O1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBMb2cuZXJyb3IodHJ1ZSwgTG9nLmluZm8uRlVOQ19VTkVYUEVDVChcInRyYW5zaXRpb25Nb2RlXCIpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9jcmVhdGVCYWNrZ3JvdW5kT2JqZWN0KCl7XG4gICAgICAgICAgICB2YXIgb2JqZWN0ID0gVUlPYmplY3QuY3JlYXRlKCksXG4gICAgICAgICAgICAgICAgaW1hZ2UgPSBJbWFnZS5jcmVhdGUoKSxcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm0gPSB0aGlzLmVudGl0eU9iamVjdC50cmFuc2Zvcm07XG5cbiAgICAgICAgICAgIG9iamVjdC5hZGRDb21wb25lbnQoaW1hZ2UpO1xuXG4gICAgICAgICAgICBvYmplY3QuYWRkQ29tcG9uZW50KHRoaXMuZ2V0VUlSZW5kZXJlcigpKTtcblxuICAgICAgICAgICAgb2JqZWN0LnRyYW5zZm9ybS53aWR0aCA9IHRyYW5zZm9ybS53aWR0aDtcbiAgICAgICAgICAgIG9iamVjdC50cmFuc2Zvcm0uaGVpZ2h0ID0gdHJhbnNmb3JtLmhlaWdodDtcblxuICAgICAgICAgICAgb2JqZWN0LnRyYW5zZm9ybS56SW5kZXggPSAxO1xuXG4gICAgICAgICAgICBvYmplY3QubmFtZSA9IDxhbnk+QnV0dG9uT2JqZWN0TmFtZS5CQUNLR1JPVU5EO1xuXG4gICAgICAgICAgICByZXR1cm4gb2JqZWN0O1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfY3JlYXRlRm9udE9iamVjdCgpe1xuICAgICAgICAgICAgdmFyIGZvbnRPYmplY3QgPSBVSU9iamVjdC5jcmVhdGUoKSxcbiAgICAgICAgICAgICAgICBmb250ID0gUGxhaW5Gb250LmNyZWF0ZSgpLFxuICAgICAgICAgICAgICAgIHRyYW5zZm9ybSA9IHRoaXMuZW50aXR5T2JqZWN0LnRyYW5zZm9ybTtcblxuICAgICAgICAgICAgZm9udC50ZXh0ID0gdGhpcy5fdGV4dDtcbiAgICAgICAgICAgIGZvbnQuZW5hYmxlRmlsbChcIiMwMDAwMDBcIik7XG4gICAgICAgICAgICBmb250LnhBbGlnbm1lbnQgPSBGb250WEFsaWdubWVudC5DRU5URVI7XG4gICAgICAgICAgICBmb250LnlBbGlnbm1lbnQgPSBGb250WUFsaWdubWVudC5NSURETEU7XG5cbiAgICAgICAgICAgIGZvbnRPYmplY3QuYWRkQ29tcG9uZW50KGZvbnQpO1xuXG4gICAgICAgICAgICBmb250T2JqZWN0LmFkZENvbXBvbmVudCh0aGlzLmdldFVJUmVuZGVyZXIoKSk7XG5cbiAgICAgICAgICAgIGZvbnRPYmplY3QudHJhbnNmb3JtLndpZHRoID0gdHJhbnNmb3JtLndpZHRoO1xuICAgICAgICAgICAgZm9udE9iamVjdC50cmFuc2Zvcm0uaGVpZ2h0ID0gdHJhbnNmb3JtLmhlaWdodDtcblxuICAgICAgICAgICAgZm9udE9iamVjdC50cmFuc2Zvcm0uekluZGV4ID0gMjtcblxuICAgICAgICAgICAgZm9udE9iamVjdC5uYW1lID0gPGFueT5CdXR0b25PYmplY3ROYW1lLlRFWFQ7XG5cbiAgICAgICAgICAgIHJldHVybiBmb250T2JqZWN0O1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfaGFzRm9udE9iamVjdCgpe1xuICAgICAgICAgICAgcmV0dXJuICEhdGhpcy5nZXRPYmplY3QoQnV0dG9uT2JqZWN0TmFtZS5URVhUKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX2JpbmRFdmVudCgpe1xuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgICAgICAgICB0aGlzLl9tb3VzZWRvd25TdWJzY3JpcHRpb24gPSBFdmVudE1hbmFnZXIuZnJvbUV2ZW50KHRoaXMuZW50aXR5T2JqZWN0LCA8YW55PkVuZ2luZUV2ZW50Lk1PVVNFX0RPV04pXG4gICAgICAgICAgICAgICAgLmZpbHRlcigoZTpDdXN0b21FdmVudCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gIXNlbGYuaXNEaXNhYmxlZDtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5zdWJzY3JpYmUoKGU6Q3VzdG9tRXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5fc3RhdGVNYWNoaW5lLmNoYW5nZVN0YXRlKFVJU3RhdGUuUFJFU1NFRCk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHRoaXMuX21vdXNldXBTdWJzY3JpcHRpb24gPSBFdmVudE1hbmFnZXIuZnJvbUV2ZW50KHRoaXMuZW50aXR5T2JqZWN0LCA8YW55PkVuZ2luZUV2ZW50Lk1PVVNFX1VQKVxuICAgICAgICAgICAgICAgIC5maWx0ZXIoKGU6Q3VzdG9tRXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICFzZWxmLmlzRGlzYWJsZWQ7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAuc3Vic2NyaWJlKChlOkN1c3RvbUV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuX3N0YXRlTWFjaGluZS5iYWNrU3RhdGUoKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuXG4gICAgICAgICAgICB0aGlzLl9tb3VzZW92ZXJTdWJzY3JpcHRpb24gPSBFdmVudE1hbmFnZXIuZnJvbUV2ZW50KHRoaXMuZW50aXR5T2JqZWN0LCA8YW55PkVuZ2luZUV2ZW50Lk1PVVNFX09WRVIpXG4gICAgICAgICAgICAgICAgLmZpbHRlcigoZTpDdXN0b21FdmVudCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gIXNlbGYuaXNEaXNhYmxlZDtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5zdWJzY3JpYmUoKGU6Q3VzdG9tRXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5fc3RhdGVNYWNoaW5lLmNoYW5nZVN0YXRlKFVJU3RhdGUuSElHSExJR0hUKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdGhpcy5fbW91c2VvdXRTdWJzY3JpcHRpb24gPSBFdmVudE1hbmFnZXIuZnJvbUV2ZW50KHRoaXMuZW50aXR5T2JqZWN0LCA8YW55PkVuZ2luZUV2ZW50Lk1PVVNFX09VVClcbiAgICAgICAgICAgICAgICAuZmlsdGVyKChlOkN1c3RvbUV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAhc2VsZi5pc0Rpc2FibGVkO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLnN1YnNjcmliZSgoZTpDdXN0b21FdmVudCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBzZWxmLl9zdGF0ZU1hY2hpbmUuYmFja1N0YXRlKCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbiIsIm1vZHVsZSB3ZHtcbiAgICBleHBvcnQgZW51bSBCdXR0b25PYmplY3ROYW1le1xuICAgICAgICBCQUNLR1JPVU5EID0gPGFueT5cImJhY2tncm91bmRcIixcbiAgICAgICAgVEVYVCA9IDxhbnk+XCJ0ZXh0XCJcbiAgICB9XG59XG4iLCJtb2R1bGUgd2R7XG4gICAgZXhwb3J0IGVudW0gVUlTdGF0ZXtcbiAgICAgICAgTk9STUFMLFxuICAgICAgICBISUdITElHSFQsXG4gICAgICAgIFBSRVNTRUQsXG4gICAgICAgIERJU0FCTEVEXG4gICAgfVxufVxuIiwibW9kdWxlIHdke1xuICAgIGV4cG9ydCBjbGFzcyBVSVN0YXRlTWFjaGluZXtcbiAgICAgICAgcHVibGljIHN0YXRpYyBjcmVhdGUodWk6SW50ZXJhY3Rpb25VSSkge1xuICAgICAgICBcdHZhciBvYmogPSBuZXcgdGhpcyh1aSk7XG5cbiAgICAgICAgXHRyZXR1cm4gb2JqO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3RydWN0b3IodWk6SW50ZXJhY3Rpb25VSSl7XG4gICAgICAgICAgICB0aGlzLl91aSA9IHVpO1xuICAgICAgICB9XG5cbiAgICAgICAgZ2V0IHRyYW5zaXRpb25NYW5hZ2VyKCl7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fdWkudHJhbnNpdGlvbk1hbmFnZXI7XG4gICAgICAgIH1cblxuICAgICAgICBnZXQgY3VycmVudFN0YXRlKCl7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fc3RhdGVIaXN0b3J5LnRvcCB8fCBVSVN0YXRlLk5PUk1BTDtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX3VpOkludGVyYWN0aW9uVUkgPSBudWxsO1xuICAgICAgICBwcml2YXRlIF9zdGF0ZUhpc3Rvcnk6d2RDYi5TdGFjazxVSVN0YXRlPiA9IHdkQ2IuU3RhY2suY3JlYXRlPFVJU3RhdGU+KCk7XG5cbiAgICAgICAgcHVibGljIGNoYW5nZVN0YXRlKHN0YXRlOlVJU3RhdGUpe1xuICAgICAgICAgICAgdGhpcy5fc3RhdGVIaXN0b3J5LnB1c2goc3RhdGUpO1xuXG4gICAgICAgICAgICB0aGlzLnRyYW5zaXRpb25NYW5hZ2VyLmNoYW5nZVN0YXRlKHN0YXRlKTtcbiAgICAgICAgICAgIHRoaXMuX3VpLmRpcnR5ID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBiYWNrU3RhdGUoKXtcbiAgICAgICAgICAgIHZhciBsYXN0U3RhdGU6VUlTdGF0ZSA9IG51bGw7XG5cbiAgICAgICAgICAgIHRoaXMuX3N0YXRlSGlzdG9yeS5wb3AoKTtcblxuICAgICAgICAgICAgbGFzdFN0YXRlID0gdGhpcy5fc3RhdGVIaXN0b3J5LnRvcDtcblxuICAgICAgICAgICAgaWYoIWxhc3RTdGF0ZSl7XG4gICAgICAgICAgICAgICAgbGFzdFN0YXRlID0gVUlTdGF0ZS5OT1JNQUw7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMudHJhbnNpdGlvbk1hbmFnZXIuY2hhbmdlU3RhdGUobGFzdFN0YXRlKTtcbiAgICAgICAgICAgIHRoaXMuX3VpLmRpcnR5ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsIm1vZHVsZSB3ZHtcbiAgICBleHBvcnQgYWJzdHJhY3QgY2xhc3MgVHJhbnNpdGlvbntcbiAgICAgICAgcHJpdmF0ZSBfdGFyZ2V0OmFueSA9IG51bGw7XG4gICAgICAgIGdldCB0YXJnZXQoKXtcbiAgICAgICAgICAgIGlmKHRoaXMuX3RhcmdldCA9PT0gbnVsbCl7XG4gICAgICAgICAgICAgICAgdGhpcy5jaGFuZ2VTdGF0ZShVSVN0YXRlLk5PUk1BTCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzLl90YXJnZXQ7XG4gICAgICAgIH1cbiAgICAgICAgc2V0IHRhcmdldCh0YXJnZXQ6YW55KXtcbiAgICAgICAgICAgIHRoaXMuX3RhcmdldCA9IHRhcmdldDtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBhYnN0cmFjdCBjaGFuZ2VTdGF0ZShzdGF0ZTpVSVN0YXRlKTtcbiAgICB9XG59XG4iLCJtb2R1bGUgd2R7XG4gICAgZXhwb3J0IGNsYXNzIFNwcml0ZVRyYW5zaXRpb24gZXh0ZW5kcyBUcmFuc2l0aW9ue1xuICAgICAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZSgpIHtcbiAgICAgICAgXHR2YXIgb2JqID0gbmV3IHRoaXMoKTtcblxuICAgICAgICBcdHJldHVybiBvYmo7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgbm9ybWFsU3ByaXRlOkltYWdlVGV4dHVyZUFzc2V0ID0gbnVsbDtcbiAgICAgICAgcHVibGljIGhpZ2hsaWdodFNwcml0ZTpJbWFnZVRleHR1cmVBc3NldCA9IG51bGw7XG4gICAgICAgIHB1YmxpYyBwcmVzc2VkU3ByaXRlOkltYWdlVGV4dHVyZUFzc2V0ID0gbnVsbDtcbiAgICAgICAgcHVibGljIGRpc2FibGVkU3ByaXRlOkltYWdlVGV4dHVyZUFzc2V0ID0gbnVsbDtcblxuICAgICAgICBwdWJsaWMgY2hhbmdlU3RhdGUoc3RhdGU6VUlTdGF0ZSl7XG4gICAgICAgICAgICBzd2l0Y2ggKHN0YXRlKXtcbiAgICAgICAgICAgICAgICBjYXNlIFVJU3RhdGUuTk9STUFMOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLnRhcmdldCA9IHRoaXMubm9ybWFsU3ByaXRlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFVJU3RhdGUuSElHSExJR0hUOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLnRhcmdldCA9IHRoaXMuaGlnaGxpZ2h0U3ByaXRlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFVJU3RhdGUuUFJFU1NFRDpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50YXJnZXQgPSB0aGlzLnByZXNzZWRTcHJpdGU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgVUlTdGF0ZS5ESVNBQkxFRDpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50YXJnZXQgPSB0aGlzLmRpc2FibGVkU3ByaXRlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBMb2cuZXJyb3IodHJ1ZSwgTG9nLmluZm8uRlVOQ19VTkVYUEVDVChcInN0YXRlXCIpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5cbiIsIm1vZHVsZSB3ZHtcbiAgICBleHBvcnQgY2xhc3MgQ29sb3JUcmFuc2l0aW9uIGV4dGVuZHMgVHJhbnNpdGlvbntcbiAgICAgICAgcHVibGljIHN0YXRpYyBjcmVhdGUoKSB7XG4gICAgICAgIFx0dmFyIG9iaiA9IG5ldyB0aGlzKCk7XG5cbiAgICAgICAgXHRyZXR1cm4gb2JqO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIG5vcm1hbENvbG9yOkNvbG9yID0gbnVsbDtcbiAgICAgICAgcHVibGljIGhpZ2hsaWdodENvbG9yOkNvbG9yID0gbnVsbDtcbiAgICAgICAgcHVibGljIHByZXNzZWRDb2xvcjpDb2xvciA9IG51bGw7XG4gICAgICAgIHB1YmxpYyBkaXNhYmxlZENvbG9yOkNvbG9yID0gbnVsbDtcblxuICAgICAgICBwdWJsaWMgY2hhbmdlU3RhdGUoc3RhdGU6VUlTdGF0ZSl7XG4gICAgICAgICAgICBzd2l0Y2ggKHN0YXRlKXtcbiAgICAgICAgICAgICAgICBjYXNlIFVJU3RhdGUuTk9STUFMOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLnRhcmdldCA9IHRoaXMubm9ybWFsQ29sb3I7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgVUlTdGF0ZS5ISUdITElHSFQ6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudGFyZ2V0ID0gdGhpcy5oaWdobGlnaHRDb2xvcjtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBVSVN0YXRlLlBSRVNTRUQ6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudGFyZ2V0ID0gdGhpcy5wcmVzc2VkQ29sb3I7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgVUlTdGF0ZS5ESVNBQkxFRDpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50YXJnZXQgPSB0aGlzLmRpc2FibGVkQ29sb3I7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIExvZy5lcnJvcih0cnVlLCBMb2cuaW5mby5GVU5DX1VORVhQRUNUKFwic3RhdGVcIikpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cblxuIiwibW9kdWxlIHdke1xuICAgIGV4cG9ydCBlbnVtIFRyYW5zaXRpb25Nb2Rle1xuICAgICAgICBTUFJJVEUsXG4gICAgICAgIENPTE9SXG4gICAgfVxufVxuIiwibW9kdWxlIHdkIHtcbiAgICBleHBvcnQgY2xhc3MgVHJhbnNpdGlvbk1hbmFnZXIge1xuICAgICAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZSh1aTpJbnRlcmFjdGlvblVJKSB7XG4gICAgICAgICAgICB2YXIgb2JqID0gbmV3IHRoaXModWkpO1xuXG4gICAgICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3RydWN0b3IodWk6SW50ZXJhY3Rpb25VSSkge1xuICAgICAgICAgICAgdGhpcy5fdWkgPSB1aTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX3VpOkludGVyYWN0aW9uVUkgPSBudWxsO1xuICAgICAgICBwcml2YXRlIF9zcHJpdGVUcmFuc2l0aW9uTWFwOndkQ2IuSGFzaDxUcmFuc2l0aW9uPiA9IHdkQ2IuSGFzaC5jcmVhdGU8VHJhbnNpdGlvbj4oKTtcbiAgICAgICAgcHJpdmF0ZSBfY29sb3JUcmFuc2l0aW9uTWFwOndkQ2IuSGFzaDxUcmFuc2l0aW9uPiA9IHdkQ2IuSGFzaC5jcmVhdGU8VHJhbnNpdGlvbj4oKTtcblxuICAgICAgICBwdWJsaWMgZ2V0T2JqZWN0VHJhbnNpdGlvbihvYmplY3ROYW1lOkJ1dHRvbk9iamVjdE5hbWUpIHtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSB0aGlzLl9nZXRUcmFuc2l0aW9uTWFwKCkuZ2V0Q2hpbGQoPGFueT5vYmplY3ROYW1lKTtcblxuICAgICAgICAgICAgaWYgKCFyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSB0aGlzLl9jcmVhdGVUcmFuc2l0aW9uSW5zdGFuY2UoKTtcblxuICAgICAgICAgICAgICAgIHRoaXMuX2dldFRyYW5zaXRpb25NYXAoKS5hZGRDaGlsZCg8YW55Pm9iamVjdE5hbWUsIHJlc3VsdCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgZ2V0T2JqZWN0VGFyZ2V0KG9iamVjdE5hbWU6QnV0dG9uT2JqZWN0TmFtZSl7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRPYmplY3RUcmFuc2l0aW9uKG9iamVjdE5hbWUpLnRhcmdldDtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBjaGFuZ2VTdGF0ZShzdGF0ZTpVSVN0YXRlKXtcbiAgICAgICAgICAgIHdkRnJwLmZyb21BcnJheShbXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3Nwcml0ZVRyYW5zaXRpb25NYXAsXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2NvbG9yVHJhbnNpdGlvbk1hcFxuICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgLnN1YnNjcmliZSgobWFwOndkQ2IuSGFzaDxUcmFuc2l0aW9uPikgPT4ge1xuICAgICAgICAgICAgICAgICAgICBtYXAuZm9yRWFjaCgodHJhbnNpdGlvbjpUcmFuc2l0aW9uKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uLmNoYW5nZVN0YXRlKHN0YXRlKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9nZXRUcmFuc2l0aW9uTWFwKCkge1xuICAgICAgICAgICAgdmFyIG1hcDp3ZENiLkhhc2g8VHJhbnNpdGlvbj4gPSBudWxsO1xuXG4gICAgICAgICAgICBzd2l0Y2ggKHRoaXMuX3VpLnRyYW5zaXRpb25Nb2RlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBUcmFuc2l0aW9uTW9kZS5TUFJJVEU6XG4gICAgICAgICAgICAgICAgICAgIG1hcCA9IHRoaXMuX3Nwcml0ZVRyYW5zaXRpb25NYXA7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgVHJhbnNpdGlvbk1vZGUuQ09MT1I6XG4gICAgICAgICAgICAgICAgICAgIG1hcCA9IHRoaXMuX2NvbG9yVHJhbnNpdGlvbk1hcDtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgTG9nLmVycm9yKHRydWUsIExvZy5pbmZvLkZVTkNfVU5FWFBFQ1QoXCJ0cmFuc2l0aW9uTW9kZVwiKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gbWFwO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfY3JlYXRlVHJhbnNpdGlvbkluc3RhbmNlKCl7XG4gICAgICAgICAgICB2YXIgdHJhbnNpdGlvbjpUcmFuc2l0aW9uID0gbnVsbDtcblxuICAgICAgICAgICAgc3dpdGNoICh0aGlzLl91aS50cmFuc2l0aW9uTW9kZSl7XG4gICAgICAgICAgICAgICAgY2FzZSBUcmFuc2l0aW9uTW9kZS5TUFJJVEU6XG4gICAgICAgICAgICAgICAgICAgIHRyYW5zaXRpb24gPSBTcHJpdGVUcmFuc2l0aW9uLmNyZWF0ZSgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFRyYW5zaXRpb25Nb2RlLkNPTE9SOlxuICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uID0gQ29sb3JUcmFuc2l0aW9uLmNyZWF0ZSgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBMb2cuZXJyb3IodHJ1ZSwgTG9nLmluZm8uRlVOQ19VTkVYUEVDVChcInRyYW5zaXRpb25Nb2RlXCIpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB0cmFuc2l0aW9uO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwibW9kdWxlIHdkIHtcbiAgICBleHBvcnQgY2xhc3MgUm91bmRlZFJlY3RVdGlscyB7XG4gICAgICAgIHB1YmxpYyBzdGF0aWMgZHJhd1JvdW5kZWRSZWN0KGNvbnRleHQ6Q2FudmFzUmVuZGVyaW5nQ29udGV4dDJELCBzdHJva2VTdHlsZTpzdHJpbmcsIGZpbGxTdHlsZTpzdHJpbmcsIGNvcm5lclg6bnVtYmVyLCBjb3JuZXJZOm51bWJlciwgd2lkdGg6bnVtYmVyLCBoZWlnaHQ6bnVtYmVyLCBjb3JuZXJSYWRpdXM6bnVtYmVyKSB7XG4gICAgICAgICAgICBjb250ZXh0LnNhdmUoKTtcblxuICAgICAgICAgICAgY29udGV4dC5iZWdpblBhdGgoKTtcblxuICAgICAgICAgICAgaWYgKHdpZHRoID4gMCkge1xuICAgICAgICAgICAgICAgIGNvbnRleHQubW92ZVRvKGNvcm5lclggKyBjb3JuZXJSYWRpdXMsIGNvcm5lclkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29udGV4dC5tb3ZlVG8oY29ybmVyWCAtIGNvcm5lclJhZGl1cywgY29ybmVyWSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnRleHQuYXJjVG8oY29ybmVyWCArIHdpZHRoLCBjb3JuZXJZLCBjb3JuZXJYICsgd2lkdGgsIGNvcm5lclkgKyBoZWlnaHQsIGNvcm5lclJhZGl1cyk7XG4gICAgICAgICAgICBjb250ZXh0LmFyY1RvKGNvcm5lclggKyB3aWR0aCwgY29ybmVyWSArIGhlaWdodCwgY29ybmVyWCwgY29ybmVyWSArIGhlaWdodCwgY29ybmVyUmFkaXVzKTtcbiAgICAgICAgICAgIGNvbnRleHQuYXJjVG8oY29ybmVyWCwgY29ybmVyWSArIGhlaWdodCwgY29ybmVyWCwgY29ybmVyWSwgY29ybmVyUmFkaXVzKTtcblxuICAgICAgICAgICAgaWYgKHdpZHRoID4gMCkge1xuICAgICAgICAgICAgICAgIGNvbnRleHQuYXJjVG8oY29ybmVyWCwgY29ybmVyWSwgY29ybmVyWCArIGNvcm5lclJhZGl1cywgY29ybmVyWSwgY29ybmVyUmFkaXVzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnRleHQuYXJjVG8oY29ybmVyWCwgY29ybmVyWSwgY29ybmVyWCAtIGNvcm5lclJhZGl1cywgY29ybmVyWSwgY29ybmVyUmFkaXVzKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29udGV4dC5jbG9zZVBhdGgoKTtcblxuXG4gICAgICAgICAgICBjb250ZXh0LnN0cm9rZVN0eWxlID0gc3Ryb2tlU3R5bGU7XG5cbiAgICAgICAgICAgIGNvbnRleHQuZmlsbFN0eWxlID0gZmlsbFN0eWxlO1xuXG4gICAgICAgICAgICBpZiAoc3Ryb2tlU3R5bGUpIHtcbiAgICAgICAgICAgICAgICBjb250ZXh0LnN0cm9rZSgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoZmlsbFN0eWxlKSB7XG4gICAgICAgICAgICAgICAgY29udGV4dC5maWxsKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnRleHQucmVzdG9yZSgpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4iLCJtb2R1bGUgd2Qge1xuICAgIGV4cG9ydCBjbGFzcyBKdWRnZVV0aWxzIGV4dGVuZHMgd2RDYi5KdWRnZVV0aWxze1xuICAgICAgICBwdWJsaWMgc3RhdGljIGlzVmlldyhvYmopIHtcbiAgICAgICAgICAgIHJldHVybiAhIW9iaiAmJiBvYmoub2Zmc2V0ICYmIG9iai53aWR0aCAmJiBvYmouaGVpZ2h0ICYmIHRoaXMuaXNGdW5jdGlvbihvYmouZ2V0Q29udGV4dCk7XG4gICAgICAgIH1cblxuXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgaXNFcXVhbCh0YXJnZXQxOmFueSwgdGFyZ2V0Mjphbnkpe1xuICAgICAgICAgICAgaWYoKCF0YXJnZXQxICYmIHRhcmdldDIpIHx8ICh0YXJnZXQxICYmICF0YXJnZXQyKSl7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZih0YXJnZXQxLnVpZCAmJiB0YXJnZXQyLnVpZCl7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRhcmdldDEudWlkID09PSB0YXJnZXQyLnVpZDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHRhcmdldDEgPT09IHRhcmdldDI7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgc3RhdGljIGlzUG93ZXJPZlR3byh2YWx1ZTpudW1iZXIpIHtcbiAgICAgICAgICAgIHJldHVybiAodmFsdWUgJiAodmFsdWUgLSAxKSkgPT09IDAgJiYgdmFsdWUgIT09IDA7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgc3RhdGljIGlzRmxvYXRBcnJheShkYXRhOmFueSl7XG4gICAgICAgICAgICByZXR1cm4gRW50aXR5T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGRhdGEpID09PSBcIltvYmplY3QgRmxvYXQzMkFycmF5XVwiIHx8IEVudGl0eU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChkYXRhKSA9PT0gXCJbb2JqZWN0IEZsb2F0MTZBcnJheV1cIjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qIVxuICAgICAgICBjYW4ndCB1c2UgXCJ0YXJnZXQgaW5zdGFuY2VvZiBpbnRlcmZhY2VcIiFcblxuICAgICAgICByZWZlciB0bzpcbiAgICAgICAgaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8xNDQyNTU2OC9pbnRlcmZhY2UtdHlwZS1jaGVjay13aXRoLXR5cGVzY3JpcHRcbiAgICAgICAgIGh0dHBzOi8vdHlwZXNjcmlwdC5jb2RlcGxleC5jb20vZGlzY3Vzc2lvbnMvNDAxNTAxXG4gICAgICAgICAqL1xuICAgICAgICBwdWJsaWMgc3RhdGljIGlzSW50ZXJmYWNlKHRhcmdldDphbnksIG1lbWJlck9mSW50ZXJmYWNlOnN0cmluZyl7XG4gICAgICAgICAgICByZXR1cm4gISF0YXJnZXRbbWVtYmVyT2ZJbnRlcmZhY2VdO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHN0YXRpYyBpc09jdHJlZU9iamVjdChlbnRpdHlPYmplY3Q6RW50aXR5T2JqZWN0KXtcbiAgICAgICAgICAgIHJldHVybiBlbnRpdHlPYmplY3QuaGFzQ29tcG9uZW50KE9jdHJlZSk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgc3RhdGljIGlzU2VsZihzZWxmOkVudGl0eSwgZW50aXR5T2JqZWN0OkVudGl0eSl7XG4gICAgICAgICAgICByZXR1cm4gc2VsZi51aWQgPT09IGVudGl0eU9iamVjdC51aWQ7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJtb2R1bGUgd2Qge1xuICAgIGV4cG9ydCBjbGFzcyBNYXRoVXRpbHN7XG4gICAgICAgIHB1YmxpYyBzdGF0aWMgY2xhbXAobnVtOm51bWJlciwgYmVsb3c6bnVtYmVyLCB1cDpudW1iZXIpOm51bWJlcntcbiAgICAgICAgICAgIGlmKG51bSA8IGJlbG93KXtcbiAgICAgICAgICAgICAgICByZXR1cm4gYmVsb3c7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmKG51bSA+IHVwKXtcbiAgICAgICAgICAgICAgICByZXR1cm4gdXA7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBudW07XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgc3RhdGljIGJpZ1RoYW4obnVtOm51bWJlciwgYmVsb3c6bnVtYmVyKXtcbiAgICAgICAgICAgIHJldHVybiBudW0gPCBiZWxvdyA/IGJlbG93IDogbnVtO1xuICAgICAgICB9XG5cblxuICAgICAgICAvKipcbiAgICAgICAgICogZ2VuZXJhdGUgbnVtIGluICgwLDEpXG4gICAgICAgICAqIEByZXR1cm5zIHtudW1iZXJ9XG4gICAgICAgICAqL1xuICAgICAgICBwdWJsaWMgc3RhdGljIGdlbmVyYXRlWmVyb1RvT25lKCkge1xuICAgICAgICAgICAgcmV0dXJuIE1hdGgucmFuZG9tKCk7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogZ2VuZXJhdGUgaW50ZWdlciBpbiBbbWluLG1heF1cbiAgICAgICAgICogQHBhcmFtIG1pblxuICAgICAgICAgKiBAcGFyYW0gbWF4XG4gICAgICAgICAqIEByZXR1cm5zIHtudW1iZXJ9XG4gICAgICAgICAqL1xuICAgICAgICBAcmVxdWlyZShmdW5jdGlvbihtaW46bnVtYmVyLCBtYXg6bnVtYmVyKXtcbiAgICAgICAgICAgIGFzc2VydChtaW4gPCBtYXgsIExvZy5pbmZvLkZVTkNfU0hPVUxEKFwibWluXCIsIFwiPCBtYXhcIikpO1xuICAgICAgICB9KVxuICAgICAgICBwdWJsaWMgc3RhdGljIGdlbmVyYXRlSW50ZWdlcihtaW46bnVtYmVyLCBtYXg6bnVtYmVyKSB7XG4gICAgICAgICAgICB2YXIgbWF4ID0gbWF4ICsgMTtcblxuICAgICAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChtYXggLSBtaW4pICsgbWluKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuIiwibW9kdWxlIHdkIHtcbiAgICBleHBvcnQgY2xhc3MgQ29vcmRpbmF0ZVV0aWxze1xuICAgICAgICBAcmVxdWlyZShmdW5jdGlvbigpe1xuICAgICAgICAgICAgYXNzZXJ0KCEhRGV2aWNlTWFuYWdlci5nZXRJbnN0YW5jZSgpLnZpZXcsIExvZy5pbmZvLkZVTkNfU0hPVUxEKFwic2V0IHZpZXdcIikpO1xuICAgICAgICB9KVxuICAgICAgICBwdWJsaWMgc3RhdGljIGNvbnZlcnRXZWJHTFBvc2l0aW9uVG9DYW52YXNQb3NpdGlvbihwb3NpdGlvbjpWZWN0b3IzKXtcbiAgICAgICAgICAgIHZhciB2aWV3ID0gRGV2aWNlTWFuYWdlci5nZXRJbnN0YW5jZSgpLnZpZXc7XG5cbiAgICAgICAgICAgIHJldHVybiBWZWN0b3IyLmNyZWF0ZSh2aWV3LndpZHRoIC8gMiArIHBvc2l0aW9uLngsIHZpZXcuaGVpZ2h0IC8gMiAtIHBvc2l0aW9uLnkpXG4gICAgICAgIH1cblxuICAgICAgICBAcmVxdWlyZShmdW5jdGlvbigpe1xuICAgICAgICAgICAgYXNzZXJ0KCEhRGV2aWNlTWFuYWdlci5nZXRJbnN0YW5jZSgpLnZpZXcsIExvZy5pbmZvLkZVTkNfU0hPVUxEKFwic2V0IHZpZXdcIikpO1xuICAgICAgICB9KVxuICAgICAgICBwdWJsaWMgc3RhdGljIGNvbnZlcnRDYW52YXNQb3NpdGlvblRvV2ViR0xQb3NpdGlvbihwb3NpdGlvbjpWZWN0b3IyKXtcbiAgICAgICAgICAgIHZhciB2aWV3ID0gRGV2aWNlTWFuYWdlci5nZXRJbnN0YW5jZSgpLnZpZXc7XG5cbiAgICAgICAgICAgIHJldHVybiBWZWN0b3IzLmNyZWF0ZShwb3NpdGlvbi54IC0gdmlldy53aWR0aCAvIDIgLCB2aWV3LmhlaWdodCAvIDIgLSBwb3NpdGlvbi55LCAwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgY29udmVydExlZnRDb3JuZXJQb3NpdGlvblRvQ2VudGVyUG9zaXRpb24ocG9zaXRpb246VmVjdG9yMiwgd2lkdGg6bnVtYmVyLCBoZWlnaHQ6bnVtYmVyKXtcbiAgICAgICAgICAgIHJldHVybiBWZWN0b3IyLmNyZWF0ZSh0aGlzLmNvbnZlcnRMZWZ0Q29ybmVyUG9zaXRpb25YVG9DZW50ZXJQb3NpdGlvblgocG9zaXRpb24ueCwgd2lkdGgpLCB0aGlzLmNvbnZlcnRMZWZ0Q29ybmVyUG9zaXRpb25ZVG9DZW50ZXJQb3NpdGlvblkocG9zaXRpb24ueSwgaGVpZ2h0KSk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgc3RhdGljIGNvbnZlcnRMZWZ0Q29ybmVyUG9zaXRpb25YVG9DZW50ZXJQb3NpdGlvblgocG9zaXRpb25YOm51bWJlciwgd2lkdGg6bnVtYmVyKXtcbiAgICAgICAgICAgIHJldHVybiBwb3NpdGlvblggKyB3aWR0aCAvIDI7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgc3RhdGljIGNvbnZlcnRMZWZ0Q29ybmVyUG9zaXRpb25ZVG9DZW50ZXJQb3NpdGlvblkocG9zaXRpb25ZOm51bWJlciwgaGVpZ2h0Om51bWJlcil7XG4gICAgICAgICAgICByZXR1cm4gcG9zaXRpb25ZICsgaGVpZ2h0IC8gMjtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgY29udmVydENlbnRlclBvc2l0aW9uVG9MZWZ0Q29ybmVyUG9zaXRpb24ocG9zaXRpb246VmVjdG9yMiwgd2lkdGg6bnVtYmVyLCBoZWlnaHQ6bnVtYmVyKXtcbiAgICAgICAgICAgIHJldHVybiBWZWN0b3IyLmNyZWF0ZSh0aGlzLmNvbnZlcnRDZW50ZXJQb3NpdGlvblhUb0xlZnRDb3JuZXJQb3NpdGlvblgocG9zaXRpb24ueCwgd2lkdGgpLCB0aGlzLmNvbnZlcnRDZW50ZXJQb3NpdGlvbllUb0xlZnRDb3JuZXJQb3NpdGlvblkocG9zaXRpb24ueSwgaGVpZ2h0KSk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgc3RhdGljIGNvbnZlcnRDZW50ZXJQb3NpdGlvblhUb0xlZnRDb3JuZXJQb3NpdGlvblgocG9zaXRpb25YOm51bWJlciwgd2lkdGg6bnVtYmVyKXtcbiAgICAgICAgICAgIHJldHVybiBwb3NpdGlvblggLSB3aWR0aCAvIDI7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgc3RhdGljIGNvbnZlcnRDZW50ZXJQb3NpdGlvbllUb0xlZnRDb3JuZXJQb3NpdGlvblkocG9zaXRpb25ZOm51bWJlciwgaGVpZ2h0Om51bWJlcil7XG4gICAgICAgICAgICByZXR1cm4gcG9zaXRpb25ZIC0gaGVpZ2h0IC8gMjtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsIm1vZHVsZSB3ZCB7XG4gICAgZXhwb3J0IGNsYXNzIExvZyBleHRlbmRzIHdkQ2IuTG9ne1xuICAgIH1cbn1cblxuIiwibW9kdWxlIHdke1xuICAgIGV4cG9ydCBhYnN0cmFjdCBjbGFzcyBUaW1lQ29udHJvbGxlcntcbiAgICAgICAgcHVibGljIGVsYXBzZWQ6bnVtYmVyID0gbnVsbDtcbiAgICAgICAgcHVibGljIHBhdXNlRWxhcHNlZDpudW1iZXIgPSAwO1xuICAgICAgICBwdWJsaWMgcGF1c2VUaW1lOm51bWJlciA9IG51bGw7XG4gICAgICAgIHB1YmxpYyBzdGFydFRpbWU6bnVtYmVyID0gbnVsbDtcblxuICAgICAgICBwdWJsaWMgc3RhcnQoKSB7XG4gICAgICAgICAgICB0aGlzLnN0YXJ0VGltZSA9IHRoaXMuZ2V0Tm93KCk7XG4gICAgICAgICAgICB0aGlzLnBhdXNlRWxhcHNlZCA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgc3RvcCgpe1xuICAgICAgICAgICAgdGhpcy5zdGFydFRpbWUgPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHBhdXNlKCkge1xuICAgICAgICAgICAgdGhpcy5wYXVzZVRpbWUgPSB0aGlzLmdldE5vdygpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHJlc3VtZSgpe1xuICAgICAgICAgICAgdGhpcy5wYXVzZUVsYXBzZWQgKz0gdGhpcy5nZXROb3coKSAtIHRoaXMucGF1c2VUaW1lO1xuICAgICAgICAgICAgdGhpcy5wYXVzZVRpbWUgPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGNvbXB1dGVFbGFwc2VUaW1lKHRpbWU6bnVtYmVyKXtcbiAgICAgICAgICAgIGlmKHRoaXMucGF1c2VFbGFwc2VkKXtcbiAgICAgICAgICAgICAgICB0aGlzLmVsYXBzZWQgPSB0aW1lIC0gdGhpcy5wYXVzZUVsYXBzZWQgLSB0aGlzLnN0YXJ0VGltZTtcblxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmVsYXBzZWQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuZWxhcHNlZCA9IHRpbWUgLSB0aGlzLnN0YXJ0VGltZTtcblxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWxhcHNlZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHByb3RlY3RlZCBhYnN0cmFjdCBnZXROb3coKTtcbiAgICB9XG59XG4iLCJtb2R1bGUgd2R7XG4gICAgY29uc3QgU1RBUlRJTkdfRlBTID0gNjAsXG4gICAgICAgIEdBTUVUSU1FX1NDQUxFID0gMTAwMDtcblxuICAgIGV4cG9ydCBjbGFzcyBEaXJlY3RvclRpbWVDb250cm9sbGVyIGV4dGVuZHMgVGltZUNvbnRyb2xsZXJ7XG4gICAgICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlKCkge1xuICAgICAgICAgICAgdmFyIG9iaiA9IG5ldyB0aGlzKCk7XG5cbiAgICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgZ2FtZVRpbWU6bnVtYmVyID0gbnVsbDtcbiAgICAgICAgcHVibGljIGZwczpudW1iZXIgPSBudWxsO1xuICAgICAgICBwdWJsaWMgaXNUaW1lQ2hhbmdlOmJvb2xlYW4gPSBmYWxzZTtcbiAgICAgICAgcHVibGljIGRlbHRhVGltZTpudW1iZXIgPSBudWxsO1xuXG4gICAgICAgIHByaXZhdGUgX2xhc3RUaW1lOm51bWJlciA9IG51bGw7XG5cbiAgICAgICAgcHVibGljIHRpY2sodGltZTpudW1iZXIpIHtcbiAgICAgICAgICAgIHRoaXMuZGVsdGFUaW1lID0gdGhpcy5fbGFzdFRpbWUgIT09IG51bGwgPyB0aW1lIC0gdGhpcy5fbGFzdFRpbWUgOiB0aW1lO1xuICAgICAgICAgICAgdGhpcy5fdXBkYXRlRnBzKHRoaXMuZGVsdGFUaW1lKTtcbiAgICAgICAgICAgIHRoaXMuZ2FtZVRpbWUgPSB0aW1lIC8gR0FNRVRJTUVfU0NBTEU7XG5cbiAgICAgICAgICAgIHRoaXMuX2xhc3RUaW1lID0gdGltZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBzdGFydCgpe1xuICAgICAgICAgICAgc3VwZXIuc3RhcnQoKTtcblxuICAgICAgICAgICAgdGhpcy5pc1RpbWVDaGFuZ2UgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5lbGFwc2VkID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyByZXN1bWUoKXtcbiAgICAgICAgICAgIHN1cGVyLnJlc3VtZSgpO1xuXG4gICAgICAgICAgICB0aGlzLmlzVGltZUNoYW5nZSA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBwcm90ZWN0ZWQgZ2V0Tm93KCl7XG4gICAgICAgICAgICByZXR1cm4gcm9vdC5wZXJmb3JtYW5jZS5ub3coKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX3VwZGF0ZUZwcyhkZWx0YVRpbWU6bnVtYmVyKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5fbGFzdFRpbWUgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmZwcyA9IFNUQVJUSU5HX0ZQUztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuZnBzID0gMTAwMCAvIGRlbHRhVGltZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbiIsIm1vZHVsZSB3ZCB7XG4gICAgZXhwb3J0IGNsYXNzIENvbW1vblRpbWVDb250cm9sbGVyIGV4dGVuZHMgVGltZUNvbnRyb2xsZXIge1xuICAgICAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZSgpIHtcbiAgICAgICAgICAgIHZhciBvYmogPSBuZXcgdGhpcygpO1xuXG4gICAgICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJvdGVjdGVkIGdldE5vdygpe1xuICAgICAgICAgICAgaWYoRGlyZWN0b3IuZ2V0SW5zdGFuY2UoKS5pc1RpbWVDaGFuZ2Upe1xuICAgICAgICAgICAgICAgIHJldHVybiBEaXJlY3Rvci5nZXRJbnN0YW5jZSgpLmVsYXBzZWQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiByb290LnBlcmZvcm1hbmNlLm5vdygpO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwibW9kdWxlIHdkIHtcbiAgICBleHBvcnQgYWJzdHJhY3QgY2xhc3MgUmVuZGVyVGFyZ2V0UmVuZGVyZXJ7XG4gICAgICAgIGNvbnN0cnVjdG9yKHJlbmRlclRhcmdldFRleHR1cmU6UmVuZGVyVGFyZ2V0VGV4dHVyZSl7XG4gICAgICAgICAgICB0aGlzLnRleHR1cmUgPSByZW5kZXJUYXJnZXRUZXh0dXJlO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJvdGVjdGVkIHRleHR1cmU6UmVuZGVyVGFyZ2V0VGV4dHVyZSA9IG51bGw7XG4gICAgICAgIHByb3RlY3RlZCBmcmFtZUJ1ZmZlck9wZXJhdG9yOkZyYW1lQnVmZmVyID0gbnVsbDtcblxuICAgICAgICBwdWJsaWMgaW5pdFdoZW5DcmVhdGUoKXtcbiAgICAgICAgICAgIHRoaXMuZnJhbWVCdWZmZXJPcGVyYXRvciA9IEZyYW1lQnVmZmVyLmNyZWF0ZSh0aGlzLnRleHR1cmUud2lkdGgsIHRoaXMudGV4dHVyZS5oZWlnaHQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGluaXQoKXtcbiAgICAgICAgICAgIHRoaXMudGV4dHVyZS5jcmVhdGVFbXB0eVRleHR1cmUoKTtcbiAgICAgICAgICAgIHRoaXMuaW5pdEZyYW1lQnVmZmVyKCk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgcmVuZGVyKHJlbmRlcmVyOlJlbmRlcmVyLCBjYW1lcmE6R2FtZU9iamVjdCl7XG4gICAgICAgICAgICB0aGlzLmJlZm9yZVJlbmRlcigpO1xuICAgICAgICAgICAgdGhpcy5yZW5kZXJGcmFtZUJ1ZmZlclRleHR1cmUocmVuZGVyZXIsIGNhbWVyYSk7XG4gICAgICAgICAgICB0aGlzLmFmdGVyUmVuZGVyKCk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgZGlzcG9zZSgpe1xuICAgICAgICAgICAgdGhpcy5mcmFtZUJ1ZmZlck9wZXJhdG9yLmRpc3Bvc2UoKTtcbiAgICAgICAgICAgIHRoaXMuZGlzcG9zZUZyYW1lQnVmZmVyKCk7XG4gICAgICAgICAgICB0aGlzLnRleHR1cmUuZGlzcG9zZSgpO1xuICAgICAgICB9XG5cblxuICAgICAgICBwcm90ZWN0ZWQgYWJzdHJhY3QgaW5pdEZyYW1lQnVmZmVyKCk7XG4gICAgICAgIHByb3RlY3RlZCBhYnN0cmFjdCByZW5kZXJGcmFtZUJ1ZmZlclRleHR1cmUocmVuZGVyZXI6UmVuZGVyZXIsIGNhbWVyYTpHYW1lT2JqZWN0KTtcbiAgICAgICAgcHJvdGVjdGVkIGFic3RyYWN0IGRpc3Bvc2VGcmFtZUJ1ZmZlcigpO1xuICAgICAgICBwcm90ZWN0ZWQgYWJzdHJhY3QgY3JlYXRlQ2FtZXJhKC4uLmFyZ3MpOkdhbWVPYmplY3Q7XG5cbiAgICAgICAgQHZpcnR1YWxcbiAgICAgICAgcHJvdGVjdGVkIGJlZm9yZVJlbmRlcigpe1xuICAgICAgICB9XG5cbiAgICAgICAgQHZpcnR1YWxcbiAgICAgICAgcHJvdGVjdGVkIGFmdGVyUmVuZGVyKCl7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbiIsIm1vZHVsZSB3ZCB7XG4gICAgZXhwb3J0IGFic3RyYWN0IGNsYXNzIFR3b0RSZW5kZXJUYXJnZXRSZW5kZXJlciBleHRlbmRzIFJlbmRlclRhcmdldFJlbmRlcmVye1xuICAgICAgICAvL3Byb3RlY3RlZCBmcmFtZUJ1ZmZlcjpGcmFtZUJ1ZmZlciA9IG51bGw7XG4gICAgICAgIC8vcHJvdGVjdGVkIGZyYW1lQnVmZmVyVGV4dHVyZTpXZWJHTFRleHR1cmUgPSBudWxsO1xuICAgICAgICBwcm90ZWN0ZWQgZnJhbWVCdWZmZXI6V2ViR0xGcmFtZWJ1ZmZlciA9IG51bGw7XG4gICAgICAgIHByb3RlY3RlZCByZW5kZXJCdWZmZXI6V2ViR0xSZW5kZXJidWZmZXI9IG51bGw7XG5cbiAgICAgICAgcHJvdGVjdGVkIGFic3RyYWN0IGJlZm9yZVJlbmRlckZyYW1lQnVmZmVyVGV4dHVyZShyZW5kZXJDYW1lcmE6R2FtZU9iamVjdCk7XG4gICAgICAgIHByb3RlY3RlZCBhYnN0cmFjdCBnZXRSZW5kZXJMaXN0KCk6d2RDYi5Db2xsZWN0aW9uPEdhbWVPYmplY3Q+O1xuICAgICAgICBwcm90ZWN0ZWQgYWJzdHJhY3QgcmVuZGVyUmVuZGVyZXIocmVuZGVyZXI6UmVuZGVyZXIpO1xuXG4gICAgICAgIHByaXZhdGUgX2xhc3RDYW1lcmE6R2FtZU9iamVjdCA9IG51bGw7XG5cbiAgICAgICAgcHJvdGVjdGVkIGluaXRGcmFtZUJ1ZmZlcigpe1xuICAgICAgICAgICAgdmFyIGZyYW1lQnVmZmVyID0gdGhpcy5mcmFtZUJ1ZmZlck9wZXJhdG9yLFxuICAgICAgICAgICAgICAgIGdsID0gRGV2aWNlTWFuYWdlci5nZXRJbnN0YW5jZSgpLmdsO1xuXG4gICAgICAgICAgICB0aGlzLmZyYW1lQnVmZmVyID0gZnJhbWVCdWZmZXIuY3JlYXRlRnJhbWVCdWZmZXIoKTtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyQnVmZmVyID0gZnJhbWVCdWZmZXIuY3JlYXRlUmVuZGVyQnVmZmVyKCk7XG5cbiAgICAgICAgICAgIGZyYW1lQnVmZmVyLmJpbmRGcmFtZUJ1ZmZlcih0aGlzLmZyYW1lQnVmZmVyKTtcbiAgICAgICAgICAgIGZyYW1lQnVmZmVyLmF0dGFjaFRleHR1cmUoZ2wuVEVYVFVSRV8yRCwgdGhpcy50ZXh0dXJlLmdsVGV4dHVyZSk7XG4gICAgICAgICAgICBmcmFtZUJ1ZmZlci5hdHRhY2hSZW5kZXJCdWZmZXIoXCJERVBUSF9BVFRBQ0hNRU5UXCIsIHRoaXMucmVuZGVyQnVmZmVyKTtcbiAgICAgICAgICAgIGZyYW1lQnVmZmVyLmNoZWNrKCk7XG4gICAgICAgICAgICBmcmFtZUJ1ZmZlci51bkJpbmQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByb3RlY3RlZCByZW5kZXJGcmFtZUJ1ZmZlclRleHR1cmUocmVuZGVyZXI6UmVuZGVyZXIsIGNhbWVyYTpHYW1lT2JqZWN0KXtcbiAgICAgICAgICAgIHZhciByZW5kZXJDYW1lcmEgPSB0aGlzLmNyZWF0ZUNhbWVyYShjYW1lcmEpO1xuXG4gICAgICAgICAgICBpZih0aGlzLl9sYXN0Q2FtZXJhKXtcbiAgICAgICAgICAgICAgICB0aGlzLl9sYXN0Q2FtZXJhLmRpc3Bvc2UoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5fbGFzdENhbWVyYSA9IHJlbmRlckNhbWVyYTtcblxuICAgICAgICAgICAgdGhpcy5iZWZvcmVSZW5kZXJGcmFtZUJ1ZmZlclRleHR1cmUocmVuZGVyQ2FtZXJhKTtcblxuICAgICAgICAgICAgdGhpcy5mcmFtZUJ1ZmZlck9wZXJhdG9yLmJpbmRGcmFtZUJ1ZmZlcih0aGlzLmZyYW1lQnVmZmVyKTtcbiAgICAgICAgICAgIHRoaXMudGV4dHVyZS5iaW5kVG9Vbml0KDApO1xuICAgICAgICAgICAgdGhpcy5mcmFtZUJ1ZmZlck9wZXJhdG9yLnNldFZpZXdwb3J0KCk7XG5cblxuICAgICAgICAgICAgLy90b2RvIGlmIHJlbmRlckxpc3QgaXMgbnVsbCwgZHJhdyBhbGxcbiAgICAgICAgICAgIC8vdG9kbyBvcHRpbWl6ZTppZiByZW5kZXJPYmplY3QgaXMgYmVoaW5kIHBsYW5lLCBub3QgcmVuZGVyIGl0IVxuICAgICAgICAgICAgdGhpcy5nZXRSZW5kZXJMaXN0KCkuZm9yRWFjaCgoY2hpbGQ6R2FtZU9iamVjdCkgPT4ge1xuICAgICAgICAgICAgICAgIGNoaWxkLnJlbmRlcihyZW5kZXJlciwgcmVuZGVyQ2FtZXJhKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB0aGlzLnJlbmRlclJlbmRlcmVyKHJlbmRlcmVyKTtcblxuICAgICAgICAgICAgdGhpcy5mcmFtZUJ1ZmZlck9wZXJhdG9yLnVuQmluZCgpO1xuICAgICAgICAgICAgdGhpcy5mcmFtZUJ1ZmZlck9wZXJhdG9yLnJlc3RvcmVWaWV3cG9ydCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJvdGVjdGVkIGRpc3Bvc2VGcmFtZUJ1ZmZlcigpe1xuICAgICAgICAgICAgdmFyIGdsID0gRGV2aWNlTWFuYWdlci5nZXRJbnN0YW5jZSgpLmdsO1xuXG4gICAgICAgICAgICBnbC5kZWxldGVGcmFtZWJ1ZmZlcih0aGlzLmZyYW1lQnVmZmVyKTtcbiAgICAgICAgICAgIGdsLmRlbGV0ZVJlbmRlcmJ1ZmZlcih0aGlzLnJlbmRlckJ1ZmZlcik7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbiIsIm1vZHVsZSB3ZCB7XG4gICAgZGVjbGFyZSB2YXIgTWF0aDphbnk7XG5cbiAgICBleHBvcnQgY2xhc3MgTWlycm9yUmVuZGVyVGFyZ2V0UmVuZGVyZXIgZXh0ZW5kcyBUd29EUmVuZGVyVGFyZ2V0UmVuZGVyZXJ7XG4gICAgICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlKG1pcnJvclRleHR1cmU6TWlycm9yVGV4dHVyZSkge1xuICAgICAgICAgICAgdmFyIG9iaiA9IG5ldyB0aGlzKG1pcnJvclRleHR1cmUpO1xuXG4gICAgICAgICAgICBvYmouaW5pdFdoZW5DcmVhdGUoKTtcblxuICAgICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgfVxuXG4gICAgICAgIHByb3RlY3RlZCB0ZXh0dXJlOk1pcnJvclRleHR1cmU7XG5cblxuICAgICAgICBwcm90ZWN0ZWQgYmVmb3JlUmVuZGVyRnJhbWVCdWZmZXJUZXh0dXJlKHJlbmRlckNhbWVyYTpHYW1lT2JqZWN0KXtcbiAgICAgICAgfVxuXG4gICAgICAgIHByb3RlY3RlZCBnZXRSZW5kZXJMaXN0KCk6d2RDYi5Db2xsZWN0aW9uPEdhbWVPYmplY3Q+e1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudGV4dHVyZS5yZW5kZXJMaXN0O1xuICAgICAgICB9XG4gICAgICAgIHByb3RlY3RlZCByZW5kZXJSZW5kZXJlcihyZW5kZXJlcil7XG4gICAgICAgICAgICB0aGlzLl9zZXRTY2VuZVNpZGUoU2lkZS5CQUNLKTtcbiAgICAgICAgICAgIHJlbmRlcmVyLnJlbmRlcigpO1xuICAgICAgICAgICAgdGhpcy5fc2V0U2NlbmVTaWRlKG51bGwpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJvdGVjdGVkIGNyZWF0ZUNhbWVyYShjYW1lcmE6R2FtZU9iamVjdCk6R2FtZU9iamVjdHtcbiAgICAgICAgICAgIHZhciBtaXJyb3JDYW1lcmFDb21wb25lbnQgPSBudWxsLFxuICAgICAgICAgICAgICAgIHBsYW5lID0gbnVsbCxcbiAgICAgICAgICAgICAgICBjYW1lcmFDb21wb25lbnQ6Q2FtZXJhQ29udHJvbGxlciA9IGNhbWVyYS5nZXRDb21wb25lbnQ8Q2FtZXJhQ29udHJvbGxlcj4oQ2FtZXJhQ29udHJvbGxlciksXG4gICAgICAgICAgICAgICAgbWlycm9yQ2FtZXJhVmlld01hdHJpeCA9IG51bGwsXG4gICAgICAgICAgICAgICAgcHJvamVjdGlvbk1hdHJpeCA9IG51bGw7XG5cbiAgICAgICAgICAgIHBsYW5lID0gdGhpcy50ZXh0dXJlLmdldFBsYW5lKCk7XG5cbiAgICAgICAgICAgIG1pcnJvckNhbWVyYVZpZXdNYXRyaXggPVxuICAgICAgICAgICAgICAgIHBsYW5lLmdldFJlZmxlY3Rpb25NYXRyaXgoKS5hcHBseU1hdHJpeChjYW1lcmFDb21wb25lbnQud29ybGRUb0NhbWVyYU1hdHJpeCk7XG5cbiAgICAgICAgICAgIC8vdG9kbyBvcHRpbWl6ZShkaXJ0eSlcbiAgICAgICAgICAgIHByb2plY3Rpb25NYXRyaXggPSB0aGlzLl9zZXRDbGlwUGxhbmUobWlycm9yQ2FtZXJhVmlld01hdHJpeCwgY2FtZXJhQ29tcG9uZW50LnBNYXRyaXgsIHBsYW5lKTtcbiAgICAgICAgICAgIG1pcnJvckNhbWVyYUNvbXBvbmVudCA9IFBlcnNwZWN0aXZlQ2FtZXJhLmNyZWF0ZSgpO1xuICAgICAgICAgICAgbWlycm9yQ2FtZXJhQ29tcG9uZW50LndvcmxkVG9DYW1lcmFNYXRyaXggPSBtaXJyb3JDYW1lcmFWaWV3TWF0cml4LmNvcHkoKTtcbiAgICAgICAgICAgIG1pcnJvckNhbWVyYUNvbXBvbmVudC5wTWF0cml4ID0gcHJvamVjdGlvbk1hdHJpeDtcblxuICAgICAgICAgICAgcmV0dXJuIEdhbWVPYmplY3QuY3JlYXRlKCkuYWRkQ29tcG9uZW50KHdkLkJhc2ljQ2FtZXJhQ29udHJvbGxlci5jcmVhdGUobWlycm9yQ2FtZXJhQ29tcG9uZW50KSkuaW5pdCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfc2V0U2NlbmVTaWRlKHNpZGU6U2lkZSl7XG4gICAgICAgICAgICB2YXIgc2NlbmUgPSBEaXJlY3Rvci5nZXRJbnN0YW5jZSgpLnNjZW5lO1xuXG4gICAgICAgICAgICBzY2VuZS5zaWRlID0gc2lkZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX3NldENsaXBQbGFuZSh2TWF0cml4Ok1hdHJpeDQsIHBNYXRyaXg6TWF0cml4NCwgcGxhbmU6UGxhbmUpOk1hdHJpeDR7XG4gICAgICAgICAgICB2YXIgcHJvamVjdGlvbk1hdHJpeCA9IHBNYXRyaXguY29weSgpLFxuICAgICAgICAgICAgICAgIHEgPSBWZWN0b3I0LmNyZWF0ZSgpLFxuICAgICAgICAgICAgICAgIGNsaXBQbGFuZSA9IHRoaXMuX2dldENsaXBQbGFuZUluQ2FtZXJhU3BhY2Uodk1hdHJpeCwgcGxhbmUpLFxuICAgICAgICAgICAgICAgIGMgPSBWZWN0b3I0LmNyZWF0ZSgpO1xuXG4gICAgICAgICAgICBxLnggPSAoIE1hdGguc2lnbiggY2xpcFBsYW5lLnggKSArIHByb2plY3Rpb25NYXRyaXgudmFsdWVzWyA4IF0gKSAvIHByb2plY3Rpb25NYXRyaXgudmFsdWVzWyAwIF07XG4gICAgICAgICAgICBxLnkgPSAoIE1hdGguc2lnbiggY2xpcFBsYW5lLnkgKSArIHByb2plY3Rpb25NYXRyaXgudmFsdWVzWyA5IF0gKSAvIHByb2plY3Rpb25NYXRyaXgudmFsdWVzWyA1IF07XG4gICAgICAgICAgICBxLnogPSAtIDEuMDtcbiAgICAgICAgICAgIHEudyA9ICggMS4wICsgcHJvamVjdGlvbk1hdHJpeC52YWx1ZXNbIDEwIF0gKSAvIHByb2plY3Rpb25NYXRyaXgudmFsdWVzWyAxNCBdO1xuXG4gICAgICAgICAgICBjID0gY2xpcFBsYW5lLm11bHRpcGx5U2NhbGFyKCAyLjAgLyBjbGlwUGxhbmUuZG90KCBxICkgKTtcblxuICAgICAgICAgICAgcHJvamVjdGlvbk1hdHJpeC52YWx1ZXNbIDIgXSA9IGMueDtcbiAgICAgICAgICAgIHByb2plY3Rpb25NYXRyaXgudmFsdWVzWyA2IF0gPSBjLnk7XG4gICAgICAgICAgICBwcm9qZWN0aW9uTWF0cml4LnZhbHVlc1sgMTAgXSA9IGMueiArIDEuMDtcbiAgICAgICAgICAgIHByb2plY3Rpb25NYXRyaXgudmFsdWVzWyAxNCBdID0gYy53O1xuXG4gICAgICAgICAgICByZXR1cm4gcHJvamVjdGlvbk1hdHJpeDtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX2dldENsaXBQbGFuZUluQ2FtZXJhU3BhY2Uodk1hdHJpeDpNYXRyaXg0LCBwbGFuZTpQbGFuZSl7XG4gICAgICAgICAgICB2YXIgY2xpcFBsYW5lID0gVmVjdG9yNC5jcmVhdGUoKSxcbiAgICAgICAgICAgICAgICBwID0gdk1hdHJpeC5tdWx0aXBseVBvaW50KHRoaXMudGV4dHVyZS5nZXRQb3NpdGlvbigpKSxcbiAgICAgICAgICAgICAgICBuID0gdk1hdHJpeC5jb3B5KCkuaW52ZXJ0KCkudHJhbnNwb3NlKCkubXVsdGlwbHlQb2ludChwbGFuZS5ub3JtYWwpLm5vcm1hbGl6ZSgpO1xuXG4gICAgICAgICAgICBjbGlwUGxhbmUuc2V0KG4ueCwgbi55LCBuLnosIC1wLmRvdChuKSk7XG5cbiAgICAgICAgICAgIHJldHVybiBjbGlwUGxhbmU7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbiIsIm1vZHVsZSB3ZCB7XG4gICAgZXhwb3J0IGNsYXNzIFR3b0RTaGFkb3dNYXBSZW5kZXJUYXJnZXRSZW5kZXJlciBleHRlbmRzIFR3b0RSZW5kZXJUYXJnZXRSZW5kZXJlcntcbiAgICAgICAgcHVibGljIHN0YXRpYyBjcmVhdGUobGlnaHQ6RGlyZWN0aW9uTGlnaHQpIHtcbiAgICAgICAgICAgIHZhciBvYmogPSBuZXcgdGhpcyhsaWdodCk7XG5cbiAgICAgICAgICAgIG9iai5pbml0V2hlbkNyZWF0ZSgpO1xuXG4gICAgICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3RydWN0b3IobGlnaHQ6RGlyZWN0aW9uTGlnaHQpe1xuICAgICAgICAgICAgc3VwZXIobGlnaHQuc2hhZG93TWFwKTtcblxuICAgICAgICAgICAgdGhpcy5fbGlnaHQgPSBsaWdodDtcbiAgICAgICAgfVxuXG4gICAgICAgIHByb3RlY3RlZCB0ZXh0dXJlOlR3b0RTaGFkb3dNYXBUZXh0dXJlO1xuXG4gICAgICAgIHByaXZhdGUgX2xpZ2h0OkRpcmVjdGlvbkxpZ2h0ID0gbnVsbDtcblxuICAgICAgICBwcml2YXRlIF9zaGFkb3dNYXBSZW5kZXJlclV0aWxzOlR3b0RTaGFkb3dNYXBSZW5kZXJUYXJnZXRSZW5kZXJlclV0aWxzID0gbnVsbDtcblxuICAgICAgICBwdWJsaWMgaW5pdFdoZW5DcmVhdGUoKXtcbiAgICAgICAgICAgIHRoaXMuX3NoYWRvd01hcFJlbmRlcmVyVXRpbHMgPSBUd29EU2hhZG93TWFwUmVuZGVyVGFyZ2V0UmVuZGVyZXJVdGlscy5jcmVhdGUodGhpcy5fbGlnaHQsIHRoaXMudGV4dHVyZSk7XG5cbiAgICAgICAgICAgIHN1cGVyLmluaXRXaGVuQ3JlYXRlKCk7XG4gICAgICAgIH1cblxuXG4gICAgICAgIHB1YmxpYyBpbml0KCl7XG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICAgICAgICAgIHRoaXMuX2hhbmRsZVNoYWRvd1JlbmRlcmVyTGlzdCgpO1xuXG4gICAgICAgICAgICB0aGlzLl9zaGFkb3dNYXBSZW5kZXJlclV0aWxzLmJpbmRFbmRMb29wKCgpID0+IHtcbiAgICAgICAgICAgICAgICAvL2hlcmUgbm90IG5lZWQgcmVtb3ZlUmVwZWF0SXRlbXNcbiAgICAgICAgICAgICAgICBzZWxmLl9saWdodC5zaGFkb3dSZW5kZXJMaXN0LmZvckVhY2goKGNoaWxkOkdhbWVPYmplY3QpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5fc2hhZG93TWFwUmVuZGVyZXJVdGlscy5jbGVhclR3b0RTaGFkb3dNYXBEYXRhKGNoaWxkKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB0aGlzLl9zaGFkb3dNYXBSZW5kZXJlclV0aWxzLmNyZWF0ZVNoYWRlcldpdGhTaGFkZXJMaWIoQnVpbGRUd29EU2hhZG93TWFwU2hhZGVyTGliLmNyZWF0ZSgpKTtcblxuICAgICAgICAgICAgc3VwZXIuaW5pdCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGRpc3Bvc2UoKXtcbiAgICAgICAgICAgIHN1cGVyLmRpc3Bvc2UoKTtcblxuICAgICAgICAgICAgdGhpcy5fc2hhZG93TWFwUmVuZGVyZXJVdGlscy51bkJpbmRFbmRMb29wKCk7XG4gICAgICAgIH1cblxuICAgICAgICBwcm90ZWN0ZWQgYmVmb3JlUmVuZGVyRnJhbWVCdWZmZXJUZXh0dXJlKHJlbmRlckNhbWVyYTpHYW1lT2JqZWN0KXtcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgICAgICAgICAgLy9oZXJlIG5lZWQgcmVtb3ZlUmVwZWF0SXRlbXNcbiAgICAgICAgICAgIHRoaXMuX2xpZ2h0LnNoYWRvd1JlbmRlckxpc3QucmVtb3ZlUmVwZWF0SXRlbXMoKS5mb3JFYWNoKChjaGlsZDpHYW1lT2JqZWN0KSA9PiB7XG4gICAgICAgICAgICAgICAgc2VsZi5fc2hhZG93TWFwUmVuZGVyZXJVdGlscy5zZXRTaGFkb3dNYXBEYXRhKGNoaWxkLCByZW5kZXJDYW1lcmEpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcHJvdGVjdGVkIGdldFJlbmRlckxpc3QoKTp3ZENiLkNvbGxlY3Rpb248R2FtZU9iamVjdD57XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbGlnaHQuc2hhZG93UmVuZGVyTGlzdDtcbiAgICAgICAgfVxuICAgICAgICBwcm90ZWN0ZWQgcmVuZGVyUmVuZGVyZXIocmVuZGVyZXIpe1xuICAgICAgICAgICAgcmVuZGVyZXIucmVuZGVyKCk7XG4gICAgICAgIH1cblxuICAgICAgICBwcm90ZWN0ZWQgYmVmb3JlUmVuZGVyKCl7XG4gICAgICAgICAgICB0aGlzLl9zaGFkb3dNYXBSZW5kZXJlclV0aWxzLmJlZm9yZVJlbmRlcigpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJvdGVjdGVkIGFmdGVyUmVuZGVyKCl7XG4gICAgICAgICAgICB0aGlzLl9zaGFkb3dNYXBSZW5kZXJlclV0aWxzLmFmdGVyUmVuZGVyKCk7XG4gICAgICAgIH1cblxuICAgICAgICBwcm90ZWN0ZWQgY3JlYXRlQ2FtZXJhKCk6R2FtZU9iamVjdHtcbiAgICAgICAgICAgIHZhciBvcnRob0NhbWVyYUNvbXBvbmVudCA9IE9ydGhvZ3JhcGhpY0NhbWVyYS5jcmVhdGUoKSxcbiAgICAgICAgICAgICAgICBsaWdodDpEaXJlY3Rpb25MaWdodCA9IHRoaXMuX2xpZ2h0LFxuICAgICAgICAgICAgICAgIGNhbWVyYSA9IEdhbWVPYmplY3QuY3JlYXRlKCk7XG5cbiAgICAgICAgICAgIG9ydGhvQ2FtZXJhQ29tcG9uZW50LmxlZnQgPSBsaWdodC5zaGFkb3dDYW1lcmFMZWZ0O1xuICAgICAgICAgICAgb3J0aG9DYW1lcmFDb21wb25lbnQucmlnaHQgPSBsaWdodC5zaGFkb3dDYW1lcmFSaWdodDtcbiAgICAgICAgICAgIG9ydGhvQ2FtZXJhQ29tcG9uZW50LnRvcCA9IGxpZ2h0LnNoYWRvd0NhbWVyYVRvcDtcbiAgICAgICAgICAgIG9ydGhvQ2FtZXJhQ29tcG9uZW50LmJvdHRvbSA9IGxpZ2h0LnNoYWRvd0NhbWVyYUJvdHRvbTtcbiAgICAgICAgICAgIG9ydGhvQ2FtZXJhQ29tcG9uZW50Lm5lYXIgPSBsaWdodC5zaGFkb3dDYW1lcmFOZWFyO1xuICAgICAgICAgICAgb3J0aG9DYW1lcmFDb21wb25lbnQuZmFyID0gbGlnaHQuc2hhZG93Q2FtZXJhRmFyO1xuXG4gICAgICAgICAgICBjYW1lcmEuYWRkQ29tcG9uZW50KEJhc2ljQ2FtZXJhQ29udHJvbGxlci5jcmVhdGUob3J0aG9DYW1lcmFDb21wb25lbnQpKTtcblxuICAgICAgICAgICAgLy90b2RvIG9wdGltaXplOmRpcnR5P1xuICAgICAgICAgICAgY2FtZXJhLnRyYW5zZm9ybS50cmFuc2xhdGUobGlnaHQucG9zaXRpb24pO1xuICAgICAgICAgICAgY2FtZXJhLnRyYW5zZm9ybS5sb29rQXQoMCwgMCwgMCk7XG5cbiAgICAgICAgICAgIGNhbWVyYS5pbml0KCk7XG5cbiAgICAgICAgICAgIHJldHVybiBjYW1lcmE7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9oYW5kbGVTaGFkb3dSZW5kZXJlckxpc3QoKXtcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcyxcbiAgICAgICAgICAgICAgICBjaGlsZHJlbiA9IFtdO1xuXG4gICAgICAgICAgICB0aGlzLl9saWdodC5zaGFkb3dSZW5kZXJMaXN0LmZvckVhY2goKHJlbmRlclRhcmdldDpHYW1lT2JqZWN0KSA9PiB7XG4gICAgICAgICAgICAgICAgY2hpbGRyZW4gPSBjaGlsZHJlbi5jb25jYXQodGhpcy5fc2hhZG93TWFwUmVuZGVyZXJVdGlscy5hZGRBbGxDaGlsZHJlbihyZW5kZXJUYXJnZXQpKTtcbiAgICAgICAgICAgIH0sdGhpcyk7XG5cbiAgICAgICAgICAgIHRoaXMuX2xpZ2h0LnNoYWRvd1JlbmRlckxpc3QuYWRkQ2hpbGRyZW4oY2hpbGRyZW4pO1xuXG4gICAgICAgICAgICB0aGlzLl9saWdodC5zaGFkb3dSZW5kZXJMaXN0LnJlbW92ZUNoaWxkKChyZW5kZXJUYXJnZXQ6R2FtZU9iamVjdCkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBzZWxmLl9zaGFkb3dNYXBSZW5kZXJlclV0aWxzLmlzQ29udGFpbmVyKHJlbmRlclRhcmdldCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuIiwibW9kdWxlIHdkIHtcbiAgICBleHBvcnQgYWJzdHJhY3QgY2xhc3MgQ3ViZW1hcFJlbmRlclRhcmdldFJlbmRlcmVyIGV4dGVuZHMgUmVuZGVyVGFyZ2V0UmVuZGVyZXJ7XG4gICAgICAgIHByb3RlY3RlZCB0ZXh0dXJlOkN1YmVtYXBSZW5kZXJUYXJnZXRUZXh0dXJlO1xuXG4gICAgICAgIHByaXZhdGUgX2ZyYW1lQnVmZmVyTGlzdDp3ZENiLkNvbGxlY3Rpb248V2ViR0xGcmFtZWJ1ZmZlcj4gPSB3ZENiLkNvbGxlY3Rpb24uY3JlYXRlPFdlYkdMRnJhbWVidWZmZXI+KCk7XG4gICAgICAgIHByaXZhdGUgX3JlbmRlckJ1ZmZlckxpc3Q6d2RDYi5Db2xsZWN0aW9uPFdlYkdMUmVuZGVyYnVmZmVyPiA9IHdkQ2IuQ29sbGVjdGlvbi5jcmVhdGU8V2ViR0xSZW5kZXJidWZmZXI+KCk7XG4gICAgICAgIHByaXZhdGUgX2xhc3RDYW1lcmFMaXN0OiB3ZENiLkNvbGxlY3Rpb248R2FtZU9iamVjdD4gPSBudWxsO1xuICAgICAgICBwcml2YXRlIF9sYXN0UG9zaXRpb246VmVjdG9yMyA9IG51bGw7XG5cbiAgICAgICAgcHJvdGVjdGVkIGFic3RyYWN0IGdldFJlbmRlckxpc3QoKTp3ZENiLkhhc2g8YW55PjtcbiAgICAgICAgcHJvdGVjdGVkIGFic3RyYWN0IHNldENhbWVyYShjdWJlQ2FtZXJhQ29tcG9uZW50OlBlcnNwZWN0aXZlQ2FtZXJhKTtcbiAgICAgICAgcHJvdGVjdGVkIGFic3RyYWN0IGdldFBvc2l0aW9uKCk6VmVjdG9yMztcblxuICAgICAgICAvL3RvZG8gY2FuIG9uZSBmcmFtZUJ1ZmZlciBiaW5kIHNpeCBmYWNlcyBvZiBjdWJlbWFwP1xuICAgICAgICBwcm90ZWN0ZWQgaW5pdEZyYW1lQnVmZmVyKCl7XG4gICAgICAgICAgICB2YXIgZnJhbWVCdWZmZXJPcGVyYXRvciA9IHRoaXMuZnJhbWVCdWZmZXJPcGVyYXRvcixcbiAgICAgICAgICAgICAgICBnbCA9IERldmljZU1hbmFnZXIuZ2V0SW5zdGFuY2UoKS5nbDtcblxuICAgICAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IDY7IGkrKyl7XG4gICAgICAgICAgICAgICAgbGV0IGZyYW1lQnVmZmVyID0gZnJhbWVCdWZmZXJPcGVyYXRvci5jcmVhdGVGcmFtZUJ1ZmZlcigpLFxuICAgICAgICAgICAgICAgICAgICByZW5kZXJCdWZmZXIgPSBmcmFtZUJ1ZmZlck9wZXJhdG9yLmNyZWF0ZVJlbmRlckJ1ZmZlcigpO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5fZnJhbWVCdWZmZXJMaXN0LmFkZENoaWxkKGZyYW1lQnVmZmVyKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9yZW5kZXJCdWZmZXJMaXN0LmFkZENoaWxkKHJlbmRlckJ1ZmZlcik7XG5cbiAgICAgICAgICAgICAgICBmcmFtZUJ1ZmZlck9wZXJhdG9yLmJpbmRGcmFtZUJ1ZmZlcihmcmFtZUJ1ZmZlcik7XG4gICAgICAgICAgICAgICAgZnJhbWVCdWZmZXJPcGVyYXRvci5hdHRhY2hUZXh0dXJlKGdsLlRFWFRVUkVfQ1VCRV9NQVBfUE9TSVRJVkVfWCArIGksIHRoaXMudGV4dHVyZS5nbFRleHR1cmUpO1xuICAgICAgICAgICAgICAgIGZyYW1lQnVmZmVyT3BlcmF0b3IuYXR0YWNoUmVuZGVyQnVmZmVyKFwiREVQVEhfQVRUQUNITUVOVFwiLCByZW5kZXJCdWZmZXIpO1xuICAgICAgICAgICAgICAgIGZyYW1lQnVmZmVyT3BlcmF0b3IuY2hlY2soKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnJhbWVCdWZmZXJPcGVyYXRvci51bkJpbmQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByb3RlY3RlZCByZW5kZXJGcmFtZUJ1ZmZlclRleHR1cmUocmVuZGVyZXI6UmVuZGVyZXIsIGNhbWVyYTpHYW1lT2JqZWN0KXtcbiAgICAgICAgICAgIHZhciByZW5kZXJDYW1lcmEgPSBudWxsLFxuICAgICAgICAgICAgICAgIGZhY2VSZW5kZXJMaXN0ID0gbnVsbCxcbiAgICAgICAgICAgICAgICBuZXdDYW1lcmFMaXN0ID0gbnVsbCxcbiAgICAgICAgICAgICAgICBwb3NpdGlvbiA9IHRoaXMuZ2V0UG9zaXRpb24oKSxcbiAgICAgICAgICAgICAgICByZW5kZXJMaXN0ID0gbnVsbDtcblxuICAgICAgICAgICAgcmVuZGVyTGlzdCA9IHRoaXMuZ2V0UmVuZGVyTGlzdCgpO1xuICAgICAgICAgICAgdGhpcy50ZXh0dXJlLmJpbmRUb1VuaXQoMCk7XG5cbiAgICAgICAgICAgIGlmKHRoaXMuX25lZWRDcmVhdGVDYW1lcmEocG9zaXRpb24pKXtcbiAgICAgICAgICAgICAgICBuZXdDYW1lcmFMaXN0ID0gd2RDYi5Db2xsZWN0aW9uLmNyZWF0ZTxHYW1lT2JqZWN0PigpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgNjsgaSsrKXtcbiAgICAgICAgICAgICAgICBmYWNlUmVuZGVyTGlzdCA9IHJlbmRlckxpc3QuZ2V0Q2hpbGQodGhpcy5fY29udmVydEluZGV4VG9GYWNlS2V5KGkpKTtcbiAgICAgICAgICAgICAgICAvL2ZhY2VSZW5kZXJMaXN0IGNhbiBiZSBhcnJheSBvciBjb2xsZWN0aW9uXG4gICAgICAgICAgICAgICAgaWYodGhpcy5faXNFbXB0eShmYWNlUmVuZGVyTGlzdCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYodGhpcy5fbmVlZENyZWF0ZUNhbWVyYShwb3NpdGlvbikpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVuZGVyQ2FtZXJhID0gdGhpcy5jcmVhdGVDYW1lcmEoaSk7XG4gICAgICAgICAgICAgICAgICAgIG5ld0NhbWVyYUxpc3QuYWRkQ2hpbGQocmVuZGVyQ2FtZXJhKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgcmVuZGVyQ2FtZXJhID0gdGhpcy5fbGFzdENhbWVyYUxpc3QuZ2V0Q2hpbGQoaSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdGhpcy5mcmFtZUJ1ZmZlck9wZXJhdG9yLmJpbmRGcmFtZUJ1ZmZlcih0aGlzLl9mcmFtZUJ1ZmZlckxpc3QuZ2V0Q2hpbGQoaSkpO1xuICAgICAgICAgICAgICAgIHRoaXMuZnJhbWVCdWZmZXJPcGVyYXRvci5zZXRWaWV3cG9ydCgpO1xuXG4gICAgICAgICAgICAgICAgZmFjZVJlbmRlckxpc3QuZm9yRWFjaCgoY2hpbGQ6R2FtZU9iamVjdCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjaGlsZC5yZW5kZXIocmVuZGVyZXIsIHJlbmRlckNhbWVyYSlcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZW5kZXJlci5yZW5kZXIoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYodGhpcy5fbmVlZENyZWF0ZUNhbWVyYShwb3NpdGlvbikpe1xuICAgICAgICAgICAgICAgIGlmKHRoaXMuX2xhc3RDYW1lcmFMaXN0KXtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbGFzdENhbWVyYUxpc3QuZm9yRWFjaCgoY2FtZXJhOkdhbWVPYmplY3QpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbWVyYS5kaXNwb3NlKCk7XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdGhpcy5fbGFzdENhbWVyYUxpc3QgPSBuZXdDYW1lcmFMaXN0O1xuICAgICAgICAgICAgICAgIHRoaXMuX2xhc3RQb3NpdGlvbiA9IHBvc2l0aW9uO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLmZyYW1lQnVmZmVyT3BlcmF0b3IudW5CaW5kKCk7XG4gICAgICAgICAgICB0aGlzLmZyYW1lQnVmZmVyT3BlcmF0b3IucmVzdG9yZVZpZXdwb3J0KCk7XG4gICAgICAgIH1cblxuICAgICAgICBwcm90ZWN0ZWQgZGlzcG9zZUZyYW1lQnVmZmVyKCl7XG4gICAgICAgICAgICB2YXIgZ2wgPSBEZXZpY2VNYW5hZ2VyLmdldEluc3RhbmNlKCkuZ2w7XG5cbiAgICAgICAgICAgIHRoaXMuX2ZyYW1lQnVmZmVyTGlzdC5mb3JFYWNoKChidWZmZXI6V2ViR0xGcmFtZWJ1ZmZlcikgPT4gZ2wuZGVsZXRlRnJhbWVidWZmZXIoYnVmZmVyKSk7XG4gICAgICAgICAgICB0aGlzLl9yZW5kZXJCdWZmZXJMaXN0LmZvckVhY2goKGJ1ZmZlcjpXZWJHTFJlbmRlcmJ1ZmZlcikgPT4gZ2wuZGVsZXRlUmVuZGVyYnVmZmVyKGJ1ZmZlcikpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJvdGVjdGVkIGNyZWF0ZUNhbWVyYShpbmRleDpudW1iZXIpe1xuICAgICAgICAgICAgdmFyIGN1YmVDYW1lcmFDb21wb25lbnQgPSBQZXJzcGVjdGl2ZUNhbWVyYS5jcmVhdGUoKSxcbiAgICAgICAgICAgICAgICBjYW1lcmEgPSBHYW1lT2JqZWN0LmNyZWF0ZSgpLFxuICAgICAgICAgICAgICAgIHBvcyA9IHRoaXMuZ2V0UG9zaXRpb24oKTtcblxuICAgICAgICAgICAgY3ViZUNhbWVyYUNvbXBvbmVudC5mb3Z5ID0gOTA7XG4gICAgICAgICAgICB0aGlzLnNldENhbWVyYShjdWJlQ2FtZXJhQ29tcG9uZW50KTtcblxuICAgICAgICAgICAgY2FtZXJhLmFkZENvbXBvbmVudChCYXNpY0NhbWVyYUNvbnRyb2xsZXIuY3JlYXRlKGN1YmVDYW1lcmFDb21wb25lbnQpKTtcblxuICAgICAgICAgICAgY2FtZXJhLnRyYW5zZm9ybS50cmFuc2xhdGUocG9zKTtcblxuICAgICAgICAgICAgdGhpcy5fbG9va0F0RmFjZShjYW1lcmEsIHBvcywgaW5kZXgpO1xuXG4gICAgICAgICAgICBjYW1lcmEuaW5pdCgpO1xuXG4gICAgICAgICAgICByZXR1cm4gY2FtZXJhO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfaXNFbXB0eShmYWNlUmVuZGVyTGlzdCl7XG4gICAgICAgICAgICByZXR1cm4gIWZhY2VSZW5kZXJMaXN0IHx8IChmYWNlUmVuZGVyTGlzdC5sZW5ndGggJiYgZmFjZVJlbmRlckxpc3QubGVuZ3RoID09PSAwKSB8fCAoZmFjZVJlbmRlckxpc3QuZ2V0Q291bnQgJiYgZmFjZVJlbmRlckxpc3QuZ2V0Q291bnQoKSA9PT0gMCk7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9jb252ZXJ0SW5kZXhUb0ZhY2VLZXkoaW5kZXg6bnVtYmVyKXtcbiAgICAgICAgICAgIHZhciBmYWNlID0gbnVsbDtcblxuICAgICAgICAgICAgc3dpdGNoIChpbmRleCl7XG4gICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICBmYWNlID0gXCJweFwiO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIGZhY2UgPSBcIm54XCI7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgZmFjZSA9IFwicHlcIjtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICBmYWNlID0gXCJueVwiO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIGZhY2UgPSBcInB6XCI7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgZmFjZSA9IFwibnpcIjtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdCA6XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gZmFjZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX2xvb2tBdEZhY2UoY2FtZXJhOkdhbWVPYmplY3QsIHBvc2l0aW9uOlZlY3RvcjMsIGluZGV4Om51bWJlcil7XG4gICAgICAgICAgICBzd2l0Y2ggKGluZGV4KXtcbiAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgIGNhbWVyYS50cmFuc2Zvcm0ubG9va0F0KHBvc2l0aW9uLnggKyAxLCBwb3NpdGlvbi55LCBwb3NpdGlvbi56LCAwLCAtMSwgMCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgY2FtZXJhLnRyYW5zZm9ybS5sb29rQXQocG9zaXRpb24ueC0xLCBwb3NpdGlvbi55LCBwb3NpdGlvbi56LCAwLCAtMSwgMCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgY2FtZXJhLnRyYW5zZm9ybS5sb29rQXQocG9zaXRpb24ueCwgcG9zaXRpb24ueSArIDEsIHBvc2l0aW9uLnosIDAsIDAsIDEpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIGNhbWVyYS50cmFuc2Zvcm0ubG9va0F0KHBvc2l0aW9uLngsIHBvc2l0aW9uLnktMSwgcG9zaXRpb24ueiwgMCwgMCwgLTEpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIGNhbWVyYS50cmFuc2Zvcm0ubG9va0F0KHBvc2l0aW9uLngsIHBvc2l0aW9uLnksIHBvc2l0aW9uLnogKyAxLCAwLCAtMSwgMCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgY2FtZXJhLnRyYW5zZm9ybS5sb29rQXQocG9zaXRpb24ueCwgcG9zaXRpb24ueSwgcG9zaXRpb24uei0xLCAwLCAtMSwgMCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfbmVlZENyZWF0ZUNhbWVyYShwb3NpdGlvbjpWZWN0b3IzKXtcbiAgICAgICAgICAgIGlmKHRoaXMuX2xhc3RQb3NpdGlvbiA9PT0gbnVsbCB8fCB0aGlzLl9sYXN0Q2FtZXJhTGlzdCA9PT0gbnVsbCl7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiAhcG9zaXRpb24uaXNFcXVhbCh0aGlzLl9sYXN0UG9zaXRpb24pO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4iLCJtb2R1bGUgd2Qge1xuICAgIGV4cG9ydCBjbGFzcyBDdWJlbWFwU2hhZG93TWFwUmVuZGVyVGFyZ2V0UmVuZGVyZXIgZXh0ZW5kcyBDdWJlbWFwUmVuZGVyVGFyZ2V0UmVuZGVyZXJ7XG4gICAgICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlKGxpZ2h0OlBvaW50TGlnaHQpIHtcbiAgICAgICAgICAgIHZhciBvYmogPSBuZXcgdGhpcyhsaWdodCk7XG5cbiAgICAgICAgICAgIG9iai5pbml0V2hlbkNyZWF0ZSgpO1xuXG4gICAgICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3RydWN0b3IobGlnaHQ6UG9pbnRMaWdodCl7XG4gICAgICAgICAgICBzdXBlcihsaWdodC5zaGFkb3dNYXApO1xuXG4gICAgICAgICAgICB0aGlzLl9saWdodCA9IGxpZ2h0O1xuICAgICAgICB9XG5cbiAgICAgICAgcHJvdGVjdGVkIHRleHR1cmU6Q3ViZW1hcFNoYWRvd01hcFRleHR1cmU7XG5cbiAgICAgICAgcHJpdmF0ZSBfbGlnaHQ6UG9pbnRMaWdodCA9IG51bGw7XG4gICAgICAgIHByaXZhdGUgX3NoYWRvd01hcFJlbmRlcmVyVXRpbHM6Q3ViZW1hcFNoYWRvd01hcFJlbmRlclRhcmdldFJlbmRlcmVyVXRpbHMgPSBudWxsO1xuXG5cbiAgICAgICAgcHVibGljIGluaXRXaGVuQ3JlYXRlKCl7XG4gICAgICAgICAgICB0aGlzLl9zaGFkb3dNYXBSZW5kZXJlclV0aWxzID0gQ3ViZW1hcFNoYWRvd01hcFJlbmRlclRhcmdldFJlbmRlcmVyVXRpbHMuY3JlYXRlKHRoaXMuX2xpZ2h0LCB0aGlzLnRleHR1cmUpO1xuXG4gICAgICAgICAgICBzdXBlci5pbml0V2hlbkNyZWF0ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGluaXQoKXtcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgICAgICAgICAgdGhpcy5faGFuZGxlU2hhZG93UmVuZGVyZXJMaXN0KCk7XG5cbiAgICAgICAgICAgIHRoaXMuX3NoYWRvd01hcFJlbmRlcmVyVXRpbHMuYmluZEVuZExvb3AoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHNlbGYuX2xpZ2h0LnNoYWRvd1JlbmRlckxpc3QuZm9yRWFjaCgoY2hpbGRMaXN0OndkQ2IuQ29sbGVjdGlvbjxHYW1lT2JqZWN0PikgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjaGlsZExpc3QuZm9yRWFjaCgoY2hpbGQ6R2FtZU9iamVjdCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5fc2hhZG93TWFwUmVuZGVyZXJVdGlscy5jbGVhckN1YmVtYXBTaGFkb3dNYXBEYXRhKGNoaWxkKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdGhpcy5fc2hhZG93TWFwUmVuZGVyZXJVdGlscy5jcmVhdGVTaGFkZXJXaXRoU2hhZGVyTGliKEJ1aWxkQ3ViZW1hcFNoYWRvd01hcFNoYWRlckxpYi5jcmVhdGUoKSk7XG5cbiAgICAgICAgICAgIHN1cGVyLmluaXQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBkaXNwb3NlKCl7XG4gICAgICAgICAgICBzdXBlci5kaXNwb3NlKCk7XG5cbiAgICAgICAgICAgIHRoaXMuX3NoYWRvd01hcFJlbmRlcmVyVXRpbHMudW5CaW5kRW5kTG9vcCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJvdGVjdGVkICBnZXRSZW5kZXJMaXN0KCk6d2RDYi5IYXNoPHdkQ2IuQ29sbGVjdGlvbjxHYW1lT2JqZWN0Pj57XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbGlnaHQuc2hhZG93UmVuZGVyTGlzdDtcbiAgICAgICAgfVxuXG4gICAgICAgIHByb3RlY3RlZCBiZWZvcmVSZW5kZXIoKXtcbiAgICAgICAgICAgIHZhciB1dGlsczpDdWJlbWFwU2hhZG93TWFwUmVuZGVyVGFyZ2V0UmVuZGVyZXJVdGlscyA9IHRoaXMuX3NoYWRvd01hcFJlbmRlcmVyVXRpbHM7XG5cbiAgICAgICAgICAgIHRoaXMuX2NvbnZlcnRSZW5kZXJMaXN0VG9Db2xsZWN0aW9uKHRoaXMuZ2V0UmVuZGVyTGlzdCgpKS5yZW1vdmVSZXBlYXRJdGVtcygpLmZvckVhY2goKGNoaWxkOkdhbWVPYmplY3QpID0+IHtcbiAgICAgICAgICAgICAgICB1dGlscy5zZXRTaGFkb3dNYXBEYXRhKGNoaWxkKTtcbiAgICAgICAgICAgIH0pO1xuXG5cbiAgICAgICAgICAgIHRoaXMuX3NoYWRvd01hcFJlbmRlcmVyVXRpbHMuYmVmb3JlUmVuZGVyKCk7XG4gICAgICAgIH1cblxuICAgICAgICBwcm90ZWN0ZWQgYWZ0ZXJSZW5kZXIoKXtcbiAgICAgICAgICAgIHRoaXMuX3NoYWRvd01hcFJlbmRlcmVyVXRpbHMuYWZ0ZXJSZW5kZXIoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByb3RlY3RlZCBzZXRDYW1lcmEoY2FtZXJhOlBlcnNwZWN0aXZlQ2FtZXJhKXtcbiAgICAgICAgICAgIHZhciBsaWdodDpQb2ludExpZ2h0ID0gdGhpcy5fbGlnaHQ7XG5cbiAgICAgICAgICAgIGNhbWVyYS5hc3BlY3QgPSBsaWdodC5zaGFkb3dNYXBXaWR0aCAvIGxpZ2h0LnNoYWRvd01hcEhlaWdodDtcbiAgICAgICAgICAgIGNhbWVyYS5uZWFyID0gbGlnaHQuc2hhZG93Q2FtZXJhTmVhcjtcbiAgICAgICAgICAgIGNhbWVyYS5mYXIgPSBsaWdodC5zaGFkb3dDYW1lcmFGYXI7XG4gICAgICAgIH1cblxuICAgICAgICBwcm90ZWN0ZWQgZ2V0UG9zaXRpb24oKXtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9saWdodC5wb3NpdGlvbjtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX2NvbnZlcnRSZW5kZXJMaXN0VG9Db2xsZWN0aW9uKHJlbmRlckxpc3Q6d2RDYi5IYXNoPHdkQ2IuQ29sbGVjdGlvbjxHYW1lT2JqZWN0Pj4pOndkQ2IuQ29sbGVjdGlvbjxHYW1lT2JqZWN0PntcbiAgICAgICAgICAgIHZhciByZXN1bHRMaXN0ID0gd2RDYi5Db2xsZWN0aW9uLmNyZWF0ZTxHYW1lT2JqZWN0PigpO1xuXG4gICAgICAgICAgICByZW5kZXJMaXN0LmZvckVhY2goKGxpc3QpID0+IHtcbiAgICAgICAgICAgICAgICAvL2lmKGxpc3QgaW5zdGFuY2VvZiB3ZENiLkNvbGxlY3Rpb24gfHwgSnVkZ2VVdGlscy5pc0FycmF5KGxpc3QpKXtcbiAgICAgICAgICAgICAgICByZXN1bHRMaXN0LmFkZENoaWxkcmVuKGxpc3QpO1xuICAgICAgICAgICAgICAgIC8vfVxuICAgICAgICAgICAgICAgIC8vZWxzZXtcbiAgICAgICAgICAgICAgICAvLyAgICBMb2cuZXJyb3IodHJ1ZSwgTG9nLmluZm8uRlVOQ19NVVNUX0JFKFwiYXJyYXkgb3IgY29sbGVjdGlvblwiKSk7XG4gICAgICAgICAgICAgICAgLy99XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdExpc3Q7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9oYW5kbGVTaGFkb3dSZW5kZXJlckxpc3QoKXtcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcyxcbiAgICAgICAgICAgICAgICBjaGlsZHJlbk1hcCA9IHdkQ2IuSGFzaC5jcmVhdGU8QXJyYXk8R2FtZU9iamVjdD4+KCk7XG5cbiAgICAgICAgICAgIHRoaXMuX2xpZ2h0LnNoYWRvd1JlbmRlckxpc3QuZm9yRWFjaCgoY2hpbGRMaXN0OndkQ2IuQ29sbGVjdGlvbjxHYW1lT2JqZWN0PiwgZGlyZWN0aW9uOnN0cmluZykgPT4ge1xuICAgICAgICAgICAgICAgIHZhciBjaGlsZHJlbiA9IFtdO1xuXG4gICAgICAgICAgICAgICAgY2hpbGRMaXN0LmZvckVhY2goKHJlbmRlclRhcmdldDpHYW1lT2JqZWN0KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuID0gY2hpbGRyZW4uY29uY2F0KHNlbGYuX3NoYWRvd01hcFJlbmRlcmVyVXRpbHMuYWRkQWxsQ2hpbGRyZW4ocmVuZGVyVGFyZ2V0KSk7XG4gICAgICAgICAgICAgICAgfSk7XG5cblxuICAgICAgICAgICAgICAgIGNoaWxkcmVuTWFwLmFkZENoaWxkKGRpcmVjdGlvbiwgY2hpbGRyZW4pO1xuICAgICAgICAgICAgfSx0aGlzKTtcblxuICAgICAgICAgICAgdGhpcy5fbGlnaHQuc2hhZG93UmVuZGVyTGlzdC5mb3JFYWNoKChjaGlsZExpc3Q6d2RDYi5Db2xsZWN0aW9uPEdhbWVPYmplY3Q+LCBkaXJlY3Rpb246c3RyaW5nKSA9PiB7XG4gICAgICAgICAgICAgICAgY2hpbGRMaXN0LmFkZENoaWxkcmVuKGNoaWxkcmVuTWFwLmdldENoaWxkKGRpcmVjdGlvbikpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHRoaXMuX2xpZ2h0LnNoYWRvd1JlbmRlckxpc3QuZm9yRWFjaCgoY2hpbGRMaXN0OndkQ2IuQ29sbGVjdGlvbjxHYW1lT2JqZWN0PikgPT4ge1xuICAgICAgICAgICAgICAgIGNoaWxkTGlzdC5yZW1vdmVDaGlsZCgocmVuZGVyVGFyZ2V0OkdhbWVPYmplY3QpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlbGYuX3NoYWRvd01hcFJlbmRlcmVyVXRpbHMuaXNDb250YWluZXIocmVuZGVyVGFyZ2V0KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwibW9kdWxlIHdkIHtcbiAgICBleHBvcnQgY2xhc3MgRHluYW1pY0N1YmVtYXBSZW5kZXJUYXJnZXRSZW5kZXJlciBleHRlbmRzIEN1YmVtYXBSZW5kZXJUYXJnZXRSZW5kZXJlcntcbiAgICAgICAgcHVibGljIHN0YXRpYyBjcmVhdGUodGV4dHVyZTpEeW5hbWljQ3ViZW1hcFRleHR1cmUpIHtcbiAgICAgICAgICAgIHZhciBvYmogPSBuZXcgdGhpcyh0ZXh0dXJlKTtcblxuICAgICAgICAgICAgb2JqLmluaXRXaGVuQ3JlYXRlKCk7XG5cbiAgICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgIH1cblxuICAgICAgICBwcm90ZWN0ZWQgdGV4dHVyZTpEeW5hbWljQ3ViZW1hcFRleHR1cmU7XG5cbiAgICAgICAgcHJvdGVjdGVkICBnZXRSZW5kZXJMaXN0KCk6d2RDYi5IYXNoPEdhbWVPYmplY3Q+e1xuICAgICAgICAgcmV0dXJuIHRoaXMudGV4dHVyZS5yZW5kZXJMaXN0O1xuICAgICAgICB9XG5cbiAgICAgICAgcHJvdGVjdGVkIHNldENhbWVyYShjYW1lcmE6UGVyc3BlY3RpdmVDYW1lcmEpe1xuICAgICAgICAgICAgY2FtZXJhLmFzcGVjdCA9IDE7XG4gICAgICAgICAgICBjYW1lcmEubmVhciA9IHRoaXMudGV4dHVyZS5uZWFyO1xuICAgICAgICAgICAgY2FtZXJhLmZhciA9IHRoaXMudGV4dHVyZS5mYXI7XG4gICAgICAgIH1cblxuICAgICAgICBwcm90ZWN0ZWQgZ2V0UG9zaXRpb24oKXtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnRleHR1cmUuZ2V0UG9zaXRpb24oKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuIiwibW9kdWxlIHdkIHtcbiAgICBleHBvcnQgYWJzdHJhY3QgY2xhc3MgU2hhZG93TWFwUmVuZGVyVGFyZ2V0UmVuZGVyZXJVdGlsc3tcbiAgICAgICAgY29uc3RydWN0b3IobGlnaHQ6TGlnaHQsIHRleHR1cmU6VGV4dHVyZSl7XG4gICAgICAgICAgICB0aGlzLmxpZ2h0ID0gbGlnaHQ7XG4gICAgICAgICAgICB0aGlzLnRleHR1cmUgPSB0ZXh0dXJlO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHRleHR1cmU6VGV4dHVyZSA9IG51bGw7XG5cbiAgICAgICAgcHJvdGVjdGVkIGxpZ2h0OkxpZ2h0ID0gbnVsbDtcblxuICAgICAgICBwcml2YXRlIF9lbmRMb29wSGFuZGxlcjpGdW5jdGlvbiA9IG51bGw7XG4gICAgICAgIHByaXZhdGUgX3NoYWRlcjpTaGFkZXIgPSBudWxsO1xuXG4gICAgICAgIHB1YmxpYyBpbml0V2hlbkNyZWF0ZSgpe1xuICAgICAgICAgICAgdGhpcy50ZXh0dXJlLndpZHRoID0gdGhpcy5saWdodC5zaGFkb3dNYXBXaWR0aDtcbiAgICAgICAgICAgIHRoaXMudGV4dHVyZS5oZWlnaHQgPSB0aGlzLmxpZ2h0LnNoYWRvd01hcEhlaWdodDtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBpbml0KCl7XG4gICAgICAgICAgICB0aGlzLnRleHR1cmUuaW5pdCgpO1xuICAgICAgICB9XG5cblxuICAgICAgICBwdWJsaWMgc2V0U2hhZG93TWFwRGF0YSh0YXJnZXQ6R2FtZU9iamVjdCk7XG4gICAgICAgIHB1YmxpYyBzZXRTaGFkb3dNYXBEYXRhKHRhcmdldDpHYW1lT2JqZWN0LCBzaGFkb3dNYXBDYW1lcmE6R2FtZU9iamVjdCk7XG5cbiAgICAgICAgcHVibGljIHNldFNoYWRvd01hcERhdGEoLi4uYXJncyl7XG4gICAgICAgICAgICB2YXIgdGFyZ2V0OkdhbWVPYmplY3QgPSBhcmdzWzBdLFxuICAgICAgICAgICAgICAgIG1hdGVyaWFsOkxpZ2h0TWF0ZXJpYWwgPSA8TGlnaHRNYXRlcmlhbD50YXJnZXQuZ2V0Q29tcG9uZW50PEdlb21ldHJ5PihHZW9tZXRyeSkubWF0ZXJpYWwsXG4gICAgICAgICAgc2hhZG93TWFwQ2FtZXJhID0gbnVsbDtcblxuICAgICAgICAgICAgaWYoYXJncy5sZW5ndGggPT09IDIpe1xuICAgICAgICAgICAgICAgIHNoYWRvd01hcENhbWVyYSA9IGFyZ3NbMV07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIExvZy5lcnJvcighKG1hdGVyaWFsIGluc3RhbmNlb2YgTGlnaHRNYXRlcmlhbCksIExvZy5pbmZvLkZVTkNfTVVTVF9CRShcIm1hdGVyaWFsXCIsIFwiTGlnaHRNYXRlcmlhbCB3aGVuIHNldCBzaGFkb3dNYXBcIikpO1xuXG4gICAgICAgICAgICB0aGlzLnNldE1hdGVyaWFsU2hhZG93TWFwRGF0YShtYXRlcmlhbCwgdGFyZ2V0LCBzaGFkb3dNYXBDYW1lcmEpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGJpbmRFbmRMb29wKGZ1bmM6RnVuY3Rpb24pe1xuICAgICAgICAgICAgdGhpcy5fZW5kTG9vcEhhbmRsZXIgPSBmdW5jO1xuXG4gICAgICAgICAgICBFdmVudE1hbmFnZXIub24oPGFueT5FbmdpbmVFdmVudC5FTkRMT09QLHRoaXMuX2VuZExvb3BIYW5kbGVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyB1bkJpbmRFbmRMb29wKCl7XG4gICAgICAgICAgICBFdmVudE1hbmFnZXIub2ZmKDxhbnk+RW5naW5lRXZlbnQuRU5ETE9PUCwgdGhpcy5fZW5kTG9vcEhhbmRsZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGJlZm9yZVJlbmRlcigpe1xuICAgICAgICAgICAgdmFyIHNjZW5lOlNjZW5lRGlzcGF0Y2hlciA9IERpcmVjdG9yLmdldEluc3RhbmNlKCkuc2NlbmU7XG5cbiAgICAgICAgICAgIHNjZW5lLnVzZVByb2dyYW0odGhpcy5fc2hhZGVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBhZnRlclJlbmRlcigpe1xuICAgICAgICAgICAgdmFyIHNjZW5lOlNjZW5lRGlzcGF0Y2hlciA9IERpcmVjdG9yLmdldEluc3RhbmNlKCkuc2NlbmU7XG5cbiAgICAgICAgICAgIHNjZW5lLnVuVXNlUHJvZ3JhbSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGNyZWF0ZVNoYWRlcldpdGhTaGFkZXJMaWIobGliOkJ1aWxkU2hhZG93TWFwU2hhZGVyTGliKXtcbiAgICAgICAgICAgIHRoaXMuX3NoYWRlciA9IFNoYWRlci5jcmVhdGUoKTtcbiAgICAgICAgICAgIHRoaXMuX3NoYWRlci5hZGRMaWIoQ29tbW9uU2hhZGVyTGliLmNyZWF0ZSgpKTtcbiAgICAgICAgICAgIHRoaXMuX3NoYWRlci5hZGRMaWIoQ29tbW9uVmVydGljZVNoYWRlckxpYi5jcmVhdGUoKSk7XG4gICAgICAgICAgICB0aGlzLl9zaGFkZXIuYWRkTGliKGxpYik7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgaXNDb250YWluZXIoZW50aXR5T2JqZWN0OkdhbWVPYmplY3Qpe1xuICAgICAgICAgICAgcmV0dXJuICFlbnRpdHlPYmplY3QuaGFzQ29tcG9uZW50KEdlb21ldHJ5KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBhZGRBbGxDaGlsZHJlbihlbnRpdHlPYmplY3Q6R2FtZU9iamVjdCl7XG4gICAgICAgICAgICB2YXIgY2hpbGRyZW4gPSBbXSxcbiAgICAgICAgICAgICAgICBhZGQgPSAoZW50aXR5T2JqZWN0OkdhbWVPYmplY3QpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZW50aXR5T2JqZWN0LmZvckVhY2goKGNoaWxkOkdhbWVPYmplY3QpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuLnB1c2goY2hpbGQpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBhZGQoY2hpbGQpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBhZGQoZW50aXR5T2JqZWN0KTtcblxuICAgICAgICAgICAgcmV0dXJuIGNoaWxkcmVuO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJvdGVjdGVkIGFic3RyYWN0IHNldE1hdGVyaWFsU2hhZG93TWFwRGF0YShtYXRlcmlhbDpMaWdodE1hdGVyaWFsLCB0YXJnZXQ6R2FtZU9iamVjdCwgc2hhZG93TWFwQ2FtZXJhOkdhbWVPYmplY3QpO1xuICAgICAgICBwcm90ZWN0ZWQgYWJzdHJhY3QgYWRkU2hhZG93TWFwKG1hdGVyaWFsOkxpZ2h0TWF0ZXJpYWwsIHNoYWRvd01hcDpJU2hhZG93TWFwVGV4dHVyZSk7XG5cbiAgICAgICAgcHJvdGVjdGVkIHNldFNoYWRvd01hcCh0YXJnZXQ6R2FtZU9iamVjdCwgc2hhZG93TWFwOklTaGFkb3dNYXBUZXh0dXJlKXtcbiAgICAgICAgICAgIHZhciBtYXRlcmlhbDpMaWdodE1hdGVyaWFsID0gbnVsbDtcblxuICAgICAgICAgICAgLy9jaGFuZ2VcbiAgICAgICAgICAgIGlmKCF0YXJnZXQuaGFzQ29tcG9uZW50KEdlb21ldHJ5KSl7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBtYXRlcmlhbCA9IDxMaWdodE1hdGVyaWFsPnRhcmdldC5nZXRDb21wb25lbnQ8R2VvbWV0cnk+KEdlb21ldHJ5KS5tYXRlcmlhbDtcblxuICAgICAgICAgICAgaWYobWF0ZXJpYWwuaGFzU2hhZG93TWFwKHNoYWRvd01hcCkpe1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgTG9nLmVycm9yKCEobWF0ZXJpYWwgaW5zdGFuY2VvZiBMaWdodE1hdGVyaWFsKSwgTG9nLmluZm8uRlVOQ19NVVNUX0JFKFwibWF0ZXJpYWxcIiwgXCJMaWdodE1hdGVyaWFsIHdoZW4gc2V0IHNoYWRvd01hcFwiKSk7XG5cbiAgICAgICAgICAgIHRoaXMuYWRkU2hhZG93TWFwKG1hdGVyaWFsLCBzaGFkb3dNYXApO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4iLCJtb2R1bGUgd2Qge1xuICAgIGV4cG9ydCBjbGFzcyBDdWJlbWFwU2hhZG93TWFwUmVuZGVyVGFyZ2V0UmVuZGVyZXJVdGlscyBleHRlbmRzIFNoYWRvd01hcFJlbmRlclRhcmdldFJlbmRlcmVyVXRpbHN7XG4gICAgICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlKGxpZ2h0OlBvaW50TGlnaHQsIHRleHR1cmU6Q3ViZW1hcFNoYWRvd01hcFRleHR1cmUpIHtcbiAgICAgICAgICAgIHZhciBvYmogPSBuZXcgdGhpcyhsaWdodCwgdGV4dHVyZSk7XG5cbiAgICAgICAgICAgIG9iai5pbml0V2hlbkNyZWF0ZSgpO1xuXG4gICAgICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHRleHR1cmU6Q3ViZW1hcFNoYWRvd01hcFRleHR1cmU7XG5cbiAgICAgICAgcHJvdGVjdGVkIGxpZ2h0OlBvaW50TGlnaHQ7XG5cbiAgICAgICAgcHVibGljIGluaXRXaGVuQ3JlYXRlKCl7XG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICAgICAgICAgIHN1cGVyLmluaXRXaGVuQ3JlYXRlKCk7XG5cbiAgICAgICAgICAgIHRoaXMubGlnaHQuc2hhZG93UmVuZGVyTGlzdC5mb3JFYWNoKChjaGlsZExpc3Q6QXJyYXk8R2FtZU9iamVjdD58d2RDYi5Db2xsZWN0aW9uPEdhbWVPYmplY3Q+KSA9PiB7XG4gICAgICAgICAgICAgICAgY2hpbGRMaXN0LmZvckVhY2goKGNoaWxkOkdhbWVPYmplY3QpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5zZXRTaGFkb3dNYXAoY2hpbGQsIHNlbGYudGV4dHVyZSk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgQHJlcXVpcmUoZnVuY3Rpb24odGFyZ2V0OkdhbWVPYmplY3Qpe1xuICAgICAgICAgICAgdmFyIG1hdGVyaWFsOkxpZ2h0TWF0ZXJpYWwgPSA8TGlnaHRNYXRlcmlhbD50YXJnZXQuZ2V0Q29tcG9uZW50PEdlb21ldHJ5PihHZW9tZXRyeSkubWF0ZXJpYWw7XG5cbiAgICAgICAgICAgIGFzc2VydChtYXRlcmlhbCBpbnN0YW5jZW9mIExpZ2h0TWF0ZXJpYWwsIExvZy5pbmZvLkZVTkNfTVVTVF9CRShcIm1hdGVyaWFsXCIsIFwiTGlnaHRNYXRlcmlhbCB3aGVuIHNldCBzaGFkb3dNYXBcIikpO1xuICAgICAgICB9KVxuICAgICAgICBwdWJsaWMgY2xlYXJDdWJlbWFwU2hhZG93TWFwRGF0YSh0YXJnZXQ6R2FtZU9iamVjdCl7XG4gICAgICAgICAgICB2YXIgbWF0ZXJpYWw6TGlnaHRNYXRlcmlhbCA9IDxMaWdodE1hdGVyaWFsPnRhcmdldC5nZXRDb21wb25lbnQ8R2VvbWV0cnk+KEdlb21ldHJ5KS5tYXRlcmlhbDtcblxuICAgICAgICAgICAgbWF0ZXJpYWwuY2xlYXJDdWJlbWFwU2hhZG93TWFwRGF0YSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHNldE1hdGVyaWFsU2hhZG93TWFwRGF0YShtYXRlcmlhbDpMaWdodE1hdGVyaWFsLCB0YXJnZXQ6R2FtZU9iamVjdCwgc2hhZG93TWFwQ2FtZXJhOkdhbWVPYmplY3Qpe1xuICAgICAgICAgICAgbWF0ZXJpYWwuYWRkQ3ViZW1hcFNoYWRvd01hcERhdGEoe1xuICAgICAgICAgICAgICAgIHNoYWRvd0JpYXM6dGhpcy5saWdodC5zaGFkb3dCaWFzLFxuICAgICAgICAgICAgICAgIHNoYWRvd0RhcmtuZXNzOnRoaXMubGlnaHQuc2hhZG93RGFya25lc3MsXG4gICAgICAgICAgICAgICAgbGlnaHRQb3M6dGhpcy5saWdodC5wb3NpdGlvbixcbiAgICAgICAgICAgICAgICBmYXJQbGFuZTp0aGlzLmxpZ2h0LnNoYWRvd0NhbWVyYUZhclxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIG1hdGVyaWFsLmJ1aWxkQ3ViZW1hcFNoYWRvd01hcERhdGEgPSB7XG4gICAgICAgICAgICAgICAgbGlnaHRQb3M6IHRoaXMubGlnaHQucG9zaXRpb24sXG4gICAgICAgICAgICAgICAgZmFyUGxhbmU6IHRoaXMubGlnaHQuc2hhZG93Q2FtZXJhRmFyXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG5cblxuICAgICAgICBwcm90ZWN0ZWQgYWRkU2hhZG93TWFwKG1hdGVyaWFsOkxpZ2h0TWF0ZXJpYWwsIHNoYWRvd01hcDpDdWJlbWFwU2hhZG93TWFwVGV4dHVyZSl7XG4gICAgICAgICAgICBtYXRlcmlhbC5hZGRDdWJlbWFwU2hhZG93TWFwKHNoYWRvd01hcCk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJtb2R1bGUgd2Qge1xuICAgIGV4cG9ydCBjbGFzcyBUd29EU2hhZG93TWFwUmVuZGVyVGFyZ2V0UmVuZGVyZXJVdGlscyBleHRlbmRzIFNoYWRvd01hcFJlbmRlclRhcmdldFJlbmRlcmVyVXRpbHN7XG4gICAgICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlKGxpZ2h0OkRpcmVjdGlvbkxpZ2h0LCB0ZXh0dXJlOlR3b0RTaGFkb3dNYXBUZXh0dXJlKSB7XG4gICAgICAgICAgICB2YXIgb2JqID0gbmV3IHRoaXMobGlnaHQsIHRleHR1cmUpO1xuXG4gICAgICAgICAgICBvYmouaW5pdFdoZW5DcmVhdGUoKTtcblxuICAgICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyB0ZXh0dXJlOlR3b0RTaGFkb3dNYXBUZXh0dXJlO1xuXG4gICAgICAgIHByb3RlY3RlZCBsaWdodDpEaXJlY3Rpb25MaWdodDtcblxuICAgICAgICBwdWJsaWMgaW5pdFdoZW5DcmVhdGUoKXtcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgICAgICAgICAgc3VwZXIuaW5pdFdoZW5DcmVhdGUoKTtcblxuICAgICAgICAgICAgLy90b2RvIGlmIHJlbmRlckxpc3QgaXMgbnVsbCwgZHJhdyBhbGxcbiAgICAgICAgICAgIHRoaXMubGlnaHQuc2hhZG93UmVuZGVyTGlzdC5mb3JFYWNoKChjaGlsZDpHYW1lT2JqZWN0KSA9PiB7XG4gICAgICAgICAgICAgICAgc2VsZi5zZXRTaGFkb3dNYXAoY2hpbGQsIHNlbGYudGV4dHVyZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIEByZXF1aXJlKGZ1bmN0aW9uKHRhcmdldDpHYW1lT2JqZWN0KXtcbiAgICAgICAgICAgIHZhciBtYXRlcmlhbDpMaWdodE1hdGVyaWFsID0gPExpZ2h0TWF0ZXJpYWw+dGFyZ2V0LmdldENvbXBvbmVudDxHZW9tZXRyeT4oR2VvbWV0cnkpLm1hdGVyaWFsO1xuXG4gICAgICAgICAgICBhc3NlcnQobWF0ZXJpYWwgaW5zdGFuY2VvZiBMaWdodE1hdGVyaWFsLCBMb2cuaW5mby5GVU5DX01VU1RfQkUoXCJtYXRlcmlhbFwiLCBcIkxpZ2h0TWF0ZXJpYWwgd2hlbiBzZXQgc2hhZG93TWFwXCIpKTtcbiAgICAgICAgfSlcbiAgICAgICAgcHVibGljIGNsZWFyVHdvRFNoYWRvd01hcERhdGEodGFyZ2V0OkdhbWVPYmplY3Qpe1xuICAgICAgICAgICAgdmFyIG1hdGVyaWFsOkxpZ2h0TWF0ZXJpYWwgPSA8TGlnaHRNYXRlcmlhbD50YXJnZXQuZ2V0Q29tcG9uZW50PEdlb21ldHJ5PihHZW9tZXRyeSkubWF0ZXJpYWw7XG5cbiAgICAgICAgICAgIG1hdGVyaWFsLmNsZWFyVHdvRFNoYWRvd01hcERhdGEoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByb3RlY3RlZCBzZXRNYXRlcmlhbFNoYWRvd01hcERhdGEobWF0ZXJpYWw6TGlnaHRNYXRlcmlhbCwgdGFyZ2V0OkdhbWVPYmplY3QsIHNoYWRvd01hcENhbWVyYTpHYW1lT2JqZWN0KXtcbiAgICAgICAgICAgIHZhciBjYW1lcmFDb21wb25lbnQ6Q2FtZXJhQ29udHJvbGxlciA9IHNoYWRvd01hcENhbWVyYS5nZXRDb21wb25lbnQ8Q2FtZXJhQ29udHJvbGxlcj4oQ2FtZXJhQ29udHJvbGxlcik7XG5cbiAgICAgICAgICAgIG1hdGVyaWFsLmFkZFR3b0RTaGFkb3dNYXBEYXRhKHtcbiAgICAgICAgICAgICAgICBzaGFkb3dCaWFzOiB0aGlzLmxpZ2h0LnNoYWRvd0JpYXMsXG4gICAgICAgICAgICAgICAgc2hhZG93RGFya25lc3M6IHRoaXMubGlnaHQuc2hhZG93RGFya25lc3MsXG4gICAgICAgICAgICAgICAgc2hhZG93U2l6ZTogW3RoaXMubGlnaHQuc2hhZG93TWFwV2lkdGgsIHRoaXMubGlnaHQuc2hhZG93TWFwSGVpZ2h0XSxcbiAgICAgICAgICAgICAgICBsaWdodFBvczogdGhpcy5saWdodC5wb3NpdGlvbixcbiAgICAgICAgICAgICAgICAvL3RvZG8gb3B0aW1pemU6IGNvbXB1dGUgdnBNYXRyaXggb25jZSBoZXJlIG9yIHdoZW4gcmVuZGVyIHNoYWRvd1JlbmRlckxpc3RcbiAgICAgICAgICAgICAgICB2cE1hdHJpeEZyb21MaWdodDogY2FtZXJhQ29tcG9uZW50LndvcmxkVG9DYW1lcmFNYXRyaXguYXBwbHlNYXRyaXgoY2FtZXJhQ29tcG9uZW50LnBNYXRyaXgpXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgbWF0ZXJpYWwuYnVpbGRUd29EU2hhZG93TWFwRGF0YSA9IHtcbiAgICAgICAgICAgICAgICB2cE1hdHJpeEZyb21MaWdodDogY2FtZXJhQ29tcG9uZW50LndvcmxkVG9DYW1lcmFNYXRyaXguYXBwbHlNYXRyaXgoY2FtZXJhQ29tcG9uZW50LnBNYXRyaXgpXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgcHJvdGVjdGVkIGFkZFNoYWRvd01hcChtYXRlcmlhbDpMaWdodE1hdGVyaWFsLCBzaGFkb3dNYXA6VHdvRFNoYWRvd01hcFRleHR1cmUpe1xuICAgICAgICAgICAgbWF0ZXJpYWwuYWRkVHdvRFNoYWRvd01hcChzaGFkb3dNYXApO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4iLCJtb2R1bGUgd2R7XG4gICAgZXhwb3J0IGFic3RyYWN0IGNsYXNzIFJlbmRlcmVye1xuICAgICAgICBwdWJsaWMgc2t5Ym94Q29tbWFuZDpRdWFkQ29tbWFuZCA9IG51bGw7XG5cbiAgICAgICAgcHVibGljIGFic3RyYWN0IGNyZWF0ZVF1YWRDb21tYW5kKCk7XG4gICAgICAgIHB1YmxpYyBhYnN0cmFjdCBhZGRDb21tYW5kKGNvbW1hbmQ6UXVhZENvbW1hbmQpO1xuICAgICAgICBwdWJsaWMgYWJzdHJhY3QgaGFzQ29tbWFuZCgpOmJvb2xlYW47XG4gICAgICAgIHB1YmxpYyBhYnN0cmFjdCByZW5kZXIoKTtcblxuICAgICAgICBwdWJsaWMgaW5pdCgpe1xuICAgICAgICB9XG4gICAgfVxufVxuXG4iLCJtb2R1bGUgd2R7XG4gICAgZXhwb3J0IGNsYXNzIFdlYkdMUmVuZGVyZXIgZXh0ZW5kcyBSZW5kZXJlcntcbiAgICAgICAgcHVibGljIHN0YXRpYyBjcmVhdGUoKTpXZWJHTFJlbmRlcmVyIHtcbiAgICAgICAgICAgIHZhciBvYmogPSBuZXcgdGhpcygpO1xuXG4gICAgICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfY29tbWFuZFF1ZXVlOndkQ2IuQ29sbGVjdGlvbjxRdWFkQ29tbWFuZD4gPSB3ZENiLkNvbGxlY3Rpb24uY3JlYXRlPFF1YWRDb21tYW5kPigpO1xuICAgICAgICBwcml2YXRlIF9jbGVhck9wdGlvbnM6YW55ID0ge1xuICAgICAgICAgICAgY29sb3I6Q29sb3IuY3JlYXRlKFwiIzAwMDAwMFwiKVxuICAgICAgICB9O1xuXG4gICAgICAgIHB1YmxpYyBjcmVhdGVRdWFkQ29tbWFuZCgpOlF1YWRDb21tYW5ke1xuICAgICAgICAgICAgcmV0dXJuIFF1YWRDb21tYW5kLmNyZWF0ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGFkZENvbW1hbmQoY29tbWFuZDpRdWFkQ29tbWFuZCl7XG4gICAgICAgICAgICBpZih0aGlzLl9jb21tYW5kUXVldWUuaGFzQ2hpbGQoY29tbWFuZCkpe1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5fY29tbWFuZFF1ZXVlLmFkZENoaWxkKGNvbW1hbmQpO1xuICAgICAgICAgICAgY29tbWFuZC5pbml0KCk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgaGFzQ29tbWFuZCgpe1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NvbW1hbmRRdWV1ZS5nZXRDb3VudCgpID4gMCB8fCAhIXRoaXMuc2t5Ym94Q29tbWFuZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyByZW5kZXIoKXtcbiAgICAgICAgICAgIHZhciBkZXZpY2VNYW5hZ2VyID0gRGV2aWNlTWFuYWdlci5nZXRJbnN0YW5jZSgpO1xuXG4gICAgICAgICAgICBkZXZpY2VNYW5hZ2VyLmNsZWFyKHRoaXMuX2NsZWFyT3B0aW9ucyk7XG5cbiAgICAgICAgICAgIHRoaXMuX3JlbmRlck9wYXF1ZUNvbW1hbmRzKCk7XG5cbiAgICAgICAgICAgIGRldmljZU1hbmFnZXIuZGVwdGhXcml0ZSA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5fcmVuZGVyU29ydGVkVHJhbnNwYXJlbnRDb21tYW5kcygpO1xuICAgICAgICAgICAgZGV2aWNlTWFuYWdlci5kZXB0aFdyaXRlID0gdHJ1ZTtcblxuXG4gICAgICAgICAgICBpZih0aGlzLnNreWJveENvbW1hbmQpe1xuICAgICAgICAgICAgICAgIGRldmljZU1hbmFnZXIuZGVwdGhGdW5jID0gRGVwdGhGdW5jdGlvbi5MRVFVQUw7XG4gICAgICAgICAgICAgICAgdGhpcy5za3lib3hDb21tYW5kLmV4ZWN1dGUoKTtcbiAgICAgICAgICAgICAgICBkZXZpY2VNYW5hZ2VyLmRlcHRoRnVuYyA9IERlcHRoRnVuY3Rpb24uTEVTUztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5fY2xlYXJDb21tYW5kKCk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgaW5pdCgpe1xuICAgICAgICAgICAgdmFyIGRldmljZU1hbmFnZXIgPSBEZXZpY2VNYW5hZ2VyLmdldEluc3RhbmNlKCk7XG5cbiAgICAgICAgICAgIGRldmljZU1hbmFnZXIuZGVwdGhUZXN0ID0gdHJ1ZTtcbiAgICAgICAgICAgIGRldmljZU1hbmFnZXIuYmxlbmQgPSBmYWxzZTtcbiAgICAgICAgICAgIGRldmljZU1hbmFnZXIuc2V0Q29sb3JXcml0ZSh0cnVlLCB0cnVlLCB0cnVlLCB0cnVlKTtcbiAgICAgICAgICAgIGRldmljZU1hbmFnZXIuc2lkZSA9IFNpZGUuRlJPTlQ7XG4gICAgICAgICAgICBkZXZpY2VNYW5hZ2VyLmRlcHRoV3JpdGUgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHNldENsZWFyQ29sb3IoY29sb3I6Q29sb3Ipe1xuICAgICAgICAgICAgdGhpcy5fc2V0Q2xlYXJPcHRpb25zKHtcbiAgICAgICAgICAgICAgICBjb2xvcjpjb2xvclxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9yZW5kZXJPcGFxdWVDb21tYW5kcygpIHtcbiAgICAgICAgICAgIHRoaXMuX2NvbW1hbmRRdWV1ZVxuICAgICAgICAgICAgICAgIC5yZW1vdmVDaGlsZCgoY29tbWFuZDpRdWFkQ29tbWFuZCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gIWNvbW1hbmQubWF0ZXJpYWwuYmxlbmQ7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAuZm9yRWFjaCgoY29tbWFuZDpRdWFkQ29tbWFuZCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb21tYW5kLmV4ZWN1dGUoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX3JlbmRlclNvcnRlZFRyYW5zcGFyZW50Q29tbWFuZHMoKSB7XG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICAgICAgICAgIHRoaXMuX2NvbW1hbmRRdWV1ZVxuICAgICAgICAgICAgICAgIC5zb3J0KChhOlF1YWRDb21tYW5kLCBiOlF1YWRDb21tYW5kKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzZWxmLl9nZXRPYmplY3RUb0NhbWVyYVpEaXN0YW5jZShiKSAtIHNlbGYuX2dldE9iamVjdFRvQ2FtZXJhWkRpc3RhbmNlKGEpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmZvckVhY2goKGNvbW1hbmQ6UXVhZENvbW1hbmQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29tbWFuZC5leGVjdXRlKCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9nZXRPYmplY3RUb0NhbWVyYVpEaXN0YW5jZShxdWFkKXtcbiAgICAgICAgICAgIHJldHVybiBEaXJlY3Rvci5nZXRJbnN0YW5jZSgpLnNjZW5lLmNhbWVyYS50cmFuc2Zvcm0ucG9zaXRpb24ueiAtIHF1YWQuejtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX2NsZWFyQ29tbWFuZCgpe1xuICAgICAgICAgICAgdGhpcy5fY29tbWFuZFF1ZXVlLnJlbW92ZUFsbENoaWxkcmVuKCk7XG4gICAgICAgICAgICB0aGlzLnNreWJveENvbW1hbmQgPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfc2V0Q2xlYXJPcHRpb25zKGNsZWFyT3B0aW9uczphbnkpe1xuICAgICAgICAgICAgd2RDYi5FeHRlbmRVdGlscy5leHRlbmQodGhpcy5fY2xlYXJPcHRpb25zLCBjbGVhck9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwibW9kdWxlIHdke1xuICAgIGV4cG9ydCBlbnVtIERyYXdNb2Rle1xuICAgICAgICBUUklBTkdMRVMgPSA8YW55PlwiVFJJQU5HTEVTXCIsXG4gICAgICAgIExJTkVTID0gPGFueT5cIkxJTkVTXCJcbiAgICB9XG59XG5cbiIsIm1vZHVsZSB3ZCB7XG4gICAgZXhwb3J0IGVudW0gQnVmZmVyVHlwZXtcbiAgICAgICAgVU5TSUdORURfQllURSA9IDxhbnk+XCJVTlNJR05FRF9CWVRFXCIsXG4gICAgICAgIFNIT1JUID0gPGFueT5cIlNIT1JUXCIsXG4gICAgICAgIFVOU0lHTkVEX1NIT1JUID0gPGFueT5cIlVOU0lHTkVEX1NIT1JUXCIsXG4gICAgICAgIElOVCA9IDxhbnk+XCJJTlRcIixcbiAgICAgICAgVU5TSUdORURfSU5UID0gPGFueT5cIlVOU0lHTkVEX0lOVFwiLFxuICAgICAgICBGTE9BVCA9IDxhbnk+XCJGTE9BVFwiXG4gICAgfVxufVxuIiwibW9kdWxlIHdkIHtcbiAgICBleHBvcnQgZW51bSBCdWZmZXJEYXRhVHlwZXtcbiAgICAgICAgVkVSVElDRSA9IDxhbnk+XCJWRVJUSUNFXCIsXG4gICAgICAgIElORElDRSA9IDxhbnk+XCJJTkRJQ0VcIixcbiAgICAgICAgTk9STUFMID0gPGFueT5cIk5PUk1BTFwiLFxuICAgICAgICBURVhDT09SRCA9IDxhbnk+XCJURVhDT09SRFwiLFxuICAgICAgICBUQU5HRU5UID0gPGFueT5cIlRBTkdFTlRcIixcbiAgICAgICAgQ09MT1IgPSA8YW55PlwiQ09MT1JcIlxuICAgIH1cbn1cblxuIiwibW9kdWxlIHdkIHtcbiAgICBleHBvcnQgZW51bSBCdWZmZXJVc2FnZXtcbiAgICAgICAgU1RSRUFNX0RSQVcgPSA8YW55PlwiU1RSRUFNX0RSQVdcIixcbiAgICAgICAgU1RBVElDX0RSQVcgPSA8YW55PlwiU1RBVElDX0RSQVdcIixcbiAgICAgICAgRFlOQU1JQ19EUkFXID0gPGFueT5cIkRZTkFNSUNfRFJBV1wiXG4gICAgfVxufVxuIiwibW9kdWxlIHdke1xuICAgIGV4cG9ydCBjbGFzcyBCdWZmZXJ7XG4gICAgICAgIHB1YmxpYyBidWZmZXI6YW55ID0gbnVsbDtcbiAgICAgICAgcHVibGljIHR5cGU6c3RyaW5nID0gbnVsbDtcbiAgICAgICAgcHVibGljIGNvdW50Om51bWJlciA9IG51bGw7XG5cbiAgICAgICAgcHVibGljIGRpc3Bvc2UoKXtcbiAgICAgICAgICAgIERldmljZU1hbmFnZXIuZ2V0SW5zdGFuY2UoKS5nbC5kZWxldGVCdWZmZXIodGhpcy5idWZmZXIpO1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMuYnVmZmVyO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4iLCJtb2R1bGUgd2R7XG4gICAgZXhwb3J0IGNsYXNzIEVsZW1lbnRCdWZmZXIgZXh0ZW5kcyBCdWZmZXJ7XG4gICAgICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlKCk6RWxlbWVudEJ1ZmZlcjtcbiAgICAgICAgcHVibGljIHN0YXRpYyBjcmVhdGUoZGF0YSwgdHlwZTpCdWZmZXJUeXBlLCB1c2FnZT86QnVmZmVyVXNhZ2UpOkVsZW1lbnRCdWZmZXI7XG5cbiAgICAgICAgcHVibGljIHN0YXRpYyBjcmVhdGUoLi4uYXJncyk6RWxlbWVudEJ1ZmZlciB7XG4gICAgICAgICAgICB2YXIgb2JqID0gbmV3IHRoaXMoKTtcblxuICAgICAgICAgICAgb2JqLmluaXRXaGVuQ3JlYXRlLmFwcGx5KG9iaiwgYXJncyk7XG5cbiAgICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF90eXBlU2l6ZTpudW1iZXIgPSBudWxsO1xuICAgICAgICBnZXQgdHlwZVNpemUoKSB7IHJldHVybiB0aGlzLl90eXBlU2l6ZTsgfVxuXG4gICAgICAgIHB1YmxpYyBkYXRhOmFueSA9IG51bGw7XG5cbiAgICAgICAgcHJpdmF0ZSBfdHlwZTpCdWZmZXJUeXBlID0gbnVsbDtcblxuXG4gICAgICAgIHB1YmxpYyBpbml0V2hlbkNyZWF0ZSgpO1xuICAgICAgICBwdWJsaWMgaW5pdFdoZW5DcmVhdGUoZGF0YTphbnksIHR5cGU6QnVmZmVyVHlwZSwgdXNhZ2U/OkJ1ZmZlclVzYWdlKTtcblxuICAgICAgICBwdWJsaWMgaW5pdFdoZW5DcmVhdGUoLi4uYXJncykge1xuICAgICAgICAgICAgdmFyIGdsID0gRGV2aWNlTWFuYWdlci5nZXRJbnN0YW5jZSgpLmdsO1xuXG5cbiAgICAgICAgICAgIHRoaXMuYnVmZmVyID0gZ2wuY3JlYXRlQnVmZmVyKCk7XG4gICAgICAgICAgICBpZiAoIXRoaXMuYnVmZmVyKSB7XG4gICAgICAgICAgICAgICAgTG9nLmxvZygnRmFpbGVkIHRvIGNyZWF0ZSB0aGUgdGhpcy5idWZmZXIgb2JqZWN0Jyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmKGFyZ3MubGVuZ3RoID09PSAwKXtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgIGxldCBkYXRhOmFueSA9IGFyZ3NbMF0sXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6QnVmZmVyVHlwZSA9IGFyZ3NbMV0sXG4gICAgICAgICAgICAgICAgICAgIHVzYWdlOkJ1ZmZlclVzYWdlID0gYXJnc1syXSB8fCBCdWZmZXJVc2FnZS5TVEFUSUNfRFJBVztcblxuICAgICAgICAgICAgICAgIGlmKCFkYXRhIHx8ICF0aGlzLl9jaGVja0RhdGFUeXBlKGRhdGEsIHR5cGUpKXtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZ2wuYmluZEJ1ZmZlcihnbC5FTEVNRU5UX0FSUkFZX0JVRkZFUiwgdGhpcy5idWZmZXIpO1xuICAgICAgICAgICAgICAgIGdsLmJ1ZmZlckRhdGEoZ2wuRUxFTUVOVF9BUlJBWV9CVUZGRVIsIGRhdGEsIGdsW3VzYWdlXSk7XG5cbiAgICAgICAgICAgICAgICBnbC5iaW5kQnVmZmVyKGdsLkVMRU1FTlRfQVJSQVlfQlVGRkVSLCBudWxsKTtcblxuICAgICAgICAgICAgICAgIHRoaXMudHlwZSA9IGdsW3R5cGVdO1xuICAgICAgICAgICAgICAgIHRoaXMuX3R5cGUgPSB0eXBlO1xuICAgICAgICAgICAgICAgIHRoaXMuY291bnQgPSBkYXRhLmxlbmd0aDtcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgICAgICAgICAgICAgIHRoaXMuX3R5cGVTaXplID0gdGhpcy5fZ2V0SW5mbyh0eXBlKS5zaXplO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuYnVmZmVyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgQHJlcXVpcmUoZnVuY3Rpb24oZGF0YTphbnksIHR5cGU6QnVmZmVyVHlwZSA9IHRoaXMuX3R5cGUpe1xuICAgICAgICAgICAgYXNzZXJ0KHRoaXMuYnVmZmVyLCBMb2cuaW5mby5GVU5DX01VU1QoXCJjcmVhdGUgZ2wgYnVmZmVyXCIpKTtcbiAgICAgICAgfSlcbiAgICAgICAgcHVibGljIHJlc2V0RGF0YShkYXRhOmFueSwgdHlwZTpCdWZmZXJUeXBlID0gdGhpcy5fdHlwZSl7XG4gICAgICAgICAgICB2YXIgZ2wgPSBEZXZpY2VNYW5hZ2VyLmdldEluc3RhbmNlKCkuZ2w7XG5cbiAgICAgICAgICAgIGdsLmJpbmRCdWZmZXIoZ2wuRUxFTUVOVF9BUlJBWV9CVUZGRVIsIHRoaXMuYnVmZmVyKTtcbiAgICAgICAgICAgIGdsLmJ1ZmZlckRhdGEoZ2wuRUxFTUVOVF9BUlJBWV9CVUZGRVIsIGRhdGEsIGdsLkRZTkFNSUNfRFJBVyk7XG5cbiAgICAgICAgICAgIHRoaXMudHlwZSA9IGdsW3R5cGVdO1xuICAgICAgICAgICAgdGhpcy5fdHlwZSA9IHR5cGU7XG4gICAgICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgICAgICAgICAgdGhpcy5jb3VudCA9IGRhdGEubGVuZ3RoO1xuICAgICAgICAgICAgdGhpcy5fdHlwZVNpemUgPSB0aGlzLl9nZXRJbmZvKHR5cGUpLnNpemU7XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfY2hlY2tEYXRhVHlwZShkYXRhLCB0eXBlOkJ1ZmZlclR5cGUpe1xuICAgICAgICAgICAgdmFyIGluZm8gPSB0aGlzLl9nZXRJbmZvKHR5cGUpO1xuXG4gICAgICAgICAgICByZXR1cm4gZGF0YSBpbnN0YW5jZW9mIGluZm8udHlwZUNsYXNzO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfZ2V0SW5mbyh0eXBlOkJ1ZmZlclR5cGUpOnt0eXBlQ2xhc3M6YW55LHNpemU6bnVtYmVyfXtcbiAgICAgICAgICAgIHZhciBpbmZvID0gbnVsbDtcblxuICAgICAgICAgICAgc3dpdGNoICh0eXBlKXtcbiAgICAgICAgICAgICAgICBjYXNlIEJ1ZmZlclR5cGUuVU5TSUdORURfQllURTpcbiAgICAgICAgICAgICAgICAgICAgaW5mbyA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVDbGFzczogVWludDhBcnJheSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6IDFcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBCdWZmZXJUeXBlLlNIT1JUOlxuICAgICAgICAgICAgICAgICAgICBpbmZvID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZUNsYXNzOiBJbnQxNkFycmF5LFxuICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZTogMlxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIEJ1ZmZlclR5cGUuVU5TSUdORURfU0hPUlQ6XG4gICAgICAgICAgICAgICAgICAgIGluZm8gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlQ2xhc3M6IFVpbnQxNkFycmF5LFxuICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZTogMlxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIEJ1ZmZlclR5cGUuSU5UOlxuICAgICAgICAgICAgICAgICAgICBpbmZvID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZUNsYXNzOiBJbnQzMkFycmF5LFxuICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZTogNFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIEJ1ZmZlclR5cGUuVU5TSUdORURfSU5UOlxuICAgICAgICAgICAgICAgICAgICBpbmZvID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZUNsYXNzOiBVaW50MzJBcnJheSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6IDRcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBCdWZmZXJUeXBlLkZMT0FUOlxuICAgICAgICAgICAgICAgICAgICBpbmZvID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZUNsYXNzOiBGbG9hdDMyQXJyYXksXG4gICAgICAgICAgICAgICAgICAgICAgICBzaXplOiA0XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIExvZy5lcnJvcih0cnVlLCBMb2cuaW5mby5GVU5DX0lOVkFMSUQoXCJCdWZmZXJUeXBlXCIpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBpbmZvO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwibW9kdWxlIHdke1xuICAgIGV4cG9ydCBjbGFzcyBBcnJheUJ1ZmZlciBleHRlbmRzIEJ1ZmZlcntcbiAgICAgICAgcHVibGljIHN0YXRpYyBjcmVhdGUoKTpBcnJheUJ1ZmZlcjtcbiAgICAgICAgcHVibGljIHN0YXRpYyBjcmVhdGUoZGF0YTphbnksIHNpemU6bnVtYmVyLCB0eXBlOkJ1ZmZlclR5cGUsIHVzYWdlPzpCdWZmZXJVc2FnZSk6QXJyYXlCdWZmZXI7XG5cbiAgICAgICAgcHVibGljIHN0YXRpYyBjcmVhdGUoLi4uYXJncyk6QXJyYXlCdWZmZXIge1xuICAgICAgICAgICAgdmFyIG9iaiA9IG5ldyB0aGlzKCk7XG5cbiAgICAgICAgICAgIG9iai5pbml0V2hlbkNyZWF0ZS5hcHBseShvYmosIGFyZ3MpO1xuXG4gICAgICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHNpemU6bnVtYmVyID0gbnVsbDtcbiAgICAgICAgcHVibGljIGRhdGE6YW55ID0gbnVsbDtcblxuICAgICAgICBwcml2YXRlIF90eXBlOkJ1ZmZlclR5cGUgPSBudWxsO1xuXG5cbiAgICAgICAgcHVibGljIGluaXRXaGVuQ3JlYXRlKCk7XG4gICAgICAgIHB1YmxpYyBpbml0V2hlbkNyZWF0ZShkYXRhOmFueSwgc2l6ZTpudW1iZXIsIHR5cGU6QnVmZmVyVHlwZSwgdXNhZ2U/OkJ1ZmZlclVzYWdlKTtcblxuICAgICAgICBwdWJsaWMgaW5pdFdoZW5DcmVhdGUoLi4uYXJncykge1xuICAgICAgICAgICAgdmFyIGdsID0gRGV2aWNlTWFuYWdlci5nZXRJbnN0YW5jZSgpLmdsO1xuXG5cbiAgICAgICAgICAgIHRoaXMuYnVmZmVyID0gZ2wuY3JlYXRlQnVmZmVyKCk7XG4gICAgICAgICAgICBpZiAoIXRoaXMuYnVmZmVyKSB7XG4gICAgICAgICAgICAgICAgTG9nLmxvZygnRmFpbGVkIHRvIGNyZWF0ZSB0aGUgdGhpcy5idWZmZXIgb2JqZWN0Jyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmKGFyZ3MubGVuZ3RoID09PSAwKXtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgIGxldCBkYXRhOmFueSA9IGFyZ3NbMF0sXG4gICAgICAgICAgICAgICAgICAgIHNpemU6bnVtYmVyID0gYXJnc1sxXSxcbiAgICAgICAgICAgICAgICAgICAgdHlwZTpCdWZmZXJUeXBlID0gYXJnc1syXSxcbiAgICAgICAgICAgICAgICAgICAgdXNhZ2U6QnVmZmVyVXNhZ2UgPSBhcmdzWzNdIHx8IEJ1ZmZlclVzYWdlLlNUQVRJQ19EUkFXO1xuXG4gICAgICAgICAgICAgICAgaWYoIWRhdGEpe1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBnbC5iaW5kQnVmZmVyKGdsLkFSUkFZX0JVRkZFUiwgdGhpcy5idWZmZXIpO1xuICAgICAgICAgICAgICAgIGdsLmJ1ZmZlckRhdGEoZ2wuQVJSQVlfQlVGRkVSLCBkYXRhLCBnbFt1c2FnZV0pO1xuXG4gICAgICAgICAgICAgICAgZ2wuYmluZEJ1ZmZlcihnbC5BUlJBWV9CVUZGRVIsIG51bGwpO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5zaXplID0gc2l6ZTtcbiAgICAgICAgICAgICAgICB0aGlzLnR5cGUgPSBnbFt0eXBlXTtcbiAgICAgICAgICAgICAgICB0aGlzLl90eXBlID0gdHlwZTtcbiAgICAgICAgICAgICAgICB0aGlzLmNvdW50ID0gZGF0YS5sZW5ndGggLyBzaXplO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcblxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmJ1ZmZlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIEByZXF1aXJlKGZ1bmN0aW9uKGRhdGE6YW55LCBzaXplOm51bWJlciA9IHRoaXMuc2l6ZSwgdHlwZTpCdWZmZXJUeXBlID0gdGhpcy5fdHlwZSl7XG4gICAgICAgICAgICBhc3NlcnQodGhpcy5idWZmZXIsIExvZy5pbmZvLkZVTkNfTVVTVChcImNyZWF0ZSBnbCBidWZmZXJcIikpO1xuICAgICAgICB9KVxuICAgICAgICBwdWJsaWMgcmVzZXREYXRhKGRhdGE6YW55LCBzaXplOm51bWJlciA9IHRoaXMuc2l6ZSwgdHlwZTpCdWZmZXJUeXBlID0gdGhpcy5fdHlwZSl7XG4gICAgICAgICAgICB2YXIgZ2wgPSBEZXZpY2VNYW5hZ2VyLmdldEluc3RhbmNlKCkuZ2w7XG5cbiAgICAgICAgICAgIGdsLmJpbmRCdWZmZXIoZ2wuQVJSQVlfQlVGRkVSLCB0aGlzLmJ1ZmZlcik7XG4gICAgICAgICAgICBnbC5idWZmZXJEYXRhKGdsLkFSUkFZX0JVRkZFUiwgZGF0YSwgZ2wuRFlOQU1JQ19EUkFXKTtcblxuICAgICAgICAgICAgdGhpcy5zaXplID0gc2l6ZTtcbiAgICAgICAgICAgIHRoaXMudHlwZSA9IGdsW3R5cGVdO1xuICAgICAgICAgICAgdGhpcy5fdHlwZSA9IHR5cGU7XG4gICAgICAgICAgICB0aGlzLmNvdW50ID0gZGF0YS5sZW5ndGggLyBzaXplO1xuICAgICAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcblxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbiIsIm1vZHVsZSB3ZHtcbiAgICBjb25zdCBfdGFibGUgPSB3ZENiLkhhc2guY3JlYXRlPHN0cmluZz4oKTtcblxuICAgIC8vdG9kbyByZW1vdmUgPGFueT5cbiAgICBfdGFibGUuYWRkQ2hpbGQoPGFueT5CdWZmZXJEYXRhVHlwZS5WRVJUSUNFLCBcInZlcnRpY2VzXCIpO1xuICAgIF90YWJsZS5hZGRDaGlsZCg8YW55PkJ1ZmZlckRhdGFUeXBlLklORElDRSwgXCJpbmRpY2VzXCIpO1xuICAgIF90YWJsZS5hZGRDaGlsZCg8YW55PkJ1ZmZlckRhdGFUeXBlLk5PUk1BTCwgXCJub3JtYWxzXCIpO1xuICAgIF90YWJsZS5hZGRDaGlsZCg8YW55PkJ1ZmZlckRhdGFUeXBlLlRFWENPT1JELCBcInRleENvb3Jkc1wiKTtcbiAgICBfdGFibGUuYWRkQ2hpbGQoPGFueT5CdWZmZXJEYXRhVHlwZS5DT0xPUiwgXCJjb2xvcnNcIik7XG4gICAgX3RhYmxlLmFkZENoaWxkKDxhbnk+QnVmZmVyRGF0YVR5cGUuVEFOR0VOVCwgXCJ0YW5nZW50c1wiKTtcblxuICAgIGV4cG9ydCBjbGFzcyBCdWZmZXJEYXRhVGFibGV7XG4gICAgICAgIHB1YmxpYyBzdGF0aWMgZ2V0R2VvbWV0cnlEYXRhTmFtZSh0eXBlOkJ1ZmZlckRhdGFUeXBlKXtcbiAgICAgICAgICAgIC8vdG9kbyByZW1vdmUgPGFueT5cbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBfdGFibGUuZ2V0Q2hpbGQoPGFueT50eXBlKTtcblxuICAgICAgICAgICAgTG9nLmVycm9yKHJlc3VsdCA9PT0gdm9pZCAwLCBMb2cuaW5mby5GVU5DX05PVF9FWElTVCh0eXBlLCBcImluIEJ1ZmZlckRhdGFUYWJsZVwiKSk7XG5cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbiIsIm1vZHVsZSB3ZHtcbiAgICBleHBvcnQgY2xhc3MgUHJvZ3JhbXtcbiAgICAgICAgcHVibGljIHN0YXRpYyBjcmVhdGUoKTpQcm9ncmFtIHtcbiAgICAgICAgICAgIHZhciBvYmogPSBuZXcgdGhpcygpO1xuXG4gICAgICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfcHJvZ3JhbTphbnkgPSBudWxsO1xuICAgICAgICBwcml2YXRlIF9zaGFkZXI6U2hhZGVyID0gbnVsbDtcblxuICAgICAgICBwdWJsaWMgdXNlKCl7XG4gICAgICAgICAgICBEZXZpY2VNYW5hZ2VyLmdldEluc3RhbmNlKCkuZ2wudXNlUHJvZ3JhbSh0aGlzLl9wcm9ncmFtKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBnZXRVbmlmb3JtTG9jYXRpb24obmFtZTpzdHJpbmcpe1xuICAgICAgICAgICAgcmV0dXJuIERldmljZU1hbmFnZXIuZ2V0SW5zdGFuY2UoKS5nbC5nZXRVbmlmb3JtTG9jYXRpb24odGhpcy5fcHJvZ3JhbSwgbmFtZSk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgc2VuZFVuaWZvcm1EYXRhKG5hbWU6c3RyaW5nLCB0eXBlOlZhcmlhYmxlVHlwZSwgZGF0YTphbnkpO1xuICAgICAgICBwdWJsaWMgc2VuZFVuaWZvcm1EYXRhKHBvczpXZWJHTFVuaWZvcm1Mb2NhdGlvbiwgdHlwZTpWYXJpYWJsZVR5cGUsIGRhdGE6YW55KTtcblxuICAgICAgICBwdWJsaWMgc2VuZFVuaWZvcm1EYXRhKC4uLmFyZ3Mpe1xuICAgICAgICAgICAgdmFyIGdsID0gRGV2aWNlTWFuYWdlci5nZXRJbnN0YW5jZSgpLmdsLFxuICAgICAgICAgICAgICAgIHBvcyA9IG51bGwsXG4gICAgICAgICAgICAgICAgdHlwZTpWYXJpYWJsZVR5cGUgPSBudWxsLFxuICAgICAgICAgICAgICAgIGRhdGE6YW55ID0gbnVsbDtcblxuICAgICAgICAgICAgaWYoYXJnc1swXSA9PT0gbnVsbCB8fCBhcmdzWzBdIGluc3RhbmNlb2YgV2ViR0xVbmlmb3JtTG9jYXRpb24pe1xuICAgICAgICAgICAgICAgIHBvcyA9IGFyZ3NbMF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgIGxldCBuYW1lOnN0cmluZyA9IGFyZ3NbMF07XG5cbiAgICAgICAgICAgICAgICBwb3MgPSB0aGlzLmdldFVuaWZvcm1Mb2NhdGlvbihuYW1lKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdHlwZSA9IGFyZ3NbMV07XG4gICAgICAgICAgICBkYXRhID0gYXJnc1syXTtcblxuXG4gICAgICAgICAgICBpZiAodGhpcy5pc1VuaWZvcm1EYXRhTm90RXhpc3RCeUxvY2F0aW9uKHBvcykgfHwgZGF0YSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYoSnVkZ2VVdGlscy5pc0Z1bmN0aW9uKGRhdGEpKXtcbiAgICAgICAgICAgICAgICBkYXRhID0gZGF0YSgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBzd2l0Y2ggKHR5cGUpe1xuICAgICAgICAgICAgICAgIGNhc2UgVmFyaWFibGVUeXBlLkZMT0FUXzE6XG4gICAgICAgICAgICAgICAgICAgIGdsLnVuaWZvcm0xZihwb3MsIGRhdGEpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFZhcmlhYmxlVHlwZS5GTE9BVF8yOlxuICAgICAgICAgICAgICAgICAgICBnbC51bmlmb3JtMmYocG9zLCBkYXRhWzBdLCBkYXRhWzFdKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBWYXJpYWJsZVR5cGUuRkxPQVRfMzpcbiAgICAgICAgICAgICAgICAgICAgZGF0YSA9IHRoaXMuX2NvbnZlcnRUb1ZlY3RvcjMoZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIGdsLnVuaWZvcm0zZihwb3MsIGRhdGEueCwgZGF0YS55LCBkYXRhLnopO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFZhcmlhYmxlVHlwZS5GTE9BVF80OlxuICAgICAgICAgICAgICAgICAgICBkYXRhID0gdGhpcy5fY29udmVydFRvVmVjdG9yNChkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgZ2wudW5pZm9ybTRmKHBvcywgZGF0YS54LCBkYXRhLnksIGRhdGEueiwgZGF0YS53KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBWYXJpYWJsZVR5cGUuRkxPQVRfTUFUMzpcbiAgICAgICAgICAgICAgICAgICAgZ2wudW5pZm9ybU1hdHJpeDNmdihwb3MsZmFsc2UsIGRhdGEudmFsdWVzKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBWYXJpYWJsZVR5cGUuRkxPQVRfTUFUNDpcbiAgICAgICAgICAgICAgICAgICAgZ2wudW5pZm9ybU1hdHJpeDRmdihwb3MsZmFsc2UsIGRhdGEudmFsdWVzKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBWYXJpYWJsZVR5cGUuTlVNQkVSXzE6XG4gICAgICAgICAgICAgICAgY2FzZSBWYXJpYWJsZVR5cGUuU0FNUExFUl9DVUJFOlxuICAgICAgICAgICAgICAgIGNhc2UgVmFyaWFibGVUeXBlLlNBTVBMRVJfMkQ6XG4gICAgICAgICAgICAgICAgICAgIGdsLnVuaWZvcm0xaShwb3MsIGRhdGEpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0IDpcbiAgICAgICAgICAgICAgICAgICAgTG9nLmVycm9yKHRydWUsIExvZy5pbmZvLkZVTkNfSU5WQUxJRChcIlZhcmlhYmxlVHlwZTpcIiwgdHlwZSkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vdG9kbyBzdXBwb3J0IFNUUlVDVFVSRVNcbiAgICAgICAgcHVibGljIHNlbmRVbmlmb3JtRGF0YUZyb21DdXN0b21TaGFkZXIoKXtcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgICAgICAgICAgdGhpcy5fc2hhZGVyLnVuaWZvcm1zXG4gICAgICAgICAgICAgICAgLmZpbHRlcigodmFsOlNoYWRlckRhdGEpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbC52YWx1ZSAhPT0gVmFyaWFibGVDYXRlZ29yeS5FTkdJTkU7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAuZm9yRWFjaCgodmFsOlNoYWRlckRhdGEsIGtleTpzdHJpbmcpID0+IHtcblxuICAgICAgICAgICAgICAgICAgICBpZih2YWwudHlwZSA9PT0gVmFyaWFibGVUeXBlLlNUUlVDVFVSRSl7XG4gICAgICAgICAgICAgICAgICAgICAgICBMb2cuZXJyb3IoIUp1ZGdlVXRpbHMuaXNEaXJlY3RPYmplY3QodmFsLnZhbHVlKSwgTG9nLmluZm8uRlVOQ19NVVNUX0JFKFwidmFsdWUncyB0eXBlXCIsIFwib2JqZWN0e31cIikpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IobGV0IGkgaW4gdmFsLnZhbHVlKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnNlbmRTdHJ1Y3R1cmVEYXRhKGAke2tleX0uJHtpfWAsIHZhbC52YWx1ZVtpXS50eXBlLCB2YWwudmFsdWVbaV0udmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnNlbmRVbmlmb3JtRGF0YShrZXksIHZhbC50eXBlLCB2YWwudmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgc2VuZEF0dHJpYnV0ZURhdGEobmFtZTpzdHJpbmcsIHR5cGU6VmFyaWFibGVUeXBlLCBkYXRhOmFueSl7XG4gICAgICAgICAgICB2YXIgZ2wgPSBEZXZpY2VNYW5hZ2VyLmdldEluc3RhbmNlKCkuZ2wsXG4gICAgICAgICAgICAgICAgcG9zID0gbnVsbCxcbiAgICAgICAgICAgICAgICBidWZmZXI6QXJyYXlCdWZmZXIgPSBudWxsO1xuXG4gICAgICAgICAgICBwb3M9IGdsLmdldEF0dHJpYkxvY2F0aW9uKHRoaXMuX3Byb2dyYW0sIG5hbWUpO1xuXG4gICAgICAgICAgICBpZiAocG9zID09PSAtMSB8fCBkYXRhID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZihKdWRnZVV0aWxzLmlzRnVuY3Rpb24oZGF0YSkpe1xuICAgICAgICAgICAgICAgIGJ1ZmZlciA9IGRhdGEoKTtcblxuICAgICAgICAgICAgICAgIExvZy5lcnJvcighKGRhdGEgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlciksIExvZy5pbmZvLkZVTkNfTVVTVF9CRShcIkFycmF5QnVmZmVyXCIpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICAgICAgYnVmZmVyID0gZGF0YTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc3dpdGNoICh0eXBlKXtcbiAgICAgICAgICAgICAgICBjYXNlIFZhcmlhYmxlVHlwZS5CVUZGRVI6XG4gICAgICAgICAgICAgICAgICAgIGdsLmJpbmRCdWZmZXIoZ2wuQVJSQVlfQlVGRkVSLCBidWZmZXIuYnVmZmVyKTtcbiAgICAgICAgICAgICAgICAgICAgZ2wudmVydGV4QXR0cmliUG9pbnRlcihwb3MsIGJ1ZmZlci5zaXplLCBidWZmZXIudHlwZSwgZmFsc2UsIDAsIDApO1xuICAgICAgICAgICAgICAgICAgICBnbC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheShwb3MpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0IDpcbiAgICAgICAgICAgICAgICAgICAgTG9nLmVycm9yKHRydWUsIExvZy5pbmZvLkZVTkNfSU5WQUxJRChcIlZhcmlhYmxlVHlwZTpcIiwgdHlwZSkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBzZW5kQXR0cmlidXRlRGF0YUZyb21DdXN0b21TaGFkZXIoKXtcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgICAgICAgICAgdGhpcy5fc2hhZGVyLmF0dHJpYnV0ZXNcbiAgICAgICAgICAgICAgICAuZmlsdGVyKCh2YWw6U2hhZGVyRGF0YSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsLnZhbHVlICE9PSBWYXJpYWJsZUNhdGVnb3J5LkVOR0lORTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5mb3JFYWNoKCh2YWw6U2hhZGVyRGF0YSwga2V5OnN0cmluZykgPT4ge1xuICAgICAgICAgICAgICAgICAgICBzZWxmLnNlbmRBdHRyaWJ1dGVEYXRhKGtleSwgc2VsZi5fY29udmVydEF0dHJpYnV0ZURhdGFUeXBlKHZhbCksIHZhbC52YWx1ZSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgc2VuZFN0cnVjdHVyZURhdGEobmFtZTpzdHJpbmcsIHR5cGU6VmFyaWFibGVUeXBlLCBkYXRhOmFueSl7XG4gICAgICAgICAgICB0aGlzLnNlbmRVbmlmb3JtRGF0YShuYW1lLCB0eXBlLCBkYXRhKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBpbml0V2l0aFNoYWRlcihzaGFkZXI6U2hhZGVyKXtcbiAgICAgICAgICAgIHZhciBnbCA9IERldmljZU1hbmFnZXIuZ2V0SW5zdGFuY2UoKS5nbCxcbiAgICAgICAgICAgICAgICB2cyA9IG51bGwsXG4gICAgICAgICAgICAgICAgZnMgPSBudWxsO1xuXG4gICAgICAgICAgICB0aGlzLl9wcm9ncmFtID0gRGV2aWNlTWFuYWdlci5nZXRJbnN0YW5jZSgpLmdsLmNyZWF0ZVByb2dyYW0oKTtcblxuICAgICAgICAgICAgdnMgPSBzaGFkZXIuY3JlYXRlVnNTaGFkZXIoKTtcbiAgICAgICAgICAgIGZzID0gc2hhZGVyLmNyZWF0ZUZzU2hhZGVyKCk7XG5cbiAgICAgICAgICAgIHRoaXMuX3NoYWRlciA9IHNoYWRlcjtcblxuICAgICAgICAgICAgZ2wuYXR0YWNoU2hhZGVyKHRoaXMuX3Byb2dyYW0sIHZzKTtcbiAgICAgICAgICAgIGdsLmF0dGFjaFNoYWRlcih0aGlzLl9wcm9ncmFtLCBmcyk7XG5cblxuICAgICAgICAgICAgLyohXG4gICAgICAgICAgICAgaWYgd2FybjpcIkF0dHJpYnV0ZSAwIGlzIGRpc2FibGVkLiBUaGlzIGhhcyBzaWduaWZpY2FudCBwZXJmb3JtYW5jZSBwZW5hbHR5XCIgd2hlbiBydW4sXG4gICAgICAgICAgICAgdGhlbiBkbyB0aGlzIGJlZm9yZSBsaW5rUHJvZ3JhbTpcbiAgICAgICAgICAgICBnbC5iaW5kQXR0cmliTG9jYXRpb24oIHRoaXMuX3Byb2dyYW0sIDAsIFwiYV9wb3NpdGlvblwiKTtcblxuXG5cbiAgICAgICAgICAgICBjYW4gcmVmZXJlbmNlIGhlcmU6XG4gICAgICAgICAgICAgaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8yMDMwNTIzMS93ZWJnbC13YXJuaW5nLWF0dHJpYnV0ZS0wLWlzLWRpc2FibGVkLXRoaXMtaGFzLXNpZ25pZmljYW50LXBlcmZvcm1hbmNlLXBlbmFsdD9hbnN3ZXJ0YWI9dm90ZXMjdGFiLXRvcFxuXG5cbiAgICAgICAgICAgICBPcGVuR0wgcmVxdWlyZXMgYXR0cmlidXRlIHplcm8gdG8gYmUgZW5hYmxlZCBvdGhlcndpc2UgaXQgd2lsbCBub3QgcmVuZGVyIGFueXRoaW5nLlxuICAgICAgICAgICAgIE9uIHRoZSBvdGhlciBoYW5kIE9wZW5HTCBFUyAyLjAgb24gd2hpY2ggV2ViR0wgaXMgYmFzZWQgZG9lcyBub3QuIFNvLCB0byBlbXVsYXRlIE9wZW5HTCBFUyAyLjAgb24gdG9wIG9mIE9wZW5HTCBpZiB5b3UgZG9uJ3QgZW5hYmxlIGF0dHJpYnV0ZSAwIHRoZSBicm93c2VyIGhhcyB0byBtYWtlIGEgYnVmZmVyIGZvciB5b3UgbGFyZ2UgZW5vdWdoIGZvciB0aGUgbnVtYmVyIG9mIHZlcnRpY2VzIHlvdSd2ZSByZXF1ZXN0ZWQgdG8gYmUgZHJhd24sIGZpbGwgaXQgd2l0aCB0aGUgY29ycmVjdCB2YWx1ZSAoc2VlIGdsLnZlcnRleEF0dHJpYiksXG4gICAgICAgICAgICAgYXR0YWNoIGl0IHRvIGF0dHJpYnV0ZSB6ZXJvLCBhbmQgZW5hYmxlIGl0LlxuXG4gICAgICAgICAgICAgSXQgZG9lcyBhbGwgdGhpcyBiZWhpbmQgdGhlIHNjZW5lcyBidXQgaXQncyBpbXBvcnRhbnQgZm9yIHlvdSB0byBrbm93IHRoYXQgaXQgdGFrZXMgdGltZSB0byBjcmVhdGUgYW5kIGZpbGwgdGhhdCBidWZmZXIuIFRoZXJlIGFyZSBvcHRpbWl6YXRpb25zIHRoZSBicm93c2VyIGNhbiBtYWtlIGJ1dCBpbiB0aGUgZ2VuZXJhbCBjYXNlLFxuICAgICAgICAgICAgIGlmIHlvdSB3ZXJlIHRvIGFzc3VtZSB5b3Ugd2VyZSBydW5uaW5nIG9uIE9wZW5HTCBFUyAyLjAgYW5kIHVzZWQgYXR0cmlidXRlIHplcm8gYXMgYSBjb25zdGFudCBsaWtlIHlvdSBhcmUgc3VwcG9zZWQgdG8gYmUgYWJsZSB0byBkbywgd2l0aG91dCB0aGUgd2FybmluZyB5b3UnZCBoYXZlIG5vIGlkZWEgb2YgdGhlIHdvcmsgdGhlIGJyb3dzZXIgaXMgZG9pbmcgb24geW91ciBiZWhhbGYgdG8gZW11bGF0ZSB0aGF0IGZlYXR1cmUgb2YgT3BlbkdMIEVTIDIuMCB0aGF0IGlzIGRpZmZlcmVudCBmcm9tIE9wZW5HTC5cblxuICAgICAgICAgICAgIHJlcXVpcmUgeW91ciBwYXJ0aWN1bGFyIGNhc2UgdGhlIHdhcm5pbmcgZG9lc24ndCBoYXZlIG11Y2ggbWVhbmluZy4gSXQgbG9va3MgbGlrZSB5b3UgYXJlIG9ubHkgZHJhd2luZyBhIHNpbmdsZSBwb2ludC4gQnV0IGl0IHdvdWxkIG5vdCBiZSBlYXN5IGZvciB0aGUgYnJvd3NlciB0byBmaWd1cmUgdGhhdCBvdXQgc28gaXQganVzdCB3YXJucyB5b3UgYW55dGltZSB5b3UgZHJhdyBhbmQgYXR0cmlidXRlIDAgaXMgbm90IGVuYWJsZWQuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGdsLmJpbmRBdHRyaWJMb2NhdGlvbiggdGhpcy5fcHJvZ3JhbSwgMCwgXCJhX3Bvc2l0aW9uXCIpO1xuXG5cbiAgICAgICAgICAgIGdsLmxpbmtQcm9ncmFtKHRoaXMuX3Byb2dyYW0pO1xuXG4gICAgICAgICAgICBMb2cuZXJyb3IoZ2wuZ2V0UHJvZ3JhbVBhcmFtZXRlcih0aGlzLl9wcm9ncmFtLCBnbC5MSU5LX1NUQVRVUykgPT09IGZhbHNlLCBnbC5nZXRQcm9ncmFtSW5mb0xvZyh0aGlzLl9wcm9ncmFtKSk7XG5cblxuXG5cbiAgICAgICAgICAgIC8qIVxuICAgICAgICAgICAgIHNob3VsZCBkZXRhY2ggYW5kIGRlbGV0ZSBzaGFkZXJzIGFmdGVyIGxpbmtpbmcgdGhlIHByb2dyYW1cblxuICAgICAgICAgICAgIGV4cGxhaW46XG4gICAgICAgICAgICAgVGhlIHNoYWRlciBvYmplY3QsIGR1ZSB0byBiZWluZyBhdHRhY2hlZCB0byB0aGUgcHJvZ3JhbSBvYmplY3QsIHdpbGwgY29udGludWUgdG8gZXhpc3QgZXZlbiBpZiB5b3UgZGVsZXRlIHRoZSBzaGFkZXIgb2JqZWN0LiBJdCB3aWxsIG9ubHkgYmUgZGVsZXRlZCBieSB0aGUgc3lzdGVtIHdoZW4gaXQgaXMgbm8gbG9uZ2VyIGF0dGFjaGVkIHRvIGFueSBwcm9ncmFtIG9iamVjdCAoYW5kIHdoZW4gdGhlIHVzZXIgaGFzIGFza2VkIHRvIGRlbGV0ZSBpdCwgb2YgY291cnNlKS5cblxuICAgICAgICAgICAgIFwiRGVsZXRpbmdcIiB0aGUgc2hhZGVyLCBhcyB3aXRoIGFsbCBPcGVuR0wgb2JqZWN0cywgbWVyZWx5IHNldHMgYSBmbGFnIHRoYXQgc2F5cyB5b3UgZG9uJ3QgbmVlZCBpdCBhbnkgbW9yZS4gT3BlbkdMIHdpbGwga2VlcCBpdCBhcm91bmQgZm9yIGFzIGxvbmcgYXMgaXQgbmVlZHMgaXQgaXRzZWxmLCBhbmQgd2lsbCBkbyB0aGUgYWN0dWFsIGRlbGV0ZSBhbnkgdGltZSBsYXRlciAobW9zdCBsaWtlbHksIGJ1dCBub3QgbmVjZXNzYXJpbHksIGFmdGVyIHRoZSBwcm9ncmFtIGlzIGRlbGV0ZWQpLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBnbC5kZWxldGVTaGFkZXIodnMpO1xuICAgICAgICAgICAgZ2wuZGVsZXRlU2hhZGVyKGZzKTtcblxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgZGlzcG9zZSgpe1xuICAgICAgICAgICAgdmFyIGdsID0gRGV2aWNlTWFuYWdlci5nZXRJbnN0YW5jZSgpLmdsO1xuXG4gICAgICAgICAgICBnbC5kZWxldGVQcm9ncmFtKHRoaXMuX3Byb2dyYW0pO1xuICAgICAgICAgICAgdGhpcy5fcHJvZ3JhbSA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBpc1VuaWZvcm1EYXRhTm90RXhpc3RCeUxvY2F0aW9uKHBvczphbnkpe1xuICAgICAgICAgICAgcmV0dXJuIHBvcyA9PT0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX2NvbnZlcnRBdHRyaWJ1dGVEYXRhVHlwZSh2YWw6U2hhZGVyRGF0YSl7XG4gICAgICAgICAgICByZXR1cm4gVmFyaWFibGVUeXBlLkJVRkZFUjtcbiAgICAgICAgfVxuXG4gICAgICAgIEByZXF1aXJlKGZ1bmN0aW9uIChkYXRhOmFueSkge1xuICAgICAgICAgICAgYXNzZXJ0KEp1ZGdlVXRpbHMuaXNBcnJheShkYXRhKSB8fCBkYXRhIGluc3RhbmNlb2YgVmVjdG9yMywgTG9nLmluZm8uRlVOQ19NVVNUX0JFKFwic2hhZGVyLT5hdHRyaWJ1dGVzLT52YWx1ZVwiLCBcIkFycmF5PEFycmF5PGFueT4+IG9yIEFycmF5PFZlY3RvcjM+IHN0dWN0dXJlXCIpKTtcbiAgICAgICAgfSlcbiAgICAgICAgcHJpdmF0ZSBfY29udmVydFRvVmVjdG9yMyhkYXRhOmFueSkge1xuICAgICAgICAgICAgaWYgKEp1ZGdlVXRpbHMuaXNBcnJheShkYXRhKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBWZWN0b3IzLmNyZWF0ZShkYXRhWzBdLCBkYXRhWzFdLCBkYXRhWzJdKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICAgIH1cblxuICAgICAgICBAcmVxdWlyZShmdW5jdGlvbiAoZGF0YTphbnkpIHtcbiAgICAgICAgICAgIGFzc2VydChKdWRnZVV0aWxzLmlzQXJyYXkoZGF0YSkgfHwgZGF0YSBpbnN0YW5jZW9mIFZlY3RvcjQsIExvZy5pbmZvLkZVTkNfTVVTVF9CRShcInNoYWRlci0+YXR0cmlidXRlcy0+dmFsdWVcIiwgXCJBcnJheTxBcnJheTxhbnk+PiBvciBBcnJheTxWZWN0b3I0PiBzdHVjdHVyZVwiKSk7XG4gICAgICAgIH0pXG4gICAgICAgIHByaXZhdGUgX2NvbnZlcnRUb1ZlY3RvcjQoZGF0YTphbnkpIHtcbiAgICAgICAgICAgIGlmKEp1ZGdlVXRpbHMuaXNBcnJheShkYXRhKSl7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFZlY3RvcjQuY3JlYXRlKGRhdGFbMF0sIGRhdGFbMV0sIGRhdGFbMl0sIGRhdGFbM10pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuIiwibW9kdWxlIHdkIHtcbiAgICBleHBvcnQgY2xhc3MgUXVhZENvbW1hbmQge1xuICAgICAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZSgpOlF1YWRDb21tYW5kIHtcbiAgICAgICAgICAgIHZhciBvYmogPSBuZXcgdGhpcygpO1xuXG4gICAgICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgICB9XG5cbiAgICAgICAgZ2V0IHByb2dyYW0oKXtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm1hdGVyaWFsLnByb2dyYW07XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgYnVmZmVyczpCdWZmZXJDb250YWluZXIgPSBudWxsO1xuICAgICAgICBwdWJsaWMgbU1hdHJpeDpNYXRyaXg0ID0gbnVsbDtcbiAgICAgICAgcHVibGljIHZNYXRyaXg6TWF0cml4NCA9IG51bGw7XG4gICAgICAgIHB1YmxpYyBwTWF0cml4Ok1hdHJpeDQgPSBudWxsO1xuICAgICAgICBwdWJsaWMgZHJhd01vZGU6RHJhd01vZGUgPSBEcmF3TW9kZS5UUklBTkdMRVM7XG4gICAgICAgIHB1YmxpYyB6Om51bWJlciA9IG51bGw7XG4gICAgICAgIHB1YmxpYyBtYXRlcmlhbDpNYXRlcmlhbCA9IG51bGw7XG4gICAgICAgIHB1YmxpYyBhbmltYXRpb246QW5pbWF0aW9uID0gbnVsbDtcblxuICAgICAgICBwdWJsaWMgZXhlY3V0ZSgpIHtcbiAgICAgICAgICAgIHRoaXMubWF0ZXJpYWwudXBkYXRlVGV4dHVyZSgpO1xuICAgICAgICAgICAgdGhpcy5tYXRlcmlhbC51cGRhdGVTaGFkZXIodGhpcyk7XG5cbiAgICAgICAgICAgIHRoaXMuX2RyYXcoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBpbml0KCkge1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfZHJhdygpIHtcbiAgICAgICAgICAgIHZhciB0b3RhbE51bSA9IDAsXG4gICAgICAgICAgICAgICAgc3RhcnRPZmZzZXQgPSAwLFxuICAgICAgICAgICAgICAgIHZlcnRleEJ1ZmZlciA9IG51bGwsXG4gICAgICAgICAgICAgICAgZ2wgPSBEZXZpY2VNYW5hZ2VyLmdldEluc3RhbmNlKCkuZ2w7XG5cbiAgICAgICAgICAgIHRoaXMuX3NldEVmZmVjdHMoKTtcblxuICAgICAgICAgICAgaWYgKHRoaXMuYnVmZmVycy5oYXNDaGlsZChCdWZmZXJEYXRhVHlwZS5JTkRJQ0UpKSB7XG4gICAgICAgICAgICAgICAgbGV0IGluZGV4QnVmZmVyOkVsZW1lbnRCdWZmZXIgPSA8RWxlbWVudEJ1ZmZlcj50aGlzLmJ1ZmZlcnMuZ2V0Q2hpbGQoQnVmZmVyRGF0YVR5cGUuSU5ESUNFKTtcblxuICAgICAgICAgICAgICAgIHRvdGFsTnVtID0gaW5kZXhCdWZmZXIuY291bnQ7XG5cbiAgICAgICAgICAgICAgICBnbC5iaW5kQnVmZmVyKGdsLkVMRU1FTlRfQVJSQVlfQlVGRkVSLCBpbmRleEJ1ZmZlci5idWZmZXIpO1xuICAgICAgICAgICAgICAgIEdsVXRpbHMuZHJhd0VsZW1lbnRzKGdsW3RoaXMuZHJhd01vZGVdLCB0b3RhbE51bSwgaW5kZXhCdWZmZXIudHlwZSwgaW5kZXhCdWZmZXIudHlwZVNpemUgKiBzdGFydE9mZnNldCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB2ZXJ0ZXhCdWZmZXIgPSB0aGlzLmJ1ZmZlcnMuZ2V0Q2hpbGQoQnVmZmVyRGF0YVR5cGUuVkVSVElDRSk7XG4gICAgICAgICAgICAgICAgdG90YWxOdW0gPSB2ZXJ0ZXhCdWZmZXIuY291bnQ7XG4gICAgICAgICAgICAgICAgR2xVdGlscy5kcmF3QXJyYXlzKGdsW3RoaXMuZHJhd01vZGVdLCBzdGFydE9mZnNldCwgdG90YWxOdW0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfc2V0RWZmZWN0cygpe1xuICAgICAgICAgICAgdmFyIGRldmljZU1hbmFnZXIgPSBEZXZpY2VNYW5hZ2VyLmdldEluc3RhbmNlKCksXG4gICAgICAgICAgICAgICAgbWF0ZXJpYWwgPSB0aGlzLm1hdGVyaWFsO1xuXG4gICAgICAgICAgICBkZXZpY2VNYW5hZ2VyLnNldENvbG9yV3JpdGUobWF0ZXJpYWwucmVkV3JpdGUsIG1hdGVyaWFsLmdyZWVuV3JpdGUsIG1hdGVyaWFsLmJsdWVXcml0ZSwgbWF0ZXJpYWwuYWxwaGFXcml0ZSk7XG4gICAgICAgICAgICBkZXZpY2VNYW5hZ2VyLnBvbHlnb25PZmZzZXRNb2RlID0gbWF0ZXJpYWwucG9seWdvbk9mZnNldE1vZGU7XG5cbiAgICAgICAgICAgIGRldmljZU1hbmFnZXIuc2lkZSA9IHRoaXMuX2dldFNpZGUoKTtcblxuICAgICAgICAgICAgZGV2aWNlTWFuYWdlci5ibGVuZCA9IG1hdGVyaWFsLmJsZW5kO1xuICAgICAgICAgICAgaWYobWF0ZXJpYWwuYmxlbmRGdW5jU2VwYXJhdGUgJiYgbWF0ZXJpYWwuYmxlbmRFcXVhdGlvblNlcGFyYXRlKXtcbiAgICAgICAgICAgICAgICBkZXZpY2VNYW5hZ2VyLnNldEJsZW5kRnVuY1NlcGFyYXRlKG1hdGVyaWFsLmJsZW5kRnVuY1NlcGFyYXRlKTtcbiAgICAgICAgICAgICAgICBkZXZpY2VNYW5hZ2VyLnNldEJsZW5kRXF1YXRpb25TZXBhcmF0ZShtYXRlcmlhbC5ibGVuZEVxdWF0aW9uU2VwYXJhdGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICB3ZENiLkxvZy5lcnJvcighbWF0ZXJpYWwuYmxlbmRTcmMgfHwgIW1hdGVyaWFsLmJsZW5kRHN0IHx8ICFtYXRlcmlhbC5ibGVuZEVxdWF0aW9uLCB3ZENiLkxvZy5pbmZvLkZVTkNfTVVTVChcIm1hdGVyaWFsLmJsZW5kU3JjIHx8IG1hdGVyaWFsLmJsZW5kRHN0IHx8IG1hdGVyaWFsLmJsZW5kRXF1YXRpb25cIiwgXCJiZSBzZXRcIikpO1xuXG4gICAgICAgICAgICAgICAgZGV2aWNlTWFuYWdlci5zZXRCbGVuZEZ1bmMobWF0ZXJpYWwuYmxlbmRTcmMsIG1hdGVyaWFsLmJsZW5kRHN0KTtcbiAgICAgICAgICAgICAgICBkZXZpY2VNYW5hZ2VyLnNldEJsZW5kRXF1YXRpb24obWF0ZXJpYWwuYmxlbmRFcXVhdGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9nZXRTaWRlKCl7XG4gICAgICAgICAgICB2YXIgc2NlbmU6U2NlbmVEaXNwYXRjaGVyID0gRGlyZWN0b3IuZ2V0SW5zdGFuY2UoKS5zY2VuZTtcblxuICAgICAgICAgICAgcmV0dXJuIHNjZW5lLnNpZGUgPyBzY2VuZS5zaWRlIDogdGhpcy5tYXRlcmlhbC5zaWRlO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwibW9kdWxlIHdkIHtcbiAgICBleHBvcnQgY2xhc3MgR2xVdGlscyB7XG4gICAgICAgIHB1YmxpYyBzdGF0aWMgZHJhd0VsZW1lbnRzKG1vZGU6YW55LCBjb3VudDpudW1iZXIsIHR5cGU6YW55LCBvZmZzZXQ6bnVtYmVyKXtcbiAgICAgICAgICAgIERlYnVnU3RhdGlzdGljcy5jb3VudC5kcmF3Q2FsbHMrKztcblxuICAgICAgICAgICAgdGhpcy5fZ2V0R2woKS5kcmF3RWxlbWVudHMobW9kZSwgY291bnQsIHR5cGUsIG9mZnNldCk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgc3RhdGljIGRyYXdBcnJheXMobW9kZTphbnksIGZpcnN0Om51bWJlciwgY291bnQ6bnVtYmVyKSB7XG4gICAgICAgICAgICBEZWJ1Z1N0YXRpc3RpY3MuY291bnQuZHJhd0NhbGxzKys7XG5cbiAgICAgICAgICAgIHRoaXMuX2dldEdsKCkuZHJhd0FycmF5cyhtb2RlLCBmaXJzdCwgY291bnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBzdGF0aWMgX2dldEdsKCkge1xuICAgICAgICAgICAgcmV0dXJuIERldmljZU1hbmFnZXIuZ2V0SW5zdGFuY2UoKS5nbDtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsIm1vZHVsZSB3ZHtcbiAgICBleHBvcnQgY2xhc3MgRnJhbWVCdWZmZXJ7XG4gICAgICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlKHdpZHRoOm51bWJlciwgaGVpZ2h0Om51bWJlcikge1xuICAgICAgICBcdHZhciBvYmogPSBuZXcgdGhpcyh3aWR0aCwgaGVpZ2h0KTtcblxuICAgICAgICBcdHJldHVybiBvYmo7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdHJ1Y3Rvcih3aWR0aDpudW1iZXIsIGhlaWdodDpudW1iZXIpe1xuICAgICAgICAgICAgdGhpcy53aWR0aCA9IHdpZHRoO1xuICAgICAgICAgICAgdGhpcy5oZWlnaHQgPSBoZWlnaHQ7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGdldCBnbCgpe1xuICAgICAgICAgICAgcmV0dXJuIERldmljZU1hbmFnZXIuZ2V0SW5zdGFuY2UoKS5nbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyB3aWR0aDpudW1iZXIgPSBudWxsO1xuICAgICAgICBwdWJsaWMgaGVpZ2h0Om51bWJlciA9IG51bGw7XG5cbiAgICAgICAgcHJpdmF0ZSBfb3JpZ2luU2Npc3NvclRlc3Q6Ym9vbGVhbiA9IG51bGw7XG5cbiAgICAgICAgcHVibGljIGNyZWF0ZUZyYW1lQnVmZmVyKCl7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nbC5jcmVhdGVGcmFtZWJ1ZmZlcigpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGJpbmRGcmFtZUJ1ZmZlcihidWZmZXI6V2ViR0xGcmFtZWJ1ZmZlcil7XG4gICAgICAgICAgICB2YXIgZ2wgPSB0aGlzLmdsO1xuXG4gICAgICAgICAgICBnbC5iaW5kRnJhbWVidWZmZXIoZ2wuRlJBTUVCVUZGRVIsIGJ1ZmZlcik7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgc2V0Vmlld3BvcnQoKXtcbiAgICAgICAgICAgIHZhciBkZXZpY2VNYW5hZ2VyID0gRGV2aWNlTWFuYWdlci5nZXRJbnN0YW5jZSgpO1xuXG4gICAgICAgICAgICBkZXZpY2VNYW5hZ2VyLnNldFZpZXdwb3J0KDAsIDAsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0KTtcblxuICAgICAgICAgICAgdGhpcy5fb3JpZ2luU2Npc3NvclRlc3QgPSBkZXZpY2VNYW5hZ2VyLnNjaXNzb3JUZXN0O1xuICAgICAgICAgICAgZGV2aWNlTWFuYWdlci5zY2lzc29yVGVzdCA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHJlc3RvcmVWaWV3cG9ydCgpe1xuICAgICAgICAgICAgdmFyIGRldmljZU1hbmFnZXIgPSBEZXZpY2VNYW5hZ2VyLmdldEluc3RhbmNlKCksXG4gICAgICAgICAgICAgICAgdmlldyA9IGRldmljZU1hbmFnZXIudmlldztcblxuICAgICAgICAgICAgZGV2aWNlTWFuYWdlci5zZXRWaWV3cG9ydCgwLCAwLCB2aWV3LndpZHRoLCB2aWV3LmhlaWdodCk7XG4gICAgICAgICAgICBkZXZpY2VNYW5hZ2VyLnNjaXNzb3JUZXN0ID0gdGhpcy5fb3JpZ2luU2Npc3NvclRlc3Q7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgZGlzcG9zZSgpe1xuICAgICAgICAgICAgdGhpcy51bkJpbmQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyB1bkJpbmQoKXtcbiAgICAgICAgICAgIHZhciBnbCA9IHRoaXMuZ2w7XG5cbiAgICAgICAgICAgIGdsLmJpbmRGcmFtZWJ1ZmZlcihnbC5GUkFNRUJVRkZFUiwgbnVsbCk7XG4gICAgICAgICAgICBnbC5iaW5kUmVuZGVyYnVmZmVyKGdsLlJFTkRFUkJVRkZFUiwgbnVsbCk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgY3JlYXRlUmVuZGVyQnVmZmVyKCl7XG4gICAgICAgICAgICB2YXIgZ2wgPSB0aGlzLmdsLFxuICAgICAgICAgICAgICAgIHJlbmRlckJ1ZmZlciA9IGdsLmNyZWF0ZVJlbmRlcmJ1ZmZlcigpO1xuXG4gICAgICAgICAgICBMb2cuZXJyb3IoIXJlbmRlckJ1ZmZlciwgXCJGYWlsZWQgdG8gY3JlYXRlIHJlbmRlcmJ1ZmZlciBvYmplY3RcIik7XG5cbiAgICAgICAgICAgIHJldHVybiByZW5kZXJCdWZmZXI7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgYXR0YWNoVGV4dHVyZShnbFRhcmdldDphbnksIHRleHR1cmU6V2ViR0xUZXh0dXJlKXtcbiAgICAgICAgICAgIHZhciBnbCA9IHRoaXMuZ2w7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vdG9kbyBzdXBwb3J0IG1pcG1hcD9cbiAgICAgICAgICAgIGdsLmZyYW1lYnVmZmVyVGV4dHVyZTJEKFxuICAgICAgICAgICAgICAgIGdsLkZSQU1FQlVGRkVSLFxuICAgICAgICAgICAgICAgIGdsLkNPTE9SX0FUVEFDSE1FTlQwLFxuICAgICAgICAgICAgICAgIGdsVGFyZ2V0LFxuICAgICAgICAgICAgICAgIHRleHR1cmUsXG4gICAgICAgICAgICAgICAgMCk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgYXR0YWNoUmVuZGVyQnVmZmVyKHR5cGU6c3RyaW5nLCByZW5kZXJCdWZmZXI6V2ViR0xSZW5kZXJidWZmZXIpe1xuICAgICAgICAgICAgdmFyIGdsID0gdGhpcy5nbDtcblxuXG4gICAgICAgICAgICBnbC5iaW5kUmVuZGVyYnVmZmVyKGdsLlJFTkRFUkJVRkZFUiwgcmVuZGVyQnVmZmVyKTtcbiAgICAgICAgICAgIGdsLnJlbmRlcmJ1ZmZlclN0b3JhZ2UoZ2wuUkVOREVSQlVGRkVSLCBnbC5ERVBUSF9DT01QT05FTlQxNiwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQpO1xuICAgICAgICAgICAgZ2wuZnJhbWVidWZmZXJSZW5kZXJidWZmZXIoZ2wuRlJBTUVCVUZGRVIsIGdsW3R5cGVdLCBnbC5SRU5ERVJCVUZGRVIsIHJlbmRlckJ1ZmZlcik7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgY2hlY2soKXtcbiAgICAgICAgICAgIHZhciBnbCA9IHRoaXMuZ2wsXG4gICAgICAgICAgICAgICAgZSA9IGdsLmNoZWNrRnJhbWVidWZmZXJTdGF0dXMoZ2wuRlJBTUVCVUZGRVIpO1xuXG4gICAgICAgICAgICBpZiAoZSAhPT0gZ2wuRlJBTUVCVUZGRVJfQ09NUExFVEUpIHtcbiAgICAgICAgICAgICAgICBMb2cuZXJyb3IodHJ1ZSwgYEZyYW1lIGJ1ZmZlciBvYmplY3QgaXMgaW5jb21wbGV0ZToke2UudG9TdHJpbmcoKX1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn0iLCJtb2R1bGUgd2R7XG4gICAgZXhwb3J0IGNsYXNzIFNoYWRlcntcbiAgICAgICAgcHVibGljIHN0YXRpYyBjcmVhdGUoKXtcbiAgICAgICAgXHR2YXIgb2JqID0gbmV3IHRoaXMoKTtcblxuICAgICAgICBcdHJldHVybiBvYmo7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9hdHRyaWJ1dGVzOndkQ2IuSGFzaDxTaGFkZXJEYXRhPiA9IHdkQ2IuSGFzaC5jcmVhdGU8U2hhZGVyRGF0YT4oKTtcbiAgICAgICAgZ2V0IGF0dHJpYnV0ZXMoKXtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9hdHRyaWJ1dGVzO1xuICAgICAgICB9XG4gICAgICAgIHNldCBhdHRyaWJ1dGVzKGF0dHJpYnV0ZXM6d2RDYi5IYXNoPFNoYWRlckRhdGE+KXtcbiAgICAgICAgICAgIGlmKHRoaXMuX2lzTm90RXF1YWwoYXR0cmlidXRlcywgdGhpcy5fYXR0cmlidXRlcykpe1xuICAgICAgICAgICAgICAgIHRoaXMuX2RlZmluaXRpb25EYXRhRGlydHkgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fYXR0cmlidXRlcyA9IGF0dHJpYnV0ZXM7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF91bmlmb3Jtczp3ZENiLkhhc2g8U2hhZGVyRGF0YT4gPSB3ZENiLkhhc2guY3JlYXRlPFNoYWRlckRhdGE+KCk7XG4gICAgICAgIGdldCB1bmlmb3Jtcygpe1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3VuaWZvcm1zO1xuICAgICAgICB9XG4gICAgICAgIHNldCB1bmlmb3Jtcyh1bmlmb3Jtczp3ZENiLkhhc2g8U2hhZGVyRGF0YT4pe1xuICAgICAgICAgICAgaWYodGhpcy5faXNOb3RFcXVhbCh1bmlmb3JtcywgdGhpcy5fdW5pZm9ybXMpKXtcbiAgICAgICAgICAgICAgICB0aGlzLl9kZWZpbml0aW9uRGF0YURpcnR5ID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX3VuaWZvcm1zID0gdW5pZm9ybXM7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF92c1NvdXJjZTpzdHJpbmcgPSBcIlwiO1xuICAgICAgICBnZXQgdnNTb3VyY2UoKXtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl92c1NvdXJjZTtcbiAgICAgICAgfVxuICAgICAgICBzZXQgdnNTb3VyY2UodnNTb3VyY2U6c3RyaW5nKXtcbiAgICAgICAgICAgIGlmKHZzU291cmNlICE9PSB0aGlzLl92c1NvdXJjZSl7XG4gICAgICAgICAgICAgICAgdGhpcy5fZGVmaW5pdGlvbkRhdGFEaXJ0eSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl92c1NvdXJjZSA9IHZzU291cmNlO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfZnNTb3VyY2U6c3RyaW5nID0gXCJcIjtcbiAgICAgICAgZ2V0IGZzU291cmNlKCl7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZnNTb3VyY2U7XG4gICAgICAgIH1cbiAgICAgICAgc2V0IGZzU291cmNlKGZzU291cmNlOnN0cmluZyl7XG4gICAgICAgICAgICBpZihmc1NvdXJjZSAhPT0gdGhpcy5fZnNTb3VyY2Upe1xuICAgICAgICAgICAgICAgIHRoaXMuX2RlZmluaXRpb25EYXRhRGlydHkgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fZnNTb3VyY2UgPSBmc1NvdXJjZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBwcm9ncmFtOlByb2dyYW0gPSBQcm9ncmFtLmNyZWF0ZSgpO1xuXG4gICAgICAgIHByaXZhdGUgX2RlZmluaXRpb25EYXRhRGlydHk6Ym9vbGVhbiA9IHRydWU7XG4gICAgICAgIHByaXZhdGUgX2xpYnM6IHdkQ2IuQ29sbGVjdGlvbjxTaGFkZXJMaWI+ID0gd2RDYi5Db2xsZWN0aW9uLmNyZWF0ZTxTaGFkZXJMaWI+KCk7XG4gICAgICAgIHByaXZhdGUgX3NvdXJjZUJ1aWxkZXI6U2hhZGVyU291cmNlQnVpbGRlciA9IFNoYWRlclNvdXJjZUJ1aWxkZXIuY3JlYXRlKCk7XG5cbiAgICAgICAgcHVibGljIGNyZWF0ZVZzU2hhZGVyKCl7XG4gICAgICAgICAgICB2YXIgZ2wgPSBEZXZpY2VNYW5hZ2VyLmdldEluc3RhbmNlKCkuZ2w7XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9pbml0U2hhZGVyKGdsLmNyZWF0ZVNoYWRlcihnbC5WRVJURVhfU0hBREVSKSwgdGhpcy52c1NvdXJjZSk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgY3JlYXRlRnNTaGFkZXIoKXtcbiAgICAgICAgICAgIHZhciBnbCA9IERldmljZU1hbmFnZXIuZ2V0SW5zdGFuY2UoKS5nbDtcblxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2luaXRTaGFkZXIoZ2wuY3JlYXRlU2hhZGVyKGdsLkZSQUdNRU5UX1NIQURFUiksIHRoaXMuZnNTb3VyY2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGlzRXF1YWwob3RoZXI6U2hhZGVyKXtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnZzU291cmNlID09PSBvdGhlci52c1NvdXJjZVxuICAgICAgICAgICAgJiYgdGhpcy5mc1NvdXJjZSA9PT0gb3RoZXIuZnNTb3VyY2U7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgaW5pdCgpe1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHVwZGF0ZShxdWFkQ21kOlF1YWRDb21tYW5kLCBtYXRlcmlhbDpNYXRlcmlhbCl7XG4gICAgICAgICAgICB2YXIgcHJvZ3JhbSA9IHRoaXMucHJvZ3JhbTtcblxuICAgICAgICAgICAgdGhpcy5idWlsZERlZmluaXRpb25EYXRhKHF1YWRDbWQsIG1hdGVyaWFsKTtcblxuICAgICAgICAgICAgaWYodGhpcy5fZGVmaW5pdGlvbkRhdGFEaXJ0eSl7XG4gICAgICAgICAgICAgICAgLy90b2RvIG9wdGltaXplOiBiYXRjaCBpbml0IHByb2dyYW0oaWYgaXQncyB0aGUgc2FtZSBhcyB0aGUgbGFzdCBwcm9ncmFtLCBub3QgaW5pdFdpdGhTaGFkZXIpXG4gICAgICAgICAgICAgICAgdGhpcy5wcm9ncmFtLmluaXRXaXRoU2hhZGVyKHRoaXMpO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5fZGVmaW5pdGlvbkRhdGFEaXJ0eSA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLnByb2dyYW0udXNlKCk7XG5cbiAgICAgICAgICAgIHRoaXMuX2xpYnMuZm9yRWFjaCgobGliOlNoYWRlckxpYikgPT4ge1xuICAgICAgICAgICAgICAgIGxpYi5zZW5kU2hhZGVyVmFyaWFibGVzKHByb2dyYW0sIHF1YWRDbWQsIG1hdGVyaWFsKTtcbiAgICAgICAgICAgIH0pO1xuXG5cbiAgICAgICAgICAgIHByb2dyYW0uc2VuZEF0dHJpYnV0ZURhdGFGcm9tQ3VzdG9tU2hhZGVyKCk7XG4gICAgICAgICAgICBwcm9ncmFtLnNlbmRVbmlmb3JtRGF0YUZyb21DdXN0b21TaGFkZXIoKTtcblxuICAgICAgICAgICAgbWF0ZXJpYWwubWFwTWFuYWdlci5zZW5kRGF0YShwcm9ncmFtKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBoYXNMaWIobGliOlNoYWRlckxpYik7XG4gICAgICAgIHB1YmxpYyBoYXNMaWIoX2NsYXNzOkZ1bmN0aW9uKTtcblxuICAgICAgICBwdWJsaWMgaGFzTGliKC4uLmFyZ3Mpe1xuICAgICAgICAgICAgaWYoYXJnc1swXSBpbnN0YW5jZW9mIFNoYWRlckxpYil7XG4gICAgICAgICAgICAgICAgbGV0IGxpYjpTaGFkZXJMaWIgPSBhcmdzWzBdO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2xpYnMuaGFzQ2hpbGQobGliKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICAgICAgbGV0IF9jbGFzcyA9IGFyZ3NbMF07XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fbGlicy5oYXNDaGlsZCgobGliOlNoYWRlckxpYikgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbGliIGluc3RhbmNlb2YgX2NsYXNzO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgYWRkTGliKGxpYjpTaGFkZXJMaWIpe1xuICAgICAgICAgICAgdGhpcy5fbGlicy5hZGRDaGlsZChsaWIpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGFkZFNoYWRlckxpYlRvVG9wKGxpYjpTaGFkZXJMaWIpe1xuICAgICAgICAgICAgdGhpcy5fbGlicy51blNoaWZ0Q2hpbGQobGliKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBnZXRMaWIobGliQ2xhc3M6RnVuY3Rpb24pe1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2xpYnMuZmluZE9uZSgobGliOlNoYWRlckxpYikgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBsaWIgaW5zdGFuY2VvZiBsaWJDbGFzcztcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGdldExpYnMoKXtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9saWJzO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHJlbW92ZUxpYihsaWI6U2hhZGVyTGliKTtcbiAgICAgICAgcHVibGljIHJlbW92ZUxpYihmdW5jOkZ1bmN0aW9uKTtcblxuICAgICAgICBwdWJsaWMgcmVtb3ZlTGliKC4uLmFyZ3Mpe1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2xpYnMucmVtb3ZlQ2hpbGQoYXJnc1swXSk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgcmVtb3ZlQWxsTGlicygpe1xuICAgICAgICAgICAgdGhpcy5fbGlicy5yZW1vdmVBbGxDaGlsZHJlbigpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHNvcnRMaWIoZnVuYzooYTpTaGFkZXJMaWIsIGI6U2hhZGVyTGliKSA9PiBhbnkpe1xuICAgICAgICAgICAgdGhpcy5fbGlicyA9IHRoaXMuX2xpYnMuc29ydChmdW5jKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyByZWFkKGRlZmluaXRpb25EYXRhOlNoYWRlckRlZmluaXRpb25EYXRhKXtcbiAgICAgICAgICAgIHRoaXMuX3NvdXJjZUJ1aWxkZXIucmVhZChkZWZpbml0aW9uRGF0YSk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgYnVpbGREZWZpbml0aW9uRGF0YShxdWFkQ21kOlF1YWRDb21tYW5kLCBtYXRlcmlhbDpNYXRlcmlhbCl7XG4gICAgICAgICAgICB0aGlzLl9saWJzLmZvckVhY2goKGxpYjpTaGFkZXJMaWIpID0+IHtcbiAgICAgICAgICAgICAgICBsaWIuc2V0U2hhZGVyRGVmaW5pdGlvbihxdWFkQ21kLCBtYXRlcmlhbCk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdGhpcy5fc291cmNlQnVpbGRlci5jbGVhclNoYWRlckRlZmluaXRpb24oKTtcblxuICAgICAgICAgICAgdGhpcy5fc291cmNlQnVpbGRlci5idWlsZCh0aGlzLl9saWJzKTtcblxuICAgICAgICAgICAgdGhpcy5hdHRyaWJ1dGVzID0gdGhpcy5fc291cmNlQnVpbGRlci5hdHRyaWJ1dGVzO1xuICAgICAgICAgICAgdGhpcy51bmlmb3JtcyA9IHRoaXMuX3NvdXJjZUJ1aWxkZXIudW5pZm9ybXM7XG4gICAgICAgICAgICB0aGlzLnZzU291cmNlID0gdGhpcy5fc291cmNlQnVpbGRlci52c1NvdXJjZTtcbiAgICAgICAgICAgIHRoaXMuZnNTb3VyY2UgPSB0aGlzLl9zb3VyY2VCdWlsZGVyLmZzU291cmNlO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfaW5pdFNoYWRlcihzaGFkZXIsIHNvdXJjZSl7XG4gICAgICAgICAgICB2YXIgZ2wgPSBEZXZpY2VNYW5hZ2VyLmdldEluc3RhbmNlKCkuZ2w7XG5cbiAgICAgICAgICAgIGdsLnNoYWRlclNvdXJjZShzaGFkZXIsIHNvdXJjZSk7XG4gICAgICAgICAgICBnbC5jb21waWxlU2hhZGVyKHNoYWRlcik7XG5cbiAgICAgICAgICAgIGlmKGdsLmdldFNoYWRlclBhcmFtZXRlcihzaGFkZXIsIGdsLkNPTVBJTEVfU1RBVFVTKSl7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNoYWRlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICAgICAgTG9nLmxvZyhnbC5nZXRTaGFkZXJJbmZvTG9nKHNoYWRlcikpO1xuICAgICAgICAgICAgICAgIExvZy5sb2coXCJhdHRyaWJ1dGVzOlxcblwiLCB0aGlzLmF0dHJpYnV0ZXMpO1xuICAgICAgICAgICAgICAgIExvZy5sb2coXCJ1bmlmb3JtczpcXG5cIiwgdGhpcy51bmlmb3Jtcyk7XG4gICAgICAgICAgICAgICAgTG9nLmxvZyhcInNvdXJjZTpcXG5cIiwgc291cmNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX2lzTm90RXF1YWwobGlzdDE6d2RDYi5IYXNoPFNoYWRlckRhdGE+LCBsaXN0Mjp3ZENiLkhhc2g8U2hhZGVyRGF0YT4pe1xuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IGZhbHNlO1xuXG4gICAgICAgICAgICBsaXN0MS5mb3JFYWNoKChkYXRhOlNoYWRlckRhdGEsIGtleTpzdHJpbmcpID0+IHtcbiAgICAgICAgICAgICAgICB2YXIgbGlzdDJEYXRhID0gbGlzdDIuZ2V0Q2hpbGQoa2V5KTtcblxuICAgICAgICAgICAgICAgIGlmKCFsaXN0MkRhdGEgfHwgZGF0YS50eXBlICE9PSBsaXN0MkRhdGEudHlwZSB8fCBkYXRhLnZhbHVlICE9PSBsaXN0MkRhdGEudmFsdWUpe1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gd2RDYi4kQlJFQUs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBleHBvcnQgdHlwZSBTaGFkZXJEYXRhID0ge1xuICAgICAgICB0eXBlOlZhcmlhYmxlVHlwZTtcbiAgICAgICAgdmFsdWU6YW55O1xuICAgIH1cblxuICAgIGV4cG9ydCB0eXBlIFNoYWRlckRlZmluaXRpb25EYXRhID0ge1xuICAgICAgICB2c1NvdXJjZVRvcDpzdHJpbmc7XG4gICAgICAgIHZzU291cmNlRGVmaW5lOnN0cmluZztcbiAgICAgICAgdnNTb3VyY2VWYXJEZWNsYXJlOnN0cmluZztcbiAgICAgICAgdnNTb3VyY2VGdW5jRGVjbGFyZTpzdHJpbmc7XG4gICAgICAgIHZzU291cmNlRnVuY0RlZmluZTpzdHJpbmc7XG4gICAgICAgIHZzU291cmNlQm9keTpzdHJpbmc7XG4gICAgICAgIGZzU291cmNlVG9wOnN0cmluZztcbiAgICAgICAgZnNTb3VyY2VEZWZpbmU6c3RyaW5nO1xuICAgICAgICBmc1NvdXJjZVZhckRlY2xhcmU6c3RyaW5nO1xuICAgICAgICBmc1NvdXJjZUZ1bmNEZWNsYXJlOnN0cmluZztcbiAgICAgICAgZnNTb3VyY2VGdW5jRGVmaW5lOnN0cmluZztcbiAgICAgICAgZnNTb3VyY2VCb2R5OnN0cmluZztcbiAgICAgICAgYXR0cmlidXRlczpTaGFkZXJEYXRhfHdkQ2IuSGFzaDxTaGFkZXJEYXRhPjtcbiAgICAgICAgdW5pZm9ybXM6U2hhZGVyRGF0YXx3ZENiLkhhc2g8U2hhZGVyRGF0YT47XG4gICAgfVxufVxuIiwibW9kdWxlIHdke1xuICAgIC8vdG9kbyBhZGQgY3VzdG9tIGRlZmluZVxuICAgIGV4cG9ydCBjbGFzcyBTaGFkZXJTb3VyY2VCdWlsZGVye1xuICAgICAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZSgpIHtcbiAgICAgICAgXHR2YXIgb2JqID0gbmV3IHRoaXMoKTtcblxuICAgICAgICBcdHJldHVybiBvYmo7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgYXR0cmlidXRlczp3ZENiLkhhc2g8U2hhZGVyRGF0YT4gPSB3ZENiLkhhc2guY3JlYXRlPFNoYWRlckRhdGE+KCk7XG4gICAgICAgIHB1YmxpYyB1bmlmb3Jtczp3ZENiLkhhc2g8U2hhZGVyRGF0YT4gPSB3ZENiLkhhc2guY3JlYXRlPFNoYWRlckRhdGE+KCk7XG4gICAgICAgIHB1YmxpYyB2c1NvdXJjZTpzdHJpbmcgPSBcIlwiO1xuICAgICAgICBwdWJsaWMgdnNTb3VyY2VUb3A6c3RyaW5nID0gXCJcIjtcbiAgICAgICAgcHVibGljIHZzU291cmNlRGVmaW5lOnN0cmluZyA9IFwiXCI7XG4gICAgICAgIHB1YmxpYyB2c1NvdXJjZVZhckRlY2xhcmU6c3RyaW5nID0gXCJcIjtcbiAgICAgICAgcHVibGljIHZzU291cmNlRnVuY0RlY2xhcmU6c3RyaW5nID0gXCJcIjtcbiAgICAgICAgcHVibGljIHZzU291cmNlRnVuY0RlZmluZTpzdHJpbmcgPSBcIlwiO1xuICAgICAgICBwdWJsaWMgdnNTb3VyY2VCb2R5OnN0cmluZyA9IFwiXCI7XG4gICAgICAgIHB1YmxpYyBmc1NvdXJjZTpzdHJpbmcgPSBcIlwiO1xuICAgICAgICBwdWJsaWMgZnNTb3VyY2VUb3A6c3RyaW5nID0gXCJcIjtcbiAgICAgICAgcHVibGljIGZzU291cmNlRGVmaW5lOnN0cmluZyA9IFwiXCI7XG4gICAgICAgIHB1YmxpYyBmc1NvdXJjZVZhckRlY2xhcmU6c3RyaW5nID0gXCJcIjtcbiAgICAgICAgcHVibGljIGZzU291cmNlRnVuY0RlY2xhcmU6c3RyaW5nID0gXCJcIjtcbiAgICAgICAgcHVibGljIGZzU291cmNlRnVuY0RlZmluZTpzdHJpbmcgPSBcIlwiO1xuICAgICAgICBwdWJsaWMgZnNTb3VyY2VCb2R5OnN0cmluZyA9IFwiXCI7XG4gICAgICAgIHB1YmxpYyB2c1NvdXJjZURlZmluZUxpc3Q6d2RDYi5Db2xsZWN0aW9uPFNvdXJjZURlZmluZT4gPSB3ZENiLkNvbGxlY3Rpb24uY3JlYXRlPFNvdXJjZURlZmluZT4oKTtcbiAgICAgICAgcHVibGljIGZzU291cmNlRGVmaW5lTGlzdDp3ZENiLkNvbGxlY3Rpb248U291cmNlRGVmaW5lPiA9IHdkQ2IuQ29sbGVjdGlvbi5jcmVhdGU8U291cmNlRGVmaW5lPigpO1xuXG4gICAgICAgIHB1YmxpYyBhdHRyaWJ1dGVzRnJvbVNoYWRlckxpYjp3ZENiLkhhc2g8U2hhZGVyRGF0YT4gPSB3ZENiLkhhc2guY3JlYXRlPFNoYWRlckRhdGE+KCk7XG4gICAgICAgIHB1YmxpYyB1bmlmb3Jtc0Zyb21TaGFkZXJMaWI6d2RDYi5IYXNoPFNoYWRlckRhdGE+ID0gd2RDYi5IYXNoLmNyZWF0ZTxTaGFkZXJEYXRhPigpO1xuICAgICAgICBwdWJsaWMgdnNTb3VyY2VUb3BGcm9tU2hhZGVyTGliOnN0cmluZyA9IFwiXCI7XG4gICAgICAgIHB1YmxpYyB2c1NvdXJjZURlZmluZUZyb21TaGFkZXJMaWI6c3RyaW5nID0gXCJcIjtcbiAgICAgICAgcHVibGljIHZzU291cmNlVmFyRGVjbGFyZUZyb21TaGFkZXJMaWI6c3RyaW5nID0gXCJcIjtcbiAgICAgICAgcHVibGljIHZzU291cmNlRnVuY0RlY2xhcmVGcm9tU2hhZGVyTGliOnN0cmluZyA9IFwiXCI7XG4gICAgICAgIHB1YmxpYyB2c1NvdXJjZUZ1bmNEZWZpbmVGcm9tU2hhZGVyTGliOnN0cmluZyA9IFwiXCI7XG4gICAgICAgIHB1YmxpYyB2c1NvdXJjZUJvZHlGcm9tU2hhZGVyTGliOnN0cmluZyA9IFwiXCI7XG4gICAgICAgIHB1YmxpYyBmc1NvdXJjZVRvcEZyb21TaGFkZXJMaWI6c3RyaW5nID0gXCJcIjtcbiAgICAgICAgcHVibGljIGZzU291cmNlRGVmaW5lRnJvbVNoYWRlckxpYjpzdHJpbmcgPSBcIlwiO1xuICAgICAgICBwdWJsaWMgZnNTb3VyY2VWYXJEZWNsYXJlRnJvbVNoYWRlckxpYjpzdHJpbmcgPSBcIlwiO1xuICAgICAgICBwdWJsaWMgZnNTb3VyY2VGdW5jRGVjbGFyZUZyb21TaGFkZXJMaWI6c3RyaW5nID0gXCJcIjtcbiAgICAgICAgcHVibGljIGZzU291cmNlRnVuY0RlZmluZUZyb21TaGFkZXJMaWI6c3RyaW5nID0gXCJcIjtcbiAgICAgICAgcHVibGljIGZzU291cmNlQm9keUZyb21TaGFkZXJMaWI6c3RyaW5nID0gXCJcIjtcblxuXG4gICAgICAgIHB1YmxpYyByZWFkKGRlZmluaXRpb25EYXRhOlNoYWRlckRlZmluaXRpb25EYXRhKXtcbiAgICAgICAgICAgIGlmKGRlZmluaXRpb25EYXRhLmF0dHJpYnV0ZXMpe1xuICAgICAgICAgICAgICAgIHRoaXMuYXR0cmlidXRlc0Zyb21TaGFkZXJMaWIgPSA8d2RDYi5IYXNoPFNoYWRlckRhdGE+PihkZWZpbml0aW9uRGF0YS5hdHRyaWJ1dGVzIGluc3RhbmNlb2Ygd2RDYi5IYXNoID8gZGVmaW5pdGlvbkRhdGEuYXR0cmlidXRlcyA6IHdkQ2IuSGFzaC5jcmVhdGUoZGVmaW5pdGlvbkRhdGEuYXR0cmlidXRlcykpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZihkZWZpbml0aW9uRGF0YS51bmlmb3Jtcyl7XG4gICAgICAgICAgICAgICAgdGhpcy51bmlmb3Jtc0Zyb21TaGFkZXJMaWIgPSA8d2RDYi5IYXNoPFNoYWRlckRhdGE+PihkZWZpbml0aW9uRGF0YS51bmlmb3JtcyBpbnN0YW5jZW9mIHdkQ2IuSGFzaCA/IGRlZmluaXRpb25EYXRhLnVuaWZvcm1zIDogd2RDYi5IYXNoLmNyZWF0ZShkZWZpbml0aW9uRGF0YS51bmlmb3JtcykpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLnZzU291cmNlVG9wRnJvbVNoYWRlckxpYiA9IGRlZmluaXRpb25EYXRhLnZzU291cmNlVG9wIHx8IFwiXCI7XG4gICAgICAgICAgICB0aGlzLnZzU291cmNlRGVmaW5lRnJvbVNoYWRlckxpYiA9IGRlZmluaXRpb25EYXRhLnZzU291cmNlRGVmaW5lIHx8IFwiXCI7XG4gICAgICAgICAgICB0aGlzLnZzU291cmNlVmFyRGVjbGFyZUZyb21TaGFkZXJMaWIgPSBkZWZpbml0aW9uRGF0YS52c1NvdXJjZVZhckRlY2xhcmUgfHwgXCJcIjtcbiAgICAgICAgICAgIHRoaXMudnNTb3VyY2VGdW5jRGVjbGFyZUZyb21TaGFkZXJMaWIgPSBkZWZpbml0aW9uRGF0YS52c1NvdXJjZUZ1bmNEZWNsYXJlIHx8IFwiXCI7XG4gICAgICAgICAgICB0aGlzLnZzU291cmNlRnVuY0RlZmluZUZyb21TaGFkZXJMaWIgPSBkZWZpbml0aW9uRGF0YS52c1NvdXJjZUZ1bmNEZWZpbmUgfHwgXCJcIjtcbiAgICAgICAgICAgIHRoaXMudnNTb3VyY2VCb2R5RnJvbVNoYWRlckxpYiA9IGRlZmluaXRpb25EYXRhLnZzU291cmNlQm9keSB8fCBcIlwiO1xuXG4gICAgICAgICAgICB0aGlzLmZzU291cmNlVG9wRnJvbVNoYWRlckxpYiA9IGRlZmluaXRpb25EYXRhLmZzU291cmNlVG9wIHx8IFwiXCI7XG4gICAgICAgICAgICB0aGlzLmZzU291cmNlRGVmaW5lRnJvbVNoYWRlckxpYiA9IGRlZmluaXRpb25EYXRhLmZzU291cmNlRGVmaW5lIHx8IFwiXCI7XG4gICAgICAgICAgICB0aGlzLmZzU291cmNlVmFyRGVjbGFyZUZyb21TaGFkZXJMaWIgPSBkZWZpbml0aW9uRGF0YS5mc1NvdXJjZVZhckRlY2xhcmUgfHwgXCJcIjtcbiAgICAgICAgICAgIHRoaXMuZnNTb3VyY2VGdW5jRGVjbGFyZUZyb21TaGFkZXJMaWIgPSBkZWZpbml0aW9uRGF0YS5mc1NvdXJjZUZ1bmNEZWNsYXJlIHx8IFwiXCI7XG4gICAgICAgICAgICB0aGlzLmZzU291cmNlRnVuY0RlZmluZUZyb21TaGFkZXJMaWIgPSBkZWZpbml0aW9uRGF0YS5mc1NvdXJjZUZ1bmNEZWZpbmUgfHwgXCJcIjtcbiAgICAgICAgICAgIHRoaXMuZnNTb3VyY2VCb2R5RnJvbVNoYWRlckxpYiA9IGRlZmluaXRpb25EYXRhLmZzU291cmNlQm9keSB8fCBcIlwiO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGJ1aWxkKGxpYnM6d2RDYi5Db2xsZWN0aW9uPFNoYWRlckxpYj4pe1xuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgICAgICAgICB0aGlzLl9yZWFkTGliU291cmNlKGxpYnMpO1xuXG4gICAgICAgICAgICB0aGlzLl9idWlsZFZzU291cmNlKCk7XG4gICAgICAgICAgICB0aGlzLl9idWlsZEZzU291cmNlKCk7XG5cbiAgICAgICAgICAgIHRoaXMuYXR0cmlidXRlc1xuICAgICAgICAgICAgICAgIC5maWx0ZXIoKGRhdGE6U2hhZGVyRGF0YSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKEp1ZGdlVXRpbHMuaXNBcnJheShkYXRhLnZhbHVlKSB8fCBKdWRnZVV0aWxzLmlzRmxvYXRBcnJheShkYXRhLnZhbHVlKSkgJiYgZGF0YS52YWx1ZSAhPT0gVmFyaWFibGVDYXRlZ29yeS5FTkdJTkU7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAuZm9yRWFjaCgoZGF0YTpTaGFkZXJEYXRhLCBrZXk6c3RyaW5nKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGEudmFsdWUgPSBzZWxmLl9jb252ZXJ0QXJyYXlUb0FycmF5QnVmZmVyKGRhdGEudHlwZSwgZGF0YS52YWx1ZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBjbGVhclNoYWRlckRlZmluaXRpb24oKXtcbiAgICAgICAgICAgIHRoaXMuYXR0cmlidXRlcy5yZW1vdmVBbGxDaGlsZHJlbigpO1xuICAgICAgICAgICAgdGhpcy51bmlmb3Jtcy5yZW1vdmVBbGxDaGlsZHJlbigpO1xuICAgICAgICAgICAgdGhpcy52c1NvdXJjZURlZmluZUxpc3QucmVtb3ZlQWxsQ2hpbGRyZW4oKTtcbiAgICAgICAgICAgIHRoaXMuZnNTb3VyY2VEZWZpbmVMaXN0LnJlbW92ZUFsbENoaWxkcmVuKCk7XG5cbiAgICAgICAgICAgIHRoaXMudnNTb3VyY2VUb3AgPSBcIlwiO1xuICAgICAgICAgICAgdGhpcy52c1NvdXJjZURlZmluZSA9IFwiXCI7XG4gICAgICAgICAgICB0aGlzLnZzU291cmNlVmFyRGVjbGFyZSA9IFwiXCI7XG4gICAgICAgICAgICB0aGlzLnZzU291cmNlRnVuY0RlY2xhcmUgPSBcIlwiO1xuICAgICAgICAgICAgdGhpcy52c1NvdXJjZUZ1bmNEZWZpbmUgPSBcIlwiO1xuICAgICAgICAgICAgdGhpcy52c1NvdXJjZUJvZHkgPSBcIlwiO1xuICAgICAgICAgICAgdGhpcy5mc1NvdXJjZVRvcCA9IFwiXCI7XG4gICAgICAgICAgICB0aGlzLmZzU291cmNlRGVmaW5lID0gXCJcIjtcbiAgICAgICAgICAgIHRoaXMuZnNTb3VyY2VWYXJEZWNsYXJlID0gXCJcIjtcbiAgICAgICAgICAgIHRoaXMuZnNTb3VyY2VGdW5jRGVjbGFyZSA9IFwiXCI7XG4gICAgICAgICAgICB0aGlzLmZzU291cmNlRnVuY0RlZmluZSA9IFwiXCI7XG4gICAgICAgICAgICB0aGlzLmZzU291cmNlQm9keSA9IFwiXCI7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9yZWFkTGliU291cmNlKGxpYnM6d2RDYi5Db2xsZWN0aW9uPFNoYWRlckxpYj4pe1xuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzLFxuICAgICAgICAgICAgICAgIHZzU291cmNlVG9wID0gXCJcIixcbiAgICAgICAgICAgICAgICB2c1NvdXJjZURlZmluZSA9IFwiXCIsXG4gICAgICAgICAgICAgICAgdnNTb3VyY2VWYXJEZWNsYXJlID0gXCJcIixcbiAgICAgICAgICAgICAgICB2c1NvdXJjZUZ1bmNEZWNsYXJlID0gXCJcIixcbiAgICAgICAgICAgICAgICB2c1NvdXJjZUZ1bmNEZWZpbmUgPSBcIlwiLFxuICAgICAgICAgICAgICAgIHZzU291cmNlQm9keSA9IFwiXCIsXG4gICAgICAgICAgICAgICAgZnNTb3VyY2VUb3AgPSBcIlwiLFxuICAgICAgICAgICAgICAgIGZzU291cmNlRGVmaW5lID0gXCJcIixcbiAgICAgICAgICAgICAgICBmc1NvdXJjZVZhckRlY2xhcmUgPSBcIlwiLFxuICAgICAgICAgICAgICAgIGZzU291cmNlRnVuY0RlY2xhcmUgPSBcIlwiLFxuICAgICAgICAgICAgICAgIGZzU291cmNlRnVuY0RlZmluZSA9IFwiXCIsXG4gICAgICAgICAgICAgICAgZnNTb3VyY2VCb2R5ID0gXCJcIjtcblxuICAgICAgICAgICAgbGlicy5mb3JFYWNoKChsaWI6U2hhZGVyTGliKSA9PiB7XG4gICAgICAgICAgICAgICAgc2VsZi5hdHRyaWJ1dGVzLmFkZENoaWxkcmVuKGxpYi5hdHRyaWJ1dGVzKTtcbiAgICAgICAgICAgICAgICBzZWxmLnVuaWZvcm1zLmFkZENoaWxkcmVuKGxpYi51bmlmb3Jtcyk7XG5cbiAgICAgICAgICAgICAgICB2c1NvdXJjZVRvcCArPSBsaWIudnNTb3VyY2VUb3A7XG4gICAgICAgICAgICAgICAgdnNTb3VyY2VEZWZpbmUgKz0gbGliLnZzU291cmNlRGVmaW5lO1xuICAgICAgICAgICAgICAgIHZzU291cmNlVmFyRGVjbGFyZSArPSBsaWIudnNTb3VyY2VWYXJEZWNsYXJlO1xuICAgICAgICAgICAgICAgIHZzU291cmNlRnVuY0RlY2xhcmUgKz0gbGliLnZzU291cmNlRnVuY0RlY2xhcmU7XG4gICAgICAgICAgICAgICAgdnNTb3VyY2VGdW5jRGVmaW5lICs9IGxpYi52c1NvdXJjZUZ1bmNEZWZpbmU7XG4gICAgICAgICAgICAgICAgdnNTb3VyY2VCb2R5ICs9IGxpYi52c1NvdXJjZUJvZHk7XG5cbiAgICAgICAgICAgICAgICBmc1NvdXJjZVRvcCArPSBsaWIuZnNTb3VyY2VUb3A7XG4gICAgICAgICAgICAgICAgZnNTb3VyY2VEZWZpbmUgKz0gbGliLmZzU291cmNlRGVmaW5lO1xuICAgICAgICAgICAgICAgIGZzU291cmNlVmFyRGVjbGFyZSArPSBsaWIuZnNTb3VyY2VWYXJEZWNsYXJlO1xuICAgICAgICAgICAgICAgIGZzU291cmNlRnVuY0RlY2xhcmUgKz0gbGliLmZzU291cmNlRnVuY0RlY2xhcmU7XG4gICAgICAgICAgICAgICAgZnNTb3VyY2VGdW5jRGVmaW5lICs9IGxpYi5mc1NvdXJjZUZ1bmNEZWZpbmU7XG4gICAgICAgICAgICAgICAgZnNTb3VyY2VCb2R5ICs9IGxpYi5mc1NvdXJjZUJvZHk7XG5cbiAgICAgICAgICAgICAgICBzZWxmLnZzU291cmNlRGVmaW5lTGlzdC5hZGRDaGlsZHJlbihsaWIudnNTb3VyY2VEZWZpbmVMaXN0KTtcbiAgICAgICAgICAgICAgICBzZWxmLmZzU291cmNlRGVmaW5lTGlzdC5hZGRDaGlsZHJlbihsaWIuZnNTb3VyY2VEZWZpbmVMaXN0KTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvKiEgZW5zdXJlIHNoYWRlciBsaWIncyBjb2RlIGlzIGJlZm9yZSBjdXN0b20gc2hhZGVyJ3Mgc291cmNlICovXG4gICAgICAgICAgICB0aGlzLmF0dHJpYnV0ZXMuYWRkQ2hpbGRyZW4odGhpcy5hdHRyaWJ1dGVzRnJvbVNoYWRlckxpYik7XG4gICAgICAgICAgICB0aGlzLnVuaWZvcm1zLmFkZENoaWxkcmVuKHRoaXMudW5pZm9ybXNGcm9tU2hhZGVyTGliKTtcbiAgICAgICAgICAgIHRoaXMudnNTb3VyY2VUb3AgPSB2c1NvdXJjZVRvcCArIHRoaXMudnNTb3VyY2VUb3BGcm9tU2hhZGVyTGliO1xuICAgICAgICAgICAgdGhpcy52c1NvdXJjZURlZmluZSA9IHZzU291cmNlRGVmaW5lICsgdGhpcy52c1NvdXJjZURlZmluZUZyb21TaGFkZXJMaWI7XG4gICAgICAgICAgICB0aGlzLnZzU291cmNlVmFyRGVjbGFyZSA9IHZzU291cmNlVmFyRGVjbGFyZSArIHRoaXMudnNTb3VyY2VWYXJEZWNsYXJlRnJvbVNoYWRlckxpYjtcbiAgICAgICAgICAgIHRoaXMudnNTb3VyY2VGdW5jRGVjbGFyZSA9IHZzU291cmNlRnVuY0RlY2xhcmUgKyB0aGlzLnZzU291cmNlRnVuY0RlY2xhcmVGcm9tU2hhZGVyTGliO1xuICAgICAgICAgICAgdGhpcy52c1NvdXJjZUZ1bmNEZWZpbmUgPSB2c1NvdXJjZUZ1bmNEZWZpbmUgKyB0aGlzLnZzU291cmNlRnVuY0RlZmluZUZyb21TaGFkZXJMaWI7XG4gICAgICAgICAgICB0aGlzLnZzU291cmNlQm9keSA9IHZzU291cmNlQm9keSArIHRoaXMudnNTb3VyY2VCb2R5RnJvbVNoYWRlckxpYjtcblxuICAgICAgICAgICAgdGhpcy5mc1NvdXJjZVRvcCA9IGZzU291cmNlVG9wICsgdGhpcy5mc1NvdXJjZVRvcEZyb21TaGFkZXJMaWI7XG4gICAgICAgICAgICB0aGlzLmZzU291cmNlRGVmaW5lID0gZnNTb3VyY2VEZWZpbmUgKyB0aGlzLmZzU291cmNlRGVmaW5lRnJvbVNoYWRlckxpYjtcbiAgICAgICAgICAgIHRoaXMuZnNTb3VyY2VWYXJEZWNsYXJlID0gZnNTb3VyY2VWYXJEZWNsYXJlICsgdGhpcy5mc1NvdXJjZVZhckRlY2xhcmVGcm9tU2hhZGVyTGliO1xuICAgICAgICAgICAgdGhpcy5mc1NvdXJjZUZ1bmNEZWNsYXJlID0gZnNTb3VyY2VGdW5jRGVjbGFyZSArIHRoaXMuZnNTb3VyY2VGdW5jRGVjbGFyZUZyb21TaGFkZXJMaWI7XG4gICAgICAgICAgICB0aGlzLmZzU291cmNlRnVuY0RlZmluZSA9IGZzU291cmNlRnVuY0RlZmluZSArIHRoaXMuZnNTb3VyY2VGdW5jRGVmaW5lRnJvbVNoYWRlckxpYjtcbiAgICAgICAgICAgIHRoaXMuZnNTb3VyY2VCb2R5ID0gZnNTb3VyY2VCb2R5ICsgdGhpcy5mc1NvdXJjZUJvZHlGcm9tU2hhZGVyTGliO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfYnVpbGRWc1NvdXJjZSgpe1xuICAgICAgICAgICAgdGhpcy52c1NvdXJjZSA9IHRoaXMuX2J1aWxkVnNTb3VyY2VUb3AoKSArIHRoaXMuX2J1aWxkVnNTb3VyY2VEZWZpbmUoKSArIHRoaXMuX2J1aWxkVnNTb3VyY2VWYXJEZWNsYXJlKCkgKyB0aGlzLl9idWlsZFZzU291cmNlRnVuY0RlY2xhcmUoKSArIHRoaXMuX2J1aWxkVnNTb3VyY2VGdW5jRGVmaW5lKCkgKyB0aGlzLl9idWlsZFZzU291cmNlQm9keSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfYnVpbGRGc1NvdXJjZSgpe1xuICAgICAgICAgICAgdGhpcy5mc1NvdXJjZSA9IHRoaXMuX2J1aWxkRnNTb3VyY2VUb3AoKSArIHRoaXMuX2J1aWxkRnNTb3VyY2VEZWZpbmUoKSArIHRoaXMuX2J1aWxkRnNTb3VyY2VWYXJEZWNsYXJlKCkgKyB0aGlzLl9idWlsZEZzU291cmNlRnVuY0RlY2xhcmUoKSArIHRoaXMuX2J1aWxkRnNTb3VyY2VGdW5jRGVmaW5lKCkgKyB0aGlzLl9idWlsZEZzU291cmNlQm9keSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfYnVpbGRWc1NvdXJjZVRvcCgpe1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2dldFByZWNpc2lvblNvdXJjZSgpICsgdGhpcy52c1NvdXJjZVRvcDtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX2J1aWxkVnNTb3VyY2VEZWZpbmUoKXtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9idWlsZFNvdXJjZURlZmluZSh0aGlzLnZzU291cmNlRGVmaW5lTGlzdCkgKyB0aGlzLnZzU291cmNlRGVmaW5lO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfYnVpbGRWc1NvdXJjZVZhckRlY2xhcmUoKXtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9nZW5lcmF0ZUF0dHJpYnV0ZVNvdXJjZSgpICsgdGhpcy5fZ2VuZXJhdGVVbmlmb3JtU291cmNlKHRoaXMudnNTb3VyY2VWYXJEZWNsYXJlLCB0aGlzLnZzU291cmNlRnVuY0RlZmluZSwgdGhpcy52c1NvdXJjZUJvZHkpICsgdGhpcy52c1NvdXJjZVZhckRlY2xhcmU7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9idWlsZFZzU291cmNlRnVuY0RlY2xhcmUoKXtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnZzU291cmNlRnVuY0RlY2xhcmU7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9idWlsZFZzU291cmNlRnVuY0RlZmluZSgpe1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudnNTb3VyY2VGdW5jRGVmaW5lO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfYnVpbGRWc1NvdXJjZUJvZHkoKXtcbiAgICAgICAgICAgIHJldHVybiBTaGFkZXJTbmlwcGV0Lm1haW5fYmVnaW4gKyB0aGlzLnZzU291cmNlQm9keSArIFNoYWRlclNuaXBwZXQubWFpbl9lbmQ7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9idWlsZEZzU291cmNlVG9wKCl7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZ2V0UHJlY2lzaW9uU291cmNlKCkgKyB0aGlzLmZzU291cmNlVG9wO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfYnVpbGRGc1NvdXJjZURlZmluZSgpe1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2J1aWxkU291cmNlRGVmaW5lKHRoaXMuZnNTb3VyY2VEZWZpbmVMaXN0KSArIHRoaXMuZnNTb3VyY2VEZWZpbmU7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9idWlsZEZzU291cmNlVmFyRGVjbGFyZSgpe1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2dlbmVyYXRlVW5pZm9ybVNvdXJjZSh0aGlzLmZzU291cmNlVmFyRGVjbGFyZSwgdGhpcy5mc1NvdXJjZUZ1bmNEZWZpbmUsIHRoaXMuZnNTb3VyY2VCb2R5KSArIHRoaXMuZnNTb3VyY2VWYXJEZWNsYXJlO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfYnVpbGRGc1NvdXJjZUZ1bmNEZWNsYXJlKCl7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5mc1NvdXJjZUZ1bmNEZWNsYXJlO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfYnVpbGRGc1NvdXJjZUZ1bmNEZWZpbmUoKXtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZzU291cmNlRnVuY0RlZmluZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX2J1aWxkRnNTb3VyY2VCb2R5KCl7XG4gICAgICAgICAgICByZXR1cm4gU2hhZGVyU25pcHBldC5tYWluX2JlZ2luICsgdGhpcy5mc1NvdXJjZUJvZHkgKyBTaGFkZXJTbmlwcGV0Lm1haW5fZW5kO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfYnVpbGRTb3VyY2VEZWZpbmUoZGVmaW5lTGlzdDp3ZENiLkNvbGxlY3Rpb248U291cmNlRGVmaW5lPil7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gXCJcIjtcblxuICAgICAgICAgICAgZGVmaW5lTGlzdC5mb3JFYWNoKChkZWZpbmU6U291cmNlRGVmaW5lKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYoZGVmaW5lLnZhbHVlID09PSB2b2lkIDApe1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gYCNkZWZpbmUgJHtkZWZpbmUubmFtZX1cXG5gO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gYCNkZWZpbmUgJHtkZWZpbmUubmFtZX0gJHtkZWZpbmUudmFsdWV9XFxuYDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX2dldFByZWNpc2lvblNvdXJjZSgpe1xuICAgICAgICAgICAgdmFyIHByZWNpc2lvbiA9IEdQVURldGVjdG9yLmdldEluc3RhbmNlKCkucHJlY2lzaW9uLFxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IG51bGw7XG5cbiAgICAgICAgICAgIHN3aXRjaCAocHJlY2lzaW9uKXtcbiAgICAgICAgICAgICAgICBjYXNlIEdQVVByZWNpc2lvbi5ISUdIUDpcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gU2hhZGVyQ2h1bmsuaGlnaHBfZnJhZ21lbnQudG9wO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIEdQVVByZWNpc2lvbi5NRURJVU1QOlxuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBTaGFkZXJDaHVuay5tZWRpdW1wX2ZyYWdtZW50LnRvcDtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBHUFVQcmVjaXNpb24uTE9XUDpcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gU2hhZGVyQ2h1bmsubG93cF9mcmFnbWVudC50b3A7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IFwiXCI7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfZ2VuZXJhdGVBdHRyaWJ1dGVTb3VyY2UoKXtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBcIlwiO1xuXG4gICAgICAgICAgICB0aGlzLmF0dHJpYnV0ZXMuZmlsdGVyKChkYXRhOlNoYWRlckRhdGEsIGtleTpzdHJpbmcpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gISFkYXRhO1xuICAgICAgICAgICAgfSkuZm9yRWFjaCgoZGF0YTpTaGFkZXJEYXRhLCBrZXk6c3RyaW5nKSA9PiB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9IGBhdHRyaWJ1dGUgJHtWYXJpYWJsZVR5cGVUYWJsZS5nZXRWYXJpYWJsZVR5cGUoZGF0YS50eXBlKX0gJHtrZXl9O1xcbmA7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX2dlbmVyYXRlVW5pZm9ybVNvdXJjZShzb3VyY2VWYXJEZWNsYXJlOnN0cmluZywgc291cmNlRnVuY0RlZmluZTpzdHJpbmcsIHNvdXJjZUJvZHk6c3RyaW5nKXtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBcIlwiLFxuICAgICAgICAgICAgICAgIHNlbGYgPSB0aGlzO1xuXG4gICAgICAgICAgICB0aGlzLnVuaWZvcm1zLmZpbHRlcigoZGF0YTpTaGFkZXJEYXRhLCBrZXk6c3RyaW5nKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICEhZGF0YSAmJiBkYXRhLnR5cGUgIT09IFZhcmlhYmxlVHlwZS5TVFJVQ1RVUkUgJiYgZGF0YS50eXBlICE9PSBWYXJpYWJsZVR5cGUuU1RSVUNUVVJFUyAmJiAhc2VsZi5faXNFeGlzdEluU291cmNlKGtleSwgc291cmNlVmFyRGVjbGFyZSkgJiYgKHNlbGYuX2lzRXhpc3RJblNvdXJjZShrZXksIHNvdXJjZUZ1bmNEZWZpbmUpIHx8IHNlbGYuX2lzRXhpc3RJblNvdXJjZShrZXksIHNvdXJjZUJvZHkpKTtcbiAgICAgICAgICAgICAgICB9KS5mb3JFYWNoKChkYXRhOlNoYWRlckRhdGEsIGtleTpzdHJpbmcpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IGB1bmlmb3JtICR7VmFyaWFibGVUeXBlVGFibGUuZ2V0VmFyaWFibGVUeXBlKGRhdGEudHlwZSl9ICR7a2V5fTtcXG5gO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfaXNFeGlzdEluU291cmNlKGtleTpzdHJpbmcsIHNvdXJjZTpzdHJpbmcpe1xuICAgICAgICAgICAgcmV0dXJuIHNvdXJjZS5pbmRleE9mKGtleSkgIT09IC0xO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfY29udmVydEFycmF5VG9BcnJheUJ1ZmZlcih0eXBlOlZhcmlhYmxlVHlwZSwgdmFsdWU6QXJyYXk8YW55PnxGbG9hdDMyQXJyYXl8RmxvYXQ2NEFycmF5KSB7XG4gICAgICAgICAgICB2YXIgc2l6ZSA9IHRoaXMuX2dldEJ1ZmZlclNpemUodHlwZSk7XG5cbiAgICAgICAgICAgIGlmKEp1ZGdlVXRpbHMuaXNBcnJheSh2YWx1ZSkpe1xuICAgICAgICAgICAgICAgIHJldHVybiBBcnJheUJ1ZmZlci5jcmVhdGUobmV3IEZsb2F0MzJBcnJheSh2YWx1ZSksIHNpemUsIEJ1ZmZlclR5cGUuRkxPQVQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZihKdWRnZVV0aWxzLmlzRmxvYXRBcnJheSh2YWx1ZSkpe1xuICAgICAgICAgICAgICAgIHJldHVybiBBcnJheUJ1ZmZlci5jcmVhdGUodmFsdWUsIHNpemUsIEJ1ZmZlclR5cGUuRkxPQVQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfZ2V0QnVmZmVyU2l6ZSh0eXBlOlZhcmlhYmxlVHlwZSl7XG4gICAgICAgICAgICB2YXIgc2l6ZSA9IG51bGw7XG5cbiAgICAgICAgICAgIHN3aXRjaCAodHlwZSl7XG4gICAgICAgICAgICAgICAgY2FzZSBWYXJpYWJsZVR5cGUuRkxPQVRfMTpcbiAgICAgICAgICAgICAgICBjYXNlIFZhcmlhYmxlVHlwZS5OVU1CRVJfMTpcbiAgICAgICAgICAgICAgICAgICAgc2l6ZSA9IDE7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgVmFyaWFibGVUeXBlLkZMT0FUXzM6XG4gICAgICAgICAgICAgICAgICAgIHNpemUgPSAzO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFZhcmlhYmxlVHlwZS5GTE9BVF80OlxuICAgICAgICAgICAgICAgICAgICBzaXplID0gNDtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgTG9nLmVycm9yKHRydWUsIExvZy5pbmZvLkZVTkNfVU5FWFBFQ1QoXCJWYXJpYWJsZVR5cGVcIiwgdHlwZSkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHNpemU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBleHBvcnQgdHlwZSBTb3VyY2VEZWZpbmUgPSB7XG4gICAgICAgIG5hbWU6c3RyaW5nO1xuICAgICAgICB2YWx1ZTphbnk7XG4gICAgfVxufVxuIiwibW9kdWxlIHdke1xuICAgIGV4cG9ydCBlbnVtIFZhcmlhYmxlVHlwZXtcbiAgICAgICAgRkxPQVRfMSxcbiAgICAgICAgRkxPQVRfMixcbiAgICAgICAgRkxPQVRfMyxcbiAgICAgICAgRkxPQVRfNCxcbiAgICAgICAgRkxPQVRfTUFUMyxcbiAgICAgICAgRkxPQVRfTUFUNCxcbiAgICAgICAgQlVGRkVSLFxuICAgICAgICBTQU1QTEVSX0NVQkUsXG4gICAgICAgIFNBTVBMRVJfMkQsXG4gICAgICAgIE5VTUJFUl8xLFxuICAgICAgICBTVFJVQ1RVUkUsXG4gICAgICAgIFNUUlVDVFVSRVNcbiAgICB9XG59XG5cbiIsIm1vZHVsZSB3ZHtcbiAgICBleHBvcnQgZW51bSBWYXJpYWJsZUNhdGVnb3J5e1xuICAgICAgICAvKiEgYXZvaWQgdG8gZXF1YWwgMFxuICAgICAgICBmb3IgZXhhbXBsZSwgd2hlbiBjb21wYXJlIHRvIHRleHR1cmUgaW5kZXgsIGl0IG1heSBlcXVhbCB0ZXh0dXJlIDBcbiAgICAgICAgKi9cbiAgICAgICAgRU5HSU5FID0gPGFueT5cIkVOR0lORVwiLFxuICAgICAgICBDVVNUT00gPSA8YW55PlwiQ1VTVE9NXCJcbiAgICB9XG59XG4iLCJtb2R1bGUgd2R7XG4gICAgZXhwb3J0IGNsYXNzIFZhcmlhYmxlTGlie1xuICAgICAgICAvL3RvZG8gZ3JvdXA/KGNvbW1vbixjdWJlbWFwLi4uKVxuXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgYV9wb3NpdGlvbjpTaGFkZXJWYXJpYWJsZSA9IHtcbiAgICAgICAgICAgIHR5cGU6VmFyaWFibGVUeXBlLkZMT0FUXzMsXG4gICAgICAgICAgICB2YWx1ZTpWYXJpYWJsZUNhdGVnb3J5LkVOR0lORVxuICAgICAgICB9O1xuXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgYV9jdXJyZW50RnJhbWVQb3NpdGlvbjpTaGFkZXJWYXJpYWJsZSA9IHtcbiAgICAgICAgICAgIHR5cGU6VmFyaWFibGVUeXBlLkZMT0FUXzMsXG4gICAgICAgICAgICB2YWx1ZTpWYXJpYWJsZUNhdGVnb3J5LkVOR0lORVxuICAgICAgICB9O1xuXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgYV9uZXh0RnJhbWVQb3NpdGlvbjpTaGFkZXJWYXJpYWJsZSA9IHtcbiAgICAgICAgICAgIHR5cGU6VmFyaWFibGVUeXBlLkZMT0FUXzMsXG4gICAgICAgICAgICB2YWx1ZTpWYXJpYWJsZUNhdGVnb3J5LkVOR0lORVxuICAgICAgICB9O1xuXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgYV9ub3JtYWw6U2hhZGVyVmFyaWFibGUgPSB7XG4gICAgICAgICAgICB0eXBlOlZhcmlhYmxlVHlwZS5GTE9BVF8zLFxuICAgICAgICAgICAgdmFsdWU6VmFyaWFibGVDYXRlZ29yeS5FTkdJTkVcbiAgICAgICAgfTtcblxuICAgICAgICBwdWJsaWMgc3RhdGljIGFfY3VycmVudEZyYW1lTm9ybWFsOlNoYWRlclZhcmlhYmxlID0ge1xuICAgICAgICAgICAgdHlwZTpWYXJpYWJsZVR5cGUuRkxPQVRfMyxcbiAgICAgICAgICAgIHZhbHVlOlZhcmlhYmxlQ2F0ZWdvcnkuRU5HSU5FXG4gICAgICAgIH07XG5cbiAgICAgICAgcHVibGljIHN0YXRpYyBhX25leHRGcmFtZU5vcm1hbDpTaGFkZXJWYXJpYWJsZSA9IHtcbiAgICAgICAgICAgIHR5cGU6VmFyaWFibGVUeXBlLkZMT0FUXzMsXG4gICAgICAgICAgICB2YWx1ZTpWYXJpYWJsZUNhdGVnb3J5LkVOR0lORVxuICAgICAgICB9O1xuXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgYV9jb2xvcjpTaGFkZXJWYXJpYWJsZSA9IHtcbiAgICAgICAgICAgIHR5cGU6VmFyaWFibGVUeXBlLkZMT0FUXzMsXG4gICAgICAgICAgICB2YWx1ZTpWYXJpYWJsZUNhdGVnb3J5LkVOR0lORVxuICAgICAgICB9O1xuXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgYV90ZXhDb29yZDpTaGFkZXJWYXJpYWJsZSA9IHtcbiAgICAgICAgICAgIHR5cGU6VmFyaWFibGVUeXBlLkZMT0FUXzIsXG4gICAgICAgICAgICB2YWx1ZTpWYXJpYWJsZUNhdGVnb3J5LkVOR0lORVxuICAgICAgICB9O1xuXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgYV90YW5nZW50OlNoYWRlclZhcmlhYmxlID0ge1xuICAgICAgICAgICAgdHlwZTpWYXJpYWJsZVR5cGUuRkxPQVRfMyxcbiAgICAgICAgICAgIHZhbHVlOlZhcmlhYmxlQ2F0ZWdvcnkuRU5HSU5FXG4gICAgICAgIH07XG5cbiAgICAgICAgcHVibGljIHN0YXRpYyB1X21NYXRyaXg6U2hhZGVyVmFyaWFibGUgPSB7XG4gICAgICAgICAgICB0eXBlOlZhcmlhYmxlVHlwZS5GTE9BVF9NQVQ0LFxuICAgICAgICAgICAgdmFsdWU6VmFyaWFibGVDYXRlZ29yeS5FTkdJTkVcbiAgICAgICAgfTtcblxuICAgICAgICBwdWJsaWMgc3RhdGljIHVfdk1hdHJpeDpTaGFkZXJWYXJpYWJsZSA9IHtcbiAgICAgICAgICAgIHR5cGU6VmFyaWFibGVUeXBlLkZMT0FUX01BVDQsXG4gICAgICAgICAgICB2YWx1ZTpWYXJpYWJsZUNhdGVnb3J5LkVOR0lORVxuICAgICAgICB9O1xuXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgdV9wTWF0cml4OlNoYWRlclZhcmlhYmxlID0ge1xuICAgICAgICAgICAgdHlwZTpWYXJpYWJsZVR5cGUuRkxPQVRfTUFUNCxcbiAgICAgICAgICAgIHZhbHVlOlZhcmlhYmxlQ2F0ZWdvcnkuRU5HSU5FXG4gICAgICAgIH07XG5cbiAgICAgICAgcHVibGljIHN0YXRpYyB1X25vcm1hbE1hdHJpeDpTaGFkZXJWYXJpYWJsZSA9IHtcbiAgICAgICAgICAgIHR5cGU6VmFyaWFibGVUeXBlLkZMT0FUX01BVDMsXG4gICAgICAgICAgICB2YWx1ZTpWYXJpYWJsZUNhdGVnb3J5LkVOR0lORVxuICAgICAgICB9O1xuXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgdV9zYW1wbGVyQ3ViZTA6U2hhZGVyVmFyaWFibGUgPSB7XG4gICAgICAgICAgICB0eXBlOlZhcmlhYmxlVHlwZS5TQU1QTEVSX0NVQkUsXG4gICAgICAgICAgICB2YWx1ZTpWYXJpYWJsZUNhdGVnb3J5LkVOR0lORVxuICAgICAgICB9O1xuXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgdV9zYW1wbGVyMkQwOlNoYWRlclZhcmlhYmxlID0ge1xuICAgICAgICAgICAgdHlwZTpWYXJpYWJsZVR5cGUuU0FNUExFUl8yRCxcbiAgICAgICAgICAgIHZhbHVlOlZhcmlhYmxlQ2F0ZWdvcnkuRU5HSU5FXG4gICAgICAgIH07XG5cbiAgICAgICAgcHVibGljIHN0YXRpYyB1X3NhbXBsZXIyRDE6U2hhZGVyVmFyaWFibGUgPSB7XG4gICAgICAgICAgICB0eXBlOlZhcmlhYmxlVHlwZS5TQU1QTEVSXzJELFxuICAgICAgICAgICAgdmFsdWU6VmFyaWFibGVDYXRlZ29yeS5FTkdJTkVcbiAgICAgICAgfTtcblxuICAgICAgICBwdWJsaWMgc3RhdGljIHVfZGlmZnVzZU1hcFNhbXBsZXI6U2hhZGVyVmFyaWFibGUgPSB7XG4gICAgICAgICAgICB0eXBlOlZhcmlhYmxlVHlwZS5TQU1QTEVSXzJELFxuICAgICAgICAgICAgdmFsdWU6VmFyaWFibGVDYXRlZ29yeS5FTkdJTkVcbiAgICAgICAgfTtcblxuICAgICAgICBwdWJsaWMgc3RhdGljIHVfc3BlY3VsYXJNYXBTYW1wbGVyOlNoYWRlclZhcmlhYmxlID0ge1xuICAgICAgICAgICAgdHlwZTpWYXJpYWJsZVR5cGUuU0FNUExFUl8yRCxcbiAgICAgICAgICAgIHZhbHVlOlZhcmlhYmxlQ2F0ZWdvcnkuRU5HSU5FXG4gICAgICAgIH07XG5cbiAgICAgICAgcHVibGljIHN0YXRpYyB1X25vcm1hbE1hcFNhbXBsZXI6U2hhZGVyVmFyaWFibGUgPSB7XG4gICAgICAgICAgICB0eXBlOlZhcmlhYmxlVHlwZS5TQU1QTEVSXzJELFxuICAgICAgICAgICAgdmFsdWU6VmFyaWFibGVDYXRlZ29yeS5FTkdJTkVcbiAgICAgICAgfTtcblxuICAgICAgICBwdWJsaWMgc3RhdGljIHVfbWlycm9yU2FtcGxlcjpTaGFkZXJWYXJpYWJsZSA9IHtcbiAgICAgICAgICAgIHR5cGU6VmFyaWFibGVUeXBlLlNBTVBMRVJfMkQsXG4gICAgICAgICAgICB2YWx1ZTpWYXJpYWJsZUNhdGVnb3J5LkVOR0lORVxuICAgICAgICB9O1xuXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgdV9jYW1lcmFQb3M6U2hhZGVyVmFyaWFibGUgPSB7XG4gICAgICAgICAgICB0eXBlOlZhcmlhYmxlVHlwZS5GTE9BVF8zLFxuICAgICAgICAgICAgdmFsdWU6VmFyaWFibGVDYXRlZ29yeS5FTkdJTkVcbiAgICAgICAgfTtcblxuICAgICAgICBwdWJsaWMgc3RhdGljIHVfcmVmcmFjdGlvblJhdGlvOlNoYWRlclZhcmlhYmxlID0ge1xuICAgICAgICAgICAgdHlwZTpWYXJpYWJsZVR5cGUuRkxPQVRfMSxcbiAgICAgICAgICAgIHZhbHVlOlZhcmlhYmxlQ2F0ZWdvcnkuRU5HSU5FXG4gICAgICAgIH07XG5cbiAgICAgICAgcHVibGljIHN0YXRpYyB1X3JlZmxlY3Rpdml0eTpTaGFkZXJWYXJpYWJsZSA9IHtcbiAgICAgICAgICAgIHR5cGU6VmFyaWFibGVUeXBlLkZMT0FUXzEsXG4gICAgICAgICAgICB2YWx1ZTpWYXJpYWJsZUNhdGVnb3J5LkVOR0lORVxuICAgICAgICB9O1xuXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgdV9zb3VyY2VSZWdpb246U2hhZGVyVmFyaWFibGUgPSB7XG4gICAgICAgICAgICB0eXBlOlZhcmlhYmxlVHlwZS5GTE9BVF80LFxuICAgICAgICAgICAgdmFsdWU6VmFyaWFibGVDYXRlZ29yeS5FTkdJTkVcbiAgICAgICAgfTtcblxuICAgICAgICBwdWJsaWMgc3RhdGljIHVfcmVwZWF0UmVnaW9uOlNoYWRlclZhcmlhYmxlID0ge1xuICAgICAgICAgICAgdHlwZTpWYXJpYWJsZVR5cGUuRkxPQVRfNCxcbiAgICAgICAgICAgIHZhbHVlOlZhcmlhYmxlQ2F0ZWdvcnkuRU5HSU5FXG4gICAgICAgIH07XG5cbiAgICAgICAgcHVibGljIHN0YXRpYyB1X2NvbWJpbmVNb2RlOlNoYWRlclZhcmlhYmxlID0ge1xuICAgICAgICAgICAgdHlwZTpWYXJpYWJsZVR5cGUuTlVNQkVSXzEsXG4gICAgICAgICAgICB2YWx1ZTpWYXJpYWJsZUNhdGVnb3J5LkVOR0lORVxuICAgICAgICB9O1xuXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgdV9taXhSYXRpbzpTaGFkZXJWYXJpYWJsZSA9IHtcbiAgICAgICAgICAgIHR5cGU6VmFyaWFibGVUeXBlLkZMT0FUXzEsXG4gICAgICAgICAgICB2YWx1ZTpWYXJpYWJsZUNhdGVnb3J5LkVOR0lORVxuICAgICAgICB9O1xuXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgdV9kaWZmdXNlOlNoYWRlclZhcmlhYmxlID0ge1xuICAgICAgICAgICAgdHlwZTpWYXJpYWJsZVR5cGUuRkxPQVRfMyxcbiAgICAgICAgICAgIHZhbHVlOlZhcmlhYmxlQ2F0ZWdvcnkuRU5HSU5FXG4gICAgICAgIH07XG5cbiAgICAgICAgcHVibGljIHN0YXRpYyB1X3NwZWN1bGFyOlNoYWRlclZhcmlhYmxlID0ge1xuICAgICAgICAgICAgdHlwZTpWYXJpYWJsZVR5cGUuRkxPQVRfMyxcbiAgICAgICAgICAgIHZhbHVlOlZhcmlhYmxlQ2F0ZWdvcnkuRU5HSU5FXG4gICAgICAgIH07XG5cbiAgICAgICAgcHVibGljIHN0YXRpYyB1X3NoaW5pbmVzczpTaGFkZXJWYXJpYWJsZSA9IHtcbiAgICAgICAgICAgIHR5cGU6VmFyaWFibGVUeXBlLkZMT0FUXzEsXG4gICAgICAgICAgICB2YWx1ZTpWYXJpYWJsZUNhdGVnb3J5LkVOR0lORVxuICAgICAgICB9O1xuXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgdV9pc0JvdGhTaWRlOlNoYWRlclZhcmlhYmxlID0ge1xuICAgICAgICAgICAgdHlwZTpWYXJpYWJsZVR5cGUuTlVNQkVSXzEsXG4gICAgICAgICAgICB2YWx1ZTpWYXJpYWJsZUNhdGVnb3J5LkVOR0lORVxuICAgICAgICB9O1xuXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgdV9vcGFjaXR5OlNoYWRlclZhcmlhYmxlID0ge1xuICAgICAgICAgICAgdHlwZTpWYXJpYWJsZVR5cGUuRkxPQVRfMSxcbiAgICAgICAgICAgIHZhbHVlOlZhcmlhYmxlQ2F0ZWdvcnkuRU5HSU5FXG4gICAgICAgIH07XG5cbiAgICAgICAgcHVibGljIHN0YXRpYyB1X2FtYmllbnQ6U2hhZGVyVmFyaWFibGUgPSB7XG4gICAgICAgICAgICB0eXBlOlZhcmlhYmxlVHlwZS5GTE9BVF8zLFxuICAgICAgICAgICAgdmFsdWU6VmFyaWFibGVDYXRlZ29yeS5FTkdJTkVcbiAgICAgICAgfTtcblxuICAgICAgICBwdWJsaWMgc3RhdGljIHVfZGlyZWN0aW9uTGlnaHRzOlNoYWRlclZhcmlhYmxlID0ge1xuICAgICAgICAgICAgdHlwZTpWYXJpYWJsZVR5cGUuU1RSVUNUVVJFUyxcbiAgICAgICAgICAgIHZhbHVlOlZhcmlhYmxlQ2F0ZWdvcnkuRU5HSU5FXG4gICAgICAgIH07XG5cbiAgICAgICAgcHVibGljIHN0YXRpYyB1X3BvaW50TGlnaHRzOlNoYWRlclZhcmlhYmxlID0ge1xuICAgICAgICAgICAgdHlwZTpWYXJpYWJsZVR5cGUuU1RSVUNUVVJFUyxcbiAgICAgICAgICAgIHZhbHVlOlZhcmlhYmxlQ2F0ZWdvcnkuRU5HSU5FXG4gICAgICAgIH07XG5cbiAgICAgICAgcHVibGljIHN0YXRpYyB1X3ZwTWF0cml4RnJvbUxpZ2h0OlNoYWRlclZhcmlhYmxlID0ge1xuICAgICAgICAgICAgdHlwZTpWYXJpYWJsZVR5cGUuRkxPQVRfTUFUNCxcbiAgICAgICAgICAgIHZhbHVlOlZhcmlhYmxlQ2F0ZWdvcnkuRU5HSU5FXG4gICAgICAgIH07XG5cbiAgICAgICAgcHVibGljIHN0YXRpYyB1X2xpZ2h0UG9zOlNoYWRlclZhcmlhYmxlID0ge1xuICAgICAgICAgICAgdHlwZTpWYXJpYWJsZVR5cGUuRkxPQVRfMyxcbiAgICAgICAgICAgIHZhbHVlOlZhcmlhYmxlQ2F0ZWdvcnkuRU5HSU5FXG4gICAgICAgIH07XG5cbiAgICAgICAgcHVibGljIHN0YXRpYyB1X2ZhclBsYW5lOlNoYWRlclZhcmlhYmxlID0ge1xuICAgICAgICAgICAgdHlwZTpWYXJpYWJsZVR5cGUuRkxPQVRfMSxcbiAgICAgICAgICAgIHZhbHVlOlZhcmlhYmxlQ2F0ZWdvcnkuRU5HSU5FXG4gICAgICAgIH07XG5cbiAgICAgICAgcHVibGljIHN0YXRpYyB1X2ludGVycG9sYXRpb246U2hhZGVyVmFyaWFibGUgPSB7XG4gICAgICAgICAgICB0eXBlOlZhcmlhYmxlVHlwZS5GTE9BVF8xLFxuICAgICAgICAgICAgdmFsdWU6VmFyaWFibGVDYXRlZ29yeS5FTkdJTkVcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBleHBvcnQgdHlwZSBTaGFkZXJWYXJpYWJsZSA9IHtcbiAgICAgICAgdHlwZTpWYXJpYWJsZVR5cGU7XG4gICAgICAgIHZhbHVlOmFueVxuICAgIH1cbn1cblxuIiwibW9kdWxlIHdke1xuICAgIGNvbnN0IF90YWJsZSA9IHdkQ2IuSGFzaC5jcmVhdGU8c3RyaW5nPigpO1xuXG4gICAgLy90b2RvIHJlbW92ZSA8YW55PlxuICAgIF90YWJsZS5hZGRDaGlsZCg8YW55PlZhcmlhYmxlVHlwZS5GTE9BVF8xLCBcImZsb2F0XCIpO1xuICAgIF90YWJsZS5hZGRDaGlsZCg8YW55PlZhcmlhYmxlVHlwZS5GTE9BVF8yLCBcInZlYzJcIik7XG4gICAgX3RhYmxlLmFkZENoaWxkKDxhbnk+VmFyaWFibGVUeXBlLkZMT0FUXzMsIFwidmVjM1wiKTtcbiAgICBfdGFibGUuYWRkQ2hpbGQoPGFueT5WYXJpYWJsZVR5cGUuRkxPQVRfNCwgXCJ2ZWM0XCIpO1xuICAgIF90YWJsZS5hZGRDaGlsZCg8YW55PlZhcmlhYmxlVHlwZS5GTE9BVF9NQVQzLCBcIm1hdDNcIik7XG4gICAgX3RhYmxlLmFkZENoaWxkKDxhbnk+VmFyaWFibGVUeXBlLkZMT0FUX01BVDQsIFwibWF0NFwiKTtcbiAgICBfdGFibGUuYWRkQ2hpbGQoPGFueT5WYXJpYWJsZVR5cGUuTlVNQkVSXzEsIFwiaW50XCIpO1xuICAgIF90YWJsZS5hZGRDaGlsZCg8YW55PlZhcmlhYmxlVHlwZS5TQU1QTEVSX0NVQkUsIFwic2FtcGxlckN1YmVcIik7XG4gICAgX3RhYmxlLmFkZENoaWxkKDxhbnk+VmFyaWFibGVUeXBlLlNBTVBMRVJfMkQsIFwic2FtcGxlcjJEXCIpO1xuXG4gICAgZXhwb3J0IGNsYXNzIFZhcmlhYmxlVHlwZVRhYmxle1xuICAgICAgICBwdWJsaWMgc3RhdGljIGdldFZhcmlhYmxlVHlwZSh0eXBlOlZhcmlhYmxlVHlwZSl7XG4gICAgICAgICAgICAvL3RvZG8gcmVtb3ZlIDxhbnk+XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gX3RhYmxlLmdldENoaWxkKDxhbnk+dHlwZSk7XG5cbiAgICAgICAgICAgIExvZy5lcnJvcihyZXN1bHQgPT09IHZvaWQgMCwgTG9nLmluZm8uRlVOQ19OT1RfRVhJU1QodHlwZSwgXCJpbiBWYXJpYWJsZVR5cGVUYWJsZVwiKSk7XG5cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbiIsIm1vZHVsZSB3ZHtcbiAgICBjb25zdCBfdGFibGUgPSB3ZENiLkhhc2guY3JlYXRlPHN0cmluZz4oKTtcblxuICAgIF90YWJsZS5hZGRDaGlsZChcImRpZmZ1c2VNYXBcIiwgXCJ1X2RpZmZ1c2VNYXBTYW1wbGVyXCIpO1xuICAgIF90YWJsZS5hZGRDaGlsZChcInNwZWN1bGFyTWFwXCIsIFwidV9zcGVjdWxhck1hcFNhbXBsZXJcIik7XG4gICAgX3RhYmxlLmFkZENoaWxkKFwibm9ybWFsTWFwXCIsIFwidV9ub3JtYWxNYXBTYW1wbGVyXCIpO1xuICAgIF90YWJsZS5hZGRDaGlsZChcIm1pcnJvclJlZmxlY3Rpb25NYXBcIiwgXCJ1X21pcnJvclNhbXBsZXJcIik7XG5cbiAgICBleHBvcnQgY2xhc3MgVmFyaWFibGVOYW1lVGFibGV7XG4gICAgICAgIHB1YmxpYyBzdGF0aWMgZ2V0VmFyaWFibGVOYW1lKG5hbWU6IHN0cmluZyl7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gX3RhYmxlLmdldENoaWxkKG5hbWUpO1xuXG4gICAgICAgICAgICBMb2cuZXJyb3IocmVzdWx0ID09PSB2b2lkIDAsIExvZy5pbmZvLkZVTkNfTk9UX0VYSVNUKG5hbWUsIFwiaW4gVmFyaWFibGVOYW1lVGFibGVcIikpO1xuXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgfVxufVxuXG4iLCJtb2R1bGUgd2R7XG4gICAgZXhwb3J0IGFic3RyYWN0IGNsYXNzIFNoYWRlckxpYntcbiAgICAgICAgcHVibGljIHR5cGU6c3RyaW5nID0gQUJTVFJBQ1RfQVRUUklCVVRFO1xuXG4gICAgICAgIHB1YmxpYyBhdHRyaWJ1dGVzOndkQ2IuSGFzaDxTaGFkZXJWYXJpYWJsZT4gPSB3ZENiLkhhc2guY3JlYXRlPFNoYWRlclZhcmlhYmxlPigpO1xuICAgICAgICBwdWJsaWMgdW5pZm9ybXM6d2RDYi5IYXNoPFNoYWRlclZhcmlhYmxlPiA9IHdkQ2IuSGFzaC5jcmVhdGU8U2hhZGVyVmFyaWFibGU+KCk7XG4gICAgICAgIHB1YmxpYyB2c1NvdXJjZVRvcDpzdHJpbmcgPSBcIlwiO1xuICAgICAgICBwdWJsaWMgdnNTb3VyY2VEZWZpbmU6c3RyaW5nID0gXCJcIjtcbiAgICAgICAgcHVibGljIHZzU291cmNlVmFyRGVjbGFyZTpzdHJpbmcgPSBcIlwiO1xuICAgICAgICBwdWJsaWMgdnNTb3VyY2VGdW5jRGVjbGFyZTpzdHJpbmcgPSBcIlwiO1xuICAgICAgICBwdWJsaWMgdnNTb3VyY2VGdW5jRGVmaW5lOnN0cmluZyA9IFwiXCI7XG4gICAgICAgIHB1YmxpYyB2c1NvdXJjZUJvZHk6c3RyaW5nID0gXCJcIjtcbiAgICAgICAgcHVibGljIGZzU291cmNlVG9wOnN0cmluZyA9IFwiXCI7XG4gICAgICAgIHB1YmxpYyBmc1NvdXJjZURlZmluZTpzdHJpbmcgPSBcIlwiO1xuICAgICAgICBwdWJsaWMgZnNTb3VyY2VWYXJEZWNsYXJlOnN0cmluZyA9IFwiXCI7XG4gICAgICAgIHB1YmxpYyBmc1NvdXJjZUZ1bmNEZWNsYXJlOnN0cmluZyA9IFwiXCI7XG4gICAgICAgIHB1YmxpYyBmc1NvdXJjZUZ1bmNEZWZpbmU6c3RyaW5nID0gXCJcIjtcbiAgICAgICAgcHVibGljIGZzU291cmNlQm9keTpzdHJpbmcgPSBcIlwiO1xuICAgICAgICBwdWJsaWMgdnNTb3VyY2VEZWZpbmVMaXN0OndkQ2IuQ29sbGVjdGlvbjxhbnk+ID0gd2RDYi5Db2xsZWN0aW9uLmNyZWF0ZTxhbnk+KCk7XG4gICAgICAgIHB1YmxpYyBmc1NvdXJjZURlZmluZUxpc3Q6d2RDYi5Db2xsZWN0aW9uPGFueT4gPSB3ZENiLkNvbGxlY3Rpb24uY3JlYXRlPGFueT4oKTtcblxuICAgICAgICBwdWJsaWMgYWJzdHJhY3Qgc2VuZFNoYWRlclZhcmlhYmxlcyhwcm9ncmFtOiBQcm9ncmFtLCBxdWFkQ21kOlF1YWRDb21tYW5kLCBtYXRlcmlhbDpNYXRlcmlhbCk7XG5cbiAgICAgICAgQHZpcnR1YWxcbiAgICAgICAgcHVibGljIHNldFNoYWRlckRlZmluaXRpb24ocXVhZENtZDpRdWFkQ29tbWFuZCwgbWF0ZXJpYWw6TWF0ZXJpYWwpe1xuICAgICAgICAgICAgdmFyIHZzID0gbnVsbCxcbiAgICAgICAgICAgICAgICBmcyA9IG51bGw7XG5cbiAgICAgICAgICAgIHRoaXMuX2NsZWFyU2hhZGVyRGVmaW5pdGlvbigpO1xuXG4gICAgICAgICAgICB2cyA9IHRoaXMuZ2V0VnNDaHVuaygpO1xuICAgICAgICAgICAgZnMgPSB0aGlzLmdldEZzQ2h1bmsoKTtcblxuICAgICAgICAgICAgdnMgJiYgdGhpcy5zZXRWc1NvdXJjZSh2cyk7XG4gICAgICAgICAgICBmcyAmJiB0aGlzLnNldEZzU291cmNlKGZzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByb3RlY3RlZCBnZXRWc0NodW5rKCk7XG4gICAgICAgIHByb3RlY3RlZCBnZXRWc0NodW5rKHR5cGU6c3RyaW5nKTtcblxuICAgICAgICBwcm90ZWN0ZWQgZ2V0VnNDaHVuayguLi5hcmdzKXtcbiAgICAgICAgICAgIHZhciB0eXBlID0gYXJncy5sZW5ndGggPT09IDAgPyB0aGlzLnR5cGUgOiBhcmdzWzBdO1xuXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZ2V0Q2h1bmsodHlwZSwgU2hhZGVyTGliVHlwZS52cyk7XG4gICAgICAgIH1cblxuICAgICAgICBwcm90ZWN0ZWQgZ2V0RnNDaHVuaygpO1xuICAgICAgICBwcm90ZWN0ZWQgZ2V0RnNDaHVuayh0eXBlOnN0cmluZyk7XG5cbiAgICAgICAgcHJvdGVjdGVkIGdldEZzQ2h1bmsoLi4uYXJncyl7XG4gICAgICAgICAgICB2YXIgdHlwZSA9IGFyZ3MubGVuZ3RoID09PSAwID8gdGhpcy50eXBlIDogYXJnc1swXTtcblxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2dldENodW5rKHR5cGUsIFNoYWRlckxpYlR5cGUuZnMpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJvdGVjdGVkIHNldFZzU291cmNlKHZzOkdMU0xDaHVuaywgb3BlcmF0b3I6c3RyaW5nPVwiPVwiKXtcbiAgICAgICAgICAgIHRoaXMuX3NldFNvdXJjZSh2cywgU2hhZGVyTGliVHlwZS52cywgb3BlcmF0b3IpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJvdGVjdGVkIHNldEZzU291cmNlKGZzOkdMU0xDaHVuaywgb3BlcmF0b3I6c3RyaW5nPVwiPVwiKXtcbiAgICAgICAgICAgIHRoaXMuX3NldFNvdXJjZShmcywgU2hhZGVyTGliVHlwZS5mcywgb3BlcmF0b3IpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJvdGVjdGVkIGFkZEF0dHJpYnV0ZVZhcmlhYmxlKHZhcmlhYmxlQXJyOkFycmF5PHN0cmluZz4pe1xuICAgICAgICAgICAgdGhpcy5fYWRkVmFyaWFibGUodGhpcy5hdHRyaWJ1dGVzLCB2YXJpYWJsZUFycik7XG4gICAgICAgIH1cblxuICAgICAgICBwcm90ZWN0ZWQgYWRkVW5pZm9ybVZhcmlhYmxlKHZhcmlhYmxlQXJyOkFycmF5PHN0cmluZz4pe1xuICAgICAgICAgICAgdGhpcy5fYWRkVmFyaWFibGUodGhpcy51bmlmb3JtcywgdmFyaWFibGVBcnIpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJvdGVjdGVkIHNlbmRBdHRyaWJ1dGVEYXRhKHByb2dyYW06UHJvZ3JhbSwgbmFtZTpzdHJpbmcsIGRhdGE6YW55KXtcbiAgICAgICAgICAgIHByb2dyYW0uc2VuZEF0dHJpYnV0ZURhdGEobmFtZSwgVmFyaWFibGVUeXBlLkJVRkZFUiwgZGF0YSk7XG4gICAgICAgIH1cblxuICAgICAgICBAcmVxdWlyZShmdW5jdGlvbihwcm9ncmFtOlByb2dyYW0sIG5hbWU6c3RyaW5nLCBkYXRhOmFueSl7XG4gICAgICAgICAgICBhc3NlcnQoISFWYXJpYWJsZUxpYltuYW1lXSwgYCR7bmFtZX0gc2hvdWxkIGV4aXN0IGluIFZhcmlhYmxlTGliYCk7XG4gICAgICAgIH0pXG4gICAgICAgIHByb3RlY3RlZCBzZW5kVW5pZm9ybURhdGEocHJvZ3JhbTpQcm9ncmFtLCBuYW1lOnN0cmluZywgZGF0YTphbnkpe1xuICAgICAgICAgICAgcHJvZ3JhbS5zZW5kVW5pZm9ybURhdGEobmFtZSwgVmFyaWFibGVMaWJbbmFtZV0udHlwZSwgZGF0YSk7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9jbGVhclNoYWRlckRlZmluaXRpb24oKXtcbiAgICAgICAgICAgIHRoaXMuYXR0cmlidXRlcy5yZW1vdmVBbGxDaGlsZHJlbigpO1xuICAgICAgICAgICAgdGhpcy51bmlmb3Jtcy5yZW1vdmVBbGxDaGlsZHJlbigpO1xuICAgICAgICAgICAgdGhpcy52c1NvdXJjZURlZmluZUxpc3QucmVtb3ZlQWxsQ2hpbGRyZW4oKTtcbiAgICAgICAgICAgIHRoaXMuZnNTb3VyY2VEZWZpbmVMaXN0LnJlbW92ZUFsbENoaWxkcmVuKCk7XG5cbiAgICAgICAgICAgIHRoaXMudnNTb3VyY2VUb3AgPSBcIlwiO1xuICAgICAgICAgICAgdGhpcy52c1NvdXJjZURlZmluZSA9IFwiXCI7XG4gICAgICAgICAgICB0aGlzLnZzU291cmNlVmFyRGVjbGFyZSA9IFwiXCI7XG4gICAgICAgICAgICB0aGlzLnZzU291cmNlRnVuY0RlY2xhcmUgPSBcIlwiO1xuICAgICAgICAgICAgdGhpcy52c1NvdXJjZUZ1bmNEZWZpbmUgPSBcIlwiO1xuICAgICAgICAgICAgdGhpcy52c1NvdXJjZUJvZHkgPSBcIlwiO1xuICAgICAgICAgICAgdGhpcy5mc1NvdXJjZVRvcCA9IFwiXCI7XG4gICAgICAgICAgICB0aGlzLmZzU291cmNlRGVmaW5lID0gXCJcIjtcbiAgICAgICAgICAgIHRoaXMuZnNTb3VyY2VWYXJEZWNsYXJlID0gXCJcIjtcbiAgICAgICAgICAgIHRoaXMuZnNTb3VyY2VGdW5jRGVjbGFyZSA9IFwiXCI7XG4gICAgICAgICAgICB0aGlzLmZzU291cmNlRnVuY0RlZmluZSA9IFwiXCI7XG4gICAgICAgICAgICB0aGlzLmZzU291cmNlQm9keSA9IFwiXCI7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9nZXRDaHVuayh0eXBlOnN0cmluZywgc291cmNlVHlwZTpTaGFkZXJMaWJUeXBlKXtcbiAgICAgICAgICAgIHZhciBrZXkgPSBudWxsO1xuXG4gICAgICAgICAgICBpZih0eXBlLmluZGV4T2YoXCIuZ2xzbFwiKSA+IC0xKXtcbiAgICAgICAgICAgICAgICBrZXkgPSAgYCR7d2RDYi5QYXRoVXRpbHMuYmFzZW5hbWUodHlwZSwgXCIuZ2xzbFwiKX1gO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICBpZihzb3VyY2VUeXBlID09PSBTaGFkZXJMaWJUeXBlLnZzKXtcbiAgICAgICAgICAgICAgICAgICAga2V5ID0gYCR7dHlwZX1fdmVydGV4YDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICAgICAga2V5ID0gYCR7dHlwZX1fZnJhZ21lbnRgO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIFNoYWRlckNodW5rW2tleV0gPyBTaGFkZXJDaHVua1trZXldIDogU2hhZGVyQ2h1bmsuZW1wdHk7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9zZXRTb3VyY2UoY2h1bms6R0xTTENodW5rLCBzb3VyY2VUeXBlOlNoYWRlckxpYlR5cGUsIG9wZXJhdG9yOnN0cmluZykge1xuICAgICAgICAgICAgaWYoIWNodW5rKXtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHN3aXRjaCAob3BlcmF0b3Ipe1xuICAgICAgICAgICAgICAgIGNhc2UgXCIrXCI6XG4gICAgICAgICAgICAgICAgICAgIHRoaXNbYCR7c291cmNlVHlwZX1Tb3VyY2VUb3BgXSArPSBjaHVuay50b3A7XG4gICAgICAgICAgICAgICAgICAgIHRoaXNbYCR7c291cmNlVHlwZX1Tb3VyY2VEZWZpbmVgXSArPSBjaHVuay5kZWZpbmU7XG4gICAgICAgICAgICAgICAgICAgIHRoaXNbYCR7c291cmNlVHlwZX1Tb3VyY2VWYXJEZWNsYXJlYF0gKz0gY2h1bmsudmFyRGVjbGFyZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpc1tgJHtzb3VyY2VUeXBlfVNvdXJjZUZ1bmNEZWNsYXJlYF0gKz0gY2h1bmsuZnVuY0RlY2xhcmU7XG4gICAgICAgICAgICAgICAgICAgIHRoaXNbYCR7c291cmNlVHlwZX1Tb3VyY2VGdW5jRGVmaW5lYF0gKz0gY2h1bmsuZnVuY0RlZmluZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpc1tgJHtzb3VyY2VUeXBlfVNvdXJjZUJvZHlgXSArPSBjaHVuay5ib2R5O1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwiPVwiOlxuICAgICAgICAgICAgICAgICAgICB0aGlzW2Ake3NvdXJjZVR5cGV9U291cmNlVG9wYF0gPSBjaHVuay50b3A7XG4gICAgICAgICAgICAgICAgICAgIHRoaXNbYCR7c291cmNlVHlwZX1Tb3VyY2VEZWZpbmVgXSA9IGNodW5rLmRlZmluZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpc1tgJHtzb3VyY2VUeXBlfVNvdXJjZVZhckRlY2xhcmVgXSA9IGNodW5rLnZhckRlY2xhcmU7XG4gICAgICAgICAgICAgICAgICAgIHRoaXNbYCR7c291cmNlVHlwZX1Tb3VyY2VGdW5jRGVjbGFyZWBdID0gY2h1bmsuZnVuY0RlY2xhcmU7XG4gICAgICAgICAgICAgICAgICAgIHRoaXNbYCR7c291cmNlVHlwZX1Tb3VyY2VGdW5jRGVmaW5lYF0gPSBjaHVuay5mdW5jRGVmaW5lO1xuICAgICAgICAgICAgICAgICAgICB0aGlzW2Ake3NvdXJjZVR5cGV9U291cmNlQm9keWBdID0gY2h1bmsuYm9keTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgTG9nLmVycm9yKHRydWUsIExvZy5pbmZvLkZVTkNfSU5WQUxJRChcIm9wZXJ0b3I6XCIsIG9wZXJhdG9yKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfYWRkVmFyaWFibGUodGFyZ2V0OndkQ2IuSGFzaDxTaGFkZXJWYXJpYWJsZT4sIHZhcmlhYmxlQXJyOkFycmF5PHN0cmluZz4pe1xuICAgICAgICAgICAgdmFyaWFibGVBcnIuZm9yRWFjaCgodmFyaWFibGU6c3RyaW5nKSA9PiB7XG4gICAgICAgICAgICAgICAgTG9nLmFzc2VydChWYXJpYWJsZUxpYlt2YXJpYWJsZV0sIExvZy5pbmZvLkZVTkNfU0hPVUxEKHZhcmlhYmxlLCBcImV4aXN0IGluIFZhcmlhYmxlTGliXCIpKTtcblxuICAgICAgICAgICAgICAgIHRhcmdldC5hZGRDaGlsZCh2YXJpYWJsZSwgVmFyaWFibGVMaWJbdmFyaWFibGVdKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZW51bSBTaGFkZXJMaWJUeXBle1xuICAgICAgICB2cz08YW55PlwidnNcIixcbiAgICAgICAgZnM9PGFueT5cImZzXCJcbiAgICB9XG59XG4iLCJtb2R1bGUgd2R7XG4gICAgZXhwb3J0IGNsYXNzIENvbW1vblNoYWRlckxpYiBleHRlbmRzIFNoYWRlckxpYntcbiAgICAgICAgcHVibGljIHN0YXRpYyBjcmVhdGUoKSB7XG4gICAgICAgICAgICB2YXIgb2JqID0gbmV3IHRoaXMoKTtcblxuICAgICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyB0eXBlOnN0cmluZyA9IFwiY29tbW9uXCI7XG5cbiAgICAgICAgcHVibGljIHNlbmRTaGFkZXJWYXJpYWJsZXMocHJvZ3JhbTpQcm9ncmFtLCBxdWFkQ21kOlF1YWRDb21tYW5kLCBtYXRlcmlhbDpNYXRlcmlhbCl7XG4gICAgICAgICAgICB0aGlzLnNlbmRVbmlmb3JtRGF0YShwcm9ncmFtLCBcInVfbU1hdHJpeFwiLCBxdWFkQ21kLm1NYXRyaXgpO1xuICAgICAgICAgICAgdGhpcy5zZW5kVW5pZm9ybURhdGEocHJvZ3JhbSwgXCJ1X3ZNYXRyaXhcIiwgcXVhZENtZC52TWF0cml4KTtcbiAgICAgICAgICAgIHRoaXMuc2VuZFVuaWZvcm1EYXRhKHByb2dyYW0sIFwidV9wTWF0cml4XCIsIHF1YWRDbWQucE1hdHJpeCk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgc2V0U2hhZGVyRGVmaW5pdGlvbihxdWFkQ21kOlF1YWRDb21tYW5kLCBtYXRlcmlhbDpNYXRlcmlhbCl7XG4gICAgICAgICAgICBzdXBlci5zZXRTaGFkZXJEZWZpbml0aW9uKHF1YWRDbWQsIG1hdGVyaWFsKTtcblxuICAgICAgICAgICAgLy90b2RvIHVzZSBWYXJpYWJsZUxpYi54eHg/XG4gICAgICAgICAgICB0aGlzLmFkZFVuaWZvcm1WYXJpYWJsZShbXCJ1X21NYXRyaXhcIiwgXCJ1X3ZNYXRyaXhcIiwgXCJ1X3BNYXRyaXhcIl0pO1xuXG4gICAgICAgICAgICB0aGlzLnZzU291cmNlRGVmaW5lID0gU2hhZGVyQ2h1bmsuY29tbW9uX2RlZmluZS5kZWZpbmUgKyBTaGFkZXJDaHVuay5jb21tb25fdmVydGV4LmRlZmluZTtcbiAgICAgICAgICAgIHRoaXMudnNTb3VyY2VGdW5jRGVmaW5lID0gU2hhZGVyQ2h1bmsuY29tbW9uX2Z1bmN0aW9uLmZ1bmNEZWZpbmUgKyBTaGFkZXJDaHVuay5jb21tb25fdmVydGV4LmZ1bmNEZWZpbmU7XG5cbiAgICAgICAgICAgIHRoaXMuZnNTb3VyY2VEZWZpbmUgPSBTaGFkZXJDaHVuay5jb21tb25fZGVmaW5lLmRlZmluZSArIFNoYWRlckNodW5rLmNvbW1vbl9mcmFnbWVudC5kZWZpbmU7XG4gICAgICAgICAgICB0aGlzLmZzU291cmNlRnVuY0RlZmluZSA9IFNoYWRlckNodW5rLmNvbW1vbl9mdW5jdGlvbi5mdW5jRGVmaW5lICsgU2hhZGVyQ2h1bmsuY29tbW9uX2ZyYWdtZW50LmZ1bmNEZWZpbmU7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbiIsIm1vZHVsZSB3ZHtcbiAgICBleHBvcnQgY2xhc3MgQ29tbW9uVmVydGljZVNoYWRlckxpYiBleHRlbmRzIFNoYWRlckxpYntcbiAgICAgICAgcHVibGljIHN0YXRpYyBjcmVhdGUoKSB7XG4gICAgICAgICAgICB2YXIgb2JqID0gbmV3IHRoaXMoKTtcblxuICAgICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyB0eXBlOnN0cmluZyA9IFwiY29tbW9uVmVydGljZVwiO1xuXG4gICAgICAgIHB1YmxpYyBzZW5kU2hhZGVyVmFyaWFibGVzKHByb2dyYW06UHJvZ3JhbSwgcXVhZENtZDpRdWFkQ29tbWFuZCwgbWF0ZXJpYWw6TWF0ZXJpYWwpe1xuICAgICAgICAgICAgdGhpcy5fc2VuZEF0dHJpYnV0ZVZhcmlhYmxlcyhwcm9ncmFtLCBxdWFkQ21kKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBzZXRTaGFkZXJEZWZpbml0aW9uKHF1YWRDbWQ6UXVhZENvbW1hbmQsIG1hdGVyaWFsOk1hdGVyaWFsKXtcbiAgICAgICAgICAgIHN1cGVyLnNldFNoYWRlckRlZmluaXRpb24ocXVhZENtZCwgbWF0ZXJpYWwpO1xuXG4gICAgICAgICAgICB0aGlzLmFkZEF0dHJpYnV0ZVZhcmlhYmxlKFtcImFfcG9zaXRpb25cIl0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfc2VuZEF0dHJpYnV0ZVZhcmlhYmxlcyhwcm9ncmFtOiBQcm9ncmFtLCBxdWFkQ21kOlF1YWRDb21tYW5kKXtcbiAgICAgICAgICAgIGlmIChxdWFkQ21kLmJ1ZmZlcnMuaGFzQ2hpbGQoQnVmZmVyRGF0YVR5cGUuVkVSVElDRSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNlbmRBdHRyaWJ1dGVEYXRhKHByb2dyYW0sIFwiYV9wb3NpdGlvblwiLCA8QXJyYXlCdWZmZXI+cXVhZENtZC5idWZmZXJzLmdldENoaWxkKEJ1ZmZlckRhdGFUeXBlLlZFUlRJQ0UpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cblxuIiwibW9kdWxlIHdke1xuICAgIGV4cG9ydCBjbGFzcyBDb21tb25Ob3JtYWxTaGFkZXJMaWIgZXh0ZW5kcyBTaGFkZXJMaWJ7XG4gICAgICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlKCkge1xuICAgICAgICAgICAgdmFyIG9iaiA9IG5ldyB0aGlzKCk7XG5cbiAgICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgdHlwZTpzdHJpbmcgPSBcImNvbW1vbk5vcm1hbFwiO1xuXG4gICAgICAgIHB1YmxpYyBzZW5kU2hhZGVyVmFyaWFibGVzKHByb2dyYW06UHJvZ3JhbSwgcXVhZENtZDpRdWFkQ29tbWFuZCwgbWF0ZXJpYWw6TWF0ZXJpYWwpe1xuICAgICAgICAgICAgdGhpcy5fc2VuZEF0dHJpYnV0ZVZhcmlhYmxlcyhwcm9ncmFtLCBxdWFkQ21kKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBzZXRTaGFkZXJEZWZpbml0aW9uKHF1YWRDbWQ6UXVhZENvbW1hbmQsIG1hdGVyaWFsOk1hdGVyaWFsKXtcbiAgICAgICAgICAgIHN1cGVyLnNldFNoYWRlckRlZmluaXRpb24ocXVhZENtZCwgbWF0ZXJpYWwpO1xuXG4gICAgICAgICAgICB0aGlzLmFkZEF0dHJpYnV0ZVZhcmlhYmxlKFtcImFfbm9ybWFsXCJdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX3NlbmRBdHRyaWJ1dGVWYXJpYWJsZXMocHJvZ3JhbTogUHJvZ3JhbSwgcXVhZENtZDpRdWFkQ29tbWFuZCl7XG4gICAgICAgICAgICBpZiAocXVhZENtZC5idWZmZXJzLmhhc0NoaWxkKEJ1ZmZlckRhdGFUeXBlLk5PUk1BTCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNlbmRBdHRyaWJ1dGVEYXRhKHByb2dyYW0sIFwiYV9ub3JtYWxcIiwgPEFycmF5QnVmZmVyPnF1YWRDbWQuYnVmZmVycy5nZXRDaGlsZChCdWZmZXJEYXRhVHlwZS5OT1JNQUwpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cblxuIiwibW9kdWxlIHdke1xuICAgIGV4cG9ydCBjbGFzcyBCYXNpY1NoYWRlckxpYiBleHRlbmRzIFNoYWRlckxpYntcbiAgICAgICAgcHVibGljIHN0YXRpYyBjcmVhdGUoKSB7XG4gICAgICAgICAgICB2YXIgb2JqID0gbmV3IHRoaXMoKTtcblxuICAgICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyB0eXBlOnN0cmluZyA9IFwiYmFzaWNcIjtcblxuICAgICAgICBwdWJsaWMgc2VuZFNoYWRlclZhcmlhYmxlcyhwcm9ncmFtOiBQcm9ncmFtLCBxdWFkQ21kOlF1YWRDb21tYW5kLCBtYXRlcmlhbDpCYXNpY01hdGVyaWFsKXtcbiAgICAgICAgICAgIGlmKHF1YWRDbWQuYnVmZmVycy5oYXNDaGlsZChCdWZmZXJEYXRhVHlwZS5DT0xPUikpe1xuICAgICAgICAgICAgICAgIC8qIVxuICAgICAgICAgICAgICAgICB0aGlzIGNhdXNlIHdhcm46XCJQRVJGT1JNQU5DRSBXQVJOSU5HOiBBdHRyaWJ1dGUgMCBpcyBkaXNhYmxlZC4gVGhpcyBoYXMgc2lnbmZpY2FudCBwZXJmb3JtYW5jZSBwZW5hbHR5XCIgaGVyZT9cbiAgICAgICAgICAgICAgICAgYmVjYXVzZSBhX2NvbG9yJ3BvcyBpcyAwLCBhbmQgaXQgc2hvdWxkIGJlIGFycmF5IGRhdGEobGlrZSBGbG9hdDMyQXJyYXkpXG4gICAgICAgICAgICAgICAgIHJlZmVyIHRvOiBodHRwczovL3d3dy5raHJvbm9zLm9yZy93ZWJnbC93aWtpL1dlYkdMX2FuZF9PcGVuR0xfRGlmZmVyZW5jZXMjVmVydGV4X0F0dHJpYnV0ZV8wXG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgdGhpcy5zZW5kQXR0cmlidXRlRGF0YShwcm9ncmFtLCBcImFfY29sb3JcIiwgPEFycmF5QnVmZmVyPnF1YWRDbWQuYnVmZmVycy5nZXRDaGlsZChCdWZmZXJEYXRhVHlwZS5DT0xPUikpO1xuICAgICAgICAgICAgICAgIHRoaXMuc2VuZFVuaWZvcm1EYXRhKHByb2dyYW0sIFwidV9vcGFjaXR5XCIsIG1hdGVyaWFsLm9wYWNpdHkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHNldFNoYWRlckRlZmluaXRpb24ocXVhZENtZDpRdWFkQ29tbWFuZCwgbWF0ZXJpYWw6TWF0ZXJpYWwpe1xuICAgICAgICAgICAgc3VwZXIuc2V0U2hhZGVyRGVmaW5pdGlvbihxdWFkQ21kLCBtYXRlcmlhbCk7XG5cbiAgICAgICAgICAgIHRoaXMuYWRkQXR0cmlidXRlVmFyaWFibGUoW1wiYV9jb2xvclwiXSk7XG4gICAgICAgICAgICB0aGlzLmFkZFVuaWZvcm1WYXJpYWJsZShbXCJ1X29wYWNpdHlcIl0pO1xuXG4gICAgICAgICAgICB0aGlzLnZzU291cmNlQm9keSA9IFNoYWRlclNuaXBwZXQuc2V0UG9zX212cCArIFNoYWRlckNodW5rLmJhc2ljX3ZlcnRleC5ib2R5O1xuICAgICAgICB9XG4gICAgfVxufVxuXG4iLCJtb2R1bGUgd2R7XG4gICAgZXhwb3J0IGNsYXNzIEJhc2ljRW5kU2hhZGVyTGliIGV4dGVuZHMgU2hhZGVyTGlie1xuICAgICAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZSgpIHtcbiAgICAgICAgICAgIHZhciBvYmogPSBuZXcgdGhpcygpO1xuXG4gICAgICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHR5cGU6c3RyaW5nID0gXCJiYXNpY0VuZFwiO1xuXG4gICAgICAgIHB1YmxpYyBzZW5kU2hhZGVyVmFyaWFibGVzKHByb2dyYW06IFByb2dyYW0sIHF1YWRDbWQ6UXVhZENvbW1hbmQsIG1hdGVyaWFsOk1hdGVyaWFsKXtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuIiwibW9kdWxlIHdke1xuICAgIGV4cG9ydCBjbGFzcyBNb3JwaENvbW1vblNoYWRlckxpYiBleHRlbmRzIFNoYWRlckxpYntcbiAgICAgICAgcHVibGljIHN0YXRpYyBjcmVhdGUoKSB7XG4gICAgICAgICAgICB2YXIgb2JqID0gbmV3IHRoaXMoKTtcblxuICAgICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyB0eXBlOnN0cmluZyA9IFwibW9ycGhDb21tb25cIjtcblxuICAgICAgICBAcmVxdWlyZShmdW5jdGlvbihwcm9ncmFtOlByb2dyYW0sIHF1YWRDbWQ6UXVhZENvbW1hbmQsIG1hdGVyaWFsOk1hdGVyaWFsKXtcbiAgICAgICAgICAgIGFzc2VydCghIXF1YWRDbWQuYW5pbWF0aW9uLCBMb2cuaW5mby5GVU5DX1NIT1VMRChcImVudGl0eU9iamVjdFwiLCBcImFkZCBNb3JwaEFuaW1hdGlvbiBjb21wb25lbnRcIikpO1xuICAgICAgICB9KVxuICAgICAgICBwdWJsaWMgc2VuZFNoYWRlclZhcmlhYmxlcyhwcm9ncmFtOlByb2dyYW0sIHF1YWRDbWQ6UXVhZENvbW1hbmQsIG1hdGVyaWFsOk1hdGVyaWFsKXtcbiAgICAgICAgICAgIHZhciBhbmltID0gPE1vcnBoQW5pbWF0aW9uPihxdWFkQ21kLmFuaW1hdGlvbik7XG5cbiAgICAgICAgICAgIHRoaXMuc2VuZFVuaWZvcm1EYXRhKHByb2dyYW0sIFwidV9pbnRlcnBvbGF0aW9uXCIsIGFuaW0uaW50ZXJwb2xhdGlvbik7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgc2V0U2hhZGVyRGVmaW5pdGlvbihxdWFkQ21kOlF1YWRDb21tYW5kLCBtYXRlcmlhbDpNYXRlcmlhbCl7XG4gICAgICAgICAgICBzdXBlci5zZXRTaGFkZXJEZWZpbml0aW9uKHF1YWRDbWQsIG1hdGVyaWFsKTtcblxuICAgICAgICAgICAgdGhpcy5hZGRVbmlmb3JtVmFyaWFibGUoW1widV9pbnRlcnBvbGF0aW9uXCJdKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuIiwibW9kdWxlIHdke1xuICAgIGV4cG9ydCBjbGFzcyBNb3JwaFZlcnRpY2VTaGFkZXJMaWIgZXh0ZW5kcyBTaGFkZXJMaWJ7XG4gICAgICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlKCkge1xuICAgICAgICAgICAgdmFyIG9iaiA9IG5ldyB0aGlzKCk7XG5cbiAgICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgdHlwZTpzdHJpbmcgPSBcIm1vcnBoVmVydGljZVwiO1xuXG4gICAgICAgIEByZXF1aXJlKGZ1bmN0aW9uKHByb2dyYW06UHJvZ3JhbSwgcXVhZENtZDpRdWFkQ29tbWFuZCwgbWF0ZXJpYWw6TWF0ZXJpYWwpe1xuICAgICAgICAgICAgYXNzZXJ0KCEhcXVhZENtZC5hbmltYXRpb24sIExvZy5pbmZvLkZVTkNfU0hPVUxEKFwiZW50aXR5T2JqZWN0XCIsIFwiYWRkIE1vcnBoQW5pbWF0aW9uIGNvbXBvbmVudFwiKSk7XG4gICAgICAgIH0pXG4gICAgICAgIHB1YmxpYyBzZW5kU2hhZGVyVmFyaWFibGVzKHByb2dyYW06UHJvZ3JhbSwgcXVhZENtZDpRdWFkQ29tbWFuZCwgbWF0ZXJpYWw6TWF0ZXJpYWwpe1xuICAgICAgICAgICAgaWYgKHF1YWRDbWQuYnVmZmVycy5oYXNDaGlsZChCdWZmZXJEYXRhVHlwZS5WRVJUSUNFKSkge1xuICAgICAgICAgICAgICAgIGxldCBtb3JwaFZlcnRpY2VEYXRhID0gcXVhZENtZC5idWZmZXJzLmdldENoaWxkKEJ1ZmZlckRhdGFUeXBlLlZFUlRJQ0UpO1xuXG5cbiAgICAgICAgICAgICAgICB0aGlzLnNlbmRBdHRyaWJ1dGVEYXRhKHByb2dyYW0sIFwiYV9jdXJyZW50RnJhbWVQb3NpdGlvblwiLCBtb3JwaFZlcnRpY2VEYXRhWzBdKTtcbiAgICAgICAgICAgICAgICB0aGlzLnNlbmRBdHRyaWJ1dGVEYXRhKHByb2dyYW0sIFwiYV9uZXh0RnJhbWVQb3NpdGlvblwiLCBtb3JwaFZlcnRpY2VEYXRhWzFdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBzZXRTaGFkZXJEZWZpbml0aW9uKHF1YWRDbWQ6UXVhZENvbW1hbmQsIG1hdGVyaWFsOk1hdGVyaWFsKXtcbiAgICAgICAgICAgIHN1cGVyLnNldFNoYWRlckRlZmluaXRpb24ocXVhZENtZCwgbWF0ZXJpYWwpO1xuXG4gICAgICAgICAgICB0aGlzLmFkZEF0dHJpYnV0ZVZhcmlhYmxlKFtcImFfY3VycmVudEZyYW1lUG9zaXRpb25cIiwgXCJhX25leHRGcmFtZVBvc2l0aW9uXCJdKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuIiwibW9kdWxlIHdke1xuICAgIGV4cG9ydCBjbGFzcyBNb3JwaE5vcm1hbFNoYWRlckxpYiBleHRlbmRzIFNoYWRlckxpYntcbiAgICAgICAgcHVibGljIHN0YXRpYyBjcmVhdGUoKSB7XG4gICAgICAgICAgICB2YXIgb2JqID0gbmV3IHRoaXMoKTtcblxuICAgICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyB0eXBlOnN0cmluZyA9IFwibW9ycGhOb3JtYWxcIjtcblxuICAgICAgICBwdWJsaWMgc2VuZFNoYWRlclZhcmlhYmxlcyhwcm9ncmFtOlByb2dyYW0sIHF1YWRDbWQ6UXVhZENvbW1hbmQsIG1hdGVyaWFsOk1hdGVyaWFsKXtcbiAgICAgICAgICAgIGlmKHF1YWRDbWQuYnVmZmVycy5oYXNDaGlsZChCdWZmZXJEYXRhVHlwZS5OT1JNQUwpKXtcbiAgICAgICAgICAgICAgICBsZXQgbW9ycGhOb3JtYWxEYXRhID0gcXVhZENtZC5idWZmZXJzLmdldENoaWxkKEJ1ZmZlckRhdGFUeXBlLk5PUk1BTCk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLnNlbmRBdHRyaWJ1dGVEYXRhKHByb2dyYW0sIFwiYV9jdXJyZW50RnJhbWVOb3JtYWxcIiwgbW9ycGhOb3JtYWxEYXRhWzBdKTtcbiAgICAgICAgICAgICAgICB0aGlzLnNlbmRBdHRyaWJ1dGVEYXRhKHByb2dyYW0sIFwiYV9uZXh0RnJhbWVOb3JtYWxcIiwgbW9ycGhOb3JtYWxEYXRhWzFdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBzZXRTaGFkZXJEZWZpbml0aW9uKHF1YWRDbWQ6UXVhZENvbW1hbmQsIG1hdGVyaWFsOk1hdGVyaWFsKXtcbiAgICAgICAgICAgIHN1cGVyLnNldFNoYWRlckRlZmluaXRpb24ocXVhZENtZCwgbWF0ZXJpYWwpO1xuXG4gICAgICAgICAgICB0aGlzLmFkZEF0dHJpYnV0ZVZhcmlhYmxlKFtcImFfY3VycmVudEZyYW1lTm9ybWFsXCIsIFwiYV9uZXh0RnJhbWVOb3JtYWxcIl0pO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4iLCJtb2R1bGUgd2R7XG4gICAgZXhwb3J0IGNsYXNzIFNreWJveFNoYWRlckxpYiBleHRlbmRzIFNoYWRlckxpYntcbiAgICAgICAgcHVibGljIHN0YXRpYyBjcmVhdGUoKSB7XG4gICAgICAgICAgICB2YXIgb2JqID0gbmV3IHRoaXMoKTtcblxuICAgICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyB0eXBlOnN0cmluZyA9IFwic2t5Ym94XCI7XG5cbiAgICAgICAgcHVibGljIHNlbmRTaGFkZXJWYXJpYWJsZXMocHJvZ3JhbTpQcm9ncmFtLCBxdWFkQ21kOlF1YWRDb21tYW5kLCBtYXRlcmlhbDpNYXRlcmlhbCl7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgc2V0U2hhZGVyRGVmaW5pdGlvbihxdWFkQ21kOlF1YWRDb21tYW5kLCBtYXRlcmlhbDpNYXRlcmlhbCl7XG4gICAgICAgICAgICBzdXBlci5zZXRTaGFkZXJEZWZpbml0aW9uKHF1YWRDbWQsIG1hdGVyaWFsKTtcblxuICAgICAgICAgICAgdGhpcy5hZGRVbmlmb3JtVmFyaWFibGUoW1widV9zYW1wbGVyQ3ViZTBcIl0pO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4iLCJtb2R1bGUgd2R7XG4gICAgZXhwb3J0IGFic3RyYWN0IGNsYXNzIEVudk1hcEZvckJhc2ljU2hhZGVyTGliIGV4dGVuZHMgU2hhZGVyTGlie1xuICAgICAgICBwdWJsaWMgc2VuZFNoYWRlclZhcmlhYmxlcyhwcm9ncmFtOlByb2dyYW0sIHF1YWRDbWQ6UXVhZENvbW1hbmQsIG1hdGVyaWFsOk1hdGVyaWFsKSB7XG4gICAgICAgICAgICB0aGlzLnNlbmRVbmlmb3JtRGF0YShwcm9ncmFtLCBcInVfbm9ybWFsTWF0cml4XCIsIHF1YWRDbWQubU1hdHJpeC5jb3B5KCkuaW52ZXJ0VG8zeDMoKS50cmFuc3Bvc2UoKSk7XG4gICAgICAgICAgICB0aGlzLnNlbmRVbmlmb3JtRGF0YShwcm9ncmFtLCBcInVfY2FtZXJhUG9zXCIsIERpcmVjdG9yLmdldEluc3RhbmNlKCkuc2NlbmUuY2FtZXJhLnRyYW5zZm9ybS5wb3NpdGlvbik7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgc2V0U2hhZGVyRGVmaW5pdGlvbihxdWFkQ21kOlF1YWRDb21tYW5kLCBtYXRlcmlhbDpNYXRlcmlhbCl7XG4gICAgICAgICAgICBzdXBlci5zZXRTaGFkZXJEZWZpbml0aW9uKHF1YWRDbWQsIG1hdGVyaWFsKTtcblxuICAgICAgICAgICAgdGhpcy5hZGRVbmlmb3JtVmFyaWFibGUoW1widV9zYW1wbGVyQ3ViZTBcIiwgXCJ1X2NhbWVyYVBvc1wiLCBcInVfbm9ybWFsTWF0cml4XCJdKTtcblxuICAgICAgICAgICAgdGhpcy52c1NvdXJjZUJvZHkgPSBTaGFkZXJTbmlwcGV0LnNldFBvc19tdnAgKyB0aGlzLmdldFZzQ2h1bmsoKS5ib2R5O1xuICAgICAgICB9XG5cbiAgICAgICAgcHJvdGVjdGVkIHNldEVudk1hcFNvdXJjZSgpe1xuICAgICAgICAgICAgdmFyIHZzID0gdGhpcy5nZXRWc0NodW5rKFwiZW52TWFwX2ZvckJhc2ljXCIpLFxuICAgICAgICAgICAgICAgIGZzID0gdGhpcy5nZXRGc0NodW5rKFwiZW52TWFwX2ZvckJhc2ljXCIpO1xuXG4gICAgICAgICAgICB0aGlzLnZzU291cmNlVG9wPSB2cy50b3A7XG4gICAgICAgICAgICB0aGlzLnZzU291cmNlRGVmaW5lPSB2cy5kZWZpbmU7XG4gICAgICAgICAgICB0aGlzLnZzU291cmNlVmFyRGVjbGFyZT0gdnMudmFyRGVjbGFyZTtcbiAgICAgICAgICAgIHRoaXMudnNTb3VyY2VGdW5jRGVjbGFyZT0gdnMuZnVuY0RlY2xhcmU7XG4gICAgICAgICAgICB0aGlzLnZzU291cmNlRnVuY0RlZmluZT0gdnMuZnVuY0RlZmluZTtcbiAgICAgICAgICAgIHRoaXMudnNTb3VyY2VCb2R5ICs9IHZzLmJvZHk7XG5cbiAgICAgICAgICAgIHRoaXMuc2V0RnNTb3VyY2UoZnMpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4iLCJtb2R1bGUgd2R7XG4gICAgZXhwb3J0IGNsYXNzIEJhc2ljRW52TWFwRm9yQmFzaWNTaGFkZXJMaWIgZXh0ZW5kcyBFbnZNYXBGb3JCYXNpY1NoYWRlckxpYntcbiAgICAgICAgcHVibGljIHN0YXRpYyBjcmVhdGUoKSB7XG4gICAgICAgICAgICB2YXIgb2JqID0gbmV3IHRoaXMoKTtcblxuICAgICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyB0eXBlOnN0cmluZyA9IFwiYmFzaWNfZW52TWFwX2ZvckJhc2ljXCI7XG4gICAgfVxufVxuXG5cbiIsIm1vZHVsZSB3ZHtcbiAgICBleHBvcnQgY2xhc3MgUmVmbGVjdGlvbkZvckJhc2ljU2hhZGVyTGliIGV4dGVuZHMgRW52TWFwRm9yQmFzaWNTaGFkZXJMaWJ7XG4gICAgICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlKCkge1xuICAgICAgICAgICAgdmFyIG9iaiA9IG5ldyB0aGlzKCk7XG5cbiAgICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgdHlwZTpzdHJpbmcgPSBcInJlZmxlY3Rpb25fZm9yQmFzaWNcIjtcblxuICAgICAgICBwdWJsaWMgc2V0U2hhZGVyRGVmaW5pdGlvbihxdWFkQ21kOlF1YWRDb21tYW5kLCBtYXRlcmlhbDpNYXRlcmlhbCl7XG4gICAgICAgICAgICBzdXBlci5zZXRTaGFkZXJEZWZpbml0aW9uKHF1YWRDbWQsIG1hdGVyaWFsKTtcblxuICAgICAgICAgICAgdGhpcy5zZXRFbnZNYXBTb3VyY2UoKTtcbiAgICAgICAgICAgIHRoaXMuc2V0RnNTb3VyY2UodGhpcy5nZXRGc0NodW5rKCksIFwiK1wiKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuXG4iLCJtb2R1bGUgd2R7XG4gICAgZXhwb3J0IGNsYXNzIFJlZnJhY3Rpb25Gb3JCYXNpY1NoYWRlckxpYiBleHRlbmRzIEVudk1hcEZvckJhc2ljU2hhZGVyTGlie1xuICAgICAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZSgpIHtcbiAgICAgICAgICAgIHZhciBvYmogPSBuZXcgdGhpcygpO1xuXG4gICAgICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHR5cGU6c3RyaW5nID0gXCJyZWZyYWN0aW9uX2ZvckJhc2ljXCI7XG5cbiAgICAgICAgcHVibGljIHNlbmRTaGFkZXJWYXJpYWJsZXMocHJvZ3JhbTpQcm9ncmFtLCBxdWFkQ21kOlF1YWRDb21tYW5kLCBtYXRlcmlhbDpNYXRlcmlhbCkge1xuICAgICAgICAgICAgc3VwZXIuc2VuZFNoYWRlclZhcmlhYmxlcyhwcm9ncmFtLCBxdWFkQ21kLCBtYXRlcmlhbCk7XG5cbiAgICAgICAgICAgIHRoaXMuc2VuZFVuaWZvcm1EYXRhKHByb2dyYW0sIFwidV9yZWZyYWN0aW9uUmF0aW9cIiwgbWF0ZXJpYWwucmVmcmFjdGlvblJhdGlvKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBzZXRTaGFkZXJEZWZpbml0aW9uKHF1YWRDbWQ6UXVhZENvbW1hbmQsIG1hdGVyaWFsOk1hdGVyaWFsKXtcbiAgICAgICAgICAgIHN1cGVyLnNldFNoYWRlckRlZmluaXRpb24ocXVhZENtZCwgbWF0ZXJpYWwpO1xuXG4gICAgICAgICAgICB0aGlzLmFkZFVuaWZvcm1WYXJpYWJsZShbXCJ1X3JlZnJhY3Rpb25SYXRpb1wiXSk7XG5cbiAgICAgICAgICAgIHRoaXMuc2V0RW52TWFwU291cmNlKCk7XG4gICAgICAgICAgICB0aGlzLnNldEZzU291cmNlKHRoaXMuZ2V0RnNDaHVuaygpLCBcIitcIik7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbiIsIm1vZHVsZSB3ZHtcbiAgICBleHBvcnQgY2xhc3MgRnJlc25lbEZvckJhc2ljU2hhZGVyTGliIGV4dGVuZHMgRW52TWFwRm9yQmFzaWNTaGFkZXJMaWJ7XG4gICAgICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlKCkge1xuICAgICAgICAgICAgdmFyIG9iaiA9IG5ldyB0aGlzKCk7XG5cbiAgICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgdHlwZTpzdHJpbmcgPSBcImZyZXNuZWxfZm9yQmFzaWNcIjtcblxuICAgICAgICBwdWJsaWMgc2VuZFNoYWRlclZhcmlhYmxlcyhwcm9ncmFtOlByb2dyYW0sIHF1YWRDbWQ6UXVhZENvbW1hbmQsIG1hdGVyaWFsOk1hdGVyaWFsKSB7XG4gICAgICAgICAgICBzdXBlci5zZW5kU2hhZGVyVmFyaWFibGVzKHByb2dyYW0sIHF1YWRDbWQsIG1hdGVyaWFsKTtcblxuICAgICAgICAgICAgdGhpcy5zZW5kVW5pZm9ybURhdGEocHJvZ3JhbSwgXCJ1X3JlZnJhY3Rpb25SYXRpb1wiLCBtYXRlcmlhbC5yZWZyYWN0aW9uUmF0aW8pO1xuXG5cbiAgICAgICAgICAgIHRoaXMuc2VuZFVuaWZvcm1EYXRhKHByb2dyYW0sIFwidV9yZWZsZWN0aXZpdHlcIiwgbWF0ZXJpYWwucmVmbGVjdGl2aXR5KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBzZXRTaGFkZXJEZWZpbml0aW9uKHF1YWRDbWQ6UXVhZENvbW1hbmQsIG1hdGVyaWFsOk1hdGVyaWFsKXtcbiAgICAgICAgICAgIHN1cGVyLnNldFNoYWRlckRlZmluaXRpb24ocXVhZENtZCwgbWF0ZXJpYWwpO1xuXG4gICAgICAgICAgICB0aGlzLmFkZFVuaWZvcm1WYXJpYWJsZShbXCJ1X3JlZnJhY3Rpb25SYXRpb1wiLCBcInVfcmVmbGVjdGl2aXR5XCJdKTtcblxuICAgICAgICAgICAgdGhpcy5zZXRFbnZNYXBTb3VyY2UoKTtcbiAgICAgICAgICAgIHRoaXMuc2V0RnNTb3VyY2UodGhpcy5nZXRGc0NodW5rKCksIFwiK1wiKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuIiwibW9kdWxlIHdke1xuICAgIGV4cG9ydCBhYnN0cmFjdCBjbGFzcyBFbnZNYXBGb3JMaWdodFNoYWRlckxpYiBleHRlbmRzIFNoYWRlckxpYntcbiAgICAgICAgcHVibGljIHNlbmRTaGFkZXJWYXJpYWJsZXMocHJvZ3JhbTpQcm9ncmFtLCBxdWFkQ21kOlF1YWRDb21tYW5kLCBtYXRlcmlhbDpNYXRlcmlhbCkge1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHNldFNoYWRlckRlZmluaXRpb24ocXVhZENtZDpRdWFkQ29tbWFuZCwgbWF0ZXJpYWw6TWF0ZXJpYWwpe1xuICAgICAgICAgICAgc3VwZXIuc2V0U2hhZGVyRGVmaW5pdGlvbihxdWFkQ21kLCBtYXRlcmlhbCk7XG5cbiAgICAgICAgICAgIHRoaXMuYWRkVW5pZm9ybVZhcmlhYmxlKFtcInVfc2FtcGxlckN1YmUwXCJdKTtcblxuICAgICAgICAgICAgdGhpcy52c1NvdXJjZUJvZHkgPSBTaGFkZXJTbmlwcGV0LnNldFBvc19tdnAgKyB0aGlzLmdldFZzQ2h1bmsoKS5ib2R5O1xuICAgICAgICB9XG5cbiAgICAgICAgcHJvdGVjdGVkIHNldEVudk1hcFNvdXJjZSgpe1xuICAgICAgICAgICAgdmFyIHZzID0gdGhpcy5nZXRWc0NodW5rKFwiZW52TWFwX2ZvckxpZ2h0XCIpLFxuICAgICAgICAgICAgICAgIGZzID0gdGhpcy5nZXRGc0NodW5rKFwiZW52TWFwX2ZvckxpZ2h0XCIpO1xuXG4gICAgICAgICAgICB0aGlzLnZzU291cmNlVG9wPSB2cy50b3A7XG4gICAgICAgICAgICB0aGlzLnZzU291cmNlRGVmaW5lPSB2cy5kZWZpbmU7XG4gICAgICAgICAgICB0aGlzLnZzU291cmNlVmFyRGVjbGFyZT0gdnMudmFyRGVjbGFyZTtcbiAgICAgICAgICAgIHRoaXMudnNTb3VyY2VGdW5jRGVjbGFyZT0gdnMuZnVuY0RlY2xhcmU7XG4gICAgICAgICAgICB0aGlzLnZzU291cmNlRnVuY0RlZmluZT0gdnMuZnVuY0RlZmluZTtcbiAgICAgICAgICAgIHRoaXMudnNTb3VyY2VCb2R5ICs9IHZzLmJvZHk7XG5cbiAgICAgICAgICAgIHRoaXMuc2V0RnNTb3VyY2UoZnMpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4iLCJtb2R1bGUgd2R7XG4gICAgZXhwb3J0IGNsYXNzIEJhc2ljRW52TWFwRm9yTGlnaHRTaGFkZXJMaWIgZXh0ZW5kcyBFbnZNYXBGb3JMaWdodFNoYWRlckxpYntcbiAgICAgICAgcHVibGljIHN0YXRpYyBjcmVhdGUoKSB7XG4gICAgICAgICAgICB2YXIgb2JqID0gbmV3IHRoaXMoKTtcblxuICAgICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyB0eXBlOnN0cmluZyA9IFwiYmFzaWNfZm9yTGlnaHRfZW52TWFwXCI7XG4gICAgfVxufVxuXG5cbiIsIm1vZHVsZSB3ZHtcbiAgICBleHBvcnQgY2xhc3MgUmVmbGVjdGlvbkZvckxpZ2h0U2hhZGVyTGliIGV4dGVuZHMgRW52TWFwRm9yTGlnaHRTaGFkZXJMaWJ7XG4gICAgICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlKCkge1xuICAgICAgICAgICAgdmFyIG9iaiA9IG5ldyB0aGlzKCk7XG5cbiAgICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgdHlwZTpzdHJpbmcgPSBcInJlZmxlY3Rpb25fZm9yTGlnaHRcIjtcblxuICAgICAgICBwdWJsaWMgc2V0U2hhZGVyRGVmaW5pdGlvbihxdWFkQ21kOlF1YWRDb21tYW5kLCBtYXRlcmlhbDpNYXRlcmlhbCl7XG4gICAgICAgICAgICBzdXBlci5zZXRTaGFkZXJEZWZpbml0aW9uKHF1YWRDbWQsIG1hdGVyaWFsKTtcblxuICAgICAgICAgICAgdGhpcy5zZXRFbnZNYXBTb3VyY2UoKTtcbiAgICAgICAgICAgIHRoaXMuc2V0RnNTb3VyY2UodGhpcy5nZXRGc0NodW5rKCksIFwiK1wiKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuXG4iLCJtb2R1bGUgd2R7XG4gICAgZXhwb3J0IGNsYXNzIFJlZnJhY3Rpb25Gb3JMaWdodFNoYWRlckxpYiBleHRlbmRzIEVudk1hcEZvckxpZ2h0U2hhZGVyTGlie1xuICAgICAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZSgpIHtcbiAgICAgICAgICAgIHZhciBvYmogPSBuZXcgdGhpcygpO1xuXG4gICAgICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHR5cGU6c3RyaW5nID0gXCJyZWZyYWN0aW9uX2ZvckxpZ2h0XCI7XG5cbiAgICAgICAgcHVibGljIHNlbmRTaGFkZXJWYXJpYWJsZXMocHJvZ3JhbTpQcm9ncmFtLCBxdWFkQ21kOlF1YWRDb21tYW5kLCBtYXRlcmlhbDpNYXRlcmlhbCkge1xuICAgICAgICAgICAgc3VwZXIuc2VuZFNoYWRlclZhcmlhYmxlcyhwcm9ncmFtLCBxdWFkQ21kLCBtYXRlcmlhbCk7XG5cbiAgICAgICAgICAgIHRoaXMuc2VuZFVuaWZvcm1EYXRhKHByb2dyYW0sIFwidV9yZWZyYWN0aW9uUmF0aW9cIiwgbWF0ZXJpYWwucmVmcmFjdGlvblJhdGlvKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBzZXRTaGFkZXJEZWZpbml0aW9uKHF1YWRDbWQ6UXVhZENvbW1hbmQsIG1hdGVyaWFsOk1hdGVyaWFsKXtcbiAgICAgICAgICAgIHN1cGVyLnNldFNoYWRlckRlZmluaXRpb24ocXVhZENtZCwgbWF0ZXJpYWwpO1xuXG4gICAgICAgICAgICB0aGlzLmFkZFVuaWZvcm1WYXJpYWJsZShbXCJ1X3JlZnJhY3Rpb25SYXRpb1wiXSk7XG5cbiAgICAgICAgICAgIHRoaXMuc2V0RW52TWFwU291cmNlKCk7XG4gICAgICAgICAgICB0aGlzLnNldEZzU291cmNlKHRoaXMuZ2V0RnNDaHVuaygpLCBcIitcIik7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbiIsIm1vZHVsZSB3ZHtcbiAgICBleHBvcnQgY2xhc3MgRnJlc25lbEZvckxpZ2h0U2hhZGVyTGliIGV4dGVuZHMgRW52TWFwRm9yTGlnaHRTaGFkZXJMaWJ7XG4gICAgICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlKCkge1xuICAgICAgICAgICAgdmFyIG9iaiA9IG5ldyB0aGlzKCk7XG5cbiAgICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgdHlwZTpzdHJpbmcgPSBcImZyZXNuZWxfZm9yTGlnaHRcIjtcblxuICAgICAgICBwdWJsaWMgc2VuZFNoYWRlclZhcmlhYmxlcyhwcm9ncmFtOlByb2dyYW0sIHF1YWRDbWQ6UXVhZENvbW1hbmQsIG1hdGVyaWFsOk1hdGVyaWFsKSB7XG4gICAgICAgICAgICBzdXBlci5zZW5kU2hhZGVyVmFyaWFibGVzKHByb2dyYW0sIHF1YWRDbWQsIG1hdGVyaWFsKTtcbiAgICAgICAgICAgIGlmKG1hdGVyaWFsLnJlZmxlY3Rpdml0eSAhPT0gU2hhZGVyQ2h1bmsuTlVMTCl7XG4gICAgICAgICAgICAgICAgdGhpcy5zZW5kVW5pZm9ybURhdGEocHJvZ3JhbSwgXCJ1X3JlZmxlY3Rpdml0eVwiLCBtYXRlcmlhbC5yZWZsZWN0aXZpdHkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICB0aGlzLnNlbmRVbmlmb3JtRGF0YShwcm9ncmFtLCBcInVfcmVmbGVjdGl2aXR5XCIsIFNoYWRlckNodW5rLk5VTEwpO1xuICAgICAgICAgICAgICAgIHRoaXMuc2VuZFVuaWZvcm1EYXRhKHByb2dyYW0sIFwidV9yZWZyYWN0aW9uUmF0aW9cIiwgbWF0ZXJpYWwucmVmcmFjdGlvblJhdGlvKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBzZXRTaGFkZXJEZWZpbml0aW9uKHF1YWRDbWQ6UXVhZENvbW1hbmQsIG1hdGVyaWFsOk1hdGVyaWFsKXtcbiAgICAgICAgICAgIHN1cGVyLnNldFNoYWRlckRlZmluaXRpb24ocXVhZENtZCwgbWF0ZXJpYWwpO1xuXG4gICAgICAgICAgICB0aGlzLmFkZFVuaWZvcm1WYXJpYWJsZShbXCJ1X3JlZnJhY3Rpb25SYXRpb1wiLCBcInVfcmVmbGVjdGl2aXR5XCJdKTtcblxuICAgICAgICAgICAgdGhpcy5zZXRFbnZNYXBTb3VyY2UoKTtcbiAgICAgICAgICAgIHRoaXMuc2V0RnNTb3VyY2UodGhpcy5nZXRGc0NodW5rKCksIFwiK1wiKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuIiwibW9kdWxlIHdke1xuICAgIGV4cG9ydCBhYnN0cmFjdCBjbGFzcyBNYXBTaGFkZXJMaWIgZXh0ZW5kcyBTaGFkZXJMaWJ7XG4gICAgICAgIHB1YmxpYyBzZW5kU2hhZGVyVmFyaWFibGVzKHByb2dyYW06UHJvZ3JhbSwgcXVhZENtZDpRdWFkQ29tbWFuZCwgbWF0ZXJpYWw6TWF0ZXJpYWwpIHtcbiAgICAgICAgICAgIGlmIChxdWFkQ21kLmJ1ZmZlcnMuaGFzQ2hpbGQoQnVmZmVyRGF0YVR5cGUuVEVYQ09PUkQpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZW5kQXR0cmlidXRlRGF0YShwcm9ncmFtLCBcImFfdGV4Q29vcmRcIiwgPEFycmF5QnVmZmVyPnF1YWRDbWQuYnVmZmVycy5nZXRDaGlsZChCdWZmZXJEYXRhVHlwZS5URVhDT09SRCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHNldFNoYWRlckRlZmluaXRpb24ocXVhZENtZDpRdWFkQ29tbWFuZCwgbWF0ZXJpYWw6TWF0ZXJpYWwpe1xuICAgICAgICAgICAgc3VwZXIuc2V0U2hhZGVyRGVmaW5pdGlvbihxdWFkQ21kLCBtYXRlcmlhbCk7XG5cbiAgICAgICAgICAgIHRoaXMuYWRkQXR0cmlidXRlVmFyaWFibGUoW1wiYV90ZXhDb29yZFwiXSk7XG5cbiAgICAgICAgICAgIHRoaXMuYWRkVW5pZm9ybVZhcmlhYmxlKFtcInVfc2FtcGxlcjJEMFwiLCBcInVfc291cmNlUmVnaW9uXCIsIFwidV9yZXBlYXRSZWdpb25cIl0pO1xuXG4gICAgICAgICAgICB0aGlzLl9zZXRNYXBTb3VyY2UoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX3NldE1hcFNvdXJjZSgpe1xuICAgICAgICAgICAgdmFyIHZzID0gdGhpcy5nZXRWc0NodW5rKFwibWFwX2ZvckJhc2ljXCIpLFxuICAgICAgICAgICAgICAgIGZzID0gdGhpcy5nZXRGc0NodW5rKFwibWFwX2ZvckJhc2ljXCIpO1xuXG4gICAgICAgICAgICB0aGlzLnZzU291cmNlVG9wPSB2cy50b3A7XG4gICAgICAgICAgICB0aGlzLnZzU291cmNlRGVmaW5lPSB2cy5kZWZpbmU7XG4gICAgICAgICAgICB0aGlzLnZzU291cmNlVmFyRGVjbGFyZT0gdnMudmFyRGVjbGFyZTtcbiAgICAgICAgICAgIHRoaXMudnNTb3VyY2VGdW5jRGVjbGFyZT0gdnMuZnVuY0RlY2xhcmU7XG4gICAgICAgICAgICB0aGlzLnZzU291cmNlRnVuY0RlZmluZT0gdnMuZnVuY0RlZmluZTtcbiAgICAgICAgICAgIHRoaXMudnNTb3VyY2VCb2R5ID0gdnMuYm9keTtcblxuICAgICAgICAgICAgdGhpcy5zZXRGc1NvdXJjZShmcyk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbiIsIm1vZHVsZSB3ZHtcbiAgICBleHBvcnQgY2xhc3MgQmFzaWNNYXBTaGFkZXJMaWIgZXh0ZW5kcyBNYXBTaGFkZXJMaWJ7XG4gICAgICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlKCkge1xuICAgICAgICAgICAgdmFyIG9iaiA9IG5ldyB0aGlzKCk7XG5cbiAgICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgIH1cblxuXG4gICAgICAgIHB1YmxpYyB0eXBlOnN0cmluZyA9IFwibWFwX2ZvckJhc2ljXCI7XG4gICAgfVxufVxuXG4iLCJtb2R1bGUgd2R7XG4gICAgLy90b2RvIHN1cHBvcnQgbW9yZSB0aGFuIDIgbWFwc1xuICAgIGV4cG9ydCBjbGFzcyBNdWx0aU1hcFNoYWRlckxpYiBleHRlbmRzIE1hcFNoYWRlckxpYntcbiAgICAgICAgcHVibGljIHN0YXRpYyBjcmVhdGUoKSB7XG4gICAgICAgICAgICB2YXIgb2JqID0gbmV3IHRoaXMoKTtcblxuICAgICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgcHVibGljIHR5cGU6c3RyaW5nID0gXCJtdWx0aV9tYXBfZm9yQmFzaWNcIjtcblxuICAgICAgICBwdWJsaWMgc2VuZFNoYWRlclZhcmlhYmxlcyhwcm9ncmFtOlByb2dyYW0sIHF1YWRDbWQ6UXVhZENvbW1hbmQsIG1hdGVyaWFsOk1hdGVyaWFsKSB7XG4gICAgICAgICAgICBzdXBlci5zZW5kU2hhZGVyVmFyaWFibGVzKHByb2dyYW0sIHF1YWRDbWQsIG1hdGVyaWFsKTtcblxuICAgICAgICAgICAgdGhpcy5zZW5kVW5pZm9ybURhdGEocHJvZ3JhbSwgXCJ1X2NvbWJpbmVNb2RlXCIsIG1hdGVyaWFsLm1hcENvbWJpbmVNb2RlKTtcbiAgICAgICAgICAgIHRoaXMuc2VuZFVuaWZvcm1EYXRhKHByb2dyYW0sIFwidV9taXhSYXRpb1wiLCBtYXRlcmlhbC5tYXBNaXhSYXRpbyk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgc2V0U2hhZGVyRGVmaW5pdGlvbihxdWFkQ21kOlF1YWRDb21tYW5kLCBtYXRlcmlhbDpNYXRlcmlhbCl7XG4gICAgICAgICAgICBzdXBlci5zZXRTaGFkZXJEZWZpbml0aW9uKHF1YWRDbWQsIG1hdGVyaWFsKTtcblxuICAgICAgICAgICAgdGhpcy5hZGRVbmlmb3JtVmFyaWFibGUoW1widV9zYW1wbGVyMkQxXCIsIFwidV9jb21iaW5lTW9kZVwiLCBcInVfbWl4UmF0aW9cIl0pO1xuXG4gICAgICAgICAgICB0aGlzLmZzU291cmNlRnVuY0RlZmluZSA9IHRoaXMuZ2V0RnNDaHVuaygpLmZ1bmNEZWZpbmU7XG4gICAgICAgICAgICB0aGlzLmZzU291cmNlQm9keSA9IHRoaXMuZ2V0RnNDaHVuaygpLmJvZHk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbiIsIm1vZHVsZSB3ZHtcbiAgICBleHBvcnQgY2xhc3MgTWlycm9yRm9yQmFzaWNTaGFkZXJMaWIgZXh0ZW5kcyBTaGFkZXJMaWJ7XG4gICAgICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlKCkge1xuICAgICAgICAgICAgdmFyIG9iaiA9IG5ldyB0aGlzKCk7XG5cbiAgICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgIH1cblxuXG4gICAgICAgIHB1YmxpYyB0eXBlOnN0cmluZyA9IFwibWlycm9yX2ZvckJhc2ljXCI7XG5cbiAgICAgICAgcHVibGljIHNlbmRTaGFkZXJWYXJpYWJsZXMocHJvZ3JhbTpQcm9ncmFtLCBxdWFkQ21kOlF1YWRDb21tYW5kLCBtYXRlcmlhbDpNYXRlcmlhbCl7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgc2V0U2hhZGVyRGVmaW5pdGlvbihxdWFkQ21kOlF1YWRDb21tYW5kLCBtYXRlcmlhbDpNYXRlcmlhbCl7XG4gICAgICAgICAgICBzdXBlci5zZXRTaGFkZXJEZWZpbml0aW9uKHF1YWRDbWQsIG1hdGVyaWFsKTtcblxuICAgICAgICAgICAgdGhpcy5hZGRVbmlmb3JtVmFyaWFibGUoW1widV9taXJyb3JTYW1wbGVyXCJdKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuIiwibW9kdWxlIHdke1xuICAgIGV4cG9ydCBjbGFzcyBMaWdodENvbW1vblNoYWRlckxpYiBleHRlbmRzIFNoYWRlckxpYntcbiAgICAgICAgcHVibGljIHN0YXRpYyBjcmVhdGUoKSB7XG4gICAgICAgICAgICB2YXIgb2JqID0gbmV3IHRoaXMoKTtcblxuICAgICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgcHVibGljIHR5cGU6c3RyaW5nID0gXCJsaWdodENvbW1vblwiO1xuXG4gICAgICAgIHB1YmxpYyBzZW5kU2hhZGVyVmFyaWFibGVzKHByb2dyYW06IFByb2dyYW0sIHF1YWRDbWQ6UXVhZENvbW1hbmQsIG1hdGVyaWFsOkxpZ2h0TWF0ZXJpYWwpe1xuXG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgc2V0U2hhZGVyRGVmaW5pdGlvbihxdWFkQ21kOlF1YWRDb21tYW5kLCBtYXRlcmlhbDpNYXRlcmlhbCl7XG4gICAgICAgICAgICBzdXBlci5zZXRTaGFkZXJEZWZpbml0aW9uKHF1YWRDbWQsIG1hdGVyaWFsKTtcblxuICAgICAgICAgICAgdGhpcy5zZXRWc1NvdXJjZSh0aGlzLmdldFZzQ2h1bmsoXCJsaWdodF9jb21tb24uZ2xzbFwiKSk7XG4gICAgICAgICAgICB0aGlzLnNldFZzU291cmNlKHRoaXMuZ2V0VnNDaHVuaygpLCBcIitcIik7XG5cbiAgICAgICAgICAgIHRoaXMuc2V0RnNTb3VyY2UodGhpcy5nZXRGc0NodW5rKFwibGlnaHRfY29tbW9uLmdsc2xcIikpO1xuICAgICAgICAgICAgdGhpcy5zZXRGc1NvdXJjZSh0aGlzLmdldEZzQ2h1bmsoKSwgXCIrXCIpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4iLCJtb2R1bGUgd2R7XG4gICAgZXhwb3J0IGNsYXNzIExpZ2h0U2hhZGVyTGliIGV4dGVuZHMgU2hhZGVyTGlie1xuICAgICAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZSgpIHtcbiAgICAgICAgICAgIHZhciBvYmogPSBuZXcgdGhpcygpO1xuXG4gICAgICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHR5cGU6c3RyaW5nID0gXCJsaWdodFwiO1xuXG4gICAgICAgIHB1YmxpYyBzZW5kU2hhZGVyVmFyaWFibGVzKHByb2dyYW06IFByb2dyYW0sIHF1YWRDbWQ6UXVhZENvbW1hbmQsIG1hdGVyaWFsOkxpZ2h0TWF0ZXJpYWwpe1xuICAgICAgICAgICAgdGhpcy5zZW5kVW5pZm9ybURhdGEocHJvZ3JhbSwgXCJ1X25vcm1hbE1hdHJpeFwiLCBxdWFkQ21kLm1NYXRyaXguY29weSgpLmludmVydFRvM3gzKCkudHJhbnNwb3NlKCkpO1xuICAgICAgICAgICAgdGhpcy5zZW5kVW5pZm9ybURhdGEocHJvZ3JhbSwgXCJ1X2NhbWVyYVBvc1wiLCBEaXJlY3Rvci5nZXRJbnN0YW5jZSgpLnNjZW5lLmNhbWVyYS50cmFuc2Zvcm0ucG9zaXRpb24pO1xuXG5cbiAgICAgICAgICAgIHRoaXMuc2VuZFVuaWZvcm1EYXRhKHByb2dyYW0sIFwidV9zaGluaW5lc3NcIiwgbWF0ZXJpYWwuc2hpbmluZXNzKTtcbiAgICAgICAgICAgIHRoaXMuc2VuZFVuaWZvcm1EYXRhKHByb2dyYW0sIFwidV9vcGFjaXR5XCIsIG1hdGVyaWFsLm9wYWNpdHkpO1xuXG4gICAgICAgICAgICB0aGlzLl9zZW5kTGlnaHRWYXJpYWJsZXMocHJvZ3JhbSk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgc2V0U2hhZGVyRGVmaW5pdGlvbihxdWFkQ21kOlF1YWRDb21tYW5kLCBtYXRlcmlhbDpNYXRlcmlhbCl7XG4gICAgICAgICAgICBzdXBlci5zZXRTaGFkZXJEZWZpbml0aW9uKHF1YWRDbWQsIG1hdGVyaWFsKTtcblxuICAgICAgICAgICAgdGhpcy5hZGRVbmlmb3JtVmFyaWFibGUoW1widV9ub3JtYWxNYXRyaXhcIiwgXCJ1X2NhbWVyYVBvc1wiLCBcInVfc2hpbmluZXNzXCIsIFwidV9hbWJpZW50XCIsIFwidV9vcGFjaXR5XCIsIFwidV9pc0JvdGhTaWRlXCJdKTtcblxuICAgICAgICAgICAgdGhpcy5fc2V0TGlnaHREZWZpbml0aW9uKG1hdGVyaWFsKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX3NlbmRMaWdodFZhcmlhYmxlcyhwcm9ncmFtOlByb2dyYW0pe1xuICAgICAgICAgICAgdmFyIHNjZW5lOlNjZW5lRGlzcGF0Y2hlciA9IHdkLkRpcmVjdG9yLmdldEluc3RhbmNlKCkuc2NlbmUsXG4gICAgICAgICAgICAgICAgZGlyZWN0aW9uTGlnaHRzOndkQ2IuQ29sbGVjdGlvbjxHYW1lT2JqZWN0PiA9IHNjZW5lLmRpcmVjdGlvbkxpZ2h0cyxcbiAgICAgICAgICAgICAgICBhbWJpZW50TGlnaHQ6R2FtZU9iamVjdCA9c2NlbmUuYW1iaWVudExpZ2h0LFxuICAgICAgICAgICAgICAgIHBvaW50TGlnaHRzOndkQ2IuQ29sbGVjdGlvbjxHYW1lT2JqZWN0PiA9IHNjZW5lLnBvaW50TGlnaHRzO1xuXG4gICAgICAgICAgICBpZihhbWJpZW50TGlnaHQpe1xuICAgICAgICAgICAgICAgIHRoaXMuc2VuZFVuaWZvcm1EYXRhKHByb2dyYW0sIFwidV9hbWJpZW50XCIsIGFtYmllbnRMaWdodC5nZXRDb21wb25lbnQ8QW1iaWVudExpZ2h0PihBbWJpZW50TGlnaHQpLmNvbG9yLnRvVmVjdG9yMygpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYocG9pbnRMaWdodHMpe1xuICAgICAgICAgICAgICAgIHRoaXMuX3NlbmRQb2ludExpZ2h0VmFyaWFibGVzKHByb2dyYW0sIHBvaW50TGlnaHRzKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYoZGlyZWN0aW9uTGlnaHRzKXtcbiAgICAgICAgICAgICAgICB0aGlzLl9zZW5kRGlyZWN0aW9uTGlnaHRWYXJpYWJsZXMocHJvZ3JhbSwgZGlyZWN0aW9uTGlnaHRzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX3NlbmRQb2ludExpZ2h0VmFyaWFibGVzKHByb2dyYW06IFByb2dyYW0sIHBvaW50TGlnaHRzOndkQ2IuQ29sbGVjdGlvbjxHYW1lT2JqZWN0PiApe1xuICAgICAgICAgICAgcG9pbnRMaWdodHMuZm9yRWFjaCgocG9pbnRMaWdodDpHYW1lT2JqZWN0LCBpbmRleDpudW1iZXIpID0+IHtcbiAgICAgICAgICAgICAgICB2YXIgbGlnaHRDb21wb25lbnQ6UG9pbnRMaWdodCA9IHBvaW50TGlnaHQuZ2V0Q29tcG9uZW50PFBvaW50TGlnaHQ+KFBvaW50TGlnaHQpO1xuXG4gICAgICAgICAgICAgICAgcHJvZ3JhbS5zZW5kU3RydWN0dXJlRGF0YShgdV9wb2ludExpZ2h0c1ske2luZGV4fV0ucG9zaXRpb25gLCBWYXJpYWJsZVR5cGUuRkxPQVRfMywgbGlnaHRDb21wb25lbnQucG9zaXRpb24pO1xuICAgICAgICAgICAgICAgIHByb2dyYW0uc2VuZFN0cnVjdHVyZURhdGEoYHVfcG9pbnRMaWdodHNbJHtpbmRleH1dLmNvbG9yYCwgVmFyaWFibGVUeXBlLkZMT0FUXzMsIGxpZ2h0Q29tcG9uZW50LmNvbG9yLnRvVmVjdG9yMygpKTtcblxuICAgICAgICAgICAgICAgIHByb2dyYW0uc2VuZFN0cnVjdHVyZURhdGEoYHVfcG9pbnRMaWdodHNbJHtpbmRleH1dLmludGVuc2l0eWAsIFZhcmlhYmxlVHlwZS5GTE9BVF8xLCBsaWdodENvbXBvbmVudC5pbnRlbnNpdHkpO1xuICAgICAgICAgICAgICAgIHByb2dyYW0uc2VuZFN0cnVjdHVyZURhdGEoYHVfcG9pbnRMaWdodHNbJHtpbmRleH1dLnJhbmdlYCwgVmFyaWFibGVUeXBlLkZMT0FUXzEsIGxpZ2h0Q29tcG9uZW50LnJhbmdlKTtcbiAgICAgICAgICAgICAgICBwcm9ncmFtLnNlbmRTdHJ1Y3R1cmVEYXRhKGB1X3BvaW50TGlnaHRzWyR7aW5kZXh9XS5jb25zdGFudGAsIFZhcmlhYmxlVHlwZS5GTE9BVF8xLCBsaWdodENvbXBvbmVudC5jb25zdGFudCk7XG4gICAgICAgICAgICAgICAgcHJvZ3JhbS5zZW5kU3RydWN0dXJlRGF0YShgdV9wb2ludExpZ2h0c1ske2luZGV4fV0ubGluZWFyYCwgVmFyaWFibGVUeXBlLkZMT0FUXzEsIGxpZ2h0Q29tcG9uZW50LmxpbmVhcik7XG4gICAgICAgICAgICAgICAgcHJvZ3JhbS5zZW5kU3RydWN0dXJlRGF0YShgdV9wb2ludExpZ2h0c1ske2luZGV4fV0ucXVhZHJhdGljYCwgVmFyaWFibGVUeXBlLkZMT0FUXzEsIGxpZ2h0Q29tcG9uZW50LnF1YWRyYXRpYyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX3NlbmREaXJlY3Rpb25MaWdodFZhcmlhYmxlcyhwcm9ncmFtOiBQcm9ncmFtLCBkaXJlY3Rpb25MaWdodHM6d2RDYi5Db2xsZWN0aW9uPEdhbWVPYmplY3Q+ICl7XG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICAgICAgICAgIGRpcmVjdGlvbkxpZ2h0cy5mb3JFYWNoKChkaXJlY3Rpb25MaWdodDpHYW1lT2JqZWN0LCBpbmRleDpudW1iZXIpID0+IHtcbiAgICAgICAgICAgICAgICB2YXIgbGlnaHRDb21wb25lbnQ6RGlyZWN0aW9uTGlnaHQgPSBkaXJlY3Rpb25MaWdodC5nZXRDb21wb25lbnQ8RGlyZWN0aW9uTGlnaHQ+KERpcmVjdGlvbkxpZ2h0KTtcblxuICAgICAgICAgICAgICAgIGlmKHNlbGYuX2lzWmVybyhsaWdodENvbXBvbmVudC5wb3NpdGlvbikpe1xuICAgICAgICAgICAgICAgICAgICBwcm9ncmFtLnNlbmRTdHJ1Y3R1cmVEYXRhKGB1X2RpcmVjdGlvbkxpZ2h0c1ske2luZGV4fV0ucG9zaXRpb25gLCBWYXJpYWJsZVR5cGUuRkxPQVRfMywgRGlyZWN0aW9uTGlnaHQuZGVmYXVsdFBvc2l0aW9uKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgcHJvZ3JhbS5zZW5kU3RydWN0dXJlRGF0YShgdV9kaXJlY3Rpb25MaWdodHNbJHtpbmRleH1dLnBvc2l0aW9uYCwgVmFyaWFibGVUeXBlLkZMT0FUXzMsIGxpZ2h0Q29tcG9uZW50LnBvc2l0aW9uKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBwcm9ncmFtLnNlbmRTdHJ1Y3R1cmVEYXRhKGB1X2RpcmVjdGlvbkxpZ2h0c1ske2luZGV4fV0uY29sb3JgLCBWYXJpYWJsZVR5cGUuRkxPQVRfMywgbGlnaHRDb21wb25lbnQuY29sb3IudG9WZWN0b3IzKCkpO1xuXG4gICAgICAgICAgICAgICAgcHJvZ3JhbS5zZW5kU3RydWN0dXJlRGF0YShgdV9kaXJlY3Rpb25MaWdodHNbJHtpbmRleH1dLmludGVuc2l0eWAsIFZhcmlhYmxlVHlwZS5GTE9BVF8xLCBsaWdodENvbXBvbmVudC5pbnRlbnNpdHkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9pc1plcm8ocG9zaXRpb246VmVjdG9yMyl7XG4gICAgICAgICAgICB2YXIgdmFsID0gcG9zaXRpb24udmFsdWVzO1xuXG4gICAgICAgICAgICByZXR1cm4gdmFsWzBdID09PSAwICYmIHZhbFsxXSA9PT0gMCAmJiB2YWxbMl0gPT09IDA7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9zZXRMaWdodERlZmluaXRpb24obWF0ZXJpYWw6TWF0ZXJpYWwpe1xuICAgICAgICAgICAgdmFyIHNjZW5lOlNjZW5lRGlzcGF0Y2hlciA9IHdkLkRpcmVjdG9yLmdldEluc3RhbmNlKCkuc2NlbmUsXG4gICAgICAgICAgICAgICAgZGlyZWN0aW9uTGlnaHRzOndkQ2IuQ29sbGVjdGlvbjxHYW1lT2JqZWN0PiA9IHNjZW5lLmRpcmVjdGlvbkxpZ2h0cyxcbiAgICAgICAgICAgICAgICBwb2ludExpZ2h0czp3ZENiLkNvbGxlY3Rpb248R2FtZU9iamVjdD4gPSBzY2VuZS5wb2ludExpZ2h0cyxcbiAgICAgICAgICAgICAgICBkaXJlY3Rpb25fbGlnaHRzX2NvdW50ID0gMCxcbiAgICAgICAgICAgICAgICBwb2ludF9saWdodHNfY291bnQgPSAwO1xuXG4gICAgICAgICAgICBpZihkaXJlY3Rpb25MaWdodHMpe1xuICAgICAgICAgICAgICAgIHRoaXMuYWRkVW5pZm9ybVZhcmlhYmxlKFtcInVfZGlyZWN0aW9uTGlnaHRzXCJdKTtcblxuICAgICAgICAgICAgICAgIGRpcmVjdGlvbl9saWdodHNfY291bnQgPSBkaXJlY3Rpb25MaWdodHMuZ2V0Q291bnQoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYocG9pbnRMaWdodHMpe1xuICAgICAgICAgICAgICAgIHRoaXMuYWRkVW5pZm9ybVZhcmlhYmxlKFtcInVfcG9pbnRMaWdodHNcIl0pO1xuXG4gICAgICAgICAgICAgICAgcG9pbnRfbGlnaHRzX2NvdW50ID0gcG9pbnRMaWdodHMuZ2V0Q291bnQoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5fYWRkRGVmaW5lKHRoaXMudnNTb3VyY2VEZWZpbmVMaXN0LCBkaXJlY3Rpb25fbGlnaHRzX2NvdW50LCBwb2ludF9saWdodHNfY291bnQpO1xuICAgICAgICAgICAgdGhpcy5fYWRkRGVmaW5lKHRoaXMuZnNTb3VyY2VEZWZpbmVMaXN0LCBkaXJlY3Rpb25fbGlnaHRzX2NvdW50LCBwb2ludF9saWdodHNfY291bnQpO1xuXG4gICAgICAgICAgICAvL3RvZG8gaWYgXCJib3RoIHNpZGVcIiBsb2dpYyBiZWNvbWUgY29tcGxleCBvciBiZSB1c2VkIGluIG1hbnkgcGxhY2VzLCB0aGVuIGl0IHNob3VsZCBleHRyYWN0IEJvdGhTaWRlU2hhZGVyTGliIGFuZCBOb0JvdGhTaWRlU2hhZGVyTGliXG4gICAgICAgICAgICBpZihtYXRlcmlhbC5zaWRlID09PSBTaWRlLkJPVEgpe1xuICAgICAgICAgICAgICAgIHRoaXMuZnNTb3VyY2VEZWZpbmVMaXN0LmFkZENoaWxkcmVuKFt7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiQk9USF9TSURFXCJcbiAgICAgICAgICAgICAgICB9XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9hZGREZWZpbmUobGlzdCwgZGlyZWN0aW9uX2xpZ2h0c19jb3VudCwgcG9pbnRfbGlnaHRzX2NvdW50KXtcbiAgICAgICAgICAgIGxpc3QuYWRkQ2hpbGRyZW4oW3tcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkRJUkVDVElPTl9MSUdIVFNfQ09VTlRcIixcbiAgICAgICAgICAgICAgICB2YWx1ZTogZGlyZWN0aW9uX2xpZ2h0c19jb3VudFxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiUE9JTlRfTElHSFRTX0NPVU5UXCIsXG4gICAgICAgICAgICAgICAgdmFsdWU6IHBvaW50X2xpZ2h0c19jb3VudFxuICAgICAgICAgICAgfV0pO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4iLCJtb2R1bGUgd2R7XG4gICAgZXhwb3J0IGNsYXNzIExpZ2h0RW5kU2hhZGVyTGliIGV4dGVuZHMgU2hhZGVyTGlie1xuICAgICAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZSgpIHtcbiAgICAgICAgICAgIHZhciBvYmogPSBuZXcgdGhpcygpO1xuXG4gICAgICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHR5cGU6c3RyaW5nID0gXCJsaWdodEVuZFwiO1xuXG4gICAgICAgIHB1YmxpYyBzZW5kU2hhZGVyVmFyaWFibGVzKHByb2dyYW06IFByb2dyYW0sIHF1YWRDbWQ6UXVhZENvbW1hbmQsIG1hdGVyaWFsOkxpZ2h0TWF0ZXJpYWwpe1xuICAgICAgICB9XG4gICAgfVxufVxuXG4iLCJtb2R1bGUgd2R7XG4gICAgZXhwb3J0IGFic3RyYWN0IGNsYXNzIExpZ2h0TWFwU2hhZGVyTGliIGV4dGVuZHMgU2hhZGVyTGlie1xuICAgICAgICBwdWJsaWMgc2VuZFNoYWRlclZhcmlhYmxlcyhwcm9ncmFtOiBQcm9ncmFtLCBxdWFkQ21kOlF1YWRDb21tYW5kLCBtYXRlcmlhbDpMaWdodE1hdGVyaWFsKXtcbiAgICAgICAgICAgIGlmIChxdWFkQ21kLmJ1ZmZlcnMuaGFzQ2hpbGQoQnVmZmVyRGF0YVR5cGUuVEVYQ09PUkQpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZW5kQXR0cmlidXRlRGF0YShwcm9ncmFtLCBcImFfdGV4Q29vcmRcIiwgPEFycmF5QnVmZmVyPnF1YWRDbWQuYnVmZmVycy5nZXRDaGlsZChCdWZmZXJEYXRhVHlwZS5URVhDT09SRCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHNldFNoYWRlckRlZmluaXRpb24ocXVhZENtZDpRdWFkQ29tbWFuZCwgbWF0ZXJpYWw6TWF0ZXJpYWwpe1xuICAgICAgICAgICAgc3VwZXIuc2V0U2hhZGVyRGVmaW5pdGlvbihxdWFkQ21kLCBtYXRlcmlhbCk7XG5cbiAgICAgICAgICAgIHRoaXMuYWRkQXR0cmlidXRlVmFyaWFibGUoW1wiYV90ZXhDb29yZFwiXSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbiIsIm1vZHVsZSB3ZHtcbiAgICBleHBvcnQgY2xhc3MgRGlmZnVzZU1hcFNoYWRlckxpYiBleHRlbmRzIExpZ2h0TWFwU2hhZGVyTGlie1xuICAgICAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZSgpIHtcbiAgICAgICAgICAgIHZhciBvYmogPSBuZXcgdGhpcygpO1xuXG4gICAgICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHR5cGU6c3RyaW5nID0gXCJkaWZmdXNlTWFwXCI7XG5cbiAgICAgICAgcHVibGljIHNldFNoYWRlckRlZmluaXRpb24ocXVhZENtZDpRdWFkQ29tbWFuZCwgbWF0ZXJpYWw6TWF0ZXJpYWwpe1xuICAgICAgICAgICAgc3VwZXIuc2V0U2hhZGVyRGVmaW5pdGlvbihxdWFkQ21kLCBtYXRlcmlhbCk7XG5cbiAgICAgICAgICAgIHRoaXMuYWRkVW5pZm9ybVZhcmlhYmxlKFtcbiAgICAgICAgICAgICAgICBWYXJpYWJsZU5hbWVUYWJsZS5nZXRWYXJpYWJsZU5hbWUoXCJkaWZmdXNlTWFwXCIpLFxuICAgICAgICAgICAgICAgIFwidV9zb3VyY2VSZWdpb25cIiwgXCJ1X3JlcGVhdFJlZ2lvblwiXG4gICAgICAgICAgICBdKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuIiwibW9kdWxlIHdke1xuICAgIGV4cG9ydCBjbGFzcyBTcGVjdWxhck1hcFNoYWRlckxpYiBleHRlbmRzIExpZ2h0TWFwU2hhZGVyTGlie1xuICAgICAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZSgpIHtcbiAgICAgICAgICAgIHZhciBvYmogPSBuZXcgdGhpcygpO1xuXG4gICAgICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHR5cGU6c3RyaW5nID0gXCJzcGVjdWxhck1hcFwiO1xuXG4gICAgICAgIHB1YmxpYyBzZXRTaGFkZXJEZWZpbml0aW9uKHF1YWRDbWQ6UXVhZENvbW1hbmQsIG1hdGVyaWFsOk1hdGVyaWFsKXtcbiAgICAgICAgICAgIHN1cGVyLnNldFNoYWRlckRlZmluaXRpb24ocXVhZENtZCwgbWF0ZXJpYWwpO1xuXG4gICAgICAgICAgICB0aGlzLmFkZFVuaWZvcm1WYXJpYWJsZShbXG4gICAgICAgICAgICAgICAgVmFyaWFibGVOYW1lVGFibGUuZ2V0VmFyaWFibGVOYW1lKFwic3BlY3VsYXJNYXBcIilcbiAgICAgICAgICAgIF0pO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4iLCJtb2R1bGUgd2R7XG4gICAgZXhwb3J0IGNsYXNzIE5vcm1hbE1hcFNoYWRlckxpYiBleHRlbmRzIExpZ2h0TWFwU2hhZGVyTGlie1xuICAgICAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZSgpIHtcbiAgICAgICAgICAgIHZhciBvYmogPSBuZXcgdGhpcygpO1xuXG4gICAgICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHR5cGU6c3RyaW5nID0gXCJub3JtYWxNYXBcIjtcblxuICAgICAgICBwdWJsaWMgc2VuZFNoYWRlclZhcmlhYmxlcyhwcm9ncmFtOiBQcm9ncmFtLCBxdWFkQ21kOlF1YWRDb21tYW5kLCBtYXRlcmlhbDpMaWdodE1hdGVyaWFsKXtcbiAgICAgICAgICAgIHN1cGVyLnNlbmRTaGFkZXJWYXJpYWJsZXMocHJvZ3JhbSwgcXVhZENtZCwgbWF0ZXJpYWwpO1xuXG4gICAgICAgICAgICBpZihxdWFkQ21kLmJ1ZmZlcnMuaGFzQ2hpbGQoQnVmZmVyRGF0YVR5cGUuVEFOR0VOVCkpe1xuICAgICAgICAgICAgICAgIHRoaXMuc2VuZEF0dHJpYnV0ZURhdGEocHJvZ3JhbSwgXCJhX3RhbmdlbnRcIiwgPEFycmF5QnVmZmVyPnF1YWRDbWQuYnVmZmVycy5nZXRDaGlsZChCdWZmZXJEYXRhVHlwZS5UQU5HRU5UKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgc2V0U2hhZGVyRGVmaW5pdGlvbihxdWFkQ21kOlF1YWRDb21tYW5kLCBtYXRlcmlhbDpNYXRlcmlhbCl7XG4gICAgICAgICAgICBzdXBlci5zZXRTaGFkZXJEZWZpbml0aW9uKHF1YWRDbWQsIG1hdGVyaWFsKTtcblxuICAgICAgICAgICAgdGhpcy5hZGRBdHRyaWJ1dGVWYXJpYWJsZShbXCJhX3RhbmdlbnRcIl0pO1xuXG4gICAgICAgICAgICB0aGlzLmFkZFVuaWZvcm1WYXJpYWJsZShbXG4gICAgICAgICAgICAgICAgVmFyaWFibGVOYW1lVGFibGUuZ2V0VmFyaWFibGVOYW1lKFwibm9ybWFsTWFwXCIpXG4gICAgICAgICAgICBdKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuIiwibW9kdWxlIHdke1xuICAgIGV4cG9ydCBjbGFzcyBOb0RpZmZ1c2VNYXBTaGFkZXJMaWIgZXh0ZW5kcyBTaGFkZXJMaWJ7XG4gICAgICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlKCkge1xuICAgICAgICAgICAgdmFyIG9iaiA9IG5ldyB0aGlzKCk7XG5cbiAgICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgdHlwZTpzdHJpbmcgPSBcIm5vRGlmZnVzZU1hcFwiO1xuXG4gICAgICAgIHB1YmxpYyBzZW5kU2hhZGVyVmFyaWFibGVzKHByb2dyYW06IFByb2dyYW0sIHF1YWRDbWQ6UXVhZENvbW1hbmQsIG1hdGVyaWFsOkxpZ2h0TWF0ZXJpYWwpe1xuICAgICAgICAgICAgdGhpcy5zZW5kVW5pZm9ybURhdGEocHJvZ3JhbSwgXCJ1X2RpZmZ1c2VcIiwgbWF0ZXJpYWwuY29sb3IudG9WZWN0b3IzKCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHNldFNoYWRlckRlZmluaXRpb24ocXVhZENtZDpRdWFkQ29tbWFuZCwgbWF0ZXJpYWw6TWF0ZXJpYWwpe1xuICAgICAgICAgICAgc3VwZXIuc2V0U2hhZGVyRGVmaW5pdGlvbihxdWFkQ21kLCBtYXRlcmlhbCk7XG5cbiAgICAgICAgICAgIHRoaXMuYWRkVW5pZm9ybVZhcmlhYmxlKFtcInVfZGlmZnVzZVwiXSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbiIsIm1vZHVsZSB3ZHtcbiAgICBleHBvcnQgY2xhc3MgTm9TcGVjdWxhck1hcFNoYWRlckxpYiBleHRlbmRzIFNoYWRlckxpYntcbiAgICAgICAgcHVibGljIHN0YXRpYyBjcmVhdGUoKSB7XG4gICAgICAgICAgICB2YXIgb2JqID0gbmV3IHRoaXMoKTtcblxuICAgICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyB0eXBlOnN0cmluZyA9IFwibm9TcGVjdWxhck1hcFwiO1xuXG4gICAgICAgIHB1YmxpYyBzZW5kU2hhZGVyVmFyaWFibGVzKHByb2dyYW06IFByb2dyYW0sIHF1YWRDbWQ6UXVhZENvbW1hbmQsIG1hdGVyaWFsOkxpZ2h0TWF0ZXJpYWwpe1xuICAgICAgICAgICAgdGhpcy5zZW5kVW5pZm9ybURhdGEocHJvZ3JhbSwgXCJ1X3NwZWN1bGFyXCIsIG1hdGVyaWFsLnNwZWN1bGFyLnRvVmVjdG9yMygpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBzZXRTaGFkZXJEZWZpbml0aW9uKHF1YWRDbWQ6UXVhZENvbW1hbmQsIG1hdGVyaWFsOk1hdGVyaWFsKXtcbiAgICAgICAgICAgIHN1cGVyLnNldFNoYWRlckRlZmluaXRpb24ocXVhZENtZCwgbWF0ZXJpYWwpO1xuXG4gICAgICAgICAgICB0aGlzLmFkZFVuaWZvcm1WYXJpYWJsZShbXCJ1X3NwZWN1bGFyXCJdKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuIiwibW9kdWxlIHdke1xuICAgIGV4cG9ydCBjbGFzcyBOb05vcm1hbE1hcFNoYWRlckxpYiBleHRlbmRzIFNoYWRlckxpYntcbiAgICAgICAgcHVibGljIHN0YXRpYyBjcmVhdGUoKSB7XG4gICAgICAgICAgICB2YXIgb2JqID0gbmV3IHRoaXMoKTtcblxuICAgICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyB0eXBlOnN0cmluZyA9IFwibm9Ob3JtYWxNYXBcIjtcblxuICAgICAgICBwdWJsaWMgc2VuZFNoYWRlclZhcmlhYmxlcyhwcm9ncmFtOiBQcm9ncmFtLCBxdWFkQ21kOlF1YWRDb21tYW5kLCBtYXRlcmlhbDpMaWdodE1hdGVyaWFsKXtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuIiwibW9kdWxlIHdke1xuICAgIGV4cG9ydCBhYnN0cmFjdCBjbGFzcyBCdWlsZFNoYWRvd01hcFNoYWRlckxpYiBleHRlbmRzIFNoYWRlckxpYntcbiAgICAgICAgcHVibGljIHNldFNoYWRlckRlZmluaXRpb24ocXVhZENtZDpRdWFkQ29tbWFuZCwgbWF0ZXJpYWw6TWF0ZXJpYWwpe1xuICAgICAgICAgICAgc3VwZXIuc2V0U2hhZGVyRGVmaW5pdGlvbihxdWFkQ21kLCBtYXRlcmlhbCk7XG5cbiAgICAgICAgICAgIHRoaXMuc2V0RnNTb3VyY2UodGhpcy5nZXRGc0NodW5rKFwiY29tbW9uQnVpbGRTaGFkb3dNYXBfZnJhZ21lbnQuZ2xzbFwiKSk7XG4gICAgICAgICAgICB0aGlzLnNldEZzU291cmNlKHRoaXMuZ2V0RnNDaHVuaygpLCBcIitcIik7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbiIsIm1vZHVsZSB3ZHtcbiAgICBleHBvcnQgY2xhc3MgQnVpbGRUd29EU2hhZG93TWFwU2hhZGVyTGliIGV4dGVuZHMgQnVpbGRTaGFkb3dNYXBTaGFkZXJMaWJ7XG4gICAgICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlKCkge1xuICAgICAgICAgICAgdmFyIG9iaiA9IG5ldyB0aGlzKCk7XG5cbiAgICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgIH1cblxuXG4gICAgICAgIHB1YmxpYyB0eXBlOnN0cmluZyA9IFwiYnVpbGRUd29EU2hhZG93TWFwXCI7XG5cbiAgICAgICAgcHVibGljIHNlbmRTaGFkZXJWYXJpYWJsZXMocHJvZ3JhbTogUHJvZ3JhbSwgcXVhZENtZDpRdWFkQ29tbWFuZCwgbWF0ZXJpYWw6TGlnaHRNYXRlcmlhbCl7XG4gICAgICAgICAgICB0aGlzLnNlbmRVbmlmb3JtRGF0YShwcm9ncmFtLCBcInVfdnBNYXRyaXhGcm9tTGlnaHRcIiwgbWF0ZXJpYWwuYnVpbGRUd29EU2hhZG93TWFwRGF0YS52cE1hdHJpeEZyb21MaWdodCk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgc2V0U2hhZGVyRGVmaW5pdGlvbihxdWFkQ21kOlF1YWRDb21tYW5kLCBtYXRlcmlhbDpNYXRlcmlhbCl7XG4gICAgICAgICAgICBzdXBlci5zZXRTaGFkZXJEZWZpbml0aW9uKHF1YWRDbWQsIG1hdGVyaWFsKTtcblxuICAgICAgICAgICAgdGhpcy5hZGRVbmlmb3JtVmFyaWFibGUoW1xuICAgICAgICAgICAgICAgIFwidV92cE1hdHJpeEZyb21MaWdodFwiXG4gICAgICAgICAgICBdKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuIiwibW9kdWxlIHdke1xuICAgIGV4cG9ydCBjbGFzcyBCdWlsZEN1YmVtYXBTaGFkb3dNYXBTaGFkZXJMaWIgZXh0ZW5kcyBCdWlsZFNoYWRvd01hcFNoYWRlckxpYntcbiAgICAgICAgcHVibGljIHN0YXRpYyBjcmVhdGUoKSB7XG4gICAgICAgICAgICB2YXIgb2JqID0gbmV3IHRoaXMoKTtcblxuICAgICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyB0eXBlOnN0cmluZyA9IFwiYnVpbGRDdWJlbWFwU2hhZG93TWFwXCI7XG5cbiAgICAgICAgcHVibGljIHNlbmRTaGFkZXJWYXJpYWJsZXMocHJvZ3JhbTogUHJvZ3JhbSwgcXVhZENtZDpRdWFkQ29tbWFuZCwgbWF0ZXJpYWw6TGlnaHRNYXRlcmlhbCl7XG4gICAgICAgICAgICB0aGlzLnNlbmRVbmlmb3JtRGF0YShwcm9ncmFtLCBcInVfbGlnaHRQb3NcIiwgbWF0ZXJpYWwuYnVpbGRDdWJlbWFwU2hhZG93TWFwRGF0YS5saWdodFBvcyk7XG4gICAgICAgICAgICB0aGlzLnNlbmRVbmlmb3JtRGF0YShwcm9ncmFtLCBcInVfZmFyUGxhbmVcIiwgbWF0ZXJpYWwuYnVpbGRDdWJlbWFwU2hhZG93TWFwRGF0YS5mYXJQbGFuZSk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgc2V0U2hhZGVyRGVmaW5pdGlvbihxdWFkQ21kOlF1YWRDb21tYW5kLCBtYXRlcmlhbDpNYXRlcmlhbCl7XG4gICAgICAgICAgICBzdXBlci5zZXRTaGFkZXJEZWZpbml0aW9uKHF1YWRDbWQsIG1hdGVyaWFsKTtcblxuICAgICAgICAgICAgdGhpcy5hZGRVbmlmb3JtVmFyaWFibGUoW1xuICAgICAgICAgICAgICAgIFwidV9saWdodFBvc1wiLCBcInVfZmFyUGxhbmVcIlxuICAgICAgICAgICAgXSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbiIsIm1vZHVsZSB3ZHtcbiAgICBleHBvcnQgY2xhc3MgVG90YWxTaGFkb3dNYXBTaGFkZXJMaWIgZXh0ZW5kcyBTaGFkZXJMaWJ7XG4gICAgICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlKCkge1xuICAgICAgICAgICAgdmFyIG9iaiA9IG5ldyB0aGlzKCk7XG5cbiAgICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgIH1cblxuXG4gICAgICAgIHB1YmxpYyB0eXBlOnN0cmluZyA9IFwidG90YWxTaGFkb3dNYXBcIjtcblxuICAgICAgICBwdWJsaWMgc2VuZFNoYWRlclZhcmlhYmxlcyhwcm9ncmFtOiBQcm9ncmFtLCBxdWFkQ21kOlF1YWRDb21tYW5kLCBtYXRlcmlhbDpMaWdodE1hdGVyaWFsKXtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuIiwibW9kdWxlIHdke1xuICAgIGV4cG9ydCBhYnN0cmFjdCBjbGFzcyBTaGFkb3dNYXBTaGFkZXJMaWIgZXh0ZW5kcyBTaGFkZXJMaWJ7XG4gICAgICAgIHB1YmxpYyBzZXRTaGFkZXJEZWZpbml0aW9uKHF1YWRDbWQ6UXVhZENvbW1hbmQsIG1hdGVyaWFsOk1hdGVyaWFsKXtcbiAgICAgICAgICAgIHN1cGVyLnNldFNoYWRlckRlZmluaXRpb24ocXVhZENtZCwgbWF0ZXJpYWwpO1xuXG4gICAgICAgICAgICB0aGlzLl9zZXRTaGFkb3dNYXBTb3VyY2UoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX3NldFNoYWRvd01hcFNvdXJjZSgpe1xuICAgICAgICAgICAgdmFyIHNjZW5lOlNjZW5lRGlzcGF0Y2hlciA9IERpcmVjdG9yLmdldEluc3RhbmNlKCkuc2NlbmUsXG4gICAgICAgICAgICAgICAgdHdvRFNoYWRvd01hcENvdW50ID0gc2NlbmUuZGlyZWN0aW9uTGlnaHRzPyBzY2VuZS5kaXJlY3Rpb25MaWdodHMuZmlsdGVyKChsaWdodDpHYW1lT2JqZWN0KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBsaWdodC5nZXRDb21wb25lbnQ8RGlyZWN0aW9uTGlnaHQ+KERpcmVjdGlvbkxpZ2h0KS5jYXN0U2hhZG93O1xuICAgICAgICAgICAgICAgIH0pLmdldENvdW50KCkgOiAwLFxuICAgICAgICAgICAgICAgIGN1YmVtYXBTaGFkb3dNYXBDb3VudCA9IHNjZW5lLnBvaW50TGlnaHRzID8gc2NlbmUucG9pbnRMaWdodHMuZmlsdGVyKChsaWdodDpHYW1lT2JqZWN0KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBsaWdodC5nZXRDb21wb25lbnQ8UG9pbnRMaWdodD4oUG9pbnRMaWdodCkuY2FzdFNoYWRvdztcbiAgICAgICAgICAgICAgICB9KS5nZXRDb3VudCgpIDogMDtcblxuXG5cbiAgICAgICAgICAgIGlmKHNjZW5lLnNoYWRvd01hcC5zb2Z0VHlwZSA9PT0gU2hhZG93TWFwU29mdFR5cGUuUENGKXtcbiAgICAgICAgICAgICAgICB0aGlzLmZzU291cmNlRGVmaW5lTGlzdC5hZGRDaGlsZHJlbihbe1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlNIQURPV01BUF9UWVBFX1BDRlwiXG4gICAgICAgICAgICAgICAgfV0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLnZzU291cmNlRGVmaW5lTGlzdC5hZGRDaGlsZChcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiVFdPRF9TSEFET1dNQVBfQ09VTlRcIixcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHR3b0RTaGFkb3dNYXBDb3VudFxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB0aGlzLmZzU291cmNlRGVmaW5lTGlzdC5hZGRDaGlsZHJlbihbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlRXT0RfU0hBRE9XTUFQX0NPVU5UXCIsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiB0d29EU2hhZG93TWFwQ291bnRcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJDVUJFTUFQX1NIQURPV01BUF9DT1VOVFwiLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogY3ViZW1hcFNoYWRvd01hcENvdW50XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF0pO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4iLCJtb2R1bGUgd2R7XG4gICAgZXhwb3J0IGNsYXNzIFR3b0RTaGFkb3dNYXBTaGFkZXJMaWIgZXh0ZW5kcyBTaGFkb3dNYXBTaGFkZXJMaWJ7XG4gICAgICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlKCkge1xuICAgICAgICAgICAgdmFyIG9iaiA9IG5ldyB0aGlzKCk7XG5cbiAgICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgIH1cblxuXG4gICAgICAgIHB1YmxpYyB0eXBlOnN0cmluZyA9IFwidHdvRFNoYWRvd01hcFwiO1xuXG4gICAgICAgIHB1YmxpYyBzZW5kU2hhZGVyVmFyaWFibGVzKHByb2dyYW06IFByb2dyYW0sIHF1YWRDbWQ6UXVhZENvbW1hbmQsIG1hdGVyaWFsOkxpZ2h0TWF0ZXJpYWwpe1xuICAgICAgICAgICAgbWF0ZXJpYWwudHdvRFNoYWRvd01hcERhdGFzLmZvckVhY2goKGRhdGE6VHdvRFNoYWRvd01hcERhdGEsIGluZGV4Om51bWJlcikgPT4ge1xuICAgICAgICAgICAgICAgIHByb2dyYW0uc2VuZFN0cnVjdHVyZURhdGEoYHVfdnBNYXRyaXhGcm9tTGlnaHRbJHtpbmRleH1dYCwgVmFyaWFibGVUeXBlLkZMT0FUX01BVDQsIGRhdGEudnBNYXRyaXhGcm9tTGlnaHQpO1xuICAgICAgICAgICAgICAgIHByb2dyYW0uc2VuZFN0cnVjdHVyZURhdGEoYHVfdHdvRFNoYWRvd1NpemVbJHtpbmRleH1dYCwgVmFyaWFibGVUeXBlLkZMT0FUXzIsIGRhdGEuc2hhZG93U2l6ZSk7XG4gICAgICAgICAgICAgICAgcHJvZ3JhbS5zZW5kU3RydWN0dXJlRGF0YShgdV90d29EU2hhZG93Qmlhc1ske2luZGV4fV1gLCBWYXJpYWJsZVR5cGUuRkxPQVRfMSwgZGF0YS5zaGFkb3dCaWFzKTtcbiAgICAgICAgICAgICAgICBwcm9ncmFtLnNlbmRTdHJ1Y3R1cmVEYXRhKGB1X3R3b0RTaGFkb3dEYXJrbmVzc1ske2luZGV4fV1gLCBWYXJpYWJsZVR5cGUuRkxPQVRfMSwgZGF0YS5zaGFkb3dEYXJrbmVzcyk7XG4gICAgICAgICAgICAgICAgcHJvZ3JhbS5zZW5kU3RydWN0dXJlRGF0YShgdV90d29ETGlnaHRQb3NbJHtpbmRleH1dYCwgVmFyaWFibGVUeXBlLkZMT0FUXzMsIGRhdGEubGlnaHRQb3MpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbiIsIm1vZHVsZSB3ZHtcbiAgICBleHBvcnQgY2xhc3MgQ3ViZW1hcFNoYWRvd01hcFNoYWRlckxpYiBleHRlbmRzIFNoYWRvd01hcFNoYWRlckxpYntcbiAgICAgICAgcHVibGljIHN0YXRpYyBjcmVhdGUoKSB7XG4gICAgICAgICAgICB2YXIgb2JqID0gbmV3IHRoaXMoKTtcblxuICAgICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgcHVibGljIHR5cGU6c3RyaW5nID0gXCJjdWJlbWFwU2hhZG93TWFwXCI7XG5cbiAgICAgICAgcHVibGljIHNlbmRTaGFkZXJWYXJpYWJsZXMocHJvZ3JhbTogUHJvZ3JhbSwgcXVhZENtZDpRdWFkQ29tbWFuZCwgbWF0ZXJpYWw6TGlnaHRNYXRlcmlhbCl7XG4gICAgICAgICAgICBtYXRlcmlhbC5jdWJlbWFwU2hhZG93TWFwRGF0YXMuZm9yRWFjaCgoZGF0YTpDdWJlbWFwU2hhZG93TWFwRGF0YSwgaW5kZXg6bnVtYmVyKSA9PiB7XG4gICAgICAgICAgICAgICAgcHJvZ3JhbS5zZW5kU3RydWN0dXJlRGF0YShgdV9jdWJlbWFwTGlnaHRQb3NbJHtpbmRleH1dYCwgVmFyaWFibGVUeXBlLkZMT0FUXzMsIGRhdGEubGlnaHRQb3MpO1xuICAgICAgICAgICAgICAgIHByb2dyYW0uc2VuZFN0cnVjdHVyZURhdGEoYHVfZmFyUGxhbmVbJHtpbmRleH1dYCwgVmFyaWFibGVUeXBlLkZMT0FUXzEsIGRhdGEuZmFyUGxhbmUpO1xuICAgICAgICAgICAgICAgIHByb2dyYW0uc2VuZFN0cnVjdHVyZURhdGEoYHVfY3ViZW1hcFNoYWRvd0JpYXNbJHtpbmRleH1dYCwgVmFyaWFibGVUeXBlLkZMT0FUXzEsIGRhdGEuc2hhZG93Qmlhcyk7XG4gICAgICAgICAgICAgICAgcHJvZ3JhbS5zZW5kU3RydWN0dXJlRGF0YShgdV9jdWJlbWFwU2hhZG93RGFya25lc3NbJHtpbmRleH1dYCwgVmFyaWFibGVUeXBlLkZMT0FUXzEsIGRhdGEuc2hhZG93RGFya25lc3MpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbiIsIm1vZHVsZSB3ZHtcbiAgICBleHBvcnQgY2xhc3MgTm9TaGFkb3dNYXBTaGFkZXJMaWIgZXh0ZW5kcyBTaGFkZXJMaWJ7XG4gICAgICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlKCkge1xuICAgICAgICAgICAgdmFyIG9iaiA9IG5ldyB0aGlzKCk7XG5cbiAgICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgIH1cblxuXG4gICAgICAgIHB1YmxpYyB0eXBlOnN0cmluZyA9IFwibm9TaGFkb3dNYXBcIjtcblxuICAgICAgICBwdWJsaWMgc2VuZFNoYWRlclZhcmlhYmxlcyhwcm9ncmFtOiBQcm9ncmFtLCBxdWFkQ21kOlF1YWRDb21tYW5kLCBtYXRlcmlhbDpMaWdodE1hdGVyaWFsKXtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuIiwibW9kdWxlIHdkIHtcbiAgICBleHBvcnQgY2xhc3MgU2hhZGVyU25pcHBldCB7XG4gICAgICAgIHB1YmxpYyBzdGF0aWMgbWFpbl9iZWdpbjpzdHJpbmcgPSBcInZvaWQgbWFpbih2b2lkKXtcXG5cIjtcbiAgICAgICAgcHVibGljIHN0YXRpYyBtYWluX2VuZDpzdHJpbmcgPSBcIn1cXG5cIjtcblxuICAgICAgICBwdWJsaWMgc3RhdGljIHNldFBvc19tdnA6c3RyaW5nID0gXCJnbF9Qb3NpdGlvbiA9IHVfcE1hdHJpeCAqIHVfdk1hdHJpeCAqIHVfbU1hdHJpeCAqIHZlYzQoYV9wb3NpdGlvbiwgMS4wKTtcXG5cIlxuICAgIH1cbn1cbiIsIm1vZHVsZSB3ZCB7XG4gICAgZXhwb3J0IGFic3RyYWN0IGNsYXNzIE1hdGVyaWFsIHtcbiAgICAgICAgZ2V0IHByb2dyYW0oKXtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNoYWRlci5wcm9ncmFtO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfYmxlbmRUeXBlOkJsZW5kVHlwZSA9IG51bGw7XG4gICAgICAgIGdldCBibGVuZFR5cGUoKXtcbiAgICAgICAgICAgIGlmKHRoaXMuX2JsZW5kVHlwZSl7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2JsZW5kVHlwZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCAodGhpcy5ibGVuZFNyYyA9PT0gQmxlbmRGdW5jLk9ORSlcbiAgICAgICAgICAgICAgICAmJiAodGhpcy5ibGVuZERzdCA9PT0gQmxlbmRGdW5jLlpFUk8pXG4gICAgICAgICAgICAgICAgJiYgKHRoaXMuYmxlbmRFcXVhdGlvbiA9PT0gQmxlbmRFcXVhdGlvbi5BREQpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIEJsZW5kVHlwZS5OT05FO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoKHRoaXMuYmxlbmRTcmMgPT09IEJsZW5kRnVuYy5TUkNfQUxQSEEpXG4gICAgICAgICAgICAgICAgJiYgKHRoaXMuYmxlbmREc3QgPT09IEJsZW5kRnVuYy5PTkVfTUlOVVNfU1JDX0FMUEhBKVxuICAgICAgICAgICAgICAgICYmICh0aGlzLmJsZW5kRXF1YXRpb24gPT09IEJsZW5kRXF1YXRpb24uQUREKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBCbGVuZFR5cGUuTk9STUFMO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoKHRoaXMuYmxlbmRTcmMgPT09IEJsZW5kRnVuYy5PTkUpXG4gICAgICAgICAgICAgICAgJiYgKHRoaXMuYmxlbmREc3QgPT09IEJsZW5kRnVuYy5PTkUpXG4gICAgICAgICAgICAgICAgJiYgKHRoaXMuYmxlbmRFcXVhdGlvbiA9PT0gQmxlbmRFcXVhdGlvbi5BREQpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIEJsZW5kVHlwZS5BRERJVElWRTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKCh0aGlzLmJsZW5kU3JjID09PSBCbGVuZEZ1bmMuU1JDX0FMUEhBKVxuICAgICAgICAgICAgICAgICYmICh0aGlzLmJsZW5kRHN0ID09PSBCbGVuZEZ1bmMuT05FKVxuICAgICAgICAgICAgICAgICYmICh0aGlzLmJsZW5kRXF1YXRpb24gPT09IEJsZW5kRXF1YXRpb24uQUREKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBCbGVuZFR5cGUuQURESVRJVkVBTFBIQTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKCh0aGlzLmJsZW5kU3JjID09PSBCbGVuZEZ1bmMuRFNUX0NPTE9SKVxuICAgICAgICAgICAgICAgICYmICh0aGlzLmJsZW5kRHN0ID09PSBCbGVuZEZ1bmMuWkVSTylcbiAgICAgICAgICAgICAgICAmJiAodGhpcy5ibGVuZEVxdWF0aW9uID09PSBCbGVuZEVxdWF0aW9uLkFERCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gQmxlbmRUeXBlLk1VTFRJUExJQ0FUSVZFO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoKHRoaXMuYmxlbmRTcmMgPT09IEJsZW5kRnVuYy5PTkUpXG4gICAgICAgICAgICAgICAgJiYgKHRoaXMuYmxlbmREc3QgPT09IEJsZW5kRnVuYy5PTkVfTUlOVVNfU1JDX0FMUEhBKVxuICAgICAgICAgICAgICAgICYmICh0aGlzLmJsZW5kRXF1YXRpb24gPT09IEJsZW5kRXF1YXRpb24uQUREKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBCbGVuZFR5cGUuUFJFTVVMVElQTElFRDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBCbGVuZFR5cGUuTk9STUFMO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHNldCBibGVuZFR5cGUoYmxlbmRUeXBlOkJsZW5kVHlwZSl7XG4gICAgICAgICAgICBzd2l0Y2ggKGJsZW5kVHlwZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgQmxlbmRUeXBlLk5PTkU6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYmxlbmQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ibGVuZFNyYyA9IEJsZW5kRnVuYy5PTkU7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYmxlbmREc3QgPSBCbGVuZEZ1bmMuWkVSTztcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ibGVuZEVxdWF0aW9uID0gQmxlbmRFcXVhdGlvbi5BREQ7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgQmxlbmRUeXBlLk5PUk1BTDpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ibGVuZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYmxlbmRTcmMgPSBCbGVuZEZ1bmMuU1JDX0FMUEhBO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmJsZW5kRHN0ID0gQmxlbmRGdW5jLk9ORV9NSU5VU19TUkNfQUxQSEE7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYmxlbmRFcXVhdGlvbiA9IEJsZW5kRXF1YXRpb24uQUREO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIEJsZW5kVHlwZS5QUkVNVUxUSVBMSUVEOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmJsZW5kID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ibGVuZFNyYyA9IEJsZW5kRnVuYy5PTkU7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYmxlbmREc3QgPSBCbGVuZEZ1bmMuT05FX01JTlVTX1NSQ19BTFBIQTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ibGVuZEVxdWF0aW9uID0gQmxlbmRFcXVhdGlvbi5BREQ7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgQmxlbmRUeXBlLkFERElUSVZFOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmJsZW5kID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ibGVuZFNyYyA9IEJsZW5kRnVuYy5PTkU7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYmxlbmREc3QgPSBCbGVuZEZ1bmMuT05FO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmJsZW5kRXF1YXRpb24gPSBCbGVuZEVxdWF0aW9uLkFERDtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBCbGVuZFR5cGUuQURESVRJVkVBTFBIQTpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ibGVuZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYmxlbmRTcmMgPSBCbGVuZEZ1bmMuU1JDX0FMUEhBO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmJsZW5kRHN0ID0gQmxlbmRGdW5jLk9ORTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ibGVuZEVxdWF0aW9uID0gQmxlbmRFcXVhdGlvbi5BREQ7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgQmxlbmRUeXBlLk1VTFRJUExJQ0FUSVZFOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmJsZW5kID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ibGVuZFNyYyA9IEJsZW5kRnVuYy5EU1RfQ09MT1I7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYmxlbmREc3QgPSBCbGVuZEZ1bmMuWkVSTztcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ibGVuZEVxdWF0aW9uID0gQmxlbmRFcXVhdGlvbi5BREQ7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIExvZy5lcnJvcih0cnVlLCBMb2cuaW5mby5GVU5DX0lOVkFMSUQoXCJibGVuZFR5cGVcIikpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5fYmxlbmRUeXBlID0gYmxlbmRUeXBlO1xuICAgICAgICB9XG5cbiAgICAgICAgZ2V0IGVudk1hcCgpe1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubWFwTWFuYWdlci5nZXRFbnZNYXAoKTtcbiAgICAgICAgfVxuICAgICAgICBzZXQgZW52TWFwKGVudk1hcDpDdWJlbWFwVGV4dHVyZSl7XG4gICAgICAgICAgICB0aGlzLm1hcE1hbmFnZXIuc2V0RW52TWFwKGVudk1hcCk7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9ibGVuZFNyYzpCbGVuZEZ1bmM9IEJsZW5kRnVuYy5PTkU7XG4gICAgICAgIGdldCBibGVuZFNyYygpe1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2JsZW5kU3JjO1xuICAgICAgICB9XG4gICAgICAgIHNldCBibGVuZFNyYyhibGVuZFNyYzpCbGVuZEZ1bmMpe1xuICAgICAgICAgICAgdGhpcy5fYmxlbmRTcmMgPSBibGVuZFNyYztcbiAgICAgICAgICAgIHRoaXMuYmxlbmRGdW5jU2VwYXJhdGUgPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfYmxlbmREc3Q6QmxlbmRGdW5jPSBCbGVuZEZ1bmMuWkVSTztcbiAgICAgICAgZ2V0IGJsZW5kRHN0KCl7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fYmxlbmREc3Q7XG4gICAgICAgIH1cbiAgICAgICAgc2V0IGJsZW5kRHN0KGJsZW5kRHN0OkJsZW5kRnVuYyl7XG4gICAgICAgICAgICB0aGlzLl9ibGVuZERzdCA9IGJsZW5kRHN0O1xuICAgICAgICAgICAgdGhpcy5ibGVuZEZ1bmNTZXBhcmF0ZSA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9ibGVuZEVxdWF0aW9uOkJsZW5kRXF1YXRpb24gPSBCbGVuZEVxdWF0aW9uLkFERDtcbiAgICAgICAgZ2V0IGJsZW5kRXF1YXRpb24oKXtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9ibGVuZEVxdWF0aW9uO1xuICAgICAgICB9XG4gICAgICAgIHNldCBibGVuZEVxdWF0aW9uKGJsZW5kRXF1YXRpb246QmxlbmRFcXVhdGlvbil7XG4gICAgICAgICAgICB0aGlzLl9ibGVuZEVxdWF0aW9uID0gYmxlbmRFcXVhdGlvbjtcbiAgICAgICAgICAgIHRoaXMuYmxlbmRFcXVhdGlvblNlcGFyYXRlID0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBzaGFkZXI6U2hhZGVyID0gU2hhZGVyLmNyZWF0ZSgpO1xuICAgICAgICBwdWJsaWMgY29sb3I6Q29sb3IgPSBDb2xvci5jcmVhdGUoXCIjZmZmZmZmXCIpO1xuICAgICAgICBwdWJsaWMgcmVkV3JpdGU6Ym9vbGVhbiA9IHRydWU7XG4gICAgICAgIHB1YmxpYyBncmVlbldyaXRlOmJvb2xlYW4gPSB0cnVlO1xuICAgICAgICBwdWJsaWMgYmx1ZVdyaXRlOmJvb2xlYW4gPSB0cnVlO1xuICAgICAgICBwdWJsaWMgYWxwaGFXcml0ZTpib29sZWFuID0gdHJ1ZTtcbiAgICAgICAgcHVibGljIHBvbHlnb25PZmZzZXRNb2RlOlBvbHlnb25PZmZzZXRNb2RlID0gUG9seWdvbk9mZnNldE1vZGUuTk9ORTtcbiAgICAgICAgcHVibGljIHNpZGU6U2lkZSA9IFNpZGUuRlJPTlQ7XG4gICAgICAgIHB1YmxpYyBibGVuZDpib29sZWFuID0gZmFsc2U7XG4gICAgICAgIHB1YmxpYyBibGVuZEZ1bmNTZXBhcmF0ZTpBcnJheTxCbGVuZEZ1bmM+ID0gbnVsbDtcbiAgICAgICAgcHVibGljIGJsZW5kRXF1YXRpb25TZXBhcmF0ZTpBcnJheTxCbGVuZEVxdWF0aW9uPiA9IFtCbGVuZEVxdWF0aW9uLkFERCwgQmxlbmRFcXVhdGlvbi5BRERdO1xuICAgICAgICBwdWJsaWMgc2hhZGluZyA9IFNoYWRpbmcuRkxBVDtcbiAgICAgICAgcHVibGljIHJlZnJhY3Rpb25SYXRpbzpudW1iZXIgPSAwO1xuICAgICAgICBwdWJsaWMgcmVmbGVjdGl2aXR5Om51bWJlciA9IFNoYWRlckNodW5rLk5VTEw7XG4gICAgICAgIHB1YmxpYyBtYXBDb21iaW5lTW9kZTpUZXh0dXJlQ29tYmluZU1vZGUgPSBUZXh0dXJlQ29tYmluZU1vZGUuTUlYO1xuICAgICAgICBwdWJsaWMgbWFwTWl4UmF0aW86bnVtYmVyID0gMC41O1xuICAgICAgICBwdWJsaWMgbWFwTWFuYWdlcjpNYXBNYW5hZ2VyID0gTWFwTWFuYWdlci5jcmVhdGUodGhpcyk7XG4gICAgICAgIHB1YmxpYyBnZW9tZXRyeTpHZW9tZXRyeSA9IG51bGw7XG4gICAgICAgIHByaXZhdGUgX2FmdGVySW5pdFN1YnNjcmlwdGlvbjp3ZEZycC5JRGlzcG9zYWJsZSA9IG51bGw7XG5cblxuICAgICAgICBAcmVxdWlyZShmdW5jdGlvbigpe1xuICAgICAgICAgICAgYXNzZXJ0KCEodGhpcy5taXJyb3JNYXAgJiYgdGhpcy5lbnZNYXApLCBMb2cuaW5mby5GVU5DX1NIT1VMRF9OT1QoXCJtaXJyb3JNYXAgYW5kIGVudk1hcFwiLCBcImJlIHNldCBib3RoXCIpKTtcbiAgICAgICAgfSlcbiAgICAgICAgcHVibGljIGluaXQoKXtcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgICAgICAgICAgdGhpcy5zaGFkZXIuaW5pdCgpO1xuICAgICAgICAgICAgdGhpcy5tYXBNYW5hZ2VyLmluaXQoKTtcblxuICAgICAgICAgICAgdGhpcy5fYWZ0ZXJJbml0U3Vic2NyaXB0aW9uID0gRXZlbnRNYW5hZ2VyLmZyb21FdmVudCg8YW55PkVuZ2luZUV2ZW50LkFGVEVSX0dBTUVPQkpFQ1RfSU5JVClcbiAgICAgICAgICAgICAgICAuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5fYWZ0ZXJJbml0SGFuZGxlcigpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGRpc3Bvc2UoKXtcbiAgICAgICAgICAgIHRoaXMubWFwTWFuYWdlci5kaXNwb3NlKCk7XG5cbiAgICAgICAgICAgIHRoaXMuX2FmdGVySW5pdFN1YnNjcmlwdGlvbiAmJiB0aGlzLl9hZnRlckluaXRTdWJzY3JpcHRpb24uZGlzcG9zZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHVwZGF0ZVRleHR1cmUoKXtcbiAgICAgICAgICAgIHRoaXMubWFwTWFuYWdlci51cGRhdGUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyB1cGRhdGVTaGFkZXIocXVhZENtZDpRdWFkQ29tbWFuZCl7XG4gICAgICAgICAgICB2YXIgc2NlbmU6U2NlbmVEaXNwYXRjaGVyID0gRGlyZWN0b3IuZ2V0SW5zdGFuY2UoKS5zY2VuZTtcblxuICAgICAgICAgICAgaWYoc2NlbmUuaXNVc2VQcm9ncmFtKXtcbiAgICAgICAgICAgICAgICBzY2VuZS5zaGFkZXIudXBkYXRlKHF1YWRDbWQsIHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICB0aGlzLnNoYWRlci51cGRhdGUocXVhZENtZCwgdGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBAdmlydHVhbFxuICAgICAgICBwcm90ZWN0ZWQgYWRkU2hhZGVyTGliKCl7XG4gICAgICAgIH1cblxuICAgICAgICBwcm90ZWN0ZWQgYWRkTWFwKGFzc2V0OlRleHR1cmVBc3NldCk7XG4gICAgICAgIHByb3RlY3RlZCBhZGRNYXAoYXNzZXQ6VGV4dHVyZUFzc2V0LCBvcHRpb246TWFwVmFyaWFibGVEYXRhKTtcbiAgICAgICAgcHJvdGVjdGVkIGFkZE1hcChtYXA6VGV4dHVyZSk7XG4gICAgICAgIHByb3RlY3RlZCBhZGRNYXAobWFwOlRleHR1cmUsIG9wdGlvbjpNYXBWYXJpYWJsZURhdGEpO1xuXG4gICAgICAgIHByb3RlY3RlZCBhZGRNYXAoLi4uYXJncyl7XG4gICAgICAgICAgICB0aGlzLm1hcE1hbmFnZXIuYWRkTWFwLmFwcGx5KHRoaXMubWFwTWFuYWdlciwgYXJncyk7XG4gICAgICAgIH1cblxuICAgICAgICBwcm90ZWN0ZWQgYWRkTm9ybWFsU2hhZGVyTGliKCl7XG4gICAgICAgICAgICBpZih0aGlzLl9oYXNBbmltYXRpb24oKSAmJiAhdGhpcy5zaGFkZXIuaGFzTGliKE1vcnBoTm9ybWFsU2hhZGVyTGliKSl7XG4gICAgICAgICAgICAgICAgdGhpcy5fYWRkU2hhZGVyTGliVG9Ub3AoTW9ycGhOb3JtYWxTaGFkZXJMaWIuY3JlYXRlKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZighdGhpcy5zaGFkZXIuaGFzTGliKENvbW1vbk5vcm1hbFNoYWRlckxpYikpe1xuICAgICAgICAgICAgICAgIHRoaXMuX2FkZFNoYWRlckxpYlRvVG9wKENvbW1vbk5vcm1hbFNoYWRlckxpYi5jcmVhdGUoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBwcm90ZWN0ZWQgc2V0QmxlbmRCeU9wYWNpdHkob3BhY2l0eTpudW1iZXIpe1xuICAgICAgICAgICAgaWYob3BhY2l0eSA8IDEuMCAmJiBvcGFjaXR5ID4gMC4wKXtcbiAgICAgICAgICAgICAgICB0aGlzLmJsZW5kID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICAgICAgdGhpcy5ibGVuZCA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfYWRkVG9wU2hhZGVyTGliKCl7XG4gICAgICAgICAgICB0aGlzLnNoYWRlci5hZGRMaWIoQ29tbW9uU2hhZGVyTGliLmNyZWF0ZSgpKTtcblxuICAgICAgICAgICAgaWYodGhpcy5faGFzQW5pbWF0aW9uKCkpe1xuICAgICAgICAgICAgICAgIHRoaXMuc2hhZGVyLmFkZExpYihNb3JwaENvbW1vblNoYWRlckxpYi5jcmVhdGUoKSk7XG4gICAgICAgICAgICAgICAgdGhpcy5zaGFkZXIuYWRkTGliKE1vcnBoVmVydGljZVNoYWRlckxpYi5jcmVhdGUoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgIHRoaXMuc2hhZGVyLmFkZExpYihDb21tb25WZXJ0aWNlU2hhZGVyTGliLmNyZWF0ZSgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX2FkZFNoYWRlckxpYlRvVG9wKGxpYjpTaGFkZXJMaWIpe1xuICAgICAgICAgICAgdGhpcy5zaGFkZXIuYWRkU2hhZGVyTGliVG9Ub3AobGliKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX2hhc0FuaW1hdGlvbigpe1xuICAgICAgICAgICAgaWYodGhpcy5nZW9tZXRyeSBpbnN0YW5jZW9mIE1vZGVsR2VvbWV0cnkpe1xuICAgICAgICAgICAgICAgIGxldCBnZW8gPSA8YW55Pih0aGlzLmdlb21ldHJ5KTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBnZW8uaGFzQW5pbWF0aW9uKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIEBleGVjT25seU9uY2UoXCJfaXNBZnRlckluaXRcIilcbiAgICAgICAgcHJpdmF0ZSBfYWZ0ZXJJbml0SGFuZGxlcigpe1xuICAgICAgICAgICAgdGhpcy5fYWRkVG9wU2hhZGVyTGliKCk7XG4gICAgICAgICAgICB0aGlzLmFkZFNoYWRlckxpYigpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZXhwb3J0IHR5cGUgTWFwVmFyaWFibGVEYXRhID0ge1xuICAgICAgICBzYW1wbGVyVmFyaWFibGVOYW1lPzogc3RyaW5nO1xuICAgICAgICBzYW1wbGVyRGF0YT86YW55XG4gICAgfVxufVxuIiwibW9kdWxlIHdke1xuICAgIGV4cG9ydCBjbGFzcyBCYXNpY01hdGVyaWFsIGV4dGVuZHMgTWF0ZXJpYWx7XG4gICAgICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlKCkge1xuICAgICAgICAgICAgdmFyIG9iaiA9IG5ldyB0aGlzKCk7XG5cbiAgICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHNldCBtYXAobWFwOmFueSl7XG4gICAgICAgICAgICBpZihtYXAgaW5zdGFuY2VvZiBUZXh0dXJlIHx8IG1hcCBpbnN0YW5jZW9mIFRleHR1cmVBc3NldCl7XG4gICAgICAgICAgICAgICAgdGhpcy5hZGRNYXAobWFwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICAgICAgbGV0IG1hcEFycjpBcnJheTxhbnk+ID0gKGFyZ3VtZW50c1swXSk7XG5cbiAgICAgICAgICAgICAgICB3ZENiLkxvZy5lcnJvcihtYXBBcnIubGVuZ3RoID4gMiwgd2RDYi5Mb2cuaW5mby5GVU5DX1NVUFBPUlQoXCJvbmx5XCIsIFwibWFwLmNvdW50IDw9IDJcIikpO1xuXG4gICAgICAgICAgICAgICAgZm9yKGxldCBtIG9mIG1hcEFycil7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkTWFwKG0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGdldCBtaXJyb3JNYXAoKXtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm1hcE1hbmFnZXIuZ2V0TWlycm9yTWFwKCk7XG4gICAgICAgIH1cbiAgICAgICAgc2V0IG1pcnJvck1hcChtaXJyb3JNYXA6TWlycm9yVGV4dHVyZSl7XG4gICAgICAgICAgICB0aGlzLm1hcE1hbmFnZXIuc2V0TWlycm9yTWFwKG1pcnJvck1hcCk7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9vcGFjaXR5Om51bWJlciA9IDEuMDtcbiAgICAgICAgZ2V0IG9wYWNpdHkoKXtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9vcGFjaXR5O1xuICAgICAgICB9XG4gICAgICAgIHNldCBvcGFjaXR5KG9wYWNpdHk6bnVtYmVyKXtcbiAgICAgICAgICAgIHRoaXMuc2V0QmxlbmRCeU9wYWNpdHkob3BhY2l0eSk7XG5cbiAgICAgICAgICAgIHRoaXMuX29wYWNpdHkgPSBvcGFjaXR5O1xuICAgICAgICB9XG5cbiAgICAgICAgcHJvdGVjdGVkIGFkZFNoYWRlckxpYigpe1xuICAgICAgICAgICAgdmFyIGVudk1hcCA9IG51bGw7XG5cbiAgICAgICAgICAgIHRoaXMuc2hhZGVyLmFkZExpYihCYXNpY1NoYWRlckxpYi5jcmVhdGUoKSk7XG5cbiAgICAgICAgICAgIHRoaXMuX3NldE1hcFNoYWRlckxpYigpO1xuXG4gICAgICAgICAgICBlbnZNYXAgPSB0aGlzLmVudk1hcDtcbiAgICAgICAgICAgIGlmKGVudk1hcCl7XG4gICAgICAgICAgICAgICAgdGhpcy5fc2V0RW52TWFwU2hhZGVyTGliKGVudk1hcCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuX3NldE1pcnJvck1hcFNoYWRlckxpYigpO1xuXG4gICAgICAgICAgICB0aGlzLnNoYWRlci5hZGRMaWIoQmFzaWNFbmRTaGFkZXJMaWIuY3JlYXRlKCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfc2V0TWFwU2hhZGVyTGliKCl7XG4gICAgICAgICAgICB2YXIgbWFwTWFuYWdlciA9IHRoaXMubWFwTWFuYWdlcixcbiAgICAgICAgICAgICAgICBtYXBDb3VudCA9IG1hcE1hbmFnZXIuZ2V0TWFwQ291bnQoKG1hcDpUZXh0dXJlKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICFtYXBNYW5hZ2VyLmlzTWlycm9yTWFwKG1hcCk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYobWFwQ291bnQgPiAwKXtcbiAgICAgICAgICAgICAgICBpZihtYXBDb3VudCA+IDEpe1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNoYWRlci5hZGRMaWIoTXVsdGlNYXBTaGFkZXJMaWIuY3JlYXRlKCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNoYWRlci5hZGRMaWIoQmFzaWNNYXBTaGFkZXJMaWIuY3JlYXRlKCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX3NldEVudk1hcFNoYWRlckxpYihlbnZNYXA6Q3ViZW1hcFRleHR1cmUpe1xuICAgICAgICAgICAgdGhpcy5hZGROb3JtYWxTaGFkZXJMaWIoKTtcblxuICAgICAgICAgICAgc3dpdGNoIChlbnZNYXAubW9kZSl7XG4gICAgICAgICAgICAgICAgY2FzZSBFbnZNYXBNb2RlLkJBU0lDOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNoYWRlci5hZGRMaWIoQmFzaWNFbnZNYXBGb3JCYXNpY1NoYWRlckxpYi5jcmVhdGUoKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgRW52TWFwTW9kZS5SRUZMRUNUSU9OOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNoYWRlci5hZGRMaWIoUmVmbGVjdGlvbkZvckJhc2ljU2hhZGVyTGliLmNyZWF0ZSgpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBFbnZNYXBNb2RlLlJFRlJBQ1RJT046XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2hhZGVyLmFkZExpYihSZWZyYWN0aW9uRm9yQmFzaWNTaGFkZXJMaWIuY3JlYXRlKCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIEVudk1hcE1vZGUuRlJFU05FTDpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zaGFkZXIuYWRkTGliKEZyZXNuZWxGb3JCYXNpY1NoYWRlckxpYi5jcmVhdGUoKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIExvZy5lcnJvcih0cnVlLCBMb2cuaW5mby5GVU5DX0lOVkFMSUQoXCJFbnZNYXBNb2RlXCIpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9zZXRNaXJyb3JNYXBTaGFkZXJMaWIoKXtcbiAgICAgICAgICAgIGlmKHRoaXMubWlycm9yTWFwKXtcbiAgICAgICAgICAgICAgICB0aGlzLnNoYWRlci5hZGRMaWIod2QuTWlycm9yRm9yQmFzaWNTaGFkZXJMaWIuY3JlYXRlKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuXG4iLCJtb2R1bGUgd2R7XG4gICAgZXhwb3J0IGNsYXNzIFNreWJveE1hdGVyaWFsIGV4dGVuZHMgTWF0ZXJpYWx7XG4gICAgICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlKCkge1xuICAgICAgICAgICAgdmFyIG9iaiA9IG5ldyB0aGlzKCk7XG5cbiAgICAgICAgICAgIG9iai5pbml0V2hlbkNyZWF0ZSgpO1xuXG4gICAgICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGluaXRXaGVuQ3JlYXRlKCl7XG4gICAgICAgICAgICB0aGlzLnNpZGUgPSBTaWRlLkJBQ0s7XG4gICAgICAgIH1cblxuICAgICAgICBwcm90ZWN0ZWQgYWRkU2hhZGVyTGliKCl7XG4gICAgICAgICAgICB0aGlzLnNoYWRlci5hZGRMaWIoU2t5Ym94U2hhZGVyTGliLmNyZWF0ZSgpKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuIiwibW9kdWxlIHdke1xuICAgIGV4cG9ydCBjbGFzcyBMaWdodE1hdGVyaWFsIGV4dGVuZHMgTWF0ZXJpYWx7XG4gICAgICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlKCkge1xuICAgICAgICAgICAgdmFyIG9iaiA9IG5ldyB0aGlzKCk7XG5cbiAgICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9kaWZmdXNlTWFwOlRleHR1cmUgPSBudWxsO1xuICAgICAgICBnZXQgZGlmZnVzZU1hcCgpe1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2RpZmZ1c2VNYXA7XG4gICAgICAgIH1cbiAgICAgICAgc2V0IGRpZmZ1c2VNYXAoZGlmZnVzZU1hcDpUZXh0dXJlKXtcbiAgICAgICAgICAgIHRoaXMuYWRkTWFwKGRpZmZ1c2VNYXAsIHtcbiAgICAgICAgICAgICAgICBzYW1wbGVyVmFyaWFibGVOYW1lOiBWYXJpYWJsZU5hbWVUYWJsZS5nZXRWYXJpYWJsZU5hbWUoXCJkaWZmdXNlTWFwXCIpXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdGhpcy5fZGlmZnVzZU1hcCA9IGRpZmZ1c2VNYXA7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9zcGVjdWxhck1hcDpUZXh0dXJlID0gbnVsbDtcbiAgICAgICAgZ2V0IHNwZWN1bGFyTWFwKCl7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fc3BlY3VsYXJNYXA7XG4gICAgICAgIH1cbiAgICAgICAgc2V0IHNwZWN1bGFyTWFwKHNwZWN1bGFyTWFwOlRleHR1cmUpe1xuICAgICAgICAgICAgdGhpcy5hZGRNYXAoc3BlY3VsYXJNYXAsIHtcbiAgICAgICAgICAgICAgICBzYW1wbGVyVmFyaWFibGVOYW1lOiBWYXJpYWJsZU5hbWVUYWJsZS5nZXRWYXJpYWJsZU5hbWUoXCJzcGVjdWxhck1hcFwiKVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHRoaXMuX3NwZWN1bGFyTWFwID0gc3BlY3VsYXJNYXA7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9ub3JtYWxNYXA6VGV4dHVyZSA9IG51bGw7XG4gICAgICAgIGdldCBub3JtYWxNYXAoKXtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9ub3JtYWxNYXA7XG4gICAgICAgIH1cbiAgICAgICAgc2V0IG5vcm1hbE1hcChub3JtYWxNYXA6VGV4dHVyZSl7XG4gICAgICAgICAgICB0aGlzLmFkZE1hcChub3JtYWxNYXAsIHtcbiAgICAgICAgICAgICAgICBzYW1wbGVyVmFyaWFibGVOYW1lOiBWYXJpYWJsZU5hbWVUYWJsZS5nZXRWYXJpYWJsZU5hbWUoXCJub3JtYWxNYXBcIilcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB0aGlzLl9ub3JtYWxNYXAgPSBub3JtYWxNYXA7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9zaGluaW5lc3M6bnVtYmVyID0gMzI7XG4gICAgICAgIGdldCBzaGluaW5lc3MoKXtcbiAgICAgICAgICAgIGlmKE51bWJlcih0aGlzLl9zaGluaW5lc3MpIDw9IDApe1xuICAgICAgICAgICAgICAgIHJldHVybiAzMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9zaGluaW5lc3M7XG4gICAgICAgIH1cbiAgICAgICAgc2V0IHNoaW5pbmVzcyhzaGluaW5lc3M6bnVtYmVyKXtcbiAgICAgICAgICAgIHRoaXMuX3NoaW5pbmVzcyA9IHNoaW5pbmVzcztcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX29wYWNpdHk6bnVtYmVyID0gMS4wO1xuICAgICAgICBnZXQgb3BhY2l0eSgpe1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX29wYWNpdHk7XG4gICAgICAgIH1cbiAgICAgICAgc2V0IG9wYWNpdHkob3BhY2l0eTpudW1iZXIpe1xuICAgICAgICAgICAgdGhpcy5zZXRCbGVuZEJ5T3BhY2l0eShvcGFjaXR5KTtcblxuICAgICAgICAgICAgdGhpcy5fb3BhY2l0eSA9IG9wYWNpdHk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgdHdvRFNoYWRvd01hcERhdGFzOndkQ2IuQ29sbGVjdGlvbjxUd29EU2hhZG93TWFwRGF0YT4gPSB3ZENiLkNvbGxlY3Rpb24uY3JlYXRlPFR3b0RTaGFkb3dNYXBEYXRhPigpO1xuICAgICAgICBwdWJsaWMgY3ViZW1hcFNoYWRvd01hcERhdGFzOndkQ2IuQ29sbGVjdGlvbjxDdWJlbWFwU2hhZG93TWFwRGF0YT4gPSB3ZENiLkNvbGxlY3Rpb24uY3JlYXRlPEN1YmVtYXBTaGFkb3dNYXBEYXRhPigpO1xuXG4gICAgICAgIHB1YmxpYyBidWlsZFR3b0RTaGFkb3dNYXBEYXRhOkJ1aWxkVHdvRFNoYWRvd01hcERhdGEgPSBudWxsO1xuICAgICAgICBwdWJsaWMgYnVpbGRDdWJlbWFwU2hhZG93TWFwRGF0YTpCdWlsZEN1YmVtYXBTaGFkb3dNYXBEYXRhID0gbnVsbDtcblxuXG4gICAgICAgIHB1YmxpYyBzcGVjdWxhcjpDb2xvciA9IENvbG9yLmNyZWF0ZShcIjB4MTExMTExXCIpO1xuXG4gICAgICAgIHByaXZhdGUgX3R3b0RTaGFkb3dNYXBTYW1wbGVySW5kZXg6bnVtYmVyID0gMDtcbiAgICAgICAgcHJpdmF0ZSBfY3ViZW1hcFNoYWRvd01hcFNhbXBsZXJJbmRleDpudW1iZXIgPSAwO1xuXG4gICAgICAgIHB1YmxpYyBhZGRUd29EU2hhZG93TWFwKHNoYWRvd01hcDpUd29EU2hhZG93TWFwVGV4dHVyZSl7XG4gICAgICAgICAgICB0aGlzLmFkZE1hcChzaGFkb3dNYXAsIHtcbiAgICAgICAgICAgICAgICBzYW1wbGVyRGF0YTogdGhpcy5fdHdvRFNoYWRvd01hcFNhbXBsZXJJbmRleFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLl90d29EU2hhZG93TWFwU2FtcGxlckluZGV4Kys7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgYWRkQ3ViZW1hcFNoYWRvd01hcChzaGFkb3dNYXA6Q3ViZW1hcFNoYWRvd01hcFRleHR1cmUpe1xuICAgICAgICAgICAgdGhpcy5hZGRNYXAoc2hhZG93TWFwLCB7XG4gICAgICAgICAgICAgICAgc2FtcGxlckRhdGE6IHRoaXMuX2N1YmVtYXBTaGFkb3dNYXBTYW1wbGVySW5kZXhcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5fY3ViZW1hcFNoYWRvd01hcFNhbXBsZXJJbmRleCsrO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGhhc1NoYWRvd01hcChtYXA6SVNoYWRvd01hcFRleHR1cmUpe1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubWFwTWFuYWdlci5oYXNNYXAoPFRleHR1cmU+bWFwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBhZGRUd29EU2hhZG93TWFwRGF0YShzaGFkb3dNYXBEYXRhOlR3b0RTaGFkb3dNYXBEYXRhKXtcbiAgICAgICAgICAgIHRoaXMudHdvRFNoYWRvd01hcERhdGFzLmFkZENoaWxkKHNoYWRvd01hcERhdGEpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGFkZEN1YmVtYXBTaGFkb3dNYXBEYXRhKHNoYWRvd01hcERhdGE6Q3ViZW1hcFNoYWRvd01hcERhdGEpe1xuICAgICAgICAgICAgdGhpcy5jdWJlbWFwU2hhZG93TWFwRGF0YXMuYWRkQ2hpbGQoc2hhZG93TWFwRGF0YSk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgY2xlYXJUd29EU2hhZG93TWFwRGF0YSgpe1xuICAgICAgICAgICAgdGhpcy50d29EU2hhZG93TWFwRGF0YXMucmVtb3ZlQWxsQ2hpbGRyZW4oKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBjbGVhckN1YmVtYXBTaGFkb3dNYXBEYXRhKCl7XG4gICAgICAgICAgICB0aGlzLmN1YmVtYXBTaGFkb3dNYXBEYXRhcy5yZW1vdmVBbGxDaGlsZHJlbigpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJvdGVjdGVkIGFkZFNoYWRlckxpYigpe1xuICAgICAgICAgICAgdmFyIGVudk1hcCA9IG51bGw7XG5cbiAgICAgICAgICAgIHRoaXMuYWRkTm9ybWFsU2hhZGVyTGliKCk7XG4gICAgICAgICAgICB0aGlzLnNoYWRlci5hZGRMaWIoTGlnaHRDb21tb25TaGFkZXJMaWIuY3JlYXRlKCkpO1xuICAgICAgICAgICAgdGhpcy5fc2V0UGhvbmdNYXBTaGFkZXJMaWIoKTtcbiAgICAgICAgICAgIHRoaXMuc2hhZGVyLmFkZExpYihMaWdodFNoYWRlckxpYi5jcmVhdGUoKSk7XG5cbiAgICAgICAgICAgIGVudk1hcCA9IHRoaXMuZW52TWFwO1xuICAgICAgICAgICAgaWYoZW52TWFwKXtcbiAgICAgICAgICAgICAgICB0aGlzLl9zZXRFbnZNYXBTaGFkZXJMaWIoZW52TWFwKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5zaGFkZXIuYWRkTGliKExpZ2h0RW5kU2hhZGVyTGliLmNyZWF0ZSgpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX3NldFBob25nTWFwU2hhZGVyTGliKCl7XG4gICAgICAgICAgICB2YXIgc2NlbmU6U2NlbmVEaXNwYXRjaGVyID0gRGlyZWN0b3IuZ2V0SW5zdGFuY2UoKS5zY2VuZTtcblxuICAgICAgICAgICAgaWYodGhpcy5fZGlmZnVzZU1hcCl7XG4gICAgICAgICAgICAgICAgdGhpcy5zaGFkZXIuYWRkTGliKERpZmZ1c2VNYXBTaGFkZXJMaWIuY3JlYXRlKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICB0aGlzLnNoYWRlci5hZGRMaWIoTm9EaWZmdXNlTWFwU2hhZGVyTGliLmNyZWF0ZSgpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYodGhpcy5fc3BlY3VsYXJNYXApe1xuICAgICAgICAgICAgICAgIHRoaXMuc2hhZGVyLmFkZExpYihTcGVjdWxhck1hcFNoYWRlckxpYi5jcmVhdGUoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgIHRoaXMuc2hhZGVyLmFkZExpYihOb1NwZWN1bGFyTWFwU2hhZGVyTGliLmNyZWF0ZSgpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYodGhpcy5fbm9ybWFsTWFwKXtcbiAgICAgICAgICAgICAgICB0aGlzLnNoYWRlci5hZGRMaWIoTm9ybWFsTWFwU2hhZGVyTGliLmNyZWF0ZSgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICAgICAgdGhpcy5zaGFkZXIuYWRkTGliKE5vTm9ybWFsTWFwU2hhZGVyTGliLmNyZWF0ZSgpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYoc2NlbmUuc2hhZG93TWFwLmVuYWJsZSAmJiAodGhpcy5faGFzVHdvRFNoYWRvd01hcCgpIHx8IHRoaXMuX2hhc0N1YmVtYXBTaGFkb3dNYXAoKSkpe1xuICAgICAgICAgICAgICAgIGlmKHRoaXMuX2hhc1R3b0RTaGFkb3dNYXAoKSl7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2hhZGVyLmFkZExpYihUd29EU2hhZG93TWFwU2hhZGVyTGliLmNyZWF0ZSgpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYodGhpcy5faGFzQ3ViZW1hcFNoYWRvd01hcCgpKXtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zaGFkZXIuYWRkTGliKEN1YmVtYXBTaGFkb3dNYXBTaGFkZXJMaWIuY3JlYXRlKCkpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXMuc2hhZGVyLmFkZExpYihUb3RhbFNoYWRvd01hcFNoYWRlckxpYi5jcmVhdGUoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgIHRoaXMuc2hhZGVyLmFkZExpYihOb1NoYWRvd01hcFNoYWRlckxpYi5jcmVhdGUoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9zZXRFbnZNYXBTaGFkZXJMaWIoZW52TWFwOkN1YmVtYXBUZXh0dXJlKXtcbiAgICAgICAgICAgIHN3aXRjaCAoZW52TWFwLm1vZGUpe1xuICAgICAgICAgICAgICAgIGNhc2UgRW52TWFwTW9kZS5CQVNJQzpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zaGFkZXIuYWRkTGliKEJhc2ljRW52TWFwRm9yTGlnaHRTaGFkZXJMaWIuY3JlYXRlKCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIEVudk1hcE1vZGUuUkVGTEVDVElPTjpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zaGFkZXIuYWRkTGliKFJlZmxlY3Rpb25Gb3JMaWdodFNoYWRlckxpYi5jcmVhdGUoKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgRW52TWFwTW9kZS5SRUZSQUNUSU9OOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNoYWRlci5hZGRMaWIoUmVmcmFjdGlvbkZvckxpZ2h0U2hhZGVyTGliLmNyZWF0ZSgpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBFbnZNYXBNb2RlLkZSRVNORUw6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2hhZGVyLmFkZExpYihGcmVzbmVsRm9yTGlnaHRTaGFkZXJMaWIuY3JlYXRlKCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBMb2cuZXJyb3IodHJ1ZSwgTG9nLmluZm8uRlVOQ19JTlZBTElEKFwiRW52TWFwTW9kZVwiKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfaGFzVHdvRFNoYWRvd01hcCgpe1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubWFwTWFuYWdlci5oYXNNYXAoKG1hcDpUZXh0dXJlKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1hcCBpbnN0YW5jZW9mIFR3b0RTaGFkb3dNYXBUZXh0dXJlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9oYXNDdWJlbWFwU2hhZG93TWFwKCl7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5tYXBNYW5hZ2VyLmhhc01hcCgobWFwOlRleHR1cmUpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbWFwIGluc3RhbmNlb2YgQ3ViZW1hcFNoYWRvd01hcFRleHR1cmU7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGV4cG9ydCB0eXBlIEJ1aWxkVHdvRFNoYWRvd01hcERhdGEgPSB7XG4gICAgICAgIHZwTWF0cml4RnJvbUxpZ2h0Ok1hdHJpeDRcbiAgICB9XG5cbiAgICBleHBvcnQgdHlwZSBUd29EU2hhZG93TWFwRGF0YSA9IHtcbiAgICAgICAgc2hhZG93QmlhczpudW1iZXIsXG4gICAgICAgIHNoYWRvd0RhcmtuZXNzOm51bWJlcixcbiAgICAgICAgc2hhZG93U2l6ZTpBcnJheTxudW1iZXI+LFxuICAgICAgICBsaWdodFBvczpWZWN0b3IzLFxuICAgICAgICB2cE1hdHJpeEZyb21MaWdodDpNYXRyaXg0XG4gICAgfVxuXG4gICAgZXhwb3J0IHR5cGUgQ3ViZW1hcFNoYWRvd01hcERhdGEgPSB7XG4gICAgICAgIHNoYWRvd0JpYXM6bnVtYmVyLFxuICAgICAgICBzaGFkb3dEYXJrbmVzczpudW1iZXIsXG4gICAgICAgIGxpZ2h0UG9zOlZlY3RvcjMsXG4gICAgICAgIGZhclBsYW5lOm51bWJlclxuICAgIH1cblxuICAgIGV4cG9ydCB0eXBlIEJ1aWxkQ3ViZW1hcFNoYWRvd01hcERhdGEgPSB7XG4gICAgICAgIGxpZ2h0UG9zOlZlY3RvcjMsXG4gICAgICAgIGZhclBsYW5lOiBudW1iZXJcbiAgICB9XG59XG5cbiIsIm1vZHVsZSB3ZHtcbiAgICBleHBvcnQgY2xhc3MgQ3VzdG9tTWF0ZXJpYWwgZXh0ZW5kcyBNYXRlcmlhbHtcbiAgICAgICAgcHVibGljIHN0YXRpYyBjcmVhdGUoKSB7XG4gICAgICAgICAgICB2YXIgb2JqID0gbmV3IHRoaXMoKTtcblxuICAgICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuIiwibW9kdWxlIHdke1xuICAgIGV4cG9ydCBlbnVtIFNoYWRpbmd7XG4gICAgICAgIEZMQVQsXG4gICAgICAgIFNNT09USFxuICAgIH1cbn1cbiIsIm1vZHVsZSB3ZHtcbiAgICBleHBvcnQgY2xhc3MgTWFwTWFuYWdlcntcbiAgICAgICAgcHVibGljIHN0YXRpYyBjcmVhdGUobWF0ZXJpYWw6TWF0ZXJpYWwpIHtcbiAgICAgICAgXHR2YXIgb2JqID0gbmV3IHRoaXMobWF0ZXJpYWwpO1xuXG4gICAgICAgIFx0cmV0dXJuIG9iajtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0cnVjdG9yKG1hdGVyaWFsOk1hdGVyaWFsKXtcbiAgICAgICAgICAgIHRoaXMuX21hdGVyaWFsID0gbWF0ZXJpYWw7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9tYXRlcmlhbDpNYXRlcmlhbCA9IG51bGw7XG4gICAgICAgIHByaXZhdGUgX3RleHR1cmVzOndkQ2IuSGFzaDxhbnk+ID0gd2RDYi5IYXNoLmNyZWF0ZTxhbnk+KCk7XG4gICAgICAgIHByaXZhdGUgX21pcnJvck1hcDpNaXJyb3JUZXh0dXJlID0gbnVsbDtcblxuICAgICAgICBwdWJsaWMgaW5pdCgpe1xuICAgICAgICAgICAgdGhpcy5fZ2V0TWFwTGlzdCgpLmZvckVhY2goKHRleHR1cmU6VGV4dHVyZSkgPT4ge1xuICAgICAgICAgICAgICAgIHRleHR1cmUuaW5pdCgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgYWRkTWFwKGFzc2V0OlRleHR1cmVBc3NldCk7XG4gICAgICAgIHB1YmxpYyBhZGRNYXAoYXNzZXQ6VGV4dHVyZUFzc2V0LCBvcHRpb246TWFwVmFyaWFibGVEYXRhKTtcbiAgICAgICAgcHVibGljIGFkZE1hcChtYXA6VGV4dHVyZSk7XG4gICAgICAgIHB1YmxpYyBhZGRNYXAobWFwOlRleHR1cmUsIG9wdGlvbjpNYXBWYXJpYWJsZURhdGEpO1xuXG4gICAgICAgIHB1YmxpYyBhZGRNYXAoLi4uYXJncyl7XG4gICAgICAgICAgICB2YXIgbWFwID0gbnVsbDtcbiAgICAgICAgICAgICAgICBpZihhcmdzWzBdIGluc3RhbmNlb2YgVGV4dHVyZUFzc2V0KXtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGFzc2V0OlRleHR1cmVBc3NldCA9IGFyZ3NbMF07XG5cbiAgICAgICAgICAgICAgICAgICAgbWFwID0gYXNzZXQudG9UZXh0dXJlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYoYXJnc1swXSBpbnN0YW5jZW9mIFRleHR1cmUpe1xuICAgICAgICAgICAgICAgICAgICBtYXAgPSBhcmdzWzBdO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYoYXJncy5sZW5ndGggPT09IDIpe1xuICAgICAgICAgICAgICAgIGxldCBvcHRpb24gPSBhcmdzWzFdO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5fc2V0TWFwT3B0aW9uKG1hcCwgb3B0aW9uKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbWFwLm1hdGVyaWFsID0gdGhpcy5fbWF0ZXJpYWw7XG4gICAgICAgICAgICB0aGlzLl90ZXh0dXJlcy5hcHBlbmRDaGlsZChcIm1hcFwiLCBtYXApO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGdldE1hcChpbmRleDpudW1iZXIpe1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3RleHR1cmVzLmdldENoaWxkKFwibWFwXCIpLmdldENoaWxkKGluZGV4KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBoYXNNYXAoZnVuYzooLi4uYXJncykgPT4gYm9vbGVhbik7XG4gICAgICAgIHB1YmxpYyBoYXNNYXAobWFwOlRleHR1cmUpO1xuXG4gICAgICAgIHB1YmxpYyBoYXNNYXAoLi4uYXJncyl7XG4gICAgICAgICAgICB2YXIgbWFwcyA9IG51bGw7XG5cbiAgICAgICAgICAgIG1hcHMgPSB0aGlzLl90ZXh0dXJlcy5nZXRDaGlsZChcIm1hcFwiKTtcblxuICAgICAgICAgICAgcmV0dXJuIG1hcHMgJiYgbWFwcy5oYXNDaGlsZChhcmdzWzBdKTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgcHVibGljIGdldE1hcENvdW50KCk7XG4gICAgICAgIHB1YmxpYyBnZXRNYXBDb3VudChmaWx0ZXJGdW5jOihtYXA6VGV4dHVyZSkgPT4gYm9vbGVhbik7XG5cbiAgICAgICAgcHVibGljIGdldE1hcENvdW50KC4uLmFyZ3Mpe1xuICAgICAgICAgICAgaWYoYXJncy5sZW5ndGggPT09IDApe1xuICAgICAgICAgICAgICAgIGxldCBtYXAgPSB0aGlzLl90ZXh0dXJlcy5nZXRDaGlsZChcIm1hcFwiKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBtYXAgPyBtYXAuZ2V0Q291bnQoKSA6IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgIGxldCBmaWx0ZXJGdW5jID0gYXJnc1swXSxcbiAgICAgICAgICAgICAgICAgICAgbWFwID0gdGhpcy5fdGV4dHVyZXMuZ2V0Q2hpbGQoXCJtYXBcIik7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gbWFwID8gbWFwLmZpbHRlcihmaWx0ZXJGdW5jKS5nZXRDb3VudCgpIDogMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBnZXRFbnZNYXAoKXtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9nZXRNYXA8Q3ViZW1hcFRleHR1cmU+KFwiZW52TWFwXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHNldEVudk1hcChlbnZNYXA6Q3ViZW1hcFRleHR1cmUpe1xuICAgICAgICAgICAgdGhpcy5fc2V0TWFwKFwiZW52TWFwXCIsIGVudk1hcCk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgZ2V0TWlycm9yTWFwKCl7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbWlycm9yTWFwO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHNldE1pcnJvck1hcChtaXJyb3JNYXA6TWlycm9yVGV4dHVyZSl7XG4gICAgICAgICAgICB0aGlzLmFkZE1hcChtaXJyb3JNYXAsIHtcbiAgICAgICAgICAgICAgICBzYW1wbGVyVmFyaWFibGVOYW1lOiBWYXJpYWJsZU5hbWVUYWJsZS5nZXRWYXJpYWJsZU5hbWUoXCJtaXJyb3JSZWZsZWN0aW9uTWFwXCIpXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdGhpcy5fbWlycm9yTWFwID0gbWlycm9yTWFwO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGlzTWlycm9yTWFwKG1hcDpUZXh0dXJlKXtcbiAgICAgICAgICAgIHJldHVybiBtYXAgPT09IHRoaXMuX21pcnJvck1hcDtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyByZW1vdmVBbGxDaGlsZHJlbigpe1xuICAgICAgICAgICAgdGhpcy5fdGV4dHVyZXMucmVtb3ZlQWxsQ2hpbGRyZW4oKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBkaXNwb3NlKCl7XG4gICAgICAgICAgICB0aGlzLl9nZXRNYXBMaXN0KCkuZm9yRWFjaCgodGV4dHVyZTpUZXh0dXJlKSA9PiB7XG4gICAgICAgICAgICAgICAgdGV4dHVyZS5kaXNwb3NlKCk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdGhpcy5yZW1vdmVBbGxDaGlsZHJlbigpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHVwZGF0ZSgpe1xuICAgICAgICAgICAgdGhpcy5fZ2V0TWFwTGlzdCgpXG4gICAgICAgICAgICAgICAgLmZpbHRlcigodGV4dHVyZTpUZXh0dXJlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0ZXh0dXJlIGluc3RhbmNlb2YgQmFzaWNUZXh0dXJlICYmIHRleHR1cmUubmVlZFVwZGF0ZTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5mb3JFYWNoKCh0ZXh0dXJlOkJhc2ljVGV4dHVyZSwgaW5kZXg6bnVtYmVyKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRleHR1cmUudXBkYXRlKGluZGV4KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBzZW5kRGF0YShwcm9ncmFtOlByb2dyYW0pe1xuICAgICAgICAgICAgdGhpcy5fZ2V0TWFwTGlzdCgpLmZvckVhY2goKHRleHR1cmU6VGV4dHVyZSwgaW5kZXg6bnVtYmVyKSA9PiB7XG4gICAgICAgICAgICAgICAgdmFyIHNhbXBsZXJOYW1lID0gdGV4dHVyZS5nZXRTYW1wbGVyTmFtZShpbmRleCksXG4gICAgICAgICAgICAgICAgICAgIHBvcyA9IHByb2dyYW0uZ2V0VW5pZm9ybUxvY2F0aW9uKHNhbXBsZXJOYW1lKTtcblxuICAgICAgICAgICAgICAgIGlmKHByb2dyYW0uaXNVbmlmb3JtRGF0YU5vdEV4aXN0QnlMb2NhdGlvbihwb3MpKXtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRleHR1cmUuYmluZFRvVW5pdChpbmRleCk7XG4gICAgICAgICAgICAgICAgdGV4dHVyZS5zZW5kRGF0YShwcm9ncmFtLCBwb3MsIGluZGV4KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfZ2V0TWFwTGlzdCgpe1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3RleHR1cmVzLnRvQ29sbGVjdGlvbigpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfZ2V0TWFwPFQ+KGtleTpzdHJpbmcpOlR7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fdGV4dHVyZXMuZ2V0Q2hpbGQoa2V5KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX3NldE1hcChrZXk6c3RyaW5nLCBtYXA6VGV4dHVyZSk7XG4gICAgICAgIHByaXZhdGUgX3NldE1hcChrZXk6c3RyaW5nLCBtYXA6VGV4dHVyZSwgb3B0aW9uOk1hcFZhcmlhYmxlRGF0YSk7XG5cbiAgICAgICAgcHJpdmF0ZSBfc2V0TWFwKC4uLmFyZ3Mpe1xuICAgICAgICAgICAgdmFyIGtleTpzdHJpbmcgPSBhcmdzWzBdLFxuICAgICAgICAgICAgICAgIG1hcDpUZXh0dXJlID0gYXJnc1sxXTtcblxuICAgICAgICAgICAgaWYoIW1hcCl7XG4gICAgICAgICAgICAgICAgdGhpcy5fcmVtb3ZlTWFwKGtleSwgbWFwKTtcblxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYoYXJndW1lbnRzLmxlbmd0aCA9PT0gMyl7XG4gICAgICAgICAgICAgICAgbGV0IG9wdGlvbjpNYXBWYXJpYWJsZURhdGEgPSBhcmdzWzFdO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5fc2V0TWFwT3B0aW9uKG1hcCwgb3B0aW9uKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbWFwLm1hdGVyaWFsID0gdGhpcy5fbWF0ZXJpYWw7XG5cbiAgICAgICAgICAgIHRoaXMuX3RleHR1cmVzLmFkZENoaWxkKGtleSwgbWFwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX3JlbW92ZU1hcChrZXk6c3RyaW5nLCBtYXA6VGV4dHVyZSl7XG4gICAgICAgICAgICB0aGlzLl90ZXh0dXJlcy5yZW1vdmVDaGlsZChrZXkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfc2V0TWFwT3B0aW9uKG1hcDpUZXh0dXJlLCBvcHRpb246TWFwVmFyaWFibGVEYXRhKXtcbiAgICAgICAgICAgIG1hcC52YXJpYWJsZURhdGEgPSBvcHRpb247XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJtb2R1bGUgd2R7XG4gICAgZXhwb3J0IGVudW0gQXNzZXRUeXBle1xuICAgICAgICBVTktOT1csXG4gICAgICAgIEZPTlRcbiAgICB9XG59XG4iLCJtb2R1bGUgd2R7XG4gICAgZXhwb3J0IGFic3RyYWN0IGNsYXNzIExvYWRlcntcbiAgICAgICAgcHJpdmF0ZSBfY29udGFpbmVyOndkQ2IuSGFzaDxzdHJpbmc+ID0gd2RDYi5IYXNoLmNyZWF0ZTxzdHJpbmc+KCk7XG5cbiAgICAgICAgcHVibGljIGxvYWQodXJsOnN0cmluZyk6d2RGcnAuU3RyZWFtO1xuICAgICAgICBwdWJsaWMgbG9hZCh1cmw6QXJyYXk8c3RyaW5nPik6d2RGcnAuU3RyZWFtO1xuICAgICAgICBwdWJsaWMgbG9hZCh1cmw6c3RyaW5nLCBpZDpzdHJpbmcpOndkRnJwLlN0cmVhbTtcbiAgICAgICAgcHVibGljIGxvYWQodXJsOkFycmF5PHN0cmluZz4sIGlkOnN0cmluZyk6d2RGcnAuU3RyZWFtO1xuXG5cbiAgICAgICAgcHVibGljIGxvYWQoLi4uYXJncyk6d2RGcnAuU3RyZWFte1xuICAgICAgICAgICAgdmFyIHVybCA9IGFyZ3NbMF0sXG4gICAgICAgICAgICAgICAgaWQgPSBudWxsLFxuICAgICAgICAgICAgICAgIHNlbGYgPSB0aGlzLFxuICAgICAgICAgICAgICAgIGRhdGEgPSBudWxsLFxuICAgICAgICAgICAgICAgIHN0cmVhbSA9IG51bGw7XG5cbiAgICAgICAgICAgIGlmKGFyZ3MubGVuZ3RoID09PSAxKXtcbiAgICAgICAgICAgICAgICBpZihKdWRnZVV0aWxzLmlzQXJyYXkodXJsKSl7XG4gICAgICAgICAgICAgICAgICAgIGlkID0gdXJsLmpvaW4oXCItXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgICAgICBpZCA9IHVybDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgIGlkID0gYXJnc1sxXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZGF0YSA9IHRoaXMuX2NvbnRhaW5lci5nZXRDaGlsZChpZCk7XG5cbiAgICAgICAgICAgIGlmKGRhdGEpe1xuICAgICAgICAgICAgICAgIHN0cmVhbSA9IHdkRnJwLmp1c3QoZGF0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgIHN0cmVhbSA9IHRoaXMubG9hZEFzc2V0KHVybCwgaWQpXG4gICAgICAgICAgICAgICAgICAgIC5kbygoZGF0YSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5fY29udGFpbmVyLmFkZENoaWxkKGlkLCBkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgKGVycikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5fZXJyb3JIYW5kbGUodXJsLCBlcnIpO1xuICAgICAgICAgICAgICAgICAgICB9LCBudWxsKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHN0cmVhbTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBnZXQoaWQ6c3RyaW5nKTphbnl7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fY29udGFpbmVyLmdldENoaWxkKGlkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBoYXMoaWQ6c3RyaW5nKXtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9jb250YWluZXIuaGFzQ2hpbGQoaWQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGRpc3Bvc2UoKXtcbiAgICAgICAgICAgIHRoaXMuX2NvbnRhaW5lci5yZW1vdmVBbGxDaGlsZHJlbigpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJvdGVjdGVkIGFic3RyYWN0IGxvYWRBc3NldCh1cmw6c3RyaW5nLCBpZDpzdHJpbmcpOndkRnJwLlN0cmVhbTtcbiAgICAgICAgcHJvdGVjdGVkIGFic3RyYWN0IGxvYWRBc3NldCh1cmw6QXJyYXk8c3RyaW5nPiwgaWQ6c3RyaW5nKTp3ZEZycC5TdHJlYW07XG5cbiAgICAgICAgcHJpdmF0ZSBfZXJyb3JIYW5kbGUocGF0aDpzdHJpbmcsIGVycjpzdHJpbmcpO1xuICAgICAgICBwcml2YXRlIF9lcnJvckhhbmRsZShwYXRoOkFycmF5PHN0cmluZz4sIGVycjpzdHJpbmcpO1xuXG5cbiAgICAgICAgcHJpdmF0ZSBfZXJyb3JIYW5kbGUoLi4uYXJncykge1xuICAgICAgICAgICAgdmFyIHBhdGggPSBudWxsLFxuICAgICAgICAgICAgICAgIGVyciA9IG51bGw7XG5cbiAgICAgICAgICAgIGlmKEp1ZGdlVXRpbHMuaXNBcnJheShhcmdzWzBdKSl7XG4gICAgICAgICAgICAgICAgcGF0aCA9IGFyZ3NbMF0uam9pbihcIixcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgIHBhdGggPSBhcmdzWzBdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZXJyID0gYXJnc1sxXTtcblxuICAgICAgICAgICAgTG9nLmxvZyhgbG9hZCAke3BhdGh9IGFzc2V0IGZhaWw6JHtlcnJ9YCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbiIsIm1vZHVsZSB3ZHtcbiAgICBleHBvcnQgY2xhc3MgR0xTTExvYWRlciBleHRlbmRzIExvYWRlcntcbiAgICAgICAgcHJpdmF0ZSBzdGF0aWMgX2luc3RhbmNlID0gbnVsbDtcblxuICAgICAgICBwdWJsaWMgc3RhdGljIGdldEluc3RhbmNlKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2luc3RhbmNlID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5faW5zdGFuY2UgPSBuZXcgdGhpcygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2luc3RhbmNlO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJvdGVjdGVkIGxvYWRBc3NldCh1cmw6c3RyaW5nLCBpZDpzdHJpbmcpOndkRnJwLlN0cmVhbTtcbiAgICAgICAgcHJvdGVjdGVkIGxvYWRBc3NldCh1cmw6QXJyYXk8c3RyaW5nPiwgaWQ6c3RyaW5nKTp3ZEZycC5TdHJlYW07XG5cbiAgICAgICAgQHJlcXVpcmUoZnVuY3Rpb24gKC4uLmFyZ3MpIHtcbiAgICAgICAgICAgIGFzc2VydCghSnVkZ2VVdGlscy5pc0FycmF5KGFyZ3NbMF0pLCBMb2cuaW5mby5GVU5DX01VU1RfQkUoXCJ1cmxcIiwgXCJzdHJpbmdcIikpO1xuICAgICAgICB9KVxuICAgICAgICBwcm90ZWN0ZWQgbG9hZEFzc2V0KC4uLmFyZ3MpOndkRnJwLlN0cmVhbSB7XG4gICAgICAgICAgICB2YXIgdXJsID0gYXJnc1swXTtcblxuICAgICAgICAgICAgcmV0dXJuIEFqYXhMb2FkZXIubG9hZCh1cmwsIFwidGV4dFwiKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsIm1vZHVsZSB3ZHtcbiAgICBkZWNsYXJlIHZhciBkb2N1bWVudDphbnk7XG5cbiAgICBleHBvcnQgY2xhc3MgSnNMb2FkZXIgZXh0ZW5kcyBMb2FkZXJ7XG4gICAgICAgIHByaXZhdGUgc3RhdGljIF9pbnN0YW5jZSA9IG51bGw7XG5cbiAgICAgICAgcHVibGljIHN0YXRpYyBnZXRJbnN0YW5jZSgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9pbnN0YW5jZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2luc3RhbmNlID0gbmV3IHRoaXMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9pbnN0YW5jZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByb3RlY3RlZCBsb2FkQXNzZXQodXJsOnN0cmluZywgaWQ6c3RyaW5nKTp3ZEZycC5TdHJlYW07XG4gICAgICAgIHByb3RlY3RlZCBsb2FkQXNzZXQodXJsOkFycmF5PHN0cmluZz4sIGlkOnN0cmluZyk6d2RGcnAuU3RyZWFtO1xuXG4gICAgICAgIEByZXF1aXJlKGZ1bmN0aW9uICguLi5hcmdzKSB7XG4gICAgICAgICAgICBhc3NlcnQoIUp1ZGdlVXRpbHMuaXNBcnJheShhcmdzWzBdKSwgTG9nLmluZm8uRlVOQ19NVVNUX0JFKFwidXJsXCIsIFwic3RyaW5nXCIpKTtcbiAgICAgICAgfSlcbiAgICAgICAgcHJvdGVjdGVkIGxvYWRBc3NldCguLi5hcmdzKTp3ZEZycC5TdHJlYW0ge1xuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzLFxuICAgICAgICAgICAgICAgIHVybCA9IGFyZ3NbMF07XG5cbiAgICAgICAgICAgIHJldHVybiB3ZEZycC5mcm9tUHJvbWlzZShuZXcgUlNWUC5Qcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgICAgICB2YXIgc2NyaXB0OmFueSA9IHNlbGYuX2NyZWF0ZVNjcmlwdCgpO1xuXG4gICAgICAgICAgICAgICAgLy8gdXNlIGFzeW5jPWZhbHNlIHRvIGZvcmNlIHNjcmlwdHMgdG8gZXhlY3V0ZSBpbiBvcmRlclxuICAgICAgICAgICAgICAgIHNjcmlwdC5hc3luYyA9IGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgc2NyaXB0LmFkZEV2ZW50TGlzdGVuZXIoXCJlcnJvclwiLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgICAvL3RvZG8gZ2V0IGVycm9yIG1lc3NhZ2UgZnJvbSBlKEV2ZW50KT9cbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGBsb2FkIGpzIGZpbGUgZXJyb3IuIHVybDoke3VybH1gKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIC8vSUVcbiAgICAgICAgICAgICAgICBpZiAoc2NyaXB0LnJlYWR5U3RhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgc2NyaXB0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzY3JpcHQucmVhZHlTdGF0ZSA9PT0gXCJsb2FkZWRcIiB8fCBzY3JpcHQucmVhZHlTdGF0ZSA9PT0gXCJjb21wbGV0ZVwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NyaXB0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSh1cmwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc2NyaXB0Lm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUodXJsKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvKiEgc2V0IHRoZSBzcmMgYXR0cmlidXRlIGFmdGVyIHRoZSBvbmxvYWQgY2FsbGJhY2sgaXMgc2V0LCB0byBhdm9pZCBhbiBpbnN0YW50IGxvYWRpbmcgZmFpbGluZyB0byBmaXJlIHRoZSBjYWxsYmFjayAqL1xuICAgICAgICAgICAgICAgIHNjcmlwdC5zcmMgPSB1cmw7XG5cbiAgICAgICAgICAgICAgICB0aGlzLl9hcHBlbmRTY3JpcHQoc2NyaXB0KTtcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX2NyZWF0ZVNjcmlwdCgpIHtcbiAgICAgICAgICAgIHZhciBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpO1xuXG4gICAgICAgICAgICBzY3JpcHQudHlwZSA9IFwidGV4dC9qYXZhc2NyaXB0XCI7XG5cbiAgICAgICAgICAgIHJldHVybiBzY3JpcHQ7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9hcHBlbmRTY3JpcHQoc2NyaXB0KSB7XG4gICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImhlYWRcIilbMF0uYXBwZW5kQ2hpbGQoc2NyaXB0KTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsIm1vZHVsZSB3ZHtcbiAgICBleHBvcnQgY2xhc3MgVmlkZW9Mb2FkZXIgZXh0ZW5kcyBMb2FkZXJ7XG4gICAgICAgIHByaXZhdGUgc3RhdGljIF9pbnN0YW5jZSA9IG51bGw7XG5cbiAgICAgICAgcHVibGljIHN0YXRpYyBnZXRJbnN0YW5jZSgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9pbnN0YW5jZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2luc3RhbmNlID0gbmV3IHRoaXMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9pbnN0YW5jZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByb3RlY3RlZCBsb2FkQXNzZXQodXJsOnN0cmluZywgaWQ6c3RyaW5nKTp3ZEZycC5TdHJlYW07XG4gICAgICAgIHByb3RlY3RlZCBsb2FkQXNzZXQodXJsOkFycmF5PHN0cmluZz4sIGlkOnN0cmluZyk6d2RGcnAuU3RyZWFtO1xuXG4gICAgICAgIHByb3RlY3RlZCBsb2FkQXNzZXQoLi4uYXJncyk6d2RGcnAuU3RyZWFtIHtcbiAgICAgICAgICAgIHZhciB1cmxBcnIgPSBudWxsO1xuXG4gICAgICAgICAgICBpZihKdWRnZVV0aWxzLmlzU3RyaW5nKGFyZ3NbMF0pKXtcbiAgICAgICAgICAgICAgICB1cmxBcnIgPSBbYXJnc1swXV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgIHVybEFyciA9IGFyZ3NbMF07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB3ZEZycC5mcm9tUHJvbWlzZShuZXcgUlNWUC5Qcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgICAgICBWaWRlby5jcmVhdGUoe1xuICAgICAgICAgICAgICAgICAgICB1cmxBcnI6dXJsQXJyLFxuICAgICAgICAgICAgICAgICAgICBvbkxvYWQ6ICh2aWRlbzpWaWRlbykgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShWaWRlb1RleHR1cmVBc3NldC5jcmVhdGUodmlkZW8pKTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgb25FcnJvcjogKGVycjpzdHJpbmcpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbiIsIm1vZHVsZSB3ZHtcbiAgICBleHBvcnQgY2xhc3MgVGV4dHVyZUxvYWRlciBleHRlbmRzIExvYWRlcntcbiAgICAgICAgcHJpdmF0ZSBzdGF0aWMgX2luc3RhbmNlID0gbnVsbDtcblxuICAgICAgICBwdWJsaWMgc3RhdGljIGdldEluc3RhbmNlKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2luc3RhbmNlID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5faW5zdGFuY2UgPSBuZXcgdGhpcygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2luc3RhbmNlO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJvdGVjdGVkIGxvYWRBc3NldCh1cmw6c3RyaW5nLCBpZDpzdHJpbmcpOndkRnJwLlN0cmVhbTtcbiAgICAgICAgcHJvdGVjdGVkIGxvYWRBc3NldCh1cmw6QXJyYXk8c3RyaW5nPiwgaWQ6c3RyaW5nKTp3ZEZycC5TdHJlYW07XG5cbiAgICAgICAgQHJlcXVpcmUoZnVuY3Rpb24gKC4uLmFyZ3MpIHtcbiAgICAgICAgICAgIGFzc2VydCghSnVkZ2VVdGlscy5pc0FycmF5KGFyZ3NbMF0pLCBMb2cuaW5mby5GVU5DX01VU1RfQkUoXCJ1cmxcIiwgXCJzdHJpbmdcIikpO1xuICAgICAgICB9KVxuICAgICAgICBwcm90ZWN0ZWQgbG9hZEFzc2V0KC4uLmFyZ3MpOndkRnJwLlN0cmVhbSB7XG4gICAgICAgICAgICB2YXIgZXh0bmFtZSA9IG51bGwsXG4gICAgICAgICAgICAgICAgc3RyZWFtID0gbnVsbCxcbiAgICAgICAgICAgICAgICB1cmwgPSBhcmdzWzBdO1xuXG4gICAgICAgICAgICBleHRuYW1lID0gd2RDYi5QYXRoVXRpbHMuZXh0bmFtZSh1cmwpLnRvTG93ZXJDYXNlKCk7XG5cbiAgICAgICAgICAgIHN3aXRjaCAoZXh0bmFtZSl7XG4gICAgICAgICAgICAgICAgY2FzZSBcIi5qcGdcIjpcbiAgICAgICAgICAgICAgICBjYXNlIFwiLmpwZWdcIjpcbiAgICAgICAgICAgICAgICBjYXNlIFwiLmdpZlwiOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiLmJtcFwiOlxuICAgICAgICAgICAgICAgICAgICAvL3RvZG8gaXMgUkdCP1xuICAgICAgICAgICAgICAgICAgICBzdHJlYW0gPSAgSW1hZ2VMb2FkZXIubG9hZCh1cmwpXG4gICAgICAgICAgICAgICAgICAgICAgICAubWFwKChpbWFnZTpIVE1MSW1hZ2VFbGVtZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFzc2V0ID0gSW1hZ2VUZXh0dXJlQXNzZXQuY3JlYXRlKGltYWdlKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFzc2V0LmZvcm1hdCA9IFRleHR1cmVGb3JtYXQuUkdCO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFzc2V0O1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCIucG5nXCI6XG4gICAgICAgICAgICAgICAgICAgIHN0cmVhbSA9ICBJbWFnZUxvYWRlci5sb2FkKHVybClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5tYXAoKGltYWdlOkhUTUxJbWFnZUVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gSW1hZ2VUZXh0dXJlQXNzZXQuY3JlYXRlKGltYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwiLmRkc1wiOlxuICAgICAgICAgICAgICAgICAgICBzdHJlYW0gPSBDb21wcmVzc2VkVGV4dHVyZUxvYWRlci5sb2FkKHVybCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIExvZy5lcnJvcih0cnVlLCBMb2cuaW5mby5GVU5DX05PVF9TVVBQT1JUKGV4dG5hbWUpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBzdHJlYW07XG4gICAgICAgIH1cbiAgICB9XG59XG5cbiIsIm1vZHVsZSB3ZHtcbiAgICBleHBvcnQgY2xhc3MgSW1hZ2VMb2FkZXJ7XG4gICAgICAgIHB1YmxpYyBzdGF0aWMgbG9hZCh1cmw6c3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gd2RGcnAuZnJvbVByb21pc2UobmV3IFJTVlAuUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICAgICAgdmFyIGltZyA9IG51bGw7XG5cbiAgICAgICAgICAgICAgICBpbWcgPSBuZXcgcm9vdC5JbWFnZSgpO1xuICAgICAgICAgICAgICAgIC8qIVxuICAgICAgICAgICAgICAgICDnu4/ov4flr7nlpJrkuKrmtY/op4jlmajniYjmnKznmoTmtYvor5XvvIzlj5HnjrBpZeOAgW9wZXJh5LiL77yM5b2T5Zu+54mH5Yqg6L296L+H5LiA5qyh5Lul5ZCO77yM5aaC5p6c5YaN5pyJ5a+56K+l5Zu+54mH55qE6K+35rGC5pe277yM55Sx5LqO5rWP6KeI5Zmo5bey57uP57yT5a2Y5L2P6L+Z5byg5Zu+XG5cbiAgICAgICAgICAgICAgICAg54mH5LqG77yM5LiN5Lya5YaN5Y+R6LW35LiA5qyh5paw55qE6K+35rGC77yM6ICM5piv55u05o6l5LuO57yT5a2Y5Lit5Yqg6L296L+H5p2l44CC5a+55LqOIGZpcmVmb3jlkoxzYWZhcmnvvIzlroPku6zor5Xlm77kvb/ov5nkuKTnp43liqDovb3mlrnlvI/lr7nnlKjmiLfpgI/mmI7vvIzlkIzmoLdcblxuICAgICAgICAgICAgICAgICDkvJrlvJXotbflm77niYfnmoRvbmxvYWTkuovku7bvvIzogIxpZeWSjG9wZXJh5YiZ5b+955Wl5LqG6L+Z56eN5ZCM5LiA5oCn77yM5LiN5Lya5byV6LW35Zu+54mH55qEb25sb2Fk5LqL5Lu277yM5Zug5q2k5LiK6L6555qE5Luj56CB5Zyo5a6D5Lus6YeM6L655LiN6IO95b6X5Lul5a6e546w5pWI5p6c44CCXG5cbiAgICAgICAgICAgICAgICAg56Gu5a6e77yM5ZyoaWXvvIxvcGVyYeS4i++8jOWvueS6jue8k+WtmOWbvueJh+eahOWIneWni+eKtuaAge+8jOS4jmZpcmVmb3jlkoxzYWZhcmnvvIxjaHJvbWXkuIvmmK/kuI3kuIDmoLfnmoTvvIjmnInlhbTotqPnmoTor53vvIzlj6/ku6XlnKjkuI3lkIzmtY/op4jlmajkuIvvvIzmtYvor5XkuIDkuIvlnKjnu5lpbWfnmoRzcmPotYvlgLznvJPlrZjlm77niYfnmoR1cmzkuYvliY3vvIxpbWfnmoTnirbmgIHvvInvvIxcbiAgICAgICAgICAgICAgICAg5L2G5piv5a+5b25sb2Fk5LqL5Lu255qE6Kem5Y+R77yM5Y205piv5LiA6Ie055qE77yM5LiN566h5piv5LuA5LmI5rWP6KeI5Zmo44CCXG5cbiAgICAgICAgICAgICAgICAg5Lqn55Sf6L+Z5Liq6Zeu6aKY55qE5qC55pys5Y6f5Zug5Zyo5LqO77yMaW1n55qEc3Jj6LWL5YC85LiOIG9ubG9hZOS6i+S7tueahOe7keWumu+8jOmhuuW6j+S4jeWvue+8iOWcqGll5ZKMb3BlcmHkuIvvvIzlhYjotYvlgLxzcmPvvIzlho3otYvlgLxvbmxvYWTvvIzlm6DkuLrmmK/nvJPlrZjlm77niYfvvIzlsLHplJnov4fkuoZvbmxvYWTkuovku7bnmoTop6blj5HvvInjgIJcbiAgICAgICAgICAgICAgICAg5bqU6K+l5YWI57uR5a6ab25sb2Fk5LqL5Lu277yM54S25ZCO5YaN57uZc3Jj6LWL5YC844CCXG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgaW1nLm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vbmxvYWQgPSBudWxsOyAgICAgLy/op6PlhrNpZeWGheWtmOazhOmcslxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGltZyk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBpbWcub25lcnJvciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KFwiZXJyb3JcIik7XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIGltZy5zcmMgPSB1cmw7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJtb2R1bGUgd2R7XG4gICAgZXhwb3J0IGNsYXNzIEFqYXhMb2FkZXJ7XG4gICAgICAgIHB1YmxpYyBzdGF0aWMgbG9hZCh1cmw6c3RyaW5nLCBkYXRhVHlwZTpzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiB3ZEZycC5mcm9tUHJvbWlzZShuZXcgUlNWUC5Qcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgICAgICB3ZENiLkFqYXhVdGlscy5hamF4KHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJnZXRcIixcbiAgICAgICAgICAgICAgICAgICAgLy9hc3luYzogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgdXJsOiB1cmwsXG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnRUeXBlOiBcInRleHQvcGxhaW47IGNoYXJzZXQ9dXRmLThcIixcbiAgICAgICAgICAgICAgICAgICAgZGF0YVR5cGU6IGRhdGFUeXBlLFxuICAgICAgICAgICAgICAgICAgICAvL2NhY2hlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogKGRhdGEpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGVycm9yOiAoWE1MSHR0cFJlcXVlc3QsIGVycm9yVGhyb3duKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoYHVybDoke3VybH1cXG5yZWFkeVN0YXRlOiR7WE1MSHR0cFJlcXVlc3QucmVhZHlTdGF0ZX1cXG5zdGF0dXM6JHtYTUxIdHRwUmVxdWVzdC5zdGF0dXN9XFxubWVzc2FnZToke2Vycm9yVGhyb3duLm1lc3NhZ2V9XFxucmVzcG9uc2VUZXh0OiR7WE1MSHR0cFJlcXVlc3QucmVzcG9uc2VUZXh0fWApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbiIsIm1vZHVsZSB3ZHtcbiAgICBleHBvcnQgY2xhc3MgTW9kZWxMb2FkZXJVdGlsc3tcbiAgICAgICAgcHVibGljIHN0YXRpYyBnZXRQYXRoKGZpbGVQYXRoOnN0cmluZywgbWFwVXJsOnN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIGAke3dkQ2IuUGF0aFV0aWxzLmRpcm5hbWUoZmlsZVBhdGgpfS8ke21hcFVybH1gO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4iLCJtb2R1bGUgd2R7XG4gICAgZXhwb3J0IGNsYXNzIENvbXByZXNzZWRUZXh0dXJlTG9hZGVye1xuICAgICAgICBwdWJsaWMgc3RhdGljIGxvYWQodXJsOnN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIEFqYXhMb2FkZXIubG9hZCh1cmwsIFwiYXJyYXlidWZmZXJcIilcbiAgICAgICAgICAgICAgICAubWFwKChkYXRhOmFueSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdGV4RGF0YXM6RERTRGF0YSA9IEREU1BhcnNlci5wYXJzZShkYXRhLCB0cnVlKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFzc2V0ID0gQ29tcHJlc3NlZFRleHR1cmVBc3NldC5jcmVhdGUoKTtcblxuICAgICAgICAgICAgICAgICAgICBhc3NldC53aWR0aCA9IHRleERhdGFzLndpZHRoO1xuICAgICAgICAgICAgICAgICAgICBhc3NldC5oZWlnaHQgPSB0ZXhEYXRhcy5oZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgIGFzc2V0Lm1pcG1hcHMgPSB0ZXhEYXRhcy5taXBtYXBzO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICh0ZXhEYXRhcy5taXBtYXBDb3VudCA9PSAxKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFzc2V0Lm1pbkZpbHRlciA9IFRleHR1cmVGaWx0ZXJNb2RlLkxJTkVBUjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGFzc2V0LmZvcm1hdCA9IHRoaXMuX2dldENvbXByZXNzZWRGb3JtYXQodGV4RGF0YXMuZm9ybWF0KTtcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXNzZXQ7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuXG5cbiAgICAgICAgLy90b2RvIHN1cHBvcnQgcHZyXG4gICAgICAgIHByaXZhdGUgc3RhdGljIF9nZXRDb21wcmVzc2VkRm9ybWF0KGZvcm1hdDpUZXh0dXJlRm9ybWF0KXtcbiAgICAgICAgICAgIHZhciBleHRlbnNpb24gPSBHUFVEZXRlY3Rvci5nZXRJbnN0YW5jZSgpLmV4dGVuc2lvbkNvbXByZXNzZWRUZXh0dXJlUzNUQztcblxuICAgICAgICAgICAgaWYoZm9ybWF0ID09PSBUZXh0dXJlRm9ybWF0LlJHQkEpe1xuICAgICAgICAgICAgICAgIHJldHVybiBmb3JtYXQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmKCFleHRlbnNpb24pe1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBzd2l0Y2ggKGZvcm1hdCl7XG4gICAgICAgICAgICAgICAgY2FzZSBUZXh0dXJlRm9ybWF0LlJHQl9TM1RDX0RYVDE6XG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdCA9IGV4dGVuc2lvbi5DT01QUkVTU0VEX1JHQl9TM1RDX0RYVDFfRVhUO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFRleHR1cmVGb3JtYXQuUkdCQV9TM1RDX0RYVDE6XG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdCA9IGV4dGVuc2lvbi5DT01QUkVTU0VEX1JHQkFfUzNUQ19EWFQxX0VYVDtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBUZXh0dXJlRm9ybWF0LlJHQkFfUzNUQ19EWFQzOlxuICAgICAgICAgICAgICAgICAgICBmb3JtYXQgPSBleHRlbnNpb24uQ09NUFJFU1NFRF9SR0JBX1MzVENfRFhUM19FWFQ7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgVGV4dHVyZUZvcm1hdC5SR0JBX1MzVENfRFhUNTpcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0ID0gZXh0ZW5zaW9uLkNPTVBSRVNTRURfUkdCQV9TM1RDX0RYVDVfRVhUO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGZvcm1hdDtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuIiwibW9kdWxlIHdke1xuICAgIGRlY2xhcmUgdmFyIE1hdGg6YW55O1xuXG4gICAgY29uc3QgRERTX01BR0lDID0gMHgyMDUzNDQ0NCxcblxuICAgICAgICBERFNEX0NBUFMgPSAweDEsXG4gICAgICAgIEREU0RfSEVJR0hUID0gMHgyLFxuICAgICAgICBERFNEX1dJRFRIID0gMHg0LFxuICAgICAgICBERFNEX1BJVENIID0gMHg4LFxuICAgICAgICBERFNEX1BJWEVMRk9STUFUID0gMHgxMDAwLFxuICAgICAgICBERFNEX01JUE1BUENPVU5UID0gMHgyMDAwMCxcbiAgICAgICAgRERTRF9MSU5FQVJTSVpFID0gMHg4MDAwMCxcbiAgICAgICAgRERTRF9ERVBUSCA9IDB4ODAwMDAwLFxuXG4gICAgICAgIEREU0NBUFNfQ09NUExFWCA9IDB4OCxcbiAgICAgICAgRERTQ0FQU19NSVBNQVAgPSAweDQwMDAwMCxcbiAgICAgICAgRERTQ0FQU19URVhUVVJFID0gMHgxMDAwLFxuXG4gICAgICAgIEREU0NBUFMyX0NVQkVNQVAgPSAweDIwMCxcbiAgICAgICAgRERTQ0FQUzJfQ1VCRU1BUF9QT1NJVElWRVggPSAweDQwMCxcbiAgICAgICAgRERTQ0FQUzJfQ1VCRU1BUF9ORUdBVElWRVggPSAweDgwMCxcbiAgICAgICAgRERTQ0FQUzJfQ1VCRU1BUF9QT1NJVElWRVkgPSAweDEwMDAsXG4gICAgICAgIEREU0NBUFMyX0NVQkVNQVBfTkVHQVRJVkVZID0gMHgyMDAwLFxuICAgICAgICBERFNDQVBTMl9DVUJFTUFQX1BPU0lUSVZFWiA9IDB4NDAwMCxcbiAgICAgICAgRERTQ0FQUzJfQ1VCRU1BUF9ORUdBVElWRVogPSAweDgwMDAsXG4gICAgICAgIEREU0NBUFMyX1ZPTFVNRSA9IDB4MjAwMDAwLFxuXG4gICAgICAgIEREUEZfQUxQSEFQSVhFTFMgPSAweDEsXG4gICAgICAgIEREUEZfQUxQSEEgPSAweDIsXG4gICAgICAgIEREUEZfRk9VUkNDID0gMHg0LFxuICAgICAgICBERFBGX1JHQiA9IDB4NDAsXG4gICAgICAgIEREUEZfWVVWID0gMHgyMDAsXG4gICAgICAgIEREUEZfTFVNSU5BTkNFID0gMHgyMDAwMDtcblxuICAgIGV4cG9ydCBjbGFzcyBERFNQYXJzZXJ7XG4gICAgICAgIHB1YmxpYyBzdGF0aWMgcGFyc2UoYnVmZmVyOmFueSwgbG9hZE1pcG1hcHM6Ym9vbGVhbj10cnVlKXtcbiAgICAgICAgICAgIHZhciBkZHMgPSBuZXcgRERTRGF0YSgpLFxuICAgICAgICAgICAgICAgIEZPVVJDQ19EWFQxID0gdGhpcy5fZm91ckNDVG9JbnQzMihcIkRYVDFcIiksXG4gICAgICAgICAgICAgICAgRk9VUkNDX0RYVDMgPSB0aGlzLl9mb3VyQ0NUb0ludDMyKFwiRFhUM1wiKSxcbiAgICAgICAgICAgICAgICBGT1VSQ0NfRFhUNSA9IHRoaXMuX2ZvdXJDQ1RvSW50MzIoXCJEWFQ1XCIpLFxuXG4gICAgICAgICAgICAgICAgaGVhZGVyTGVuZ3RoSW50ID0gMzEsIC8vIFRoZSBoZWFkZXIgbGVuZ3RoIGluIDMyIGJpdCBpbnQsXG5cbiAgICAgICAgICAgIC8vIE9mZnNldHMgaW50byB0aGUgaGVhZGVyIGFycmF5XG5cbiAgICAgICAgICAgICAgICBvZmZfbWFnaWMgPSAwLFxuXG4gICAgICAgICAgICAgICAgb2ZmX3NpemUgPSAxLFxuICAgICAgICAgICAgICAgIG9mZl9mbGFncyA9IDIsXG4gICAgICAgICAgICAgICAgb2ZmX2hlaWdodCA9IDMsXG4gICAgICAgICAgICAgICAgb2ZmX3dpZHRoID0gNCxcblxuICAgICAgICAgICAgICAgIG9mZl9taXBtYXBDb3VudCA9IDcsXG5cbiAgICAgICAgICAgICAgICBvZmZfcGZGbGFncyA9IDIwLFxuICAgICAgICAgICAgICAgIG9mZl9wZkZvdXJDQyA9IDIxLFxuICAgICAgICAgICAgICAgIG9mZl9SR0JCaXRDb3VudCA9IDIyLFxuICAgICAgICAgICAgICAgIG9mZl9SQml0TWFzayA9IDIzLFxuICAgICAgICAgICAgICAgIG9mZl9HQml0TWFzayA9IDI0LFxuICAgICAgICAgICAgICAgIG9mZl9CQml0TWFzayA9IDI1LFxuICAgICAgICAgICAgICAgIG9mZl9BQml0TWFzayA9IDI2LFxuXG4gICAgICAgICAgICAgICAgb2ZmX2NhcHMgPSAyNyxcbiAgICAgICAgICAgICAgICBvZmZfY2FwczIgPSAyOCxcbiAgICAgICAgICAgICAgICBvZmZfY2FwczMgPSAyOSxcbiAgICAgICAgICAgICAgICBvZmZfY2FwczQgPSAzMCxcbiAgICAgICAgICAgIC8vIFBhcnNlIGhlYWRlclxuICAgICAgICAgICAgICAgIGhlYWRlcjpJbnQzMkFycmF5ID0gbmV3IEludDMyQXJyYXkoIGJ1ZmZlciwgMCwgaGVhZGVyTGVuZ3RoSW50ICksXG4gICAgICAgICAgICAgICAgYmxvY2tCeXRlcyA9IG51bGwsXG4gICAgICAgICAgICAgICAgZm91ckNDID0gbnVsbCxcbiAgICAgICAgICAgICAgICBpc1JHQkFVbmNvbXByZXNzZWQgPSBudWxsLFxuICAgICAgICAgICAgICAgIGRhdGFPZmZzZXQgPSBudWxsLFxuICAgICAgICAgICAgICAgIHdpZHRoID0gbnVsbCxcbiAgICAgICAgICAgICAgICBoZWlnaHQgPSBudWxsLFxuICAgICAgICAgICAgICAgIGZhY2VzID0gbnVsbDtcblxuXG4gICAgICAgICAgICBpZiAoIGhlYWRlclsgb2ZmX21hZ2ljIF0gIT09IEREU19NQUdJQyApIHtcbiAgICAgICAgICAgICAgICBMb2cuZXJyb3IodHJ1ZSwgXCJJbnZhbGlkIG1hZ2ljIG51bWJlciBpbiBERFMgaGVhZGVyLlwiICk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRkcztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCA8YW55PighaGVhZGVyWyBvZmZfcGZGbGFncyBdKSAmIEREUEZfRk9VUkNDICkge1xuICAgICAgICAgICAgICAgIExvZy5lcnJvcih0cnVlLCBcIlVuc3VwcG9ydGVkIGZvcm1hdCwgbXVzdCBjb250YWluIGEgRm91ckNDIGNvZGUuXCIgKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZGRzO1xuICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgIGZvdXJDQyA9IGhlYWRlclsgb2ZmX3BmRm91ckNDIF07XG5cbiAgICAgICAgICAgIGlzUkdCQVVuY29tcHJlc3NlZCA9IGZhbHNlO1xuXG4gICAgICAgICAgICBzd2l0Y2ggKCBmb3VyQ0MgKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBGT1VSQ0NfRFhUMTpcbiAgICAgICAgICAgICAgICAgICAgYmxvY2tCeXRlcyA9IDg7XG4gICAgICAgICAgICAgICAgICAgIGRkcy5mb3JtYXQgPSBUZXh0dXJlRm9ybWF0LlJHQl9TM1RDX0RYVDE7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgRk9VUkNDX0RYVDM6XG4gICAgICAgICAgICAgICAgICAgIGJsb2NrQnl0ZXMgPSAxNjtcbiAgICAgICAgICAgICAgICAgICAgZGRzLmZvcm1hdCA9IFRleHR1cmVGb3JtYXQuUkdCQV9TM1RDX0RYVDM7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgRk9VUkNDX0RYVDU6XG4gICAgICAgICAgICAgICAgICAgIGJsb2NrQnl0ZXMgPSAxNjtcbiAgICAgICAgICAgICAgICAgICAgZGRzLmZvcm1hdCA9IFRleHR1cmVGb3JtYXQuUkdCQV9TM1RDX0RYVDU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIGlmICggaGVhZGVyW29mZl9SR0JCaXRDb3VudF0gPT0gMzJcbiAgICAgICAgICAgICAgICAgICAgICAgICYmIGhlYWRlcltvZmZfUkJpdE1hc2tdJjB4ZmYwMDAwXG4gICAgICAgICAgICAgICAgICAgICAgICAmJiBoZWFkZXJbb2ZmX0dCaXRNYXNrXSYweGZmMDBcbiAgICAgICAgICAgICAgICAgICAgICAgICYmIGhlYWRlcltvZmZfQkJpdE1hc2tdJjB4ZmZcbiAgICAgICAgICAgICAgICAgICAgICAgICYmIGhlYWRlcltvZmZfQUJpdE1hc2tdJjB4ZmYwMDAwMDAgICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaXNSR0JBVW5jb21wcmVzc2VkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJsb2NrQnl0ZXMgPSA2NDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRkcy5mb3JtYXQgPSBUZXh0dXJlRm9ybWF0LlJHQkE7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBMb2cuZXJyb3IodHJ1ZSwgXCJVbnN1cHBvcnRlZCBGb3VyQ0MgY29kZSBcIiArIHRoaXMuX2ludDMyVG9Gb3VyQ0MoIGZvdXJDQyApICk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGRzO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGRkcy5taXBtYXBDb3VudCA9IDE7XG5cbiAgICAgICAgICAgIGlmICggaGVhZGVyWyBvZmZfZmxhZ3MgXSAmIEREU0RfTUlQTUFQQ09VTlQgJiYgbG9hZE1pcG1hcHMgIT09IGZhbHNlICkge1xuICAgICAgICAgICAgICAgIGRkcy5taXBtYXBDb3VudCA9IE1hdGgubWF4KCAxLCBoZWFkZXJbIG9mZl9taXBtYXBDb3VudCBdICk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vVE9ETzogVmVyaWZ5IHRoYXQgYWxsIGZhY2VzIG9mIHRoZSBjdWJlbWFwIGFyZSBwcmVzZW50IHdpdGggRERTQ0FQUzJfQ1VCRU1BUF9QT1NJVElWRVgsIGV0Yy5cblxuICAgICAgICAgICAgZGRzLmlzQ3ViZW1hcCA9IGhlYWRlclsgb2ZmX2NhcHMyIF0gJiBERFNDQVBTMl9DVUJFTUFQID8gdHJ1ZSA6IGZhbHNlO1xuXG4gICAgICAgICAgICBkZHMud2lkdGggPSBoZWFkZXJbIG9mZl93aWR0aCBdO1xuICAgICAgICAgICAgZGRzLmhlaWdodCA9IGhlYWRlclsgb2ZmX2hlaWdodCBdO1xuXG4gICAgICAgICAgICBkYXRhT2Zmc2V0ID0gaGVhZGVyWyBvZmZfc2l6ZSBdICsgNDtcblxuICAgICAgICAgICAgLy8gRXh0cmFjdCBtaXBtYXBzIGJ1ZmZlcnNcblxuICAgICAgICAgICAgd2lkdGggPSBkZHMud2lkdGg7XG4gICAgICAgICAgICBoZWlnaHQgPSBkZHMuaGVpZ2h0O1xuXG4gICAgICAgICAgICBmYWNlcyA9IGRkcy5pc0N1YmVtYXAgPyA2IDogMTtcblxuICAgICAgICAgICAgZm9yICggbGV0IGZhY2UgPSAwOyBmYWNlIDwgZmFjZXM7IGZhY2UgKysgKSB7XG5cbiAgICAgICAgICAgICAgICBmb3IgKCBsZXQgaSA9IDA7IGkgPCBkZHMubWlwbWFwQ291bnQ7IGkgKysgKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBtaXBtYXAgPSBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgYnl0ZUFycmF5ID0gbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFMZW5ndGggPSBudWxsO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICggaXNSR0JBVW5jb21wcmVzc2VkICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnl0ZUFycmF5ID0gdGhpcy5fbG9hZEFSR0JNaXAoIGJ1ZmZlciwgZGF0YU9mZnNldCwgd2lkdGgsIGhlaWdodCApO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YUxlbmd0aCA9IGJ5dGVBcnJheS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhTGVuZ3RoID0gTWF0aC5tYXgoIDQsIHdpZHRoICkgLyA0ICogTWF0aC5tYXgoIDQsIGhlaWdodCApIC8gNCAqIGJsb2NrQnl0ZXM7XG4gICAgICAgICAgICAgICAgICAgICAgICBieXRlQXJyYXkgPSBuZXcgVWludDhBcnJheSggYnVmZmVyLCBkYXRhT2Zmc2V0LCBkYXRhTGVuZ3RoICk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBtaXBtYXAgPSA8Q29tcHJlc3NlZFRleHR1cmVNaXBtYXA+eyBcImRhdGFcIjogYnl0ZUFycmF5LCBcIndpZHRoXCI6IHdpZHRoLCBcImhlaWdodFwiOiBoZWlnaHQgfTtcbiAgICAgICAgICAgICAgICAgICAgZGRzLm1pcG1hcHMuYWRkQ2hpbGQoIG1pcG1hcCApO1xuXG4gICAgICAgICAgICAgICAgICAgIGRhdGFPZmZzZXQgKz0gZGF0YUxlbmd0aDtcblxuICAgICAgICAgICAgICAgICAgICB3aWR0aCA9IE1hdGgubWF4KCB3aWR0aCAqIDAuNSwgMSApO1xuICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSBNYXRoLm1heCggaGVpZ2h0ICogMC41LCAxICk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgd2lkdGggPSBkZHMud2lkdGg7XG4gICAgICAgICAgICAgICAgaGVpZ2h0ID0gZGRzLmhlaWdodDtcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gZGRzO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBzdGF0aWMgX2ZvdXJDQ1RvSW50MzIoIHZhbHVlICkge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlLmNoYXJDb2RlQXQoMCkgK1xuICAgICAgICAgICAgICAgICh2YWx1ZS5jaGFyQ29kZUF0KDEpIDw8IDgpICtcbiAgICAgICAgICAgICAgICAodmFsdWUuY2hhckNvZGVBdCgyKSA8PCAxNikgK1xuICAgICAgICAgICAgICAgICh2YWx1ZS5jaGFyQ29kZUF0KDMpIDw8IDI0KTtcblxuICAgICAgICB9XG4gICAgICAgIHByaXZhdGUgc3RhdGljIF9pbnQzMlRvRm91ckNDKCB2YWx1ZSApIHtcbiAgICAgICAgICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKFxuICAgICAgICAgICAgICAgIHZhbHVlICYgMHhmZixcbiAgICAgICAgICAgICAgICAodmFsdWUgPj4gOCkgJiAweGZmLFxuICAgICAgICAgICAgICAgICh2YWx1ZSA+PiAxNikgJiAweGZmLFxuICAgICAgICAgICAgICAgICh2YWx1ZSA+PiAyNCkgJiAweGZmXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIHByaXZhdGUgc3RhdGljIF9sb2FkQVJHQk1pcCggYnVmZmVyLCBkYXRhT2Zmc2V0LCB3aWR0aCwgaGVpZ2h0ICkge1xuICAgICAgICAgICAgdmFyIGRhdGFMZW5ndGggPSB3aWR0aCAqIGhlaWdodCAqIDQsXG4gICAgICAgICAgICAgICAgc3JjQnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkoIGJ1ZmZlciwgZGF0YU9mZnNldCwgZGF0YUxlbmd0aCApLFxuICAgICAgICAgICAgICAgIGJ5dGVBcnJheSA9IG5ldyBVaW50OEFycmF5KCBkYXRhTGVuZ3RoICksXG4gICAgICAgICAgICAgICAgZHN0ID0gMCxcbiAgICAgICAgICAgICAgICBzcmMgPSAwO1xuXG4gICAgICAgICAgICBmb3IgKCBsZXQgeSA9IDA7IHkgPCBoZWlnaHQ7IHkgKysgKSB7XG4gICAgICAgICAgICAgICAgZm9yICggbGV0IHggPSAwOyB4IDwgd2lkdGg7IHggKysgKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBiID0gbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGcgPSBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgciA9IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICBhID0gbnVsbDtcblxuICAgICAgICAgICAgICAgICAgICBiID0gc3JjQnVmZmVyW3NyY107XG4gICAgICAgICAgICAgICAgICAgIHNyYyArKztcbiAgICAgICAgICAgICAgICAgICAgZyA9IHNyY0J1ZmZlcltzcmNdO1xuICAgICAgICAgICAgICAgICAgICBzcmMgKys7XG4gICAgICAgICAgICAgICAgICAgIHIgPSBzcmNCdWZmZXJbc3JjXTtcbiAgICAgICAgICAgICAgICAgICAgc3JjICsrO1xuICAgICAgICAgICAgICAgICAgICBhID0gc3JjQnVmZmVyW3NyY107XG4gICAgICAgICAgICAgICAgICAgIHNyYyArKztcblxuICAgICAgICAgICAgICAgICAgICBieXRlQXJyYXlbZHN0XSA9IHI7IGRzdCArKztcdC8vclxuICAgICAgICAgICAgICAgICAgICBieXRlQXJyYXlbZHN0XSA9IGc7IGRzdCArKztcdC8vZ1xuICAgICAgICAgICAgICAgICAgICBieXRlQXJyYXlbZHN0XSA9IGI7IGRzdCArKztcdC8vYlxuICAgICAgICAgICAgICAgICAgICBieXRlQXJyYXlbZHN0XSA9IGE7IGRzdCArKztcdC8vYVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGJ5dGVBcnJheTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGV4cG9ydCBjbGFzcyBERFNEYXRhe1xuICAgICAgICBwdWJsaWMgbWlwbWFwczp3ZENiLkNvbGxlY3Rpb248Q29tcHJlc3NlZFRleHR1cmVNaXBtYXA+ID0gd2RDYi5Db2xsZWN0aW9uLmNyZWF0ZTxDb21wcmVzc2VkVGV4dHVyZU1pcG1hcD4oKTtcbiAgICAgICAgcHVibGljIHdpZHRoOm51bWJlciA9IDA7XG4gICAgICAgIHB1YmxpYyBoZWlnaHQ6bnVtYmVyID0gMDtcbiAgICAgICAgcHVibGljIGZvcm1hdDpUZXh0dXJlRm9ybWF0ID0gbnVsbDtcbiAgICAgICAgcHVibGljIG1pcG1hcENvdW50Om51bWJlciA9IDE7XG4gICAgICAgIHB1YmxpYyBpc0N1YmVtYXA6Ym9vbGVhbiA9IGZhbHNlO1xuICAgIH1cbn1cbiIsIm1vZHVsZSB3ZHtcbiAgICBleHBvcnQgYWJzdHJhY3QgY2xhc3MgVGV4dHVyZUFzc2V0IGltcGxlbWVudHMgSVRleHR1cmVBc3NldHtcbiAgICAgICAgcHVibGljIHN0YXRpYyBkZWZhdWx0VGV4dHVyZSA9IG51bGw7XG5cbiAgICAgICAgcHJpdmF0ZSBfd2lkdGg6bnVtYmVyID0gbnVsbDtcbiAgICAgICAgZ2V0IHdpZHRoKCl7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fd2lkdGggPT09IG51bGw/ICh0aGlzLnNvdXJjZT8gdGhpcy5zb3VyY2Uud2lkdGggOiBudWxsKSA6IHRoaXMuX3dpZHRoO1xuICAgICAgICB9XG4gICAgICAgIHNldCB3aWR0aCh3aWR0aDpudW1iZXIpe1xuICAgICAgICAgICAgdGhpcy5fd2lkdGggPSB3aWR0aDtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX2hlaWdodDpudW1iZXIgPSBudWxsO1xuICAgICAgICBnZXQgaGVpZ2h0KCl7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5faGVpZ2h0ID09PSBudWxsPyAodGhpcy5zb3VyY2U/IHRoaXMuc291cmNlLmhlaWdodCA6IG51bGwpIDogdGhpcy5faGVpZ2h0O1xuICAgICAgICB9XG4gICAgICAgIHNldCBoZWlnaHQoaGVpZ2h0Om51bWJlcil7XG4gICAgICAgICAgICB0aGlzLl9oZWlnaHQgPSBoZWlnaHQ7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgZ2VuZXJhdGVNaXBtYXBzOmJvb2xlYW4gPSB0cnVlO1xuICAgICAgICBwdWJsaWMgc291cmNlUmVnaW9uTWV0aG9kOlRleHR1cmVTb3VyY2VSZWdpb25NZXRob2QgPSBUZXh0dXJlU291cmNlUmVnaW9uTWV0aG9kLkNIQU5HRV9URVhDT09SRFNfSU5fR0xTTDtcbiAgICAgICAgcHVibGljIGZvcm1hdDpUZXh0dXJlRm9ybWF0ID0gVGV4dHVyZUZvcm1hdC5SR0JBO1xuICAgICAgICBwdWJsaWMgc291cmNlOmFueSA9IFRleHR1cmVBc3NldC5kZWZhdWx0VGV4dHVyZTtcbiAgICAgICAgcHVibGljIHJlcGVhdFJlZ2lvbjpSZWN0UmVnaW9uID0gUmVjdFJlZ2lvbi5jcmVhdGUoMCwgMCwgMSwgMSk7XG4gICAgICAgIHB1YmxpYyBzb3VyY2VSZWdpb246UmVjdFJlZ2lvbiA9IG51bGw7XG5cbiAgICAgICAgcHVibGljIHNvdXJjZVJlZ2lvbk1hcHBpbmc6VGV4dHVyZVNvdXJjZVJlZ2lvbk1hcHBpbmcgPSBUZXh0dXJlU291cmNlUmVnaW9uTWFwcGluZy5DQU5WQVM7XG5cbiAgICAgICAgcHVibGljIGZsaXBZOmJvb2xlYW4gPSB0cnVlO1xuICAgICAgICBwdWJsaWMgcHJlbXVsdGlwbHlBbHBoYTpib29sZWFuID0gZmFsc2U7XG4gICAgICAgIHB1YmxpYyB1bnBhY2tBbGlnbm1lbnQ6bnVtYmVyID0gNDtcblxuICAgICAgICAvL3RvZG8gZXh0cmFjdCBUZXh0dXJlRGVmYXVsdCBjbGFzcyB0byBzYXZlIGRlZmF1bHQgc2V0dGluZz9cblxuICAgICAgICBwdWJsaWMgd3JhcFM6VGV4dHVyZVdyYXBNb2RlID0gVGV4dHVyZVdyYXBNb2RlLkNMQU1QX1RPX0VER0U7XG4gICAgICAgIHB1YmxpYyB3cmFwVDpUZXh0dXJlV3JhcE1vZGUgPSBUZXh0dXJlV3JhcE1vZGUuQ0xBTVBfVE9fRURHRTtcbiAgICAgICAgcHVibGljIG1hZ0ZpbHRlcjpUZXh0dXJlRmlsdGVyTW9kZSA9IFRleHR1cmVGaWx0ZXJNb2RlLkxJTkVBUjtcbiAgICAgICAgcHVibGljIG1pbkZpbHRlcjpUZXh0dXJlRmlsdGVyTW9kZSA9IFRleHR1cmVGaWx0ZXJNb2RlLkxJTkVBUl9NSVBNQVBfTElORUFSO1xuICAgICAgICBwdWJsaWMgdHlwZTpUZXh0dXJlVHlwZSA9IFRleHR1cmVUeXBlLlVOU0lHTkVEX0JZVEU7XG4gICAgICAgIHB1YmxpYyBtaXBtYXBzOndkQ2IuQ29sbGVjdGlvbjxhbnk+ID0gd2RDYi5Db2xsZWN0aW9uLmNyZWF0ZTxhbnk+KCk7XG4gICAgICAgIHB1YmxpYyBhbmlzb3Ryb3B5Om51bWJlciA9IDA7XG4gICAgICAgIHB1YmxpYyBuZWVkVXBkYXRlOmJvb2xlYW4gPSB0cnVlO1xuXG5cbiAgICAgICAgcHVibGljIGFic3RyYWN0IHRvVGV4dHVyZSgpOlRleHR1cmU7XG5cbiAgICAgICAgcHVibGljIGFic3RyYWN0IHRvQ3ViZW1hcEZhY2VUZXh0dXJlKCk6Q3ViZW1hcEZhY2VUZXh0dXJlO1xuXG4gICAgICAgIHB1YmxpYyBhYnN0cmFjdCBjb3B5VG9DdWJlbWFwRmFjZVRleHR1cmUoY3ViZW1hcEZhY2VUZXh0dXJlOmFueSk7XG5cbiAgICAgICAgcHVibGljIGNvcHlUb0N1YmVtYXBUZXh0dXJlKGN1YmVtYXBGYWNlVGV4dHVyZTpJQ3ViZW1hcFRleHR1cmVBc3NldCl7XG4gICAgICAgICAgICBjdWJlbWFwRmFjZVRleHR1cmUuZ2VuZXJhdGVNaXBtYXBzID0gdGhpcy5nZW5lcmF0ZU1pcG1hcHM7XG4gICAgICAgICAgICBjdWJlbWFwRmFjZVRleHR1cmUubWluRmlsdGVyID0gdGhpcy5taW5GaWx0ZXI7XG4gICAgICAgICAgICBjdWJlbWFwRmFjZVRleHR1cmUubWFnRmlsdGVyID0gdGhpcy5tYWdGaWx0ZXI7XG4gICAgICAgICAgICBjdWJlbWFwRmFjZVRleHR1cmUud2lkdGggPSB0aGlzLndpZHRoO1xuICAgICAgICAgICAgY3ViZW1hcEZhY2VUZXh0dXJlLmhlaWdodCA9IHRoaXMuaGVpZ2h0O1xuICAgICAgICAgICAgY3ViZW1hcEZhY2VUZXh0dXJlLndyYXBTID0gdGhpcy53cmFwUztcbiAgICAgICAgICAgIGN1YmVtYXBGYWNlVGV4dHVyZS53cmFwVCA9IHRoaXMud3JhcFQ7XG4gICAgICAgICAgICBjdWJlbWFwRmFjZVRleHR1cmUuYW5pc290cm9weSA9IHRoaXMuYW5pc290cm9weTtcbiAgICAgICAgICAgIGN1YmVtYXBGYWNlVGV4dHVyZS5wcmVtdWx0aXBseUFscGhhID0gdGhpcy5wcmVtdWx0aXBseUFscGhhO1xuICAgICAgICAgICAgY3ViZW1hcEZhY2VUZXh0dXJlLnVucGFja0FsaWdubWVudCA9IHRoaXMudW5wYWNrQWxpZ25tZW50O1xuICAgICAgICAgICAgY3ViZW1hcEZhY2VUZXh0dXJlLm5lZWRVcGRhdGUgPSB0aGlzLm5lZWRVcGRhdGU7XG4gICAgICAgICAgICBjdWJlbWFwRmFjZVRleHR1cmUubW9kZSA9IEVudk1hcE1vZGUuQkFTSUM7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgY29weVRvKHRleHR1cmU6QmFzaWNUZXh0dXJlKXtcbiAgICAgICAgICAgIExvZy5lcnJvcighdGV4dHVyZSwgTG9nLmluZm8uRlVOQ19NVVNUX0RFRklORShcInRleHR1cmVcIikpO1xuXG4gICAgICAgICAgICB0ZXh0dXJlLnNvdXJjZSA9IHRoaXMuc291cmNlO1xuXG4gICAgICAgICAgICB0ZXh0dXJlLndpZHRoID0gdGhpcy53aWR0aDtcbiAgICAgICAgICAgIHRleHR1cmUuaGVpZ2h0ID0gdGhpcy5oZWlnaHQ7XG5cbiAgICAgICAgICAgIHRleHR1cmUubWlwbWFwcyA9IHRoaXMubWlwbWFwcy5jb3B5KCk7XG5cbiAgICAgICAgICAgIHRleHR1cmUud3JhcFMgPSB0aGlzLndyYXBTO1xuICAgICAgICAgICAgdGV4dHVyZS53cmFwVCA9IHRoaXMud3JhcFQ7XG5cbiAgICAgICAgICAgIHRleHR1cmUubWFnRmlsdGVyID0gdGhpcy5tYWdGaWx0ZXI7XG4gICAgICAgICAgICB0ZXh0dXJlLm1pbkZpbHRlciA9IHRoaXMubWluRmlsdGVyO1xuXG4gICAgICAgICAgICB0ZXh0dXJlLmFuaXNvdHJvcHkgPSB0aGlzLmFuaXNvdHJvcHk7XG5cbiAgICAgICAgICAgIHRleHR1cmUuZm9ybWF0ID0gdGhpcy5mb3JtYXQ7XG4gICAgICAgICAgICB0ZXh0dXJlLnR5cGUgPSB0aGlzLnR5cGU7XG5cbiAgICAgICAgICAgIHRleHR1cmUucmVwZWF0UmVnaW9uID0gdGhpcy5yZXBlYXRSZWdpb24uY29weSgpO1xuICAgICAgICAgICAgdGV4dHVyZS5zb3VyY2VSZWdpb24gPSB0aGlzLnNvdXJjZVJlZ2lvbiAmJiB0aGlzLnNvdXJjZVJlZ2lvbi5jb3B5KCk7XG4gICAgICAgICAgICB0ZXh0dXJlLnNvdXJjZVJlZ2lvbk1hcHBpbmcgPSB0aGlzLnNvdXJjZVJlZ2lvbk1hcHBpbmc7XG5cbiAgICAgICAgICAgIHRleHR1cmUuc291cmNlUmVnaW9uTWV0aG9kID0gdGhpcy5zb3VyY2VSZWdpb25NZXRob2Q7XG5cbiAgICAgICAgICAgIHRleHR1cmUuZ2VuZXJhdGVNaXBtYXBzID0gdGhpcy5nZW5lcmF0ZU1pcG1hcHM7XG4gICAgICAgICAgICB0ZXh0dXJlLnByZW11bHRpcGx5QWxwaGEgPSB0aGlzLnByZW11bHRpcGx5QWxwaGE7XG4gICAgICAgICAgICB0ZXh0dXJlLmZsaXBZID0gdGhpcy5mbGlwWTtcbiAgICAgICAgICAgIHRleHR1cmUudW5wYWNrQWxpZ25tZW50ID0gdGhpcy51bnBhY2tBbGlnbm1lbnQ7XG5cbiAgICAgICAgICAgIHRleHR1cmUubmVlZFVwZGF0ZSA9IHRoaXMubmVlZFVwZGF0ZTtcblxuICAgICAgICAgICAgcmV0dXJuIHRleHR1cmU7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbiIsIm1vZHVsZSB3ZHtcbiAgICBleHBvcnQgY2xhc3MgSW1hZ2VUZXh0dXJlQXNzZXQgZXh0ZW5kcyBUZXh0dXJlQXNzZXR7XG4gICAgICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlKHNvdXJjZTpIVE1MSW1hZ2VFbGVtZW50fEhUTUxDYW52YXNFbGVtZW50KSB7XG4gICAgICAgIFx0dmFyIG9iaiA9IG5ldyB0aGlzKHNvdXJjZSk7XG5cbiAgICAgICAgXHRyZXR1cm4gb2JqO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3RydWN0b3Ioc291cmNlOkhUTUxJbWFnZUVsZW1lbnR8SFRNTENhbnZhc0VsZW1lbnQpe1xuICAgICAgICAgICAgc3VwZXIoKTtcblxuICAgICAgICAgICAgdGhpcy5zb3VyY2UgPSBzb3VyY2U7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgbWlwbWFwczp3ZENiLkNvbGxlY3Rpb248SFRNTENhbnZhc0VsZW1lbnR8SFRNTEltYWdlRWxlbWVudHxIVE1MVmlkZW9FbGVtZW50PjtcblxuICAgICAgICBwdWJsaWMgdG9UZXh0dXJlKCk6VGV4dHVyZXtcbiAgICAgICAgICAgIHJldHVybiBJbWFnZVRleHR1cmUuY3JlYXRlKHRoaXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHRvQ3ViZW1hcEZhY2VUZXh0dXJlKCk6Q3ViZW1hcEZhY2VJbWFnZVRleHR1cmV7XG4gICAgICAgICAgICByZXR1cm4gQ3ViZW1hcEZhY2VJbWFnZVRleHR1cmUuY3JlYXRlKHRoaXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGNvcHlUb0N1YmVtYXBGYWNlVGV4dHVyZShjdWJlbWFwRmFjZVRleHR1cmU6SUN1YmVtYXBGYWNlVHdvRFRleHR1cmVBc3NldCl7XG4gICAgICAgICAgICBjdWJlbWFwRmFjZVRleHR1cmUuc291cmNlID0gdGhpcy5zb3VyY2U7XG4gICAgICAgICAgICBjdWJlbWFwRmFjZVRleHR1cmUudHlwZSA9IHRoaXMudHlwZTtcbiAgICAgICAgICAgIGN1YmVtYXBGYWNlVGV4dHVyZS5mb3JtYXQgPSB0aGlzLmZvcm1hdDtcbiAgICAgICAgICAgIGN1YmVtYXBGYWNlVGV4dHVyZS53aWR0aCA9IHRoaXMud2lkdGg7XG4gICAgICAgICAgICBjdWJlbWFwRmFjZVRleHR1cmUuaGVpZ2h0ID0gdGhpcy5oZWlnaHQ7XG4gICAgICAgICAgICBjdWJlbWFwRmFjZVRleHR1cmUuc291cmNlUmVnaW9uID0gdGhpcy5zb3VyY2VSZWdpb247XG4gICAgICAgICAgICBjdWJlbWFwRmFjZVRleHR1cmUuc291cmNlUmVnaW9uTWV0aG9kID0gVGV4dHVyZVNvdXJjZVJlZ2lvbk1ldGhvZC5EUkFXX0lOX0NBTlZBUztcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsIm1vZHVsZSB3ZHtcbiAgICBleHBvcnQgY2xhc3MgVmlkZW9UZXh0dXJlQXNzZXQgZXh0ZW5kcyBUZXh0dXJlQXNzZXR7XG4gICAgICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlKHZpZGVvOlZpZGVvKSB7XG4gICAgICAgICAgICB2YXIgb2JqID0gbmV3IHRoaXModmlkZW8pO1xuXG4gICAgICAgICAgICBvYmouaW5pdFdoZW5DcmVhdGUoKTtcblxuICAgICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0cnVjdG9yKHZpZGVvOlZpZGVvKXtcbiAgICAgICAgICAgIHN1cGVyKCk7XG5cbiAgICAgICAgICAgIHRoaXMudmlkZW8gPSB2aWRlbztcbiAgICAgICAgICAgIHRoaXMuc291cmNlID0gdGhpcy52aWRlby5zb3VyY2U7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgdmlkZW86VmlkZW8gPSBudWxsO1xuXG4gICAgICAgIHB1YmxpYyBpbml0V2hlbkNyZWF0ZSgpe1xuICAgICAgICAgICAgdGhpcy53aWR0aCA9IDA7XG4gICAgICAgICAgICB0aGlzLmhlaWdodCA9IDA7XG4gICAgICAgICAgICB0aGlzLmdlbmVyYXRlTWlwbWFwcyA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5taW5GaWx0ZXIgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5tYWdGaWx0ZXIgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5zb3VyY2VSZWdpb24gPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5zb3VyY2VSZWdpb25NZXRob2QgPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHRvVGV4dHVyZSgpOlRleHR1cmV7XG4gICAgICAgICAgICByZXR1cm4gVmlkZW9UZXh0dXJlLmNyZWF0ZSh0aGlzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vdG9kbyBzdXBwb3J0IGN1YmVtYXA/XG4gICAgICAgIHB1YmxpYyB0b0N1YmVtYXBGYWNlVGV4dHVyZSgpOkN1YmVtYXBGYWNlSW1hZ2VUZXh0dXJle1xuICAgICAgICAgICAgcmV0dXJuIExvZy5lcnJvcih0cnVlLCBMb2cuaW5mby5GVU5DX05PVF9TVVBQT1JUKFwidmlkZW8gdGV4dHVyZVwiLCBcImN1YmVtYXBcIikpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGNvcHlUb0N1YmVtYXBGYWNlVGV4dHVyZShjdWJlbWFwRmFjZVRleHR1cmU6SUN1YmVtYXBGYWNlVHdvRFRleHR1cmVBc3NldCl7XG4gICAgICAgICAgICBMb2cuZXJyb3IodHJ1ZSwgTG9nLmluZm8uRlVOQ19OT1RfU1VQUE9SVChcInZpZGVvIHRleHR1cmVcIiwgXCJjdWJlbWFwXCIpKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuIiwibW9kdWxlIHdke1xuICAgIGV4cG9ydCBjbGFzcyBDb21wcmVzc2VkVGV4dHVyZUFzc2V0IGV4dGVuZHMgVGV4dHVyZUFzc2V0e1xuICAgICAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZSgpe1xuICAgICAgICAgICAgdmFyIG9iaiA9IG5ldyB0aGlzKCk7XG5cbiAgICAgICAgICAgIG9iai5pbml0V2hlbkNyZWF0ZSgpO1xuXG4gICAgICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIG1pcG1hcHM6d2RDYi5Db2xsZWN0aW9uPENvbXByZXNzZWRUZXh0dXJlTWlwbWFwPjtcblxuICAgICAgICBwdWJsaWMgaW5pdFdoZW5DcmVhdGUoKXtcbiAgICAgICAgICAgIHRoaXMuZ2VuZXJhdGVNaXBtYXBzID0gZmFsc2U7XG4gICAgICAgICAgICAvKiFcbiAgICAgICAgICAgICBmbGlwcGluZyBkb2Vzbid0IHdvcmsgZm9yIGNvbXByZXNzZWQgdGV4dHVyZXNcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdGhpcy5mbGlwWSA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHRvVGV4dHVyZSgpOlRleHR1cmV7XG4gICAgICAgICAgICByZXR1cm4gQ29tcHJlc3NlZFRleHR1cmUuY3JlYXRlKHRoaXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHRvQ3ViZW1hcEZhY2VUZXh0dXJlKCk6Q3ViZW1hcEZhY2VDb21wcmVzc2VkVGV4dHVyZXtcbiAgICAgICAgICAgIHJldHVybiBDdWJlbWFwRmFjZUNvbXByZXNzZWRUZXh0dXJlLmNyZWF0ZSh0aGlzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBjb3B5VG9DdWJlbWFwRmFjZVRleHR1cmUoY3ViZW1hcEZhY2VUZXh0dXJlOklDdWJlbWFwRmFjZUNvbXByZXNzZWRUZXh0dXJlQXNzZXQpe1xuICAgICAgICAgICAgY3ViZW1hcEZhY2VUZXh0dXJlLnR5cGUgPSB0aGlzLnR5cGU7XG4gICAgICAgICAgICBjdWJlbWFwRmFjZVRleHR1cmUuZm9ybWF0ID0gdGhpcy5mb3JtYXQ7XG4gICAgICAgICAgICBjdWJlbWFwRmFjZVRleHR1cmUud2lkdGggPSB0aGlzLndpZHRoO1xuICAgICAgICAgICAgY3ViZW1hcEZhY2VUZXh0dXJlLmhlaWdodCA9IHRoaXMuaGVpZ2h0O1xuICAgICAgICAgICAgY3ViZW1hcEZhY2VUZXh0dXJlLm1pcG1hcHMgPSB0aGlzLm1pcG1hcHM7XG4gICAgICAgICAgICBjdWJlbWFwRmFjZVRleHR1cmUubWluRmlsdGVyID0gdGhpcy5taW5GaWx0ZXI7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbiIsIm1vZHVsZSB3ZHtcbiAgICBleHBvcnQgZW51bSBUZXh0dXJlRmlsdGVyTW9kZXtcbiAgICAgICAgTkVBUkVTVCA9IDxhbnk+XCJORUFSRVNUXCIsXG4gICAgICAgIE5FQVJFU1RfTUlQTUFQX01FQVJFU1QgPSA8YW55PlwiTkVBUkVTVF9NSVBNQVBfTUVBUkVTVFwiLFxuICAgICAgICBORUFSRVNUX01JUE1BUF9MSU5FQVIgPSA8YW55PlwiTkVBUkVTVF9NSVBNQVBfTElORUFSXCIsXG4gICAgICAgIExJTkVBUiA9IDxhbnk+XCJMSU5FQVJcIixcbiAgICAgICAgTElORUFSX01JUE1BUF9ORUFSRVNUID0gPGFueT5cIkxJTkVBUl9NSVBNQVBfTkVBUkVTVFwiLFxuICAgICAgICBMSU5FQVJfTUlQTUFQX0xJTkVBUiA9IDxhbnk+XCJMSU5FQVJfTUlQTUFQX0xJTkVBUlwiXG4gICAgfVxufVxuIiwibW9kdWxlIHdke1xuICAgIGV4cG9ydCBlbnVtIFRleHR1cmVXcmFwTW9kZXtcbiAgICAgICAgUkVQRUFUID0gPGFueT5cIlJFUEVBVFwiLFxuICAgICAgICBNSVJST1JFRF9SRVBFQVQgPSA8YW55PlwiTUlSUk9SRURfUkVQRUFUXCIsXG4gICAgICAgIENMQU1QX1RPX0VER0UgPSA8YW55PlwiQ0xBTVBfVE9fRURHRVwiXG4gICAgfVxufVxuIiwibW9kdWxlIHdke1xuICAgIGV4cG9ydCBlbnVtIFRleHR1cmVGb3JtYXR7XG4gICAgICAgIFJHQiA9IDxhbnk+XCJSR0JcIixcbiAgICAgICAgUkdCQSA9IDxhbnk+XCJSR0JBXCIsXG4gICAgICAgIEFMUEhBID0gPGFueT5cIkFMUEhBXCIsXG4gICAgICAgIExVTUlOQU5DRSA9IDxhbnk+XCJMVU1JTkFOQ0VcIixcbiAgICAgICAgTFVNSU5BTkNFX0FMUEhBID0gPGFueT5cIkxVTUlOQU5DRV9BTFBIQVwiLFxuXG4gICAgICAgIFJHQl9TM1RDX0RYVDEgPSA8YW55PlwiUkdCX1MzVENfRFhUMVwiLFxuICAgICAgICBSR0JBX1MzVENfRFhUMSA9IDxhbnk+XCJSR0JBX1MzVENfRFhUMVwiLFxuICAgICAgICBSR0JBX1MzVENfRFhUMyA9IDxhbnk+XCJSR0JBX1MzVENfRFhUM1wiLFxuICAgICAgICBSR0JBX1MzVENfRFhUNSA9IDxhbnk+XCJSR0JBX1MzVENfRFhUNVwiXG4gICAgfVxufVxuIiwibW9kdWxlIHdke1xuICAgIGV4cG9ydCBlbnVtIFRleHR1cmVUeXBle1xuICAgICAgICBVTlNJR05FRF9CWVRFID0gPGFueT5cIlVOU0lHTkVEX0JZVEVcIixcbiAgICAgICAgVU5TSUdORURfU0hPUlRfNV82XzUgPSA8YW55PlwiVU5TSUdORURfU0hPUlRfNV82XzVcIixcbiAgICAgICAgVU5TSUdORURfU0hPUlRfNF80XzRfNCA9IDxhbnk+XCJVTlNJR05FRF9TSE9SVF80XzRfNF80XCIsXG4gICAgICAgIFVOU0lHTkVEX1NIT1JUXzVfNV81XzEgPSA8YW55PlwiVU5TSUdORURfU0hPUlRfNV81XzVfMVwiXG4gICAgfVxufVxuIiwibW9kdWxlIHdke1xuICAgIGV4cG9ydCBlbnVtIEVudk1hcE1vZGV7XG4gICAgICAgIEJBU0lDLFxuICAgICAgICBSRUZMRUNUSU9OLFxuICAgICAgICBSRUZSQUNUSU9OLFxuICAgICAgICBGUkVTTkVMXG4gICAgfVxufVxuIiwibW9kdWxlIHdke1xuICAgIGV4cG9ydCBlbnVtIFRleHR1cmVDb21iaW5lTW9kZXtcbiAgICAgICAgTUlYLFxuICAgICAgICBNVUxUSVBMWSxcbiAgICAgICAgQUREXG4gICAgfVxufVxuXG4iLCJtb2R1bGUgd2R7XG4gICAgZXhwb3J0IGVudW0gVGV4dHVyZVNvdXJjZVJlZ2lvbk1hcHBpbmd7XG4gICAgICAgIC8qISBjYW52YXMgbWFwcGluZ1xuICAgICAgICBvcmlnaW4gcG9pbnQgaXMgaW4gbGVmdC11cCBjb3JuZXJcbiAgICAgICAgeSBheGlzIGlzIGRvd25jYXN0XG4gICAgICAgICAqL1xuICAgICAgICBDQU5WQVMsXG4gICAgICAgIFVWXG4gICAgfVxufVxuIiwibW9kdWxlIHdke1xuICAgIGV4cG9ydCBlbnVtIFRleHR1cmVTb3VyY2VSZWdpb25NZXRob2R7XG4gICAgICAgIENIQU5HRV9URVhDT09SRFNfSU5fR0xTTCxcbiAgICAgICAgRFJBV19JTl9DQU5WQVNcbiAgICB9XG59XG4iLCJtb2R1bGUgd2R7XG4gICAgZXhwb3J0IGVudW0gVGV4dHVyZVRhcmdldHtcbiAgICAgICAgVEVYVFVSRV8yRCA9IDxhbnk+XCJURVhUVVJFXzJEXCIsXG4gICAgICAgIFRFWFRVUkVfQ1VCRV9NQVAgPSA8YW55PlwiVEVYVFVSRV9DVUJFX01BUFwiXG4gICAgfVxufVxuIiwibW9kdWxlIHdke1xuICAgIGV4cG9ydCBjbGFzcyBMb2FkZXJNYW5hZ2Vye1xuICAgICAgICBwcml2YXRlIHN0YXRpYyBfaW5zdGFuY2UgPSBudWxsO1xuXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgZ2V0SW5zdGFuY2UoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5faW5zdGFuY2UgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9pbnN0YW5jZSA9IG5ldyB0aGlzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5faW5zdGFuY2U7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgYXNzZXRDb3VudDpudW1iZXIgPSAwO1xuICAgICAgICBwdWJsaWMgY3VycmVudExvYWRlZENvdW50Om51bWJlciA9IDA7XG5cbiAgICAgICAgcHJpdmF0ZSBfYXNzZXRUYWJsZTp3ZENiLkhhc2g8YW55PiA9IHdkQ2IuSGFzaC5jcmVhdGUoKTtcblxuICAgICAgICBwdWJsaWMgbG9hZCh1cmw6c3RyaW5nKTp3ZEZycC5TdHJlYW07XG4gICAgICAgIHB1YmxpYyBsb2FkKGFzc2V0QXJyOkFycmF5PEFzc2V0RGF0YT4pIDp3ZEZycC5TdHJlYW07XG4gICAgICAgIHB1YmxpYyBsb2FkKGFzc2V0QXJyOkFycmF5PEFzc2V0RGF0YT4pIDp3ZEZycC5TdHJlYW07XG5cbiAgICAgICAgcHVibGljIGxvYWQoLi4uYXJncykge1xuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgICAgICAgICBpZihKdWRnZVV0aWxzLmlzU3RyaW5nKGFyZ3NbMF0pKXtcbiAgICAgICAgICAgICAgICBsZXQgdXJsOnN0cmluZyA9IGFyZ3NbMF0sXG4gICAgICAgICAgICAgICAgICAgIGlkOnN0cmluZyA9IHVybDtcblxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9jcmVhdGVMb2FkU2luZ2xlQXNzZXRTdHJlYW0odXJsLCBpZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgIGxldCBhc3NldEFyciA9IGFyZ3NbMF07XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gd2RGcnAuZnJvbUFycmF5KGFzc2V0QXJyKS5mbGF0TWFwKChhc3NldCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2VsZi5fY3JlYXRlTG9hZE11bHRpQXNzZXRTdHJlYW0oYXNzZXQudHlwZSB8fCBBc3NldFR5cGUuVU5LTk9XLCBhc3NldC51cmwsIGFzc2V0LmlkKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyByZXNldCgpIHtcbiAgICAgICAgICAgIHRoaXMuYXNzZXRDb3VudCA9IDA7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRMb2FkZWRDb3VudCA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgZGlzcG9zZSgpe1xuICAgICAgICAgICAgdGhpcy5yZXNldCgpO1xuXG4gICAgICAgICAgICBMb2FkZXJGYWN0b3J5LmNyZWF0ZUFsbExvYWRlcigpLmZvckVhY2goKGxvYWRlcjpMb2FkZXIpID0+IHtcbiAgICAgICAgICAgICAgICBsb2FkZXIuZGlzcG9zZSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgZ2V0KGlkOnN0cmluZyk6YW55e1xuICAgICAgICAgICAgdmFyIGxvYWRlciA9IHRoaXMuX2Fzc2V0VGFibGUuZ2V0Q2hpbGQoaWQpO1xuXG4gICAgICAgICAgICByZXR1cm4gbG9hZGVyID8gbG9hZGVyLmdldChpZCkgOiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfY3JlYXRlTG9hZE11bHRpQXNzZXRTdHJlYW0odHlwZTpBc3NldFR5cGUsIHVybDpzdHJpbmcsIGlkOnN0cmluZyk7XG4gICAgICAgIHByaXZhdGUgX2NyZWF0ZUxvYWRNdWx0aUFzc2V0U3RyZWFtKHR5cGU6QXNzZXRUeXBlLCB1cmw6QXJyYXk8c3RyaW5nPiwgaWQ6c3RyaW5nKTtcblxuICAgICAgICBwcml2YXRlIF9jcmVhdGVMb2FkTXVsdGlBc3NldFN0cmVhbSguLi5hcmdzKXtcbiAgICAgICAgICAgIHZhciB0eXBlID0gYXJnc1swXSxcbiAgICAgICAgICAgICAgICB1cmwgPSBhcmdzWzFdLFxuICAgICAgICAgICAgICAgIGlkID0gYXJnc1syXSxcbiAgICAgICAgICAgICAgICBsb2FkZXIgPSB0aGlzLl9nZXRMb2FkZXIodHlwZSwgdXJsKSxcbiAgICAgICAgICAgICAgICBzdHJlYW0gPSBudWxsLFxuICAgICAgICAgICAgICAgIHNlbGYgPSB0aGlzO1xuXG4gICAgICAgICAgICBpZighbG9hZGVyLmhhcyhpZCkpe1xuICAgICAgICAgICAgICAgIHNlbGYuYXNzZXRDb3VudCArKztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2FkZFRvQXNzZXRUYWJsZShsb2FkZXIubG9hZCh1cmwsIGlkKVxuICAgICAgICAgICAgICAgIC5tYXAoKGRhdGEpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5jdXJyZW50TG9hZGVkQ291bnQrKztcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudExvYWRlZENvdW50OiBzZWxmLmN1cnJlbnRMb2FkZWRDb3VudCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFzc2V0Q291bnQ6c2VsZi5hc3NldENvdW50XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KSwgaWQsIGxvYWRlcik7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9jcmVhdGVMb2FkU2luZ2xlQXNzZXRTdHJlYW0odXJsLCBpZCl7XG4gICAgICAgICAgICB2YXIgbG9hZGVyID0gdGhpcy5fZ2V0TG9hZGVyKEFzc2V0VHlwZS5VTktOT1csIHVybCk7XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9hZGRUb0Fzc2V0VGFibGUobG9hZGVyLmxvYWQodXJsLCBpZCksIGlkLCBsb2FkZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfZ2V0TG9hZGVyKHR5cGU6QXNzZXRUeXBlLCB1cmw6c3RyaW5nKTtcbiAgICAgICAgcHJpdmF0ZSBfZ2V0TG9hZGVyKHR5cGU6QXNzZXRUeXBlLCB1cmw6QXJyYXk8c3RyaW5nPik7XG5cbiAgICAgICAgcHJpdmF0ZSBfZ2V0TG9hZGVyKC4uLmFyZ3Mpe1xuICAgICAgICAgICAgdmFyIHR5cGUgPSBhcmdzWzBdLFxuICAgICAgICAgICAgICAgIGV4dG5hbWU6c3RyaW5nID0gbnVsbDtcblxuICAgICAgICAgICAgaWYoSnVkZ2VVdGlscy5pc0FycmF5KGFyZ3NbMV0pKXtcbiAgICAgICAgICAgICAgICBleHRuYW1lID0gd2RDYi5QYXRoVXRpbHMuZXh0bmFtZShhcmdzWzFdWzBdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICAgICAgZXh0bmFtZSA9IHdkQ2IuUGF0aFV0aWxzLmV4dG5hbWUoYXJnc1sxXSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBMb2FkZXJGYWN0b3J5LmNyZWF0ZSh0eXBlLCBleHRuYW1lLnRvTG93ZXJDYXNlKCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfYWRkVG9Bc3NldFRhYmxlKGxvYWRTdHJlYW06d2RGcnAuU3RyZWFtLCBpZDpzdHJpbmcsIGxvYWRlcjpMb2FkZXIpOndkRnJwLlN0cmVhbXtcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgICAgICAgICAgcmV0dXJuIGxvYWRTdHJlYW0uZG8obnVsbCwgbnVsbCwgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHNlbGYuX2Fzc2V0VGFibGUuYWRkQ2hpbGQoaWQsIGxvYWRlcik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGV4cG9ydCB0eXBlIEFzc2V0RGF0YSA9IHtcbiAgICAgICAgdHlwZT86QXNzZXRUeXBlLFxuICAgICAgICB1cmw6QXJyYXk8c3RyaW5nPixcbiAgICAgICAgaWQ6c3RyaW5nXG4gICAgfTtcbn1cbiIsIm1vZHVsZSB3ZHtcbiAgICBleHBvcnQgY2xhc3MgTG9hZGVyRmFjdG9yeXtcbiAgICAgICAgcHVibGljIHN0YXRpYyBjcmVhdGUodHlwZTpBc3NldFR5cGUsIGV4dG5hbWU6c3RyaW5nKSB7XG4gICAgICAgICAgICB2YXIgbG9hZGVyID0gbnVsbDtcblxuICAgICAgICAgICAgc3dpdGNoICh0eXBlKXtcbiAgICAgICAgICAgICAgICBjYXNlIEFzc2V0VHlwZS5GT05UOlxuICAgICAgICAgICAgICAgICAgICBsb2FkZXIgPSBGb250TG9hZGVyLmdldEluc3RhbmNlKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgQXNzZXRUeXBlLlVOS05PVzpcbiAgICAgICAgICAgICAgICAgICAgbG9hZGVyID0gdGhpcy5fZ2V0TG9hZGVyQnlFeHRuYW1lKGV4dG5hbWUpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICB3ZENiLkxvZy5lcnJvcih0cnVlLCB3ZENiLkxvZy5pbmZvLkZVTkNfVU5LTk9XKGBhc3NldCB0eXBlOiR7dHlwZX1gKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gbG9hZGVyO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHN0YXRpYyBjcmVhdGVBbGxMb2FkZXIoKTp3ZENiLkNvbGxlY3Rpb248TG9hZGVyPntcbiAgICAgICAgICAgIHJldHVybiB3ZENiLkNvbGxlY3Rpb24uY3JlYXRlPExvYWRlcj4oW0pzTG9hZGVyLmdldEluc3RhbmNlKCksIEdMU0xMb2FkZXIuZ2V0SW5zdGFuY2UoKSwgVGV4dHVyZUxvYWRlci5nZXRJbnN0YW5jZSgpLCBWaWRlb0xvYWRlci5nZXRJbnN0YW5jZSgpLCBGb250TG9hZGVyLmdldEluc3RhbmNlKCksIEZudExvYWRlci5nZXRJbnN0YW5jZSgpXSk7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIHN0YXRpYyBfZ2V0TG9hZGVyQnlFeHRuYW1lKGV4dG5hbWU6c3RyaW5nKXtcbiAgICAgICAgICAgIHZhciBsb2FkZXIgPSBudWxsO1xuXG4gICAgICAgICAgICBzd2l0Y2ggKGV4dG5hbWUpe1xuICAgICAgICAgICAgICAgIGNhc2UgXCIuanNcIjpcbiAgICAgICAgICAgICAgICAgICAgbG9hZGVyID0gSnNMb2FkZXIuZ2V0SW5zdGFuY2UoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcIi5nbHNsXCI6XG4gICAgICAgICAgICAgICAgICAgIGxvYWRlciA9IEdMU0xMb2FkZXIuZ2V0SW5zdGFuY2UoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcIi5qcGdcIjpcbiAgICAgICAgICAgICAgICBjYXNlIFwiLmpwZWdcIjpcbiAgICAgICAgICAgICAgICBjYXNlIFwiLnBuZ1wiOlxuICAgICAgICAgICAgICAgIGNhc2UgXCIuZGRzXCI6XG4gICAgICAgICAgICAgICAgY2FzZSBcIi5naWZcIjpcbiAgICAgICAgICAgICAgICBjYXNlIFwiLmJtcFwiOlxuICAgICAgICAgICAgICAgICAgICBsb2FkZXIgPSBUZXh0dXJlTG9hZGVyLmdldEluc3RhbmNlKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCIubXA0XCI6XG4gICAgICAgICAgICAgICAgY2FzZSBcIi5vZ3ZcIjpcbiAgICAgICAgICAgICAgICBjYXNlIFwiLndlYm1cIjpcbiAgICAgICAgICAgICAgICAgICAgbG9hZGVyID0gVmlkZW9Mb2FkZXIuZ2V0SW5zdGFuY2UoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcIi53ZFwiOlxuICAgICAgICAgICAgICAgICAgICBsb2FkZXIgPSBXRExvYWRlci5nZXRJbnN0YW5jZSgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwiLmVvdFwiOlxuICAgICAgICAgICAgICAgIGNhc2UgXCIudHRmXCI6XG4gICAgICAgICAgICAgICAgY2FzZSBcIi53b2ZmXCI6XG4gICAgICAgICAgICAgICAgY2FzZSBcIi5zdmdcIjpcbiAgICAgICAgICAgICAgICAgICAgbG9hZGVyID0gRm9udExvYWRlci5nZXRJbnN0YW5jZSgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwiLmZudFwiOlxuICAgICAgICAgICAgICAgICAgICBsb2FkZXIgPSBGbnRMb2FkZXIuZ2V0SW5zdGFuY2UoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgTG9nLmVycm9yKHRydWUsIExvZy5pbmZvLkZVTkNfVU5LTk9XKGBleHRuYW1lOiR7ZXh0bmFtZX1gKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gbG9hZGVyO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwibW9kdWxlIHdke1xuICAgIGV4cG9ydCBlbnVtIFdEVGFne1xuICAgICAgICBDT05UQUlORVIgPSA8YW55PlwiQ09OVEFJTkVSXCJcbiAgICB9XG59XG4iLCJtb2R1bGUgd2Qge1xuICAgIGV4cG9ydCBjbGFzcyBXRExvYWRlciBleHRlbmRzIExvYWRlciB7XG4gICAgICAgIHByaXZhdGUgc3RhdGljIF9pbnN0YW5jZSA9IG51bGw7XG5cbiAgICAgICAgcHVibGljIHN0YXRpYyBnZXRJbnN0YW5jZSgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9pbnN0YW5jZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2luc3RhbmNlID0gbmV3IHRoaXMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9pbnN0YW5jZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX3dkUGFyc2VyOldEUGFyc2VyID0gV0RQYXJzZXIuY3JlYXRlKCk7XG4gICAgICAgIHByaXZhdGUgX3dkQnVpbGRlcjpXREJ1aWxkZXIgPSBXREJ1aWxkZXIuY3JlYXRlKCk7XG4gICAgICAgIHByaXZhdGUgX3BhcnNlRGF0YTpEWUZpbGVQYXJzZURhdGEgPSBudWxsO1xuXG5cbiAgICAgICAgcHJvdGVjdGVkIGxvYWRBc3NldCh1cmw6c3RyaW5nLCBpZDpzdHJpbmcpOndkRnJwLlN0cmVhbTtcbiAgICAgICAgcHJvdGVjdGVkIGxvYWRBc3NldCh1cmw6QXJyYXk8c3RyaW5nPiwgaWQ6c3RyaW5nKTp3ZEZycC5TdHJlYW07XG5cbiAgICAgICAgQHJlcXVpcmUoZnVuY3Rpb24gKC4uLmFyZ3MpIHtcbiAgICAgICAgICAgIGFzc2VydCghSnVkZ2VVdGlscy5pc0FycmF5KGFyZ3NbMF0pLCBMb2cuaW5mby5GVU5DX01VU1RfQkUoXCJ1cmxcIiwgXCJzdHJpbmdcIikpO1xuICAgICAgICB9KVxuICAgICAgICBwcm90ZWN0ZWQgbG9hZEFzc2V0KC4uLmFyZ3MpOndkRnJwLlN0cmVhbSB7XG4gICAgICAgICAgICB2YXIgdXJsID0gYXJnc1swXSxcbiAgICAgICAgICAgICAgICBzZWxmID0gdGhpcztcblxuICAgICAgICAgICAgcmV0dXJuIEFqYXhMb2FkZXIubG9hZCh1cmwsIFwianNvblwiKVxuICAgICAgICAgICAgICAgIC5mbGF0TWFwKChqc29uOkRZRmlsZUpzb25EYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuX3BhcnNlRGF0YSA9IHNlbGYuX3dkUGFyc2VyLnBhcnNlKGpzb24pO1xuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9jcmVhdGVMb2FkTWFwU3RyZWFtKHVybCk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5jb25jYXQoXG4gICAgICAgICAgICAgICAgd2RGcnAuY2FsbEZ1bmMoKCk9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzZWxmLl93ZEJ1aWxkZXIuYnVpbGQoc2VsZi5fcGFyc2VEYXRhKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX2NyZWF0ZUxvYWRNYXBTdHJlYW0oZmlsZVBhdGg6c3RyaW5nKTp3ZEZycC5TdHJlYW17XG4gICAgICAgICAgICB2YXIgc3RyZWFtQXJyID0gW10sXG4gICAgICAgICAgICAgICAgcGFyc2VEYXRhID0gdGhpcy5fcGFyc2VEYXRhLFxuICAgICAgICAgICAgICAgIGkgPSBudWxsO1xuXG4gICAgICAgICAgICBwYXJzZURhdGEubWF0ZXJpYWxzLmZvckVhY2goKG1hdGVyaWFsOkRZRmlsZVBhcnNlTWF0ZXJpYWxEYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgdmFyIG1hcFVybEFyciA9IFtdO1xuXG4gICAgICAgICAgICAgICAgaWYgKG1hdGVyaWFsLmRpZmZ1c2VNYXBVcmwpIHtcbiAgICAgICAgICAgICAgICAgICAgbWFwVXJsQXJyLnB1c2goW1wiZGlmZnVzZU1hcFwiLCBtYXRlcmlhbC5kaWZmdXNlTWFwVXJsXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChtYXRlcmlhbC5zcGVjdWxhck1hcFVybCkge1xuICAgICAgICAgICAgICAgICAgICBtYXBVcmxBcnIucHVzaChbXCJzcGVjdWxhck1hcFwiLCBtYXRlcmlhbC5zcGVjdWxhck1hcFVybF0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAobWF0ZXJpYWwubm9ybWFsTWFwVXJsKSB7XG4gICAgICAgICAgICAgICAgICAgIG1hcFVybEFyci5wdXNoKFtcIm5vcm1hbE1hcFwiLCBtYXRlcmlhbC5ub3JtYWxNYXBVcmxdKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBzdHJlYW1BcnIucHVzaChcbiAgICAgICAgICAgICAgICAgICAgd2RGcnAuZnJvbUFycmF5KG1hcFVybEFycilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5mbGF0TWFwKChbdHlwZSwgbWFwVXJsXSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBUZXh0dXJlTG9hZGVyLmdldEluc3RhbmNlKCkubG9hZChNb2RlbExvYWRlclV0aWxzLmdldFBhdGgoZmlsZVBhdGgsIG1hcFVybCkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5kbygoYXNzZXQ6VGV4dHVyZUFzc2V0KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRlcmlhbFt0eXBlXSA9IGFzc2V0LnRvVGV4dHVyZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBudWxsLCBudWxsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgcmV0dXJuIHdkRnJwLmZyb21BcnJheShzdHJlYW1BcnIpLm1lcmdlQWxsKCk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCIvL3RvZG8gb3B0aW1pemU6c2V0IHZlcnRpY2Usbm9ybWFsIHByZXNpb24/KHVzZSB0b0ZpeGVkKVxubW9kdWxlIHdkIHtcbiAgICBleHBvcnQgY2xhc3MgV0RQYXJzZXIge1xuICAgICAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZSgpIHtcbiAgICAgICAgICAgIHZhciBvYmogPSBuZXcgdGhpcygpO1xuXG4gICAgICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfZGF0YTpEWUZpbGVQYXJzZURhdGEgPSA8YW55Pnt9O1xuICAgICAgICBwcml2YXRlIF9vYmplY3RQYXJzZXIgPSBXRE9iamVjdFBhcnNlci5jcmVhdGUoKTtcblxuICAgICAgICBwdWJsaWMgcGFyc2UoanNvbjpEWUZpbGVKc29uRGF0YSk6RFlGaWxlUGFyc2VEYXRhIHtcbiAgICAgICAgICAgIHRoaXMuX3BhcnNlTWV0YWRhdGEoanNvbik7XG4gICAgICAgICAgICB0aGlzLl9wYXJzZVNjZW5lKGpzb24pO1xuICAgICAgICAgICAgdGhpcy5fcGFyc2VNYXRlcmlhbChqc29uKTtcbiAgICAgICAgICAgIHRoaXMuX3BhcnNlT2JqZWN0KGpzb24pO1xuXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZGF0YTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX3BhcnNlTWV0YWRhdGEoanNvbjpEWUZpbGVKc29uRGF0YSkge1xuICAgICAgICAgICAgdGhpcy5fZGF0YS5tZXRhZGF0YSA9IDxhbnk+anNvbi5tZXRhZGF0YTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX3BhcnNlT2JqZWN0KGpzb246RFlGaWxlSnNvbkRhdGEpIHtcbiAgICAgICAgICAgIHRoaXMuX29iamVjdFBhcnNlci5wYXJzZSh0aGlzLl9kYXRhLCBqc29uKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX3BhcnNlU2NlbmUoanNvbjpEWUZpbGVKc29uRGF0YSkge1xuICAgICAgICAgICAgdGhpcy5fZGF0YS5zY2VuZSA9IDxhbnk+anNvbi5zY2VuZTtcblxuICAgICAgICAgICAgaWYgKGpzb24uc2NlbmUuYW1iaWVudENvbG9yKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZGF0YS5zY2VuZS5hbWJpZW50Q29sb3IgPSB0aGlzLl9jcmVhdGVDb2xvcihqc29uLnNjZW5lLmFtYmllbnRDb2xvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9wYXJzZU1hdGVyaWFsKGpzb246RFlGaWxlSnNvbkRhdGEpIHtcbiAgICAgICAgICAgIHRoaXMuX2RhdGEubWF0ZXJpYWxzID0gd2RDYi5IYXNoLmNyZWF0ZTxhbnk+KGpzb24ubWF0ZXJpYWxzKTtcblxuICAgICAgICAgICAgdGhpcy5fZGF0YS5tYXRlcmlhbHMuZm9yRWFjaCgobWF0ZXJpYWw6YW55KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKG1hdGVyaWFsLmRpZmZ1c2VDb2xvcikge1xuICAgICAgICAgICAgICAgICAgICBtYXRlcmlhbC5kaWZmdXNlQ29sb3IgPSB0aGlzLl9jcmVhdGVDb2xvcihtYXRlcmlhbC5kaWZmdXNlQ29sb3IpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAobWF0ZXJpYWwuc3BlY3VsYXJDb2xvcikge1xuICAgICAgICAgICAgICAgICAgICBtYXRlcmlhbC5zcGVjdWxhckNvbG9yID0gdGhpcy5fY3JlYXRlQ29sb3IobWF0ZXJpYWwuc3BlY3VsYXJDb2xvcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9jcmVhdGVDb2xvcihjb2xvckFycjpBcnJheTxudW1iZXI+KSB7XG4gICAgICAgICAgICByZXR1cm4gQ29sb3IuY3JlYXRlKGByZ2IoJHtjb2xvckFyci5qb2luKFwiLFwiKS5yZXBsYWNlKC9eKFxcZCspLC9nLCBcIiQxLjAsXCIpLnJlcGxhY2UoLywoXFxkKyksL2csIFwiLCQxLjAsXCIpLnJlcGxhY2UoLywoXFxkKykkL2csIFwiLCQxLjBcIil9KWApO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4iLCIvL3RvZG8gb3B0aW1pemU6c2V0IHZlcnRpY2Usbm9ybWFsIHByZXNpb24/KHVzZSB0b0ZpeGVkKVxubW9kdWxlIHdkIHtcbiAgICBleHBvcnQgY2xhc3MgV0RPYmplY3RQYXJzZXIge1xuICAgICAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZSgpIHtcbiAgICAgICAgICAgIHZhciBvYmogPSBuZXcgdGhpcygpO1xuXG4gICAgICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHBhcnNlKGRhdGE6RFlGaWxlUGFyc2VEYXRhLCBqc29uOkRZRmlsZUpzb25EYXRhKTp2b2lkIHtcbiAgICAgICAgICAgIHZhciBwYXJzZSA9IG51bGwsXG4gICAgICAgICAgICAgICAgc2VsZiA9IHRoaXM7XG5cbiAgICAgICAgICAgIGRhdGEub2JqZWN0cyA9IHdkQ2IuQ29sbGVjdGlvbi5jcmVhdGU8YW55Pihqc29uLm9iamVjdHMpO1xuXG4gICAgICAgICAgICBwYXJzZSA9IChvYmplY3Q6YW55KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHNlbGYuX2lzT2JqZWN0Q29udGFpbmVyKG9iamVjdCkpIHtcbiAgICAgICAgICAgICAgICAgICAgb2JqZWN0LmlzQ29udGFpbmVyID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG9iamVjdC5pc0NvbnRhaW5lciA9IGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuX3BhcnNlRnJvbUluZGljZXMob2JqZWN0KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAob2JqZWN0LmNoaWxkcmVuKSB7XG4gICAgICAgICAgICAgICAgICAgIG9iamVjdC5jaGlsZHJlbiA9IHdkQ2IuQ29sbGVjdGlvbi5jcmVhdGU8YW55PihvYmplY3QuY2hpbGRyZW4pO1xuICAgICAgICAgICAgICAgICAgICBvYmplY3QuY2hpbGRyZW4uZm9yRWFjaCgoY2hpbGQ6YW55KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZC5wYXJlbnQgPSBvYmplY3Q7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcnNlKGNoaWxkKTtcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuXG5cbiAgICAgICAgICAgIGRhdGEub2JqZWN0cy5mb3JFYWNoKChvYmplY3Q6YW55KSA9PiB7XG4gICAgICAgICAgICAgICAgLy90b3AncyBwYXJlbnQgaXMgbnVsbFxuICAgICAgICAgICAgICAgIG9iamVjdC5wYXJlbnQgPSBudWxsO1xuXG4gICAgICAgICAgICAgICAgcGFyc2Uob2JqZWN0KTtcblxuICAgICAgICAgICAgICAgIHNlbGYuX3JlbW92ZU9iamVjdENvbnRhaW5lckRhdGEob2JqZWN0KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfaXNPYmplY3RDb250YWluZXIob2JqZWN0OkRZRmlsZUpzb25PYmplY3REYXRhKSB7XG4gICAgICAgICAgICByZXR1cm4gIUdlb21ldHJ5VXRpbHMuaGFzRGF0YShvYmplY3QudmVydGljZUluZGljZXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfcGFyc2VGcm9tSW5kaWNlcyhvYmplY3Q6YW55KSB7XG4gICAgICAgICAgICB0aGlzLl9kdXBsaWNhdGVWZXJ0ZXhXaXRoRGlmZmVyZW50VXZzKG9iamVjdCk7XG4gICAgICAgICAgICB0aGlzLl9wYXJzZU9iamVjdEZyb21JbmRpY2VzKG9iamVjdCk7XG4gICAgICAgICAgICB0aGlzLl9yZW1vdmVSZWJ1bmRhbnRJbmRpY2VEYXRhKG9iamVjdCk7XG4gICAgICAgIH1cblxuICAgICAgICAvL3RvZG8gaGFuZGxlIFwic2FtZSB2ZXJ0ZXggZGlmZmVyZW50IG5vcm1hbHNcIiBzaXR1YXRpb24/XG4gICAgICAgIHByaXZhdGUgX2R1cGxpY2F0ZVZlcnRleFdpdGhEaWZmZXJlbnRVdnMob2JqZWN0OmFueSkge1xuICAgICAgICAgICAgdmFyIGFyciA9IFtdLFxuICAgICAgICAgICAgICAgIGNvbnRhaW5lciA9IHdkQ2IuSGFzaC5jcmVhdGU8d2RDYi5Db2xsZWN0aW9uPEFycmF5PG51bWJlcj4+PigpLFxuICAgICAgICAgICAgICAgIHZlcnRpY2VJbmRpY2VzID0gb2JqZWN0LnZlcnRpY2VJbmRpY2VzLFxuICAgICAgICAgICAgICAgIHV2SW5kaWNlcyA9IG9iamVjdC51dkluZGljZXM7XG5cbiAgICAgICAgICAgIGlmICghR2VvbWV0cnlVdGlscy5oYXNEYXRhKHV2SW5kaWNlcykpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSB2ZXJ0aWNlSW5kaWNlcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgICAgIHZhciB2ZXJ0aWNlSW5kZXggPSB2ZXJ0aWNlSW5kaWNlc1tpXTtcblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9pc1NhbWVWZXJ0ZXhXaXRoRGlmZmVyZW50VXZzQnlDb21wYXJlVG9GaXJzdE9uZShhcnIsIHV2SW5kaWNlc1tpXSwgdmVydGljZUluZGV4KSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5faXNVdkluZGljZUVxdWFsVGhlT25lT2ZBZGRlZFZlcnRleChjb250YWluZXIsIHZlcnRpY2VJbmRleCwgdXZJbmRpY2VzW2ldKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmVydGljZUluZGljZXNbaV0gPSB0aGlzLl9nZXRWZXJ0aWNlSW5kZXhPZkFkZGVkVmVydGV4QnlGaW5kQ29udGFpbmVyKGNvbnRhaW5lciwgdmVydGljZUluZGV4LCB1dkluZGljZXNbaV0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fYWRkVmVydGV4RGF0YShvYmplY3QsIGNvbnRhaW5lciwgdmVydGljZUluZGV4LCBpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHZlcnRpY2VJbmRleCA9IHZlcnRpY2VJbmRpY2VzW2ldO1xuICAgICAgICAgICAgICAgIH1cblxuXG4gICAgICAgICAgICAgICAgYXJyW3ZlcnRpY2VJbmRleF0gPSB1dkluZGljZXNbaV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9pc1NhbWVWZXJ0ZXhXaXRoRGlmZmVyZW50VXZzQnlDb21wYXJlVG9GaXJzdE9uZShhcnIsIHV2SW5kZXgsIHZlcnRpY2VJbmRleCkge1xuICAgICAgICAgICAgcmV0dXJuIGFyclt2ZXJ0aWNlSW5kZXhdICE9PSB2b2lkIDAgJiYgYXJyW3ZlcnRpY2VJbmRleF0gIT09IHV2SW5kZXg7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9hZGRWZXJ0ZXhEYXRhKG9iamVjdCwgY29udGFpbmVyLCB2ZXJ0aWNlSW5kZXgsIGluZGV4KSB7XG4gICAgICAgICAgICB2YXIgdmVydGljZUluZGljZXMgPSBvYmplY3QudmVydGljZUluZGljZXMsXG4gICAgICAgICAgICAgICAgdXZJbmRpY2VzID0gb2JqZWN0LnV2SW5kaWNlcyxcbiAgICAgICAgICAgICAgICBub3JtYWxJbmRpY2VzID0gb2JqZWN0Lm5vcm1hbEluZGljZXMsXG4gICAgICAgICAgICAgICAgdmVydGljZXMgPSB0aGlzLl9maW5kRGF0YShvYmplY3QsIFwidmVydGljZXNcIiksXG4gICAgICAgICAgICAgICAgbm9ybWFscyA9IHRoaXMuX2ZpbmREYXRhKG9iamVjdCwgXCJub3JtYWxzXCIpLFxuICAgICAgICAgICAgICAgIG1vcnBoVGFyZ2V0cyA9IHRoaXMuX2ZpbmREYXRhKG9iamVjdCwgXCJtb3JwaFRhcmdldHNcIiksXG4gICAgICAgICAgICAgICAgdmVydGljZUluZGV4T2ZBZGRlZFZlcnRleCA9IG51bGw7XG5cbiAgICAgICAgICAgIHRoaXMuX2FkZFRocmVlQ29tcG9uZW50KHZlcnRpY2VzLCB2ZXJ0aWNlSW5kZXgpO1xuXG4gICAgICAgICAgICB2ZXJ0aWNlSW5kZXhPZkFkZGVkVmVydGV4ID0gdGhpcy5fZ2V0VmVydGljZUluZGV4T2ZBZGRlZFZlcnRleCh2ZXJ0aWNlcyk7XG5cbiAgICAgICAgICAgIHZlcnRpY2VJbmRpY2VzW2luZGV4XSA9IHZlcnRpY2VJbmRleE9mQWRkZWRWZXJ0ZXg7XG5cblxuICAgICAgICAgICAgaWYgKEdlb21ldHJ5VXRpbHMuaGFzRGF0YShtb3JwaFRhcmdldHMpKSB7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgZnJhbWUgb2YgbW9ycGhUYXJnZXRzKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2FkZFRocmVlQ29tcG9uZW50KGZyYW1lLnZlcnRpY2VzLCB2ZXJ0aWNlSW5kZXgpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChHZW9tZXRyeVV0aWxzLmhhc0RhdGEoZnJhbWUubm9ybWFscykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2FkZER1cGxpY2F0ZU5vcm1hbE9mQWRkZWRWZXJ0ZXgoZnJhbWUubm9ybWFscywgbm9ybWFsSW5kaWNlcywgaW5kZXgsIHZlcnRpY2VJbmRleCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChHZW9tZXRyeVV0aWxzLmhhc0RhdGEobm9ybWFscykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9hZGREdXBsaWNhdGVOb3JtYWxPZkFkZGVkVmVydGV4KG5vcm1hbHMsIG5vcm1hbEluZGljZXMsIGluZGV4LCB2ZXJ0aWNlSW5kZXgpO1xuXG4gICAgICAgICAgICAgICAgaWYgKEdlb21ldHJ5VXRpbHMuaGFzRGF0YShub3JtYWxJbmRpY2VzKSkge1xuICAgICAgICAgICAgICAgICAgICBub3JtYWxJbmRpY2VzW2luZGV4XSA9IHZlcnRpY2VJbmRleE9mQWRkZWRWZXJ0ZXg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChTdHJpbmcodmVydGljZUluZGV4KSwgW3V2SW5kaWNlc1tpbmRleF0sIHZlcnRpY2VJbmRleE9mQWRkZWRWZXJ0ZXhdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX2FkZER1cGxpY2F0ZU5vcm1hbE9mQWRkZWRWZXJ0ZXgobm9ybWFscywgbm9ybWFsSW5kaWNlcywgaW5kZXgsIG9sZFZlcnRpY2VJbmRleCkge1xuICAgICAgICAgICAgaWYgKCFHZW9tZXRyeVV0aWxzLmhhc0RhdGEobm9ybWFsSW5kaWNlcykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9hZGRUaHJlZUNvbXBvbmVudChub3JtYWxzLCBub3JtYWxzLCBvbGRWZXJ0aWNlSW5kZXgpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgIHRoaXMuX2FkZFRocmVlQ29tcG9uZW50KG5vcm1hbHMsIG5vcm1hbHMsIG5vcm1hbEluZGljZXNbaW5kZXhdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX2lzVXZJbmRpY2VFcXVhbFRoZU9uZU9mQWRkZWRWZXJ0ZXgoY29udGFpbmVyLCB0YXJnZXRWZXJ0aWNlSW5kZXgsIHRhcmdldFV2SW5kZXgpIHtcbiAgICAgICAgICAgIHZhciBkYXRhID0gY29udGFpbmVyLmdldENoaWxkKFN0cmluZyh0YXJnZXRWZXJ0aWNlSW5kZXgpKTtcblxuICAgICAgICAgICAgaWYgKCFkYXRhKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gZGF0YS5oYXNDaGlsZCgoW3V2SW5kZXgsIHZlcnRpY2VJbmRleF0pID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdXZJbmRleCA9PT0gdGFyZ2V0VXZJbmRleDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgQHJlcXVpcmUoZnVuY3Rpb24gKGNvbnRhaW5lciwgdGFyZ2V0VmVydGljZUluZGV4LCB0YXJnZXRVdkluZGV4KSB7XG4gICAgICAgICAgICBhc3NlcnQodGhpcy5faXNVdkluZGljZUVxdWFsVGhlT25lT2ZBZGRlZFZlcnRleChjb250YWluZXIsIHRhcmdldFZlcnRpY2VJbmRleCwgdGFyZ2V0VXZJbmRleCksIExvZy5pbmZvLkZVTkNfU0hPVUxEKFwidXZJbmRleFwiLCBcImVxdWFsIHRoZSBvbmUgb2YgYWRkZWQgdmVydGV4XCIpKVxuICAgICAgICB9KVxuICAgICAgICBwcml2YXRlIF9nZXRWZXJ0aWNlSW5kZXhPZkFkZGVkVmVydGV4QnlGaW5kQ29udGFpbmVyKGNvbnRhaW5lciwgdGFyZ2V0VmVydGljZUluZGV4LCB0YXJnZXRVdkluZGV4KSB7XG4gICAgICAgICAgICB2YXIgZGF0YSA9IGNvbnRhaW5lci5nZXRDaGlsZChTdHJpbmcodGFyZ2V0VmVydGljZUluZGV4KSk7XG5cbiAgICAgICAgICAgIHJldHVybiBkYXRhLmZpbmRPbmUoKFt1dkluZGV4LCB2ZXJ0aWNlSW5kZXhdKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHV2SW5kZXggPT09IHRhcmdldFV2SW5kZXg7XG4gICAgICAgICAgICB9KVsxXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX2dldFZlcnRpY2VJbmRleE9mQWRkZWRWZXJ0ZXgodmVydGljZXMpIHtcbiAgICAgICAgICAgIHJldHVybiB2ZXJ0aWNlcy5sZW5ndGggLyAzIC0gMTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX2FkZFRocmVlQ29tcG9uZW50KGRhdGE6QXJyYXk8bnVtYmVyPiwgaW5kZXg6bnVtYmVyKTtcbiAgICAgICAgcHJpdmF0ZSBfYWRkVGhyZWVDb21wb25lbnQodGFyZ2V0RGF0YTpBcnJheTxudW1iZXI+LCBzb3VyY2VEYXRhOkFycmF5PG51bWJlcj4sIGluZGV4Om51bWJlcik7XG5cbiAgICAgICAgcHJpdmF0ZSBfYWRkVGhyZWVDb21wb25lbnQoLi4uYXJncykge1xuICAgICAgICAgICAgaWYgKGFyZ3MubGVuZ3RoID09PSAyKSB7XG4gICAgICAgICAgICAgICAgbGV0IGRhdGEgPSBhcmdzWzBdLFxuICAgICAgICAgICAgICAgICAgICBpbmRleCA9IGFyZ3NbMV07XG5cbiAgICAgICAgICAgICAgICBkYXRhLnB1c2goXG4gICAgICAgICAgICAgICAgICAgIGRhdGFbaW5kZXggKiAzXSxcbiAgICAgICAgICAgICAgICAgICAgZGF0YVtpbmRleCAqIDMgKyAxXSxcbiAgICAgICAgICAgICAgICAgICAgZGF0YVtpbmRleCAqIDMgKyAyXVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBsZXQgdGFyZ2V0RGF0YSA9IGFyZ3NbMF0sXG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZURhdGEgPSBhcmdzWzFdLFxuICAgICAgICAgICAgICAgICAgICBpbmRleCA9IGFyZ3NbMl07XG5cbiAgICAgICAgICAgICAgICB0YXJnZXREYXRhLnB1c2goXG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZURhdGFbaW5kZXggKiAzXSxcbiAgICAgICAgICAgICAgICAgICAgc291cmNlRGF0YVtpbmRleCAqIDMgKyAxXSxcbiAgICAgICAgICAgICAgICAgICAgc291cmNlRGF0YVtpbmRleCAqIDMgKyAyXVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9wYXJzZU9iamVjdEZyb21JbmRpY2VzKG9iamVjdDphbnkpIHtcbiAgICAgICAgICAgIHZhciB2ZXJ0aWNlcyA9IFtdLFxuICAgICAgICAgICAgICAgIHV2cyA9IFtdLFxuICAgICAgICAgICAgICAgIGZhY2VzID0gW10sXG4gICAgICAgICAgICAgICAgZmFjZTpGYWNlMyA9IG51bGwsXG4gICAgICAgICAgICAgICAgY29sb3JzID0gW10sXG4gICAgICAgICAgICAgICAgb2JqZWN0VmVydGljZXMgPSB0aGlzLl9maW5kRGF0YShvYmplY3QsIFwidmVydGljZXNcIiksXG4gICAgICAgICAgICAgICAgb2JqZWN0VVZzID0gdGhpcy5fZmluZERhdGEob2JqZWN0LCBcInV2c1wiKSxcbiAgICAgICAgICAgICAgICBvYmplY3ROb3JtYWxzID0gdGhpcy5fZmluZERhdGEob2JqZWN0LCBcIm5vcm1hbHNcIiksXG4gICAgICAgICAgICAgICAgb2JqZWN0Q29sb3JzID0gdGhpcy5fZmluZERhdGEob2JqZWN0LCBcImNvbG9yc1wiKTtcblxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IG9iamVjdC52ZXJ0aWNlSW5kaWNlcy5sZW5ndGg7IGkgPCBsZW47IGkgKz0gMykge1xuICAgICAgICAgICAgICAgIGxldCBhSW5kZXggPSBvYmplY3QudmVydGljZUluZGljZXNbaV0sXG4gICAgICAgICAgICAgICAgICAgIGJJbmRleCA9IG9iamVjdC52ZXJ0aWNlSW5kaWNlc1tpICsgMV0sXG4gICAgICAgICAgICAgICAgICAgIGNJbmRleCA9IG9iamVjdC52ZXJ0aWNlSW5kaWNlc1tpICsgMl0sXG4gICAgICAgICAgICAgICAgICAgIGluZGV4QXJyID0gW2ksIGkgKyAxLCBpICsgMl0sXG4gICAgICAgICAgICAgICAgICAgIHZlcnRpY2VJbmRpY2VBcnIgPSBbYUluZGV4LCBiSW5kZXgsIGNJbmRleF07XG5cbiAgICAgICAgICAgICAgICBmYWNlID0gRmFjZTMuY3JlYXRlKGFJbmRleCwgYkluZGV4LCBjSW5kZXgpO1xuXG4gICAgICAgICAgICAgICAgaWYgKEdlb21ldHJ5VXRpbHMuaGFzRGF0YShvYmplY3QudXZJbmRpY2VzKSAmJiBHZW9tZXRyeVV0aWxzLmhhc0RhdGEob2JqZWN0VVZzKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zZXRVVih1dnMsIG9iamVjdFVWcywgb2JqZWN0LnV2SW5kaWNlcywgaW5kZXhBcnIsIHZlcnRpY2VJbmRpY2VBcnIpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChHZW9tZXRyeVV0aWxzLmhhc0RhdGEob2JqZWN0Tm9ybWFscykpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2V0Tm9ybWFsKGZhY2UudmVydGV4Tm9ybWFscywgb2JqZWN0Tm9ybWFscywgb2JqZWN0Lm5vcm1hbEluZGljZXMsIGluZGV4QXJyLCB2ZXJ0aWNlSW5kaWNlQXJyKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmYWNlcy5wdXNoKGZhY2UpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBvYmplY3QudmVydGljZXMgPSBvYmplY3RWZXJ0aWNlcztcblxuICAgICAgICAgICAgaWYgKCFHZW9tZXRyeVV0aWxzLmhhc0RhdGEob2JqZWN0LnV2SW5kaWNlcykpIHtcbiAgICAgICAgICAgICAgICBvYmplY3QudXZzID0gb2JqZWN0VVZzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgb2JqZWN0LnV2cyA9IHV2cztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgb2JqZWN0LmNvbG9ycyA9IG9iamVjdENvbG9ycztcbiAgICAgICAgICAgIG9iamVjdC5mYWNlcyA9IGZhY2VzO1xuXG4gICAgICAgICAgICB0aGlzLl9zZXRNb3JwaFRhcmdldHMob2JqZWN0LCBvYmplY3QudmVydGljZUluZGljZXMsIG9iamVjdC5ub3JtYWxJbmRpY2VzKTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgcHJpdmF0ZSBfZ2V0QW5pbU5hbWUoZnJhbWVOYW1lOnN0cmluZykge1xuICAgICAgICAgICAgY29uc3QgUEFUVEVSTiA9IC8oW2Etel0rKV8/KFxcZCspLyxcbiAgICAgICAgICAgICAgICBERUZBVUxUX0FOSU1fTkFNRSA9IFwiZGVmYXVsdFwiO1xuICAgICAgICAgICAgdmFyIHBhcnRzID0gZnJhbWVOYW1lLm1hdGNoKFBBVFRFUk4pO1xuXG4gICAgICAgICAgICByZXR1cm4gcGFydHMgJiYgcGFydHMubGVuZ3RoID4gMSA/IHBhcnRzWzFdIDogREVGQVVMVF9BTklNX05BTUU7XG4gICAgICAgIH1cblxuXG4gICAgICAgIEBlbnN1cmUoZnVuY3Rpb24gKHJldHVyblZhbHVlLCBvYmplY3QpIHtcbiAgICAgICAgICAgIGFzc2VydCghb2JqZWN0LnZlcnRpY2VJbmRpY2VzLCBMb2cuaW5mby5GVU5DX1NIT1VMRChcIm9iamVjdC52ZXJ0aWNlSW5kaWNlc1wiLCBcImJlIHJlbW92ZWRcIikpO1xuICAgICAgICAgICAgYXNzZXJ0KCFvYmplY3QudXZJbmRpY2VzLCBMb2cuaW5mby5GVU5DX1NIT1VMRChcIm9iamVjdC51dkluZGljZXNcIiwgXCJiZSByZW1vdmVkXCIpKTtcbiAgICAgICAgICAgIGFzc2VydCghb2JqZWN0Lm5vcm1hbEluZGljZXMsIExvZy5pbmZvLkZVTkNfU0hPVUxEKFwib2JqZWN0Lm5vcm1hbEluZGljZXNcIiwgXCJiZSByZW1vdmVkXCIpKTtcbiAgICAgICAgfSlcbiAgICAgICAgcHJpdmF0ZSBfcmVtb3ZlUmVidW5kYW50SW5kaWNlRGF0YShvYmplY3Q6RFlGaWxlSnNvbk9iamVjdERhdGEpIHtcbiAgICAgICAgICAgIGRlbGV0ZSBvYmplY3QudmVydGljZUluZGljZXM7XG4gICAgICAgICAgICBkZWxldGUgb2JqZWN0LnV2SW5kaWNlcztcbiAgICAgICAgICAgIGRlbGV0ZSBvYmplY3Qubm9ybWFsSW5kaWNlcztcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX3JlbW92ZU9iamVjdENvbnRhaW5lckRhdGEob2JqZWN0OkRZRmlsZVBhcnNlT2JqZWN0RGF0YSkge1xuICAgICAgICAgICAgdmFyIHJlbW92ZSA9IG51bGw7XG5cbiAgICAgICAgICAgIHJlbW92ZSA9IChvYmplY3Q6RFlGaWxlUGFyc2VPYmplY3REYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKG9iamVjdC5pc0NvbnRhaW5lcikge1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgb2JqZWN0LnZlcnRpY2VzO1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgb2JqZWN0LnV2cztcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIG9iamVjdC5jb2xvcnM7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKG9iamVjdC5jaGlsZHJlbikge1xuICAgICAgICAgICAgICAgICAgICBvYmplY3QuY2hpbGRyZW4uZm9yRWFjaCgoY2hpbGQ6YW55KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZW1vdmUoY2hpbGQpO1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHJlbW92ZShvYmplY3QpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfZmluZERhdGEob2JqZWN0OkRZRmlsZVBhcnNlT2JqZWN0RGF0YSwgZGF0YU5hbWU6c3RyaW5nKSB7XG4gICAgICAgICAgICB2YXIgZGF0YSA9IG51bGw7XG5cbiAgICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgICAgICBkYXRhID0gb2JqZWN0W2RhdGFOYW1lXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHdoaWxlICghZGF0YSAmJiAob2JqZWN0ID0gb2JqZWN0LnBhcmVudCkgIT09IG51bGwpO1xuXG4gICAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgcHJpdmF0ZSBfc2V0VVYodGFyZ2V0VVZzOkFycmF5PG51bWJlcj4sIHNvdXJjZVVWczpBcnJheTxudW1iZXI+LCB1dkluZGljZXM6QXJyYXk8bnVtYmVyPiwgaW5kZXhBcnI6QXJyYXk8bnVtYmVyPiwgdmVydGljZUluZGljZUFycjpBcnJheTxudW1iZXI+KSB7XG4gICAgICAgICAgICB2YXIgdXZJbmRpY2UxID0gbnVsbCxcbiAgICAgICAgICAgICAgICB1dkluZGljZTIgPSBudWxsLFxuICAgICAgICAgICAgICAgIHV2SW5kaWNlMyA9IG51bGwsXG4gICAgICAgICAgICAgICAgW2luZGV4MSwgaW5kZXgyLCBpbmRleDNdID0gaW5kZXhBcnIsXG4gICAgICAgICAgICAgICAgW2FJbmRleCwgYkluZGV4LCBjSW5kZXhdID0gdmVydGljZUluZGljZUFycjtcblxuICAgICAgICAgICAgdXZJbmRpY2UxID0gdXZJbmRpY2VzW2luZGV4MV07XG4gICAgICAgICAgICB1dkluZGljZTIgPSB1dkluZGljZXNbaW5kZXgyXTtcbiAgICAgICAgICAgIHV2SW5kaWNlMyA9IHV2SW5kaWNlc1tpbmRleDNdO1xuXG4gICAgICAgICAgICB0aGlzLl9zZXRUd29Db21wb25lbnREYXRhKHRhcmdldFVWcywgc291cmNlVVZzLCBhSW5kZXgsIHV2SW5kaWNlMSk7XG4gICAgICAgICAgICB0aGlzLl9zZXRUd29Db21wb25lbnREYXRhKHRhcmdldFVWcywgc291cmNlVVZzLCBiSW5kZXgsIHV2SW5kaWNlMik7XG4gICAgICAgICAgICB0aGlzLl9zZXRUd29Db21wb25lbnREYXRhKHRhcmdldFVWcywgc291cmNlVVZzLCBjSW5kZXgsIHV2SW5kaWNlMyk7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9zZXRUd29Db21wb25lbnREYXRhKHRhcmdldERhdGEsIHNvdXJjZURhdGEsIGluZGV4LCBpbmRpY2UpIHtcbiAgICAgICAgICAgIHRhcmdldERhdGFbaW5kZXggKiAyXSA9IHNvdXJjZURhdGFbaW5kaWNlICogMl07XG4gICAgICAgICAgICB0YXJnZXREYXRhW2luZGV4ICogMiArIDFdID0gc291cmNlRGF0YVtpbmRpY2UgKiAyICsgMV07XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9zZXRUaHJlZUNvbXBvbmVudERhdGEodGFyZ2V0RGF0YSwgc291cmNlRGF0YSwgaW5kZXgsIGluZGljZSkge1xuICAgICAgICAgICAgdGFyZ2V0RGF0YVtpbmRleCAqIDNdID0gc291cmNlRGF0YVtpbmRpY2UgKiAzXTtcbiAgICAgICAgICAgIHRhcmdldERhdGFbaW5kZXggKiAzICsgMV0gPSBzb3VyY2VEYXRhW2luZGljZSAqIDMgKyAxXTtcbiAgICAgICAgICAgIHRhcmdldERhdGFbaW5kZXggKiAzICsgMl0gPSBzb3VyY2VEYXRhW2luZGljZSAqIDMgKyAyXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX2dldFRocmVlQ29tcG9uZW50RGF0YShzb3VyY2VEYXRhOkFycmF5PG51bWJlcj4sIGluZGV4Om51bWJlcikge1xuICAgICAgICAgICAgdmFyIHN0YXJ0SW5kZXggPSAzICogaW5kZXg7XG5cbiAgICAgICAgICAgIHJldHVybiBWZWN0b3IzLmNyZWF0ZShcbiAgICAgICAgICAgICAgICBzb3VyY2VEYXRhW3N0YXJ0SW5kZXhdLFxuICAgICAgICAgICAgICAgIHNvdXJjZURhdGFbc3RhcnRJbmRleCArIDFdLFxuICAgICAgICAgICAgICAgIHNvdXJjZURhdGFbc3RhcnRJbmRleCArIDJdXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfc2V0Tm9ybWFsKHRhcmdldE5vcm1hbHM6d2RDYi5Db2xsZWN0aW9uPFZlY3RvcjM+fEFycmF5PG51bWJlcj4sIHNvdXJjZU5vcm1hbHM6QXJyYXk8bnVtYmVyPiwgbm9ybWFsSW5kaWNlczpBcnJheTxudW1iZXI+LCBpbmRleEFycjpBcnJheTxudW1iZXI+LCB2ZXJ0aWNlSW5kaWNlQXJyOkFycmF5PG51bWJlcj4pIHtcbiAgICAgICAgICAgIHZhciBbaW5kZXgxLCBpbmRleDIsIGluZGV4M10gPSBpbmRleEFycjtcblxuICAgICAgICAgICAgaWYgKCFHZW9tZXRyeVV0aWxzLmhhc0RhdGEobm9ybWFsSW5kaWNlcykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9hZGROb3JtYWxEYXRhKHRhcmdldE5vcm1hbHMsIHNvdXJjZU5vcm1hbHMsIHZlcnRpY2VJbmRpY2VBcnIpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLl9hZGROb3JtYWxEYXRhKHRhcmdldE5vcm1hbHMsIHNvdXJjZU5vcm1hbHMsIFtub3JtYWxJbmRpY2VzW2luZGV4MV0sIG5vcm1hbEluZGljZXNbaW5kZXgyXSwgbm9ybWFsSW5kaWNlc1tpbmRleDNdXSk7XG4gICAgICAgIH1cblxuXG4gICAgICAgIHByaXZhdGUgX2FkZE5vcm1hbERhdGEodGFyZ2V0Tm9ybWFsczp3ZENiLkNvbGxlY3Rpb248VmVjdG9yMz58QXJyYXk8bnVtYmVyPiwgc291cmNlTm9ybWFsczpBcnJheTxudW1iZXI+LCBub3JtYWxJbmRpY2VBcnI6QXJyYXk8bnVtYmVyPikge1xuICAgICAgICAgICAgbGV0IFthSW5kZXgsIGJJbmRleCwgY0luZGV4XSA9IG5vcm1hbEluZGljZUFycjtcblxuICAgICAgICAgICAgaWYgKHRhcmdldE5vcm1hbHMgaW5zdGFuY2VvZiB3ZENiLkNvbGxlY3Rpb24pIHtcbiAgICAgICAgICAgICAgICB0YXJnZXROb3JtYWxzLmFkZENoaWxkcmVuKFxuICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9nZXRUaHJlZUNvbXBvbmVudERhdGEoc291cmNlTm9ybWFscywgYUluZGV4KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2dldFRocmVlQ29tcG9uZW50RGF0YShzb3VyY2VOb3JtYWxzLCBiSW5kZXgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZ2V0VGhyZWVDb21wb25lbnREYXRhKHNvdXJjZU5vcm1hbHMsIGNJbmRleClcbiAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBsZXQgbm9ybWFscyA9IDxBcnJheTxudW1iZXI+PnRhcmdldE5vcm1hbHM7XG5cbiAgICAgICAgICAgICAgICBmb3IgKGxldCB2IG9mIFt0aGlzLl9nZXRUaHJlZUNvbXBvbmVudERhdGEoc291cmNlTm9ybWFscywgYUluZGV4KSwgdGhpcy5fZ2V0VGhyZWVDb21wb25lbnREYXRhKHNvdXJjZU5vcm1hbHMsIGJJbmRleCksIHRoaXMuX2dldFRocmVlQ29tcG9uZW50RGF0YShzb3VyY2VOb3JtYWxzLCBjSW5kZXgpXSkge1xuICAgICAgICAgICAgICAgICAgICBub3JtYWxzLnB1c2godi54LCB2LnksIHYueik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfc2V0TW9ycGhUYXJnZXRzKG9iamVjdDpEWUZpbGVQYXJzZU9iamVjdERhdGEsIHZlcnRpY2VJbmRpY2VzOkFycmF5PG51bWJlcj4sIG5vcm1hbEluZGljZXM6QXJyYXk8bnVtYmVyPikge1xuICAgICAgICAgICAgdmFyIG9iamVjdE1vcnBoVGFyZ2V0cyA9IHRoaXMuX2ZpbmREYXRhKG9iamVjdCwgXCJtb3JwaFRhcmdldHNcIiksXG4gICAgICAgICAgICAgICAgbW9ycGhUYXJnZXRzID0gbnVsbCxcbiAgICAgICAgICAgICAgICBtb3JwaE5vcm1hbHMgPSBudWxsO1xuXG5cbiAgICAgICAgICAgIGlmIChHZW9tZXRyeVV0aWxzLmhhc0RhdGEob2JqZWN0TW9ycGhUYXJnZXRzKSkge1xuICAgICAgICAgICAgICAgIG1vcnBoVGFyZ2V0cyA9IHdkQ2IuSGFzaC5jcmVhdGU8d2RDYi5IYXNoPERZRmlsZVBhcnNlTW9ycGhUYXJnZXRzRGF0YT4+KCk7XG4gICAgICAgICAgICAgICAgbW9ycGhOb3JtYWxzID0gd2RDYi5IYXNoLmNyZWF0ZTx3ZENiLkNvbGxlY3Rpb248QXJyYXk8bnVtYmVyPj4+KCk7XG5cbiAgICAgICAgICAgICAgICBmb3IgKGxldCBmcmFtZURhdGEgb2Ygb2JqZWN0TW9ycGhUYXJnZXRzKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBhbmltTmFtZSA9IHRoaXMuX2dldEFuaW1OYW1lKGZyYW1lRGF0YS5uYW1lKTtcblxuICAgICAgICAgICAgICAgICAgICBtb3JwaFRhcmdldHMuYXBwZW5kQ2hpbGQoYW5pbU5hbWUsIGZyYW1lRGF0YS52ZXJ0aWNlcyk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKEdlb21ldHJ5VXRpbHMuaGFzRGF0YShmcmFtZURhdGEubm9ybWFscykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChHZW9tZXRyeVV0aWxzLmhhc0RhdGEobm9ybWFsSW5kaWNlcykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgbm9ybWFscyA9IFtdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHZlcnRpY2VJbmRpY2VzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3NldFRocmVlQ29tcG9uZW50RGF0YShub3JtYWxzLCBmcmFtZURhdGEubm9ybWFscywgdmVydGljZUluZGljZXNbaV0sIG5vcm1hbEluZGljZXNbaV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vcnBoTm9ybWFscy5hcHBlbmRDaGlsZChhbmltTmFtZSwgbm9ybWFscyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb3JwaE5vcm1hbHMuYXBwZW5kQ2hpbGQoYW5pbU5hbWUsIGZyYW1lRGF0YS5ub3JtYWxzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgb2JqZWN0Lm1vcnBoVGFyZ2V0cyA9IG1vcnBoVGFyZ2V0cztcbiAgICAgICAgICAgIG9iamVjdC5tb3JwaE5vcm1hbHMgPSBtb3JwaE5vcm1hbHM7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbiIsIm1vZHVsZSB3ZCB7XG4gICAgZXhwb3J0IGNsYXNzIFdEQnVpbGRlcntcbiAgICAgICAgcHVibGljIHN0YXRpYyBjcmVhdGUoKSB7XG4gICAgICAgICAgICB2YXIgb2JqID0gbmV3IHRoaXMoKTtcblxuICAgICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX3Jlc3VsdDp3ZENiLkhhc2g8RFlGaWxlUmVzdWx0PiA9IHdkQ2IuSGFzaC5jcmVhdGU8RFlGaWxlUmVzdWx0PigpO1xuXG4gICAgICAgIHB1YmxpYyBidWlsZChwYXJzZURhdGE6RFlGaWxlUGFyc2VEYXRhKTp3ZENiLkhhc2g8RFlGaWxlUmVzdWx0PntcbiAgICAgICAgICAgIHRoaXMuX2J1aWxkTWV0YWRhdGEocGFyc2VEYXRhKTtcbiAgICAgICAgICAgIHRoaXMuX2J1aWxkU2NlbmUocGFyc2VEYXRhKTtcbiAgICAgICAgICAgIHRoaXMuX2J1aWxkTW9kZWxzKHBhcnNlRGF0YSk7XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9yZXN1bHQ7XG4gICAgICAgIH1cblxuXG4gICAgICAgIHByaXZhdGUgX2J1aWxkTWV0YWRhdGEocGFyc2VEYXRhOkRZRmlsZVBhcnNlRGF0YSl7XG4gICAgICAgICAgICB2YXIgbWV0YWRhdGEgPSB3ZENiLkhhc2guY3JlYXRlPGFueT4oKTtcblxuICAgICAgICAgICAgZm9yKGxldCBpIGluIHBhcnNlRGF0YS5tZXRhZGF0YSl7XG4gICAgICAgICAgICAgICAgaWYocGFyc2VEYXRhLm1ldGFkYXRhLmhhc093blByb3BlcnR5KGkpKXtcbiAgICAgICAgICAgICAgICAgICAgbWV0YWRhdGEuYWRkQ2hpbGQoaSwgcGFyc2VEYXRhLm1ldGFkYXRhW2ldKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuX3Jlc3VsdC5hZGRDaGlsZChcIm1ldGFkYXRhXCIsIG1ldGFkYXRhKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX2J1aWxkU2NlbmUocGFyc2VEYXRhOkRZRmlsZVBhcnNlRGF0YSl7XG4gICAgICAgICAgICB2YXIgc2NlbmUgPSB3ZENiLkhhc2guY3JlYXRlPGFueT4oKTtcblxuICAgICAgICAgICAgaWYocGFyc2VEYXRhLnNjZW5lLmFtYmllbnRDb2xvcil7XG4gICAgICAgICAgICAgICAgc2NlbmUuYWRkQ2hpbGQoXCJhbWJpZW50Q29sb3JcIiwgcGFyc2VEYXRhLnNjZW5lLmFtYmllbnRDb2xvcik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuX3Jlc3VsdC5hZGRDaGlsZChcInNjZW5lXCIsIHNjZW5lKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX2J1aWxkTW9kZWxzKHBhcnNlRGF0YTpEWUZpbGVQYXJzZURhdGEpe1xuICAgICAgICAgICAgdmFyIG1vZGVscyA9IHdkQ2IuQ29sbGVjdGlvbi5jcmVhdGU8R2FtZU9iamVjdD4oKSxcbiAgICAgICAgICAgICAgICBzZWxmID0gdGhpcyxcbiAgICAgICAgICAgICAgICBidWlsZCA9IG51bGw7XG5cbiAgICAgICAgICAgIGJ1aWxkID0gKG9iamVjdHM6d2RDYi5Db2xsZWN0aW9uPERZRmlsZVBhcnNlT2JqZWN0RGF0YT4sIG1vZGVsczp7YWRkQ2hpbGQ6RnVuY3Rpb259KSA9PiB7XG4gICAgICAgICAgICAgICAgb2JqZWN0cy5mb3JFYWNoKChvYmplY3Q6RFlGaWxlUGFyc2VPYmplY3REYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBnZW9tZXRyeSA9IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbCA9IG51bGw7XG5cbiAgICAgICAgICAgICAgICAgICAgbW9kZWwgPSBHYW1lT2JqZWN0LmNyZWF0ZSgpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmKHNlbGYuX2lzTW9kZWxDb250YWluZXIob2JqZWN0KSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAvL3RvZG8gcmVmYWN0b3I/XG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5hZGRUYWcoV0RUYWcuQ09OVEFJTkVSKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2VvbWV0cnkgPSBNb2RlbEdlb21ldHJ5LmNyZWF0ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2VvbWV0cnkudmVydGljZXMgPSBvYmplY3QudmVydGljZXM7XG4gICAgICAgICAgICAgICAgICAgICAgICBnZW9tZXRyeS5mYWNlcyA9IG9iamVjdC5mYWNlcztcbiAgICAgICAgICAgICAgICAgICAgICAgIGdlb21ldHJ5LnRleENvb3JkcyA9IG9iamVjdC51dnM7XG4gICAgICAgICAgICAgICAgICAgICAgICBnZW9tZXRyeS5jb2xvcnMgPSBvYmplY3QuY29sb3JzO1xuXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKG9iamVjdC5tYXRlcmlhbCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2VvbWV0cnkubWF0ZXJpYWwgPSBzZWxmLl9idWlsZE1hdGVyaWFsKG9iamVjdC5tYXRlcmlhbCwgcGFyc2VEYXRhLm1hdGVyaWFscyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGdlb21ldHJ5Lm1vcnBoVGFyZ2V0cyA9IG9iamVjdC5tb3JwaFRhcmdldHM7XG4gICAgICAgICAgICAgICAgICAgICAgICBnZW9tZXRyeS5tb3JwaEZhY2VOb3JtYWxzID0gb2JqZWN0Lm1vcnBoTm9ybWFscztcbiAgICAgICAgICAgICAgICAgICAgICAgIGdlb21ldHJ5Lm1vcnBoVmVydGV4Tm9ybWFscyA9IG9iamVjdC5tb3JwaE5vcm1hbHM7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKEdlb21ldHJ5VXRpbHMuaGFzRGF0YShnZW9tZXRyeS5tb3JwaFRhcmdldHMpKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5hZGRDb21wb25lbnQoTW9ycGhBbmltYXRpb24uY3JlYXRlKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5hZGRDb21wb25lbnQoZ2VvbWV0cnkpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgbW9kZWwubmFtZSA9IG9iamVjdC5uYW1lO1xuICAgICAgICAgICAgICAgICAgICBtb2RlbC5hZGRDb21wb25lbnQoTWVzaFJlbmRlcmVyLmNyZWF0ZSgpKTtcbiAgICAgICAgICAgICAgICAgICAgbW9kZWxzLmFkZENoaWxkKG1vZGVsKTtcblxuICAgICAgICAgICAgICAgICAgICBpZihvYmplY3QuY2hpbGRyZW4pe1xuICAgICAgICAgICAgICAgICAgICAgICAgYnVpbGQob2JqZWN0LmNoaWxkcmVuLCBtb2RlbCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGJ1aWxkKHBhcnNlRGF0YS5vYmplY3RzLCBtb2RlbHMpO1xuXG4gICAgICAgICAgICB0aGlzLl9yZXN1bHQuYWRkQ2hpbGQoXCJtb2RlbHNcIiwgbW9kZWxzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX2lzTW9kZWxDb250YWluZXIob2JqZWN0OkRZRmlsZVBhcnNlT2JqZWN0RGF0YSl7XG4gICAgICAgICAgICByZXR1cm4gb2JqZWN0LmlzQ29udGFpbmVyO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfYnVpbGRNYXRlcmlhbChtYXRlcmlhbE5hbWU6c3RyaW5nLCBtYXRlcmlhbHM6IHdkQ2IuSGFzaDxEWUZpbGVQYXJzZU1hdGVyaWFsRGF0YT4pe1xuICAgICAgICAgICAgY29uc3QgREVGQVVMVFlQRSA9IFwiTGlnaHRNYXRlcmlhbFwiO1xuICAgICAgICAgICAgdmFyIG1hdGVyaWFsRGF0YSA9IG51bGwsXG4gICAgICAgICAgICAgICAgdHlwZSA9IG51bGwsXG4gICAgICAgICAgICAgICAgbWF0ZXJpYWwgPSBudWxsO1xuXG4gICAgICAgICAgICBbLG1hdGVyaWFsRGF0YV0gPSBtYXRlcmlhbHMuZmluZE9uZSgobWF0ZXJpYWw6RFlGaWxlUGFyc2VNYXRlcmlhbERhdGEsIG5hbWU6c3RyaW5nKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5hbWUgPT09IG1hdGVyaWFsTmFtZTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB0eXBlID0gbWF0ZXJpYWxEYXRhLnR5cGUgfHwgREVGQVVMVFlQRTtcblxuICAgICAgICAgICAgd2RDYi5Mb2cuZXJyb3IoIXdkW3R5cGVdLCB3ZENiLkxvZy5pbmZvLkZVTkNfTk9UX0VYSVNUKGBtYXRlcmlhbENsYXNzOiR7dHlwZX1gKSk7XG5cbiAgICAgICAgICAgIG1hdGVyaWFsID0gd2RbdHlwZV0uY3JlYXRlKCk7XG5cbiAgICAgICAgICAgIG1hdGVyaWFsLm5hbWUgPSBtYXRlcmlhbE5hbWU7XG5cbiAgICAgICAgICAgIGlmIChtYXRlcmlhbERhdGEuZGlmZnVzZUNvbG9yKSB7XG4gICAgICAgICAgICAgICAgbWF0ZXJpYWwuY29sb3IgPSBtYXRlcmlhbERhdGEuZGlmZnVzZUNvbG9yO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1hdGVyaWFsRGF0YS5zcGVjdWxhckNvbG9yKSB7XG4gICAgICAgICAgICAgICAgbWF0ZXJpYWwuc3BlY3VsYXIgPSBtYXRlcmlhbERhdGEuc3BlY3VsYXJDb2xvcjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKG1hdGVyaWFsRGF0YS5kaWZmdXNlTWFwKSB7XG4gICAgICAgICAgICAgICAgbWF0ZXJpYWwuZGlmZnVzZU1hcCA9IG1hdGVyaWFsRGF0YS5kaWZmdXNlTWFwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1hdGVyaWFsRGF0YS5zcGVjdWxhck1hcCkge1xuICAgICAgICAgICAgICAgIG1hdGVyaWFsLnNwZWN1bGFyTWFwID0gbWF0ZXJpYWxEYXRhLnNwZWN1bGFyTWFwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1hdGVyaWFsRGF0YS5ub3JtYWxNYXApIHtcbiAgICAgICAgICAgICAgICBtYXRlcmlhbC5ub3JtYWxNYXAgPSBtYXRlcmlhbERhdGEubm9ybWFsTWFwO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAobWF0ZXJpYWxEYXRhLnNoaW5pbmVzcyAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIG1hdGVyaWFsLnNoaW5pbmVzcyA9IG1hdGVyaWFsRGF0YS5zaGluaW5lc3M7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChtYXRlcmlhbERhdGEub3BhY2l0eSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIG1hdGVyaWFsLm9wYWNpdHkgPSBtYXRlcmlhbERhdGEub3BhY2l0eTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIG1hdGVyaWFsO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4iLCJtb2R1bGUgd2R7XG4gICAgY29uc3QgVFlQRSA9IHtcbiAgICAgICAgXCIuZW90XCI6IFwiZW1iZWRkZWQtb3BlbnR5cGVcIixcbiAgICAgICAgXCIudHRmXCI6IFwidHJ1ZXR5cGVcIixcbiAgICAgICAgXCIud29mZlwiOiBcIndvZmZcIixcbiAgICAgICAgXCIuc3ZnXCI6IFwic3ZnXCJcbiAgICB9O1xuXG4gICAgZGVjbGFyZSB2YXIgZG9jdW1lbnQ6YW55O1xuXG4gICAgZXhwb3J0IGNsYXNzIEZvbnRMb2FkZXIgZXh0ZW5kcyBMb2FkZXJ7XG4gICAgICAgIHByaXZhdGUgc3RhdGljIF9pbnN0YW5jZSA9IG51bGw7XG5cbiAgICAgICAgcHVibGljIHN0YXRpYyBnZXRJbnN0YW5jZSgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9pbnN0YW5jZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2luc3RhbmNlID0gbmV3IHRoaXMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9pbnN0YW5jZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX2ZhbWlseU5hbWU6c3RyaW5nID0gbnVsbDtcblxuXG4gICAgICAgIHB1YmxpYyBkaXNwb3NlKCl7XG4gICAgICAgICAgICBzdXBlci5kaXNwb3NlKCk7XG5cbiAgICAgICAgICAgIHdkQ2IuRG9tUXVlcnkuY3JlYXRlKGAjJHt0aGlzLl9mYW1pbHlOYW1lfWApLnJlbW92ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJvdGVjdGVkIGxvYWRBc3NldCh1cmw6c3RyaW5nLCBpZDpzdHJpbmcpOndkRnJwLlN0cmVhbTtcbiAgICAgICAgcHJvdGVjdGVkIGxvYWRBc3NldCh1cmw6QXJyYXk8c3RyaW5nPiwgaWQ6c3RyaW5nKTp3ZEZycC5TdHJlYW07XG5cbiAgICAgICAgcHJvdGVjdGVkIGxvYWRBc3NldCguLi5hcmdzKTp3ZEZycC5TdHJlYW0ge1xuICAgICAgICAgICAgdmFyIGZhbWlseU5hbWUgPSBhcmdzWzFdLFxuICAgICAgICAgICAgICAgIHNlbGYgPSB0aGlzO1xuXG4gICAgICAgICAgICB0aGlzLl9mYW1pbHlOYW1lID0gZmFtaWx5TmFtZTtcblxuICAgICAgICAgICAgcmV0dXJuIHdkRnJwLmZyb21Qcm9taXNlKG5ldyBSU1ZQLlByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgICAgIHNlbGYuX2FkZFN0eWxlRWxlbWVudChhcmdzLCBmYW1pbHlOYW1lKTtcblxuICAgICAgICAgICAgICAgIGlmKGRvY3VtZW50LmZvbnRzKXtcbiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZm9udHMubG9hZChgMWVtICR7ZmFtaWx5TmFtZX1gKS50aGVuKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uKGUpe1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgTG9nLndhcm4oXCJ5b3VyIGJyb3dzZXIgbm90IHN1cHBvcnQgZG9jdW1lbnQuZm9udHMgYXBpLCBzbyBpdCBjYW4ndCBlbnN1cmUgdGhhdCB0aGUgZm9udCBpcyBsb2FkZWRcIik7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH1cblxuICAgICAgICBAcmVxdWlyZShmdW5jdGlvbih1cmw6c3RyaW5nKXtcbiAgICAgICAgICAgIHZhciBleHRuYW1lID0gd2RDYi5QYXRoVXRpbHMuZXh0bmFtZSh1cmwpLnRvTG93ZXJDYXNlKCk7XG5cbiAgICAgICAgICAgIGFzc2VydCghIVRZUEVbZXh0bmFtZV0sIExvZy5pbmZvLkZVTkNfVU5LTk9XKGB0eXBlOiR7ZXh0bmFtZX1gKSk7XG4gICAgICAgIH0pXG4gICAgICAgIHByaXZhdGUgX2dldFR5cGUodXJsOnN0cmluZyl7XG4gICAgICAgICAgICByZXR1cm4gVFlQRVt3ZENiLlBhdGhVdGlscy5leHRuYW1lKHVybCkudG9Mb3dlckNhc2UoKV07XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9hZGRTdHlsZUVsZW1lbnQoYXJnczphbnksIGZhbWlseU5hbWU6c3RyaW5nKXtcbiAgICAgICAgICAgIGxldCBmb250U3R5bGVFbGU6d2RDYi5Eb21RdWVyeSA9IHdkQ2IuRG9tUXVlcnkuY3JlYXRlKGA8c3R5bGUgaWQ9XCIke2ZhbWlseU5hbWV9XCI+PC9zdHlsZT5gKSxcbiAgICAgICAgICAgICAgICBmb250U3RyID0gbnVsbDtcblxuICAgICAgICAgICAgZm9udFN0eWxlRWxlLnByZXBlbmRUbyhcImJvZHlcIik7XG5cbiAgICAgICAgICAgIGZvbnRTdHIgPSBgQGZvbnQtZmFjZSB7IGZvbnQtZmFtaWx5OiR7ZmFtaWx5TmFtZX07IHNyYzpgO1xuXG4gICAgICAgICAgICAvL3RvZG8gdmVyaWZ5IHdoZXRoZXIgY2FuIHVybCBiZSBhcnJcbiAgICAgICAgICAgIGlmIChKdWRnZVV0aWxzLmlzQXJyYXkoYXJnc1swXSkpIHtcbiAgICAgICAgICAgICAgICBsZXQgdXJsQXJyID0gYXJnc1swXTtcblxuICAgICAgICAgICAgICAgIGZvcihsZXQgdXJsIG9mIHVybEFycil7XG4gICAgICAgICAgICAgICAgICAgIGZvbnRTdHIgKz0gYHVybCgnJHt1cmx9JykgZm9ybWF0KCcke3RoaXMuX2dldFR5cGUodXJsKX0nKSxgO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZvbnRTdHIgPSBmb250U3RyLnJlcGxhY2UoLywkLywgXCI7XCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICBsZXQgdXJsID0gYXJnc1swXTtcblxuICAgICAgICAgICAgICAgIGZvbnRTdHIgKz0gYHVybCgnJHt1cmx9JykgZm9ybWF0KCcke3RoaXMuX2dldFR5cGUodXJsKX0nKTtgO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmb250U3R5bGVFbGUuZ2V0KDApLnRleHRDb250ZW50ICs9IGAke2ZvbnRTdHJ9fTtgO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4iLCJtb2R1bGUgd2Qge1xuICAgIC8vY29uc3QgSU5GT19FWFAgPSAvaW5mbyBbXlxcbl0qKFxcbnwkKS9naSxcbiAgICBjb25zdCBDT01NT05fRVhQID0gL2NvbW1vbiBbXlxcbl0qKFxcbnwkKS9naSxcbiAgICAgICAgUEFHRV9FWFAgPSAvcGFnZSBbXlxcbl0qKFxcbnwkKS9naSxcbiAgICAgICAgQ0hBUl9FWFAgPSAvY2hhciBbXlxcbl0qKFxcbnwkKS9naSxcbiAgICAvL0tFUk5JTkdfRVhQID0gL2tlcm5pbmcgW15cXG5dKihcXG58JCkvZ2ksXG4gICAgICAgIElURU1fRVhQID0gL1xcdys9W14gXFxyXFxuXSsvZ2ksXG4gICAgICAgIElOVF9FWFAgPSAvXltcXC1dP1xcZCskLzsgICAgICAgLy9cIi1cIj9cblxuICAgIGV4cG9ydCBjbGFzcyBGbnRQYXJzZXIge1xuICAgICAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZSgpIHtcbiAgICAgICAgICAgIHZhciBvYmogPSBuZXcgdGhpcygpO1xuXG4gICAgICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHBhcnNlRm50KGZudFN0cjpzdHJpbmcsIHVybDpzdHJpbmcpIHtcbiAgICAgICAgICAgIC8qIVxuICAgICAgICAgICAgIHhBZHZhbmNlOnRoZSBudW1iZXIgb2YgcGl4ZWxzIHRoZSBjdXJzb3IgbW92ZSBmb3J3YXJkIHRvIGRyYXcgdGhlIG5leHQgY2hhciBhZnRlciBkcmF3IGN1cnJlbnQgY2hhclxuICAgICAgICAgICAgIHhPZmZzZXQ6cGl4ZWwgeCBvZmZzZXQgb2YgY3VycmVudCBmb250IHdoZW4gZHJhd2luZ1xuICAgICAgICAgICAgIHlPZmZzZXQ6cGl4ZWwgeSBvZmZzZXQgb2YgY3VycmVudCBmb250IHdoZW4gZHJhd2luZ1xuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB2YXIgZm50ID0gPEZudERhdGE+e30sXG4gICAgICAgICAgICAgICAgY29tbW9uT2JqID0gbnVsbCxcbiAgICAgICAgICAgICAgICBwYWdlT2JqID0gbnVsbDtcblxuICAgICAgICAgICAgY29tbW9uT2JqID0gdGhpcy5fcGFyc2VTdHJUb09iaihmbnRTdHIubWF0Y2goQ09NTU9OX0VYUClbMF0pO1xuXG4gICAgICAgICAgICBmbnQuY29tbW9uSGVpZ2h0ID0gY29tbW9uT2JqW1wibGluZUhlaWdodFwiXTtcblxuICAgICAgICAgICAgLy90b2RvIHN1cHBvcnQgcGFnZXNcbiAgICAgICAgICAgIGlmIChjb21tb25PYmpbXCJwYWdlc1wiXSAhPT0gMSkge1xuICAgICAgICAgICAgICAgIExvZy5sb2coXCJvbmx5IHN1cHBvcnRzIDEgcGFnZVwiKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcGFnZU9iaiA9IHRoaXMuX3BhcnNlU3RyVG9PYmooZm50U3RyLm1hdGNoKFBBR0VfRVhQKVswXSk7XG5cbiAgICAgICAgICAgIGlmIChwYWdlT2JqW1wiaWRcIl0gIT09IDApIHtcbiAgICAgICAgICAgICAgICBMb2cubG9nKFwiZmlsZSBjb3VsZCBub3QgYmUgZm91bmRcIik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZudC5hdGxhc05hbWUgPSB3ZENiLlBhdGhVdGlscy5jaGFuZ2VCYXNlbmFtZSh1cmwsIDxzdHJpbmc+cGFnZU9ialtcImZpbGVcIl0pO1xuXG4gICAgICAgICAgICB0aGlzLl9wYXJzZUNoYXIoZm50U3RyLCBmbnQpO1xuXG4gICAgICAgICAgICAvKiFcbiAgICAgICAgICAgICAvL3RvZG8gc3VwcG9ydCBrZXJuaW5nXG4gICAgICAgICAgICAgaHR0cDovL3d3dy5ibHVlaWRlYS5jb20vZGVzaWduL2RvYy8yMDA3LzUxNjAuYXNwXG4gICAgICAgICAgICAgKi9cblxuXG4gICAgICAgICAgICAvL3RvZG8gdXNlIHBhZGRpbmc/XG4gICAgICAgICAgICAvL3BhZGRpbmcgPSB0aGlzLl9wYXJzZVBhZGRpbmcoZm50U3RyKVxuXG4gICAgICAgICAgICByZXR1cm4gZm50O1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfcGFyc2VTdHJUb09iaihzdHIpIHtcbiAgICAgICAgICAgIHZhciBhcnIgPSBzdHIubWF0Y2goSVRFTV9FWFApLFxuICAgICAgICAgICAgICAgIG9iaiA9IDxhbnk+e307XG5cbiAgICAgICAgICAgIGlmIChhcnIpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCB0ZW1wU3RyIG9mIGFycikge1xuICAgICAgICAgICAgICAgICAgICBsZXQgaW5kZXggPSB0ZW1wU3RyLmluZGV4T2YoXCI9XCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAga2V5ID0gdGVtcFN0ci5zdWJzdHJpbmcoMCwgaW5kZXgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6YW55ID0gdGVtcFN0ci5zdWJzdHJpbmcoaW5kZXggKyAxKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlLm1hdGNoKElOVF9FWFApKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHBhcnNlSW50KHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh2YWx1ZVswXSA9PSAnXCInKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnN1YnN0cmluZygxLCB2YWx1ZS5sZW5ndGggLSAxKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBvYmpba2V5XSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9wYXJzZUNoYXIoZm50U3RyOnN0cmluZywgZm50OmFueSkge1xuICAgICAgICAgICAgdmFyIGNoYXJMaW5lcyA9IGZudFN0ci5tYXRjaChDSEFSX0VYUCksXG4gICAgICAgICAgICAgICAgZm9udERlZkRpY3Rpb25hcnkgPSB7fTtcblxuXG4gICAgICAgICAgICBmb3IgKGxldCBjaGFyIG9mIGNoYXJMaW5lcykge1xuICAgICAgICAgICAgICAgIGxldCBjaGFyT2JqID0gdGhpcy5fcGFyc2VTdHJUb09iaihjaGFyKSxcbiAgICAgICAgICAgICAgICAgICAgY2hhcklkID0gY2hhck9ialtcImlkXCJdO1xuXG4gICAgICAgICAgICAgICAgZm9udERlZkRpY3Rpb25hcnlbY2hhcklkXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgcmVjdDoge3g6IGNoYXJPYmpbXCJ4XCJdLCB5OiBjaGFyT2JqW1wieVwiXSwgd2lkdGg6IGNoYXJPYmpbXCJ3aWR0aFwiXSwgaGVpZ2h0OiBjaGFyT2JqW1wiaGVpZ2h0XCJdfSxcbiAgICAgICAgICAgICAgICAgICAgeE9mZnNldDogY2hhck9ialtcInhvZmZzZXRcIl0sXG4gICAgICAgICAgICAgICAgICAgIHlPZmZzZXQ6IGNoYXJPYmpbXCJ5b2Zmc2V0XCJdLFxuXG4gICAgICAgICAgICAgICAgICAgIC8veEFkdmFuY2UgZXF1YWwgd2lkdGggb2YgY2hhciB0ZXh0dXJlXG4gICAgICAgICAgICAgICAgICAgIHhBZHZhbmNlOiBjaGFyT2JqW1wieGFkdmFuY2VcIl1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmbnQuZm9udERlZkRpY3Rpb25hcnkgPSBmb250RGVmRGljdGlvbmFyeTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vcHJpdmF0ZSBfcGFyc2VQYWRkaW5nKGZudFN0cjpzdHJpbmcpe1xuICAgICAgICAvLyAgICB2YXIgaW5mb09iaiA9IHRoaXMuX3BhcnNlU3RyVG9PYmooZm50U3RyLm1hdGNoKElORk9fRVhQKVswXSksXG4gICAgICAgIC8vICAgICAgICBwYWRkaW5nQXJyID0gaW5mb09ialtcInBhZGRpbmdcIl0uc3BsaXQoJywnKTtcbiAgICAgICAgLy9cbiAgICAgICAgLy8gICAgcmV0dXJuIHtcbiAgICAgICAgLy8gICAgICAgIGxlZnQ6IHBhcnNlSW50KHBhZGRpbmdBcnJbMF0pLFxuICAgICAgICAvLyAgICAgICAgdG9wOiBwYXJzZUludChwYWRkaW5nQXJyWzFdKSxcbiAgICAgICAgLy8gICAgICAgIHJpZ2h0OiBwYXJzZUludChwYWRkaW5nQXJyWzJdKSxcbiAgICAgICAgLy8gICAgICAgIGJvdHRvbTogcGFyc2VJbnQocGFkZGluZ0FyclszXSlcbiAgICAgICAgLy8gICAgfVxuICAgICAgICAvL31cbiAgICB9XG59XG5cbiIsIm1vZHVsZSB3ZCB7XG4gICAgZXhwb3J0IGNsYXNzIEZudExvYWRlciBleHRlbmRzIExvYWRlciB7XG4gICAgICAgIHByaXZhdGUgc3RhdGljIF9pbnN0YW5jZSA9IG51bGw7XG5cbiAgICAgICAgcHVibGljIHN0YXRpYyBnZXRJbnN0YW5jZSgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9pbnN0YW5jZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2luc3RhbmNlID0gbmV3IHRoaXMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9pbnN0YW5jZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX3BhcnNlcjpGbnRQYXJzZXIgPSBGbnRQYXJzZXIuY3JlYXRlKCk7XG5cbiAgICAgICAgcHJvdGVjdGVkIGxvYWRBc3NldCh1cmw6c3RyaW5nLCBpZDpzdHJpbmcpOndkRnJwLlN0cmVhbTtcbiAgICAgICAgcHJvdGVjdGVkIGxvYWRBc3NldCh1cmw6QXJyYXk8c3RyaW5nPiwgaWQ6c3RyaW5nKTp3ZEZycC5TdHJlYW07XG5cbiAgICAgICAgQHJlcXVpcmUoZnVuY3Rpb24gKC4uLmFyZ3MpIHtcbiAgICAgICAgICAgIGFzc2VydCghSnVkZ2VVdGlscy5pc0FycmF5KGFyZ3NbMF0pLCBMb2cuaW5mby5GVU5DX01VU1RfQkUoXCJ1cmxcIiwgXCJzdHJpbmdcIikpO1xuICAgICAgICB9KVxuICAgICAgICBwcm90ZWN0ZWQgbG9hZEFzc2V0KC4uLmFyZ3MpOndkRnJwLlN0cmVhbSB7XG4gICAgICAgICAgICB2YXIgdXJsID0gYXJnc1swXSxcbiAgICAgICAgICAgICAgICBzZWxmID0gdGhpcztcblxuICAgICAgICAgICAgcmV0dXJuIEFqYXhMb2FkZXIubG9hZCh1cmwsIFwidGV4dFwiKVxuICAgICAgICAgICAgICAgIC5tYXAoKGZudFN0cjpzdHJpbmcpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlbGYuX3BhcnNlci5wYXJzZUZudChmbnRTdHIsIHVybCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBleHBvcnQgdHlwZSBGbnREYXRhID0ge1xuICAgICAgICBjb21tb25IZWlnaHQ6bnVtYmVyLFxuICAgICAgICBhdGxhc05hbWU6c3RyaW5nLFxuICAgICAgICBmb250RGVmRGljdGlvbmFyeToge1xuICAgICAgICAgICAgW2NoYXJJZDpzdHJpbmddOntcbiAgICAgICAgICAgICAgICByZWN0OiB7eDogbnVtYmVyLCB5OiBudW1iZXIsIHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyfSxcbiAgICAgICAgICAgICAgICB4T2Zmc2V0OiBudW1iZXIsXG4gICAgICAgICAgICAgICAgeU9mZnNldDogbnVtYmVyLFxuXG4gICAgICAgICAgICAgICAgLy94YWR2YW5jZeetieS6juWtl+espue6ueeQhuWuveW6plxuICAgICAgICAgICAgICAgIHhBZHZhbmNlOiBudW1iZXJcblxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuXG4iLCIvKiFcbkRldmljZU1hbmFnZXIgaXMgcmVzcG9uc2libGUgZm9yIGdsb2JhbCBzZXR0aW5nIG9mIGdsXG4gKi9cbm1vZHVsZSB3ZCB7XG4gICAgZXhwb3J0IGNsYXNzIERldmljZU1hbmFnZXIge1xuICAgICAgICBwcml2YXRlIHN0YXRpYyBfaW5zdGFuY2UgPSBudWxsO1xuXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgZ2V0SW5zdGFuY2UoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5faW5zdGFuY2UgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9pbnN0YW5jZSA9IG5ldyB0aGlzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5faW5zdGFuY2U7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgdmlldzpJVmlldyA9IG51bGw7XG4gICAgICAgIHB1YmxpYyBnbDpXZWJHTFJlbmRlcmluZ0NvbnRleHQgPSBudWxsO1xuXG4gICAgICAgIC8qIVxuICAgICAgICB0ZXN0IG9yZGVyOlxuICAgICAgICBzY2lzc29yIHRlc3QgLT4gZGVwdGggdGVzdCAtPiBzdGVuY2lsIHRlc3QgLT4gc3BlY3VsYXIgYWRkIC0+IGZvZyAtPiBhbHBoYSBibGVuZCAtPiB3cml0ZSBtYXNrXG4gICAgICAgICAqL1xuXG4gICAgICAgIC8qIVxuICAgICAgICAgVGhlIHNjaXNzb3IgdGVzdCBjdWxscyBwaXhlbHMgdGhhdCBhcmUgb3V0c2lkZSBvZiB0aGUgc2Npc3NvciByZWN0YW5nbGUsIGEgdXNlci1kZWZpbmVkIHJlY3Rhbmd1bGFyIHN1Yi1zZWN0aW9uIG9mIHRoZSByZW5kZXIgdGFyZ2V0LlxuICAgICAgICAgVGhlIHNjaXNzb3IgcmVjdGFuZ2xlIGNvdWxkIGJlIHVzZWQgdG8gaW5kaWNhdGUgdGhlIGFyZWEgb2YgdGhlIHJlbmRlciB0YXJnZXQgd2hlcmUgdGhlIGdhbWUgd29ybGQgaXMgZHJhd24uIFRoZSBhcmVhIG91dHNpZGUgdGhlIHJlY3RhbmdsZSBpcyBjdWxsZWQgYW5kIGNvdWxkIGJlIGRldm90ZWQgdG8gYSBnYW1lJ3MgR1VJLiBUaGUgc2Npc3NvciB0ZXN0IGNhbm5vdCBjdWxsIG5vbi1yZWN0YW5ndWxhciBhcmVhcy5cbiAgICAgICAgIFNjaXNzb3IgcmVjdGFuZ2xlcyBjYW5ub3QgYmUgc2V0IGxhcmdlciB0aGFuIHRoZSByZW5kZXIgdGFyZ2V0LCBidXQgdGhleSBjYW4gYmUgc2V0IGxhcmdlciB0aGFuIHRoZSB2aWV3cG9ydC5cbiAgICAgICAgIFRoZSBzY2lzc29yIHJlY3RhbmdsZSBpcyBtYW5hZ2VkIGJ5IGEgZGV2aWNlIHJlbmRlciBzdGF0ZS4gQSBzY2lzc29yIHRlc3QgaXMgZW5hYmxlZCBvciBkaXNhYmxlZCBieSBzZXR0aW5nIHRoZSByZW5kZXJzdGF0ZSB0byBUUlVFIG9yIEZBTFNFLiBUaGlzIHRlc3QgaXMgcGVyZm9ybWVkIGFmdGVyIHRoZSBmcmFnbWVudCBjb2xvciBpcyBjb21wdXRlZCBidXQgYmVmb3JlIGFscGhhIHRlc3RpbmcuIElEaXJlY3QzRERldmljZTlcbiAgICAgICAgICovXG4gICAgICAgIHByaXZhdGUgX3NjaXNzb3JUZXN0OmJvb2xlYW4gPSBudWxsO1xuICAgICAgICBnZXQgc2Npc3NvclRlc3QoKXtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9zY2lzc29yVGVzdDtcbiAgICAgICAgfVxuICAgICAgICBzZXQgc2Npc3NvclRlc3Qoc2Npc3NvclRlc3Q6Ym9vbGVhbil7XG4gICAgICAgICAgICB2YXIgZ2wgPSB0aGlzLmdsO1xuXG4gICAgICAgICAgICBpZiAoc2Npc3NvclRlc3QpIHtcbiAgICAgICAgICAgICAgICBnbC5lbmFibGUoZ2wuU0NJU1NPUl9URVNUKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGdsLmRpc2FibGUoZ2wuU0NJU1NPUl9URVNUKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5fc2Npc3NvclRlc3QgPSBzY2lzc29yVGVzdDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAZnVuY3Rpb25cbiAgICAgICAgICogQG5hbWUgc2V0U2Npc3NvclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gU2V0IHRoZSBhY3RpdmUgc2Npc3NvciByZWN0YW5nbGUgb24gdGhlIHNwZWNpZmllZCBkZXZpY2UuXG4gICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSB4IFRoZSBwaXhlbCBzcGFjZSB4LWNvb3JkaW5hdGUgb2YgdGhlIGJvdHRvbSBsZWZ0IGNvcm5lciBvZiB0aGUgc2Npc3NvciByZWN0YW5nbGUuXG4gICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSB5IFRoZSBwaXhlbCBzcGFjZSB5LWNvb3JkaW5hdGUgb2YgdGhlIGJvdHRvbSBsZWZ0IGNvcm5lciBvZiB0aGUgc2Npc3NvciByZWN0YW5nbGUuXG4gICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSB3IFRoZSB3aWR0aCBvZiB0aGUgc2Npc3NvciByZWN0YW5nbGUgaW4gcGl4ZWxzLlxuICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0gaCBUaGUgaGVpZ2h0IG9mIHRoZSBzY2lzc29yIHJlY3RhbmdsZSBpbiBwaXhlbHMuXG4gICAgICAgICAqL1xuICAgICAgICBwdWJsaWMgc2V0U2Npc3Nvcih4Om51bWJlciwgeTpudW1iZXIsIHdpZHRoOm51bWJlciwgaGVpZ2h0Om51bWJlcikge1xuICAgICAgICAgICAgdGhpcy5nbC5zY2lzc29yKHgsIHksIHdpZHRoLCBoZWlnaHQpO1xuXG4gICAgICAgICAgICBpZiAoIXRoaXMuc2Npc3NvclRlc3QpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNjaXNzb3JUZXN0ID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8qISBEaWZmZXJlbmNlIGJldHdlZW4gdmlld3BvcnRzIGFuZCBzY2lzc29yIHJlY3RhbmdsZXNcblxuICAgICAgICAgVmlld3BvcnRzIGFyZSBiYXNpY2FsbHkgc2NhbGVkIHZpZXdzLCB0aGUgbGVmdCBzaWRlIGlzIDAgYW5kIHRoZSByaWdodCBzaWRlIGlzIDEuIFRoZSBlbnRpcmUgdmlldyB3aWxsIGJlIHNjYWxlZCBkb3duIGludG8gdGhhdCB2aWV3cG9ydCBhZnRlciBldmVyeXRoaW5nIGlzIHByb2plY3RlZC5cblxuICAgICAgICAgU2Npc3NvciB0ZXN0cyBjbGlwIHRvIGEgcmVjdGFuZ2xlIGluc2lkZSB0aGF0IHZpZXdwb3J0LiBJbnN0ZWFkIG9mIHJlbmRlcmluZyBmcm9tIDAgdG8gMSwgeW91IHJlbmRlciBmcm9tIC4yIHRvIC44LCB3aXRoIGJsYWNrIGJhcnMgb24gdGhlIG91dHNpZGUuIFRoaXMgYWN0dWFsbHkgY3V0cyBvZmYgYSBwb3J0aW9uIG9mIHdoYXQgd291bGQgbm9ybWFsbHkgYmUgdmlzaWJsZSAoaWYgeW91IHVzZWQgYSB2aWV3cG9ydCBvZiB0aGUgc2FtZSBzaXplLCB5b3UnZCBzZWUgdGhlIHNhbWUgYW1vdW50IGJ1dCBzaHJ1bmsgc2xpZ2h0bHkpLlxuXG4gICAgICAgICBWaWV3cG9ydHMgYXJlIHVzZWQgZm9yIGZ1bGwgdmlld3MgKGNvbnNpZGVyIDNEIFN0dWRpbyBNYXgsIGVhY2ggdmlld3BvcnQgaXMgdGhlIGZ1bGwgdmlldyBmcm9tIHRoYXQgYW5nbGUsIGJ1dCBmaXQgaW50byBhIHNpbmdsZSBzcXVhcmUpLiBTY2lzc29yIHRlc3RzIGFyZSB1c2VkIHRvIGN1dCBvdXQgZXh0cmEgcGl4ZWxzIHRoYXQgeW91IGRvbid0IHdhbnQvbmVlZCB0byBiZSBhZmZlY3RlZCAobGlnaHRzIGluIGRlZmVycmVkIHJlbmRlcmluZywgZm9yIGluc3RhbmNlLCBldmVyeXRoaW5nIG91dHNpZGUgdGhlIHJhbmdlIGlzIG5vdCBhZmZlY3RlZCwgc28gd2h5IGJvdGhlciBjYWxjdWxhdGluZyB0aGF0IGlmIHlvdSBhbHJlYWR5IGtub3cgaXQncyBub3QgbGl0LCBqdXN0IHNjaXNzb3IgYXJvdW5kIHRoZSBwcm9qZWN0ZWQgc3BoZXJlIGFuZCBmb3JnZXQgYWJvdXQgZXZlcnl0aGluZyBiZXlvbmQgdGhhdCkuXG4gICAgICAgICAqL1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAZnVuY3Rpb25cbiAgICAgICAgICogQG5hbWUgc2V0Vmlld3BvcnRcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIFNldCB0aGUgYWN0aXZlIHJlY3RhbmdsZSBmb3IgcmVuZGVyaW5nIG9uIHRoZSBzcGVjaWZpZWQgZGV2aWNlLlxuICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0geCBUaGUgcGl4ZWwgc3BhY2UgeC1jb29yZGluYXRlIG9mIHRoZSBib3R0b20gbGVmdCBjb3JuZXIgb2YgdGhlIHZpZXdwb3J0LlxuICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0geSBUaGUgcGl4ZWwgc3BhY2UgeS1jb29yZGluYXRlIG9mIHRoZSBib3R0b20gbGVmdCBjb3JuZXIgb2YgdGhlIHZpZXdwb3J0LlxuICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0gdyBUaGUgd2lkdGggb2YgdGhlIHZpZXdwb3J0IGluIHBpeGVscy5cbiAgICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IGggVGhlIGhlaWdodCBvZiB0aGUgdmlld3BvcnQgaW4gcGl4ZWxzLlxuICAgICAgICAgKi9cbiAgICAgICAgcHVibGljIHNldFZpZXdwb3J0KHg6bnVtYmVyLCB5Om51bWJlciwgd2lkdGg6bnVtYmVyLCBoZWlnaHQ6bnVtYmVyKSB7XG4gICAgICAgICAgICB0aGlzLmdsLnZpZXdwb3J0KHgsIHksIHdpZHRoLCBoZWlnaHQpO1xuICAgICAgICB9XG5cblxuICAgICAgICAvL3RvZG8gc2V0IGRlcHRoIGZ1bmM/XG4gICAgICAgIC8qISDpu5jorqTmg4XlhrXmmK/lsIbpnIDopoHnu5jliLbnmoTmlrDlg4/ntKDnmoR65YC85LiO5rex5bqm57yT5Yay5Yy65Lit5a+55bqU5L2N572u55qEeuWAvOi/m+ihjOavlOi+g++8jOWmguaenOavlOa3seW6pue8k+WtmOS4reeahOWAvOWwj++8jOmCo+S5iOeUqOaWsOWDj+e0oOeahOminOiJsuWAvOabtOaWsOW4p+e8k+WtmOS4reWvueW6lOWDj+e0oOeahOminOiJsuWAvOOAglxuICAgICAgICAg5L2G5piv5Y+v5Lul5L2/55SoZ2xEZXB0aEZ1bmMoZnVuYynmnaXlr7nov5nnp43pu5jorqTmtYvor5XmlrnlvI/ov5vooYzkv67mlLnjgIJcbiAgICAgICAgIOWFtuS4reWPguaVsGZ1bmPnmoTlgLzlj6/ku6XkuLpHTF9ORVZFUu+8iOayoeacieWkhOeQhu+8ieOAgUdMX0FMV0FZU++8iOWkhOeQhuaJgOacie+8ieOAgUdMX0xFU1PvvIjlsI/kuo7vvInjgIFHTF9MRVFVQUzvvIjlsI/kuo7nrYnkuo7vvInjgIFHTF9FUVVBTO+8iOetieS6ju+8ieOAgUdMX0dFUVVBTO+8iOWkp+S6juetieS6ju+8ieOAgUdMX0dSRUFURVLvvIjlpKfkuo7vvInmiJZHTF9OT1RFUVVBTO+8iOS4jeetieS6ju+8ie+8jOWFtuS4rem7mOiupOWAvOaYr0dMX0xFU1PjgIJcblxuICAgICAgICAgZ2wuZGVwdGhGdW5jKGdsLkxFUVVBTCk7XG4gICAgICAgICAqL1xuXG4gICAgICAgIHByaXZhdGUgX2RlcHRoVGVzdDpib29sZWFuID0gbnVsbDtcbiAgICAgICAgZ2V0IGRlcHRoVGVzdCgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9kZXB0aFRlc3Q7XG4gICAgICAgIH1cblxuICAgICAgICBzZXQgZGVwdGhUZXN0KGRlcHRoVGVzdDpib29sZWFuKSB7XG4gICAgICAgICAgICB2YXIgZ2wgPSB0aGlzLmdsO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5fZGVwdGhUZXN0ICE9PSBkZXB0aFRlc3QpIHtcbiAgICAgICAgICAgICAgICBpZiAoZGVwdGhUZXN0KSB7XG4gICAgICAgICAgICAgICAgICAgIGdsLmVuYWJsZShnbC5ERVBUSF9URVNUKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGdsLmRpc2FibGUoZ2wuREVQVEhfVEVTVCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdGhpcy5fZGVwdGhUZXN0ID0gZGVwdGhUZXN0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfZGVwdGhGdW5jOkRlcHRoRnVuY3Rpb24gPSBudWxsO1xuICAgICAgICBnZXQgZGVwdGhGdW5jKCl7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZGVwdGhGdW5jO1xuICAgICAgICB9XG4gICAgICAgIHNldCBkZXB0aEZ1bmMoZGVwdGhGdW5jOkRlcHRoRnVuY3Rpb24pe1xuICAgICAgICAgICAgdmFyIGdsID0gdGhpcy5nbDtcblxuICAgICAgICAgICAgaWYgKHRoaXMuX2RlcHRoRnVuYyAhPT0gZGVwdGhGdW5jKSB7XG4gICAgICAgICAgICAgICAgZ2wuZGVwdGhGdW5jKGdsW2RlcHRoRnVuY10pO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5fZGVwdGhGdW5jID0gZGVwdGhGdW5jO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cblxuICAgICAgICBwcml2YXRlIF9zaWRlOlNpZGUgPSBudWxsO1xuICAgICAgICBnZXQgc2lkZSgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9zaWRlO1xuICAgICAgICB9XG5cbiAgICAgICAgc2V0IHNpZGUoc2lkZTpTaWRlKSB7XG4gICAgICAgICAgICB2YXIgZ2wgPSB0aGlzLmdsO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5fc2lkZSAhPT0gc2lkZSkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoc2lkZSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIFNpZGUuTk9ORTpcbiAgICAgICAgICAgICAgICAgICAgICAgIGdsLmVuYWJsZShnbC5DVUxMX0ZBQ0UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2wuY3VsbEZhY2UoZ2wuRlJPTlRfQU5EX0JBQ0spO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgU2lkZS5CT1RIOlxuICAgICAgICAgICAgICAgICAgICAgICAgZ2wuZGlzYWJsZShnbC5DVUxMX0ZBQ0UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgU2lkZS5GUk9OVDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGdsLmVuYWJsZShnbC5DVUxMX0ZBQ0UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2wuY3VsbEZhY2UoZ2wuQkFDSyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBTaWRlLkJBQ0s6XG4gICAgICAgICAgICAgICAgICAgICAgICBnbC5lbmFibGUoZ2wuQ1VMTF9GQUNFKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdsLmN1bGxGYWNlKGdsLkZST05UKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0IDpcbiAgICAgICAgICAgICAgICAgICAgICAgIExvZy5lcnJvcih0cnVlLCBMb2cuaW5mby5GVU5DX1VORVhQRUNUKFwic2lkZVwiLCBzaWRlKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0aGlzLl9zaWRlID0gc2lkZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8qIVxuICAgICAgICAg5YGP56e75YC85piv5ZyoeuWAvOiuoeeul+WQjuOAgea3seW6puajgOa1i+S5i+WJjeWKoOS4iueahO+8jOatpOaXtuWdkOagh+W3sue7j+iiq+aYoOWwhOWIsE5vcm1hbGl6ZWQgRGV2aWNlIENvb3JkaW5hdGVz5Lit5LqG77yMXG4gICAgICAgICDogIzmraTml7bnmoR66L205piv5ZCR5YaF55qE77yIb3Blbmds55qEeui9tOaYr+WQkeWklueahO+8ie+8jOWboOatpOWkmui+ueW9ouWBj+enu+mHj+S4uuato+WAvOeahOivne+8jOaEj+WRs+edgOW+gOi/nOWkhOenu+WKqO+8jOWQpuWImeW+gOi/keWkhOenu+WKqOOAglxuICAgICAgICAg5Y+v5Y+C6ICD5LiL6Z2i55qE6K+05piO77yaXG4gICAgICAgICBUaGUgcmVzdWx0cyBhcmUgc3VtbWVkIHRvIHByb2R1Y2UgdGhlIGRlcHRoIG9mZnNldC4gVGhpcyBvZmZzZXQgaXMgYXBwbGllZCBpbiBzY3JlZW4gc3BhY2UsIHR5cGljYWxseSB3aXRoIHBvc2l0aXZlIFogcG9pbnRpbmcgaW50byB0aGUgc2NyZWVuLlxuICAgICAgICAgdGhlIG9mZnNldCBpcyBjYWxjdWxhdGVkIGFmdGVyIHRoZSBub3JtYWwgWiBjYWxjdWxhdGlvbnMsIGJ1dCBhcHBsaWVkIGJlZm9yZSB0aGUgZGVwdGggdGVzdCBhbmQgYmVmb3JlIGJlaW5nIHdyaXR0ZW4gdG8gdGhlIGRlcHRoIGJ1ZmZlci5cbiAgICAgICAgICovXG4gICAgICAgIHB1YmxpYyBwb2x5Z29uT2Zmc2V0OlZlY3RvcjIgPSBudWxsO1xuXG4gICAgICAgIHByaXZhdGUgX3BvbHlnb25PZmZzZXRNb2RlOlBvbHlnb25PZmZzZXRNb2RlID0gbnVsbDtcbiAgICAgICAgZ2V0IHBvbHlnb25PZmZzZXRNb2RlKCl7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fcG9seWdvbk9mZnNldE1vZGU7XG4gICAgICAgIH1cbiAgICAgICAgc2V0IHBvbHlnb25PZmZzZXRNb2RlKHBvbHlnb25PZmZzZXRNb2RlOlBvbHlnb25PZmZzZXRNb2RlKXtcbiAgICAgICAgICAgIHZhciBnbCA9IHRoaXMuZ2w7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLl9wb2x5Z29uT2Zmc2V0TW9kZSAhPT0gcG9seWdvbk9mZnNldE1vZGUpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHBvbHlnb25PZmZzZXRNb2RlKXtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBQb2x5Z29uT2Zmc2V0TW9kZS5OT05FOlxuICAgICAgICAgICAgICAgICAgICAgICAgZ2wucG9seWdvbk9mZnNldCgwLjAsIDAuMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBnbC5kaXNhYmxlKGdsLlBPTFlHT05fT0ZGU0VUX0ZJTEwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgUG9seWdvbk9mZnNldE1vZGUuSU46XG4gICAgICAgICAgICAgICAgICAgICAgICBnbC5lbmFibGUoZ2wuUE9MWUdPTl9PRkZTRVRfRklMTCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBnbC5wb2x5Z29uT2Zmc2V0KDEuMCwgMS4wKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIFBvbHlnb25PZmZzZXRNb2RlLk9VVDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGdsLmVuYWJsZShnbC5QT0xZR09OX09GRlNFVF9GSUxMKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdsLnBvbHlnb25PZmZzZXQoLTEuMCwgLTEuMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBQb2x5Z29uT2Zmc2V0TW9kZS5DVVNUT006XG4gICAgICAgICAgICAgICAgICAgICAgICBnbC5lbmFibGUoZ2wuUE9MWUdPTl9PRkZTRVRfRklMTCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBMb2cuZXJyb3IoIXRoaXMucG9seWdvbk9mZnNldCwgTG9nLmluZm8uRlVOQ19NVVNUX0RFRklORShcInBvbHlnb25PZmZzZXRcIikpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2wucG9seWdvbk9mZnNldCh0aGlzLnBvbHlnb25PZmZzZXQueCwgdGhpcy5wb2x5Z29uT2Zmc2V0LnkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0aGlzLl9wb2x5Z29uT2Zmc2V0TW9kZSA9IHBvbHlnb25PZmZzZXRNb2RlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfZGVwdGhXcml0ZTpib29sZWFuID0gbnVsbDtcbiAgICAgICAgZ2V0IGRlcHRoV3JpdGUoKXtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9kZXB0aFdyaXRlO1xuICAgICAgICB9XG4gICAgICAgIHNldCBkZXB0aFdyaXRlKGRlcHRoV3JpdGU6Ym9vbGVhbil7XG4gICAgICAgICAgICBpZiAodGhpcy5fZGVwdGhXcml0ZSAhPT0gZGVwdGhXcml0ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZ2wuZGVwdGhNYXNrKGRlcHRoV3JpdGUpO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5fZGVwdGhXcml0ZSA9IGRlcHRoV3JpdGU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvKiEgYmxlbmQgcmVjb3JkXG4gICAgICAgIOaJgOiwk+a6kOminOiJsuWSjOebruagh+minOiJsu+8jOaYr+i3n+e7mOWItueahOmhuuW6j+acieWFs+eahOOAguWBh+WmguWFiOe7mOWItuS6huS4gOS4que6ouiJsueahOeJqeS9k++8jOWGjeWcqOWFtuS4iue7mOWItue7v+iJsueahOeJqeS9k+OAguWImee7v+iJsuaYr+a6kOminOiJsu+8jOe6ouiJsuaYr+ebruagh+minOiJsuOAguWmguaenOmhuuW6j+WPjei/h+adpe+8jOWImSDnuqLoibLlsLHmmK/mupDpopzoibLvvIznu7/oibLmiY3mmK/nm67moIfpopzoibLjgILlnKjnu5jliLbml7bvvIzlupTor6Xms6jmhI/pobrluo/vvIzkvb/lvpfnu5jliLbnmoTmupDpopzoibLkuI7orr7nva7nmoTmupDlm6DlrZDlr7nlupTvvIznm67moIfpopzoibLkuI7orr7nva7nmoTnm67moIflm6DlrZDlr7nlupTjgILkuI3opoHooqvmt7fkubHnmoTpobrluo/mkJ7mmZUg5LqG44CCXG5cblxuICAgICAgICAg5Lmf6K645L2g6L+r5LiN5Y+K5b6F55qE5oOz6KaB57uY5Yi25LiA5Liq5LiJ57u055qE5bim5pyJ5Y2K6YCP5piO54mp5L2T55qE5Zy65pmv5LqG44CC5L2G5piv546w5Zyo5oGQ5oCV6L+Y5LiN6KGM77yM6L+Y5pyJ5LiA54K55piv5Zyo6L+b6KGM5LiJ57u05Zy65pmv55qE5re35ZCI5pe25b+F6aG75rOo5oSP55qE77yM6YKj5bCx5piv5rex5bqm57yT5Yay44CCXG4gICAgICAgICDmgLvnu5PotbfmnaXvvIznu5jliLbpobrluo/lsLHmmK/vvJrpppblhYjnu5jliLbmiYDmnInkuI3pgI/mmI7nmoTniankvZPjgILlpoLmnpzkuKTkuKrniankvZPpg73mmK/kuI3pgI/mmI7nmoTvvIzliJnosIHlhYjosIHlkI4g6YO95rKh5pyJ5YWz57O744CC54S25ZCO77yM5bCG5rex5bqm57yT5Yay5Yy66K6+572u5Li65Y+q6K+744CC5o6l5LiL5p2l77yM57uY5Yi25omA5pyJ5Y2K6YCP5piO55qE54mp5L2T44CC5aaC5p6c5Lik5Liq54mp5L2T6YO95piv5Y2K6YCP5piO55qE77yM5YiZ6LCB5YWI6LCB5ZCO5Y+q6ZyA6KaB5qC55o2u6Ieq5bex55qE5oSP5oS/77yI5rOo5oSP5LqG77yM5YWI57uY5Yi2IOeahOWwhuaIkOS4uuKAnOebruagh+minOiJsuKAne+8jOWQjue7mOWItueahOWwhuaIkOS4uuKAnOa6kOminOiJsuKAne+8jOaJgOS7pee7mOWItueahOmhuuW6j+WwhuS8muWvuee7k+aenOmAoOaIkOS4gOS6m+W9seWTje+8ieOAguacgOWQju+8jOWwhua3seW6pue8k+WGsuWMuuiuvue9ruS4uuWPr+ivu+WPr+WGmeW9ouW8j+OAglxuXG4gICAgICAgICDlnKjov5vooYzmt7flkIjml7bvvIznu5jliLbnmoTpobrluo/ljYHliIbph43opoHjgILlm6DkuLrlnKjnu5jliLbml7bvvIzmraPopoHnu5jliLbkuIrljrvnmoTmmK/mupDpopzoibLvvIzljp/mnaXlrZjlnKjnmoTmmK/nm67moIfpopzoibLvvIzlm6DmraTlhYjnu5jliLbnmoTniankvZPlsLHmiJDkuLrnm67moIfpopzoibLvvIzlkI7mnaXnu5jliLbnmoTliJnmiJDkuLrmupDpopzoibLjgILnu5jliLbnmoTpobrluo/opoHogIPomZHmuIXmpZrvvIzlsIbnm67moIfpopzoibLlkozorr7nva7nmoTnm67moIflm6DlrZDnm7jlr7nlupTvvIzmupDpopzoibLlkozorr7nva7nmoTmupDlm6DlrZDnm7jlr7nlupTjgIJcbiAgICAgICAgIOWcqOi/m+ihjOS4iee7tOa3t+WQiOaXtu+8jOS4jeS7heimgeiAg+iZkea6kOWboOWtkOWSjOebruagh+WboOWtkO+8jOi/mOW6lOivpeiAg+iZkea3seW6pue8k+WGsuWMuuOAguW/hemhu+WFiOe7mOWItuaJgOacieS4jemAj+aYjueahOeJqeS9k++8jOWGjee7mOWItuWNiumAj+aYjueahOeJqeS9k+OAguWcqOe7mOWItuWNiumAj+aYjueJqeS9k+aXtuWJje+8jOi/mOmcgOimgeWwhua3seW6pue8k+WGsuWMuuiuvue9ruS4uuWPquivu+W9ouW8j++8jOWQpuWImeWPr+iDveWHuueOsOeUu+mdoumUmeivr+OAglxuICAgICAgICAqL1xuXG4gICAgICAgIHByaXZhdGUgX2JsZW5kOmJvb2xlYW4gPSBudWxsO1xuICAgICAgICBnZXQgYmxlbmQoKXtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9ibGVuZDtcbiAgICAgICAgfVxuICAgICAgICBzZXQgYmxlbmQoYmxlbmQ6Ym9vbGVhbil7XG4gICAgICAgICAgICB2YXIgZ2wgPSB0aGlzLmdsO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5fYmxlbmQgIT09IGJsZW5kKSB7XG4gICAgICAgICAgICAgICAgaWYgKGJsZW5kKSB7XG4gICAgICAgICAgICAgICAgICAgIGdsLmVuYWJsZShnbC5CTEVORCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBnbC5kaXNhYmxlKGdsLkJMRU5EKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0aGlzLl9ibGVuZCA9IGJsZW5kO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBmdW5jdGlvblxuICAgICAgICAgKiBAbmFtZSBzZXRCbGVuZEZ1bmN0aW9uXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBDb25maWd1cmVzIGJsZW5kaW5nIG9wZXJhdGlvbnMuXG4gICAgICAgICAqIEBwYXJhbSB7cGMuQkxFTkRNT0RFfSBibGVuZFNyYyBUaGUgc291cmNlIGJsZW5kIGZ1bmN0aW9uLlxuICAgICAgICAgKiBAcGFyYW0ge3BjLkJMRU5ETU9ERX0gYmxlbmREc3QgVGhlIGRlc3RpbmF0aW9uIGJsZW5kIGZ1bmN0aW9uLlxuICAgICAgICAgKi9cbiAgICAgICAgcHVibGljIHNldEJsZW5kRnVuYyhibGVuZFNyYzpCbGVuZEZ1bmMsIGJsZW5kRHN0OkJsZW5kRnVuYykge1xuICAgICAgICAgICAgaWYgKCh0aGlzLl9ibGVuZFNyYyAhPT0gYmxlbmRTcmMpIHx8ICh0aGlzLl9ibGVuZERzdCAhPT0gYmxlbmREc3QpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fYmxlbmQgJiYgdGhpcy5nbC5ibGVuZEZ1bmModGhpcy5nbFtibGVuZFNyY10sIHRoaXMuZ2xbYmxlbmREc3RdKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9ibGVuZFNyYyA9IGJsZW5kU3JjO1xuICAgICAgICAgICAgICAgIHRoaXMuX2JsZW5kRHN0ID0gYmxlbmREc3Q7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLyohXG4gICAgICAgICBPcGVuR0wgZ2l2ZXMgdXMgZXZlbiBtb3JlIGZsZXhpYmlsaXR5IGJ5IGFsbG93aW5nIHVzIHRvIGNoYW5nZSB0aGUgb3BlcmF0b3IgYmV0d2VlbiB0aGUgc291cmNlIGFuZCBkZXN0aW5hdGlvbiBwYXJ0IG9mIHRoZSBlcXVhdGlvbi4gUmlnaHQgbm93LCB0aGUgc291cmNlIGFuZCBkZXN0aW5hdGlvbiBjb21wb25lbnRzIGFyZSBhZGRlZCB0b2dldGhlciwgYnV0IHdlIGNvdWxkIGFsc28gc3VidHJhY3QgdGhlbSBpZiB3ZSB3YW50LiBnbEJsZW5kRXF1YXRpb24oR0xlbnVtIG1vZGUpIGFsbG93cyB1cyB0byBzZXQgdGhpcyBvcGVyYXRpb24gYW5kIGhhcyAzIHBvc3NpYmxlIG9wdGlvbnM6XG5cbiAgICAgICAgIEdMX0ZVTkNfQUREOiB0aGUgZGVmYXVsdCwgYWRkcyBib3RoIGNvbXBvbmVudHMgdG8gZWFjaCBvdGhlcjogQ8KvcmVzdWx0PVNyYytEc3QuXG4gICAgICAgICBHTF9GVU5DX1NVQlRSQUNUOiBzdWJ0cmFjdHMgYm90aCBjb21wb25lbnRzIGZyb20gZWFjaCBvdGhlcjogQ8KvcmVzdWx0PVNyY+KIkkRzdC5cbiAgICAgICAgIEdMX0ZVTkNfUkVWRVJTRV9TVUJUUkFUaGUgZGVmYXVsdCBibGVuZCBlcXVhdGlvbiBpc1xuXG4gICAgICAgICBkZWZhdWx0IGlzIEZVTkNfQUREXG4gICAgICAgICAqL1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAZnVuY3Rpb25cbiAgICAgICAgICogQG5hbWUgc2V0QmxlbmRFcXVhdGlvblxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gQ29uZmlndXJlcyB0aGUgYmxlbmRpbmcgZXF1YXRpb24uIC5cbiAgICAgICAgICogQHBhcmFtIGJsZW5kRXF1YXRpb24gVGhlIGJsZW5kIGVxdWF0aW9uLlxuICAgICAgICAgKi9cbiAgICAgICAgcHVibGljIHNldEJsZW5kRXF1YXRpb24oYmxlbmRFcXVhdGlvbjpCbGVuZEVxdWF0aW9uKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5fYmxlbmRFcXVhdGlvbiAhPT0gYmxlbmRFcXVhdGlvbikge1xuICAgICAgICAgICAgICAgIHRoaXMuX2JsZW5kICYmIHRoaXMuZ2wuYmxlbmRFcXVhdGlvbih0aGlzLmdsW2JsZW5kRXF1YXRpb25dKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9ibGVuZEVxdWF0aW9uID0gYmxlbmRFcXVhdGlvbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBzZXRCbGVuZEZ1bmNTZXBhcmF0ZShibGVuZEZ1bmNTZXBhcmF0ZTpBcnJheTxCbGVuZEZ1bmM+KSB7XG4gICAgICAgICAgICB2YXIgZ2wgPSB0aGlzLmdsO1xuXG4gICAgICAgICAgICBpZiAoIXRoaXMuX2JsZW5kRnVuY1NlcGFyYXRlIHx8IHRoaXMuX2JsZW5kRnVuY1NlcGFyYXRlWzBdICE9PSBibGVuZEZ1bmNTZXBhcmF0ZVswXSB8fCB0aGlzLl9ibGVuZEZ1bmNTZXBhcmF0ZVsxXSAhPT0gYmxlbmRGdW5jU2VwYXJhdGVbMV0pIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9ibGVuZCAmJiBnbC5ibGVuZEZ1bmNTZXBhcmF0ZShnbFtibGVuZEZ1bmNTZXBhcmF0ZVswXV0sIGdsW2JsZW5kRnVuY1NlcGFyYXRlWzFdXSwgZ2xbYmxlbmRGdW5jU2VwYXJhdGVbMl1dLCBnbFtibGVuZEZ1bmNTZXBhcmF0ZVszXV0pO1xuICAgICAgICAgICAgICAgIHRoaXMuX2JsZW5kRnVuY1NlcGFyYXRlID0gYmxlbmRGdW5jU2VwYXJhdGU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgc2V0QmxlbmRFcXVhdGlvblNlcGFyYXRlKGJsZW5kRXF1YXRpb25TZXBhcmF0ZTpBcnJheTxCbGVuZEVxdWF0aW9uPikge1xuICAgICAgICAgICAgdmFyIGdsID0gdGhpcy5nbDtcblxuICAgICAgICAgICAgaWYgKCF0aGlzLl9ibGVuZEVxdWF0aW9uU2VwYXJhdGUgfHwgdGhpcy5fYmxlbmRFcXVhdGlvblNlcGFyYXRlWzBdICE9PSBibGVuZEVxdWF0aW9uU2VwYXJhdGVbMF0gfHwgdGhpcy5fYmxlbmRFcXVhdGlvblNlcGFyYXRlWzFdICE9PSBibGVuZEVxdWF0aW9uU2VwYXJhdGVbMV0pIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9ibGVuZCAmJiBnbC5ibGVuZEVxdWF0aW9uU2VwYXJhdGUoZ2xbYmxlbmRFcXVhdGlvblNlcGFyYXRlWzBdXSwgZ2xbYmxlbmRFcXVhdGlvblNlcGFyYXRlWzFdXSk7XG4gICAgICAgICAgICAgICAgdGhpcy5fYmxlbmRFcXVhdGlvblNlcGFyYXRlID0gYmxlbmRFcXVhdGlvblNlcGFyYXRlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cblxuICAgICAgICAvKipcbiAgICAgICAgICogQGZ1bmN0aW9uXG4gICAgICAgICAqIEBuYW1lIHNldENvbG9yV3JpdGVcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIEVuYWJsZXMgb3IgZGlzYWJsZXMgd3JpdGVzIHRvIHRoZSBjb2xvciBidWZmZXIuIE9uY2UgdGhpcyBzdGF0ZVxuICAgICAgICAgKiBpcyBzZXQsIGl0IHBlcnNpc3RzIHVudGlsIGl0IGlzIGNoYW5nZWQuIEJ5IGRlZmF1bHQsIGNvbG9yIHdyaXRlcyBhcmUgZW5hYmxlZFxuICAgICAgICAgKiBmb3IgYWxsIGNvbG9yIGNoYW5uZWxzLlxuICAgICAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IHdyaXRlUmVkIHRydWUgdG8gZW5hYmxlIHdyaXRpbmcgIG9mIHRoZSByZWQgY2hhbm5lbCBhbmQgZmFsc2Ugb3RoZXJ3aXNlLlxuICAgICAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IHdyaXRlR3JlZW4gdHJ1ZSB0byBlbmFibGUgd3JpdGluZyAgb2YgdGhlIGdyZWVuIGNoYW5uZWwgYW5kIGZhbHNlIG90aGVyd2lzZS5cbiAgICAgICAgICogQHBhcmFtIHtCb29sZWFufSB3cml0ZUJsdWUgdHJ1ZSB0byBlbmFibGUgd3JpdGluZyAgb2YgdGhlIGJsdWUgY2hhbm5lbCBhbmQgZmFsc2Ugb3RoZXJ3aXNlLlxuICAgICAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IHdyaXRlQWxwaGEgdHJ1ZSB0byBlbmFibGUgd3JpdGluZyAgb2YgdGhlIGFscGhhIGNoYW5uZWwgYW5kIGZhbHNlIG90aGVyd2lzZS5cbiAgICAgICAgICogQGV4YW1wbGVcbiAgICAgICAgICogLy8gSnVzdCB3cml0ZSBhbHBoYSBpbnRvIHRoZSBmcmFtZSBidWZmZXJcbiAgICAgICAgICogZGV2aWNlLnNldENvbG9yV3JpdGUoZmFsc2UsIGZhbHNlLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICAgICAqL1xuICAgICAgICBwdWJsaWMgc2V0Q29sb3JXcml0ZSh3cml0ZVJlZCwgd3JpdGVHcmVlbiwgd3JpdGVCbHVlLCB3cml0ZUFscGhhKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5fd3JpdGVSZWQgIT09IHdyaXRlUmVkXG4gICAgICAgICAgICAgICAgfHwgdGhpcy5fd3JpdGVHcmVlbiAhPT0gd3JpdGVHcmVlblxuICAgICAgICAgICAgICAgIHx8IHRoaXMuX3dyaXRlQmx1ZSAhPT0gd3JpdGVCbHVlXG4gICAgICAgICAgICAgICAgfHwgdGhpcy5fd3JpdGVBbHBoYSAhPT0gd3JpdGVBbHBoYSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZ2wuY29sb3JNYXNrKHdyaXRlUmVkLCB3cml0ZUdyZWVuLCB3cml0ZUJsdWUsIHdyaXRlQWxwaGEpO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5fd3JpdGVSZWQgPSB3cml0ZVJlZDtcbiAgICAgICAgICAgICAgICB0aGlzLl93cml0ZUdyZWVuID0gd3JpdGVHcmVlbjtcbiAgICAgICAgICAgICAgICB0aGlzLl93cml0ZUJsdWUgPSB3cml0ZUJsdWU7XG4gICAgICAgICAgICAgICAgdGhpcy5fd3JpdGVBbHBoYSA9IHdyaXRlQWxwaGE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF93cml0ZVJlZDpib29sZWFuID0gbnVsbDtcbiAgICAgICAgcHJpdmF0ZSBfd3JpdGVHcmVlbjpib29sZWFuID0gbnVsbDtcbiAgICAgICAgcHJpdmF0ZSBfd3JpdGVCbHVlOmJvb2xlYW4gPSBudWxsO1xuICAgICAgICBwcml2YXRlIF93cml0ZUFscGhhOmJvb2xlYW4gPSBudWxsO1xuICAgICAgICBwcml2YXRlIF9ibGVuZFNyYzpCbGVuZEZ1bmMgPSBudWxsO1xuICAgICAgICBwcml2YXRlIF9ibGVuZERzdDpCbGVuZEZ1bmMgPSBudWxsO1xuICAgICAgICBwcml2YXRlIF9ibGVuZEVxdWF0aW9uOiBCbGVuZEVxdWF0aW9uID0gbnVsbDtcbiAgICAgICAgcHJpdmF0ZSBfYmxlbmRGdW5jU2VwYXJhdGU6QXJyYXk8QmxlbmRGdW5jPiA9IG51bGw7XG4gICAgICAgIHByaXZhdGUgX2JsZW5kRXF1YXRpb25TZXBhcmF0ZTpBcnJheTxCbGVuZEVxdWF0aW9uPiA9IG51bGw7XG5cbiAgICAgICAgcHVibGljIGNsZWFyKG9wdGlvbnM6YW55KSB7XG4gICAgICAgICAgICB2YXIgZ2wgPSB0aGlzLmdsLFxuICAgICAgICAgICAgICAgIGNvbG9yID0gb3B0aW9ucy5jb2xvcjtcblxuICAgICAgICAgICAgZ2wuY2xlYXJDb2xvcihjb2xvci5yLCBjb2xvci5nLCBjb2xvci5iLCBjb2xvci5hKTtcblxuICAgICAgICAgICAgdGhpcy5zZXRDb2xvcldyaXRlKHRydWUsIHRydWUsIHRydWUsIHRydWUpO1xuXG4gICAgICAgICAgICBnbC5jbGVhcihnbC5DT0xPUl9CVUZGRVJfQklUIHwgZ2wuREVQVEhfQlVGRkVSX0JJVCB8IGdsLlNURU5DSUxfQlVGRkVSX0JJVCk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgY3JlYXRlR0woY2FudmFzSWQ6c3RyaW5nKXtcbiAgICAgICAgICAgIHZhciBjYW52YXMgPSBudWxsO1xuXG4gICAgICAgICAgICBpZihjYW52YXNJZCl7XG4gICAgICAgICAgICAgICAgY2FudmFzID0gd2RDYi5Eb21RdWVyeS5jcmVhdGUoY2FudmFzSWQpLmdldCgwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICAgICAgY2FudmFzID0gd2RDYi5Eb21RdWVyeS5jcmVhdGUoXCI8Y2FudmFzPjwvY2FudmFzPlwiKS5wcmVwZW5kVG8oXCJib2R5XCIpLmdldCgwKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy52aWV3ID0gVmlld1dlYkdMLmNyZWF0ZShjYW52YXMpO1xuICAgICAgICAgICAgdGhpcy5nbCA9IHRoaXMudmlldy5nZXRDb250ZXh0KCk7XG4gICAgICAgIH1cblxuICAgICAgICBAcmVxdWlyZShmdW5jdGlvbigpe1xuICAgICAgICAgICAgYXNzZXJ0KE1haW4uc2NyZWVuU2l6ZSAhPT0gbnVsbCwgTG9nLmluZm8uRlVOQ19OT1RfRVhJU1QoXCJNYWluLnNjcmVlblNpemVcIikpO1xuICAgICAgICB9KVxuICAgICAgICBwdWJsaWMgc2V0U2NyZWVuKCl7XG4gICAgICAgICAgICB2YXIgc2NyZWVuU2l6ZSA9IE1haW4uc2NyZWVuU2l6ZSxcbiAgICAgICAgICAgICAgICB4ID0gbnVsbCxcbiAgICAgICAgICAgICAgICB5ID0gbnVsbCxcbiAgICAgICAgICAgICAgICB3aWR0aCA9IG51bGwsXG4gICAgICAgICAgICAgICAgaGVpZ2h0ID0gbnVsbDtcblxuICAgICAgICAgICAgaWYoc2NyZWVuU2l6ZSA9PT0gU2NyZWVuU2l6ZS5GVUxMKXtcbiAgICAgICAgICAgICAgICB4ID0gMDtcbiAgICAgICAgICAgICAgICB5ID0gMDtcbiAgICAgICAgICAgICAgICB3aWR0aCA9IHJvb3QuaW5uZXJXaWR0aDtcbiAgICAgICAgICAgICAgICBoZWlnaHQgPSByb290LmlubmVySGVpZ2h0O1xuXG4gICAgICAgICAgICAgICAgd2RDYi5Eb21RdWVyeS5jcmVhdGUoXCJib2R5XCIpLmNzcyhcIm1hcmdpblwiLCBcIjBcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgIHggPSBzY3JlZW5TaXplLnggfHwgMDtcbiAgICAgICAgICAgICAgICB5ID0gc2NyZWVuU2l6ZS55IHx8IDA7XG4gICAgICAgICAgICAgICAgd2lkdGggPSBzY3JlZW5TaXplLndpZHRoIHx8IHJvb3QuaW5uZXJXaWR0aDtcbiAgICAgICAgICAgICAgICBoZWlnaHQgPSBzY3JlZW5TaXplLmhlaWdodCB8fCByb290LmlubmVySGVpZ2h0O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLnZpZXcueCA9IHg7XG4gICAgICAgICAgICB0aGlzLnZpZXcueSA9IHk7XG4gICAgICAgICAgICB0aGlzLnZpZXcud2lkdGggPSB3aWR0aDtcbiAgICAgICAgICAgIHRoaXMudmlldy5oZWlnaHQgPSBoZWlnaHQ7XG5cbiAgICAgICAgICAgIHRoaXMuc2V0Vmlld3BvcnQoMCwgMCwgd2lkdGgsIGhlaWdodCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBleHBvcnQgZW51bSBEZXB0aEZ1bmN0aW9ue1xuICAgICAgICBORVZFUiA9IDxhbnk+XCJORVZFUlwiLFxuICAgICAgICBBTFdBWVMgPSA8YW55PlwiQUxXQVlTXCIsXG4gICAgICAgIExFU1MgPSA8YW55PlwiTEVTU1wiLFxuICAgICAgICBMRVFVQUwgPSA8YW55PlwiTEVRVUFMXCIsXG4gICAgICAgIEVRVUFMID0gPGFueT5cIkVRVUFMXCIsXG4gICAgICAgIEdFUVVBTCA9IDxhbnk+XCJHRVFVQUxcIixcbiAgICAgICAgR1JFQVRFUiA9IDxhbnk+XCJHUkVBVEVSXCIsXG4gICAgICAgIE5PVEVRVUFMID0gPGFueT5cIk5PVEVRVUFMXCJcbiAgICB9XG5cbiAgICBleHBvcnQgZW51bSBTaWRle1xuICAgICAgICBOT05FLFxuICAgICAgICBCT1RILFxuICAgICAgICAvL0NDV1xuICAgICAgICBCQUNLLFxuICAgICAgICAvL0NXXG4gICAgICAgIEZST05UXG4gICAgfVxuXG4gICAgZXhwb3J0IGVudW0gUG9seWdvbk9mZnNldE1vZGV7XG4gICAgICAgIE5PTkUsXG4gICAgICAgIElOLFxuICAgICAgICBPVVQsXG4gICAgICAgIENVU1RPTVxuICAgIH1cblxuICAgIGV4cG9ydCBlbnVtIEJsZW5kRnVuY3tcbiAgICAgICAgWkVSTyA9IDxhbnk+XCJaRU9SXCIsXG4gICAgICAgIE9ORSA9IDxhbnk+XCJPTkVcIixcbiAgICAgICAgU1JDX0NPTE9SID0gPGFueT5cIlNSQ19DT0xPUlwiLFxuICAgICAgICBPTkVfTUlOVVNfU1JDX0NPTE9SID0gPGFueT5cIk9ORV9NSU5VU19TUkNfQ09MT1JcIixcbiAgICAgICAgRFNUX0NPTE9SID0gPGFueT5cIkRTVF9DT0xPUlwiLFxuICAgICAgICBPTkVfTUlOVVNfRFNUX0NPTE9SID0gPGFueT5cIk9ORV9NSU5VU19EU1RfQ09MT1JcIixcbiAgICAgICAgU1JDX0FMUEhBID0gPGFueT5cIlNSQ19BTFBIQVwiLFxuICAgICAgICBTUkNfQUxQSEFfU0FUVVJBVEUgPSA8YW55PlwiU1JDX0FMUEhBX1NBVFVSQVRFXCIsXG4gICAgICAgIE9ORV9NSU5VU19TUkNfQUxQSEEgPSA8YW55PlwiT05FX01JTlVTX1NSQ19BTFBIQVwiLFxuICAgICAgICBEU1RfQUxQSEEgPSA8YW55PlwiRFNUX0FMUEhBXCIsXG4gICAgICAgIE9ORV9NSU5VU19EU1RfQUxQSCA9IDxhbnk+XCJPTkVfTUlOVVNfRFNUX0FMUEhBXCJcbiAgICB9XG5cbiAgICBleHBvcnQgZW51bSBCbGVuZEVxdWF0aW9ue1xuICAgICAgICBBREQgPSA8YW55PlwiRlVOQ19BRERcIixcbiAgICAgICAgU1VCVFJBQ1QgPSA8YW55PlwiRlVOQ19TVUJUUkFDVFwiLFxuICAgICAgICBSRVZFUlNFX1NVQlRSQUMgPSA8YW55PlwiRlVOQ19SRVZFUlNFX1NVQlRSQUNUXCJcbiAgICB9XG5cbiAgICBleHBvcnQgZW51bSBCbGVuZFR5cGV7XG4gICAgICAgIE5PTkUsXG4gICAgICAgIE5PUk1BTCxcbiAgICAgICAgQURESVRJVkUsXG4gICAgICAgIEFERElUSVZFQUxQSEEsXG4gICAgICAgIE1VTFRJUExJQ0FUSVZFLFxuICAgICAgICBQUkVNVUxUSVBMSUVEXG4gICAgfVxuXG4gICAgZXhwb3J0IGVudW0gQ2FudmFzVHlwZXtcbiAgICAgICAgVUkgPSA8YW55PlwiVUlcIlxuICAgIH1cblxuICAgIGV4cG9ydCB0eXBlIENhbnZhc01hcERhdGEgPSB7XG4gICAgICAgIGNhbnZhczpIVE1MQ2FudmFzRWxlbWVudCxcbiAgICAgICAgY29udGV4dDpDYW52YXNSZW5kZXJpbmdDb250ZXh0MkRcbiAgICB9XG59XG4iLCJtb2R1bGUgd2Qge1xuICAgIC8vdG9kbyBjaGVjayBleHRlbnNpb24vY2FwYWJpbGl0eSBzdXBwb3J0XG4gICAgZXhwb3J0IGNsYXNzIEdQVURldGVjdG9yIHtcbiAgICAgICAgcHJpdmF0ZSBzdGF0aWMgX2luc3RhbmNlID0gbnVsbDtcblxuICAgICAgICBwdWJsaWMgc3RhdGljIGdldEluc3RhbmNlKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2luc3RhbmNlID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5faW5zdGFuY2UgPSBuZXcgdGhpcygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2luc3RhbmNlO1xuICAgICAgICB9XG5cbiAgICAgICAgZ2V0IGdsKCkge1xuICAgICAgICAgICAgcmV0dXJuIERldmljZU1hbmFnZXIuZ2V0SW5zdGFuY2UoKS5nbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBtYXhUZXh0dXJlVW5pdDpudW1iZXIgPSBudWxsO1xuICAgICAgICBwdWJsaWMgbWF4VGV4dHVyZVNpemU6bnVtYmVyID0gbnVsbDtcbiAgICAgICAgcHVibGljIG1heEN1YmVtYXBUZXh0dXJlU2l6ZTpudW1iZXIgPSBudWxsO1xuICAgICAgICBwdWJsaWMgbWF4QW5pc290cm9weTpudW1iZXIgPSBudWxsO1xuICAgICAgICBwdWJsaWMgZXh0ZW5zaW9uQ29tcHJlc3NlZFRleHR1cmVTM1RDOmFueSA9IG51bGw7XG4gICAgICAgIHB1YmxpYyBleHRlbnNpb25UZXh0dXJlRmlsdGVyQW5pc290cm9waWM6YW55ID0gbnVsbDtcbiAgICAgICAgcHVibGljIHByZWNpc2lvbjpudW1iZXIgPSBudWxsO1xuXG4gICAgICAgIHByaXZhdGUgX2lzRGV0ZWN0ZWQ6Ym9vbGVhbiA9IGZhbHNlO1xuXG4gICAgICAgIHB1YmxpYyBkZXRlY3QoKSB7XG4gICAgICAgICAgICB0aGlzLl9pc0RldGVjdGVkID0gdHJ1ZTtcblxuICAgICAgICAgICAgdGhpcy5fZGV0ZWN0RXh0ZW5zaW9uKCk7XG4gICAgICAgICAgICB0aGlzLl9kZXRlY3RDYXBhYmlsdHkoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX2RldGVjdEV4dGVuc2lvbigpIHtcbiAgICAgICAgICAgIHRoaXMuZXh0ZW5zaW9uQ29tcHJlc3NlZFRleHR1cmVTM1RDID0gdGhpcy5fZ2V0RXh0ZW5zaW9uKFwiV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3MzdGNcIik7XG5cbiAgICAgICAgICAgIHRoaXMuZXh0ZW5zaW9uVGV4dHVyZUZpbHRlckFuaXNvdHJvcGljID0gdGhpcy5fZ2V0RXh0ZW5zaW9uKFwiRVhUX3RleHR1cmVfZmlsdGVyX2FuaXNvdHJvcGljXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfZGV0ZWN0Q2FwYWJpbHR5KCkge1xuICAgICAgICAgICAgdmFyIGdsID0gdGhpcy5nbDtcblxuICAgICAgICAgICAgdGhpcy5tYXhUZXh0dXJlVW5pdCA9IGdsLmdldFBhcmFtZXRlcihnbC5NQVhfVEVYVFVSRV9JTUFHRV9VTklUUyk7XG4gICAgICAgICAgICB0aGlzLm1heFRleHR1cmVTaXplID0gZ2wuZ2V0UGFyYW1ldGVyKGdsLk1BWF9URVhUVVJFX1NJWkUpO1xuICAgICAgICAgICAgdGhpcy5tYXhDdWJlbWFwVGV4dHVyZVNpemUgPSBnbC5nZXRQYXJhbWV0ZXIoZ2wuTUFYX0NVQkVfTUFQX1RFWFRVUkVfU0laRSk7XG4gICAgICAgICAgICB0aGlzLm1heEFuaXNvdHJvcHkgPSB0aGlzLl9nZXRNYXhBbmlzb3Ryb3B5KCk7XG4gICAgICAgICAgICB0aGlzLl9kZXRlY3RQcmVjaXNpb24oKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX2dldEV4dGVuc2lvbihuYW1lOnN0cmluZykge1xuICAgICAgICAgICAgdmFyIGV4dGVuc2lvbixcbiAgICAgICAgICAgICAgICBnbCA9IHRoaXMuZ2w7XG5cbiAgICAgICAgICAgIHN3aXRjaCAobmFtZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgXCJFWFRfdGV4dHVyZV9maWx0ZXJfYW5pc290cm9waWNcIjpcbiAgICAgICAgICAgICAgICAgICAgZXh0ZW5zaW9uID0gZ2wuZ2V0RXh0ZW5zaW9uKFwiRVhUX3RleHR1cmVfZmlsdGVyX2FuaXNvdHJvcGljXCIpIHx8IGdsLmdldEV4dGVuc2lvbihcIk1PWl9FWFRfdGV4dHVyZV9maWx0ZXJfYW5pc290cm9waWNcIikgfHwgZ2wuZ2V0RXh0ZW5zaW9uKFwiV0VCS0lUX0VYVF90ZXh0dXJlX2ZpbHRlcl9hbmlzb3Ryb3BpY1wiKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcIldFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9zM3RjXCI6XG4gICAgICAgICAgICAgICAgICAgIGV4dGVuc2lvbiA9IGdsLmdldEV4dGVuc2lvbihcIldFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9zM3RjXCIpIHx8IGdsLmdldEV4dGVuc2lvbihcIk1PWl9XRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfczN0Y1wiKSB8fCBnbC5nZXRFeHRlbnNpb24oXCJXRUJLSVRfV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3MzdGNcIik7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfcHZydGNcIjpcbiAgICAgICAgICAgICAgICAgICAgZXh0ZW5zaW9uID0gZ2wuZ2V0RXh0ZW5zaW9uKFwiV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3B2cnRjXCIpIHx8IGdsLmdldEV4dGVuc2lvbihcIldFQktJVF9XRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfcHZydGNcIik7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIGV4dGVuc2lvbiA9IGdsLmdldEV4dGVuc2lvbihuYW1lKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGV4dGVuc2lvbjtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX2dldE1heEFuaXNvdHJvcHkoKSB7XG4gICAgICAgICAgICB2YXIgZXh0ZW5zaW9uID0gdGhpcy5leHRlbnNpb25UZXh0dXJlRmlsdGVyQW5pc290cm9waWMsXG4gICAgICAgICAgICAgICAgZ2wgPSB0aGlzLmdsO1xuXG4gICAgICAgICAgICByZXR1cm4gZXh0ZW5zaW9uICE9PSBudWxsID8gZ2wuZ2V0UGFyYW1ldGVyKGV4dGVuc2lvbi5NQVhfVEVYVFVSRV9NQVhfQU5JU09UUk9QWV9FWFQpIDogMDtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX2RldGVjdFByZWNpc2lvbigpIHtcbiAgICAgICAgICAgIHZhciBnbCA9IHRoaXMuZ2wsXG4gICAgICAgICAgICAgICAgdmVydGV4U2hhZGVyUHJlY2lzaW9uSGlnaHBGbG9hdCA9IGdsLmdldFNoYWRlclByZWNpc2lvbkZvcm1hdChnbC5WRVJURVhfU0hBREVSLCBnbC5ISUdIX0ZMT0FUKSxcbiAgICAgICAgICAgICAgICB2ZXJ0ZXhTaGFkZXJQcmVjaXNpb25NZWRpdW1wRmxvYXQgPSBnbC5nZXRTaGFkZXJQcmVjaXNpb25Gb3JtYXQoZ2wuVkVSVEVYX1NIQURFUiwgZ2wuTUVESVVNX0ZMT0FUKSxcbiAgICAgICAgICAgICAgICAvL3ZlcnRleFNoYWRlclByZWNpc2lvbkxvd3BGbG9hdCA9IGdsLmdldFNoYWRlclByZWNpc2lvbkZvcm1hdChnbC5WRVJURVhfU0hBREVSLCBnbC5MT1dfRkxPQVQpLFxuICAgICAgICAgICAgZnJhZ21lbnRTaGFkZXJQcmVjaXNpb25IaWdocEZsb2F0ID0gZ2wuZ2V0U2hhZGVyUHJlY2lzaW9uRm9ybWF0KGdsLkZSQUdNRU5UX1NIQURFUiwgZ2wuSElHSF9GTE9BVCksXG4gICAgICAgICAgICAgICAgZnJhZ21lbnRTaGFkZXJQcmVjaXNpb25NZWRpdW1wRmxvYXQgPSBnbC5nZXRTaGFkZXJQcmVjaXNpb25Gb3JtYXQoZ2wuRlJBR01FTlRfU0hBREVSLCBnbC5NRURJVU1fRkxPQVQpLFxuICAgICAgICAgICAgICAgIC8vZnJhZ21lbnRTaGFkZXJQcmVjaXNpb25Mb3dwRmxvYXQgPSBnbC5nZXRTaGFkZXJQcmVjaXNpb25Gb3JtYXQoZ2wuRlJBR01FTlRfU0hBREVSLCBnbC5MT1dfRkxPQVQpLFxuICAgICAgICAgICAgaGlnaHBBdmFpbGFibGUgPSB2ZXJ0ZXhTaGFkZXJQcmVjaXNpb25IaWdocEZsb2F0LnByZWNpc2lvbiA+IDAgJiYgZnJhZ21lbnRTaGFkZXJQcmVjaXNpb25IaWdocEZsb2F0LnByZWNpc2lvbiA+IDAsXG4gICAgICAgICAgICBtZWRpdW1wQXZhaWxhYmxlID0gdmVydGV4U2hhZGVyUHJlY2lzaW9uTWVkaXVtcEZsb2F0LnByZWNpc2lvbiA+IDAgJiYgZnJhZ21lbnRTaGFkZXJQcmVjaXNpb25NZWRpdW1wRmxvYXQucHJlY2lzaW9uID4gMDtcblxuICAgICAgICAgICAgaWYgKCFoaWdocEF2YWlsYWJsZSkge1xuICAgICAgICAgICAgICAgIGlmIChtZWRpdW1wQXZhaWxhYmxlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJlY2lzaW9uID0gR1BVUHJlY2lzaW9uLk1FRElVTVA7XG4gICAgICAgICAgICAgICAgICAgIExvZy53YXJuKExvZy5pbmZvLkZVTkNfTk9UX1NVUFBPUlQoXCJncHVcIiwgXCJoaWdocCwgdXNpbmcgbWVkaXVtcFwiKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnByZWNpc2lvbiA9IEdQVVByZWNpc2lvbi5MT1dQO1xuICAgICAgICAgICAgICAgICAgICBMb2cud2FybihMb2cuaW5mby5GVU5DX05PVF9TVVBQT1JUKFwiZ3B1XCIsIFwiaGlnaHAgYW5kIG1lZGl1bXAsIHVzaW5nIGxvd3BcIikpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICAgICAgdGhpcy5wcmVjaXNpb24gPSBHUFVQcmVjaXNpb24uSElHSFA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBleHBvcnQgZW51bSBHUFVQcmVjaXNpb257XG4gICAgICAgIEhJR0hQLFxuICAgICAgICBNRURJVU1QLFxuICAgICAgICBMT1dQXG4gICAgfVxufVxuIiwibW9kdWxlIHdke1xuICAgIGV4cG9ydCBlbnVtIFNjcmVlblNpemV7XG4gICAgICAgIEZVTExcbiAgICB9XG59IiwibW9kdWxlIHdkIHtcbiAgICBleHBvcnQgY2xhc3MgUG9pbnQge1xuICAgICAgICBwdWJsaWMgeDpudW1iZXIgPSBudWxsO1xuICAgICAgICBwdWJsaWMgeTpudW1iZXIgPSBudWxsO1xuXG4gICAgICAgIGNvbnN0cnVjdG9yKHg6bnVtYmVyID0gbnVsbCwgeTpudW1iZXIgPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLnggPSB4O1xuICAgICAgICAgICAgdGhpcy55ID0geTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlKHg6bnVtYmVyID0gbnVsbCwgeTpudW1iZXIgPSBudWxsKSB7XG4gICAgICAgICAgICB2YXIgb2JqID0gbmV3IHRoaXMoeCwgeSk7XG5cbiAgICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgIH1cbiAgICB9XG59IiwibW9kdWxlIHdkIHtcbiAgICBleHBvcnQgY2xhc3MgRmFjZTN7XG4gICAgICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlKGFJbmRleDpudW1iZXIsIGJJbmRleDpudW1iZXIsIGNJbmRleDpudW1iZXIsIGZhY2VOb3JtYWw6VmVjdG9yMyA9IG51bGwsIHZlcnRleE5vcm1hbHM6d2RDYi5Db2xsZWN0aW9uPFZlY3RvcjM+ID0gd2RDYi5Db2xsZWN0aW9uLmNyZWF0ZTxWZWN0b3IzPigpKSB7XG4gICAgICAgIFx0dmFyIG9iaiA9IG5ldyB0aGlzKGFJbmRleCwgYkluZGV4LCBjSW5kZXgsIGZhY2VOb3JtYWwsIHZlcnRleE5vcm1hbHMpO1xuXG4gICAgICAgIFx0cmV0dXJuIG9iajtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0cnVjdG9yKGFJbmRleDpudW1iZXIsIGJJbmRleDpudW1iZXIsIGNJbmRleDpudW1iZXIsIGZhY2VOb3JtYWw6VmVjdG9yMywgdmVydGV4Tm9ybWFsczp3ZENiLkNvbGxlY3Rpb248VmVjdG9yMz4pe1xuICAgICAgICAgICAgdGhpcy5hSW5kZXggPSBhSW5kZXg7XG4gICAgICAgICAgICB0aGlzLmJJbmRleCA9IGJJbmRleDtcbiAgICAgICAgICAgIHRoaXMuY0luZGV4ID0gY0luZGV4O1xuICAgICAgICAgICAgdGhpcy5fZmFjZU5vcm1hbCA9IGZhY2VOb3JtYWw7XG4gICAgICAgICAgICB0aGlzLnZlcnRleE5vcm1hbHMgPSB2ZXJ0ZXhOb3JtYWxzO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfZmFjZU5vcm1hbDpWZWN0b3IzID0gbnVsbDtcbiAgICAgICAgZ2V0IGZhY2VOb3JtYWwoKXtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9mYWNlTm9ybWFsICE9PSBudWxsID8gdGhpcy5fZmFjZU5vcm1hbCA6IFZlY3RvcjMuY3JlYXRlKDAsIDAsIDApO1xuICAgICAgICB9XG4gICAgICAgIHNldCBmYWNlTm9ybWFsKGZhY2VOb3JtYWw6VmVjdG9yMyl7XG4gICAgICAgICAgICB0aGlzLl9mYWNlTm9ybWFsID0gZmFjZU5vcm1hbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBhSW5kZXg6bnVtYmVyID0gbnVsbDtcbiAgICAgICAgcHVibGljIGJJbmRleDpudW1iZXIgPSBudWxsO1xuICAgICAgICBwdWJsaWMgY0luZGV4Om51bWJlciA9IG51bGw7XG4gICAgICAgIHB1YmxpYyB2ZXJ0ZXhOb3JtYWxzOndkQ2IuQ29sbGVjdGlvbjxWZWN0b3IzPiA9IG51bGw7XG5cbiAgICAgICAgcHVibGljIGhhc0ZhY2VOb3JtYWwoKXtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9mYWNlTm9ybWFsICE9PSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGhhc1ZlcnRleE5vcm1hbCgpe1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudmVydGV4Tm9ybWFscy5nZXRDb3VudCgpID4gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBjb3B5KCl7XG4gICAgICAgICAgICB2YXIgY29weUZhY2VOb3JtYWwgPSB0aGlzLl9mYWNlTm9ybWFsID8gdGhpcy5fZmFjZU5vcm1hbC5jb3B5KCkgOiBudWxsLFxuICAgICAgICAgICAgICAgIGNvcHlWZXJ0ZXhOb3JtYWxzID0gbnVsbDtcblxuICAgICAgICAgICAgaWYodGhpcy52ZXJ0ZXhOb3JtYWxzKXtcbiAgICAgICAgICAgICAgICBjb3B5VmVydGV4Tm9ybWFscyA9IHdkQ2IuQ29sbGVjdGlvbi5jcmVhdGUoKTtcblxuICAgICAgICAgICAgICAgIHRoaXMudmVydGV4Tm9ybWFscy5mb3JFYWNoKCh2ZXJ0ZXhOb3JtYWw6VmVjdG9yMykgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb3B5VmVydGV4Tm9ybWFscy5hZGRDaGlsZCh2ZXJ0ZXhOb3JtYWwuY29weSgpKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIEZhY2UzLmNyZWF0ZSh0aGlzLmFJbmRleCwgdGhpcy5iSW5kZXgsIHRoaXMuY0luZGV4LCBjb3B5RmFjZU5vcm1hbCwgY29weVZlcnRleE5vcm1hbHMpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4iLCJtb2R1bGUgd2Qge1xuICAgIGV4cG9ydCBjbGFzcyBSZWN0UmVnaW9uIGV4dGVuZHMgVmVjdG9yNHtcbiAgICAgICAgZ2V0IHdpZHRoKCl7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy56O1xuICAgICAgICB9XG4gICAgICAgIHNldCB3aWR0aCh3aWR0aDpudW1iZXIpe1xuICAgICAgICAgICAgdGhpcy56ID0gd2lkdGg7XG4gICAgICAgIH1cblxuICAgICAgICBnZXQgaGVpZ2h0KCl7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy53O1xuICAgICAgICB9XG4gICAgICAgIHNldCBoZWlnaHQoaGVpZ2h0Om51bWJlcil7XG4gICAgICAgICAgICB0aGlzLncgPSBoZWlnaHQ7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgY29weSgpOlJlY3RSZWdpb257XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb3B5SGVscGVyKFJlY3RSZWdpb24uY3JlYXRlKCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGlzTm90RW1wdHkoKXtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnggIT09IDBcbiAgICAgICAgICAgIHx8IHRoaXMueSAhPT0gMFxuICAgICAgICAgICAgfHwgdGhpcy53aWR0aCAhPT0gMFxuICAgICAgICAgICAgfHwgdGhpcy5oZWlnaHQgIT09IDA7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbiIsIm1vZHVsZSB3ZCB7XG4gICAgZXhwb3J0IGNsYXNzIFZpZXdXZWJHTCBpbXBsZW1lbnRzIElWaWV3IHtcbiAgICAgICAgcHVibGljIHN0YXRpYyBjcmVhdGUodmlldzphbnkpIHtcbiAgICAgICAgICAgIHZhciBvYmogPSBuZXcgdGhpcyh2aWV3KTtcblxuICAgICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0cnVjdG9yKGRvbTphbnkpe1xuICAgICAgICAgICAgdGhpcy5fZG9tID0gZG9tO1xuICAgICAgICB9XG5cbiAgICAgICAgZ2V0IG9mZnNldCgpIHtcbiAgICAgICAgICAgIHZhciB2aWV3ID0gdGhpcy5fZG9tLFxuICAgICAgICAgICAgICAgIG9mZnNldCA9IHt4OiB2aWV3Lm9mZnNldExlZnQsIHk6IHZpZXcub2Zmc2V0VG9wfTtcblxuICAgICAgICAgICAgd2hpbGUgKHZpZXcgPSB2aWV3Lm9mZnNldFBhcmVudCkge1xuICAgICAgICAgICAgICAgIG9mZnNldC54ICs9IHZpZXcub2Zmc2V0TGVmdDtcbiAgICAgICAgICAgICAgICBvZmZzZXQueSArPSB2aWV3Lm9mZnNldFRvcDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIG9mZnNldDtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX2RvbTphbnkgPSBudWxsO1xuICAgICAgICBnZXQgZG9tKCl7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZG9tO1xuICAgICAgICB9XG5cbiAgICAgICAgZ2V0IHdpZHRoKCl7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZG9tLndpZHRoO1xuICAgICAgICB9XG4gICAgICAgIHNldCB3aWR0aCh3aWR0aDpudW1iZXIpe1xuICAgICAgICAgICAgdGhpcy5fZG9tLndpZHRoID0gd2lkdGg7XG4gICAgICAgIH1cblxuICAgICAgICBnZXQgaGVpZ2h0KCl7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZG9tLmhlaWdodDtcbiAgICAgICAgfVxuICAgICAgICBzZXQgaGVpZ2h0KGhlaWdodDpudW1iZXIpe1xuICAgICAgICAgICAgdGhpcy5fZG9tLmhlaWdodCA9IGhlaWdodDtcbiAgICAgICAgfVxuXG4gICAgICAgIGdldCB4KCl7XG4gICAgICAgICAgICByZXR1cm4gTnVtYmVyKHRoaXMuX2RvbS5zdHlsZS5sZWZ0LnNsaWNlKDAsIC0yKSk7XG4gICAgICAgIH1cbiAgICAgICAgc2V0IHgoeDpudW1iZXIpe1xuICAgICAgICAgICAgdGhpcy5fZG9tLnN0eWxlLnBvc2l0aW9uID0gXCJhYnNvbHV0ZVwiO1xuICAgICAgICAgICAgdGhpcy5fZG9tLnN0eWxlLmxlZnQgPSBgJHt4fXB4YDtcbiAgICAgICAgfVxuXG4gICAgICAgIGdldCB5KCl7XG4gICAgICAgICAgICByZXR1cm4gTnVtYmVyKHRoaXMuX2RvbS5zdHlsZS50b3Auc2xpY2UoMCwgLTIpKTtcbiAgICAgICAgfVxuICAgICAgICBzZXQgeSh5Om51bWJlcil7XG4gICAgICAgICAgICB0aGlzLl9kb20uc3R5bGUucG9zaXRpb24gPSBcImFic29sdXRlXCI7XG4gICAgICAgICAgICB0aGlzLl9kb20uc3R5bGUudG9wID0gYCR7eX1weGA7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgZ2V0Q29udGV4dCgpOldlYkdMUmVuZGVyaW5nQ29udGV4dHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9kb20uZ2V0Q29udGV4dChcIndlYmdsXCIpIHx8IHRoaXMuX2RvbS5nZXRDb250ZXh0KFwiZXhwZXJpbWVudGFsLXdlYmdsXCIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZXhwb3J0IGludGVyZmFjZSBJVmlldyB7XG4gICAgICAgIG9mZnNldDp7eDpudW1iZXIsIHk6bnVtYmVyfTtcbiAgICAgICAgeDpudW1iZXI7XG4gICAgICAgIHk6bnVtYmVyO1xuICAgICAgICB3aWR0aDpudW1iZXI7XG4gICAgICAgIGhlaWdodDpudW1iZXI7XG4gICAgICAgIGRvbTphbnk7XG4gICAgICAgIGdldENvbnRleHQoKTpXZWJHTFJlbmRlcmluZ0NvbnRleHQ7XG4gICAgfVxuXG59XG4iLCJtb2R1bGUgd2R7XG4gICAgZGVjbGFyZSB2YXIgTWF0aDphbnk7XG5cbiAgICBleHBvcnQgY2xhc3MgQ29sb3Ige1xuICAgICAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZShjb2xvclZhbDpzdHJpbmcpIHtcbiAgICAgICAgICAgIHZhciBvYmogPSBuZXcgdGhpcygpO1xuXG4gICAgICAgICAgICBvYmouaW5pdFdoZW5DcmVhdGUoY29sb3JWYWwpO1xuXG4gICAgICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHI6bnVtYmVyID0gbnVsbDtcbiAgICAgICAgcHVibGljIGc6bnVtYmVyID0gbnVsbDtcbiAgICAgICAgcHVibGljIGI6bnVtYmVyID0gbnVsbDtcbiAgICAgICAgcHVibGljIGE6bnVtYmVyID0gbnVsbDtcblxuICAgICAgICBwcml2YXRlIF9jb2xvclN0cmluZzpzdHJpbmcgPSBudWxsO1xuXG4gICAgICAgIHB1YmxpYyBpbml0V2hlbkNyZWF0ZShjb2xvclZhbDpzdHJpbmcpIHtcbiAgICAgICAgICAgIHRoaXMuX2NvbG9yU3RyaW5nID0gY29sb3JWYWw7XG4gICAgICAgICAgICB0aGlzLl9zZXRDb2xvcihjb2xvclZhbCk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgdG9WZWN0b3IzKCl7XG4gICAgICAgICAgICByZXR1cm4gVmVjdG9yMy5jcmVhdGUodGhpcy5yLCB0aGlzLmcsIHRoaXMuYik7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgdG9WZWN0b3I0KCl7XG4gICAgICAgICAgICByZXR1cm4gVmVjdG9yNC5jcmVhdGUodGhpcy5yLCB0aGlzLmcsIHRoaXMuYiwgdGhpcy5hKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyB0b1N0cmluZygpe1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NvbG9yU3RyaW5nO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfc2V0Q29sb3IoY29sb3JWYWw6c3RyaW5nKSB7XG4gICAgICAgICAgICB2YXIgUkVHRVhfUkdCQSA9IC9ecmdiYVxcKChcXGQrKSxcXHMqKFxcZCspLFxccyooXFxkKyksXFxzKihbXlxcKV0rKVxcKSQvaSxcbiAgICAgICAgICAgICAgICBSRUdFWF9SR0IgPSAvXnJnYlxcKChcXGQrKSxcXHMqKFxcZCspLFxccyooXFxkKylcXCkkL2ksXG4gICAgICAgICAgICAgICAgUkVHRVhfUkdCXzIgPSAvXnJnYlxcKChcXGQrXFwuXFxkKyksXFxzKihcXGQrXFwuXFxkKyksXFxzKihcXGQrXFwuXFxkKylcXCkkL2ksXG4gICAgICAgICAgICAgICAgUkVHRVhfTlVNID0gL15cXCMoWzAtOWEtZl17Nn0pJC9pO1xuICAgICAgICAgICAgdmFyIGNvbG9yID0gbnVsbDtcblxuICAgICAgICAgICAgLy8gcmdiYSgyNTUsMCwwLDApXG5cbiAgICAgICAgICAgIGlmICggUkVHRVhfUkdCQS50ZXN0KCBjb2xvclZhbCApICkge1xuICAgICAgICAgICAgICAgIGNvbG9yID0gUkVHRVhfUkdCQS5leGVjKCBjb2xvclZhbCApO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5yID0gdGhpcy5fZ2V0Q29sb3JWYWx1ZShjb2xvciwgMSkgO1xuICAgICAgICAgICAgICAgIHRoaXMuZyA9IHRoaXMuX2dldENvbG9yVmFsdWUoY29sb3IsIDIpIDtcbiAgICAgICAgICAgICAgICB0aGlzLmIgPSB0aGlzLl9nZXRDb2xvclZhbHVlKGNvbG9yLCAzKSA7XG4gICAgICAgICAgICAgICAgdGhpcy5hID0gTnVtYmVyKGNvbG9yWzRdKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIHJnYigyNTUsMCwwKVxuXG4gICAgICAgICAgICBpZiAoIFJFR0VYX1JHQi50ZXN0KCBjb2xvclZhbCApICkge1xuICAgICAgICAgICAgICAgIGNvbG9yID0gUkVHRVhfUkdCLmV4ZWMoIGNvbG9yVmFsICk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLnIgPSB0aGlzLl9nZXRDb2xvclZhbHVlKGNvbG9yLCAxKSA7XG4gICAgICAgICAgICAgICAgdGhpcy5nID0gdGhpcy5fZ2V0Q29sb3JWYWx1ZShjb2xvciwgMikgO1xuICAgICAgICAgICAgICAgIHRoaXMuYiA9IHRoaXMuX2dldENvbG9yVmFsdWUoY29sb3IsIDMpIDtcbiAgICAgICAgICAgICAgICB0aGlzLmEgPSAxO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyohXG4gICAgICAgICAgICAgaXQgd2lsbCBjYXVzZSBhbWJpZ3VpdHk6IHJnYih4LHgseClcbiAgICAgICAgICAgICBzbyB0aGUgZm9ybWF0IHNob3VsZCBiZTpcbiAgICAgICAgICAgICByZ2IoeC54LHgueCx4LngpXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGlmICggUkVHRVhfUkdCXzIudGVzdCggY29sb3JWYWwgKSApIHtcbiAgICAgICAgICAgICAgICBjb2xvciA9IFJFR0VYX1JHQl8yLmV4ZWMoIGNvbG9yVmFsICk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLnIgPSBwYXJzZUZsb2F0KGNvbG9yWzFdKTtcbiAgICAgICAgICAgICAgICB0aGlzLmcgPSBwYXJzZUZsb2F0KGNvbG9yWzJdKTtcbiAgICAgICAgICAgICAgICB0aGlzLmIgPSBwYXJzZUZsb2F0KGNvbG9yWzNdKTtcblxuICAgICAgICAgICAgICAgIHRoaXMuYSA9IDE7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcblxuICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgIC8vICNmZmZmZmZcblxuICAgICAgICAgICAgaWYgKFJFR0VYX05VTS50ZXN0KGNvbG9yVmFsKSkge1xuICAgICAgICAgICAgICAgIGNvbG9yID0gUkVHRVhfTlVNLmV4ZWMoY29sb3JWYWwpO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5fc2V0SGV4KHBhcnNlSW50KGNvbG9yWzFdLCAxNikpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX2dldENvbG9yVmFsdWUoY29sb3IsIGluZGV4LCBudW09MjU1KXtcbiAgICAgICAgICAgIHJldHVybiBNYXRoLm1pbiggbnVtLCBwYXJzZUludCggY29sb3JbIGluZGV4IF0sIDEwICkgKSAvIG51bTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX3NldEhleChoZXgpIHtcbiAgICAgICAgICAgIGhleCA9IE1hdGguZmxvb3IoaGV4KTtcblxuICAgICAgICAgICAgdGhpcy5yID0gKCBoZXggPj4gMTYgJiAyNTUgKSAvIDI1NTtcbiAgICAgICAgICAgIHRoaXMuZyA9ICggaGV4ID4+IDggJiAyNTUgKSAvIDI1NTtcbiAgICAgICAgICAgIHRoaXMuYiA9ICggaGV4ICYgMjU1ICkgLyAyNTU7XG4gICAgICAgICAgICB0aGlzLmEgPSAxO1xuXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgIH1cbn0iLCJtb2R1bGUgd2R7XG4gICAgZXhwb3J0IGFic3RyYWN0IGNsYXNzIFRleHR1cmV7XG4gICAgICAgIGdldCBnZW9tZXRyeSgpe1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubWF0ZXJpYWwuZ2VvbWV0cnk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgbWF0ZXJpYWw6TWF0ZXJpYWwgPSBudWxsO1xuICAgICAgICBwdWJsaWMgd2lkdGg6bnVtYmVyID0gbnVsbDtcbiAgICAgICAgcHVibGljIGhlaWdodDpudW1iZXIgPSBudWxsO1xuICAgICAgICBwdWJsaWMgdmFyaWFibGVEYXRhOk1hcFZhcmlhYmxlRGF0YSA9IG51bGw7XG4gICAgICAgIHB1YmxpYyB3cmFwUzpUZXh0dXJlV3JhcE1vZGUgPSBudWxsO1xuICAgICAgICBwdWJsaWMgd3JhcFQ6VGV4dHVyZVdyYXBNb2RlID0gbnVsbDtcbiAgICAgICAgcHVibGljIG1hZ0ZpbHRlcjpUZXh0dXJlRmlsdGVyTW9kZSA9IG51bGw7XG4gICAgICAgIHB1YmxpYyBtaW5GaWx0ZXI6VGV4dHVyZUZpbHRlck1vZGUgPSBudWxsO1xuICAgICAgICBwdWJsaWMgZ2xUZXh0dXJlOldlYkdMVGV4dHVyZSA9IG51bGw7XG5cbiAgICAgICAgcHJvdGVjdGVkIHRhcmdldDpUZXh0dXJlVGFyZ2V0ID0gVGV4dHVyZVRhcmdldC5URVhUVVJFXzJEO1xuXG5cbiAgICAgICAgcHVibGljIGFic3RyYWN0IGluaXQoKTtcbiAgICAgICAgcHVibGljIGFic3RyYWN0IGdldFNhbXBsZXJOYW1lKHVuaXQ6bnVtYmVyKTpzdHJpbmc7XG5cbiAgICAgICAgcHVibGljIGJpbmRUb1VuaXQgKHVuaXQ6bnVtYmVyKSB7XG4gICAgICAgICAgICB2YXIgZ2wgPSBEZXZpY2VNYW5hZ2VyLmdldEluc3RhbmNlKCkuZ2wsXG4gICAgICAgICAgICAgICAgbWF4VW5pdCA9IEdQVURldGVjdG9yLmdldEluc3RhbmNlKCkubWF4VGV4dHVyZVVuaXQ7XG5cbiAgICAgICAgICAgIGlmKHVuaXQgPj0gbWF4VW5pdCl7XG4gICAgICAgICAgICAgICAgTG9nLndhcm4oYHRyeWluZyB0byB1c2UgJHt1bml0fSB0ZXh0dXJlIHVuaXRzLCBidXQgR1BVIG9ubHkgc3VwcG9ydHMgJHttYXhVbml0fSB1bml0c2ApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBnbC5hY3RpdmVUZXh0dXJlKGdsW1wiVEVYVFVSRVwiICsgU3RyaW5nKHVuaXQpXSk7XG4gICAgICAgICAgICBnbC5iaW5kVGV4dHVyZShnbFt0aGlzLnRhcmdldF0sIHRoaXMuZ2xUZXh0dXJlKTtcblxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgc2VuZERhdGEocHJvZ3JhbTpQcm9ncmFtLCBwb3M6V2ViR0xVbmlmb3JtTG9jYXRpb24sIHVuaXQ6bnVtYmVyKXtcbiAgICAgICAgICAgIHByb2dyYW0uc2VuZFVuaWZvcm1EYXRhKHBvcywgdGhpcy5nZXRTYW1wbGVyVHlwZSgpLCB1bml0KTtcblxuICAgICAgICAgICAgdGhpcy5zZW5kT3RoZXJEYXRhKHByb2dyYW0sIHVuaXQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGRpc3Bvc2UoKXtcbiAgICAgICAgICAgIHZhciBnbCA9IERldmljZU1hbmFnZXIuZ2V0SW5zdGFuY2UoKS5nbDtcblxuICAgICAgICAgICAgZ2wuZGVsZXRlVGV4dHVyZSh0aGlzLmdsVGV4dHVyZSk7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5nbFRleHR1cmU7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgZmlsdGVyRmFsbGJhY2soZmlsdGVyOlRleHR1cmVGaWx0ZXJNb2RlKSB7XG4gICAgICAgICAgICBpZiAoZmlsdGVyID09PSBUZXh0dXJlRmlsdGVyTW9kZS5ORUFSRVNUfHwgZmlsdGVyID09PSBUZXh0dXJlRmlsdGVyTW9kZS5ORUFSRVNUX01JUE1BUF9NRUFSRVNUfHwgZmlsdGVyID09PSBUZXh0dXJlRmlsdGVyTW9kZS5ORUFSRVNUX01JUE1BUF9MSU5FQVIgKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFRleHR1cmVGaWx0ZXJNb2RlLk5FQVJFU1Q7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBUZXh0dXJlRmlsdGVyTW9kZS5MSU5FQVI7XG4gICAgICAgIH1cblxuICAgICAgICBAdmlydHVhbFxuICAgICAgICBwcm90ZWN0ZWQgc2VuZE90aGVyRGF0YShwcm9ncmFtOlByb2dyYW0sIHVuaXQ6bnVtYmVyKXtcbiAgICAgICAgfVxuXG4gICAgICAgIHByb3RlY3RlZCBnZXRTYW1wbGVyTmFtZUJ5VmFyaWFibGVEYXRhKHVuaXQ6bnVtYmVyLCB0eXBlPzpWYXJpYWJsZVR5cGUpe1xuICAgICAgICAgICAgdmFyIHNhbXBsZXJOYW1lOnN0cmluZyA9IG51bGw7XG5cbiAgICAgICAgICAgIGlmKHRoaXMudmFyaWFibGVEYXRhKXtcbiAgICAgICAgICAgICAgICBpZih0aGlzLnZhcmlhYmxlRGF0YS5zYW1wbGVyVmFyaWFibGVOYW1lKXtcbiAgICAgICAgICAgICAgICAgICAgc2FtcGxlck5hbWUgPSB0aGlzLnZhcmlhYmxlRGF0YS5zYW1wbGVyVmFyaWFibGVOYW1lO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICAgICAgc2FtcGxlck5hbWUgPSB0eXBlID09PSBWYXJpYWJsZVR5cGUuU0FNUExFUl8yRCA/IGB1X3NhbXBsZXIyRCR7dW5pdH1gIDogYHVfc2FtcGxlckN1YmUke3VuaXR9YDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHNhbXBsZXJOYW1lO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJvdGVjdGVkIGdldFNhbXBsZXJUeXBlKCk6VmFyaWFibGVUeXBle1xuICAgICAgICAgICAgdmFyIHR5cGUgPSBudWxsO1xuXG4gICAgICAgICAgICBzd2l0Y2godGhpcy50YXJnZXQpe1xuICAgICAgICAgICAgICAgIGNhc2UgVGV4dHVyZVRhcmdldC5URVhUVVJFXzJEOlxuICAgICAgICAgICAgICAgICAgICB0eXBlID0gVmFyaWFibGVUeXBlLlNBTVBMRVJfMkQ7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgVGV4dHVyZVRhcmdldC5URVhUVVJFX0NVQkVfTUFQOlxuICAgICAgICAgICAgICAgICAgICB0eXBlID0gVmFyaWFibGVUeXBlLlNBTVBMRVJfQ1VCRTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB0eXBlO1xuICAgICAgICB9XG5cbiAgICAgICAgQHZpcnR1YWxcbiAgICAgICAgcHJvdGVjdGVkIGlzU291cmNlUG93ZXJPZlR3bygpe1xuICAgICAgICAgICAgcmV0dXJuIFRleHR1cmVVdGlscy5pc1Bvd2VyT2ZUd28odGhpcy53aWR0aCwgdGhpcy5oZWlnaHQpXG4gICAgICAgIH1cblxuICAgICAgICBwcm90ZWN0ZWQgc2V0VGV4dHVyZVBhcmFtZXRlcnModGV4dHVyZVR5cGUsIGlzU291cmNlUG93ZXJPZlR3byl7XG4gICAgICAgICAgICB2YXIgZ2wgPSBEZXZpY2VNYW5hZ2VyLmdldEluc3RhbmNlKCkuZ2w7XG5cbiAgICAgICAgICAgIGlmIChpc1NvdXJjZVBvd2VyT2ZUd28pe1xuICAgICAgICAgICAgICAgIGdsLnRleFBhcmFtZXRlcmkodGV4dHVyZVR5cGUsIGdsLlRFWFRVUkVfV1JBUF9TLCBnbFt0aGlzLndyYXBTXSk7XG4gICAgICAgICAgICAgICAgZ2wudGV4UGFyYW1ldGVyaSh0ZXh0dXJlVHlwZSwgZ2wuVEVYVFVSRV9XUkFQX1QsIGdsW3RoaXMud3JhcFRdKTtcblxuICAgICAgICAgICAgICAgIGdsLnRleFBhcmFtZXRlcmkodGV4dHVyZVR5cGUsIGdsLlRFWFRVUkVfTUFHX0ZJTFRFUiwgZ2xbdGhpcy5tYWdGaWx0ZXJdKTtcbiAgICAgICAgICAgICAgICBnbC50ZXhQYXJhbWV0ZXJpKHRleHR1cmVUeXBlLCBnbC5URVhUVVJFX01JTl9GSUxURVIsIGdsW3RoaXMubWluRmlsdGVyXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBnbC50ZXhQYXJhbWV0ZXJpKHRleHR1cmVUeXBlLCBnbC5URVhUVVJFX1dSQVBfUywgZ2wuQ0xBTVBfVE9fRURHRSk7XG4gICAgICAgICAgICAgICAgZ2wudGV4UGFyYW1ldGVyaSh0ZXh0dXJlVHlwZSwgZ2wuVEVYVFVSRV9XUkFQX1QsIGdsLkNMQU1QX1RPX0VER0UpO1xuXG4gICAgICAgICAgICAgICAgZ2wudGV4UGFyYW1ldGVyaSh0ZXh0dXJlVHlwZSwgZ2wuVEVYVFVSRV9NQUdfRklMVEVSLCBnbFt0aGlzLmZpbHRlckZhbGxiYWNrKHRoaXMubWFnRmlsdGVyKV0pO1xuICAgICAgICAgICAgICAgIGdsLnRleFBhcmFtZXRlcmkodGV4dHVyZVR5cGUsIGdsLlRFWFRVUkVfTUlOX0ZJTFRFUiwgZ2xbdGhpcy5maWx0ZXJGYWxsYmFjayh0aGlzLm1pbkZpbHRlcildKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cblxuIiwibW9kdWxlIHdkIHtcbiAgICBleHBvcnQgY2xhc3MgVGV4dHVyZVV0aWxze1xuICAgICAgICBwdWJsaWMgc3RhdGljIGlzUG93ZXJPZlR3byh3aWR0aDpudW1iZXIsIGhlaWdodDpudW1iZXIpe1xuICAgICAgICAgICAgcmV0dXJuIEp1ZGdlVXRpbHMuaXNQb3dlck9mVHdvKHdpZHRoKSAmJiBKdWRnZVV0aWxzLmlzUG93ZXJPZlR3byhoZWlnaHQpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4iLCJtb2R1bGUgd2Qge1xuICAgIGRlY2xhcmUgdmFyIE1hdGg6YW55O1xuXG4gICAgZXhwb3J0IGNsYXNzIEJhc2ljVGV4dHVyZVV0aWxzIGV4dGVuZHMgVGV4dHVyZVV0aWxze1xuICAgICAgICBwdWJsaWMgc3RhdGljIGlzRHJhd1BhcnRPZlRleHR1cmUoc291cmNlUmVnaW9uOlJlY3RSZWdpb24sIHNvdXJjZVJlZ2lvbk1ldGhvZDpUZXh0dXJlU291cmNlUmVnaW9uTWV0aG9kKXtcbiAgICAgICAgICAgIHJldHVybiBzb3VyY2VSZWdpb24gJiYgc291cmNlUmVnaW9uLmlzTm90RW1wdHkoKSAmJiBzb3VyY2VSZWdpb25NZXRob2QgPT09IFRleHR1cmVTb3VyY2VSZWdpb25NZXRob2QuRFJBV19JTl9DQU5WQVM7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgc3RhdGljIGRyYXdQYXJ0T2ZUZXh0dXJlQnlDYW52YXMoc291cmNlOkhUTUxJbWFnZUVsZW1lbnQsIGNhbnZhc1dpZHRoOm51bWJlciwgY2FudmFzSGVpZ2h0Om51bWJlciwgc3g6bnVtYmVyLCBzeTpudW1iZXIsIHNXaWR0aDpudW1iZXIsIHNIZWlnaHQ6bnVtYmVyLCBkeDpudW1iZXIsIHdkOm51bWJlciwgZFdpZHRoOm51bWJlciwgZEhlaWdodDpudW1iZXIpe1xuICAgICAgICAgICAgdmFyIGNhbnZhcyA9IHdkQ2IuRG9tUXVlcnkuY3JlYXRlKFwiPGNhbnZhcz48L2NhbnZhcz5cIikuZ2V0KDApLFxuICAgICAgICAgICAgICAgIGN0eCA9IG51bGw7XG5cbiAgICAgICAgICAgIGNhbnZhcy53aWR0aCA9IGNhbnZhc1dpZHRoO1xuICAgICAgICAgICAgY2FudmFzLmhlaWdodCA9IGNhbnZhc0hlaWdodDtcblxuICAgICAgICAgICAgY3R4ID0gY2FudmFzLmdldENvbnRleHQoIFwiMmRcIiApO1xuICAgICAgICAgICAgY3R4LmRyYXdJbWFnZSggc291cmNlLCBzeCwgc3ksIHNXaWR0aCwgc0hlaWdodCwgZHgsIHdkLCBkV2lkdGgsIGRIZWlnaHQpO1xuXG4gICAgICAgICAgICByZXR1cm4gY2FudmFzXG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgc3RhdGljIGlzU291cmNlUG93ZXJPZlR3byhzb3VyY2VSZWdpb24sIHNvdXJjZVJlZ2lvbk1ldGhvZCwgd2lkdGgsIGhlaWdodCl7XG4gICAgICAgICAgICBpZih0aGlzLmlzRHJhd1BhcnRPZlRleHR1cmUoc291cmNlUmVnaW9uLCBzb3VyY2VSZWdpb25NZXRob2QpKXtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5pc1Bvd2VyT2ZUd28oc291cmNlUmVnaW9uLndpZHRoLCBzb3VyY2VSZWdpb24uaGVpZ2h0KVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5pc1Bvd2VyT2ZUd28od2lkdGgsIGhlaWdodCk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgc3RhdGljIG5lZWRDbGFtcE1heFNpemUobWF4U2l6ZTpudW1iZXIsIHdpZHRoOm51bWJlciwgaGVpZ2h0Om51bWJlcil7XG4gICAgICAgICAgICByZXR1cm4gd2lkdGggPiBtYXhTaXplIHx8IGhlaWdodCA+IG1heFNpemU7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgc3RhdGljIGNsYW1wVG9NYXhTaXplIChzb3VyY2U6YW55LCBtYXhTaXplOm51bWJlcikge1xuICAgICAgICAgICAgdmFyIG1heERpbWVuc2lvbiA9IG51bGwsXG4gICAgICAgICAgICAgICAgbmV3V2lkdGggPSBudWxsLFxuICAgICAgICAgICAgICAgIG5ld0hlaWdodCA9IG51bGwsXG4gICAgICAgICAgICAgICAgY2FudmFzID0gbnVsbDtcblxuICAgICAgICAgICAgbWF4RGltZW5zaW9uID0gTWF0aC5tYXgoIHNvdXJjZS53aWR0aCwgc291cmNlLmhlaWdodCApO1xuICAgICAgICAgICAgbmV3V2lkdGggPSBNYXRoLmZsb29yKCBzb3VyY2Uud2lkdGggKiBtYXhTaXplIC8gbWF4RGltZW5zaW9uICk7XG4gICAgICAgICAgICBuZXdIZWlnaHQgPSBNYXRoLmZsb29yKCBzb3VyY2UuaGVpZ2h0ICogbWF4U2l6ZSAvIG1heERpbWVuc2lvbiApO1xuXG4gICAgICAgICAgICBjYW52YXMgPSB0aGlzLmRyYXdQYXJ0T2ZUZXh0dXJlQnlDYW52YXMoc291cmNlLCBuZXdXaWR0aCwgbmV3SGVpZ2h0LCAwLCAwLCBzb3VyY2Uud2lkdGgsIHNvdXJjZS5oZWlnaHQsIDAsIDAsIG5ld1dpZHRoLCBuZXdIZWlnaHQpO1xuXG4gICAgICAgICAgICBMb2cubG9nKGBzb3VyY2UgaXMgdG9vIGJpZyAod2lkdGg6JHtzb3VyY2Uud2lkdGh9LCBoZWlnaHQ6JHtzb3VyY2UuaGVpZ2h0fSksIHJlc2l6ZSBpdCB0byBiZSB3aWR0aDoke2NhbnZhcy53aWR0aH0sIGhlaWdodDoke2NhbnZhcy5oZWlnaHR9LmApO1xuXG4gICAgICAgICAgICByZXR1cm4gY2FudmFzO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4iLCJtb2R1bGUgd2Qge1xuICAgIGV4cG9ydCBhYnN0cmFjdCBjbGFzcyBSZW5kZXJUYXJnZXRUZXh0dXJlIGV4dGVuZHMgVGV4dHVyZSB7XG4gICAgICAgIHB1YmxpYyBhYnN0cmFjdCBjcmVhdGVFbXB0eVRleHR1cmUoKTtcblxuICAgICAgICBwdWJsaWMgaW5pdCgpe1xuICAgICAgICAgICAgLy90b2RvIHN1cHBvcnQgbWlwbWFwP1xuICAgICAgICAgICAgLy90aGlzLmdlbmVyYXRlTWlwbWFwcyA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5taW5GaWx0ZXIgPSBUZXh0dXJlRmlsdGVyTW9kZS5MSU5FQVI7XG4gICAgICAgICAgICB0aGlzLm1hZ0ZpbHRlciA9IFRleHR1cmVGaWx0ZXJNb2RlLkxJTkVBUjtcbiAgICAgICAgICAgIHRoaXMud3JhcFMgPSBUZXh0dXJlV3JhcE1vZGUuQ0xBTVBfVE9fRURHRTtcbiAgICAgICAgICAgIHRoaXMud3JhcFQgPSBUZXh0dXJlV3JhcE1vZGUuQ0xBTVBfVE9fRURHRTtcblxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgZ2V0UG9zaXRpb24oKXtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdlb21ldHJ5LmVudGl0eU9iamVjdC50cmFuc2Zvcm0ucG9zaXRpb247XG4gICAgICAgIH1cblxuICAgICAgICBwcm90ZWN0ZWQgc2V0RW1wdHlUZXh0dXJlKHRleHR1cmUpe1xuICAgICAgICAgICAgdmFyIGdsID0gRGV2aWNlTWFuYWdlci5nZXRJbnN0YW5jZSgpLmdsO1xuXG4gICAgICAgICAgICBMb2cuZXJyb3IoIXRleHR1cmUsIFwiRmFpbGVkIHRvIGNyZWF0ZSB0ZXh0dXJlIG9iamVjdFwiKTtcblxuICAgICAgICAgICAgZ2wuYmluZFRleHR1cmUoZ2xbdGhpcy50YXJnZXRdLCB0ZXh0dXJlKTtcblxuXG4gICAgICAgICAgICB0aGlzLnNldFRleHR1cmVQYXJhbWV0ZXJzKGdsW3RoaXMudGFyZ2V0XSwgdGhpcy5pc1NvdXJjZVBvd2VyT2ZUd28oKSk7XG4gICAgICAgICAgICAvL3RvZG8gc3VwcG9ydCBtaXBtYXA/XG4gICAgICAgICAgICAvL2lmICh0aGlzLmdlbmVyYXRlTWlwbWFwcyAmJiBpc1NvdXJjZVBvd2VyT2ZUd28pIHtcbiAgICAgICAgICAgIC8vICAgIGdsLmdlbmVyYXRlTWlwbWFwKGdsW3RoaXMudGFyZ2V0XSk7XG4gICAgICAgICAgICAvL31cbiAgICAgICAgfVxuICAgIH1cbn1cblxuIiwibW9kdWxlIHdkIHtcbiAgICBleHBvcnQgYWJzdHJhY3QgY2xhc3MgVHdvRFJlbmRlclRhcmdldFRleHR1cmUgZXh0ZW5kcyBSZW5kZXJUYXJnZXRUZXh0dXJlIHtcbiAgICAgICAgcHJpdmF0ZSBfcmVuZGVyTGlzdDp3ZENiLkNvbGxlY3Rpb248R2FtZU9iamVjdD4gPSBudWxsO1xuICAgICAgICBnZXQgcmVuZGVyTGlzdCgpe1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3JlbmRlckxpc3Q7XG4gICAgICAgIH1cbiAgICAgICAgc2V0IHJlbmRlckxpc3QocmVuZGVyTGlzdDphbnkpIHtcbiAgICAgICAgICAgIGlmIChKdWRnZVV0aWxzLmlzQXJyYXkocmVuZGVyTGlzdCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9yZW5kZXJMaXN0ID0gd2RDYi5Db2xsZWN0aW9uLmNyZWF0ZTxHYW1lT2JqZWN0PihyZW5kZXJMaXN0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHJlbmRlckxpc3QgaW5zdGFuY2VvZiB3ZENiLkNvbGxlY3Rpb24pIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9yZW5kZXJMaXN0ID0gcmVuZGVyTGlzdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIExvZy5lcnJvcih0cnVlLCBMb2cuaW5mby5GVU5DX01VU1RfQkUoXCJyZW5kZXJMaXN0XCIsIFwiYXJyYXkgb3Igd2RDYi5Db2xsZWN0aW9uXCIpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyB3aWR0aDpudW1iZXIgPSAyNTY7XG4gICAgICAgIHB1YmxpYyBoZWlnaHQ6bnVtYmVyID0gMjU2O1xuXG5cbiAgICAgICAgcHVibGljIGNyZWF0ZUVtcHR5VGV4dHVyZSgpe1xuICAgICAgICAgICAgdmFyIGdsID0gRGV2aWNlTWFuYWdlci5nZXRJbnN0YW5jZSgpLmdsLFxuICAgICAgICAgICAgICAgIHRleHR1cmUgPSBnbC5jcmVhdGVUZXh0dXJlKCk7XG5cbiAgICAgICAgICAgIHRoaXMuc2V0RW1wdHlUZXh0dXJlKHRleHR1cmUpO1xuXG4gICAgICAgICAgICBnbC50ZXhJbWFnZTJEKGdsW3RoaXMudGFyZ2V0XSwgMCwgZ2wuUkdCQSwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQsIDAsIGdsLlJHQkEsIGdsLlVOU0lHTkVEX0JZVEUsIG51bGwpO1xuXG4gICAgICAgICAgICB0aGlzLmdsVGV4dHVyZSA9IHRleHR1cmU7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbiIsIm1vZHVsZSB3ZCB7XG4gICAgZXhwb3J0IGNsYXNzIFNoYWRvd01hcFRleHR1cmVVdGlsc3tcbiAgICAgICAgcHVibGljIHN0YXRpYyBzZXRUZXh0dXJlUGFyYW1ldGVycyh0ZXh0dXJlVHlwZSl7XG4gICAgICAgICAgICB2YXIgZ2wgPSBEZXZpY2VNYW5hZ2VyLmdldEluc3RhbmNlKCkuZ2wsXG4gICAgICAgICAgICAgICAgc2NlbmU6U2NlbmVEaXNwYXRjaGVyID0gRGlyZWN0b3IuZ2V0SW5zdGFuY2UoKS5zY2VuZTtcblxuICAgICAgICAgICAgaWYoc2NlbmUuc2hhZG93TWFwLnNvZnRUeXBlID09PSBTaGFkb3dNYXBTb2Z0VHlwZS5QQ0YpIHtcbiAgICAgICAgICAgICAgICBnbC50ZXhQYXJhbWV0ZXJpKHRleHR1cmVUeXBlLCBnbC5URVhUVVJFX01BR19GSUxURVIsIGdsLk5FQVJFU1QpO1xuICAgICAgICAgICAgICAgIGdsLnRleFBhcmFtZXRlcmkodGV4dHVyZVR5cGUsIGdsLlRFWFRVUkVfTUlOX0ZJTFRFUiwgZ2wuTkVBUkVTVCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5cbiIsIm1vZHVsZSB3ZCB7XG4gICAgZXhwb3J0IGNsYXNzIE1pcnJvclRleHR1cmUgZXh0ZW5kcyBUd29EUmVuZGVyVGFyZ2V0VGV4dHVyZSB7XG4gICAgICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlKCkge1xuICAgICAgICBcdHZhciBvYmogPSBuZXcgdGhpcygpO1xuXG4gICAgICAgIFx0cmV0dXJuIG9iajtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX3BsYW5lOlBsYW5lID0gbnVsbDtcblxuICAgICAgICBwdWJsaWMgaW5pdCgpe1xuICAgICAgICAgICAgc3VwZXIuaW5pdCgpO1xuXG4gICAgICAgICAgICBEaXJlY3Rvci5nZXRJbnN0YW5jZSgpLnNjZW5lLmFkZFJlbmRlclRhcmdldFJlbmRlcmVyKE1pcnJvclJlbmRlclRhcmdldFJlbmRlcmVyLmNyZWF0ZSh0aGlzKSk7XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGdldFNhbXBsZXJOYW1lKHVuaXQ6bnVtYmVyKXtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldFNhbXBsZXJOYW1lQnlWYXJpYWJsZURhdGEodW5pdCwgVmFyaWFibGVUeXBlLlNBTVBMRVJfMkQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGdldFBsYW5lKCl7XG4gICAgICAgICAgICB2YXIgbm9ybWFsRGF0YSA9IG51bGwsXG4gICAgICAgICAgICAgICAgbm9ybWFsID0gbnVsbCxcbiAgICAgICAgICAgICAgICBwID0gbnVsbDtcblxuICAgICAgICAgICAgaWYodGhpcy5fcGxhbmUgJiYgIXRoaXMuZ2VvbWV0cnkuZW50aXR5T2JqZWN0LnRyYW5zZm9ybS5kaXJ0eUxvY2FsKXtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fcGxhbmU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIExvZy5lcnJvcighKHRoaXMuZ2VvbWV0cnkgaW5zdGFuY2VvZiBQbGFuZUdlb21ldHJ5KSwgTG9nLmluZm8uRlVOQ19NVVNUX0JFKFwiZ2VvbWV0cnlcIiwgXCJQbGFuZUdlb21ldHJ5XCIpKTtcblxuICAgICAgICAgICAgbm9ybWFsRGF0YSA9IHRoaXMuZ2VvbWV0cnkuZ2VvbWV0cnlEYXRhLm5vcm1hbHM7XG4gICAgICAgICAgICBub3JtYWwgPSB0aGlzLmdlb21ldHJ5LmVudGl0eU9iamVjdC50cmFuc2Zvcm0ubG9jYWxSb3RhdGlvbi5tdWx0aXBseVZlY3RvcjMoVmVjdG9yMy5jcmVhdGUobm9ybWFsRGF0YVswXSwgbm9ybWFsRGF0YVsxXSwgbm9ybWFsRGF0YVsyXSkpLm5vcm1hbGl6ZSgpO1xuICAgICAgICAgICAgcCA9IHRoaXMuZ2V0UG9zaXRpb24oKTtcblxuICAgICAgICAgICAgdGhpcy5fcGxhbmUgPSBQbGFuZS5jcmVhdGUobm9ybWFsLngsIG5vcm1hbC55LCBub3JtYWwueiwgLXAuZG90KG5vcm1hbCkpO1xuXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fcGxhbmU7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbiIsIm1vZHVsZSB3ZCB7XG4gICAgZXhwb3J0IGNsYXNzIFR3b0RTaGFkb3dNYXBUZXh0dXJlIGV4dGVuZHMgVHdvRFJlbmRlclRhcmdldFRleHR1cmUgaW1wbGVtZW50cyBJU2hhZG93TWFwVGV4dHVyZXtcbiAgICAgICAgcHVibGljIHN0YXRpYyBjcmVhdGUoKSB7XG4gICAgICAgICAgICB2YXIgb2JqID0gbmV3IHRoaXMoKTtcblxuICAgICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBnZXRTYW1wbGVyTmFtZSh1bml0Om51bWJlcil7XG4gICAgICAgICAgICBMb2cuZXJyb3IoIUp1ZGdlVXRpbHMuaXNOdW1iZXIodGhpcy52YXJpYWJsZURhdGEuc2FtcGxlckRhdGEpLCBMb2cuaW5mby5GVU5DX01VU1RfQkUoXCJzaGFkb3dNYXBUZXh0dXJlLT52YXJpYWJsZURhdGEuc2FtcGxlckRhdGFcIiwgXCJzYW1wbGVySW5kZXhcIikpO1xuXG4gICAgICAgICAgICByZXR1cm4gYHVfdHdvRFNoYWRvd01hcFNhbXBsZXJbJHt0aGlzLnZhcmlhYmxlRGF0YS5zYW1wbGVyRGF0YX1dYDtcbiAgICAgICAgfVxuXG4gICAgICAgIHByb3RlY3RlZCBzZXRUZXh0dXJlUGFyYW1ldGVycyh0ZXh0dXJlVHlwZSwgaXNTb3VyY2VQb3dlck9mVHdvKXtcbiAgICAgICAgICAgIHN1cGVyLnNldFRleHR1cmVQYXJhbWV0ZXJzKHRleHR1cmVUeXBlLCBpc1NvdXJjZVBvd2VyT2ZUd28pO1xuXG4gICAgICAgICAgICBTaGFkb3dNYXBUZXh0dXJlVXRpbHMuc2V0VGV4dHVyZVBhcmFtZXRlcnModGV4dHVyZVR5cGUpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4iLCJtb2R1bGUgd2Qge1xuICAgIGV4cG9ydCBhYnN0cmFjdCBjbGFzcyBDdWJlbWFwUmVuZGVyVGFyZ2V0VGV4dHVyZSBleHRlbmRzIFJlbmRlclRhcmdldFRleHR1cmUge1xuICAgICAgICBwcm90ZWN0ZWQgdGFyZ2V0OlRleHR1cmVUYXJnZXQgPSBUZXh0dXJlVGFyZ2V0LlRFWFRVUkVfQ1VCRV9NQVA7XG5cbiAgICAgICAgcHVibGljIGNyZWF0ZUVtcHR5VGV4dHVyZSgpIHtcbiAgICAgICAgICAgIHZhciBnbCA9IERldmljZU1hbmFnZXIuZ2V0SW5zdGFuY2UoKS5nbCxcbiAgICAgICAgICAgICAgICB0ZXh0dXJlID0gZ2wuY3JlYXRlVGV4dHVyZSgpLFxuICAgICAgICAgICAgICAgIGkgPSBudWxsO1xuXG4gICAgICAgICAgICB0aGlzLnNldEVtcHR5VGV4dHVyZSh0ZXh0dXJlKTtcblxuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IDY7IGkrKykge1xuICAgICAgICAgICAgICAgIGdsLnRleEltYWdlMkQoZ2wuVEVYVFVSRV9DVUJFX01BUF9QT1NJVElWRV9YICsgaSwgMCwgZ2wuUkdCQSwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQsIDAsIGdsLlJHQkEsIGdsLlVOU0lHTkVEX0JZVEUsIG51bGwpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLmdsVGV4dHVyZSA9IHRleHR1cmU7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbiIsIm1vZHVsZSB3ZCB7XG4gICAgZXhwb3J0IGNsYXNzIEN1YmVtYXBTaGFkb3dNYXBUZXh0dXJlIGV4dGVuZHMgQ3ViZW1hcFJlbmRlclRhcmdldFRleHR1cmUgaW1wbGVtZW50cyBJU2hhZG93TWFwVGV4dHVyZXtcbiAgICAgICAgcHVibGljIHN0YXRpYyBjcmVhdGUoKSB7XG4gICAgICAgICAgICB2YXIgb2JqID0gbmV3IHRoaXMoKTtcblxuICAgICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBnZXRTYW1wbGVyTmFtZSh1bml0Om51bWJlcil7XG4gICAgICAgICAgICBMb2cuZXJyb3IoIUp1ZGdlVXRpbHMuaXNOdW1iZXIodGhpcy52YXJpYWJsZURhdGEuc2FtcGxlckRhdGEpLCBMb2cuaW5mby5GVU5DX01VU1RfQkUoXCJzaGFkb3dNYXBUZXh0dXJlLT52YXJpYWJsZURhdGEuc2FtcGxlckRhdGFcIiwgXCJzYW1wbGVySW5kZXhcIikpO1xuXG4gICAgICAgICAgICByZXR1cm4gYHVfY3ViZW1hcFNoYWRvd01hcFNhbXBsZXJbJHt0aGlzLnZhcmlhYmxlRGF0YS5zYW1wbGVyRGF0YX1dYDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qIVxuICAgICAgICBBbmQgYWdhaW4sIGFzIGZvciB0d28tZGltZW5zaW9uYWwgc2hhZG93IG1hcHMsIGl0J3MgcG9zc2libGUgdG8gY29uZmlndXJlIGN1YmUgdGV4dHVyZSBpbiBzdWNoIGEgd2F5IHRoYXQgc2luZ2xlIHNhbXBsaW5nIGZyb20gc2hhZG93IGN1YmUgbWFwIHdpbGwgcmV0dXJuIGEgcmVzdWx0IG9mIGEgY29tcGFyaXNvbiBmb3IgZm91ciB0ZXhlbHMuIFRoYXQgaXMsIHNhbXBsaW5nIGZ1bmN0aW9uIHdpbGwgcmV0dXJuIGZvbGxvd2luZyBzaGFkb3cgZmFjdG9yIHZhbHVlczogMC4wLCAwLjI1LCAwLjUsIDAuNzUsIDEuMC4gU2V0IG1pbmlmeWluZyBhbmQgbWFnbmlmeWluZyBmaWx0ZXJzIG9mIHRoZSB0ZXh0dXJlIHRvIEdMX0xJTkVBUiB0byBlbmFibGUgc3VjaCBzYW1wbGluZy5cblxuICAgICAgICAgLy9cbiAgICAgICAgIC8vcHJvdGVjdGVkIHNldFRleHR1cmVQYXJhbWV0ZXJzKHRleHR1cmVUeXBlLCBpc1NvdXJjZVBvd2VyT2ZUd28pe1xuICAgICAgICAgLy8gICAgc3VwZXIuc2V0VGV4dHVyZVBhcmFtZXRlcnModGV4dHVyZVR5cGUsIGlzU291cmNlUG93ZXJPZlR3byk7XG4gICAgICAgICAvL1xuICAgICAgICAgLy8gICAgU2hhZG93TWFwVGV4dHVyZVV0aWxzLnNldFRleHR1cmVQYXJhbWV0ZXJzKHRleHR1cmVUeXBlKTtcbiAgICAgICAgIC8vfVxuICAgICAgICAqL1xuXG4gICAgfVxufVxuXG4iLCJtb2R1bGUgd2Qge1xuICAgIGV4cG9ydCBjbGFzcyBEeW5hbWljQ3ViZW1hcFRleHR1cmUgZXh0ZW5kcyBDdWJlbWFwUmVuZGVyVGFyZ2V0VGV4dHVyZSB7XG4gICAgICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlKCkge1xuICAgICAgICAgICAgdmFyIG9iaiA9IG5ldyB0aGlzKCk7XG5cbiAgICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9yZW5kZXJMaXN0OndkQ2IuSGFzaDxbc3RyaW5nLCBBcnJheTxHYW1lT2JqZWN0Pl0+ID0gbnVsbDtcbiAgICAgICAgZ2V0IHJlbmRlckxpc3QoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fcmVuZGVyTGlzdDtcbiAgICAgICAgfVxuXG4gICAgICAgIHNldCByZW5kZXJMaXN0KHJlbmRlckxpc3Q6YW55KSB7XG4gICAgICAgICAgICBpZiAoSnVkZ2VVdGlscy5pc0RpcmVjdE9iamVjdChyZW5kZXJMaXN0KSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3JlbmRlckxpc3QgPSB3ZENiLkhhc2guY3JlYXRlPFtzdHJpbmcsIEFycmF5PEdhbWVPYmplY3Q+XT4ocmVuZGVyTGlzdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChyZW5kZXJMaXN0IGluc3RhbmNlb2Ygd2RDYi5IYXNoKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fcmVuZGVyTGlzdCA9IHJlbmRlckxpc3Q7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBMb2cuZXJyb3IodHJ1ZSwgTG9nLmluZm8uRlVOQ19NVVNUX0JFKFwicmVuZGVyTGlzdFwiLCBcImFycmF5IG9yIHdkQ2IuQ29sbGVjdGlvblwiKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgc2l6ZTpudW1iZXIgPSAyNTY7XG4gICAgICAgIHB1YmxpYyBuZWFyOm51bWJlciA9IDAuMTtcbiAgICAgICAgcHVibGljIGZhcjpudW1iZXIgPSAxMDA7XG4gICAgICAgIHB1YmxpYyBtb2RlOkVudk1hcE1vZGUgPSBudWxsO1xuXG4gICAgICAgIHB1YmxpYyBpbml0KCkge1xuICAgICAgICAgICAgc3VwZXIuaW5pdCgpO1xuXG4gICAgICAgICAgICB0aGlzLndpZHRoID0gdGhpcy5zaXplO1xuICAgICAgICAgICAgdGhpcy5oZWlnaHQgPSB0aGlzLnNpemU7XG5cbiAgICAgICAgICAgIERpcmVjdG9yLmdldEluc3RhbmNlKCkuc2NlbmUuYWRkUmVuZGVyVGFyZ2V0UmVuZGVyZXIoRHluYW1pY0N1YmVtYXBSZW5kZXJUYXJnZXRSZW5kZXJlci5jcmVhdGUodGhpcykpO1xuXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBnZXRTYW1wbGVyTmFtZSh1bml0Om51bWJlcil7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRTYW1wbGVyTmFtZUJ5VmFyaWFibGVEYXRhKHVuaXQsIFZhcmlhYmxlVHlwZS5TQU1QTEVSX0NVQkUpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4iLCJtb2R1bGUgd2R7XG4gICAgZGVjbGFyZSB2YXIgTWF0aDphbnk7XG5cbiAgICBleHBvcnQgYWJzdHJhY3QgY2xhc3MgQmFzaWNUZXh0dXJlIGV4dGVuZHMgVGV4dHVyZSBpbXBsZW1lbnRzIElUZXh0dXJlQXNzZXR7XG4gICAgICAgIHByb3RlY3RlZCBwX3NvdXJjZVJlZ2lvbk1ldGhvZDpUZXh0dXJlU291cmNlUmVnaW9uTWV0aG9kID0gbnVsbDtcbiAgICAgICAgZ2V0IHNvdXJjZVJlZ2lvbk1ldGhvZCgpe1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucF9zb3VyY2VSZWdpb25NZXRob2Q7XG4gICAgICAgIH1cbiAgICAgICAgc2V0IHNvdXJjZVJlZ2lvbk1ldGhvZChzb3VyY2VSZWdpb25NZXRob2Q6VGV4dHVyZVNvdXJjZVJlZ2lvbk1ldGhvZCl7XG4gICAgICAgICAgICB0aGlzLnBfc291cmNlUmVnaW9uTWV0aG9kID0gc291cmNlUmVnaW9uTWV0aG9kO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGdlbmVyYXRlTWlwbWFwczpib29sZWFuID0gbnVsbDtcbiAgICAgICAgcHVibGljIGZvcm1hdDpUZXh0dXJlRm9ybWF0ID0gbnVsbDtcbiAgICAgICAgcHVibGljIHNvdXJjZTphbnkgPSBudWxsO1xuICAgICAgICBwdWJsaWMgcmVwZWF0UmVnaW9uOlJlY3RSZWdpb24gPSBudWxsO1xuICAgICAgICBwdWJsaWMgc291cmNlUmVnaW9uOlJlY3RSZWdpb24gPSBudWxsO1xuICAgICAgICBwdWJsaWMgc291cmNlUmVnaW9uTWFwcGluZzpUZXh0dXJlU291cmNlUmVnaW9uTWFwcGluZyA9IG51bGw7XG4gICAgICAgIHB1YmxpYyBmbGlwWTpib29sZWFuID0gbnVsbDtcbiAgICAgICAgcHVibGljIHByZW11bHRpcGx5QWxwaGE6Ym9vbGVhbiA9IG51bGw7XG4gICAgICAgIHB1YmxpYyB1bnBhY2tBbGlnbm1lbnQ6bnVtYmVyID0gbnVsbDtcbiAgICAgICAgcHVibGljIHR5cGU6VGV4dHVyZVR5cGUgPSBudWxsO1xuICAgICAgICBwdWJsaWMgbWlwbWFwczp3ZENiLkNvbGxlY3Rpb248YW55PiA9IG51bGw7XG4gICAgICAgIHB1YmxpYyBhbmlzb3Ryb3B5Om51bWJlciA9IG51bGw7XG4gICAgICAgIHB1YmxpYyBuZWVkVXBkYXRlOmJvb2xlYW4gPSBudWxsO1xuXG4gICAgICAgIHB1YmxpYyBpbml0V2hlbkNyZWF0ZSguLi5hcmdzKXtcbiAgICAgICAgICAgIHZhciBnbCA9IERldmljZU1hbmFnZXIuZ2V0SW5zdGFuY2UoKS5nbDtcbiAgICAgICAgICAgIC8vdGV4dHVyZS5hZGRFdmVudExpc3RlbmVyKCBcImRpc3Bvc2VcIiwgb25UZXh0dXJlRGlzcG9zZSApO1xuXG4gICAgICAgICAgICB0aGlzLmdsVGV4dHVyZSA9IGdsLmNyZWF0ZVRleHR1cmUoKTtcblxuICAgICAgICAgICAgLy9fdGhpcy5pbmZvLm1lbW9yeS50ZXh0dXJlcyArKztcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBpbml0KCl7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgdXBkYXRlKGluZGV4Om51bWJlcil7XG4gICAgICAgICAgICB2YXIgZ2wgPSBEZXZpY2VNYW5hZ2VyLmdldEluc3RhbmNlKCkuZ2wsXG4gICAgICAgICAgICAgICAgaXNTb3VyY2VQb3dlck9mVHdvID0gdGhpcy5pc1NvdXJjZVBvd2VyT2ZUd28oKTtcblxuICAgICAgICAgICAgdGhpcy5iaW5kVG9Vbml0KGluZGV4KTtcblxuICAgICAgICAgICAgZ2wucGl4ZWxTdG9yZWkoZ2wuVU5QQUNLX0ZMSVBfWV9XRUJHTCwgdGhpcy5mbGlwWSk7XG5cblxuICAgICAgICAgICAgLy90b2RvIG5vdCBzZXQgVU5QQUNLX1BSRU1VTFRJUExZX0FMUEhBX1dFQkdMLFVOUEFDS19BTElHTk1FTlQgd2hlbiBjdWJlbWFwP1xuICAgICAgICAgICAgZ2wucGl4ZWxTdG9yZWkoZ2wuVU5QQUNLX1BSRU1VTFRJUExZX0FMUEhBX1dFQkdMLCB0aGlzLnByZW11bHRpcGx5QWxwaGEpO1xuICAgICAgICAgICAgZ2wucGl4ZWxTdG9yZWkoZ2wuVU5QQUNLX0FMSUdOTUVOVCwgdGhpcy51bnBhY2tBbGlnbm1lbnQpO1xuXG4gICAgICAgICAgICBpZih0aGlzLm5lZWRDbGFtcE1heFNpemUoKSl7XG4gICAgICAgICAgICAgICAgdGhpcy5jbGFtcFRvTWF4U2l6ZSgpO1xuXG4gICAgICAgICAgICAgICAgaXNTb3VyY2VQb3dlck9mVHdvID0gdGhpcy5pc1NvdXJjZVBvd2VyT2ZUd28oKTtcblxuICAgICAgICAgICAgICAgIGlmKCFpc1NvdXJjZVBvd2VyT2ZUd28pe1xuICAgICAgICAgICAgICAgICAgICBMb2cud2FybihcInRleHR1cmUgc2l6ZSBpcyBub3QgcG93ZXIgb2YgdHdvIGFmdGVyIGNsYW1wVG9NYXhTaXplKClcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLnNldFRleHR1cmVQYXJhbWV0ZXJzKCBnbFt0aGlzLnRhcmdldF0sIGlzU291cmNlUG93ZXJPZlR3byk7XG5cbiAgICAgICAgICAgIHRoaXMuYWxsb2NhdGVTb3VyY2VUb1RleHR1cmUoaXNTb3VyY2VQb3dlck9mVHdvKTtcblxuICAgICAgICAgICAgaWYgKHRoaXMuZ2VuZXJhdGVNaXBtYXBzICYmIGlzU291cmNlUG93ZXJPZlR3bykge1xuICAgICAgICAgICAgICAgIGdsLmdlbmVyYXRlTWlwbWFwKGdsW3RoaXMudGFyZ2V0XSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMubmVlZFVwZGF0ZSA9IGZhbHNlO1xuXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBnZXRTYW1wbGVyTmFtZSh1bml0Om51bWJlcil7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRTYW1wbGVyTmFtZUJ5VmFyaWFibGVEYXRhKHVuaXQsIFZhcmlhYmxlVHlwZS5TQU1QTEVSXzJEKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByb3RlY3RlZCBzZW5kT3RoZXJEYXRhKHByb2dyYW06UHJvZ3JhbSwgdW5pdDpudW1iZXIpe1xuICAgICAgICAgICAgdmFyIHNvdXJjZVJlZ2lvbiA9IG51bGw7XG5cbiAgICAgICAgICAgIGlmKHRoaXMuc291cmNlUmVnaW9uICYmIHRoaXMuc291cmNlUmVnaW9uTWV0aG9kID09PSBUZXh0dXJlU291cmNlUmVnaW9uTWV0aG9kLkNIQU5HRV9URVhDT09SRFNfSU5fR0xTTCl7XG4gICAgICAgICAgICAgICAgc291cmNlUmVnaW9uID0gdGhpcy5fY29udmVydFNvdXJjZVJlZ2lvblRvVVYoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICAgICAgc291cmNlUmVnaW9uID0gUmVjdFJlZ2lvbi5jcmVhdGUoMCwgMCwgMSwgMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwcm9ncmFtLnNlbmRVbmlmb3JtRGF0YShcInVfc291cmNlUmVnaW9uXCIsIFZhcmlhYmxlVHlwZS5GTE9BVF80LCBzb3VyY2VSZWdpb24pO1xuXG4gICAgICAgICAgICBwcm9ncmFtLnNlbmRVbmlmb3JtRGF0YShcInVfcmVwZWF0UmVnaW9uXCIsIFZhcmlhYmxlVHlwZS5GTE9BVF80LCB0aGlzLnJlcGVhdFJlZ2lvbik7XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJvdGVjdGVkIGFic3RyYWN0IGFsbG9jYXRlU291cmNlVG9UZXh0dXJlKGlzU291cmNlUG93ZXJPZlR3bzpib29sZWFuKTtcblxuICAgICAgICBAdmlydHVhbFxuICAgICAgICBwcm90ZWN0ZWQgbmVlZENsYW1wTWF4U2l6ZSgpe1xuICAgICAgICAgICAgaWYoIXRoaXMuc291cmNlKXtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBCYXNpY1RleHR1cmVVdGlscy5uZWVkQ2xhbXBNYXhTaXplKEdQVURldGVjdG9yLmdldEluc3RhbmNlKCkubWF4VGV4dHVyZVNpemUsIHRoaXMuc291cmNlLndpZHRoLCB0aGlzLnNvdXJjZS5oZWlnaHQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJvdGVjdGVkIGNsYW1wVG9NYXhTaXplKCl7XG4gICAgICAgICAgICB0aGlzLnNvdXJjZSA9IEJhc2ljVGV4dHVyZVV0aWxzLmNsYW1wVG9NYXhTaXplKHRoaXMuc291cmNlLCBHUFVEZXRlY3Rvci5nZXRJbnN0YW5jZSgpLm1heFRleHR1cmVTaXplKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByb3RlY3RlZCBzZXRUZXh0dXJlUGFyYW1ldGVycyh0ZXh0dXJlVHlwZSwgaXNTb3VyY2VQb3dlck9mVHdvKXtcbiAgICAgICAgICAgIHN1cGVyLnNldFRleHR1cmVQYXJhbWV0ZXJzKHRleHR1cmVUeXBlLCBpc1NvdXJjZVBvd2VyT2ZUd28pO1xuXG4gICAgICAgICAgICB0aGlzLl9zZXRBbmlzb3Ryb3B5KHRleHR1cmVUeXBlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByb3RlY3RlZCBpc1NvdXJjZVBvd2VyT2ZUd28oKXtcbiAgICAgICAgICAgIHJldHVybiBCYXNpY1RleHR1cmVVdGlscy5pc1NvdXJjZVBvd2VyT2ZUd28odGhpcy5zb3VyY2VSZWdpb24sIHRoaXMuc291cmNlUmVnaW9uTWV0aG9kLCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCk7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9zZXRBbmlzb3Ryb3B5KHRleHR1cmVUeXBlKXtcbiAgICAgICAgICAgIHZhciBncHUgPSBHUFVEZXRlY3Rvci5nZXRJbnN0YW5jZSgpLFxuICAgICAgICAgICAgICAgIGdsID0gRGV2aWNlTWFuYWdlci5nZXRJbnN0YW5jZSgpLmdsO1xuXG4gICAgICAgICAgICBpZighZ3B1LmV4dGVuc2lvblRleHR1cmVGaWx0ZXJBbmlzb3Ryb3BpYyl7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodGhpcy5hbmlzb3Ryb3B5ID4gMSkge1xuICAgICAgICAgICAgICAgIGdsLnRleFBhcmFtZXRlcmYodGV4dHVyZVR5cGUsIGdwdS5leHRlbnNpb25UZXh0dXJlRmlsdGVyQW5pc290cm9waWMuVEVYVFVSRV9NQVhfQU5JU09UUk9QWV9FWFQsIE1hdGgubWluKHRoaXMuYW5pc290cm9weSwgZ3B1Lm1heEFuaXNvdHJvcHkpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX2NvbnZlcnRTb3VyY2VSZWdpb25DYW52YXNNYXBUb1VWKHNvdXJjZVJlZ2lvbjpSZWN0UmVnaW9uKXtcbiAgICAgICAgICAgIHZhciB3aWR0aCA9IHRoaXMud2lkdGgsXG4gICAgICAgICAgICAgICAgaGVpZ2h0ID0gdGhpcy5oZWlnaHQsXG4gICAgICAgICAgICAgICAgcmVnaW9uOlJlY3RSZWdpb24gPSBudWxsO1xuXG4gICAgICAgICAgICByZWdpb24gPSBSZWN0UmVnaW9uLmNyZWF0ZShcbiAgICAgICAgICAgICAgICBzb3VyY2VSZWdpb24ueCAvIHdpZHRoLFxuICAgICAgICAgICAgICAgIHNvdXJjZVJlZ2lvbi55IC8gaGVpZ2h0LFxuICAgICAgICAgICAgICAgIHNvdXJjZVJlZ2lvbi53aWR0aCAvIHdpZHRoLFxuICAgICAgICAgICAgICAgIHNvdXJjZVJlZ2lvbi5oZWlnaHQgLyBoZWlnaHRcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIHJlZ2lvbi55ID0gMSAtIHJlZ2lvbi55IC0gcmVnaW9uLmhlaWdodDtcblxuICAgICAgICAgICAgcmV0dXJuIHJlZ2lvbjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vdG9kbyBvcHRpbWl6ZTogYWRkIGRpcnR5IGNhY2hlXG4gICAgICAgIHByaXZhdGUgX2NvbnZlcnRTb3VyY2VSZWdpb25Ub1VWKCl7XG4gICAgICAgICAgICBpZih0aGlzLnNvdXJjZVJlZ2lvbk1hcHBpbmcgPT09IFRleHR1cmVTb3VyY2VSZWdpb25NYXBwaW5nLkNBTlZBUyl7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NvbnZlcnRTb3VyY2VSZWdpb25DYW52YXNNYXBUb1VWKHRoaXMuc291cmNlUmVnaW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYodGhpcy5zb3VyY2VSZWdpb25NYXBwaW5nID09PSBUZXh0dXJlU291cmNlUmVnaW9uTWFwcGluZy5VVil7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc291cmNlUmVnaW9uO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuXG4iLCJtb2R1bGUgd2R7XG4gICAgZXhwb3J0IGFic3RyYWN0IGNsYXNzIFR3b0RUZXh0dXJlIGV4dGVuZHMgQmFzaWNUZXh0dXJle1xuICAgICAgICBwdWJsaWMgaW5pdFdoZW5DcmVhdGUoYXNzZXQ6SW1hZ2VUZXh0dXJlQXNzZXR8Q29tcHJlc3NlZFRleHR1cmVBc3NldCl7XG4gICAgICAgICAgICBzdXBlci5pbml0V2hlbkNyZWF0ZSgpO1xuXG4gICAgICAgICAgICBhc3NldC5jb3B5VG8odGhpcyk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbiIsIm1vZHVsZSB3ZHtcbiAgICBleHBvcnQgYWJzdHJhY3QgY2xhc3MgQ29tbW9uVGV4dHVyZSBleHRlbmRzIFR3b0RUZXh0dXJle1xuICAgICAgICBwcm90ZWN0ZWQgYWxsb2NhdGVTb3VyY2VUb1RleHR1cmUoaXNTb3VyY2VQb3dlck9mVHdvOmJvb2xlYW4pIHtcbiAgICAgICAgICAgIHZhciBtaXBtYXBDbWQ6RHJhd01pcG1hcFR3b0RUZXh0dXJlQ29tbWFuZCA9IG51bGwsXG4gICAgICAgICAgICAgICAgbm9NaXBtYXBDbWQ6RHJhd05vTWlwbWFwVHdvRFRleHR1cmVDb21tYW5kID0gbnVsbCxcbiAgICAgICAgICAgICAgICBnbCA9IERldmljZU1hbmFnZXIuZ2V0SW5zdGFuY2UoKS5nbDtcblxuICAgICAgICAgICAgaWYoaXNTb3VyY2VQb3dlck9mVHdvICYmIHRoaXMubWlwbWFwcy5nZXRDb3VudCgpID4gMCkge1xuICAgICAgICAgICAgICAgIG1pcG1hcENtZCA9IERyYXdNaXBtYXBUd29EVGV4dHVyZUNvbW1hbmQuY3JlYXRlKCk7XG4gICAgICAgICAgICAgICAgbWlwbWFwQ21kLm1pcG1hcHMgPSB0aGlzLm1pcG1hcHM7XG4gICAgICAgICAgICAgICAgbWlwbWFwQ21kLmZvcm1hdCA9IHRoaXMuZm9ybWF0O1xuICAgICAgICAgICAgICAgIG1pcG1hcENtZC50eXBlID0gdGhpcy50eXBlO1xuICAgICAgICAgICAgICAgIG1pcG1hcENtZC5zb3VyY2VSZWdpb24gPSB0aGlzLnNvdXJjZVJlZ2lvbjtcbiAgICAgICAgICAgICAgICBtaXBtYXBDbWQuc291cmNlUmVnaW9uTWV0aG9kID0gdGhpcy5zb3VyY2VSZWdpb25NZXRob2Q7XG4gICAgICAgICAgICAgICAgbWlwbWFwQ21kLmdsVGFyZ2V0ID0gZ2wuVEVYVFVSRV8yRDtcblxuICAgICAgICAgICAgICAgIG1pcG1hcENtZC5leGVjdXRlKCk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLmdlbmVyYXRlTWlwbWFwcyA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbm9NaXBtYXBDbWQgPSBEcmF3Tm9NaXBtYXBUd29EVGV4dHVyZUNvbW1hbmQuY3JlYXRlKCk7XG4gICAgICAgICAgICAgICAgbm9NaXBtYXBDbWQuc291cmNlID0gdGhpcy5zb3VyY2U7XG4gICAgICAgICAgICAgICAgbm9NaXBtYXBDbWQuZm9ybWF0ID0gdGhpcy5mb3JtYXQ7XG4gICAgICAgICAgICAgICAgbm9NaXBtYXBDbWQudHlwZSA9IHRoaXMudHlwZTtcbiAgICAgICAgICAgICAgICBub01pcG1hcENtZC5zb3VyY2VSZWdpb24gPSB0aGlzLnNvdXJjZVJlZ2lvbjtcbiAgICAgICAgICAgICAgICBub01pcG1hcENtZC5zb3VyY2VSZWdpb25NZXRob2QgPSB0aGlzLnNvdXJjZVJlZ2lvbk1ldGhvZDtcbiAgICAgICAgICAgICAgICBub01pcG1hcENtZC5nbFRhcmdldCA9IGdsLlRFWFRVUkVfMkQ7XG5cbiAgICAgICAgICAgICAgICBub01pcG1hcENtZC5leGVjdXRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5cbiIsIm1vZHVsZSB3ZHtcbiAgICBleHBvcnQgY2xhc3MgSW1hZ2VUZXh0dXJlIGV4dGVuZHMgQ29tbW9uVGV4dHVyZXtcbiAgICAgICAgcHVibGljIHN0YXRpYyBjcmVhdGUoYXNzZXQ6SW1hZ2VUZXh0dXJlQXNzZXQpO1xuICAgICAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZShjYW52YXM6SFRNTENhbnZhc0VsZW1lbnQpO1xuXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlKGFyZykge1xuICAgICAgICAgICAgdmFyIG9iaiA9IG5ldyB0aGlzKCk7XG5cbiAgICAgICAgICAgIG9iai5pbml0V2hlbkNyZWF0ZShhcmcpO1xuXG4gICAgICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgICB9XG5cblxuICAgICAgICBwdWJsaWMgaW5pdFdoZW5DcmVhdGUoYXNzZXQ6SW1hZ2VUZXh0dXJlQXNzZXQpO1xuICAgICAgICBwdWJsaWMgaW5pdFdoZW5DcmVhdGUoY2FudmFzOkhUTUxDYW52YXNFbGVtZW50KTtcblxuICAgICAgICBwdWJsaWMgaW5pdFdoZW5DcmVhdGUoYXJnKXtcbiAgICAgICAgICAgIGlmKGFyZ3VtZW50c1swXSBpbnN0YW5jZW9mIEltYWdlVGV4dHVyZUFzc2V0KXtcbiAgICAgICAgICAgICAgICBsZXQgYXNzZXQ6SW1hZ2VUZXh0dXJlQXNzZXQgPSBhcmd1bWVudHNbMF07XG5cbiAgICAgICAgICAgICAgICBzdXBlci5pbml0V2hlbkNyZWF0ZShhc3NldCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgIGxldCBjYW52YXM6SFRNTENhbnZhc0VsZW1lbnQgPSBhcmd1bWVudHNbMF07XG5cbiAgICAgICAgICAgICAgICBzdXBlci5pbml0V2hlbkNyZWF0ZShJbWFnZVRleHR1cmVBc3NldC5jcmVhdGUoY2FudmFzKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJtb2R1bGUgd2R7XG4gICAgZXhwb3J0IGNsYXNzIFZpZGVvVGV4dHVyZSBleHRlbmRzIENvbW1vblRleHR1cmV7XG4gICAgICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlKGFzc2V0OlZpZGVvVGV4dHVyZUFzc2V0KSB7XG4gICAgICAgICAgICB2YXIgb2JqID0gbmV3IHRoaXMoKTtcblxuICAgICAgICAgICAgb2JqLmluaXRXaGVuQ3JlYXRlKGFzc2V0KTtcblxuICAgICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX3ZpZGVvOlZpZGVvID0gbnVsbDtcbiAgICAgICAgcHJpdmF0ZSBfc3RhcnRMb29wSGFuZGxlcjooKSA9PiB2b2lkID0gbnVsbDtcblxuICAgICAgICBwdWJsaWMgaW5pdFdoZW5DcmVhdGUoYXNzZXQ6VmlkZW9UZXh0dXJlQXNzZXQpe1xuICAgICAgICAgICAgc3VwZXIuaW5pdFdoZW5DcmVhdGUoYXNzZXQpO1xuXG4gICAgICAgICAgICB0aGlzLl92aWRlbyA9IGFzc2V0LnZpZGVvO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGluaXQoKXtcbiAgICAgICAgICAgIHN1cGVyLmluaXQoKTtcblxuICAgICAgICAgICAgdGhpcy5fc3RhcnRMb29wSGFuZGxlciA9IHdkQ2IuRnVuY3Rpb25VdGlscy5iaW5kKHRoaXMsICgpID0+IHtcbiAgICAgICAgICAgICAgICBpZih0aGlzLl92aWRlby5pc1N0b3Ape1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm5lZWRVcGRhdGUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5uZWVkVXBkYXRlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgRXZlbnRNYW5hZ2VyLm9uKDxhbnk+RW5naW5lRXZlbnQuU1RBUlRMT09QLCB0aGlzLl9zdGFydExvb3BIYW5kbGVyKTtcblxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgZGlzcG9zZSgpe1xuICAgICAgICAgICAgRXZlbnRNYW5hZ2VyLm9mZig8YW55PkVuZ2luZUV2ZW50LlNUQVJUTE9PUCwgdGhpcy5fc3RhcnRMb29wSGFuZGxlcik7XG4gICAgICAgIH1cblxuICAgICAgICBwcm90ZWN0ZWQgbmVlZENsYW1wTWF4U2l6ZSgpe1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4iLCJtb2R1bGUgd2R7XG4gICAgZXhwb3J0IGNsYXNzIEN1YmVtYXBUZXh0dXJlIGV4dGVuZHMgQmFzaWNUZXh0dXJle1xuICAgICAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZShhc3NldHM6QXJyYXk8Q3ViZW1hcERhdGE+KXtcbiAgICAgICAgICAgIHZhciBvYmogPSBuZXcgdGhpcyhhc3NldHMpO1xuXG4gICAgICAgICAgICBvYmouaW5pdFdoZW5DcmVhdGUoYXNzZXRzKTtcblxuICAgICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0cnVjdG9yKGFzc2V0czpBcnJheTxDdWJlbWFwRGF0YT4pe1xuICAgICAgICAgICAgc3VwZXIoKTtcblxuICAgICAgICAgICAgdGhpcy5hc3NldHMgPSBhc3NldHM7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgYXNzZXRzOkFycmF5PEN1YmVtYXBEYXRhPiA9IG51bGw7XG4gICAgICAgIHB1YmxpYyB0ZXh0dXJlczp3ZENiLkNvbGxlY3Rpb248Q3ViZW1hcEZhY2VUZXh0dXJlPiA9IHdkQ2IuQ29sbGVjdGlvbi5jcmVhdGU8Q3ViZW1hcEZhY2VUZXh0dXJlPigpO1xuICAgICAgICBwdWJsaWMgbW9kZTpFbnZNYXBNb2RlID0gbnVsbDtcblxuICAgICAgICBwcm90ZWN0ZWQgdGFyZ2V0OlRleHR1cmVUYXJnZXQgPSBUZXh0dXJlVGFyZ2V0LlRFWFRVUkVfQ1VCRV9NQVA7XG5cbiAgICAgICAgcHJpdmF0ZSBfYXJlQWxsQ29tcHJlc3NlZEFzc2V0OmJvb2xlYW4gPSBmYWxzZTtcblxuICAgICAgICBAcmVxdWlyZShmdW5jdGlvbihhc3NldHM6QXJyYXk8Q3ViZW1hcERhdGE+KXtcbiAgICAgICAgICAgIGFzc2VydChhc3NldHMubGVuZ3RoID09PSA2LCBMb2cuaW5mby5GVU5DX01VU1QoXCJjdWJlbWFwXCIsIFwiaGFzIDYgYXNzZXRzXCIpKTtcbiAgICAgICAgICAgIGFzc2VydCh0aGlzLl9hcmVBc3NldHNBbGxJbWFnZUFzc2V0cyhhc3NldHMpIHx8IHRoaXMuX2FyZUFzc2V0c0FsbENvbXByZXNzZWRBc3NldChhc3NldHMpLCBMb2cuaW5mby5GVU5DX01VU1RfQkUoXCJjdWJlbWFwIHNpeCBmYWNlJ3MgYXNzZXRzXCIsIFwiYWxsIEltYWdlVGV4dHVyZUFzc2V0IG9yIGFsbCBDb21wcmVzc2VkVGV4dHVyZUFzc2V0XCIpKTtcblxuICAgICAgICAgICAgaWYodGhpcy5fYXJlQXNzZXRzQWxsQ29tcHJlc3NlZEFzc2V0KGFzc2V0cykpe1xuICAgICAgICAgICAgICAgIGFzc2VydCghdGhpcy5faGFzU291cmNlUmVnaW9uKGFzc2V0cyksIExvZy5pbmZvLkZVTkNfU0hPVUxEX05PVChcImNvbXByZXNzZWQgZmFjZVwiLCBcImNvbnRhaW4gc291cmNlUmVnaW9uIGRhdGFcIikpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBhc3NlcnQodGhpcy5fYXJlVGV4dHVyZVNpek9mQWxsRmFjZXNlRXF1YWwoYXNzZXRzKSwgTG9nLmluZm8uRlVOQ19NVVNUX0JFKFwiYWxsIGN1YmVtYXAgZmFjZXMnIHRleHR1cmUgc2l6ZVwiLCBcImVxdWFsXCIpKTtcbiAgICAgICAgfSlcbiAgICAgICAgcHVibGljIGluaXRXaGVuQ3JlYXRlKGFzc2V0czpBcnJheTxDdWJlbWFwRGF0YT4pe1xuICAgICAgICAgICAgc3VwZXIuaW5pdFdoZW5DcmVhdGUoKTtcblxuICAgICAgICAgICAgaWYodGhpcy5fYXJlQXNzZXRzQWxsQ29tcHJlc3NlZEFzc2V0KGFzc2V0cykpe1xuICAgICAgICAgICAgICAgIHRoaXMuX2FyZUFsbENvbXByZXNzZWRBc3NldCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgIHRoaXMuX2FyZUFsbENvbXByZXNzZWRBc3NldCA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLl9jcmVhdGVUZXh0dXJlcyhhc3NldHMpO1xuXG4gICAgICAgICAgICB0aGlzLl9nZXRSZXByZXNlbnRBc3NldChhc3NldHMpLmNvcHlUb0N1YmVtYXBUZXh0dXJlKHRoaXMpO1xuXG4gICAgICAgICAgICBpZih0aGlzLl9hcmVBbGxDb21wcmVzc2VkQXNzZXQpe1xuICAgICAgICAgICAgICAgIHRoaXMuZ2VuZXJhdGVNaXBtYXBzID0gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICBpZih0aGlzLl9oYXNOb01pcG1hcENvbXByZXNzZWRBc3NldCgpKXtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5taW5GaWx0ZXIgPSB0aGlzLmZpbHRlckZhbGxiYWNrKHRoaXMubWluRmlsdGVyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgIHRoaXMuZ2VuZXJhdGVNaXBtYXBzID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5mbGlwWSA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGdldFNhbXBsZXJOYW1lKHVuaXQ6bnVtYmVyKXtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldFNhbXBsZXJOYW1lQnlWYXJpYWJsZURhdGEodW5pdCwgVmFyaWFibGVUeXBlLlNBTVBMRVJfQ1VCRSk7XG4gICAgICAgIH1cblxuICAgICAgICBwcm90ZWN0ZWQgc2VuZE90aGVyRGF0YShwcm9ncmFtOlByb2dyYW0sIHVuaXQ6bnVtYmVyKXtcbiAgICAgICAgICAgIHByb2dyYW0uc2VuZFVuaWZvcm1EYXRhKFwidV9yZXBlYXRSZWdpb25cIiwgVmFyaWFibGVUeXBlLkZMT0FUXzQsIHRoaXMucmVwZWF0UmVnaW9uKTtcblxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICBwcm90ZWN0ZWQgYWxsb2NhdGVTb3VyY2VUb1RleHR1cmUoaXNTb3VyY2VQb3dlck9mVHdvOmJvb2xlYW4pIHtcbiAgICAgICAgICAgIGlmKHRoaXMuX2FyZUFsbENvbXByZXNzZWRBc3NldCl7XG4gICAgICAgICAgICAgICAgdGhpcy50ZXh0dXJlcy5mb3JFYWNoKCh0ZXh0dXJlOkN1YmVtYXBGYWNlQ29tcHJlc3NlZFRleHR1cmUsIGk6bnVtYmVyKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRleHR1cmUuZHJhdyhpKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICAgICAgdGhpcy50ZXh0dXJlcy5mb3JFYWNoKCh0ZXh0dXJlOkN1YmVtYXBGYWNlSW1hZ2VUZXh0dXJlLCBpOm51bWJlcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0ZXh0dXJlLmRyYXcoaSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBwcm90ZWN0ZWQgbmVlZENsYW1wTWF4U2l6ZSgpe1xuICAgICAgICAgICAgdmFyIG5lZWRBbGxDbGFtcE1heFNpemUgPSBmYWxzZTtcblxuICAgICAgICAgICAgdGhpcy50ZXh0dXJlcy5mb3JFYWNoKCh0ZXh0dXJlOkN1YmVtYXBGYWNlVGV4dHVyZSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmKHRleHR1cmUubmVlZENsYW1wTWF4U2l6ZSgpKXtcbiAgICAgICAgICAgICAgICAgICAgbmVlZEFsbENsYW1wTWF4U2l6ZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB3ZENiLiRCUkVBSztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmV0dXJuIG5lZWRBbGxDbGFtcE1heFNpemU7XG4gICAgICAgIH1cblxuICAgICAgICBwcm90ZWN0ZWQgaXNTb3VyY2VQb3dlck9mVHdvKCl7XG4gICAgICAgICAgICB2YXIgYXJlQWxsU291cmNlUG93ZXJPZlR3byA9IHRydWU7XG5cbiAgICAgICAgICAgIHRoaXMudGV4dHVyZXMuZm9yRWFjaCgodGV4dHVyZTpDdWJlbWFwRmFjZVRleHR1cmUpID0+IHtcbiAgICAgICAgICAgICAgICBpZighdGV4dHVyZS5pc1NvdXJjZVBvd2VyT2ZUd28oKSl7XG4gICAgICAgICAgICAgICAgICAgIGFyZUFsbFNvdXJjZVBvd2VyT2ZUd28gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHdkQ2IuJEJSRUFLO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICByZXR1cm4gYXJlQWxsU291cmNlUG93ZXJPZlR3bztcbiAgICAgICAgfVxuXG4gICAgICAgIHByb3RlY3RlZCBjbGFtcFRvTWF4U2l6ZSgpe1xuICAgICAgICAgICAgdGhpcy50ZXh0dXJlcy5mb3JFYWNoKCh0ZXh0dXJlOmFueSkgPT4ge1xuICAgICAgICAgICAgICAgIHRleHR1cmUuY2xhbXBUb01heFNpemUoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfaGFzTm9NaXBtYXBDb21wcmVzc2VkQXNzZXQoKXtcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgICAgICAgICAgaWYoIXRoaXMuX2FyZUFsbENvbXByZXNzZWRBc3NldCl7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdGhpcy50ZXh0dXJlcy5maWx0ZXIoKHRleHR1cmU6Q3ViZW1hcEZhY2VDb21wcmVzc2VkVGV4dHVyZSkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiAhc2VsZi5faXNNaXBtYXBGaWx0ZXIodGV4dHVyZS5taW5GaWx0ZXIpO1xuICAgICAgICAgICAgfSkuZ2V0Q291bnQoKSA+IDA7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9pc01pcG1hcEZpbHRlcihmaWx0ZXI6VGV4dHVyZUZpbHRlck1vZGUpe1xuICAgICAgICAgICAgcmV0dXJuIGZpbHRlciA9PT0gVGV4dHVyZUZpbHRlck1vZGUuTElORUFSX01JUE1BUF9MSU5FQVIgfHwgZmlsdGVyID09PSBUZXh0dXJlRmlsdGVyTW9kZS5MSU5FQVJfTUlQTUFQX05FQVJFU1QgfHwgZmlsdGVyID09PSBUZXh0dXJlRmlsdGVyTW9kZS5ORUFSRVNUX01JUE1BUF9MSU5FQVIgfHxmaWx0ZXIgPT09IFRleHR1cmVGaWx0ZXJNb2RlLk5FQVJFU1RfTUlQTUFQX01FQVJFU1Q7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9nZXRSZXByZXNlbnRBc3NldChhc3NldHM6QXJyYXk8Q3ViZW1hcERhdGE+KXtcbiAgICAgICAgICAgIHJldHVybiBhc3NldHNbMF0uYXNzZXQ7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlICBfYXJlQXNzZXRzQWxsSW1hZ2VBc3NldHMoYXNzZXRzOkFycmF5PEN1YmVtYXBEYXRhPil7XG4gICAgICAgICAgICB2YXIgYXJlSW1hZ2VBc3NldHMgPSBbXTtcblxuICAgICAgICAgICAgZm9yKGxldCBkYXRhIG9mIGFzc2V0cykge1xuICAgICAgICAgICAgICAgIGlmIChkYXRhLmFzc2V0IGluc3RhbmNlb2YgSW1hZ2VUZXh0dXJlQXNzZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgYXJlSW1hZ2VBc3NldHMucHVzaChkYXRhKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBhcmVJbWFnZUFzc2V0cy5sZW5ndGggPT09IDY7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlICBfYXJlQXNzZXRzQWxsQ29tcHJlc3NlZEFzc2V0KGFzc2V0czpBcnJheTxDdWJlbWFwRGF0YT4pe1xuICAgICAgICAgICAgdmFyIGFyZUNvbXByZXNzZWRBc3NldHMgPSBbXTtcblxuICAgICAgICAgICAgZm9yKGxldCBkYXRhIG9mIGFzc2V0cykge1xuICAgICAgICAgICAgICAgIGlmIChkYXRhLmFzc2V0IGluc3RhbmNlb2YgQ29tcHJlc3NlZFRleHR1cmVBc3NldCkge1xuICAgICAgICAgICAgICAgICAgICBhcmVDb21wcmVzc2VkQXNzZXRzLnB1c2goZGF0YSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gYXJlQ29tcHJlc3NlZEFzc2V0cy5sZW5ndGggPT09IDY7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9jcmVhdGVUZXh0dXJlcyhhc3NldHM6QXJyYXk8Q3ViZW1hcERhdGE+KXtcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgICAgICAgICAgZm9yKGxldCBkYXRhIG9mIGFzc2V0cykge1xuICAgICAgICAgICAgICAgIGxldCBmYWNlID0gZGF0YS5hc3NldC50b0N1YmVtYXBGYWNlVGV4dHVyZSgpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGRhdGEuc291cmNlUmVnaW9uICYmIGZhY2UgaW5zdGFuY2VvZiBDdWJlbWFwRmFjZUltYWdlVGV4dHVyZSkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgdHdvREZhY2U6Q3ViZW1hcEZhY2VJbWFnZVRleHR1cmUgPSBmYWNlO1xuICAgICAgICAgICAgICAgICAgICB0d29ERmFjZS5zb3VyY2VSZWdpb24gPSBkYXRhLnNvdXJjZVJlZ2lvbjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGRhdGEudHlwZSkge1xuICAgICAgICAgICAgICAgICAgICBmYWNlLnR5cGUgPSBkYXRhLnR5cGU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgc2VsZi50ZXh0dXJlcy5hZGRDaGlsZChmYWNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX2FyZVRleHR1cmVTaXpPZkFsbEZhY2VzZUVxdWFsKGFzc2V0czpBcnJheTxDdWJlbWFwRGF0YT4pe1xuICAgICAgICAgICAgdmFyIHRleHR1cmVXaWR0aFNpemVBcnIgPSBbXSxcbiAgICAgICAgICAgICAgICB0ZXh0dXJlSGVpZ2h0U2l6ZUFyciA9IFtdO1xuXG4gICAgICAgICAgICBmb3IobGV0IGRhdGEgb2YgYXNzZXRzKSB7XG4gICAgICAgICAgICAgICAgaWYgKGRhdGEuc291cmNlUmVnaW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIHRleHR1cmVXaWR0aFNpemVBcnIucHVzaChkYXRhLnNvdXJjZVJlZ2lvbi53aWR0aCk7XG4gICAgICAgICAgICAgICAgICAgIHRleHR1cmVIZWlnaHRTaXplQXJyLnB1c2goZGF0YS5zb3VyY2VSZWdpb24uaGVpZ2h0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgdGV4dHVyZVdpZHRoU2l6ZUFyci5wdXNoKGRhdGEuYXNzZXQud2lkdGgpO1xuICAgICAgICAgICAgICAgICAgICB0ZXh0dXJlSGVpZ2h0U2l6ZUFyci5wdXNoKGRhdGEuYXNzZXQuaGVpZ2h0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9hcmVBbGxFbGVtZW50c0VxdWFsKHRleHR1cmVXaWR0aFNpemVBcnIpICYmIHRoaXMuX2FyZUFsbEVsZW1lbnRzRXF1YWwodGV4dHVyZUhlaWdodFNpemVBcnIpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfaGFzU291cmNlUmVnaW9uKGFzc2V0czpBcnJheTxDdWJlbWFwRGF0YT4pe1xuICAgICAgICAgICAgZm9yKGxldCBkYXRhIG9mIGFzc2V0cyl7XG4gICAgICAgICAgICAgICAgaWYoZGF0YS5zb3VyY2VSZWdpb24pe1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX2FyZUFsbEVsZW1lbnRzRXF1YWwoYXJyOkFycmF5PGFueT4pe1xuICAgICAgICAgICAgdmFyIGxhc3RFbGUgPSBhcnJbMF07XG5cbiAgICAgICAgICAgIGZvcihsZXQgZWxlIG9mIGFycil7XG4gICAgICAgICAgICAgICAgaWYoZWxlICE9PSBsYXN0RWxlKXtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBleHBvcnQgdHlwZSBDdWJlbWFwRGF0YSA9IHtcbiAgICAgICAgYXNzZXQ6VGV4dHVyZUFzc2V0O1xuICAgICAgICBzb3VyY2VSZWdpb24/OlJlY3RSZWdpb247XG4gICAgICAgIHR5cGU/OlRleHR1cmVUeXBlO1xuICAgIH1cbn1cblxuIiwibW9kdWxlIHdke1xuICAgIGV4cG9ydCBhYnN0cmFjdCBjbGFzcyBDdWJlbWFwRmFjZVRleHR1cmV7XG4gICAgICAgIHB1YmxpYyB0eXBlOlRleHR1cmVUeXBlID0gVGV4dHVyZVR5cGUuVU5TSUdORURfQllURTtcbiAgICAgICAgcHVibGljIGZvcm1hdDpUZXh0dXJlRm9ybWF0ID0gbnVsbDtcbiAgICAgICAgcHVibGljIHdpZHRoOm51bWJlciA9IG51bGw7XG4gICAgICAgIHB1YmxpYyBoZWlnaHQ6bnVtYmVyID0gbnVsbDtcblxuICAgICAgICBwdWJsaWMgYWJzdHJhY3QgZHJhdyhpbmRleDpudW1iZXIpOnZvaWQ7XG4gICAgICAgIHB1YmxpYyBhYnN0cmFjdCBpc1NvdXJjZVBvd2VyT2ZUd28oKTpib29sZWFuO1xuICAgICAgICBwdWJsaWMgYWJzdHJhY3QgbmVlZENsYW1wTWF4U2l6ZSgpOmJvb2xlYW47XG4gICAgICAgIHB1YmxpYyBhYnN0cmFjdCBjbGFtcFRvTWF4U2l6ZSgpOnZvaWQ7XG4gICAgfVxufVxuIiwibW9kdWxlIHdke1xuICAgIGV4cG9ydCBjbGFzcyBDdWJlbWFwRmFjZUltYWdlVGV4dHVyZSBleHRlbmRzIEN1YmVtYXBGYWNlVGV4dHVyZSBpbXBsZW1lbnRzIElDdWJlbWFwRmFjZVR3b0RUZXh0dXJlQXNzZXR7XG4gICAgICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlKGFzc2V0OkltYWdlVGV4dHVyZUFzc2V0KSB7XG4gICAgICAgIFx0dmFyIG9iaiA9IG5ldyB0aGlzKCk7XG5cbiAgICAgICAgICAgIG9iai5pbml0V2hlbkNyZWF0ZShhc3NldCk7XG5cbiAgICAgICAgXHRyZXR1cm4gb2JqO1xuICAgICAgICB9XG5cbiAgICAgICAgQHJlcXVpcmVTZXR0ZXIoZnVuY3Rpb24oc291cmNlUmVnaW9uTWV0aG9kOlRleHR1cmVTb3VyY2VSZWdpb25NZXRob2Qpe1xuICAgICAgICAgICAgYXNzZXJ0KHNvdXJjZVJlZ2lvbk1ldGhvZCA9PT0gVGV4dHVyZVNvdXJjZVJlZ2lvbk1ldGhvZC5EUkFXX0lOX0NBTlZBUywgTG9nLmluZm8uRlVOQ19TVVBQT1JUKFwiY3ViZW1hcCB0d29EIGZhY2UgdGV4dHVyZS0+c291cmNlUmVnaW9uTWV0aG9kIG9ubHlcIiwgXCJEUkFXX0lOX0NBTlZBU1wiKSk7XG4gICAgICAgIH0pXG4gICAgICAgIGdldCBzb3VyY2VSZWdpb25NZXRob2QoKXtcbiAgICAgICAgICAgIHJldHVybiBUZXh0dXJlU291cmNlUmVnaW9uTWV0aG9kLkRSQVdfSU5fQ0FOVkFTO1xuICAgICAgICB9XG4gICAgICAgIHNldCBzb3VyY2VSZWdpb25NZXRob2Qoc291cmNlUmVnaW9uTWV0aG9kOlRleHR1cmVTb3VyY2VSZWdpb25NZXRob2Qpe1xuICAgICAgICAgICAgdmFyIGEgPSBzb3VyY2VSZWdpb25NZXRob2Q7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgc291cmNlUmVnaW9uOlJlY3RSZWdpb24gPSBudWxsO1xuICAgICAgICBwdWJsaWMgc291cmNlOmFueSA9IG51bGw7XG5cbiAgICAgICAgcHVibGljIGluaXRXaGVuQ3JlYXRlKGFzc2V0OkltYWdlVGV4dHVyZUFzc2V0KXtcbiAgICAgICAgICAgIGFzc2V0LmNvcHlUb0N1YmVtYXBGYWNlVGV4dHVyZSh0aGlzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBpc1NvdXJjZVBvd2VyT2ZUd28oKTpib29sZWFue1xuICAgICAgICAgICAgcmV0dXJuIEJhc2ljVGV4dHVyZVV0aWxzLmlzU291cmNlUG93ZXJPZlR3byh0aGlzLnNvdXJjZVJlZ2lvbiwgdGhpcy5zb3VyY2VSZWdpb25NZXRob2QsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBuZWVkQ2xhbXBNYXhTaXplKCl7XG4gICAgICAgICAgICBpZighdGhpcy5zb3VyY2Upe1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIEJhc2ljVGV4dHVyZVV0aWxzLm5lZWRDbGFtcE1heFNpemUoR1BVRGV0ZWN0b3IuZ2V0SW5zdGFuY2UoKS5tYXhDdWJlbWFwVGV4dHVyZVNpemUsIHRoaXMuc291cmNlLndpZHRoLCB0aGlzLnNvdXJjZS5oZWlnaHQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGNsYW1wVG9NYXhTaXplKCl7XG4gICAgICAgICAgICB2YXIgbWF4U2l6ZSA9IEdQVURldGVjdG9yLmdldEluc3RhbmNlKCkubWF4Q3ViZW1hcFRleHR1cmVTaXplO1xuXG4gICAgICAgICAgICB0aGlzLnNvdXJjZSA9IEJhc2ljVGV4dHVyZVV0aWxzLmNsYW1wVG9NYXhTaXplKHRoaXMuc291cmNlLCBtYXhTaXplKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vdG9kbyBzdXBwb3J0IG1hbnVhbCBtaXBtYXBcbiAgICAgICAgcHVibGljIGRyYXcoaW5kZXg6bnVtYmVyKXtcbiAgICAgICAgICAgIHZhciBub01pcG1hcENtZCA9IERyYXdOb01pcG1hcFR3b0RUZXh0dXJlQ29tbWFuZC5jcmVhdGUoKSxcbiAgICAgICAgICAgIGdsID0gRGV2aWNlTWFuYWdlci5nZXRJbnN0YW5jZSgpLmdsO1xuXG4gICAgICAgICAgICBub01pcG1hcENtZC5zb3VyY2UgPSB0aGlzLnNvdXJjZTtcbiAgICAgICAgICAgIG5vTWlwbWFwQ21kLnNvdXJjZVJlZ2lvbiA9IHRoaXMuc291cmNlUmVnaW9uO1xuICAgICAgICAgICAgbm9NaXBtYXBDbWQuc291cmNlUmVnaW9uTWV0aG9kID0gdGhpcy5zb3VyY2VSZWdpb25NZXRob2Q7XG4gICAgICAgICAgICBub01pcG1hcENtZC5nbFRhcmdldCA9IGdsLlRFWFRVUkVfQ1VCRV9NQVBfUE9TSVRJVkVfWCArIGluZGV4O1xuICAgICAgICAgICAgbm9NaXBtYXBDbWQuZm9ybWF0ID0gdGhpcy5mb3JtYXQ7XG4gICAgICAgICAgICBub01pcG1hcENtZC50eXBlID0gdGhpcy50eXBlO1xuXG4gICAgICAgICAgICBub01pcG1hcENtZC5leGVjdXRlKCk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJtb2R1bGUgd2R7XG4gICAgZXhwb3J0IGNsYXNzIEN1YmVtYXBGYWNlQ29tcHJlc3NlZFRleHR1cmUgZXh0ZW5kcyBDdWJlbWFwRmFjZVRleHR1cmUgaW1wbGVtZW50cyBJQ3ViZW1hcEZhY2VDb21wcmVzc2VkVGV4dHVyZUFzc2V0e1xuICAgICAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZShhc3NldDpDb21wcmVzc2VkVGV4dHVyZUFzc2V0KSB7XG4gICAgICAgICAgICB2YXIgb2JqID0gbmV3IHRoaXMoKTtcblxuICAgICAgICAgICAgb2JqLmluaXRXaGVuQ3JlYXRlKGFzc2V0KTtcblxuICAgICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBtaXBtYXBzOndkQ2IuQ29sbGVjdGlvbjxDb21wcmVzc2VkVGV4dHVyZU1pcG1hcD4gPSBudWxsO1xuICAgICAgICBwdWJsaWMgbWluRmlsdGVyOlRleHR1cmVGaWx0ZXJNb2RlID0gbnVsbDtcblxuICAgICAgICBwdWJsaWMgaW5pdFdoZW5DcmVhdGUoYXNzZXQ6Q29tcHJlc3NlZFRleHR1cmVBc3NldCl7XG4gICAgICAgICAgICBhc3NldC5jb3B5VG9DdWJlbWFwRmFjZVRleHR1cmUodGhpcyk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgaXNTb3VyY2VQb3dlck9mVHdvKCk6Ym9vbGVhbntcbiAgICAgICAgICAgIHJldHVybiBCYXNpY1RleHR1cmVVdGlscy5pc1NvdXJjZVBvd2VyT2ZUd28obnVsbCwgbnVsbCwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIG5lZWRDbGFtcE1heFNpemUoKXtcbiAgICAgICAgICAgIHJldHVybiBCYXNpY1RleHR1cmVVdGlscy5uZWVkQ2xhbXBNYXhTaXplKEdQVURldGVjdG9yLmdldEluc3RhbmNlKCkubWF4Q3ViZW1hcFRleHR1cmVTaXplLCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgY2xhbXBUb01heFNpemUoKXtcbiAgICAgICAgICAgIExvZy53YXJuKFwiQ3ViZW1hcEZhY2VDb21wcmVzc2VkVGV4dHVyZSdzIHRleHR1cmUgc2l6ZSBpcyBvdmVyIG1heEN1YmVtYXBUZXh0dXJlU2l6ZVwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBkcmF3KGluZGV4Om51bWJlcil7XG4gICAgICAgICAgICB2YXIgY29tcHJlc3NlZENtZCA9IERyYXdDb21wcmVzc2VkVGV4dHVyZUNvbW1hbmQuY3JlYXRlKCksXG4gICAgICAgICAgICBnbCA9IERldmljZU1hbmFnZXIuZ2V0SW5zdGFuY2UoKS5nbDtcblxuICAgICAgICAgICAgY29tcHJlc3NlZENtZC5nbFRhcmdldCA9IGdsLlRFWFRVUkVfQ1VCRV9NQVBfUE9TSVRJVkVfWCArIGluZGV4O1xuICAgICAgICAgICAgY29tcHJlc3NlZENtZC50eXBlID0gdGhpcy50eXBlO1xuICAgICAgICAgICAgY29tcHJlc3NlZENtZC5mb3JtYXQgPSB0aGlzLmZvcm1hdDtcbiAgICAgICAgICAgIGNvbXByZXNzZWRDbWQubWlwbWFwcyA9IHRoaXMubWlwbWFwcztcblxuICAgICAgICAgICAgY29tcHJlc3NlZENtZC5leGVjdXRlKCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbiIsIm1vZHVsZSB3ZHtcbiAgICBleHBvcnQgY2xhc3MgQ29tcHJlc3NlZFRleHR1cmUgZXh0ZW5kcyBUd29EVGV4dHVyZSB7XG4gICAgICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlKGFzc2V0OkNvbXByZXNzZWRUZXh0dXJlQXNzZXQpIHtcbiAgICAgICAgICAgIHZhciBvYmogPSBuZXcgdGhpcygpO1xuXG4gICAgICAgICAgICBvYmouaW5pdFdoZW5DcmVhdGUoYXNzZXQpO1xuXG4gICAgICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgICB9XG5cbiAgICAgICAgZ2V0IHNvdXJjZVJlZ2lvbk1ldGhvZCgpe1xuICAgICAgICAgICAgTG9nLmFzc2VydCh0aGlzLnBfc291cmNlUmVnaW9uTWV0aG9kID09PSBUZXh0dXJlU291cmNlUmVnaW9uTWV0aG9kLkRSQVdfSU5fQ0FOVkFTLCBcImNvbXByZXNzZWQgdGV4dHVyZSBub3Qgc3VwcG9ydCBUZXh0dXJlU291cmNlUmVnaW9uTWV0aG9kLkRSQVdfSU5fQ0FOVkFTLCB3aWxsIHVzZSBUZXh0dXJlU291cmNlUmVnaW9uTWV0aG9kLkNIQU5HRV9URVhDT09SRFNfSU5fR0xTTCBpbnN0ZWFkXCIpO1xuXG4gICAgICAgICAgICByZXR1cm4gVGV4dHVyZVNvdXJjZVJlZ2lvbk1ldGhvZC5DSEFOR0VfVEVYQ09PUkRTX0lOX0dMU0w7XG4gICAgICAgIH1cblxuICAgICAgICBwcm90ZWN0ZWQgYWxsb2NhdGVTb3VyY2VUb1RleHR1cmUoaXNTb3VyY2VQb3dlck9mVHdvOmJvb2xlYW4pIHtcbiAgICAgICAgICAgIHZhciBnbCA9IERldmljZU1hbmFnZXIuZ2V0SW5zdGFuY2UoKS5nbCxcbiAgICAgICAgICAgICAgICBjb21wcmVzc2VkQ21kID0gRHJhd0NvbXByZXNzZWRUZXh0dXJlQ29tbWFuZC5jcmVhdGUoKTtcblxuICAgICAgICAgICAgY29tcHJlc3NlZENtZC5nbFRhcmdldCA9IGdsLlRFWFRVUkVfMkQ7XG4gICAgICAgICAgICBjb21wcmVzc2VkQ21kLnR5cGUgPSB0aGlzLnR5cGU7XG4gICAgICAgICAgICBjb21wcmVzc2VkQ21kLmZvcm1hdCA9IHRoaXMuZm9ybWF0O1xuICAgICAgICAgICAgY29tcHJlc3NlZENtZC5taXBtYXBzID0gdGhpcy5taXBtYXBzO1xuICAgICAgICAgICAgY29tcHJlc3NlZENtZC5zb3VyY2VSZWdpb24gPSB0aGlzLnNvdXJjZVJlZ2lvbjtcbiAgICAgICAgICAgIGNvbXByZXNzZWRDbWQuc291cmNlUmVnaW9uTWV0aG9kID0gdGhpcy5zb3VyY2VSZWdpb25NZXRob2Q7XG5cbiAgICAgICAgICAgIGNvbXByZXNzZWRDbWQuZXhlY3V0ZSgpO1xuXG4gICAgICAgICAgICBpZih0aGlzLm1pcG1hcHMuZ2V0Q291bnQoKSA+IDEpe1xuICAgICAgICAgICAgICAgIHRoaXMuZ2VuZXJhdGVNaXBtYXBzID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBwcm90ZWN0ZWQgbmVlZENsYW1wTWF4U2l6ZSgpe1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZXhwb3J0IHR5cGUgQ29tcHJlc3NlZFRleHR1cmVNaXBtYXAgPSB7XG4gICAgICAgIGRhdGE6YW55O1xuICAgICAgICB3aWR0aDpudW1iZXI7XG4gICAgICAgIGhlaWdodDpudW1iZXI7XG4gICAgfVxufVxuXG4iLCJtb2R1bGUgd2R7XG4gICAgZXhwb3J0IGFic3RyYWN0IGNsYXNzIERyYXdUZXh0dXJlQ29tbWFuZHtcbiAgICAgICAgcHVibGljIGZvcm1hdDpUZXh0dXJlRm9ybWF0ID0gbnVsbDtcbiAgICAgICAgcHVibGljIHR5cGU6VGV4dHVyZVR5cGUgPSBudWxsO1xuICAgICAgICBwdWJsaWMgc291cmNlUmVnaW9uOlJlY3RSZWdpb24gPSBudWxsO1xuICAgICAgICBwdWJsaWMgc291cmNlUmVnaW9uTWV0aG9kOlRleHR1cmVTb3VyY2VSZWdpb25NZXRob2QgPSBUZXh0dXJlU291cmNlUmVnaW9uTWV0aG9kLkNIQU5HRV9URVhDT09SRFNfSU5fR0xTTDtcbiAgICAgICAgcHVibGljIGdsVGFyZ2V0OmFueSA9IG51bGw7XG5cbiAgICAgICAgcHVibGljIGFic3RyYWN0IGV4ZWN1dGUoKTtcblxuICAgICAgICBwcm90ZWN0ZWQgZ2V0RHJhd1RhcmdldChzb3VyY2U6YW55LCBzb3VyY2VSZWdpb246UmVjdFJlZ2lvbj10aGlzLnNvdXJjZVJlZ2lvbil7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gbnVsbDtcblxuICAgICAgICAgICAgaWYoQmFzaWNUZXh0dXJlVXRpbHMuaXNEcmF3UGFydE9mVGV4dHVyZShzb3VyY2VSZWdpb24sIHRoaXMuc291cmNlUmVnaW9uTWV0aG9kKSl7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gQmFzaWNUZXh0dXJlVXRpbHMuZHJhd1BhcnRPZlRleHR1cmVCeUNhbnZhcyhzb3VyY2UsIHNvdXJjZVJlZ2lvbi53aWR0aCwgc291cmNlUmVnaW9uLmhlaWdodCwgc291cmNlUmVnaW9uLngsIHNvdXJjZVJlZ2lvbi55LCBzb3VyY2VSZWdpb24ud2lkdGgsIHNvdXJjZVJlZ2lvbi5oZWlnaHQsIDAsIDAsIHNvdXJjZVJlZ2lvbi53aWR0aCwgc291cmNlUmVnaW9uLmhlaWdodCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHNvdXJjZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsIm1vZHVsZSB3ZHtcbiAgICBleHBvcnQgY2xhc3MgRHJhd0NvbXByZXNzZWRUZXh0dXJlQ29tbWFuZCBleHRlbmRzIERyYXdUZXh0dXJlQ29tbWFuZHtcbiAgICAgICAgcHVibGljIHN0YXRpYyBjcmVhdGUoKSB7XG4gICAgICAgICAgICB2YXIgb2JqID0gbmV3IHRoaXMoKTtcblxuICAgICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBtaXBtYXBzOndkQ2IuQ29sbGVjdGlvbjxDb21wcmVzc2VkVGV4dHVyZU1pcG1hcD4gPSBudWxsO1xuXG4gICAgICAgIHB1YmxpYyBleGVjdXRlKCl7XG4gICAgICAgICAgICB2YXIgZ2wgPSBEZXZpY2VNYW5hZ2VyLmdldEluc3RhbmNlKCkuZ2wsXG4gICAgICAgICAgICAgICAgc2VsZiA9IHRoaXM7XG5cbiAgICAgICAgICAgIExvZy5lcnJvcih0aGlzLmZvcm1hdCA9PT0gbnVsbCwgTG9nLmluZm8uRlVOQ19OT1RfU1VQUE9SVCh0aGlzLmZvcm1hdCkpO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5mb3JtYXQgIT09IFRleHR1cmVGb3JtYXQuUkdCQSkge1xuICAgICAgICAgICAgICAgIHRoaXMubWlwbWFwcy5mb3JFYWNoKChtaXBtYXA6Q29tcHJlc3NlZFRleHR1cmVNaXBtYXAsIGluZGV4Om51bWJlcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICBnbC5jb21wcmVzc2VkVGV4SW1hZ2UyRChzZWxmLmdsVGFyZ2V0LCBpbmRleCwgc2VsZi5mb3JtYXQsIG1pcG1hcC53aWR0aCwgbWlwbWFwLmhlaWdodCwgMCwgc2VsZi5nZXREcmF3VGFyZ2V0KG1pcG1hcC5kYXRhKSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgIHRoaXMubWlwbWFwcy5mb3JFYWNoKChtaXBtYXA6Q29tcHJlc3NlZFRleHR1cmVNaXBtYXAsIGluZGV4Om51bWJlcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICBnbC50ZXhJbWFnZTJEKHNlbGYuZ2xUYXJnZXQsIGluZGV4LCBnbFtzZWxmLmZvcm1hdF0sIG1pcG1hcC53aWR0aCwgbWlwbWFwLmhlaWdodCwgMCwgZ2xbc2VsZi5mb3JtYXRdLCBnbFtzZWxmLnR5cGVdLCBzZWxmLmdldERyYXdUYXJnZXQobWlwbWFwLmRhdGEpKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbiIsIm1vZHVsZSB3ZHtcbiAgICBleHBvcnQgYWJzdHJhY3QgY2xhc3MgRHJhd1R3b0RUZXh0dXJlQ29tbWFuZCBleHRlbmRzIERyYXdUZXh0dXJlQ29tbWFuZHtcbiAgICAgICAgcHVibGljIHNvdXJjZTphbnkgPSBudWxsO1xuXG4gICAgICAgIHByb3RlY3RlZCBkcmF3VGV4dHVyZShpbmRleDpudW1iZXIsIHNvdXJjZTphbnkpe1xuICAgICAgICAgICAgdmFyIGdsID0gRGV2aWNlTWFuYWdlci5nZXRJbnN0YW5jZSgpLmdsO1xuXG4gICAgICAgICAgICBnbC50ZXhJbWFnZTJEKHRoaXMuZ2xUYXJnZXQsIGluZGV4LCBnbFt0aGlzLmZvcm1hdF0sIGdsW3RoaXMuZm9ybWF0XSwgZ2xbdGhpcy50eXBlXSwgdGhpcy5nZXREcmF3VGFyZ2V0KHNvdXJjZSkpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4iLCJtb2R1bGUgd2R7XG4gICAgZXhwb3J0IGNsYXNzIERyYXdNaXBtYXBUd29EVGV4dHVyZUNvbW1hbmQgZXh0ZW5kcyBEcmF3VHdvRFRleHR1cmVDb21tYW5ke1xuICAgICAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZSgpIHtcbiAgICAgICAgXHR2YXIgb2JqID0gbmV3IHRoaXMoKTtcblxuICAgICAgICBcdHJldHVybiBvYmo7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgbWlwbWFwczp3ZENiLkNvbGxlY3Rpb248SFRNTENhbnZhc0VsZW1lbnR8SFRNTEltYWdlRWxlbWVudHxIVE1MVmlkZW9FbGVtZW50PiA9IG51bGw7XG5cbiAgICAgICAgcHVibGljIGV4ZWN1dGUoKXtcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgICAgICAgICAgdGhpcy5taXBtYXBzLmZvckVhY2goKG1pcG1hcDpIVE1MSW1hZ2VFbGVtZW50fEhUTUxDYW52YXNFbGVtZW50fEhUTUxWaWRlb0VsZW1lbnQsIGluZGV4Om51bWJlcikgPT4ge1xuICAgICAgICAgICAgICAgIHNlbGYuZHJhd1RleHR1cmUoaW5kZXgsIG1pcG1hcCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuIiwibW9kdWxlIHdke1xuICAgIGV4cG9ydCBjbGFzcyBEcmF3Tm9NaXBtYXBUd29EVGV4dHVyZUNvbW1hbmQgZXh0ZW5kcyBEcmF3VHdvRFRleHR1cmVDb21tYW5ke1xuICAgICAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZSgpIHtcbiAgICAgICAgICAgIHZhciBvYmogPSBuZXcgdGhpcygpO1xuXG4gICAgICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGV4ZWN1dGUoKXtcbiAgICAgICAgICAgIHRoaXMuZHJhd1RleHR1cmUoMCwgdGhpcy5zb3VyY2UpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4iLCJtb2R1bGUgd2R7XG4gICAgZGVjbGFyZSB2YXIgZG9jdW1lbnQ6YW55O1xuXG4gICAgLy90b2RvIHJlZmVyIHRvIHZpZGVvLmpzLCBtZWRpYWVsZW1lbnQuanMgdG8gZW5oYW5jZVxuICAgIC8vdG9kbyB1bmlmeSB3aXRoIEF1ZGlvXG4gICAgLy90b2RvIGNhbiBmYWxsYmFjayB0byBmbGFzaFxuICAgIC8vdG9kbyBzdXBwb3J0IGxvb3BcbiAgICBleHBvcnQgY2xhc3MgVmlkZW97XG4gICAgICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlKGRhdGE6YW55KSB7XG4gICAgICAgICAgICB2YXIgb2JqID0gbmV3IHRoaXMoZGF0YSk7XG5cbiAgICAgICAgXHRvYmouaW5pdFdoZW5DcmVhdGUoKTtcblxuICAgICAgICBcdHJldHVybiBvYmo7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdHJ1Y3Rvcih7XG4gICAgICAgICAgICB1cmxBcnIsXG4gICAgICAgICAgICBvbkxvYWQ9ICh2aWRlbzpWaWRlbykgPT4ge30sXG4gICAgICAgICAgICBvbkVycm9yPSAoZXJyOmFueSkgPT4ge31cbiAgICAgICAgICAgIH0pe1xuICAgICAgICAgICAgdGhpcy5fdXJsQXJyID0gd2RDYi5Db2xsZWN0aW9uLmNyZWF0ZTxzdHJpbmc+KHVybEFycik7XG4gICAgICAgICAgICB0aGlzLl9vbkxvYWQgPSBvbkxvYWQ7XG4gICAgICAgICAgICB0aGlzLl9vbkVycm9yID0gb25FcnJvcjtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyB1cmw6c3RyaW5nID0gbnVsbDtcbiAgICAgICAgcHVibGljIHNvdXJjZTpIVE1MVmlkZW9FbGVtZW50ID0gbnVsbDtcbiAgICAgICAgcHVibGljIGlzU3RvcDpib29sZWFuID0gZmFsc2U7XG5cbiAgICAgICAgcHJpdmF0ZSBfdXJsQXJyOndkQ2IuQ29sbGVjdGlvbjxzdHJpbmc+ID0gbnVsbDtcbiAgICAgICAgcHJpdmF0ZSBfb25Mb2FkOkZ1bmN0aW9uID0gbnVsbDtcbiAgICAgICAgcHJpdmF0ZSBfb25FcnJvcjpGdW5jdGlvbiA9IG51bGw7XG5cblxuICAgICAgICBwdWJsaWMgaW5pdFdoZW5DcmVhdGUoKXtcbiAgICAgICAgICAgIHRoaXMudXJsID0gdGhpcy5fZ2V0Q2FuUGxheVVybCgpO1xuICAgICAgICAgICAgdGhpcy5zb3VyY2UgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidmlkZW9cIik7XG4gICAgICAgICAgICB0aGlzLnNvdXJjZS5zcmMgPSB0aGlzLnVybDtcbiAgICAgICAgICAgIHRoaXMuX2JpbmRFdmVudCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHBsYXkoKXtcbiAgICAgICAgICAgIHRoaXMuaXNTdG9wID0gZmFsc2U7XG5cbiAgICAgICAgICAgIHRoaXMuc291cmNlLnBsYXkoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX2dldENhblBsYXlVcmwoKSB7XG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXMsXG4gICAgICAgICAgICAgICAgY2FuUGxheVVybCA9IG51bGwsXG4gICAgICAgICAgICAgICAgZXh0bmFtZUFyciA9IFtdO1xuXG4gICAgICAgICAgICB0aGlzLl91cmxBcnIuZm9yRWFjaCgodXJsKSA9PiB7XG4gICAgICAgICAgICAgICAgdmFyIGV4dG5hbWUgPSAgd2RDYi5QYXRoVXRpbHMuZXh0bmFtZSh1cmwpO1xuXG4gICAgICAgICAgICAgICAgZXh0bmFtZUFyci5wdXNoKGV4dG5hbWUpO1xuXG4gICAgICAgICAgICAgICAgaWYgKHNlbGYuX2NhbnBsYXkoZXh0bmFtZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FuUGxheVVybCA9IHVybDtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHdkQ2IuJEJSRUFLO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBMb2cuZXJyb3IoY2FuUGxheVVybCA9PT0gbnVsbCwgTG9nLmluZm8uRlVOQ19OT1RfU1VQUE9SVChcImJyb3dzZXJcIiwgZXh0bmFtZUFyci5qb2luKFwiLFwiKSkpO1xuXG4gICAgICAgICAgICByZXR1cm4gY2FuUGxheVVybDtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX2NhbnBsYXkoZXh0bmFtZSkge1xuICAgICAgICAgICAgdmFyIHZpZGVvID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInZpZGVvXCIpLFxuICAgICAgICAgICAgICAgIG1pbWVTdHIgPSBudWxsO1xuXG4gICAgICAgICAgICBzd2l0Y2ggKGV4dG5hbWUpIHtcbiAgICAgICAgICAgICAgICBjYXNlICcubXA0JzpcbiAgICAgICAgICAgICAgICAgICAgbWltZVN0ciA9ICd2aWRlby9tcDQ7IGNvZGVjcz1cImF2YzEuNDJlMDFlLCBtcDRhLjQwLjJcIic7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCIub2d2XCI6XG4gICAgICAgICAgICAgICAgICAgIG1pbWVTdHIgPSAndmlkZW8vb2dnOyBjb2RlY3M9XCJ0aGVvcmEsIHZvcmJpc1wiJztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcIi53ZWJtXCI6XG4gICAgICAgICAgICAgICAgICAgIG1pbWVTdHIgPSAndmlkZW8vd2VibTsgY29kZWNzPVwidnA4LCB2b3JiaXNcIic7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQgOlxuICAgICAgICAgICAgICAgICAgICBMb2cuZXJyb3IodHJ1ZSwgTG9nLmluZm8uRlVOQ19VTkVYUEVDVChleHRuYW1lKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gISF2aWRlby5jYW5QbGF5VHlwZSAmJiB2aWRlby5jYW5QbGF5VHlwZShtaW1lU3RyKSAhPT0gXCJcIjtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX2JpbmRFdmVudCgpe1xuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgICAgICAgICB0aGlzLnNvdXJjZS5hZGRFdmVudExpc3RlbmVyKFwiY2FucGxheXRocm91Z2hcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHNlbGYuX29uTG9hZChzZWxmKTtcbiAgICAgICAgICAgIH0sIGZhbHNlKTtcbiAgICAgICAgICAgIHRoaXMuc291cmNlLmFkZEV2ZW50TGlzdGVuZXIoXCJlcnJvclwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5fb25FcnJvcihcImVycm9yQ29kZSBcIiArIHNlbGYuc291cmNlLmVycm9yLmNvZGUpO1xuICAgICAgICAgICAgfSwgZmFsc2UpO1xuICAgICAgICAgICAgdGhpcy5zb3VyY2UuYWRkRXZlbnRMaXN0ZW5lcihcImVuZGVkXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBzZWxmLmlzU3RvcCA9IHRydWU7XG4gICAgICAgICAgICB9LCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJtb2R1bGUgd2R7XG4gICAgZXhwb3J0IGNsYXNzIFZpZGVvTWFuYWdlcntcbiAgICAgICAgcHJpdmF0ZSBzdGF0aWMgX2luc3RhbmNlID0gbnVsbDtcblxuICAgICAgICBwdWJsaWMgc3RhdGljIGdldEluc3RhbmNlKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2luc3RhbmNlID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5faW5zdGFuY2UgPSBuZXcgdGhpcygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2luc3RhbmNlO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHBsYXkoaWQ6c3RyaW5nKXtcbiAgICAgICAgICAgIHZhciBhc3NldCA9IFZpZGVvTG9hZGVyLmdldEluc3RhbmNlKCkuZ2V0KGlkKSxcbiAgICAgICAgICAgICAgICB2aWRlbzpWaWRlbyA9IG51bGw7XG5cbiAgICAgICAgICAgIExvZy5lcnJvcighYXNzZXQsIExvZy5pbmZvLkZVTkNfTk9UX0VYSVNUKFwidmlkZW8gYXNzZXQgd2hpY2ggaWQgaXMgXCIgKyBpZCkpO1xuXG4gICAgICAgICAgICB2aWRlbyA9IGFzc2V0LnZpZGVvO1xuXG4gICAgICAgICAgICB2aWRlby5wbGF5KCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbiIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi8uLi9maWxlUGF0aC5kLnRzXCIvPlxubW9kdWxlIHdke1xuZXhwb3J0IGNsYXNzIFNoYWRlckNodW5re3B1YmxpYyBzdGF0aWMgZW1wdHk6R0xTTENodW5rID0ge3RvcDpcIlwiLCBkZWZpbmU6XCJcIiwgdmFyRGVjbGFyZTpcIlwiLCBmdW5jRGVjbGFyZTpcIlwiLCBmdW5jRGVmaW5lOlwiXCIsIGJvZHk6XCJcIn1cbnB1YmxpYyBzdGF0aWMgTlVMTDpudW1iZXIgPSAtMS4wO1xucHVibGljIHN0YXRpYyBtb3JwaE5vcm1hbF92ZXJ0ZXg6R0xTTENodW5rID0ge3RvcDogXCJcIixkZWZpbmU6IFwiXCIsdmFyRGVjbGFyZTogXCJcIixmdW5jRGVjbGFyZTogXCJcIixmdW5jRGVmaW5lOiBcIlwiLGJvZHk6IFwidmVjMyBhX25vcm1hbCA9IGFfY3VycmVudEZyYW1lTm9ybWFsICsgKGFfbmV4dEZyYW1lTm9ybWFsIC0gYV9jdXJyZW50RnJhbWVOb3JtYWwpICogdV9pbnRlcnBvbGF0aW9uO1xcblwiLH1cbnB1YmxpYyBzdGF0aWMgbW9ycGhWZXJ0aWNlX3ZlcnRleDpHTFNMQ2h1bmsgPSB7dG9wOiBcIlwiLGRlZmluZTogXCJcIix2YXJEZWNsYXJlOiBcIlwiLGZ1bmNEZWNsYXJlOiBcIlwiLGZ1bmNEZWZpbmU6IFwiXCIsYm9keTogXCJ2ZWMzIGFfcG9zaXRpb24gPSBhX2N1cnJlbnRGcmFtZVBvc2l0aW9uICsgKGFfbmV4dEZyYW1lUG9zaXRpb24gLSBhX2N1cnJlbnRGcmFtZVBvc2l0aW9uKSAqIHVfaW50ZXJwb2xhdGlvbjtcXG5cIix9XG5wdWJsaWMgc3RhdGljIGJhc2ljRW5kX2ZyYWdtZW50OkdMU0xDaHVuayA9IHt0b3A6IFwiXCIsZGVmaW5lOiBcIlwiLHZhckRlY2xhcmU6IFwiXCIsZnVuY0RlY2xhcmU6IFwiXCIsZnVuY0RlZmluZTogXCJcIixib2R5OiBcImdsX0ZyYWdDb2xvciA9IHZlYzQodG90YWxDb2xvci5yZ2IsIHRvdGFsQ29sb3IuYSAqIHVfb3BhY2l0eSk7XFxuXCIsfVxucHVibGljIHN0YXRpYyBiYXNpY19mcmFnbWVudDpHTFNMQ2h1bmsgPSB7dG9wOiBcIlwiLGRlZmluZTogXCJcIix2YXJEZWNsYXJlOiBcInZhcnlpbmcgdmVjMyB2X2NvbG9yO1xcblwiLGZ1bmNEZWNsYXJlOiBcIlwiLGZ1bmNEZWZpbmU6IFwiXCIsYm9keTogXCJ2ZWM0IHRvdGFsQ29sb3IgPSB2ZWM0KHZfY29sb3IsIDEuMCk7XFxuXCIsfVxucHVibGljIHN0YXRpYyBiYXNpY192ZXJ0ZXg6R0xTTENodW5rID0ge3RvcDogXCJcIixkZWZpbmU6IFwiXCIsdmFyRGVjbGFyZTogXCJ2YXJ5aW5nIHZlYzMgdl9jb2xvcjtcXG5cIixmdW5jRGVjbGFyZTogXCJcIixmdW5jRGVmaW5lOiBcIlwiLGJvZHk6IFwidl9jb2xvciA9IGFfY29sb3I7XFxuXCIsfVxucHVibGljIHN0YXRpYyBjb21tb25fZGVmaW5lOkdMU0xDaHVuayA9IHt0b3A6IFwiXCIsZGVmaW5lOiBcIiNkZWZpbmUgTlVMTCAtMS4wXFxuXCIsdmFyRGVjbGFyZTogXCJcIixmdW5jRGVjbGFyZTogXCJcIixmdW5jRGVmaW5lOiBcIlwiLGJvZHk6IFwiXCIsfVxucHVibGljIHN0YXRpYyBjb21tb25fZnJhZ21lbnQ6R0xTTENodW5rID0ge3RvcDogXCJcIixkZWZpbmU6IFwiXCIsdmFyRGVjbGFyZTogXCJcIixmdW5jRGVjbGFyZTogXCJcIixmdW5jRGVmaW5lOiBcIlwiLGJvZHk6IFwiXCIsfVxucHVibGljIHN0YXRpYyBjb21tb25fZnVuY3Rpb246R0xTTENodW5rID0ge3RvcDogXCJcIixkZWZpbmU6IFwiXCIsdmFyRGVjbGFyZTogXCJcIixmdW5jRGVjbGFyZTogXCJcIixmdW5jRGVmaW5lOiBcIm1hdDIgdHJhbnNwb3NlKG1hdDIgbSkge1xcbiAgcmV0dXJuIG1hdDIoICBtWzBdWzBdLCBtWzFdWzBdLCAgIC8vIG5ldyBjb2wgMFxcbiAgICAgICAgICAgICAgICBtWzBdWzFdLCBtWzFdWzFdICAgIC8vIG5ldyBjb2wgMVxcbiAgICAgICAgICAgICApO1xcbiAgfVxcbm1hdDMgdHJhbnNwb3NlKG1hdDMgbSkge1xcbiAgcmV0dXJuIG1hdDMoICBtWzBdWzBdLCBtWzFdWzBdLCBtWzJdWzBdLCAgLy8gbmV3IGNvbCAwXFxuICAgICAgICAgICAgICAgIG1bMF1bMV0sIG1bMV1bMV0sIG1bMl1bMV0sICAvLyBuZXcgY29sIDFcXG4gICAgICAgICAgICAgICAgbVswXVsyXSwgbVsxXVsyXSwgbVsyXVsyXSAgIC8vIG5ldyBjb2wgMVxcbiAgICAgICAgICAgICApO1xcbiAgfVxcblwiLGJvZHk6IFwiXCIsfVxucHVibGljIHN0YXRpYyBjb21tb25fdmVydGV4OkdMU0xDaHVuayA9IHt0b3A6IFwiXCIsZGVmaW5lOiBcIlwiLHZhckRlY2xhcmU6IFwiXCIsZnVuY0RlY2xhcmU6IFwiXCIsZnVuY0RlZmluZTogXCJcIixib2R5OiBcIlwiLH1cbnB1YmxpYyBzdGF0aWMgaGlnaHBfZnJhZ21lbnQ6R0xTTENodW5rID0ge3RvcDogXCJwcmVjaXNpb24gaGlnaHAgZmxvYXQ7XFxucHJlY2lzaW9uIGhpZ2hwIGludDtcXG5cIixkZWZpbmU6IFwiXCIsdmFyRGVjbGFyZTogXCJcIixmdW5jRGVjbGFyZTogXCJcIixmdW5jRGVmaW5lOiBcIlwiLGJvZHk6IFwiXCIsfVxucHVibGljIHN0YXRpYyBsb3dwX2ZyYWdtZW50OkdMU0xDaHVuayA9IHt0b3A6IFwicHJlY2lzaW9uIGxvd3AgZmxvYXQ7XFxucHJlY2lzaW9uIGxvd3AgaW50O1xcblwiLGRlZmluZTogXCJcIix2YXJEZWNsYXJlOiBcIlwiLGZ1bmNEZWNsYXJlOiBcIlwiLGZ1bmNEZWZpbmU6IFwiXCIsYm9keTogXCJcIix9XG5wdWJsaWMgc3RhdGljIG1lZGl1bXBfZnJhZ21lbnQ6R0xTTENodW5rID0ge3RvcDogXCJwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDtcXG5wcmVjaXNpb24gbWVkaXVtcCBpbnQ7XFxuXCIsZGVmaW5lOiBcIlwiLHZhckRlY2xhcmU6IFwiXCIsZnVuY0RlY2xhcmU6IFwiXCIsZnVuY0RlZmluZTogXCJcIixib2R5OiBcIlwiLH1cbnB1YmxpYyBzdGF0aWMgbWFwX2ZvckJhc2ljX2ZyYWdtZW50OkdMU0xDaHVuayA9IHt0b3A6IFwiXCIsZGVmaW5lOiBcIlwiLHZhckRlY2xhcmU6IFwidmFyeWluZyB2ZWMyIHZfbWFwQ29vcmQ7XFxuXCIsZnVuY0RlY2xhcmU6IFwiXCIsZnVuY0RlZmluZTogXCJcIixib2R5OiBcInRvdGFsQ29sb3IgKj0gdGV4dHVyZTJEKHVfc2FtcGxlcjJEMCwgdl9tYXBDb29yZCk7XFxuXCIsfVxucHVibGljIHN0YXRpYyBtYXBfZm9yQmFzaWNfdmVydGV4OkdMU0xDaHVuayA9IHt0b3A6IFwiXCIsZGVmaW5lOiBcIlwiLHZhckRlY2xhcmU6IFwidmFyeWluZyB2ZWMyIHZfbWFwQ29vcmQ7XFxuXCIsZnVuY0RlY2xhcmU6IFwiXCIsZnVuY0RlZmluZTogXCJcIixib2R5OiBcInZlYzIgc291cmNlVGV4Q29vcmQgPSBhX3RleENvb3JkICogdV9zb3VyY2VSZWdpb24uencgKyB1X3NvdXJjZVJlZ2lvbi54eTtcXG4gICAgdl9tYXBDb29yZCA9IHNvdXJjZVRleENvb3JkICogdV9yZXBlYXRSZWdpb24uencgKyB1X3JlcGVhdFJlZ2lvbi54eTtcXG5cIix9XG5wdWJsaWMgc3RhdGljIG11bHRpX21hcF9mb3JCYXNpY19mcmFnbWVudDpHTFNMQ2h1bmsgPSB7dG9wOiBcIlwiLGRlZmluZTogXCJcIix2YXJEZWNsYXJlOiBcIlwiLGZ1bmNEZWNsYXJlOiBcIlwiLGZ1bmNEZWZpbmU6IFwidmVjNCBnZXRNYXBDb2xvcigpe1xcbiAgICAgICAgICAgIHZlYzQgY29sb3IwID0gdGV4dHVyZTJEKHVfc2FtcGxlcjJEMCwgdl9tYXBDb29yZCk7XFxuICAgICAgICAgICAgdmVjNCBjb2xvcjEgPSB0ZXh0dXJlMkQodV9zYW1wbGVyMkQxLCB2X21hcENvb3JkKTtcXG4gICAgICAgICAgICBpZih1X2NvbWJpbmVNb2RlID09IDApe1xcbiAgICAgICAgICAgICAgICByZXR1cm4gbWl4KGNvbG9yMCwgY29sb3IxLCB1X21peFJhdGlvKTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgZWxzZSBpZih1X2NvbWJpbmVNb2RlID09IDEpe1xcbiAgICAgICAgICAgICAgICByZXR1cm4gY29sb3IwICogY29sb3IxO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICBlbHNlIGlmKHVfY29tYmluZU1vZGUgPT0gMil7XFxuICAgICAgICAgICAgICAgIHJldHVybiBjb2xvcjAgKyBjb2xvcjE7XFxuICAgICAgICAgICAgfVxcblx0XHR9XFxuXCIsYm9keTogXCJ0b3RhbENvbG9yICo9IGdldE1hcENvbG9yKCk7XFxuXCIsfVxucHVibGljIHN0YXRpYyBsaWdodENvbW1vbl9mcmFnbWVudDpHTFNMQ2h1bmsgPSB7dG9wOiBcIlwiLGRlZmluZTogXCJcIix2YXJEZWNsYXJlOiBcInZhcnlpbmcgdmVjMyB2X3dvcmxkUG9zaXRpb247XFxuI2lmIFBPSU5UX0xJR0hUU19DT1VOVCA+IDBcXG5zdHJ1Y3QgUG9pbnRMaWdodCB7XFxuICAgIHZlYzMgcG9zaXRpb247XFxuICAgIHZlYzMgY29sb3I7XFxuICAgIGZsb2F0IGludGVuc2l0eTtcXG5cXG4gICAgZmxvYXQgcmFuZ2U7XFxuICAgIGZsb2F0IGNvbnN0YW50O1xcbiAgICBmbG9hdCBsaW5lYXI7XFxuICAgIGZsb2F0IHF1YWRyYXRpYztcXG59O1xcbnVuaWZvcm0gUG9pbnRMaWdodCB1X3BvaW50TGlnaHRzW1BPSU5UX0xJR0hUU19DT1VOVF07XFxuXFxuI2VuZGlmXFxuXFxuXFxuI2lmIERJUkVDVElPTl9MSUdIVFNfQ09VTlQgPiAwXFxuc3RydWN0IERpcmVjdGlvbkxpZ2h0IHtcXG4gICAgdmVjMyBwb3NpdGlvbjtcXG5cXG4gICAgZmxvYXQgaW50ZW5zaXR5O1xcblxcbiAgICB2ZWMzIGNvbG9yO1xcbn07XFxudW5pZm9ybSBEaXJlY3Rpb25MaWdodCB1X2RpcmVjdGlvbkxpZ2h0c1tESVJFQ1RJT05fTElHSFRTX0NPVU5UXTtcXG4jZW5kaWZcXG5cIixmdW5jRGVjbGFyZTogXCJcIixmdW5jRGVmaW5lOiBcIlwiLGJvZHk6IFwiXCIsfVxucHVibGljIHN0YXRpYyBsaWdodENvbW1vbl92ZXJ0ZXg6R0xTTENodW5rID0ge3RvcDogXCJcIixkZWZpbmU6IFwiXCIsdmFyRGVjbGFyZTogXCJ2YXJ5aW5nIHZlYzMgdl93b3JsZFBvc2l0aW9uO1xcbiNpZiBQT0lOVF9MSUdIVFNfQ09VTlQgPiAwXFxuc3RydWN0IFBvaW50TGlnaHQge1xcbiAgICB2ZWMzIHBvc2l0aW9uO1xcbiAgICB2ZWMzIGNvbG9yO1xcbiAgICBmbG9hdCBpbnRlbnNpdHk7XFxuXFxuICAgIGZsb2F0IHJhbmdlO1xcbiAgICBmbG9hdCBjb25zdGFudDtcXG4gICAgZmxvYXQgbGluZWFyO1xcbiAgICBmbG9hdCBxdWFkcmF0aWM7XFxufTtcXG51bmlmb3JtIFBvaW50TGlnaHQgdV9wb2ludExpZ2h0c1tQT0lOVF9MSUdIVFNfQ09VTlRdO1xcblxcbiNlbmRpZlxcblxcblxcbiNpZiBESVJFQ1RJT05fTElHSFRTX0NPVU5UID4gMFxcbnN0cnVjdCBEaXJlY3Rpb25MaWdodCB7XFxuICAgIHZlYzMgcG9zaXRpb247XFxuXFxuICAgIGZsb2F0IGludGVuc2l0eTtcXG5cXG4gICAgdmVjMyBjb2xvcjtcXG59O1xcbnVuaWZvcm0gRGlyZWN0aW9uTGlnaHQgdV9kaXJlY3Rpb25MaWdodHNbRElSRUNUSU9OX0xJR0hUU19DT1VOVF07XFxuI2VuZGlmXFxuXCIsZnVuY0RlY2xhcmU6IFwiXCIsZnVuY0RlZmluZTogXCJcIixib2R5OiBcInZfd29ybGRQb3NpdGlvbiA9IHZlYzModV9tTWF0cml4ICogdmVjNChhX3Bvc2l0aW9uLCAxLjApKTtcXG5cIix9XG5wdWJsaWMgc3RhdGljIGxpZ2h0RW5kX2ZyYWdtZW50OkdMU0xDaHVuayA9IHt0b3A6IFwiXCIsZGVmaW5lOiBcIlwiLHZhckRlY2xhcmU6IFwiXCIsZnVuY0RlY2xhcmU6IFwiXCIsZnVuY0RlZmluZTogXCJcIixib2R5OiBcImdsX0ZyYWdDb2xvciA9IHZlYzQodG90YWxDb2xvci5yZ2IsIHRvdGFsQ29sb3IuYSAqIHVfb3BhY2l0eSk7XFxuXCIsfVxucHVibGljIHN0YXRpYyBsaWdodF9jb21tb246R0xTTENodW5rID0ge3RvcDogXCJcIixkZWZpbmU6IFwiXCIsdmFyRGVjbGFyZTogXCJcIixmdW5jRGVjbGFyZTogXCJ2ZWMzIGdldERpcmVjdGlvbkxpZ2h0RGlyQnlMaWdodFBvcyh2ZWMzIGxpZ2h0UG9zKTtcXG52ZWMzIGdldFBvaW50TGlnaHREaXJCeUxpZ2h0UG9zKHZlYzMgbGlnaHRQb3MpO1xcbnZlYzMgZ2V0UG9pbnRMaWdodERpckJ5TGlnaHRQb3ModmVjMyBsaWdodFBvcywgdmVjMyB3b3JsZFBvc2l0aW9uKTtcXG5cIixmdW5jRGVmaW5lOiBcInZlYzMgZ2V0RGlyZWN0aW9uTGlnaHREaXJCeUxpZ2h0UG9zKHZlYzMgbGlnaHRQb3Mpe1xcbiAgICByZXR1cm4gbGlnaHRQb3MgLSB2ZWMzKDAuMCk7XFxuICAgIC8vcmV0dXJuIHZlYzMoMC4wKSAtIGxpZ2h0UG9zO1xcbn1cXG52ZWMzIGdldFBvaW50TGlnaHREaXJCeUxpZ2h0UG9zKHZlYzMgbGlnaHRQb3Mpe1xcbiAgICByZXR1cm4gbGlnaHRQb3MgLSB2X3dvcmxkUG9zaXRpb247XFxufVxcbnZlYzMgZ2V0UG9pbnRMaWdodERpckJ5TGlnaHRQb3ModmVjMyBsaWdodFBvcywgdmVjMyB3b3JsZFBvc2l0aW9uKXtcXG4gICAgcmV0dXJuIGxpZ2h0UG9zIC0gd29ybGRQb3NpdGlvbjtcXG59XFxuXCIsYm9keTogXCJcIix9XG5wdWJsaWMgc3RhdGljIGxpZ2h0X2ZyYWdtZW50OkdMU0xDaHVuayA9IHt0b3A6IFwiXCIsZGVmaW5lOiBcIlwiLHZhckRlY2xhcmU6IFwiXCIsZnVuY0RlY2xhcmU6IFwiXCIsZnVuY0RlZmluZTogXCJmbG9hdCBnZXRCbGlublBob25nU2hpbmluZXNzKGZsb2F0IHNoaW5pbmVzcywgdmVjMyBub3JtYWwsIHZlYzMgbGlnaHREaXIsIHZlYzMgdmlld0RpciwgZmxvYXQgZG90UmVzdWx0QmV0d2Vlbk5vcm1BbmRMaWdodCl7XFxuICAgIHZlYzMgaGFsZkFuZ2xlID0gbm9ybWFsaXplKGxpZ2h0RGlyICsgdmlld0Rpcik7XFxuICAgIGZsb2F0IGJsaW5uVGVybSA9IGRvdChub3JtYWwsIGhhbGZBbmdsZSk7XFxuXFxuICAgIGJsaW5uVGVybSA9IGNsYW1wKGJsaW5uVGVybSwgMC4wLCAxLjApO1xcbiAgICBibGlublRlcm0gPSBkb3RSZXN1bHRCZXR3ZWVuTm9ybUFuZExpZ2h0IDwgMC4wID8gMC4wIDogYmxpbm5UZXJtO1xcbiAgICBibGlublRlcm0gPSBwb3coYmxpbm5UZXJtLCBzaGluaW5lc3MpO1xcblxcblx0cmV0dXJuIGJsaW5uVGVybTtcXG59XFxuXFxudmVjMyBjYWxjTGlnaHQodmVjMyBsaWdodERpciwgdmVjMyBjb2xvciwgZmxvYXQgaW50ZW5zaXR5LCBmbG9hdCBhdHRlbnVhdGlvbiwgdmVjMyBub3JtYWwsIHZlYzMgdmlld0RpcilcXG57XFxuICAgIHZlYzMgbWF0ZXJpYWxEaWZmdXNlID0gZ2V0TWF0ZXJpYWxEaWZmdXNlKCk7XFxuICAgIHZlYzMgbWF0ZXJpYWxTcGVjdWxhciA9IGdldE1hdGVyaWFsU3BlY3VsYXIoKTtcXG5cXG4gICAgZmxvYXQgZG90UmVzdWx0QmV0d2Vlbk5vcm1BbmRMaWdodCA9IGRvdChub3JtYWwsIGxpZ2h0RGlyKTtcXG4gICAgZmxvYXQgZGlmZiA9IG1heChkb3RSZXN1bHRCZXR3ZWVuTm9ybUFuZExpZ2h0LCAwLjApO1xcblxcblxcbiAgICB2ZWMzIGFtYmllbnRDb2xvciA9IHVfYW1iaWVudCAqIG1hdGVyaWFsRGlmZnVzZTtcXG5cXG4gICAgdmVjMyBkaWZmdXNlQ29sb3IgPSBkaWZmICogY29sb3IgKiBtYXRlcmlhbERpZmZ1c2UgKiBpbnRlbnNpdHk7XFxuXFxuXFxuICAgIGZsb2F0IHNwZWMgPSBnZXRCbGlublBob25nU2hpbmluZXNzKHVfc2hpbmluZXNzLCBub3JtYWwsIGxpZ2h0RGlyLCB2aWV3RGlyLCBkb3RSZXN1bHRCZXR3ZWVuTm9ybUFuZExpZ2h0KTtcXG5cXG4gICAgdmVjMyBzcGVjdWxhckNvbG9yID0gc3BlYyAqIG1hdGVyaWFsU3BlY3VsYXIgKiBpbnRlbnNpdHk7XFxuXFxuICAgIHJldHVybiAgYW1iaWVudENvbG9yICsgYXR0ZW51YXRpb24gKiAoZGlmZnVzZUNvbG9yICsgc3BlY3VsYXJDb2xvcik7XFxufVxcblxcblxcblxcblxcblxcbiNpZiBQT0lOVF9MSUdIVFNfQ09VTlQgPiAwXFxudmVjMyBjYWxjUG9pbnRMaWdodCh2ZWMzIGxpZ2h0RGlyLCBQb2ludExpZ2h0IGxpZ2h0LCB2ZWMzIG5vcm1hbCwgdmVjMyB2aWV3RGlyKVxcbntcXG4gICAgLy9saWdodERpciBpcyBub3Qgbm9ybWFsaXplIGNvbXB1dGluZyBkaXN0YW5jZVxcbiAgICBmbG9hdCBkaXN0YW5jZSA9IGxlbmd0aChsaWdodERpcik7XFxuXFxuICAgIGZsb2F0IGF0dGVudWF0aW9uID0gMC4wO1xcbiAgICBpZihkaXN0YW5jZSA8IGxpZ2h0LnJhbmdlKVxcbiAgICB7XFxuICAgICAgICBhdHRlbnVhdGlvbiA9IDEuMCAvIChsaWdodC5jb25zdGFudCArIGxpZ2h0LmxpbmVhciAqIGRpc3RhbmNlICsgbGlnaHQucXVhZHJhdGljICogKGRpc3RhbmNlICogZGlzdGFuY2UpKTtcXG4gICAgfVxcblxcbiAgICBsaWdodERpciA9IG5vcm1hbGl6ZShsaWdodERpcik7XFxuXFxuICAgIHJldHVybiBjYWxjTGlnaHQobGlnaHREaXIsIGxpZ2h0LmNvbG9yLCBsaWdodC5pbnRlbnNpdHksIGF0dGVudWF0aW9uLCBub3JtYWwsIHZpZXdEaXIpO1xcbn1cXG4jZW5kaWZcXG5cXG5cXG5cXG4jaWYgRElSRUNUSU9OX0xJR0hUU19DT1VOVCA+IDBcXG52ZWMzIGNhbGNEaXJlY3Rpb25MaWdodCh2ZWMzIGxpZ2h0RGlyLCBEaXJlY3Rpb25MaWdodCBsaWdodCwgdmVjMyBub3JtYWwsIHZlYzMgdmlld0RpcilcXG57XFxuICAgIGZsb2F0IGF0dGVudWF0aW9uID0gMS4wO1xcblxcbiAgICBsaWdodERpciA9IG5vcm1hbGl6ZShsaWdodERpcik7XFxuXFxuICAgIHJldHVybiBjYWxjTGlnaHQobGlnaHREaXIsIGxpZ2h0LmNvbG9yLCBsaWdodC5pbnRlbnNpdHksIGF0dGVudWF0aW9uLCBub3JtYWwsIHZpZXdEaXIpO1xcbn1cXG4jZW5kaWZcXG5cXG5cXG5cXG52ZWMzIGNhbGNUb3RhbExpZ2h0KHZlYzMgbm9ybSwgdmVjMyB2aWV3RGlyKXtcXG4gICAgdmVjMyB0b3RhbExpZ2h0ID0gdmVjMygwLjApO1xcblxcbiAgICAjaWYgUE9JTlRfTElHSFRTX0NPVU5UID4gMFxcbiAgICAgICBmb3IoaW50IGkgPSAwOyBpIDwgUE9JTlRfTElHSFRTX0NPVU5UOyBpKyspe1xcbiAgICAgICAgICAgIHRvdGFsTGlnaHQgKz0gY2FsY1BvaW50TGlnaHQoZ2V0UG9pbnRMaWdodERpcihpKSwgdV9wb2ludExpZ2h0c1tpXSwgbm9ybSwgdmlld0Rpcik7XFxuICAgICAgIH1cXG4gICAgI2VuZGlmXFxuXFxuICAgICNpZiBESVJFQ1RJT05fTElHSFRTX0NPVU5UID4gMFxcbiAgICAgICBmb3IoaW50IGkgPSAwOyBpIDwgRElSRUNUSU9OX0xJR0hUU19DT1VOVDsgaSsrKXtcXG4gICAgICAgICAgICB0b3RhbExpZ2h0ICs9IGNhbGNEaXJlY3Rpb25MaWdodChnZXREaXJlY3Rpb25MaWdodERpcihpKSwgdV9kaXJlY3Rpb25MaWdodHNbaV0sIG5vcm0sIHZpZXdEaXIpO1xcbiAgICAgICB9XFxuICAgICNlbmRpZlxcblxcbiAgICByZXR1cm4gdG90YWxMaWdodDtcXG59XFxuXCIsYm9keTogXCJ2ZWMzIG5vcm1hbCA9IG5vcm1hbGl6ZShnZXROb3JtYWwoKSk7XFxuXFxuXHQjaWZkZWYgQk9USF9TSURFXFxuXHRcdG5vcm1hbCA9IG5vcm1hbCAqICgtMS4wICsgMi4wICogZmxvYXQoZ2xfRnJvbnRGYWNpbmcpKTtcXG5cdCNlbmRpZlxcblxcbiAgICB2ZWMzIHZpZXdEaXIgPSBub3JtYWxpemUoZ2V0Vmlld0RpcigpKTtcXG5cXG4gICAgdmVjNCB0b3RhbENvbG9yID0gdmVjNChjYWxjVG90YWxMaWdodChub3JtYWwsIHZpZXdEaXIpLCAxLjApO1xcblxcbiAgICB0b3RhbENvbG9yICo9IHZlYzQoZ2V0U2hhZG93VmlzaWJpbGl0eSgpLCAxLjApO1xcblwiLH1cbnB1YmxpYyBzdGF0aWMgbGlnaHRfdmVydGV4OkdMU0xDaHVuayA9IHt0b3A6IFwiXCIsZGVmaW5lOiBcIlwiLHZhckRlY2xhcmU6IFwiXCIsZnVuY0RlY2xhcmU6IFwiXCIsZnVuY0RlZmluZTogXCJcIixib2R5OiBcImdsX1Bvc2l0aW9uID0gdV9wTWF0cml4ICogdV92TWF0cml4ICogdmVjNCh2X3dvcmxkUG9zaXRpb24sIDEuMCk7XFxuXCIsfVxucHVibGljIHN0YXRpYyBtaXJyb3JfZm9yQmFzaWNfZnJhZ21lbnQ6R0xTTENodW5rID0ge3RvcDogXCJcIixkZWZpbmU6IFwiXCIsdmFyRGVjbGFyZTogXCJ2YXJ5aW5nIHZlYzQgdl9taXJyb3JDb29yZDtcXG5cIixmdW5jRGVjbGFyZTogXCJcIixmdW5jRGVmaW5lOiBcIi8vdG9kbyBhZGQgbW9yZSBibGVuZCB3YXkgdG8gbWl4IG1pcnJvciBjb2xvciBhbmQgdGV4dHVyZUNvbG9yXFxuXHRcdGZsb2F0IGJsZW5kT3ZlcmxheShmbG9hdCBiYXNlLCBmbG9hdCBibGVuZCkge1xcblx0XHRcdHJldHVybiggYmFzZSA8IDAuNSA/ICggMi4wICogYmFzZSAqIGJsZW5kICkgOiAoMS4wIC0gMi4wICogKCAxLjAgLSBiYXNlICkgKiAoIDEuMCAtIGJsZW5kICkgKSApO1xcblx0XHR9XFxuXHRcdHZlYzQgZ2V0TWlycm9yQ29sb3IoaW4gdmVjNCBtYXRlcmlhbENvbG9yKXtcXG5cdFx0XHR2ZWM0IGNvbG9yID0gdGV4dHVyZTJEUHJvaih1X21pcnJvclNhbXBsZXIsIHZfbWlycm9yQ29vcmQpO1xcblxcblx0XHRcdGNvbG9yID0gdmVjNChibGVuZE92ZXJsYXkobWF0ZXJpYWxDb2xvci5yLCBjb2xvci5yKSwgYmxlbmRPdmVybGF5KG1hdGVyaWFsQ29sb3IuZywgY29sb3IuZyksIGJsZW5kT3ZlcmxheShtYXRlcmlhbENvbG9yLmIsIGNvbG9yLmIpLCAxLjApO1xcblxcblx0XHRcdHJldHVybiBjb2xvcjtcXG5cdFx0fVxcblwiLGJvZHk6IFwidG90YWxDb2xvciA9IGdldE1pcnJvckNvbG9yKHRvdGFsQ29sb3IpO1xcblwiLH1cbnB1YmxpYyBzdGF0aWMgbWlycm9yX2ZvckJhc2ljX3ZlcnRleDpHTFNMQ2h1bmsgPSB7dG9wOiBcIlwiLGRlZmluZTogXCJcIix2YXJEZWNsYXJlOiBcInZhcnlpbmcgdmVjNCB2X21pcnJvckNvb3JkO1xcblwiLGZ1bmNEZWNsYXJlOiBcIlwiLGZ1bmNEZWZpbmU6IFwiXCIsYm9keTogXCJtYXQ0IHRleHR1cmVNYXRyaXggPSBtYXQ0KFxcbiAgICAgICAgICAgICAgICAgICAgICAgIDAuNSwgMC4wLCAwLjAsIDAuMCxcXG4gICAgICAgICAgICAgICAgICAgICAgICAwLjAsIDAuNSwgMC4wLCAwLjAsXFxuICAgICAgICAgICAgICAgICAgICAgICAgMC4wLCAwLjAsIDAuNSwgMC4wLFxcbiAgICAgICAgICAgICAgICAgICAgICAgIDAuNSwgMC41LCAwLjUsIDEuMFxcbik7XFxuXFxudl9taXJyb3JDb29yZCA9IHRleHR1cmVNYXRyaXggKiBnbF9Qb3NpdGlvbjtcXG5cIix9XG5wdWJsaWMgc3RhdGljIHNreWJveF9mcmFnbWVudDpHTFNMQ2h1bmsgPSB7dG9wOiBcIlwiLGRlZmluZTogXCJcIix2YXJEZWNsYXJlOiBcInZhcnlpbmcgdmVjMyB2X2RpcjtcXG5cIixmdW5jRGVjbGFyZTogXCJcIixmdW5jRGVmaW5lOiBcIlwiLGJvZHk6IFwiZ2xfRnJhZ0NvbG9yID0gdGV4dHVyZUN1YmUodV9zYW1wbGVyQ3ViZTAsIHZfZGlyKTtcXG5cIix9XG5wdWJsaWMgc3RhdGljIHNreWJveF92ZXJ0ZXg6R0xTTENodW5rID0ge3RvcDogXCJcIixkZWZpbmU6IFwiXCIsdmFyRGVjbGFyZTogXCJ2YXJ5aW5nIHZlYzMgdl9kaXI7XFxuXCIsZnVuY0RlY2xhcmU6IFwiXCIsZnVuY0RlZmluZTogXCJcIixib2R5OiBcInZlYzQgcG9zID0gdV9wTWF0cml4ICogbWF0NChtYXQzKHVfdk1hdHJpeCkpICogdV9tTWF0cml4ICogdmVjNChhX3Bvc2l0aW9uLCAxLjApO1xcblxcbiAgICBnbF9Qb3NpdGlvbiA9IHBvcy54eXd3O1xcblxcbiAgICB2X2RpciA9IGFfcG9zaXRpb247XFxuXCIsfVxucHVibGljIHN0YXRpYyBiYXNpY19lbnZNYXBfZm9yQmFzaWNfZnJhZ21lbnQ6R0xTTENodW5rID0ge3RvcDogXCJcIixkZWZpbmU6IFwiXCIsdmFyRGVjbGFyZTogXCJ2YXJ5aW5nIHZlYzMgdl9kaXI7XFxuXCIsZnVuY0RlY2xhcmU6IFwiXCIsZnVuY0RlZmluZTogXCJcIixib2R5OiBcInRvdGFsQ29sb3IgKj0gdGV4dHVyZUN1YmUodV9zYW1wbGVyQ3ViZTAsIHZfZGlyKTtcXG5cIix9XG5wdWJsaWMgc3RhdGljIGJhc2ljX2Vudk1hcF9mb3JCYXNpY192ZXJ0ZXg6R0xTTENodW5rID0ge3RvcDogXCJcIixkZWZpbmU6IFwiXCIsdmFyRGVjbGFyZTogXCJ2YXJ5aW5nIHZlYzMgdl9kaXI7XFxuXCIsZnVuY0RlY2xhcmU6IFwiXCIsZnVuY0RlZmluZTogXCJcIixib2R5OiBcInZfZGlyID0gYV9wb3NpdGlvbjtcXG5cIix9XG5wdWJsaWMgc3RhdGljIGVudk1hcF9mb3JCYXNpY19mcmFnbWVudDpHTFNMQ2h1bmsgPSB7dG9wOiBcIlwiLGRlZmluZTogXCJcIix2YXJEZWNsYXJlOiBcInZhcnlpbmcgdmVjMyB2X25vcm1hbDtcXG52YXJ5aW5nIHZlYzMgdl9wb3NpdGlvbjtcXG5cIixmdW5jRGVjbGFyZTogXCJcIixmdW5jRGVmaW5lOiBcIlwiLGJvZHk6IFwidmVjMyBpbkRpciA9IG5vcm1hbGl6ZSh2X3Bvc2l0aW9uIC0gdV9jYW1lcmFQb3MpO1xcblwiLH1cbnB1YmxpYyBzdGF0aWMgZW52TWFwX2ZvckJhc2ljX3ZlcnRleDpHTFNMQ2h1bmsgPSB7dG9wOiBcIlwiLGRlZmluZTogXCJcIix2YXJEZWNsYXJlOiBcInZhcnlpbmcgdmVjMyB2X25vcm1hbDtcXG52YXJ5aW5nIHZlYzMgdl9wb3NpdGlvbjtcXG5cIixmdW5jRGVjbGFyZTogXCJcIixmdW5jRGVmaW5lOiBcIlwiLGJvZHk6IFwidl9ub3JtYWwgPSBub3JtYWxpemUoIHVfbm9ybWFsTWF0cml4ICogYV9ub3JtYWwpO1xcbiAgICB2X3Bvc2l0aW9uID0gdmVjMyh1X21NYXRyaXggKiB2ZWM0KGFfcG9zaXRpb24sIDEuMCkpO1xcblwiLH1cbnB1YmxpYyBzdGF0aWMgZnJlc25lbF9mb3JCYXNpY19mcmFnbWVudDpHTFNMQ2h1bmsgPSB7dG9wOiBcIlwiLGRlZmluZTogXCJcIix2YXJEZWNsYXJlOiBcIlwiLGZ1bmNEZWNsYXJlOiBcIlwiLGZ1bmNEZWZpbmU6IFwiZmxvYXQgY29tcHV0ZUZyZXNuZWxSYXRpbyh2ZWMzIGluRGlyLCB2ZWMzIG5vcm1hbCwgZmxvYXQgcmVmcmFjdGlvblJhdGlvKXtcXG4gICAgZmxvYXQgZiA9IHBvdygxLjAgLSByZWZyYWN0aW9uUmF0aW8sIDIuMCkgLyBwb3coMS4wICsgcmVmcmFjdGlvblJhdGlvLCAyLjApO1xcbiAgICBmbG9hdCBmcmVzbmVsUG93ZXIgPSA1LjA7XFxuICAgIGZsb2F0IHJhdGlvID0gZiArICgxLjAgLSBmKSAqIHBvdygoMS4wIC0gZG90KGluRGlyLCBub3JtYWwpKSwgZnJlc25lbFBvd2VyKTtcXG5cXG4gICAgcmV0dXJuIHJhdGlvIC8gMTAwLjA7XFxufVxcbnZlYzQgZ2V0RW52TWFwVG90YWxDb2xvcih2ZWMzIGluRGlyLCB2ZWMzIG5vcm1hbCl7XFxuICAgIHZlYzMgcmVmbGVjdERpciA9IHJlZmxlY3QoaW5EaXIsIG5vcm1hbCk7XFxuICAgIHZlYzMgcmVmcmFjdERpciA9IHJlZnJhY3QoaW5EaXIsIG5vcm1hbCwgdV9yZWZyYWN0aW9uUmF0aW8pO1xcblxcbiAgICB2ZWM0IHJlZmxlY3RDb2xvciA9IHRleHR1cmVDdWJlKHVfc2FtcGxlckN1YmUwLCByZWZsZWN0RGlyKTtcXG4gICAgdmVjNCByZWZyYWN0Q29sb3IgPSB0ZXh0dXJlQ3ViZSh1X3NhbXBsZXJDdWJlMCwgcmVmcmFjdERpcik7XFxuXFxuICAgIHZlYzQgdG90YWxDb2xvciA9IHZlYzQoMC4wKTtcXG5cXG5cdGlmKHVfcmVmbGVjdGl2aXR5ICE9IE5VTEwpe1xcbiAgICAgICAgdG90YWxDb2xvciA9IG1peChyZWZsZWN0Q29sb3IsIHJlZnJhY3RDb2xvciwgdV9yZWZsZWN0aXZpdHkpO1xcblx0fVxcblx0ZWxzZXtcXG4gICAgICAgIHRvdGFsQ29sb3IgPSBtaXgocmVmbGVjdENvbG9yLCByZWZyYWN0Q29sb3IsIGNvbXB1dGVGcmVzbmVsUmF0aW8oaW5EaXIsIG5vcm1hbCwgdV9yZWZyYWN0aW9uUmF0aW8pKTtcXG5cdH1cXG5cXG5cdHJldHVybiB0b3RhbENvbG9yO1xcbn1cXG5cIixib2R5OiBcInRvdGFsQ29sb3IgKj0gZ2V0RW52TWFwVG90YWxDb2xvcihpbkRpciwgbm9ybWFsaXplKHZfbm9ybWFsKSk7XFxuXCIsfVxucHVibGljIHN0YXRpYyByZWZsZWN0aW9uX2ZvckJhc2ljX2ZyYWdtZW50OkdMU0xDaHVuayA9IHt0b3A6IFwiXCIsZGVmaW5lOiBcIlwiLHZhckRlY2xhcmU6IFwiXCIsZnVuY0RlY2xhcmU6IFwiXCIsZnVuY0RlZmluZTogXCJcIixib2R5OiBcInRvdGFsQ29sb3IgKj0gdGV4dHVyZUN1YmUodV9zYW1wbGVyQ3ViZTAsIHJlZmxlY3QoaW5EaXIsIG5vcm1hbGl6ZSh2X25vcm1hbCkpKTtcXG5cIix9XG5wdWJsaWMgc3RhdGljIHJlZnJhY3Rpb25fZm9yQmFzaWNfZnJhZ21lbnQ6R0xTTENodW5rID0ge3RvcDogXCJcIixkZWZpbmU6IFwiXCIsdmFyRGVjbGFyZTogXCJcIixmdW5jRGVjbGFyZTogXCJcIixmdW5jRGVmaW5lOiBcIlwiLGJvZHk6IFwidG90YWxDb2xvciAqPSB0ZXh0dXJlQ3ViZSh1X3NhbXBsZXJDdWJlMCwgcmVmcmFjdChpbkRpciwgbm9ybWFsaXplKHZfbm9ybWFsKSwgdV9yZWZyYWN0aW9uUmF0aW8pKTtcXG5cIix9XG5wdWJsaWMgc3RhdGljIGJhc2ljX2Vudk1hcF9mb3JMaWdodF9mcmFnbWVudDpHTFNMQ2h1bmsgPSB7dG9wOiBcIlwiLGRlZmluZTogXCJcIix2YXJEZWNsYXJlOiBcInZhcnlpbmcgdmVjMyB2X2Jhc2ljRW52TWFwX2RpcjtcXG5cIixmdW5jRGVjbGFyZTogXCJcIixmdW5jRGVmaW5lOiBcIlwiLGJvZHk6IFwidG90YWxDb2xvciAqPSB0ZXh0dXJlQ3ViZSh1X3NhbXBsZXJDdWJlMCwgdl9iYXNpY0Vudk1hcF9kaXIpO1xcblwiLH1cbnB1YmxpYyBzdGF0aWMgYmFzaWNfZW52TWFwX2ZvckxpZ2h0X3ZlcnRleDpHTFNMQ2h1bmsgPSB7dG9wOiBcIlwiLGRlZmluZTogXCJcIix2YXJEZWNsYXJlOiBcInZhcnlpbmcgdmVjMyB2X2Jhc2ljRW52TWFwX2RpcjtcXG5cIixmdW5jRGVjbGFyZTogXCJcIixmdW5jRGVmaW5lOiBcIlwiLGJvZHk6IFwidl9iYXNpY0Vudk1hcF9kaXIgPSBhX3Bvc2l0aW9uO1xcblwiLH1cbnB1YmxpYyBzdGF0aWMgZW52TWFwX2ZvckxpZ2h0X2ZyYWdtZW50OkdMU0xDaHVuayA9IHt0b3A6IFwiXCIsZGVmaW5lOiBcIlwiLHZhckRlY2xhcmU6IFwiXCIsZnVuY0RlY2xhcmU6IFwiXCIsZnVuY0RlZmluZTogXCJcIixib2R5OiBcInZlYzMgaW5EaXIgPSBub3JtYWxpemUodl93b3JsZFBvc2l0aW9uIC0gdV9jYW1lcmFQb3MpO1xcblwiLH1cbnB1YmxpYyBzdGF0aWMgZW52TWFwX2ZvckxpZ2h0X3ZlcnRleDpHTFNMQ2h1bmsgPSB7dG9wOiBcIlwiLGRlZmluZTogXCJcIix2YXJEZWNsYXJlOiBcIlwiLGZ1bmNEZWNsYXJlOiBcIlwiLGZ1bmNEZWZpbmU6IFwiXCIsYm9keTogXCJcIix9XG5wdWJsaWMgc3RhdGljIGZyZXNuZWxfZm9yTGlnaHRfZnJhZ21lbnQ6R0xTTENodW5rID0ge3RvcDogXCJcIixkZWZpbmU6IFwiXCIsdmFyRGVjbGFyZTogXCJcIixmdW5jRGVjbGFyZTogXCJcIixmdW5jRGVmaW5lOiBcImZsb2F0IGNvbXB1dGVGcmVzbmVsUmF0aW8odmVjMyBpbkRpciwgdmVjMyBub3JtYWwsIGZsb2F0IHJlZnJhY3Rpb25SYXRpbyl7XFxuICAgIGZsb2F0IGYgPSBwb3coMS4wIC0gcmVmcmFjdGlvblJhdGlvLCAyLjApIC8gcG93KDEuMCArIHJlZnJhY3Rpb25SYXRpbywgMi4wKTtcXG4gICAgZmxvYXQgZnJlc25lbFBvd2VyID0gNS4wO1xcbiAgICBmbG9hdCByYXRpbyA9IGYgKyAoMS4wIC0gZikgKiBwb3coKDEuMCAtIGRvdChpbkRpciwgbm9ybWFsKSksIGZyZXNuZWxQb3dlcik7XFxuXFxuICAgIHJldHVybiByYXRpbyAvIDEwMC4wO1xcbn1cXG5cXG52ZWM0IGdldEVudk1hcFRvdGFsQ29sb3IodmVjMyBpbkRpciwgdmVjMyBub3JtYWwpe1xcbiAgICB2ZWMzIHJlZmxlY3REaXIgPSByZWZsZWN0KGluRGlyLCBub3JtYWwpO1xcbiAgICB2ZWMzIHJlZnJhY3REaXIgPSByZWZyYWN0KGluRGlyLCBub3JtYWwsIHVfcmVmcmFjdGlvblJhdGlvKTtcXG5cXG4gICAgdmVjNCByZWZsZWN0Q29sb3IgPSB0ZXh0dXJlQ3ViZSh1X3NhbXBsZXJDdWJlMCwgcmVmbGVjdERpcik7XFxuICAgIHZlYzQgcmVmcmFjdENvbG9yID0gdGV4dHVyZUN1YmUodV9zYW1wbGVyQ3ViZTAsIHJlZnJhY3REaXIpO1xcblxcbiAgICB2ZWM0IHRvdGFsQ29sb3IgPSB2ZWM0KDAuMCk7XFxuXFxuXHRpZih1X3JlZmxlY3Rpdml0eSAhPSBOVUxMKXtcXG4gICAgICAgIHRvdGFsQ29sb3IgPSBtaXgocmVmbGVjdENvbG9yLCByZWZyYWN0Q29sb3IsIHVfcmVmbGVjdGl2aXR5KTtcXG5cdH1cXG5cdGVsc2V7XFxuICAgICAgICB0b3RhbENvbG9yID0gbWl4KHJlZmxlY3RDb2xvciwgcmVmcmFjdENvbG9yLCBjb21wdXRlRnJlc25lbFJhdGlvKGluRGlyLCBub3JtYWwsIHVfcmVmcmFjdGlvblJhdGlvKSk7XFxuXHR9XFxuXFxuXHRyZXR1cm4gdG90YWxDb2xvcjtcXG59XFxuXCIsYm9keTogXCJ0b3RhbENvbG9yICo9IGdldEVudk1hcFRvdGFsQ29sb3IoaW5EaXIsIG5vcm1hbGl6ZShnZXROb3JtYWwoKSkpO1xcblwiLH1cbnB1YmxpYyBzdGF0aWMgcmVmbGVjdGlvbl9mb3JMaWdodF9mcmFnbWVudDpHTFNMQ2h1bmsgPSB7dG9wOiBcIlwiLGRlZmluZTogXCJcIix2YXJEZWNsYXJlOiBcIlwiLGZ1bmNEZWNsYXJlOiBcIlwiLGZ1bmNEZWZpbmU6IFwiXCIsYm9keTogXCJ0b3RhbENvbG9yICo9IHRleHR1cmVDdWJlKHVfc2FtcGxlckN1YmUwLCByZWZsZWN0KGluRGlyLCBub3JtYWxpemUoZ2V0Tm9ybWFsKCkpKSk7XFxuXCIsfVxucHVibGljIHN0YXRpYyByZWZyYWN0aW9uX2ZvckxpZ2h0X2ZyYWdtZW50OkdMU0xDaHVuayA9IHt0b3A6IFwiXCIsZGVmaW5lOiBcIlwiLHZhckRlY2xhcmU6IFwiXCIsZnVuY0RlY2xhcmU6IFwiXCIsZnVuY0RlZmluZTogXCJcIixib2R5OiBcInRvdGFsQ29sb3IgKj0gdGV4dHVyZUN1YmUodV9zYW1wbGVyQ3ViZTAsIHJlZnJhY3QoaW5EaXIsIGdldE5vcm1hbCgpLCB1X3JlZnJhY3Rpb25SYXRpbykpO1xcblwiLH1cbnB1YmxpYyBzdGF0aWMgZGlmZnVzZU1hcF9mcmFnbWVudDpHTFNMQ2h1bmsgPSB7dG9wOiBcIlwiLGRlZmluZTogXCJcIix2YXJEZWNsYXJlOiBcInZhcnlpbmcgdmVjMiB2X2RpZmZ1c2VNYXBUZXhDb29yZDtcXG5cIixmdW5jRGVjbGFyZTogXCJcIixmdW5jRGVmaW5lOiBcInZlYzMgZ2V0TWF0ZXJpYWxEaWZmdXNlKCkge1xcbiAgICAgICAgcmV0dXJuIHZlYzModGV4dHVyZTJEKHVfZGlmZnVzZU1hcFNhbXBsZXIsIHZfZGlmZnVzZU1hcFRleENvb3JkKSk7XFxuICAgIH1cXG5cIixib2R5OiBcIlwiLH1cbnB1YmxpYyBzdGF0aWMgZGlmZnVzZU1hcF92ZXJ0ZXg6R0xTTENodW5rID0ge3RvcDogXCJcIixkZWZpbmU6IFwiXCIsdmFyRGVjbGFyZTogXCJ2YXJ5aW5nIHZlYzIgdl9kaWZmdXNlTWFwVGV4Q29vcmQ7XFxuXCIsZnVuY0RlY2xhcmU6IFwiXCIsZnVuY0RlZmluZTogXCJcIixib2R5OiBcInZlYzIgc291cmNlVGV4Q29vcmQgPSBhX3RleENvb3JkICogdV9zb3VyY2VSZWdpb24uencgKyB1X3NvdXJjZVJlZ2lvbi54eTtcXG4gICAgdl9kaWZmdXNlTWFwVGV4Q29vcmQgPSBzb3VyY2VUZXhDb29yZCAqIHVfcmVwZWF0UmVnaW9uLnp3ICsgdV9yZXBlYXRSZWdpb24ueHk7XFxuICAgIC8vdl9kaWZmdXNlTWFwVGV4Q29vcmQgPSBhX3RleENvb3JkO1xcblwiLH1cbnB1YmxpYyBzdGF0aWMgbm9EaWZmdXNlTWFwX2ZyYWdtZW50OkdMU0xDaHVuayA9IHt0b3A6IFwiXCIsZGVmaW5lOiBcIlwiLHZhckRlY2xhcmU6IFwiXCIsZnVuY0RlY2xhcmU6IFwiXCIsZnVuY0RlZmluZTogXCJ2ZWMzIGdldE1hdGVyaWFsRGlmZnVzZSgpIHtcXG4gICAgICAgIHJldHVybiB1X2RpZmZ1c2U7XFxuICAgIH1cXG5cIixib2R5OiBcIlwiLH1cbnB1YmxpYyBzdGF0aWMgbm9Ob3JtYWxNYXBfZnJhZ21lbnQ6R0xTTENodW5rID0ge3RvcDogXCJcIixkZWZpbmU6IFwiXCIsdmFyRGVjbGFyZTogXCJ2YXJ5aW5nIHZlYzMgdl9ub3JtYWw7XFxuXCIsZnVuY0RlY2xhcmU6IFwidmVjMyBnZXROb3JtYWwoKTtcXG5cXG5cIixmdW5jRGVmaW5lOiBcIiNpZiBQT0lOVF9MSUdIVFNfQ09VTlQgPiAwXFxudmVjMyBnZXRQb2ludExpZ2h0RGlyKGludCBpbmRleCl7XFxuICAgIC8vd29ya2Fyb3VuZCAnW10gOiBJbmRleCBleHByZXNzaW9uIG11c3QgYmUgY29uc3RhbnQnIGVycm9yXFxuICAgIGZvciAoaW50IHggPSAwOyB4IDw9IFBPSU5UX0xJR0hUU19DT1VOVDsgeCsrKSB7XFxuICAgICAgICBpZih4ID09IGluZGV4KXtcXG4gICAgICAgICAgICByZXR1cm4gZ2V0UG9pbnRMaWdodERpckJ5TGlnaHRQb3ModV9wb2ludExpZ2h0c1t4XS5wb3NpdGlvbik7XFxuICAgICAgICB9XFxuICAgIH1cXG4gICAgLyohXFxuICAgIHNvbHZlIGVycm9yIGluIHdpbmRvdzcgY2hyb21lL2ZpcmVmb3g6XFxuICAgIG5vdCBhbGwgY29udHJvbCBwYXRocyByZXR1cm4gYSB2YWx1ZS5cXG4gICAgZmFpbGVkIHRvIGNyZWF0ZSBkM2Qgc2hhZGVyc1xcbiAgICAqL1xcbiAgICByZXR1cm4gdmVjMygwLjApO1xcbn1cXG4jZW5kaWZcXG5cXG4jaWYgRElSRUNUSU9OX0xJR0hUU19DT1VOVCA+IDBcXG52ZWMzIGdldERpcmVjdGlvbkxpZ2h0RGlyKGludCBpbmRleCl7XFxuICAgIC8vd29ya2Fyb3VuZCAnW10gOiBJbmRleCBleHByZXNzaW9uIG11c3QgYmUgY29uc3RhbnQnIGVycm9yXFxuICAgIGZvciAoaW50IHggPSAwOyB4IDw9IERJUkVDVElPTl9MSUdIVFNfQ09VTlQ7IHgrKykge1xcbiAgICAgICAgaWYoeCA9PSBpbmRleCl7XFxuICAgICAgICAgICAgcmV0dXJuIGdldERpcmVjdGlvbkxpZ2h0RGlyQnlMaWdodFBvcyh1X2RpcmVjdGlvbkxpZ2h0c1t4XS5wb3NpdGlvbik7XFxuICAgICAgICB9XFxuICAgIH1cXG5cXG4gICAgLyohXFxuICAgIHNvbHZlIGVycm9yIGluIHdpbmRvdzcgY2hyb21lL2ZpcmVmb3g6XFxuICAgIG5vdCBhbGwgY29udHJvbCBwYXRocyByZXR1cm4gYSB2YWx1ZS5cXG4gICAgZmFpbGVkIHRvIGNyZWF0ZSBkM2Qgc2hhZGVyc1xcbiAgICAqL1xcbiAgICByZXR1cm4gdmVjMygwLjApO1xcbn1cXG4jZW5kaWZcXG5cXG5cXG52ZWMzIGdldFZpZXdEaXIoKXtcXG4gICAgcmV0dXJuIG5vcm1hbGl6ZSh1X2NhbWVyYVBvcyAtIHZfd29ybGRQb3NpdGlvbik7XFxufVxcbnZlYzMgZ2V0Tm9ybWFsKCl7XFxuICAgIHJldHVybiB2X25vcm1hbDtcXG59XFxuXFxuXCIsYm9keTogXCJcIix9XG5wdWJsaWMgc3RhdGljIG5vTm9ybWFsTWFwX3ZlcnRleDpHTFNMQ2h1bmsgPSB7dG9wOiBcIlwiLGRlZmluZTogXCJcIix2YXJEZWNsYXJlOiBcInZhcnlpbmcgdmVjMyB2X25vcm1hbDtcXG5cIixmdW5jRGVjbGFyZTogXCJcIixmdW5jRGVmaW5lOiBcIlwiLGJvZHk6IFwiLy92X25vcm1hbCA9IG5vcm1hbGl6ZSggdmVjMyh1X25vcm1hbE1hdHJpeCAqIHZlYzQoYV9ub3JtYWwsIDEuMCkpKTtcXG4gICAgdl9ub3JtYWwgPSBub3JtYWxpemUoIHVfbm9ybWFsTWF0cml4ICogYV9ub3JtYWwpO1xcblwiLH1cbnB1YmxpYyBzdGF0aWMgbm9TcGVjdWxhck1hcF9mcmFnbWVudDpHTFNMQ2h1bmsgPSB7dG9wOiBcIlwiLGRlZmluZTogXCJcIix2YXJEZWNsYXJlOiBcIlwiLGZ1bmNEZWNsYXJlOiBcIlwiLGZ1bmNEZWZpbmU6IFwidmVjMyBnZXRNYXRlcmlhbFNwZWN1bGFyKCkge1xcbiAgICAgICAgcmV0dXJuIHVfc3BlY3VsYXI7XFxuICAgIH1cXG5cIixib2R5OiBcIlwiLH1cbnB1YmxpYyBzdGF0aWMgbm9ybWFsTWFwX2ZyYWdtZW50OkdMU0xDaHVuayA9IHt0b3A6IFwiXCIsZGVmaW5lOiBcIlwiLHZhckRlY2xhcmU6IFwidmFyeWluZyB2ZWMyIHZfbm9ybWFsTWFwVGV4Q29vcmQ7XFxudmFyeWluZyB2ZWMzIHZfdmlld0RpcjtcXG4jaWYgUE9JTlRfTElHSFRTX0NPVU5UID4gMFxcbnZhcnlpbmcgdmVjMyB2X3BvaW50TGlnaHREaXJbUE9JTlRfTElHSFRTX0NPVU5UXTtcXG4jZW5kaWZcXG5cXG4jaWYgRElSRUNUSU9OX0xJR0hUU19DT1VOVCA+IDBcXG52YXJ5aW5nIHZlYzMgdl9kaXJlY3Rpb25MaWdodERpcltESVJFQ1RJT05fTElHSFRTX0NPVU5UXTtcXG4jZW5kaWZcXG5cXG5cIixmdW5jRGVjbGFyZTogXCJ2ZWMzIGdldE5vcm1hbCgpO1xcblxcbnZlYzMgZ2V0TGlnaHREaXIodmVjMyBsaWdodFBvcyk7XFxuXFxuXCIsZnVuY0RlZmluZTogXCIjaWYgUE9JTlRfTElHSFRTX0NPVU5UID4gMFxcbnZlYzMgZ2V0UG9pbnRMaWdodERpcihpbnQgaW5kZXgpe1xcbiAgICAvL3dvcmthcm91bmQgJ1tdIDogSW5kZXggZXhwcmVzc2lvbiBtdXN0IGJlIGNvbnN0YW50JyBlcnJvclxcbiAgICBmb3IgKGludCB4ID0gMDsgeCA8PSBQT0lOVF9MSUdIVFNfQ09VTlQ7IHgrKykge1xcbiAgICAgICAgaWYoeCA9PSBpbmRleCl7XFxuICAgICAgICAgICAgcmV0dXJuIHZfcG9pbnRMaWdodERpclt4XTtcXG4gICAgICAgIH1cXG4gICAgfVxcbiAgICAvKiFcXG4gICAgc29sdmUgZXJyb3IgaW4gd2luZG93NyBjaHJvbWUvZmlyZWZveDpcXG4gICAgbm90IGFsbCBjb250cm9sIHBhdGhzIHJldHVybiBhIHZhbHVlLlxcbiAgICBmYWlsZWQgdG8gY3JlYXRlIGQzZCBzaGFkZXJzXFxuICAgICovXFxuICAgIHJldHVybiB2ZWMzKDAuMCk7XFxufVxcbiNlbmRpZlxcblxcbiNpZiBESVJFQ1RJT05fTElHSFRTX0NPVU5UID4gMFxcblxcbnZlYzMgZ2V0RGlyZWN0aW9uTGlnaHREaXIoaW50IGluZGV4KXtcXG4gICAgLy93b3JrYXJvdW5kICdbXSA6IEluZGV4IGV4cHJlc3Npb24gbXVzdCBiZSBjb25zdGFudCcgZXJyb3JcXG4gICAgZm9yIChpbnQgeCA9IDA7IHggPD0gRElSRUNUSU9OX0xJR0hUU19DT1VOVDsgeCsrKSB7XFxuICAgICAgICBpZih4ID09IGluZGV4KXtcXG4gICAgICAgICAgICByZXR1cm4gdl9kaXJlY3Rpb25MaWdodERpclt4XTtcXG4gICAgICAgIH1cXG4gICAgfVxcblxcbiAgICAvKiFcXG4gICAgc29sdmUgZXJyb3IgaW4gd2luZG93NyBjaHJvbWUvZmlyZWZveDpcXG4gICAgbm90IGFsbCBjb250cm9sIHBhdGhzIHJldHVybiBhIHZhbHVlLlxcbiAgICBmYWlsZWQgdG8gY3JlYXRlIGQzZCBzaGFkZXJzXFxuICAgICovXFxuICAgIHJldHVybiB2ZWMzKDAuMCk7XFxufVxcbiNlbmRpZlxcblxcblxcbnZlYzMgZ2V0Vmlld0Rpcigpe1xcbiAgICByZXR1cm4gdl92aWV3RGlyO1xcbn1cXG52ZWMzIGdldE5vcm1hbCgpe1xcbiAgICAgICAgLy8gT2J0YWluIG5vcm1hbCBmcm9tIG5vcm1hbCBtYXAgaW4gcmFuZ2UgWzAsMV1cXG4gICAgICAgIHZlYzMgbm9ybWFsID0gdGV4dHVyZTJEKHVfbm9ybWFsTWFwU2FtcGxlciwgdl9ub3JtYWxNYXBUZXhDb29yZCkucmdiO1xcblxcbiAgICAgICAgLy8gVHJhbnNmb3JtIG5vcm1hbCB2ZWN0b3IgdG8gcmFuZ2UgWy0xLDFdXFxuICAgICAgICByZXR1cm4gbm9ybWFsaXplKG5vcm1hbCAqIDIuMCAtIDEuMCk7ICAvLyB0aGlzIG5vcm1hbCBpcyBpbiB0YW5nZW50IHNwYWNlXFxufVxcblwiLGJvZHk6IFwiXCIsfVxucHVibGljIHN0YXRpYyBub3JtYWxNYXBfdmVydGV4OkdMU0xDaHVuayA9IHt0b3A6IFwiXCIsZGVmaW5lOiBcIlwiLHZhckRlY2xhcmU6IFwidmFyeWluZyB2ZWMyIHZfbm9ybWFsTWFwVGV4Q29vcmQ7XFxuXHR2YXJ5aW5nIHZlYzMgdl92aWV3RGlyO1xcblxcblxcbiNpZiBQT0lOVF9MSUdIVFNfQ09VTlQgPiAwXFxudmFyeWluZyB2ZWMzIHZfcG9pbnRMaWdodERpcltQT0lOVF9MSUdIVFNfQ09VTlRdO1xcbiNlbmRpZlxcblxcbiNpZiBESVJFQ1RJT05fTElHSFRTX0NPVU5UID4gMFxcbnZhcnlpbmcgdmVjMyB2X2RpcmVjdGlvbkxpZ2h0RGlyW0RJUkVDVElPTl9MSUdIVFNfQ09VTlRdO1xcbiNlbmRpZlxcblxcblwiLGZ1bmNEZWNsYXJlOiBcIlwiLGZ1bmNEZWZpbmU6IFwibWF0MyBjb21wdXRlVEJOKCl7XFxuICAgICAgICAgICAgLy92ZWMzIFQgPSBub3JtYWxpemUobm9ybWFsTWF0cml4ICogdGFuZ2VudCk7XFxuICAgICAgICAgICAgLy92ZWMzIEIgPSBub3JtYWxpemUobm9ybWFsTWF0cml4ICogYml0YW5nZW50KTtcXG4gICAgICAgICAgICAvL3ZlYzMgTiA9IG5vcm1hbGl6ZShub3JtYWxNYXRyaXggKiBub3JtYWwpO1xcblxcbiAgICAgICAgICAgIHZlYzMgVCA9IG5vcm1hbGl6ZSh1X25vcm1hbE1hdHJpeCAqIGFfdGFuZ2VudCk7XFxuICAgICAgICAgICAgdmVjMyBOID0gbm9ybWFsaXplKHVfbm9ybWFsTWF0cml4ICogYV9ub3JtYWwpO1xcbiAgICAgICAgICAgIC8vIHJlLW9ydGhvZ29uYWxpemUgVCB3aXRoIHJlc3BlY3QgdG8gTlxcbiAgICAgICAgICAgIFQgPSBub3JtYWxpemUoVCAtIGRvdChULCBOKSAqIE4pO1xcbiAgICAgICAgICAgIC8vIHRoZW4gcmV0cmlldmUgcGVycGVuZGljdWxhciB2ZWN0b3IgQiB3aXRoIHRoZSBjcm9zcyBwcm9kdWN0IG9mIFQgYW5kIE5cXG4gICAgICAgICAgICB2ZWMzIEIgPSBjcm9zcyhULCBOKTtcXG5cXG5cXG4gICAgICAgICAgICByZXR1cm4gdHJhbnNwb3NlKG1hdDMoVCwgQiwgTikpO1xcbiAgICAgICAgfVxcblwiLGJvZHk6IFwibWF0MyBUQk4gPSBjb21wdXRlVEJOKCk7XFxuXFxuICAgIC8vdl90YW5nZW50TGlnaHRQb3MgPSBUQk4gKiBsaWdodC5wb3NpdGlvbjtcXG4gICAgLy92X3RhbmdlbnRDYW1lcmFQb3MgID0gVEJOICogdV9jYW1lcmFQb3M7XFxuICAgIC8vdl90YW5nZW50UG9zICA9IFRCTiAqIHZfcG9zaXRpb247XFxuXFxuXFxuICAgIHZlYzMgdGFuZ2VudFBvc2l0aW9uID0gVEJOICogdmVjMyh1X21NYXRyaXggKiB2ZWM0KGFfcG9zaXRpb24sIDEuMCkpO1xcblxcbiAgICB2X25vcm1hbE1hcFRleENvb3JkID0gYV90ZXhDb29yZDtcXG5cXG4gICAgdl92aWV3RGlyID0gbm9ybWFsaXplKFRCTiAqIHVfY2FtZXJhUG9zIC0gdGFuZ2VudFBvc2l0aW9uKTtcXG5cXG5cXG4jaWYgUE9JTlRfTElHSFRTX0NPVU5UID4gMFxcbiAgICAgICBmb3IoaW50IGkgPSAwOyBpIDwgUE9JTlRfTElHSFRTX0NPVU5UOyBpKyspe1xcbiAgICAgICAgICAgIC8vbm90IG5vcm1hbGl6ZSBmb3IgY29tcHV0aW5nIGRpc3RhbmNlXFxuICAgICAgICAgICAgdl9wb2ludExpZ2h0RGlyW2ldID0gVEJOICogZ2V0UG9pbnRMaWdodERpckJ5TGlnaHRQb3ModV9wb2ludExpZ2h0c1tpXS5wb3NpdGlvbiwgdGFuZ2VudFBvc2l0aW9uKTtcXG4gICAgICAgfVxcbiNlbmRpZlxcblxcbiNpZiBESVJFQ1RJT05fTElHSFRTX0NPVU5UID4gMFxcbiAgICAgICBmb3IoaW50IGkgPSAwOyBpIDwgRElSRUNUSU9OX0xJR0hUU19DT1VOVDsgaSsrKXtcXG4gICAgICAgICAgICB2X2RpcmVjdGlvbkxpZ2h0RGlyW2ldID0gbm9ybWFsaXplKC0gVEJOICogZ2V0RGlyZWN0aW9uTGlnaHREaXJCeUxpZ2h0UG9zKHVfZGlyZWN0aW9uTGlnaHRzW2ldLnBvc2l0aW9uKSk7XFxuICAgICAgIH1cXG4jZW5kaWZcXG5cXG5cIix9XG5wdWJsaWMgc3RhdGljIHNwZWN1bGFyTWFwX2ZyYWdtZW50OkdMU0xDaHVuayA9IHt0b3A6IFwiXCIsZGVmaW5lOiBcIlwiLHZhckRlY2xhcmU6IFwidmFyeWluZyB2ZWMyIHZfc3BlY3VsYXJNYXBUZXhDb29yZDtcXG5cIixmdW5jRGVjbGFyZTogXCJcIixmdW5jRGVmaW5lOiBcInZlYzMgZ2V0TWF0ZXJpYWxTcGVjdWxhcigpIHtcXG4gICAgICAgIHJldHVybiB2ZWMzKHRleHR1cmUyRCh1X3NwZWN1bGFyTWFwU2FtcGxlciwgdl9zcGVjdWxhck1hcFRleENvb3JkKSk7XFxuICAgIH1cXG5cIixib2R5OiBcIlwiLH1cbnB1YmxpYyBzdGF0aWMgc3BlY3VsYXJNYXBfdmVydGV4OkdMU0xDaHVuayA9IHt0b3A6IFwiXCIsZGVmaW5lOiBcIlwiLHZhckRlY2xhcmU6IFwidmFyeWluZyB2ZWMyIHZfc3BlY3VsYXJNYXBUZXhDb29yZDtcXG5cIixmdW5jRGVjbGFyZTogXCJcIixmdW5jRGVmaW5lOiBcIlwiLGJvZHk6IFwidl9zcGVjdWxhck1hcFRleENvb3JkID0gYV90ZXhDb29yZDtcXG5cIix9XG5wdWJsaWMgc3RhdGljIGJ1aWxkQ3ViZW1hcFNoYWRvd01hcF9mcmFnbWVudDpHTFNMQ2h1bmsgPSB7dG9wOiBcIlwiLGRlZmluZTogXCJcIix2YXJEZWNsYXJlOiBcInZhcnlpbmcgdmVjMyB2X3dvcmxkUG9zaXRpb247XFxuXCIsZnVuY0RlY2xhcmU6IFwiXCIsZnVuY0RlZmluZTogXCJcIixib2R5OiBcIlxcbi8vIGdldCBkaXN0YW5jZSBiZXR3ZWVuIGZyYWdtZW50IGFuZCBsaWdodCBzb3VyY2VcXG4gICAgZmxvYXQgbGlnaHREaXN0YW5jZSA9IGxlbmd0aCh2X3dvcmxkUG9zaXRpb24gLSB1X2xpZ2h0UG9zKTtcXG5cXG4gICAgLy8gbWFwIHRvIFswLDFdIHJhbmdlIGJ5IGRpdmlkaW5nIGJ5IGZhclBsYW5lXFxuICAgIGxpZ2h0RGlzdGFuY2UgPSBsaWdodERpc3RhbmNlIC8gdV9mYXJQbGFuZTtcXG5cXG5cXG5nbF9GcmFnRGF0YVswXSA9IHBhY2tEZXB0aChsaWdodERpc3RhbmNlKTtcXG5cXG5cXG4vL2dsX0ZyYWdDb2xvciA9IHZlYzQoMC41LCAwLjAsIDEuMCwgMS4wKTtcXG4vL2dsX0ZyYWdEYXRhWzBdID0gdmVjNChsaWdodERpc3RhbmNlLCAxLjAsIDEuMCwgMS4wKTtcXG5cIix9XG5wdWJsaWMgc3RhdGljIGJ1aWxkQ3ViZW1hcFNoYWRvd01hcF92ZXJ0ZXg6R0xTTENodW5rID0ge3RvcDogXCJcIixkZWZpbmU6IFwiXCIsdmFyRGVjbGFyZTogXCJ2YXJ5aW5nIHZlYzMgdl93b3JsZFBvc2l0aW9uO1xcblwiLGZ1bmNEZWNsYXJlOiBcIlwiLGZ1bmNEZWZpbmU6IFwiXCIsYm9keTogXCJ2X3dvcmxkUG9zaXRpb24gPSB2ZWMzKHVfbU1hdHJpeCAqIHZlYzQoYV9wb3NpdGlvbiwgMS4wKSk7XFxuICAgIGdsX1Bvc2l0aW9uID0gdV9wTWF0cml4ICogdV92TWF0cml4ICogdmVjNCh2X3dvcmxkUG9zaXRpb24sIDEuMCk7XFxuXCIsfVxucHVibGljIHN0YXRpYyBidWlsZFR3b0RTaGFkb3dNYXBfZnJhZ21lbnQ6R0xTTENodW5rID0ge3RvcDogXCJcIixkZWZpbmU6IFwiXCIsdmFyRGVjbGFyZTogXCJcIixmdW5jRGVjbGFyZTogXCJcIixmdW5jRGVmaW5lOiBcIlwiLGJvZHk6IFwiZ2xfRnJhZ0RhdGFbMF0gPSBwYWNrRGVwdGgoZ2xfRnJhZ0Nvb3JkLnopO1xcblwiLH1cbnB1YmxpYyBzdGF0aWMgYnVpbGRUd29EU2hhZG93TWFwX3ZlcnRleDpHTFNMQ2h1bmsgPSB7dG9wOiBcIlwiLGRlZmluZTogXCJcIix2YXJEZWNsYXJlOiBcIlwiLGZ1bmNEZWNsYXJlOiBcIlwiLGZ1bmNEZWZpbmU6IFwiXCIsYm9keTogXCJnbF9Qb3NpdGlvbiA9IHVfdnBNYXRyaXhGcm9tTGlnaHQgKiB1X21NYXRyaXggKiB2ZWM0KGFfcG9zaXRpb24sIDEuMCk7XFxuLy9nbF9Qb3NpdGlvbiA9IHVfcE1hdHJpeCogdV92TWF0cml4ICogdV9tTWF0cml4ICogdmVjNChhX3Bvc2l0aW9uLCAxLjApO1xcblwiLH1cbnB1YmxpYyBzdGF0aWMgY29tbW9uQnVpbGRTaGFkb3dNYXBfZnJhZ21lbnQ6R0xTTENodW5rID0ge3RvcDogXCJcIixkZWZpbmU6IFwiXCIsdmFyRGVjbGFyZTogXCJcIixmdW5jRGVjbGFyZTogXCJcIixmdW5jRGVmaW5lOiBcIi8vIFBhY2tpbmcgYSBmbG9hdCBpbiBHTFNMIHdpdGggbXVsdGlwbGljYXRpb24gYW5kIG1vZFxcbnZlYzQgcGFja0RlcHRoKGluIGZsb2F0IGRlcHRoKSB7XFxuICAgIGNvbnN0IHZlYzQgYml0X3NoaWZ0ID0gdmVjNCgyNTYuMCAqIDI1Ni4wICogMjU2LjAsIDI1Ni4wICogMjU2LjAsIDI1Ni4wLCAxLjApO1xcbiAgICBjb25zdCB2ZWM0IGJpdF9tYXNrID0gdmVjNCgwLjAsIDEuMCAvIDI1Ni4wLCAxLjAgLyAyNTYuMCwgMS4wIC8gMjU2LjApO1xcbiAgICAvLyBjb21iaW5hdGlvbiBvZiBtb2QgYW5kIG11bHRpcGxpY2F0aW9uIGFuZCBkaXZpc2lvbiB3b3JrcyBiZXR0ZXJcXG4gICAgdmVjNCByZXMgPSBtb2QoZGVwdGggKiBiaXRfc2hpZnQgKiB2ZWM0KDI1NSksIHZlYzQoMjU2KSApIC8gdmVjNCgyNTUpO1xcbiAgICByZXMgLT0gcmVzLnh4eXogKiBiaXRfbWFzaztcXG5cXG4gICAgcmV0dXJuIHJlcztcXG59XFxuXCIsYm9keTogXCJcIix9XG5wdWJsaWMgc3RhdGljIGN1YmVtYXBTaGFkb3dNYXBfZnJhZ21lbnQ6R0xTTENodW5rID0ge3RvcDogXCJcIixkZWZpbmU6IFwiXCIsdmFyRGVjbGFyZTogXCJ1bmlmb3JtIHNhbXBsZXJDdWJlIHVfY3ViZW1hcFNoYWRvd01hcFNhbXBsZXJbIENVQkVNQVBfU0hBRE9XTUFQX0NPVU5UIF07XFxuXHR1bmlmb3JtIGZsb2F0IHVfY3ViZW1hcFNoYWRvd0RhcmtuZXNzWyBDVUJFTUFQX1NIQURPV01BUF9DT1VOVCBdO1xcblx0dW5pZm9ybSBmbG9hdCB1X2N1YmVtYXBTaGFkb3dCaWFzWyBDVUJFTUFQX1NIQURPV01BUF9DT1VOVCBdO1xcblx0dW5pZm9ybSBmbG9hdCB1X2ZhclBsYW5lWyBDVUJFTUFQX1NIQURPV01BUF9DT1VOVCBdO1xcblx0dW5pZm9ybSB2ZWMzIHVfY3ViZW1hcExpZ2h0UG9zWyBDVUJFTUFQX1NIQURPV01BUF9DT1VOVCBdO1xcblwiLGZ1bmNEZWNsYXJlOiBcIlwiLGZ1bmNEZWZpbmU6IFwiLy8gUENGXFxuZmxvYXQgZ2V0Q3ViZW1hcFNoYWRvd1Zpc2liaWxpdHlCeVBDRihmbG9hdCBjdXJyZW50RGVwdGgsIHZlYzMgZnJhZ1RvTGlnaHQsIHNhbXBsZXJDdWJlIGN1YmVtYXBTaGFkb3dNYXBTYW1wbGVyLCBmbG9hdCBzaGFkb3dCaWFzLCBmbG9hdCBmYXJQbGFuZSwgZmxvYXQgc2hhZG93RGFya25lc3Mpe1xcbiAgICAvL29ubHkgc3VwcG9ydCBpbiBvcGVuZ2wgZXMgMy4wK1xcbiAgICAvL3ZlYzMgc2FtcGxlT2Zmc2V0RGlyZWN0aW9uc1syMF0gPSB2ZWMzW11cXG4gICAgLy8oXFxuICAgICAgIC8vdmVjMyggMSwgIDEsICAxKSwgdmVjMyggMSwgLTEsICAxKSwgdmVjMygtMSwgLTEsICAxKSwgdmVjMygtMSwgIDEsICAxKSxcXG4gICAgICAgLy92ZWMzKCAxLCAgMSwgLTEpLCB2ZWMzKCAxLCAtMSwgLTEpLCB2ZWMzKC0xLCAtMSwgLTEpLCB2ZWMzKC0xLCAgMSwgLTEpLFxcbiAgICAgICAvL3ZlYzMoIDEsICAxLCAgMCksIHZlYzMoIDEsIC0xLCAgMCksIHZlYzMoLTEsIC0xLCAgMCksIHZlYzMoLTEsICAxLCAgMCksXFxuICAgICAgIC8vdmVjMyggMSwgIDAsICAxKSwgdmVjMygtMSwgIDAsICAxKSwgdmVjMyggMSwgIDAsIC0xKSwgdmVjMygtMSwgIDAsIC0xKSxcXG4gICAgICAgLy92ZWMzKCAwLCAgMSwgIDEpLCB2ZWMzKCAwLCAtMSwgIDEpLCB2ZWMzKCAwLCAtMSwgLTEpLCB2ZWMzKCAwLCAgMSwgLTEpXFxuICAgIC8vKTtcXG5cXG4gICAgdmVjMyBzYW1wbGVPZmZzZXREaXJlY3Rpb25zWzIwXTtcXG5cXG4gICAgc2FtcGxlT2Zmc2V0RGlyZWN0aW9uc1swXSA9IHZlYzMoIDEsICAxLCAgMSk7XFxuICAgIHNhbXBsZU9mZnNldERpcmVjdGlvbnNbMV0gPSB2ZWMzKCAxLCAgLTEsICAxKTtcXG4gICAgc2FtcGxlT2Zmc2V0RGlyZWN0aW9uc1syXSA9IHZlYzMoIC0xLCAgLTEsICAxKTtcXG4gICAgc2FtcGxlT2Zmc2V0RGlyZWN0aW9uc1szXSA9IHZlYzMoIC0xLCAgMSwgIDEpO1xcblxcbiAgICBzYW1wbGVPZmZzZXREaXJlY3Rpb25zWzRdID0gdmVjMyggMSwgIDEsICAtMSk7XFxuICAgIHNhbXBsZU9mZnNldERpcmVjdGlvbnNbNV0gPSB2ZWMzKCAxLCAgLTEsICAtMSk7XFxuICAgIHNhbXBsZU9mZnNldERpcmVjdGlvbnNbNl0gPSB2ZWMzKCAtMSwgIC0xLCAgLTEpO1xcbiAgICBzYW1wbGVPZmZzZXREaXJlY3Rpb25zWzddID0gdmVjMyggLTEsICAxLCAgLTEpO1xcblxcbiAgICBzYW1wbGVPZmZzZXREaXJlY3Rpb25zWzhdID0gdmVjMyggMSwgIDEsICAwKTtcXG4gICAgc2FtcGxlT2Zmc2V0RGlyZWN0aW9uc1s5XSA9IHZlYzMoIDEsICAtMSwgIDApO1xcbiAgICBzYW1wbGVPZmZzZXREaXJlY3Rpb25zWzEwXSA9IHZlYzMoIC0xLCAgLTEsICAwKTtcXG4gICAgc2FtcGxlT2Zmc2V0RGlyZWN0aW9uc1sxMV0gPSB2ZWMzKCAtMSwgIDEsICAwKTtcXG5cXG4gICAgc2FtcGxlT2Zmc2V0RGlyZWN0aW9uc1sxMl0gPSB2ZWMzKCAxLCAgMCwgIDEpO1xcbiAgICBzYW1wbGVPZmZzZXREaXJlY3Rpb25zWzEzXSA9IHZlYzMoIC0xLCAgMCwgIDEpO1xcbiAgICBzYW1wbGVPZmZzZXREaXJlY3Rpb25zWzE0XSA9IHZlYzMoIDEsICAwLCAgLTEpO1xcbiAgICBzYW1wbGVPZmZzZXREaXJlY3Rpb25zWzE1XSA9IHZlYzMoIC0xLCAgMCwgIC0xKTtcXG5cXG4gICAgc2FtcGxlT2Zmc2V0RGlyZWN0aW9uc1sxNl0gPSB2ZWMzKCAwLCAgMSwgIDEpO1xcbiAgICBzYW1wbGVPZmZzZXREaXJlY3Rpb25zWzE3XSA9IHZlYzMoIDAsICAtMSwgIDEpO1xcbiAgICBzYW1wbGVPZmZzZXREaXJlY3Rpb25zWzE4XSA9IHZlYzMoIDAsICAtMSwgIC0xKTtcXG4gICAgc2FtcGxlT2Zmc2V0RGlyZWN0aW9uc1sxOV0gPSB2ZWMzKCAwLCAgMSwgIC0xKTtcXG5cXG4gICAgZmxvYXQgc2hhZG93ID0gMC4wO1xcbiAgICBpbnQgc2FtcGxlcyA9IDIwO1xcblxcbiAgICAvL2Zsb2F0IGRpc2tSYWRpdXMgPSAwLjAwMDAwO1xcbiAgICAvL0Fub3RoZXIgaW50ZXJlc3RpbmcgdHJpY2sgd2UgY2FuIGFwcGx5IGhlcmUgaXMgdGhhdCB3ZSBjYW4gY2hhbmdlIHRoZSBkaXNrUmFkaXVzIGJhc2VkIG9uIGhvdyBmYXIgdGhlIHZpZXdlciBpcyBhd2F5IGZyb20gYSBmcmFnbWVudDsgdGhpcyB3YXkgd2UgY2FuIGluY3JlYXNlIHRoZSBvZmZzZXQgcmFkaXVzIGJ5IHRoZSBkaXN0YW5jZSB0byB0aGUgdmlld2VyLCBtYWtpbmcgdGhlIHNoYWRvd3Mgc29mdGVyIHdoZW4gZmFyIGF3YXkgYW5kIHNoYXJwZXIgd2hlbiBjbG9zZSBieS5cXG4gICAgZmxvYXQgdmlld0Rpc3RhbmNlID0gbGVuZ3RoKHVfY2FtZXJhUG9zIC0gdl93b3JsZFBvc2l0aW9uKTtcXG4gICAgZmxvYXQgZGlza1JhZGl1cyA9ICgxLjAgKyAodmlld0Rpc3RhbmNlIC8gZmFyUGxhbmUpKSAvIDI1LjA7XFxuXFxuICAgIC8vZm9yKGludCBpID0gMDsgaSA8IHNhbXBsZXM7ICsraSlcXG4gICAgZm9yKGludCBpID0gMDsgaSA8IDIwOyArK2kpXFxuICAgIHtcXG4gICAgICAgIGZsb2F0IHBjZkRlcHRoID0gdW5wYWNrRGVwdGgodGV4dHVyZUN1YmUoY3ViZW1hcFNoYWRvd01hcFNhbXBsZXIsIGZyYWdUb0xpZ2h0ICsgc2FtcGxlT2Zmc2V0RGlyZWN0aW9uc1tpXSAqIGRpc2tSYWRpdXMpKTtcXG4gICAgICAgIHBjZkRlcHRoICo9IGZhclBsYW5lOyAgIC8vIFVuZG8gbWFwcGluZyBbMDsxXVxcbiAgICAgICAgc2hhZG93ICs9IGN1cnJlbnREZXB0aCAtIHNoYWRvd0JpYXMgPiBwY2ZEZXB0aCAgPyBzaGFkb3dEYXJrbmVzcyA6IDEuMDtcXG4gICAgfVxcbiAgICBzaGFkb3cgLz0gZmxvYXQoc2FtcGxlcyk7XFxuXFxuICAgIHJldHVybiBzaGFkb3c7XFxufVxcblxcblxcbmZsb2F0IGdldEN1YmVtYXBTaGFkb3dWaXNpYmlsaXR5KHZlYzMgbGlnaHREaXIsIHNhbXBsZXJDdWJlIGN1YmVtYXBTaGFkb3dNYXBTYW1wbGVyLCB2ZWMzIGxpZ2h0UG9zLCBmbG9hdCBmYXJQbGFuZSwgZmxvYXQgc2hhZG93QmlhcywgZmxvYXQgIHNoYWRvd0RhcmtuZXNzKSB7XFxuLy8gR2V0IHZlY3RvciBiZXR3ZWVuIGZyYWdtZW50IHBvc2l0aW9uIGFuZCBsaWdodCBwb3NpdGlvblxcbiAgICB2ZWMzIGZyYWdUb0xpZ2h0PSB2X3dvcmxkUG9zaXRpb24gLSBsaWdodFBvcztcXG4gICAgLy8gVXNlIHRoZSBsaWdodCB0byBmcmFnbWVudCB2ZWN0b3IgdG8gc2FtcGxlIGZyb20gdGhlIGRlcHRoIG1hcFxcbiAgICAvLyBOb3cgZ2V0IGN1cnJlbnQgbGluZWFyIGRlcHRoIGFzIHRoZSBsZW5ndGggYmV0d2VlbiB0aGUgZnJhZ21lbnQgYW5kIGxpZ2h0IHBvc2l0aW9uXFxuICAgIGZsb2F0IGN1cnJlbnREZXB0aCA9IGxlbmd0aChmcmFnVG9MaWdodCk7XFxuXFxuICAgICNpZiBkZWZpbmVkKFNIQURPV01BUF9UWVBFX1BDRilcXG4gICAgcmV0dXJuIGdldEN1YmVtYXBTaGFkb3dWaXNpYmlsaXR5QnlQQ0YoY3VycmVudERlcHRoLCBmcmFnVG9MaWdodCwgY3ViZW1hcFNoYWRvd01hcFNhbXBsZXIsIGdldFNoYWRvd0JpYXMobGlnaHREaXIsIHNoYWRvd0JpYXMpLCBmYXJQbGFuZSwgc2hhZG93RGFya25lc3MpO1xcbiAgICAjZW5kaWZcXG5cXG4gICAgZmxvYXQgY2xvc2VzdERlcHRoID0gdW5wYWNrRGVwdGgodGV4dHVyZUN1YmUoY3ViZW1hcFNoYWRvd01hcFNhbXBsZXIsIGZyYWdUb0xpZ2h0KSk7XFxuXFxuICAgIC8vIEl0IGlzIGN1cnJlbnRseSBpbiBsaW5lYXIgcmFuZ2UgYmV0d2VlbiBbMCwxXS4gUmUtdHJhbnNmb3JtIGJhY2sgdG8gb3JpZ2luYWwgdmFsdWVcXG4gICAgY2xvc2VzdERlcHRoICo9IGZhclBsYW5lO1xcblxcblxcbiAgICByZXR1cm4gZmxvYXQoY3VycmVudERlcHRoID4gY2xvc2VzdERlcHRoICsgZ2V0U2hhZG93QmlhcyhsaWdodERpciwgc2hhZG93QmlhcykgPyBzaGFkb3dEYXJrbmVzcyA6IDEuMCk7XFxufVxcblwiLGJvZHk6IFwiXCIsfVxucHVibGljIHN0YXRpYyBub1NoYWRvd01hcF9mcmFnbWVudDpHTFNMQ2h1bmsgPSB7dG9wOiBcIlwiLGRlZmluZTogXCJcIix2YXJEZWNsYXJlOiBcIlwiLGZ1bmNEZWNsYXJlOiBcIlwiLGZ1bmNEZWZpbmU6IFwidmVjMyBnZXRTaGFkb3dWaXNpYmlsaXR5KCkge1xcbiAgICAgICAgcmV0dXJuIHZlYzMoMS4wKTtcXG4gICAgfVxcblwiLGJvZHk6IFwiXCIsfVxucHVibGljIHN0YXRpYyB0b3RhbFNoYWRvd01hcF9mcmFnbWVudDpHTFNMQ2h1bmsgPSB7dG9wOiBcIlwiLGRlZmluZTogXCJcIix2YXJEZWNsYXJlOiBcIlwiLGZ1bmNEZWNsYXJlOiBcImZsb2F0IGdldFNoYWRvd0JpYXModmVjMyBsaWdodERpciwgZmxvYXQgc2hhZG93Qmlhcyk7XFxuZmxvYXQgdW5wYWNrRGVwdGgodmVjNCByZ2JhRGVwdGgpO1xcblwiLGZ1bmNEZWZpbmU6IFwiZmxvYXQgZ2V0U2hhZG93Qmlhcyh2ZWMzIGxpZ2h0RGlyLCBmbG9hdCBzaGFkb3dCaWFzKXtcXG4gICAgZmxvYXQgYmlhcyA9IHNoYWRvd0JpYXM7XFxuXFxuICAgIGlmKHNoYWRvd0JpYXMgPT0gTlVMTCl7XFxuICAgICAgICBiaWFzID0gMC4wMDU7XFxuICAgIH1cXG5cXG5cXG4gICAgIC8qIVxcbiAgICAgQSBzaGFkb3cgYmlhcyBvZiAwLjAwNSBzb2x2ZXMgdGhlIGlzc3VlcyBvZiBvdXIgc2NlbmUgYnkgYSBsYXJnZSBleHRlbnQsIGJ1dCBzb21lIHN1cmZhY2VzIHRoYXQgaGF2ZSBhIHN0ZWVwIGFuZ2xlIHRvIHRoZSBsaWdodCBzb3VyY2UgbWlnaHQgc3RpbGwgcHJvZHVjZSBzaGFkb3cgYWNuZS4gQSBtb3JlIHNvbGlkIGFwcHJvYWNoIHdvdWxkIGJlIHRvIGNoYW5nZSB0aGUgYW1vdW50IG9mIGJpYXMgYmFzZWQgb24gdGhlIHN1cmZhY2UgYW5nbGUgdG93YXJkcyB0aGUgbGlnaHQ6IHNvbWV0aGluZyB3ZSBjYW4gc29sdmUgd2l0aCB0aGUgZG90IHByb2R1Y3Q6XFxuICAgICAqL1xcblxcbiAgICAgcmV0dXJuIG1heChiaWFzICogKDEuMCAtIGRvdChub3JtYWxpemUoZ2V0Tm9ybWFsKCkpLCBsaWdodERpcikpLCBiaWFzKTtcXG5cXG4gICAgLy9yZXR1cm4gYmlhcztcXG59XFxuXFxuZmxvYXQgdW5wYWNrRGVwdGgodmVjNCByZ2JhRGVwdGgpIHtcXG4gICAgY29uc3QgdmVjNCBiaXRTaGlmdCA9IHZlYzQoMS4wIC8gKDI1Ni4wICogMjU2LjAgKiAyNTYuMCksIDEuMCAvICgyNTYuMCAqIDI1Ni4wKSwgMS4wIC8gMjU2LjAsIDEuMCk7XFxuICAgIHJldHVybiBkb3QocmdiYURlcHRoLCBiaXRTaGlmdCk7XFxufVxcblxcbnZlYzMgZ2V0U2hhZG93VmlzaWJpbGl0eSgpIHtcXG4gICAgdmVjMyBzaGFkb3dDb2xvciA9IHZlYzMoMS4wKTtcXG4gICAgdmVjMyB0d29ETGlnaHREaXIgPSB2ZWMzKDAuMCk7XFxuICAgIHZlYzMgY3ViZW1hcExpZ2h0RGlyID0gdmVjMygwLjApO1xcblxcblxcbiAgICAvL3RvIG5vcm1hbE1hcCwgdGhlIGxpZ2h0RGlyIHVzZSB0aGUgb3JpZ2luIG9uZSBpbnN0ZWFkIG9mIG5vcm1hbE1hcCdzIGxpZ2h0RGlyIGhlcmUodGhlIGxpZ2h0RGlyIGlzIHVzZWQgZm9yIGNvbXB1dGluZyBzaGFkb3dCaWFzLCB0aGUgb3JpZ2luIG9uZSBpcyBlbm91Z2ggZm9yIGl0KVxcblxcbiAgICAjaWYgVFdPRF9TSEFET1dNQVBfQ09VTlQgPiAwXFxuXHRmb3IoIGludCBpID0gMDsgaSA8IFRXT0RfU0hBRE9XTUFQX0NPVU5UOyBpICsrICkge1xcbiAgICAgICAgdHdvRExpZ2h0RGlyID0gZ2V0RGlyZWN0aW9uTGlnaHREaXJCeUxpZ2h0UG9zKHVfdHdvRExpZ2h0UG9zW2ldKTtcXG5cXG5cdC8vLy9pZiBpcyBvcHBvc2l0ZSB0byBkaXJlY3Rpb24gb2YgbGlnaHQgcmF5cywgbm8gc2hhZG93XFxuXFxuICAgICAgICBzaGFkb3dDb2xvciAqPSBnZXRUd29EU2hhZG93VmlzaWJpbGl0eSh0d29ETGlnaHREaXIsIHVfdHdvRFNoYWRvd01hcFNhbXBsZXJbaV0sIHZfcG9zaXRpb25Gcm9tTGlnaHRbaV0sIHVfdHdvRFNoYWRvd0JpYXNbaV0sIHVfdHdvRFNoYWRvd0RhcmtuZXNzW2ldLCB1X3R3b0RTaGFkb3dTaXplW2ldKTtcXG5cdH1cXG5cdCNlbmRpZlxcblxcblxcblx0I2lmIENVQkVNQVBfU0hBRE9XTUFQX0NPVU5UID4gMFxcblx0Zm9yKCBpbnQgaSA9IDA7IGkgPCBDVUJFTUFQX1NIQURPV01BUF9DT1VOVDsgaSArKyApIHtcXG4gICAgICAgIGN1YmVtYXBMaWdodERpciA9IGdldFBvaW50TGlnaHREaXJCeUxpZ2h0UG9zKHVfY3ViZW1hcExpZ2h0UG9zW2ldKTtcXG5cXG5cdC8vLy9pZiBpcyBvcHBvc2l0ZSB0byBkaXJlY3Rpb24gb2YgbGlnaHQgcmF5cywgbm8gc2hhZG93XFxuXFxuICAgICAgICBzaGFkb3dDb2xvciAqPSBnZXRDdWJlbWFwU2hhZG93VmlzaWJpbGl0eShjdWJlbWFwTGlnaHREaXIsIHVfY3ViZW1hcFNoYWRvd01hcFNhbXBsZXJbaV0sIHVfY3ViZW1hcExpZ2h0UG9zW2ldLCB1X2ZhclBsYW5lW2ldLCB1X2N1YmVtYXBTaGFkb3dCaWFzW2ldLCB1X2N1YmVtYXBTaGFkb3dEYXJrbmVzc1tpXSk7XFxuXHR9XFxuXHQjZW5kaWZcXG5cXG5cdHJldHVybiBzaGFkb3dDb2xvcjtcXG59XFxuXFxuXCIsYm9keTogXCJcIix9XG5wdWJsaWMgc3RhdGljIHR3b0RTaGFkb3dNYXBfZnJhZ21lbnQ6R0xTTENodW5rID0ge3RvcDogXCJcIixkZWZpbmU6IFwiXCIsdmFyRGVjbGFyZTogXCJ2YXJ5aW5nIHZlYzQgdl9wb3NpdGlvbkZyb21MaWdodFsgVFdPRF9TSEFET1dNQVBfQ09VTlQgXTtcXG5cdHVuaWZvcm0gc2FtcGxlcjJEIHVfdHdvRFNoYWRvd01hcFNhbXBsZXJbIFRXT0RfU0hBRE9XTUFQX0NPVU5UIF07XFxuXHR1bmlmb3JtIGZsb2F0IHVfdHdvRFNoYWRvd0RhcmtuZXNzWyBUV09EX1NIQURPV01BUF9DT1VOVCBdO1xcblx0dW5pZm9ybSBmbG9hdCB1X3R3b0RTaGFkb3dCaWFzWyBUV09EX1NIQURPV01BUF9DT1VOVCBdO1xcblx0dW5pZm9ybSB2ZWMyIHVfdHdvRFNoYWRvd1NpemVbIFRXT0RfU0hBRE9XTUFQX0NPVU5UIF07XFxuXHR1bmlmb3JtIHZlYzMgdV90d29ETGlnaHRQb3NbIFRXT0RfU0hBRE9XTUFQX0NPVU5UIF07XFxuXCIsZnVuY0RlY2xhcmU6IFwiXCIsZnVuY0RlZmluZTogXCIvLyBQQ0ZcXG5mbG9hdCBnZXRUd29EU2hhZG93VmlzaWJpbGl0eUJ5UENGKGZsb2F0IGN1cnJlbnREZXB0aCwgdmVjMiBzaGFkb3dDb29yZCwgc2FtcGxlcjJEIHR3b0RTaGFkb3dNYXBTYW1wbGVyLCBmbG9hdCBzaGFkb3dCaWFzLCBmbG9hdCBzaGFkb3dEYXJrbmVzcywgdmVjMiBzaGFkb3dNYXBTaXplKXtcXG5cXG4gICAgZmxvYXQgc2hhZG93ID0gMC4wO1xcbiAgICB2ZWMyIHRleGVsU2l6ZSA9IHZlYzIoMS4wIC8gc2hhZG93TWFwU2l6ZVswXSwgMS4wIC8gc2hhZG93TWFwU2l6ZVsxXSk7XFxuXFxuICAgIGZvcihpbnQgeCA9IC0xOyB4IDw9IDE7ICsreClcXG4gICAge1xcbiAgICAgICAgZm9yKGludCB5ID0gLTE7IHkgPD0gMTsgKyt5KVxcbiAgICAgICAge1xcbiAgICAgICAgICAgIGZsb2F0IHBjZkRlcHRoID0gdW5wYWNrRGVwdGgodGV4dHVyZTJEKHR3b0RTaGFkb3dNYXBTYW1wbGVyLCBzaGFkb3dDb29yZCArIHZlYzIoeCwgeSkgKiB0ZXhlbFNpemUpKTtcXG4gICAgICAgICAgICBzaGFkb3cgKz0gY3VycmVudERlcHRoIC0gc2hhZG93QmlhcyA+IHBjZkRlcHRoICA/IHNoYWRvd0RhcmtuZXNzIDogMS4wO1xcbiAgICAgICAgfVxcbiAgICB9XFxuICAgIHNoYWRvdyAvPSA5LjA7XFxuXFxuICAgIHJldHVybiBzaGFkb3c7XFxufVxcblxcblxcblxcbmZsb2F0IGdldFR3b0RTaGFkb3dWaXNpYmlsaXR5KHZlYzMgbGlnaHREaXIsIHNhbXBsZXIyRCB0d29EU2hhZG93TWFwU2FtcGxlciwgdmVjNCB2X3Bvc2l0aW9uRnJvbUxpZ2h0LCBmbG9hdCBzaGFkb3dCaWFzLCBmbG9hdCBzaGFkb3dEYXJrbmVzcywgdmVjMiBzaGFkb3dTaXplKSB7XFxuICAgIC8vcHJvamVjdCB0ZXh0dXJlXFxuICAgIHZlYzMgc2hhZG93Q29vcmQgPSAodl9wb3NpdGlvbkZyb21MaWdodC54eXogLyB2X3Bvc2l0aW9uRnJvbUxpZ2h0LncpIC8gMi4wICsgMC41O1xcbiAgICAvL3ZlYzMgc2hhZG93Q29vcmQgPSB2ZWMzKDAuNSwgMC41LCAwLjUpO1xcblxcbiAgICAjaWZkZWYgU0hBRE9XTUFQX1RZUEVfUENGXFxuICAgIC8vIFBlcmNlbnRhZ2UtY2xvc2UgZmlsdGVyaW5nXFxuICAgIC8vICg5IHBpeGVsIGtlcm5lbClcXG4gICAgcmV0dXJuIGdldFR3b0RTaGFkb3dWaXNpYmlsaXR5QnlQQ0Yoc2hhZG93Q29vcmQueiwgc2hhZG93Q29vcmQueHksIHR3b0RTaGFkb3dNYXBTYW1wbGVyLCBnZXRTaGFkb3dCaWFzKGxpZ2h0RGlyLCBzaGFkb3dCaWFzKSwgc2hhZG93RGFya25lc3MsIHNoYWRvd1NpemUpO1xcblxcbiAgICAjZWxzZVxcbiAgICByZXR1cm4gc2hhZG93Q29vcmQueiA+IHVucGFja0RlcHRoKHRleHR1cmUyRCh0d29EU2hhZG93TWFwU2FtcGxlciwgc2hhZG93Q29vcmQueHkpKSArIGdldFNoYWRvd0JpYXMobGlnaHREaXIsIHNoYWRvd0JpYXMpID8gc2hhZG93RGFya25lc3MgOiAxLjA7XFxuICAgICNlbmRpZlxcbn1cXG5cIixib2R5OiBcIlwiLH1cbnB1YmxpYyBzdGF0aWMgdHdvRFNoYWRvd01hcF92ZXJ0ZXg6R0xTTENodW5rID0ge3RvcDogXCJcIixkZWZpbmU6IFwiXCIsdmFyRGVjbGFyZTogXCJ2YXJ5aW5nIHZlYzQgdl9wb3NpdGlvbkZyb21MaWdodFsgVFdPRF9TSEFET1dNQVBfQ09VTlQgXTtcXG51bmlmb3JtIG1hdDQgdV92cE1hdHJpeEZyb21MaWdodFsgVFdPRF9TSEFET1dNQVBfQ09VTlQgXTtcXG5cIixmdW5jRGVjbGFyZTogXCJcIixmdW5jRGVmaW5lOiBcIlwiLGJvZHk6IFwiZm9yKCBpbnQgaSA9IDA7IGkgPCBUV09EX1NIQURPV01BUF9DT1VOVDsgaSArKyApIHtcXG4gICAgdl9wb3NpdGlvbkZyb21MaWdodFtpXSA9IHVfdnBNYXRyaXhGcm9tTGlnaHRbaV0gKiB2ZWM0KHZfd29ybGRQb3NpdGlvbiwgMS4wKTtcXG5cdH1cXG5cIix9XG59XG5leHBvcnQgdHlwZSBHTFNMQ2h1bmsgPSB7dG9wPzpzdHJpbmc7ZGVmaW5lPzpzdHJpbmc7dmFyRGVjbGFyZT86c3RyaW5nO2Z1bmNEZWNsYXJlPzpzdHJpbmc7ZnVuY0RlZmluZT86c3RyaW5nO2JvZHk/OnN0cmluZzt9XG59Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
