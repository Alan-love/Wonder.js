var wd;
(function (wd) {
    wd.DebugConfig = {
        isTest: false,
        debugCollision: false
    };
})(wd || (wd = {}));

var wdFrp;
(function (wdFrp) {
    wdFrp.fromCollection = function (collection, scheduler) {
        if (scheduler === void 0) { scheduler = wdFrp.Scheduler.create(); }
        var arr = collection.toArray();
        return arr.length === 0 ? wdFrp.empty() : wdFrp.fromArray(arr, scheduler);
    };
})(wdFrp || (wdFrp = {}));

var wd;
(function (wd) {
    function assert(cond, message) {
        if (message === void 0) { message = "contract error"; }
        wd.Log.error(!cond, message);
    }
    wd.assert = assert;
    function require(InFunc) {
        return function (target, name, descriptor) {
            var value = descriptor.value;
            descriptor.value = function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i - 0] = arguments[_i];
                }
                if (wd.Main.isTest) {
                    InFunc.apply(this, args);
                }
                return value.apply(this, args);
            };
            return descriptor;
        };
    }
    wd.require = require;
    function ensure(OutFunc) {
        return function (target, name, descriptor) {
            var value = descriptor.value;
            descriptor.value = function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i - 0] = arguments[_i];
                }
                var result = value.apply(this, args), params = [result].concat(args);
                if (wd.Main.isTest) {
                    OutFunc.apply(this, params);
                }
                return result;
            };
            return descriptor;
        };
    }
    wd.ensure = ensure;
    function requireGetter(InFunc) {
        return function (target, name, descriptor) {
            var getter = descriptor.get;
            descriptor.get = function () {
                if (wd.Main.isTest) {
                    InFunc.call(this);
                }
                return getter.call(this);
            };
            return descriptor;
        };
    }
    wd.requireGetter = requireGetter;
    function requireSetter(InFunc) {
        return function (target, name, descriptor) {
            var setter = descriptor.set;
            descriptor.set = function (val) {
                if (wd.Main.isTest) {
                    InFunc.call(this, val);
                }
                setter.call(this, val);
            };
            return descriptor;
        };
    }
    wd.requireSetter = requireSetter;
    function ensureGetter(OutFunc) {
        return function (target, name, descriptor) {
            var getter = descriptor.get;
            descriptor.get = function () {
                var result = getter.call(this);
                if (wd.Main.isTest) {
                    OutFunc.call(this, result);
                }
                return result;
            };
            return descriptor;
        };
    }
    wd.ensureGetter = ensureGetter;
    function ensureSetter(OutFunc) {
        return function (target, name, descriptor) {
            var setter = descriptor.set;
            descriptor.set = function (val) {
                var result = setter.call(this, val), params = [result, val];
                if (wd.Main.isTest) {
                    OutFunc.apply(this, params);
                }
            };
            return descriptor;
        };
    }
    wd.ensureSetter = ensureSetter;
    function invariant(func) {
        return function (target) {
            if (wd.Main.isTest) {
                func(target);
            }
        };
    }
    wd.invariant = invariant;
})(wd || (wd = {}));

var wd;
(function (wd) {
    function cacheGetter(judgeFunc, returnCacheValueFunc, setCacheFunc) {
        return function (target, name, descriptor) {
            var getter = descriptor.get;
            descriptor.get = function () {
                var result = null;
                if (judgeFunc.call(this)) {
                    return returnCacheValueFunc.call(this);
                }
                result = getter.call(this);
                setCacheFunc.call(this, result);
                return result;
            };
            return descriptor;
        };
    }
    wd.cacheGetter = cacheGetter;
    function cache(judgeFunc, returnCacheValueFunc, setCacheFunc) {
        return function (target, name, descriptor) {
            var value = descriptor.value;
            descriptor.value = function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i - 0] = arguments[_i];
                }
                var result = null;
                if (judgeFunc.apply(this, args)) {
                    return returnCacheValueFunc.apply(this, args);
                }
                result = value.apply(this, args);
                setCacheFunc.apply(this, [result].concat(args));
                return result;
            };
            return descriptor;
        };
    }
    wd.cache = cache;
})(wd || (wd = {}));

var wd;
(function (wd) {
    function virtual(target, name, descriptor) {
        return descriptor;
    }
    wd.virtual = virtual;
})(wd || (wd = {}));

var wd;
(function (wd) {
    function operateBodyDataGetterAndSetter(dataName) {
        return function (target, name, descriptor) {
            var getter = descriptor.get, setter = descriptor.set;
            descriptor.get = function () {
                if (this.isPhysicsEngineAdapterExist()) {
                    var data = this.getPhysicsEngineAdapter()[("get" + dataName)](this.gameObject);
                    return data !== null ? data : this[("_" + lowerFirstChar(dataName))];
                }
                return getter.call(this);
            };
            descriptor.set = function (val) {
                setter.call(this, val);
                if (this.isPhysicsEngineAdapterExist()) {
                    this.getPhysicsEngineAdapter()[("set" + dataName)](this.gameObject, val);
                }
            };
            return descriptor;
        };
    }
    wd.operateBodyDataGetterAndSetter = operateBodyDataGetterAndSetter;
    function operateWorldDataGetterAndSetter(dataName) {
        return function (target, name, descriptor) {
            var getter = descriptor.get, setter = descriptor.set;
            descriptor.get = function () {
                var scene = wd.Director.getInstance().scene;
                if (isWorldDefined(scene)) {
                    var data = scene.physicsEngineAdapter[("get" + dataName)]();
                    return data !== null ? data : this[("_" + lowerFirstChar(dataName))];
                }
                return getter.call(this);
            };
            descriptor.set = function (val) {
                var scene = wd.Director.getInstance().scene;
                setter.call(this, val);
                if (isWorldDefined(scene)) {
                    scene.physicsEngineAdapter[("set" + dataName)](val);
                }
            };
            return descriptor;
        };
    }
    wd.operateWorldDataGetterAndSetter = operateWorldDataGetterAndSetter;
    function isWorldDefined(scene) {
        return scene.physicsEngineAdapter && scene.physicsEngineAdapter.world;
    }
    function lowerFirstChar(str) {
        var firstChar = str.slice(0, 1);
        return "" + firstChar.toLowerCase() + str.slice(1);
    }
})(wd || (wd = {}));

var wd;
(function (wd) {
    wd.ABSTRACT_ATTRIBUTE = null;
})(wd || (wd = {}));

var wd;
(function (wd) {
    Object.defineProperty(wd, "root", {
        get: function () {
            if (wd.JudgeUtils.isNodeJs()) {
                return global;
            }
            return window;
        }
    });
})(wd || (wd = {}));

var wd;
(function (wd) {
    wd.DEG_TO_RAD = Math.PI / 180;
    wd.RAD_TO_DEG = 180 / Math.PI;
})(wd || (wd = {}));

var wd;
(function (wd) {
    var Vector2 = (function () {
        function Vector2() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            this.values = new Float32Array(2);
            if (args.length > 0) {
                this.values[0] = args[0];
                this.values[1] = args[1];
            }
        }
        Vector2.create = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var m = null;
            if (args.length === 0) {
                m = new this();
            }
            else {
                m = new this(args[0], args[1]);
            }
            return m;
        };
        Object.defineProperty(Vector2.prototype, "x", {
            get: function () {
                return this.values[0];
            },
            set: function (x) {
                this.values[0] = x;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Vector2.prototype, "y", {
            get: function () {
                return this.values[1];
            },
            set: function (y) {
                this.values[1] = y;
            },
            enumerable: true,
            configurable: true
        });
        Vector2.prototype.set = function (x, y) {
            this.x = x;
            this.y = y;
        };
        return Vector2;
    })();
    wd.Vector2 = Vector2;
})(wd || (wd = {}));

var wd;
(function (wd) {
    var Vector3 = (function () {
        function Vector3() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            this.values = null;
            this.values = new Float32Array(3);
            if (args.length > 0) {
                this.values[0] = args[0];
                this.values[1] = args[1];
                this.values[2] = args[2];
            }
        }
        Vector3.create = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var m = null;
            if (args.length === 0) {
                m = new this();
            }
            else {
                m = new this(args[0], args[1], args[2]);
            }
            return m;
        };
        Object.defineProperty(Vector3.prototype, "x", {
            get: function () {
                return this.values[0];
            },
            set: function (x) {
                this.values[0] = x;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Vector3.prototype, "y", {
            get: function () {
                return this.values[1];
            },
            set: function (y) {
                this.values[1] = y;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Vector3.prototype, "z", {
            get: function () {
                return this.values[2];
            },
            set: function (z) {
                this.values[2] = z;
            },
            enumerable: true,
            configurable: true
        });
        Vector3.prototype.normalize = function () {
            var v = this.values;
            var d = Math.sqrt(v[0] * v[0] + v[1] * v[1] + v[2] * v[2]);
            if (d === 0) {
                v[0] = 0;
                v[1] = 0;
                v[2] = 0;
                return this;
            }
            v[0] = v[0] / d;
            v[1] = v[1] / d;
            v[2] = v[2] / d;
            if (v[0] === -0) {
                v[0] = 0;
            }
            if (v[1] === -0) {
                v[1] = 0;
            }
            if (v[2] === -0) {
                v[2] = 0;
            }
            return this;
        };
        Vector3.prototype.isZero = function () {
            var v = this.values;
            return v[0] === 0 && v[1] === 0 && v[2] === 0;
        };
        Vector3.prototype.scale = function (scalar) {
            var v = this.values;
            v[0] *= scalar;
            v[1] *= scalar;
            v[2] *= scalar;
            return this;
        };
        Vector3.prototype.set = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            if (args.length === 3) {
                this.x = args[0];
                this.y = args[1];
                this.z = args[2];
            }
            else {
                var v = args[0];
                this.x = v.x;
                this.y = v.y;
                this.z = v.z;
            }
        };
        Vector3.prototype.sub = function (v) {
            this.values[0] = this.values[0] - v.values[0];
            this.values[1] = this.values[1] - v.values[1];
            this.values[2] = this.values[2] - v.values[2];
            return this;
        };
        Vector3.prototype.sub2 = function (v1, v2) {
            this.values[0] = v1.values[0] - v2.values[0];
            this.values[1] = v1.values[1] - v2.values[1];
            this.values[2] = v1.values[2] - v2.values[2];
            return this;
        };
        Vector3.prototype.add = function (v) {
            this.values[0] = this.values[0] + v.values[0];
            this.values[1] = this.values[1] + v.values[1];
            this.values[2] = this.values[2] + v.values[2];
            return this;
        };
        Vector3.prototype.add2 = function (v1, v2) {
            this.values[0] = v1.values[0] + v2.values[0];
            this.values[1] = v1.values[1] + v2.values[1];
            this.values[2] = v1.values[2] + v2.values[2];
            return this;
        };
        Vector3.prototype.mul = function (v) {
            this.values[0] = this.values[0] * v.values[0];
            this.values[1] = this.values[1] * v.values[1];
            this.values[2] = this.values[2] * v.values[2];
            return this;
        };
        Vector3.prototype.mul2 = function (v1, v2) {
            this.values[0] = v1.values[0] * v2.values[0];
            this.values[1] = v1.values[1] * v2.values[1];
            this.values[2] = v1.values[2] * v2.values[2];
            return this;
        };
        Vector3.prototype.reverse = function () {
            this.values[0] = -this.values[0];
            this.values[1] = -this.values[1];
            this.values[2] = -this.values[2];
            return this;
        };
        Vector3.prototype.copy = function () {
            var result = Vector3.create(), i = 0, len = this.values.length;
            for (i = 0; i < len; i++) {
                result.values[i] = this.values[i];
            }
            return result;
        };
        Vector3.prototype.toVector4 = function () {
            return wd.Vector4.create(this.values[0], this.values[1], this.values[2], 1.0);
        };
        Vector3.prototype.length = function () {
            var v = this.values;
            return Math.sqrt(v[0] * v[0] + v[1] * v[1] + v[2] * v[2]);
        };
        Vector3.prototype.cross = function (lhs, rhs) {
            var a, b, r, ax, ay, az, bx, by, bz;
            a = lhs.values;
            b = rhs.values;
            r = this.values;
            ax = a[0];
            ay = a[1];
            az = a[2];
            bx = b[0];
            by = b[1];
            bz = b[2];
            r[0] = ay * bz - by * az;
            r[1] = az * bx - bz * ax;
            r[2] = ax * by - bx * ay;
            return this;
        };
        Vector3.prototype.lerp = function (lhs, rhs, alpha) {
            var a = lhs.values, b = rhs.values, r = this.values;
            r[0] = a[0] + alpha * (b[0] - a[0]);
            r[1] = a[1] + alpha * (b[1] - a[1]);
            r[2] = a[2] + alpha * (b[2] - a[2]);
            return this;
        };
        Vector3.prototype.dot = function (rhs) {
            var a = this.values, b = rhs.values;
            return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
        };
        Vector3.prototype.min = function (v) {
            if (this.x > v.x) {
                this.x = v.x;
            }
            if (this.y > v.y) {
                this.y = v.y;
            }
            if (this.z > v.z) {
                this.z = v.z;
            }
            return this;
        };
        Vector3.prototype.max = function (v) {
            if (this.x < v.x) {
                this.x = v.x;
            }
            if (this.y < v.y) {
                this.y = v.y;
            }
            if (this.z < v.z) {
                this.z = v.z;
            }
            return this;
        };
        Vector3.prototype.isEqual = function (v) {
            return this.x === v.x && this.y === v.y && this.z === v.z;
        };
        Vector3.prototype.toArray = function () {
            return [this.x, this.y, this.z];
        };
        Vector3.prototype.applyMatrix4 = function (m) {
            var x = this.x, y = this.y, z = this.z, e = m.values;
            this.x = e[0] * x + e[4] * y + e[8] * z + e[12];
            this.y = e[1] * x + e[5] * y + e[9] * z + e[13];
            this.z = e[2] * x + e[6] * y + e[10] * z + e[14];
            return this;
        };
        Vector3.prototype.distanceTo = function (v) {
            return Math.sqrt(this.distanceToSquared(v));
        };
        Vector3.prototype.distanceToSquared = function (v) {
            var dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;
            return Math.pow(dx, 2) + Math.pow(dy, 2) + Math.pow(dz, 2);
        };
        Vector3.up = Vector3.create(0, 1, 0);
        Vector3.forward = Vector3.create(0, 0, 1);
        Vector3.right = Vector3.create(1, 0, 0);
        return Vector3;
    })();
    wd.Vector3 = Vector3;
})(wd || (wd = {}));

var wd;
(function (wd) {
    var Vector4 = (function () {
        function Vector4() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            this.values = new Float32Array(4);
            if (args.length > 0) {
                this.values[0] = args[0];
                this.values[1] = args[1];
                this.values[2] = args[2];
                this.values[3] = args[3];
            }
        }
        Vector4.create = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var m = null;
            if (args.length === 0) {
                m = new this();
            }
            else {
                m = new this(args[0], args[1], args[2], args[3]);
            }
            return m;
        };
        Object.defineProperty(Vector4.prototype, "x", {
            get: function () {
                return this.values[0];
            },
            set: function (x) {
                this.values[0] = x;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Vector4.prototype, "y", {
            get: function () {
                return this.values[1];
            },
            set: function (y) {
                this.values[1] = y;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Vector4.prototype, "z", {
            get: function () {
                return this.values[2];
            },
            set: function (z) {
                this.values[2] = z;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Vector4.prototype, "w", {
            get: function () {
                return this.values[3];
            },
            set: function (w) {
                this.values[3] = w;
            },
            enumerable: true,
            configurable: true
        });
        Vector4.prototype.normalize = function () {
            var v = this.values;
            var d = Math.sqrt(v[0] * v[0] + v[1] * v[1] + v[2] * v[2] + v[3] * v[3]);
            if (d === 0) {
                return Vector4.create(0, 0, 0, 0);
            }
            v[0] = v[0] / d;
            v[1] = v[1] / d;
            v[2] = v[2] / d;
            v[3] = v[3] / d;
            return this;
        };
        Vector4.prototype.copy = function () {
            return this.copyHelper(Vector4.create());
        };
        Vector4.prototype.toVector3 = function () {
            return wd.Vector3.create(this.values[0], this.values[1], this.values[2]);
        };
        Vector4.prototype.multiplyScalar = function (scalar) {
            this.x *= scalar;
            this.y *= scalar;
            this.z *= scalar;
            this.w *= scalar;
            return this;
        };
        Vector4.prototype.dot = function (v) {
            return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;
        };
        Vector4.prototype.set = function (x, y, z, w) {
            this.x = x;
            this.y = y;
            this.z = z;
            this.w = w;
        };
        Vector4.prototype.copyHelper = function (vector4) {
            var result = vector4, i = 0, len = this.values.length;
            for (i = 0; i < len; i++) {
                result.values[i] = this.values[i];
            }
            return result;
        };
        return Vector4;
    })();
    wd.Vector4 = Vector4;
})(wd || (wd = {}));

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var wd;
(function (wd) {
    var Matrix4 = (function () {
        function Matrix4() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            this.values = null;
            this._matrixArr = null;
            if (args.length === 1) {
                this.values = args[0];
            }
            else {
                this.values = new Float32Array([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]);
            }
            this._matrixArr = [];
        }
        Matrix4.create = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var m = null;
            if (args.length === 0) {
                m = new this();
            }
            else {
                m = new this(args[0]);
            }
            return m;
        };
        Matrix4.prototype.push = function () {
            this._matrixArr.push(this.values);
        };
        Matrix4.prototype.pop = function () {
            this.values = this._matrixArr.pop();
        };
        Matrix4.prototype.setIdentity = function () {
            var e = this.values;
            e[0] = 1;
            e[4] = 0;
            e[8] = 0;
            e[12] = 0;
            e[1] = 0;
            e[5] = 1;
            e[9] = 0;
            e[13] = 0;
            e[2] = 0;
            e[6] = 0;
            e[10] = 1;
            e[14] = 0;
            e[3] = 0;
            e[7] = 0;
            e[11] = 0;
            e[15] = 1;
            return this;
        };
        Matrix4.prototype.invert = function () {
            var a00, a01, a02, a03, a10, a11, a12, a13, a20, a21, a22, a23, a30, a31, a32, a33, b00, b01, b02, b03, b04, b05, b06, b07, b08, b09, b10, b11, invDet, m;
            m = this.values;
            a00 = m[0];
            a01 = m[1];
            a02 = m[2];
            a03 = m[3];
            a10 = m[4];
            a11 = m[5];
            a12 = m[6];
            a13 = m[7];
            a20 = m[8];
            a21 = m[9];
            a22 = m[10];
            a23 = m[11];
            a30 = m[12];
            a31 = m[13];
            a32 = m[14];
            a33 = m[15];
            b00 = a00 * a11 - a01 * a10;
            b01 = a00 * a12 - a02 * a10;
            b02 = a00 * a13 - a03 * a10;
            b03 = a01 * a12 - a02 * a11;
            b04 = a01 * a13 - a03 * a11;
            b05 = a02 * a13 - a03 * a12;
            b06 = a20 * a31 - a21 * a30;
            b07 = a20 * a32 - a22 * a30;
            b08 = a20 * a33 - a23 * a30;
            b09 = a21 * a32 - a22 * a31;
            b10 = a21 * a33 - a23 * a31;
            b11 = a22 * a33 - a23 * a32;
            invDet = 1 / (b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06);
            m[0] = (a11 * b11 - a12 * b10 + a13 * b09) * invDet;
            m[1] = (-a01 * b11 + a02 * b10 - a03 * b09) * invDet;
            m[2] = (a31 * b05 - a32 * b04 + a33 * b03) * invDet;
            m[3] = (-a21 * b05 + a22 * b04 - a23 * b03) * invDet;
            m[4] = (-a10 * b11 + a12 * b08 - a13 * b07) * invDet;
            m[5] = (a00 * b11 - a02 * b08 + a03 * b07) * invDet;
            m[6] = (-a30 * b05 + a32 * b02 - a33 * b01) * invDet;
            m[7] = (a20 * b05 - a22 * b02 + a23 * b01) * invDet;
            m[8] = (a10 * b10 - a11 * b08 + a13 * b06) * invDet;
            m[9] = (-a00 * b10 + a01 * b08 - a03 * b06) * invDet;
            m[10] = (a30 * b04 - a31 * b02 + a33 * b00) * invDet;
            m[11] = (-a20 * b04 + a21 * b02 - a23 * b00) * invDet;
            m[12] = (-a10 * b09 + a11 * b07 - a12 * b06) * invDet;
            m[13] = (a00 * b09 - a01 * b07 + a02 * b06) * invDet;
            m[14] = (-a30 * b03 + a31 * b01 - a32 * b00) * invDet;
            m[15] = (a20 * b03 - a21 * b01 + a22 * b00) * invDet;
            return this;
        };
        Matrix4.prototype.invertTo3x3 = function () {
            var a11, a21, a31, a12, a22, a32, a13, a23, a33, m, r, det, idet;
            var mat3 = wd.Matrix3.create();
            m = this.values;
            r = mat3.values;
            a11 = m[10] * m[5] - m[6] * m[9];
            a21 = -m[10] * m[1] + m[2] * m[9];
            a31 = m[6] * m[1] - m[2] * m[5];
            a12 = -m[10] * m[4] + m[6] * m[8];
            a22 = m[10] * m[0] - m[2] * m[8];
            a32 = -m[6] * m[0] + m[2] * m[4];
            a13 = m[9] * m[4] - m[5] * m[8];
            a23 = -m[9] * m[0] + m[1] * m[8];
            a33 = m[5] * m[0] - m[1] * m[4];
            det = m[0] * a11 + m[1] * a12 + m[2] * a13;
            if (det === 0) {
                wd.Log.warn("can't invert matrix, determinant is 0");
                return mat3;
            }
            idet = 1 / det;
            r[0] = idet * a11;
            r[1] = idet * a21;
            r[2] = idet * a31;
            r[3] = idet * a12;
            r[4] = idet * a22;
            r[5] = idet * a32;
            r[6] = idet * a13;
            r[7] = idet * a23;
            r[8] = idet * a33;
            return mat3;
        };
        Matrix4.prototype.transpose = function () {
            var te = this.values;
            var tmp;
            tmp = te[1];
            te[1] = te[4];
            te[4] = tmp;
            tmp = te[2];
            te[2] = te[8];
            te[8] = tmp;
            tmp = te[6];
            te[6] = te[9];
            te[9] = tmp;
            tmp = te[3];
            te[3] = te[12];
            te[12] = tmp;
            tmp = te[7];
            te[7] = te[13];
            te[13] = tmp;
            tmp = te[11];
            te[11] = te[14];
            te[14] = tmp;
            return this;
        };
        Matrix4.prototype.setTranslate = function (x, y, z) {
            var e = this.values;
            e[0] = 1;
            e[4] = 0;
            e[8] = 0;
            e[12] = x;
            e[1] = 0;
            e[5] = 1;
            e[9] = 0;
            e[13] = y;
            e[2] = 0;
            e[6] = 0;
            e[10] = 1;
            e[14] = z;
            e[3] = 0;
            e[7] = 0;
            e[11] = 0;
            e[15] = 1;
            return this;
        };
        Matrix4.prototype.translate = function (x, y, z) {
            this.applyMatrix(Matrix4.create().setTranslate(x, y, z));
            return this;
        };
        Matrix4.prototype.setRotate = function (angle, x, y, z) {
            var e, s, c, len, rlen, nc, xy, yz, zx, xs, ys, zs;
            var angle = Math.PI * angle / 180;
            e = this.values;
            s = Math.sin(angle);
            c = Math.cos(angle);
            if (0 !== x && 0 === y && 0 === z) {
                if (x < 0) {
                    s = -s;
                }
                e[0] = 1;
                e[4] = 0;
                e[8] = 0;
                e[12] = 0;
                e[1] = 0;
                e[5] = c;
                e[9] = -s;
                e[13] = 0;
                e[2] = 0;
                e[6] = s;
                e[10] = c;
                e[14] = 0;
                e[3] = 0;
                e[7] = 0;
                e[11] = 0;
                e[15] = 1;
            }
            else if (0 === x && 0 !== y && 0 === z) {
                if (y < 0) {
                    s = -s;
                }
                e[0] = c;
                e[4] = 0;
                e[8] = s;
                e[12] = 0;
                e[1] = 0;
                e[5] = 1;
                e[9] = 0;
                e[13] = 0;
                e[2] = -s;
                e[6] = 0;
                e[10] = c;
                e[14] = 0;
                e[3] = 0;
                e[7] = 0;
                e[11] = 0;
                e[15] = 1;
            }
            else if (0 === x && 0 === y && 0 !== z) {
                if (z < 0) {
                    s = -s;
                }
                e[0] = c;
                e[4] = -s;
                e[8] = 0;
                e[12] = 0;
                e[1] = s;
                e[5] = c;
                e[9] = 0;
                e[13] = 0;
                e[2] = 0;
                e[6] = 0;
                e[10] = 1;
                e[14] = 0;
                e[3] = 0;
                e[7] = 0;
                e[11] = 0;
                e[15] = 1;
            }
            else {
                len = Math.sqrt(x * x + y * y + z * z);
                if (len !== 1) {
                    rlen = 1 / len;
                    x *= rlen;
                    y *= rlen;
                    z *= rlen;
                }
                nc = 1 - c;
                xy = x * y;
                yz = y * z;
                zx = z * x;
                xs = x * s;
                ys = y * s;
                zs = z * s;
                e[0] = x * x * nc + c;
                e[1] = xy * nc + zs;
                e[2] = zx * nc - ys;
                e[3] = 0;
                e[4] = xy * nc - zs;
                e[5] = y * y * nc + c;
                e[6] = yz * nc + xs;
                e[7] = 0;
                e[8] = zx * nc + ys;
                e[9] = yz * nc - xs;
                e[10] = z * z * nc + c;
                e[11] = 0;
                e[12] = 0;
                e[13] = 0;
                e[14] = 0;
                e[15] = 1;
            }
            return this;
        };
        Matrix4.prototype.rotate = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var angle = args[0];
            if (args.length === 2) {
                var vector3 = args[1];
                this.applyMatrix(Matrix4.create().setRotate(angle, vector3.values[0], vector3.values[1], vector3.values[2]));
            }
            else if (args.length === 4) {
                var x = args[1], y = args[2], z = args[3];
                this.applyMatrix(Matrix4.create().setRotate(angle, x, y, z));
            }
            return this;
        };
        Matrix4.prototype.setScale = function (x, y, z) {
            var e = this.values;
            e[0] = x;
            e[4] = 0;
            e[8] = 0;
            e[12] = 0;
            e[1] = 0;
            e[5] = y;
            e[9] = 0;
            e[13] = 0;
            e[2] = 0;
            e[6] = 0;
            e[10] = z;
            e[14] = 0;
            e[3] = 0;
            e[7] = 0;
            e[11] = 0;
            e[15] = 1;
            return this;
        };
        Matrix4.prototype.scale = function (x, y, z) {
            this.applyMatrix(Matrix4.create().setScale(x, y, z));
            return this;
        };
        Matrix4.prototype.setLookAt = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var x, y, z, eye, center, up;
            if (args.length === 3) {
                eye = args[0];
                center = args[1];
                up = args[2];
            }
            else if (args.length === 9) {
                eye = wd.Vector3.create(args[0], args[1], args[2]);
                center = wd.Vector3.create(args[3], args[4], args[5]);
                up = wd.Vector3.create(args[6], args[7], args[8]);
            }
            x = wd.Vector3.create();
            z = eye.copy().sub(center).normalize();
            y = up.copy().normalize();
            x.cross(y, z).normalize();
            y.cross(z, x);
            var r = this.values;
            r[0] = x.x;
            r[1] = x.y;
            r[2] = x.z;
            r[3] = 0;
            r[4] = y.x;
            r[5] = y.y;
            r[6] = y.z;
            r[7] = 0;
            r[8] = z.x;
            r[9] = z.y;
            r[10] = z.z;
            r[11] = 0;
            r[12] = eye.x;
            r[13] = eye.y;
            r[14] = eye.z;
            r[15] = 1;
            return this;
        };
        Matrix4.prototype.lookAt = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var matrix = Matrix4.create();
            this.applyMatrix(matrix.setLookAt.apply(matrix, args));
            return this;
        };
        Matrix4.prototype.setOrtho = function (left, right, bottom, top, near, far) {
            var e = this.values, rw, rh, rd;
            rw = 1 / (right - left);
            rh = 1 / (top - bottom);
            rd = 1 / (far - near);
            e[0] = 2 * rw;
            e[1] = 0;
            e[2] = 0;
            e[3] = 0;
            e[4] = 0;
            e[5] = 2 * rh;
            e[6] = 0;
            e[7] = 0;
            e[8] = 0;
            e[9] = 0;
            e[10] = -2 * rd;
            e[11] = 0;
            e[12] = -(right + left) * rw;
            e[13] = -(top + bottom) * rh;
            e[14] = -(far + near) * rd;
            e[15] = 1;
            return this;
        };
        Matrix4.prototype.ortho = function (left, right, bottom, top, near, far) {
            this.applyMatrix(Matrix4.create().setOrtho(left, right, bottom, top, near, far));
            return this;
        };
        Matrix4.prototype.setPerspective = function (fovy, aspect, near, far) {
            var e = null, rd = null, s = null, ct = null, fovy = Math.PI * fovy / 180 / 2;
            s = Math.sin(fovy);
            wd.Log.error(s === 0, wd.Log.info.FUNC_MUST_NOT_BE("frustum", "null"));
            rd = 1 / (far - near);
            ct = Math.cos(fovy) / s;
            e = this.values;
            e[0] = ct / aspect;
            e[1] = 0;
            e[2] = 0;
            e[3] = 0;
            e[4] = 0;
            e[5] = ct;
            e[6] = 0;
            e[7] = 0;
            e[8] = 0;
            e[9] = 0;
            e[10] = -(far + near) * rd;
            e[11] = -1;
            e[12] = 0;
            e[13] = 0;
            e[14] = -2 * near * far * rd;
            e[15] = 0;
            return this;
        };
        Matrix4.prototype.perspective = function (fovy, aspect, near, far) {
            this.applyMatrix(Matrix4.create().setPerspective(fovy, aspect, near, far));
            return this;
        };
        Matrix4.prototype.applyMatrix = function (other) {
            var a = this, b = other.copy();
            this.values = b.multiply(a).values;
            return this;
        };
        Matrix4.prototype.multiply = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var mat1 = null, mat2 = null, result = null;
            result = this.values;
            if (args.length === 1) {
                mat1 = this.values;
                mat2 = args[0].values;
            }
            else if (args.length === 2) {
                mat1 = args[0].values;
                mat2 = args[1].values;
            }
            var a = mat1[0], b = mat1[1], c = mat1[2], d = mat1[3], e = mat1[4], f = mat1[5], g = mat1[6], h = mat1[7], i = mat1[8], j = mat1[9], k = mat1[10], l = mat1[11], m = mat1[12], n = mat1[13], o = mat1[14], p = mat1[15], A = mat2[0], B = mat2[1], C = mat2[2], D = mat2[3], E = mat2[4], F = mat2[5], G = mat2[6], H = mat2[7], I = mat2[8], J = mat2[9], K = mat2[10], L = mat2[11], M = mat2[12], N = mat2[13], O = mat2[14], P = mat2[15];
            result[0] = A * a + B * e + C * i + D * m;
            result[1] = A * b + B * f + C * j + D * n;
            result[2] = A * c + B * g + C * k + D * o;
            result[3] = A * d + B * h + C * l + D * p;
            result[4] = E * a + F * e + G * i + H * m;
            result[5] = E * b + F * f + G * j + H * n;
            result[6] = E * c + F * g + G * k + H * o;
            result[7] = E * d + F * h + G * l + H * p;
            result[8] = I * a + J * e + K * i + L * m;
            result[9] = I * b + J * f + K * j + L * n;
            result[10] = I * c + J * g + K * k + L * o;
            result[11] = I * d + J * h + K * l + L * p;
            result[12] = M * a + N * e + O * i + P * m;
            result[13] = M * b + N * f + O * j + P * n;
            result[14] = M * c + N * g + O * k + P * o;
            result[15] = M * d + N * h + O * l + P * p;
            return this;
        };
        Matrix4.prototype.multiplyVector4 = function (vector) {
            var mat1 = this.values, vec4 = vector.values;
            var result = [];
            result[0] = vec4[0] * mat1[0] + vec4[1] * mat1[4] + vec4[2] * mat1[8] + vec4[3] * mat1[12];
            result[1] = vec4[0] * mat1[1] + vec4[1] * mat1[5] + vec4[2] * mat1[9] + vec4[3] * mat1[13];
            result[2] = vec4[0] * mat1[2] + vec4[1] * mat1[6] + vec4[2] * mat1[10] + vec4[3] * mat1[14];
            result[3] = vec4[0] * mat1[3] + vec4[1] * mat1[7] + vec4[2] * mat1[11] + vec4[3] * mat1[15];
            return wd.Vector4.create(result[0], result[1], result[2], result[3]);
        };
        Matrix4.prototype.multiplyVector3 = function (vector) {
            var mat1 = this.values, vec3 = vector.values;
            var result = [];
            result[0] = vec3[0] * mat1[0] + vec3[1] * mat1[4] + vec3[2] * mat1[8];
            result[1] = vec3[0] * mat1[1] + vec3[1] * mat1[5] + vec3[2] * mat1[9];
            result[2] = vec3[0] * mat1[2] + vec3[1] * mat1[6] + vec3[2] * mat1[10];
            return wd.Vector3.create(result[0], result[1], result[2]);
        };
        Matrix4.prototype.multiplyPoint = function (vector) {
            var mat1 = this.values, vec3 = vector.values;
            var result = [];
            result[0] = vec3[0] * mat1[0] + vec3[1] * mat1[4] + vec3[2] * mat1[8] + mat1[12];
            result[1] = vec3[0] * mat1[1] + vec3[1] * mat1[5] + vec3[2] * mat1[9] + mat1[13];
            result[2] = vec3[0] * mat1[2] + vec3[1] * mat1[6] + vec3[2] * mat1[10] + mat1[14];
            return wd.Vector3.create(result[0], result[1], result[2]);
        };
        Matrix4.prototype.copy = function () {
            var result = Matrix4.create(), i = 0, len = this.values.length;
            for (i = 0; i < len; i++) {
                result.values[i] = this.values[i];
            }
            return result;
        };
        Matrix4.prototype.getX = function () {
            return wd.Vector3.create(this.values[0], this.values[1], this.values[2]);
        };
        Matrix4.prototype.getY = function () {
            return wd.Vector3.create(this.values[4], this.values[5], this.values[6]);
        };
        Matrix4.prototype.getZ = function () {
            return wd.Vector3.create(this.values[8], this.values[9], this.values[10]);
        };
        Matrix4.prototype.getTranslation = function () {
            return wd.Vector3.create(this.values[12], this.values[13], this.values[14]);
        };
        Matrix4.prototype.getScale = function () {
            return wd.Vector3.create(this.getX().length(), this.getY().length(), this.getZ().length());
        };
        Matrix4.prototype.getEulerAngles = function () {
            var x, y, z, sx, sy, sz, m, halfPi;
            var scale = this.getScale();
            sx = scale.x;
            sy = scale.y;
            sz = scale.z;
            m = this.values;
            y = Math.asin(-m[2] / sx);
            halfPi = Math.PI * 0.5;
            if (y < halfPi) {
                if (y > -halfPi) {
                    x = Math.atan2(m[6] / sy, m[10] / sz);
                    z = Math.atan2(m[1] / sx, m[0] / sx);
                }
                else {
                    z = 0;
                    x = -Math.atan2(m[4] / sy, m[5] / sy);
                }
            }
            else {
                z = 0;
                x = Math.atan2(m[4] / sy, m[5] / sy);
            }
            return wd.Vector3.create(x, y, z).scale(wd.RAD_TO_DEG);
        };
        Matrix4.prototype.setTRS = function (t, r, s) {
            var tx, ty, tz, qx, qy, qz, qw, sx, sy, sz, x2, y2, z2, xx, xy, xz, yy, yz, zz, wx, wy, wz, m;
            tx = t.x;
            ty = t.y;
            tz = t.z;
            qx = r.x;
            qy = r.y;
            qz = r.z;
            qw = r.w;
            sx = s.x;
            sy = s.y;
            sz = s.z;
            x2 = qx + qx;
            y2 = qy + qy;
            z2 = qz + qz;
            xx = qx * x2;
            xy = qx * y2;
            xz = qx * z2;
            yy = qy * y2;
            yz = qy * z2;
            zz = qz * z2;
            wx = qw * x2;
            wy = qw * y2;
            wz = qw * z2;
            m = this.values;
            m[0] = (1 - (yy + zz)) * sx;
            m[1] = (xy + wz) * sx;
            m[2] = (xz - wy) * sx;
            m[3] = 0;
            m[4] = (xy - wz) * sy;
            m[5] = (1 - (xx + zz)) * sy;
            m[6] = (yz + wx) * sy;
            m[7] = 0;
            m[8] = (xz + wy) * sz;
            m[9] = (yz - wx) * sz;
            m[10] = (1 - (xx + yy)) * sz;
            m[11] = 0;
            m[12] = tx;
            m[13] = ty;
            m[14] = tz;
            m[15] = 1;
            return this;
        };
        __decorate([
            wd.require(function (left, right, bottom, top, near, far) {
                wd.assert(left !== right && bottom !== top && near !== far, wd.Log.info.FUNC_MUST_NOT_BE("frustum", "null"));
            })
        ], Matrix4.prototype, "setOrtho", null);
        __decorate([
            wd.require(function (fovy, aspect, near, far) {
                wd.assert(near !== far && aspect !== 0, wd.Log.info.FUNC_MUST_NOT_BE("frustum", "null"));
                wd.assert(near > 0, wd.Log.info.FUNC_MUST("near", "> 0"));
                wd.assert(far > 0, wd.Log.info.FUNC_MUST("far", "> 0"));
            })
        ], Matrix4.prototype, "setPerspective", null);
        return Matrix4;
    })();
    wd.Matrix4 = Matrix4;
})(wd || (wd = {}));

var wd;
(function (wd) {
    var Matrix3 = (function () {
        function Matrix3() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            this.values = null;
            if (args.length === 1) {
                this.values = args[0];
            }
            else {
                this.values = new Float32Array([1, 0, 0, 0, 1, 0, 0, 0, 1]);
            }
        }
        Matrix3.create = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var m = null;
            if (args.length === 0) {
                m = new this();
            }
            else {
                m = new this(args[0]);
            }
            return m;
        };
        Matrix3.prototype.setIdentity = function () {
            var e = this.values;
            e[0] = 1;
            e[3] = 0;
            e[6] = 0;
            e[1] = 0;
            e[4] = 1;
            e[7] = 0;
            e[2] = 0;
            e[5] = 0;
            e[8] = 1;
            return this;
        };
        Matrix3.prototype.invert = function () {
            var me = this.values, te = new Float32Array(16), d = this.values;
            te[0] = me[10] * me[5] - me[6] * me[9];
            te[1] = -me[10] * me[1] + me[2] * me[9];
            te[2] = me[6] * me[1] - me[2] * me[5];
            te[3] = -me[10] * me[4] + me[6] * me[8];
            te[4] = me[10] * me[0] - me[2] * me[8];
            te[5] = -me[6] * me[0] + me[2] * me[4];
            te[6] = me[9] * me[4] - me[5] * me[8];
            te[7] = -me[9] * me[0] + me[1] * me[8];
            te[8] = me[5] * me[0] - me[1] * me[4];
            var det = me[0] * te[0] + me[1] * te[3] + me[2] * te[6];
            if (det === 0) {
                wd.Log.warn("can't invert matrix, determinant is 0");
                this.setIdentity();
                return this;
            }
            det = 1 / det;
            for (var i = 0; i < 9; i++) {
                d[i] = te[i] * det;
            }
            return;
        };
        Matrix3.prototype.multiplyScalar = function (s) {
            var te = this.values;
            te[0] *= s;
            te[3] *= s;
            te[6] *= s;
            te[1] *= s;
            te[4] *= s;
            te[7] *= s;
            te[2] *= s;
            te[5] *= s;
            te[8] *= s;
            return this;
        };
        Matrix3.prototype.multiplyVector3 = function (vector) {
            var x = vector.x, y = vector.y, z = vector.z, result = wd.Vector3.create(), e = this.values;
            result.x = e[0] * x + e[3] * y + e[6] * z;
            result.y = e[1] * x + e[4] * y + e[7] * z;
            result.z = e[2] * x + e[5] * y + e[8] * z;
            return result;
        };
        Matrix3.prototype.transpose = function () {
            var tmp, m = this.values;
            tmp = m[1];
            m[1] = m[3];
            m[3] = tmp;
            tmp = m[2];
            m[2] = m[6];
            m[6] = tmp;
            tmp = m[5];
            m[5] = m[7];
            m[7] = tmp;
            return this;
        };
        Matrix3.prototype.copy = function () {
            var me = this.values;
            return Matrix3.create().set(me[0], me[3], me[6], me[1], me[4], me[7], me[2], me[5], me[8]);
        };
        Matrix3.prototype.set = function (n11, n12, n13, n21, n22, n23, n31, n32, n33) {
            var te = this.values;
            te[0] = n11;
            te[3] = n12;
            te[6] = n13;
            te[1] = n21;
            te[4] = n22;
            te[7] = n23;
            te[2] = n31;
            te[5] = n32;
            te[8] = n33;
            return this;
        };
        return Matrix3;
    })();
    wd.Matrix3 = Matrix3;
})(wd || (wd = {}));

var wd;
(function (wd) {
    var Quaternion = (function () {
        function Quaternion(x, y, z, w) {
            if (x === void 0) { x = 0; }
            if (y === void 0) { y = 0; }
            if (z === void 0) { z = 0; }
            if (w === void 0) { w = 1; }
            this.x = null;
            this.y = null;
            this.z = null;
            this.w = null;
            this.x = x;
            this.y = y;
            this.z = z;
            this.w = w;
        }
        Quaternion.create = function (x, y, z, w) {
            var obj = new this(x, y, z, w);
            return obj;
        };
        Quaternion.prototype.setFromEulerAngles = function (eulerAngles) {
            var sx, cx, sy, cy, sz, cz, halfToRad, ex = eulerAngles.x, ey = eulerAngles.y, ez = eulerAngles.z;
            halfToRad = 0.5 * wd.DEG_TO_RAD;
            ex *= halfToRad;
            ey *= halfToRad;
            ez *= halfToRad;
            sx = Math.sin(ex);
            cx = Math.cos(ex);
            sy = Math.sin(ey);
            cy = Math.cos(ey);
            sz = Math.sin(ez);
            cz = Math.cos(ez);
            this.x = sx * cy * cz - cx * sy * sz;
            this.y = cx * sy * cz + sx * cy * sz;
            this.z = cx * cy * sz - sx * sy * cz;
            this.w = cx * cy * cz + sx * sy * sz;
            return this;
        };
        Quaternion.prototype.multiply = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var q1x, q1y, q1z, q1w, q2x, q2y, q2z, q2w, rhs1, rhs2, result = this;
            if (args.length === 1) {
                rhs1 = this;
                rhs2 = args[0];
            }
            else if (args.length === 2) {
                rhs1 = args[0];
                rhs2 = args[1];
            }
            q1x = rhs1.x;
            q1y = rhs1.y;
            q1z = rhs1.z;
            q1w = rhs1.w;
            q2x = rhs2.x;
            q2y = rhs2.y;
            q2z = rhs2.z;
            q2w = rhs2.w;
            result.x = q1w * q2x + q1x * q2w + q1y * q2z - q1z * q2y;
            result.y = q1w * q2y + q1y * q2w + q1z * q2x - q1x * q2z;
            result.z = q1w * q2z + q1z * q2w + q1x * q2y - q1y * q2x;
            result.w = q1w * q2w - q1x * q2x - q1y * q2y - q1z * q2z;
            return result;
        };
        Quaternion.prototype.setFromMatrix = function (matrix) {
            var m00, m01, m02, m10, m11, m12, m20, m21, m22, tr, s, rs, lx, ly, lz, m;
            m = matrix.values;
            m00 = m[0];
            m01 = m[1];
            m02 = m[2];
            m10 = m[4];
            m11 = m[5];
            m12 = m[6];
            m20 = m[8];
            m21 = m[9];
            m22 = m[10];
            lx = 1 / Math.sqrt(m00 * m00 + m01 * m01 + m02 * m02);
            ly = 1 / Math.sqrt(m10 * m10 + m11 * m11 + m12 * m12);
            lz = 1 / Math.sqrt(m20 * m20 + m21 * m21 + m22 * m22);
            m00 *= lx;
            m01 *= lx;
            m02 *= lx;
            m10 *= ly;
            m11 *= ly;
            m12 *= ly;
            m20 *= lz;
            m21 *= lz;
            m22 *= lz;
            tr = m00 + m11 + m22;
            if (tr >= 0) {
                s = Math.sqrt(tr + 1);
                this.w = s * 0.5;
                s = 0.5 / s;
                this.x = (m12 - m21) * s;
                this.y = (m20 - m02) * s;
                this.z = (m01 - m10) * s;
            }
            else {
                if (m00 > m11) {
                    if (m00 > m22) {
                        rs = (m00 - (m11 + m22)) + 1;
                        rs = Math.sqrt(rs);
                        this.x = rs * 0.5;
                        rs = 0.5 / rs;
                        this.w = (m12 - m21) * rs;
                        this.y = (m01 + m10) * rs;
                        this.z = (m02 + m20) * rs;
                    }
                    else {
                        rs = (m22 - (m00 + m11)) + 1;
                        rs = Math.sqrt(rs);
                        this.z = rs * 0.5;
                        rs = 0.5 / rs;
                        this.w = (m01 - m10) * rs;
                        this.x = (m20 + m02) * rs;
                        this.y = (m21 + m12) * rs;
                    }
                }
                else if (m11 > m22) {
                    rs = (m11 - (m22 + m00)) + 1;
                    rs = Math.sqrt(rs);
                    this.y = rs * 0.5;
                    rs = 0.5 / rs;
                    this.w = (m20 - m02) * rs;
                    this.z = (m12 + m21) * rs;
                    this.x = (m10 + m01) * rs;
                }
                else {
                    rs = (m22 - (m00 + m11)) + 1;
                    rs = Math.sqrt(rs);
                    this.z = rs * 0.5;
                    rs = 0.5 / rs;
                    this.w = (m01 - m10) * rs;
                    this.x = (m20 + m02) * rs;
                    this.y = (m21 + m12) * rs;
                }
            }
            return this;
        };
        Quaternion.prototype.setFromAxisAngle = function (angle, axis) {
            var sa, ca;
            axis = axis.normalize();
            angle *= 0.5 * wd.DEG_TO_RAD;
            sa = Math.sin(angle);
            ca = Math.cos(angle);
            this.x = sa * axis.x;
            this.y = sa * axis.y;
            this.z = sa * axis.z;
            this.w = ca;
            return this;
        };
        Quaternion.prototype.invert = function () {
            return this.conjugate().normalize();
        };
        Quaternion.prototype.conjugate = function () {
            this.x *= -1;
            this.y *= -1;
            this.z *= -1;
            return this;
        };
        Quaternion.prototype.clone = function () {
            return Quaternion.create(this.x, this.y, this.z, this.w);
        };
        Quaternion.prototype.copy = function () {
            return Quaternion.create(this.x, this.y, this.z, this.w);
        };
        Quaternion.prototype.normalize = function () {
            var len = this.length();
            if (len === 0) {
                this.x = this.y = this.z = 0;
                this.w = 1;
            }
            else {
                len = 1 / len;
                this.x *= len;
                this.y *= len;
                this.z *= len;
                this.w *= len;
            }
            return this;
        };
        Quaternion.prototype.length = function () {
            var x, y, z, w;
            x = this.x;
            y = this.y;
            z = this.z;
            w = this.w;
            return Math.sqrt(x * x + y * y + z * z + w * w);
        };
        Quaternion.prototype.multiplyVector3 = function (vector) {
            var q = this;
            var x = vector.x;
            var y = vector.y;
            var z = vector.z;
            var qx = q.x;
            var qy = q.y;
            var qz = q.z;
            var qw = q.w;
            var ix = qw * x + qy * z - qz * y;
            var iy = qw * y + qz * x - qx * z;
            var iz = qw * z + qx * y - qy * x;
            var iw = -qx * x - qy * y - qz * z;
            return wd.Vector3.create(ix * qw + iw * -qx + iy * -qz - iz * -qy, iy * qw + iw * -qy + iz * -qx - ix * -qz, iz * qw + iw * -qz + ix * -qy - iy * -qx);
        };
        Quaternion.prototype.set = function (x, y, z, w) {
            this.x = x;
            this.y = y;
            this.z = z;
            this.w = w;
        };
        Quaternion.prototype.sub = function (quat) {
            var result = quat.copy().invert().multiply(this);
            this.set(result.x, result.y, result.z, result.w);
            return this;
        };
        Quaternion.prototype.getEulerAngles = function () {
            var x, y, z, qx, qy, qz, qw, a2;
            qx = this.x;
            qy = this.y;
            qz = this.z;
            qw = this.w;
            a2 = 2 * (qw * qy - qx * qz);
            if (a2 <= -0.99999) {
                x = 2 * Math.atan2(qx, qw);
                y = -Math.PI / 2;
                z = 0;
            }
            else if (a2 >= 0.99999) {
                x = 2 * Math.atan2(qx, qw);
                y = Math.PI / 2;
                z = 0;
            }
            else {
                x = Math.atan2(2 * (qw * qx + qy * qz), 1 - 2 * (qx * qx + qy * qy));
                y = Math.asin(a2);
                z = Math.atan2(2 * (qw * qz + qx * qy), 1 - 2 * (qy * qy + qz * qz));
            }
            return wd.Vector3.create(x, y, z).scale(wd.RAD_TO_DEG);
        };
        return Quaternion;
    })();
    wd.Quaternion = Quaternion;
})(wd || (wd = {}));

var wd;
(function (wd) {
    var Plane = (function () {
        function Plane(a, b, c, d) {
            this.normal = wd.Vector3.create(0, 1, 0);
            this.d = 0;
            this.normal = wd.Vector3.create(a, b, c);
            this.d = d;
        }
        Plane.create = function (a, b, c, d) {
            var obj = new this(a, b, c, d);
            return obj;
        };
        Plane.prototype.getReflectionMatrix = function () {
            this.normalize();
            var x = this.normal.x;
            var y = this.normal.y;
            var z = this.normal.z;
            var temp = -2 * x;
            var temp2 = -2 * y;
            var temp3 = -2 * z;
            var result = wd.Matrix4.create();
            result.values[0] = (temp * x) + 1;
            result.values[1] = temp2 * x;
            result.values[2] = temp3 * x;
            result.values[3] = 0.0;
            result.values[4] = temp * y;
            result.values[5] = (temp2 * y) + 1;
            result.values[6] = temp3 * y;
            result.values[7] = 0.0;
            result.values[8] = temp * z;
            result.values[9] = temp2 * z;
            result.values[10] = (temp3 * z) + 1;
            result.values[11] = 0.0;
            result.values[12] = temp * this.d;
            result.values[13] = temp2 * this.d;
            result.values[14] = temp3 * this.d;
            result.values[15] = 1.0;
            return result;
        };
        Plane.prototype.normalize = function () {
            var norm = (Math.sqrt((this.normal.x * this.normal.x) + (this.normal.y * this.normal.y) + (this.normal.z * this.normal.z)));
            var magnitude = 0;
            if (norm !== 0) {
                magnitude = 1.0 / norm;
            }
            this.normal.x *= magnitude;
            this.normal.y *= magnitude;
            this.normal.z *= magnitude;
            this.d *= magnitude;
            return this;
        };
        Plane.prototype.copy = function () {
            return Plane.create(this.normal.x, this.normal.y, this.normal.z, this.d);
        };
        return Plane;
    })();
    wd.Plane = Plane;
})(wd || (wd = {}));

var wd;
(function (wd) {
    var Entity = (function () {
        function Entity() {
            this.uid = null;
            this._tagList = wdCb.Collection.create();
            this.uid = Entity._count;
            Entity._count += 1;
        }
        Entity.prototype.addTag = function (tag) {
            this._tagList.addChild(tag);
        };
        Entity.prototype.removeTag = function (tag) {
            this._tagList.removeChild(tag);
        };
        Entity.prototype.getTagList = function () {
            return this._tagList;
        };
        Entity.prototype.hasTag = function (tag) {
            return this._tagList.hasChild(tag);
        };
        Entity.prototype.containTag = function (tag) {
            return this._tagList.hasChild(function (t) {
                return t.indexOf(tag) > -1;
            });
        };
        Entity._count = 1;
        return Entity;
    })();
    wd.Entity = Entity;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var wd;
(function (wd) {
    var Component = (function (_super) {
        __extends(Component, _super);
        function Component() {
            _super.apply(this, arguments);
            this.gameObject = null;
        }
        Component.prototype.init = function () {
        };
        Component.prototype.dispose = function () {
        };
        Object.defineProperty(Component.prototype, "transform", {
            get: function () {
                if (!this.gameObject) {
                    return null;
                }
                return this.gameObject.transform;
            },
            enumerable: true,
            configurable: true
        });
        Component.prototype.addToGameObject = function (gameObject) {
            if (this.gameObject) {
                this.gameObject.removeComponent(this);
            }
            this.gameObject = gameObject;
        };
        Component.prototype.removeFromGameObject = function (gameObject) {
            this.gameObject = null;
        };
        __decorate([
            wd.virtual
        ], Component.prototype, "init", null);
        __decorate([
            wd.virtual
        ], Component.prototype, "dispose", null);
        return Component;
    })(wd.Entity);
    wd.Component = Component;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var Transform = (function (_super) {
        __extends(Transform, _super);
        function Transform(gameObject) {
            _super.call(this);
            this._localToParentMatrix = wd.Matrix4.create();
            this._localToWorldMatrix = null;
            this._parent = null;
            this._position = wd.Vector3.create();
            this._rotation = wd.Quaternion.create(0, 0, 0, 1);
            this._scale = wd.Vector3.create(1, 1, 1);
            this._eulerAngles = null;
            this._localPosition = wd.Vector3.create(0, 0, 0);
            this._localRotation = wd.Quaternion.create(0, 0, 0, 1);
            this._localEulerAngles = null;
            this._localScale = wd.Vector3.create(1, 1, 1);
            this._isTranslate = false;
            this._isRotate = false;
            this._isScale = false;
            this.dirtyWorld = null;
            this.dirtyLocal = true;
            this._children = wdCb.Collection.create();
            this._gameObject = null;
            this._gameObject = gameObject;
        }
        Transform.create = function (gameObject) {
            var obj = new this(gameObject);
            return obj;
        };
        Object.defineProperty(Transform.prototype, "localToParentMatrix", {
            get: function () {
                if (this.dirtyLocal) {
                    this._localToParentMatrix.setTRS(this._localPosition, this._localRotation, this._localScale);
                    this.dirtyLocal = false;
                    this.dirtyWorld = true;
                }
                return this._localToParentMatrix;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Transform.prototype, "localToWorldMatrix", {
            get: function () {
                var syncList = wdCb.Collection.create(), current = this._parent;
                syncList.addChild(this);
                while (current !== null) {
                    syncList.addChild(current);
                    current = current.parent;
                }
                syncList.reverse().forEach(function (transform) {
                    transform.sync();
                });
                return this._localToWorldMatrix;
            },
            set: function (localToWorldMatrix) {
                this._localToWorldMatrix = localToWorldMatrix;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Transform.prototype, "parent", {
            get: function () {
                return this._parent;
            },
            set: function (parent) {
                if (this._parent) {
                    this._parent.removeChild(this);
                }
                if (!parent) {
                    this._parent = null;
                    return;
                }
                this._parent = parent;
                this._parent.addChild(this);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Transform.prototype, "position", {
            get: function () {
                this._position = this.localToWorldMatrix.getTranslation();
                return this._position;
            },
            set: function (position) {
                if (this._parent === null) {
                    this._localPosition = position.copy();
                }
                else {
                    this._localPosition = this._parent.localToWorldMatrix.copy().invert().multiplyPoint(position);
                }
                this.isTranslate = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Transform.prototype, "rotation", {
            get: function () {
                this._rotation.setFromMatrix(this.localToWorldMatrix);
                return this._rotation;
            },
            set: function (rotation) {
                if (this._parent === null) {
                    this._localRotation = rotation.copy();
                }
                else {
                    this._localRotation = this._parent.rotation.copy().invert().multiply(rotation);
                }
                this.isRotate = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Transform.prototype, "scale", {
            get: function () {
                this._scale = this.localToWorldMatrix.getScale();
                return this._scale;
            },
            set: function (scale) {
                if (this._parent === null) {
                    this._localScale = scale.copy();
                }
                else {
                    this._localScale = this._parent.localToWorldMatrix.copy().invert().multiplyVector3(scale);
                }
                this.isScale = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Transform.prototype, "eulerAngles", {
            get: function () {
                this._eulerAngles = this.localToWorldMatrix.getEulerAngles();
                return this._eulerAngles;
            },
            set: function (eulerAngles) {
                this._localRotation.setFromEulerAngles(eulerAngles);
                if (this._parent !== null) {
                    this._localRotation = this._parent.rotation.copy().invert().multiply(this._localRotation);
                }
                this.isRotate = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Transform.prototype, "localPosition", {
            get: function () {
                return this._localPosition;
            },
            set: function (position) {
                this._localPosition = position.copy();
                this.isTranslate = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Transform.prototype, "localRotation", {
            get: function () {
                return this._localRotation;
            },
            set: function (rotation) {
                this._localRotation = rotation.copy();
                this.isRotate = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Transform.prototype, "localEulerAngles", {
            get: function () {
                this._localEulerAngles = this._localRotation.getEulerAngles();
                return this._localEulerAngles;
            },
            set: function (localEulerAngles) {
                this._localRotation.setFromEulerAngles(localEulerAngles);
                this.isRotate = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Transform.prototype, "localScale", {
            get: function () {
                return this._localScale;
            },
            set: function (scale) {
                this._localScale = scale.copy();
                this.isScale = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Transform.prototype, "up", {
            get: function () {
                return this.localToWorldMatrix.getY().normalize();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Transform.prototype, "right", {
            get: function () {
                return this.localToWorldMatrix.getX().normalize();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Transform.prototype, "forward", {
            get: function () {
                return this.localToWorldMatrix.getZ().normalize().scale(-1);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Transform.prototype, "isTranslate", {
            get: function () {
                return this._isTranslate;
            },
            set: function (isTranslate) {
                this._isTranslate = isTranslate;
                if (isTranslate) {
                    this.dirtyLocal = true;
                }
                this._children.forEach(function (child) {
                    child.isTranslate = isTranslate;
                });
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Transform.prototype, "isRotate", {
            get: function () {
                return this._isRotate;
            },
            set: function (isRotate) {
                this._isRotate = isRotate;
                if (isRotate) {
                    this.dirtyLocal = true;
                }
                this._children.forEach(function (child) {
                    child.isRotate = isRotate;
                });
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Transform.prototype, "isScale", {
            get: function () {
                return this._isScale;
            },
            set: function (isScale) {
                this._isScale = isScale;
                if (isScale) {
                    this.dirtyLocal = true;
                }
                this._children.forEach(function (child) {
                    child.isScale = isScale;
                });
            },
            enumerable: true,
            configurable: true
        });
        Transform.prototype.init = function () {
            var self = this;
            wd.EventManager.on(wd.EngineEvent.ENDLOOP, function () {
                self._resetTransformFlag();
            });
        };
        Transform.prototype.addChild = function (child) {
            this._children.addChild(child);
        };
        Transform.prototype.removeChild = function (child) {
            this._children.removeChild(child);
        };
        Transform.prototype.sync = function () {
            if (this.dirtyLocal) {
                this._localToParentMatrix.setTRS(this._localPosition, this._localRotation, this._localScale);
                this.dirtyLocal = false;
                this.dirtyWorld = true;
            }
            if (this.dirtyWorld) {
                if (this._parent === null) {
                    this._localToWorldMatrix = this._localToParentMatrix.copy();
                }
                else {
                    this._localToWorldMatrix = this._parent.localToWorldMatrix.copy().multiply(this._localToParentMatrix);
                }
                this.dirtyWorld = false;
                this._children.forEach(function (child) {
                    child.dirtyWorld = true;
                });
            }
        };
        Transform.prototype.translateLocal = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var translation = null;
            if (args.length === 3) {
                translation = wd.Vector3.create(args[0], args[1], args[2]);
            }
            else {
                translation = args[0];
            }
            this._localPosition = this._localPosition.add(this._localRotation.multiplyVector3(translation));
            this.isTranslate = true;
            return this;
        };
        Transform.prototype.translate = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var translation = null;
            if (args.length === 3) {
                translation = wd.Vector3.create(args[0], args[1], args[2]);
            }
            else {
                translation = args[0];
            }
            this.position = translation.add(this.position);
            return this;
        };
        Transform.prototype.rotate = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var eulerAngles = null, quaternion = wd.Quaternion.create();
            if (args.length === 3) {
                eulerAngles = wd.Vector3.create(args[0], args[1], args[2]);
            }
            else {
                eulerAngles = args[0];
            }
            quaternion.setFromEulerAngles(eulerAngles);
            if (this._parent === null) {
                this._localRotation = quaternion.multiply(this._localRotation);
            }
            else {
                quaternion = this._parent.rotation.copy().invert().multiply(quaternion);
                this._localRotation = quaternion.multiply(this.rotation);
            }
            this.isRotate = true;
            return this;
        };
        Transform.prototype.rotateLocal = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var eulerAngles = null, quaternion = wd.Quaternion.create();
            if (args.length === 3) {
                eulerAngles = wd.Vector3.create(args[0], args[1], args[2]);
            }
            else {
                eulerAngles = args[0];
            }
            quaternion.setFromEulerAngles(eulerAngles);
            this._localRotation.multiply(quaternion);
            this.isRotate = true;
            return this;
        };
        Transform.prototype.rotateAround = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var angle = null, center = null, axis = null, rot = null, dir = null;
            if (args.length === 3) {
                angle = args[0];
                center = args[1];
                axis = args[2];
            }
            else {
                angle = args[0];
                center = wd.Vector3.create(args[1], args[2], args[3]);
                axis = wd.Vector3.create(args[4], args[5], args[6]);
            }
            rot = wd.Quaternion.create().setFromAxisAngle(angle, axis);
            dir = this.position.copy().sub(center);
            dir = rot.multiplyVector3(dir);
            this.position = center.add(dir);
            this.rotation = rot.multiply(this.rotation);
            return this;
        };
        Transform.prototype.lookAt = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var target = null, up = null;
            if (args.length === 1) {
                target = args[0];
                up = wd.Vector3.up;
            }
            else if (args.length === 2) {
                target = args[0];
                up = args[1];
            }
            else if (args.length === 3) {
                target = wd.Vector3.create(args[0], args[1], args[2]);
                up = wd.Vector3.up;
            }
            else {
                target = wd.Vector3.create(args[0], args[1], args[2]);
                up = wd.Vector3.create(args[3], args[4], args[5]);
            }
            this.rotation = wd.Quaternion.create().setFromMatrix(wd.Matrix4.create().setLookAt(this.position, target, up));
            return this;
        };
        Transform.prototype._resetTransformFlag = function () {
            this.isTranslate = false;
            this.isScale = false;
            this.isRotate = false;
        };
        return Transform;
    })(wd.Entity);
    wd.Transform = Transform;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var wd;
(function (wd) {
    var GameObject = (function (_super) {
        __extends(GameObject, _super);
        function GameObject() {
            _super.apply(this, arguments);
            this._scripts = wdCb.Hash.create();
            this.parent = null;
            this.bubbleParent = null;
            this.transform = wd.Transform.create(this);
            this.name = "gameObject" + String(this.uid);
            this.actionManager = wd.ActionManager.create();
            this.uiManager = wd.UIManager.create(this);
            this._children = wdCb.Collection.create();
            this._components = wdCb.Collection.create();
            this._startLoopHandler = null;
            this._endLoopHandler = null;
        }
        GameObject.create = function () {
            var obj = new this();
            return obj;
        };
        Object.defineProperty(GameObject.prototype, "script", {
            get: function () {
                return this._scripts;
            },
            enumerable: true,
            configurable: true
        });
        GameObject.prototype.init = function () {
            var _this = this;
            this._startLoopHandler = wdCb.FunctionUtils.bind(this, function () {
                _this.onStartLoop();
            });
            this._endLoopHandler = wdCb.FunctionUtils.bind(this, function () {
                _this.onEndLoop();
            });
            wd.EventManager.on(wd.EngineEvent.STARTLOOP, this._startLoopHandler);
            wd.EventManager.on(wd.EngineEvent.ENDLOOP, this._endLoopHandler);
            this._components.forEach(function (component) {
                component.init();
            });
            this.transform.init();
            this.execScript("init");
            this.forEach(function (child) {
                child.init();
            });
            return this;
        };
        GameObject.prototype.onStartLoop = function () {
            this.execScript("onStartLoop");
        };
        GameObject.prototype.onEndLoop = function () {
            this.execScript("onEndLoop");
        };
        GameObject.prototype.onEnter = function () {
            this.execScript("onEnter");
        };
        GameObject.prototype.onExit = function () {
            this.execScript("onExit");
        };
        GameObject.prototype.onDispose = function () {
            this.execScript("onDispose");
        };
        GameObject.prototype.dispose = function () {
            var components = null;
            this.onDispose();
            if (this.parent) {
                this.parent.removeChild(this);
                this.parent = null;
            }
            wd.EventManager.off(this);
            wd.EventManager.off(wd.EngineEvent.STARTLOOP, this._startLoopHandler);
            wd.EventManager.off(wd.EngineEvent.ENDLOOP, this._endLoopHandler);
            components = this.removeAllComponent();
            components.forEach(function (component) {
                component.dispose();
            });
            this.forEach(function (child) {
                child.dispose();
            });
        };
        GameObject.prototype.hasChild = function (child) {
            return this._children.hasChild(child);
        };
        GameObject.prototype.addChild = function (child) {
            if (child.parent) {
                child.parent.removeChild(child);
            }
            child.parent = this;
            child.transform.parent = this.transform;
            this._children.addChild(child);
            child.onEnter();
            return this;
        };
        GameObject.prototype.addChildren = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            this._children.addChildren(args[0]);
            return this;
        };
        GameObject.prototype.sort = function () {
            this._children = this._children.sort(this._ascendZ);
            return this;
        };
        GameObject.prototype.forEach = function (func) {
            this._children.forEach(func);
            return this;
        };
        GameObject.prototype.filter = function (func) {
            return this._children.filter(func);
        };
        GameObject.prototype.getChildren = function () {
            return this._children;
        };
        GameObject.prototype.getChild = function (index) {
            return this._children.getChild(index);
        };
        GameObject.prototype.findChildByUid = function (uid) {
            return this._children.findOne(function (child) {
                return child.uid === uid;
            });
        };
        GameObject.prototype.findChildByTag = function (tag) {
            return this._children.findOne(function (child) {
                return child.hasTag(tag);
            });
        };
        GameObject.prototype.findChildByName = function (name) {
            return this._children.findOne(function (child) {
                return child.name.search(name) > -1;
            });
        };
        GameObject.prototype.findChildrenByName = function (name) {
            return this._children.filter(function (child) {
                return child.name.search(name) > -1;
            });
        };
        GameObject.prototype.getComponent = function (_class) {
            return this._components.findOne(function (component) {
                return component instanceof _class;
            });
        };
        GameObject.prototype.findComponentByUid = function (uid) {
            return this._components.findOne(function (component) {
                return component.uid === uid;
            });
        };
        GameObject.prototype.getFirstComponent = function () {
            return this._components.getChild(0);
        };
        GameObject.prototype.forEachComponent = function (func) {
            this._components.forEach(func);
            return this;
        };
        GameObject.prototype.removeChild = function (child) {
            child.onExit();
            this._children.removeChild(child);
            child.parent = null;
            return this;
        };
        GameObject.prototype.hasComponent = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            if (args[0] instanceof wd.Component) {
                var component = args[0];
                return this._components.hasChild(component);
            }
            else {
                var _class = args[0];
                return this._components.hasChild(function (component) {
                    return component instanceof _class;
                });
            }
        };
        GameObject.prototype.addComponent = function (component) {
            if (this.hasComponent(component)) {
                wd.Log.assert(false, "the component already exist");
                return this;
            }
            this._components.addChild(component);
            component.addToGameObject(this);
            return this;
        };
        GameObject.prototype.removeComponent = function (arg) {
            var component = null;
            if (arg instanceof wd.Component) {
                component = arg;
            }
            else {
                component = this.getComponent(arg);
            }
            this._components.removeChild(component);
            this._removeComponentHandler(component);
            return this;
        };
        GameObject.prototype.removeAllComponent = function () {
            var _this = this;
            var result = wdCb.Collection.create();
            this._components.forEach(function (component) {
                _this._removeComponentHandler(component);
                result.addChild(component);
            }, this);
            this._components.removeAllChildren();
            return result;
        };
        GameObject.prototype.render = function (renderer, camera) {
            var geometry = this._getGeometry(), rendererComponent = this._getRendererComponent();
            if (rendererComponent && geometry) {
                rendererComponent.render(renderer, geometry, camera);
            }
            this._children.forEach(function (child) {
                child.render(renderer, camera);
            });
        };
        GameObject.prototype.update = function (elapsedTime) {
            var camera = this._getCamera(), animation = this._getAnimation(), collider = this._getCollider();
            if (camera) {
                camera.update(elapsedTime);
            }
            if (animation) {
                animation.update(elapsedTime);
            }
            this.actionManager.update(elapsedTime);
            this.execScript("update", elapsedTime);
            if (collider) {
                collider.update(elapsedTime);
            }
            this.uiManager.update(elapsedTime);
            this._children.forEach(function (child) {
                child.update(elapsedTime);
            });
        };
        GameObject.prototype.execScript = function (method, arg) {
            this._scripts.forEach(function (script) {
                script[method] && (arg ? script[method](arg) : script[method]());
            });
        };
        GameObject.prototype._ascendZ = function (a, b) {
            return a.transform.position.z - b.transform.position.z;
        };
        GameObject.prototype._getGeometry = function () {
            return this.getComponent(wd.Geometry);
        };
        GameObject.prototype._getCamera = function () {
            return this.getComponent(wd.CameraController);
        };
        GameObject.prototype._getAnimation = function () {
            return this.getComponent(wd.Animation);
        };
        GameObject.prototype._getRendererComponent = function () {
            return this.getComponent(wd.RendererComponent);
        };
        GameObject.prototype._getCollider = function () {
            return this.getComponent(wd.Collider);
        };
        GameObject.prototype._getComponentCount = function (_class) {
            return this._components.filter(function (component) {
                return component instanceof _class;
            }).getCount();
        };
        GameObject.prototype._removeComponentHandler = function (component) {
            component.removeFromGameObject(this);
        };
        __decorate([
            wd.require(function () {
                wd.assert(this._getComponentCount(wd.Geometry) <= 1, wd.Log.info.FUNC_SHOULD_NOT("gameObject", "contain more than 1 geometry component"));
            })
        ], GameObject.prototype, "_getGeometry", null);
        __decorate([
            wd.require(function () {
                wd.assert(this._getComponentCount(wd.CameraController) <= 1, wd.Log.info.FUNC_SHOULD_NOT("gameObject", "contain more than 1 camera controller"));
            })
        ], GameObject.prototype, "_getCamera", null);
        __decorate([
            wd.require(function () {
                wd.assert(this._getComponentCount(wd.Animation) <= 1, wd.Log.info.FUNC_SHOULD_NOT("gameObject", "contain more than 1 animation component"));
            })
        ], GameObject.prototype, "_getAnimation", null);
        __decorate([
            wd.require(function () {
                wd.assert(this._getComponentCount(wd.RendererComponent) <= 1, wd.Log.info.FUNC_SHOULD_NOT("gameObject", "contain more than 1 rendererComponent"));
            })
        ], GameObject.prototype, "_getRendererComponent", null);
        __decorate([
            wd.require(function () {
                wd.assert(this._getComponentCount(wd.Collider) <= 1, wd.Log.info.FUNC_SHOULD_NOT("gameObject", "contain more than 1 collider component"));
            })
        ], GameObject.prototype, "_getCollider", null);
        return GameObject;
    })(wd.Entity);
    wd.GameObject = GameObject;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var Scheduler = (function () {
        function Scheduler() {
            this._scheduleCount = 0;
            this._schedules = wdCb.Hash.create();
        }
        Scheduler.create = function () {
            var obj = new this();
            return obj;
        };
        Scheduler.prototype.update = function (elapsedTime) {
            var _this = this;
            this._schedules.forEach(function (scheduleItem, scheduleId) {
                if (scheduleItem.isStop || scheduleItem.isPause) {
                    return;
                }
                scheduleItem.update(elapsedTime);
                if (scheduleItem.isFinish) {
                    _this.remove(scheduleId);
                }
            });
        };
        Scheduler.prototype.scheduleLoop = function (task, args) {
            if (args === void 0) { args = []; }
            return this._schedule(LoopScheduleItem, Array.prototype.slice.call(arguments, 0));
        };
        Scheduler.prototype.scheduleFrame = function (task, frame, args) {
            if (frame === void 0) { frame = 1; }
            return this._schedule(FrameScheduleItem, Array.prototype.slice.call(arguments, 0));
        };
        Scheduler.prototype.scheduleInterval = function (task, time, args) {
            if (time === void 0) { time = 0; }
            return this._schedule(IntervalScheduleItem, Array.prototype.slice.call(arguments, 0));
        };
        Scheduler.prototype.scheduleTime = function (task, time, args) {
            if (time === void 0) { time = 0; }
            return this._schedule(TimeScheduleItem, Array.prototype.slice.call(arguments, 0));
        };
        Scheduler.prototype.pause = function (scheduleId) {
            if (arguments.length === 0) {
                var self_1 = this;
                this._schedules.forEach(function (scheduleItem, scheduleId) {
                    self_1.pause(scheduleId);
                });
            }
            else if (arguments.length === 1) {
                var scheduleItem = this._schedules.getChild(arguments[0]);
                scheduleItem.pause();
            }
        };
        Scheduler.prototype.resume = function (scheduleId) {
            if (arguments.length === 0) {
                var self_2 = this;
                this._schedules.forEach(function (scheduleItem, scheduleId) {
                    self_2.resume(scheduleId);
                });
            }
            else if (arguments.length === 1) {
                var scheduleItem = this._schedules.getChild(arguments[0]);
                scheduleItem.resume();
            }
        };
        Scheduler.prototype.start = function (scheduleId) {
            if (arguments.length === 0) {
                var self_3 = this;
                this._schedules.forEach(function (scheduleItem, scheduleId) {
                    self_3.start(scheduleId);
                });
            }
            else if (arguments.length === 1) {
                var scheduleItem = this._schedules.getChild(arguments[0]);
                scheduleItem.start();
            }
        };
        Scheduler.prototype.stop = function (scheduleId) {
            if (arguments.length === 0) {
                var self_4 = this;
                this._schedules.forEach(function (scheduleItem, scheduleId) {
                    self_4.stop(scheduleId);
                });
            }
            else if (arguments.length === 1) {
                var scheduleItem = this._schedules.getChild(arguments[0]);
                scheduleItem.stop();
            }
        };
        Scheduler.prototype.has = function (scheduleId) {
            return !!this._schedules.hasChild(scheduleId);
        };
        Scheduler.prototype.remove = function (scheduleId) {
            this._schedules.removeChild(scheduleId);
        };
        Scheduler.prototype.removeAll = function () {
            this._schedules.removeAllChildren();
        };
        Scheduler.prototype._schedule = function (_class, args) {
            var scheduleId = this._buildId();
            this._schedules.setValue(scheduleId, _class.create.apply(_class, args));
            return scheduleId;
        };
        Scheduler.prototype._buildId = function () {
            return 'Schedule_' + (this._scheduleCount++);
        };
        return Scheduler;
    })();
    wd.Scheduler = Scheduler;
    var ScheduleItem = (function () {
        function ScheduleItem(task, args) {
            this.isPause = false;
            this.isStop = false;
            this.pauseTime = null;
            this.pauseElapsed = null;
            this.startTime = null;
            this.isFinish = false;
            this.task = null;
            this.args = null;
            this.timeController = wd.CommonTimeController.create();
            this.task = task;
            this.args = args;
        }
        ScheduleItem.prototype.pause = function () {
            this.isPause = true;
            this.timeController.pause();
        };
        ScheduleItem.prototype.resume = function () {
            this.isPause = false;
            this.timeController.resume();
        };
        ScheduleItem.prototype.start = function () {
            this.isStop = false;
            this.timeController.start();
        };
        ScheduleItem.prototype.stop = function () {
            this.isStop = true;
            this.timeController.stop();
        };
        ScheduleItem.prototype.finish = function () {
            this.isFinish = true;
        };
        return ScheduleItem;
    })();
    var TimeScheduleItem = (function (_super) {
        __extends(TimeScheduleItem, _super);
        function TimeScheduleItem(task, time, args) {
            if (time === void 0) { time = 0; }
            if (args === void 0) { args = []; }
            _super.call(this, task, args);
            this._time = null;
            this._time = time;
        }
        TimeScheduleItem.create = function (task, time, args) {
            if (time === void 0) { time = 0; }
            if (args === void 0) { args = []; }
            var obj = new this(task, time, args);
            return obj;
        };
        TimeScheduleItem.prototype.update = function (elapsedTime) {
            var elapsed = this.timeController.computeElapseTime(elapsedTime);
            if (elapsed >= this._time) {
                this.task.apply(this, this.args);
                this.finish();
            }
        };
        return TimeScheduleItem;
    })(ScheduleItem);
    var IntervalScheduleItem = (function (_super) {
        __extends(IntervalScheduleItem, _super);
        function IntervalScheduleItem(task, time, args) {
            if (time === void 0) { time = 0; }
            if (args === void 0) { args = []; }
            _super.call(this, task, args);
            this._intervalTime = null;
            this._elapsed = 0;
            this._intervalTime = time;
        }
        IntervalScheduleItem.create = function (task, time, args) {
            if (time === void 0) { time = 0; }
            if (args === void 0) { args = []; }
            var obj = new this(task, time, args);
            return obj;
        };
        IntervalScheduleItem.prototype.update = function (elapsedTime) {
            var elapsed = this.timeController.computeElapseTime(elapsedTime);
            if (elapsed - this._elapsed >= this._intervalTime) {
                this.task.apply(this, this.args);
                this._elapsed = elapsed;
            }
        };
        IntervalScheduleItem.prototype.start = function () {
            _super.prototype.start.call(this);
            this._elapsed = 0;
        };
        return IntervalScheduleItem;
    })(ScheduleItem);
    var LoopScheduleItem = (function (_super) {
        __extends(LoopScheduleItem, _super);
        function LoopScheduleItem() {
            _super.apply(this, arguments);
        }
        LoopScheduleItem.create = function (task, args) {
            if (args === void 0) { args = []; }
            var obj = new this(task, args);
            return obj;
        };
        LoopScheduleItem.prototype.update = function (elapsedTime) {
            this.task.apply(this, this.args);
        };
        return LoopScheduleItem;
    })(ScheduleItem);
    var FrameScheduleItem = (function (_super) {
        __extends(FrameScheduleItem, _super);
        function FrameScheduleItem(task, frame, args) {
            if (frame === void 0) { frame = 1; }
            if (args === void 0) { args = []; }
            _super.call(this, task, args);
            this._frame = null;
            this._frame = frame;
        }
        FrameScheduleItem.create = function (task, frame, args) {
            if (frame === void 0) { frame = 1; }
            if (args === void 0) { args = []; }
            var obj = new this(task, frame, args);
            return obj;
        };
        FrameScheduleItem.prototype.update = function (elapsedTime) {
            this._frame--;
            if (this._frame <= 0) {
                this.task.apply(this, this.args);
                this.finish();
            }
        };
        return FrameScheduleItem;
    })(ScheduleItem);
})(wd || (wd = {}));

var wd;
(function (wd) {
    var GameState;
    (function (GameState) {
        GameState[GameState["NORMAL"] = 0] = "NORMAL";
        GameState[GameState["STOP"] = 1] = "STOP";
        GameState[GameState["PAUSE"] = 2] = "PAUSE";
    })(GameState || (GameState = {}));
    var Director = (function () {
        function Director() {
            this.scene = wd.Scene.create();
            this.scheduler = wd.Scheduler.create();
            this.renderer = null;
            this.scriptStreams = wdCb.Hash.create();
            this._gameLoop = null;
            this._gameState = GameState.NORMAL;
            this._timeController = wd.DirectorTimeController.create();
            this._isFirstStart = true;
        }
        Director.getInstance = function () {
            if (this._instance === null) {
                this._instance = new this();
                this._instance.initWhenCreate();
            }
            return this._instance;
        };
        Object.defineProperty(Director.prototype, "gameTime", {
            get: function () {
                return this._timeController.gameTime;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Director.prototype, "fps", {
            get: function () {
                return this._timeController.fps;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Director.prototype, "isNormal", {
            get: function () {
                return this._gameState === GameState.NORMAL;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Director.prototype, "isStop", {
            get: function () {
                return this._gameState === GameState.STOP;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Director.prototype, "isPause", {
            get: function () {
                return this._gameState === GameState.PAUSE;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Director.prototype, "isTimeChange", {
            get: function () {
                return this._timeController.isTimeChange;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Director.prototype, "elapsed", {
            get: function () {
                return this._timeController.elapsed;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Director.prototype, "view", {
            get: function () {
                return wd.DeviceManager.getInstance().view;
            },
            enumerable: true,
            configurable: true
        });
        Director.prototype.initWhenCreate = function () {
            this.renderer = wd.WebGLRenderer.create();
        };
        Director.prototype.start = function () {
            this._gameState = GameState.NORMAL;
            this.startLoop();
        };
        Director.prototype.stop = function () {
            this._gameLoop && this._gameLoop.dispose();
            this._gameState = GameState.STOP;
            this._timeController.stop();
            this.scheduler.stop();
        };
        Director.prototype.pause = function () {
            if (this._gameState === GameState.PAUSE) {
                return;
            }
            this._gameState = GameState.PAUSE;
            this._timeController.pause();
            this.scheduler.pause();
        };
        Director.prototype.resume = function () {
            this._gameState = GameState.NORMAL;
            this._timeController.resume();
            this.scheduler.resume();
        };
        Director.prototype.getDeltaTime = function () {
            return this._timeController.deltaTime;
        };
        Director.prototype.startLoop = function () {
            var self = this;
            this._gameLoop = wdFrp.judge(function () { return self._isFirstStart; }, function () {
                return self._buildLoadScriptStream();
            }, function () {
                return wdFrp.empty();
            })
                .concat(this._buildInitStream())
                .ignoreElements()
                .concat(this._buildLoopStream())
                .subscribe(function (time) {
                self._loopBody(time);
            });
        };
        Director.prototype._buildLoadScriptStream = function () {
            return wdFrp.fromCollection(this.scriptStreams.getValues())
                .mergeAll();
        };
        Director.prototype._buildInitStream = function () {
            var _this = this;
            return wdFrp.callFunc(function () {
                _this._init();
            }, this);
        };
        Director.prototype._init = function () {
            this._isFirstStart = false;
            wd.EventManager.trigger(wd.CustomEvent.create(wd.EngineEvent.BEFORE_INIT));
            this.scene.onEnter();
            this.scene.init();
            this.renderer.init();
            this._timeController.start();
            this.scheduler.start();
            wd.EventManager.trigger(wd.CustomEvent.create(wd.EngineEvent.AFTER_INIT));
            wd.EventManager.trigger(wd.CustomEvent.create(wd.EngineEvent.AFTER_INIT_RIGIDBODY_ADD_CONSTRAINT));
        };
        Director.prototype._buildLoopStream = function () {
            return wdFrp.intervalRequest();
        };
        Director.prototype._loopBody = function (time) {
            var elapseTime = null;
            if (this._gameState === GameState.PAUSE || this._gameState === GameState.STOP) {
                return false;
            }
            elapseTime = this._timeController.computeElapseTime(time);
            this._timeController.tick(elapseTime);
            wd.EventManager.trigger(wd.CustomEvent.create(wd.EngineEvent.STARTLOOP));
            this._run(elapseTime);
            wd.EventManager.trigger(wd.CustomEvent.create(wd.EngineEvent.ENDLOOP));
            return true;
        };
        Director.prototype._run = function (elapseTime) {
            this.scheduler.update(elapseTime);
            this.scene.update(elapseTime);
            this.scene.render(this.renderer);
            if (this.renderer.hasCommand()) {
                this.renderer.render();
            }
        };
        Director._instance = null;
        return Director;
    })();
    wd.Director = Director;
})(wd || (wd = {}));

var wd;
(function (wd) {
    var Main = (function () {
        function Main() {
        }
        Main.setConfig = function (_a) {
            var canvasId = _a.canvasId, _b = _a.isTest, isTest = _b === void 0 ? wd.DebugConfig.isTest : _b, _c = _a.screenSize, screenSize = _c === void 0 ? wd.ScreenSize.FULL : _c;
            this.isTest = isTest;
            this.screenSize = screenSize;
            this._canvasId = canvasId;
            return this;
        };
        Main.init = function () {
            wd.DeviceManager.getInstance().createGL(this._canvasId);
            wd.DeviceManager.getInstance().setScreen();
            wd.GPUDetector.getInstance().detect();
            return this;
        };
        Main.isTest = null;
        Main.screenSize = null;
        Main._canvasId = null;
        return Main;
    })();
    wd.Main = Main;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var wd;
(function (wd) {
    var Scene = (function (_super) {
        __extends(Scene, _super);
        function Scene() {
            _super.apply(this, arguments);
            this.side = null;
            this.shadowMap = {
                enable: true,
                softType: ShadowMapSoftType.NONE
            };
            this.shader = null;
            this.camera = null;
            this.isUseProgram = false;
            this.physics = PhysicsConfig.create();
            this.physicsEngineAdapter = null;
            this._lightManager = wd.LightManager.create();
            this._renderTargetRenderers = wdCb.Collection.create();
            this._collisionDetector = wd.CollisionDetector.create();
        }
        Scene.create = function () {
            var obj = new this();
            return obj;
        };
        Object.defineProperty(Scene.prototype, "ambientLight", {
            get: function () {
                return this._lightManager.ambientLight;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Scene.prototype, "directionLights", {
            get: function () {
                return this._lightManager.directionLights;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Scene.prototype, "pointLights", {
            get: function () {
                return this._lightManager.pointLights;
            },
            enumerable: true,
            configurable: true
        });
        Scene.prototype.init = function () {
            if (this.physics.enable) {
                this.physicsEngineAdapter = wd.PhysicsEngineFactory.create(this.physics.engine);
                this.physicsEngineAdapter.init();
            }
            _super.prototype.init.call(this);
            this._renderTargetRenderers.forEach(function (renderTargetRenderer) { return renderTargetRenderer.init(); });
            return this;
        };
        Scene.prototype.useProgram = function (shader) {
            this.isUseProgram = true;
            this.shader = shader;
        };
        Scene.prototype.unUseProgram = function () {
            this.isUseProgram = false;
        };
        Scene.prototype.addChild = function (child) {
            if (this._isCamera(child)) {
                this.camera = child;
            }
            else if (this._isLight(child)) {
                this._lightManager.addChild(child);
            }
            return _super.prototype.addChild.call(this, child);
        };
        Scene.prototype.addRenderTargetRenderer = function (renderTargetRenderer) {
            this._renderTargetRenderers.addChild(renderTargetRenderer);
        };
        Scene.prototype.removeRenderTargetRenderer = function (renderTargetRenderer) {
            this._renderTargetRenderers.removeChild(renderTargetRenderer);
        };
        Scene.prototype.update = function (elapsedTime) {
            if (this.physics.enable) {
                this.physicsEngineAdapter.update(elapsedTime);
            }
            _super.prototype.update.call(this, elapsedTime);
            this._collisionDetector.detect(this);
        };
        Scene.prototype.render = function (renderer) {
            var self = this;
            this._renderTargetRenderers.forEach(function (target) {
                target.render(renderer, self.camera);
            });
            _super.prototype.render.call(this, renderer, this.camera);
        };
        Scene.prototype._isCamera = function (child) {
            return child.hasComponent(wd.CameraController);
        };
        Scene.prototype._isLight = function (child) {
            return child.hasComponent(wd.Light);
        };
        return Scene;
    })(wd.GameObject);
    wd.Scene = Scene;
    var PhysicsConfig = (function () {
        function PhysicsConfig() {
            this._gravity = wd.Vector3.create(0, -9.8, 0);
            this.enable = false;
            this.engine = wd.PhysicsEngineType.CANNON;
            this.iterations = 10;
        }
        PhysicsConfig.create = function () {
            var obj = new this();
            return obj;
        };
        Object.defineProperty(PhysicsConfig.prototype, "gravity", {
            get: function () {
                return this._gravity;
            },
            set: function (gravity) {
                this._gravity = gravity;
            },
            enumerable: true,
            configurable: true
        });
        __decorate([
            wd.operateWorldDataGetterAndSetter("Gravity")
        ], PhysicsConfig.prototype, "gravity", null);
        return PhysicsConfig;
    })();
    wd.PhysicsConfig = PhysicsConfig;
    (function (ShadowMapSoftType) {
        ShadowMapSoftType[ShadowMapSoftType["NONE"] = 0] = "NONE";
        ShadowMapSoftType[ShadowMapSoftType["PCF"] = 1] = "PCF";
    })(wd.ShadowMapSoftType || (wd.ShadowMapSoftType = {}));
    var ShadowMapSoftType = wd.ShadowMapSoftType;
})(wd || (wd = {}));

var wd;
(function (wd) {
    var LightManager = (function () {
        function LightManager() {
            this._lights = wdCb.Hash.create();
        }
        LightManager.create = function () {
            var obj = new this();
            return obj;
        };
        Object.defineProperty(LightManager.prototype, "ambientLight", {
            get: function () {
                return this._lights.getChild(wd.AmbientLight.type);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LightManager.prototype, "directionLights", {
            get: function () {
                return this._lights.getChild(wd.DirectionLight.type);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LightManager.prototype, "pointLights", {
            get: function () {
                return this._lights.getChild(wd.PointLight.type);
            },
            enumerable: true,
            configurable: true
        });
        LightManager.prototype.addChild = function (light) {
            if (light.hasComponent(wd.AmbientLight)) {
                this._lights.addChild(wd.AmbientLight.type, light);
            }
            else if (light.hasComponent(wd.DirectionLight)) {
                this._lights.appendChild(wd.DirectionLight.type, light);
            }
            else if (light.hasComponent(wd.PointLight)) {
                this._lights.appendChild(wd.PointLight.type, light);
            }
            else {
                wd.Log.error(true, wd.Log.info.FUNC_INVALID("light"));
            }
        };
        return LightManager;
    })();
    wd.LightManager = LightManager;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var Skybox = (function (_super) {
        __extends(Skybox, _super);
        function Skybox() {
            _super.apply(this, arguments);
        }
        Skybox.create = function () {
            var obj = new this();
            obj.initWhenCreate();
            return obj;
        };
        Skybox.prototype.initWhenCreate = function () {
            this.addComponent(wd.SkyboxRenderer.create());
        };
        return Skybox;
    })(wd.GameObject);
    wd.Skybox = Skybox;
})(wd || (wd = {}));

var wd;
(function (wd) {
    var CollisionDetector = (function () {
        function CollisionDetector() {
            this._lastCollideObjects = null;
        }
        CollisionDetector.create = function () {
            var obj = new this();
            return obj;
        };
        CollisionDetector.prototype.detect = function (scene) {
            var checkTargetList = scene.filter(function (gameObject) {
                return gameObject.hasComponent(wd.Collider);
            }), self = this;
            checkTargetList.forEach(function (gameObject) {
                var collideObjects = null;
                if (gameObject.hasComponent(wd.RigidBody)) {
                    return;
                }
                collideObjects = gameObject.getComponent(wd.Collider).getCollideObjects(checkTargetList);
                if (collideObjects.getCount() > 0) {
                    if (self._isCollisionStart(gameObject)) {
                        gameObject.execScript("onCollisionStart", collideObjects);
                        gameObject.execScript("onContact", collideObjects);
                        self._triggerCollisionEventOfCollideObjectWhichHasRigidBody(collideObjects, gameObject, ["onCollisionStart", "onContact"]);
                    }
                    else {
                        gameObject.execScript("onContact", collideObjects);
                        self._triggerCollisionEventOfCollideObjectWhichHasRigidBody(collideObjects, gameObject, ["onContact"]);
                    }
                    gameObject.addTag("isCollided");
                    self._lastCollideObjects = collideObjects;
                }
                else {
                    if (self._isCollisionEnd(gameObject)) {
                        gameObject.execScript("onCollisionEnd");
                        self._triggerCollisionEventOfCollideObjectWhichHasRigidBody(self._lastCollideObjects, gameObject, ["onCollisionEnd"]);
                    }
                    gameObject.removeTag("isCollided");
                }
            });
        };
        CollisionDetector.prototype._isCollisionStart = function (gameObject) {
            return !gameObject.hasTag("isCollided");
        };
        CollisionDetector.prototype._isCollisionEnd = function (gameObject) {
            return gameObject.hasTag("isCollided");
        };
        CollisionDetector.prototype._triggerCollisionEventOfCollideObjectWhichHasRigidBody = function (collideObjects, currentGameObject, eventList) {
            collideObjects.filter(function (gameObject) {
                return gameObject.hasComponent(wd.RigidBody);
            })
                .forEach(function (collideObject) {
                for (var _i = 0; _i < eventList.length; _i++) {
                    var eventName = eventList[_i];
                    collideObject.execScript(eventName, wdCb.Collection.create([currentGameObject]));
                }
            });
        };
        return CollisionDetector;
    })();
    wd.CollisionDetector = CollisionDetector;
})(wd || (wd = {}));

var wd;
(function (wd) {
    var ComponentContainer = (function () {
        function ComponentContainer() {
            this.list = wdCb.Collection.create();
        }
        ComponentContainer.prototype.addChild = function (component) {
            if (this.hasChild(component)) {
                return;
            }
            this.list.addChild(component);
        };
        ComponentContainer.prototype.removeChild = function (component) {
            this.list.removeChild(component);
        };
        ComponentContainer.prototype.hasChild = function (component) {
            return this.list.hasChild(component);
        };
        return ComponentContainer;
    })();
    wd.ComponentContainer = ComponentContainer;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var ActionManager = (function (_super) {
        __extends(ActionManager, _super);
        function ActionManager() {
            _super.apply(this, arguments);
        }
        ActionManager.create = function () {
            var obj = new this();
            return obj;
        };
        ActionManager.prototype.update = function (elapsedTime) {
            var removeQueue = [];
            this.list.forEach(function (child) {
                if (child.isFinish) {
                    removeQueue.push(child);
                    return;
                }
                if (child.isStop || child.isPause) {
                    return;
                }
                child.update(elapsedTime);
            });
            removeQueue.forEach(function (child) {
                child.gameObject.removeComponent(child);
            });
        };
        return ActionManager;
    })(wd.ComponentContainer);
    wd.ActionManager = ActionManager;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var wd;
(function (wd) {
    var UIManager = (function (_super) {
        __extends(UIManager, _super);
        function UIManager(gameObject) {
            _super.call(this);
            this._gameObject = null;
            this._dirtyTag = "uiDirty";
            this._notDirtyTag = "uiNotDirty";
            this._gameObject = gameObject;
        }
        UIManager.create = function (gameObject) {
            var obj = new this(gameObject);
            return obj;
        };
        UIManager.prototype.update = function (elapsedTime) {
            var uiRenderer = null;
            if (this.list.getCount() === 0) {
                return;
            }
            if (this._isSearchedToFindIfDirty()) {
                if (this._isMarkedDirty()) {
                    this.list.forEach(function (ui) {
                        ui.update(elapsedTime);
                    });
                }
                this._removeAllMark();
                return;
            }
            uiRenderer = this._getUIRenderer(this._gameObject);
            if (this._searchAnyOneDirtyOfAllUIWithSameUIRenderer(uiRenderer)) {
                if (uiRenderer && !uiRenderer.isClear) {
                    uiRenderer.clearCanvas();
                }
                this.list.forEach(function (ui) {
                    ui.update(elapsedTime);
                });
                this._markAllUIChildrenWithSameUIRenderer(uiRenderer, true);
            }
            else {
                this._markAllUIChildrenWithSameUIRenderer(uiRenderer, false);
            }
        };
        UIManager.prototype._getUIRenderer = function (gameObject) {
            return gameObject.getComponent(wd.UIRenderer);
        };
        UIManager.prototype._isSearchedToFindIfDirty = function () {
            return this._gameObject.hasTag(this._dirtyTag) || this._gameObject.hasTag(this._notDirtyTag);
        };
        UIManager.prototype._isMarkedDirty = function () {
            return this._gameObject.hasTag(this._dirtyTag);
        };
        UIManager.prototype._removeAllMark = function () {
            this._gameObject.removeTag(this._dirtyTag);
            this._gameObject.removeTag(this._notDirtyTag);
        };
        UIManager.prototype._markAllUIChildrenWithSameUIRenderer = function (uiRenderer, isDirty) {
            var tag = isDirty ? this._dirtyTag : this._notDirtyTag, self = this, mark = function (gameObject) {
                if (!gameObject.hasTag(tag)) {
                    gameObject.addTag(tag);
                }
                gameObject
                    .filter(function (child) {
                    return child.hasComponent(wd.UI) && self._hasSameUIRenderer(uiRenderer, self._getUIRenderer(child));
                })
                    .forEach(function (child) {
                    mark(child);
                });
            };
            this._gameObject
                .filter(function (child) {
                return child.hasComponent(wd.UI) && self._hasSameUIRenderer(uiRenderer, self._getUIRenderer(child));
            })
                .forEach(function (child) {
                mark(child);
            });
        };
        UIManager.prototype._searchAnyOneDirtyOfAllUIWithSameUIRenderer = function (uiRenderer) {
            var isDirty = false, isEnd = false, self = this;
            var search = function (gameObject) {
                if (self._hasSameUIRenderer(uiRenderer, self._getUIRenderer(gameObject))) {
                    gameObject.forEachComponent(function (component) {
                        if (component instanceof wd.UI && component.dirty) {
                            isEnd = true;
                            isDirty = true;
                            return wdCb.$BREAK;
                        }
                    });
                    if (isEnd) {
                        return;
                    }
                }
                gameObject
                    .filter(function (child) {
                    return child.hasComponent(wd.UI);
                })
                    .forEach(function (child) {
                    search(child);
                    if (isEnd) {
                        return wdCb.$BREAK;
                    }
                });
            };
            search(this._gameObject);
            return isDirty;
        };
        UIManager.prototype._hasSameUIRenderer = function (uiRenderer1, uiRenderer2) {
            return wd.JudgeUtils.isEqual(uiRenderer1, uiRenderer2);
        };
        __decorate([
            wd.require(function () {
                wd.assert(this._gameObject._getComponentCount(wd.UIRenderer) <= 1, wd.Log.info.FUNC_SHOULD_NOT("gameObject", "contain more than 1 uiRenderer component"));
            })
        ], UIManager.prototype, "_getUIRenderer", null);
        return UIManager;
    })(wd.ComponentContainer);
    wd.UIManager = UIManager;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var Animation = (function (_super) {
        __extends(Animation, _super);
        function Animation() {
            _super.apply(this, arguments);
        }
        return Animation;
    })(wd.Component);
    wd.Animation = Animation;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var wd;
(function (wd) {
    var MorphAnimation = (function (_super) {
        __extends(MorphAnimation, _super);
        function MorphAnimation() {
            _super.apply(this, arguments);
            this.interpolation = 0;
            this.currentFrame = 0;
            this.nextFrame = 1;
            this.duration = null;
            this.fps = null;
            this.currentAnimName = null;
            this.isFrameChange = false;
            this._currentTime = 0;
            this._oldTime = 0;
            this._frameCount = null;
            this._state = AnimationState.DEFAULT;
            this._isResume = false;
            this._isStartFromStop = false;
            this._pauseTime = null;
            this._resumeTime = null;
        }
        MorphAnimation.create = function () {
            var obj = new this();
            return obj;
        };
        Object.defineProperty(MorphAnimation.prototype, "isStart", {
            get: function () {
                return this._state === AnimationState.RUN;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MorphAnimation.prototype, "isStop", {
            get: function () {
                return this._state === AnimationState.STOP;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MorphAnimation.prototype, "isPause", {
            get: function () {
                return this._state === AnimationState.PAUSE;
            },
            enumerable: true,
            configurable: true
        });
        MorphAnimation.prototype.init = function () {
        };
        MorphAnimation.prototype.dispose = function () {
        };
        MorphAnimation.prototype.play = function (animName, fps) {
            var geometry = this.gameObject.getComponent(wd.ModelGeometry);
            this.currentAnimName = animName;
            this.fps = fps;
            this.duration = 1.0 / fps * 1000;
            this._frameCount = geometry.morphTargets.getChild(animName).getCount();
            this._start();
        };
        MorphAnimation.prototype.pause = function () {
            this._state = AnimationState.PAUSE;
            this._pauseTime = this._currentTime;
        };
        MorphAnimation.prototype.resume = function () {
            this._state = AnimationState.RUN;
            this._isResume = true;
            this._resumeTime = this._oldTime;
        };
        MorphAnimation.prototype.stop = function () {
            this._state = AnimationState.STOP;
        };
        MorphAnimation.prototype.update = function (elapsedTime) {
            if (this._state === AnimationState.DEFAULT) {
                return;
            }
            if (this.isStop || this.isPause) {
                this._oldTime = elapsedTime;
                return;
            }
            if (this._isResume) {
                this._isResume = false;
                this._continueFromPausePoint(elapsedTime);
            }
            this._currentTime = elapsedTime;
            if (this._isStartFromStop) {
                this._isStartFromStop = false;
                this._resetAnim();
            }
            if (this._currentTime - this._oldTime > this.duration) {
                this.isFrameChange = true;
                this._oldTime = this._floor(this._currentTime);
                this.currentFrame = this.nextFrame;
                this.nextFrame++;
                if (this.nextFrame >= this._frameCount) {
                    this.nextFrame = 0;
                }
            }
            else {
                this.isFrameChange = false;
            }
            this.interpolation = this.fps * (this._currentTime - this._oldTime) / 1000;
        };
        MorphAnimation.prototype._start = function () {
            this._currentTime = 0;
            this._oldTime = 0;
            this.currentFrame = 0;
            this.nextFrame = this.currentFrame + 1;
            if (this.isStop) {
                this._isStartFromStop = true;
            }
            this._state = AnimationState.RUN;
        };
        MorphAnimation.prototype._floor = function (time) {
            return time - time % this.duration;
        };
        MorphAnimation.prototype._resetAnim = function () {
            this._oldTime = this._currentTime;
        };
        MorphAnimation.prototype._continueFromPausePoint = function (currentTime) {
            this._oldTime = currentTime - (this._resumeTime - this._pauseTime) % this.duration;
        };
        __decorate([
            wd.require(function (animName, fps) {
                var geometry = this.gameObject.getComponent(wd.ModelGeometry);
                wd.assert(geometry, wd.Log.info.FUNC_SHOULD("this gameObject", "add ModelGeometry component"));
                wd.assert(geometry.morphTargets.getChild(animName) && geometry.morphTargets.getChild(animName).getCount() > 0, wd.Log.info.FUNC_NOT_EXIST("\"" + animName + "\" animation"));
            }),
            wd.ensure(function () {
                wd.assert(this._frameCount > 1, wd.Log.info.FUNC_SHOULD("frames.count", "> 1"));
            })
        ], MorphAnimation.prototype, "play", null);
        return MorphAnimation;
    })(wd.Animation);
    wd.MorphAnimation = MorphAnimation;
    var AnimationState;
    (function (AnimationState) {
        AnimationState[AnimationState["DEFAULT"] = 0] = "DEFAULT";
        AnimationState[AnimationState["RUN"] = 1] = "RUN";
        AnimationState[AnimationState["STOP"] = 2] = "STOP";
        AnimationState[AnimationState["PAUSE"] = 3] = "PAUSE";
    })(AnimationState || (AnimationState = {}));
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var wd;
(function (wd) {
    var Geometry = (function (_super) {
        __extends(Geometry, _super);
        function Geometry() {
            _super.apply(this, arguments);
            this._material = null;
            this.buffers = null;
        }
        Object.defineProperty(Geometry.prototype, "material", {
            get: function () {
                return this._material;
            },
            set: function (material) {
                if (material !== this._material) {
                    wd.EventManager.trigger(this.gameObject, wd.CustomEvent.create(wd.EngineEvent.MATERIAL_CHANGE));
                }
                this._material = material;
                this._material.geometry = this;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Geometry.prototype, "geometryData", {
            get: function () {
                return this.buffers.geometryData;
            },
            enumerable: true,
            configurable: true
        });
        Geometry.prototype.init = function () {
            var geometryData = null, _a = this.computeData(), vertices = _a.vertices, faces = _a.faces, texCoords = _a.texCoords, colors = _a.colors, morphTargets = _a.morphTargets;
            this.buffers = this.createBufferContainer();
            geometryData = this.createGeometryData(vertices, faces, texCoords, colors, morphTargets);
            this.buffers.geometryData = geometryData;
            this.buffers.init();
            this._material.init();
            this.computeNormals();
        };
        Geometry.prototype.computeNormals = function () {
            if (this.isSmoothShading()) {
                if (!this.hasVertexNormals()) {
                    this.computeVertexNormals();
                }
            }
            else {
                if (!this.hasFaceNormals()) {
                    this.computeFaceNormals();
                }
            }
        };
        Geometry.prototype.hasFaceNormals = function () {
            return this.buffers.geometryData.hasFaceNormals();
        };
        Geometry.prototype.hasVertexNormals = function () {
            return this.buffers.geometryData.hasVertexNormals();
        };
        Geometry.prototype.isSmoothShading = function () {
            return this._material.shading === wd.Shading.SMOOTH;
        };
        Geometry.prototype.dispose = function () {
            this.buffers.dispose();
            this._material.dispose();
        };
        Geometry.prototype.computeFaceNormals = function () {
            this.buffers.geometryData.computeFaceNormals();
        };
        Geometry.prototype.computeVertexNormals = function () {
            this.buffers.geometryData.computeVertexNormals();
        };
        Geometry.prototype.createBufferContainer = function () {
            return wd.CommonBufferContainer.create(this.gameObject);
        };
        Geometry.prototype.createGeometryData = function (vertices, faces, texCoords, colors, morphTargets) {
            return this.createCommonGeometryData(vertices, faces, texCoords, colors);
        };
        Geometry.prototype.createCommonGeometryData = function (vertices, faces, texCoords, colors) {
            var geometryData = wd.CommonGeometryData.create(this);
            geometryData.vertices = vertices;
            geometryData.faces = faces;
            geometryData.texCoords = texCoords;
            geometryData.colors = colors;
            return geometryData;
        };
        __decorate([
            wd.ensure(function () {
                var geometryData = this.buffers.geometryData;
                wd.assert(geometryData.vertices.length > 0, wd.Log.info.FUNC_MUST("vertices.count", "> 0"));
                wd.assert(geometryData.faces.length * 3 === geometryData.indices.length, wd.Log.info.FUNC_SHOULD("faces.count", "be " + geometryData.indices.length / 3 + ", but actual is " + geometryData.faces.length));
            })
        ], Geometry.prototype, "init", null);
        __decorate([
            wd.virtual
        ], Geometry.prototype, "computeNormals", null);
        __decorate([
            wd.require(function () {
                wd.assert(this.buffers && this.buffers.geometryData, wd.Log.info.FUNC_MUST_DEFINE("buffers->geometryData"));
            })
        ], Geometry.prototype, "hasFaceNormals", null);
        __decorate([
            wd.require(function () {
                wd.assert(this.buffers && this.buffers.geometryData, wd.Log.info.FUNC_MUST_DEFINE("buffers->geometryData"));
            })
        ], Geometry.prototype, "hasVertexNormals", null);
        __decorate([
            wd.require(function () {
                wd.assert(this.buffers && this.buffers.geometryData, wd.Log.info.FUNC_MUST_DEFINE("buffers->geometryData"));
            })
        ], Geometry.prototype, "computeFaceNormals", null);
        __decorate([
            wd.virtual
        ], Geometry.prototype, "createBufferContainer", null);
        __decorate([
            wd.virtual
        ], Geometry.prototype, "createGeometryData", null);
        return Geometry;
    })(wd.Component);
    wd.Geometry = Geometry;
})(wd || (wd = {}));

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var wd;
(function (wd) {
    var GeometryUtils = (function () {
        function GeometryUtils() {
        }
        GeometryUtils.convertToFaces = function (indices, normals) {
            var hasNormals = this.hasData(normals), faces = [];
            for (var i = 0, len = indices.length; i < len; i += 3) {
                var a = indices[i], b = indices[i + 1], c = indices[i + 2], face = wd.Face3.create(a, b, c);
                if (hasNormals) {
                    face.vertexNormals.addChildren([
                        this.getThreeComponent(normals, a),
                        this.getThreeComponent(normals, b),
                        this.getThreeComponent(normals, c)
                    ]);
                    face.faceNormal = face.vertexNormals.getChild(0).copy();
                }
                faces.push(face);
            }
            return faces;
        };
        GeometryUtils.hasData = function (data) {
            return data && ((data.length && data.length > 0) || (data.getCount && data.getCount() > 0));
        };
        GeometryUtils.getThreeComponent = function (sourceData, index) {
            var startIndex = 3 * index;
            return wd.Vector3.create(sourceData[startIndex], sourceData[startIndex + 1], sourceData[startIndex + 2]);
        };
        GeometryUtils.iterateThreeComponent = function (dataArr, iterator) {
            for (var i = 0, len = dataArr.length; i < len; i += 3) {
                iterator(wd.Vector3.create(dataArr[i], dataArr[i + 1], dataArr[i + 2]));
            }
        };
        GeometryUtils.setThreeComponent = function (targetData, sourceData, index) {
            if (sourceData instanceof wd.Vector3) {
                targetData[index * 3] = sourceData.x;
                targetData[index * 3 + 1] = sourceData.y;
                targetData[index * 3 + 2] = sourceData.z;
            }
            else {
                targetData[index * 3] = sourceData[0];
                targetData[index * 3 + 1] = sourceData[1];
                targetData[index * 3 + 2] = sourceData[2];
            }
        };
        __decorate([
            wd.require(function (data) {
                if (data) {
                    wd.assert(data instanceof wdCb.Collection || data instanceof wdCb.Hash || wd.JudgeUtils.isArray(data), wd.Log.info.FUNC_SHOULD("data", "be Array or Collection or Hash"));
                }
            })
        ], GeometryUtils, "hasData", null);
        __decorate([
            wd.require(function (dataArr, iterator) {
                wd.assert(dataArr.length % 3 === 0, wd.Log.info.FUNC_SHOULD("dataArr.length", "times of three"));
            })
        ], GeometryUtils, "iterateThreeComponent", null);
        return GeometryUtils;
    })();
    wd.GeometryUtils = GeometryUtils;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var CustomGeometry = (function (_super) {
        __extends(CustomGeometry, _super);
        function CustomGeometry() {
            _super.apply(this, arguments);
            this._vertices = [];
            this._texCoords = [];
            this._colors = [];
            this._indices = [];
            this._normals = [];
        }
        CustomGeometry.create = function () {
            var geom = new this();
            return geom;
        };
        Object.defineProperty(CustomGeometry.prototype, "vertices", {
            get: function () {
                return this._vertices;
            },
            set: function (vertices) {
                this._vertices = vertices;
                if (this.buffers) {
                    this.buffers.geometryData.vertices = vertices;
                    this.buffers.removeCache(wd.BufferDataType.VERTICE);
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CustomGeometry.prototype, "texCoords", {
            get: function () {
                return this._texCoords;
            },
            set: function (texCoords) {
                this._texCoords = texCoords;
                if (this.buffers) {
                    this.buffers.geometryData.texCoords = texCoords;
                    this.buffers.removeCache(wd.BufferDataType.TEXCOORD);
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CustomGeometry.prototype, "colors", {
            get: function () {
                return this._colors;
            },
            set: function (colors) {
                this._colors = colors;
                if (this.buffers) {
                    this.buffers.geometryData.colors = colors;
                    this.buffers.removeCache(wd.BufferDataType.COLOR);
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CustomGeometry.prototype, "indices", {
            get: function () {
                return this._indices;
            },
            set: function (indices) {
                this._indices = indices;
                if (this.buffers) {
                    this.buffers.geometryData.faces = wd.GeometryUtils.convertToFaces(indices, this.normals);
                    this.buffers.removeCache(wd.BufferDataType.INDICE);
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CustomGeometry.prototype, "normals", {
            get: function () {
                return this._normals;
            },
            set: function (normals) {
                this._normals = normals;
                if (this.buffers) {
                    this.buffers.geometryData.faces = wd.GeometryUtils.convertToFaces(this.indices, normals);
                    this.buffers.removeCache(wd.BufferDataType.NORMAL);
                }
            },
            enumerable: true,
            configurable: true
        });
        CustomGeometry.prototype.computeData = function () {
            return {
                vertices: this.vertices,
                faces: wd.GeometryUtils.convertToFaces(this.indices, this.normals),
                texCoords: this.texCoords,
                colors: this.colors
            };
        };
        return CustomGeometry;
    })(wd.Geometry);
    wd.CustomGeometry = CustomGeometry;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var wd;
(function (wd) {
    var ModelGeometry = (function (_super) {
        __extends(ModelGeometry, _super);
        function ModelGeometry() {
            _super.apply(this, arguments);
            this.vertices = null;
            this.colors = null;
            this.texCoords = null;
            this.faces = null;
            this.morphTargets = null;
            this.morphFaceNormals = wdCb.Hash.create();
            this.morphVertexNormals = wdCb.Hash.create();
        }
        ModelGeometry.create = function () {
            var geom = new this();
            return geom;
        };
        ModelGeometry.prototype.hasAnimation = function () {
            return this._hasMorphTargets() && (this.gameObject && this.gameObject.hasComponent(wd.MorphAnimation));
        };
        ModelGeometry.prototype.hasMorphFaceNormals = function () {
            return this.buffers.geometryData.hasMorphFaceNormals();
        };
        ModelGeometry.prototype.hasMorphVertexNormals = function () {
            return this.buffers.geometryData.hasMorphVertexNormals();
        };
        ModelGeometry.prototype.computeMorphNormals = function () {
            this.buffers.geometryData.computeMorphNormals();
        };
        ModelGeometry.prototype.computeNormals = function () {
            _super.prototype.computeNormals.call(this);
            if (this._hasMorphTargets()) {
                if (this.isSmoothShading()) {
                    if (!this.hasMorphVertexNormals()) {
                        this.computeMorphNormals();
                    }
                }
                else {
                    if (!this.hasMorphFaceNormals()) {
                        this.computeMorphNormals();
                    }
                }
            }
        };
        ModelGeometry.prototype.computeData = function () {
            return {
                vertices: this.vertices,
                faces: this.faces,
                texCoords: this.texCoords,
                colors: this.colors,
                morphTargets: this.morphTargets
            };
        };
        ModelGeometry.prototype.createBufferContainer = function () {
            if (this.hasAnimation()) {
                return wd.MorphBufferContainer.create(this.gameObject, this.gameObject.getComponent(wd.MorphAnimation));
            }
            return wd.CommonBufferContainer.create(this.gameObject);
        };
        ModelGeometry.prototype.createGeometryData = function (vertices, faces, texCoords, colors, morphTargets) {
            if (this.hasAnimation()) {
                var geometryData = wd.MorphGeometryData.create(this);
                geometryData.vertices = vertices;
                geometryData.faces = faces;
                geometryData.texCoords = texCoords;
                geometryData.colors = colors;
                geometryData.morphTargets = morphTargets;
                return geometryData;
            }
            return this.createCommonGeometryData(vertices, faces, texCoords, colors);
        };
        ModelGeometry.prototype._hasMorphTargets = function () {
            return this.morphTargets && this.morphTargets.getCount() > 0;
        };
        __decorate([
            wd.require(function () {
                wd.assert(this.buffers && this.buffers.geometryData, wd.Log.info.FUNC_MUST_DEFINE("buffers->geometryData"));
            })
        ], ModelGeometry.prototype, "hasMorphFaceNormals", null);
        __decorate([
            wd.require(function () {
                wd.assert(this.buffers && this.buffers.geometryData, wd.Log.info.FUNC_MUST_DEFINE("buffers->geometryData"));
            })
        ], ModelGeometry.prototype, "hasMorphVertexNormals", null);
        __decorate([
            wd.require(function () {
                wd.assert(this.buffers && this.buffers.geometryData, wd.Log.info.FUNC_MUST_DEFINE("buffers->geometryData"));
            })
        ], ModelGeometry.prototype, "computeMorphNormals", null);
        __decorate([
            wd.require(function () {
                if (this.hasAnimation()) {
                    wd.assert(this.gameObject.getComponent(wd.MorphAnimation), wd.Log.info.FUNC_SHOULD("gameObject with ModelGeometry", "add MorphAnimation component"));
                }
            })
        ], ModelGeometry.prototype, "createBufferContainer", null);
        return ModelGeometry;
    })(wd.Geometry);
    wd.ModelGeometry = ModelGeometry;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var BoxGeometry = (function (_super) {
        __extends(BoxGeometry, _super);
        function BoxGeometry() {
            _super.apply(this, arguments);
            this.width = null;
            this.height = null;
            this.depth = null;
            this.widthSegments = 1;
            this.heightSegments = 1;
            this.depthSegments = 1;
        }
        BoxGeometry.create = function () {
            var geom = new this();
            return geom;
        };
        BoxGeometry.prototype.computeData = function () {
            var width = this.width, height = this.height, depth = this.depth, widthSegments = this.widthSegments, heightSegments = this.heightSegments, depthSegments = this.depthSegments, sides = {
                FRONT: 0,
                BACK: 1,
                TOP: 2,
                BOTTOM: 3,
                RIGHT: 4,
                LEFT: 5
            };
            var faceAxes = [
                [0, 1, 3],
                [4, 5, 7],
                [3, 2, 6],
                [1, 0, 4],
                [1, 4, 2],
                [5, 0, 6]
            ];
            var faceNormals = [
                [0, 0, 1],
                [0, 0, -1],
                [0, 1, 0],
                [0, -1, 0],
                [1, 0, 0],
                [-1, 0, 0]
            ];
            var corners = [
                wd.Vector3.create(-width, -height, depth),
                wd.Vector3.create(width, -height, depth),
                wd.Vector3.create(width, height, depth),
                wd.Vector3.create(-width, height, depth),
                wd.Vector3.create(width, -height, -depth),
                wd.Vector3.create(-width, -height, -depth),
                wd.Vector3.create(-width, height, -depth),
                wd.Vector3.create(width, height, -depth)
            ];
            var vertices = [];
            var normals = [];
            var texCoords = [];
            var indices = [];
            function generateFace(side, uSegments, vSegments) {
                var x, y, z, u, v;
                var i, j;
                var offset = vertices.length / 3;
                for (i = 0; i <= uSegments; i++) {
                    for (j = 0; j <= vSegments; j++) {
                        var temp1 = wd.Vector3.create();
                        var temp2 = wd.Vector3.create();
                        var temp3 = wd.Vector3.create();
                        var r = wd.Vector3.create();
                        temp1.lerp(corners[faceAxes[side][0]], corners[faceAxes[side][1]], i / uSegments);
                        temp2.lerp(corners[faceAxes[side][0]], corners[faceAxes[side][2]], j / vSegments);
                        temp3.sub2(temp2, corners[faceAxes[side][0]]);
                        r.add2(temp1, temp3);
                        u = i / uSegments;
                        v = j / vSegments;
                        vertices.push(r.x, r.y, r.z);
                        normals.push(faceNormals[side][0], faceNormals[side][1], faceNormals[side][2]);
                        texCoords.push(u, v);
                        if ((i < uSegments) && (j < vSegments)) {
                            indices.push(offset + j + i * (uSegments + 1), offset + j + (i + 1) * (uSegments + 1), offset + j + i * (uSegments + 1) + 1);
                            indices.push(offset + j + (i + 1) * (uSegments + 1), offset + j + (i + 1) * (uSegments + 1) + 1, offset + j + i * (uSegments + 1) + 1);
                        }
                    }
                }
            }
            generateFace(sides.FRONT, widthSegments, heightSegments);
            generateFace(sides.BACK, widthSegments, heightSegments);
            generateFace(sides.TOP, widthSegments, depthSegments);
            generateFace(sides.BOTTOM, widthSegments, depthSegments);
            generateFace(sides.RIGHT, depthSegments, heightSegments);
            generateFace(sides.LEFT, depthSegments, heightSegments);
            return {
                vertices: vertices,
                faces: wd.GeometryUtils.convertToFaces(indices, normals),
                texCoords: texCoords
            };
        };
        return BoxGeometry;
    })(wd.Geometry);
    wd.BoxGeometry = BoxGeometry;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var RectGeometry = (function (_super) {
        __extends(RectGeometry, _super);
        function RectGeometry() {
            _super.apply(this, arguments);
            this.width = null;
            this.height = null;
        }
        RectGeometry.create = function () {
            var geom = new this();
            return geom;
        };
        RectGeometry.prototype.computeData = function () {
            var width = this.width, height = this.height, left = -width / 2, right = width / 2, up = height / 2, down = -height / 2, vertices = [], texCoords = [], indices = [], normals = [];
            vertices = [
                right, up, 0,
                left, up, 0,
                left, down, 0,
                right, down, 0
            ];
            indices = [
                0, 1, 2, 0, 2, 3
            ];
            texCoords = [
                1.0, 1.0,
                0.0, 1.0,
                0.0, 0.0,
                1.0, 0.0
            ];
            normals = [
                0, 0, 1,
                0, 0, 1,
                0, 0, 1,
                0, 0, 1
            ];
            return {
                vertices: vertices,
                faces: wd.GeometryUtils.convertToFaces(indices, normals),
                texCoords: texCoords
            };
        };
        return RectGeometry;
    })(wd.Geometry);
    wd.RectGeometry = RectGeometry;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var PlaneGeometry = (function (_super) {
        __extends(PlaneGeometry, _super);
        function PlaneGeometry() {
            _super.apply(this, arguments);
            this.width = null;
            this.height = null;
            this.widthSegments = 1;
            this.heightSegments = 1;
        }
        PlaneGeometry.create = function () {
            var geom = new this();
            return geom;
        };
        PlaneGeometry.prototype.computeData = function () {
            var width = this.width, height = this.height, widthSegments = this.widthSegments, heightSegments = this.heightSegments, x = null, y = null, z = null, u = null, v = null, i = null, j = null, vertices = [], texCoords = [], normals = [], indices = [];
            for (i = 0; i <= widthSegments; i++) {
                for (j = 0; j <= heightSegments; j++) {
                    x = -width + 2.0 * width * i / widthSegments;
                    y = 0.0;
                    z = -(-height + 2.0 * height * j / heightSegments);
                    u = i / widthSegments;
                    v = j / heightSegments;
                    vertices.push(x, y, z);
                    normals.push(0.0, 1.0, 0.0);
                    texCoords.push(u, v);
                    if ((i < widthSegments) && (j < heightSegments)) {
                        indices.push(j + i * (widthSegments + 1), j + (i + 1) * (widthSegments + 1), j + i * (widthSegments + 1) + 1);
                        indices.push(j + (i + 1) * (widthSegments + 1), j + (i + 1) * (widthSegments + 1) + 1, j + i * (widthSegments + 1) + 1);
                    }
                }
            }
            return {
                vertices: vertices,
                faces: wd.GeometryUtils.convertToFaces(indices, normals),
                texCoords: texCoords
            };
        };
        return PlaneGeometry;
    })(wd.Geometry);
    wd.PlaneGeometry = PlaneGeometry;
})(wd || (wd = {}));

var wd;
(function (wd) {
    (function (SphereDrawMode) {
        SphereDrawMode[SphereDrawMode["LATITUDELONGTITUDE"] = 0] = "LATITUDELONGTITUDE";
    })(wd.SphereDrawMode || (wd.SphereDrawMode = {}));
    var SphereDrawMode = wd.SphereDrawMode;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var SphereGeometry = (function (_super) {
        __extends(SphereGeometry, _super);
        function SphereGeometry() {
            _super.apply(this, arguments);
            this.radius = 1;
            this.drawMode = wd.SphereDrawMode.LATITUDELONGTITUDE;
            this.segments = 20;
        }
        SphereGeometry.create = function () {
            var geom = new this();
            return geom;
        };
        SphereGeometry.prototype.computeData = function () {
            var radius = this.radius, drawMode = this.drawMode, segments = this.segments, data = null;
            if (drawMode === wd.SphereDrawMode.LATITUDELONGTITUDE) {
                var _a = GetDataByLatitudeLongtitude.create(radius, segments).getData(), vertices = _a.vertices, indices = _a.indices, normals = _a.normals, texCoords = _a.texCoords;
                return {
                    vertices: vertices,
                    faces: wd.GeometryUtils.convertToFaces(indices, normals),
                    texCoords: texCoords
                };
            }
            return data;
        };
        return SphereGeometry;
    })(wd.Geometry);
    wd.SphereGeometry = SphereGeometry;
    var GetDataByLatitudeLongtitude = (function () {
        function GetDataByLatitudeLongtitude(radius, bands) {
            this._radius = null;
            this._latitudeBands = null;
            this._longitudeBands = null;
            this._radius = radius;
            this._latitudeBands = bands;
            this._longitudeBands = bands;
        }
        GetDataByLatitudeLongtitude.create = function (radius, bands) {
            var geom = new this(radius, bands);
            return geom;
        };
        GetDataByLatitudeLongtitude.prototype.getData = function () {
            var vertices = [];
            var normals = [];
            var texCoords = [];
            var indices = [];
            for (var latNumber = 0; latNumber <= this._latitudeBands; latNumber++) {
                var theta = latNumber * Math.PI / this._latitudeBands;
                var sinTheta = Math.sin(theta);
                var cosTheta = Math.cos(theta);
                for (var longNumber = 0; longNumber <= this._longitudeBands; longNumber++) {
                    var phi = longNumber * 2 * Math.PI / this._longitudeBands;
                    var sinPhi = Math.sin(phi);
                    var cosPhi = Math.cos(phi);
                    var x = this._radius * cosPhi * sinTheta;
                    var y = this._radius * cosTheta;
                    var z = this._radius * sinPhi * sinTheta;
                    var u = 1 - (longNumber / this._longitudeBands);
                    var v = 1 - (latNumber / this._latitudeBands);
                    normals.push(x);
                    normals.push(y);
                    normals.push(z);
                    texCoords.push(u);
                    texCoords.push(v);
                    vertices.push(x);
                    vertices.push(y);
                    vertices.push(z);
                }
            }
            for (var latNumber = 0; latNumber < this._latitudeBands; latNumber++) {
                for (var longNumber = 0; longNumber < this._longitudeBands; longNumber++) {
                    var first = latNumber * (this._longitudeBands + 1) + longNumber;
                    var second = first + this._longitudeBands + 1;
                    indices.push(first + 1);
                    indices.push(second);
                    indices.push(first);
                    indices.push(first + 1);
                    indices.push(second + 1);
                    indices.push(second);
                }
            }
            return {
                vertices: vertices,
                indices: indices,
                normals: normals,
                texCoords: texCoords
            };
        };
        return GetDataByLatitudeLongtitude;
    })();
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var TriangleGeometry = (function (_super) {
        __extends(TriangleGeometry, _super);
        function TriangleGeometry() {
            _super.apply(this, arguments);
            this.width = null;
            this.height = null;
        }
        TriangleGeometry.create = function () {
            var geom = new this();
            return geom;
        };
        TriangleGeometry.prototype.computeData = function () {
            var width = this.width, height = this.height, left = -width / 2, right = width / 2, up = height / 2, down = -height / 2, vertices = [], texCoords = [], indices = [], normals = [];
            vertices = [
                0.0, up, 0,
                left, down, 0,
                right, down, 0
            ];
            indices = [
                0, 1, 2
            ];
            texCoords = [
                0.5, 1.0,
                0.0, 0.0,
                1.0, 0.0
            ];
            normals = [
                0, 0, 1,
                0, 0, 1,
                0, 0, 1
            ];
            return {
                vertices: vertices,
                faces: wd.GeometryUtils.convertToFaces(indices, normals),
                texCoords: texCoords
            };
        };
        return TriangleGeometry;
    })(wd.Geometry);
    wd.TriangleGeometry = TriangleGeometry;
})(wd || (wd = {}));

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var wd;
(function (wd) {
    var GeometryData = (function () {
        function GeometryData(geometry) {
            this._vertices = null;
            this._faces = null;
            this._texCoords = null;
            this._colors = null;
            this._tangents = null;
            this.isTangentDirty = true;
            this.geometry = null;
            this._normalCache = null;
            this._normalFromFaceCache = null;
            this._normalFromVertexCache = null;
            this._indiceCache = null;
            this._normalDirty = true;
            this._indiceDirty = true;
            this.geometry = geometry;
        }
        Object.defineProperty(GeometryData.prototype, "vertices", {
            get: function () {
                return this._vertices;
            },
            set: function (vertices) {
                this._vertices = vertices;
                this.isTangentDirty = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GeometryData.prototype, "normals", {
            get: function () {
                var geometry = this.geometry;
                if (geometry.isSmoothShading()) {
                    if (!this.hasVertexNormals()) {
                        this.computeVertexNormals();
                    }
                    return this.normalsFromVertexNormals;
                }
                if (!this.hasFaceNormals()) {
                    this.computeFaceNormals();
                }
                return this.normalsFromFaceNormal;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GeometryData.prototype, "normalsFromFaceNormal", {
            get: function () {
                var normals = null;
                if (!this.hasFaceNormals()) {
                    return [];
                }
                normals = [];
                this._faces.forEach(function (face) {
                    var normal = face.faceNormal;
                    wd.GeometryUtils.setThreeComponent(normals, normal, face.aIndex);
                    wd.GeometryUtils.setThreeComponent(normals, normal, face.bIndex);
                    wd.GeometryUtils.setThreeComponent(normals, normal, face.cIndex);
                });
                this._fillEmptyData(normals);
                return normals;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GeometryData.prototype, "normalsFromVertexNormals", {
            get: function () {
                var normals = null;
                if (!this.hasVertexNormals()) {
                    return [];
                }
                normals = [];
                this._faces.forEach(function (face) {
                    wd.GeometryUtils.setThreeComponent(normals, face.vertexNormals.getChild(0), face.aIndex);
                    wd.GeometryUtils.setThreeComponent(normals, face.vertexNormals.getChild(1), face.bIndex);
                    wd.GeometryUtils.setThreeComponent(normals, face.vertexNormals.getChild(2), face.cIndex);
                });
                this._fillEmptyData(normals);
                return normals;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GeometryData.prototype, "indices", {
            get: function () {
                var indices = [];
                for (var _i = 0, _a = this._faces; _i < _a.length; _i++) {
                    var face = _a[_i];
                    indices.push(face.aIndex, face.bIndex, face.cIndex);
                }
                return indices;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GeometryData.prototype, "faces", {
            get: function () {
                return this._faces;
            },
            set: function (faces) {
                this._faces = faces;
                this.onChangeFace();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GeometryData.prototype, "texCoords", {
            get: function () {
                return this._texCoords;
            },
            set: function (texCoords) {
                this._texCoords = texCoords;
                this.isTangentDirty = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GeometryData.prototype, "colors", {
            get: function () {
                return this._getColors(this._colors, this._vertices);
            },
            set: function (colors) {
                this._colors = colors;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GeometryData.prototype, "tangents", {
            get: function () {
                if (this.isTangentDirty) {
                    this.isTangentDirty = false;
                    this._tangents = this._calculateTangents(this._vertices, this.normals, this.texCoords, this.indices);
                }
                return this._tangents;
            },
            enumerable: true,
            configurable: true
        });
        GeometryData.prototype.computeFaceNormals = function () {
            var vertices = this._vertices;
            for (var _i = 0, _a = this._faces; _i < _a.length; _i++) {
                var face = _a[_i];
                face.faceNormal = this.computeFaceNormalsHelper(vertices, face.aIndex, face.bIndex, face.cIndex);
            }
        };
        GeometryData.prototype.computeVertexNormals = function () {
            var normals = null;
            if (!this.hasFaceNormals()) {
                this.computeFaceNormals();
            }
            normals = this.computeVertexNormalsHelper(this._vertices);
            for (var _i = 0, _a = this._faces; _i < _a.length; _i++) {
                var face = _a[_i];
                face.vertexNormals = wdCb.Collection.create([
                    normals[face.aIndex],
                    normals[face.bIndex],
                    normals[face.cIndex]
                ]);
            }
        };
        GeometryData.prototype.hasFaceNormals = function () {
            for (var _i = 0, _a = this._faces; _i < _a.length; _i++) {
                var face = _a[_i];
                if (!face.hasFaceNormal()) {
                    return false;
                }
            }
            return true;
        };
        GeometryData.prototype.hasVertexNormals = function () {
            for (var _i = 0, _a = this._faces; _i < _a.length; _i++) {
                var face = _a[_i];
                if (!face.hasVertexNormal()) {
                    return false;
                }
            }
            return true;
        };
        GeometryData.prototype.onChangeFace = function () {
            this.isTangentDirty = true;
            this._normalDirty = true;
            this._indiceDirty = true;
        };
        GeometryData.prototype.computeFaceNormalsHelper = function (vertices, aIndex, bIndex, cIndex) {
            var p0 = wd.GeometryUtils.getThreeComponent(vertices, aIndex), p1 = wd.GeometryUtils.getThreeComponent(vertices, bIndex), p2 = wd.GeometryUtils.getThreeComponent(vertices, cIndex), v0 = wd.Vector3.create().sub2(p2, p1), v1 = wd.Vector3.create().sub2(p0, p1);
            return wd.Vector3.create().cross(v0, v1).normalize();
        };
        GeometryData.prototype.computeVertexNormalsHelper = function (vertices) {
            var vl = vertices.length / 3, normals = null;
            normals = new Array(vl);
            for (var v = 0; v < vl; v++) {
                normals[v] = wd.Vector3.create();
            }
            for (var _i = 0, _a = this._faces; _i < _a.length; _i++) {
                var face = _a[_i];
                var faceNormal = null;
                faceNormal = face.faceNormal;
                normals[face.aIndex].add(faceNormal);
                normals[face.bIndex].add(faceNormal);
                normals[face.cIndex].add(faceNormal);
            }
            for (var v = 0; v < vl; v++) {
                normals[v].normalize();
            }
            return normals;
        };
        GeometryData.prototype._getColors = function (colors, vertices) {
            if (colors && colors.length > 0) {
                return colors;
            }
            else {
                return this._getColorsFromMaterial(vertices);
            }
        };
        GeometryData.prototype._getColorsFromMaterial = function (vertices) {
            var arr = [], i = 0, material = this.geometry.material, color = material.color, len = null;
            wdCb.Log.error(!vertices || vertices.length === 0, wdCb.Log.info.FUNC_MUST("has vertice data"));
            len = vertices.length;
            for (i = 0; i < len; i++) {
                arr.push(color.r, color.g, color.b);
            }
            return arr;
        };
        GeometryData.prototype._fillEmptyData = function (data) {
            for (var i = 0, len = data.length; i < len; i++) {
                if (isNaN(data[i])) {
                    data[i] = 0;
                }
            }
        };
        GeometryData.prototype._calculateTangents = function (vertices, normals, texCoords, indices) {
            var triangleCount = indices.length / 3, vertexCount = vertices.length / 3, i1, i2, i3, x1, x2, y1, y2, z1, z2, s1, s2, t1, t2, r, sdir = wd.Vector3.create(), tdir = wd.Vector3.create(), v1 = wd.Vector3.create(), v2 = wd.Vector3.create(), v3 = wd.Vector3.create(), w1 = wd.Vector2.create(), w2 = wd.Vector2.create(), w3 = wd.Vector2.create(), i, tan1 = new Float32Array(vertexCount * 3), tan2 = new Float32Array(vertexCount * 3), n = wd.Vector3.create(), temp = wd.Vector3.create(), tangents = [];
            for (i = 0; i < triangleCount; i++) {
                i1 = indices[i * 3];
                i2 = indices[i * 3 + 1];
                i3 = indices[i * 3 + 2];
                v1.set(vertices[i1 * 3], vertices[i1 * 3 + 1], vertices[i1 * 3 + 2]);
                v2.set(vertices[i2 * 3], vertices[i2 * 3 + 1], vertices[i2 * 3 + 2]);
                v3.set(vertices[i3 * 3], vertices[i3 * 3 + 1], vertices[i3 * 3 + 2]);
                w1.set(texCoords[i1 * 2], texCoords[i1 * 2 + 1]);
                w2.set(texCoords[i2 * 2], texCoords[i2 * 2 + 1]);
                w3.set(texCoords[i3 * 2], texCoords[i3 * 2 + 1]);
                x1 = v2.x - v1.x;
                x2 = v3.x - v1.x;
                y1 = v2.y - v1.y;
                y2 = v3.y - v1.y;
                z1 = v2.z - v1.z;
                z2 = v3.z - v1.z;
                s1 = w2.x - w1.x;
                s2 = w3.x - w1.x;
                t1 = w2.y - w1.y;
                t2 = w3.y - w1.y;
                r = 1.0 / (s1 * t2 - s2 * t1);
                sdir.set((t2 * x1 - t1 * x2) * r, (t2 * y1 - t1 * y2) * r, (t2 * z1 - t1 * z2) * r);
                tdir.set((s1 * x2 - s2 * x1) * r, (s1 * y2 - s2 * y1) * r, (s1 * z2 - s2 * z1) * r);
                tan1[i1 * 3 + 0] += sdir.x;
                tan1[i1 * 3 + 1] += sdir.y;
                tan1[i1 * 3 + 2] += sdir.z;
                tan1[i2 * 3 + 0] += sdir.x;
                tan1[i2 * 3 + 1] += sdir.y;
                tan1[i2 * 3 + 2] += sdir.z;
                tan1[i3 * 3 + 0] += sdir.x;
                tan1[i3 * 3 + 1] += sdir.y;
                tan1[i3 * 3 + 2] += sdir.z;
                tan2[i1 * 3 + 0] += tdir.x;
                tan2[i1 * 3 + 1] += tdir.y;
                tan2[i1 * 3 + 2] += tdir.z;
                tan2[i2 * 3 + 0] += tdir.x;
                tan2[i2 * 3 + 1] += tdir.y;
                tan2[i2 * 3 + 2] += tdir.z;
                tan2[i3 * 3 + 0] += tdir.x;
                tan2[i3 * 3 + 1] += tdir.y;
                tan2[i3 * 3 + 2] += tdir.z;
            }
            t1 = wd.Vector3.create();
            t2 = wd.Vector3.create();
            for (i = 0; i < vertexCount; i++) {
                var ndott = null;
                n.set(normals[i * 3], normals[i * 3 + 1], normals[i * 3 + 2]);
                t1.set(tan1[i * 3], tan1[i * 3 + 1], tan1[i * 3 + 2]);
                t2.set(tan2[i * 3], tan2[i * 3 + 1], tan2[i * 3 + 2]);
                ndott = n.dot(t1);
                temp = n.copy().scale(ndott);
                temp.sub2(t1, temp).normalize();
                tangents[i * 4] = temp.x;
                tangents[i * 4 + 1] = temp.y;
                tangents[i * 4 + 2] = temp.z;
                temp.cross(n, t1);
                tangents[i * 4 + 3] = (temp.dot(t2) < 0.0) ? -1.0 : 1.0;
            }
            return tangents;
        };
        __decorate([
            wd.requireGetter(function () {
                wd.assert(this._faces.length > 0, wd.Log.info.FUNC_SHOULD("faces.count", "> 0"));
                for (var _i = 0, _a = this._faces; _i < _a.length; _i++) {
                    var face = _a[_i];
                    if (this.geometry.isSmoothShading()) {
                        wd.assert(face.vertexNormals && face.vertexNormals.getCount() === 3, wd.Log.info.FUNC_SHOULD("faces->vertexNormals.count", "=== 3"));
                    }
                    else {
                        wd.assert(face.hasFaceNormal(), wd.Log.info.FUNC_SHOULD("faces->faceNormal", "has data"));
                    }
                }
            }),
            wd.cacheGetter(function () {
                return !this._normalDirty && this._normalCache;
            }, function () {
                return this._normalCache;
            }, function (result) {
                this._normalCache = result;
                this._normalDirty = false;
            })
        ], GeometryData.prototype, "normals", null);
        __decorate([
            wd.requireGetter(function () {
                wd.assert(this._faces.length > 0, wd.Log.info.FUNC_SHOULD("geometry", "has faces"));
            }),
            wd.ensureGetter(function (normals) {
                for (var _i = 0; _i < normals.length; _i++) {
                    var data = normals[_i];
                    wd.assert(wd.JudgeUtils.isNumber(data), wd.Log.info.FUNC_SHOULD("normals data", "be number"));
                }
            }),
            wd.cacheGetter(function () {
                return !this._normalDirty && this._normalFromFaceCache;
            }, function () {
                return this._normalFromFaceCache;
            }, function (result) {
                this._normalFromFaceCache = result;
                this._normalDirty = false;
            })
        ], GeometryData.prototype, "normalsFromFaceNormal", null);
        __decorate([
            wd.requireGetter(function () {
                wd.assert(this._faces.length > 0, wd.Log.info.FUNC_SHOULD("geometry", "has faces"));
            }),
            wd.ensureGetter(function (normals) {
                for (var _i = 0; _i < normals.length; _i++) {
                    var data = normals[_i];
                    wd.assert(wd.JudgeUtils.isNumber(data), wd.Log.info.FUNC_SHOULD("normals data", "be number"));
                }
            }),
            wd.cacheGetter(function () {
                return !this._normalDirty && this._normalFromVertexCache;
            }, function () {
                return this._normalFromVertexCache;
            }, function (result) {
                this._normalFromVertexCache = result;
                this._normalDirty = false;
            })
        ], GeometryData.prototype, "normalsFromVertexNormals", null);
        __decorate([
            wd.cacheGetter(function () {
                return !this._indiceDirty && this._indiceCache;
            }, function () {
                return this._indiceCache;
            }, function (result) {
                this._indiceCache = result;
                this._indiceDirty = false;
            })
        ], GeometryData.prototype, "indices", null);
        __decorate([
            wd.require(function () {
                wd.assert(wd.GeometryUtils.hasData(this.vertices), wd.Log.info.FUNC_MUST("contain vertices"));
            }),
            wd.ensure(function () {
                for (var _i = 0, _a = this._faces; _i < _a.length; _i++) {
                    var face = _a[_i];
                    wd.assert(face.faceNormal instanceof wd.Vector3, wd.Log.info.FUNC_SHOULD_NOT("faceNormal", "be null"));
                }
            })
        ], GeometryData.prototype, "computeFaceNormals", null);
        __decorate([
            wd.virtual
        ], GeometryData.prototype, "onChangeFace", null);
        return GeometryData;
    })();
    wd.GeometryData = GeometryData;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var CommonGeometryData = (function (_super) {
        __extends(CommonGeometryData, _super);
        function CommonGeometryData() {
            _super.apply(this, arguments);
        }
        CommonGeometryData.create = function (geometry) {
            var obj = new this(geometry);
            return obj;
        };
        return CommonGeometryData;
    })(wd.GeometryData);
    wd.CommonGeometryData = CommonGeometryData;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var wd;
(function (wd) {
    var MorphGeometryData = (function (_super) {
        __extends(MorphGeometryData, _super);
        function MorphGeometryData() {
            _super.apply(this, arguments);
            this._morphTargets = null;
            this._morphNormalCache = null;
            this._morphNormalDirty = true;
        }
        MorphGeometryData.create = function (geometry) {
            var obj = new this(geometry);
            return obj;
        };
        Object.defineProperty(MorphGeometryData.prototype, "morphNormals", {
            get: function () {
                var geometry = this.geometry;
                this._morphNormalDirty = false;
                if (geometry.isSmoothShading()) {
                    if (!this.hasMorphVertexNormals()) {
                        this.computeMorphNormals();
                    }
                    return geometry.morphVertexNormals;
                }
                if (!this.hasMorphFaceNormals()) {
                    this.computeMorphNormals();
                }
                return geometry.morphFaceNormals;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MorphGeometryData.prototype, "morphTargets", {
            get: function () {
                return this._morphTargets;
            },
            set: function (morphTargets) {
                this._morphTargets = morphTargets;
                this._morphNormalDirty = true;
            },
            enumerable: true,
            configurable: true
        });
        MorphGeometryData.prototype.computeMorphNormals = function () {
            var geometry = this.geometry, self = this;
            this._morphTargets.forEach(function (frames, animName) {
                var faceNormalList = wdCb.Collection.create(), vertexNormalList = wdCb.Collection.create();
                frames.forEach(function (vertices) {
                    var tempGeometryData = MorphGeometryData.create(geometry), faceNormalsOfEachFrame = null, vertexNormalsOfEachFrame = null;
                    tempGeometryData.vertices = vertices;
                    tempGeometryData.faces = self._copyFaces(geometry.faces);
                    tempGeometryData.computeFaceNormals();
                    tempGeometryData.computeVertexNormals();
                    _a = self._getMorphNormals(tempGeometryData), faceNormalsOfEachFrame = _a[0], vertexNormalsOfEachFrame = _a[1];
                    faceNormalList.addChild(faceNormalsOfEachFrame);
                    vertexNormalList.addChild(vertexNormalsOfEachFrame);
                    var _a;
                });
                geometry.morphFaceNormals.addChild(animName, faceNormalList);
                geometry.morphVertexNormals.addChild(animName, vertexNormalList);
            });
        };
        MorphGeometryData.prototype.hasMorphFaceNormals = function () {
            return this.geometry.morphFaceNormals.getCount() > 0;
        };
        MorphGeometryData.prototype.hasMorphVertexNormals = function () {
            return this.geometry.morphVertexNormals.getCount() > 0;
        };
        MorphGeometryData.prototype.onChangeFace = function () {
            this._morphNormalDirty = true;
        };
        MorphGeometryData.prototype._copyFaces = function (faces) {
            var copyFaces = [];
            for (var _i = 0; _i < faces.length; _i++) {
                var face = faces[_i];
                copyFaces.push(face.copy());
            }
            return copyFaces;
        };
        MorphGeometryData.prototype._getMorphNormals = function (geometryData) {
            return [geometryData.normalsFromFaceNormal, geometryData.normalsFromVertexNormals];
        };
        __decorate([
            wd.cacheGetter(function () {
                return !this._morphNormalDirty && this._morphNormalCache;
            }, function () {
                return this._morphNormalCache;
            }, function (result) {
                this._morphNormalCache = result;
            })
        ], MorphGeometryData.prototype, "morphNormals", null);
        return MorphGeometryData;
    })(wd.GeometryData);
    wd.MorphGeometryData = MorphGeometryData;
})(wd || (wd = {}));

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var wd;
(function (wd) {
    var BufferContainer = (function () {
        function BufferContainer(gameObject) {
            this.geometryData = null;
            this.gameObject = null;
            this.container = wdCb.Hash.create();
            this._colorBuffer = null;
            this._texCoordBuffer = null;
            this._tangentBuffer = null;
            this._indiceBuffer = null;
            this.gameObject = gameObject;
        }
        BufferContainer.prototype.init = function () {
            var self = this;
            wd.EventManager.on(this.gameObject, wd.EngineEvent.MATERIAL_CHANGE, function () {
                self.removeCache(wd.BufferDataType.COLOR);
            });
        };
        BufferContainer.prototype.removeCache = function (type) {
            this.container.removeChild(type);
        };
        BufferContainer.prototype.getChild = function (type) {
            var result = null;
            switch (type) {
                case wd.BufferDataType.VERTICE:
                    result = this.getVertice(type);
                    break;
                case wd.BufferDataType.NORMAL:
                    result = this.getNormal(type);
                    break;
                case wd.BufferDataType.TANGENT:
                    result = this._getTangent(type);
                    break;
                case wd.BufferDataType.COLOR:
                    result = this._getColor(type);
                    break;
                case wd.BufferDataType.INDICE:
                    result = this._getIndice(type);
                    break;
                case wd.BufferDataType.TEXCOORD:
                    result = this._getTexCoord(type);
                    break;
                default:
                    wdCb.Log.error(true, wdCb.Log.info.FUNC_UNKNOW("BufferDataType: " + type));
                    break;
            }
            return result;
        };
        BufferContainer.prototype.hasChild = function (type) {
            var data = this.geometryData[wd.BufferDataTable.getGeometryDataName(type)];
            return data && data.length > 0;
        };
        BufferContainer.prototype.dispose = function () {
            this.container.forEach(function (buffer) {
                buffer.dispose();
            });
        };
        BufferContainer.prototype.createBufferOnlyOnce = function (bufferAttriName, bufferClass) {
            if (this[bufferAttriName]) {
                return;
            }
            this[bufferAttriName] = bufferClass.create();
        };
        BufferContainer.prototype._getTangent = function (type) {
            var geometryData = null;
            this.createBufferOnlyOnce("_tangentBuffer", wd.ArrayBuffer);
            geometryData = this.geometryData[wd.BufferDataTable.getGeometryDataName(type)];
            this._tangentBuffer.resetData(new Float32Array(geometryData), 3, wd.BufferType.FLOAT);
            return this._tangentBuffer;
        };
        BufferContainer.prototype._getColor = function (type) {
            var geometryData = null;
            this.createBufferOnlyOnce("_colorBuffer", wd.ArrayBuffer);
            geometryData = this.geometryData[wd.BufferDataTable.getGeometryDataName(type)];
            this._colorBuffer.resetData(new Float32Array(geometryData), 3, wd.BufferType.FLOAT);
            return this._colorBuffer;
        };
        BufferContainer.prototype._getIndice = function (type) {
            var geometryData = null;
            this.createBufferOnlyOnce("_indiceBuffer", wd.ElementBuffer);
            geometryData = this.geometryData[wd.BufferDataTable.getGeometryDataName(type)];
            this._indiceBuffer.resetData(new Uint16Array(geometryData), wd.BufferType.UNSIGNED_SHORT);
            return this._indiceBuffer;
        };
        BufferContainer.prototype._getTexCoord = function (type) {
            var geometryData = null;
            this.createBufferOnlyOnce("_texCoordBuffer", wd.ArrayBuffer);
            geometryData = this.geometryData[wd.BufferDataTable.getGeometryDataName(type)];
            this._texCoordBuffer.resetData(new Float32Array(geometryData), 2, wd.BufferType.FLOAT);
            return this._texCoordBuffer;
        };
        BufferContainer.prototype._needReCalcuteTangent = function (type) {
            return this.geometryData.isTangentDirty && type === wd.BufferDataType.TANGENT;
        };
        __decorate([
            wd.cache(function (type) {
                return this.container.hasChild(type) && !this._needReCalcuteTangent(type);
            }, function (type) {
                return this.container.getChild(type);
            }, function (result, type) {
                this.container.addChild(type, result);
            })
        ], BufferContainer.prototype, "_getTangent", null);
        __decorate([
            wd.cache(function (type) {
                return this.container.hasChild(type);
            }, function (type) {
                return this.container.getChild(type);
            }, function (result, type) {
                this.container.addChild(type, result);
            })
        ], BufferContainer.prototype, "_getColor", null);
        __decorate([
            wd.cache(function (type) {
                return this.container.hasChild(type);
            }, function (type) {
                return this.container.getChild(type);
            }, function (result, type) {
                this.container.addChild(type, result);
            })
        ], BufferContainer.prototype, "_getIndice", null);
        __decorate([
            wd.cache(function (type) {
                return this.container.hasChild(type);
            }, function (type) {
                return this.container.getChild(type);
            }, function (result, type) {
                this.container.addChild(type, result);
            })
        ], BufferContainer.prototype, "_getTexCoord", null);
        return BufferContainer;
    })();
    wd.BufferContainer = BufferContainer;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var wd;
(function (wd) {
    var CommonBufferContainer = (function (_super) {
        __extends(CommonBufferContainer, _super);
        function CommonBufferContainer() {
            _super.apply(this, arguments);
            this._verticeBuffer = null;
            this._normalBuffer = null;
        }
        CommonBufferContainer.create = function (gameObject) {
            var obj = new this(gameObject);
            return obj;
        };
        CommonBufferContainer.prototype.getVertice = function (type) {
            var geometryData = this.geometryData[wd.BufferDataTable.getGeometryDataName(type)];
            this.createBufferOnlyOnce("_verticeBuffer", wd.ArrayBuffer);
            this._verticeBuffer.resetData(new Float32Array(geometryData), 3, wd.BufferType.FLOAT);
            return this._verticeBuffer;
        };
        CommonBufferContainer.prototype.getNormal = function (type) {
            var geometryData = this.geometryData[wd.BufferDataTable.getGeometryDataName(type)];
            this.createBufferOnlyOnce("_normalBuffer", wd.ArrayBuffer);
            this._normalBuffer.resetData(new Float32Array(geometryData), 3, wd.BufferType.FLOAT);
            return this._normalBuffer;
        };
        __decorate([
            wd.cache(function (type) {
                return this.container.hasChild(type);
            }, function (type) {
                return this.container.getChild(type);
            }, function (result, type) {
                this.container.addChild(type, result);
            })
        ], CommonBufferContainer.prototype, "getVertice", null);
        __decorate([
            wd.cache(function (type) {
                return this.container.hasChild(type);
            }, function (type) {
                return this.container.getChild(type);
            }, function (result, type) {
                this.container.addChild(type, result);
            })
        ], CommonBufferContainer.prototype, "getNormal", null);
        return CommonBufferContainer;
    })(wd.BufferContainer);
    wd.CommonBufferContainer = CommonBufferContainer;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var wd;
(function (wd) {
    var MorphBufferContainer = (function (_super) {
        __extends(MorphBufferContainer, _super);
        function MorphBufferContainer(gameObject, animation) {
            _super.call(this, gameObject);
            this._animation = null;
            this._isCacheChangeFlag = {};
            this._isCacheChangeInLastLoop = {};
            this._currentVerticeBuffer = null;
            this._nextVerticeBuffer = null;
            this._currentNormalBuffer = null;
            this._nextNormalBuffer = null;
            this._animation = animation;
        }
        MorphBufferContainer.create = function (gameObject, animation) {
            var obj = new this(gameObject, animation);
            return obj;
        };
        MorphBufferContainer.prototype.getVertice = function (type) {
            return this._getMorphData(type, this.geometryData.morphTargets);
        };
        MorphBufferContainer.prototype.getNormal = function (type) {
            return this._getMorphData(type, this.geometryData.morphNormals);
        };
        MorphBufferContainer.prototype._getMorphData = function (type, morphDataTargets) {
            var cacheData = null, frames = null, result = null;
            if (this._isNotPlayAnimation()) {
                return this._getStaticData(type);
            }
            frames = morphDataTargets.getChild(this._animation.currentAnimName);
            wdCb.Log.error(!frames, wdCb.Log.info.FUNC_SHOULD("\"" + this._animation.currentAnimName + "\" animation", "contain frame data"));
            cacheData = this.container.getChild(type);
            if (!cacheData) {
                var currentBuffer = this._getCurrentBuffer(type), nextBuffer = this._getNextBuffer(type);
                currentBuffer.resetData(new Float32Array(frames.getChild(this._animation.currentFrame)), 3, wd.BufferType.FLOAT);
                nextBuffer.resetData(new Float32Array(frames.getChild(this._animation.nextFrame)), 3, wd.BufferType.FLOAT);
                result = [currentBuffer, nextBuffer];
                this.container.addChild(type, result);
                this._isCacheChangeInLastLoop[type] = false;
            }
            else {
                if (this._animation.isFrameChange && (this._isCacheChangeInLastLoop[type] || this._isCacheNotChange(type))) {
                    var currentBuffer = cacheData[0], nextBuffer = cacheData[1], newCurrentBuffer = null, newNextBuffer = null;
                    newCurrentBuffer = nextBuffer;
                    newNextBuffer = currentBuffer.resetData(new Float32Array(frames.getChild(this._animation.nextFrame)));
                    result = [newCurrentBuffer, newNextBuffer];
                    this.container.addChild(type, result);
                    this._isCacheChangeFlag[type] = true;
                    this._isCacheChangeInLastLoop[type] = true;
                }
                else {
                    this._isCacheChangeFlag[type] = false;
                    this._isCacheChangeInLastLoop[type] = false;
                    result = cacheData;
                }
            }
            return result;
        };
        MorphBufferContainer.prototype._getCurrentBuffer = function (type) {
            if (type === wd.BufferDataType.VERTICE) {
                this.createBufferOnlyOnce("_currentVerticeBuffer", wd.ArrayBuffer);
                return this._currentVerticeBuffer;
            }
            this.createBufferOnlyOnce("_currentNormalBuffer", wd.ArrayBuffer);
            return this._currentNormalBuffer;
        };
        MorphBufferContainer.prototype._getNextBuffer = function (type) {
            if (type === wd.BufferDataType.VERTICE) {
                this.createBufferOnlyOnce("_nextVerticeBuffer", wd.ArrayBuffer);
                return this._nextVerticeBuffer;
            }
            this.createBufferOnlyOnce("_nextNormalBuffer", wd.ArrayBuffer);
            return this._nextNormalBuffer;
        };
        MorphBufferContainer.prototype._isCacheNotChange = function (type) {
            return !this._isCacheChangeFlag[type];
        };
        MorphBufferContainer.prototype._isNotPlayAnimation = function () {
            return this._animation.currentAnimName === null;
        };
        MorphBufferContainer.prototype._getStaticData = function (type) {
            var data = null, result = null;
            switch (type) {
                case wd.BufferDataType.VERTICE:
                    data = this.geometryData.vertices;
                    break;
                case wd.BufferDataType.NORMAL:
                    data = this.geometryData.normals;
                    break;
                default:
                    wd.Log.error(true, wd.Log.info.FUNC_SHOULD("type", "be BufferDataType.VERTICE or BufferDataType.NORMAL"));
                    break;
            }
            this._animation.interpolation = 0;
            result = [
                this._getCurrentBuffer(type).resetData(new Float32Array(data), 3, wd.BufferType.FLOAT),
                this._getNextBuffer(type).resetData(new Float32Array(data), 3, wd.BufferType.FLOAT)
            ];
            return result;
        };
        MorphBufferContainer.prototype._getStaticDataCacheData = function (type) {
            return "static_" + type;
        };
        __decorate([
            wd.require(function (type) {
                wd.assert(this.geometryData.morphTargets && this.geometryData.morphTargets.getCount() > 0, wd.Log.info.FUNC_SHOULD("set morphTargets"));
            })
        ], MorphBufferContainer.prototype, "getVertice", null);
        __decorate([
            wd.require(function (type) {
                wd.assert(this.geometryData.morphTargets && this.geometryData.morphTargets.getCount() > 0, wd.Log.info.FUNC_SHOULD("set morphTargets"));
            })
        ], MorphBufferContainer.prototype, "getNormal", null);
        __decorate([
            wd.require(function (type) {
                wd.assert(type === wd.BufferDataType.VERTICE || type === wd.BufferDataType.NORMAL, wd.Log.info.FUNC_SHOULD("type", "be BufferDataType.VERTICE or BufferDataType.NORMAL"));
            })
        ], MorphBufferContainer.prototype, "_getCurrentBuffer", null);
        __decorate([
            wd.require(function (type) {
                wd.assert(type === wd.BufferDataType.VERTICE || type === wd.BufferDataType.NORMAL, wd.Log.info.FUNC_SHOULD("type", "be BufferDataType.VERTICE or BufferDataType.NORMAL"));
            })
        ], MorphBufferContainer.prototype, "_getNextBuffer", null);
        __decorate([
            wd.cache(function (type) {
                return this.container.hasChild(this._getStaticDataCacheData(type));
            }, function (type) {
                return this.container.getChild(this._getStaticDataCacheData(type));
            }, function (result, type) {
                this.container.addChild(this._getStaticDataCacheData(type), result);
            })
        ], MorphBufferContainer.prototype, "_getStaticData", null);
        return MorphBufferContainer;
    })(wd.BufferContainer);
    wd.MorphBufferContainer = MorphBufferContainer;
})(wd || (wd = {}));

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var wd;
(function (wd) {
    var Camera = (function () {
        function Camera() {
            this._worldToCameraMatrix = null;
            this._near = null;
            this._far = null;
            this.pMatrix = wd.Matrix4.create();
            this.gameObject = null;
            this.dirty = false;
        }
        Object.defineProperty(Camera.prototype, "cameraToWorldMatrix", {
            get: function () {
                return this.gameObject.transform.localToWorldMatrix.copy();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Camera.prototype, "worldToCameraMatrix", {
            get: function () {
                if (this._worldToCameraMatrix) {
                    return this._worldToCameraMatrix;
                }
                return this.cameraToWorldMatrix.invert();
            },
            set: function (matrix) {
                this._worldToCameraMatrix = matrix;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Camera.prototype, "near", {
            get: function () {
                return this._near;
            },
            set: function (near) {
                this._near = near;
                this.dirty = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Camera.prototype, "far", {
            get: function () {
                return this._far;
            },
            set: function (far) {
                this._far = far;
                this.dirty = true;
            },
            enumerable: true,
            configurable: true
        });
        Camera.prototype.init = function () {
            if (this.dirty) {
                this.updateProjectionMatrix();
                this.dirty = false;
            }
        };
        Camera.prototype.dispose = function () {
        };
        Camera.prototype.update = function (elapsedTime) {
            if (this.dirty) {
                this.updateProjectionMatrix();
                this.dirty = false;
            }
        };
        Camera.prototype.getInvViewProjMat = function () {
            return this.pMatrix.copy().multiply(this.worldToCameraMatrix).invert();
        };
        __decorate([
            wd.requireGetter(function () {
                wd.assert(this.gameObject, wd.Log.info.FUNC_MUST_DEFINE("gameObject"));
            })
        ], Camera.prototype, "cameraToWorldMatrix", null);
        __decorate([
            wd.virtual
        ], Camera.prototype, "init", null);
        __decorate([
            wd.virtual
        ], Camera.prototype, "dispose", null);
        return Camera;
    })();
    wd.Camera = Camera;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var OrthographicCamera = (function (_super) {
        __extends(OrthographicCamera, _super);
        function OrthographicCamera() {
            _super.apply(this, arguments);
            this._left = null;
            this._right = null;
            this._bottom = null;
            this._top = null;
        }
        OrthographicCamera.create = function () {
            var obj = new this();
            return obj;
        };
        Object.defineProperty(OrthographicCamera.prototype, "left", {
            get: function () {
                return this._left;
            },
            set: function (left) {
                this._left = left;
                this.dirty = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(OrthographicCamera.prototype, "right", {
            get: function () {
                return this._right;
            },
            set: function (right) {
                this._right = right;
                this.dirty = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(OrthographicCamera.prototype, "bottom", {
            get: function () {
                return this._bottom;
            },
            set: function (bottom) {
                this._bottom = bottom;
                this.dirty = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(OrthographicCamera.prototype, "top", {
            get: function () {
                return this._top;
            },
            set: function (top) {
                this._top = top;
                this.dirty = true;
            },
            enumerable: true,
            configurable: true
        });
        OrthographicCamera.prototype.convertScreenToWorld = function (screenX, screenY, distanceFromCamera) {
            var device = wd.DeviceManager.getInstance(), width = device.view.width, height = device.view.height, normalizedDeviceCoordinate = wd.Vector3.create(2 * screenX / width - 1, (height - screenY) / height * 2 - 1, (distanceFromCamera - this.far) / (this.far - this.near) * 2 + 1);
            return this.getInvViewProjMat().multiplyPoint(normalizedDeviceCoordinate);
        };
        OrthographicCamera.prototype.updateProjectionMatrix = function () {
            this.pMatrix.setOrtho(this._left, this._right, this._bottom, this._top, this.near, this.far);
        };
        return OrthographicCamera;
    })(wd.Camera);
    wd.OrthographicCamera = OrthographicCamera;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var PerspectiveCamera = (function (_super) {
        __extends(PerspectiveCamera, _super);
        function PerspectiveCamera() {
            _super.apply(this, arguments);
            this._fovy = null;
            this._aspect = null;
        }
        PerspectiveCamera.create = function () {
            var obj = new this();
            return obj;
        };
        Object.defineProperty(PerspectiveCamera.prototype, "fovy", {
            get: function () {
                return this._fovy;
            },
            set: function (fovy) {
                this._fovy = fovy;
                this.dirty = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PerspectiveCamera.prototype, "aspect", {
            get: function () {
                return this._aspect;
            },
            set: function (aspect) {
                this._aspect = aspect;
                this.dirty = true;
            },
            enumerable: true,
            configurable: true
        });
        PerspectiveCamera.prototype.zoomIn = function (speed, min) {
            if (min === void 0) { min = 1; }
            this.fovy = Math.max(this.fovy - speed, min);
        };
        PerspectiveCamera.prototype.zoomOut = function (speed, max) {
            if (max === void 0) { max = 179; }
            this.fovy = Math.min(this.fovy + speed, max);
        };
        PerspectiveCamera.prototype.convertScreenToWorld = function (screenX, screenY, distanceFromCamera) {
            var device = wd.DeviceManager.getInstance(), width = device.view.width, height = device.view.height, normalizedDeviceCoordinate = wd.Vector3.create(2 * screenX / width - 1, 1 - 2 * screenY / height, 1), invViewProjMat = this.getInvViewProjMat(), point = null, w = null;
            point = invViewProjMat.multiplyPoint(normalizedDeviceCoordinate);
            w = normalizedDeviceCoordinate.x * invViewProjMat.values[3] +
                normalizedDeviceCoordinate.y * invViewProjMat.values[7] +
                normalizedDeviceCoordinate.z * invViewProjMat.values[11] +
                invViewProjMat.values[15];
            point.scale(1 / w);
            return wd.Vector3.create().lerp(this.gameObject.transform.position, point, distanceFromCamera / this.far);
        };
        PerspectiveCamera.prototype.updateProjectionMatrix = function () {
            this.pMatrix.setPerspective(this._fovy, this._aspect, this.near, this.far);
        };
        return PerspectiveCamera;
    })(wd.Camera);
    wd.PerspectiveCamera = PerspectiveCamera;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var CameraController = (function (_super) {
        __extends(CameraController, _super);
        function CameraController(cameraComponent) {
            _super.call(this);
            this.camera = null;
            this.camera = cameraComponent;
        }
        Object.defineProperty(CameraController.prototype, "cameraToWorldMatrix", {
            get: function () {
                return this.camera.cameraToWorldMatrix;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CameraController.prototype, "worldToCameraMatrix", {
            get: function () {
                return this.camera.worldToCameraMatrix;
            },
            set: function (matrix) {
                this.camera.worldToCameraMatrix = matrix;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CameraController.prototype, "pMatrix", {
            get: function () {
                return this.camera.pMatrix;
            },
            set: function (pMatrix) {
                this.camera.pMatrix = pMatrix;
            },
            enumerable: true,
            configurable: true
        });
        CameraController.prototype.init = function () {
            this.camera.gameObject = this.gameObject;
            this.camera.init();
        };
        CameraController.prototype.update = function (elapsedTime) {
            this.camera.update(elapsedTime);
        };
        CameraController.prototype.dispose = function () {
            this.camera.dispose();
        };
        CameraController.prototype.isIntersectWithRay = function (gameObject, screenX, screenY) {
            var from = null, to = null, shape = null;
            if (!gameObject.hasComponent(wd.Collider)) {
                return false;
            }
            shape = gameObject.getComponent(wd.Collider).shape;
            from = this.convertScreenToWorld(screenX, screenY, this.camera.near);
            to = this.convertScreenToWorld(screenX, screenY, this.camera.far);
            return shape.isIntersectWithRay(from, to.sub(from));
        };
        CameraController.prototype.convertScreenToWorld = function (screenX, screenY, distanceFromCamera) {
            return this.camera.convertScreenToWorld(screenX, screenY, distanceFromCamera);
        };
        return CameraController;
    })(wd.Component);
    wd.CameraController = CameraController;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var BasicCameraController = (function (_super) {
        __extends(BasicCameraController, _super);
        function BasicCameraController() {
            _super.apply(this, arguments);
        }
        BasicCameraController.create = function (cameraComponent) {
            var obj = new this(cameraComponent);
            return obj;
        };
        return BasicCameraController;
    })(wd.CameraController);
    wd.BasicCameraController = BasicCameraController;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var FlyCameraController = (function (_super) {
        __extends(FlyCameraController, _super);
        function FlyCameraController(cameraComponent) {
            _super.call(this, cameraComponent);
            this._control = null;
            if (cameraComponent instanceof wd.PerspectiveCamera) {
                this._control = wd.FlyPerspectiveCameraControl.create(cameraComponent);
            }
            else {
                this._control = wd.FlyOrthographicCameraControl.create(cameraComponent);
            }
        }
        FlyCameraController.create = function (cameraComponent) {
            var obj = new this(cameraComponent);
            return obj;
        };
        FlyCameraController.prototype.init = function () {
            _super.prototype.init.call(this);
            this._control.init(this.gameObject);
        };
        FlyCameraController.prototype.update = function (elapsedTime) {
            _super.prototype.update.call(this, elapsedTime);
            this._control.update(elapsedTime);
        };
        FlyCameraController.prototype.dispose = function () {
            _super.prototype.dispose.call(this);
            this._control.dispose();
        };
        return FlyCameraController;
    })(wd.CameraController);
    wd.FlyCameraController = FlyCameraController;
})(wd || (wd = {}));

var wd;
(function (wd) {
    var FlyCameraControl = (function () {
        function FlyCameraControl(cameraComponent) {
            this.moveSpeed = 1.2;
            this.rotateSpeed = 100;
            this.cameraComponent = null;
            this._rotateX = 0;
            this._rotateY = 0;
            this._isRotate = false;
            this._mouseDragSubscription = null;
            this._keydownSubscription = null;
            this._gameObject = null;
            this.cameraComponent = cameraComponent;
        }
        FlyCameraControl.prototype.init = function (gameObject) {
            var eulerAngles = gameObject.transform.eulerAngles;
            this._rotateX = eulerAngles.x;
            this._rotateY = eulerAngles.y;
            this._gameObject = gameObject;
            this._bindCanvasEvent();
        };
        FlyCameraControl.prototype.update = function (elapsedTime) {
            if (!this._isRotate) {
                return;
            }
            this._isRotate = false;
            this._gameObject.transform.eulerAngles = wd.Vector3.create(this._rotateX, this._rotateY, 0);
        };
        FlyCameraControl.prototype.dispose = function () {
            this._removeEvent();
        };
        FlyCameraControl.prototype._move = function (event) {
            var speed = this.moveSpeed, gameObject = this._gameObject, keyState = event.keyState;
            if (keyState["a"] || keyState["left"]) {
                gameObject.transform.translateLocal(wd.Vector3.create(-speed, 0, 0));
            }
            else if (keyState["d"] || keyState["right"]) {
                gameObject.transform.translateLocal(wd.Vector3.create(speed, 0, 0));
            }
            else if (keyState["w"] || keyState["up"]) {
                gameObject.transform.translateLocal(wd.Vector3.create(0, 0, -speed));
            }
            else if (keyState["s"] || keyState["down"]) {
                gameObject.transform.translateLocal(wd.Vector3.create(0, 0, speed));
            }
        };
        FlyCameraControl.prototype._bindCanvasEvent = function () {
            var self = this, rotateSpeed = this.rotateSpeed, mouseup = wd.EventManager.fromEvent(wd.EventName.MOUSEUP), mousemove = wd.EventManager.fromEvent(wd.EventName.MOUSEMOVE), mousedown = wd.EventManager.fromEvent(wd.EventName.MOUSEDOWN), keydown = wd.EventManager.fromEvent(wd.EventName.KEYDOWN), mousedrag = null, canvas = wd.Director.getInstance().view;
            mousedrag = mousedown.flatMap(function (e) {
                e.stopPropagation();
                return mousemove.map(function (e) {
                    var movementDelta = e.movementDelta, dx = null, dy = null, factor = rotateSpeed / canvas.height;
                    dx = factor * movementDelta.x;
                    dy = factor * movementDelta.y;
                    self._isRotate = true;
                    return {
                        dx: dx,
                        dy: dy
                    };
                }).takeUntil(mouseup);
            });
            this._mouseDragSubscription = mousedrag.subscribe(function (pos) {
                self._rotateY -= pos.dx;
                self._rotateX -= pos.dy;
            });
            this._keydownSubscription = keydown.subscribe(function (e) {
                self._move(e);
                self.zoom(e);
            });
        };
        FlyCameraControl.prototype._removeEvent = function () {
            this._mouseDragSubscription.dispose();
            this._keydownSubscription.dispose();
        };
        return FlyCameraControl;
    })();
    wd.FlyCameraControl = FlyCameraControl;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var FlyPerspectiveCameraControl = (function (_super) {
        __extends(FlyPerspectiveCameraControl, _super);
        function FlyPerspectiveCameraControl() {
            _super.apply(this, arguments);
            this.zoomSpeed = 10;
        }
        FlyPerspectiveCameraControl.create = function (cameraComponent) {
            var obj = new this(cameraComponent);
            return obj;
        };
        FlyPerspectiveCameraControl.prototype.zoom = function (event) {
            var speed = this.zoomSpeed, keyState = event.keyState;
            if (keyState["g"]) {
                this.cameraComponent.zoomIn(speed);
            }
            else if (keyState["h"]) {
                this.cameraComponent.zoomOut(speed);
            }
        };
        return FlyPerspectiveCameraControl;
    })(wd.FlyCameraControl);
    wd.FlyPerspectiveCameraControl = FlyPerspectiveCameraControl;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var FlyOrthographicCameraControl = (function (_super) {
        __extends(FlyOrthographicCameraControl, _super);
        function FlyOrthographicCameraControl() {
            _super.apply(this, arguments);
        }
        FlyOrthographicCameraControl.create = function (cameraComponent) {
            var obj = new this(cameraComponent);
            return obj;
        };
        FlyOrthographicCameraControl.prototype.zoom = function (event) {
        };
        return FlyOrthographicCameraControl;
    })(wd.FlyCameraControl);
    wd.FlyOrthographicCameraControl = FlyOrthographicCameraControl;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var ArcballCameraController = (function (_super) {
        __extends(ArcballCameraController, _super);
        function ArcballCameraController() {
            _super.apply(this, arguments);
            this.moveSpeedX = 1;
            this.moveSpeedY = 1;
            this.rotateSpeed = 1;
            this.distance = 10;
            this.phi = Math.PI / 2;
            this.theta = Math.PI / 2;
            this.target = wd.Vector3.create(0, 0, 0);
            this.thetaMargin = 0.05;
            this.minDistance = 0.05;
            this._isChange = true;
            this._mouseDragSubscription = null;
            this._mouseWheelSubscription = null;
            this._keydownSubscription = null;
        }
        ArcballCameraController.create = function (cameraComponent) {
            var obj = new this(cameraComponent);
            return obj;
        };
        ArcballCameraController.prototype.init = function () {
            _super.prototype.init.call(this);
            this._bindCanvasEvent();
        };
        ArcballCameraController.prototype.update = function (elapsedTime) {
            var x = null, y = null, z = null;
            _super.prototype.update.call(this, elapsedTime);
            if (!this._isChange) {
                return;
            }
            this._isChange = false;
            x = ((this.distance) * Math.cos(this.phi) * Math.sin(this.theta) + this.target.x);
            z = ((this.distance) * Math.sin(this.phi) * Math.sin(this.theta) + this.target.z);
            y = ((this.distance) * Math.cos(this.theta) + this.target.y);
            this.gameObject.transform.position = wd.Vector3.create(x, y, z);
            this.gameObject.transform.lookAt(this.target);
        };
        ArcballCameraController.prototype.dispose = function () {
            _super.prototype.dispose.call(this);
            this._removeEvent();
        };
        ArcballCameraController.prototype._bindCanvasEvent = function () {
            var self = this, mouseup = wd.EventManager.fromEvent(wd.EventName.MOUSEUP), mousemove = wd.EventManager.fromEvent(wd.EventName.MOUSEMOVE), mousedown = wd.EventManager.fromEvent(wd.EventName.MOUSEDOWN), mousewheel = wd.EventManager.fromEvent(wd.EventName.MOUSEWHEEL), keydown = wd.EventManager.fromEvent(wd.EventName.KEYDOWN), mousedrag = null;
            mousedrag = mousedown.flatMap(function (e) {
                e.stopPropagation();
                return mousemove.takeUntil(mouseup);
            });
            this._mouseDragSubscription = mousedrag.subscribe(function (e) {
                self._changeOrbit(e);
            });
            this._mouseWheelSubscription = mousewheel.subscribe(function (e) {
                e.preventDefault();
                self._changeDistance(e);
            });
            this._keydownSubscription = keydown.subscribe(function (e) {
                self._changeTarget(e);
            });
        };
        ArcballCameraController.prototype._changeOrbit = function (e) {
            var movementDelta = e.movementDelta;
            this._isChange = true;
            this.phi += movementDelta.x / (100 / this.rotateSpeed);
            this.theta -= movementDelta.y / (100 / this.rotateSpeed);
            this._contrainTheta();
        };
        ArcballCameraController.prototype._changeTarget = function (e) {
            var moveSpeedX = this.moveSpeedX, moveSpeedY = this.moveSpeedY, dx = null, dy = null, keyState = e.keyState, transform = this.gameObject.transform;
            this._isChange = true;
            if (keyState["a"] || keyState["left"]) {
                dx = -moveSpeedX;
            }
            else if (keyState["d"] || keyState["right"]) {
                dx = moveSpeedX;
            }
            else if (keyState["w"] || keyState["up"]) {
                dy = moveSpeedY;
            }
            else if (keyState["s"] || keyState["down"]) {
                dy = -moveSpeedY;
            }
            this.target.add(wd.Vector3.create(transform.right.x * (dx), 0, transform.right.z * (dx)));
            this.target.add(wd.Vector3.create(transform.up.x * dy, transform.up.y * dy, 0));
        };
        ArcballCameraController.prototype._changeDistance = function (e) {
            this._isChange = true;
            this.distance -= e.wheel;
            this._contrainDistance();
        };
        ArcballCameraController.prototype._contrainDistance = function () {
            this.distance = wd.MathUtils.bigThan(this.distance, this.minDistance);
        };
        ArcballCameraController.prototype._contrainTheta = function () {
            this.theta = wd.MathUtils.clamp(this.theta, this.thetaMargin, Math.PI - this.thetaMargin);
        };
        ArcballCameraController.prototype._removeEvent = function () {
            this._mouseDragSubscription.dispose();
            this._mouseWheelSubscription.dispose();
            this._keydownSubscription.dispose();
        };
        return ArcballCameraController;
    })(wd.CameraController);
    wd.ArcballCameraController = ArcballCameraController;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var Action = (function (_super) {
        __extends(Action, _super);
        function Action() {
            _super.apply(this, arguments);
            this.p_target = null;
            this.isFinish = false;
        }
        Object.defineProperty(Action.prototype, "isStart", {
            get: function () {
                return !this.isStop;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Action.prototype, "isStop", {
            get: function () {
                return wd.Log.error(true, wd.Log.info.ABSTRACT_ATTRIBUTE);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Action.prototype, "isPause", {
            get: function () {
                return wd.Log.error(true, wd.Log.info.ABSTRACT_ATTRIBUTE);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Action.prototype, "target", {
            get: function () {
                return this.p_target;
            },
            set: function (target) {
                this.p_target = target;
            },
            enumerable: true,
            configurable: true
        });
        Action.prototype.reset = function () {
            this.isFinish = false;
        };
        Action.prototype.addToGameObject = function (gameObject) {
            _super.prototype.addToGameObject.call(this, gameObject);
            this.target = gameObject;
            gameObject.actionManager.addChild(this);
        };
        Action.prototype.removeFromGameObject = function (gameObject) {
            _super.prototype.removeFromGameObject.call(this, gameObject);
            gameObject.actionManager.removeChild(this);
        };
        Action.prototype.init = function () {
            this.start();
        };
        Action.prototype.finish = function () {
            this.isFinish = true;
            this.stop();
        };
        return Action;
    })(wd.Component);
    wd.Action = Action;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var ActionInstant = (function (_super) {
        __extends(ActionInstant, _super);
        function ActionInstant() {
            _super.apply(this, arguments);
        }
        Object.defineProperty(ActionInstant.prototype, "isStop", {
            get: function () {
                return false;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ActionInstant.prototype, "isPause", {
            get: function () {
                return false;
            },
            enumerable: true,
            configurable: true
        });
        ActionInstant.prototype.start = function () {
        };
        ActionInstant.prototype.stop = function () {
        };
        ActionInstant.prototype.pause = function () {
        };
        ActionInstant.prototype.resume = function () {
        };
        return ActionInstant;
    })(wd.Action);
    wd.ActionInstant = ActionInstant;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var CallFunc = (function (_super) {
        __extends(CallFunc, _super);
        function CallFunc(func, context, dataArr) {
            _super.call(this);
            this._context = null;
            this._callFunc = null;
            this._dataArr = null;
            this._context = context || wd.root;
            this._callFunc = func;
            this._dataArr = wdCb.Collection.create(dataArr);
        }
        CallFunc.create = function (func, context) {
            var data = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                data[_i - 2] = arguments[_i];
            }
            var dataArr = Array.prototype.slice.call(arguments, 2), action = new this(func, context, dataArr);
            return action;
        };
        CallFunc.prototype.reverse = function () {
            return this;
        };
        CallFunc.prototype.update = function (elapsedTime) {
            if (this._callFunc) {
                this._callFunc.call(this._context, this.p_target, this._dataArr);
            }
            this.finish();
        };
        CallFunc.prototype.copy = function () {
            return new CallFunc(this._context, this._callFunc, this._dataArr.copy(true).getChildren());
        };
        return CallFunc;
    })(wd.ActionInstant);
    wd.CallFunc = CallFunc;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var wd;
(function (wd) {
    var ActionInterval = (function (_super) {
        __extends(ActionInterval, _super);
        function ActionInterval() {
            _super.apply(this, arguments);
            this.elapsed = null;
            this.duration = null;
            this._isStop = true;
            this._isPause = false;
            this._timeController = wd.CommonTimeController.create();
        }
        Object.defineProperty(ActionInterval.prototype, "isStop", {
            get: function () {
                return this._isStop;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ActionInterval.prototype, "isPause", {
            get: function () {
                return this._isPause;
            },
            enumerable: true,
            configurable: true
        });
        ActionInterval.prototype.update = function (elapsedTime) {
            if (elapsedTime < this._timeController.startTime) {
                return;
            }
            this.elapsed = this._convertToRatio(this._timeController.computeElapseTime(elapsedTime));
            this.updateBody(elapsedTime);
            if (this.elapsed === 1) {
                this.finish();
            }
        };
        ActionInterval.prototype.start = function () {
            this._isStop = false;
            this._timeController.start();
        };
        ActionInterval.prototype.stop = function () {
            this._isStop = true;
            this._timeController.stop();
        };
        ActionInterval.prototype.reset = function () {
            _super.prototype.reset.call(this);
            this._isStop = true;
        };
        ActionInterval.prototype.pause = function () {
            this._isPause = true;
            this._timeController.pause();
        };
        ActionInterval.prototype.resume = function () {
            this._isPause = false;
            this._timeController.resume();
        };
        ActionInterval.prototype.updateBody = function (time) {
        };
        ActionInterval.prototype._convertToRatio = function (elapsed) {
            var ratio = elapsed / this.duration;
            return ratio > 1 ? 1 : ratio;
        };
        __decorate([
            wd.virtual
        ], ActionInterval.prototype, "updateBody", null);
        return ActionInterval;
    })(wd.Action);
    wd.ActionInterval = ActionInterval;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var Control = (function (_super) {
        __extends(Control, _super);
        function Control() {
            _super.apply(this, arguments);
        }
        Object.defineProperty(Control.prototype, "target", {
            set: function (target) {
                this.p_target = target;
                this.getInnerActions().forEach(function (action) {
                    action.target = target;
                });
            },
            enumerable: true,
            configurable: true
        });
        Control.prototype.init = function () {
            _super.prototype.init.call(this);
            this.iterate("init");
        };
        Control.prototype.reverse = function () {
            this.iterate("reverse");
            return this;
        };
        Control.prototype.reset = function () {
            _super.prototype.reset.call(this);
            this.iterate("reset");
            return this;
        };
        Control.prototype.iterate = function (method, argArr) {
            this.getInnerActions().forEach(function (action) {
                action[method].apply(action, argArr);
            });
        };
        return Control;
    })(wd.ActionInterval);
    wd.Control = Control;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var Sequence = (function (_super) {
        __extends(Sequence, _super);
        function Sequence(actionArr) {
            _super.call(this);
            this._actions = wdCb.Collection.create();
            this._currentAction = null;
            this._actionIndex = 0;
            this._actions.addChildren(actionArr);
        }
        Sequence.create = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var sequence = null;
            wd.Log.assert(args.length >= 2, "Sequence should has two actions at least");
            sequence = new this(args);
            sequence.initWhenCreate();
            return sequence;
        };
        Sequence.prototype.initWhenCreate = function () {
            this._currentAction = this._actions.getChild(0);
        };
        Sequence.prototype.update = function (elapsedTime) {
            if (this._actionIndex === this._actions.getCount()) {
                this.finish();
                return;
            }
            this._currentAction = this._actions.getChild(this._actionIndex);
            if (this._currentAction.isFinish) {
                this._startNextActionAndJudgeFinish();
                return;
            }
            this._currentAction.update(elapsedTime);
            if (this._currentAction.isFinish) {
                this._startNextActionAndJudgeFinish();
            }
            return null;
        };
        Sequence.prototype.copy = function () {
            var actionArr = [];
            this._actions.forEach(function (action) {
                actionArr.push(action.copy());
            });
            return Sequence.create.apply(Sequence, actionArr);
        };
        Sequence.prototype.reset = function () {
            _super.prototype.reset.call(this);
            this._actionIndex = 0;
            this._currentAction = this._actions.getChild(this._actionIndex);
            return this;
        };
        Sequence.prototype.start = function () {
            _super.prototype.start.call(this);
            this._currentAction.start();
            return this;
        };
        Sequence.prototype.stop = function () {
            _super.prototype.stop.call(this);
            this._currentAction.stop();
            return this;
        };
        Sequence.prototype.pause = function () {
            _super.prototype.pause.call(this);
            this._currentAction.pause();
            return this;
        };
        Sequence.prototype.resume = function () {
            _super.prototype.resume.call(this);
            this._currentAction.resume();
            return this;
        };
        Sequence.prototype.reverse = function () {
            this._actions = this._actions.reverse();
            _super.prototype.reverse.call(this);
            return this;
        };
        Sequence.prototype.getInnerActions = function () {
            return this._actions;
        };
        Sequence.prototype._startNextActionAndJudgeFinish = function () {
            this._actionIndex++;
            if (this._actionIndex === this._actions.getCount()) {
                this.finish();
                return;
            }
            this._actions.getChild(this._actionIndex).start();
        };
        return Sequence;
    })(wd.Control);
    wd.Sequence = Sequence;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var Spawn = (function (_super) {
        __extends(Spawn, _super);
        function Spawn(actionArr) {
            _super.call(this);
            this._actions = wdCb.Collection.create();
            this._actions.addChildren(actionArr);
        }
        Spawn.create = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var spawn = null;
            wd.Log.assert(args.length >= 2, "Sequence should has two actions at least");
            spawn = new this(args);
            return spawn;
        };
        Spawn.prototype.update = function (elapsedTime) {
            if (this._isFinish()) {
                this.finish();
                return;
            }
            this.iterate("update", [elapsedTime]);
            if (this._isFinish()) {
                this.finish();
            }
        };
        Spawn.prototype.start = function () {
            _super.prototype.start.call(this);
            this.iterate("start");
            return this;
        };
        Spawn.prototype.stop = function () {
            _super.prototype.stop.call(this);
            this.iterate("stop");
            return this;
        };
        Spawn.prototype.pause = function () {
            _super.prototype.pause.call(this);
            this.iterate("pause");
            return this;
        };
        Spawn.prototype.resume = function () {
            _super.prototype.resume.call(this);
            this.iterate("resume");
            return this;
        };
        Spawn.prototype.copy = function () {
            var actions = [];
            this._actions.forEach(function (action) {
                actions.push(action.copy());
            });
            return Spawn.create.apply(Spawn, actions);
        };
        Spawn.prototype.reset = function () {
            _super.prototype.reset.call(this);
            this.iterate("reset");
            return this;
        };
        Spawn.prototype.reverse = function () {
            this._actions = this._actions.reverse();
            _super.prototype.reverse.call(this);
            return this;
        };
        Spawn.prototype.getInnerActions = function () {
            return this._actions;
        };
        Spawn.prototype.iterate = function (method, argArr) {
            this._actions.forEach(function (action) {
                action[method].apply(action, argArr);
            });
        };
        Spawn.prototype._isFinish = function () {
            var isFinish = true;
            this._actions.forEach(function (action) {
                if (!action.isFinish) {
                    isFinish = false;
                    return wdCb.$BREAK;
                }
            });
            return isFinish;
        };
        return Spawn;
    })(wd.Control);
    wd.Spawn = Spawn;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var DelayTime = (function (_super) {
        __extends(DelayTime, _super);
        function DelayTime(delayTime) {
            _super.call(this);
            this.duration = delayTime;
        }
        DelayTime.create = function (delayTime) {
            var action = new this(delayTime);
            return action;
        };
        DelayTime.prototype.reverse = function () {
            return this;
        };
        DelayTime.prototype.copy = function () {
            return DelayTime.create(this.duration);
        };
        return DelayTime;
    })(wd.ActionInterval);
    wd.DelayTime = DelayTime;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var Repeat = (function (_super) {
        __extends(Repeat, _super);
        function Repeat(action, times) {
            _super.call(this);
            this._innerAction = null;
            this._originTimes = null;
            this._times = null;
            this._innerAction = action;
            this._times = times;
        }
        Repeat.create = function (action, times) {
            var repeat = new this(action, times);
            repeat.initWhenCreate();
            return repeat;
        };
        Repeat.prototype.initWhenCreate = function () {
            this._originTimes = this._times;
        };
        Repeat.prototype.update = function (elapsedTime) {
            if (this._times === 0) {
                this.finish();
                return;
            }
            this._innerAction.update(elapsedTime);
            if (this._innerAction.isFinish) {
                this._times -= 1;
                if (this._times !== 0) {
                    this._innerAction.reset();
                    this._innerAction.start();
                    return;
                }
                this.finish();
            }
        };
        Repeat.prototype.copy = function () {
            return Repeat.create(this._innerAction.copy(), this._times);
        };
        Repeat.prototype.reset = function () {
            _super.prototype.reset.call(this);
            this._times = this._originTimes;
            return this;
        };
        Repeat.prototype.start = function () {
            _super.prototype.start.call(this);
            this._innerAction.start();
        };
        Repeat.prototype.stop = function () {
            _super.prototype.stop.call(this);
            this._innerAction.stop();
        };
        Repeat.prototype.pause = function () {
            _super.prototype.pause.call(this);
            this._innerAction.pause();
        };
        Repeat.prototype.resume = function () {
            _super.prototype.resume.call(this);
            this._innerAction.resume();
        };
        Repeat.prototype.getInnerActions = function () {
            return wdCb.Collection.create([this._innerAction]);
        };
        return Repeat;
    })(wd.Control);
    wd.Repeat = Repeat;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var RepeatForever = (function (_super) {
        __extends(RepeatForever, _super);
        function RepeatForever(action) {
            _super.call(this);
            this._innerAction = null;
            this._innerAction = action;
        }
        RepeatForever.create = function (action) {
            var repeat = new this(action);
            return repeat;
        };
        RepeatForever.prototype.update = function (elapsedTime) {
            this._innerAction.update(elapsedTime);
            if (this._innerAction.isFinish) {
                this._innerAction.reset();
                this._innerAction.start();
            }
        };
        RepeatForever.prototype.copy = function () {
            return RepeatForever.create(this._innerAction.copy());
        };
        RepeatForever.prototype.start = function () {
            _super.prototype.start.call(this);
            this._innerAction.start();
        };
        RepeatForever.prototype.stop = function () {
            _super.prototype.stop.call(this);
            this._innerAction.stop();
        };
        RepeatForever.prototype.pause = function () {
            _super.prototype.pause.call(this);
            this._innerAction.pause();
        };
        RepeatForever.prototype.resume = function () {
            _super.prototype.resume.call(this);
            this._innerAction.resume();
        };
        RepeatForever.prototype.getInnerActions = function () {
            return wdCb.Collection.create([this._innerAction]);
        };
        return RepeatForever;
    })(wd.Control);
    wd.RepeatForever = RepeatForever;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var Tween = (function (_super) {
        __extends(Tween, _super);
        function Tween() {
            _super.apply(this, arguments);
            this._object = null;
            this._valuesStart = wdCb.Hash.create();
            this._valuesEnd = wdCb.Hash.create();
            this._easingFunction = Tween.Easing.Linear.None;
            this._interpolationFunction = Tween.Interpolation.Linear;
            this._onStartCallback = null;
            this._onStartCallbackFired = false;
            this._onUpdateCallback = null;
            this._onFinishCallback = null;
            this._onStopCallback = null;
        }
        Tween.create = function () {
            var obj = new this();
            return obj;
        };
        Tween.prototype.updateBody = function (time) {
            var self = this, easeValue = null;
            if (this._onStartCallbackFired === false) {
                if (this._onStartCallback !== null) {
                    this._onStartCallback.call(this._object.getChildren());
                }
                this._onStartCallbackFired = true;
            }
            easeValue = this._easingFunction(this.elapsed);
            this._valuesEnd.forEach(function (value, key) {
                var start = self._valuesStart.getChild(key), end = value;
                if (end instanceof Array) {
                    self._object.setValue(key, self._interpolationFunction(end, easeValue));
                }
                else {
                    if (wd.JudgeUtils.isString(end)) {
                        end = start + wd.root.parseFloat(end, 10);
                    }
                    if (wd.JudgeUtils.isNumber(end)) {
                        self._object.setValue(key, start + (end - start) * easeValue);
                    }
                }
            });
            if (this._onUpdateCallback !== null) {
                this._onUpdateCallback.call(this._object.getChildren(), easeValue);
            }
            return true;
        };
        Tween.prototype.from = function (object) {
            var self = this;
            this._object = wdCb.Hash.create(object);
            this._object.forEach(function (value, key) {
                self._valuesStart.addChild(key, wd.root.parseFloat(value, 10));
            });
            return this;
        };
        Tween.prototype.to = function (properties, duration) {
            if (duration === void 0) { duration = 1000; }
            this.duration = duration;
            this._valuesEnd = wdCb.Hash.create(properties);
            return this;
        };
        Tween.prototype.init = function () {
            var self = this;
            _super.prototype.init.call(this);
            this._valuesEnd.forEach(function (value, key) {
                if (value instanceof Array) {
                    if (value.length === 0) {
                        return;
                    }
                    self._valuesEnd.setValue(key, [self._object.getChild(key)].concat(self._valuesEnd.getChild(key)));
                }
                self._valuesStart.setValue(key, self._object.getChild(key));
                if ((self._valuesStart.getChild(key) instanceof Array) === false) {
                    self._valuesStart.setValue(key, self._valuesStart.getChild(key) * 1.0);
                }
            });
        };
        Tween.prototype.start = function () {
            _super.prototype.start.call(this);
            this._onStartCallbackFired = false;
            return this;
        };
        Tween.prototype.stop = function () {
            _super.prototype.stop.call(this);
            if (this._onStopCallback !== null) {
                this._onStopCallback.call(this._object.getChildren());
            }
            return this;
        };
        Tween.prototype.copy = function () {
            return Tween.create().from(this._valuesStart.getChildren())
                .to(this._valuesEnd.getChildren(), this.duration)
                .easing(this._easingFunction)
                .interpolation(this._interpolationFunction)
                .onStart(this._onStartCallback)
                .onStop(this._onStopCallback)
                .onFinish(this._onFinishCallback)
                .onUpdate(this._onUpdateCallback);
        };
        Tween.prototype.reverse = function () {
            var tmp = this._valuesStart;
            this._valuesStart = this._valuesEnd;
            this._valuesEnd = tmp;
        };
        Tween.prototype.easing = function (easing) {
            this._easingFunction = easing;
            return this;
        };
        Tween.prototype.interpolation = function (interpolation) {
            this._interpolationFunction = interpolation;
            return this;
        };
        Tween.prototype.onUpdate = function (callback) {
            this._onUpdateCallback = callback;
            return this;
        };
        Tween.prototype.onFinish = function (callback) {
            this._onFinishCallback = callback;
            return this;
        };
        Tween.prototype.onStart = function (callback) {
            this._onStartCallback = callback;
            return this;
        };
        Tween.prototype.onStop = function (callback) {
            this._onStopCallback = callback;
            return this;
        };
        Tween.prototype.finish = function () {
            _super.prototype.finish.call(this);
            if (this._onFinishCallback !== null) {
                this._onFinishCallback.call(this._object.getChildren());
            }
        };
        Tween.Easing = {
            Linear: {
                None: function (k) {
                    return k;
                }
            },
            Quadratic: {
                In: function (k) {
                    return k * k;
                },
                Out: function (k) {
                    return k * (2 - k);
                },
                InOut: function (k) {
                    if ((k *= 2) < 1)
                        return 0.5 * k * k;
                    return -0.5 * (--k * (k - 2) - 1);
                }
            },
            Cubic: {
                In: function (k) {
                    return k * k * k;
                },
                Out: function (k) {
                    return --k * k * k + 1;
                },
                InOut: function (k) {
                    if ((k *= 2) < 1)
                        return 0.5 * k * k * k;
                    return 0.5 * ((k -= 2) * k * k + 2);
                }
            },
            Quartic: {
                In: function (k) {
                    return k * k * k * k;
                },
                Out: function (k) {
                    return 1 - (--k * k * k * k);
                },
                InOut: function (k) {
                    if ((k *= 2) < 1)
                        return 0.5 * k * k * k * k;
                    return -0.5 * ((k -= 2) * k * k * k - 2);
                }
            },
            Quintic: {
                In: function (k) {
                    return k * k * k * k * k;
                },
                Out: function (k) {
                    return --k * k * k * k * k + 1;
                },
                InOut: function (k) {
                    if ((k *= 2) < 1)
                        return 0.5 * k * k * k * k * k;
                    return 0.5 * ((k -= 2) * k * k * k * k + 2);
                }
            },
            Sinusoidal: {
                In: function (k) {
                    return 1 - Math.cos(k * Math.PI / 2);
                },
                Out: function (k) {
                    return Math.sin(k * Math.PI / 2);
                },
                InOut: function (k) {
                    return 0.5 * (1 - Math.cos(Math.PI * k));
                }
            },
            Exponential: {
                In: function (k) {
                    return k === 0 ? 0 : Math.pow(1024, k - 1);
                },
                Out: function (k) {
                    return k === 1 ? 1 : 1 - Math.pow(2, -10 * k);
                },
                InOut: function (k) {
                    if (k === 0)
                        return 0;
                    if (k === 1)
                        return 1;
                    if ((k *= 2) < 1)
                        return 0.5 * Math.pow(1024, k - 1);
                    return 0.5 * (-Math.pow(2, -10 * (k - 1)) + 2);
                }
            },
            Circular: {
                In: function (k) {
                    return 1 - Math.sqrt(1 - k * k);
                },
                Out: function (k) {
                    return Math.sqrt(1 - (--k * k));
                },
                InOut: function (k) {
                    if ((k *= 2) < 1)
                        return -0.5 * (Math.sqrt(1 - k * k) - 1);
                    return 0.5 * (Math.sqrt(1 - (k -= 2) * k) + 1);
                }
            },
            Elastic: {
                In: function (k) {
                    var s, a = 0.1, p = 0.4;
                    if (k === 0)
                        return 0;
                    if (k === 1)
                        return 1;
                    if (!a || a < 1) {
                        a = 1;
                        s = p / 4;
                    }
                    else
                        s = p * Math.asin(1 / a) / (2 * Math.PI);
                    return -(a * Math.pow(2, 10 * (k -= 1)) * Math.sin((k - s) * (2 * Math.PI) / p));
                },
                Out: function (k) {
                    var s, a = 0.1, p = 0.4;
                    if (k === 0)
                        return 0;
                    if (k === 1)
                        return 1;
                    if (!a || a < 1) {
                        a = 1;
                        s = p / 4;
                    }
                    else
                        s = p * Math.asin(1 / a) / (2 * Math.PI);
                    return (a * Math.pow(2, -10 * k) * Math.sin((k - s) * (2 * Math.PI) / p) + 1);
                },
                InOut: function (k) {
                    var s, a = 0.1, p = 0.4;
                    if (k === 0)
                        return 0;
                    if (k === 1)
                        return 1;
                    if (!a || a < 1) {
                        a = 1;
                        s = p / 4;
                    }
                    else
                        s = p * Math.asin(1 / a) / (2 * Math.PI);
                    if ((k *= 2) < 1)
                        return -0.5 * (a * Math.pow(2, 10 * (k -= 1)) * Math.sin((k - s) * (2 * Math.PI) / p));
                    return a * Math.pow(2, -10 * (k -= 1)) * Math.sin((k - s) * (2 * Math.PI) / p) * 0.5 + 1;
                }
            },
            Back: {
                In: function (k) {
                    var s = 1.70158;
                    return k * k * ((s + 1) * k - s);
                },
                Out: function (k) {
                    var s = 1.70158;
                    return --k * k * ((s + 1) * k + s) + 1;
                },
                InOut: function (k) {
                    var s = 1.70158 * 1.525;
                    if ((k *= 2) < 1)
                        return 0.5 * (k * k * ((s + 1) * k - s));
                    return 0.5 * ((k -= 2) * k * ((s + 1) * k + s) + 2);
                }
            },
            Bounce: {
                In: function (k) {
                    return 1 - Tween.Easing.Bounce.Out(1 - k);
                },
                Out: function (k) {
                    if (k < (1 / 2.75)) {
                        return 7.5625 * k * k;
                    }
                    else if (k < (2 / 2.75)) {
                        return 7.5625 * (k -= (1.5 / 2.75)) * k + 0.75;
                    }
                    else if (k < (2.5 / 2.75)) {
                        return 7.5625 * (k -= (2.25 / 2.75)) * k + 0.9375;
                    }
                    else {
                        return 7.5625 * (k -= (2.625 / 2.75)) * k + 0.984375;
                    }
                },
                InOut: function (k) {
                    if (k < 0.5)
                        return Tween.Easing.Bounce.In(k * 2) * 0.5;
                    return Tween.Easing.Bounce.Out(k * 2 - 1) * 0.5 + 0.5;
                }
            }
        };
        Tween.Interpolation = {
            Linear: function (v, k) {
                var m = v.length - 1, f = m * k, i = Math.floor(f), fn = Tween.Interpolation.Utils.Linear;
                if (k < 0)
                    return fn(v[0], v[1], f);
                if (k > 1)
                    return fn(v[m], v[m - 1], m - f);
                return fn(v[i], v[i + 1 > m ? m : i + 1], f - i);
            },
            Bezier: function (v, k) {
                var b = 0, n = v.length - 1, pw = Math.pow, bn = Tween.Interpolation.Utils.Bernstein, i;
                for (i = 0; i <= n; i++) {
                    b += pw(1 - k, n - i) * pw(k, i) * v[i] * bn(n, i);
                }
                return b;
            },
            CatmullRom: function (v, k) {
                var m = v.length - 1, f = m * k, i = Math.floor(f), fn = Tween.Interpolation.Utils.CatmullRom;
                if (v[0] === v[m]) {
                    if (k < 0)
                        i = Math.floor(f = m * (1 + k));
                    return fn(v[(i - 1 + m) % m], v[i], v[(i + 1) % m], v[(i + 2) % m], f - i);
                }
                else {
                    if (k < 0)
                        return v[0] - (fn(v[0], v[0], v[1], v[1], -f) - v[0]);
                    if (k > 1)
                        return v[m] - (fn(v[m], v[m], v[m - 1], v[m - 1], f - m) - v[m]);
                    return fn(v[i ? i - 1 : 0], v[i], v[m < i + 1 ? m : i + 1], v[m < i + 2 ? m : i + 2], f - i);
                }
            },
            Utils: {
                Linear: function (p0, p1, t) {
                    return (p1 - p0) * t + p0;
                },
                Bernstein: function (n, i) {
                    var fc = Tween.Interpolation.Utils.Factorial;
                    return fc(n) / fc(i) / fc(n - i);
                },
                Factorial: (function () {
                    var a = [1];
                    return function (n) {
                        var s = 1, i;
                        if (a[n])
                            return a[n];
                        for (i = n; i > 1; i--)
                            s *= i;
                        return a[n] = s;
                    };
                })(),
                CatmullRom: function (p0, p1, p2, p3, t) {
                    var v0 = (p2 - p0) * 0.5, v1 = (p3 - p1) * 0.5, t2 = t * t, t3 = t * t2;
                    return (2 * p1 - 2 * p2 + v0 + v1) * t3 + (-3 * p1 + 3 * p2 - 2 * v0 - v1) * t2 + v0 * t + p1;
                }
            }
        };
        return Tween;
    })(wd.ActionInterval);
    wd.Tween = Tween;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var RendererComponent = (function (_super) {
        __extends(RendererComponent, _super);
        function RendererComponent() {
            _super.apply(this, arguments);
        }
        return RendererComponent;
    })(wd.Component);
    wd.RendererComponent = RendererComponent;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var wd;
(function (wd) {
    var MeshRenderer = (function (_super) {
        __extends(MeshRenderer, _super);
        function MeshRenderer() {
            _super.apply(this, arguments);
            this.drawMode = wd.DrawMode.TRIANGLES;
        }
        MeshRenderer.create = function () {
            var obj = new this();
            return obj;
        };
        MeshRenderer.prototype.render = function (renderer, geometry, camera) {
            renderer.addCommand(this.createDrawCommand(renderer, geometry, camera));
        };
        MeshRenderer.prototype.createDrawCommand = function (renderer, geometry, camera) {
            var quadCmd = renderer.createQuadCommand(), cameraComponent = camera.getComponent(wd.CameraController), material = geometry.material;
            quadCmd.buffers = geometry.buffers;
            quadCmd.animation = geometry.gameObject.getComponent(wd.Animation);
            quadCmd.mMatrix = this.transform.localToWorldMatrix;
            quadCmd.vMatrix = cameraComponent.worldToCameraMatrix;
            quadCmd.pMatrix = cameraComponent.pMatrix;
            quadCmd.material = material;
            quadCmd.z = this.gameObject.transform.position.z;
            quadCmd.drawMode = this.drawMode;
            return quadCmd;
        };
        __decorate([
            wd.require(function (renderer, geometry, camera) {
                var controller = camera.getComponent(wd.CameraController);
                wd.assert(!!controller && !!controller.camera, wd.Log.info.FUNC_MUST("camera", "add Camera Component"));
                wd.assert(!!geometry, wd.Log.info.FUNC_MUST("Mesh", "add geometry component"));
            })
        ], MeshRenderer.prototype, "createDrawCommand", null);
        return MeshRenderer;
    })(wd.RendererComponent);
    wd.MeshRenderer = MeshRenderer;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var SkyboxRenderer = (function (_super) {
        __extends(SkyboxRenderer, _super);
        function SkyboxRenderer() {
            _super.apply(this, arguments);
        }
        SkyboxRenderer.create = function () {
            var obj = new this();
            return obj;
        };
        SkyboxRenderer.prototype.render = function (renderer, geometry, camera) {
            renderer.skyboxCommand = this.createDrawCommand(renderer, geometry, camera);
        };
        return SkyboxRenderer;
    })(wd.MeshRenderer);
    wd.SkyboxRenderer = SkyboxRenderer;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var UIRenderer = (function (_super) {
        __extends(UIRenderer, _super);
        function UIRenderer() {
            _super.apply(this, arguments);
            this._zIndex = 1;
            this.context = null;
            this.isClear = false;
            this._canvas = null;
            this._beforeInitHandler = null;
            this._endLoopHandler = null;
            this._isInit = false;
            this._refernceList = wdCb.Collection.create();
        }
        UIRenderer.create = function () {
            var obj = new this();
            obj.initWhenCreate();
            return obj;
        };
        Object.defineProperty(UIRenderer.prototype, "zIndex", {
            get: function () {
                return this._zIndex;
            },
            set: function (zIndex) {
                if (zIndex !== this._zIndex) {
                    this._zIndex = zIndex;
                    if (this._canvas) {
                        wdCb.DomQuery.create(this._canvas).css("zIndex", zIndex);
                    }
                }
            },
            enumerable: true,
            configurable: true
        });
        UIRenderer.prototype.addToGameObject = function (gameObject) {
            this._refernceList.addChild(gameObject);
            this.gameObject = gameObject;
        };
        UIRenderer.prototype.removeFromGameObject = function (gameObject) {
            this._refernceList.removeChild(gameObject);
            if (this._refernceList.getCount() > 0) {
                return;
            }
            _super.prototype.removeFromGameObject.call(this, gameObject);
        };
        UIRenderer.prototype.init = function () {
            var _this = this;
            if (this._isInit) {
                return;
            }
            this._isInit = true;
            this._endLoopHandler = wdCb.FunctionUtils.bind(this, function () {
                _this.isClear = false;
            });
            wd.EventManager.on(wd.EngineEvent.ENDLOOP, this._endLoopHandler);
        };
        UIRenderer.prototype.initWhenCreate = function () {
            var _this = this;
            this._beforeInitHandler = wdCb.FunctionUtils.bind(this, function () {
                _this._createOverlayCanvas();
            });
            wd.EventManager.on(wd.EngineEvent.BEFORE_INIT, this._beforeInitHandler);
        };
        UIRenderer.prototype.dispose = function () {
            if (this._refernceList.getCount() > 0) {
                return;
            }
            wd.EventManager.off(wd.EngineEvent.BEFORE_INIT, this._beforeInitHandler);
            wdCb.DomQuery.create(this._canvas).remove();
        };
        UIRenderer.prototype.render = function (renderer, geometry, camera) {
        };
        UIRenderer.prototype.clearCanvas = function () {
            this.context.clearRect(0, 0, this._canvas.width, this._canvas.height);
            this.isClear = true;
        };
        UIRenderer.prototype._createOverlayCanvas = function () {
            var canvas = null, view = null;
            if (this._canvas) {
                return;
            }
            canvas = wdCb.DomQuery.create("<canvas></canvas>").prependTo("body");
            view = wd.DeviceManager.getInstance().view;
            canvas.css("position", "absolute");
            canvas.css("left", view.x + "px");
            canvas.css("top", view.y + "px");
            canvas.css("zIndex", this.zIndex);
            canvas.attr("width", view.width);
            canvas.attr("height", view.height);
            this._canvas = canvas.get(0);
            this.context = this._canvas.getContext("2d");
        };
        return UIRenderer;
    })(wd.RendererComponent);
    wd.UIRenderer = UIRenderer;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var wd;
(function (wd) {
    var Collider = (function (_super) {
        __extends(Collider, _super);
        function Collider() {
            _super.apply(this, arguments);
            this.type = wd.ABSTRACT_ATTRIBUTE;
            this.boundingRegion = null;
        }
        Object.defineProperty(Collider.prototype, "shape", {
            get: function () {
                return this.boundingRegion.shape;
            },
            enumerable: true,
            configurable: true
        });
        Collider.prototype.init = function () {
            this.boundingRegion = this.createBoundingRegion();
            this.boundingRegion.init();
            this.buildBoundingRegion();
        };
        Collider.prototype.update = function (elapsedTime) {
            this.boundingRegion.update();
        };
        Collider.prototype.updateShape = function () {
            this.boundingRegion.updateShape();
        };
        Collider.prototype.isIntersectWith = function (collider) {
            if (collider instanceof wd.BoxCollider) {
                return this.boundingRegion.isIntersectWithBox(collider.boundingRegion);
            }
            else if (collider instanceof wd.SphereCollider) {
                return this.boundingRegion.isIntersectWithSphere(collider.boundingRegion);
            }
            else {
                wd.Log.warn(wd.Log.info.FUNC_NOT_SUPPORT(this.type + " collider", "intersect with " + collider.type + " collider"));
            }
        };
        Collider.prototype.getCollideObjects = function (checkTargetList) {
            var self = this, result = wdCb.Collection.create();
            checkTargetList.forEach(function (gameObject) {
                var collider = null;
                if (self._isSelf(gameObject)) {
                    return;
                }
                collider = gameObject.getComponent(Collider);
                if (gameObject.hasComponent(wd.RigidBody)) {
                    collider.updateShape();
                }
                if (self.isIntersectWith(collider)) {
                    result.addChild(gameObject);
                }
            });
            return result;
        };
        Collider.prototype._isSelf = function (gameObject) {
            return this.gameObject.uid === gameObject.uid;
        };
        __decorate([
            wd.require(function (collider) {
                wd.assert(collider instanceof Collider, wd.Log.info.FUNC_SHOULD("target", "be collider"));
            })
        ], Collider.prototype, "isIntersectWith", null);
        return Collider;
    })(wd.Component);
    wd.Collider = Collider;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var BoxCollider = (function (_super) {
        __extends(BoxCollider, _super);
        function BoxCollider() {
            _super.apply(this, arguments);
            this.center = wd.Vector3.create(0, 0, 0);
            this.halfExtents = null;
            this.type = wd.ColliderType.BOX;
        }
        BoxCollider.create = function () {
            var obj = new this();
            return obj;
        };
        BoxCollider.prototype.createBoundingRegion = function () {
            return wd.BoxBoundingRegion.create(this.gameObject);
        };
        BoxCollider.prototype.buildBoundingRegion = function () {
            this.boundingRegion.build(this.center, this.halfExtents);
        };
        return BoxCollider;
    })(wd.Collider);
    wd.BoxCollider = BoxCollider;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var SphereCollider = (function (_super) {
        __extends(SphereCollider, _super);
        function SphereCollider() {
            _super.apply(this, arguments);
            this.center = wd.Vector3.create(0, 0, 0);
            this.radius = null;
            this.type = wd.ColliderType.SPHERE;
        }
        SphereCollider.create = function () {
            var obj = new this();
            return obj;
        };
        SphereCollider.prototype.createBoundingRegion = function () {
            return wd.SphereBoundingRegion.create(this.gameObject);
        };
        SphereCollider.prototype.buildBoundingRegion = function () {
            this.boundingRegion.build(this.center, this.radius);
        };
        return SphereCollider;
    })(wd.Collider);
    wd.SphereCollider = SphereCollider;
})(wd || (wd = {}));

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var wd;
(function (wd) {
    var BoundingRegion = (function () {
        function BoundingRegion(gameObject) {
            this.shape = null;
            this.gameObject = null;
            this.isUserSpecifyTheRegion = false;
            this.originShape = null;
            this.debugObject = null;
            this.gameObject = gameObject;
        }
        BoundingRegion.prototype.init = function () {
            this.shape = this.createShape();
        };
        BoundingRegion.prototype.build = function (center) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            var params = Array.prototype.slice.call(arguments, 0);
            if (this.isBuildUserSpecifyBoundingRegion.apply(this, params)) {
                this.isUserSpecifyTheRegion = true;
                this.shape.setFromShapeParam.apply(this.shape, params);
            }
            else {
                this.shape.setFromPoints(this.gameObject.getComponent(wd.Geometry).geometryData.vertices);
            }
            this.originShape = this.shape.copy();
            if (wd.DebugConfig.debugCollision) {
                this.debugObject = this.buildDebugObjectFromShape(this.shape);
                wd.Director.getInstance().scene.addChild(this.debugObject);
            }
        };
        BoundingRegion.prototype.update = function () {
            if (this.isNotTransformed()) {
                return;
            }
            if (wd.DebugConfig.debugCollision) {
                this.updateShape();
                this.updateDebugObjectFromShape(this.shape);
            }
            else if (!this.gameObject.hasComponent(wd.RigidBody)) {
                this.updateShape();
            }
        };
        BoundingRegion.prototype.isIntersectWithSphere = function (boundingRegion) {
            return this.shape.isIntersectWithSphere(boundingRegion.shape);
        };
        BoundingRegion.prototype.isIntersectWithBox = function (boundingRegion) {
            return this.shape.isIntersectWithBox(boundingRegion.shape);
        };
        BoundingRegion.prototype.buildDebugObjectFromShape = function (shape) {
            var material = null, geometry = null, renderer = null, gameObject = null;
            material = wd.BasicMaterial.create();
            material.color = wd.Color.create("rgb(255,0,0)");
            geometry = wd.CustomGeometry.create();
            geometry.material = material;
            this.setDebugObjectGeometry(geometry, shape);
            renderer = wd.MeshRenderer.create();
            renderer.drawMode = wd.DrawMode.LINES;
            gameObject = wd.GameObject.create();
            gameObject.addComponent(geometry);
            gameObject.addComponent(renderer);
            gameObject.transform.translate(shape.center);
            gameObject.name = "debugBoundingRegion" + this.gameObject.uid;
            gameObject.init();
            return gameObject;
        };
        __decorate([
            wd.ensure(function (returnValue, center) {
                var args = [];
                for (var _i = 2; _i < arguments.length; _i++) {
                    args[_i - 2] = arguments[_i];
                }
                if (this.isBuildUserSpecifyBoundingRegion.apply(this, Array.prototype.slice.call(arguments, 1))) {
                    wd.assert(this.shape.center.isEqual(center), wd.Log.info.FUNC_SHOULD_NOT("transform shape when build"));
                }
                else {
                    wd.assert(this.shape.center.isZero(), wd.Log.info.FUNC_SHOULD_NOT("transform shape when build"));
                }
            })
        ], BoundingRegion.prototype, "build", null);
        return BoundingRegion;
    })();
    wd.BoundingRegion = BoundingRegion;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var wd;
(function (wd) {
    var BoxBoundingRegion = (function (_super) {
        __extends(BoxBoundingRegion, _super);
        function BoxBoundingRegion() {
            _super.apply(this, arguments);
        }
        BoxBoundingRegion.create = function (gameObject) {
            var obj = new this(gameObject);
            return obj;
        };
        BoxBoundingRegion.prototype.updateShape = function () {
            var transform = this.gameObject.transform;
            if (this.isUserSpecifyTheRegion) {
                this.shape.setFromTranslationAndScale(this.originShape, transform.localToWorldMatrix);
            }
            else {
                if (transform.isRotate) {
                    this.shape.setFromObject(this.gameObject);
                }
                else {
                    this.shape.setFromTranslationAndScale(this.originShape, transform.localToWorldMatrix);
                }
            }
        };
        BoxBoundingRegion.prototype.createShape = function () {
            return wd.AABBShape.create();
        };
        BoxBoundingRegion.prototype.updateDebugObjectFromShape = function (shape) {
            var geometry = this.debugObject.getComponent(wd.CustomGeometry);
            this.setDebugObjectGeometry(geometry, shape);
            this.debugObject.transform.position = shape.center;
        };
        BoxBoundingRegion.prototype.setDebugObjectGeometry = function (geometry, shape) {
            var halfExtents = shape.halfExtents, x = halfExtents.x, y = halfExtents.y, z = halfExtents.z;
            geometry.vertices = [
                -x, -y, -z, -x, -y, z, x, -y, z, x, -y, -z,
                -x, y, -z, -x, y, z, x, y, z, x, y, -z
            ];
            geometry.indices = [
                0, 1, 1, 2, 2, 3, 3, 0,
                4, 5, 5, 6, 6, 7, 7, 4,
                0, 4, 1, 5, 2, 6, 3, 7
            ];
        };
        BoxBoundingRegion.prototype.isBuildUserSpecifyBoundingRegion = function (center, halfExtents) {
            return !!center && !!halfExtents;
        };
        BoxBoundingRegion.prototype.isNotTransformed = function () {
            var transform = this.gameObject.transform;
            return !transform.isRotate && !transform.isTranslate && !transform.isScale;
        };
        __decorate([
            wd.require(function (shape) {
                wd.assert(this.debugObject, wd.Log.info.FUNC_SHOULD("build debugObject"));
            })
        ], BoxBoundingRegion.prototype, "updateDebugObjectFromShape", null);
        __decorate([
            wd.require(function (geometry, shape) {
                wd.assert(shape.halfExtents && !shape.halfExtents.isZero(), wd.Log.info.FUNC_SHOULD_NOT("halfExtents", "be zero"));
            })
        ], BoxBoundingRegion.prototype, "setDebugObjectGeometry", null);
        return BoxBoundingRegion;
    })(wd.BoundingRegion);
    wd.BoxBoundingRegion = BoxBoundingRegion;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var wd;
(function (wd) {
    var SphereBoundingRegion = (function (_super) {
        __extends(SphereBoundingRegion, _super);
        function SphereBoundingRegion() {
            _super.apply(this, arguments);
        }
        SphereBoundingRegion.create = function (gameObject) {
            var obj = new this(gameObject);
            return obj;
        };
        SphereBoundingRegion.prototype.updateShape = function () {
            var transform = this.gameObject.transform;
            this.shape.setFromTranslationAndScale(this.originShape, transform.localToWorldMatrix);
        };
        SphereBoundingRegion.prototype.createShape = function () {
            return wd.SphereShape.create();
        };
        SphereBoundingRegion.prototype.updateDebugObjectFromShape = function (shape) {
            this.debugObject.transform.position = shape.center;
            var scaleTimes = shape.radius / this.originShape.radius;
            this.debugObject.transform.scale = wd.Vector3.create(scaleTimes, scaleTimes, scaleTimes);
        };
        SphereBoundingRegion.prototype.isNotTransformed = function () {
            var transform = this.gameObject.transform;
            return !transform.isTranslate && !transform.isScale;
        };
        SphereBoundingRegion.prototype.isBuildUserSpecifyBoundingRegion = function (center, radius) {
            return !!center && !!radius;
        };
        SphereBoundingRegion.prototype.setDebugObjectGeometry = function (geometry, shape) {
            var SEGMENTS = 40, RINGCOUNT = 3;
            var radius = shape.radius, vertices = [], x = 0;
            for (var ring = 0; ring < RINGCOUNT; ring++) {
                var xo = 0, yo = 1, zo = 2, theta = null;
                if (ring === 1) {
                    xo = 1;
                    yo = 0;
                    zo = 2;
                }
                else if (ring === 2) {
                    xo = 0;
                    yo = 2;
                    zo = 1;
                }
                for (var i = 0; i < SEGMENTS; i++) {
                    theta = 2 * Math.PI * (i / SEGMENTS);
                    vertices[x + xo] = radius * Math.cos(theta);
                    vertices[x + yo] = 0;
                    vertices[x + zo] = radius * Math.sin(theta);
                    x += 3;
                    theta = 2 * Math.PI * ((i + 1) / SEGMENTS);
                    vertices[x + xo] = radius * Math.cos(theta);
                    vertices[x + yo] = 0;
                    vertices[x + zo] = radius * Math.sin(theta);
                    x += 3;
                }
            }
            geometry.vertices = vertices;
        };
        __decorate([
            wd.require(function (shape) {
                wd.assert(this.debugObject, wd.Log.info.FUNC_SHOULD("build debugObject"));
            })
        ], SphereBoundingRegion.prototype, "updateDebugObjectFromShape", null);
        __decorate([
            wd.require(function (geometry, shape) {
                wd.assert(shape.radius > 0, wd.Log.info.FUNC_SHOULD("radius", "> 0"));
            })
        ], SphereBoundingRegion.prototype, "setDebugObjectGeometry", null);
        return SphereBoundingRegion;
    })(wd.BoundingRegion);
    wd.SphereBoundingRegion = SphereBoundingRegion;
})(wd || (wd = {}));

var wd;
(function (wd) {
    var Shape = (function () {
        function Shape() {
            this.center = wd.Vector3.create(0, 0, 0);
        }
        Shape.prototype.isBoxAndSphereIntersected = function (box, sphere) {
            var sphereCenter = sphere.center, sphereRadius = sphere.radius;
            return sphereCenter.distanceToSquared(box.closestPointTo(sphereCenter)) < Math.pow(sphereRadius, 2);
        };
        return Shape;
    })();
    wd.Shape = Shape;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var wd;
(function (wd) {
    var AABBShape = (function (_super) {
        __extends(AABBShape, _super);
        function AABBShape() {
            _super.apply(this, arguments);
            this.halfExtents = wd.Vector3.create(0.5, 0.5, 0.5);
        }
        AABBShape.create = function () {
            var obj = new this();
            return obj;
        };
        AABBShape.prototype.setMinMax = function (min, max) {
            this.center.add2(max, min).scale(0.5);
            this.halfExtents.sub2(max, min).scale(0.5);
        };
        AABBShape.prototype.getMin = function () {
            return this.center.copy().sub(this.halfExtents);
        };
        AABBShape.prototype.getMax = function () {
            return this.center.copy().add(this.halfExtents);
        };
        AABBShape.prototype.setFromShapeParam = function (center, halfExtents) {
            this.center = center;
            this.halfExtents = halfExtents;
        };
        AABBShape.prototype.setFromPoints = function (points) {
            var self = this, min = this._getEmptyMin(), max = this._getEmptyMax();
            wd.GeometryUtils.iterateThreeComponent(points, function (point) {
                self._expandByPoint(point, min, max);
            });
            this.setMinMax(min, max);
            return this;
        };
        AABBShape.prototype.setFromTransformedAABB = function (aabb, matrix) {
            var bc = this.center, br = this.halfExtents, ac = aabb.center.values, ar = aabb.halfExtents.values, m = matrix.values, mx0 = m[0], mx1 = m[4], mx2 = m[8], my0 = m[1], my1 = m[5], my2 = m[9], mz0 = m[2], mz1 = m[6], mz2 = m[10], mx0a = Math.abs(mx0), mx1a = Math.abs(mx1), mx2a = Math.abs(mx2), my0a = Math.abs(my0), my1a = Math.abs(my1), my2a = Math.abs(my2), mz0a = Math.abs(mz0), mz1a = Math.abs(mz1), mz2a = Math.abs(mz2);
            bc.set(m[12] + mx0 * ac[0] + mx1 * ac[1] + mx2 * ac[2], m[13] + my0 * ac[0] + my1 * ac[1] + my2 * ac[2], m[14] + mz0 * ac[0] + mz1 * ac[1] + mz2 * ac[2]);
            br.set(mx0a * ar[0] + mx1a * ar[1] + mx2a * ar[2], my0a * ar[0] + my1a * ar[1] + my2a * ar[2], mz0a * ar[0] + mz1a * ar[1] + mz2a * ar[2]);
        };
        AABBShape.prototype.setFromTranslationAndScale = function (aabb, matrix) {
            var translation = matrix.getTranslation(), scale = matrix.getScale();
            this.center = aabb.center.copy().add(translation);
            this.halfExtents = aabb.halfExtents.copy().mul(scale);
        };
        AABBShape.prototype.setFromObject = function (gameObject) {
            var modelMatrix = gameObject.transform.localToWorldMatrix, vertices = gameObject.getComponent(wd.Geometry).geometryData.vertices, self = this, min = this._getEmptyMin(), max = this._getEmptyMax();
            wd.GeometryUtils.iterateThreeComponent(vertices, function (point) {
                point.applyMatrix4(modelMatrix);
                self._expandByPoint(point, min, max);
            });
            this.setMinMax(min, max);
        };
        AABBShape.prototype.isIntersectWithBox = function (shape) {
            var aMax = this.getMax();
            var aMin = this.getMin();
            var bMax = shape.getMax();
            var bMin = shape.getMin();
            return (aMin.x <= bMax.x) && (aMax.x >= bMin.x) &&
                (aMin.y <= bMax.y) && (aMax.y >= bMin.y) &&
                (aMin.z <= bMax.z) && (aMax.z >= bMin.z);
        };
        AABBShape.prototype.isIntersectWithSphere = function (shape) {
            return this.isBoxAndSphereIntersected(this, shape);
        };
        AABBShape.prototype.isIntersectWithRay = function (rayOrigin, rayDir) {
            var diff = wd.Vector3.create(), absDiff, absDir, cross = wd.Vector3.create(), prod = wd.Vector3.create();
            diff.sub2(rayOrigin, this.center);
            absDiff = wd.Vector3.create(Math.abs(diff.x), Math.abs(diff.y), Math.abs(diff.z));
            prod.mul2(diff, rayDir);
            if (absDiff.x > this.halfExtents.x && prod.x >= 0) {
                return false;
            }
            if (absDiff.y > this.halfExtents.y && prod.y >= 0) {
                return false;
            }
            if (absDiff.z > this.halfExtents.z && prod.z >= 0) {
                return false;
            }
            absDir = wd.Vector3.create(Math.abs(rayDir.x), Math.abs(rayDir.y), Math.abs(rayDir.z));
            cross.cross(rayDir, diff);
            cross.set(Math.abs(cross.x), Math.abs(cross.y), Math.abs(cross.z));
            if (cross.x > this.halfExtents.y * absDir.z + this.halfExtents.z * absDir.y) {
                return false;
            }
            if (cross.y > this.halfExtents.x * absDir.z + this.halfExtents.z * absDir.x) {
                return false;
            }
            if (cross.z > this.halfExtents.x * absDir.y + this.halfExtents.y * absDir.x) {
                return false;
            }
            return true;
        };
        AABBShape.prototype.closestPointTo = function (point) {
            var min = this.getMin(), max = this.getMax(), resultPoint = wd.Vector3.create();
            if (point.x < min.x) {
                resultPoint.x = min.x;
            }
            else if (point.x > max.x) {
                resultPoint.x = max.x;
            }
            else {
                resultPoint.x = point.x;
            }
            if (point.y < min.y) {
                resultPoint.y = min.y;
            }
            else if (point.y > max.y) {
                resultPoint.y = max.y;
            }
            else {
                resultPoint.y = point.y;
            }
            if (point.z < min.z) {
                resultPoint.z = min.z;
            }
            else if (point.z > max.z) {
                resultPoint.z = max.z;
            }
            else {
                resultPoint.z = point.z;
            }
            return resultPoint;
        };
        AABBShape.prototype.containPoint = function (point) {
            var min = this.getMin(), max = this.getMax();
            for (var i = 0; i < 3; ++i) {
                if (point.values[i] < min.values[i] || point.values[i] > max.values[i]) {
                    return false;
                }
            }
            return true;
        };
        AABBShape.prototype.copy = function () {
            var shape = AABBShape.create();
            shape.center = this.center.copy();
            shape.halfExtents = this.halfExtents.copy();
            return shape;
        };
        AABBShape.prototype._getEmptyMin = function () {
            return wd.Vector3.create(Infinity, Infinity, Infinity);
        };
        AABBShape.prototype._getEmptyMax = function () {
            return wd.Vector3.create(-Infinity, -Infinity, -Infinity);
        };
        AABBShape.prototype._expandByPoint = function (point, min, max) {
            min.min(point);
            max.max(point);
        };
        __decorate([
            wd.require(function (gameObject) {
                var vertices = gameObject.getComponent(wd.Geometry).geometryData.vertices;
                wd.assert(vertices && vertices.length > 0, wd.Log.info.FUNC_MUST_DEFINE("vertices"));
            })
        ], AABBShape.prototype, "setFromObject", null);
        return AABBShape;
    })(wd.Shape);
    wd.AABBShape = AABBShape;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var SphereShape = (function (_super) {
        __extends(SphereShape, _super);
        function SphereShape() {
            _super.apply(this, arguments);
            this.radius = 1;
        }
        SphereShape.create = function () {
            var obj = new this();
            return obj;
        };
        SphereShape.prototype.setFromShapeParam = function (center, radius) {
            this.center = center;
            this.radius = radius;
        };
        SphereShape.prototype.setFromPoints = function (points) {
            var aabb = wd.AABBShape.create();
            this.center = aabb.setFromPoints(points).center;
            this.radius = this._findMaxDistanceOfPointsToCenter(points);
        };
        SphereShape.prototype.setFromTranslationAndScale = function (sphere, matrix) {
            var translation = matrix.getTranslation(), scale = matrix.getScale();
            this.center = sphere.center.copy().add(translation);
            this.radius = sphere.radius * Math.max(scale.x, scale.y, scale.z);
        };
        SphereShape.prototype.isIntersectWithSphere = function (shape) {
            var radiusSum = this.radius + shape.radius;
            return shape.center.distanceToSquared(this.center) <= (Math.pow(radiusSum, 2));
        };
        SphereShape.prototype.isIntersectWithBox = function (shape) {
            return this.isBoxAndSphereIntersected(shape, this);
        };
        SphereShape.prototype.isIntersectWithRay = function (rayOrigin, rayDir) {
            var diff = wd.Vector3.create(), a = 0, b = 0, c = 0, discr = 0;
            diff.sub2(rayOrigin, this.center);
            if (diff.dot(diff) < this.radius * this.radius) {
                return true;
            }
            a = rayDir.dot(rayDir);
            b = 2 * rayDir.dot(diff);
            c = this.center.dot(this.center);
            c += rayOrigin.dot(rayOrigin);
            c -= 2 * this.center.dot(rayOrigin);
            c -= this.radius * this.radius;
            discr = (b * b) - (4 * a * c);
            if (discr < 0) {
                return false;
            }
            return true;
        };
        SphereShape.prototype.containPoint = function (point) {
            return point.distanceToSquared(this.center) <= (Math.pow(this.radius, 2));
        };
        SphereShape.prototype.copy = function () {
            var shape = SphereShape.create();
            shape.center = this.center.copy();
            shape.radius = this.radius;
            return shape;
        };
        SphereShape.prototype._findMaxDistanceOfPointsToCenter = function (points) {
            var maxRadiusSq = 0, center = this.center;
            wd.GeometryUtils.iterateThreeComponent(points, function (point) {
                maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(point));
            });
            return Math.sqrt(maxRadiusSq);
        };
        return SphereShape;
    })(wd.Shape);
    wd.SphereShape = SphereShape;
})(wd || (wd = {}));

var wd;
(function (wd) {
    (function (ColliderType) {
        ColliderType[ColliderType["BOX"] = "box"] = "BOX";
        ColliderType[ColliderType["SPHERE"] = "sphere"] = "SPHERE";
    })(wd.ColliderType || (wd.ColliderType = {}));
    var ColliderType = wd.ColliderType;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var wd;
(function (wd) {
    var RigidBody = (function (_super) {
        __extends(RigidBody, _super);
        function RigidBody() {
            _super.apply(this, arguments);
            this._friction = 0;
            this._restitution = 0;
            this._children = wdCb.Collection.create();
            this.lockConstraint = wd.LockConstraint.create(this);
            this.distanceConstraint = wd.DistanceConstraint.create(this);
            this.hingeConstraint = wd.HingeConstraint.create(this);
            this.pointToPointConstraintList = wd.PointToPointConstraintList.create(this);
        }
        Object.defineProperty(RigidBody.prototype, "friction", {
            get: function () {
                return this._friction;
            },
            set: function (friction) {
                this._friction = friction;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RigidBody.prototype, "restitution", {
            get: function () {
                return this._restitution;
            },
            set: function (restitution) {
                this._restitution = restitution;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RigidBody.prototype, "children", {
            get: function () {
                return this._children;
            },
            set: function (children) {
                if (wd.JudgeUtils.isArray(children)) {
                    var arr = children;
                    this._children = wdCb.Collection.create(arr);
                }
                else {
                    var list = children;
                    this._children = list;
                }
                this._children.forEach(function (child) {
                    child.addTag("isRigidbodyChild");
                });
            },
            enumerable: true,
            configurable: true
        });
        RigidBody.prototype.init = function () {
            var self = this;
            wd.EventManager.on(wd.EngineEvent.AFTER_INIT, function () {
                self.addBody();
            });
            wd.EventManager.on(wd.EngineEvent.AFTER_INIT_RIGIDBODY_ADD_CONSTRAINT, function () {
                self.addConstraint();
            });
        };
        RigidBody.prototype.addConstraint = function () {
            var _this = this;
            var engineAdapter = this.getPhysicsEngineAdapter();
            if (this.lockConstraint && this.lockConstraint.connectedBody) {
                engineAdapter.addLockConstraint(this.gameObject, this.lockConstraint);
            }
            if (this.distanceConstraint && this.distanceConstraint.connectedBody) {
                engineAdapter.addDistanceConstraint(this.gameObject, this.distanceConstraint);
            }
            if (this.hingeConstraint && this.hingeConstraint.connectedBody) {
                engineAdapter.addHingeConstraint(this.gameObject, this.hingeConstraint);
            }
            if (this.pointToPointConstraintList && this.pointToPointConstraintList.getCount() > 0) {
                this.pointToPointConstraintList.forEach(function (constraint) {
                    engineAdapter.addPointToPointConstraint(_this.gameObject, constraint);
                }, this);
            }
        };
        RigidBody.prototype.removeFromGameObject = function (gameObject) {
            var engineAdapter = this.getPhysicsEngineAdapter();
            if (engineAdapter) {
                this.getPhysicsEngineAdapter().removeGameObject(gameObject);
                this.getPhysicsEngineAdapter().removeConstraints(gameObject);
            }
            _super.prototype.removeFromGameObject.call(this, gameObject);
        };
        RigidBody.prototype.dispose = function () {
            this._children.forEach(function (child) {
                child.removeTag("isRigidbodyChild");
            }, this);
        };
        RigidBody.prototype.getPhysicsEngineAdapter = function () {
            return wd.Director.getInstance().scene.physicsEngineAdapter;
        };
        RigidBody.prototype.isPhysicsEngineAdapterExist = function () {
            return !!wd.Director.getInstance().scene && !!wd.Director.getInstance().scene.physicsEngineAdapter;
        };
        RigidBody.prototype.addBodyToPhysicsEngine = function (method, data) {
            if (data === void 0) { data = {}; }
            var engineAdapter = this.getPhysicsEngineAdapter(), position = this.gameObject.transform.position, rotation = this.gameObject.transform.rotation;
            engineAdapter[method](this.gameObject, wdCb.ExtendUtils.extend({
                position: position,
                rotation: rotation,
                children: this._children,
                lockConstraint: this.lockConstraint,
                onContact: wdCb.FunctionUtils.bind(this, this._onContact),
                onCollisionStart: wdCb.FunctionUtils.bind(this, this._onCollisionStart),
                onCollisionEnd: wdCb.FunctionUtils.bind(this, this._onCollisionEnd),
                friction: this.friction,
                restitution: this.restitution
            }, data));
        };
        RigidBody.prototype._onContact = function (collideObject) {
            this.gameObject.execScript("onContact", wdCb.Collection.create([collideObject]));
        };
        RigidBody.prototype._onCollisionStart = function (collideObject) {
            this.gameObject.execScript("onCollisionStart", wdCb.Collection.create([collideObject]));
        };
        RigidBody.prototype._onCollisionEnd = function () {
            this.gameObject.execScript("onCollisionEnd");
        };
        RigidBody.prototype._isContainer = function (gameObject) {
            var rigidBody = gameObject.getComponent(RigidBody);
            return rigidBody.children.getCount() > 0;
        };
        __decorate([
            wd.operateBodyDataGetterAndSetter("Friction")
        ], RigidBody.prototype, "friction", null);
        __decorate([
            wd.operateBodyDataGetterAndSetter("Restitution")
        ], RigidBody.prototype, "restitution", null);
        __decorate([
            wd.require(function () {
                if (this._isContainer(this.gameObject)) {
                    wd.assert(!this.gameObject.getComponent(wd.Collider), wd.Log.info.FUNC_SHOULD_NOT("container", "add collider component in the case of compound"));
                }
                else {
                    wd.assert(!!this.gameObject.getComponent(wd.Collider), wd.Log.info.FUNC_MUST_DEFINE("collider component when add rigid body component"));
                    wd.assert(!!this.gameObject.getComponent(wd.Collider).shape, wd.Log.info.FUNC_SHOULD("create collider.shape before adding rigid body component"));
                }
            })
        ], RigidBody.prototype, "addBodyToPhysicsEngine", null);
        return RigidBody;
    })(wd.Component);
    wd.RigidBody = RigidBody;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var wd;
(function (wd) {
    var DynamicRigidBody = (function (_super) {
        __extends(DynamicRigidBody, _super);
        function DynamicRigidBody() {
            _super.apply(this, arguments);
            this._linearDamping = 0;
            this._angularDamping = 0;
            this._velocity = wd.Vector3.create(0, 0, 0);
            this._angularVelocity = wd.Vector3.create(0, 0, 0);
            this._mass = 1;
            this.impulse = null;
            this.force = null;
            this.hitPoint = null;
        }
        DynamicRigidBody.create = function () {
            var obj = new this();
            return obj;
        };
        Object.defineProperty(DynamicRigidBody.prototype, "linearDamping", {
            get: function () {
                return this._linearDamping;
            },
            set: function (linearDamping) {
                this._linearDamping = linearDamping;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DynamicRigidBody.prototype, "angularDamping", {
            get: function () {
                return this._angularDamping;
            },
            set: function (angularDamping) {
                this._angularDamping = angularDamping;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DynamicRigidBody.prototype, "velocity", {
            get: function () {
                return this._velocity;
            },
            set: function (velocity) {
                this._velocity = velocity;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DynamicRigidBody.prototype, "angularVelocity", {
            get: function () {
                return this._angularVelocity;
            },
            set: function (angularVelocity) {
                this._angularVelocity = angularVelocity;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DynamicRigidBody.prototype, "mass", {
            get: function () {
                return this._mass;
            },
            set: function (mass) {
                this._mass = mass;
            },
            enumerable: true,
            configurable: true
        });
        DynamicRigidBody.prototype.addBody = function () {
            this.addBodyToPhysicsEngine("addDynamicBody", {
                mass: this.mass,
                linearDamping: this.linearDamping,
                angularDamping: this.angularDamping,
                velocity: this.velocity,
                angularVelocity: this.angularVelocity,
                impulse: this.impulse,
                force: this.force,
                hitPoint: this.hitPoint
            });
        };
        __decorate([
            wd.operateBodyDataGetterAndSetter("LinearDamping")
        ], DynamicRigidBody.prototype, "linearDamping", null);
        __decorate([
            wd.operateBodyDataGetterAndSetter("AngularDamping")
        ], DynamicRigidBody.prototype, "angularDamping", null);
        __decorate([
            wd.operateBodyDataGetterAndSetter("Velocity")
        ], DynamicRigidBody.prototype, "velocity", null);
        __decorate([
            wd.operateBodyDataGetterAndSetter("AngularVelocity")
        ], DynamicRigidBody.prototype, "angularVelocity", null);
        __decorate([
            wd.operateBodyDataGetterAndSetter("Mass")
        ], DynamicRigidBody.prototype, "mass", null);
        return DynamicRigidBody;
    })(wd.RigidBody);
    wd.DynamicRigidBody = DynamicRigidBody;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var PhysicsConstraint = (function () {
        function PhysicsConstraint(rigidBody) {
            this.maxForce = null;
            this.rigidBody = null;
            this.rigidBody = rigidBody;
        }
        return PhysicsConstraint;
    })();
    wd.PhysicsConstraint = PhysicsConstraint;
    var LockConstraint = (function (_super) {
        __extends(LockConstraint, _super);
        function LockConstraint() {
            _super.apply(this, arguments);
            this._connectedBody = null;
        }
        LockConstraint.create = function (rigidBody) {
            var obj = new this(rigidBody);
            return obj;
        };
        Object.defineProperty(LockConstraint.prototype, "connectedBody", {
            get: function () {
                return this._connectedBody;
            },
            set: function (connectedBody) {
                var engineAdapter = null;
                this._connectedBody = connectedBody;
                if (!this.rigidBody.isPhysicsEngineAdapterExist()) {
                    return;
                }
                engineAdapter = this.rigidBody.getPhysicsEngineAdapter();
                engineAdapter.removeLockConstraint(this.rigidBody.gameObject);
                this.rigidBody.addConstraint();
            },
            enumerable: true,
            configurable: true
        });
        return LockConstraint;
    })(PhysicsConstraint);
    wd.LockConstraint = LockConstraint;
    var DistanceConstraint = (function (_super) {
        __extends(DistanceConstraint, _super);
        function DistanceConstraint() {
            _super.apply(this, arguments);
            this._connectedBody = null;
            this.distance = null;
        }
        DistanceConstraint.create = function (rigidBody) {
            var obj = new this(rigidBody);
            return obj;
        };
        Object.defineProperty(DistanceConstraint.prototype, "connectedBody", {
            get: function () {
                return this._connectedBody;
            },
            set: function (connectedBody) {
                var engineAdapter = null;
                this._connectedBody = connectedBody;
                if (!this.rigidBody.isPhysicsEngineAdapterExist()) {
                    return;
                }
                engineAdapter = this.rigidBody.getPhysicsEngineAdapter();
                engineAdapter.removeDistanceConstraint(this.rigidBody.gameObject);
                this.rigidBody.addConstraint();
            },
            enumerable: true,
            configurable: true
        });
        return DistanceConstraint;
    })(PhysicsConstraint);
    wd.DistanceConstraint = DistanceConstraint;
    var HingeConstraint = (function (_super) {
        __extends(HingeConstraint, _super);
        function HingeConstraint() {
            _super.apply(this, arguments);
            this._connectedBody = null;
            this.pivotA = null;
            this.pivotB = null;
            this.axisA = null;
            this.axisB = null;
        }
        HingeConstraint.create = function (rigidBody) {
            var obj = new this(rigidBody);
            return obj;
        };
        Object.defineProperty(HingeConstraint.prototype, "connectedBody", {
            get: function () {
                return this._connectedBody;
            },
            set: function (connectedBody) {
                var engineAdapter = null;
                this._connectedBody = connectedBody;
                if (!this.rigidBody.isPhysicsEngineAdapterExist()) {
                    return;
                }
                engineAdapter = this.rigidBody.getPhysicsEngineAdapter();
                engineAdapter.removeHingeConstraint(this.rigidBody.gameObject);
                this.rigidBody.addConstraint();
            },
            enumerable: true,
            configurable: true
        });
        return HingeConstraint;
    })(PhysicsConstraint);
    wd.HingeConstraint = HingeConstraint;
    var PointToPointConstraint = (function (_super) {
        __extends(PointToPointConstraint, _super);
        function PointToPointConstraint() {
            _super.apply(this, arguments);
            this.connectedBody = null;
            this.pivotA = null;
            this.pivotB = null;
        }
        PointToPointConstraint.create = function (rigidBody) {
            var obj = new this(rigidBody);
            return obj;
        };
        return PointToPointConstraint;
    })(PhysicsConstraint);
    wd.PointToPointConstraint = PointToPointConstraint;
    var PointToPointConstraintList = (function () {
        function PointToPointConstraintList(rigidBody) {
            this._rigidBody = null;
            this._list = wdCb.Collection.create();
            this._rigidBody = rigidBody;
        }
        PointToPointConstraintList.create = function (rigidBody) {
            var obj = new this(rigidBody);
            return obj;
        };
        PointToPointConstraintList.prototype.forEach = function (func, context) {
            if (context === void 0) { context = wd.root; }
            this._list.forEach(func, context);
        };
        PointToPointConstraintList.prototype.getCount = function () {
            return this._list.getCount();
        };
        PointToPointConstraintList.prototype.addChild = function (constraint) {
            var engineAdapter = null;
            this._list.addChild(constraint);
            if (!this._rigidBody.isPhysicsEngineAdapterExist()) {
                return;
            }
            engineAdapter = this._rigidBody.getPhysicsEngineAdapter();
            engineAdapter.addPointToPointConstraint(this._rigidBody.gameObject, constraint);
        };
        PointToPointConstraintList.prototype.addChildren = function (arg) {
            var _this = this;
            if (wd.JudgeUtils.isArray(arg)) {
                for (var _i = 0, _a = arg; _i < _a.length; _i++) {
                    var constraint = _a[_i];
                    this.addChild(constraint);
                }
            }
            else {
                var constraintList = arg;
                constraintList.forEach(function (constraint) {
                    _this.addChild(constraint);
                }, this);
            }
        };
        PointToPointConstraintList.prototype.removeChild = function (constraint) {
            var engineAdapter = null;
            this._list.removeChild(constraint);
            if (!this._rigidBody.isPhysicsEngineAdapterExist()) {
                return;
            }
            engineAdapter = this._rigidBody.getPhysicsEngineAdapter();
            engineAdapter.removePointToPointConstraint(constraint);
        };
        return PointToPointConstraintList;
    })();
    wd.PointToPointConstraintList = PointToPointConstraintList;
})(wd || (wd = {}));

var wd;
(function (wd) {
    var PhysicsEngineFactory = (function () {
        function PhysicsEngineFactory() {
        }
        PhysicsEngineFactory.create = function (type) {
            var result = null;
            switch (type) {
                case wd.PhysicsEngineType.CANNON:
                    result = wd.CannonAdapter.create();
                    break;
                default:
                    wdCb.Log.error(true, wdCb.Log.info.FUNC_UNEXPECT("physics engine type"));
                    break;
            }
            return result;
        };
        return PhysicsEngineFactory;
    })();
    wd.PhysicsEngineFactory = PhysicsEngineFactory;
})(wd || (wd = {}));



var wd;
(function (wd) {
    (function (PhysicsEngineType) {
        PhysicsEngineType[PhysicsEngineType["CANNON"] = 0] = "CANNON";
    })(wd.PhysicsEngineType || (wd.PhysicsEngineType = {}));
    var PhysicsEngineType = wd.PhysicsEngineType;
})(wd || (wd = {}));

var wd;
(function (wd) {
    var CannonDataList = (function () {
        function CannonDataList() {
            this.dataList = wdCb.Collection.create();
        }
        CannonDataList.prototype.getCount = function () {
            return this.dataList.getCount();
        };
        CannonDataList.prototype.removeByGameObject = function (obj) {
            this.dataList.removeChild(function (_a) {
                var gameObject = _a.gameObject, body = _a.body;
                return wd.JudgeUtils.isEqual(gameObject, obj);
            });
        };
        return CannonDataList;
    })();
    wd.CannonDataList = CannonDataList;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var CannonGameObjectDataList = (function (_super) {
        __extends(CannonGameObjectDataList, _super);
        function CannonGameObjectDataList() {
            _super.apply(this, arguments);
        }
        CannonGameObjectDataList.create = function () {
            var obj = new this();
            return obj;
        };
        CannonGameObjectDataList.prototype.remove = function (obj) {
            this.removeByGameObject(obj);
        };
        CannonGameObjectDataList.prototype.updateBodyTransformData = function () {
            this.dataList.forEach(function (_a) {
                var gameObject = _a.gameObject, body = _a.body;
                var transform = gameObject.transform;
                if (transform.isTranslate || transform.isRotate) {
                    body.position = wd.CannonUtils.convertToCannonVector3(gameObject.transform.position);
                    body.quaternion = wd.CannonUtils.convertToCannonQuaternion(gameObject.transform.rotation);
                }
            });
        };
        CannonGameObjectDataList.prototype.updateGameObjectTransformData = function () {
            this.dataList.forEach(function (_a) {
                var gameObject = _a.gameObject, body = _a.body;
                if (gameObject.hasTag("isRigidbodyChild")) {
                    return;
                }
                gameObject.transform.position = wd.CannonUtils.convertToWonderVector3(body.position);
                gameObject.transform.rotation = wd.CannonUtils.convertToWonderQuaternion(body.quaternion);
            });
        };
        CannonGameObjectDataList.prototype.add = function (obj, body) {
            this.dataList.addChild({
                gameObject: obj,
                body: body
            });
        };
        CannonGameObjectDataList.prototype.findGameObjectByBody = function (b) {
            var result = this.dataList.findOne(function (_a) {
                var gameObject = _a.gameObject, body = _a.body;
                return body === b;
            });
            return result !== null ? result.gameObject : null;
        };
        CannonGameObjectDataList.prototype.findBodyByGameObject = function (obj) {
            var result = this.dataList.findOne(function (_a) {
                var gameObject = _a.gameObject, body = _a.body;
                return wd.JudgeUtils.isEqual(gameObject, obj);
            });
            return result !== null ? result.body : null;
        };
        return CannonGameObjectDataList;
    })(wd.CannonDataList);
    wd.CannonGameObjectDataList = CannonGameObjectDataList;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var CannonMaterialList = (function (_super) {
        __extends(CannonMaterialList, _super);
        function CannonMaterialList() {
            _super.apply(this, arguments);
        }
        CannonMaterialList.create = function () {
            var obj = new this();
            return obj;
        };
        CannonMaterialList.prototype.remove = function (obj) {
            this.removeByGameObject(obj);
        };
        CannonMaterialList.prototype.findMaterialByGameObject = function (obj) {
            var result = this.dataList.findOne(function (_a) {
                var gameObject = _a.gameObject, material = _a.material;
                return wd.JudgeUtils.isEqual(gameObject, obj);
            });
            return result !== null ? result.material : null;
        };
        CannonMaterialList.prototype.add = function (obj, material) {
            this.dataList.addChild({
                gameObject: obj,
                material: material
            });
        };
        CannonMaterialList.prototype.addContactMaterial = function (world, currentMaterial, friction, restitution) {
            this.dataList.forEach(function (_a) {
                var gameObject = _a.gameObject, material = _a.material;
                world.addContactMaterial(new CANNON.ContactMaterial(material, currentMaterial, {
                    friction: friction,
                    restitution: restitution
                }));
            });
        };
        CannonMaterialList.prototype.getContactMaterialData = function (world, currentMaterial, dataName) {
            var result = null;
            this.dataList.forEach(function (_a) {
                var gameObject = _a.gameObject, material = _a.material;
                var contactMaterial = world.getContactMaterial(material, currentMaterial);
                if (!contactMaterial) {
                    return;
                }
                result = contactMaterial[dataName];
                return wdCb.$BREAK;
            });
            return result;
        };
        CannonMaterialList.prototype.getContactMaterials = function (world, currentMaterial) {
            var resultArr = [];
            this.dataList.forEach(function (_a) {
                var gameObject = _a.gameObject, material = _a.material;
                var contactMaterial = world.getContactMaterial(material, currentMaterial);
                if (!contactMaterial) {
                    return;
                }
                resultArr.push(contactMaterial);
            });
            return resultArr;
        };
        CannonMaterialList.prototype.setContactMaterialData = function (world, currentMaterial, dataName, data) {
            this.dataList.forEach(function (_a) {
                var gameObject = _a.gameObject, material = _a.material;
                var contactMaterial = world.getContactMaterial(material, currentMaterial);
                if (!contactMaterial) {
                    return;
                }
                contactMaterial[dataName] = data;
            });
        };
        return CannonMaterialList;
    })(wd.CannonDataList);
    wd.CannonMaterialList = CannonMaterialList;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var CannonConstraintDataList = (function (_super) {
        __extends(CannonConstraintDataList, _super);
        function CannonConstraintDataList() {
            _super.apply(this, arguments);
        }
        return CannonConstraintDataList;
    })(wd.CannonDataList);
    wd.CannonConstraintDataList = CannonConstraintDataList;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var CannonSingleConstraintDataList = (function (_super) {
        __extends(CannonSingleConstraintDataList, _super);
        function CannonSingleConstraintDataList() {
            _super.apply(this, arguments);
        }
        CannonSingleConstraintDataList.prototype.add = function (obj, constraint) {
            this.dataList.addChild({
                gameObject: obj,
                constraint: constraint
            });
        };
        CannonSingleConstraintDataList.prototype.remove = function (obj) {
            this.removeByGameObject(obj);
        };
        CannonSingleConstraintDataList.prototype.findConstraintByGameObject = function (obj) {
            var result = this.dataList.findOne(function (_a) {
                var gameObject = _a.gameObject;
                return wd.JudgeUtils.isEqual(gameObject, obj);
            });
            return result !== null ? result.constraint : null;
        };
        return CannonSingleConstraintDataList;
    })(wd.CannonConstraintDataList);
    wd.CannonSingleConstraintDataList = CannonSingleConstraintDataList;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var CannonLockConstraintDataList = (function (_super) {
        __extends(CannonLockConstraintDataList, _super);
        function CannonLockConstraintDataList() {
            _super.apply(this, arguments);
        }
        CannonLockConstraintDataList.create = function () {
            var obj = new this();
            return obj;
        };
        return CannonLockConstraintDataList;
    })(wd.CannonSingleConstraintDataList);
    wd.CannonLockConstraintDataList = CannonLockConstraintDataList;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var CannonPointToPointConstraintDataList = (function (_super) {
        __extends(CannonPointToPointConstraintDataList, _super);
        function CannonPointToPointConstraintDataList() {
            _super.apply(this, arguments);
        }
        CannonPointToPointConstraintDataList.create = function () {
            var obj = new this();
            return obj;
        };
        CannonPointToPointConstraintDataList.prototype.filter = function (func) {
            return this.dataList.filter(func);
        };
        CannonPointToPointConstraintDataList.prototype.forEach = function (func) {
            this.dataList.forEach(func);
        };
        CannonPointToPointConstraintDataList.prototype.add = function (gameObject, pointToPointConstraint, constraint) {
            this.dataList.addChild({
                gameObject: gameObject,
                pointToPointConstraint: pointToPointConstraint,
                cannonConstraint: constraint
            });
        };
        CannonPointToPointConstraintDataList.prototype.remove = function (constraint) {
            this.dataList.removeChild(function (_a) {
                var pointToPointConstraint = _a.pointToPointConstraint;
                return wd.JudgeUtils.isEqual(pointToPointConstraint, constraint);
            });
        };
        CannonPointToPointConstraintDataList.prototype.findCannonConstraintByPointToPointConstraint = function (constraint) {
            var result = this.dataList.findOne(function (_a) {
                var pointToPointConstraint = _a.pointToPointConstraint;
                return wd.JudgeUtils.isEqual(pointToPointConstraint, constraint);
            });
            return result !== null ? result.cannonConstraint : null;
        };
        return CannonPointToPointConstraintDataList;
    })(wd.CannonConstraintDataList);
    wd.CannonPointToPointConstraintDataList = CannonPointToPointConstraintDataList;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var CannonDistanceConstraintDataList = (function (_super) {
        __extends(CannonDistanceConstraintDataList, _super);
        function CannonDistanceConstraintDataList() {
            _super.apply(this, arguments);
        }
        CannonDistanceConstraintDataList.create = function () {
            var obj = new this();
            return obj;
        };
        return CannonDistanceConstraintDataList;
    })(wd.CannonSingleConstraintDataList);
    wd.CannonDistanceConstraintDataList = CannonDistanceConstraintDataList;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var CannonHingeConstraintDataList = (function (_super) {
        __extends(CannonHingeConstraintDataList, _super);
        function CannonHingeConstraintDataList() {
            _super.apply(this, arguments);
        }
        CannonHingeConstraintDataList.create = function () {
            var obj = new this();
            return obj;
        };
        return CannonHingeConstraintDataList;
    })(wd.CannonSingleConstraintDataList);
    wd.CannonHingeConstraintDataList = CannonHingeConstraintDataList;
})(wd || (wd = {}));

var wd;
(function (wd) {
    var CannonUtils = (function () {
        function CannonUtils() {
        }
        CannonUtils.convertToCannonVector3 = function (v) {
            return new CANNON.Vec3(v.x, v.y, v.z);
        };
        CannonUtils.convertToCannonQuaternion = function (rotation) {
            return new CANNON.Quaternion(rotation.x, rotation.y, rotation.z, rotation.w);
        };
        CannonUtils.convertToWonderVector3 = function (v) {
            return wd.Vector3.create(v.x, v.y, v.z);
        };
        CannonUtils.convertToWonderQuaternion = function (r) {
            return wd.Quaternion.create(r.x, r.y, r.z, r.w);
        };
        return CannonUtils;
    })();
    wd.CannonUtils = CannonUtils;
})(wd || (wd = {}));

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var wd;
(function (wd) {
    var CannonAdapter = (function () {
        function CannonAdapter() {
            this.world = null;
            this._materialList = wd.CannonMaterialList.create();
            this._gameObjectDataList = wd.CannonGameObjectDataList.create();
            this._lockConstraintDataList = wd.CannonLockConstraintDataList.create();
            this._distanceConstraintDataList = wd.CannonDistanceConstraintDataList.create();
            this._hingeConstraintDataList = wd.CannonHingeConstraintDataList.create();
            this._pointToPointConstraintDataList = wd.CannonPointToPointConstraintDataList.create();
            this._dynamicBody = null;
            this._kinematicBody = null;
            this._staticBody = null;
            this._lockConstraint = null;
            this._distanceConstraint = null;
            this._hingeConstraint = null;
            this._pointToPointConstraint = null;
        }
        CannonAdapter.create = function () {
            var obj = new this();
            return obj;
        };
        CannonAdapter.prototype.getGravity = function (gravity) {
            return wd.CannonUtils.convertToWonderVector3(this.world.gravity);
        };
        CannonAdapter.prototype.setGravity = function (gravity) {
            this.world.gravity = wd.CannonUtils.convertToCannonVector3(gravity);
        };
        CannonAdapter.prototype.getFriction = function (obj, friction) {
            return this._getMaterialData(obj, "friction");
        };
        CannonAdapter.prototype.setFriction = function (obj, friction) {
            this._setMaterialData(obj, "friction", friction);
        };
        CannonAdapter.prototype.getRestitution = function (obj, restitution) {
            return this._getMaterialData(obj, "restitution");
        };
        CannonAdapter.prototype.setRestitution = function (obj, restitution) {
            this._setMaterialData(obj, "restitution", restitution);
        };
        CannonAdapter.prototype.getLinearDamping = function (obj) {
            return this._getNumberData(obj, "linearDamping");
        };
        CannonAdapter.prototype.setLinearDamping = function (obj, linearDamping) {
            return this._setNumberData(obj, "linearDamping", linearDamping);
        };
        CannonAdapter.prototype.getAngularDamping = function (obj) {
            return this._getNumberData(obj, "angularDamping");
        };
        CannonAdapter.prototype.setAngularDamping = function (obj, angularDamping) {
            return this._setNumberData(obj, "angularDamping", angularDamping);
        };
        CannonAdapter.prototype.getMass = function (obj) {
            return this._getNumberData(obj, "mass");
        };
        CannonAdapter.prototype.setMass = function (obj, mass) {
            return this._setNumberData(obj, "mass", mass);
        };
        CannonAdapter.prototype.getVelocity = function (obj) {
            return this._getVec3Data(obj, "velocity");
        };
        CannonAdapter.prototype.setVelocity = function (obj, velocity) {
            this._setVec3Data(obj, "velocity", velocity);
        };
        CannonAdapter.prototype.getAngularVelocity = function (obj) {
            return this._getVec3Data(obj, "angularVelocity");
        };
        CannonAdapter.prototype.setAngularVelocity = function (obj, angularVelocity) {
            this._setVec3Data(obj, "angularVelocity", angularVelocity);
        };
        CannonAdapter.prototype.init = function () {
            var _a = wd.Director.getInstance().scene.physics, gravity = _a.gravity, iterations = _a.iterations;
            this.world = new CANNON.World();
            this.world.broadphase = new CANNON.NaiveBroadphase();
            this.world.solver.iterations = iterations;
            this.world.gravity.set(gravity.x, gravity.y, gravity.z);
            this._dynamicBody = wd.CannonDynamicBody.create(this.world, this._gameObjectDataList, this._materialList);
            this._kinematicBody = wd.CannonKinematicBody.create(this.world, this._gameObjectDataList, this._materialList);
            this._staticBody = wd.CannonStaticBody.create(this.world, this._gameObjectDataList, this._materialList);
            this._lockConstraint = wd.CannonLockConstraint.create(this.world, this._gameObjectDataList, this._lockConstraintDataList);
            this._distanceConstraint = wd.CannonDistanceConstraint.create(this.world, this._gameObjectDataList, this._distanceConstraintDataList);
            this._hingeConstraint = wd.CannonHingeConstraint.create(this.world, this._gameObjectDataList, this._hingeConstraintDataList);
            this._pointToPointConstraint = wd.CannonPointToPointConstraint.create(this.world, this._gameObjectDataList, this._pointToPointConstraintDataList);
        };
        CannonAdapter.prototype.addDynamicBody = function (gameObject, data) {
            this._dynamicBody.addBody(gameObject, data);
        };
        CannonAdapter.prototype.addKinematicBody = function (gameObject, data) {
            this._kinematicBody.addBody(gameObject, data);
        };
        CannonAdapter.prototype.addStaticBody = function (gameObject, data) {
            this._staticBody.addBody(gameObject, data);
        };
        CannonAdapter.prototype.addLockConstraint = function (gameObject, lockConstraint) {
            this._lockConstraint.addConstraint(gameObject, lockConstraint);
        };
        CannonAdapter.prototype.removeLockConstraint = function (gameObject) {
            this._lockConstraint.removeConstraint(gameObject);
        };
        CannonAdapter.prototype.addDistanceConstraint = function (gameObject, distanceConstraint) {
            this._distanceConstraint.addConstraint(gameObject, distanceConstraint);
        };
        CannonAdapter.prototype.removeDistanceConstraint = function (gameObject) {
            this._distanceConstraint.removeConstraint(gameObject);
        };
        CannonAdapter.prototype.addHingeConstraint = function (gameObject, hingeConstraint) {
            this._hingeConstraint.addConstraint(gameObject, hingeConstraint);
        };
        CannonAdapter.prototype.removeHingeConstraint = function (gameObject) {
            this._hingeConstraint.removeConstraint(gameObject);
        };
        CannonAdapter.prototype.addPointToPointConstraint = function (gameObject, pointToPointConstraint) {
            this._pointToPointConstraint.addConstraint(gameObject, pointToPointConstraint);
        };
        CannonAdapter.prototype.removePointToPointConstraint = function (pointToPointConstraint) {
            this._pointToPointConstraint.removeConstraint(pointToPointConstraint);
        };
        CannonAdapter.prototype.removeGameObject = function (obj) {
            var material = this._getMaterial(obj), body = this._gameObjectDataList.findBodyByGameObject(obj);
            if (body) {
                this.world.remove(body);
            }
            this._gameObjectDataList.remove(obj);
            this._materialList.remove(obj);
        };
        CannonAdapter.prototype.removeConstraints = function (obj) {
            var self = this;
            this._lockConstraint.removeConstraint(obj);
            this._distanceConstraint.removeConstraint(obj);
            this._hingeConstraint.removeConstraint(obj);
            this._pointToPointConstraintDataList
                .filter(function (_a) {
                var gameObject = _a.gameObject;
                return wd.JudgeUtils.isEqual(gameObject, obj);
            })
                .forEach(function (_a) {
                var pointToPointConstraint = _a.pointToPointConstraint;
                self._pointToPointConstraint.removeConstraint(pointToPointConstraint);
            });
        };
        CannonAdapter.prototype.update = function (elapsedTime) {
            this._gameObjectDataList.updateBodyTransformData();
            this.world.step(wd.Director.getInstance().getDeltaTime() / 1000);
            this._gameObjectDataList.updateGameObjectTransformData();
        };
        CannonAdapter.prototype._getMaterial = function (obj) {
            return this._materialList.findMaterialByGameObject(obj);
        };
        CannonAdapter.prototype._getNumberData = function (obj, dataName) {
            var body = this._gameObjectDataList.findBodyByGameObject(obj);
            if (!body) {
                return null;
            }
            return body[dataName];
        };
        CannonAdapter.prototype._setNumberData = function (obj, dataName, data) {
            var body = this._gameObjectDataList.findBodyByGameObject(obj);
            if (!body) {
                return null;
            }
            body[dataName] = data;
        };
        CannonAdapter.prototype._getVec3Data = function (obj, dataName) {
            var body = this._gameObjectDataList.findBodyByGameObject(obj);
            if (!body) {
                return null;
            }
            return wd.CannonUtils.convertToWonderVector3(body[dataName]);
        };
        CannonAdapter.prototype._setVec3Data = function (obj, dataName, data) {
            var body = this._gameObjectDataList.findBodyByGameObject(obj);
            if (!body) {
                return null;
            }
            body[dataName] = wd.CannonUtils.convertToCannonVector3(data);
        };
        CannonAdapter.prototype._getMaterialData = function (obj, dataName) {
            var result = null, currentMaterial = this._getMaterial(obj);
            if (!currentMaterial) {
                return null;
            }
            return this._materialList.getContactMaterialData(this.world, currentMaterial, dataName);
        };
        CannonAdapter.prototype._setMaterialData = function (obj, dataName, data) {
            var world = this.world, currentMaterial = this._getMaterial(obj);
            if (!currentMaterial) {
                wd.Log.warn("no material find, please add material first");
                return;
            }
            this._materialList.setContactMaterialData(this.world, currentMaterial, dataName, data);
        };
        __decorate([
            wd.require(function (obj, dataName) {
                var resultArr = [], firstData = null, currentMaterial = this._getMaterial(obj);
                if (!currentMaterial) {
                    return null;
                }
                resultArr = this._materialList.getContactMaterials(this.world, currentMaterial);
                firstData = resultArr[0];
                for (var _i = 0; _i < resultArr.length; _i++) {
                    var data = resultArr[_i];
                    wd.assert(data === firstData, wd.Log.info.FUNC_SHOULD("the data of contact material which contains the same material", "be the same"));
                }
            })
        ], CannonAdapter.prototype, "_getMaterialData", null);
        return CannonAdapter;
    })();
    wd.CannonAdapter = CannonAdapter;
})(wd || (wd = {}));

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var wd;
(function (wd) {
    var CannonBody = (function () {
        function CannonBody(world, gameObjectDataList, materialList) {
            this.world = null;
            this.materialList = null;
            this.gameObjectList = null;
            this.world = world;
            this.gameObjectList = gameObjectDataList;
            this.materialList = materialList;
        }
        CannonBody.prototype.addBody = function (gameObject, data) {
            var body = this.createBody(data);
            if (data.children.getCount() > 0) {
                this._addCompounds(gameObject, data.children, body);
            }
            else {
                body.addShape(this._createShape(gameObject.getComponent(wd.Collider).shape));
            }
            this.afterAddShape(body, data);
            body.material = this._createMaterial(gameObject, data.friction, data.restitution);
            body.position = wd.CannonUtils.convertToCannonVector3(data.position);
            body.quaternion = wd.CannonUtils.convertToCannonQuaternion(data.rotation);
            this.world.addBody(body);
            this.gameObjectList.add(gameObject, body);
            this._bindCollideEvent(body, data.onCollisionStart, data.onContact, data.onCollisionEnd);
            return body;
        };
        CannonBody.prototype.afterAddShape = function (body, data) {
        };
        CannonBody.prototype._createShape = function (shape) {
            var cannonShape = null;
            if (shape instanceof wd.AABBShape) {
                cannonShape = new CANNON.Box(wd.CannonUtils.convertToCannonVector3(shape.halfExtents));
            }
            else if (shape instanceof wd.SphereShape) {
                cannonShape = new CANNON.Sphere(shape.radius);
            }
            return cannonShape;
        };
        CannonBody.prototype._bindCollideEvent = function (targetBody, onCollisionStart, onContact, onCollisionEnd) {
            var self = this;
            targetBody.addEventListener("collide", function (e) {
                var gameObject = self.gameObjectList.findGameObjectByBody(e.body), collideObject = null;
                if (!gameObject) {
                    return;
                }
                collideObject = gameObject;
                onCollisionStart(collideObject);
                onContact(collideObject);
                onCollisionEnd(collideObject);
            });
        };
        CannonBody.prototype._createMaterial = function (gameObject, friction, restitution) {
            var material = null, currentMaterial = null;
            material = this._getMaterial(gameObject);
            if (material) {
                return material;
            }
            currentMaterial = new CANNON.Material("material");
            this._addMaterial(gameObject, currentMaterial, friction, restitution);
            return currentMaterial;
        };
        CannonBody.prototype._getMaterial = function (obj) {
            return this.materialList.findMaterialByGameObject(obj);
        };
        CannonBody.prototype._addMaterial = function (gameObject, currentMaterial, friction, restitution) {
            this.materialList.add(gameObject, currentMaterial);
            this.materialList.addContactMaterial(this.world, currentMaterial, friction, restitution);
        };
        CannonBody.prototype._addCompounds = function (gameObject, children, body) {
            var _this = this;
            var position = gameObject.transform.position, rotation = gameObject.transform.rotation;
            children.forEach(function (child) {
                body.addShape(_this._createShape(child.getComponent(wd.Collider).shape), wd.CannonUtils.convertToCannonVector3(child.transform.position.copy().sub(position)), wd.CannonUtils.convertToCannonQuaternion(child.transform.rotation.copy().sub(rotation)));
            }, this);
        };
        __decorate([
            wd.virtual
        ], CannonBody.prototype, "afterAddShape", null);
        __decorate([
            wd.require(function (gameObject, children, body) {
                children.forEach(function (child) {
                    wd.assert(!!child.getComponent(wd.Collider), wd.Log.info.FUNC_MUST_DEFINE("collider component"));
                    wd.assert(!!child.getComponent(wd.Collider).shape, wd.Log.info.FUNC_SHOULD("create collider.shape"));
                });
            })
        ], CannonBody.prototype, "_addCompounds", null);
        return CannonBody;
    })();
    wd.CannonBody = CannonBody;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var CannonDynamicBody = (function (_super) {
        __extends(CannonDynamicBody, _super);
        function CannonDynamicBody() {
            _super.apply(this, arguments);
        }
        CannonDynamicBody.create = function (world, gameObjectDataList, materialList) {
            var obj = new this(world, gameObjectDataList, materialList);
            return obj;
        };
        CannonDynamicBody.prototype.createBody = function (_a) {
            var mass = _a.mass, linearDamping = _a.linearDamping, angularDamping = _a.angularDamping, velocity = _a.velocity, angularVelocity = _a.angularVelocity;
            return new CANNON.Body({
                mass: mass,
                linearDamping: linearDamping,
                angularDamping: angularDamping,
                velocity: wd.CannonUtils.convertToCannonVector3(velocity),
                angularVelocity: wd.CannonUtils.convertToCannonVector3(angularVelocity)
            });
        };
        CannonDynamicBody.prototype.afterAddShape = function (body, _a) {
            var impulse = _a.impulse, force = _a.force, hitPoint = _a.hitPoint;
            if (impulse && hitPoint) {
                body.applyImpulse(wd.CannonUtils.convertToCannonVector3(impulse), wd.CannonUtils.convertToCannonVector3(hitPoint));
            }
            if (force && hitPoint) {
                body.applyForce(wd.CannonUtils.convertToCannonVector3(force), wd.CannonUtils.convertToCannonVector3(hitPoint));
            }
        };
        return CannonDynamicBody;
    })(wd.CannonBody);
    wd.CannonDynamicBody = CannonDynamicBody;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var CannonKinematicBody = (function (_super) {
        __extends(CannonKinematicBody, _super);
        function CannonKinematicBody() {
            _super.apply(this, arguments);
        }
        CannonKinematicBody.create = function (world, gameObjectDataList, materialList) {
            var obj = new this(world, gameObjectDataList, materialList);
            return obj;
        };
        CannonKinematicBody.prototype.createBody = function (_a) {
            var mass = _a.mass, velocity = _a.velocity, angularVelocity = _a.angularVelocity;
            return new CANNON.Body({
                type: CANNON.Body.KINEMATIC,
                mass: mass,
                velocity: wd.CannonUtils.convertToCannonVector3(velocity),
                angularVelocity: wd.CannonUtils.convertToCannonVector3(angularVelocity)
            });
        };
        return CannonKinematicBody;
    })(wd.CannonBody);
    wd.CannonKinematicBody = CannonKinematicBody;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var CannonStaticBody = (function (_super) {
        __extends(CannonStaticBody, _super);
        function CannonStaticBody() {
            _super.apply(this, arguments);
        }
        CannonStaticBody.create = function (world, gameObjectDataList, materialList) {
            var obj = new this(world, gameObjectDataList, materialList);
            return obj;
        };
        CannonStaticBody.prototype.createBody = function (_a) {
            return new CANNON.Body({
                mass: 0
            });
        };
        return CannonStaticBody;
    })(wd.CannonBody);
    wd.CannonStaticBody = CannonStaticBody;
})(wd || (wd = {}));

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var wd;
(function (wd) {
    var CannonConstraint = (function () {
        function CannonConstraint(world, gameObjectDataList, constraintDataList) {
            this.world = null;
            this.gameObjectList = null;
            this.constraintDataList = null;
            this.world = world;
            this.gameObjectList = gameObjectDataList;
            this.constraintDataList = constraintDataList;
        }
        CannonConstraint.prototype.addConstraint = function (gameObject, wonderConstraint) {
            var constraint = null, body = this.gameObjectList.findBodyByGameObject(gameObject);
            constraint = this.createCannonConstraint(body, wonderConstraint);
            this.world.addConstraint(constraint);
            this.addToConstraintDataList(gameObject, wonderConstraint, constraint);
        };
        CannonConstraint.prototype.findBody = function (rigidBody) {
            return this.gameObjectList.findBodyByGameObject(rigidBody.gameObject);
        };
        __decorate([
            wd.require(function (gameObject, pointToPointConstraint) {
                wd.assert(this.gameObjectList.findBodyByGameObject(gameObject) !== null, wd.Log.info.FUNC_SHOULD("add rigid body"));
                wd.assert(this.findBody(pointToPointConstraint.connectedBody), wd.Log.info.FUNC_SHOULD("add connectedBody"));
            })
        ], CannonConstraint.prototype, "addConstraint", null);
        return CannonConstraint;
    })();
    wd.CannonConstraint = CannonConstraint;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var CannonSingleConstraint = (function (_super) {
        __extends(CannonSingleConstraint, _super);
        function CannonSingleConstraint() {
            _super.apply(this, arguments);
        }
        CannonSingleConstraint.prototype.removeConstraint = function (gameObject) {
            var constraint = this.constraintDataList.findConstraintByGameObject(gameObject);
            if (constraint) {
                this.world.removeConstraint(constraint);
            }
            this.constraintDataList.remove(gameObject);
        };
        CannonSingleConstraint.prototype.addToConstraintDataList = function (gameObject, wonderConstraint, cannonConstraint) {
            this.constraintDataList.add(gameObject, cannonConstraint);
        };
        return CannonSingleConstraint;
    })(wd.CannonConstraint);
    wd.CannonSingleConstraint = CannonSingleConstraint;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var CannonLockConstraint = (function (_super) {
        __extends(CannonLockConstraint, _super);
        function CannonLockConstraint() {
            _super.apply(this, arguments);
        }
        CannonLockConstraint.create = function (world, gameObjectDataList, constraintDataList) {
            var obj = new this(world, gameObjectDataList, constraintDataList);
            return obj;
        };
        CannonLockConstraint.prototype.createCannonConstraint = function (body, lockConstraint) {
            var constraint = null, connectedBody = this.findBody(lockConstraint.connectedBody);
            if (lockConstraint.maxForce) {
                constraint = new CANNON.LockConstraint(body, connectedBody, lockConstraint.maxForce);
            }
            else {
                constraint = new CANNON.LockConstraint(body, connectedBody);
            }
            return constraint;
        };
        return CannonLockConstraint;
    })(wd.CannonSingleConstraint);
    wd.CannonLockConstraint = CannonLockConstraint;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var CannonPointToPointConstraint = (function (_super) {
        __extends(CannonPointToPointConstraint, _super);
        function CannonPointToPointConstraint() {
            _super.apply(this, arguments);
        }
        CannonPointToPointConstraint.create = function (world, gameObjectDataList, constraintDataList) {
            var obj = new this(world, gameObjectDataList, constraintDataList);
            return obj;
        };
        CannonPointToPointConstraint.prototype.removeConstraint = function (pointToPointConstraint) {
            var constraint = this.constraintDataList.findCannonConstraintByPointToPointConstraint(pointToPointConstraint);
            if (constraint) {
                this.world.removeConstraint(constraint);
            }
            this.constraintDataList.remove(pointToPointConstraint);
        };
        CannonPointToPointConstraint.prototype.createCannonConstraint = function (body, pointToPointConstraint) {
            var constraint = null, connectedBody = this.findBody(pointToPointConstraint.connectedBody), pivotA = wd.CannonUtils.convertToCannonVector3(pointToPointConstraint.pivotA), pivotB = wd.CannonUtils.convertToCannonVector3(pointToPointConstraint.pivotB);
            if (pointToPointConstraint.maxForce) {
                constraint = new CANNON.PointToPointConstraint(body, pivotA, connectedBody, pivotB, pointToPointConstraint.maxForce);
            }
            else {
                constraint = new CANNON.PointToPointConstraint(body, pivotA, connectedBody, pivotB);
            }
            return constraint;
        };
        CannonPointToPointConstraint.prototype.addToConstraintDataList = function (gameObject, wonderConstraint, cannonConstraint) {
            this.constraintDataList.add(gameObject, wonderConstraint, cannonConstraint);
        };
        return CannonPointToPointConstraint;
    })(wd.CannonConstraint);
    wd.CannonPointToPointConstraint = CannonPointToPointConstraint;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var CannonDistanceConstraint = (function (_super) {
        __extends(CannonDistanceConstraint, _super);
        function CannonDistanceConstraint() {
            _super.apply(this, arguments);
        }
        CannonDistanceConstraint.create = function (world, gameObjectDataList, constraintDataList) {
            var obj = new this(world, gameObjectDataList, constraintDataList);
            return obj;
        };
        CannonDistanceConstraint.prototype.createCannonConstraint = function (body, distanceConstraint) {
            var constraint = null, connectedBody = this.findBody(distanceConstraint.connectedBody);
            constraint = new CANNON.DistanceConstraint(body, connectedBody, distanceConstraint.distance !== null ? distanceConstraint.distance : void 0, distanceConstraint.maxForce !== null ? distanceConstraint.maxForce : void 0);
            return constraint;
        };
        return CannonDistanceConstraint;
    })(wd.CannonSingleConstraint);
    wd.CannonDistanceConstraint = CannonDistanceConstraint;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var CannonHingeConstraint = (function (_super) {
        __extends(CannonHingeConstraint, _super);
        function CannonHingeConstraint() {
            _super.apply(this, arguments);
        }
        CannonHingeConstraint.create = function (world, gameObjectDataList, constraintDataList) {
            var obj = new this(world, gameObjectDataList, constraintDataList);
            return obj;
        };
        CannonHingeConstraint.prototype.createCannonConstraint = function (body, hingeConstraint) {
            var constraint = null, connectedBody = this.findBody(hingeConstraint.connectedBody), pivotA = wd.CannonUtils.convertToCannonVector3(hingeConstraint.pivotA), axisA = wd.CannonUtils.convertToCannonVector3(hingeConstraint.axisA), pivotB = wd.CannonUtils.convertToCannonVector3(hingeConstraint.pivotB), axisB = wd.CannonUtils.convertToCannonVector3(hingeConstraint.axisB), options = {};
            if (hingeConstraint.pivotA) {
                options.pivotA = pivotA;
            }
            if (hingeConstraint.axisA) {
                options.axisA = axisA;
            }
            if (hingeConstraint.pivotB) {
                options.pivotB = pivotB;
            }
            if (hingeConstraint.axisB) {
                options.axisB = axisB;
            }
            if (hingeConstraint.maxForce) {
                options.maxForce = hingeConstraint.maxForce;
            }
            constraint = new CANNON.HingeConstraint(body, connectedBody, options);
            return constraint;
        };
        return CannonHingeConstraint;
    })(wd.CannonSingleConstraint);
    wd.CannonHingeConstraint = CannonHingeConstraint;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var Script = (function (_super) {
        __extends(Script, _super);
        function Script(url) {
            if (url === void 0) { url = null; }
            _super.call(this);
            this.url = null;
            this.url = url;
        }
        Script.create = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            if (args.length === 0) {
                return new this();
            }
            if (args.length === 1) {
                var url = args[0];
                return new this(url);
            }
        };
        Script.addScript = function (scriptName, _class) {
            this.script.push({
                name: scriptName,
                class: _class
            });
        };
        Script.prototype.createLoadJsStream = function () {
            wd.Log.error(!this.url, wd.Log.info.FUNC_MUST_DEFINE("url"));
            return wd.LoaderManager.getInstance().load(this.url)
                .map(function () {
                return Script.script.pop();
            });
        };
        Script.prototype.addToGameObject = function (gameObject) {
            var self = this;
            _super.prototype.addToGameObject.call(this, gameObject);
            wd.Director.getInstance().scriptStreams.addChild(this.uid.toString(), this.createLoadJsStream()
                .do(function (data) {
                self._addScriptToGameObject(gameObject, data);
            }));
        };
        Script.prototype.removeFromGameObject = function (gameObject) {
            _super.prototype.removeFromGameObject.call(this, gameObject);
            wd.Director.getInstance().scriptStreams.removeChild(this.uid.toString());
        };
        Script.prototype._addScriptToGameObject = function (gameObject, data) {
            gameObject.script.addChild(data.name, new data.class(gameObject));
        };
        Script.script = wdCb.Stack.create();
        return Script;
    })(wd.Component);
    wd.Script = Script;
})(wd || (wd = {}));



var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var Light = (function (_super) {
        __extends(Light, _super);
        function Light() {
            _super.apply(this, arguments);
            this._shadowMapWidth = null;
            this._shadowMapHeight = null;
            this.color = wd.Color.create("#ffffff");
            this.castShadow = false;
            this.shadowCameraNear = 0.1;
            this.shadowCameraFar = 5000;
            this.shadowBias = wd.ShaderChunk.NULL;
            this.shadowDarkness = 0;
            this.shadowMap = null;
            this.shadowMapRenderer = null;
        }
        Object.defineProperty(Light.prototype, "position", {
            get: function () {
                return this.gameObject.transform.position;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Light.prototype, "shadowMapWidth", {
            get: function () {
                var maxCubemapTextureSize = wd.GPUDetector.getInstance().maxCubemapTextureSize;
                if (!this._shadowMapWidth || this._shadowMapWidth > maxCubemapTextureSize) {
                    return maxCubemapTextureSize;
                }
                return this._shadowMapWidth;
            },
            set: function (shadowMapWidth) {
                this._shadowMapWidth = shadowMapWidth;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Light.prototype, "shadowMapHeight", {
            get: function () {
                var maxCubemapTextureSize = wd.GPUDetector.getInstance().maxCubemapTextureSize;
                if (!this._shadowMapHeight || this._shadowMapHeight > maxCubemapTextureSize) {
                    return maxCubemapTextureSize;
                }
                return this._shadowMapHeight;
            },
            set: function (shadowMapHeight) {
                this._shadowMapHeight = shadowMapHeight;
            },
            enumerable: true,
            configurable: true
        });
        return Light;
    })(wd.Component);
    wd.Light = Light;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var AmbientLight = (function (_super) {
        __extends(AmbientLight, _super);
        function AmbientLight() {
            _super.apply(this, arguments);
        }
        AmbientLight.create = function () {
            var obj = new this();
            return obj;
        };
        AmbientLight.type = "ambientLight";
        return AmbientLight;
    })(wd.Light);
    wd.AmbientLight = AmbientLight;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var wd;
(function (wd) {
    var DirectionLight = (function (_super) {
        __extends(DirectionLight, _super);
        function DirectionLight() {
            _super.apply(this, arguments);
            this._shadowRenderList = null;
            this.intensity = 1;
            this.shadowCameraLeft = -1000;
            this.shadowCameraRight = 1000;
            this.shadowCameraTop = 1000;
            this.shadowCameraBottom = -1000;
            this._beforeInitHandler = null;
        }
        DirectionLight.create = function () {
            var obj = new this();
            obj.initWhenCreate();
            return obj;
        };
        Object.defineProperty(DirectionLight.prototype, "shadowRenderList", {
            get: function () {
                return this._shadowRenderList;
            },
            set: function (shadowRenderList) {
                this._shadowRenderList = wdCb.Collection.create(shadowRenderList);
            },
            enumerable: true,
            configurable: true
        });
        DirectionLight.prototype.initWhenCreate = function () {
            var _this = this;
            this._beforeInitHandler = wdCb.FunctionUtils.bind(this, function () {
                if (_this.castShadow) {
                    _this.shadowMap = wd.TwoDShadowMapTexture.create();
                    _this.shadowMapRenderer = wd.TwoDShadowMapRenderTargetRenderer.create(_this);
                    wd.Director.getInstance().scene.addRenderTargetRenderer(_this.shadowMapRenderer);
                }
            });
            wd.EventManager.on(wd.EngineEvent.BEFORE_INIT, this._beforeInitHandler);
        };
        DirectionLight.prototype.dispose = function () {
            if (this.castShadow) {
                this.shadowMap.dispose();
                wd.Director.getInstance().scene.removeRenderTargetRenderer(this.shadowMapRenderer);
            }
            wd.EventManager.off(wd.EngineEvent.BEFORE_INIT, this._beforeInitHandler);
        };
        DirectionLight.type = "directionLight";
        DirectionLight.defaultPosition = wd.Vector3.create(0, 0, 1);
        return DirectionLight;
    })(wd.Light);
    wd.DirectionLight = DirectionLight;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var wd;
(function (wd) {
    var PointLight = (function (_super) {
        __extends(PointLight, _super);
        function PointLight() {
            _super.apply(this, arguments);
            this._rangeLevel = null;
            this._shadowRenderList = wdCb.Hash.create();
            this.intensity = 1;
            this._attenuation = wd.Attenuation.create();
            this._beforeInitHandler = null;
        }
        PointLight.create = function () {
            var obj = new this();
            obj.initWhenCreate();
            return obj;
        };
        Object.defineProperty(PointLight.prototype, "rangeLevel", {
            get: function () {
                return this._rangeLevel;
            },
            set: function (rangeLevel) {
                this._rangeLevel = rangeLevel;
                this._attenuation.rangeLevel = this._rangeLevel;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PointLight.prototype, "range", {
            get: function () {
                return this._attenuation.range;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PointLight.prototype, "constant", {
            get: function () {
                return this._attenuation.constant;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PointLight.prototype, "linear", {
            get: function () {
                return this._attenuation.linear;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PointLight.prototype, "quadratic", {
            get: function () {
                return this._attenuation.quadratic;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PointLight.prototype, "shadowRenderList", {
            get: function () {
                return this._shadowRenderList;
            },
            set: function (shadowRenderList) {
                shadowRenderList = shadowRenderList;
                for (var direction in shadowRenderList) {
                    if (shadowRenderList.hasOwnProperty(direction)) {
                        var list = shadowRenderList[direction];
                        this._shadowRenderList.addChild(direction, wdCb.Collection.create(list));
                    }
                }
            },
            enumerable: true,
            configurable: true
        });
        PointLight.prototype.initWhenCreate = function () {
            var _this = this;
            this._beforeInitHandler = wdCb.FunctionUtils.bind(this, function () {
                if (_this.castShadow) {
                    _this.shadowMap = wd.CubemapShadowMapTexture.create();
                    _this.shadowMapRenderer = wd.CubemapShadowMapRenderTargetRenderer.create(_this);
                    wd.Director.getInstance().scene.addRenderTargetRenderer(_this.shadowMapRenderer);
                }
            });
            wd.EventManager.on(wd.EngineEvent.BEFORE_INIT, this._beforeInitHandler);
        };
        PointLight.prototype.dispose = function () {
            if (this.castShadow) {
                this.shadowMap.dispose();
                wd.Director.getInstance().scene.removeRenderTargetRenderer(this.shadowMapRenderer);
            }
        };
        PointLight.type = "pointLight";
        return PointLight;
    })(wd.Light);
    wd.PointLight = PointLight;
})(wd || (wd = {}));

var wd;
(function (wd) {
    var Attenuation = (function () {
        function Attenuation() {
            this._range = null;
            this._linear = null;
            this._quadratic = null;
            this._rangeLevel = 0;
        }
        Attenuation.create = function () {
            var obj = new this();
            return obj;
        };
        Object.defineProperty(Attenuation.prototype, "constant", {
            get: function () {
                return 1.0;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Attenuation.prototype, "range", {
            get: function () {
                return this._range;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Attenuation.prototype, "linear", {
            get: function () {
                return this._linear;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Attenuation.prototype, "quadratic", {
            get: function () {
                return this._quadratic;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Attenuation.prototype, "rangeLevel", {
            get: function () {
                return this._rangeLevel;
            },
            set: function (rangeLevel) {
                this._rangeLevel = rangeLevel;
                this.setByRangeLevel();
            },
            enumerable: true,
            configurable: true
        });
        Attenuation.prototype.setByRangeLevel = function () {
            switch (this._rangeLevel) {
                case 0:
                    this._range = 7;
                    this._linear = 0.7;
                    this._quadratic = 1.8;
                    break;
                case 1:
                    this._range = 13;
                    this._linear = 0.35;
                    this._quadratic = 0.44;
                    break;
                case 2:
                    this._range = 20;
                    this._linear = 0.22;
                    this._quadratic = 0.20;
                    break;
                case 3:
                    this._range = 32;
                    this._linear = 0.14;
                    this._quadratic = 0.07;
                    break;
                case 4:
                    this._range = 50;
                    this._linear = 0.09;
                    this._quadratic = 0.032;
                    break;
                case 5:
                    this._range = 65;
                    this._linear = 0.07;
                    this._quadratic = 0.017;
                    break;
                case 6:
                    this._range = 100;
                    this._linear = 0.045;
                    this._quadratic = 0.0075;
                    break;
                case 7:
                    this._range = 160;
                    this._linear = 0.027;
                    this._quadratic = 0.0028;
                    break;
                case 8:
                    this._range = 200;
                    this._linear = 0.022;
                    this._quadratic = 0.0019;
                    break;
                case 9:
                    this._range = 325;
                    this._linear = 0.014;
                    this._quadratic = 0.0007;
                    break;
                case 10:
                    this._range = 600;
                    this._linear = 0.007;
                    this._quadratic = 0.0002;
                    break;
                case 11:
                    this._range = 3250;
                    this._linear = 0.0014;
                    this._quadratic = 0.000007;
                    break;
                default:
                    wd.Log.error(true, "over light range");
                    break;
            }
        };
        return Attenuation;
    })();
    wd.Attenuation = Attenuation;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var wd;
(function (wd) {
    var UI = (function (_super) {
        __extends(UI, _super);
        function UI() {
            _super.apply(this, arguments);
            this.p_dirty = true;
        }
        Object.defineProperty(UI.prototype, "dirty", {
            get: function () {
                return this.p_dirty;
            },
            set: function (dirty) {
                this.p_dirty = dirty;
            },
            enumerable: true,
            configurable: true
        });
        UI.prototype.addToGameObject = function (gameObject) {
            _super.prototype.addToGameObject.call(this, gameObject);
            gameObject.uiManager.addChild(this);
        };
        UI.prototype.removeFromGameObject = function (gameObject) {
            _super.prototype.removeFromGameObject.call(this, gameObject);
            gameObject.uiManager.removeChild(this);
        };
        __decorate([
            wd.virtual
        ], UI.prototype, "dirty", null);
        return UI;
    })(wd.Component);
    wd.UI = UI;
})(wd || (wd = {}));

var wd;
(function (wd) {
    (function (FontXAlignment) {
        FontXAlignment[FontXAlignment["LEFT"] = 0] = "LEFT";
        FontXAlignment[FontXAlignment["CENTER"] = 1] = "CENTER";
        FontXAlignment[FontXAlignment["RIGHT"] = 2] = "RIGHT";
    })(wd.FontXAlignment || (wd.FontXAlignment = {}));
    var FontXAlignment = wd.FontXAlignment;
})(wd || (wd = {}));

var wd;
(function (wd) {
    (function (FontYAlignment) {
        FontYAlignment[FontYAlignment["TOP"] = 0] = "TOP";
        FontYAlignment[FontYAlignment["MIDDLE"] = 1] = "MIDDLE";
        FontYAlignment[FontYAlignment["BOTTOM"] = 2] = "BOTTOM";
    })(wd.FontYAlignment || (wd.FontYAlignment = {}));
    var FontYAlignment = wd.FontYAlignment;
})(wd || (wd = {}));

var wd;
(function (wd) {
    (function (FontDimension) {
        FontDimension[FontDimension["AUTO"] = "auto"] = "AUTO";
    })(wd.FontDimension || (wd.FontDimension = {}));
    var FontDimension = wd.FontDimension;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var wd;
(function (wd) {
    var Font = (function (_super) {
        __extends(Font, _super);
        function Font() {
            _super.apply(this, arguments);
            this.context = null;
            this._isFirstUpdate = true;
        }
        Font.prototype.update = function (elapsedTime) {
            if (!this._isFirstUpdate) {
                if (this.p_dirty) {
                    this.updateWhenDirty();
                }
            }
            else {
                this._isFirstUpdate = false;
            }
            this.p_dirty = false;
        };
        Font.prototype.getContext = function () {
            var renderer = this.gameObject.getComponent(wd.UIRenderer);
            return renderer.context;
        };
        Font.prototype.getCanvasPosition = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var gameObject = null;
            if (args.length === 0) {
                gameObject = this.gameObject;
            }
            else {
                gameObject = args[0];
            }
            return wd.CoordinateUtils.convertWebGLPositionToCanvasPosition(gameObject.transform.position);
        };
        __decorate([
            wd.require(function () {
                wd.assert(this.gameObject.hasComponent(wd.UIRenderer), wd.Log.info.FUNC_SHOULD("gameObject", "contain UIRenderer"));
            })
        ], Font.prototype, "getContext", null);
        return Font;
    })(wd.UI);
    wd.Font = Font;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var wd;
(function (wd) {
    var WORD_REX = /([a-zA-Z0-9]+|\S)/, FIRST_ENGLISH_OR_NUM = /^[a-zA-Z0-9]/, LAST_ENGLISH_OR_NUM = /[a-zA-Z0-9]+$/, LAST_INVALID_CHAR = /\s+$/;
    var PlainFont = (function (_super) {
        __extends(PlainFont, _super);
        function PlainFont() {
            _super.apply(this, arguments);
            this._text = "";
            this._fontSize = 10;
            this._fontFamily = "sans-serif";
            this._width = 0;
            this._height = 0;
            this._xAlignment = wd.FontXAlignment.LEFT;
            this._yAlignment = wd.FontYAlignment.TOP;
            this._fillEnabled = true;
            this._fillStyle = "rgba(0, 0, 0, 1)";
            this._strokeEnabled = false;
            this._strokeStyle = null;
            this._strokeSize = null;
            this._fontClientHeightCache = wdCb.Hash.create();
            this._lineHeight = null;
            this._strArr = [];
        }
        PlainFont.create = function () {
            var obj = new this();
            return obj;
        };
        Object.defineProperty(PlainFont.prototype, "text", {
            get: function () {
                return this._text;
            },
            set: function (text) {
                if (text !== this._text) {
                    this._text = text;
                    this.p_dirty = true;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PlainFont.prototype, "fontSize", {
            get: function () {
                return this._fontSize;
            },
            set: function (fontSize) {
                if (fontSize !== this._fontSize) {
                    this._fontSize = fontSize;
                    this.p_dirty = true;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PlainFont.prototype, "fontFamily", {
            get: function () {
                return this._fontFamily;
            },
            set: function (fontFamily) {
                if (fontFamily !== this._fontFamily) {
                    this._fontFamily = fontFamily;
                    this.p_dirty = true;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PlainFont.prototype, "width", {
            get: function () {
                return this._width;
            },
            set: function (width) {
                if (width !== this._width) {
                    this._width = width;
                    this.p_dirty = true;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PlainFont.prototype, "height", {
            get: function () {
                return this._height;
            },
            set: function (height) {
                if (height !== this._height) {
                    this._height = height;
                    this.p_dirty = true;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PlainFont.prototype, "xAlignment", {
            get: function () {
                return this._xAlignment;
            },
            set: function (xAlignment) {
                if (xAlignment !== this._xAlignment) {
                    this._xAlignment = xAlignment;
                    this.p_dirty = true;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PlainFont.prototype, "yAlignment", {
            get: function () {
                return this._yAlignment;
            },
            set: function (yAlignment) {
                if (yAlignment !== this._yAlignment) {
                    this._yAlignment = yAlignment;
                    this.p_dirty = true;
                }
            },
            enumerable: true,
            configurable: true
        });
        PlainFont.prototype.init = function () {
            this.context = this.getContext();
            this._initDimension();
            this._formatText();
            this._lineHeight = this._getDefaultLineHeight();
        };
        PlainFont.prototype.dispose = function () {
        };
        PlainFont.prototype.update = function (elapsedTime) {
            _super.prototype.update.call(this, elapsedTime);
            this._draw();
        };
        PlainFont.prototype.setFillStyle = function (fillStyle) {
            this._fillStyle = fillStyle;
        };
        PlainFont.prototype.enableStroke = function (strokeStyle, strokeSize) {
            this._strokeEnabled = true;
            this._fillEnabled = false;
            this._strokeStyle = strokeStyle;
            this._strokeSize = strokeSize;
        };
        PlainFont.prototype.enableFill = function (fillStyle) {
            this._fillEnabled = true;
            this._strokeEnabled = false;
            this._fillStyle = fillStyle;
        };
        PlainFont.prototype.setLineHeight = function (lineHeight) {
            this._lineHeight = lineHeight;
        };
        PlainFont.prototype.updateWhenDirty = function () {
            this._initDimension();
            this._formatText();
            this._lineHeight = this._getDefaultLineHeight();
        };
        PlainFont.prototype._formatText = function () {
            var maxWidth = this._width;
            this._trimStr();
            if (maxWidth !== 0) {
                this._strArr = this._text.split('\n');
                for (var i = 0; i < this._strArr.length; i++) {
                    var text = this._strArr[i], allWidth = this._measure(text);
                    if (allWidth > maxWidth && text.length > 1) {
                        this._formatMultiLine(i, text, allWidth, maxWidth);
                    }
                }
            }
        };
        PlainFont.prototype._trimStr = function () {
            this._text = this._text.replace(LAST_INVALID_CHAR, "");
        };
        PlainFont.prototype._formatMultiLine = function (i, text, allWidth, maxWidth) {
            var _this = this;
            var LOOP_MAX_NUM = 100;
            var self = this, preText = null, truncationPointIndex = text.length * (maxWidth / allWidth) | 0, nextText = text.substr(truncationPointIndex), loopIndex = 0, width = allWidth - this._measure(nextText), pushNum = 0;
            var truncate = function () {
                while (width > maxWidth && loopIndex < LOOP_MAX_NUM) {
                    truncationPointIndex *= maxWidth / width;
                    truncationPointIndex = Math.floor(truncationPointIndex);
                    nextText = text.substr(truncationPointIndex);
                    width = allWidth - _this._measure(nextText);
                    loopIndex = loopIndex + 1;
                }
                loopIndex = 0;
            };
            var findTruncationPoint = function () {
                while (width < maxWidth && loopIndex < LOOP_MAX_NUM) {
                    if (nextText) {
                        var exec = WORD_REX.exec(nextText);
                        pushNum = exec ? exec[0].length : 1;
                    }
                    truncationPointIndex = truncationPointIndex + pushNum;
                    nextText = text.substr(truncationPointIndex);
                    width = allWidth - _this._measure(nextText);
                    loopIndex = loopIndex + 1;
                }
            };
            var handleTruncationPointIndex = function () {
                if (FIRST_ENGLISH_OR_NUM.test(nextText)) {
                    var preText_1 = text.substr(0, truncationPointIndex), pExec = LAST_ENGLISH_OR_NUM.exec(preText_1);
                    if (pExec) {
                        truncationPointIndex = truncationPointIndex - pExec[0].length;
                    }
                }
                else {
                    truncationPointIndex = truncationPointIndex - pushNum;
                }
                if (truncationPointIndex === 0) {
                    truncationPointIndex = 1;
                }
            };
            var setString = function () {
                nextText = text.substr(truncationPointIndex);
                preText = text.substr(0, truncationPointIndex);
                self._strArr[i] = nextText;
                self._strArr.splice(i, 0, preText);
            };
            truncate();
            findTruncationPoint();
            handleTruncationPointIndex();
            setString();
        };
        PlainFont.prototype._measure = function (text) {
            var context = this.context;
            context.font = this.fontSize + "px '" + this.fontFamily + "'";
            return context.measureText(text).width;
        };
        PlainFont.prototype._getDefaultLineHeight = function () {
            return this._computeLineHeight("normal");
        };
        PlainFont.prototype._computeLineHeight = function (lineHeight) {
            var div = wdCb.DomQuery.create("<div></div>"), dom = div.get(0), resultLineHeight = null;
            dom.style.cssText = "\n             font-family: " + this.fontFamily + ";\n             font-size: " + this.fontSize + "px;\n             position: absolute;\n             left: -100px;\n             top: -100px;\n             line-height: " + lineHeight + ";\n             ";
            div.prependTo("body");
            dom.innerHTML = "abc!";
            resultLineHeight = dom.clientHeight;
            div.remove();
            return resultLineHeight;
        };
        PlainFont.prototype._getFontClientHeight = function () {
            var fontSize = this.fontSize, fontName = this.fontFamily, key = fontSize + "." + fontName, cacheHeight = this._fontClientHeightCache.getChild(key), height = null;
            if (cacheHeight) {
                return cacheHeight;
            }
            height = this._computeLineHeight(1);
            this._fontClientHeightCache.addChild(key, height);
            return height;
        };
        PlainFont.prototype._initDimension = function () {
            var view = wd.DeviceManager.getInstance().view;
            if (this._width === wd.FontDimension.AUTO) {
                this._width = view.width;
            }
            if (this._height === wd.FontDimension.AUTO) {
                this._height = view.height;
            }
        };
        PlainFont.prototype._draw = function () {
            var context = this.context;
            context.save();
            context.font = this.fontSize + "px '" + this.fontFamily + "'";
            context.textBaseline = "top";
            context.textAlign = "start";
            if (this._strArr.length > 1) {
                this._drawMultiLine();
            }
            else {
                this._drawSingleLine();
            }
            context.restore();
        };
        PlainFont.prototype._drawMultiLine = function () {
            var context = this.context, position = this.getCanvasPosition(), x = position.x, y = position.y, lineHeight = this._lineHeight, fontClientHeight = this._getFontClientHeight(), self = this, lineCount = this._strArr.length, lineTotalHeight = (lineCount - 1) * lineHeight + fontClientHeight;
            if (self.yAlignment === wd.FontYAlignment.BOTTOM) {
                y = y + self.height - lineTotalHeight;
            }
            else if (self.yAlignment === wd.FontYAlignment.MIDDLE) {
                y = y + (self.height - lineTotalHeight) / 2;
            }
            for (var _i = 0, _a = this._strArr; _i < _a.length; _i++) {
                var str = _a[_i];
                if (self.xAlignment === wd.FontXAlignment.RIGHT) {
                    x = x + self.width - self._measure(str);
                }
                else if (self.xAlignment == wd.FontXAlignment.CENTER) {
                    x = x + (self.width - self._measure(str)) / 2;
                }
                if (self._fillEnabled) {
                    context.fillStyle = self._fillStyle;
                    context.fillText(str, x, y);
                }
                else if (self._strokeEnabled) {
                    context.strokeStyle = self._strokeStyle;
                    context.lineWidth = self._strokeSize;
                    context.strokeText(str, x, y);
                }
                x = position.x;
                y = y + lineHeight;
            }
        };
        PlainFont.prototype._drawSingleLine = function () {
            var context = this.context, position = this.getCanvasPosition(), x = position.x, y = position.y, fontClientHeight = this._getFontClientHeight(), self = this, lineCount = 1, lineTotalHeight = fontClientHeight, str = this._strArr[0];
            if (self.yAlignment === wd.FontYAlignment.BOTTOM) {
                y = y + self.height - lineTotalHeight;
            }
            else if (self.yAlignment === wd.FontYAlignment.MIDDLE) {
                y = y + (self.height - lineTotalHeight) / 2;
            }
            if (self.xAlignment === wd.FontXAlignment.RIGHT) {
                x = x + self.width - self._measure(str);
            }
            else if (self.xAlignment == wd.FontXAlignment.CENTER) {
                x = x + (self.width - self._measure(str)) / 2;
            }
            if (self._fillEnabled) {
                context.fillStyle = self._fillStyle;
                context.fillText(str, x, y);
            }
            else if (self._strokeEnabled) {
                context.strokeStyle = self._strokeStyle;
                context.lineWidth = self._strokeSize;
                context.strokeText(str, x, y);
            }
        };
        __decorate([
            wd.require(function () {
                wd.assert(!!wd.DeviceManager.getInstance().view, wd.Log.info.FUNC_SHOULD("set view"));
            })
        ], PlainFont.prototype, "_initDimension", null);
        return PlainFont;
    })(wd.Font);
    wd.PlainFont = PlainFont;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var wd;
(function (wd) {
    var BitmapFont = (function (_super) {
        __extends(BitmapFont, _super);
        function BitmapFont() {
            _super.apply(this, arguments);
            this._text = "";
            this._width = 0;
            this._xAlignment = wd.FontXAlignment.LEFT;
            this.fntId = null;
            this.bitmapId = null;
            this._charFontList = wdCb.Collection.create();
        }
        BitmapFont.create = function () {
            var obj = new this();
            return obj;
        };
        Object.defineProperty(BitmapFont.prototype, "text", {
            get: function () {
                return this._text;
            },
            set: function (text) {
                if (text !== this._text) {
                    this._text = text;
                    this.p_dirty = true;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BitmapFont.prototype, "width", {
            get: function () {
                return this._width;
            },
            set: function (width) {
                if (width !== this._width) {
                    this._width = width;
                    this.p_dirty = true;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BitmapFont.prototype, "xAlignment", {
            get: function () {
                return this._xAlignment;
            },
            set: function (xAlignment) {
                if (xAlignment !== this._xAlignment) {
                    this._xAlignment = xAlignment;
                    this.p_dirty = true;
                }
            },
            enumerable: true,
            configurable: true
        });
        BitmapFont.prototype.init = function () {
            var fntObj = this._getFntObj(), imageAsset = this._getImageAsset();
            if (!fntObj) {
                wd.Log.log("impossible to create font: not find fnt file");
                return false;
            }
            if (!imageAsset) {
                wd.Log.log("impossible to create font: not find bitmap file");
                return false;
            }
            this.context = this.getContext();
            this._initDimension();
            this._createAndAddFontCharGameObjects(fntObj, imageAsset.source);
            this._formatText(fntObj);
        };
        BitmapFont.prototype.dispose = function () {
            this._removeAllCharFont();
        };
        BitmapFont.prototype.updateWhenDirty = function () {
            var fntObj = this._getFntObj(), imageAsset = this._getImageAsset();
            this._removeAllCharFont();
            if (!fntObj) {
                wd.Log.log("impossible to create font: not find fnt file");
                return false;
            }
            if (!imageAsset) {
                wd.Log.log("impossible to create font: not find bitmap file");
                return false;
            }
            this._initDimension();
            this._createAndAddFontCharGameObjects(fntObj, imageAsset.source);
            this._formatText(fntObj);
        };
        BitmapFont.prototype._getFntObj = function () {
            return wd.LoaderManager.getInstance().get(this.fntId);
        };
        BitmapFont.prototype._getImageAsset = function () {
            return wd.LoaderManager.getInstance().get(this.bitmapId);
        };
        BitmapFont.prototype._createAndAddFontCharGameObjects = function (fntObj, image) {
            var locStr = this.text, locFontDict = fntObj.fontDefDictionary, nextFontPositionX = 0, nextFontPositionY = 0, gameObject = this.gameObject, position = this.getCanvasPosition(), uiRenderer = gameObject.getComponent(wd.UIRenderer), charFontGameObject = null, charFont = null;
            for (var i = 0, stringLen = locStr.length; i < stringLen; i++) {
                var key = String(locStr.charCodeAt(i)), char = locStr[i];
                if (this._isNewLine(char)) {
                    var charFontData_1 = this._createAndAddFontCharObjectOfNewLineChar(i, char, uiRenderer);
                    charFontGameObject = charFontData_1.charFontGameObject;
                    charFont = charFontData_1.charFont;
                    this._setCharFontGameObjectPosition(charFontGameObject, position.x + nextFontPositionX, position.y + nextFontPositionY);
                    charFont.startPosX = nextFontPositionX;
                    charFont.xAdvance = 0;
                    nextFontPositionX = 0;
                    nextFontPositionY = nextFontPositionY + fntObj.commonHeight;
                    continue;
                }
                var fontDef = this._getFontDef(locFontDict, key), charFontData = null;
                if (!fontDef) {
                    wd.Log.log("character not found " + char);
                    continue;
                }
                charFontData = this._createAndAddFontCharObjectOfCommonChar(fontDef, image, i, char, uiRenderer);
                charFontGameObject = charFontData.charFontGameObject;
                charFont = charFontData.charFont;
                this._setCharFontGameObjectPosition(charFontGameObject, position.x + nextFontPositionX + fontDef.xOffset, position.y + nextFontPositionY + fontDef.yOffset);
                charFont.startPosX = nextFontPositionX;
                charFont.xAdvance = fontDef.xAdvance;
                nextFontPositionX = nextFontPositionX + fontDef.xAdvance;
            }
        };
        BitmapFont.prototype._createAndAddFontCharObjectOfNewLineChar = function (index, char, uiRenderer) {
            var charFontGameObject = this._findCharFontGameObject(index), charFont = null;
            if (!charFontGameObject) {
                var charFontData = this._createCharFont(index, uiRenderer);
                charFontGameObject = charFontData.charFontGameObject;
                charFont = charFontData.charFont;
                this._addCharFontGameObject(charFontGameObject);
            }
            else {
                charFont = charFontGameObject.getComponent(wd.CharFont);
            }
            charFont.char = char;
            return {
                charFontGameObject: charFontGameObject,
                charFont: charFont
            };
        };
        BitmapFont.prototype._createAndAddFontCharObjectOfCommonChar = function (fontDef, image, index, char, uiRenderer) {
            var rect = wd.RectRegion.create(fontDef.rect.x, fontDef.rect.y, fontDef.rect.width, fontDef.rect.height), charFontGameObject = this._findCharFontGameObject(index), charFont = null;
            if (!charFontGameObject) {
                var charFontData = this._createCharFont(index, uiRenderer);
                charFontGameObject = charFontData.charFontGameObject;
                charFont = charFontData.charFont;
                charFont.image = image;
                charFont.rectRegion = rect;
                charFont.width = rect.width;
                charFont.height = rect.height;
                this._addCharFontGameObject(charFontGameObject);
            }
            else {
                charFont = charFontGameObject.getComponent(wd.CharFont);
            }
            charFont.char = char;
            return {
                charFontGameObject: charFontGameObject,
                charFont: charFont
            };
        };
        BitmapFont.prototype._formatText = function (fntObj) {
            if (this.width > 0) {
                this._formatMultiLine(fntObj);
            }
            this._formatAlign();
        };
        BitmapFont.prototype._formatMultiLine = function (fntObj) {
            var gameObject = this.gameObject, characterGameObject = null, charFont = null, position = gameObject.transform.position, x = 0, y = 0, lineHeight = fntObj.commonHeight;
            for (var i = 1, stringLen = this.text.length; i < stringLen; i++) {
                characterGameObject = this._findCharFontGameObject(i);
                charFont = characterGameObject.getComponent(wd.CharFont);
                if (this._isNewLine(charFont.char)) {
                    charFont.isNewLine = true;
                    charFont.isFullLine = false;
                    this._translateCharFontGameObject(characterGameObject, -x, y);
                    x = 0;
                }
                if (this._isExceedWidth(position, charFont, x)) {
                    var prevCharGameObject = this._findCharFontGameObject(i - 1);
                    if (prevCharGameObject) {
                        var prevCharFont = prevCharGameObject.getComponent(wd.CharFont);
                        prevCharFont.isNewLine = true;
                        if (!this._isSpaceUnicode(prevCharFont.char)) {
                            prevCharFont.isFullLine = true;
                        }
                    }
                    x = this._getLetterPosXLeft(charFont);
                    y = y + lineHeight;
                    this._translateCharFontGameObject(characterGameObject, -x, y);
                }
                else {
                    this._translateCharFontGameObject(characterGameObject, -x, y);
                }
            }
        };
        BitmapFont.prototype._formatAlign = function () {
            var position = this.gameObject.transform.position, self = this;
            if (this._xAlignment != wd.FontXAlignment.LEFT) {
                var line = [];
                this._charFontList.forEach(function (charFontGameObject) {
                    var charFont = charFontGameObject.getComponent(wd.CharFont);
                    if (!charFont.isNewLine) {
                        line.push(charFont);
                        return;
                    }
                    if (charFont.isNewLine && charFont.isFullLine) {
                        line = [];
                        return;
                    }
                    self._alignLine(position, line, line[line.length - 1]);
                    line = [];
                });
                if (line.length > 0) {
                    self._alignLine(position, line, line[line.length - 1]);
                }
            }
        };
        BitmapFont.prototype._createCharFont = function (index, uiRenderer) {
            var charFontGameObject = wd.GameObject.create(), charFont = wd.CharFont.create();
            charFontGameObject.addComponent(charFont);
            charFontGameObject.addComponent(uiRenderer);
            charFontGameObject.addTag(String(index));
            charFontGameObject.init();
            return {
                charFontGameObject: charFontGameObject,
                charFont: charFont
            };
        };
        BitmapFont.prototype._addCharFontGameObject = function (charFontGameObject) {
            this._charFontList.addChild(charFontGameObject);
            this.gameObject.addChild(charFontGameObject);
        };
        BitmapFont.prototype._findCharFontGameObject = function (index) {
            return this.gameObject.findChildByTag(String(index));
        };
        BitmapFont.prototype._isSpaceUnicode = function (char) {
            var charCode = char.charCodeAt(0);
            return charCode == 32 || charCode == 133 || charCode == 160 || charCode == 5760 || (charCode >= 8192 && charCode <= 8202) || charCode == 8232 || charCode == 8233 || charCode == 8239 || charCode == 8287 || charCode == 12288;
        };
        BitmapFont.prototype._isNewLine = function (char) {
            return char.charCodeAt(0) == 10;
        };
        BitmapFont.prototype._getLetterPosXLeft = function (sp) {
            return sp.startPosX;
        };
        BitmapFont.prototype._getLetterPosXRight = function (position, sp) {
            return sp.x - position.x + sp.xAdvance;
        };
        BitmapFont.prototype._getFontDef = function (fontDict, key) {
            return fontDict[key];
        };
        BitmapFont.prototype._isExceedWidth = function (position, charFont, x) {
            return this._getLetterPosXRight(position, charFont) - x > this.width;
        };
        BitmapFont.prototype._alignLine = function (position, line, lastCharFont) {
            var self = this;
            line = this._trimBottomSpaceChar(line);
            lastCharFont = line[line.length - 1];
            line.forEach(function (cp) {
                var shift = null, lineWidth = self._getLetterPosXRight(position, lastCharFont);
                switch (self._xAlignment) {
                    case wd.FontXAlignment.CENTER:
                        shift = (self.width - lineWidth) / 2;
                        break;
                    case wd.FontXAlignment.RIGHT:
                        shift = self.width - lineWidth;
                        break;
                    default:
                        break;
                }
                cp.x = cp.x + shift;
            });
        };
        BitmapFont.prototype._trimBottomSpaceChar = function (line) {
            var i = line.length - 1;
            if (this._isNewLine(line[i].char)) {
                i = i - 1;
            }
            while (i >= 0 && this._isSpaceUnicode(line[i].char)) {
                i = i - 1;
            }
            line = line.splice(0, i + 1);
            return line;
        };
        BitmapFont.prototype._setCharFontGameObjectPosition = function (charFontGameObject, x, y) {
            charFontGameObject.transform.position = wd.CoordinateUtils.convertCanvasPositionToWebGLPosition(wd.Vector2.create(x, y));
        };
        BitmapFont.prototype._translateCharFontGameObject = function (charFontGameObject, x, y) {
            charFontGameObject.transform.translate(x, -y, 0);
        };
        BitmapFont.prototype._removeAllCharFont = function () {
            this._charFontList.forEach(function (charFont) {
                charFont.dispose();
            });
            this._charFontList.removeAllChildren();
        };
        BitmapFont.prototype._initDimension = function () {
            var view = wd.DeviceManager.getInstance().view;
            if (this._width === wd.FontDimension.AUTO) {
                this._width = view.width;
            }
        };
        __decorate([
            wd.require(function (fntObj, image) {
                wd.assert(this.gameObject.hasComponent(wd.UIRenderer), wd.Log.info.FUNC_SHOULD("gameObject", "contain UIRenderer"));
            })
        ], BitmapFont.prototype, "_createAndAddFontCharGameObjects", null);
        __decorate([
            wd.require(function (fntObj) {
                if (this.width > 0) {
                    for (var i = 1, stringLen = this.text.length; i < stringLen; i++) {
                        var characterGameObject = this.gameObject.findChildByTag(String(i));
                        wd.assert(!!characterGameObject, "char not has corresponding gameObject");
                        wd.assert(characterGameObject.hasComponent(wd.CharFont), wd.Log.info.FUNC_SHOULD("char gameObject", "contain CharFont component"));
                    }
                }
            })
        ], BitmapFont.prototype, "_formatText", null);
        __decorate([
            wd.require(function () {
                wd.assert(!!wd.DeviceManager.getInstance().view, wd.Log.info.FUNC_SHOULD("set view"));
            })
        ], BitmapFont.prototype, "_initDimension", null);
        return BitmapFont;
    })(wd.Font);
    wd.BitmapFont = BitmapFont;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var wd;
(function (wd) {
    var CharFont = (function (_super) {
        __extends(CharFont, _super);
        function CharFont() {
            _super.apply(this, arguments);
            this._char = null;
            this.startPosX = null;
            this.xAdvance = null;
            this.image = null;
            this.rectRegion = null;
            this.width = 0;
            this.height = 0;
            this.isNewLine = false;
            this.isFullLine = false;
        }
        CharFont.create = function () {
            var obj = new this();
            return obj;
        };
        Object.defineProperty(CharFont.prototype, "x", {
            get: function () {
                return this.gameObject.transform.position.x;
            },
            set: function (x) {
                var position = this.gameObject.transform.position;
                this.gameObject.transform.position = wd.Vector3.create(x, position.y, position.z);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CharFont.prototype, "y", {
            get: function () {
                return this.gameObject.transform.position.y;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CharFont.prototype, "dirty", {
            get: function () {
                var transform = null;
                if (this.p_dirty) {
                    return true;
                }
                transform = this.gameObject.transform;
                return transform.isTranslate || transform.isRotate || transform.isScale;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CharFont.prototype, "char", {
            get: function () {
                return this._char;
            },
            set: function (char) {
                if (char !== this._char) {
                    this._char = char;
                    this.p_dirty = true;
                }
            },
            enumerable: true,
            configurable: true
        });
        CharFont.prototype.init = function () {
            this.context = this.getContext();
        };
        CharFont.prototype.dispose = function () {
        };
        CharFont.prototype.update = function (elapsedTime) {
            var transform = null, position = null, scale = null, dx = null, dy = null, dw = null, dh = null;
            _super.prototype.update.call(this, elapsedTime);
            if (this.rectRegion === null || (this.width === 0 && this.height === 0)) {
                return;
            }
            transform = this.gameObject.transform;
            position = wd.CoordinateUtils.convertWebGLPositionToCanvasPosition(transform.position);
            scale = transform.scale;
            dx = position.x;
            dy = position.y;
            dw = this.width * scale.x;
            dh = this.height * scale.y;
            this.context.save();
            if (transform.isRotate) {
                this._rotateAroundImageCenter(dx, dy, dw, dh);
            }
            this.context.drawImage(this.image, this.rectRegion.x, this.rectRegion.y, this.rectRegion.width, this.rectRegion.height, dx, dy, dw, dh);
            this.context.restore();
        };
        CharFont.prototype.updateWhenDirty = function () {
        };
        CharFont.prototype._rotateAroundImageCenter = function (dx, dy, dw, dh) {
            var values = this.gameObject.transform.localToWorldMatrix.values;
            this.context.translate(dx + dw / 2, dy + dh / 2);
            this.context.transform(values[0], values[4], values[1], values[5], 0, 0);
            this.context.translate(-(dx + dw / 2), -(dy + dh / 2));
        };
        __decorate([
            wd.require(function (elapsedTime) {
                wd.assert(this.context !== null, wd.Log.info.FUNC_SHOULD("set context"));
            })
        ], CharFont.prototype, "update", null);
        return CharFont;
    })(wd.Font);
    wd.CharFont = CharFont;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var JudgeUtils = (function (_super) {
        __extends(JudgeUtils, _super);
        function JudgeUtils() {
            _super.apply(this, arguments);
        }
        JudgeUtils.isView = function (obj) {
            return !!obj && obj.offset && obj.width && obj.height && this.isFunction(obj.getContext);
        };
        JudgeUtils.isEqual = function (target1, target2) {
            if ((!target1 && target2) || (target1 && !target2)) {
                return false;
            }
            if (target1.uid && target2.uid) {
                return target1.uid === target2.uid;
            }
            return target1 === target2;
        };
        JudgeUtils.isPowerOfTwo = function (value) {
            return (value & (value - 1)) === 0 && value !== 0;
        };
        JudgeUtils.isFloatArray = function (data) {
            return Object.prototype.toString.call(data) === "[object Float32Array]" || Object.prototype.toString.call(data) === "[object Float16Array]";
        };
        return JudgeUtils;
    })(wdCb.JudgeUtils);
    wd.JudgeUtils = JudgeUtils;
})(wd || (wd = {}));

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var wd;
(function (wd) {
    var MathUtils = (function () {
        function MathUtils() {
        }
        MathUtils.clamp = function (num, below, up) {
            if (num < below) {
                return below;
            }
            else if (num > up) {
                return up;
            }
            return num;
        };
        MathUtils.bigThan = function (num, below) {
            return num < below ? below : num;
        };
        MathUtils.generateZeroToOne = function () {
            return Math.random();
        };
        MathUtils.generateInteger = function (min, max) {
            var max = max + 1;
            return Math.floor(Math.random() * (max - min) + min);
        };
        __decorate([
            wd.require(function (min, max) {
                wd.assert(min < max, wd.Log.info.FUNC_SHOULD("min", "< max"));
            })
        ], MathUtils, "generateInteger", null);
        return MathUtils;
    })();
    wd.MathUtils = MathUtils;
})(wd || (wd = {}));

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var wd;
(function (wd) {
    var CoordinateUtils = (function () {
        function CoordinateUtils() {
        }
        CoordinateUtils.convertWebGLPositionToCanvasPosition = function (position) {
            var view = wd.DeviceManager.getInstance().view;
            return wd.Vector2.create(view.width / 2 + position.x, view.height / 2 - position.y);
        };
        CoordinateUtils.convertCanvasPositionToWebGLPosition = function (position) {
            var view = wd.DeviceManager.getInstance().view;
            return wd.Vector3.create(position.x - view.width / 2, view.height / 2 - position.y, 0);
        };
        __decorate([
            wd.require(function () {
                wd.assert(!!wd.DeviceManager.getInstance().view, wd.Log.info.FUNC_SHOULD("set view"));
            })
        ], CoordinateUtils, "convertWebGLPositionToCanvasPosition", null);
        __decorate([
            wd.require(function () {
                wd.assert(!!wd.DeviceManager.getInstance().view, wd.Log.info.FUNC_SHOULD("set view"));
            })
        ], CoordinateUtils, "convertCanvasPositionToWebGLPosition", null);
        return CoordinateUtils;
    })();
    wd.CoordinateUtils = CoordinateUtils;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var Log = (function (_super) {
        __extends(Log, _super);
        function Log() {
            _super.apply(this, arguments);
        }
        return Log;
    })(wdCb.Log);
    wd.Log = Log;
})(wd || (wd = {}));

var wd;
(function (wd) {
    var TimeController = (function () {
        function TimeController() {
            this.elapsed = null;
            this.pauseElapsed = 0;
            this.pauseTime = null;
            this.startTime = null;
        }
        TimeController.prototype.start = function () {
            this.startTime = this.getNow();
            this.pauseElapsed = null;
        };
        TimeController.prototype.stop = function () {
            this.startTime = null;
        };
        TimeController.prototype.pause = function () {
            this.pauseTime = this.getNow();
        };
        TimeController.prototype.resume = function () {
            this.pauseElapsed += this.getNow() - this.pauseTime;
            this.pauseTime = null;
        };
        TimeController.prototype.computeElapseTime = function (time) {
            if (this.pauseElapsed) {
                this.elapsed = time - this.pauseElapsed - this.startTime;
                return this.elapsed;
            }
            this.elapsed = time - this.startTime;
            return this.elapsed;
        };
        return TimeController;
    })();
    wd.TimeController = TimeController;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var STARTING_FPS = 60, GAMETIME_SCALE = 1000;
    var DirectorTimeController = (function (_super) {
        __extends(DirectorTimeController, _super);
        function DirectorTimeController() {
            _super.apply(this, arguments);
            this.gameTime = null;
            this.fps = null;
            this.isTimeChange = false;
            this.deltaTime = null;
            this._lastTime = null;
        }
        DirectorTimeController.create = function () {
            var obj = new this();
            return obj;
        };
        DirectorTimeController.prototype.tick = function (time) {
            this.deltaTime = this._lastTime !== null ? time - this._lastTime : time;
            this._updateFps(this.deltaTime);
            this.gameTime = time / GAMETIME_SCALE;
            this._lastTime = time;
        };
        DirectorTimeController.prototype.start = function () {
            _super.prototype.start.call(this);
            this.isTimeChange = true;
            this.elapsed = 0;
        };
        DirectorTimeController.prototype.resume = function () {
            _super.prototype.resume.call(this);
            this.isTimeChange = true;
        };
        DirectorTimeController.prototype.getNow = function () {
            return wd.root.performance.now();
        };
        DirectorTimeController.prototype._updateFps = function (deltaTime) {
            if (this._lastTime === null) {
                this.fps = STARTING_FPS;
            }
            else {
                this.fps = 1000 / deltaTime;
            }
        };
        return DirectorTimeController;
    })(wd.TimeController);
    wd.DirectorTimeController = DirectorTimeController;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var CommonTimeController = (function (_super) {
        __extends(CommonTimeController, _super);
        function CommonTimeController() {
            _super.apply(this, arguments);
        }
        CommonTimeController.create = function () {
            var obj = new this();
            return obj;
        };
        CommonTimeController.prototype.getNow = function () {
            if (wd.Director.getInstance().isTimeChange) {
                return wd.Director.getInstance().elapsed;
            }
            return wd.root.performance.now();
        };
        return CommonTimeController;
    })(wd.TimeController);
    wd.CommonTimeController = CommonTimeController;
})(wd || (wd = {}));

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var wd;
(function (wd) {
    var RenderTargetRenderer = (function () {
        function RenderTargetRenderer(renderTargetTexture) {
            this.texture = null;
            this.frameBufferOperator = null;
            this.texture = renderTargetTexture;
        }
        RenderTargetRenderer.prototype.initWhenCreate = function () {
            this.frameBufferOperator = wd.FrameBuffer.create(this.texture.width, this.texture.height);
        };
        RenderTargetRenderer.prototype.init = function () {
            this.texture.createEmptyTexture();
            this.initFrameBuffer();
        };
        RenderTargetRenderer.prototype.render = function (renderer, camera) {
            this.beforeRender();
            this.renderFrameBufferTexture(renderer, camera);
            this.afterRender();
        };
        RenderTargetRenderer.prototype.dispose = function () {
            this.frameBufferOperator.dispose();
            this.disposeFrameBuffer();
            this.texture.dispose();
        };
        RenderTargetRenderer.prototype.beforeRender = function () {
        };
        RenderTargetRenderer.prototype.afterRender = function () {
        };
        __decorate([
            wd.virtual
        ], RenderTargetRenderer.prototype, "beforeRender", null);
        __decorate([
            wd.virtual
        ], RenderTargetRenderer.prototype, "afterRender", null);
        return RenderTargetRenderer;
    })();
    wd.RenderTargetRenderer = RenderTargetRenderer;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var TwoDRenderTargetRenderer = (function (_super) {
        __extends(TwoDRenderTargetRenderer, _super);
        function TwoDRenderTargetRenderer() {
            _super.apply(this, arguments);
            this.frameBuffer = null;
            this.renderBuffer = null;
        }
        TwoDRenderTargetRenderer.prototype.initFrameBuffer = function () {
            var frameBuffer = this.frameBufferOperator, gl = wd.DeviceManager.getInstance().gl;
            this.frameBuffer = frameBuffer.createFrameBuffer();
            this.renderBuffer = frameBuffer.createRenderBuffer();
            frameBuffer.bindFrameBuffer(this.frameBuffer);
            frameBuffer.attachTexture(gl.TEXTURE_2D, this.texture.glTexture);
            frameBuffer.attachRenderBuffer("DEPTH_ATTACHMENT", this.renderBuffer);
            frameBuffer.check();
            frameBuffer.unBind();
        };
        TwoDRenderTargetRenderer.prototype.renderFrameBufferTexture = function (renderer, camera) {
            var renderCamera = this.createCamera(camera);
            this.beforeRenderFrameBufferTexture(renderCamera);
            this.frameBufferOperator.bindFrameBuffer(this.frameBuffer);
            this.texture.bindToUnit(0);
            this.frameBufferOperator.setViewport();
            this.getRenderList().forEach(function (child) {
                child.render(renderer, renderCamera);
            });
            this.renderRenderer(renderer);
            this.frameBufferOperator.unBind();
            this.frameBufferOperator.restoreViewport();
        };
        TwoDRenderTargetRenderer.prototype.disposeFrameBuffer = function () {
            var gl = wd.DeviceManager.getInstance().gl;
            gl.deleteFramebuffer(this.frameBuffer);
            gl.deleteRenderbuffer(this.renderBuffer);
        };
        return TwoDRenderTargetRenderer;
    })(wd.RenderTargetRenderer);
    wd.TwoDRenderTargetRenderer = TwoDRenderTargetRenderer;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var MirrorRenderTargetRenderer = (function (_super) {
        __extends(MirrorRenderTargetRenderer, _super);
        function MirrorRenderTargetRenderer() {
            _super.apply(this, arguments);
        }
        MirrorRenderTargetRenderer.create = function (mirrorTexture) {
            var obj = new this(mirrorTexture);
            obj.initWhenCreate();
            return obj;
        };
        MirrorRenderTargetRenderer.prototype.beforeRenderFrameBufferTexture = function (renderCamera) {
        };
        MirrorRenderTargetRenderer.prototype.getRenderList = function () {
            return this.texture.renderList;
        };
        MirrorRenderTargetRenderer.prototype.renderRenderer = function (renderer) {
            this._setSceneSide(wd.Side.BACK);
            renderer.render();
            this._setSceneSide(null);
        };
        MirrorRenderTargetRenderer.prototype.createCamera = function (camera) {
            var mirrorCameraComponent = null, plane = null, cameraComponent = camera.getComponent(wd.CameraController), mirrorCameraViewMatrix = null, projectionMatrix = null;
            plane = this.texture.getPlane();
            mirrorCameraViewMatrix =
                plane.getReflectionMatrix().applyMatrix(cameraComponent.worldToCameraMatrix);
            projectionMatrix = this._setClipPlane(mirrorCameraViewMatrix, cameraComponent.pMatrix, plane);
            mirrorCameraComponent = wd.PerspectiveCamera.create();
            mirrorCameraComponent.worldToCameraMatrix = mirrorCameraViewMatrix.copy();
            mirrorCameraComponent.pMatrix = projectionMatrix;
            return wd.GameObject.create().addComponent(wd.BasicCameraController.create(mirrorCameraComponent)).init();
        };
        MirrorRenderTargetRenderer.prototype._setSceneSide = function (side) {
            var scene = wd.Director.getInstance().scene;
            scene.side = side;
        };
        MirrorRenderTargetRenderer.prototype._setClipPlane = function (vMatrix, pMatrix, plane) {
            var projectionMatrix = pMatrix.copy(), q = wd.Vector4.create(), clipPlane = this._getClipPlaneInCameraSpace(vMatrix, plane), c = wd.Vector4.create();
            q.x = (Math.sign(clipPlane.x) + projectionMatrix.values[8]) / projectionMatrix.values[0];
            q.y = (Math.sign(clipPlane.y) + projectionMatrix.values[9]) / projectionMatrix.values[5];
            q.z = -1.0;
            q.w = (1.0 + projectionMatrix.values[10]) / projectionMatrix.values[14];
            c = clipPlane.multiplyScalar(2.0 / clipPlane.dot(q));
            projectionMatrix.values[2] = c.x;
            projectionMatrix.values[6] = c.y;
            projectionMatrix.values[10] = c.z + 1.0;
            projectionMatrix.values[14] = c.w;
            return projectionMatrix;
        };
        MirrorRenderTargetRenderer.prototype._getClipPlaneInCameraSpace = function (vMatrix, plane) {
            var clipPlane = wd.Vector4.create(), p = vMatrix.multiplyVector3(this.texture.getPosition()), n = vMatrix.copy().invert().transpose().multiplyVector3(plane.normal).normalize();
            clipPlane.set(n.x, n.y, n.z, -p.dot(n));
            return clipPlane;
        };
        return MirrorRenderTargetRenderer;
    })(wd.TwoDRenderTargetRenderer);
    wd.MirrorRenderTargetRenderer = MirrorRenderTargetRenderer;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var TwoDShadowMapRenderTargetRenderer = (function (_super) {
        __extends(TwoDShadowMapRenderTargetRenderer, _super);
        function TwoDShadowMapRenderTargetRenderer(light) {
            _super.call(this, light.shadowMap);
            this._light = null;
            this._shadowMapRendererUtils = null;
            this._light = light;
        }
        TwoDShadowMapRenderTargetRenderer.create = function (light) {
            var obj = new this(light);
            obj.initWhenCreate();
            return obj;
        };
        TwoDShadowMapRenderTargetRenderer.prototype.initWhenCreate = function () {
            this._shadowMapRendererUtils = wd.TwoDShadowMapRenderTargetRendererUtils.create(this._light, this.texture);
            _super.prototype.initWhenCreate.call(this);
        };
        TwoDShadowMapRenderTargetRenderer.prototype.init = function () {
            var self = this;
            this._handleShadowRendererList();
            this._shadowMapRendererUtils.bindEndLoop(function () {
                self._light.shadowRenderList.forEach(function (child) {
                    self._shadowMapRendererUtils.clearTwoDShadowMapData(child);
                });
            });
            this._shadowMapRendererUtils.createShaderWithShaderLib(wd.BuildTwoDShadowMapShaderLib.create());
            _super.prototype.init.call(this);
        };
        TwoDShadowMapRenderTargetRenderer.prototype.dispose = function () {
            _super.prototype.dispose.call(this);
            this._shadowMapRendererUtils.unBindEndLoop();
        };
        TwoDShadowMapRenderTargetRenderer.prototype.beforeRenderFrameBufferTexture = function (renderCamera) {
            var self = this;
            this._light.shadowRenderList.removeRepeatItems().forEach(function (child) {
                self._shadowMapRendererUtils.setShadowMapData(child, renderCamera);
            });
        };
        TwoDShadowMapRenderTargetRenderer.prototype.getRenderList = function () {
            return this._light.shadowRenderList;
        };
        TwoDShadowMapRenderTargetRenderer.prototype.renderRenderer = function (renderer) {
            renderer.render();
        };
        TwoDShadowMapRenderTargetRenderer.prototype.beforeRender = function () {
            this._shadowMapRendererUtils.beforeRender();
        };
        TwoDShadowMapRenderTargetRenderer.prototype.afterRender = function () {
            this._shadowMapRendererUtils.afterRender();
        };
        TwoDShadowMapRenderTargetRenderer.prototype.createCamera = function () {
            var orthoCameraComponent = wd.OrthographicCamera.create(), light = this._light, camera = wd.GameObject.create();
            orthoCameraComponent.left = light.shadowCameraLeft;
            orthoCameraComponent.right = light.shadowCameraRight;
            orthoCameraComponent.top = light.shadowCameraTop;
            orthoCameraComponent.bottom = light.shadowCameraBottom;
            orthoCameraComponent.near = light.shadowCameraNear;
            orthoCameraComponent.far = light.shadowCameraFar;
            camera.addComponent(wd.BasicCameraController.create(orthoCameraComponent));
            camera.transform.translate(light.position);
            camera.transform.lookAt(0, 0, 0);
            camera.init();
            return camera;
        };
        TwoDShadowMapRenderTargetRenderer.prototype._handleShadowRendererList = function () {
            var _this = this;
            var self = this, children = [];
            this._light.shadowRenderList.forEach(function (renderTarget) {
                children = children.concat(_this._shadowMapRendererUtils.addAllChildren(renderTarget));
            }, this);
            this._light.shadowRenderList.addChildren(children);
            this._light.shadowRenderList.removeChild(function (renderTarget) {
                return self._shadowMapRendererUtils.isContainer(renderTarget);
            });
        };
        return TwoDShadowMapRenderTargetRenderer;
    })(wd.TwoDRenderTargetRenderer);
    wd.TwoDShadowMapRenderTargetRenderer = TwoDShadowMapRenderTargetRenderer;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var CubemapRenderTargetRenderer = (function (_super) {
        __extends(CubemapRenderTargetRenderer, _super);
        function CubemapRenderTargetRenderer() {
            _super.apply(this, arguments);
            this._frameBuffers = wdCb.Collection.create();
            this._renderBuffers = wdCb.Collection.create();
        }
        CubemapRenderTargetRenderer.prototype.initFrameBuffer = function () {
            var frameBufferOperator = this.frameBufferOperator, gl = wd.DeviceManager.getInstance().gl;
            for (var i = 0; i < 6; i++) {
                var frameBuffer = frameBufferOperator.createFrameBuffer(), renderBuffer = frameBufferOperator.createRenderBuffer();
                this._frameBuffers.addChild(frameBuffer);
                this._renderBuffers.addChild(renderBuffer);
                frameBufferOperator.bindFrameBuffer(frameBuffer);
                frameBufferOperator.attachTexture(gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, this.texture.glTexture);
                frameBufferOperator.attachRenderBuffer("DEPTH_ATTACHMENT", renderBuffer);
                frameBufferOperator.check();
            }
            frameBufferOperator.unBind();
        };
        CubemapRenderTargetRenderer.prototype.renderFrameBufferTexture = function (renderer, camera) {
            var i = null, renderCamera = null, faceRenderList = null, renderList = null;
            renderList = this.getRenderList();
            this.texture.bindToUnit(0);
            for (i = 0; i < 6; i++) {
                faceRenderList = renderList.getChild(this._convertIndexToFaceKey(i));
                if (this._isEmpty(faceRenderList)) {
                    continue;
                }
                renderCamera = this.createCamera(i);
                this.frameBufferOperator.bindFrameBuffer(this._frameBuffers.getChild(i));
                this.frameBufferOperator.setViewport();
                faceRenderList.forEach(function (child) {
                    child.render(renderer, renderCamera);
                });
                renderer.render();
            }
            this.frameBufferOperator.unBind();
            this.frameBufferOperator.restoreViewport();
        };
        CubemapRenderTargetRenderer.prototype.disposeFrameBuffer = function () {
            var gl = wd.DeviceManager.getInstance().gl;
            this._frameBuffers.forEach(function (buffer) { return gl.deleteFramebuffer(buffer); });
            this._renderBuffers.forEach(function (buffer) { return gl.deleteRenderbuffer(buffer); });
        };
        CubemapRenderTargetRenderer.prototype.createCamera = function (index) {
            var cubeCameraComponent = wd.PerspectiveCamera.create(), camera = wd.GameObject.create(), pos = this.getPosition();
            cubeCameraComponent.fovy = 90;
            this.setCamera(cubeCameraComponent);
            camera.addComponent(wd.BasicCameraController.create(cubeCameraComponent));
            camera.transform.translate(pos);
            this._lookAtFace(camera, pos, index);
            camera.init();
            return camera;
        };
        CubemapRenderTargetRenderer.prototype._isEmpty = function (faceRenderList) {
            return !faceRenderList || (faceRenderList.length && faceRenderList.length === 0) || (faceRenderList.getCount && faceRenderList.getCount() === 0);
        };
        CubemapRenderTargetRenderer.prototype._convertIndexToFaceKey = function (index) {
            var face = null;
            switch (index) {
                case 0:
                    face = "px";
                    break;
                case 1:
                    face = "nx";
                    break;
                case 2:
                    face = "py";
                    break;
                case 3:
                    face = "ny";
                    break;
                case 4:
                    face = "pz";
                    break;
                case 5:
                    face = "nz";
                    break;
                default:
                    break;
            }
            return face;
        };
        CubemapRenderTargetRenderer.prototype._lookAtFace = function (camera, position, index) {
            switch (index) {
                case 0:
                    camera.transform.lookAt(position.x + 1, position.y, position.z, 0, -1, 0);
                    break;
                case 1:
                    camera.transform.lookAt(position.x - 1, position.y, position.z, 0, -1, 0);
                    break;
                case 2:
                    camera.transform.lookAt(position.x, position.y + 1, position.z, 0, 0, 1);
                    break;
                case 3:
                    camera.transform.lookAt(position.x, position.y - 1, position.z, 0, 0, -1);
                    break;
                case 4:
                    camera.transform.lookAt(position.x, position.y, position.z + 1, 0, -1, 0);
                    break;
                case 5:
                    camera.transform.lookAt(position.x, position.y, position.z - 1, 0, -1, 0);
                    break;
                default:
                    break;
            }
        };
        return CubemapRenderTargetRenderer;
    })(wd.RenderTargetRenderer);
    wd.CubemapRenderTargetRenderer = CubemapRenderTargetRenderer;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var CubemapShadowMapRenderTargetRenderer = (function (_super) {
        __extends(CubemapShadowMapRenderTargetRenderer, _super);
        function CubemapShadowMapRenderTargetRenderer(light) {
            _super.call(this, light.shadowMap);
            this._light = null;
            this._shadowMapRendererUtils = null;
            this._light = light;
        }
        CubemapShadowMapRenderTargetRenderer.create = function (light) {
            var obj = new this(light);
            obj.initWhenCreate();
            return obj;
        };
        CubemapShadowMapRenderTargetRenderer.prototype.initWhenCreate = function () {
            this._shadowMapRendererUtils = wd.CubemapShadowMapRenderTargetRendererUtils.create(this._light, this.texture);
            _super.prototype.initWhenCreate.call(this);
        };
        CubemapShadowMapRenderTargetRenderer.prototype.init = function () {
            var self = this;
            this._handleShadowRendererList();
            this._shadowMapRendererUtils.bindEndLoop(function () {
                self._light.shadowRenderList.forEach(function (childList) {
                    childList.forEach(function (child) {
                        self._shadowMapRendererUtils.clearCubemapShadowMapData(child);
                    });
                });
            });
            this._shadowMapRendererUtils.createShaderWithShaderLib(wd.BuildCubemapShadowMapShaderLib.create());
            _super.prototype.init.call(this);
        };
        CubemapShadowMapRenderTargetRenderer.prototype.dispose = function () {
            _super.prototype.dispose.call(this);
            this._shadowMapRendererUtils.unBindEndLoop();
        };
        CubemapShadowMapRenderTargetRenderer.prototype.getRenderList = function () {
            return this._light.shadowRenderList;
        };
        CubemapShadowMapRenderTargetRenderer.prototype.beforeRender = function () {
            var utils = this._shadowMapRendererUtils;
            this._convertRenderListToCollection(this.getRenderList()).removeRepeatItems().forEach(function (child) {
                utils.setShadowMapData(child);
            });
            this._shadowMapRendererUtils.beforeRender();
        };
        CubemapShadowMapRenderTargetRenderer.prototype.afterRender = function () {
            this._shadowMapRendererUtils.afterRender();
        };
        CubemapShadowMapRenderTargetRenderer.prototype.setCamera = function (camera) {
            var light = this._light;
            camera.aspect = light.shadowMapWidth / light.shadowMapHeight;
            camera.near = light.shadowCameraNear;
            camera.far = light.shadowCameraFar;
        };
        CubemapShadowMapRenderTargetRenderer.prototype.getPosition = function () {
            return this._light.position;
        };
        CubemapShadowMapRenderTargetRenderer.prototype._convertRenderListToCollection = function (renderList) {
            var resultList = wdCb.Collection.create();
            renderList.forEach(function (list) {
                resultList.addChildren(list);
            });
            return resultList;
        };
        CubemapShadowMapRenderTargetRenderer.prototype._handleShadowRendererList = function () {
            var self = this, childrenMap = wdCb.Hash.create();
            this._light.shadowRenderList.forEach(function (childList, direction) {
                var children = [];
                childList.forEach(function (renderTarget) {
                    children = children.concat(self._shadowMapRendererUtils.addAllChildren(renderTarget));
                });
                childrenMap.addChild(direction, children);
            }, this);
            this._light.shadowRenderList.forEach(function (childList, direction) {
                childList.addChildren(childrenMap.getChild(direction));
            });
            this._light.shadowRenderList.forEach(function (childList) {
                childList.removeChild(function (renderTarget) {
                    return self._shadowMapRendererUtils.isContainer(renderTarget);
                });
            });
        };
        return CubemapShadowMapRenderTargetRenderer;
    })(wd.CubemapRenderTargetRenderer);
    wd.CubemapShadowMapRenderTargetRenderer = CubemapShadowMapRenderTargetRenderer;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var DynamicCubemapRenderTargetRenderer = (function (_super) {
        __extends(DynamicCubemapRenderTargetRenderer, _super);
        function DynamicCubemapRenderTargetRenderer() {
            _super.apply(this, arguments);
        }
        DynamicCubemapRenderTargetRenderer.create = function (texture) {
            var obj = new this(texture);
            obj.initWhenCreate();
            return obj;
        };
        DynamicCubemapRenderTargetRenderer.prototype.getRenderList = function () {
            return this.texture.renderList;
        };
        DynamicCubemapRenderTargetRenderer.prototype.setCamera = function (camera) {
            camera.aspect = 1;
            camera.near = this.texture.near;
            camera.far = this.texture.far;
        };
        DynamicCubemapRenderTargetRenderer.prototype.getPosition = function () {
            return this.texture.getPosition();
        };
        return DynamicCubemapRenderTargetRenderer;
    })(wd.CubemapRenderTargetRenderer);
    wd.DynamicCubemapRenderTargetRenderer = DynamicCubemapRenderTargetRenderer;
})(wd || (wd = {}));

var wd;
(function (wd) {
    var ShadowMapRenderTargetRendererUtils = (function () {
        function ShadowMapRenderTargetRendererUtils(light, texture) {
            this.texture = null;
            this.light = null;
            this._endLoopHandler = null;
            this._shader = null;
            this.light = light;
            this.texture = texture;
        }
        ShadowMapRenderTargetRendererUtils.prototype.initWhenCreate = function () {
            this.texture.width = this.light.shadowMapWidth;
            this.texture.height = this.light.shadowMapHeight;
        };
        ShadowMapRenderTargetRendererUtils.prototype.init = function () {
            this.texture.init();
        };
        ShadowMapRenderTargetRendererUtils.prototype.setShadowMapData = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var target = args[0], material = target.getComponent(wd.Geometry).material, shadowMapCamera = null;
            if (args.length === 2) {
                shadowMapCamera = args[1];
            }
            wd.Log.error(!(material instanceof wd.LightMaterial), wd.Log.info.FUNC_MUST_BE("material", "LightMaterial when set shadowMap"));
            this.setMaterialShadowMapData(material, target, shadowMapCamera);
        };
        ShadowMapRenderTargetRendererUtils.prototype.bindEndLoop = function (func) {
            this._endLoopHandler = func;
            wd.EventManager.on(wd.EngineEvent.ENDLOOP, this._endLoopHandler);
        };
        ShadowMapRenderTargetRendererUtils.prototype.unBindEndLoop = function () {
            wd.EventManager.off(wd.EngineEvent.ENDLOOP, this._endLoopHandler);
        };
        ShadowMapRenderTargetRendererUtils.prototype.beforeRender = function () {
            var scene = wd.Director.getInstance().scene;
            scene.useProgram(this._shader);
        };
        ShadowMapRenderTargetRendererUtils.prototype.afterRender = function () {
            var scene = wd.Director.getInstance().scene;
            scene.unUseProgram();
        };
        ShadowMapRenderTargetRendererUtils.prototype.createShaderWithShaderLib = function (lib) {
            this._shader = wd.Shader.create();
            this._shader.addLib(wd.CommonShaderLib.create());
            this._shader.addLib(wd.CommonVerticeShaderLib.create());
            this._shader.addLib(lib);
        };
        ShadowMapRenderTargetRendererUtils.prototype.isContainer = function (gameObject) {
            return !gameObject.hasComponent(wd.Geometry);
        };
        ShadowMapRenderTargetRendererUtils.prototype.addAllChildren = function (gameObject) {
            var children = [], add = function (gameObject) {
                gameObject.forEach(function (child) {
                    children.push(child);
                    add(child);
                });
            };
            add(gameObject);
            return children;
        };
        ShadowMapRenderTargetRendererUtils.prototype.setShadowMap = function (target, shadowMap) {
            var material = null;
            if (!target.hasComponent(wd.Geometry)) {
                return;
            }
            material = target.getComponent(wd.Geometry).material;
            if (material.hasShadowMap(shadowMap)) {
                return;
            }
            wd.Log.error(!(material instanceof wd.LightMaterial), wd.Log.info.FUNC_MUST_BE("material", "LightMaterial when set shadowMap"));
            this.addShadowMap(material, shadowMap);
        };
        return ShadowMapRenderTargetRendererUtils;
    })();
    wd.ShadowMapRenderTargetRendererUtils = ShadowMapRenderTargetRendererUtils;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var wd;
(function (wd) {
    var CubemapShadowMapRenderTargetRendererUtils = (function (_super) {
        __extends(CubemapShadowMapRenderTargetRendererUtils, _super);
        function CubemapShadowMapRenderTargetRendererUtils() {
            _super.apply(this, arguments);
        }
        CubemapShadowMapRenderTargetRendererUtils.create = function (light, texture) {
            var obj = new this(light, texture);
            obj.initWhenCreate();
            return obj;
        };
        CubemapShadowMapRenderTargetRendererUtils.prototype.initWhenCreate = function () {
            var self = this;
            _super.prototype.initWhenCreate.call(this);
            this.light.shadowRenderList.forEach(function (childList) {
                childList.forEach(function (child) {
                    self.setShadowMap(child, self.texture);
                });
            });
        };
        CubemapShadowMapRenderTargetRendererUtils.prototype.clearCubemapShadowMapData = function (target) {
            var material = target.getComponent(wd.Geometry).material;
            material.clearCubemapShadowMapData();
        };
        CubemapShadowMapRenderTargetRendererUtils.prototype.setMaterialShadowMapData = function (material, target, shadowMapCamera) {
            material.addCubemapShadowMapData({
                shadowBias: this.light.shadowBias,
                shadowDarkness: this.light.shadowDarkness,
                lightPos: this.light.position,
                farPlane: this.light.shadowCameraFar
            });
            material.buildCubemapShadowMapData = {
                lightPos: this.light.position,
                farPlane: this.light.shadowCameraFar
            };
        };
        CubemapShadowMapRenderTargetRendererUtils.prototype.addShadowMap = function (material, shadowMap) {
            material.addCubemapShadowMap(shadowMap);
        };
        __decorate([
            wd.require(function (target) {
                var material = target.getComponent(wd.Geometry).material;
                wd.assert(material instanceof wd.LightMaterial, wd.Log.info.FUNC_MUST_BE("material", "LightMaterial when set shadowMap"));
            })
        ], CubemapShadowMapRenderTargetRendererUtils.prototype, "clearCubemapShadowMapData", null);
        return CubemapShadowMapRenderTargetRendererUtils;
    })(wd.ShadowMapRenderTargetRendererUtils);
    wd.CubemapShadowMapRenderTargetRendererUtils = CubemapShadowMapRenderTargetRendererUtils;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var wd;
(function (wd) {
    var TwoDShadowMapRenderTargetRendererUtils = (function (_super) {
        __extends(TwoDShadowMapRenderTargetRendererUtils, _super);
        function TwoDShadowMapRenderTargetRendererUtils() {
            _super.apply(this, arguments);
        }
        TwoDShadowMapRenderTargetRendererUtils.create = function (light, texture) {
            var obj = new this(light, texture);
            obj.initWhenCreate();
            return obj;
        };
        TwoDShadowMapRenderTargetRendererUtils.prototype.initWhenCreate = function () {
            var self = this;
            _super.prototype.initWhenCreate.call(this);
            this.light.shadowRenderList.forEach(function (child) {
                self.setShadowMap(child, self.texture);
            });
        };
        TwoDShadowMapRenderTargetRendererUtils.prototype.clearTwoDShadowMapData = function (target) {
            var material = target.getComponent(wd.Geometry).material;
            material.clearTwoDShadowMapData();
        };
        TwoDShadowMapRenderTargetRendererUtils.prototype.setMaterialShadowMapData = function (material, target, shadowMapCamera) {
            var cameraComponent = shadowMapCamera.getComponent(wd.CameraController);
            material.addTwoDShadowMapData({
                shadowBias: this.light.shadowBias,
                shadowDarkness: this.light.shadowDarkness,
                shadowSize: [this.light.shadowMapWidth, this.light.shadowMapHeight],
                lightPos: this.light.position,
                vpMatrixFromLight: cameraComponent.worldToCameraMatrix.applyMatrix(cameraComponent.pMatrix)
            });
            material.buildTwoDShadowMapData = {
                vpMatrixFromLight: cameraComponent.worldToCameraMatrix.applyMatrix(cameraComponent.pMatrix)
            };
        };
        TwoDShadowMapRenderTargetRendererUtils.prototype.addShadowMap = function (material, shadowMap) {
            material.addTwoDShadowMap(shadowMap);
        };
        __decorate([
            wd.require(function (target) {
                var material = target.getComponent(wd.Geometry).material;
                wd.assert(material instanceof wd.LightMaterial, wd.Log.info.FUNC_MUST_BE("material", "LightMaterial when set shadowMap"));
            })
        ], TwoDShadowMapRenderTargetRendererUtils.prototype, "clearTwoDShadowMapData", null);
        return TwoDShadowMapRenderTargetRendererUtils;
    })(wd.ShadowMapRenderTargetRendererUtils);
    wd.TwoDShadowMapRenderTargetRendererUtils = TwoDShadowMapRenderTargetRendererUtils;
})(wd || (wd = {}));

var wd;
(function (wd) {
    var Renderer = (function () {
        function Renderer() {
            this.skyboxCommand = null;
        }
        Renderer.prototype.init = function () {
        };
        return Renderer;
    })();
    wd.Renderer = Renderer;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var WebGLRenderer = (function (_super) {
        __extends(WebGLRenderer, _super);
        function WebGLRenderer() {
            _super.apply(this, arguments);
            this._commandQueue = wdCb.Collection.create();
            this._clearOptions = {
                color: wd.Color.create("#000000")
            };
        }
        WebGLRenderer.create = function () {
            var obj = new this();
            return obj;
        };
        WebGLRenderer.prototype.createQuadCommand = function () {
            return wd.QuadCommand.create();
        };
        WebGLRenderer.prototype.addCommand = function (command) {
            if (this._commandQueue.hasChild(command)) {
                return;
            }
            this._commandQueue.addChild(command);
            command.init();
        };
        WebGLRenderer.prototype.hasCommand = function () {
            return this._commandQueue.getCount() > 0;
        };
        WebGLRenderer.prototype.render = function () {
            var deviceManager = wd.DeviceManager.getInstance();
            deviceManager.clear(this._clearOptions);
            this._renderOpaqueCommands();
            deviceManager.depthWrite = false;
            this._renderSortedTransparentCommands();
            deviceManager.depthWrite = true;
            if (this.skyboxCommand) {
                deviceManager.depthFunc = wd.DepthFunction.LEQUAL;
                this.skyboxCommand.execute();
                deviceManager.depthFunc = wd.DepthFunction.LESS;
            }
            this._clearCommand();
        };
        WebGLRenderer.prototype.init = function () {
            var deviceManager = wd.DeviceManager.getInstance();
            deviceManager.depthTest = true;
            deviceManager.blend = false;
            deviceManager.setColorWrite(true, true, true, true);
            deviceManager.side = wd.Side.FRONT;
            deviceManager.depthWrite = true;
        };
        WebGLRenderer.prototype.setClearColor = function (color) {
            this._setClearOptions({
                color: color
            });
        };
        WebGLRenderer.prototype._renderOpaqueCommands = function () {
            this._commandQueue
                .removeChild(function (command) {
                return !command.material.blend;
            })
                .forEach(function (command) {
                command.execute();
            });
        };
        WebGLRenderer.prototype._renderSortedTransparentCommands = function () {
            var self = this;
            this._commandQueue
                .sort(function (a, b) {
                return self._getObjectToCameraZDistance(b) - self._getObjectToCameraZDistance(a);
            })
                .forEach(function (command) {
                command.execute();
            });
        };
        WebGLRenderer.prototype._getObjectToCameraZDistance = function (quad) {
            return wd.Director.getInstance().scene.camera.transform.position.z - quad.z;
        };
        WebGLRenderer.prototype._clearCommand = function () {
            this._commandQueue.removeAllChildren();
            this.skyboxCommand = null;
        };
        WebGLRenderer.prototype._setClearOptions = function (clearOptions) {
            wdCb.ExtendUtils.extend(this._clearOptions, clearOptions);
        };
        return WebGLRenderer;
    })(wd.Renderer);
    wd.WebGLRenderer = WebGLRenderer;
})(wd || (wd = {}));

var wd;
(function (wd) {
    (function (DrawMode) {
        DrawMode[DrawMode["TRIANGLES"] = "TRIANGLES"] = "TRIANGLES";
        DrawMode[DrawMode["LINES"] = "LINES"] = "LINES";
    })(wd.DrawMode || (wd.DrawMode = {}));
    var DrawMode = wd.DrawMode;
})(wd || (wd = {}));

var wd;
(function (wd) {
    (function (BufferType) {
        BufferType[BufferType["UNSIGNED_BYTE"] = "UNSIGNED_BYTE"] = "UNSIGNED_BYTE";
        BufferType[BufferType["SHORT"] = "SHORT"] = "SHORT";
        BufferType[BufferType["UNSIGNED_SHORT"] = "UNSIGNED_SHORT"] = "UNSIGNED_SHORT";
        BufferType[BufferType["INT"] = "INT"] = "INT";
        BufferType[BufferType["UNSIGNED_INT"] = "UNSIGNED_INT"] = "UNSIGNED_INT";
        BufferType[BufferType["FLOAT"] = "FLOAT"] = "FLOAT";
    })(wd.BufferType || (wd.BufferType = {}));
    var BufferType = wd.BufferType;
})(wd || (wd = {}));

var wd;
(function (wd) {
    (function (BufferDataType) {
        BufferDataType[BufferDataType["VERTICE"] = "VERTICE"] = "VERTICE";
        BufferDataType[BufferDataType["INDICE"] = "INDICE"] = "INDICE";
        BufferDataType[BufferDataType["NORMAL"] = "NORMAL"] = "NORMAL";
        BufferDataType[BufferDataType["TEXCOORD"] = "TEXCOORD"] = "TEXCOORD";
        BufferDataType[BufferDataType["TANGENT"] = "TANGENT"] = "TANGENT";
        BufferDataType[BufferDataType["COLOR"] = "COLOR"] = "COLOR";
    })(wd.BufferDataType || (wd.BufferDataType = {}));
    var BufferDataType = wd.BufferDataType;
})(wd || (wd = {}));

var wd;
(function (wd) {
    (function (BufferUsage) {
        BufferUsage[BufferUsage["STREAM_DRAW"] = "STREAM_DRAW"] = "STREAM_DRAW";
        BufferUsage[BufferUsage["STATIC_DRAW"] = "STATIC_DRAW"] = "STATIC_DRAW";
        BufferUsage[BufferUsage["DYNAMIC_DRAW"] = "DYNAMIC_DRAW"] = "DYNAMIC_DRAW";
    })(wd.BufferUsage || (wd.BufferUsage = {}));
    var BufferUsage = wd.BufferUsage;
})(wd || (wd = {}));

var wd;
(function (wd) {
    var Buffer = (function () {
        function Buffer() {
            this.buffer = null;
            this.type = null;
            this.count = null;
        }
        Buffer.prototype.dispose = function () {
            wd.DeviceManager.getInstance().gl.deleteBuffer(this.buffer);
            delete this.buffer;
        };
        return Buffer;
    })();
    wd.Buffer = Buffer;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var wd;
(function (wd) {
    var ElementBuffer = (function (_super) {
        __extends(ElementBuffer, _super);
        function ElementBuffer() {
            _super.apply(this, arguments);
            this._typeSize = null;
            this.data = null;
            this._type = null;
        }
        ElementBuffer.create = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var obj = new this();
            obj.initWhenCreate.apply(obj, args);
            return obj;
        };
        Object.defineProperty(ElementBuffer.prototype, "typeSize", {
            get: function () { return this._typeSize; },
            enumerable: true,
            configurable: true
        });
        ElementBuffer.prototype.initWhenCreate = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var gl = wd.DeviceManager.getInstance().gl;
            this.buffer = gl.createBuffer();
            if (!this.buffer) {
                wd.Log.log('Failed to create the this.buffer object');
                return null;
            }
            if (args.length === 0) {
                return;
            }
            else {
                var data = args[0], type = args[1], usage = args[2] || wd.BufferUsage.STATIC_DRAW;
                if (!data || !this._checkDataType(data, type)) {
                    return null;
                }
                gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.buffer);
                gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, data, gl[usage]);
                gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);
                this.type = gl[type];
                this._type = type;
                this.count = data.length;
                this.data = data;
                this._typeSize = this._getInfo(type).size;
                return this.buffer;
            }
        };
        ElementBuffer.prototype.resetData = function (data, type) {
            if (type === void 0) { type = this._type; }
            var gl = wd.DeviceManager.getInstance().gl;
            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.buffer);
            gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, data, gl.DYNAMIC_DRAW);
            this.type = gl[type];
            this._type = type;
            this.data = data;
            this.count = data.length;
            this._typeSize = this._getInfo(type).size;
            return this;
        };
        ElementBuffer.prototype._checkDataType = function (data, type) {
            var info = this._getInfo(type);
            return data instanceof info.typeClass;
        };
        ElementBuffer.prototype._getInfo = function (type) {
            var info = null;
            switch (type) {
                case wd.BufferType.UNSIGNED_BYTE:
                    info = {
                        typeClass: Uint8Array,
                        size: 1
                    };
                    break;
                case wd.BufferType.SHORT:
                    info = {
                        typeClass: Int16Array,
                        size: 2
                    };
                    break;
                case wd.BufferType.UNSIGNED_SHORT:
                    info = {
                        typeClass: Uint16Array,
                        size: 2
                    };
                    break;
                case wd.BufferType.INT:
                    info = {
                        typeClass: Int32Array,
                        size: 4
                    };
                    break;
                case wd.BufferType.UNSIGNED_INT:
                    info = {
                        typeClass: Uint32Array,
                        size: 4
                    };
                    break;
                case wd.BufferType.FLOAT:
                    info = {
                        typeClass: Float32Array,
                        size: 4
                    };
                    break;
                default:
                    wd.Log.error(true, wd.Log.info.FUNC_INVALID("BufferType"));
                    break;
            }
            return info;
        };
        __decorate([
            wd.require(function (data, type) {
                if (type === void 0) { type = this._type; }
                wd.assert(this.buffer, wd.Log.info.FUNC_MUST("create gl buffer"));
            })
        ], ElementBuffer.prototype, "resetData", null);
        return ElementBuffer;
    })(wd.Buffer);
    wd.ElementBuffer = ElementBuffer;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var wd;
(function (wd) {
    var ArrayBuffer = (function (_super) {
        __extends(ArrayBuffer, _super);
        function ArrayBuffer() {
            _super.apply(this, arguments);
            this.size = null;
            this.data = null;
            this._type = null;
        }
        ArrayBuffer.create = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var obj = new this();
            obj.initWhenCreate.apply(obj, args);
            return obj;
        };
        ArrayBuffer.prototype.initWhenCreate = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var gl = wd.DeviceManager.getInstance().gl;
            this.buffer = gl.createBuffer();
            if (!this.buffer) {
                wd.Log.log('Failed to create the this.buffer object');
                return null;
            }
            if (args.length === 0) {
                return;
            }
            else {
                var data = args[0], size = args[1], type = args[2], usage = args[3] || wd.BufferUsage.STATIC_DRAW;
                if (!data) {
                    return null;
                }
                gl.bindBuffer(gl.ARRAY_BUFFER, this.buffer);
                gl.bufferData(gl.ARRAY_BUFFER, data, gl[usage]);
                gl.bindBuffer(gl.ARRAY_BUFFER, null);
                this.size = size;
                this.type = gl[type];
                this._type = type;
                this.count = data.length / size;
                this.data = data;
                return this.buffer;
            }
        };
        ArrayBuffer.prototype.resetData = function (data, size, type) {
            if (size === void 0) { size = this.size; }
            if (type === void 0) { type = this._type; }
            var gl = wd.DeviceManager.getInstance().gl;
            gl.bindBuffer(gl.ARRAY_BUFFER, this.buffer);
            gl.bufferData(gl.ARRAY_BUFFER, data, gl.DYNAMIC_DRAW);
            this.size = size;
            this.type = gl[type];
            this._type = type;
            this.count = data.length / size;
            this.data = data;
            return this;
        };
        __decorate([
            wd.require(function (data, size, type) {
                if (size === void 0) { size = this.size; }
                if (type === void 0) { type = this._type; }
                wd.assert(this.buffer, wd.Log.info.FUNC_MUST("create gl buffer"));
            })
        ], ArrayBuffer.prototype, "resetData", null);
        return ArrayBuffer;
    })(wd.Buffer);
    wd.ArrayBuffer = ArrayBuffer;
})(wd || (wd = {}));

var wd;
(function (wd) {
    var _table = wdCb.Hash.create();
    _table.addChild(wd.BufferDataType.VERTICE, "vertices");
    _table.addChild(wd.BufferDataType.INDICE, "indices");
    _table.addChild(wd.BufferDataType.NORMAL, "normals");
    _table.addChild(wd.BufferDataType.TEXCOORD, "texCoords");
    _table.addChild(wd.BufferDataType.COLOR, "colors");
    _table.addChild(wd.BufferDataType.TANGENT, "tangents");
    var BufferDataTable = (function () {
        function BufferDataTable() {
        }
        BufferDataTable.getGeometryDataName = function (type) {
            var result = _table.getChild(type);
            wd.Log.error(result === void 0, wd.Log.info.FUNC_NOT_EXIST(type, "in BufferDataTable"));
            return result;
        };
        return BufferDataTable;
    })();
    wd.BufferDataTable = BufferDataTable;
})(wd || (wd = {}));

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var wd;
(function (wd) {
    var Program = (function () {
        function Program() {
            this._program = null;
            this._shader = null;
        }
        Program.create = function () {
            var obj = new this();
            return obj;
        };
        Program.prototype.use = function () {
            wd.DeviceManager.getInstance().gl.useProgram(this._program);
        };
        Program.prototype.getUniformLocation = function (name) {
            return wd.DeviceManager.getInstance().gl.getUniformLocation(this._program, name);
        };
        Program.prototype.sendUniformData = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var gl = wd.DeviceManager.getInstance().gl, pos = null, type = null, data = null;
            if (args[0] === null || args[0] instanceof WebGLUniformLocation) {
                pos = args[0];
            }
            else {
                var name_1 = args[0];
                pos = this.getUniformLocation(name_1);
            }
            type = args[1];
            data = args[2];
            if (this.isUniformDataNotExistByLocation(pos) || data === null) {
                return;
            }
            if (wd.JudgeUtils.isFunction(data)) {
                data = data();
            }
            switch (type) {
                case wd.VariableType.FLOAT_1:
                    gl.uniform1f(pos, data);
                    break;
                case wd.VariableType.FLOAT_2:
                    gl.uniform2f(pos, data[0], data[1]);
                    break;
                case wd.VariableType.FLOAT_3:
                    data = this._convertToVector3(data);
                    gl.uniform3f(pos, data.x, data.y, data.z);
                    break;
                case wd.VariableType.FLOAT_4:
                    data = this._convertToVector4(data);
                    gl.uniform4f(pos, data.x, data.y, data.z, data.w);
                    break;
                case wd.VariableType.FLOAT_MAT3:
                    gl.uniformMatrix3fv(pos, false, data.values);
                    break;
                case wd.VariableType.FLOAT_MAT4:
                    gl.uniformMatrix4fv(pos, false, data.values);
                    break;
                case wd.VariableType.NUMBER_1:
                case wd.VariableType.SAMPLER_CUBE:
                case wd.VariableType.SAMPLER_2D:
                    gl.uniform1i(pos, data);
                    break;
                default:
                    wd.Log.error(true, wd.Log.info.FUNC_INVALID("VariableType:", type));
                    break;
            }
        };
        Program.prototype.sendUniformDataFromCustomShader = function () {
            var self = this;
            this._shader.uniforms
                .filter(function (val) {
                return val.value !== wd.VariableCategory.ENGINE;
            })
                .forEach(function (val, key) {
                if (val.type === wd.VariableType.STRUCTURE) {
                    wd.Log.error(!wd.JudgeUtils.isDirectObject(val.value), wd.Log.info.FUNC_MUST_BE("value's type", "object{}"));
                    for (var i in val.value) {
                        self.sendStructureData(key + "." + i, val.value[i].type, val.value[i].value);
                    }
                }
                else {
                    self.sendUniformData(key, val.type, val.value);
                }
            });
        };
        Program.prototype.sendAttributeData = function (name, type, data) {
            var gl = wd.DeviceManager.getInstance().gl, pos = null, buffer = null;
            pos = gl.getAttribLocation(this._program, name);
            if (pos === -1 || data === null) {
                return;
            }
            if (wd.JudgeUtils.isFunction(data)) {
                buffer = data();
                wd.Log.error(!(data instanceof wd.ArrayBuffer), wd.Log.info.FUNC_MUST_BE("ArrayBuffer"));
            }
            else {
                buffer = data;
            }
            switch (type) {
                case wd.VariableType.BUFFER:
                    gl.bindBuffer(gl.ARRAY_BUFFER, buffer.buffer);
                    gl.vertexAttribPointer(pos, buffer.size, buffer.type, false, 0, 0);
                    gl.enableVertexAttribArray(pos);
                    break;
                default:
                    wd.Log.error(true, wd.Log.info.FUNC_INVALID("VariableType:", type));
                    break;
            }
        };
        Program.prototype.sendAttributeDataFromCustomShader = function () {
            var self = this;
            this._shader.attributes
                .filter(function (val) {
                return val.value !== wd.VariableCategory.ENGINE;
            })
                .forEach(function (val, key) {
                self.sendAttributeData(key, self._convertAttributeDataType(val), val.value);
            });
        };
        Program.prototype.sendStructureData = function (name, type, data) {
            this.sendUniformData(name, type, data);
        };
        Program.prototype.initWithShader = function (shader) {
            var gl = wd.DeviceManager.getInstance().gl, vs = null, fs = null;
            this._program = wd.DeviceManager.getInstance().gl.createProgram();
            vs = shader.createVsShader();
            fs = shader.createFsShader();
            this._shader = shader;
            gl.attachShader(this._program, vs);
            gl.attachShader(this._program, fs);
            gl.bindAttribLocation(this._program, 0, "a_position");
            gl.linkProgram(this._program);
            wd.Log.error(gl.getProgramParameter(this._program, gl.LINK_STATUS) === false, gl.getProgramInfoLog(this._program));
            gl.deleteShader(vs);
            gl.deleteShader(fs);
            return this;
        };
        Program.prototype.dispose = function () {
            var gl = wd.DeviceManager.getInstance().gl;
            gl.deleteProgram(this._program);
            this._program = undefined;
        };
        Program.prototype.isUniformDataNotExistByLocation = function (pos) {
            return pos === null;
        };
        Program.prototype._convertAttributeDataType = function (val) {
            return wd.VariableType.BUFFER;
        };
        Program.prototype._convertToVector3 = function (data) {
            if (wd.JudgeUtils.isArray(data)) {
                return wd.Vector3.create(data[0], data[1], data[2]);
            }
            return data;
        };
        Program.prototype._convertToVector4 = function (data) {
            if (wd.JudgeUtils.isArray(data)) {
                return wd.Vector4.create(data[0], data[1], data[2], data[3]);
            }
            return data;
        };
        __decorate([
            wd.require(function (data) {
                wd.assert(wd.JudgeUtils.isArray(data) || data instanceof wd.Vector3, wd.Log.info.FUNC_MUST_BE("shader->attributes->value", "Array<Array<any>> or Array<Vector3> stucture"));
            })
        ], Program.prototype, "_convertToVector3", null);
        __decorate([
            wd.require(function (data) {
                wd.assert(wd.JudgeUtils.isArray(data) || data instanceof wd.Vector4, wd.Log.info.FUNC_MUST_BE("shader->attributes->value", "Array<Array<any>> or Array<Vector4> stucture"));
            })
        ], Program.prototype, "_convertToVector4", null);
        return Program;
    })();
    wd.Program = Program;
})(wd || (wd = {}));

var wd;
(function (wd) {
    var QuadCommand = (function () {
        function QuadCommand() {
            this.buffers = null;
            this.mMatrix = null;
            this.vMatrix = null;
            this.pMatrix = null;
            this.drawMode = wd.DrawMode.TRIANGLES;
            this.z = null;
            this.material = null;
            this.animation = null;
        }
        QuadCommand.create = function () {
            var obj = new this();
            return obj;
        };
        Object.defineProperty(QuadCommand.prototype, "program", {
            get: function () {
                return this.material.program;
            },
            enumerable: true,
            configurable: true
        });
        QuadCommand.prototype.execute = function () {
            this.material.updateTexture();
            this.material.updateShader(this);
            this._draw();
        };
        QuadCommand.prototype.init = function () {
        };
        QuadCommand.prototype._draw = function () {
            var totalNum = 0, startOffset = 0, vertexBuffer = null, gl = wd.DeviceManager.getInstance().gl;
            this._setEffects();
            if (this.buffers.hasChild(wd.BufferDataType.INDICE)) {
                var indexBuffer = this.buffers.getChild(wd.BufferDataType.INDICE);
                totalNum = indexBuffer.count;
                gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer.buffer);
                gl.drawElements(gl[this.drawMode], totalNum, indexBuffer.type, indexBuffer.typeSize * startOffset);
            }
            else {
                vertexBuffer = this.buffers.getChild(wd.BufferDataType.VERTICE);
                totalNum = vertexBuffer.count;
                gl.drawArrays(gl[this.drawMode], startOffset, totalNum);
            }
        };
        QuadCommand.prototype._setEffects = function () {
            var deviceManager = wd.DeviceManager.getInstance(), material = this.material;
            deviceManager.setColorWrite(material.redWrite, material.greenWrite, material.blueWrite, material.alphaWrite);
            deviceManager.polygonOffsetMode = material.polygonOffsetMode;
            deviceManager.side = this._getSide();
            deviceManager.blend = material.blend;
            if (material.blendFuncSeparate && material.blendEquationSeparate) {
                deviceManager.setBlendFuncSeparate(material.blendFuncSeparate);
                deviceManager.setBlendEquationSeparate(material.blendEquationSeparate);
            }
            else {
                wdCb.Log.error(!material.blendSrc || !material.blendDst || !material.blendEquation, wdCb.Log.info.FUNC_MUST("material.blendSrc || material.blendDst || material.blendEquation", "be set"));
                deviceManager.setBlendFunc(material.blendSrc, material.blendDst);
                deviceManager.setBlendEquation(material.blendEquation);
            }
        };
        QuadCommand.prototype._getSide = function () {
            var scene = wd.Director.getInstance().scene;
            return scene.side ? scene.side : this.material.side;
        };
        return QuadCommand;
    })();
    wd.QuadCommand = QuadCommand;
})(wd || (wd = {}));

var wd;
(function (wd) {
    var FrameBuffer = (function () {
        function FrameBuffer(width, height) {
            this.width = null;
            this.height = null;
            this._originScissorTest = null;
            this.width = width;
            this.height = height;
        }
        FrameBuffer.create = function (width, height) {
            var obj = new this(width, height);
            return obj;
        };
        Object.defineProperty(FrameBuffer.prototype, "gl", {
            get: function () {
                return wd.DeviceManager.getInstance().gl;
            },
            enumerable: true,
            configurable: true
        });
        FrameBuffer.prototype.createFrameBuffer = function () {
            return this.gl.createFramebuffer();
        };
        FrameBuffer.prototype.bindFrameBuffer = function (buffer) {
            var gl = this.gl;
            gl.bindFramebuffer(gl.FRAMEBUFFER, buffer);
        };
        FrameBuffer.prototype.setViewport = function () {
            var deviceManager = wd.DeviceManager.getInstance();
            deviceManager.setViewport(0, 0, this.width, this.height);
            this._originScissorTest = deviceManager.scissorTest;
            deviceManager.scissorTest = false;
        };
        FrameBuffer.prototype.restoreViewport = function () {
            var deviceManager = wd.DeviceManager.getInstance(), view = deviceManager.view;
            deviceManager.setViewport(0, 0, view.width, view.height);
            deviceManager.scissorTest = this._originScissorTest;
        };
        FrameBuffer.prototype.dispose = function () {
            this.unBind();
        };
        FrameBuffer.prototype.unBind = function () {
            var gl = this.gl;
            gl.bindFramebuffer(gl.FRAMEBUFFER, null);
            gl.bindRenderbuffer(gl.RENDERBUFFER, null);
        };
        FrameBuffer.prototype.createRenderBuffer = function () {
            var gl = this.gl, renderBuffer = gl.createRenderbuffer();
            wd.Log.error(!renderBuffer, "Failed to create renderbuffer object");
            return renderBuffer;
        };
        FrameBuffer.prototype.attachTexture = function (glTarget, texture) {
            var gl = this.gl;
            gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, glTarget, texture, 0);
        };
        FrameBuffer.prototype.attachRenderBuffer = function (type, renderBuffer) {
            var gl = this.gl;
            gl.bindRenderbuffer(gl.RENDERBUFFER, renderBuffer);
            gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, this.width, this.height);
            gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl[type], gl.RENDERBUFFER, renderBuffer);
        };
        FrameBuffer.prototype.check = function () {
            var gl = this.gl, e = gl.checkFramebufferStatus(gl.FRAMEBUFFER);
            if (e !== gl.FRAMEBUFFER_COMPLETE) {
                wd.Log.error(true, "Frame buffer object is incomplete:" + e.toString());
            }
        };
        return FrameBuffer;
    })();
    wd.FrameBuffer = FrameBuffer;
})(wd || (wd = {}));

var wd;
(function (wd) {
    var Shader = (function () {
        function Shader() {
            this._attributes = wdCb.Hash.create();
            this._uniforms = wdCb.Hash.create();
            this._vsSource = "";
            this._fsSource = "";
            this.program = wd.Program.create();
            this._definitionDataDirty = true;
            this._libs = wdCb.Collection.create();
            this._sourceBuilder = wd.ShaderSourceBuilder.create();
        }
        Shader.create = function () {
            var obj = new this();
            return obj;
        };
        Object.defineProperty(Shader.prototype, "attributes", {
            get: function () {
                return this._attributes;
            },
            set: function (attributes) {
                if (this._isNotEqual(attributes, this._attributes)) {
                    this._definitionDataDirty = true;
                }
                this._attributes = attributes;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Shader.prototype, "uniforms", {
            get: function () {
                return this._uniforms;
            },
            set: function (uniforms) {
                if (this._isNotEqual(uniforms, this._uniforms)) {
                    this._definitionDataDirty = true;
                }
                this._uniforms = uniforms;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Shader.prototype, "vsSource", {
            get: function () {
                return this._vsSource;
            },
            set: function (vsSource) {
                if (vsSource !== this._vsSource) {
                    this._definitionDataDirty = true;
                }
                this._vsSource = vsSource;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Shader.prototype, "fsSource", {
            get: function () {
                return this._fsSource;
            },
            set: function (fsSource) {
                if (fsSource !== this._fsSource) {
                    this._definitionDataDirty = true;
                }
                this._fsSource = fsSource;
            },
            enumerable: true,
            configurable: true
        });
        Shader.prototype.createVsShader = function () {
            var gl = wd.DeviceManager.getInstance().gl;
            return this._initShader(gl.createShader(gl.VERTEX_SHADER), this.vsSource);
        };
        Shader.prototype.createFsShader = function () {
            var gl = wd.DeviceManager.getInstance().gl;
            return this._initShader(gl.createShader(gl.FRAGMENT_SHADER), this.fsSource);
        };
        Shader.prototype.isEqual = function (other) {
            return this.vsSource === other.vsSource
                && this.fsSource === other.fsSource;
        };
        Shader.prototype.init = function () {
        };
        Shader.prototype.update = function (quadCmd, material) {
            var program = this.program;
            this.buildDefinitionData(quadCmd, material);
            if (this._definitionDataDirty) {
                this.program.initWithShader(this);
                this._definitionDataDirty = false;
            }
            this.program.use();
            this._libs.forEach(function (lib) {
                lib.sendShaderVariables(program, quadCmd, material);
            });
            program.sendAttributeDataFromCustomShader();
            program.sendUniformDataFromCustomShader();
            material.mapManager.sendData(program);
        };
        Shader.prototype.hasLib = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            if (args[0] instanceof wd.ShaderLib) {
                var lib = args[0];
                return this._libs.hasChild(lib);
            }
            else {
                var _class = args[0];
                return this._libs.hasChild(function (lib) {
                    return lib instanceof _class;
                });
            }
        };
        Shader.prototype.addLib = function (lib) {
            this._libs.addChild(lib);
        };
        Shader.prototype.addShaderLibToTop = function (lib) {
            this._libs.unShiftChild(lib);
        };
        Shader.prototype.getLib = function (libClass) {
            return this._libs.findOne(function (lib) {
                return lib instanceof libClass;
            });
        };
        Shader.prototype.getLibs = function () {
            return this._libs;
        };
        Shader.prototype.removeLib = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            return this._libs.removeChild(args[0]);
        };
        Shader.prototype.removeAllLibs = function () {
            this._libs.removeAllChildren();
        };
        Shader.prototype.sortLib = function (func) {
            this._libs = this._libs.sort(func);
        };
        Shader.prototype.read = function (definitionData) {
            this._sourceBuilder.read(definitionData);
        };
        Shader.prototype.buildDefinitionData = function (quadCmd, material) {
            this._libs.forEach(function (lib) {
                lib.setShaderDefinition(quadCmd, material);
            });
            this._sourceBuilder.clearShaderDefinition();
            this._sourceBuilder.build(this._libs);
            this.attributes = this._sourceBuilder.attributes;
            this.uniforms = this._sourceBuilder.uniforms;
            this.vsSource = this._sourceBuilder.vsSource;
            this.fsSource = this._sourceBuilder.fsSource;
        };
        Shader.prototype._initShader = function (shader, source) {
            var gl = wd.DeviceManager.getInstance().gl;
            gl.shaderSource(shader, source);
            gl.compileShader(shader);
            if (gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
                return shader;
            }
            else {
                wd.Log.log(gl.getShaderInfoLog(shader));
                wd.Log.log("attributes:\n", this.attributes);
                wd.Log.log("uniforms:\n", this.uniforms);
                wd.Log.log("source:\n", source);
            }
        };
        Shader.prototype._isNotEqual = function (list1, list2) {
            var result = false;
            list1.forEach(function (data, key) {
                var list2Data = list2.getChild(key);
                if (!list2Data || data.type !== list2Data.type || data.value !== list2Data.value) {
                    result = true;
                    return wdCb.$BREAK;
                }
            });
            return result;
        };
        return Shader;
    })();
    wd.Shader = Shader;
})(wd || (wd = {}));

var wd;
(function (wd) {
    var ShaderSourceBuilder = (function () {
        function ShaderSourceBuilder() {
            this.attributes = wdCb.Hash.create();
            this.uniforms = wdCb.Hash.create();
            this.vsSource = "";
            this.vsSourceTop = "";
            this.vsSourceDefine = "";
            this.vsSourceVarDeclare = "";
            this.vsSourceFuncDeclare = "";
            this.vsSourceFuncDefine = "";
            this.vsSourceBody = "";
            this.fsSource = "";
            this.fsSourceTop = "";
            this.fsSourceDefine = "";
            this.fsSourceVarDeclare = "";
            this.fsSourceFuncDeclare = "";
            this.fsSourceFuncDefine = "";
            this.fsSourceBody = "";
            this.vsSourceDefineList = wdCb.Collection.create();
            this.fsSourceDefineList = wdCb.Collection.create();
            this.attributesFromShaderLib = wdCb.Hash.create();
            this.uniformsFromShaderLib = wdCb.Hash.create();
            this.vsSourceTopFromShaderLib = "";
            this.vsSourceDefineFromShaderLib = "";
            this.vsSourceVarDeclareFromShaderLib = "";
            this.vsSourceFuncDeclareFromShaderLib = "";
            this.vsSourceFuncDefineFromShaderLib = "";
            this.vsSourceBodyFromShaderLib = "";
            this.fsSourceTopFromShaderLib = "";
            this.fsSourceDefineFromShaderLib = "";
            this.fsSourceVarDeclareFromShaderLib = "";
            this.fsSourceFuncDeclareFromShaderLib = "";
            this.fsSourceFuncDefineFromShaderLib = "";
            this.fsSourceBodyFromShaderLib = "";
        }
        ShaderSourceBuilder.create = function () {
            var obj = new this();
            return obj;
        };
        ShaderSourceBuilder.prototype.read = function (definitionData) {
            if (definitionData.attributes) {
                this.attributesFromShaderLib = (definitionData.attributes instanceof wdCb.Hash ? definitionData.attributes : wdCb.Hash.create(definitionData.attributes));
            }
            if (definitionData.uniforms) {
                this.uniformsFromShaderLib = (definitionData.uniforms instanceof wdCb.Hash ? definitionData.uniforms : wdCb.Hash.create(definitionData.uniforms));
            }
            this.vsSourceTopFromShaderLib = definitionData.vsSourceTop || "";
            this.vsSourceDefineFromShaderLib = definitionData.vsSourceDefine || "";
            this.vsSourceVarDeclareFromShaderLib = definitionData.vsSourceVarDeclare || "";
            this.vsSourceFuncDeclareFromShaderLib = definitionData.vsSourceFuncDeclare || "";
            this.vsSourceFuncDefineFromShaderLib = definitionData.vsSourceFuncDefine || "";
            this.vsSourceBodyFromShaderLib = definitionData.vsSourceBody || "";
            this.fsSourceTopFromShaderLib = definitionData.fsSourceTop || "";
            this.fsSourceDefineFromShaderLib = definitionData.fsSourceDefine || "";
            this.fsSourceVarDeclareFromShaderLib = definitionData.fsSourceVarDeclare || "";
            this.fsSourceFuncDeclareFromShaderLib = definitionData.fsSourceFuncDeclare || "";
            this.fsSourceFuncDefineFromShaderLib = definitionData.fsSourceFuncDefine || "";
            this.fsSourceBodyFromShaderLib = definitionData.fsSourceBody || "";
        };
        ShaderSourceBuilder.prototype.build = function (libs) {
            var self = this;
            this._readLibSource(libs);
            this._buildVsSource();
            this._buildFsSource();
            this.attributes
                .filter(function (data) {
                return (wd.JudgeUtils.isArray(data.value) || wd.JudgeUtils.isFloatArray(data.value)) && data.value !== wd.VariableCategory.ENGINE;
            })
                .forEach(function (data, key) {
                data.value = self._convertArrayToArrayBuffer(data.type, data.value);
            });
        };
        ShaderSourceBuilder.prototype.clearShaderDefinition = function () {
            this.attributes.removeAllChildren();
            this.uniforms.removeAllChildren();
            this.vsSourceDefineList.removeAllChildren();
            this.fsSourceDefineList.removeAllChildren();
            this.vsSourceTop = "";
            this.vsSourceDefine = "";
            this.vsSourceVarDeclare = "";
            this.vsSourceFuncDeclare = "";
            this.vsSourceFuncDefine = "";
            this.vsSourceBody = "";
            this.fsSourceTop = "";
            this.fsSourceDefine = "";
            this.fsSourceVarDeclare = "";
            this.fsSourceFuncDeclare = "";
            this.fsSourceFuncDefine = "";
            this.fsSourceBody = "";
        };
        ShaderSourceBuilder.prototype._readLibSource = function (libs) {
            var self = this, vsSourceTop = "", vsSourceDefine = "", vsSourceVarDeclare = "", vsSourceFuncDeclare = "", vsSourceFuncDefine = "", vsSourceBody = "", fsSourceTop = "", fsSourceDefine = "", fsSourceVarDeclare = "", fsSourceFuncDeclare = "", fsSourceFuncDefine = "", fsSourceBody = "";
            libs.forEach(function (lib) {
                self.attributes.addChildren(lib.attributes);
                self.uniforms.addChildren(lib.uniforms);
                vsSourceTop += lib.vsSourceTop;
                vsSourceDefine += lib.vsSourceDefine;
                vsSourceVarDeclare += lib.vsSourceVarDeclare;
                vsSourceFuncDeclare += lib.vsSourceFuncDeclare;
                vsSourceFuncDefine += lib.vsSourceFuncDefine;
                vsSourceBody += lib.vsSourceBody;
                fsSourceTop += lib.fsSourceTop;
                fsSourceDefine += lib.fsSourceDefine;
                fsSourceVarDeclare += lib.fsSourceVarDeclare;
                fsSourceFuncDeclare += lib.fsSourceFuncDeclare;
                fsSourceFuncDefine += lib.fsSourceFuncDefine;
                fsSourceBody += lib.fsSourceBody;
                self.vsSourceDefineList.addChildren(lib.vsSourceDefineList);
                self.fsSourceDefineList.addChildren(lib.fsSourceDefineList);
            });
            this.attributes.addChildren(this.attributesFromShaderLib);
            this.uniforms.addChildren(this.uniformsFromShaderLib);
            this.vsSourceTop = vsSourceTop + this.vsSourceTopFromShaderLib;
            this.vsSourceDefine = vsSourceDefine + this.vsSourceDefineFromShaderLib;
            this.vsSourceVarDeclare = vsSourceVarDeclare + this.vsSourceVarDeclareFromShaderLib;
            this.vsSourceFuncDeclare = vsSourceFuncDeclare + this.vsSourceFuncDeclareFromShaderLib;
            this.vsSourceFuncDefine = vsSourceFuncDefine + this.vsSourceFuncDefineFromShaderLib;
            this.vsSourceBody = vsSourceBody + this.vsSourceBodyFromShaderLib;
            this.fsSourceTop = fsSourceTop + this.fsSourceTopFromShaderLib;
            this.fsSourceDefine = fsSourceDefine + this.fsSourceDefineFromShaderLib;
            this.fsSourceVarDeclare = fsSourceVarDeclare + this.fsSourceVarDeclareFromShaderLib;
            this.fsSourceFuncDeclare = fsSourceFuncDeclare + this.fsSourceFuncDeclareFromShaderLib;
            this.fsSourceFuncDefine = fsSourceFuncDefine + this.fsSourceFuncDefineFromShaderLib;
            this.fsSourceBody = fsSourceBody + this.fsSourceBodyFromShaderLib;
        };
        ShaderSourceBuilder.prototype._buildVsSource = function () {
            this.vsSource = this._buildVsSourceTop() + this._buildVsSourceDefine() + this._buildVsSourceVarDeclare() + this._buildVsSourceFuncDeclare() + this._buildVsSourceFuncDefine() + this._buildVsSourceBody();
        };
        ShaderSourceBuilder.prototype._buildFsSource = function () {
            this.fsSource = this._buildFsSourceTop() + this._buildFsSourceDefine() + this._buildFsSourceVarDeclare() + this._buildFsSourceFuncDeclare() + this._buildFsSourceFuncDefine() + this._buildFsSourceBody();
        };
        ShaderSourceBuilder.prototype._buildVsSourceTop = function () {
            return this._getPrecisionSource() + this.vsSourceTop;
        };
        ShaderSourceBuilder.prototype._buildVsSourceDefine = function () {
            return this._buildSourceDefine(this.vsSourceDefineList) + this.vsSourceDefine;
        };
        ShaderSourceBuilder.prototype._buildVsSourceVarDeclare = function () {
            return this._generateAttributeSource() + this._generateUniformSource(this.vsSourceVarDeclare, this.vsSourceFuncDefine, this.vsSourceBody) + this.vsSourceVarDeclare;
        };
        ShaderSourceBuilder.prototype._buildVsSourceFuncDeclare = function () {
            return this.vsSourceFuncDeclare;
        };
        ShaderSourceBuilder.prototype._buildVsSourceFuncDefine = function () {
            return this.vsSourceFuncDefine;
        };
        ShaderSourceBuilder.prototype._buildVsSourceBody = function () {
            return wd.ShaderSnippet.main_begin + this.vsSourceBody + wd.ShaderSnippet.main_end;
        };
        ShaderSourceBuilder.prototype._buildFsSourceTop = function () {
            return this._getPrecisionSource() + this.fsSourceTop;
        };
        ShaderSourceBuilder.prototype._buildFsSourceDefine = function () {
            return this._buildSourceDefine(this.fsSourceDefineList) + this.fsSourceDefine;
        };
        ShaderSourceBuilder.prototype._buildFsSourceVarDeclare = function () {
            return this._generateUniformSource(this.fsSourceVarDeclare, this.fsSourceFuncDefine, this.fsSourceBody) + this.fsSourceVarDeclare;
        };
        ShaderSourceBuilder.prototype._buildFsSourceFuncDeclare = function () {
            return this.fsSourceFuncDeclare;
        };
        ShaderSourceBuilder.prototype._buildFsSourceFuncDefine = function () {
            return this.fsSourceFuncDefine;
        };
        ShaderSourceBuilder.prototype._buildFsSourceBody = function () {
            return wd.ShaderSnippet.main_begin + this.fsSourceBody + wd.ShaderSnippet.main_end;
        };
        ShaderSourceBuilder.prototype._buildSourceDefine = function (defineList) {
            var result = "";
            defineList.forEach(function (define) {
                if (define.value === void 0) {
                    result += "#define " + define.name + "\n";
                }
                else {
                    result += "#define " + define.name + " " + define.value + "\n";
                }
            });
            return result;
        };
        ShaderSourceBuilder.prototype._getPrecisionSource = function () {
            var precision = wd.GPUDetector.getInstance().precision, result = null;
            switch (precision) {
                case wd.GPUPrecision.HIGHP:
                    result = wd.ShaderChunk.highp_fragment.top;
                    break;
                case wd.GPUPrecision.MEDIUMP:
                    result = wd.ShaderChunk.mediump_fragment.top;
                    break;
                case wd.GPUPrecision.LOWP:
                    result = wd.ShaderChunk.lowp_fragment.top;
                    break;
                default:
                    result = "";
                    break;
            }
            return result;
        };
        ShaderSourceBuilder.prototype._generateAttributeSource = function () {
            var result = "";
            this.attributes.filter(function (data, key) {
                return !!data;
            }).forEach(function (data, key) {
                result += "attribute " + wd.VariableTypeTable.getVariableType(data.type) + " " + key + ";\n";
            });
            return result;
        };
        ShaderSourceBuilder.prototype._generateUniformSource = function (sourceVarDeclare, sourceFuncDefine, sourceBody) {
            var result = "", self = this;
            this.uniforms.filter(function (data, key) {
                return !!data && data.type !== wd.VariableType.STRUCTURE && data.type !== wd.VariableType.STRUCTURES && !self._isExistInSource(key, sourceVarDeclare) && (self._isExistInSource(key, sourceFuncDefine) || self._isExistInSource(key, sourceBody));
            }).forEach(function (data, key) {
                result += "uniform " + wd.VariableTypeTable.getVariableType(data.type) + " " + key + ";\n";
            });
            return result;
        };
        ShaderSourceBuilder.prototype._isExistInSource = function (key, source) {
            return source.indexOf(key) !== -1;
        };
        ShaderSourceBuilder.prototype._convertArrayToArrayBuffer = function (type, value) {
            var size = this._getBufferSize(type);
            if (wd.JudgeUtils.isArray(value)) {
                return wd.ArrayBuffer.create(new Float32Array(value), size, wd.BufferType.FLOAT);
            }
            else if (wd.JudgeUtils.isFloatArray(value)) {
                return wd.ArrayBuffer.create(value, size, wd.BufferType.FLOAT);
            }
        };
        ShaderSourceBuilder.prototype._getBufferSize = function (type) {
            var size = null;
            switch (type) {
                case wd.VariableType.FLOAT_1:
                case wd.VariableType.NUMBER_1:
                    size = 1;
                    break;
                case wd.VariableType.FLOAT_3:
                    size = 3;
                    break;
                case wd.VariableType.FLOAT_4:
                    size = 4;
                    break;
                default:
                    wd.Log.error(true, wd.Log.info.FUNC_UNEXPECT("VariableType", type));
                    break;
            }
            return size;
        };
        return ShaderSourceBuilder;
    })();
    wd.ShaderSourceBuilder = ShaderSourceBuilder;
})(wd || (wd = {}));

var wd;
(function (wd) {
    (function (VariableType) {
        VariableType[VariableType["FLOAT_1"] = 0] = "FLOAT_1";
        VariableType[VariableType["FLOAT_2"] = 1] = "FLOAT_2";
        VariableType[VariableType["FLOAT_3"] = 2] = "FLOAT_3";
        VariableType[VariableType["FLOAT_4"] = 3] = "FLOAT_4";
        VariableType[VariableType["FLOAT_MAT3"] = 4] = "FLOAT_MAT3";
        VariableType[VariableType["FLOAT_MAT4"] = 5] = "FLOAT_MAT4";
        VariableType[VariableType["BUFFER"] = 6] = "BUFFER";
        VariableType[VariableType["SAMPLER_CUBE"] = 7] = "SAMPLER_CUBE";
        VariableType[VariableType["SAMPLER_2D"] = 8] = "SAMPLER_2D";
        VariableType[VariableType["NUMBER_1"] = 9] = "NUMBER_1";
        VariableType[VariableType["STRUCTURE"] = 10] = "STRUCTURE";
        VariableType[VariableType["STRUCTURES"] = 11] = "STRUCTURES";
    })(wd.VariableType || (wd.VariableType = {}));
    var VariableType = wd.VariableType;
})(wd || (wd = {}));

var wd;
(function (wd) {
    (function (VariableCategory) {
        VariableCategory[VariableCategory["ENGINE"] = "ENGINE"] = "ENGINE";
        VariableCategory[VariableCategory["CUSTOM"] = "CUSTOM"] = "CUSTOM";
    })(wd.VariableCategory || (wd.VariableCategory = {}));
    var VariableCategory = wd.VariableCategory;
})(wd || (wd = {}));

var wd;
(function (wd) {
    var VariableLib = (function () {
        function VariableLib() {
        }
        VariableLib.a_position = {
            type: wd.VariableType.FLOAT_3,
            value: wd.VariableCategory.ENGINE
        };
        VariableLib.a_currentFramePosition = {
            type: wd.VariableType.FLOAT_3,
            value: wd.VariableCategory.ENGINE
        };
        VariableLib.a_nextFramePosition = {
            type: wd.VariableType.FLOAT_3,
            value: wd.VariableCategory.ENGINE
        };
        VariableLib.a_normal = {
            type: wd.VariableType.FLOAT_3,
            value: wd.VariableCategory.ENGINE
        };
        VariableLib.a_currentFrameNormal = {
            type: wd.VariableType.FLOAT_3,
            value: wd.VariableCategory.ENGINE
        };
        VariableLib.a_nextFrameNormal = {
            type: wd.VariableType.FLOAT_3,
            value: wd.VariableCategory.ENGINE
        };
        VariableLib.a_color = {
            type: wd.VariableType.FLOAT_3,
            value: wd.VariableCategory.ENGINE
        };
        VariableLib.a_texCoord = {
            type: wd.VariableType.FLOAT_2,
            value: wd.VariableCategory.ENGINE
        };
        VariableLib.a_tangent = {
            type: wd.VariableType.FLOAT_3,
            value: wd.VariableCategory.ENGINE
        };
        VariableLib.u_mMatrix = {
            type: wd.VariableType.FLOAT_MAT4,
            value: wd.VariableCategory.ENGINE
        };
        VariableLib.u_vMatrix = {
            type: wd.VariableType.FLOAT_MAT4,
            value: wd.VariableCategory.ENGINE
        };
        VariableLib.u_pMatrix = {
            type: wd.VariableType.FLOAT_MAT4,
            value: wd.VariableCategory.ENGINE
        };
        VariableLib.u_normalMatrix = {
            type: wd.VariableType.FLOAT_MAT3,
            value: wd.VariableCategory.ENGINE
        };
        VariableLib.u_samplerCube0 = {
            type: wd.VariableType.SAMPLER_CUBE,
            value: wd.VariableCategory.ENGINE
        };
        VariableLib.u_sampler2D0 = {
            type: wd.VariableType.SAMPLER_2D,
            value: wd.VariableCategory.ENGINE
        };
        VariableLib.u_sampler2D1 = {
            type: wd.VariableType.SAMPLER_2D,
            value: wd.VariableCategory.ENGINE
        };
        VariableLib.u_diffuseMapSampler = {
            type: wd.VariableType.SAMPLER_2D,
            value: wd.VariableCategory.ENGINE
        };
        VariableLib.u_specularMapSampler = {
            type: wd.VariableType.SAMPLER_2D,
            value: wd.VariableCategory.ENGINE
        };
        VariableLib.u_normalMapSampler = {
            type: wd.VariableType.SAMPLER_2D,
            value: wd.VariableCategory.ENGINE
        };
        VariableLib.u_mirrorSampler = {
            type: wd.VariableType.SAMPLER_2D,
            value: wd.VariableCategory.ENGINE
        };
        VariableLib.u_cameraPos = {
            type: wd.VariableType.FLOAT_3,
            value: wd.VariableCategory.ENGINE
        };
        VariableLib.u_refractionRatio = {
            type: wd.VariableType.FLOAT_1,
            value: wd.VariableCategory.ENGINE
        };
        VariableLib.u_reflectivity = {
            type: wd.VariableType.FLOAT_1,
            value: wd.VariableCategory.ENGINE
        };
        VariableLib.u_sourceRegion = {
            type: wd.VariableType.FLOAT_4,
            value: wd.VariableCategory.ENGINE
        };
        VariableLib.u_repeatRegion = {
            type: wd.VariableType.FLOAT_4,
            value: wd.VariableCategory.ENGINE
        };
        VariableLib.u_combineMode = {
            type: wd.VariableType.NUMBER_1,
            value: wd.VariableCategory.ENGINE
        };
        VariableLib.u_mixRatio = {
            type: wd.VariableType.FLOAT_1,
            value: wd.VariableCategory.ENGINE
        };
        VariableLib.u_diffuse = {
            type: wd.VariableType.FLOAT_3,
            value: wd.VariableCategory.ENGINE
        };
        VariableLib.u_specular = {
            type: wd.VariableType.FLOAT_3,
            value: wd.VariableCategory.ENGINE
        };
        VariableLib.u_shininess = {
            type: wd.VariableType.FLOAT_1,
            value: wd.VariableCategory.ENGINE
        };
        VariableLib.u_isBothSide = {
            type: wd.VariableType.NUMBER_1,
            value: wd.VariableCategory.ENGINE
        };
        VariableLib.u_opacity = {
            type: wd.VariableType.FLOAT_1,
            value: wd.VariableCategory.ENGINE
        };
        VariableLib.u_ambient = {
            type: wd.VariableType.FLOAT_3,
            value: wd.VariableCategory.ENGINE
        };
        VariableLib.u_directionLights = {
            type: wd.VariableType.STRUCTURES,
            value: wd.VariableCategory.ENGINE
        };
        VariableLib.u_pointLights = {
            type: wd.VariableType.STRUCTURES,
            value: wd.VariableCategory.ENGINE
        };
        VariableLib.u_vpMatrixFromLight = {
            type: wd.VariableType.FLOAT_MAT4,
            value: wd.VariableCategory.ENGINE
        };
        VariableLib.u_lightPos = {
            type: wd.VariableType.FLOAT_3,
            value: wd.VariableCategory.ENGINE
        };
        VariableLib.u_farPlane = {
            type: wd.VariableType.FLOAT_1,
            value: wd.VariableCategory.ENGINE
        };
        VariableLib.u_interpolation = {
            type: wd.VariableType.FLOAT_1,
            value: wd.VariableCategory.ENGINE
        };
        return VariableLib;
    })();
    wd.VariableLib = VariableLib;
})(wd || (wd = {}));

var wd;
(function (wd) {
    var _table = wdCb.Hash.create();
    _table.addChild(wd.VariableType.FLOAT_1, "float");
    _table.addChild(wd.VariableType.FLOAT_2, "vec2");
    _table.addChild(wd.VariableType.FLOAT_3, "vec3");
    _table.addChild(wd.VariableType.FLOAT_4, "vec4");
    _table.addChild(wd.VariableType.FLOAT_MAT3, "mat3");
    _table.addChild(wd.VariableType.FLOAT_MAT4, "mat4");
    _table.addChild(wd.VariableType.NUMBER_1, "int");
    _table.addChild(wd.VariableType.SAMPLER_CUBE, "samplerCube");
    _table.addChild(wd.VariableType.SAMPLER_2D, "sampler2D");
    var VariableTypeTable = (function () {
        function VariableTypeTable() {
        }
        VariableTypeTable.getVariableType = function (type) {
            var result = _table.getChild(type);
            wd.Log.error(result === void 0, wd.Log.info.FUNC_NOT_EXIST(type, "in VariableTypeTable"));
            return result;
        };
        return VariableTypeTable;
    })();
    wd.VariableTypeTable = VariableTypeTable;
})(wd || (wd = {}));

var wd;
(function (wd) {
    var _table = wdCb.Hash.create();
    _table.addChild("diffuseMap", "u_diffuseMapSampler");
    _table.addChild("specularMap", "u_specularMapSampler");
    _table.addChild("normalMap", "u_normalMapSampler");
    _table.addChild("mirrorReflectionMap", "u_mirrorSampler");
    var VariableNameTable = (function () {
        function VariableNameTable() {
        }
        VariableNameTable.getVariableName = function (name) {
            var result = _table.getChild(name);
            wd.Log.error(result === void 0, wd.Log.info.FUNC_NOT_EXIST(name, "in VariableNameTable"));
            return result;
        };
        return VariableNameTable;
    })();
    wd.VariableNameTable = VariableNameTable;
})(wd || (wd = {}));

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var wd;
(function (wd) {
    var ShaderLib = (function () {
        function ShaderLib() {
            this.type = wd.ABSTRACT_ATTRIBUTE;
            this.attributes = wdCb.Hash.create();
            this.uniforms = wdCb.Hash.create();
            this.vsSourceTop = "";
            this.vsSourceDefine = "";
            this.vsSourceVarDeclare = "";
            this.vsSourceFuncDeclare = "";
            this.vsSourceFuncDefine = "";
            this.vsSourceBody = "";
            this.fsSourceTop = "";
            this.fsSourceDefine = "";
            this.fsSourceVarDeclare = "";
            this.fsSourceFuncDeclare = "";
            this.fsSourceFuncDefine = "";
            this.fsSourceBody = "";
            this.vsSourceDefineList = wdCb.Collection.create();
            this.fsSourceDefineList = wdCb.Collection.create();
        }
        ShaderLib.prototype.setShaderDefinition = function (quadCmd, material) {
            var vs = null, fs = null;
            this._clearShaderDefinition();
            vs = this.getVsChunk();
            fs = this.getFsChunk();
            vs && this.setVsSource(vs);
            fs && this.setFsSource(fs);
        };
        ShaderLib.prototype.getVsChunk = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var type = args.length === 0 ? this.type : args[0];
            return this._getChunk(type, ShaderLibType.vs);
        };
        ShaderLib.prototype.getFsChunk = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var type = args.length === 0 ? this.type : args[0];
            return this._getChunk(type, ShaderLibType.fs);
        };
        ShaderLib.prototype.setVsSource = function (vs, operator) {
            if (operator === void 0) { operator = "="; }
            this._setSource(vs, ShaderLibType.vs, operator);
        };
        ShaderLib.prototype.setFsSource = function (fs, operator) {
            if (operator === void 0) { operator = "="; }
            this._setSource(fs, ShaderLibType.fs, operator);
        };
        ShaderLib.prototype.addAttributeVariable = function (variableArr) {
            this._addVariable(this.attributes, variableArr);
        };
        ShaderLib.prototype.addUniformVariable = function (variableArr) {
            this._addVariable(this.uniforms, variableArr);
        };
        ShaderLib.prototype.sendAttributeData = function (program, name, data) {
            program.sendAttributeData(name, wd.VariableType.BUFFER, data);
        };
        ShaderLib.prototype.sendUniformData = function (program, name, data) {
            program.sendUniformData(name, wd.VariableLib[name].type, data);
        };
        ShaderLib.prototype._clearShaderDefinition = function () {
            this.attributes.removeAllChildren();
            this.uniforms.removeAllChildren();
            this.vsSourceDefineList.removeAllChildren();
            this.fsSourceDefineList.removeAllChildren();
            this.vsSourceTop = "";
            this.vsSourceDefine = "";
            this.vsSourceVarDeclare = "";
            this.vsSourceFuncDeclare = "";
            this.vsSourceFuncDefine = "";
            this.vsSourceBody = "";
            this.fsSourceTop = "";
            this.fsSourceDefine = "";
            this.fsSourceVarDeclare = "";
            this.fsSourceFuncDeclare = "";
            this.fsSourceFuncDefine = "";
            this.fsSourceBody = "";
        };
        ShaderLib.prototype._getChunk = function (type, sourceType) {
            var key = null;
            if (type.indexOf(".glsl") > -1) {
                key = "" + wdCb.PathUtils.basename(type, ".glsl");
            }
            else {
                if (sourceType === ShaderLibType.vs) {
                    key = type + "_vertex";
                }
                else {
                    key = type + "_fragment";
                }
            }
            return wd.ShaderChunk[key] ? wd.ShaderChunk[key] : wd.ShaderChunk.empty;
        };
        ShaderLib.prototype._setSource = function (chunk, sourceType, operator) {
            if (!chunk) {
                return;
            }
            switch (operator) {
                case "+":
                    this[(sourceType + "SourceTop")] += chunk.top;
                    this[(sourceType + "SourceDefine")] += chunk.define;
                    this[(sourceType + "SourceVarDeclare")] += chunk.varDeclare;
                    this[(sourceType + "SourceFuncDeclare")] += chunk.funcDeclare;
                    this[(sourceType + "SourceFuncDefine")] += chunk.funcDefine;
                    this[(sourceType + "SourceBody")] += chunk.body;
                    break;
                case "=":
                    this[(sourceType + "SourceTop")] = chunk.top;
                    this[(sourceType + "SourceDefine")] = chunk.define;
                    this[(sourceType + "SourceVarDeclare")] = chunk.varDeclare;
                    this[(sourceType + "SourceFuncDeclare")] = chunk.funcDeclare;
                    this[(sourceType + "SourceFuncDefine")] = chunk.funcDefine;
                    this[(sourceType + "SourceBody")] = chunk.body;
                    break;
                default:
                    wd.Log.error(true, wd.Log.info.FUNC_INVALID("opertor:", operator));
                    break;
            }
        };
        ShaderLib.prototype._addVariable = function (target, variableArr) {
            variableArr.forEach(function (variable) {
                wd.Log.assert(wd.VariableLib[variable], wd.Log.info.FUNC_SHOULD(variable, "exist in VariableLib"));
                target.addChild(variable, wd.VariableLib[variable]);
            });
        };
        __decorate([
            wd.virtual
        ], ShaderLib.prototype, "setShaderDefinition", null);
        __decorate([
            wd.require(function (program, name, data) {
                wd.assert(!!wd.VariableLib[name], name + " should exist in VariableLib");
            })
        ], ShaderLib.prototype, "sendUniformData", null);
        return ShaderLib;
    })();
    wd.ShaderLib = ShaderLib;
    var ShaderLibType;
    (function (ShaderLibType) {
        ShaderLibType[ShaderLibType["vs"] = "vs"] = "vs";
        ShaderLibType[ShaderLibType["fs"] = "fs"] = "fs";
    })(ShaderLibType || (ShaderLibType = {}));
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var CommonShaderLib = (function (_super) {
        __extends(CommonShaderLib, _super);
        function CommonShaderLib() {
            _super.apply(this, arguments);
            this.type = "common";
        }
        CommonShaderLib.create = function () {
            var obj = new this();
            return obj;
        };
        CommonShaderLib.prototype.sendShaderVariables = function (program, quadCmd, material) {
            this.sendUniformData(program, "u_mMatrix", quadCmd.mMatrix);
            this.sendUniformData(program, "u_vMatrix", quadCmd.vMatrix);
            this.sendUniformData(program, "u_pMatrix", quadCmd.pMatrix);
        };
        CommonShaderLib.prototype.setShaderDefinition = function (quadCmd, material) {
            _super.prototype.setShaderDefinition.call(this, quadCmd, material);
            this.addUniformVariable(["u_mMatrix", "u_vMatrix", "u_pMatrix"]);
            this.vsSourceDefine = wd.ShaderChunk.common_define.define + wd.ShaderChunk.common_vertex.define;
            this.vsSourceFuncDefine = wd.ShaderChunk.common_function.funcDefine + wd.ShaderChunk.common_vertex.funcDefine;
            this.fsSourceDefine = wd.ShaderChunk.common_define.define + wd.ShaderChunk.common_fragment.define;
            this.fsSourceFuncDefine = wd.ShaderChunk.common_function.funcDefine + wd.ShaderChunk.common_fragment.funcDefine;
        };
        return CommonShaderLib;
    })(wd.ShaderLib);
    wd.CommonShaderLib = CommonShaderLib;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var CommonVerticeShaderLib = (function (_super) {
        __extends(CommonVerticeShaderLib, _super);
        function CommonVerticeShaderLib() {
            _super.apply(this, arguments);
            this.type = "commonVertice";
        }
        CommonVerticeShaderLib.create = function () {
            var obj = new this();
            return obj;
        };
        CommonVerticeShaderLib.prototype.sendShaderVariables = function (program, quadCmd, material) {
            this._sendAttributeVariables(program, quadCmd);
        };
        CommonVerticeShaderLib.prototype.setShaderDefinition = function (quadCmd, material) {
            _super.prototype.setShaderDefinition.call(this, quadCmd, material);
            this.addAttributeVariable(["a_position"]);
        };
        CommonVerticeShaderLib.prototype._sendAttributeVariables = function (program, quadCmd) {
            if (quadCmd.buffers.hasChild(wd.BufferDataType.VERTICE)) {
                this.sendAttributeData(program, "a_position", quadCmd.buffers.getChild(wd.BufferDataType.VERTICE));
            }
        };
        return CommonVerticeShaderLib;
    })(wd.ShaderLib);
    wd.CommonVerticeShaderLib = CommonVerticeShaderLib;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var CommonNormalShaderLib = (function (_super) {
        __extends(CommonNormalShaderLib, _super);
        function CommonNormalShaderLib() {
            _super.apply(this, arguments);
            this.type = "commonNormal";
        }
        CommonNormalShaderLib.create = function () {
            var obj = new this();
            return obj;
        };
        CommonNormalShaderLib.prototype.sendShaderVariables = function (program, quadCmd, material) {
            this._sendAttributeVariables(program, quadCmd);
        };
        CommonNormalShaderLib.prototype.setShaderDefinition = function (quadCmd, material) {
            _super.prototype.setShaderDefinition.call(this, quadCmd, material);
            this.addAttributeVariable(["a_normal"]);
        };
        CommonNormalShaderLib.prototype._sendAttributeVariables = function (program, quadCmd) {
            if (quadCmd.buffers.hasChild(wd.BufferDataType.NORMAL)) {
                this.sendAttributeData(program, "a_normal", quadCmd.buffers.getChild(wd.BufferDataType.NORMAL));
            }
        };
        return CommonNormalShaderLib;
    })(wd.ShaderLib);
    wd.CommonNormalShaderLib = CommonNormalShaderLib;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var BasicShaderLib = (function (_super) {
        __extends(BasicShaderLib, _super);
        function BasicShaderLib() {
            _super.apply(this, arguments);
            this.type = "basic";
        }
        BasicShaderLib.create = function () {
            var obj = new this();
            return obj;
        };
        BasicShaderLib.prototype.sendShaderVariables = function (program, quadCmd, material) {
            if (quadCmd.buffers.hasChild(wd.BufferDataType.COLOR)) {
                this.sendAttributeData(program, "a_color", quadCmd.buffers.getChild(wd.BufferDataType.COLOR));
                this.sendUniformData(program, "u_opacity", material.opacity);
            }
        };
        BasicShaderLib.prototype.setShaderDefinition = function (quadCmd, material) {
            _super.prototype.setShaderDefinition.call(this, quadCmd, material);
            this.addAttributeVariable(["a_color"]);
            this.addUniformVariable(["u_opacity"]);
            this.vsSourceBody = wd.ShaderSnippet.setPos_mvp + wd.ShaderChunk.basic_vertex.body;
        };
        return BasicShaderLib;
    })(wd.ShaderLib);
    wd.BasicShaderLib = BasicShaderLib;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var BasicEndShaderLib = (function (_super) {
        __extends(BasicEndShaderLib, _super);
        function BasicEndShaderLib() {
            _super.apply(this, arguments);
            this.type = "basicEnd";
        }
        BasicEndShaderLib.create = function () {
            var obj = new this();
            return obj;
        };
        BasicEndShaderLib.prototype.sendShaderVariables = function (program, quadCmd, material) {
        };
        return BasicEndShaderLib;
    })(wd.ShaderLib);
    wd.BasicEndShaderLib = BasicEndShaderLib;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var wd;
(function (wd) {
    var MorphCommonShaderLib = (function (_super) {
        __extends(MorphCommonShaderLib, _super);
        function MorphCommonShaderLib() {
            _super.apply(this, arguments);
            this.type = "morphCommon";
        }
        MorphCommonShaderLib.create = function () {
            var obj = new this();
            return obj;
        };
        MorphCommonShaderLib.prototype.sendShaderVariables = function (program, quadCmd, material) {
            var anim = (quadCmd.animation);
            this.sendUniformData(program, "u_interpolation", anim.interpolation);
        };
        MorphCommonShaderLib.prototype.setShaderDefinition = function (quadCmd, material) {
            _super.prototype.setShaderDefinition.call(this, quadCmd, material);
            this.addUniformVariable(["u_interpolation"]);
        };
        __decorate([
            wd.require(function (program, quadCmd, material) {
                wd.assert(!!quadCmd.animation, wd.Log.info.FUNC_SHOULD("gameObject", "add MorphAnimation component"));
            })
        ], MorphCommonShaderLib.prototype, "sendShaderVariables", null);
        return MorphCommonShaderLib;
    })(wd.ShaderLib);
    wd.MorphCommonShaderLib = MorphCommonShaderLib;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var wd;
(function (wd) {
    var MorphVerticeShaderLib = (function (_super) {
        __extends(MorphVerticeShaderLib, _super);
        function MorphVerticeShaderLib() {
            _super.apply(this, arguments);
            this.type = "morphVertice";
        }
        MorphVerticeShaderLib.create = function () {
            var obj = new this();
            return obj;
        };
        MorphVerticeShaderLib.prototype.sendShaderVariables = function (program, quadCmd, material) {
            if (quadCmd.buffers.hasChild(wd.BufferDataType.VERTICE)) {
                var morphVerticeData = quadCmd.buffers.getChild(wd.BufferDataType.VERTICE);
                this.sendAttributeData(program, "a_currentFramePosition", morphVerticeData[0]);
                this.sendAttributeData(program, "a_nextFramePosition", morphVerticeData[1]);
            }
        };
        MorphVerticeShaderLib.prototype.setShaderDefinition = function (quadCmd, material) {
            _super.prototype.setShaderDefinition.call(this, quadCmd, material);
            this.addAttributeVariable(["a_currentFramePosition", "a_nextFramePosition"]);
        };
        __decorate([
            wd.require(function (program, quadCmd, material) {
                wd.assert(!!quadCmd.animation, wd.Log.info.FUNC_SHOULD("gameObject", "add MorphAnimation component"));
            })
        ], MorphVerticeShaderLib.prototype, "sendShaderVariables", null);
        return MorphVerticeShaderLib;
    })(wd.ShaderLib);
    wd.MorphVerticeShaderLib = MorphVerticeShaderLib;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var MorphNormalShaderLib = (function (_super) {
        __extends(MorphNormalShaderLib, _super);
        function MorphNormalShaderLib() {
            _super.apply(this, arguments);
            this.type = "morphNormal";
        }
        MorphNormalShaderLib.create = function () {
            var obj = new this();
            return obj;
        };
        MorphNormalShaderLib.prototype.sendShaderVariables = function (program, quadCmd, material) {
            if (quadCmd.buffers.hasChild(wd.BufferDataType.NORMAL)) {
                var morphNormalData = quadCmd.buffers.getChild(wd.BufferDataType.NORMAL);
                this.sendAttributeData(program, "a_currentFrameNormal", morphNormalData[0]);
                this.sendAttributeData(program, "a_nextFrameNormal", morphNormalData[1]);
            }
        };
        MorphNormalShaderLib.prototype.setShaderDefinition = function (quadCmd, material) {
            _super.prototype.setShaderDefinition.call(this, quadCmd, material);
            this.addAttributeVariable(["a_currentFrameNormal", "a_nextFrameNormal"]);
        };
        return MorphNormalShaderLib;
    })(wd.ShaderLib);
    wd.MorphNormalShaderLib = MorphNormalShaderLib;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var SkyboxShaderLib = (function (_super) {
        __extends(SkyboxShaderLib, _super);
        function SkyboxShaderLib() {
            _super.apply(this, arguments);
            this.type = "skybox";
        }
        SkyboxShaderLib.create = function () {
            var obj = new this();
            return obj;
        };
        SkyboxShaderLib.prototype.sendShaderVariables = function (program, quadCmd, material) {
        };
        SkyboxShaderLib.prototype.setShaderDefinition = function (quadCmd, material) {
            _super.prototype.setShaderDefinition.call(this, quadCmd, material);
            this.addUniformVariable(["u_samplerCube0"]);
        };
        return SkyboxShaderLib;
    })(wd.ShaderLib);
    wd.SkyboxShaderLib = SkyboxShaderLib;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var EnvMapForBasicShaderLib = (function (_super) {
        __extends(EnvMapForBasicShaderLib, _super);
        function EnvMapForBasicShaderLib() {
            _super.apply(this, arguments);
        }
        EnvMapForBasicShaderLib.prototype.sendShaderVariables = function (program, quadCmd, material) {
            this.sendUniformData(program, "u_normalMatrix", quadCmd.mMatrix.copy().invertTo3x3().transpose());
            this.sendUniformData(program, "u_cameraPos", wd.Director.getInstance().scene.camera.transform.position);
        };
        EnvMapForBasicShaderLib.prototype.setShaderDefinition = function (quadCmd, material) {
            _super.prototype.setShaderDefinition.call(this, quadCmd, material);
            this.addUniformVariable(["u_samplerCube0", "u_cameraPos", "u_normalMatrix"]);
            this.vsSourceBody = wd.ShaderSnippet.setPos_mvp + this.getVsChunk().body;
        };
        EnvMapForBasicShaderLib.prototype.setEnvMapSource = function () {
            var vs = this.getVsChunk("envMap_forBasic"), fs = this.getFsChunk("envMap_forBasic");
            this.vsSourceTop = vs.top;
            this.vsSourceDefine = vs.define;
            this.vsSourceVarDeclare = vs.varDeclare;
            this.vsSourceFuncDeclare = vs.funcDeclare;
            this.vsSourceFuncDefine = vs.funcDefine;
            this.vsSourceBody += vs.body;
            this.setFsSource(fs);
        };
        return EnvMapForBasicShaderLib;
    })(wd.ShaderLib);
    wd.EnvMapForBasicShaderLib = EnvMapForBasicShaderLib;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var BasicEnvMapForBasicShaderLib = (function (_super) {
        __extends(BasicEnvMapForBasicShaderLib, _super);
        function BasicEnvMapForBasicShaderLib() {
            _super.apply(this, arguments);
            this.type = "basic_envMap_forBasic";
        }
        BasicEnvMapForBasicShaderLib.create = function () {
            var obj = new this();
            return obj;
        };
        return BasicEnvMapForBasicShaderLib;
    })(wd.EnvMapForBasicShaderLib);
    wd.BasicEnvMapForBasicShaderLib = BasicEnvMapForBasicShaderLib;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var ReflectionForBasicShaderLib = (function (_super) {
        __extends(ReflectionForBasicShaderLib, _super);
        function ReflectionForBasicShaderLib() {
            _super.apply(this, arguments);
            this.type = "reflection_forBasic";
        }
        ReflectionForBasicShaderLib.create = function () {
            var obj = new this();
            return obj;
        };
        ReflectionForBasicShaderLib.prototype.setShaderDefinition = function (quadCmd, material) {
            _super.prototype.setShaderDefinition.call(this, quadCmd, material);
            this.setEnvMapSource();
            this.setFsSource(this.getFsChunk(), "+");
        };
        return ReflectionForBasicShaderLib;
    })(wd.EnvMapForBasicShaderLib);
    wd.ReflectionForBasicShaderLib = ReflectionForBasicShaderLib;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var RefractionForBasicShaderLib = (function (_super) {
        __extends(RefractionForBasicShaderLib, _super);
        function RefractionForBasicShaderLib() {
            _super.apply(this, arguments);
            this.type = "refraction_forBasic";
        }
        RefractionForBasicShaderLib.create = function () {
            var obj = new this();
            return obj;
        };
        RefractionForBasicShaderLib.prototype.sendShaderVariables = function (program, quadCmd, material) {
            _super.prototype.sendShaderVariables.call(this, program, quadCmd, material);
            this.sendUniformData(program, "u_refractionRatio", material.refractionRatio);
        };
        RefractionForBasicShaderLib.prototype.setShaderDefinition = function (quadCmd, material) {
            _super.prototype.setShaderDefinition.call(this, quadCmd, material);
            this.addUniformVariable(["u_refractionRatio"]);
            this.setEnvMapSource();
            this.setFsSource(this.getFsChunk(), "+");
        };
        return RefractionForBasicShaderLib;
    })(wd.EnvMapForBasicShaderLib);
    wd.RefractionForBasicShaderLib = RefractionForBasicShaderLib;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var FresnelForBasicShaderLib = (function (_super) {
        __extends(FresnelForBasicShaderLib, _super);
        function FresnelForBasicShaderLib() {
            _super.apply(this, arguments);
            this.type = "fresnel_forBasic";
        }
        FresnelForBasicShaderLib.create = function () {
            var obj = new this();
            return obj;
        };
        FresnelForBasicShaderLib.prototype.sendShaderVariables = function (program, quadCmd, material) {
            _super.prototype.sendShaderVariables.call(this, program, quadCmd, material);
            this.sendUniformData(program, "u_refractionRatio", material.refractionRatio);
            this.sendUniformData(program, "u_reflectivity", material.reflectivity);
        };
        FresnelForBasicShaderLib.prototype.setShaderDefinition = function (quadCmd, material) {
            _super.prototype.setShaderDefinition.call(this, quadCmd, material);
            this.addUniformVariable(["u_refractionRatio", "u_reflectivity"]);
            this.setEnvMapSource();
            this.setFsSource(this.getFsChunk(), "+");
        };
        return FresnelForBasicShaderLib;
    })(wd.EnvMapForBasicShaderLib);
    wd.FresnelForBasicShaderLib = FresnelForBasicShaderLib;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var EnvMapForLightShaderLib = (function (_super) {
        __extends(EnvMapForLightShaderLib, _super);
        function EnvMapForLightShaderLib() {
            _super.apply(this, arguments);
        }
        EnvMapForLightShaderLib.prototype.sendShaderVariables = function (program, quadCmd, material) {
        };
        EnvMapForLightShaderLib.prototype.setShaderDefinition = function (quadCmd, material) {
            _super.prototype.setShaderDefinition.call(this, quadCmd, material);
            this.addUniformVariable(["u_samplerCube0"]);
            this.vsSourceBody = wd.ShaderSnippet.setPos_mvp + this.getVsChunk().body;
        };
        EnvMapForLightShaderLib.prototype.setEnvMapSource = function () {
            var vs = this.getVsChunk("envMap_forLight"), fs = this.getFsChunk("envMap_forLight");
            this.vsSourceTop = vs.top;
            this.vsSourceDefine = vs.define;
            this.vsSourceVarDeclare = vs.varDeclare;
            this.vsSourceFuncDeclare = vs.funcDeclare;
            this.vsSourceFuncDefine = vs.funcDefine;
            this.vsSourceBody += vs.body;
            this.setFsSource(fs);
        };
        return EnvMapForLightShaderLib;
    })(wd.ShaderLib);
    wd.EnvMapForLightShaderLib = EnvMapForLightShaderLib;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var BasicEnvMapForLightShaderLib = (function (_super) {
        __extends(BasicEnvMapForLightShaderLib, _super);
        function BasicEnvMapForLightShaderLib() {
            _super.apply(this, arguments);
            this.type = "basic_forLight_envMap";
        }
        BasicEnvMapForLightShaderLib.create = function () {
            var obj = new this();
            return obj;
        };
        return BasicEnvMapForLightShaderLib;
    })(wd.EnvMapForLightShaderLib);
    wd.BasicEnvMapForLightShaderLib = BasicEnvMapForLightShaderLib;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var ReflectionForLightShaderLib = (function (_super) {
        __extends(ReflectionForLightShaderLib, _super);
        function ReflectionForLightShaderLib() {
            _super.apply(this, arguments);
            this.type = "reflection_forLight";
        }
        ReflectionForLightShaderLib.create = function () {
            var obj = new this();
            return obj;
        };
        ReflectionForLightShaderLib.prototype.setShaderDefinition = function (quadCmd, material) {
            _super.prototype.setShaderDefinition.call(this, quadCmd, material);
            this.setEnvMapSource();
            this.setFsSource(this.getFsChunk(), "+");
        };
        return ReflectionForLightShaderLib;
    })(wd.EnvMapForLightShaderLib);
    wd.ReflectionForLightShaderLib = ReflectionForLightShaderLib;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var RefractionForLightShaderLib = (function (_super) {
        __extends(RefractionForLightShaderLib, _super);
        function RefractionForLightShaderLib() {
            _super.apply(this, arguments);
            this.type = "refraction_forLight";
        }
        RefractionForLightShaderLib.create = function () {
            var obj = new this();
            return obj;
        };
        RefractionForLightShaderLib.prototype.sendShaderVariables = function (program, quadCmd, material) {
            _super.prototype.sendShaderVariables.call(this, program, quadCmd, material);
            this.sendUniformData(program, "u_refractionRatio", material.refractionRatio);
        };
        RefractionForLightShaderLib.prototype.setShaderDefinition = function (quadCmd, material) {
            _super.prototype.setShaderDefinition.call(this, quadCmd, material);
            this.addUniformVariable(["u_refractionRatio"]);
            this.setEnvMapSource();
            this.setFsSource(this.getFsChunk(), "+");
        };
        return RefractionForLightShaderLib;
    })(wd.EnvMapForLightShaderLib);
    wd.RefractionForLightShaderLib = RefractionForLightShaderLib;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var FresnelForLightShaderLib = (function (_super) {
        __extends(FresnelForLightShaderLib, _super);
        function FresnelForLightShaderLib() {
            _super.apply(this, arguments);
            this.type = "fresnel_forLight";
        }
        FresnelForLightShaderLib.create = function () {
            var obj = new this();
            return obj;
        };
        FresnelForLightShaderLib.prototype.sendShaderVariables = function (program, quadCmd, material) {
            _super.prototype.sendShaderVariables.call(this, program, quadCmd, material);
            if (material.reflectivity !== wd.ShaderChunk.NULL) {
                this.sendUniformData(program, "u_reflectivity", material.reflectivity);
            }
            else {
                this.sendUniformData(program, "u_reflectivity", wd.ShaderChunk.NULL);
                this.sendUniformData(program, "u_refractionRatio", material.refractionRatio);
            }
        };
        FresnelForLightShaderLib.prototype.setShaderDefinition = function (quadCmd, material) {
            _super.prototype.setShaderDefinition.call(this, quadCmd, material);
            this.addUniformVariable(["u_refractionRatio", "u_reflectivity"]);
            this.setEnvMapSource();
            this.setFsSource(this.getFsChunk(), "+");
        };
        return FresnelForLightShaderLib;
    })(wd.EnvMapForLightShaderLib);
    wd.FresnelForLightShaderLib = FresnelForLightShaderLib;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var MapShaderLib = (function (_super) {
        __extends(MapShaderLib, _super);
        function MapShaderLib() {
            _super.apply(this, arguments);
        }
        MapShaderLib.prototype.sendShaderVariables = function (program, quadCmd, material) {
            if (quadCmd.buffers.hasChild(wd.BufferDataType.TEXCOORD)) {
                this.sendAttributeData(program, "a_texCoord", quadCmd.buffers.getChild(wd.BufferDataType.TEXCOORD));
            }
        };
        MapShaderLib.prototype.setShaderDefinition = function (quadCmd, material) {
            _super.prototype.setShaderDefinition.call(this, quadCmd, material);
            this.addAttributeVariable(["a_texCoord"]);
            this.addUniformVariable(["u_sampler2D0", "u_sourceRegion", "u_repeatRegion"]);
            this._setMapSource();
        };
        MapShaderLib.prototype._setMapSource = function () {
            var vs = this.getVsChunk("map_forBasic"), fs = this.getFsChunk("map_forBasic");
            this.vsSourceTop = vs.top;
            this.vsSourceDefine = vs.define;
            this.vsSourceVarDeclare = vs.varDeclare;
            this.vsSourceFuncDeclare = vs.funcDeclare;
            this.vsSourceFuncDefine = vs.funcDefine;
            this.vsSourceBody = vs.body;
            this.setFsSource(fs);
        };
        return MapShaderLib;
    })(wd.ShaderLib);
    wd.MapShaderLib = MapShaderLib;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var BasicMapShaderLib = (function (_super) {
        __extends(BasicMapShaderLib, _super);
        function BasicMapShaderLib() {
            _super.apply(this, arguments);
            this.type = "map_forBasic";
        }
        BasicMapShaderLib.create = function () {
            var obj = new this();
            return obj;
        };
        return BasicMapShaderLib;
    })(wd.MapShaderLib);
    wd.BasicMapShaderLib = BasicMapShaderLib;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var MultiMapShaderLib = (function (_super) {
        __extends(MultiMapShaderLib, _super);
        function MultiMapShaderLib() {
            _super.apply(this, arguments);
            this.type = "multi_map_forBasic";
        }
        MultiMapShaderLib.create = function () {
            var obj = new this();
            return obj;
        };
        MultiMapShaderLib.prototype.sendShaderVariables = function (program, quadCmd, material) {
            _super.prototype.sendShaderVariables.call(this, program, quadCmd, material);
            this.sendUniformData(program, "u_combineMode", material.mapCombineMode);
            this.sendUniformData(program, "u_mixRatio", material.mapMixRatio);
        };
        MultiMapShaderLib.prototype.setShaderDefinition = function (quadCmd, material) {
            _super.prototype.setShaderDefinition.call(this, quadCmd, material);
            this.addUniformVariable(["u_sampler2D1", "u_combineMode", "u_mixRatio"]);
            this.fsSourceFuncDefine = this.getFsChunk().funcDefine;
            this.fsSourceBody = this.getFsChunk().body;
        };
        return MultiMapShaderLib;
    })(wd.MapShaderLib);
    wd.MultiMapShaderLib = MultiMapShaderLib;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var MirrorForBasicShaderLib = (function (_super) {
        __extends(MirrorForBasicShaderLib, _super);
        function MirrorForBasicShaderLib() {
            _super.apply(this, arguments);
            this.type = "mirror_forBasic";
        }
        MirrorForBasicShaderLib.create = function () {
            var obj = new this();
            return obj;
        };
        MirrorForBasicShaderLib.prototype.sendShaderVariables = function (program, quadCmd, material) {
        };
        MirrorForBasicShaderLib.prototype.setShaderDefinition = function (quadCmd, material) {
            _super.prototype.setShaderDefinition.call(this, quadCmd, material);
            this.addUniformVariable(["u_mirrorSampler"]);
        };
        return MirrorForBasicShaderLib;
    })(wd.ShaderLib);
    wd.MirrorForBasicShaderLib = MirrorForBasicShaderLib;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var LightCommonShaderLib = (function (_super) {
        __extends(LightCommonShaderLib, _super);
        function LightCommonShaderLib() {
            _super.apply(this, arguments);
            this.type = "lightCommon";
        }
        LightCommonShaderLib.create = function () {
            var obj = new this();
            return obj;
        };
        LightCommonShaderLib.prototype.sendShaderVariables = function (program, quadCmd, material) {
        };
        LightCommonShaderLib.prototype.setShaderDefinition = function (quadCmd, material) {
            _super.prototype.setShaderDefinition.call(this, quadCmd, material);
            this.setVsSource(this.getVsChunk("light_common.glsl"));
            this.setVsSource(this.getVsChunk(), "+");
            this.setFsSource(this.getFsChunk("light_common.glsl"));
            this.setFsSource(this.getFsChunk(), "+");
        };
        return LightCommonShaderLib;
    })(wd.ShaderLib);
    wd.LightCommonShaderLib = LightCommonShaderLib;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var LightShaderLib = (function (_super) {
        __extends(LightShaderLib, _super);
        function LightShaderLib() {
            _super.apply(this, arguments);
            this.type = "light";
        }
        LightShaderLib.create = function () {
            var obj = new this();
            return obj;
        };
        LightShaderLib.prototype.sendShaderVariables = function (program, quadCmd, material) {
            this.sendUniformData(program, "u_normalMatrix", quadCmd.mMatrix.copy().invertTo3x3().transpose());
            this.sendUniformData(program, "u_cameraPos", wd.Director.getInstance().scene.camera.transform.position);
            this.sendUniformData(program, "u_shininess", material.shininess);
            this.sendUniformData(program, "u_opacity", material.opacity);
            this._sendLightVariables(program);
        };
        LightShaderLib.prototype.setShaderDefinition = function (quadCmd, material) {
            _super.prototype.setShaderDefinition.call(this, quadCmd, material);
            this.addUniformVariable(["u_normalMatrix", "u_cameraPos", "u_shininess", "u_ambient", "u_opacity", "u_isBothSide"]);
            this._setLightDefinition(material);
        };
        LightShaderLib.prototype._sendLightVariables = function (program) {
            var scene = wd.Director.getInstance().scene, directionLights = scene.directionLights, ambientLight = scene.ambientLight, pointLights = scene.pointLights;
            if (ambientLight) {
                this.sendUniformData(program, "u_ambient", ambientLight.getComponent(wd.AmbientLight).color.toVector3());
            }
            if (pointLights) {
                this._sendPointLightVariables(program, pointLights);
            }
            if (directionLights) {
                this._sendDirectionLightVariables(program, directionLights);
            }
        };
        LightShaderLib.prototype._sendPointLightVariables = function (program, pointLights) {
            pointLights.forEach(function (pointLight, index) {
                var lightComponent = pointLight.getComponent(wd.PointLight);
                program.sendStructureData("u_pointLights[" + index + "].position", wd.VariableType.FLOAT_3, lightComponent.position);
                program.sendStructureData("u_pointLights[" + index + "].color", wd.VariableType.FLOAT_3, lightComponent.color.toVector3());
                program.sendStructureData("u_pointLights[" + index + "].intensity", wd.VariableType.FLOAT_1, lightComponent.intensity);
                program.sendStructureData("u_pointLights[" + index + "].range", wd.VariableType.FLOAT_1, lightComponent.range);
                program.sendStructureData("u_pointLights[" + index + "].constant", wd.VariableType.FLOAT_1, lightComponent.constant);
                program.sendStructureData("u_pointLights[" + index + "].linear", wd.VariableType.FLOAT_1, lightComponent.linear);
                program.sendStructureData("u_pointLights[" + index + "].quadratic", wd.VariableType.FLOAT_1, lightComponent.quadratic);
            });
        };
        LightShaderLib.prototype._sendDirectionLightVariables = function (program, directionLights) {
            var self = this;
            directionLights.forEach(function (directionLight, index) {
                var lightComponent = directionLight.getComponent(wd.DirectionLight);
                if (self._isZero(lightComponent.position)) {
                    program.sendStructureData("u_directionLights[" + index + "].position", wd.VariableType.FLOAT_3, wd.DirectionLight.defaultPosition);
                }
                else {
                    program.sendStructureData("u_directionLights[" + index + "].position", wd.VariableType.FLOAT_3, lightComponent.position);
                }
                program.sendStructureData("u_directionLights[" + index + "].color", wd.VariableType.FLOAT_3, lightComponent.color.toVector3());
                program.sendStructureData("u_directionLights[" + index + "].intensity", wd.VariableType.FLOAT_1, lightComponent.intensity);
            });
        };
        LightShaderLib.prototype._isZero = function (position) {
            var val = position.values;
            return val[0] === 0 && val[1] === 0 && val[2] === 0;
        };
        LightShaderLib.prototype._setLightDefinition = function (material) {
            var scene = wd.Director.getInstance().scene, directionLights = scene.directionLights, pointLights = scene.pointLights, direction_lights_count = 0, point_lights_count = 0;
            if (directionLights) {
                this.addUniformVariable(["u_directionLights"]);
                direction_lights_count = directionLights.getCount();
            }
            if (pointLights) {
                this.addUniformVariable(["u_pointLights"]);
                point_lights_count = pointLights.getCount();
            }
            this._addDefine(this.vsSourceDefineList, direction_lights_count, point_lights_count);
            this._addDefine(this.fsSourceDefineList, direction_lights_count, point_lights_count);
            if (material.side === wd.Side.BOTH) {
                this.fsSourceDefineList.addChildren([{
                        name: "BOTH_SIDE"
                    }]);
            }
        };
        LightShaderLib.prototype._addDefine = function (list, direction_lights_count, point_lights_count) {
            list.addChildren([{
                    name: "DIRECTION_LIGHTS_COUNT",
                    value: direction_lights_count
                }, {
                    name: "POINT_LIGHTS_COUNT",
                    value: point_lights_count
                }]);
        };
        return LightShaderLib;
    })(wd.ShaderLib);
    wd.LightShaderLib = LightShaderLib;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var LightEndShaderLib = (function (_super) {
        __extends(LightEndShaderLib, _super);
        function LightEndShaderLib() {
            _super.apply(this, arguments);
            this.type = "lightEnd";
        }
        LightEndShaderLib.create = function () {
            var obj = new this();
            return obj;
        };
        LightEndShaderLib.prototype.sendShaderVariables = function (program, quadCmd, material) {
        };
        return LightEndShaderLib;
    })(wd.ShaderLib);
    wd.LightEndShaderLib = LightEndShaderLib;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var LightMapShaderLib = (function (_super) {
        __extends(LightMapShaderLib, _super);
        function LightMapShaderLib() {
            _super.apply(this, arguments);
        }
        LightMapShaderLib.prototype.sendShaderVariables = function (program, quadCmd, material) {
            if (quadCmd.buffers.hasChild(wd.BufferDataType.TEXCOORD)) {
                this.sendAttributeData(program, "a_texCoord", quadCmd.buffers.getChild(wd.BufferDataType.TEXCOORD));
            }
        };
        LightMapShaderLib.prototype.setShaderDefinition = function (quadCmd, material) {
            _super.prototype.setShaderDefinition.call(this, quadCmd, material);
            this.addAttributeVariable(["a_texCoord"]);
        };
        return LightMapShaderLib;
    })(wd.ShaderLib);
    wd.LightMapShaderLib = LightMapShaderLib;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var DiffuseMapShaderLib = (function (_super) {
        __extends(DiffuseMapShaderLib, _super);
        function DiffuseMapShaderLib() {
            _super.apply(this, arguments);
            this.type = "diffuseMap";
        }
        DiffuseMapShaderLib.create = function () {
            var obj = new this();
            return obj;
        };
        DiffuseMapShaderLib.prototype.setShaderDefinition = function (quadCmd, material) {
            _super.prototype.setShaderDefinition.call(this, quadCmd, material);
            this.addUniformVariable([
                wd.VariableNameTable.getVariableName("diffuseMap"),
                "u_sourceRegion", "u_repeatRegion"
            ]);
        };
        return DiffuseMapShaderLib;
    })(wd.LightMapShaderLib);
    wd.DiffuseMapShaderLib = DiffuseMapShaderLib;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var SpecularMapShaderLib = (function (_super) {
        __extends(SpecularMapShaderLib, _super);
        function SpecularMapShaderLib() {
            _super.apply(this, arguments);
            this.type = "specularMap";
        }
        SpecularMapShaderLib.create = function () {
            var obj = new this();
            return obj;
        };
        SpecularMapShaderLib.prototype.setShaderDefinition = function (quadCmd, material) {
            _super.prototype.setShaderDefinition.call(this, quadCmd, material);
            this.addUniformVariable([
                wd.VariableNameTable.getVariableName("specularMap")
            ]);
        };
        return SpecularMapShaderLib;
    })(wd.LightMapShaderLib);
    wd.SpecularMapShaderLib = SpecularMapShaderLib;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var NormalMapShaderLib = (function (_super) {
        __extends(NormalMapShaderLib, _super);
        function NormalMapShaderLib() {
            _super.apply(this, arguments);
            this.type = "normalMap";
        }
        NormalMapShaderLib.create = function () {
            var obj = new this();
            return obj;
        };
        NormalMapShaderLib.prototype.sendShaderVariables = function (program, quadCmd, material) {
            _super.prototype.sendShaderVariables.call(this, program, quadCmd, material);
            if (quadCmd.buffers.hasChild(wd.BufferDataType.TANGENT)) {
                this.sendAttributeData(program, "a_tangent", quadCmd.buffers.getChild(wd.BufferDataType.TANGENT));
            }
        };
        NormalMapShaderLib.prototype.setShaderDefinition = function (quadCmd, material) {
            _super.prototype.setShaderDefinition.call(this, quadCmd, material);
            this.addAttributeVariable(["a_tangent"]);
            this.addUniformVariable([
                wd.VariableNameTable.getVariableName("normalMap")
            ]);
        };
        return NormalMapShaderLib;
    })(wd.LightMapShaderLib);
    wd.NormalMapShaderLib = NormalMapShaderLib;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var NoDiffuseMapShaderLib = (function (_super) {
        __extends(NoDiffuseMapShaderLib, _super);
        function NoDiffuseMapShaderLib() {
            _super.apply(this, arguments);
            this.type = "noDiffuseMap";
        }
        NoDiffuseMapShaderLib.create = function () {
            var obj = new this();
            return obj;
        };
        NoDiffuseMapShaderLib.prototype.sendShaderVariables = function (program, quadCmd, material) {
            this.sendUniformData(program, "u_diffuse", material.color.toVector3());
        };
        NoDiffuseMapShaderLib.prototype.setShaderDefinition = function (quadCmd, material) {
            _super.prototype.setShaderDefinition.call(this, quadCmd, material);
            this.addUniformVariable(["u_diffuse"]);
        };
        return NoDiffuseMapShaderLib;
    })(wd.ShaderLib);
    wd.NoDiffuseMapShaderLib = NoDiffuseMapShaderLib;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var NoSpecularMapShaderLib = (function (_super) {
        __extends(NoSpecularMapShaderLib, _super);
        function NoSpecularMapShaderLib() {
            _super.apply(this, arguments);
            this.type = "noSpecularMap";
        }
        NoSpecularMapShaderLib.create = function () {
            var obj = new this();
            return obj;
        };
        NoSpecularMapShaderLib.prototype.sendShaderVariables = function (program, quadCmd, material) {
            this.sendUniformData(program, "u_specular", material.specular.toVector3());
        };
        NoSpecularMapShaderLib.prototype.setShaderDefinition = function (quadCmd, material) {
            _super.prototype.setShaderDefinition.call(this, quadCmd, material);
            this.addUniformVariable(["u_specular"]);
        };
        return NoSpecularMapShaderLib;
    })(wd.ShaderLib);
    wd.NoSpecularMapShaderLib = NoSpecularMapShaderLib;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var NoNormalMapShaderLib = (function (_super) {
        __extends(NoNormalMapShaderLib, _super);
        function NoNormalMapShaderLib() {
            _super.apply(this, arguments);
            this.type = "noNormalMap";
        }
        NoNormalMapShaderLib.create = function () {
            var obj = new this();
            return obj;
        };
        NoNormalMapShaderLib.prototype.sendShaderVariables = function (program, quadCmd, material) {
        };
        return NoNormalMapShaderLib;
    })(wd.ShaderLib);
    wd.NoNormalMapShaderLib = NoNormalMapShaderLib;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var BuildShadowMapShaderLib = (function (_super) {
        __extends(BuildShadowMapShaderLib, _super);
        function BuildShadowMapShaderLib() {
            _super.apply(this, arguments);
        }
        BuildShadowMapShaderLib.prototype.setShaderDefinition = function (quadCmd, material) {
            _super.prototype.setShaderDefinition.call(this, quadCmd, material);
            this.setFsSource(this.getFsChunk("commonBuildShadowMap_fragment.glsl"));
            this.setFsSource(this.getFsChunk(), "+");
        };
        return BuildShadowMapShaderLib;
    })(wd.ShaderLib);
    wd.BuildShadowMapShaderLib = BuildShadowMapShaderLib;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var BuildTwoDShadowMapShaderLib = (function (_super) {
        __extends(BuildTwoDShadowMapShaderLib, _super);
        function BuildTwoDShadowMapShaderLib() {
            _super.apply(this, arguments);
            this.type = "buildTwoDShadowMap";
        }
        BuildTwoDShadowMapShaderLib.create = function () {
            var obj = new this();
            return obj;
        };
        BuildTwoDShadowMapShaderLib.prototype.sendShaderVariables = function (program, quadCmd, material) {
            this.sendUniformData(program, "u_vpMatrixFromLight", material.buildTwoDShadowMapData.vpMatrixFromLight);
        };
        BuildTwoDShadowMapShaderLib.prototype.setShaderDefinition = function (quadCmd, material) {
            _super.prototype.setShaderDefinition.call(this, quadCmd, material);
            this.addUniformVariable([
                "u_vpMatrixFromLight"
            ]);
        };
        return BuildTwoDShadowMapShaderLib;
    })(wd.BuildShadowMapShaderLib);
    wd.BuildTwoDShadowMapShaderLib = BuildTwoDShadowMapShaderLib;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var BuildCubemapShadowMapShaderLib = (function (_super) {
        __extends(BuildCubemapShadowMapShaderLib, _super);
        function BuildCubemapShadowMapShaderLib() {
            _super.apply(this, arguments);
            this.type = "buildCubemapShadowMap";
        }
        BuildCubemapShadowMapShaderLib.create = function () {
            var obj = new this();
            return obj;
        };
        BuildCubemapShadowMapShaderLib.prototype.sendShaderVariables = function (program, quadCmd, material) {
            this.sendUniformData(program, "u_lightPos", material.buildCubemapShadowMapData.lightPos);
            this.sendUniformData(program, "u_farPlane", material.buildCubemapShadowMapData.farPlane);
        };
        BuildCubemapShadowMapShaderLib.prototype.setShaderDefinition = function (quadCmd, material) {
            _super.prototype.setShaderDefinition.call(this, quadCmd, material);
            this.addUniformVariable([
                "u_lightPos", "u_farPlane"
            ]);
        };
        return BuildCubemapShadowMapShaderLib;
    })(wd.BuildShadowMapShaderLib);
    wd.BuildCubemapShadowMapShaderLib = BuildCubemapShadowMapShaderLib;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var TotalShadowMapShaderLib = (function (_super) {
        __extends(TotalShadowMapShaderLib, _super);
        function TotalShadowMapShaderLib() {
            _super.apply(this, arguments);
            this.type = "totalShadowMap";
        }
        TotalShadowMapShaderLib.create = function () {
            var obj = new this();
            return obj;
        };
        TotalShadowMapShaderLib.prototype.sendShaderVariables = function (program, quadCmd, material) {
        };
        return TotalShadowMapShaderLib;
    })(wd.ShaderLib);
    wd.TotalShadowMapShaderLib = TotalShadowMapShaderLib;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var ShadowMapShaderLib = (function (_super) {
        __extends(ShadowMapShaderLib, _super);
        function ShadowMapShaderLib() {
            _super.apply(this, arguments);
        }
        ShadowMapShaderLib.prototype.setShaderDefinition = function (quadCmd, material) {
            _super.prototype.setShaderDefinition.call(this, quadCmd, material);
            this._setShadowMapSource();
        };
        ShadowMapShaderLib.prototype._setShadowMapSource = function () {
            var scene = wd.Director.getInstance().scene, twoDShadowMapCount = scene.directionLights ? scene.directionLights.filter(function (light) {
                return light.getComponent(wd.DirectionLight).castShadow;
            }).getCount() : 0, cubemapShadowMapCount = scene.pointLights ? scene.pointLights.filter(function (light) {
                return light.getComponent(wd.PointLight).castShadow;
            }).getCount() : 0;
            if (scene.shadowMap.softType === wd.ShadowMapSoftType.PCF) {
                this.fsSourceDefineList.addChildren([{
                        name: "SHADOWMAP_TYPE_PCF"
                    }]);
            }
            this.vsSourceDefineList.addChild({
                name: "TWOD_SHADOWMAP_COUNT",
                value: twoDShadowMapCount
            });
            this.fsSourceDefineList.addChildren([
                {
                    name: "TWOD_SHADOWMAP_COUNT",
                    value: twoDShadowMapCount
                },
                {
                    name: "CUBEMAP_SHADOWMAP_COUNT",
                    value: cubemapShadowMapCount
                },
            ]);
        };
        return ShadowMapShaderLib;
    })(wd.ShaderLib);
    wd.ShadowMapShaderLib = ShadowMapShaderLib;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var TwoDShadowMapShaderLib = (function (_super) {
        __extends(TwoDShadowMapShaderLib, _super);
        function TwoDShadowMapShaderLib() {
            _super.apply(this, arguments);
            this.type = "twoDShadowMap";
        }
        TwoDShadowMapShaderLib.create = function () {
            var obj = new this();
            return obj;
        };
        TwoDShadowMapShaderLib.prototype.sendShaderVariables = function (program, quadCmd, material) {
            material.twoDShadowMapDatas.forEach(function (data, index) {
                program.sendStructureData("u_vpMatrixFromLight[" + index + "]", wd.VariableType.FLOAT_MAT4, data.vpMatrixFromLight);
                program.sendStructureData("u_twoDShadowSize[" + index + "]", wd.VariableType.FLOAT_2, data.shadowSize);
                program.sendStructureData("u_twoDShadowBias[" + index + "]", wd.VariableType.FLOAT_1, data.shadowBias);
                program.sendStructureData("u_twoDShadowDarkness[" + index + "]", wd.VariableType.FLOAT_1, data.shadowDarkness);
                program.sendStructureData("u_twoDLightPos[" + index + "]", wd.VariableType.FLOAT_3, data.lightPos);
            });
        };
        return TwoDShadowMapShaderLib;
    })(wd.ShadowMapShaderLib);
    wd.TwoDShadowMapShaderLib = TwoDShadowMapShaderLib;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var CubemapShadowMapShaderLib = (function (_super) {
        __extends(CubemapShadowMapShaderLib, _super);
        function CubemapShadowMapShaderLib() {
            _super.apply(this, arguments);
            this.type = "cubemapShadowMap";
        }
        CubemapShadowMapShaderLib.create = function () {
            var obj = new this();
            return obj;
        };
        CubemapShadowMapShaderLib.prototype.sendShaderVariables = function (program, quadCmd, material) {
            material.cubemapShadowMapDatas.forEach(function (data, index) {
                program.sendStructureData("u_cubemapLightPos[" + index + "]", wd.VariableType.FLOAT_3, data.lightPos);
                program.sendStructureData("u_farPlane[" + index + "]", wd.VariableType.FLOAT_1, data.farPlane);
                program.sendStructureData("u_cubemapShadowBias[" + index + "]", wd.VariableType.FLOAT_1, data.shadowBias);
                program.sendStructureData("u_cubemapShadowDarkness[" + index + "]", wd.VariableType.FLOAT_1, data.shadowDarkness);
            });
        };
        return CubemapShadowMapShaderLib;
    })(wd.ShadowMapShaderLib);
    wd.CubemapShadowMapShaderLib = CubemapShadowMapShaderLib;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var NoShadowMapShaderLib = (function (_super) {
        __extends(NoShadowMapShaderLib, _super);
        function NoShadowMapShaderLib() {
            _super.apply(this, arguments);
            this.type = "noShadowMap";
        }
        NoShadowMapShaderLib.create = function () {
            var obj = new this();
            return obj;
        };
        NoShadowMapShaderLib.prototype.sendShaderVariables = function (program, quadCmd, material) {
        };
        return NoShadowMapShaderLib;
    })(wd.ShaderLib);
    wd.NoShadowMapShaderLib = NoShadowMapShaderLib;
})(wd || (wd = {}));

var wd;
(function (wd) {
    var ShaderChunk = (function () {
        function ShaderChunk() {
        }
        ShaderChunk.empty = { top: "", define: "", varDeclare: "", funcDeclare: "", funcDefine: "", body: "" };
        ShaderChunk.NULL = -1.0;
        ShaderChunk.morphNormal_vertex = { top: "", define: "", varDeclare: "", funcDeclare: "", funcDefine: "", body: "vec3 a_normal = a_currentFrameNormal + (a_nextFrameNormal - a_currentFrameNormal) * u_interpolation;\n", };
        ShaderChunk.morphVertice_vertex = { top: "", define: "", varDeclare: "", funcDeclare: "", funcDefine: "", body: "vec3 a_position = a_currentFramePosition + (a_nextFramePosition - a_currentFramePosition) * u_interpolation;\n", };
        ShaderChunk.basicEnd_fragment = { top: "", define: "", varDeclare: "", funcDeclare: "", funcDefine: "", body: "gl_FragColor = vec4(totalColor.rgb, totalColor.a * u_opacity);\n", };
        ShaderChunk.basic_fragment = { top: "", define: "", varDeclare: "varying vec3 v_color;\n", funcDeclare: "", funcDefine: "", body: "vec4 totalColor = vec4(v_color, 1.0);\n", };
        ShaderChunk.basic_vertex = { top: "", define: "", varDeclare: "varying vec3 v_color;\n", funcDeclare: "", funcDefine: "", body: "v_color = a_color;\n", };
        ShaderChunk.common_define = { top: "", define: "#define NULL -1.0\n", varDeclare: "", funcDeclare: "", funcDefine: "", body: "", };
        ShaderChunk.common_fragment = { top: "", define: "", varDeclare: "", funcDeclare: "", funcDefine: "", body: "", };
        ShaderChunk.common_function = { top: "", define: "", varDeclare: "", funcDeclare: "", funcDefine: "mat2 transpose(mat2 m) {\n  return mat2(  m[0][0], m[1][0],   // new col 0\n                m[0][1], m[1][1]    // new col 1\n             );\n  }\nmat3 transpose(mat3 m) {\n  return mat3(  m[0][0], m[1][0], m[2][0],  // new col 0\n                m[0][1], m[1][1], m[2][1],  // new col 1\n                m[0][2], m[1][2], m[2][2]   // new col 1\n             );\n  }\n", body: "", };
        ShaderChunk.common_vertex = { top: "", define: "", varDeclare: "", funcDeclare: "", funcDefine: "", body: "", };
        ShaderChunk.highp_fragment = { top: "precision highp float;\nprecision highp int;\n", define: "", varDeclare: "", funcDeclare: "", funcDefine: "", body: "", };
        ShaderChunk.lowp_fragment = { top: "precision lowp float;\nprecision lowp int;\n", define: "", varDeclare: "", funcDeclare: "", funcDefine: "", body: "", };
        ShaderChunk.mediump_fragment = { top: "precision mediump float;\nprecision mediump int;\n", define: "", varDeclare: "", funcDeclare: "", funcDefine: "", body: "", };
        ShaderChunk.lightCommon_fragment = { top: "", define: "", varDeclare: "varying vec3 v_worldPosition;\n#if POINT_LIGHTS_COUNT > 0\nstruct PointLight {\n    vec3 position;\n    vec3 color;\n    float intensity;\n\n    float range;\n    float constant;\n    float linear;\n    float quadratic;\n};\nuniform PointLight u_pointLights[POINT_LIGHTS_COUNT];\n\n#endif\n\n\n#if DIRECTION_LIGHTS_COUNT > 0\nstruct DirectionLight {\n    vec3 position;\n\n    float intensity;\n\n    vec3 color;\n};\nuniform DirectionLight u_directionLights[DIRECTION_LIGHTS_COUNT];\n#endif\n", funcDeclare: "", funcDefine: "", body: "", };
        ShaderChunk.lightCommon_vertex = { top: "", define: "", varDeclare: "varying vec3 v_worldPosition;\n#if POINT_LIGHTS_COUNT > 0\nstruct PointLight {\n    vec3 position;\n    vec3 color;\n    float intensity;\n\n    float range;\n    float constant;\n    float linear;\n    float quadratic;\n};\nuniform PointLight u_pointLights[POINT_LIGHTS_COUNT];\n\n#endif\n\n\n#if DIRECTION_LIGHTS_COUNT > 0\nstruct DirectionLight {\n    vec3 position;\n\n    float intensity;\n\n    vec3 color;\n};\nuniform DirectionLight u_directionLights[DIRECTION_LIGHTS_COUNT];\n#endif\n", funcDeclare: "", funcDefine: "", body: "v_worldPosition = vec3(u_mMatrix * vec4(a_position, 1.0));\n", };
        ShaderChunk.lightEnd_fragment = { top: "", define: "", varDeclare: "", funcDeclare: "", funcDefine: "", body: "gl_FragColor = vec4(totalColor.rgb, totalColor.a * u_opacity);\n", };
        ShaderChunk.light_common = { top: "", define: "", varDeclare: "", funcDeclare: "vec3 getDirectionLightDirByLightPos(vec3 lightPos);\nvec3 getPointLightDirByLightPos(vec3 lightPos);\nvec3 getPointLightDirByLightPos(vec3 lightPos, vec3 worldPosition);\n", funcDefine: "vec3 getDirectionLightDirByLightPos(vec3 lightPos){\n    return lightPos - vec3(0.0);\n    //return vec3(0.0) - lightPos;\n}\nvec3 getPointLightDirByLightPos(vec3 lightPos){\n    return lightPos - v_worldPosition;\n}\nvec3 getPointLightDirByLightPos(vec3 lightPos, vec3 worldPosition){\n    return lightPos - worldPosition;\n}\n", body: "", };
        ShaderChunk.light_fragment = { top: "", define: "", varDeclare: "", funcDeclare: "", funcDefine: "float getBlinnPhongShininess(float shininess, vec3 normal, vec3 lightDir, vec3 viewDir, float dotResultBetweenNormAndLight){\n    vec3 halfAngle = normalize(lightDir + viewDir);\n    float blinnTerm = dot(normal, halfAngle);\n\n    blinnTerm = clamp(blinnTerm, 0.0, 1.0);\n    blinnTerm = dotResultBetweenNormAndLight < 0.0 ? 0.0 : blinnTerm;\n    blinnTerm = pow(blinnTerm, shininess);\n\n	return blinnTerm;\n}\n\nvec3 calcLight(vec3 lightDir, vec3 color, float intensity, float attenuation, vec3 normal, vec3 viewDir)\n{\n    vec3 materialDiffuse = getMaterialDiffuse();\n    vec3 materialSpecular = getMaterialSpecular();\n\n    float dotResultBetweenNormAndLight = dot(normal, lightDir);\n    float diff = max(dotResultBetweenNormAndLight, 0.0);\n\n\n    vec3 ambientColor = u_ambient * materialDiffuse;\n\n    vec3 diffuseColor = diff * color * materialDiffuse * intensity;\n\n\n    float spec = getBlinnPhongShininess(u_shininess, normal, lightDir, viewDir, dotResultBetweenNormAndLight);\n\n    vec3 specularColor = spec * materialSpecular * intensity;\n\n    return  ambientColor + attenuation * (diffuseColor + specularColor);\n}\n\n\n\n\n\n#if POINT_LIGHTS_COUNT > 0\nvec3 calcPointLight(vec3 lightDir, PointLight light, vec3 normal, vec3 viewDir)\n{\n    //lightDir is not normalize computing distance\n    float distance = length(lightDir);\n\n    float attenuation = 0.0;\n    if(distance < light.range)\n    {\n        attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * (distance * distance));\n    }\n\n    lightDir = normalize(lightDir);\n\n    return calcLight(lightDir, light.color, light.intensity, attenuation, normal, viewDir);\n}\n#endif\n\n\n\n#if DIRECTION_LIGHTS_COUNT > 0\nvec3 calcDirectionLight(vec3 lightDir, DirectionLight light, vec3 normal, vec3 viewDir)\n{\n    float attenuation = 1.0;\n\n    lightDir = normalize(lightDir);\n\n    return calcLight(lightDir, light.color, light.intensity, attenuation, normal, viewDir);\n}\n#endif\n\n\n\nvec3 calcTotalLight(vec3 norm, vec3 viewDir){\n    vec3 totalLight = vec3(0.0);\n\n    #if POINT_LIGHTS_COUNT > 0\n       for(int i = 0; i < POINT_LIGHTS_COUNT; i++){\n            totalLight += calcPointLight(getPointLightDir(i), u_pointLights[i], norm, viewDir);\n       }\n    #endif\n\n    #if DIRECTION_LIGHTS_COUNT > 0\n       for(int i = 0; i < DIRECTION_LIGHTS_COUNT; i++){\n            totalLight += calcDirectionLight(getDirectionLightDir(i), u_directionLights[i], norm, viewDir);\n       }\n    #endif\n\n    return totalLight;\n}\n", body: "vec3 normal = normalize(getNormal());\n\n	#ifdef BOTH_SIDE\n		normal = normal * (-1.0 + 2.0 * float(gl_FrontFacing));\n	#endif\n\n    vec3 viewDir = normalize(getViewDir());\n\n    vec4 totalColor = vec4(calcTotalLight(normal, viewDir), 1.0);\n\n    totalColor *= vec4(getShadowVisibility(), 1.0);\n", };
        ShaderChunk.light_vertex = { top: "", define: "", varDeclare: "", funcDeclare: "", funcDefine: "", body: "gl_Position = u_pMatrix * u_vMatrix * vec4(v_worldPosition, 1.0);\n", };
        ShaderChunk.map_forBasic_fragment = { top: "", define: "", varDeclare: "varying vec2 v_mapCoord;\n", funcDeclare: "", funcDefine: "", body: "totalColor *= texture2D(u_sampler2D0, v_mapCoord);\n", };
        ShaderChunk.map_forBasic_vertex = { top: "", define: "", varDeclare: "varying vec2 v_mapCoord;\n", funcDeclare: "", funcDefine: "", body: "vec2 sourceTexCoord = a_texCoord * u_sourceRegion.zw + u_sourceRegion.xy;\n    v_mapCoord = sourceTexCoord * u_repeatRegion.zw + u_repeatRegion.xy;\n", };
        ShaderChunk.multi_map_forBasic_fragment = { top: "", define: "", varDeclare: "", funcDeclare: "", funcDefine: "vec4 getMapColor(){\n            vec4 color0 = texture2D(u_sampler2D0, v_mapCoord);\n            vec4 color1 = texture2D(u_sampler2D1, v_mapCoord);\n            if(u_combineMode == 0){\n                return mix(color0, color1, u_mixRatio);\n            }\n            else if(u_combineMode == 1){\n                return color0 * color1;\n            }\n            else if(u_combineMode == 2){\n                return color0 + color1;\n            }\n		}\n", body: "totalColor *= getMapColor();\n", };
        ShaderChunk.mirror_forBasic_fragment = { top: "", define: "", varDeclare: "varying vec4 v_mirrorCoord;\n", funcDeclare: "", funcDefine: "//todo add more blend way to mix mirror color and textureColor\n		float blendOverlay(float base, float blend) {\n			return( base < 0.5 ? ( 2.0 * base * blend ) : (1.0 - 2.0 * ( 1.0 - base ) * ( 1.0 - blend ) ) );\n		}\n		vec4 getMirrorColor(in vec4 materialColor){\n			vec4 color = texture2DProj(u_mirrorSampler, v_mirrorCoord);\n\n			color = vec4(blendOverlay(materialColor.r, color.r), blendOverlay(materialColor.g, color.g), blendOverlay(materialColor.b, color.b), 1.0);\n\n			return color;\n		}\n", body: "totalColor = getMirrorColor(totalColor);\n", };
        ShaderChunk.mirror_forBasic_vertex = { top: "", define: "", varDeclare: "varying vec4 v_mirrorCoord;\n", funcDeclare: "", funcDefine: "", body: "mat4 textureMatrix = mat4(\n                        0.5, 0.0, 0.0, 0.0,\n                        0.0, 0.5, 0.0, 0.0,\n                        0.0, 0.0, 0.5, 0.0,\n                        0.5, 0.5, 0.5, 1.0\n);\n\nv_mirrorCoord = textureMatrix * gl_Position;\n", };
        ShaderChunk.skybox_fragment = { top: "", define: "", varDeclare: "varying vec3 v_dir;\n", funcDeclare: "", funcDefine: "", body: "gl_FragColor = textureCube(u_samplerCube0, v_dir);\n", };
        ShaderChunk.skybox_vertex = { top: "", define: "", varDeclare: "varying vec3 v_dir;\n", funcDeclare: "", funcDefine: "", body: "vec4 pos = u_pMatrix * mat4(mat3(u_vMatrix)) * u_mMatrix * vec4(a_position, 1.0);\n\n    gl_Position = pos.xyww;\n\n    v_dir = a_position;\n", };
        ShaderChunk.basic_envMap_forLight_fragment = { top: "", define: "", varDeclare: "varying vec3 v_basicEnvMap_dir;\n", funcDeclare: "", funcDefine: "", body: "totalColor *= textureCube(u_samplerCube0, v_basicEnvMap_dir);\n", };
        ShaderChunk.basic_envMap_forLight_vertex = { top: "", define: "", varDeclare: "varying vec3 v_basicEnvMap_dir;\n", funcDeclare: "", funcDefine: "", body: "v_basicEnvMap_dir = a_position;\n", };
        ShaderChunk.envMap_forLight_fragment = { top: "", define: "", varDeclare: "", funcDeclare: "", funcDefine: "", body: "vec3 inDir = normalize(v_worldPosition - u_cameraPos);\n", };
        ShaderChunk.envMap_forLight_vertex = { top: "", define: "", varDeclare: "", funcDeclare: "", funcDefine: "", body: "", };
        ShaderChunk.fresnel_forLight_fragment = { top: "", define: "", varDeclare: "", funcDeclare: "", funcDefine: "float computeFresnelRatio(vec3 inDir, vec3 normal, float refractionRatio){\n    float f = pow(1.0 - refractionRatio, 2.0) / pow(1.0 + refractionRatio, 2.0);\n    float fresnelPower = 5.0;\n    float ratio = f + (1.0 - f) * pow((1.0 - dot(inDir, normal)), fresnelPower);\n\n    return ratio / 100.0;\n}\n\nvec4 getEnvMapTotalColor(vec3 inDir, vec3 normal){\n    vec3 reflectDir = reflect(inDir, normal);\n    vec3 refractDir = refract(inDir, normal, u_refractionRatio);\n\n    vec4 reflectColor = textureCube(u_samplerCube0, reflectDir);\n    vec4 refractColor = textureCube(u_samplerCube0, refractDir);\n\n    vec4 totalColor = vec4(0.0);\n\n	if(u_reflectivity != NULL){\n        totalColor = mix(reflectColor, refractColor, u_reflectivity);\n	}\n	else{\n        totalColor = mix(reflectColor, refractColor, computeFresnelRatio(inDir, normal, u_refractionRatio));\n	}\n\n	return totalColor;\n}\n", body: "totalColor *= getEnvMapTotalColor(inDir, normalize(getNormal()));\n", };
        ShaderChunk.reflection_forLight_fragment = { top: "", define: "", varDeclare: "", funcDeclare: "", funcDefine: "", body: "totalColor *= textureCube(u_samplerCube0, reflect(inDir, normalize(getNormal())));\n", };
        ShaderChunk.refraction_forLight_fragment = { top: "", define: "", varDeclare: "", funcDeclare: "", funcDefine: "", body: "totalColor *= textureCube(u_samplerCube0, refract(inDir, getNormal(), u_refractionRatio));\n", };
        ShaderChunk.basic_envMap_forBasic_fragment = { top: "", define: "", varDeclare: "varying vec3 v_dir;\n", funcDeclare: "", funcDefine: "", body: "totalColor *= textureCube(u_samplerCube0, v_dir);\n", };
        ShaderChunk.basic_envMap_forBasic_vertex = { top: "", define: "", varDeclare: "varying vec3 v_dir;\n", funcDeclare: "", funcDefine: "", body: "v_dir = a_position;\n", };
        ShaderChunk.envMap_forBasic_fragment = { top: "", define: "", varDeclare: "varying vec3 v_normal;\nvarying vec3 v_position;\n", funcDeclare: "", funcDefine: "", body: "vec3 inDir = normalize(v_position - u_cameraPos);\n", };
        ShaderChunk.envMap_forBasic_vertex = { top: "", define: "", varDeclare: "varying vec3 v_normal;\nvarying vec3 v_position;\n", funcDeclare: "", funcDefine: "", body: "v_normal = normalize( u_normalMatrix * a_normal);\n    v_position = vec3(u_mMatrix * vec4(a_position, 1.0));\n", };
        ShaderChunk.fresnel_forBasic_fragment = { top: "", define: "", varDeclare: "", funcDeclare: "", funcDefine: "float computeFresnelRatio(vec3 inDir, vec3 normal, float refractionRatio){\n    float f = pow(1.0 - refractionRatio, 2.0) / pow(1.0 + refractionRatio, 2.0);\n    float fresnelPower = 5.0;\n    float ratio = f + (1.0 - f) * pow((1.0 - dot(inDir, normal)), fresnelPower);\n\n    return ratio / 100.0;\n}\nvec4 getEnvMapTotalColor(vec3 inDir, vec3 normal){\n    vec3 reflectDir = reflect(inDir, normal);\n    vec3 refractDir = refract(inDir, normal, u_refractionRatio);\n\n    vec4 reflectColor = textureCube(u_samplerCube0, reflectDir);\n    vec4 refractColor = textureCube(u_samplerCube0, refractDir);\n\n    vec4 totalColor = vec4(0.0);\n\n	if(u_reflectivity != NULL){\n        totalColor = mix(reflectColor, refractColor, u_reflectivity);\n	}\n	else{\n        totalColor = mix(reflectColor, refractColor, computeFresnelRatio(inDir, normal, u_refractionRatio));\n	}\n\n	return totalColor;\n}\n", body: "totalColor *= getEnvMapTotalColor(inDir, normalize(v_normal));\n", };
        ShaderChunk.reflection_forBasic_fragment = { top: "", define: "", varDeclare: "", funcDeclare: "", funcDefine: "", body: "totalColor *= textureCube(u_samplerCube0, reflect(inDir, normalize(v_normal)));\n", };
        ShaderChunk.refraction_forBasic_fragment = { top: "", define: "", varDeclare: "", funcDeclare: "", funcDefine: "", body: "totalColor *= textureCube(u_samplerCube0, refract(inDir, normalize(v_normal), u_refractionRatio));\n", };
        ShaderChunk.diffuseMap_fragment = { top: "", define: "", varDeclare: "varying vec2 v_diffuseMapTexCoord;\n", funcDeclare: "", funcDefine: "vec3 getMaterialDiffuse() {\n        return vec3(texture2D(u_diffuseMapSampler, v_diffuseMapTexCoord));\n    }\n", body: "", };
        ShaderChunk.diffuseMap_vertex = { top: "", define: "", varDeclare: "varying vec2 v_diffuseMapTexCoord;\n", funcDeclare: "", funcDefine: "", body: "vec2 sourceTexCoord = a_texCoord * u_sourceRegion.zw + u_sourceRegion.xy;\n    v_diffuseMapTexCoord = sourceTexCoord * u_repeatRegion.zw + u_repeatRegion.xy;\n    //v_diffuseMapTexCoord = a_texCoord;\n", };
        ShaderChunk.noDiffuseMap_fragment = { top: "", define: "", varDeclare: "", funcDeclare: "", funcDefine: "vec3 getMaterialDiffuse() {\n        return u_diffuse;\n    }\n", body: "", };
        ShaderChunk.noNormalMap_fragment = { top: "", define: "", varDeclare: "varying vec3 v_normal;\n", funcDeclare: "vec3 getNormal();\n\n", funcDefine: "#if POINT_LIGHTS_COUNT > 0\nvec3 getPointLightDir(int index){\n    //workaround '[] : Index expression must be constant' error\n    for (int x = 0; x <= POINT_LIGHTS_COUNT; x++) {\n        if(x == index){\n            return getPointLightDirByLightPos(u_pointLights[x].position);\n        }\n    }\n    /*!\n    solve error in window7 chrome/firefox:\n    not all control paths return a value.\n    failed to create d3d shaders\n    */\n    return vec3(0.0);\n}\n#endif\n\n#if DIRECTION_LIGHTS_COUNT > 0\nvec3 getDirectionLightDir(int index){\n    //workaround '[] : Index expression must be constant' error\n    for (int x = 0; x <= DIRECTION_LIGHTS_COUNT; x++) {\n        if(x == index){\n            return getDirectionLightDirByLightPos(u_directionLights[x].position);\n        }\n    }\n\n    /*!\n    solve error in window7 chrome/firefox:\n    not all control paths return a value.\n    failed to create d3d shaders\n    */\n    return vec3(0.0);\n}\n#endif\n\n\nvec3 getViewDir(){\n    return normalize(u_cameraPos - v_worldPosition);\n}\nvec3 getNormal(){\n    return v_normal;\n}\n\n", body: "", };
        ShaderChunk.noNormalMap_vertex = { top: "", define: "", varDeclare: "varying vec3 v_normal;\n", funcDeclare: "", funcDefine: "", body: "//v_normal = normalize( vec3(u_normalMatrix * vec4(a_normal, 1.0)));\n    v_normal = normalize( u_normalMatrix * a_normal);\n", };
        ShaderChunk.noSpecularMap_fragment = { top: "", define: "", varDeclare: "", funcDeclare: "", funcDefine: "vec3 getMaterialSpecular() {\n        return u_specular;\n    }\n", body: "", };
        ShaderChunk.normalMap_fragment = { top: "", define: "", varDeclare: "varying vec2 v_normalMapTexCoord;\nvarying vec3 v_viewDir;\n#if POINT_LIGHTS_COUNT > 0\nvarying vec3 v_pointLightDir[POINT_LIGHTS_COUNT];\n#endif\n\n#if DIRECTION_LIGHTS_COUNT > 0\nvarying vec3 v_directionLightDir[DIRECTION_LIGHTS_COUNT];\n#endif\n\n", funcDeclare: "vec3 getNormal();\n\nvec3 getLightDir(vec3 lightPos);\n\n", funcDefine: "#if POINT_LIGHTS_COUNT > 0\nvec3 getPointLightDir(int index){\n    //workaround '[] : Index expression must be constant' error\n    for (int x = 0; x <= POINT_LIGHTS_COUNT; x++) {\n        if(x == index){\n            return v_pointLightDir[x];\n        }\n    }\n    /*!\n    solve error in window7 chrome/firefox:\n    not all control paths return a value.\n    failed to create d3d shaders\n    */\n    return vec3(0.0);\n}\n#endif\n\n#if DIRECTION_LIGHTS_COUNT > 0\n\nvec3 getDirectionLightDir(int index){\n    //workaround '[] : Index expression must be constant' error\n    for (int x = 0; x <= DIRECTION_LIGHTS_COUNT; x++) {\n        if(x == index){\n            return v_directionLightDir[x];\n        }\n    }\n\n    /*!\n    solve error in window7 chrome/firefox:\n    not all control paths return a value.\n    failed to create d3d shaders\n    */\n    return vec3(0.0);\n}\n#endif\n\n\nvec3 getViewDir(){\n    return v_viewDir;\n}\nvec3 getNormal(){\n        // Obtain normal from normal map in range [0,1]\n        vec3 normal = texture2D(u_normalMapSampler, v_normalMapTexCoord).rgb;\n\n        // Transform normal vector to range [-1,1]\n        return normalize(normal * 2.0 - 1.0);  // this normal is in tangent space\n}\n", body: "", };
        ShaderChunk.normalMap_vertex = { top: "", define: "", varDeclare: "varying vec2 v_normalMapTexCoord;\n	varying vec3 v_viewDir;\n\n\n#if POINT_LIGHTS_COUNT > 0\nvarying vec3 v_pointLightDir[POINT_LIGHTS_COUNT];\n#endif\n\n#if DIRECTION_LIGHTS_COUNT > 0\nvarying vec3 v_directionLightDir[DIRECTION_LIGHTS_COUNT];\n#endif\n\n", funcDeclare: "", funcDefine: "mat3 computeTBN(){\n            //vec3 T = normalize(normalMatrix * tangent);\n            //vec3 B = normalize(normalMatrix * bitangent);\n            //vec3 N = normalize(normalMatrix * normal);\n\n            vec3 T = normalize(u_normalMatrix * a_tangent);\n            vec3 N = normalize(u_normalMatrix * a_normal);\n            // re-orthogonalize T with respect to N\n            T = normalize(T - dot(T, N) * N);\n            // then retrieve perpendicular vector B with the cross product of T and N\n            vec3 B = cross(T, N);\n\n\n            return transpose(mat3(T, B, N));\n        }\n", body: "mat3 TBN = computeTBN();\n\n    //v_tangentLightPos = TBN * light.position;\n    //v_tangentCameraPos  = TBN * u_cameraPos;\n    //v_tangentPos  = TBN * v_position;\n\n\n    vec3 tangentPosition = TBN * vec3(u_mMatrix * vec4(a_position, 1.0));\n\n    v_normalMapTexCoord = a_texCoord;\n\n    v_viewDir = normalize(TBN * u_cameraPos - tangentPosition);\n\n\n#if POINT_LIGHTS_COUNT > 0\n       for(int i = 0; i < POINT_LIGHTS_COUNT; i++){\n            //not normalize for computing distance\n            v_pointLightDir[i] = TBN * getPointLightDirByLightPos(u_pointLights[i].position, tangentPosition);\n       }\n#endif\n\n#if DIRECTION_LIGHTS_COUNT > 0\n       for(int i = 0; i < DIRECTION_LIGHTS_COUNT; i++){\n            v_directionLightDir[i] = normalize(- TBN * getDirectionLightDirByLightPos(u_directionLights[i].position));\n       }\n#endif\n\n", };
        ShaderChunk.specularMap_fragment = { top: "", define: "", varDeclare: "varying vec2 v_specularMapTexCoord;\n", funcDeclare: "", funcDefine: "vec3 getMaterialSpecular() {\n        return vec3(texture2D(u_specularMapSampler, v_specularMapTexCoord));\n    }\n", body: "", };
        ShaderChunk.specularMap_vertex = { top: "", define: "", varDeclare: "varying vec2 v_specularMapTexCoord;\n", funcDeclare: "", funcDefine: "", body: "v_specularMapTexCoord = a_texCoord;\n", };
        ShaderChunk.buildCubemapShadowMap_fragment = { top: "", define: "", varDeclare: "varying vec3 v_worldPosition;\n", funcDeclare: "", funcDefine: "", body: "\n// get distance between fragment and light source\n    float lightDistance = length(v_worldPosition - u_lightPos);\n\n    // map to [0,1] range by dividing by farPlane\n    lightDistance = lightDistance / u_farPlane;\n\n\ngl_FragData[0] = packDepth(lightDistance);\n\n\n//gl_FragColor = vec4(0.5, 0.0, 1.0, 1.0);\n//gl_FragData[0] = vec4(lightDistance, 1.0, 1.0, 1.0);\n", };
        ShaderChunk.buildCubemapShadowMap_vertex = { top: "", define: "", varDeclare: "varying vec3 v_worldPosition;\n", funcDeclare: "", funcDefine: "", body: "v_worldPosition = vec3(u_mMatrix * vec4(a_position, 1.0));\n    gl_Position = u_pMatrix * u_vMatrix * vec4(v_worldPosition, 1.0);\n", };
        ShaderChunk.buildTwoDShadowMap_fragment = { top: "", define: "", varDeclare: "", funcDeclare: "", funcDefine: "", body: "gl_FragData[0] = packDepth(gl_FragCoord.z);\n", };
        ShaderChunk.buildTwoDShadowMap_vertex = { top: "", define: "", varDeclare: "", funcDeclare: "", funcDefine: "", body: "gl_Position = u_vpMatrixFromLight * u_mMatrix * vec4(a_position, 1.0);\n//gl_Position = u_pMatrix* u_vMatrix * u_mMatrix * vec4(a_position, 1.0);\n", };
        ShaderChunk.commonBuildShadowMap_fragment = { top: "", define: "", varDeclare: "", funcDeclare: "", funcDefine: "// Packing a float in GLSL with multiplication and mod\nvec4 packDepth(in float depth) {\n    const vec4 bit_shift = vec4(256.0 * 256.0 * 256.0, 256.0 * 256.0, 256.0, 1.0);\n    const vec4 bit_mask = vec4(0.0, 1.0 / 256.0, 1.0 / 256.0, 1.0 / 256.0);\n    // combination of mod and multiplication and division works better\n    vec4 res = mod(depth * bit_shift * vec4(255), vec4(256) ) / vec4(255);\n    res -= res.xxyz * bit_mask;\n\n    return res;\n}\n", body: "", };
        ShaderChunk.cubemapShadowMap_fragment = { top: "", define: "", varDeclare: "uniform samplerCube u_cubemapShadowMapSampler[ CUBEMAP_SHADOWMAP_COUNT ];\n	uniform float u_cubemapShadowDarkness[ CUBEMAP_SHADOWMAP_COUNT ];\n	uniform float u_cubemapShadowBias[ CUBEMAP_SHADOWMAP_COUNT ];\n	uniform float u_farPlane[ CUBEMAP_SHADOWMAP_COUNT ];\n	uniform vec3 u_cubemapLightPos[ CUBEMAP_SHADOWMAP_COUNT ];\n", funcDeclare: "", funcDefine: "// PCF\nfloat getCubemapShadowVisibilityByPCF(float currentDepth, vec3 fragToLight, samplerCube cubemapShadowMapSampler, float shadowBias, float farPlane, float shadowDarkness){\n    //only support in opengl es 3.0+\n    //vec3 sampleOffsetDirections[20] = vec3[]\n    //(\n       //vec3( 1,  1,  1), vec3( 1, -1,  1), vec3(-1, -1,  1), vec3(-1,  1,  1),\n       //vec3( 1,  1, -1), vec3( 1, -1, -1), vec3(-1, -1, -1), vec3(-1,  1, -1),\n       //vec3( 1,  1,  0), vec3( 1, -1,  0), vec3(-1, -1,  0), vec3(-1,  1,  0),\n       //vec3( 1,  0,  1), vec3(-1,  0,  1), vec3( 1,  0, -1), vec3(-1,  0, -1),\n       //vec3( 0,  1,  1), vec3( 0, -1,  1), vec3( 0, -1, -1), vec3( 0,  1, -1)\n    //);\n\n    vec3 sampleOffsetDirections[20];\n\n    sampleOffsetDirections[0] = vec3( 1,  1,  1);\n    sampleOffsetDirections[1] = vec3( 1,  -1,  1);\n    sampleOffsetDirections[2] = vec3( -1,  -1,  1);\n    sampleOffsetDirections[3] = vec3( -1,  1,  1);\n\n    sampleOffsetDirections[4] = vec3( 1,  1,  -1);\n    sampleOffsetDirections[5] = vec3( 1,  -1,  -1);\n    sampleOffsetDirections[6] = vec3( -1,  -1,  -1);\n    sampleOffsetDirections[7] = vec3( -1,  1,  -1);\n\n    sampleOffsetDirections[8] = vec3( 1,  1,  0);\n    sampleOffsetDirections[9] = vec3( 1,  -1,  0);\n    sampleOffsetDirections[10] = vec3( -1,  -1,  0);\n    sampleOffsetDirections[11] = vec3( -1,  1,  0);\n\n    sampleOffsetDirections[12] = vec3( 1,  0,  1);\n    sampleOffsetDirections[13] = vec3( -1,  0,  1);\n    sampleOffsetDirections[14] = vec3( 1,  0,  -1);\n    sampleOffsetDirections[15] = vec3( -1,  0,  -1);\n\n    sampleOffsetDirections[16] = vec3( 0,  1,  1);\n    sampleOffsetDirections[17] = vec3( 0,  -1,  1);\n    sampleOffsetDirections[18] = vec3( 0,  -1,  -1);\n    sampleOffsetDirections[19] = vec3( 0,  1,  -1);\n\n    float shadow = 0.0;\n    int samples = 20;\n\n    //float diskRadius = 0.00000;\n    //Another interesting trick we can apply here is that we can change the diskRadius based on how far the viewer is away from a fragment; this way we can increase the offset radius by the distance to the viewer, making the shadows softer when far away and sharper when close by.\n    float viewDistance = length(u_cameraPos - v_worldPosition);\n    float diskRadius = (1.0 + (viewDistance / farPlane)) / 25.0;\n\n    //for(int i = 0; i < samples; ++i)\n    for(int i = 0; i < 20; ++i)\n    {\n        float pcfDepth = unpackDepth(textureCube(cubemapShadowMapSampler, fragToLight + sampleOffsetDirections[i] * diskRadius));\n        pcfDepth *= farPlane;   // Undo mapping [0;1]\n        shadow += currentDepth - shadowBias > pcfDepth  ? shadowDarkness : 1.0;\n    }\n    shadow /= float(samples);\n\n    return shadow;\n}\n\n\nfloat getCubemapShadowVisibility(vec3 lightDir, samplerCube cubemapShadowMapSampler, vec3 lightPos, float farPlane, float shadowBias, float  shadowDarkness) {\n// Get vector between fragment position and light position\n    vec3 fragToLight= v_worldPosition - lightPos;\n    // Use the light to fragment vector to sample from the depth map\n    // Now get current linear depth as the length between the fragment and light position\n    float currentDepth = length(fragToLight);\n\n    #if defined(SHADOWMAP_TYPE_PCF)\n    return getCubemapShadowVisibilityByPCF(currentDepth, fragToLight, cubemapShadowMapSampler, getShadowBias(lightDir, shadowBias), farPlane, shadowDarkness);\n    #endif\n\n    float closestDepth = unpackDepth(textureCube(cubemapShadowMapSampler, fragToLight));\n\n    // It is currently in linear range between [0,1]. Re-transform back to original value\n    closestDepth *= farPlane;\n\n\n    return float(currentDepth > closestDepth + getShadowBias(lightDir, shadowBias) ? shadowDarkness : 1.0);\n}\n", body: "", };
        ShaderChunk.noShadowMap_fragment = { top: "", define: "", varDeclare: "", funcDeclare: "", funcDefine: "vec3 getShadowVisibility() {\n        return vec3(1.0);\n    }\n", body: "", };
        ShaderChunk.totalShadowMap_fragment = { top: "", define: "", varDeclare: "", funcDeclare: "float getShadowBias(vec3 lightDir, float shadowBias);\nfloat unpackDepth(vec4 rgbaDepth);\n", funcDefine: "float getShadowBias(vec3 lightDir, float shadowBias){\n    float bias = shadowBias;\n\n    if(shadowBias == NULL){\n        bias = 0.005;\n    }\n\n\n     /*!\n     A shadow bias of 0.005 solves the issues of our scene by a large extent, but some surfaces that have a steep angle to the light source might still produce shadow acne. A more solid approach would be to change the amount of bias based on the surface angle towards the light: something we can solve with the dot product:\n     */\n\n     return max(bias * (1.0 - dot(normalize(getNormal()), lightDir)), bias);\n\n    //return bias;\n}\n\nfloat unpackDepth(vec4 rgbaDepth) {\n    const vec4 bitShift = vec4(1.0 / (256.0 * 256.0 * 256.0), 1.0 / (256.0 * 256.0), 1.0 / 256.0, 1.0);\n    return dot(rgbaDepth, bitShift);\n}\n\nvec3 getShadowVisibility() {\n    vec3 shadowColor = vec3(1.0);\n    vec3 twoDLightDir = vec3(0.0);\n    vec3 cubemapLightDir = vec3(0.0);\n\n\n    //to normalMap, the lightDir use the origin one instead of normalMap's lightDir here(the lightDir is used for computing shadowBias, the origin one is enough for it)\n\n    #if TWOD_SHADOWMAP_COUNT > 0\n	for( int i = 0; i < TWOD_SHADOWMAP_COUNT; i ++ ) {\n        twoDLightDir = getDirectionLightDirByLightPos(u_twoDLightPos[i]);\n\n	////if is opposite to direction of light rays, no shadow\n\n        shadowColor *= getTwoDShadowVisibility(twoDLightDir, u_twoDShadowMapSampler[i], v_positionFromLight[i], u_twoDShadowBias[i], u_twoDShadowDarkness[i], u_twoDShadowSize[i]);\n	}\n	#endif\n\n\n	#if CUBEMAP_SHADOWMAP_COUNT > 0\n	for( int i = 0; i < CUBEMAP_SHADOWMAP_COUNT; i ++ ) {\n        cubemapLightDir = getPointLightDirByLightPos(u_cubemapLightPos[i]);\n\n	////if is opposite to direction of light rays, no shadow\n\n        shadowColor *= getCubemapShadowVisibility(cubemapLightDir, u_cubemapShadowMapSampler[i], u_cubemapLightPos[i], u_farPlane[i], u_cubemapShadowBias[i], u_cubemapShadowDarkness[i]);\n	}\n	#endif\n\n	return shadowColor;\n}\n\n", body: "", };
        ShaderChunk.twoDShadowMap_fragment = { top: "", define: "", varDeclare: "varying vec4 v_positionFromLight[ TWOD_SHADOWMAP_COUNT ];\n	uniform sampler2D u_twoDShadowMapSampler[ TWOD_SHADOWMAP_COUNT ];\n	uniform float u_twoDShadowDarkness[ TWOD_SHADOWMAP_COUNT ];\n	uniform float u_twoDShadowBias[ TWOD_SHADOWMAP_COUNT ];\n	uniform vec2 u_twoDShadowSize[ TWOD_SHADOWMAP_COUNT ];\n	uniform vec3 u_twoDLightPos[ TWOD_SHADOWMAP_COUNT ];\n", funcDeclare: "", funcDefine: "// PCF\nfloat getTwoDShadowVisibilityByPCF(float currentDepth, vec2 shadowCoord, sampler2D twoDShadowMapSampler, float shadowBias, float shadowDarkness, vec2 shadowMapSize){\n\n    float shadow = 0.0;\n    vec2 texelSize = vec2(1.0 / shadowMapSize[0], 1.0 / shadowMapSize[1]);\n\n    for(int x = -1; x <= 1; ++x)\n    {\n        for(int y = -1; y <= 1; ++y)\n        {\n            float pcfDepth = unpackDepth(texture2D(twoDShadowMapSampler, shadowCoord + vec2(x, y) * texelSize));\n            shadow += currentDepth - shadowBias > pcfDepth  ? shadowDarkness : 1.0;\n        }\n    }\n    shadow /= 9.0;\n\n    return shadow;\n}\n\n\n\nfloat getTwoDShadowVisibility(vec3 lightDir, sampler2D twoDShadowMapSampler, vec4 v_positionFromLight, float shadowBias, float shadowDarkness, vec2 shadowSize) {\n    //project texture\n    vec3 shadowCoord = (v_positionFromLight.xyz / v_positionFromLight.w) / 2.0 + 0.5;\n    //vec3 shadowCoord = vec3(0.5, 0.5, 0.5);\n\n    #ifdef SHADOWMAP_TYPE_PCF\n    // Percentage-close filtering\n    // (9 pixel kernel)\n    return getTwoDShadowVisibilityByPCF(shadowCoord.z, shadowCoord.xy, twoDShadowMapSampler, getShadowBias(lightDir, shadowBias), shadowDarkness, shadowSize);\n\n    #else\n    return shadowCoord.z > unpackDepth(texture2D(twoDShadowMapSampler, shadowCoord.xy)) + getShadowBias(lightDir, shadowBias) ? shadowDarkness : 1.0;\n    #endif\n}\n", body: "", };
        ShaderChunk.twoDShadowMap_vertex = { top: "", define: "", varDeclare: "varying vec4 v_positionFromLight[ TWOD_SHADOWMAP_COUNT ];\nuniform mat4 u_vpMatrixFromLight[ TWOD_SHADOWMAP_COUNT ];\n", funcDeclare: "", funcDefine: "", body: "for( int i = 0; i < TWOD_SHADOWMAP_COUNT; i ++ ) {\n    v_positionFromLight[i] = u_vpMatrixFromLight[i] * vec4(v_worldPosition, 1.0);\n	}\n", };
        return ShaderChunk;
    })();
    wd.ShaderChunk = ShaderChunk;
})(wd || (wd = {}));

var wd;
(function (wd) {
    var ShaderSnippet = (function () {
        function ShaderSnippet() {
        }
        ShaderSnippet.main_begin = "void main(void){\n";
        ShaderSnippet.main_end = "}\n";
        ShaderSnippet.setPos_mvp = "gl_Position = u_pMatrix * u_vMatrix * u_mMatrix * vec4(a_position, 1.0);\n";
        return ShaderSnippet;
    })();
    wd.ShaderSnippet = ShaderSnippet;
})(wd || (wd = {}));

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var wd;
(function (wd) {
    var Material = (function () {
        function Material() {
            this._blendType = null;
            this._blendSrc = wd.BlendFunc.ONE;
            this._blendDst = wd.BlendFunc.ZERO;
            this._blendEquation = wd.BlendEquation.ADD;
            this.shader = wd.Shader.create();
            this.color = wd.Color.create("#ffffff");
            this.redWrite = true;
            this.greenWrite = true;
            this.blueWrite = true;
            this.alphaWrite = true;
            this.polygonOffsetMode = wd.PolygonOffsetMode.NONE;
            this.side = wd.Side.FRONT;
            this.blend = false;
            this.blendFuncSeparate = null;
            this.blendEquationSeparate = [wd.BlendEquation.ADD, wd.BlendEquation.ADD];
            this.shading = wd.Shading.FLAT;
            this.refractionRatio = 0;
            this.reflectivity = wd.ShaderChunk.NULL;
            this.mapCombineMode = wd.TextureCombineMode.MIX;
            this.mapMixRatio = 0.5;
            this.mapManager = wd.MapManager.create(this);
            this.geometry = null;
        }
        Object.defineProperty(Material.prototype, "program", {
            get: function () {
                return this.shader.program;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Material.prototype, "blendType", {
            get: function () {
                if (this._blendType) {
                    return this._blendType;
                }
                if ((this.blendSrc === wd.BlendFunc.ONE)
                    && (this.blendDst === wd.BlendFunc.ZERO)
                    && (this.blendEquation === wd.BlendEquation.ADD)) {
                    return wd.BlendType.NONE;
                }
                else if ((this.blendSrc === wd.BlendFunc.SRC_ALPHA)
                    && (this.blendDst === wd.BlendFunc.ONE_MINUS_SRC_ALPHA)
                    && (this.blendEquation === wd.BlendEquation.ADD)) {
                    return wd.BlendType.NORMAL;
                }
                else if ((this.blendSrc === wd.BlendFunc.ONE)
                    && (this.blendDst === wd.BlendFunc.ONE)
                    && (this.blendEquation === wd.BlendEquation.ADD)) {
                    return wd.BlendType.ADDITIVE;
                }
                else if ((this.blendSrc === wd.BlendFunc.SRC_ALPHA)
                    && (this.blendDst === wd.BlendFunc.ONE)
                    && (this.blendEquation === wd.BlendEquation.ADD)) {
                    return wd.BlendType.ADDITIVEALPHA;
                }
                else if ((this.blendSrc === wd.BlendFunc.DST_COLOR)
                    && (this.blendDst === wd.BlendFunc.ZERO)
                    && (this.blendEquation === wd.BlendEquation.ADD)) {
                    return wd.BlendType.MULTIPLICATIVE;
                }
                else if ((this.blendSrc === wd.BlendFunc.ONE)
                    && (this.blendDst === wd.BlendFunc.ONE_MINUS_SRC_ALPHA)
                    && (this.blendEquation === wd.BlendEquation.ADD)) {
                    return wd.BlendType.PREMULTIPLIED;
                }
                else {
                    return wd.BlendType.NORMAL;
                }
            },
            set: function (blendType) {
                switch (blendType) {
                    case wd.BlendType.NONE:
                        this.blend = false;
                        this.blendSrc = wd.BlendFunc.ONE;
                        this.blendDst = wd.BlendFunc.ZERO;
                        this.blendEquation = wd.BlendEquation.ADD;
                        break;
                    case wd.BlendType.NORMAL:
                        this.blend = true;
                        this.blendSrc = wd.BlendFunc.SRC_ALPHA;
                        this.blendDst = wd.BlendFunc.ONE_MINUS_SRC_ALPHA;
                        this.blendEquation = wd.BlendEquation.ADD;
                        break;
                    case wd.BlendType.PREMULTIPLIED:
                        this.blend = true;
                        this.blendSrc = wd.BlendFunc.ONE;
                        this.blendDst = wd.BlendFunc.ONE_MINUS_SRC_ALPHA;
                        this.blendEquation = wd.BlendEquation.ADD;
                        break;
                    case wd.BlendType.ADDITIVE:
                        this.blend = true;
                        this.blendSrc = wd.BlendFunc.ONE;
                        this.blendDst = wd.BlendFunc.ONE;
                        this.blendEquation = wd.BlendEquation.ADD;
                        break;
                    case wd.BlendType.ADDITIVEALPHA:
                        this.blend = true;
                        this.blendSrc = wd.BlendFunc.SRC_ALPHA;
                        this.blendDst = wd.BlendFunc.ONE;
                        this.blendEquation = wd.BlendEquation.ADD;
                        break;
                    case wd.BlendType.MULTIPLICATIVE:
                        this.blend = true;
                        this.blendSrc = wd.BlendFunc.DST_COLOR;
                        this.blendDst = wd.BlendFunc.ZERO;
                        this.blendEquation = wd.BlendEquation.ADD;
                        break;
                    default:
                        wd.Log.error(true, wd.Log.info.FUNC_INVALID("blendType"));
                        break;
                }
                this._blendType = blendType;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Material.prototype, "envMap", {
            get: function () {
                return this.mapManager.getEnvMap();
            },
            set: function (envMap) {
                this.mapManager.setEnvMap(envMap);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Material.prototype, "blendSrc", {
            get: function () {
                return this._blendSrc;
            },
            set: function (blendSrc) {
                this._blendSrc = blendSrc;
                this.blendFuncSeparate = null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Material.prototype, "blendDst", {
            get: function () {
                return this._blendDst;
            },
            set: function (blendDst) {
                this._blendDst = blendDst;
                this.blendFuncSeparate = null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Material.prototype, "blendEquation", {
            get: function () {
                return this._blendEquation;
            },
            set: function (blendEquation) {
                this._blendEquation = blendEquation;
                this.blendEquationSeparate = null;
            },
            enumerable: true,
            configurable: true
        });
        Material.prototype.init = function () {
            var self = this;
            this.shader.init();
            this.mapManager.init();
            wd.EventManager.on(wd.EngineEvent.AFTER_INIT, function () {
                self._addTopShaderLib();
                self.addShaderLib();
            });
        };
        Material.prototype.dispose = function () {
            this.mapManager.dispose();
        };
        Material.prototype.updateTexture = function () {
            this.mapManager.update();
        };
        Material.prototype.updateShader = function (quadCmd) {
            var scene = wd.Director.getInstance().scene;
            if (scene.isUseProgram) {
                scene.shader.update(quadCmd, this);
            }
            else {
                this.shader.update(quadCmd, this);
            }
        };
        Material.prototype.addShaderLib = function () {
        };
        Material.prototype.addMap = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            this.mapManager.addMap.apply(this.mapManager, args);
        };
        Material.prototype.addNormalShaderLib = function () {
            if (this._hasAnimation() && !this.shader.hasLib(wd.MorphNormalShaderLib)) {
                this._addShaderLibToTop(wd.MorphNormalShaderLib.create());
            }
            else if (!this.shader.hasLib(wd.CommonNormalShaderLib)) {
                this._addShaderLibToTop(wd.CommonNormalShaderLib.create());
            }
        };
        Material.prototype.setBlendByOpacity = function (opacity) {
            if (opacity < 1.0 && opacity > 0.0) {
                this.blend = true;
            }
            else {
                this.blend = false;
            }
        };
        Material.prototype._addTopShaderLib = function () {
            this.shader.addLib(wd.CommonShaderLib.create());
            if (this._hasAnimation()) {
                this.shader.addLib(wd.MorphCommonShaderLib.create());
                this.shader.addLib(wd.MorphVerticeShaderLib.create());
            }
            else {
                this.shader.addLib(wd.CommonVerticeShaderLib.create());
            }
        };
        Material.prototype._addShaderLibToTop = function (lib) {
            this.shader.addShaderLibToTop(lib);
        };
        Material.prototype._hasAnimation = function () {
            if (this.geometry instanceof wd.ModelGeometry) {
                var geo = (this.geometry);
                return geo.hasAnimation();
            }
            return false;
        };
        __decorate([
            wd.require(function () {
                wd.assert(!(this.mirrorMap && this.envMap), wd.Log.info.FUNC_SHOULD_NOT("mirrorMap and envMap", "be set both"));
            })
        ], Material.prototype, "init", null);
        __decorate([
            wd.virtual
        ], Material.prototype, "addShaderLib", null);
        return Material;
    })();
    wd.Material = Material;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var BasicMaterial = (function (_super) {
        __extends(BasicMaterial, _super);
        function BasicMaterial() {
            _super.apply(this, arguments);
            this._opacity = 1.0;
        }
        BasicMaterial.create = function () {
            var obj = new this();
            return obj;
        };
        Object.defineProperty(BasicMaterial.prototype, "map", {
            set: function (map) {
                if (map instanceof wd.Texture || map instanceof wd.TextureAsset) {
                    this.addMap(map);
                }
                else {
                    var mapArr = (arguments[0]);
                    wdCb.Log.error(mapArr.length > 2, wdCb.Log.info.FUNC_SUPPORT("only", "map.count <= 2"));
                    for (var _i = 0; _i < mapArr.length; _i++) {
                        var m = mapArr[_i];
                        this.addMap(m);
                    }
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BasicMaterial.prototype, "mirrorMap", {
            get: function () {
                return this.mapManager.getMirrorMap();
            },
            set: function (mirrorMap) {
                this.mapManager.setMirrorMap(mirrorMap);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BasicMaterial.prototype, "opacity", {
            get: function () {
                return this._opacity;
            },
            set: function (opacity) {
                this.setBlendByOpacity(opacity);
                this._opacity = opacity;
            },
            enumerable: true,
            configurable: true
        });
        BasicMaterial.prototype.addShaderLib = function () {
            var envMap = null;
            this.shader.addLib(wd.BasicShaderLib.create());
            this._setMapShaderLib();
            envMap = this.envMap;
            if (envMap) {
                this._setEnvMapShaderLib(envMap);
            }
            this._setMirrorMapShaderLib();
            this.shader.addLib(wd.BasicEndShaderLib.create());
        };
        BasicMaterial.prototype._setMapShaderLib = function () {
            var mapManager = this.mapManager, mapCount = mapManager.getMapCount(function (map) {
                return !mapManager.isMirrorMap(map);
            });
            if (mapCount > 0) {
                if (mapCount > 1) {
                    this.shader.addLib(wd.MultiMapShaderLib.create());
                }
                else {
                    this.shader.addLib(wd.BasicMapShaderLib.create());
                }
            }
        };
        BasicMaterial.prototype._setEnvMapShaderLib = function (envMap) {
            this.addNormalShaderLib();
            switch (envMap.mode) {
                case wd.EnvMapMode.BASIC:
                    this.shader.addLib(wd.BasicEnvMapForBasicShaderLib.create());
                    break;
                case wd.EnvMapMode.REFLECTION:
                    this.shader.addLib(wd.ReflectionForBasicShaderLib.create());
                    break;
                case wd.EnvMapMode.REFRACTION:
                    this.shader.addLib(wd.RefractionForBasicShaderLib.create());
                    break;
                case wd.EnvMapMode.FRESNEL:
                    this.shader.addLib(wd.FresnelForBasicShaderLib.create());
                    break;
                default:
                    wd.Log.error(true, wd.Log.info.FUNC_INVALID("EnvMapMode"));
                    break;
            }
        };
        BasicMaterial.prototype._setMirrorMapShaderLib = function () {
            if (this.mirrorMap) {
                this.shader.addLib(wd.MirrorForBasicShaderLib.create());
            }
        };
        return BasicMaterial;
    })(wd.Material);
    wd.BasicMaterial = BasicMaterial;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var SkyboxMaterial = (function (_super) {
        __extends(SkyboxMaterial, _super);
        function SkyboxMaterial() {
            _super.apply(this, arguments);
        }
        SkyboxMaterial.create = function () {
            var obj = new this();
            obj.initWhenCreate();
            return obj;
        };
        SkyboxMaterial.prototype.initWhenCreate = function () {
            this.side = wd.Side.BACK;
        };
        SkyboxMaterial.prototype.addShaderLib = function () {
            this.shader.addLib(wd.SkyboxShaderLib.create());
        };
        return SkyboxMaterial;
    })(wd.Material);
    wd.SkyboxMaterial = SkyboxMaterial;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var LightMaterial = (function (_super) {
        __extends(LightMaterial, _super);
        function LightMaterial() {
            _super.apply(this, arguments);
            this._diffuseMap = null;
            this._specularMap = null;
            this._normalMap = null;
            this._shininess = 32;
            this._opacity = 1.0;
            this.twoDShadowMapDatas = wdCb.Collection.create();
            this.cubemapShadowMapDatas = wdCb.Collection.create();
            this.buildTwoDShadowMapData = null;
            this.buildCubemapShadowMapData = null;
            this.specular = wd.Color.create("0x111111");
            this._twoDShadowMapSamplerIndex = 0;
            this._cubemapShadowMapSamplerIndex = 0;
        }
        LightMaterial.create = function () {
            var obj = new this();
            return obj;
        };
        Object.defineProperty(LightMaterial.prototype, "diffuseMap", {
            get: function () {
                return this._diffuseMap;
            },
            set: function (diffuseMap) {
                this.addMap(diffuseMap, {
                    samplerVariableName: wd.VariableNameTable.getVariableName("diffuseMap")
                });
                this._diffuseMap = diffuseMap;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LightMaterial.prototype, "specularMap", {
            get: function () {
                return this._specularMap;
            },
            set: function (specularMap) {
                this.addMap(specularMap, {
                    samplerVariableName: wd.VariableNameTable.getVariableName("specularMap")
                });
                this._specularMap = specularMap;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LightMaterial.prototype, "normalMap", {
            get: function () {
                return this._normalMap;
            },
            set: function (normalMap) {
                this.addMap(normalMap, {
                    samplerVariableName: wd.VariableNameTable.getVariableName("normalMap")
                });
                this._normalMap = normalMap;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LightMaterial.prototype, "shininess", {
            get: function () {
                if (Number(this._shininess) <= 0) {
                    return 32;
                }
                return this._shininess;
            },
            set: function (shininess) {
                this._shininess = shininess;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LightMaterial.prototype, "opacity", {
            get: function () {
                return this._opacity;
            },
            set: function (opacity) {
                this.setBlendByOpacity(opacity);
                this._opacity = opacity;
            },
            enumerable: true,
            configurable: true
        });
        LightMaterial.prototype.addTwoDShadowMap = function (shadowMap) {
            this.addMap(shadowMap, {
                samplerData: this._twoDShadowMapSamplerIndex
            });
            this._twoDShadowMapSamplerIndex++;
        };
        LightMaterial.prototype.addCubemapShadowMap = function (shadowMap) {
            this.addMap(shadowMap, {
                samplerData: this._cubemapShadowMapSamplerIndex
            });
            this._cubemapShadowMapSamplerIndex++;
        };
        LightMaterial.prototype.hasShadowMap = function (map) {
            return this.mapManager.hasMap(map);
        };
        LightMaterial.prototype.addTwoDShadowMapData = function (shadowMapData) {
            this.twoDShadowMapDatas.addChild(shadowMapData);
        };
        LightMaterial.prototype.addCubemapShadowMapData = function (shadowMapData) {
            this.cubemapShadowMapDatas.addChild(shadowMapData);
        };
        LightMaterial.prototype.clearTwoDShadowMapData = function () {
            this.twoDShadowMapDatas.removeAllChildren();
        };
        LightMaterial.prototype.clearCubemapShadowMapData = function () {
            this.cubemapShadowMapDatas.removeAllChildren();
        };
        LightMaterial.prototype.addShaderLib = function () {
            var envMap = null;
            this.addNormalShaderLib();
            this.shader.addLib(wd.LightCommonShaderLib.create());
            this._setPhongMapShaderLib();
            this.shader.addLib(wd.LightShaderLib.create());
            envMap = this.envMap;
            if (envMap) {
                this._setEnvMapShaderLib(envMap);
            }
            this.shader.addLib(wd.LightEndShaderLib.create());
        };
        LightMaterial.prototype._setPhongMapShaderLib = function () {
            var scene = wd.Director.getInstance().scene;
            if (this._diffuseMap) {
                this.shader.addLib(wd.DiffuseMapShaderLib.create());
            }
            else {
                this.shader.addLib(wd.NoDiffuseMapShaderLib.create());
            }
            if (this._specularMap) {
                this.shader.addLib(wd.SpecularMapShaderLib.create());
            }
            else {
                this.shader.addLib(wd.NoSpecularMapShaderLib.create());
            }
            if (this._normalMap) {
                this.shader.addLib(wd.NormalMapShaderLib.create());
            }
            else {
                this.shader.addLib(wd.NoNormalMapShaderLib.create());
            }
            if (scene.shadowMap.enable && (this._hasTwoDShadowMap() || this._hasCubemapShadowMap())) {
                if (this._hasTwoDShadowMap()) {
                    this.shader.addLib(wd.TwoDShadowMapShaderLib.create());
                }
                if (this._hasCubemapShadowMap()) {
                    this.shader.addLib(wd.CubemapShadowMapShaderLib.create());
                }
                this.shader.addLib(wd.TotalShadowMapShaderLib.create());
            }
            else {
                this.shader.addLib(wd.NoShadowMapShaderLib.create());
            }
        };
        LightMaterial.prototype._setEnvMapShaderLib = function (envMap) {
            switch (envMap.mode) {
                case wd.EnvMapMode.BASIC:
                    this.shader.addLib(wd.BasicEnvMapForLightShaderLib.create());
                    break;
                case wd.EnvMapMode.REFLECTION:
                    this.shader.addLib(wd.ReflectionForLightShaderLib.create());
                    break;
                case wd.EnvMapMode.REFRACTION:
                    this.shader.addLib(wd.RefractionForLightShaderLib.create());
                    break;
                case wd.EnvMapMode.FRESNEL:
                    this.shader.addLib(wd.FresnelForLightShaderLib.create());
                    break;
                default:
                    wd.Log.error(true, wd.Log.info.FUNC_INVALID("EnvMapMode"));
                    break;
            }
        };
        LightMaterial.prototype._hasTwoDShadowMap = function () {
            return this.mapManager.hasMap(function (map) {
                return map instanceof wd.TwoDShadowMapTexture;
            });
        };
        LightMaterial.prototype._hasCubemapShadowMap = function () {
            return this.mapManager.hasMap(function (map) {
                return map instanceof wd.CubemapShadowMapTexture;
            });
        };
        return LightMaterial;
    })(wd.Material);
    wd.LightMaterial = LightMaterial;
})(wd || (wd = {}));

var wd;
(function (wd) {
    (function (Shading) {
        Shading[Shading["FLAT"] = 0] = "FLAT";
        Shading[Shading["SMOOTH"] = 1] = "SMOOTH";
    })(wd.Shading || (wd.Shading = {}));
    var Shading = wd.Shading;
})(wd || (wd = {}));

var wd;
(function (wd) {
    var MapManager = (function () {
        function MapManager(material) {
            this._material = null;
            this._textures = wdCb.Hash.create();
            this._mirrorMap = null;
            this._material = material;
        }
        MapManager.create = function (material) {
            var obj = new this(material);
            return obj;
        };
        MapManager.prototype.init = function () {
            this._getMapList().forEach(function (texture) {
                texture.init();
            });
        };
        MapManager.prototype.addMap = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var map = null;
            if (args[0] instanceof wd.TextureAsset) {
                var asset = args[0];
                map = asset.toTexture();
            }
            else if (args[0] instanceof wd.Texture) {
                map = args[0];
            }
            if (args.length === 2) {
                var option = args[1];
                this._setMapOption(map, option);
            }
            map.material = this._material;
            this._textures.appendChild("map", map);
        };
        MapManager.prototype.getMap = function (index) {
            return this._textures.getChild("map").getChild(index);
        };
        MapManager.prototype.hasMap = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var maps = null;
            maps = this._textures.getChild("map");
            return maps && maps.hasChild(args[0]);
        };
        MapManager.prototype.getMapCount = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            if (args.length === 0) {
                var map = this._textures.getChild("map");
                return map ? map.getCount() : 0;
            }
            else {
                var filterFunc = args[0], map = this._textures.getChild("map");
                return map ? map.filter(filterFunc).getCount() : 0;
            }
        };
        MapManager.prototype.getEnvMap = function () {
            return this._getMap("envMap");
        };
        MapManager.prototype.setEnvMap = function (envMap) {
            this._setMap("envMap", envMap);
        };
        MapManager.prototype.getMirrorMap = function () {
            return this._mirrorMap;
        };
        MapManager.prototype.setMirrorMap = function (mirrorMap) {
            this.addMap(mirrorMap, {
                samplerVariableName: wd.VariableNameTable.getVariableName("mirrorReflectionMap")
            });
            this._mirrorMap = mirrorMap;
        };
        MapManager.prototype.isMirrorMap = function (map) {
            return map === this._mirrorMap;
        };
        MapManager.prototype.removeAllChildren = function () {
            this._textures.removeAllChildren();
        };
        MapManager.prototype.dispose = function () {
            this._getMapList().forEach(function (texture) {
                texture.dispose();
            });
            this.removeAllChildren();
        };
        MapManager.prototype.update = function () {
            this._getMapList()
                .filter(function (texture) {
                return texture instanceof wd.BasicTexture && texture.needUpdate;
            })
                .forEach(function (texture, index) {
                texture.update(index);
            });
        };
        MapManager.prototype.sendData = function (program) {
            this._getMapList().forEach(function (texture, index) {
                var samplerName = texture.getSamplerName(index), pos = program.getUniformLocation(samplerName);
                if (program.isUniformDataNotExistByLocation(pos)) {
                    return;
                }
                texture.bindToUnit(index);
                texture.sendData(program, pos, index);
            });
        };
        MapManager.prototype._getMapList = function () {
            return this._textures.toCollection();
        };
        MapManager.prototype._getMap = function (key) {
            return this._textures.getChild(key);
        };
        MapManager.prototype._setMap = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var key = args[0], map = args[1];
            if (!map) {
                this._removeMap(key, map);
                return;
            }
            if (arguments.length === 3) {
                var option = args[1];
                this._setMapOption(map, option);
            }
            map.material = this._material;
            this._textures.addChild(key, map);
        };
        MapManager.prototype._removeMap = function (key, map) {
            this._textures.removeChild(key);
        };
        MapManager.prototype._setMapOption = function (map, option) {
            map.variableData = option;
        };
        return MapManager;
    })();
    wd.MapManager = MapManager;
})(wd || (wd = {}));

var wd;
(function (wd) {
    (function (AssetType) {
        AssetType[AssetType["UNKNOW"] = 0] = "UNKNOW";
        AssetType[AssetType["FONT"] = 1] = "FONT";
    })(wd.AssetType || (wd.AssetType = {}));
    var AssetType = wd.AssetType;
})(wd || (wd = {}));

var wd;
(function (wd) {
    var Loader = (function () {
        function Loader() {
            this._container = wdCb.Hash.create();
        }
        Loader.prototype.load = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var url = args[0], id = null, self = this, data = null, stream = null;
            if (args.length === 1) {
                if (wd.JudgeUtils.isArray(url)) {
                    id = url.join("-");
                }
                else {
                    id = url;
                }
            }
            else {
                id = args[1];
            }
            data = this._container.getChild(id);
            if (data) {
                stream = wdFrp.just(data);
            }
            else {
                stream = this.loadAsset(url, id)
                    .do(function (data) {
                    self._container.addChild(id, data);
                }, function (err) {
                    self._errorHandle(url, err);
                }, null);
            }
            return stream;
        };
        Loader.prototype.get = function (id) {
            return this._container.getChild(id);
        };
        Loader.prototype.has = function (id) {
            return this._container.hasChild(id);
        };
        Loader.prototype.dispose = function () {
            this._container.removeAllChildren();
        };
        Loader.prototype._errorHandle = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var path = null, err = null;
            if (wd.JudgeUtils.isArray(args[0])) {
                path = args[0].join(",");
            }
            else {
                path = args[0];
            }
            err = args[1];
            wd.Log.log("load " + path + " asset fail:" + err);
        };
        return Loader;
    })();
    wd.Loader = Loader;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var wd;
(function (wd) {
    var GLSLLoader = (function (_super) {
        __extends(GLSLLoader, _super);
        function GLSLLoader() {
            _super.apply(this, arguments);
        }
        GLSLLoader.getInstance = function () {
            if (this._instance === null) {
                this._instance = new this();
            }
            return this._instance;
        };
        GLSLLoader.prototype.loadAsset = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var url = args[0];
            return wd.AjaxLoader.load(url, "text");
        };
        GLSLLoader._instance = null;
        __decorate([
            wd.require(function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i - 0] = arguments[_i];
                }
                wd.assert(!wd.JudgeUtils.isArray(args[0]), wd.Log.info.FUNC_MUST_BE("url", "string"));
            })
        ], GLSLLoader.prototype, "loadAsset", null);
        return GLSLLoader;
    })(wd.Loader);
    wd.GLSLLoader = GLSLLoader;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var wd;
(function (wd) {
    var JsLoader = (function (_super) {
        __extends(JsLoader, _super);
        function JsLoader() {
            _super.apply(this, arguments);
        }
        JsLoader.getInstance = function () {
            if (this._instance === null) {
                this._instance = new this();
            }
            return this._instance;
        };
        JsLoader.prototype.loadAsset = function () {
            var _this = this;
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var self = this, url = args[0];
            return wdFrp.fromPromise(new RSVP.Promise(function (resolve, reject) {
                var script = self._createScript();
                script.addEventListener("error", function (e) {
                    reject("error");
                });
                if (script.readyState) {
                    script.onreadystatechange = function () {
                        if (script.readyState === "loaded" || script.readyState === "complete") {
                            script.onreadystatechange = null;
                            resolve(url);
                        }
                    };
                }
                else {
                    script.onload = function () {
                        resolve(url);
                    };
                }
                script.src = url;
                _this._appendScript(script);
            }));
        };
        JsLoader.prototype._createScript = function () {
            var script = document.createElement("script");
            script.type = "text/javascript";
            return script;
        };
        JsLoader.prototype._appendScript = function (script) {
            document.getElementsByTagName("head")[0].appendChild(script);
        };
        JsLoader._instance = null;
        __decorate([
            wd.require(function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i - 0] = arguments[_i];
                }
                wd.assert(!wd.JudgeUtils.isArray(args[0]), wd.Log.info.FUNC_MUST_BE("url", "string"));
            })
        ], JsLoader.prototype, "loadAsset", null);
        return JsLoader;
    })(wd.Loader);
    wd.JsLoader = JsLoader;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var VideoLoader = (function (_super) {
        __extends(VideoLoader, _super);
        function VideoLoader() {
            _super.apply(this, arguments);
        }
        VideoLoader.getInstance = function () {
            if (this._instance === null) {
                this._instance = new this();
            }
            return this._instance;
        };
        VideoLoader.prototype.loadAsset = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var urlArr = null;
            if (wd.JudgeUtils.isString(args[0])) {
                urlArr = [args[0]];
            }
            else {
                urlArr = args[0];
            }
            return wdFrp.fromPromise(new RSVP.Promise(function (resolve, reject) {
                wd.Video.create({
                    urlArr: urlArr,
                    onLoad: function (video) {
                        resolve(wd.VideoTextureAsset.create(video));
                    },
                    onError: function (err) {
                        reject(err);
                    }
                });
            }));
        };
        VideoLoader._instance = null;
        return VideoLoader;
    })(wd.Loader);
    wd.VideoLoader = VideoLoader;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var wd;
(function (wd) {
    var TextureLoader = (function (_super) {
        __extends(TextureLoader, _super);
        function TextureLoader() {
            _super.apply(this, arguments);
        }
        TextureLoader.getInstance = function () {
            if (this._instance === null) {
                this._instance = new this();
            }
            return this._instance;
        };
        TextureLoader.prototype.loadAsset = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var extname = null, stream = null, url = args[0];
            extname = wdCb.PathUtils.extname(url).toLowerCase();
            switch (extname) {
                case ".jpg":
                case ".jpeg":
                case ".gif":
                case ".bmp":
                    stream = wd.ImageLoader.load(url)
                        .map(function (image) {
                        var asset = wd.ImageTextureAsset.create(image);
                        asset.format = wd.TextureFormat.RGB;
                        return asset;
                    });
                    break;
                case ".png":
                    stream = wd.ImageLoader.load(url)
                        .map(function (image) {
                        return wd.ImageTextureAsset.create(image);
                    });
                    break;
                case ".dds":
                    stream = wd.CompressedTextureLoader.load(url);
                    break;
                default:
                    wd.Log.error(true, wd.Log.info.FUNC_NOT_SUPPORT(extname));
                    break;
            }
            return stream;
        };
        TextureLoader._instance = null;
        __decorate([
            wd.require(function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i - 0] = arguments[_i];
                }
                wd.assert(!wd.JudgeUtils.isArray(args[0]), wd.Log.info.FUNC_MUST_BE("url", "string"));
            })
        ], TextureLoader.prototype, "loadAsset", null);
        return TextureLoader;
    })(wd.Loader);
    wd.TextureLoader = TextureLoader;
})(wd || (wd = {}));

var wd;
(function (wd) {
    var ImageLoader = (function () {
        function ImageLoader() {
        }
        ImageLoader.load = function (url) {
            return wdFrp.fromPromise(new RSVP.Promise(function (resolve, reject) {
                var img = null;
                img = new Image();
                img.onload = function () {
                    this.onload = null;
                    resolve(img);
                };
                img.onerror = function () {
                    reject("error");
                };
                img.src = url;
            }));
        };
        return ImageLoader;
    })();
    wd.ImageLoader = ImageLoader;
})(wd || (wd = {}));

var wd;
(function (wd) {
    var AjaxLoader = (function () {
        function AjaxLoader() {
        }
        AjaxLoader.load = function (url, dataType) {
            return wdFrp.fromPromise(new RSVP.Promise(function (resolve, reject) {
                wdCb.AjaxUtils.ajax({
                    type: "get",
                    url: url,
                    contentType: "text/plain; charset=utf-8",
                    dataType: dataType,
                    success: function (data) {
                        resolve(data);
                    },
                    error: function (XMLHttpRequest, errorThrown) {
                        reject("url:" + url + "\nreadyState:" + XMLHttpRequest.readyState + "\nstatus:" + XMLHttpRequest.status + "\nmessage:" + errorThrown.message + "\nresponseText:" + XMLHttpRequest.responseText);
                    }
                });
            }));
        };
        return AjaxLoader;
    })();
    wd.AjaxLoader = AjaxLoader;
})(wd || (wd = {}));

var wd;
(function (wd) {
    var ModelLoaderUtils = (function () {
        function ModelLoaderUtils() {
        }
        ModelLoaderUtils.getPath = function (filePath, mapUrl) {
            return wdCb.PathUtils.dirname(filePath) + "/" + mapUrl;
        };
        return ModelLoaderUtils;
    })();
    wd.ModelLoaderUtils = ModelLoaderUtils;
})(wd || (wd = {}));



var wd;
(function (wd) {
    var CompressedTextureLoader = (function () {
        function CompressedTextureLoader() {
        }
        CompressedTextureLoader.load = function (url) {
            var _this = this;
            return wd.AjaxLoader.load(url, "arraybuffer")
                .map(function (data) {
                var texDatas = wd.DDSParser.parse(data, true), asset = wd.CompressedTextureAsset.create();
                asset.width = texDatas.width;
                asset.height = texDatas.height;
                asset.mipmaps = texDatas.mipmaps;
                if (texDatas.mipmapCount == 1) {
                    asset.minFilter = wd.TextureFilterMode.LINEAR;
                }
                asset.format = _this._getCompressedFormat(texDatas.format);
                return asset;
            });
        };
        CompressedTextureLoader._getCompressedFormat = function (format) {
            var extension = wd.GPUDetector.getInstance().extensionCompressedTextureS3TC;
            if (format === wd.TextureFormat.RGBA) {
                return format;
            }
            if (!extension) {
                return null;
            }
            switch (format) {
                case wd.TextureFormat.RGB_S3TC_DXT1:
                    format = extension.COMPRESSED_RGB_S3TC_DXT1_EXT;
                    break;
                case wd.TextureFormat.RGBA_S3TC_DXT1:
                    format = extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;
                    break;
                case wd.TextureFormat.RGBA_S3TC_DXT3:
                    format = extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;
                    break;
                case wd.TextureFormat.RGBA_S3TC_DXT5:
                    format = extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;
                    break;
            }
            return format;
        };
        return CompressedTextureLoader;
    })();
    wd.CompressedTextureLoader = CompressedTextureLoader;
})(wd || (wd = {}));

var wd;
(function (wd) {
    var DDS_MAGIC = 0x20534444, DDSD_CAPS = 0x1, DDSD_HEIGHT = 0x2, DDSD_WIDTH = 0x4, DDSD_PITCH = 0x8, DDSD_PIXELFORMAT = 0x1000, DDSD_MIPMAPCOUNT = 0x20000, DDSD_LINEARSIZE = 0x80000, DDSD_DEPTH = 0x800000, DDSCAPS_COMPLEX = 0x8, DDSCAPS_MIPMAP = 0x400000, DDSCAPS_TEXTURE = 0x1000, DDSCAPS2_CUBEMAP = 0x200, DDSCAPS2_CUBEMAP_POSITIVEX = 0x400, DDSCAPS2_CUBEMAP_NEGATIVEX = 0x800, DDSCAPS2_CUBEMAP_POSITIVEY = 0x1000, DDSCAPS2_CUBEMAP_NEGATIVEY = 0x2000, DDSCAPS2_CUBEMAP_POSITIVEZ = 0x4000, DDSCAPS2_CUBEMAP_NEGATIVEZ = 0x8000, DDSCAPS2_VOLUME = 0x200000, DDPF_ALPHAPIXELS = 0x1, DDPF_ALPHA = 0x2, DDPF_FOURCC = 0x4, DDPF_RGB = 0x40, DDPF_YUV = 0x200, DDPF_LUMINANCE = 0x20000;
    var DDSParser = (function () {
        function DDSParser() {
        }
        DDSParser.parse = function (buffer, loadMipmaps) {
            if (loadMipmaps === void 0) { loadMipmaps = true; }
            var dds = new DDSData(), FOURCC_DXT1 = this._fourCCToInt32("DXT1"), FOURCC_DXT3 = this._fourCCToInt32("DXT3"), FOURCC_DXT5 = this._fourCCToInt32("DXT5"), headerLengthInt = 31, off_magic = 0, off_size = 1, off_flags = 2, off_height = 3, off_width = 4, off_mipmapCount = 7, off_pfFlags = 20, off_pfFourCC = 21, off_RGBBitCount = 22, off_RBitMask = 23, off_GBitMask = 24, off_BBitMask = 25, off_ABitMask = 26, off_caps = 27, off_caps2 = 28, off_caps3 = 29, off_caps4 = 30, header = new Int32Array(buffer, 0, headerLengthInt), blockBytes = null, fourCC = null, isRGBAUncompressed = null, dataOffset = null, width = null, height = null, faces = null;
            if (header[off_magic] !== DDS_MAGIC) {
                wd.Log.error(true, "Invalid magic number in DDS header.");
                return dds;
            }
            if ((!header[off_pfFlags]) & DDPF_FOURCC) {
                wd.Log.error(true, "Unsupported format, must contain a FourCC code.");
                return dds;
            }
            fourCC = header[off_pfFourCC];
            isRGBAUncompressed = false;
            switch (fourCC) {
                case FOURCC_DXT1:
                    blockBytes = 8;
                    dds.format = wd.TextureFormat.RGB_S3TC_DXT1;
                    break;
                case FOURCC_DXT3:
                    blockBytes = 16;
                    dds.format = wd.TextureFormat.RGBA_S3TC_DXT3;
                    break;
                case FOURCC_DXT5:
                    blockBytes = 16;
                    dds.format = wd.TextureFormat.RGBA_S3TC_DXT5;
                    break;
                default:
                    if (header[off_RGBBitCount] == 32
                        && header[off_RBitMask] & 0xff0000
                        && header[off_GBitMask] & 0xff00
                        && header[off_BBitMask] & 0xff
                        && header[off_ABitMask] & 0xff000000) {
                        isRGBAUncompressed = true;
                        blockBytes = 64;
                        dds.format = wd.TextureFormat.RGBA;
                    }
                    else {
                        wd.Log.error(true, "Unsupported FourCC code " + this._int32ToFourCC(fourCC));
                        return dds;
                    }
            }
            dds.mipmapCount = 1;
            if (header[off_flags] & DDSD_MIPMAPCOUNT && loadMipmaps !== false) {
                dds.mipmapCount = Math.max(1, header[off_mipmapCount]);
            }
            dds.isCubemap = header[off_caps2] & DDSCAPS2_CUBEMAP ? true : false;
            dds.width = header[off_width];
            dds.height = header[off_height];
            dataOffset = header[off_size] + 4;
            width = dds.width;
            height = dds.height;
            faces = dds.isCubemap ? 6 : 1;
            for (var face = 0; face < faces; face++) {
                for (var i = 0; i < dds.mipmapCount; i++) {
                    var mipmap = null, byteArray = null, dataLength = null;
                    if (isRGBAUncompressed) {
                        byteArray = this._loadARGBMip(buffer, dataOffset, width, height);
                        dataLength = byteArray.length;
                    }
                    else {
                        dataLength = Math.max(4, width) / 4 * Math.max(4, height) / 4 * blockBytes;
                        byteArray = new Uint8Array(buffer, dataOffset, dataLength);
                    }
                    mipmap = { "data": byteArray, "width": width, "height": height };
                    dds.mipmaps.addChild(mipmap);
                    dataOffset += dataLength;
                    width = Math.max(width * 0.5, 1);
                    height = Math.max(height * 0.5, 1);
                }
                width = dds.width;
                height = dds.height;
            }
            return dds;
        };
        DDSParser._fourCCToInt32 = function (value) {
            return value.charCodeAt(0) +
                (value.charCodeAt(1) << 8) +
                (value.charCodeAt(2) << 16) +
                (value.charCodeAt(3) << 24);
        };
        DDSParser._int32ToFourCC = function (value) {
            return String.fromCharCode(value & 0xff, (value >> 8) & 0xff, (value >> 16) & 0xff, (value >> 24) & 0xff);
        };
        DDSParser._loadARGBMip = function (buffer, dataOffset, width, height) {
            var dataLength = width * height * 4, srcBuffer = new Uint8Array(buffer, dataOffset, dataLength), byteArray = new Uint8Array(dataLength), dst = 0, src = 0;
            for (var y = 0; y < height; y++) {
                for (var x = 0; x < width; x++) {
                    var b = null, g = null, r = null, a = null;
                    b = srcBuffer[src];
                    src++;
                    g = srcBuffer[src];
                    src++;
                    r = srcBuffer[src];
                    src++;
                    a = srcBuffer[src];
                    src++;
                    byteArray[dst] = r;
                    dst++;
                    byteArray[dst] = g;
                    dst++;
                    byteArray[dst] = b;
                    dst++;
                    byteArray[dst] = a;
                    dst++;
                }
            }
            return byteArray;
        };
        return DDSParser;
    })();
    wd.DDSParser = DDSParser;
    var DDSData = (function () {
        function DDSData() {
            this.mipmaps = wdCb.Collection.create();
            this.width = 0;
            this.height = 0;
            this.format = null;
            this.mipmapCount = 1;
            this.isCubemap = false;
        }
        return DDSData;
    })();
    wd.DDSData = DDSData;
})(wd || (wd = {}));

var wd;
(function (wd) {
    var TextureAsset = (function () {
        function TextureAsset() {
            this._width = null;
            this._height = null;
            this.generateMipmaps = true;
            this.sourceRegionMethod = wd.TextureSourceRegionMethod.CHANGE_TEXCOORDS_IN_GLSL;
            this.format = wd.TextureFormat.RGBA;
            this.source = TextureAsset.defaultTexture;
            this.repeatRegion = wd.RectRegion.create(0, 0, 1, 1);
            this.sourceRegion = null;
            this.sourceRegionMapping = wd.TextureSourceRegionMapping.CANVAS;
            this.flipY = true;
            this.premultiplyAlpha = false;
            this.unpackAlignment = 4;
            this.wrapS = wd.TextureWrapMode.CLAMP_TO_EDGE;
            this.wrapT = wd.TextureWrapMode.CLAMP_TO_EDGE;
            this.magFilter = wd.TextureFilterMode.LINEAR;
            this.minFilter = wd.TextureFilterMode.LINEAR_MIPMAP_LINEAR;
            this.type = wd.TextureType.UNSIGNED_BYTE;
            this.mipmaps = wdCb.Collection.create();
            this.anisotropy = 0;
            this.needUpdate = true;
        }
        Object.defineProperty(TextureAsset.prototype, "width", {
            get: function () {
                return this._width === null ? (this.source ? this.source.width : null) : this._width;
            },
            set: function (width) {
                this._width = width;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextureAsset.prototype, "height", {
            get: function () {
                return this._height === null ? (this.source ? this.source.height : null) : this._height;
            },
            set: function (height) {
                this._height = height;
            },
            enumerable: true,
            configurable: true
        });
        TextureAsset.prototype.copyToCubemapTexture = function (cubemapFaceTexture) {
            cubemapFaceTexture.generateMipmaps = this.generateMipmaps;
            cubemapFaceTexture.minFilter = this.minFilter;
            cubemapFaceTexture.magFilter = this.magFilter;
            cubemapFaceTexture.width = this.width;
            cubemapFaceTexture.height = this.height;
            cubemapFaceTexture.wrapS = this.wrapS;
            cubemapFaceTexture.wrapT = this.wrapT;
            cubemapFaceTexture.anisotropy = this.anisotropy;
            cubemapFaceTexture.premultiplyAlpha = this.premultiplyAlpha;
            cubemapFaceTexture.unpackAlignment = this.unpackAlignment;
            cubemapFaceTexture.needUpdate = this.needUpdate;
            cubemapFaceTexture.mode = wd.EnvMapMode.BASIC;
        };
        TextureAsset.prototype.copyTo = function (texture) {
            wd.Log.error(!texture, wd.Log.info.FUNC_MUST_DEFINE("texture"));
            texture.source = this.source;
            texture.width = this.width;
            texture.height = this.height;
            texture.mipmaps = this.mipmaps.copy();
            texture.wrapS = this.wrapS;
            texture.wrapT = this.wrapT;
            texture.magFilter = this.magFilter;
            texture.minFilter = this.minFilter;
            texture.anisotropy = this.anisotropy;
            texture.format = this.format;
            texture.type = this.type;
            texture.repeatRegion = this.repeatRegion.copy();
            texture.sourceRegion = this.sourceRegion && this.sourceRegion.copy();
            texture.sourceRegionMapping = this.sourceRegionMapping;
            texture.sourceRegionMethod = this.sourceRegionMethod;
            texture.generateMipmaps = this.generateMipmaps;
            texture.premultiplyAlpha = this.premultiplyAlpha;
            texture.flipY = this.flipY;
            texture.unpackAlignment = this.unpackAlignment;
            texture.needUpdate = this.needUpdate;
            return texture;
        };
        TextureAsset.defaultTexture = null;
        return TextureAsset;
    })();
    wd.TextureAsset = TextureAsset;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var ImageTextureAsset = (function (_super) {
        __extends(ImageTextureAsset, _super);
        function ImageTextureAsset(source) {
            _super.call(this);
            this.source = source;
        }
        ImageTextureAsset.create = function (source) {
            var obj = new this(source);
            return obj;
        };
        ImageTextureAsset.prototype.toTexture = function () {
            return wd.ImageTexture.create(this);
        };
        ImageTextureAsset.prototype.toCubemapFaceTexture = function () {
            return wd.CubemapFaceImageTexture.create(this);
        };
        ImageTextureAsset.prototype.copyToCubemapFaceTexture = function (cubemapFaceTexture) {
            cubemapFaceTexture.source = this.source;
            cubemapFaceTexture.type = this.type;
            cubemapFaceTexture.format = this.format;
            cubemapFaceTexture.width = this.width;
            cubemapFaceTexture.height = this.height;
            cubemapFaceTexture.sourceRegion = this.sourceRegion;
            cubemapFaceTexture.sourceRegionMethod = wd.TextureSourceRegionMethod.DRAW_IN_CANVAS;
        };
        return ImageTextureAsset;
    })(wd.TextureAsset);
    wd.ImageTextureAsset = ImageTextureAsset;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var VideoTextureAsset = (function (_super) {
        __extends(VideoTextureAsset, _super);
        function VideoTextureAsset(video) {
            _super.call(this);
            this.video = null;
            this.video = video;
            this.source = this.video.source;
        }
        VideoTextureAsset.create = function (video) {
            var obj = new this(video);
            obj.initWhenCreate();
            return obj;
        };
        VideoTextureAsset.prototype.initWhenCreate = function () {
            this.width = 0;
            this.height = 0;
            this.generateMipmaps = false;
            this.minFilter = null;
            this.magFilter = null;
            this.sourceRegion = null;
            this.sourceRegionMethod = null;
        };
        VideoTextureAsset.prototype.toTexture = function () {
            return wd.VideoTexture.create(this);
        };
        VideoTextureAsset.prototype.toCubemapFaceTexture = function () {
            return wd.Log.error(true, wd.Log.info.FUNC_NOT_SUPPORT("video texture", "cubemap"));
        };
        VideoTextureAsset.prototype.copyToCubemapFaceTexture = function (cubemapFaceTexture) {
            wd.Log.error(true, wd.Log.info.FUNC_NOT_SUPPORT("video texture", "cubemap"));
        };
        return VideoTextureAsset;
    })(wd.TextureAsset);
    wd.VideoTextureAsset = VideoTextureAsset;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var CompressedTextureAsset = (function (_super) {
        __extends(CompressedTextureAsset, _super);
        function CompressedTextureAsset() {
            _super.apply(this, arguments);
        }
        CompressedTextureAsset.create = function () {
            var obj = new this();
            obj.initWhenCreate();
            return obj;
        };
        CompressedTextureAsset.prototype.initWhenCreate = function () {
            this.generateMipmaps = false;
            this.flipY = false;
        };
        CompressedTextureAsset.prototype.toTexture = function () {
            return wd.CompressedTexture.create(this);
        };
        CompressedTextureAsset.prototype.toCubemapFaceTexture = function () {
            return wd.CubemapFaceCompressedTexture.create(this);
        };
        CompressedTextureAsset.prototype.copyToCubemapFaceTexture = function (cubemapFaceTexture) {
            cubemapFaceTexture.type = this.type;
            cubemapFaceTexture.format = this.format;
            cubemapFaceTexture.width = this.width;
            cubemapFaceTexture.height = this.height;
            cubemapFaceTexture.mipmaps = this.mipmaps;
            cubemapFaceTexture.minFilter = this.minFilter;
        };
        return CompressedTextureAsset;
    })(wd.TextureAsset);
    wd.CompressedTextureAsset = CompressedTextureAsset;
})(wd || (wd = {}));

var wd;
(function (wd) {
    (function (TextureFilterMode) {
        TextureFilterMode[TextureFilterMode["NEAREST"] = "NEAREST"] = "NEAREST";
        TextureFilterMode[TextureFilterMode["NEAREST_MIPMAP_MEAREST"] = "NEAREST_MIPMAP_MEAREST"] = "NEAREST_MIPMAP_MEAREST";
        TextureFilterMode[TextureFilterMode["NEAREST_MIPMAP_LINEAR"] = "NEAREST_MIPMAP_LINEAR"] = "NEAREST_MIPMAP_LINEAR";
        TextureFilterMode[TextureFilterMode["LINEAR"] = "LINEAR"] = "LINEAR";
        TextureFilterMode[TextureFilterMode["LINEAR_MIPMAP_NEAREST"] = "LINEAR_MIPMAP_NEAREST"] = "LINEAR_MIPMAP_NEAREST";
        TextureFilterMode[TextureFilterMode["LINEAR_MIPMAP_LINEAR"] = "LINEAR_MIPMAP_LINEAR"] = "LINEAR_MIPMAP_LINEAR";
    })(wd.TextureFilterMode || (wd.TextureFilterMode = {}));
    var TextureFilterMode = wd.TextureFilterMode;
})(wd || (wd = {}));

var wd;
(function (wd) {
    (function (TextureWrapMode) {
        TextureWrapMode[TextureWrapMode["REPEAT"] = "REPEAT"] = "REPEAT";
        TextureWrapMode[TextureWrapMode["MIRRORED_REPEAT"] = "MIRRORED_REPEAT"] = "MIRRORED_REPEAT";
        TextureWrapMode[TextureWrapMode["CLAMP_TO_EDGE"] = "CLAMP_TO_EDGE"] = "CLAMP_TO_EDGE";
    })(wd.TextureWrapMode || (wd.TextureWrapMode = {}));
    var TextureWrapMode = wd.TextureWrapMode;
})(wd || (wd = {}));

var wd;
(function (wd) {
    (function (TextureFormat) {
        TextureFormat[TextureFormat["RGB"] = "RGB"] = "RGB";
        TextureFormat[TextureFormat["RGBA"] = "RGBA"] = "RGBA";
        TextureFormat[TextureFormat["ALPHA"] = "ALPHA"] = "ALPHA";
        TextureFormat[TextureFormat["LUMINANCE"] = "LUMINANCE"] = "LUMINANCE";
        TextureFormat[TextureFormat["LUMINANCE_ALPHA"] = "LUMINANCE_ALPHA"] = "LUMINANCE_ALPHA";
        TextureFormat[TextureFormat["RGB_S3TC_DXT1"] = "RGB_S3TC_DXT1"] = "RGB_S3TC_DXT1";
        TextureFormat[TextureFormat["RGBA_S3TC_DXT1"] = "RGBA_S3TC_DXT1"] = "RGBA_S3TC_DXT1";
        TextureFormat[TextureFormat["RGBA_S3TC_DXT3"] = "RGBA_S3TC_DXT3"] = "RGBA_S3TC_DXT3";
        TextureFormat[TextureFormat["RGBA_S3TC_DXT5"] = "RGBA_S3TC_DXT5"] = "RGBA_S3TC_DXT5";
    })(wd.TextureFormat || (wd.TextureFormat = {}));
    var TextureFormat = wd.TextureFormat;
})(wd || (wd = {}));

var wd;
(function (wd) {
    (function (TextureType) {
        TextureType[TextureType["UNSIGNED_BYTE"] = "UNSIGNED_BYTE"] = "UNSIGNED_BYTE";
        TextureType[TextureType["UNSIGNED_SHORT_5_6_5"] = "UNSIGNED_SHORT_5_6_5"] = "UNSIGNED_SHORT_5_6_5";
        TextureType[TextureType["UNSIGNED_SHORT_4_4_4_4"] = "UNSIGNED_SHORT_4_4_4_4"] = "UNSIGNED_SHORT_4_4_4_4";
        TextureType[TextureType["UNSIGNED_SHORT_5_5_5_1"] = "UNSIGNED_SHORT_5_5_5_1"] = "UNSIGNED_SHORT_5_5_5_1";
    })(wd.TextureType || (wd.TextureType = {}));
    var TextureType = wd.TextureType;
})(wd || (wd = {}));

var wd;
(function (wd) {
    (function (EnvMapMode) {
        EnvMapMode[EnvMapMode["BASIC"] = 0] = "BASIC";
        EnvMapMode[EnvMapMode["REFLECTION"] = 1] = "REFLECTION";
        EnvMapMode[EnvMapMode["REFRACTION"] = 2] = "REFRACTION";
        EnvMapMode[EnvMapMode["FRESNEL"] = 3] = "FRESNEL";
    })(wd.EnvMapMode || (wd.EnvMapMode = {}));
    var EnvMapMode = wd.EnvMapMode;
})(wd || (wd = {}));

var wd;
(function (wd) {
    (function (TextureCombineMode) {
        TextureCombineMode[TextureCombineMode["MIX"] = 0] = "MIX";
        TextureCombineMode[TextureCombineMode["MULTIPLY"] = 1] = "MULTIPLY";
        TextureCombineMode[TextureCombineMode["ADD"] = 2] = "ADD";
    })(wd.TextureCombineMode || (wd.TextureCombineMode = {}));
    var TextureCombineMode = wd.TextureCombineMode;
})(wd || (wd = {}));

var wd;
(function (wd) {
    (function (TextureSourceRegionMapping) {
        TextureSourceRegionMapping[TextureSourceRegionMapping["CANVAS"] = 0] = "CANVAS";
        TextureSourceRegionMapping[TextureSourceRegionMapping["UV"] = 1] = "UV";
    })(wd.TextureSourceRegionMapping || (wd.TextureSourceRegionMapping = {}));
    var TextureSourceRegionMapping = wd.TextureSourceRegionMapping;
})(wd || (wd = {}));

var wd;
(function (wd) {
    (function (TextureSourceRegionMethod) {
        TextureSourceRegionMethod[TextureSourceRegionMethod["CHANGE_TEXCOORDS_IN_GLSL"] = 0] = "CHANGE_TEXCOORDS_IN_GLSL";
        TextureSourceRegionMethod[TextureSourceRegionMethod["DRAW_IN_CANVAS"] = 1] = "DRAW_IN_CANVAS";
    })(wd.TextureSourceRegionMethod || (wd.TextureSourceRegionMethod = {}));
    var TextureSourceRegionMethod = wd.TextureSourceRegionMethod;
})(wd || (wd = {}));

var wd;
(function (wd) {
    (function (TextureTarget) {
        TextureTarget[TextureTarget["TEXTURE_2D"] = "TEXTURE_2D"] = "TEXTURE_2D";
        TextureTarget[TextureTarget["TEXTURE_CUBE_MAP"] = "TEXTURE_CUBE_MAP"] = "TEXTURE_CUBE_MAP";
    })(wd.TextureTarget || (wd.TextureTarget = {}));
    var TextureTarget = wd.TextureTarget;
})(wd || (wd = {}));

var wd;
(function (wd) {
    var LoaderManager = (function () {
        function LoaderManager() {
            this.assetCount = 0;
            this.currentLoadedCount = 0;
            this._assetTable = wdCb.Hash.create();
        }
        LoaderManager.getInstance = function () {
            if (this._instance === null) {
                this._instance = new this();
            }
            return this._instance;
        };
        LoaderManager.prototype.load = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var self = this;
            if (wd.JudgeUtils.isString(args[0])) {
                var url = args[0], id = url;
                return this._createLoadSingleAssetStream(url, id);
            }
            else {
                var assetArr = args[0];
                return wdFrp.fromArray(assetArr).flatMap(function (asset) {
                    return self._createLoadMultiAssetStream(asset.type || wd.AssetType.UNKNOW, asset.url, asset.id);
                });
            }
        };
        LoaderManager.prototype.reset = function () {
            this.assetCount = 0;
            this.currentLoadedCount = 0;
        };
        LoaderManager.prototype.dispose = function () {
            this.reset();
            wd.LoaderFactory.createAllLoader().forEach(function (loader) {
                loader.dispose();
            });
        };
        LoaderManager.prototype.get = function (id) {
            var loader = this._assetTable.getChild(id);
            return loader ? loader.get(id) : null;
        };
        LoaderManager.prototype._createLoadMultiAssetStream = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var type = args[0], url = args[1], id = args[2], loader = this._getLoader(type, url), stream = null, self = this;
            if (!loader.has(id)) {
                self.assetCount++;
            }
            return this._addToAssetTable(loader.load(url, id)
                .map(function (data) {
                self.currentLoadedCount++;
                return {
                    currentLoadedCount: self.currentLoadedCount,
                    assetCount: self.assetCount
                };
            }), id, loader);
        };
        LoaderManager.prototype._createLoadSingleAssetStream = function (url, id) {
            var loader = this._getLoader(wd.AssetType.UNKNOW, url);
            return this._addToAssetTable(loader.load(url, id), id, loader);
        };
        LoaderManager.prototype._getLoader = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var type = args[0], extname = null;
            if (wd.JudgeUtils.isArray(args[1])) {
                extname = wdCb.PathUtils.extname(args[1][0]);
            }
            else {
                extname = wdCb.PathUtils.extname(args[1]);
            }
            return wd.LoaderFactory.create(type, extname.toLowerCase());
        };
        LoaderManager.prototype._addToAssetTable = function (loadStream, id, loader) {
            var self = this;
            return loadStream.do(null, null, function () {
                self._assetTable.addChild(id, loader);
            });
        };
        LoaderManager._instance = null;
        return LoaderManager;
    })();
    wd.LoaderManager = LoaderManager;
})(wd || (wd = {}));

var wd;
(function (wd) {
    var LoaderFactory = (function () {
        function LoaderFactory() {
        }
        LoaderFactory.create = function (type, extname) {
            var loader = null;
            switch (type) {
                case wd.AssetType.FONT:
                    loader = wd.FontLoader.getInstance();
                    break;
                case wd.AssetType.UNKNOW:
                    loader = this._getLoaderByExtname(extname);
                    break;
                default:
                    wdCb.Log.error(true, wdCb.Log.info.FUNC_UNKNOW("asset type:" + type));
                    break;
            }
            return loader;
        };
        LoaderFactory.createAllLoader = function () {
            return wdCb.Collection.create([wd.JsLoader.getInstance(), wd.GLSLLoader.getInstance(), wd.TextureLoader.getInstance(), wd.VideoLoader.getInstance(), wd.FontLoader.getInstance(), wd.FntLoader.getInstance()]);
        };
        LoaderFactory._getLoaderByExtname = function (extname) {
            var loader = null;
            switch (extname) {
                case ".js":
                    loader = wd.JsLoader.getInstance();
                    break;
                case ".glsl":
                    loader = wd.GLSLLoader.getInstance();
                    break;
                case ".jpg":
                case ".jpeg":
                case ".png":
                case ".dds":
                case ".gif":
                case ".bmp":
                    loader = wd.TextureLoader.getInstance();
                    break;
                case ".mp4":
                case ".ogv":
                case ".webm":
                    loader = wd.VideoLoader.getInstance();
                    break;
                case ".wd":
                    loader = wd.WDLoader.getInstance();
                    break;
                case ".eot":
                case ".ttf":
                case ".woff":
                case ".svg":
                    loader = wd.FontLoader.getInstance();
                    break;
                case ".fnt":
                    loader = wd.FntLoader.getInstance();
                    break;
                default:
                    wd.Log.error(true, wd.Log.info.FUNC_UNKNOW("extname:" + extname));
                    break;
            }
            return loader;
        };
        return LoaderFactory;
    })();
    wd.LoaderFactory = LoaderFactory;
})(wd || (wd = {}));



var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var wd;
(function (wd) {
    var WDLoader = (function (_super) {
        __extends(WDLoader, _super);
        function WDLoader() {
            _super.apply(this, arguments);
            this._wdParser = wd.WDParser.create();
            this._wdBuilder = wd.WDBuilder.create();
            this._parseData = null;
        }
        WDLoader.getInstance = function () {
            if (this._instance === null) {
                this._instance = new this();
            }
            return this._instance;
        };
        WDLoader.prototype.loadAsset = function () {
            var _this = this;
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var url = args[0], self = this;
            return wd.AjaxLoader.load(url, "json")
                .flatMap(function (json) {
                self._parseData = self._wdParser.parse(json);
                return _this._createLoadMapStream(url);
            })
                .concat(wdFrp.callFunc(function () {
                return self._wdBuilder.build(self._parseData);
            }));
        };
        WDLoader.prototype._createLoadMapStream = function (filePath) {
            var streamArr = [], parseData = this._parseData, i = null;
            parseData.materials.forEach(function (material) {
                var mapUrlArr = [];
                if (material.diffuseMapUrl) {
                    mapUrlArr.push(["diffuseMap", material.diffuseMapUrl]);
                }
                if (material.specularMapUrl) {
                    mapUrlArr.push(["specularMap", material.specularMapUrl]);
                }
                if (material.normalMapUrl) {
                    mapUrlArr.push(["normalMap", material.normalMapUrl]);
                }
                streamArr.push(wdFrp.fromArray(mapUrlArr)
                    .flatMap(function (_a) {
                    var type = _a[0], mapUrl = _a[1];
                    return wd.TextureLoader.getInstance().load(wd.ModelLoaderUtils.getPath(filePath, mapUrl))
                        .do(function (asset) {
                        material[type] = asset.toTexture();
                    }, null, null);
                }));
            });
            return wdFrp.fromArray(streamArr).mergeAll();
        };
        WDLoader._instance = null;
        __decorate([
            wd.require(function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i - 0] = arguments[_i];
                }
                wd.assert(!wd.JudgeUtils.isArray(args[0]), wd.Log.info.FUNC_MUST_BE("url", "string"));
            })
        ], WDLoader.prototype, "loadAsset", null);
        return WDLoader;
    })(wd.Loader);
    wd.WDLoader = WDLoader;
})(wd || (wd = {}));

var wd;
(function (wd) {
    var WDParser = (function () {
        function WDParser() {
            this._data = {};
            this._objectParser = wd.WDObjectParser.create();
        }
        WDParser.create = function () {
            var obj = new this();
            return obj;
        };
        WDParser.prototype.parse = function (json) {
            this._parseMetadata(json);
            this._parseScene(json);
            this._parseMaterial(json);
            this._parseObject(json);
            return this._data;
        };
        WDParser.prototype._parseMetadata = function (json) {
            this._data.metadata = json.metadata;
        };
        WDParser.prototype._parseObject = function (json) {
            this._objectParser.parse(this._data, json);
        };
        WDParser.prototype._parseScene = function (json) {
            this._data.scene = json.scene;
            if (json.scene.ambientColor) {
                this._data.scene.ambientColor = this._createColor(json.scene.ambientColor);
            }
        };
        WDParser.prototype._parseMaterial = function (json) {
            var _this = this;
            this._data.materials = wdCb.Hash.create(json.materials);
            this._data.materials.forEach(function (material) {
                if (material.diffuseColor) {
                    material.diffuseColor = _this._createColor(material.diffuseColor);
                }
                if (material.specularColor) {
                    material.specularColor = _this._createColor(material.specularColor);
                }
            });
        };
        WDParser.prototype._createColor = function (colorArr) {
            return wd.Color.create("rgb(" + colorArr.join(",").replace(/^(\d+),/g, "$1.0,").replace(/,(\d+),/g, ",$1.0,").replace(/,(\d+)$/g, ",$1.0") + ")");
        };
        return WDParser;
    })();
    wd.WDParser = WDParser;
})(wd || (wd = {}));

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var wd;
(function (wd) {
    var WDObjectParser = (function () {
        function WDObjectParser() {
        }
        WDObjectParser.create = function () {
            var obj = new this();
            return obj;
        };
        WDObjectParser.prototype.parse = function (data, json) {
            var parse = null, self = this;
            data.objects = wdCb.Collection.create(json.objects);
            parse = function (object) {
                if (self._isObjectContainer(object)) {
                    object.isContainer = true;
                }
                else {
                    object.isContainer = false;
                    self._parseFromIndices(object);
                }
                if (object.children) {
                    object.children = wdCb.Collection.create(object.children);
                    object.children.forEach(function (child) {
                        child.parent = object;
                        parse(child);
                    });
                }
            };
            data.objects.forEach(function (object) {
                object.parent = null;
                parse(object);
                self._removeObjectContainerData(object);
            });
        };
        WDObjectParser.prototype._isObjectContainer = function (object) {
            return !wd.GeometryUtils.hasData(object.verticeIndices);
        };
        WDObjectParser.prototype._parseFromIndices = function (object) {
            this._duplicateVertexWithDifferentUvs(object);
            this._parseObjectFromIndices(object);
            this._removeRebundantIndiceData(object);
        };
        WDObjectParser.prototype._duplicateVertexWithDifferentUvs = function (object) {
            var arr = [], container = wdCb.Hash.create(), verticeIndices = object.verticeIndices, uvIndices = object.uvIndices;
            if (!wd.GeometryUtils.hasData(uvIndices)) {
                return;
            }
            for (var i = 0, len = verticeIndices.length; i < len; i++) {
                var verticeIndex = verticeIndices[i];
                if (this._isSameVertexWithDifferentUvsByCompareToFirstOne(arr, uvIndices[i], verticeIndex)) {
                    if (this._isUvIndiceEqualTheOneOfAddedVertex(container, verticeIndex, uvIndices[i])) {
                        verticeIndices[i] = this._getVerticeIndexOfAddedVertexByFindContainer(container, verticeIndex, uvIndices[i]);
                    }
                    else {
                        this._addVertexData(object, container, verticeIndex, i);
                    }
                    verticeIndex = verticeIndices[i];
                }
                arr[verticeIndex] = uvIndices[i];
            }
        };
        WDObjectParser.prototype._isSameVertexWithDifferentUvsByCompareToFirstOne = function (arr, uvIndex, verticeIndex) {
            return arr[verticeIndex] !== void 0 && arr[verticeIndex] !== uvIndex;
        };
        WDObjectParser.prototype._addVertexData = function (object, container, verticeIndex, index) {
            var verticeIndices = object.verticeIndices, uvIndices = object.uvIndices, normalIndices = object.normalIndices, vertices = this._findData(object, "vertices"), normals = this._findData(object, "normals"), morphTargets = this._findData(object, "morphTargets"), verticeIndexOfAddedVertex = null;
            this._addThreeComponent(vertices, verticeIndex);
            verticeIndexOfAddedVertex = this._getVerticeIndexOfAddedVertex(vertices);
            verticeIndices[index] = verticeIndexOfAddedVertex;
            if (wd.GeometryUtils.hasData(morphTargets)) {
                for (var _i = 0; _i < morphTargets.length; _i++) {
                    var frame = morphTargets[_i];
                    this._addThreeComponent(frame.vertices, verticeIndex);
                    if (wd.GeometryUtils.hasData(frame.normals)) {
                        this._addDuplicateNormalOfAddedVertex(frame.normals, normalIndices, index, verticeIndex);
                    }
                }
            }
            if (wd.GeometryUtils.hasData(normals)) {
                this._addDuplicateNormalOfAddedVertex(normals, normalIndices, index, verticeIndex);
                if (wd.GeometryUtils.hasData(normalIndices)) {
                    normalIndices[index] = verticeIndexOfAddedVertex;
                }
            }
            container.appendChild(String(verticeIndex), [uvIndices[index], verticeIndexOfAddedVertex]);
        };
        WDObjectParser.prototype._addDuplicateNormalOfAddedVertex = function (normals, normalIndices, index, oldVerticeIndex) {
            if (!wd.GeometryUtils.hasData(normalIndices)) {
                this._addThreeComponent(normals, normals, oldVerticeIndex);
                return;
            }
            this._addThreeComponent(normals, normals, normalIndices[index]);
        };
        WDObjectParser.prototype._isUvIndiceEqualTheOneOfAddedVertex = function (container, targetVerticeIndex, targetUvIndex) {
            var data = container.getChild(String(targetVerticeIndex));
            if (!data) {
                return false;
            }
            return data.hasChild(function (_a) {
                var uvIndex = _a[0], verticeIndex = _a[1];
                return uvIndex === targetUvIndex;
            });
        };
        WDObjectParser.prototype._getVerticeIndexOfAddedVertexByFindContainer = function (container, targetVerticeIndex, targetUvIndex) {
            var data = container.getChild(String(targetVerticeIndex));
            return data.findOne(function (_a) {
                var uvIndex = _a[0], verticeIndex = _a[1];
                return uvIndex === targetUvIndex;
            })[1];
        };
        WDObjectParser.prototype._getVerticeIndexOfAddedVertex = function (vertices) {
            return vertices.length / 3 - 1;
        };
        WDObjectParser.prototype._addThreeComponent = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            if (args.length === 2) {
                var data = args[0], index = args[1];
                data.push(data[index * 3], data[index * 3 + 1], data[index * 3 + 2]);
            }
            else {
                var targetData = args[0], sourceData = args[1], index = args[2];
                targetData.push(sourceData[index * 3], sourceData[index * 3 + 1], sourceData[index * 3 + 2]);
            }
        };
        WDObjectParser.prototype._parseObjectFromIndices = function (object) {
            var vertices = [], uvs = [], faces = [], face = null, colors = [], objectVertices = this._findData(object, "vertices"), objectUVs = this._findData(object, "uvs"), objectNormals = this._findData(object, "normals"), objectColors = this._findData(object, "colors");
            for (var i = 0, len = object.verticeIndices.length; i < len; i += 3) {
                var aIndex = object.verticeIndices[i], bIndex = object.verticeIndices[i + 1], cIndex = object.verticeIndices[i + 2], indexArr = [i, i + 1, i + 2], verticeIndiceArr = [aIndex, bIndex, cIndex];
                face = wd.Face3.create(aIndex, bIndex, cIndex);
                if (wd.GeometryUtils.hasData(object.uvIndices) && wd.GeometryUtils.hasData(objectUVs)) {
                    this._setUV(uvs, objectUVs, object.uvIndices, indexArr, verticeIndiceArr);
                }
                if (wd.GeometryUtils.hasData(objectNormals)) {
                    this._setNormal(face.vertexNormals, objectNormals, object.normalIndices, indexArr, verticeIndiceArr);
                }
                faces.push(face);
            }
            object.vertices = objectVertices;
            if (!wd.GeometryUtils.hasData(object.uvIndices)) {
                object.uvs = objectUVs;
            }
            else {
                object.uvs = uvs;
            }
            object.colors = objectColors;
            object.faces = faces;
            this._setMorphTargets(object, object.verticeIndices, object.normalIndices);
        };
        WDObjectParser.prototype._getAnimName = function (frameName) {
            var PATTERN = /([a-z]+)_?(\d+)/, DEFAULT_ANIM_NAME = "default";
            var parts = frameName.match(PATTERN);
            return parts && parts.length > 1 ? parts[1] : DEFAULT_ANIM_NAME;
        };
        WDObjectParser.prototype._removeRebundantIndiceData = function (object) {
            delete object.verticeIndices;
            delete object.uvIndices;
            delete object.normalIndices;
        };
        WDObjectParser.prototype._removeObjectContainerData = function (object) {
            var remove = null;
            remove = function (object) {
                if (object.isContainer) {
                    delete object.vertices;
                    delete object.uvs;
                    delete object.colors;
                }
                if (object.children) {
                    object.children.forEach(function (child) {
                        remove(child);
                    });
                }
            };
            remove(object);
        };
        WDObjectParser.prototype._findData = function (object, dataName) {
            var data = null;
            do {
                data = object[dataName];
            } while (!data && (object = object.parent) !== null);
            return data;
        };
        WDObjectParser.prototype._setUV = function (targetUVs, sourceUVs, uvIndices, indexArr, verticeIndiceArr) {
            var uvIndice1 = null, uvIndice2 = null, uvIndice3 = null, index1 = indexArr[0], index2 = indexArr[1], index3 = indexArr[2], aIndex = verticeIndiceArr[0], bIndex = verticeIndiceArr[1], cIndex = verticeIndiceArr[2];
            uvIndice1 = uvIndices[index1];
            uvIndice2 = uvIndices[index2];
            uvIndice3 = uvIndices[index3];
            this._setTwoComponentData(targetUVs, sourceUVs, aIndex, uvIndice1);
            this._setTwoComponentData(targetUVs, sourceUVs, bIndex, uvIndice2);
            this._setTwoComponentData(targetUVs, sourceUVs, cIndex, uvIndice3);
        };
        WDObjectParser.prototype._setTwoComponentData = function (targetData, sourceData, index, indice) {
            targetData[index * 2] = sourceData[indice * 2];
            targetData[index * 2 + 1] = sourceData[indice * 2 + 1];
        };
        WDObjectParser.prototype._setThreeComponentData = function (targetData, sourceData, index, indice) {
            targetData[index * 3] = sourceData[indice * 3];
            targetData[index * 3 + 1] = sourceData[indice * 3 + 1];
            targetData[index * 3 + 2] = sourceData[indice * 3 + 2];
        };
        WDObjectParser.prototype._getThreeComponentData = function (sourceData, index) {
            var startIndex = 3 * index;
            return wd.Vector3.create(sourceData[startIndex], sourceData[startIndex + 1], sourceData[startIndex + 2]);
        };
        WDObjectParser.prototype._setNormal = function (targetNormals, sourceNormals, normalIndices, indexArr, verticeIndiceArr) {
            var index1 = indexArr[0], index2 = indexArr[1], index3 = indexArr[2];
            if (!wd.GeometryUtils.hasData(normalIndices)) {
                this._addNormalData(targetNormals, sourceNormals, verticeIndiceArr);
                return;
            }
            this._addNormalData(targetNormals, sourceNormals, [normalIndices[index1], normalIndices[index2], normalIndices[index3]]);
        };
        WDObjectParser.prototype._addNormalData = function (targetNormals, sourceNormals, normalIndiceArr) {
            var aIndex = normalIndiceArr[0], bIndex = normalIndiceArr[1], cIndex = normalIndiceArr[2];
            if (targetNormals instanceof wdCb.Collection) {
                targetNormals.addChildren([
                    this._getThreeComponentData(sourceNormals, aIndex),
                    this._getThreeComponentData(sourceNormals, bIndex),
                    this._getThreeComponentData(sourceNormals, cIndex)
                ]);
            }
            else {
                var normals = targetNormals;
                for (var _i = 0, _a = [this._getThreeComponentData(sourceNormals, aIndex), this._getThreeComponentData(sourceNormals, bIndex), this._getThreeComponentData(sourceNormals, cIndex)]; _i < _a.length; _i++) {
                    var v = _a[_i];
                    normals.push(v.x, v.y, v.z);
                }
            }
        };
        WDObjectParser.prototype._setMorphTargets = function (object, verticeIndices, normalIndices) {
            var objectMorphTargets = this._findData(object, "morphTargets"), morphTargets = null, morphNormals = null;
            if (wd.GeometryUtils.hasData(objectMorphTargets)) {
                morphTargets = wdCb.Hash.create();
                morphNormals = wdCb.Hash.create();
                for (var _i = 0; _i < objectMorphTargets.length; _i++) {
                    var frameData = objectMorphTargets[_i];
                    var animName = this._getAnimName(frameData.name);
                    morphTargets.appendChild(animName, frameData.vertices);
                    if (wd.GeometryUtils.hasData(frameData.normals)) {
                        if (wd.GeometryUtils.hasData(normalIndices)) {
                            var normals = [];
                            for (var i = 0, len = verticeIndices.length; i < len; i++) {
                                this._setThreeComponentData(normals, frameData.normals, verticeIndices[i], normalIndices[i]);
                            }
                            morphNormals.appendChild(animName, normals);
                        }
                        else {
                            morphNormals.appendChild(animName, frameData.normals);
                        }
                    }
                }
            }
            object.morphTargets = morphTargets;
            object.morphNormals = morphNormals;
        };
        __decorate([
            wd.require(function (container, targetVerticeIndex, targetUvIndex) {
                wd.assert(this._isUvIndiceEqualTheOneOfAddedVertex(container, targetVerticeIndex, targetUvIndex), wd.Log.info.FUNC_SHOULD("uvIndex", "equal the one of added vertex"));
            })
        ], WDObjectParser.prototype, "_getVerticeIndexOfAddedVertexByFindContainer", null);
        __decorate([
            wd.ensure(function (returnValue, object) {
                wd.assert(!object.verticeIndices, wd.Log.info.FUNC_SHOULD("object.verticeIndices", "be removed"));
                wd.assert(!object.uvIndices, wd.Log.info.FUNC_SHOULD("object.uvIndices", "be removed"));
                wd.assert(!object.normalIndices, wd.Log.info.FUNC_SHOULD("object.normalIndices", "be removed"));
            })
        ], WDObjectParser.prototype, "_removeRebundantIndiceData", null);
        return WDObjectParser;
    })();
    wd.WDObjectParser = WDObjectParser;
})(wd || (wd = {}));

var wd;
(function (wd) {
    var WDBuilder = (function () {
        function WDBuilder() {
            this._result = wdCb.Hash.create();
        }
        WDBuilder.create = function () {
            var obj = new this();
            return obj;
        };
        WDBuilder.prototype.build = function (parseData) {
            this._buildMetadata(parseData);
            this._buildScene(parseData);
            this._buildModels(parseData);
            return this._result;
        };
        WDBuilder.prototype._buildMetadata = function (parseData) {
            var metadata = wdCb.Hash.create();
            for (var i in parseData.metadata) {
                if (parseData.metadata.hasOwnProperty(i)) {
                    metadata.addChild(i, parseData.metadata[i]);
                }
            }
            this._result.addChild("metadata", metadata);
        };
        WDBuilder.prototype._buildScene = function (parseData) {
            var scene = wdCb.Hash.create();
            if (parseData.scene.ambientColor) {
                scene.addChild("ambientColor", parseData.scene.ambientColor);
            }
            this._result.addChild("scene", scene);
        };
        WDBuilder.prototype._buildModels = function (parseData) {
            var models = wdCb.Collection.create(), self = this, build = null;
            build = function (objects, models) {
                objects.forEach(function (object) {
                    var geometry = null, model = null;
                    model = wd.GameObject.create();
                    if (!self._isModelContainer(object)) {
                        geometry = wd.ModelGeometry.create();
                        geometry.vertices = object.vertices;
                        geometry.faces = object.faces;
                        geometry.texCoords = object.uvs;
                        geometry.colors = object.colors;
                        if (object.material) {
                            geometry.material = self._buildMaterial(object.material, parseData.materials);
                        }
                        geometry.morphTargets = object.morphTargets;
                        geometry.morphFaceNormals = object.morphNormals;
                        geometry.morphVertexNormals = object.morphNormals;
                        if (wd.GeometryUtils.hasData(geometry.morphTargets)) {
                            model.addComponent(wd.MorphAnimation.create());
                        }
                        model.addComponent(geometry);
                    }
                    model.name = object.name;
                    model.addComponent(wd.MeshRenderer.create());
                    models.addChild(model);
                    if (object.children) {
                        build(object.children, model);
                    }
                });
            };
            build(parseData.objects, models);
            this._result.addChild("models", models);
        };
        WDBuilder.prototype._isModelContainer = function (object) {
            return object.isContainer;
        };
        WDBuilder.prototype._buildMaterial = function (materialName, materials) {
            var DEFAULTYPE = "LightMaterial";
            var materialData = null, type = null, material = null;
            _a = materials.findOne(function (material, name) {
                return name === materialName;
            }), materialData = _a[1];
            type = materialData.type || DEFAULTYPE;
            wdCb.Log.error(!wd[type], wdCb.Log.info.FUNC_NOT_EXIST("materialClass:" + type));
            material = wd[type].create();
            material.name = materialName;
            if (materialData.diffuseColor) {
                material.color = materialData.diffuseColor;
            }
            if (materialData.specularColor) {
                material.specular = materialData.specularColor;
            }
            if (materialData.diffuseMap) {
                material.diffuseMap = materialData.diffuseMap;
            }
            if (materialData.specularMap) {
                material.specularMap = materialData.specularMap;
            }
            if (materialData.normalMap) {
                material.normalMap = materialData.normalMap;
            }
            if (materialData.shininess !== null) {
                material.shininess = materialData.shininess;
            }
            if (materialData.opacity !== null) {
                material.opacity = materialData.opacity;
            }
            return material;
            var _a;
        };
        return WDBuilder;
    })();
    wd.WDBuilder = WDBuilder;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var wd;
(function (wd) {
    var TYPE = {
        ".eot": "embedded-opentype",
        ".ttf": "truetype",
        ".woff": "woff",
        ".svg": "svg"
    };
    var FontLoader = (function (_super) {
        __extends(FontLoader, _super);
        function FontLoader() {
            _super.apply(this, arguments);
            this._familyName = null;
        }
        FontLoader.getInstance = function () {
            if (this._instance === null) {
                this._instance = new this();
            }
            return this._instance;
        };
        FontLoader.prototype.dispose = function () {
            _super.prototype.dispose.call(this);
            wdCb.DomQuery.create("#" + this._familyName).remove();
        };
        FontLoader.prototype.loadAsset = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var familyName = args[1], self = this;
            this._familyName = familyName;
            return wdFrp.fromPromise(new RSVP.Promise(function (resolve, reject) {
                self._addStyleElement(args, familyName);
                if (document.fonts) {
                    document.fonts.load("1em " + familyName).then(function () {
                        resolve();
                    }, function (e) {
                        reject(e);
                    });
                }
                else {
                    wd.Log.warn("your browser not support document.fonts api, so it can't ensure that the font is loaded");
                    resolve();
                }
            }));
        };
        FontLoader.prototype._getType = function (url) {
            return TYPE[wdCb.PathUtils.extname(url).toLowerCase()];
        };
        FontLoader.prototype._addStyleElement = function (args, familyName) {
            var fontStyleEle = wdCb.DomQuery.create("<style id=\"" + familyName + "\"></style>"), fontStr = null;
            fontStyleEle.prependTo("body");
            fontStr = "@font-face { font-family:" + familyName + "; src:";
            if (wd.JudgeUtils.isArray(args[0])) {
                var urlArr = args[0];
                for (var _i = 0; _i < urlArr.length; _i++) {
                    var url = urlArr[_i];
                    fontStr += "url('" + url + "') format('" + this._getType(url) + "'),";
                }
                fontStr = fontStr.replace(/,$/, ";");
            }
            else {
                var url = args[0];
                fontStr += "url('" + url + "') format('" + this._getType(url) + "');";
            }
            fontStyleEle.get(0).textContent += fontStr + "};";
        };
        FontLoader._instance = null;
        __decorate([
            wd.require(function (url) {
                var extname = wdCb.PathUtils.extname(url).toLowerCase();
                wd.assert(!!TYPE[extname], wd.Log.info.FUNC_UNKNOW("type:" + extname));
            })
        ], FontLoader.prototype, "_getType", null);
        return FontLoader;
    })(wd.Loader);
    wd.FontLoader = FontLoader;
})(wd || (wd = {}));

var wd;
(function (wd) {
    var COMMON_EXP = /common [^\n]*(\n|$)/gi, PAGE_EXP = /page [^\n]*(\n|$)/gi, CHAR_EXP = /char [^\n]*(\n|$)/gi, ITEM_EXP = /\w+=[^ \r\n]+/gi, INT_EXP = /^[\-]?\d+$/;
    var FntParser = (function () {
        function FntParser() {
        }
        FntParser.create = function () {
            var obj = new this();
            return obj;
        };
        FntParser.prototype.parseFnt = function (fntStr, url) {
            var fnt = {}, commonObj = null, pageObj = null;
            commonObj = this._parseStrToObj(fntStr.match(COMMON_EXP)[0]);
            fnt.commonHeight = commonObj["lineHeight"];
            if (commonObj["pages"] !== 1) {
                wd.Log.log("only supports 1 page");
            }
            pageObj = this._parseStrToObj(fntStr.match(PAGE_EXP)[0]);
            if (pageObj["id"] !== 0) {
                wd.Log.log("file could not be found");
            }
            fnt.atlasName = wdCb.PathUtils.changeBasename(url, pageObj["file"]);
            this._parseChar(fntStr, fnt);
            return fnt;
        };
        FntParser.prototype._parseStrToObj = function (str) {
            var arr = str.match(ITEM_EXP), obj = {};
            if (arr) {
                for (var _i = 0; _i < arr.length; _i++) {
                    var tempStr = arr[_i];
                    var index = tempStr.indexOf("="), key = tempStr.substring(0, index), value = tempStr.substring(index + 1);
                    if (value.match(INT_EXP)) {
                        value = parseInt(value);
                    }
                    else if (value[0] == '"') {
                        value = value.substring(1, value.length - 1);
                    }
                    obj[key] = value;
                }
            }
            return obj;
        };
        FntParser.prototype._parseChar = function (fntStr, fnt) {
            var charLines = fntStr.match(CHAR_EXP), fontDefDictionary = {};
            for (var _i = 0; _i < charLines.length; _i++) {
                var char = charLines[_i];
                var charObj = this._parseStrToObj(char), charId = charObj["id"];
                fontDefDictionary[charId] = {
                    rect: { x: charObj["x"], y: charObj["y"], width: charObj["width"], height: charObj["height"] },
                    xOffset: charObj["xoffset"],
                    yOffset: charObj["yoffset"],
                    xAdvance: charObj["xadvance"]
                };
            }
            fnt.fontDefDictionary = fontDefDictionary;
        };
        return FntParser;
    })();
    wd.FntParser = FntParser;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var wd;
(function (wd) {
    var FntLoader = (function (_super) {
        __extends(FntLoader, _super);
        function FntLoader() {
            _super.apply(this, arguments);
            this._parser = wd.FntParser.create();
        }
        FntLoader.getInstance = function () {
            if (this._instance === null) {
                this._instance = new this();
            }
            return this._instance;
        };
        FntLoader.prototype.loadAsset = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var url = args[0], self = this;
            return wd.AjaxLoader.load(url, "text")
                .map(function (fntStr) {
                return self._parser.parseFnt(fntStr, url);
            });
        };
        FntLoader._instance = null;
        __decorate([
            wd.require(function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i - 0] = arguments[_i];
                }
                wd.assert(!wd.JudgeUtils.isArray(args[0]), wd.Log.info.FUNC_MUST_BE("url", "string"));
            })
        ], FntLoader.prototype, "loadAsset", null);
        return FntLoader;
    })(wd.Loader);
    wd.FntLoader = FntLoader;
})(wd || (wd = {}));

var wd;
(function (wd) {
    var EventListenerMap = (function () {
        function EventListenerMap() {
            this.listenerMap = wdCb.Hash.create();
        }
        EventListenerMap.prototype.hasChild = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            if (args.length === 1 && wd.JudgeUtils.isFunction(args[0])) {
                return this.listenerMap.hasChild(args[0]);
            }
            else {
                var target = args[0], eventName = args[1], list = this.listenerMap.getChild(this.buildKey(target, eventName));
                return list && list.getCount() > 0;
            }
        };
        EventListenerMap.prototype.appendChild = function (target, eventName, data) {
            this.listenerMap.appendChild(this.buildKey(target, eventName), data);
        };
        EventListenerMap.prototype.filter = function (func) {
            return this.listenerMap.filter(func);
        };
        EventListenerMap.prototype.forEach = function (func) {
            return this.listenerMap.forEach(func);
        };
        EventListenerMap.prototype.getEventNameFromKey = function (key) {
            var separator = this.getEventSeparator();
            return key.indexOf(separator) > -1 ? key.split(separator)[1] : key;
        };
        EventListenerMap.prototype.isEventName = function (key, eventName) {
            return key.indexOf("" + this.getEventSeparator() + eventName) > -1
                || key === eventName;
        };
        return EventListenerMap;
    })();
    wd.EventListenerMap = EventListenerMap;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var CustomEventListenerMap = (function (_super) {
        __extends(CustomEventListenerMap, _super);
        function CustomEventListenerMap() {
            _super.apply(this, arguments);
            this.listenerMap = wdCb.Hash.create();
        }
        CustomEventListenerMap.create = function () {
            var obj = new this();
            return obj;
        };
        CustomEventListenerMap.prototype.getChild = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var self = this;
            if (args.length === 1 && wd.JudgeUtils.isString(args[0])) {
                var eventName = args[0];
                return this.listenerMap.getChild(eventName);
            }
            else if (args.length === 1 && args[0] instanceof wd.GameObject) {
                var target = args[0];
                return this.listenerMap.filter(function (list, key) {
                    return self.isTarget(key, target, list);
                });
            }
            else if (args.length === 2) {
                var target = args[0], eventName = args[1];
                return this.listenerMap.getChild(this.buildKey(target, eventName));
            }
        };
        CustomEventListenerMap.prototype.removeChild = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var self = this;
            if (args.length === 1 && wd.JudgeUtils.isString(args[0])) {
                var eventName = args[0];
                this.listenerMap.removeChild(function (list, key) {
                    return self.isEventName(key, eventName);
                });
            }
            else if (args.length === 1 && args[0] instanceof wd.GameObject) {
                var target = args[0];
                this.listenerMap.removeChild(function (list, key) {
                    return self.isTarget(key, target, list);
                });
            }
            else if (args.length === 2 && wd.JudgeUtils.isString(args[0])) {
                var eventName = args[0], handler = args[1], list = null;
                if (this.listenerMap.hasChild(eventName)) {
                    list = this.listenerMap.getChild(eventName);
                    wdCb.Collection.create().addChild(list.removeChild(function (val) {
                        return val.originHandler === handler;
                    }));
                    if (list.getCount() === 0) {
                        this.listenerMap.removeChild(eventName);
                    }
                }
            }
            else if (args.length === 2 && wd.JudgeUtils.isNumber(args[0])) {
                var uid = args[0], eventName = args[1];
                this.listenerMap.removeChild(this.buildKey(uid, eventName));
            }
            else if (args.length === 2 && args[0] instanceof wd.GameObject) {
                var target = args[0], eventName = args[1];
                this.listenerMap.removeChild(this.buildKey(target, eventName));
            }
            else if (args.length === 3 && args[0] instanceof wd.GameObject) {
                var eventName = args[1], handler = args[2];
                this.listenerMap.forEach(function (list, key) {
                    list.removeChild(function (val) {
                        return val.originHandler === handler;
                    });
                    if (list.getCount() === 0) {
                        return wdCb.$REMOVE;
                    }
                });
            }
        };
        CustomEventListenerMap.prototype.getUidFromKey = function (key) {
            var separator = "" + CustomEventListenerMap.eventSeparator;
            return key.indexOf(separator) > -1 ? Number(key.split(separator)[0]) : null;
        };
        CustomEventListenerMap.prototype.isTarget = function (key, target, list) {
            return key.indexOf(this._buildKeyPrefix(target.uid)) > -1 && list !== undefined;
        };
        CustomEventListenerMap.prototype.getEventSeparator = function () {
            return "" + CustomEventListenerMap.eventSeparator;
        };
        CustomEventListenerMap.prototype.buildKey = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            if (wd.JudgeUtils.isNumber(args[0])) {
                var uid = args[0], eventName = args[1];
                return this._buildKeyWithUid(uid, eventName);
            }
            else if (args[0] instanceof wd.GameObject) {
                var target = args[0], eventName = args[1];
                return this._buildKeyWithUid(target.uid, eventName);
            }
            else if (args[0] === null) {
                var eventName = args[1];
                return eventName;
            }
        };
        CustomEventListenerMap.prototype._buildKeyWithUid = function (uid, eventName) {
            return "" + this._buildKeyPrefix(uid) + CustomEventListenerMap.eventSeparator + eventName;
        };
        CustomEventListenerMap.prototype._buildKeyPrefix = function (uid) {
            return "" + String(uid);
        };
        CustomEventListenerMap.eventSeparator = "@";
        return CustomEventListenerMap;
    })(wd.EventListenerMap);
    wd.CustomEventListenerMap = CustomEventListenerMap;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var DomEventListenerMap = (function (_super) {
        __extends(DomEventListenerMap, _super);
        function DomEventListenerMap() {
            _super.apply(this, arguments);
            this.listenerMap = wdCb.Hash.create();
        }
        DomEventListenerMap.create = function () {
            var obj = new this();
            return obj;
        };
        DomEventListenerMap.prototype.getChild = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            if (args.length === 1) {
                var eventName = args[0];
                return this.listenerMap.getChild(eventName);
            }
            else if (args.length === 2) {
                var dom = args[0], eventName = args[1];
                return this.listenerMap.getChild(this.buildKey(dom, eventName));
            }
        };
        DomEventListenerMap.prototype.removeChild = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var self = this, result = null;
            if (args.length === 1 && wd.JudgeUtils.isString(args[0])) {
                var eventName = args[0];
                result = this._getEventDataOffDataList(eventName, this.listenerMap.removeChild(function (list, key) {
                    return self.isEventName(key, eventName);
                }));
            }
            else if (args.length === 2 && wd.JudgeUtils.isString(args[0])) {
                var eventName = args[0], handler = args[1], resultList = wdCb.Collection.create();
                this.listenerMap.forEach(function (list, key) {
                    if (self.isEventName(key, eventName)) {
                        var result_1 = list.removeChild(function (val) {
                            return val.originHandler === handler;
                        });
                        if (result_1.getCount() > 0) {
                            resultList.addChild(result_1);
                        }
                        if (list.getCount() === 0) {
                            return wdCb.$REMOVE;
                        }
                    }
                });
                result = this._getEventDataOffDataList(eventName, resultList);
            }
            else if (args.length === 2 && wd.JudgeUtils.isDom(args[0])) {
                var dom = args[0], eventName = args[1];
                result = this._getEventDataOffDataList(eventName, this.listenerMap.removeChild(this.buildKey(dom, eventName)));
            }
            else if (args.length === 3 && wd.JudgeUtils.isDom(args[0])) {
                var eventName = args[1], resultList = wdCb.Collection.create(), handler = args[2];
                this.listenerMap.forEach(function (list, key) {
                    var result = list.removeChild(function (val) {
                        return val.originHandler === handler;
                    });
                    if (result.getCount() > 0) {
                        resultList.addChild(result);
                    }
                    if (list.getCount() === 0) {
                        return wdCb.$REMOVE;
                    }
                });
                result = this._getEventDataOffDataList(eventName, resultList);
            }
            return result;
        };
        DomEventListenerMap.prototype.isDom = function (key, dom, list) {
            return key.indexOf(this._buildKeyPrefix(dom)) > -1 && list !== undefined;
        };
        DomEventListenerMap.prototype.getEventSeparator = function () {
            return "" + DomEventListenerMap.eventSeparator;
        };
        DomEventListenerMap.prototype.buildKey = function (dom, eventName) {
            return "" + this._buildKeyPrefix(dom) + DomEventListenerMap.eventSeparator + eventName;
        };
        DomEventListenerMap.prototype._buildKeyPrefix = function (dom) {
            return dom.id ? "" + dom.tagName + dom.id : "" + dom.tagName;
        };
        DomEventListenerMap.prototype._getEventDataOffDataList = function (eventName, result) {
            return result.map(function (list) {
                return list.map(function (data) {
                    return {
                        dom: data.dom,
                        eventName: eventName,
                        domHandler: data.domHandler
                    };
                });
            });
        };
        DomEventListenerMap.eventSeparator = "@";
        return DomEventListenerMap;
    })(wd.EventListenerMap);
    wd.DomEventListenerMap = DomEventListenerMap;
})(wd || (wd = {}));

var wd;
(function (wd) {
    (function (EventType) {
        EventType[EventType["MOUSE"] = 0] = "MOUSE";
        EventType[EventType["KEYBOARD"] = 1] = "KEYBOARD";
        EventType[EventType["CUSTOM"] = 2] = "CUSTOM";
    })(wd.EventType || (wd.EventType = {}));
    var EventType = wd.EventType;
})(wd || (wd = {}));

var wd;
(function (wd) {
    var BrowserIdentifier;
    (function (BrowserIdentifier) {
        BrowserIdentifier[BrowserIdentifier["FALLBACK"] = "fallback"] = "FALLBACK";
        BrowserIdentifier[BrowserIdentifier["FIREFOX"] = "firefox"] = "FIREFOX";
        BrowserIdentifier[BrowserIdentifier["CHROME"] = "chrome"] = "CHROME";
    })(BrowserIdentifier || (BrowserIdentifier = {}));
    (function (EventName) {
        EventName[EventName["CLICK"] = "click"] = "CLICK";
        EventName[EventName["MOUSEOVER"] = "mouseover"] = "MOUSEOVER";
        EventName[EventName["MOUSEUP"] = "mouseup"] = "MOUSEUP";
        EventName[EventName["MOUSEOUT"] = "mouseout"] = "MOUSEOUT";
        EventName[EventName["MOUSEMOVE"] = "mousemove"] = "MOUSEMOVE";
        EventName[EventName["MOUSEDOWN"] = "mousedown"] = "MOUSEDOWN";
        EventName[EventName["MOUSEWHEEL"] = ("mousewheel|DOMMouseScroll*" + BrowserIdentifier.FIREFOX)] = "MOUSEWHEEL";
        EventName[EventName["KEYDOWN"] = "keydown"] = "KEYDOWN";
        EventName[EventName["KEYUP"] = "keyup"] = "KEYUP";
        EventName[EventName["KEYPRESS"] = "keypress"] = "KEYPRESS";
    })(wd.EventName || (wd.EventName = {}));
    var EventName = wd.EventName;
    var EVENTNAME_SPLITTER = '|', BROWSER_IDENTIFIER = '*';
    var EventNameHandler = (function () {
        function EventNameHandler() {
        }
        EventNameHandler.handleEventName = function (domEventName) {
            var eventName = domEventName, fallbackEventName = null, specifyBrowserEventNameArr = [], result = null;
            for (var _i = 0, _a = eventName.split(EVENTNAME_SPLITTER); _i < _a.length; _i++) {
                var name_1 = _a[_i];
                if (this._isFallbackEventName(name_1)) {
                    fallbackEventName = name_1;
                }
                else {
                    specifyBrowserEventNameArr.push(name_1);
                }
            }
            result = this._getSpecifyBrowserEventName(specifyBrowserEventNameArr);
            return result !== null ? result : fallbackEventName;
        };
        EventNameHandler._isFallbackEventName = function (eventName) {
            return eventName.split(BROWSER_IDENTIFIER).length === 1;
        };
        EventNameHandler._getSpecifyBrowserEventName = function (specifyBrowserEventNameArr) {
            var result = null;
            for (var _i = 0; _i < specifyBrowserEventNameArr.length; _i++) {
                var eventName = specifyBrowserEventNameArr[_i];
                var _a = eventName.split(BROWSER_IDENTIFIER), domEventName = _a[0], browserIdentifier = _a[1];
                switch (browserIdentifier) {
                    case BrowserIdentifier.CHROME:
                        if (bowser.chrome) {
                            result = domEventName;
                        }
                        break;
                    case BrowserIdentifier.FIREFOX:
                        if (bowser.firefox) {
                            result = domEventName;
                        }
                        break;
                    default:
                        break;
                }
                if (result) {
                    break;
                }
            }
            return result;
        };
        return EventNameHandler;
    })();
    wd.EventNameHandler = EventNameHandler;
})(wd || (wd = {}));

var wd;
(function (wd) {
    (function (EventPhase) {
        EventPhase[EventPhase["BROADCAST"] = 0] = "BROADCAST";
        EventPhase[EventPhase["EMIT"] = 1] = "EMIT";
    })(wd.EventPhase || (wd.EventPhase = {}));
    var EventPhase = wd.EventPhase;
})(wd || (wd = {}));

var wd;
(function (wd) {
    var _table = wdCb.Hash.create();
    _table.addChild(wd.EventName.CLICK, wd.EventType.MOUSE);
    _table.addChild(wd.EventName.MOUSEOVER, wd.EventType.MOUSE);
    _table.addChild(wd.EventName.MOUSEOUT, wd.EventType.MOUSE);
    _table.addChild(wd.EventName.MOUSEMOVE, wd.EventType.MOUSE);
    _table.addChild(wd.EventName.MOUSEDOWN, wd.EventType.MOUSE);
    _table.addChild(wd.EventName.MOUSEUP, wd.EventType.MOUSE);
    _table.addChild(wd.EventName.MOUSEWHEEL, wd.EventType.MOUSE);
    _table.addChild(wd.EventName.KEYDOWN, wd.EventType.KEYBOARD);
    _table.addChild(wd.EventName.KEYPRESS, wd.EventType.KEYBOARD);
    _table.addChild(wd.EventName.KEYUP, wd.EventType.KEYBOARD);
    var EventTable = (function () {
        function EventTable() {
        }
        EventTable.getEventType = function (eventName) {
            var result = _table.getChild(eventName);
            if (result === void 0) {
                result = wd.EventType.CUSTOM;
            }
            return result;
        };
        return EventTable;
    })();
    wd.EventTable = EventTable;
})(wd || (wd = {}));

var wd;
(function (wd) {
    var Event = (function () {
        function Event(eventName) {
            this.p_type = null;
            this.name = null;
            this.target = null;
            this.isStopPropagation = false;
            this.phase = null;
            this.name = eventName;
        }
        Object.defineProperty(Event.prototype, "type", {
            get: function () {
                wd.Log.error(this.p_type === null, wd.Log.info.ABSTRACT_ATTRIBUTE);
                return this.p_type;
            },
            enumerable: true,
            configurable: true
        });
        Event.prototype.stopPropagation = function () {
            this.isStopPropagation = true;
        };
        Event.prototype.copyMember = function (destination, source, memberArr) {
            memberArr.forEach(function (member) {
                destination[member] = source[member];
            });
            return destination;
        };
        return Event;
    })();
    wd.Event = Event;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var DomEvent = (function (_super) {
        __extends(DomEvent, _super);
        function DomEvent(event, eventName) {
            _super.call(this, eventName);
            this._event = null;
            this.event = event;
        }
        Object.defineProperty(DomEvent.prototype, "event", {
            get: function () {
                return this._event;
            },
            set: function (event) {
                this._event = event || wd.root.event;
            },
            enumerable: true,
            configurable: true
        });
        DomEvent.prototype.preventDefault = function () {
            var e = this._event;
            if (bowser.msie && Number(bowser.version) <= 8) {
                e.returnValue = false;
            }
            else {
                e.preventDefault();
            }
        };
        return DomEvent;
    })(wd.Event);
    wd.DomEvent = DomEvent;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd_1) {
    var MouseEvent = (function (_super) {
        __extends(MouseEvent, _super);
        function MouseEvent() {
            _super.apply(this, arguments);
            this._location = null;
            this._locationInView = null;
            this._button = null;
            this.p_type = wd_1.EventType.MOUSE;
        }
        MouseEvent.create = function (event, eventName) {
            var obj = new this(event, eventName);
            return obj;
        };
        Object.defineProperty(MouseEvent.prototype, "location", {
            get: function () {
                var point = null, e = this.event;
                if (this._location) {
                    return this._location;
                }
                point = wd_1.Point.create();
                if (bowser.msie) {
                    point.x = e.clientX + document.body.scrollLeft || document.documentElement.scrollLeft;
                    point.y = e.clientY + document.body.scrollTop || document.documentElement.scrollTop;
                }
                else {
                    point.x = e.pageX;
                    point.y = e.pageY;
                }
                return point;
            },
            set: function (point) {
                this._location = point;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MouseEvent.prototype, "locationInView", {
            get: function () {
                var point = null, viewOffset = null;
                if (this._locationInView) {
                    return this._locationInView;
                }
                point = this.location;
                viewOffset = wd_1.DeviceManager.getInstance().view.offset;
                return wd_1.Point.create(point.x - viewOffset.x, point.y - viewOffset.y);
            },
            set: function (locationInView) {
                this._locationInView = locationInView;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MouseEvent.prototype, "button", {
            get: function () {
                var e = this.event, mouseButton = null;
                if (this._button) {
                    return this._button;
                }
                if (bowser.msie) {
                    switch (e.button) {
                        case 1:
                            mouseButton = wd_1.MouseButton.LEFT;
                            break;
                        case 4:
                            mouseButton = wd_1.MouseButton.RIGHT;
                            break;
                        case 2:
                            mouseButton = wd_1.MouseButton.CENTER;
                            break;
                        default:
                            wd_1.Log.error(true, wd_1.Log.info.FUNC_NOT_SUPPORT("multi mouse button"));
                            break;
                    }
                }
                else {
                    switch (e.button) {
                        case 0:
                            mouseButton = wd_1.MouseButton.LEFT;
                            break;
                        case 1:
                            mouseButton = wd_1.MouseButton.RIGHT;
                            break;
                        case 2:
                            mouseButton = wd_1.MouseButton.CENTER;
                            break;
                        default:
                            wd_1.Log.error(true, wd_1.Log.info.FUNC_NOT_SUPPORT("multi mouse button"));
                            break;
                    }
                }
                return mouseButton;
            },
            set: function (button) {
                this._button = button;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MouseEvent.prototype, "wheel", {
            get: function () {
                var e = this.event;
                if (e.detail) {
                    return -1 * e.detail;
                }
                if (e.wheelDelta) {
                    return e.wheelDelta / 120;
                }
                return 0;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MouseEvent.prototype, "movementDelta", {
            get: function () {
                var e = this.event, dx = null, wd = null;
                if (this._isPointerLocked()) {
                    dx = e.movementX || e.webkitMovementX || e.mozMovementX || 0;
                    wd = e.movementY || e.webkitMovementY || e.mozMovementY || 0;
                }
                else {
                    var location_1 = this.location, handler = wd_1.MouseEventHandler.getInstance(), lastX = handler.lastX, lastY = handler.lastY;
                    if (lastX === null && lastY === null) {
                        dx = 0;
                        wd = 0;
                    }
                    else {
                        dx = location_1.x - lastX;
                        wd = location_1.y - lastY;
                    }
                }
                return {
                    x: dx,
                    y: wd
                };
            },
            enumerable: true,
            configurable: true
        });
        MouseEvent.prototype.copy = function () {
            var eventObj = MouseEvent.create(this.event, this.name);
            return this.copyMember(eventObj, this, ["target", "isStopPropagation", "phase", "lastX", "lastY"]);
        };
        MouseEvent.prototype._isPointerLocked = function () {
            return !!(document.pointerLockElement || document.mozPointerLockElement || document.webkitPointerLockElement);
        };
        return MouseEvent;
    })(wd_1.DomEvent);
    wd_1.MouseEvent = MouseEvent;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var SPECIAL_KEY_MAP = {
        8: "backspace",
        9: "tab",
        10: "return",
        13: "return",
        16: "shift",
        17: "ctrl",
        18: "alt",
        19: "pause",
        20: "capslock",
        27: "esc",
        32: "space",
        33: "pageup",
        34: "pagedown",
        35: "end",
        36: "home",
        37: "left",
        38: "up",
        39: "right",
        40: "down",
        45: "insert",
        46: "del",
        59: ";",
        61: "=",
        65: "a",
        66: "b",
        67: "c",
        68: "d",
        69: "e",
        70: "f",
        71: "g",
        72: "h",
        73: "i",
        74: "j",
        75: "k",
        76: "l",
        77: "m",
        78: "n",
        79: "o",
        80: "p",
        81: "q",
        82: "r",
        83: "s",
        84: "t",
        85: "u",
        86: "v",
        87: "w",
        88: "x",
        89: "y",
        90: "z",
        96: "0",
        97: "1",
        98: "2",
        99: "3",
        100: "4",
        101: "5",
        102: "6",
        103: "7",
        104: "8",
        105: "9",
        106: "*",
        107: "+",
        109: "-",
        110: ".",
        111: "/",
        112: "f1",
        113: "f2",
        114: "f3",
        115: "f4",
        116: "f5",
        117: "f6",
        118: "f7",
        119: "f8",
        120: "f9",
        121: "f10",
        122: "f11",
        123: "f12",
        144: "numlock",
        145: "scroll",
        173: "-",
        186: ";",
        187: "=",
        188: ",",
        189: "-",
        190: ".",
        191: "/",
        192: "`",
        219: "[",
        220: "\\",
        221: "]",
        222: "'"
    }, SHIFT_KEY_MAP = {
        "`": "~",
        "1": "!",
        "2": "@",
        "3": "#",
        "4": "$",
        "5": "%",
        "6": "^",
        "7": "&",
        "8": "*",
        "9": "(",
        "0": ")",
        "-": "_",
        "=": "+",
        ";": ": ",
        "'": "\"",
        ",": "<",
        ".": ">",
        "/": "?",
        "\\": "|"
    };
    var KeyboardEvent = (function (_super) {
        __extends(KeyboardEvent, _super);
        function KeyboardEvent() {
            _super.apply(this, arguments);
            this.p_type = wd.EventType.KEYBOARD;
        }
        KeyboardEvent.create = function (event, eventName) {
            var obj = new this(event, eventName);
            return obj;
        };
        Object.defineProperty(KeyboardEvent.prototype, "ctrlKey", {
            get: function () {
                return this.event.ctrlKey;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(KeyboardEvent.prototype, "altKey", {
            get: function () {
                return this.event.altKey;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(KeyboardEvent.prototype, "shiftKey", {
            get: function () {
                return this.event.shiftKey;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(KeyboardEvent.prototype, "metaKey", {
            get: function () {
                return this.event.metaKey;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(KeyboardEvent.prototype, "keyCode", {
            get: function () {
                return this.event.keyCode;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(KeyboardEvent.prototype, "key", {
            get: function () {
                var key = SPECIAL_KEY_MAP[this.keyCode], char = null;
                if (!key) {
                    char = String.fromCharCode(this.keyCode).toLowerCase();
                    if (this.shiftKey) {
                        return SHIFT_KEY_MAP[char];
                    }
                    return char;
                }
                return key;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(KeyboardEvent.prototype, "keyState", {
            get: function () {
                return wd.KeyboardEventHandler.getInstance().keyState;
            },
            enumerable: true,
            configurable: true
        });
        KeyboardEvent.prototype.copy = function () {
            var eventObj = KeyboardEvent.create(this.event, this.name);
            return this.copyMember(eventObj, this, ["target", "isStopPropagation", "phase", "altKey", "shiftKey", "ctrlKey", "metaKey", "keyCode", "key"]);
        };
        return KeyboardEvent;
    })(wd.DomEvent);
    wd.KeyboardEvent = KeyboardEvent;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var CustomEvent = (function (_super) {
        __extends(CustomEvent, _super);
        function CustomEvent() {
            _super.apply(this, arguments);
            this.currentTarget = null;
            this.userData = null;
            this.p_type = wd.EventType.CUSTOM;
        }
        CustomEvent.create = function (eventName) {
            var obj = new this(eventName);
            return obj;
        };
        CustomEvent.prototype.copyPublicAttri = function (destination, source) {
            var property = null;
            wdCb.ExtendUtils.extend(destination, function (item, property) {
                return property.slice(0, 1) !== "_"
                    && !wd.JudgeUtils.isFunction(item);
            });
            return destination;
        };
        CustomEvent.prototype.copy = function () {
            var eventObj = CustomEvent.create(this.name);
            return this.copyMember(eventObj, this, ["target", "currentTarget", "isStopPropagation", "phase"]);
        };
        return CustomEvent;
    })(wd.Event);
    wd.CustomEvent = CustomEvent;
})(wd || (wd = {}));

var wd;
(function (wd) {
    (function (MouseButton) {
        MouseButton[MouseButton["LEFT"] = 0] = "LEFT";
        MouseButton[MouseButton["RIGHT"] = 1] = "RIGHT";
        MouseButton[MouseButton["CENTER"] = 2] = "CENTER";
    })(wd.MouseButton || (wd.MouseButton = {}));
    var MouseButton = wd.MouseButton;
})(wd || (wd = {}));

var wd;
(function (wd) {
    var EventListener = (function () {
        function EventListener(option) {
            this.eventType = null;
            this.priority = null;
            this.handlerDataList = wdCb.Collection.create();
            this.eventType = option.eventType;
            this.priority = option.priority || 1;
        }
        EventListener.create = function (option) {
            var obj = new this(option);
            obj.initWhenCreate(option);
            return obj;
        };
        EventListener.prototype.initWhenCreate = function (option) {
            this._setHandlerDataList(option);
        };
        EventListener.prototype._setHandlerDataList = function (option) {
            var i = null, REGEX_HANDER = /on\w+/;
            for (i in option) {
                if (option.hasOwnProperty(i)) {
                    if (REGEX_HANDER.test(i)) {
                        this.handlerDataList.addChild({
                            eventName: this._parseEventName(i),
                            handler: option[i]
                        });
                    }
                }
            }
        };
        EventListener.prototype._parseEventName = function (handlerName) {
            return handlerName.slice(2).toLowerCase();
        };
        return EventListener;
    })();
    wd.EventListener = EventListener;
})(wd || (wd = {}));

var wd;
(function (wd) {
    var EventHandler = (function () {
        function EventHandler() {
        }
        return EventHandler;
    })();
    wd.EventHandler = EventHandler;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var wd;
(function (wd) {
    var DomEventHandler = (function (_super) {
        __extends(DomEventHandler, _super);
        function DomEventHandler() {
            _super.apply(this, arguments);
        }
        DomEventHandler.prototype.off = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var self = this, eventRegister = wd.DomEventRegister.getInstance(), eventOffDataList = null;
            eventOffDataList = eventRegister.remove.apply(eventRegister, args);
            if (eventOffDataList) {
                eventOffDataList.forEach(function (list) {
                    list.forEach(function (eventOffData) {
                        self._unBind(eventOffData.dom, eventOffData.eventName, eventOffData.domHandler);
                    });
                });
            }
            this.clearHandler();
        };
        DomEventHandler.prototype.trigger = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var dom = null, event = null, eventName = null, registerDataList = null;
            if (args.length === 1) {
                event = args[0];
                dom = this.getDefaultDom();
            }
            else {
                dom = args[0];
                event = args[1];
            }
            eventName = event.name;
            registerDataList = wd.DomEventRegister.getInstance().getEventRegisterDataList(dom, eventName);
            if (registerDataList === null || registerDataList.getCount() === 0) {
                return;
            }
            registerDataList.forEach(function (registerData) {
                var eventCopy = event.copy();
                registerData.handler(eventCopy);
            });
        };
        DomEventHandler.prototype.clearHandler = function () {
        };
        DomEventHandler.prototype.buildDomHandler = function (dom, eventName) {
            var self = this, context = wd.root;
            return wdCb.EventUtils.bindEvent(context, function (event) {
                self.triggerDomEvent(dom, event, eventName);
            });
        };
        DomEventHandler.prototype.handler = function (dom, eventName, handler, priority) {
            var domHandler = null, originHandler = handler;
            handler = this.addEngineHandler(eventName, handler);
            if (!wd.DomEventRegister.getInstance().isBinded(dom, eventName)) {
                domHandler = this._bind(dom, eventName);
            }
            else {
                domHandler = wd.DomEventRegister.getInstance().getDomHandler(dom, eventName);
            }
            wd.DomEventRegister.getInstance().register(dom, eventName, handler, originHandler, domHandler, priority);
        };
        DomEventHandler.prototype._bind = function (dom, eventName) {
            var domHandler = null;
            domHandler = this.buildDomHandler(dom, eventName);
            wdCb.EventUtils.addEvent(dom, wd.EventNameHandler.handleEventName(eventName), domHandler);
            return domHandler;
        };
        DomEventHandler.prototype._unBind = function (dom, eventName, handler) {
            wdCb.EventUtils.removeEvent(dom, wd.EventNameHandler.handleEventName(eventName), handler);
        };
        __decorate([
            wd.virtual
        ], DomEventHandler.prototype, "clearHandler", null);
        return DomEventHandler;
    })(wd.EventHandler);
    wd.DomEventHandler = DomEventHandler;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var wd;
(function (wd) {
    var MouseEventHandler = (function (_super) {
        __extends(MouseEventHandler, _super);
        function MouseEventHandler() {
            _super.apply(this, arguments);
            this.lastX = null;
            this.lastY = null;
        }
        MouseEventHandler.getInstance = function () {
            if (this._instance === null) {
                this._instance = new this();
            }
            return this._instance;
        };
        MouseEventHandler.prototype.on = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var dom = null, eventName = null, handler = null, priority = null;
            if (args.length === 3) {
                dom = this.getDefaultDom();
                eventName = args[0];
                handler = args[1];
                priority = args[2];
            }
            else {
                dom = args[0];
                eventName = args[1];
                handler = args[2];
                priority = args[3];
            }
            this.handler(dom, eventName, handler, priority);
        };
        MouseEventHandler.prototype.getDefaultDom = function () {
            return wd.DeviceManager.getInstance().view.dom;
            ;
        };
        MouseEventHandler.prototype.triggerDomEvent = function (dom, event, eventName) {
            var eventObj = this._createEventObject(dom, event, eventName);
            wd.EventManager.trigger(dom, eventObj);
        };
        MouseEventHandler.prototype.addEngineHandler = function (eventName, handler) {
            var resultHandler = null;
            switch (eventName) {
                case wd.EventName.MOUSEMOVE:
                    resultHandler = this._handleMove(handler);
                    break;
                default:
                    resultHandler = handler;
                    break;
            }
            return resultHandler;
        };
        MouseEventHandler.prototype.clearHandler = function () {
            this.lastX = null;
            this.lastY = null;
        };
        MouseEventHandler.prototype._handleMove = function (handler) {
            var self = this;
            return function (event) {
                handler(event);
                self._saveLocation(event);
            };
        };
        MouseEventHandler.prototype._createEventObject = function (dom, event, eventName) {
            var obj = wd.MouseEvent.create(event ? event : wd.root.event, eventName);
            obj.target = dom;
            return obj;
        };
        MouseEventHandler.prototype._saveLocation = function (event) {
            var location = null;
            location = event.location;
            this.lastX = location.x;
            this.lastY = location.y;
        };
        MouseEventHandler._instance = null;
        __decorate([
            wd.require(function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i - 0] = arguments[_i];
                }
                if (args.length === 4) {
                    var dom = args[0];
                    wd.assert(wd.JudgeUtils.isDom(dom), wd.Log.info.FUNC_MUST_BE("first param", "HTMLElement"));
                }
            })
        ], MouseEventHandler.prototype, "on", null);
        return MouseEventHandler;
    })(wd.DomEventHandler);
    wd.MouseEventHandler = MouseEventHandler;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var KeyboardEventHandler = (function (_super) {
        __extends(KeyboardEventHandler, _super);
        function KeyboardEventHandler() {
            _super.apply(this, arguments);
            this.keyState = {};
        }
        KeyboardEventHandler.getInstance = function () {
            if (this._instance === null) {
                this._instance = new this();
            }
            return this._instance;
        };
        KeyboardEventHandler.prototype.on = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var eventName = null, handler = null, priority = null;
            if (args.length === 3) {
                eventName = args[0];
                handler = args[1];
                priority = args[2];
            }
            else {
                wd.Log.warn("keyboard event can only bind on document.body");
                eventName = args[1];
                handler = args[2];
                priority = args[3];
            }
            this.handler(this.getDefaultDom(), eventName, handler, priority);
        };
        KeyboardEventHandler.prototype.triggerDomEvent = function (dom, event, eventName) {
            var eventObj = this._createEventObject(dom, event, eventName);
            wd.EventManager.trigger(dom, eventObj);
        };
        KeyboardEventHandler.prototype.getDefaultDom = function () {
            return document.body;
        };
        KeyboardEventHandler.prototype.addEngineHandler = function (eventName, handler) {
            var resultHandler = null;
            switch (eventName) {
                case wd.EventName.KEYDOWN:
                    resultHandler = this._handleKeyDown(handler);
                    break;
                case wd.EventName.KEYUP:
                    resultHandler = this._handleKeyUp(handler);
                    break;
                default:
                    resultHandler = handler;
                    break;
            }
            return resultHandler;
        };
        KeyboardEventHandler.prototype.clearHandler = function () {
            this.keyState = {};
        };
        KeyboardEventHandler.prototype._handleKeyDown = function (handler) {
            var self = this;
            return function (event) {
                self._setKeyStateAllFalse();
                self.keyState[event.key] = true;
                handler(event);
            };
        };
        KeyboardEventHandler.prototype._handleKeyUp = function (handler) {
            var self = this;
            return function (event) {
                self._setKeyStateAllFalse();
                handler(event);
            };
        };
        KeyboardEventHandler.prototype._setKeyStateAllFalse = function () {
            for (var i in this.keyState) {
                if (this.keyState.hasOwnProperty(i)) {
                    this.keyState[i] = false;
                }
            }
        };
        KeyboardEventHandler.prototype._createEventObject = function (dom, event, eventName) {
            var obj = wd.KeyboardEvent.create(event ? event : wd.root.event, eventName);
            obj.target = dom;
            return obj;
        };
        KeyboardEventHandler._instance = null;
        return KeyboardEventHandler;
    })(wd.DomEventHandler);
    wd.KeyboardEventHandler = KeyboardEventHandler;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var CustomEventHandler = (function (_super) {
        __extends(CustomEventHandler, _super);
        function CustomEventHandler() {
            _super.apply(this, arguments);
        }
        CustomEventHandler.getInstance = function () {
            if (this._instance === null) {
                this._instance = new this();
            }
            return this._instance;
        };
        CustomEventHandler.prototype.on = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            if (args.length === 3) {
                var eventName = args[0], handler = args[1], originHandler = handler, priority = args[2];
                wd.CustomEventRegister.getInstance().register(null, eventName, handler, originHandler, null, priority);
            }
            else if (args.length === 4) {
                var target = args[0], eventName = args[1], handler = args[2], originHandler = handler, priority = args[3];
                wd.CustomEventRegister.getInstance().register(target, eventName, handler, originHandler, null, priority);
            }
        };
        CustomEventHandler.prototype.off = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var eventRegister = wd.CustomEventRegister.getInstance();
            eventRegister.remove.apply(eventRegister, args);
        };
        CustomEventHandler.prototype.trigger = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var event = null;
            if (args.length === 1 || args.length === 2) {
                var userData = null;
                if (args.length === 1) {
                    event = args[0];
                }
                else {
                    event = args[0];
                    userData = args[1];
                }
                return this._triggerEventHandler(event, userData);
            }
            else if (args.length === 3 || args.length === 4) {
                var target = null, userData = null, notSetTarget = null;
                if (args.length === 3) {
                    target = args[0];
                    event = args[1];
                    notSetTarget = args[2];
                }
                else {
                    target = args[0];
                    event = args[1];
                    userData = args[2];
                    notSetTarget = args[3];
                }
                return this._triggerTargetAndEventHandler(target, event, userData, notSetTarget);
            }
        };
        CustomEventHandler.prototype._triggerEventHandler = function (event, userData) {
            var registerDataList = null, self = this;
            registerDataList = wd.CustomEventRegister.getInstance().getEventRegisterDataList(event.name);
            if (registerDataList === null || registerDataList.getCount() === 0) {
                return false;
            }
            registerDataList.forEach(function (registerData) {
                var eventCopy = event.copy();
                eventCopy.currentTarget = registerData.target;
                eventCopy.target = registerData.target;
                self._setUserData(eventCopy, userData);
                registerData.handler(eventCopy);
            });
            return true;
        };
        CustomEventHandler.prototype._triggerTargetAndEventHandler = function (target, event, userData, notSetTarget) {
            var registerDataList = null, isStopPropagation = false, self = this;
            if (!notSetTarget) {
                event.target = target;
            }
            registerDataList = wd.CustomEventRegister.getInstance().getEventRegisterDataList(target, event.name);
            if (registerDataList === null || registerDataList.getCount() === 0) {
                return false;
            }
            registerDataList.forEach(function (registerData) {
                var eventCopy = event.copy();
                eventCopy.currentTarget = registerData.target;
                self._setUserData(eventCopy, userData);
                registerData.handler(eventCopy);
                if (eventCopy.isStopPropagation) {
                    isStopPropagation = true;
                }
            });
            return isStopPropagation;
        };
        CustomEventHandler.prototype._setUserData = function (event, userData) {
            if (userData) {
                event.userData = userData;
            }
        };
        CustomEventHandler._instance = null;
        return CustomEventHandler;
    })(wd.EventHandler);
    wd.CustomEventHandler = CustomEventHandler;
})(wd || (wd = {}));

var wd;
(function (wd) {
    var EventDispatcher = (function () {
        function EventDispatcher() {
        }
        return EventDispatcher;
    })();
    wd.EventDispatcher = EventDispatcher;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var CustomEventDispatcher = (function (_super) {
        __extends(CustomEventDispatcher, _super);
        function CustomEventDispatcher() {
            _super.apply(this, arguments);
        }
        CustomEventDispatcher.getInstance = function () {
            if (this._instance === null) {
                this._instance = new this();
            }
            return this._instance;
        };
        CustomEventDispatcher.prototype.trigger = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            if (args.length === 1) {
                var event_1 = args[0], eventType = event_1.type;
                return wd.EventHandlerFactory.createEventHandler(eventType)
                    .trigger(event_1);
            }
            else if (args.length === 2 && (args[0] instanceof wd.Event)) {
                var event_2 = args[0], userData = args[1], eventType = event_2.type;
                return wd.EventHandlerFactory.createEventHandler(eventType)
                    .trigger(event_2, userData);
            }
            else if ((args.length === 2 && args[0] instanceof wd.GameObject) || (args.length === 3 && wd.JudgeUtils.isBoolean(args[2]))) {
                var target = args[0], event_3 = args[1], notSetTarget = args[2] === void 0 ? false : args[2], eventType = event_3.type;
                return wd.EventHandlerFactory.createEventHandler(eventType)
                    .trigger(target, event_3, notSetTarget);
            }
            else if (args.length === 3 || args.length === 4) {
                var target = args[0], event_4 = args[1], userData = args[2], notSetTarget = args[3] === void 0 ? false : args[3], eventType = event_4.type;
                return wd.EventHandlerFactory.createEventHandler(eventType)
                    .trigger(target, event_4, userData, notSetTarget);
            }
        };
        CustomEventDispatcher.prototype.emit = function (target, eventObject, userData) {
            var isStopPropagation = false;
            eventObject.phase = wd.EventPhase.EMIT;
            eventObject.target = target;
            do {
                isStopPropagation = this._triggerWithUserData(target, eventObject, userData, true);
                if (isStopPropagation) {
                    break;
                }
                target = this._getParent(target);
            } while (target);
        };
        CustomEventDispatcher.prototype.broadcast = function (target, eventObject, userData) {
            var self = this;
            eventObject.phase = wd.EventPhase.BROADCAST;
            eventObject.target = target;
            this._triggerWithUserData(target, eventObject, userData, true);
            function iterator(obj) {
                var children = obj.getChildren();
                if (children.getCount() === 0) {
                    return;
                }
                children.forEach(function (child) {
                    self._triggerWithUserData(child, eventObject.copy(), userData, true);
                    iterator(child);
                });
            }
            iterator(target);
        };
        CustomEventDispatcher.prototype._getParent = function (target) {
            var parent = target.bubbleParent;
            return parent ? parent : target.parent;
        };
        CustomEventDispatcher.prototype._triggerWithUserData = function (target, event, userData, notSetTarget) {
            return userData ? this.trigger(target, event, userData, notSetTarget)
                : this.trigger(target, event, notSetTarget);
        };
        CustomEventDispatcher._instance = null;
        return CustomEventDispatcher;
    })(wd.EventDispatcher);
    wd.CustomEventDispatcher = CustomEventDispatcher;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var DomEventDispatcher = (function (_super) {
        __extends(DomEventDispatcher, _super);
        function DomEventDispatcher() {
            _super.apply(this, arguments);
        }
        DomEventDispatcher.getInstance = function () {
            if (this._instance === null) {
                this._instance = new this();
            }
            return this._instance;
        };
        DomEventDispatcher.prototype.trigger = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            if (args.length === 1) {
                var event_1 = args[0], eventType = event_1.type;
                wd.EventHandlerFactory.createEventHandler(eventType)
                    .trigger(event_1);
            }
            else if (args.length === 2 && wd.JudgeUtils.isDom(args[0])) {
                var dom = args[0], event_2 = args[1], eventType = event_2.type;
                wd.EventHandlerFactory.createEventHandler(eventType)
                    .trigger(dom, event_2);
            }
        };
        DomEventDispatcher._instance = null;
        return DomEventDispatcher;
    })(wd.EventDispatcher);
    wd.DomEventDispatcher = DomEventDispatcher;
})(wd || (wd = {}));

var wd;
(function (wd) {
    var EventRegister = (function () {
        function EventRegister() {
            this.listenerMap = wd.ABSTRACT_ATTRIBUTE;
        }
        EventRegister.prototype.getEventRegisterDataList = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var result = this.listenerMap.getChild.apply(this.listenerMap, args);
            if (!result) {
                return null;
            }
            return result.sort(function (dataA, dataB) {
                return dataB.priority - dataA.priority;
            });
        };
        EventRegister.prototype.filter = function (func) {
            return this.listenerMap.filter(func);
        };
        EventRegister.prototype.forEach = function (func) {
            return this.listenerMap.forEach(func);
        };
        EventRegister.prototype.getChild = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            return this.listenerMap.getChild.apply(this.listenerMap, Array.prototype.slice.call(arguments, 0));
        };
        EventRegister.prototype.getEventNameFromKey = function (key) {
            return this.listenerMap.getEventNameFromKey(key);
        };
        return EventRegister;
    })();
    wd.EventRegister = EventRegister;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var CustomEventRegister = (function (_super) {
        __extends(CustomEventRegister, _super);
        function CustomEventRegister() {
            _super.apply(this, arguments);
            this.listenerMap = wd.CustomEventListenerMap.create();
        }
        CustomEventRegister.getInstance = function () {
            if (this._instance === null) {
                this._instance = new this();
            }
            return this._instance;
        };
        CustomEventRegister.prototype.register = function (target, eventName, handler, originHandler, domHandler, priority) {
            this.listenerMap.appendChild(target, eventName, {
                target: target,
                eventName: eventName,
                handler: handler,
                originHandler: originHandler,
                domHandler: domHandler,
                priority: priority
            });
        };
        CustomEventRegister.prototype.remove = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var target = args[0];
            if (args.length === 1 && wd.JudgeUtils.isString(args[0])) {
                var eventName = args[0];
                this.listenerMap.removeChild(eventName);
            }
            else if (args.length === 1 && args[0] instanceof wd.GameObject) {
                this.listenerMap.removeChild(target);
                this._handleAfterAllEventHandlerRemoved(target);
            }
            else if (args.length === 2 && wd.JudgeUtils.isFunction(args[1])) {
                var eventName = args[0], handler = args[1];
                this.listenerMap.removeChild(eventName, handler);
            }
            else if (args.length === 2 && wd.JudgeUtils.isNumber(args[0])) {
                var uid = args[0], eventName = args[1];
                this.listenerMap.removeChild(uid, eventName);
            }
            else if ((args.length === 2 && args[0] instanceof wd.GameObject) || args.length === 3) {
                this.listenerMap.removeChild.apply(this.listenerMap, args);
                if (this._isAllEventHandlerRemoved(target)) {
                    this._handleAfterAllEventHandlerRemoved(target);
                }
            }
        };
        CustomEventRegister.prototype.setBubbleParent = function (target, parent) {
            target.bubbleParent = parent;
        };
        CustomEventRegister.prototype.getUidFromKey = function (key) {
            return this.listenerMap.getUidFromKey(key);
        };
        CustomEventRegister.prototype.isTarget = function (key, target, list) {
            return this.listenerMap.isTarget(key, target, list);
        };
        CustomEventRegister.prototype._isAllEventHandlerRemoved = function (target) {
            return !this.listenerMap.hasChild(function (list, key) {
                return key.indexOf(String(target.uid)) > -1 && (list && list.getCount() > 0);
            });
        };
        CustomEventRegister.prototype._handleAfterAllEventHandlerRemoved = function (target) {
            this.setBubbleParent(target, null);
        };
        CustomEventRegister._instance = null;
        return CustomEventRegister;
    })(wd.EventRegister);
    wd.CustomEventRegister = CustomEventRegister;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var DomEventRegister = (function (_super) {
        __extends(DomEventRegister, _super);
        function DomEventRegister() {
            _super.apply(this, arguments);
            this.listenerMap = wd.DomEventListenerMap.create();
        }
        DomEventRegister.getInstance = function () {
            if (this._instance === null) {
                this._instance = new this();
            }
            return this._instance;
        };
        DomEventRegister.prototype.register = function (dom, eventName, handler, originHandler, domHandler, priority) {
            this.listenerMap.appendChild(dom, eventName, {
                dom: dom,
                eventName: eventName,
                handler: handler,
                originHandler: originHandler,
                domHandler: domHandler,
                priority: priority
            });
        };
        DomEventRegister.prototype.remove = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var result = null;
            if (args.length === 1 && wd.JudgeUtils.isString(args[0])) {
                var eventName = args[0];
                result = this.listenerMap.removeChild(eventName);
            }
            else if (args.length === 2 && wd.JudgeUtils.isFunction(args[1])) {
                var eventName = args[0], handler = args[1];
                result = this.listenerMap.removeChild(eventName, handler);
            }
            else if ((args.length === 2 && wd.JudgeUtils.isDom(args[0])) || args.length === 3) {
                result = this.listenerMap.removeChild.apply(this.listenerMap, args);
            }
            return result;
        };
        DomEventRegister.prototype.isBinded = function (dom, eventName) {
            return this.listenerMap.hasChild(dom, eventName);
        };
        DomEventRegister.prototype.isDom = function (key, dom, list) {
            return this.listenerMap.isDom(key, dom, list);
        };
        DomEventRegister.prototype.getDomHandler = function (dom, eventName) {
            var list = this.getChild(dom, eventName);
            if (list && list.getCount() > 0) {
                return list.getChild(0).domHandler;
            }
        };
        DomEventRegister._instance = null;
        return DomEventRegister;
    })(wd.EventRegister);
    wd.DomEventRegister = DomEventRegister;
})(wd || (wd = {}));

var wd;
(function (wd) {
    var EventBinder = (function () {
        function EventBinder() {
        }
        return EventBinder;
    })();
    wd.EventBinder = EventBinder;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var wd;
(function (wd) {
    var CustomEventBinder = (function (_super) {
        __extends(CustomEventBinder, _super);
        function CustomEventBinder() {
            _super.apply(this, arguments);
        }
        CustomEventBinder.getInstance = function () {
            if (this._instance === null) {
                this._instance = new this();
            }
            return this._instance;
        };
        CustomEventBinder.prototype.on = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            if (args.length === 2) {
                var eventName = args[0], handler = args[1];
                wd.EventHandlerFactory.createEventHandler(wd.EventTable.getEventType(eventName))
                    .on(eventName, handler);
            }
            else if (args.length === 3 && wd.JudgeUtils.isString(args[0])) {
                var eventName = args[0], handler = args[1], priority = args[2];
                wd.EventHandlerFactory.createEventHandler(wd.EventTable.getEventType(eventName))
                    .on(eventName, handler, priority);
            }
            else if (args.length === 3 && args[0] instanceof wd.GameObject) {
                var target = args[0], eventName = args[1], handler = args[2];
                wd.EventHandlerFactory.createEventHandler(wd.EventTable.getEventType(eventName))
                    .on(target, eventName, handler);
            }
            else if (args.length === 4) {
                var target = args[0], eventName = args[1], handler = args[2], priority = args[3];
                wd.EventHandlerFactory.createEventHandler(wd.EventTable.getEventType(eventName))
                    .on(target, eventName, handler, priority);
            }
        };
        CustomEventBinder.prototype.off = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var eventRegister = wd.CustomEventRegister.getInstance();
            if (args.length === 0) {
                eventRegister.forEach(function (list, key) {
                    var eventName = eventRegister.getEventNameFromKey(key), targetUid = eventRegister.getUidFromKey(key);
                    if (!targetUid) {
                        wd.EventHandlerFactory.createEventHandler(wd.EventTable.getEventType(eventName))
                            .off(eventName);
                    }
                    else {
                        wd.EventHandlerFactory.createEventHandler(wd.EventTable.getEventType(eventName)).off(targetUid, eventName);
                    }
                });
            }
            else if (args.length === 1 && wd.JudgeUtils.isString(args[0])) {
                var eventName = args[0];
                eventRegister.forEach(function (list, key) {
                    var registeredEventName = eventRegister.getEventNameFromKey(key);
                    if (registeredEventName === eventName) {
                        wd.EventHandlerFactory.createEventHandler(wd.EventTable.getEventType(eventName))
                            .off(eventName);
                    }
                });
            }
            else if (args.length === 1 && args[0] instanceof wd.GameObject) {
                var target = args[0];
                eventRegister.forEach(function (list, key) {
                    var eventName = eventRegister.getEventNameFromKey(key);
                    if (eventRegister.isTarget(key, target, list)) {
                        wd.EventHandlerFactory.createEventHandler(wd.EventTable.getEventType(eventName))
                            .off(target, eventName);
                    }
                });
            }
            else if (args.length === 2 && wd.JudgeUtils.isString(args[0])) {
                var eventName = args[0], handler = args[1];
                wd.EventHandlerFactory.createEventHandler(wd.EventTable.getEventType(eventName))
                    .off(eventName, handler);
            }
            else if (args.length === 2 && args[0] instanceof wd.GameObject) {
                var target = args[0], eventName = args[1];
                wd.EventHandlerFactory.createEventHandler(wd.EventTable.getEventType(eventName))
                    .off(target, eventName);
            }
            else if (args.length === 3 && args[0] instanceof wd.GameObject) {
                var target = args[0], eventName = args[1], handler = args[2];
                wd.EventHandlerFactory.createEventHandler(wd.EventTable.getEventType(eventName))
                    .off(target, eventName, handler);
            }
        };
        CustomEventBinder.prototype._checkEventSeparator = function (eventName) {
            wd.assert(eventName.indexOf(wd.CustomEventListenerMap.eventSeparator) === -1, wd.Log.info.FUNC_SHOULD_NOT("eventName", "contain " + wd.CustomEventListenerMap.eventSeparator));
        };
        CustomEventBinder._instance = null;
        __decorate([
            wd.require(function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i - 0] = arguments[_i];
                }
                if (args.length === 1) {
                }
                else if (args.length === 2) {
                    var eventName = args[0];
                    this._checkEventSeparator(eventName);
                }
                else if (args.length === 3 && wd.JudgeUtils.isString(args[0])) {
                    var eventName = args[0];
                    this._checkEventSeparator(eventName);
                }
                else if (args.length === 3 && args[0] instanceof wd.GameObject) {
                    var eventName = args[1];
                    this._checkEventSeparator(eventName);
                }
                else if (args.length === 4) {
                    var eventName = args[1];
                    this._checkEventSeparator(eventName);
                }
            })
        ], CustomEventBinder.prototype, "on", null);
        return CustomEventBinder;
    })(wd.EventBinder);
    wd.CustomEventBinder = CustomEventBinder;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var wd;
(function (wd) {
    var DomEventBinder = (function (_super) {
        __extends(DomEventBinder, _super);
        function DomEventBinder() {
            _super.apply(this, arguments);
        }
        DomEventBinder.getInstance = function () {
            if (this._instance === null) {
                this._instance = new this();
            }
            return this._instance;
        };
        DomEventBinder.prototype.on = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            if (args.length === 1) {
                var listener = !(args[0] instanceof wd.EventListener) ? wd.EventListener.create(args[0]) : args[0];
                listener.handlerDataList.forEach(function (handlerData) {
                    wd.EventHandlerFactory.createEventHandler(listener.eventType)
                        .on(handlerData.eventName, handlerData.handler, listener.priority);
                });
            }
            else if (args.length === 2 && wd.JudgeUtils.isString(args[0])) {
                var eventName = args[0], handler = args[1];
                wd.EventHandlerFactory.createEventHandler(wd.EventTable.getEventType(eventName))
                    .on(eventName, handler);
            }
            else if (args.length === 2 && wd.JudgeUtils.isDom(args[0])) {
                var dom = args[0], listener = !(args[0] instanceof wd.EventListener) ? wd.EventListener.create(args[0]) : args[0];
                listener.handlerDataList.forEach(function (handlerData) {
                    wd.EventHandlerFactory.createEventHandler(listener.eventType)
                        .on(dom, handlerData.eventName, handlerData.handler, listener.priority);
                });
            }
            else if (args.length === 3 && wd.JudgeUtils.isString(args[0])) {
                var eventName = args[0], handler = args[1], priority = args[2];
                wd.EventHandlerFactory.createEventHandler(wd.EventTable.getEventType(eventName))
                    .on(eventName, handler, priority);
            }
            else if (args.length === 3 && wd.JudgeUtils.isDom(args[0])) {
                var dom = args[0], eventName = args[1], handler = args[2];
                wd.EventHandlerFactory.createEventHandler(wd.EventTable.getEventType(eventName))
                    .on(dom, eventName, handler);
            }
            else if (args.length === 4) {
                var dom = args[0], eventName = args[1], handler = args[2], priority = args[3];
                wd.EventHandlerFactory.createEventHandler(wd.EventTable.getEventType(eventName))
                    .on(dom, eventName, handler, priority);
            }
        };
        DomEventBinder.prototype.off = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var eventRegister = wd.DomEventRegister.getInstance();
            if (args.length === 0) {
                eventRegister.forEach(function (list, key) {
                    var eventName = eventRegister.getEventNameFromKey(key);
                    wd.EventHandlerFactory.createEventHandler(wd.EventTable.getEventType(eventName))
                        .off(eventName);
                });
            }
            else if (args.length === 1 && wd.JudgeUtils.isString(args[0])) {
                var eventName = args[0];
                eventRegister.forEach(function (list, key) {
                    var registeredEventName = eventRegister.getEventNameFromKey(key);
                    if (registeredEventName === eventName) {
                        wd.EventHandlerFactory.createEventHandler(wd.EventTable.getEventType(eventName))
                            .off(eventName);
                    }
                });
            }
            else if (args.length === 1 && wd.JudgeUtils.isDom(args[0])) {
                var dom = args[0];
                eventRegister.forEach(function (list, key) {
                    var eventName = eventRegister.getEventNameFromKey(key);
                    if (eventRegister.isDom(key, dom, list)) {
                        wd.EventHandlerFactory.createEventHandler(wd.EventTable.getEventType(eventName))
                            .off(dom, eventName);
                    }
                });
            }
            else if (args.length === 2 && wd.JudgeUtils.isString(args[0])) {
                var eventName = args[0], handler = args[1];
                wd.EventHandlerFactory.createEventHandler(wd.EventTable.getEventType(eventName))
                    .off(eventName, handler);
            }
            else if (args.length === 2 && wd.JudgeUtils.isDom(args[0])) {
                var dom = args[0], eventName = args[1];
                wd.EventHandlerFactory.createEventHandler(wd.EventTable.getEventType(eventName))
                    .off(dom, eventName);
            }
            else if (args.length === 3) {
                var dom = args[0], eventName = args[1], handler = args[2];
                wd.EventHandlerFactory.createEventHandler(wd.EventTable.getEventType(eventName))
                    .off(dom, eventName, handler);
            }
        };
        DomEventBinder.prototype._checkEventSeparator = function (eventName) {
            wd.assert(eventName.indexOf(wd.DomEventListenerMap.eventSeparator) === -1, wd.Log.info.FUNC_SHOULD_NOT("eventName", "contain " + wd.DomEventListenerMap.eventSeparator));
        };
        DomEventBinder._instance = null;
        __decorate([
            wd.require(function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i - 0] = arguments[_i];
                }
                if (args.length === 1) {
                }
                else if (args.length === 2) {
                }
                else if (args.length === 3 && wd.JudgeUtils.isString(args[0])) {
                    var eventName = args[0];
                    this._checkEventSeparator(eventName);
                }
                else if (args.length === 3 && wd.JudgeUtils.isDom(args[0])) {
                    var eventName = args[1];
                    this._checkEventSeparator(eventName);
                }
                else if (args.length === 4) {
                    var eventName = args[1];
                    this._checkEventSeparator(eventName);
                }
            })
        ], DomEventBinder.prototype, "on", null);
        return DomEventBinder;
    })(wd.EventBinder);
    wd.DomEventBinder = DomEventBinder;
})(wd || (wd = {}));

var wd;
(function (wd) {
    var EventHandlerFactory = (function () {
        function EventHandlerFactory() {
        }
        EventHandlerFactory.createEventHandler = function (eventType) {
            var handler = null;
            switch (eventType) {
                case wd.EventType.MOUSE:
                    handler = wd.MouseEventHandler.getInstance();
                    break;
                case wd.EventType.KEYBOARD:
                    handler = wd.KeyboardEventHandler.getInstance();
                    break;
                case wd.EventType.CUSTOM:
                    handler = wd.CustomEventHandler.getInstance();
                    break;
                default:
                    wd.Log.error(true, wd.Log.info.FUNC_INVALID("eventType"));
                    break;
            }
            return handler;
        };
        return EventHandlerFactory;
    })();
    wd.EventHandlerFactory = EventHandlerFactory;
})(wd || (wd = {}));

var wd;
(function (wd) {
    var EventBinderFactory = (function () {
        function EventBinderFactory() {
        }
        EventBinderFactory.createEventBinder = function (eventName) {
            var binder = null, eventType = wd.EventTable.getEventType(eventName);
            switch (eventType) {
                case wd.EventType.MOUSE:
                case wd.EventType.KEYBOARD:
                    binder = wd.DomEventBinder.getInstance();
                    break;
                case wd.EventType.CUSTOM:
                    binder = wd.CustomEventBinder.getInstance();
                    break;
                default:
                    wd.Log.error(true, wd.Log.info.FUNC_INVALID("eventName:" + eventName));
                    break;
            }
            return binder;
        };
        return EventBinderFactory;
    })();
    wd.EventBinderFactory = EventBinderFactory;
})(wd || (wd = {}));

var wd;
(function (wd) {
    var EventDispatcherFactory = (function () {
        function EventDispatcherFactory() {
        }
        EventDispatcherFactory.createEventDispatcher = function (event) {
            var dispatcher = null, eventType = event.type;
            switch (eventType) {
                case wd.EventType.MOUSE:
                case wd.EventType.KEYBOARD:
                    dispatcher = wd.DomEventDispatcher.getInstance();
                    break;
                case wd.EventType.CUSTOM:
                    dispatcher = wd.CustomEventDispatcher.getInstance();
                    break;
                default:
                    wd.Log.error(true, wd.Log.info.FUNC_INVALID("event:" + event));
                    break;
            }
            return dispatcher;
        };
        return EventDispatcherFactory;
    })();
    wd.EventDispatcherFactory = EventDispatcherFactory;
})(wd || (wd = {}));

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var wd;
(function (wd) {
    var EventManager = (function () {
        function EventManager() {
        }
        EventManager.on = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            if (args.length === 1) {
                var listener = args[0], eventBinder = wd.DomEventBinder.getInstance();
                eventBinder.on(listener);
            }
            else if (args.length === 2 && wd.JudgeUtils.isString(args[0])) {
                var eventName = args[0], handler = args[1], priority = 1, eventBinder = wd.EventBinderFactory.createEventBinder(eventName);
                eventBinder.on(eventName, handler, priority);
            }
            else if (args.length === 2 && wd.JudgeUtils.isDom(args[0])) {
                var dom = args[0], listener = args[1], eventBinder = wd.DomEventBinder.getInstance();
                eventBinder.on(dom, listener);
            }
            else if (args.length === 3 && wd.JudgeUtils.isString(args[0])) {
                var eventName = args[0], handler = args[1], priority = args[2], eventBinder = wd.EventBinderFactory.createEventBinder(eventName);
                eventBinder.on(eventName, handler, priority);
            }
            else if (args.length === 3 && args[0] instanceof wd.GameObject) {
                var target = args[0], eventName = args[1], handler = args[2], priority = 1, eventBinder = wd.CustomEventBinder.getInstance();
                eventBinder.on(target, eventName, handler, priority);
            }
            else if (args.length === 3 && wd.JudgeUtils.isDom(args[0])) {
                var dom = args[0], eventName = args[1], handler = args[2], priority = 1, eventBinder = wd.DomEventBinder.getInstance();
                eventBinder.on(dom, eventName, handler, priority);
            }
            else if (args.length === 4 && args[0] instanceof wd.GameObject) {
                var target = args[0], eventName = args[1], handler = args[2], priority = args[3], eventBinder = wd.CustomEventBinder.getInstance();
                eventBinder.on(target, eventName, handler, priority);
            }
            else if (args.length === 4 && wd.JudgeUtils.isDom(args[0])) {
                var dom = args[0], eventName = args[1], handler = args[2], priority = args[3], eventBinder = wd.DomEventBinder.getInstance();
                eventBinder.on(dom, eventName, handler, priority);
            }
        };
        EventManager.off = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            if (args.length === 0) {
                var customEventBinder = wd.CustomEventBinder.getInstance(), domEventBinder = wd.DomEventBinder.getInstance();
                customEventBinder.off();
                domEventBinder.off();
            }
            else if (args.length === 1 && wd.JudgeUtils.isString(args[0])) {
                var eventName = args[0], eventBinder = wd.EventBinderFactory.createEventBinder(eventName);
                eventBinder.off(eventName);
            }
            else if (args.length === 1 && args[0] instanceof wd.GameObject) {
                var eventName = args[0], eventBinder = wd.CustomEventBinder.getInstance();
                eventBinder.off(eventName);
            }
            else if (args.length === 1 && wd.JudgeUtils.isDom(args[0])) {
                var eventName = args[0], eventBinder = wd.DomEventBinder.getInstance();
                eventBinder.off(eventName);
            }
            else if (args.length === 2 && wd.JudgeUtils.isString(args[0])) {
                var eventName = args[0], handler = args[1], eventBinder = wd.EventBinderFactory.createEventBinder(eventName);
                eventBinder.off(eventName, handler);
            }
            else if (args.length === 2 && args[0] instanceof wd.GameObject) {
                var target = args[0], eventName = args[1], eventBinder = wd.CustomEventBinder.getInstance();
                eventBinder.off(target, eventName);
            }
            else if (args.length === 2 && wd.JudgeUtils.isDom(args[0])) {
                var dom = args[0], eventName = args[1], eventBinder = wd.DomEventBinder.getInstance();
                eventBinder.off(dom, eventName);
            }
            else if (args.length === 3 && args[0] instanceof wd.GameObject) {
                var target = args[0], eventName = args[1], handler = args[2], eventBinder = wd.CustomEventBinder.getInstance();
                eventBinder.off(target, eventName, handler);
            }
            else if (args.length === 3 && wd.JudgeUtils.isDom(args[0])) {
                var dom = args[0], eventName = args[1], handler = args[2], eventBinder = wd.DomEventBinder.getInstance();
                eventBinder.off(dom, eventName, handler);
            }
        };
        EventManager.trigger = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            if (args.length === 1) {
                var event_1 = args[0], eventDispatcher = wd.EventDispatcherFactory.createEventDispatcher(event_1);
                eventDispatcher.trigger(event_1);
            }
            else if (args.length === 2 && args[0] instanceof wd.Event) {
                var event_2 = args[0], userData = args[1], eventDispatcher = wd.CustomEventDispatcher.getInstance();
                eventDispatcher.trigger(event_2, userData);
            }
            else if (args.length === 2 && args[0] instanceof wd.GameObject) {
                var target = args[0], event_3 = args[1], eventDispatcher = wd.CustomEventDispatcher.getInstance();
                eventDispatcher.trigger(target, event_3);
            }
            else if (args.length === 2 && wd.JudgeUtils.isDom(args[0])) {
                var dom = args[0], event_4 = args[1], eventDispatcher = wd.DomEventDispatcher.getInstance();
                eventDispatcher.trigger(dom, event_4);
            }
            else if (args.length === 3) {
                var target = args[0], event_5 = args[1], userData = args[2], eventDispatcher = wd.CustomEventDispatcher.getInstance();
                eventDispatcher.trigger(target, event_5, userData);
            }
        };
        EventManager.broadcast = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var eventDispatcher = wd.CustomEventDispatcher.getInstance();
            eventDispatcher.broadcast.apply(eventDispatcher, args);
        };
        EventManager.emit = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var eventDispatcher = wd.CustomEventDispatcher.getInstance();
            eventDispatcher.emit.apply(eventDispatcher, args);
        };
        EventManager.fromEvent = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var addHandler = null, removeHandler = null;
            if (args.length === 1) {
                var eventName = args[0];
                addHandler = function (handler) {
                    EventManager.on(eventName, handler);
                };
                removeHandler = function (handler) {
                    EventManager.off(eventName, handler);
                };
            }
            else if (args.length === 2 && wd.JudgeUtils.isNumber(args[1])) {
                var eventName = args[0], priority = args[1];
                addHandler = function (handler) {
                    EventManager.on(eventName, handler, priority);
                };
                removeHandler = function (handler) {
                    EventManager.off(eventName, handler);
                };
            }
            else if (args.length === 2) {
                var eventName = args[1];
                addHandler = function (handler) {
                    EventManager.on(args[0], eventName, handler);
                };
                removeHandler = function (handler) {
                    EventManager.off(args[0], eventName, handler);
                };
            }
            else if (args.length === 3) {
                var eventName = args[1], priority = args[2];
                addHandler = function (handler) {
                    EventManager.on(args[0], eventName, handler, priority);
                };
                removeHandler = function (handler) {
                    EventManager.off(args[0], eventName, handler);
                };
            }
            return wdFrp.fromEventPattern(addHandler, removeHandler);
        };
        EventManager.setBubbleParent = function (target, parent) {
            wd.CustomEventRegister.getInstance().setBubbleParent(target, parent);
        };
        __decorate([
            wd.require(function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i - 0] = arguments[_i];
                }
                if (args[0] instanceof wd.GameObject) {
                    var eventName = args[1];
                    wd.assert(wd.EventTable.getEventType(eventName) === wd.EventType.CUSTOM, wd.Log.info.FUNC_MUST_BE("event", "custom event"));
                }
                else if (wd.JudgeUtils.isDom(args[0])) {
                    var eventName = args[1], eventType = wd.EventTable.getEventType(eventName);
                    wd.assert(eventType === wd.EventType.MOUSE || eventType === wd.EventType.KEYBOARD, wd.Log.info.FUNC_MUST_BE("event", "dom event"));
                }
            })
        ], EventManager, "on", null);
        __decorate([
            wd.require(function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i - 0] = arguments[_i];
                }
                if (args.length > 2 && args[0] instanceof wd.GameObject) {
                    var eventName = args[1];
                    wd.assert(wd.EventTable.getEventType(eventName) === wd.EventType.CUSTOM, wd.Log.info.FUNC_MUST_BE("event", "custom event"));
                }
                else if (args.length > 2 && wd.JudgeUtils.isDom(args[0])) {
                    var eventName = args[1], eventType = wd.EventTable.getEventType(eventName);
                    wd.assert(eventType === wd.EventType.MOUSE || eventType === wd.EventType.KEYBOARD, wd.Log.info.FUNC_MUST_BE("event", "dom event"));
                }
            })
        ], EventManager, "off", null);
        __decorate([
            wd.require(function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i - 0] = arguments[_i];
                }
                if (args.length === 2 && args[0] instanceof wd.Event) {
                    var event_6 = args[0];
                    wd.assert(event_6 instanceof wd.CustomEvent, wd.Log.info.FUNC_MUST_BE("event type", "CUSTOM"));
                }
                else if (args[0] instanceof wd.GameObject) {
                    var event_7 = args[1];
                    wd.assert(event_7 instanceof wd.CustomEvent, wd.Log.info.FUNC_MUST_BE("event type", "CUSTOM"));
                }
            })
        ], EventManager, "trigger", null);
        __decorate([
            wd.require(function (target, eventObject, userData) {
                wd.assert(eventObject instanceof wd.CustomEvent, wd.Log.info.FUNC_MUST_BE("eventObject", "CustomEvent"));
            })
        ], EventManager, "broadcast", null);
        __decorate([
            wd.require(function (target, eventObject, userData) {
                wd.assert(eventObject instanceof wd.CustomEvent, wd.Log.info.FUNC_MUST_BE("eventObject", "CustomEvent"));
            })
        ], EventManager, "emit", null);
        __decorate([
            wd.require(function (target, parent) {
                wd.assert(target instanceof wd.GameObject, "only GameObject can setBubleParent");
            })
        ], EventManager, "setBubbleParent", null);
        return EventManager;
    })();
    wd.EventManager = EventManager;
})(wd || (wd = {}));

var wd;
(function (wd) {
    (function (EngineEvent) {
        EngineEvent[EngineEvent["STARTLOOP"] = "dy_startLoop"] = "STARTLOOP";
        EngineEvent[EngineEvent["ENDLOOP"] = "dy_endLoop"] = "ENDLOOP";
        EngineEvent[EngineEvent["BEFORE_INIT"] = "dy_beforeInit"] = "BEFORE_INIT";
        EngineEvent[EngineEvent["AFTER_INIT"] = "dy_afterInit"] = "AFTER_INIT";
        EngineEvent[EngineEvent["AFTER_INIT_RIGIDBODY_ADD_CONSTRAINT"] = "dy_afterInit_rigidBody_addConstraint"] = "AFTER_INIT_RIGIDBODY_ADD_CONSTRAINT";
        EngineEvent[EngineEvent["MATERIAL_CHANGE"] = "dy_material_change"] = "MATERIAL_CHANGE";
    })(wd.EngineEvent || (wd.EngineEvent = {}));
    var EngineEvent = wd.EngineEvent;
})(wd || (wd = {}));

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var wd;
(function (wd) {
    var DeviceManager = (function () {
        function DeviceManager() {
            this.view = null;
            this.gl = null;
            this._scissorTest = null;
            this._depthTest = null;
            this._depthFunc = null;
            this._side = null;
            this.polygonOffset = null;
            this._polygonOffsetMode = null;
            this._depthWrite = null;
            this._blend = null;
            this._writeRed = null;
            this._writeGreen = null;
            this._writeBlue = null;
            this._writeAlpha = null;
            this._blendSrc = null;
            this._blendDst = null;
            this._blendEquation = null;
            this._blendFuncSeparate = null;
            this._blendEquationSeparate = null;
        }
        DeviceManager.getInstance = function () {
            if (this._instance === null) {
                this._instance = new this();
            }
            return this._instance;
        };
        Object.defineProperty(DeviceManager.prototype, "scissorTest", {
            get: function () {
                return this._scissorTest;
            },
            set: function (scissorTest) {
                var gl = this.gl;
                if (scissorTest) {
                    gl.enable(gl.SCISSOR_TEST);
                }
                else {
                    gl.disable(gl.SCISSOR_TEST);
                }
                this._scissorTest = scissorTest;
            },
            enumerable: true,
            configurable: true
        });
        DeviceManager.prototype.setScissor = function (x, y, width, height) {
            this.gl.scissor(x, y, width, height);
            if (!this.scissorTest) {
                this.scissorTest = true;
            }
        };
        DeviceManager.prototype.setViewport = function (x, y, width, height) {
            this.gl.viewport(x, y, width, height);
        };
        Object.defineProperty(DeviceManager.prototype, "depthTest", {
            get: function () {
                return this._depthTest;
            },
            set: function (depthTest) {
                var gl = this.gl;
                if (this._depthTest !== depthTest) {
                    if (depthTest) {
                        gl.enable(gl.DEPTH_TEST);
                    }
                    else {
                        gl.disable(gl.DEPTH_TEST);
                    }
                    this._depthTest = depthTest;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DeviceManager.prototype, "depthFunc", {
            get: function () {
                return this._depthFunc;
            },
            set: function (depthFunc) {
                var gl = this.gl;
                if (this._depthFunc !== depthFunc) {
                    gl.depthFunc(gl[depthFunc]);
                    this._depthFunc = depthFunc;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DeviceManager.prototype, "side", {
            get: function () {
                return this._side;
            },
            set: function (side) {
                var gl = this.gl;
                if (this._side !== side) {
                    switch (side) {
                        case Side.NONE:
                            gl.enable(gl.CULL_FACE);
                            gl.cullFace(gl.FRONT_AND_BACK);
                            break;
                        case Side.BOTH:
                            gl.disable(gl.CULL_FACE);
                            break;
                        case Side.FRONT:
                            gl.enable(gl.CULL_FACE);
                            gl.cullFace(gl.BACK);
                            break;
                        case Side.BACK:
                            gl.enable(gl.CULL_FACE);
                            gl.cullFace(gl.FRONT);
                            break;
                        default:
                            wd.Log.error(true, wd.Log.info.FUNC_UNEXPECT("side", side));
                            break;
                    }
                    this._side = side;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DeviceManager.prototype, "polygonOffsetMode", {
            get: function () {
                return this._polygonOffsetMode;
            },
            set: function (polygonOffsetMode) {
                var gl = this.gl;
                if (this._polygonOffsetMode !== polygonOffsetMode) {
                    switch (polygonOffsetMode) {
                        case PolygonOffsetMode.NONE:
                            gl.polygonOffset(0.0, 0.0);
                            gl.disable(gl.POLYGON_OFFSET_FILL);
                            break;
                        case PolygonOffsetMode.IN:
                            gl.enable(gl.POLYGON_OFFSET_FILL);
                            gl.polygonOffset(1.0, 1.0);
                            break;
                        case PolygonOffsetMode.OUT:
                            gl.enable(gl.POLYGON_OFFSET_FILL);
                            gl.polygonOffset(-1.0, -1.0);
                            break;
                        case PolygonOffsetMode.CUSTOM:
                            gl.enable(gl.POLYGON_OFFSET_FILL);
                            wd.Log.error(!this.polygonOffset, wd.Log.info.FUNC_MUST_DEFINE("polygonOffset"));
                            gl.polygonOffset(this.polygonOffset.x, this.polygonOffset.y);
                            break;
                        default:
                            break;
                    }
                    this._polygonOffsetMode = polygonOffsetMode;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DeviceManager.prototype, "depthWrite", {
            get: function () {
                return this._depthWrite;
            },
            set: function (depthWrite) {
                if (this._depthWrite !== depthWrite) {
                    this.gl.depthMask(depthWrite);
                    this._depthWrite = depthWrite;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DeviceManager.prototype, "blend", {
            get: function () {
                return this._blend;
            },
            set: function (blend) {
                var gl = this.gl;
                if (this._blend !== blend) {
                    if (blend) {
                        gl.enable(gl.BLEND);
                    }
                    else {
                        gl.disable(gl.BLEND);
                    }
                    this._blend = blend;
                }
            },
            enumerable: true,
            configurable: true
        });
        DeviceManager.prototype.setBlendFunc = function (blendSrc, blendDst) {
            if ((this._blendSrc !== blendSrc) || (this._blendDst !== blendDst)) {
                this._blend && this.gl.blendFunc(this.gl[blendSrc], this.gl[blendDst]);
                this._blendSrc = blendSrc;
                this._blendDst = blendDst;
            }
        };
        DeviceManager.prototype.setBlendEquation = function (blendEquation) {
            if (this._blendEquation !== blendEquation) {
                this._blend && this.gl.blendEquation(this.gl[blendEquation]);
                this._blendEquation = blendEquation;
            }
        };
        DeviceManager.prototype.setBlendFuncSeparate = function (blendFuncSeparate) {
            var gl = this.gl;
            if (!this._blendFuncSeparate || this._blendFuncSeparate[0] !== blendFuncSeparate[0] || this._blendFuncSeparate[1] !== blendFuncSeparate[1]) {
                this._blend && gl.blendFuncSeparate(gl[blendFuncSeparate[0]], gl[blendFuncSeparate[1]], gl[blendFuncSeparate[2]], gl[blendFuncSeparate[3]]);
                this._blendFuncSeparate = blendFuncSeparate;
            }
        };
        DeviceManager.prototype.setBlendEquationSeparate = function (blendEquationSeparate) {
            var gl = this.gl;
            if (!this._blendEquationSeparate || this._blendEquationSeparate[0] !== blendEquationSeparate[0] || this._blendEquationSeparate[1] !== blendEquationSeparate[1]) {
                this._blend && gl.blendEquationSeparate(gl[blendEquationSeparate[0]], gl[blendEquationSeparate[1]]);
                this._blendEquationSeparate = blendEquationSeparate;
            }
        };
        DeviceManager.prototype.setColorWrite = function (writeRed, writeGreen, writeBlue, writeAlpha) {
            if (this._writeRed !== writeRed
                || this._writeGreen !== writeGreen
                || this._writeBlue !== writeBlue
                || this._writeAlpha !== writeAlpha) {
                this.gl.colorMask(writeRed, writeGreen, writeBlue, writeAlpha);
                this._writeRed = writeRed;
                this._writeGreen = writeGreen;
                this._writeBlue = writeBlue;
                this._writeAlpha = writeAlpha;
            }
        };
        DeviceManager.prototype.clear = function (options) {
            var gl = this.gl, color = options.color;
            gl.clearColor(color.r, color.g, color.b, color.a);
            this.setColorWrite(true, true, true, true);
            gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT);
        };
        DeviceManager.prototype.createGL = function (canvasId) {
            var canvas = null;
            if (canvasId) {
                canvas = wdCb.DomQuery.create(canvasId).get(0);
            }
            else {
                canvas = wdCb.DomQuery.create("<canvas></canvas>").prependTo("body").get(0);
            }
            this.view = wd.ViewWebGL.create(canvas);
            this.gl = this.view.getContext();
        };
        DeviceManager.prototype.setScreen = function () {
            var screenSize = wd.Main.screenSize, x = null, y = null, width = null, height = null;
            if (screenSize === wd.ScreenSize.FULL) {
                x = 0;
                y = 0;
                width = wd.root.innerWidth;
                height = wd.root.innerHeight;
                wdCb.DomQuery.create("body").css("margin", "0");
            }
            else {
                x = screenSize.x || 0;
                y = screenSize.y || 0;
                width = screenSize.width || wd.root.innerWidth;
                height = screenSize.height || wd.root.innerHeight;
            }
            this.view.x = x;
            this.view.y = y;
            this.view.width = width;
            this.view.height = height;
            this.setViewport(0, 0, width, height);
        };
        DeviceManager._instance = null;
        __decorate([
            wd.require(function () {
                wd.assert(wd.Main.screenSize !== null, wd.Log.info.FUNC_NOT_EXIST("Main.screenSize"));
            })
        ], DeviceManager.prototype, "setScreen", null);
        return DeviceManager;
    })();
    wd.DeviceManager = DeviceManager;
    (function (DepthFunction) {
        DepthFunction[DepthFunction["NEVER"] = "NEVER"] = "NEVER";
        DepthFunction[DepthFunction["ALWAYS"] = "ALWAYS"] = "ALWAYS";
        DepthFunction[DepthFunction["LESS"] = "LESS"] = "LESS";
        DepthFunction[DepthFunction["LEQUAL"] = "LEQUAL"] = "LEQUAL";
        DepthFunction[DepthFunction["EQUAL"] = "EQUAL"] = "EQUAL";
        DepthFunction[DepthFunction["GEQUAL"] = "GEQUAL"] = "GEQUAL";
        DepthFunction[DepthFunction["GREATER"] = "GREATER"] = "GREATER";
        DepthFunction[DepthFunction["NOTEQUAL"] = "NOTEQUAL"] = "NOTEQUAL";
    })(wd.DepthFunction || (wd.DepthFunction = {}));
    var DepthFunction = wd.DepthFunction;
    (function (Side) {
        Side[Side["NONE"] = 0] = "NONE";
        Side[Side["BOTH"] = 1] = "BOTH";
        Side[Side["BACK"] = 2] = "BACK";
        Side[Side["FRONT"] = 3] = "FRONT";
    })(wd.Side || (wd.Side = {}));
    var Side = wd.Side;
    (function (PolygonOffsetMode) {
        PolygonOffsetMode[PolygonOffsetMode["NONE"] = 0] = "NONE";
        PolygonOffsetMode[PolygonOffsetMode["IN"] = 1] = "IN";
        PolygonOffsetMode[PolygonOffsetMode["OUT"] = 2] = "OUT";
        PolygonOffsetMode[PolygonOffsetMode["CUSTOM"] = 3] = "CUSTOM";
    })(wd.PolygonOffsetMode || (wd.PolygonOffsetMode = {}));
    var PolygonOffsetMode = wd.PolygonOffsetMode;
    (function (BlendFunc) {
        BlendFunc[BlendFunc["ZERO"] = "ZEOR"] = "ZERO";
        BlendFunc[BlendFunc["ONE"] = "ONE"] = "ONE";
        BlendFunc[BlendFunc["SRC_COLOR"] = "SRC_COLOR"] = "SRC_COLOR";
        BlendFunc[BlendFunc["ONE_MINUS_SRC_COLOR"] = "ONE_MINUS_SRC_COLOR"] = "ONE_MINUS_SRC_COLOR";
        BlendFunc[BlendFunc["DST_COLOR"] = "DST_COLOR"] = "DST_COLOR";
        BlendFunc[BlendFunc["ONE_MINUS_DST_COLOR"] = "ONE_MINUS_DST_COLOR"] = "ONE_MINUS_DST_COLOR";
        BlendFunc[BlendFunc["SRC_ALPHA"] = "SRC_ALPHA"] = "SRC_ALPHA";
        BlendFunc[BlendFunc["SRC_ALPHA_SATURATE"] = "SRC_ALPHA_SATURATE"] = "SRC_ALPHA_SATURATE";
        BlendFunc[BlendFunc["ONE_MINUS_SRC_ALPHA"] = "ONE_MINUS_SRC_ALPHA"] = "ONE_MINUS_SRC_ALPHA";
        BlendFunc[BlendFunc["DST_ALPHA"] = "DST_ALPHA"] = "DST_ALPHA";
        BlendFunc[BlendFunc["ONE_MINUS_DST_ALPH"] = "ONE_MINUS_DST_ALPHA"] = "ONE_MINUS_DST_ALPH";
    })(wd.BlendFunc || (wd.BlendFunc = {}));
    var BlendFunc = wd.BlendFunc;
    (function (BlendEquation) {
        BlendEquation[BlendEquation["ADD"] = "FUNC_ADD"] = "ADD";
        BlendEquation[BlendEquation["SUBTRACT"] = "FUNC_SUBTRACT"] = "SUBTRACT";
        BlendEquation[BlendEquation["REVERSE_SUBTRAC"] = "FUNC_REVERSE_SUBTRACT"] = "REVERSE_SUBTRAC";
    })(wd.BlendEquation || (wd.BlendEquation = {}));
    var BlendEquation = wd.BlendEquation;
    (function (BlendType) {
        BlendType[BlendType["NONE"] = 0] = "NONE";
        BlendType[BlendType["NORMAL"] = 1] = "NORMAL";
        BlendType[BlendType["ADDITIVE"] = 2] = "ADDITIVE";
        BlendType[BlendType["ADDITIVEALPHA"] = 3] = "ADDITIVEALPHA";
        BlendType[BlendType["MULTIPLICATIVE"] = 4] = "MULTIPLICATIVE";
        BlendType[BlendType["PREMULTIPLIED"] = 5] = "PREMULTIPLIED";
    })(wd.BlendType || (wd.BlendType = {}));
    var BlendType = wd.BlendType;
    (function (CanvasType) {
        CanvasType[CanvasType["UI"] = "UI"] = "UI";
    })(wd.CanvasType || (wd.CanvasType = {}));
    var CanvasType = wd.CanvasType;
})(wd || (wd = {}));

var wd;
(function (wd) {
    var GPUDetector = (function () {
        function GPUDetector() {
            this.maxTextureUnit = null;
            this.maxTextureSize = null;
            this.maxCubemapTextureSize = null;
            this.maxAnisotropy = null;
            this.extensionCompressedTextureS3TC = null;
            this.extensionTextureFilterAnisotropic = null;
            this.precision = null;
            this._isDetected = false;
        }
        GPUDetector.getInstance = function () {
            if (this._instance === null) {
                this._instance = new this();
            }
            return this._instance;
        };
        Object.defineProperty(GPUDetector.prototype, "gl", {
            get: function () {
                return wd.DeviceManager.getInstance().gl;
            },
            enumerable: true,
            configurable: true
        });
        GPUDetector.prototype.detect = function () {
            this._isDetected = true;
            this._detectExtension();
            this._detectCapabilty();
        };
        GPUDetector.prototype._detectExtension = function () {
            this.extensionCompressedTextureS3TC = this._getExtension("WEBGL_compressed_texture_s3tc");
            this.extensionTextureFilterAnisotropic = this._getExtension("EXT_texture_filter_anisotropic");
        };
        GPUDetector.prototype._detectCapabilty = function () {
            var gl = this.gl;
            this.maxTextureUnit = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);
            this.maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);
            this.maxCubemapTextureSize = gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE);
            this.maxAnisotropy = this._getMaxAnisotropy();
            this._detectPrecision();
        };
        GPUDetector.prototype._getExtension = function (name) {
            var extension, gl = this.gl;
            switch (name) {
                case "EXT_texture_filter_anisotropic":
                    extension = gl.getExtension("EXT_texture_filter_anisotropic") || gl.getExtension("MOZ_EXT_texture_filter_anisotropic") || gl.getExtension("WEBKIT_EXT_texture_filter_anisotropic");
                    break;
                case "WEBGL_compressed_texture_s3tc":
                    extension = gl.getExtension("WEBGL_compressed_texture_s3tc") || gl.getExtension("MOZ_WEBGL_compressed_texture_s3tc") || gl.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");
                    break;
                case "WEBGL_compressed_texture_pvrtc":
                    extension = gl.getExtension("WEBGL_compressed_texture_pvrtc") || gl.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");
                    break;
                default:
                    extension = gl.getExtension(name);
            }
            return extension;
        };
        GPUDetector.prototype._getMaxAnisotropy = function () {
            var extension = this.extensionTextureFilterAnisotropic, gl = this.gl;
            return extension !== null ? gl.getParameter(extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT) : 0;
        };
        GPUDetector.prototype._detectPrecision = function () {
            var gl = this.gl, vertexShaderPrecisionHighpFloat = gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.HIGH_FLOAT), vertexShaderPrecisionMediumpFloat = gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.MEDIUM_FLOAT), fragmentShaderPrecisionHighpFloat = gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT), fragmentShaderPrecisionMediumpFloat = gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT), highpAvailable = vertexShaderPrecisionHighpFloat.precision > 0 && fragmentShaderPrecisionHighpFloat.precision > 0, mediumpAvailable = vertexShaderPrecisionMediumpFloat.precision > 0 && fragmentShaderPrecisionMediumpFloat.precision > 0;
            if (!highpAvailable) {
                if (mediumpAvailable) {
                    this.precision = GPUPrecision.MEDIUMP;
                    wd.Log.warn(wd.Log.info.FUNC_NOT_SUPPORT("gpu", "highp, using mediump"));
                }
                else {
                    this.precision = GPUPrecision.LOWP;
                    wd.Log.warn(wd.Log.info.FUNC_NOT_SUPPORT("gpu", "highp and mediump, using lowp"));
                }
            }
            else {
                this.precision = GPUPrecision.HIGHP;
            }
        };
        GPUDetector._instance = null;
        return GPUDetector;
    })();
    wd.GPUDetector = GPUDetector;
    (function (GPUPrecision) {
        GPUPrecision[GPUPrecision["HIGHP"] = 0] = "HIGHP";
        GPUPrecision[GPUPrecision["MEDIUMP"] = 1] = "MEDIUMP";
        GPUPrecision[GPUPrecision["LOWP"] = 2] = "LOWP";
    })(wd.GPUPrecision || (wd.GPUPrecision = {}));
    var GPUPrecision = wd.GPUPrecision;
})(wd || (wd = {}));

var wd;
(function (wd) {
    (function (ScreenSize) {
        ScreenSize[ScreenSize["FULL"] = 0] = "FULL";
    })(wd.ScreenSize || (wd.ScreenSize = {}));
    var ScreenSize = wd.ScreenSize;
})(wd || (wd = {}));

var wd;
(function (wd) {
    var Point = (function () {
        function Point(x, y) {
            if (x === void 0) { x = null; }
            if (y === void 0) { y = null; }
            this.x = null;
            this.y = null;
            this.x = x;
            this.y = y;
        }
        Point.create = function (x, y) {
            if (x === void 0) { x = null; }
            if (y === void 0) { y = null; }
            var obj = new this(x, y);
            return obj;
        };
        return Point;
    })();
    wd.Point = Point;
})(wd || (wd = {}));

var wd;
(function (wd) {
    var Face3 = (function () {
        function Face3(aIndex, bIndex, cIndex, faceNormal, vertexNormals) {
            this._faceNormal = null;
            this.aIndex = null;
            this.bIndex = null;
            this.cIndex = null;
            this.vertexNormals = null;
            this.aIndex = aIndex;
            this.bIndex = bIndex;
            this.cIndex = cIndex;
            this._faceNormal = faceNormal;
            this.vertexNormals = vertexNormals;
        }
        Face3.create = function (aIndex, bIndex, cIndex, faceNormal, vertexNormals) {
            if (faceNormal === void 0) { faceNormal = null; }
            if (vertexNormals === void 0) { vertexNormals = wdCb.Collection.create(); }
            var obj = new this(aIndex, bIndex, cIndex, faceNormal, vertexNormals);
            return obj;
        };
        Object.defineProperty(Face3.prototype, "faceNormal", {
            get: function () {
                return this._faceNormal !== null ? this._faceNormal : wd.Vector3.create(0, 0, 0);
            },
            set: function (faceNormal) {
                this._faceNormal = faceNormal;
            },
            enumerable: true,
            configurable: true
        });
        Face3.prototype.hasFaceNormal = function () {
            return this._faceNormal !== null;
        };
        Face3.prototype.hasVertexNormal = function () {
            return this.vertexNormals.getCount() > 0;
        };
        Face3.prototype.copy = function () {
            var copyFaceNormal = this._faceNormal ? this._faceNormal.copy() : null, copyVertexNormals = null;
            if (this.vertexNormals) {
                copyVertexNormals = wdCb.Collection.create();
                this.vertexNormals.forEach(function (vertexNormal) {
                    copyVertexNormals.addChild(vertexNormal.copy());
                });
            }
            return Face3.create(this.aIndex, this.bIndex, this.cIndex, copyFaceNormal, copyVertexNormals);
        };
        return Face3;
    })();
    wd.Face3 = Face3;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var RectRegion = (function (_super) {
        __extends(RectRegion, _super);
        function RectRegion() {
            _super.apply(this, arguments);
        }
        Object.defineProperty(RectRegion.prototype, "width", {
            get: function () {
                return this.z;
            },
            set: function (width) {
                this.z = width;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RectRegion.prototype, "height", {
            get: function () {
                return this.w;
            },
            set: function (height) {
                this.w = height;
            },
            enumerable: true,
            configurable: true
        });
        RectRegion.prototype.copy = function () {
            return this.copyHelper(RectRegion.create());
        };
        RectRegion.prototype.isNotEmpty = function () {
            return this.x !== 0
                || this.y !== 0
                || this.width !== 0
                || this.height !== 0;
        };
        return RectRegion;
    })(wd.Vector4);
    wd.RectRegion = RectRegion;
})(wd || (wd = {}));

var wd;
(function (wd) {
    var ViewWebGL = (function () {
        function ViewWebGL(dom) {
            this._dom = null;
            this._dom = dom;
        }
        ViewWebGL.create = function (view) {
            var obj = new this(view);
            return obj;
        };
        Object.defineProperty(ViewWebGL.prototype, "offset", {
            get: function () {
                var view = this._dom, offset = { x: view.offsetLeft, y: view.offsetTop };
                while (view = view.offsetParent) {
                    offset.x += view.offsetLeft;
                    offset.y += view.offsetTop;
                }
                return offset;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ViewWebGL.prototype, "dom", {
            get: function () {
                return this._dom;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ViewWebGL.prototype, "width", {
            get: function () {
                return this._dom.width;
            },
            set: function (width) {
                this._dom.width = width;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ViewWebGL.prototype, "height", {
            get: function () {
                return this._dom.height;
            },
            set: function (height) {
                this._dom.height = height;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ViewWebGL.prototype, "x", {
            get: function () {
                return Number(this._dom.style.left.slice(0, -2));
            },
            set: function (x) {
                this._dom.style.position = "absolute";
                this._dom.style.left = x + "px";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ViewWebGL.prototype, "y", {
            get: function () {
                return Number(this._dom.style.top.slice(0, -2));
            },
            set: function (y) {
                this._dom.style.position = "absolute";
                this._dom.style.top = y + "px";
            },
            enumerable: true,
            configurable: true
        });
        ViewWebGL.prototype.getContext = function () {
            return this._dom.getContext("webgl") || this._dom.getContext("experimental-webgl");
        };
        return ViewWebGL;
    })();
    wd.ViewWebGL = ViewWebGL;
})(wd || (wd = {}));

var wd;
(function (wd) {
    var Color = (function () {
        function Color() {
            this.r = null;
            this.g = null;
            this.b = null;
            this.a = null;
        }
        Color.create = function (colorVal) {
            var obj = new this();
            obj.initWhenCreate(colorVal);
            return obj;
        };
        Color.prototype.initWhenCreate = function (colorVal) {
            this._setColor(colorVal);
        };
        Color.prototype.toVector3 = function () {
            return wd.Vector3.create(this.r, this.g, this.b);
        };
        Color.prototype.toVector4 = function () {
            return wd.Vector4.create(this.r, this.g, this.b, this.a);
        };
        Color.prototype._setColor = function (colorVal) {
            var REGEX_RGBA = /^rgba\((\d+),\s*(\d+),\s*(\d+),\s*([^\)]+)\)$/i, REGEX_RGB = /^rgb\((\d+),\s*(\d+),\s*(\d+)\)$/i, REGEX_RGB_2 = /^rgb\((\d+\.\d+),\s*(\d+\.\d+),\s*(\d+\.\d+)\)$/i, REGEX_NUM = /^\#([0-9a-f]{6})$/i;
            var color = null;
            if (REGEX_RGBA.test(colorVal)) {
                color = REGEX_RGBA.exec(colorVal);
                this.r = this._getColorValue(color, 1);
                this.g = this._getColorValue(color, 2);
                this.b = this._getColorValue(color, 3);
                this.a = Number(color[4]);
                return this;
            }
            if (REGEX_RGB.test(colorVal)) {
                color = REGEX_RGB.exec(colorVal);
                this.r = this._getColorValue(color, 1);
                this.g = this._getColorValue(color, 2);
                this.b = this._getColorValue(color, 3);
                this.a = 1;
                return this;
            }
            if (REGEX_RGB_2.test(colorVal)) {
                color = REGEX_RGB_2.exec(colorVal);
                this.r = parseFloat(color[1]);
                this.g = parseFloat(color[2]);
                this.b = parseFloat(color[3]);
                this.a = 1;
                return this;
            }
            if (REGEX_NUM.test(colorVal)) {
                color = REGEX_NUM.exec(colorVal);
                this._setHex(parseInt(color[1], 16));
                return this;
            }
        };
        Color.prototype._getColorValue = function (color, index, num) {
            if (num === void 0) { num = 255; }
            return Math.min(num, parseInt(color[index], 10)) / num;
        };
        Color.prototype._setHex = function (hex) {
            hex = Math.floor(hex);
            this.r = (hex >> 16 & 255) / 255;
            this.g = (hex >> 8 & 255) / 255;
            this.b = (hex & 255) / 255;
            this.a = 1;
            return this;
        };
        return Color;
    })();
    wd.Color = Color;
})(wd || (wd = {}));

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var wd;
(function (wd) {
    var Texture = (function () {
        function Texture() {
            this.material = null;
            this.width = null;
            this.height = null;
            this.variableData = null;
            this.wrapS = null;
            this.wrapT = null;
            this.magFilter = null;
            this.minFilter = null;
            this.glTexture = null;
            this.target = wd.TextureTarget.TEXTURE_2D;
        }
        Object.defineProperty(Texture.prototype, "geometry", {
            get: function () {
                return this.material.geometry;
            },
            enumerable: true,
            configurable: true
        });
        Texture.prototype.bindToUnit = function (unit) {
            var gl = wd.DeviceManager.getInstance().gl, maxUnit = wd.GPUDetector.getInstance().maxTextureUnit;
            if (unit >= maxUnit) {
                wd.Log.warn("trying to use " + unit + " texture units, but GPU only supports " + maxUnit + " units");
            }
            gl.activeTexture(gl["TEXTURE" + String(unit)]);
            gl.bindTexture(gl[this.target], this.glTexture);
            return this;
        };
        Texture.prototype.sendData = function (program, pos, unit) {
            program.sendUniformData(pos, this.getSamplerType(), unit);
            this.sendOtherData(program, unit);
        };
        Texture.prototype.dispose = function () {
            var gl = wd.DeviceManager.getInstance().gl;
            gl.deleteTexture(this.glTexture);
            delete this.glTexture;
        };
        Texture.prototype.filterFallback = function (filter) {
            if (filter === wd.TextureFilterMode.NEAREST || filter === wd.TextureFilterMode.NEAREST_MIPMAP_MEAREST || filter === wd.TextureFilterMode.NEAREST_MIPMAP_LINEAR) {
                return wd.TextureFilterMode.NEAREST;
            }
            return wd.TextureFilterMode.LINEAR;
        };
        Texture.prototype.sendOtherData = function (program, unit) {
        };
        Texture.prototype.getSamplerNameByVariableData = function (unit, type) {
            var samplerName = null;
            if (this.variableData) {
                if (this.variableData.samplerVariableName) {
                    samplerName = this.variableData.samplerVariableName;
                }
            }
            else {
                samplerName = type === wd.VariableType.SAMPLER_2D ? "u_sampler2D" + unit : "u_samplerCube" + unit;
            }
            return samplerName;
        };
        Texture.prototype.getSamplerType = function () {
            var type = null;
            switch (this.target) {
                case wd.TextureTarget.TEXTURE_2D:
                    type = wd.VariableType.SAMPLER_2D;
                    break;
                case wd.TextureTarget.TEXTURE_CUBE_MAP:
                    type = wd.VariableType.SAMPLER_CUBE;
                    break;
                default:
                    break;
            }
            return type;
        };
        Texture.prototype.isSourcePowerOfTwo = function () {
            return wd.TextureUtils.isPowerOfTwo(this.width, this.height);
        };
        Texture.prototype.setTextureParameters = function (textureType, isSourcePowerOfTwo) {
            var gl = wd.DeviceManager.getInstance().gl;
            if (isSourcePowerOfTwo) {
                gl.texParameteri(textureType, gl.TEXTURE_WRAP_S, gl[this.wrapS]);
                gl.texParameteri(textureType, gl.TEXTURE_WRAP_T, gl[this.wrapT]);
                gl.texParameteri(textureType, gl.TEXTURE_MAG_FILTER, gl[this.magFilter]);
                gl.texParameteri(textureType, gl.TEXTURE_MIN_FILTER, gl[this.minFilter]);
            }
            else {
                gl.texParameteri(textureType, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
                gl.texParameteri(textureType, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
                gl.texParameteri(textureType, gl.TEXTURE_MAG_FILTER, gl[this.filterFallback(this.magFilter)]);
                gl.texParameteri(textureType, gl.TEXTURE_MIN_FILTER, gl[this.filterFallback(this.minFilter)]);
            }
        };
        __decorate([
            wd.virtual
        ], Texture.prototype, "sendOtherData", null);
        __decorate([
            wd.virtual
        ], Texture.prototype, "isSourcePowerOfTwo", null);
        return Texture;
    })();
    wd.Texture = Texture;
})(wd || (wd = {}));

var wd;
(function (wd) {
    var TextureUtils = (function () {
        function TextureUtils() {
        }
        TextureUtils.isPowerOfTwo = function (width, height) {
            return wd.JudgeUtils.isPowerOfTwo(width) && wd.JudgeUtils.isPowerOfTwo(height);
        };
        return TextureUtils;
    })();
    wd.TextureUtils = TextureUtils;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd_1) {
    var BasicTextureUtils = (function (_super) {
        __extends(BasicTextureUtils, _super);
        function BasicTextureUtils() {
            _super.apply(this, arguments);
        }
        BasicTextureUtils.isDrawPartOfTexture = function (sourceRegion, sourceRegionMethod) {
            return sourceRegion && sourceRegion.isNotEmpty() && sourceRegionMethod === wd_1.TextureSourceRegionMethod.DRAW_IN_CANVAS;
        };
        BasicTextureUtils.drawPartOfTextureByCanvas = function (source, canvasWidth, canvasHeight, sx, sy, sWidth, sHeight, dx, wd, dWidth, dHeight) {
            var canvas = wdCb.DomQuery.create("<canvas></canvas>").get(0), ctx = null;
            canvas.width = canvasWidth;
            canvas.height = canvasHeight;
            ctx = canvas.getContext("2d");
            ctx.drawImage(source, sx, sy, sWidth, sHeight, dx, wd, dWidth, dHeight);
            return canvas;
        };
        BasicTextureUtils.isSourcePowerOfTwo = function (sourceRegion, sourceRegionMethod, width, height) {
            if (this.isDrawPartOfTexture(sourceRegion, sourceRegionMethod)) {
                return this.isPowerOfTwo(sourceRegion.width, sourceRegion.height);
            }
            return this.isPowerOfTwo(width, height);
        };
        BasicTextureUtils.needClampMaxSize = function (maxSize, width, height) {
            return width > maxSize || height > maxSize;
        };
        BasicTextureUtils.clampToMaxSize = function (source, maxSize) {
            var maxDimension = null, newWidth = null, newHeight = null, canvas = null;
            maxDimension = Math.max(source.width, source.height);
            newWidth = Math.floor(source.width * maxSize / maxDimension);
            newHeight = Math.floor(source.height * maxSize / maxDimension);
            canvas = this.drawPartOfTextureByCanvas(source, newWidth, newHeight, 0, 0, source.width, source.height, 0, 0, newWidth, newHeight);
            wd_1.Log.log("source is too big (width:" + source.width + ", height:" + source.height + "), resize it to be width:" + canvas.width + ", height:" + canvas.height + ".");
            return canvas;
        };
        return BasicTextureUtils;
    })(wd_1.TextureUtils);
    wd_1.BasicTextureUtils = BasicTextureUtils;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var RenderTargetTexture = (function (_super) {
        __extends(RenderTargetTexture, _super);
        function RenderTargetTexture() {
            _super.apply(this, arguments);
        }
        RenderTargetTexture.prototype.init = function () {
            this.minFilter = wd.TextureFilterMode.LINEAR;
            this.magFilter = wd.TextureFilterMode.LINEAR;
            this.wrapS = wd.TextureWrapMode.CLAMP_TO_EDGE;
            this.wrapT = wd.TextureWrapMode.CLAMP_TO_EDGE;
            return this;
        };
        RenderTargetTexture.prototype.getPosition = function () {
            return this.geometry.gameObject.transform.position;
        };
        RenderTargetTexture.prototype.setEmptyTexture = function (texture) {
            var gl = wd.DeviceManager.getInstance().gl;
            wd.Log.error(!texture, "Failed to create texture object");
            gl.bindTexture(gl[this.target], texture);
            this.setTextureParameters(gl[this.target], this.isSourcePowerOfTwo());
        };
        return RenderTargetTexture;
    })(wd.Texture);
    wd.RenderTargetTexture = RenderTargetTexture;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var TwoDRenderTargetTexture = (function (_super) {
        __extends(TwoDRenderTargetTexture, _super);
        function TwoDRenderTargetTexture() {
            _super.apply(this, arguments);
            this._renderList = null;
            this.width = 256;
            this.height = 256;
        }
        Object.defineProperty(TwoDRenderTargetTexture.prototype, "renderList", {
            get: function () {
                return this._renderList;
            },
            set: function (renderList) {
                if (wd.JudgeUtils.isArray(renderList)) {
                    this._renderList = wdCb.Collection.create(renderList);
                }
                else if (renderList instanceof wdCb.Collection) {
                    this._renderList = renderList;
                }
                else {
                    wd.Log.error(true, wd.Log.info.FUNC_MUST_BE("renderList", "array or wdCb.Collection"));
                }
            },
            enumerable: true,
            configurable: true
        });
        TwoDRenderTargetTexture.prototype.createEmptyTexture = function () {
            var gl = wd.DeviceManager.getInstance().gl, texture = gl.createTexture();
            this.setEmptyTexture(texture);
            gl.texImage2D(gl[this.target], 0, gl.RGBA, this.width, this.height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
            this.glTexture = texture;
        };
        return TwoDRenderTargetTexture;
    })(wd.RenderTargetTexture);
    wd.TwoDRenderTargetTexture = TwoDRenderTargetTexture;
})(wd || (wd = {}));

var wd;
(function (wd) {
    var ShadowMapTextureUtils = (function () {
        function ShadowMapTextureUtils() {
        }
        ShadowMapTextureUtils.setTextureParameters = function (textureType) {
            var gl = wd.DeviceManager.getInstance().gl, scene = wd.Director.getInstance().scene;
            if (scene.shadowMap.softType === wd.ShadowMapSoftType.PCF) {
                gl.texParameteri(textureType, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
                gl.texParameteri(textureType, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
            }
        };
        return ShadowMapTextureUtils;
    })();
    wd.ShadowMapTextureUtils = ShadowMapTextureUtils;
})(wd || (wd = {}));



var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var MirrorTexture = (function (_super) {
        __extends(MirrorTexture, _super);
        function MirrorTexture() {
            _super.apply(this, arguments);
            this._plane = null;
        }
        MirrorTexture.create = function () {
            var obj = new this();
            return obj;
        };
        MirrorTexture.prototype.init = function () {
            _super.prototype.init.call(this);
            wd.Director.getInstance().scene.addRenderTargetRenderer(wd.MirrorRenderTargetRenderer.create(this));
            return this;
        };
        MirrorTexture.prototype.getSamplerName = function (unit) {
            return this.getSamplerNameByVariableData(unit, wd.VariableType.SAMPLER_2D);
        };
        MirrorTexture.prototype.getPlane = function () {
            var normalData = null, normal = null, p = null;
            if (this._plane && !this.geometry.gameObject.transform.dirtyLocal) {
                return this._plane;
            }
            wd.Log.error(!(this.geometry instanceof wd.PlaneGeometry), wd.Log.info.FUNC_MUST_BE("geometry", "PlaneGeometry"));
            normalData = this.geometry.geometryData.normals;
            normal = this.geometry.gameObject.transform.localRotation.multiplyVector3(wd.Vector3.create(normalData[0], normalData[1], normalData[2])).normalize();
            p = this.getPosition();
            this._plane = wd.Plane.create(normal.x, normal.y, normal.z, -p.dot(normal));
            return this._plane;
        };
        return MirrorTexture;
    })(wd.TwoDRenderTargetTexture);
    wd.MirrorTexture = MirrorTexture;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var TwoDShadowMapTexture = (function (_super) {
        __extends(TwoDShadowMapTexture, _super);
        function TwoDShadowMapTexture() {
            _super.apply(this, arguments);
        }
        TwoDShadowMapTexture.create = function () {
            var obj = new this();
            return obj;
        };
        TwoDShadowMapTexture.prototype.getSamplerName = function (unit) {
            wd.Log.error(!wd.JudgeUtils.isNumber(this.variableData.samplerData), wd.Log.info.FUNC_MUST_BE("shadowMapTexture->variableData.samplerData", "samplerIndex"));
            return "u_twoDShadowMapSampler[" + this.variableData.samplerData + "]";
        };
        TwoDShadowMapTexture.prototype.setTextureParameters = function (textureType, isSourcePowerOfTwo) {
            _super.prototype.setTextureParameters.call(this, textureType, isSourcePowerOfTwo);
            wd.ShadowMapTextureUtils.setTextureParameters(textureType);
        };
        return TwoDShadowMapTexture;
    })(wd.TwoDRenderTargetTexture);
    wd.TwoDShadowMapTexture = TwoDShadowMapTexture;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var CubemapRenderTargetTexture = (function (_super) {
        __extends(CubemapRenderTargetTexture, _super);
        function CubemapRenderTargetTexture() {
            _super.apply(this, arguments);
            this.target = wd.TextureTarget.TEXTURE_CUBE_MAP;
        }
        CubemapRenderTargetTexture.prototype.createEmptyTexture = function () {
            var gl = wd.DeviceManager.getInstance().gl, texture = gl.createTexture(), i = null;
            this.setEmptyTexture(texture);
            for (i = 0; i < 6; i++) {
                gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, gl.RGBA, this.width, this.height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
            }
            this.glTexture = texture;
        };
        return CubemapRenderTargetTexture;
    })(wd.RenderTargetTexture);
    wd.CubemapRenderTargetTexture = CubemapRenderTargetTexture;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var CubemapShadowMapTexture = (function (_super) {
        __extends(CubemapShadowMapTexture, _super);
        function CubemapShadowMapTexture() {
            _super.apply(this, arguments);
        }
        CubemapShadowMapTexture.create = function () {
            var obj = new this();
            return obj;
        };
        CubemapShadowMapTexture.prototype.getSamplerName = function (unit) {
            wd.Log.error(!wd.JudgeUtils.isNumber(this.variableData.samplerData), wd.Log.info.FUNC_MUST_BE("shadowMapTexture->variableData.samplerData", "samplerIndex"));
            return "u_cubemapShadowMapSampler[" + this.variableData.samplerData + "]";
        };
        return CubemapShadowMapTexture;
    })(wd.CubemapRenderTargetTexture);
    wd.CubemapShadowMapTexture = CubemapShadowMapTexture;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var DynamicCubemapTexture = (function (_super) {
        __extends(DynamicCubemapTexture, _super);
        function DynamicCubemapTexture() {
            _super.apply(this, arguments);
            this._renderList = null;
            this.size = 256;
            this.near = 0.1;
            this.far = 100;
            this.mode = null;
        }
        DynamicCubemapTexture.create = function () {
            var obj = new this();
            return obj;
        };
        Object.defineProperty(DynamicCubemapTexture.prototype, "renderList", {
            get: function () {
                return this._renderList;
            },
            set: function (renderList) {
                if (wd.JudgeUtils.isDirectObject(renderList)) {
                    this._renderList = wdCb.Hash.create(renderList);
                }
                else if (renderList instanceof wdCb.Hash) {
                    this._renderList = renderList;
                }
                else {
                    wd.Log.error(true, wd.Log.info.FUNC_MUST_BE("renderList", "array or wdCb.Collection"));
                }
            },
            enumerable: true,
            configurable: true
        });
        DynamicCubemapTexture.prototype.init = function () {
            _super.prototype.init.call(this);
            this.width = this.size;
            this.height = this.size;
            wd.Director.getInstance().scene.addRenderTargetRenderer(wd.DynamicCubemapRenderTargetRenderer.create(this));
            return this;
        };
        DynamicCubemapTexture.prototype.getSamplerName = function (unit) {
            return this.getSamplerNameByVariableData(unit, wd.VariableType.SAMPLER_CUBE);
        };
        return DynamicCubemapTexture;
    })(wd.CubemapRenderTargetTexture);
    wd.DynamicCubemapTexture = DynamicCubemapTexture;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var wd;
(function (wd) {
    var BasicTexture = (function (_super) {
        __extends(BasicTexture, _super);
        function BasicTexture() {
            _super.apply(this, arguments);
            this.p_sourceRegionMethod = null;
            this.generateMipmaps = null;
            this.format = null;
            this.source = null;
            this.repeatRegion = null;
            this.sourceRegion = null;
            this.sourceRegionMapping = null;
            this.flipY = null;
            this.premultiplyAlpha = null;
            this.unpackAlignment = null;
            this.type = null;
            this.mipmaps = null;
            this.anisotropy = null;
            this.needUpdate = null;
        }
        Object.defineProperty(BasicTexture.prototype, "sourceRegionMethod", {
            get: function () {
                return this.p_sourceRegionMethod;
            },
            set: function (sourceRegionMethod) {
                this.p_sourceRegionMethod = sourceRegionMethod;
            },
            enumerable: true,
            configurable: true
        });
        BasicTexture.prototype.initWhenCreate = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var gl = wd.DeviceManager.getInstance().gl;
            this.glTexture = gl.createTexture();
        };
        BasicTexture.prototype.init = function () {
        };
        BasicTexture.prototype.update = function (index) {
            var gl = wd.DeviceManager.getInstance().gl, isSourcePowerOfTwo = this.isSourcePowerOfTwo();
            this.bindToUnit(index);
            gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, this.flipY);
            gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, this.premultiplyAlpha);
            gl.pixelStorei(gl.UNPACK_ALIGNMENT, this.unpackAlignment);
            if (this.needClampMaxSize()) {
                this.clampToMaxSize();
                isSourcePowerOfTwo = this.isSourcePowerOfTwo();
                if (!isSourcePowerOfTwo) {
                    wd.Log.warn("texture size is not power of two after clampToMaxSize()");
                }
            }
            this.setTextureParameters(gl[this.target], isSourcePowerOfTwo);
            this.allocateSourceToTexture(isSourcePowerOfTwo);
            if (this.generateMipmaps && isSourcePowerOfTwo) {
                gl.generateMipmap(gl[this.target]);
            }
            this.needUpdate = false;
            return this;
        };
        BasicTexture.prototype.getSamplerName = function (unit) {
            return this.getSamplerNameByVariableData(unit, wd.VariableType.SAMPLER_2D);
        };
        BasicTexture.prototype.sendOtherData = function (program, unit) {
            var sourceRegion = null;
            if (this.sourceRegion && this.sourceRegionMethod === wd.TextureSourceRegionMethod.CHANGE_TEXCOORDS_IN_GLSL) {
                sourceRegion = this._convertSourceRegionToUV();
            }
            else {
                sourceRegion = wd.RectRegion.create(0, 0, 1, 1);
            }
            program.sendUniformData("u_sourceRegion", wd.VariableType.FLOAT_4, sourceRegion);
            program.sendUniformData("u_repeatRegion", wd.VariableType.FLOAT_4, this.repeatRegion);
            return this;
        };
        BasicTexture.prototype.needClampMaxSize = function () {
            if (!this.source) {
                return false;
            }
            return wd.BasicTextureUtils.needClampMaxSize(wd.GPUDetector.getInstance().maxTextureSize, this.source.width, this.source.height);
        };
        BasicTexture.prototype.clampToMaxSize = function () {
            this.source = wd.BasicTextureUtils.clampToMaxSize(this.source, wd.GPUDetector.getInstance().maxTextureSize);
        };
        BasicTexture.prototype.setTextureParameters = function (textureType, isSourcePowerOfTwo) {
            _super.prototype.setTextureParameters.call(this, textureType, isSourcePowerOfTwo);
            this._setAnisotropy(textureType);
        };
        BasicTexture.prototype.isSourcePowerOfTwo = function () {
            return wd.BasicTextureUtils.isSourcePowerOfTwo(this.sourceRegion, this.sourceRegionMethod, this.width, this.height);
        };
        BasicTexture.prototype._setAnisotropy = function (textureType) {
            var gpu = wd.GPUDetector.getInstance(), gl = wd.DeviceManager.getInstance().gl;
            if (!gpu.extensionTextureFilterAnisotropic) {
                return;
            }
            if (this.anisotropy > 1) {
                gl.texParameterf(textureType, gpu.extensionTextureFilterAnisotropic.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(this.anisotropy, gpu.maxAnisotropy));
            }
        };
        BasicTexture.prototype._convertSourceRegionCanvasMapToUV = function (sourceRegion) {
            var width = this.width, height = this.height, region = null;
            region = wd.RectRegion.create(sourceRegion.x / width, sourceRegion.y / height, sourceRegion.width / width, sourceRegion.height / height);
            region.y = 1 - region.y - region.height;
            return region;
        };
        BasicTexture.prototype._convertSourceRegionToUV = function () {
            if (this.sourceRegionMapping === wd.TextureSourceRegionMapping.CANVAS) {
                return this._convertSourceRegionCanvasMapToUV(this.sourceRegion);
            }
            else if (this.sourceRegionMapping === wd.TextureSourceRegionMapping.UV) {
                return this.sourceRegion;
            }
        };
        __decorate([
            wd.virtual
        ], BasicTexture.prototype, "needClampMaxSize", null);
        return BasicTexture;
    })(wd.Texture);
    wd.BasicTexture = BasicTexture;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var TwoDTexture = (function (_super) {
        __extends(TwoDTexture, _super);
        function TwoDTexture() {
            _super.apply(this, arguments);
        }
        TwoDTexture.prototype.initWhenCreate = function (asset) {
            _super.prototype.initWhenCreate.call(this);
            asset.copyTo(this);
        };
        return TwoDTexture;
    })(wd.BasicTexture);
    wd.TwoDTexture = TwoDTexture;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var CommonTexture = (function (_super) {
        __extends(CommonTexture, _super);
        function CommonTexture() {
            _super.apply(this, arguments);
        }
        CommonTexture.prototype.allocateSourceToTexture = function (isSourcePowerOfTwo) {
            var mipmapCmd = null, noMipmapCmd = null, gl = wd.DeviceManager.getInstance().gl;
            if (isSourcePowerOfTwo && this.mipmaps.getCount() > 0) {
                mipmapCmd = wd.DrawMipmapTwoDTextureCommand.create();
                mipmapCmd.mipmaps = this.mipmaps;
                mipmapCmd.format = this.format;
                mipmapCmd.type = this.type;
                mipmapCmd.sourceRegion = this.sourceRegion;
                mipmapCmd.sourceRegionMethod = this.sourceRegionMethod;
                mipmapCmd.glTarget = gl.TEXTURE_2D;
                mipmapCmd.execute();
                this.generateMipmaps = false;
            }
            else {
                noMipmapCmd = wd.DrawNoMipmapTwoDTextureCommand.create();
                noMipmapCmd.source = this.source;
                noMipmapCmd.format = this.format;
                noMipmapCmd.type = this.type;
                noMipmapCmd.sourceRegion = this.sourceRegion;
                noMipmapCmd.sourceRegionMethod = this.sourceRegionMethod;
                noMipmapCmd.glTarget = gl.TEXTURE_2D;
                noMipmapCmd.execute();
            }
        };
        return CommonTexture;
    })(wd.TwoDTexture);
    wd.CommonTexture = CommonTexture;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var ImageTexture = (function (_super) {
        __extends(ImageTexture, _super);
        function ImageTexture() {
            _super.apply(this, arguments);
        }
        ImageTexture.create = function (arg) {
            var obj = new this();
            obj.initWhenCreate(arg);
            return obj;
        };
        ImageTexture.prototype.initWhenCreate = function (arg) {
            if (arguments[0] instanceof wd.ImageTextureAsset) {
                var asset = arguments[0];
                _super.prototype.initWhenCreate.call(this, asset);
            }
            else {
                var canvas = arguments[0];
                _super.prototype.initWhenCreate.call(this, wd.ImageTextureAsset.create(canvas));
            }
        };
        return ImageTexture;
    })(wd.CommonTexture);
    wd.ImageTexture = ImageTexture;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var VideoTexture = (function (_super) {
        __extends(VideoTexture, _super);
        function VideoTexture() {
            _super.apply(this, arguments);
            this._video = null;
            this._startLoopHandler = null;
        }
        VideoTexture.create = function (asset) {
            var obj = new this();
            obj.initWhenCreate(asset);
            return obj;
        };
        VideoTexture.prototype.initWhenCreate = function (asset) {
            _super.prototype.initWhenCreate.call(this, asset);
            this._video = asset.video;
        };
        VideoTexture.prototype.init = function () {
            var self = this;
            _super.prototype.init.call(this);
            this._startLoopHandler = wdCb.FunctionUtils.bind(this, function () {
                if (self._video.isStop) {
                    self.needUpdate = false;
                }
                else {
                    self.needUpdate = true;
                }
            });
            wd.EventManager.on(wd.EngineEvent.STARTLOOP, this._startLoopHandler);
            return this;
        };
        VideoTexture.prototype.dispose = function () {
            wd.EventManager.off(wd.EngineEvent.STARTLOOP, this._startLoopHandler);
        };
        VideoTexture.prototype.needClampMaxSize = function () {
            return false;
        };
        return VideoTexture;
    })(wd.CommonTexture);
    wd.VideoTexture = VideoTexture;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var wd;
(function (wd) {
    var CubemapTexture = (function (_super) {
        __extends(CubemapTexture, _super);
        function CubemapTexture(assets) {
            _super.call(this);
            this.assets = null;
            this.textures = wdCb.Collection.create();
            this.mode = null;
            this.target = wd.TextureTarget.TEXTURE_CUBE_MAP;
            this._areAllCompressedAsset = false;
            this.assets = assets;
        }
        CubemapTexture.create = function (assets) {
            var obj = new this(assets);
            obj.initWhenCreate(assets);
            return obj;
        };
        CubemapTexture.prototype.initWhenCreate = function (assets) {
            _super.prototype.initWhenCreate.call(this);
            if (this._areAssetsAllCompressedAsset(assets)) {
                this._areAllCompressedAsset = true;
            }
            else {
                this._areAllCompressedAsset = false;
            }
            this._createTextures(assets);
            this._getRepresentAsset(assets).copyToCubemapTexture(this);
            if (this._areAllCompressedAsset) {
                this.generateMipmaps = false;
                if (this._hasNoMipmapCompressedAsset()) {
                    this.minFilter = this.filterFallback(this.minFilter);
                }
            }
            else {
                this.generateMipmaps = true;
            }
            this.flipY = false;
        };
        CubemapTexture.prototype.getSamplerName = function (unit) {
            return this.getSamplerNameByVariableData(unit, wd.VariableType.SAMPLER_CUBE);
        };
        CubemapTexture.prototype.sendOtherData = function (program, unit) {
            program.sendUniformData("u_repeatRegion", wd.VariableType.FLOAT_4, this.repeatRegion);
            return this;
        };
        CubemapTexture.prototype.allocateSourceToTexture = function (isSourcePowerOfTwo) {
            if (this._areAllCompressedAsset) {
                this.textures.forEach(function (texture, i) {
                    texture.draw(i);
                });
            }
            else {
                this.textures.forEach(function (texture, i) {
                    texture.draw(i);
                });
            }
        };
        CubemapTexture.prototype.needClampMaxSize = function () {
            var needAllClampMaxSize = false;
            this.textures.forEach(function (texture) {
                if (texture.needClampMaxSize()) {
                    needAllClampMaxSize = true;
                    return wdCb.$BREAK;
                }
            });
            return needAllClampMaxSize;
        };
        CubemapTexture.prototype.isSourcePowerOfTwo = function () {
            var areAllSourcePowerOfTwo = true;
            this.textures.forEach(function (texture) {
                if (!texture.isSourcePowerOfTwo()) {
                    areAllSourcePowerOfTwo = false;
                    return wdCb.$BREAK;
                }
            });
            return areAllSourcePowerOfTwo;
        };
        CubemapTexture.prototype.clampToMaxSize = function () {
            this.textures.forEach(function (texture) {
                texture.clampToMaxSize();
            });
        };
        CubemapTexture.prototype._hasNoMipmapCompressedAsset = function () {
            var self = this;
            if (!this._areAllCompressedAsset) {
                return false;
            }
            return this.textures.filter(function (texture) {
                return !self._isMipmapFilter(texture.minFilter);
            }).getCount() > 0;
        };
        CubemapTexture.prototype._isMipmapFilter = function (filter) {
            return filter === wd.TextureFilterMode.LINEAR_MIPMAP_LINEAR || filter === wd.TextureFilterMode.LINEAR_MIPMAP_NEAREST || filter === wd.TextureFilterMode.NEAREST_MIPMAP_LINEAR || filter === wd.TextureFilterMode.NEAREST_MIPMAP_MEAREST;
        };
        CubemapTexture.prototype._getRepresentAsset = function (assets) {
            return assets[0].asset;
        };
        CubemapTexture.prototype._areAssetsAllImageAssets = function (assets) {
            var areImageAssets = [];
            for (var _i = 0; _i < assets.length; _i++) {
                var data = assets[_i];
                if (data.asset instanceof wd.ImageTextureAsset) {
                    areImageAssets.push(data);
                }
            }
            return areImageAssets.length === 6;
        };
        CubemapTexture.prototype._areAssetsAllCompressedAsset = function (assets) {
            var areCompressedAssets = [];
            for (var _i = 0; _i < assets.length; _i++) {
                var data = assets[_i];
                if (data.asset instanceof wd.CompressedTextureAsset) {
                    areCompressedAssets.push(data);
                }
            }
            return areCompressedAssets.length === 6;
        };
        CubemapTexture.prototype._createTextures = function (assets) {
            var self = this;
            for (var _i = 0; _i < assets.length; _i++) {
                var data = assets[_i];
                var face = data.asset.toCubemapFaceTexture();
                if (data.sourceRegion && face instanceof wd.CubemapFaceImageTexture) {
                    var twoDFace = face;
                    twoDFace.sourceRegion = data.sourceRegion;
                }
                if (data.type) {
                    face.type = data.type;
                }
                self.textures.addChild(face);
            }
        };
        CubemapTexture.prototype._areTextureSizOfAllFaceseEqual = function (assets) {
            var textureWidthSizeArr = [], textureHeightSizeArr = [];
            for (var _i = 0; _i < assets.length; _i++) {
                var data = assets[_i];
                if (data.sourceRegion) {
                    textureWidthSizeArr.push(data.sourceRegion.width);
                    textureHeightSizeArr.push(data.sourceRegion.height);
                }
                else {
                    textureWidthSizeArr.push(data.asset.width);
                    textureHeightSizeArr.push(data.asset.height);
                }
            }
            return this._areAllElementsEqual(textureWidthSizeArr) && this._areAllElementsEqual(textureHeightSizeArr);
        };
        CubemapTexture.prototype._hasSourceRegion = function (assets) {
            for (var _i = 0; _i < assets.length; _i++) {
                var data = assets[_i];
                if (data.sourceRegion) {
                    return true;
                }
            }
            return false;
        };
        CubemapTexture.prototype._areAllElementsEqual = function (arr) {
            var lastEle = arr[0];
            for (var _i = 0; _i < arr.length; _i++) {
                var ele = arr[_i];
                if (ele !== lastEle) {
                    return false;
                }
            }
            return true;
        };
        __decorate([
            wd.require(function (assets) {
                wd.assert(assets.length === 6, wd.Log.info.FUNC_MUST("cubemap", "has 6 assets"));
                wd.assert(this._areAssetsAllImageAssets(assets) || this._areAssetsAllCompressedAsset(assets), wd.Log.info.FUNC_MUST_BE("cubemap six face's assets", "all ImageTextureAsset or all CompressedTextureAsset"));
                if (this._areAssetsAllCompressedAsset(assets)) {
                    wd.assert(!this._hasSourceRegion(assets), wd.Log.info.FUNC_SHOULD_NOT("compressed face", "contain sourceRegion data"));
                }
                wd.assert(this._areTextureSizOfAllFaceseEqual(assets), wd.Log.info.FUNC_MUST_BE("all cubemap faces' texture size", "equal"));
            })
        ], CubemapTexture.prototype, "initWhenCreate", null);
        return CubemapTexture;
    })(wd.BasicTexture);
    wd.CubemapTexture = CubemapTexture;
})(wd || (wd = {}));

var wd;
(function (wd) {
    var CubemapFaceTexture = (function () {
        function CubemapFaceTexture() {
            this.type = wd.TextureType.UNSIGNED_BYTE;
            this.format = null;
            this.width = null;
            this.height = null;
        }
        return CubemapFaceTexture;
    })();
    wd.CubemapFaceTexture = CubemapFaceTexture;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var wd;
(function (wd) {
    var CubemapFaceImageTexture = (function (_super) {
        __extends(CubemapFaceImageTexture, _super);
        function CubemapFaceImageTexture() {
            _super.apply(this, arguments);
            this.sourceRegion = null;
            this.source = null;
        }
        CubemapFaceImageTexture.create = function (asset) {
            var obj = new this();
            obj.initWhenCreate(asset);
            return obj;
        };
        Object.defineProperty(CubemapFaceImageTexture.prototype, "sourceRegionMethod", {
            get: function () {
                return wd.TextureSourceRegionMethod.DRAW_IN_CANVAS;
            },
            set: function (sourceRegionMethod) {
                var a = sourceRegionMethod;
            },
            enumerable: true,
            configurable: true
        });
        CubemapFaceImageTexture.prototype.initWhenCreate = function (asset) {
            asset.copyToCubemapFaceTexture(this);
        };
        CubemapFaceImageTexture.prototype.isSourcePowerOfTwo = function () {
            return wd.BasicTextureUtils.isSourcePowerOfTwo(this.sourceRegion, this.sourceRegionMethod, this.width, this.height);
        };
        CubemapFaceImageTexture.prototype.needClampMaxSize = function () {
            if (!this.source) {
                return false;
            }
            return wd.BasicTextureUtils.needClampMaxSize(wd.GPUDetector.getInstance().maxCubemapTextureSize, this.source.width, this.source.height);
        };
        CubemapFaceImageTexture.prototype.clampToMaxSize = function () {
            var maxSize = wd.GPUDetector.getInstance().maxCubemapTextureSize;
            this.source = wd.BasicTextureUtils.clampToMaxSize(this.source, maxSize);
        };
        CubemapFaceImageTexture.prototype.draw = function (index) {
            var noMipmapCmd = wd.DrawNoMipmapTwoDTextureCommand.create(), gl = wd.DeviceManager.getInstance().gl;
            noMipmapCmd.source = this.source;
            noMipmapCmd.sourceRegion = this.sourceRegion;
            noMipmapCmd.sourceRegionMethod = this.sourceRegionMethod;
            noMipmapCmd.glTarget = gl.TEXTURE_CUBE_MAP_POSITIVE_X + index;
            noMipmapCmd.format = this.format;
            noMipmapCmd.type = this.type;
            noMipmapCmd.execute();
        };
        __decorate([
            wd.requireSetter(function (sourceRegionMethod) {
                wd.assert(sourceRegionMethod === wd.TextureSourceRegionMethod.DRAW_IN_CANVAS, wd.Log.info.FUNC_SUPPORT("cubemap twoD face texture->sourceRegionMethod only", "DRAW_IN_CANVAS"));
            })
        ], CubemapFaceImageTexture.prototype, "sourceRegionMethod", null);
        return CubemapFaceImageTexture;
    })(wd.CubemapFaceTexture);
    wd.CubemapFaceImageTexture = CubemapFaceImageTexture;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var CubemapFaceCompressedTexture = (function (_super) {
        __extends(CubemapFaceCompressedTexture, _super);
        function CubemapFaceCompressedTexture() {
            _super.apply(this, arguments);
            this.mipmaps = null;
            this.minFilter = null;
        }
        CubemapFaceCompressedTexture.create = function (asset) {
            var obj = new this();
            obj.initWhenCreate(asset);
            return obj;
        };
        CubemapFaceCompressedTexture.prototype.initWhenCreate = function (asset) {
            asset.copyToCubemapFaceTexture(this);
        };
        CubemapFaceCompressedTexture.prototype.isSourcePowerOfTwo = function () {
            return wd.BasicTextureUtils.isSourcePowerOfTwo(null, null, this.width, this.height);
        };
        CubemapFaceCompressedTexture.prototype.needClampMaxSize = function () {
            return wd.BasicTextureUtils.needClampMaxSize(wd.GPUDetector.getInstance().maxCubemapTextureSize, this.width, this.height);
        };
        CubemapFaceCompressedTexture.prototype.clampToMaxSize = function () {
            wd.Log.warn("CubemapFaceCompressedTexture's texture size is over maxCubemapTextureSize");
        };
        CubemapFaceCompressedTexture.prototype.draw = function (index) {
            var compressedCmd = wd.DrawCompressedTextureCommand.create(), gl = wd.DeviceManager.getInstance().gl;
            compressedCmd.glTarget = gl.TEXTURE_CUBE_MAP_POSITIVE_X + index;
            compressedCmd.type = this.type;
            compressedCmd.format = this.format;
            compressedCmd.mipmaps = this.mipmaps;
            compressedCmd.execute();
        };
        return CubemapFaceCompressedTexture;
    })(wd.CubemapFaceTexture);
    wd.CubemapFaceCompressedTexture = CubemapFaceCompressedTexture;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var CompressedTexture = (function (_super) {
        __extends(CompressedTexture, _super);
        function CompressedTexture() {
            _super.apply(this, arguments);
        }
        CompressedTexture.create = function (asset) {
            var obj = new this();
            obj.initWhenCreate(asset);
            return obj;
        };
        Object.defineProperty(CompressedTexture.prototype, "sourceRegionMethod", {
            get: function () {
                wd.Log.assert(this.p_sourceRegionMethod === wd.TextureSourceRegionMethod.DRAW_IN_CANVAS, "compressed texture not support TextureSourceRegionMethod.DRAW_IN_CANVAS, will use TextureSourceRegionMethod.CHANGE_TEXCOORDS_IN_GLSL instead");
                return wd.TextureSourceRegionMethod.CHANGE_TEXCOORDS_IN_GLSL;
            },
            enumerable: true,
            configurable: true
        });
        CompressedTexture.prototype.allocateSourceToTexture = function (isSourcePowerOfTwo) {
            var gl = wd.DeviceManager.getInstance().gl, compressedCmd = wd.DrawCompressedTextureCommand.create();
            compressedCmd.glTarget = gl.TEXTURE_2D;
            compressedCmd.type = this.type;
            compressedCmd.format = this.format;
            compressedCmd.mipmaps = this.mipmaps;
            compressedCmd.sourceRegion = this.sourceRegion;
            compressedCmd.sourceRegionMethod = this.sourceRegionMethod;
            compressedCmd.execute();
            if (this.mipmaps.getCount() > 1) {
                this.generateMipmaps = false;
            }
        };
        CompressedTexture.prototype.needClampMaxSize = function () {
            return false;
        };
        return CompressedTexture;
    })(wd.TwoDTexture);
    wd.CompressedTexture = CompressedTexture;
})(wd || (wd = {}));

var wd;
(function (wd) {
    var DrawTextureCommand = (function () {
        function DrawTextureCommand() {
            this.format = null;
            this.type = null;
            this.sourceRegion = null;
            this.sourceRegionMethod = wd.TextureSourceRegionMethod.CHANGE_TEXCOORDS_IN_GLSL;
            this.glTarget = null;
        }
        DrawTextureCommand.prototype.getDrawTarget = function (source, sourceRegion) {
            if (sourceRegion === void 0) { sourceRegion = this.sourceRegion; }
            var result = null;
            if (wd.BasicTextureUtils.isDrawPartOfTexture(sourceRegion, this.sourceRegionMethod)) {
                result = wd.BasicTextureUtils.drawPartOfTextureByCanvas(source, sourceRegion.width, sourceRegion.height, sourceRegion.x, sourceRegion.y, sourceRegion.width, sourceRegion.height, 0, 0, sourceRegion.width, sourceRegion.height);
            }
            else {
                result = source;
            }
            return result;
        };
        return DrawTextureCommand;
    })();
    wd.DrawTextureCommand = DrawTextureCommand;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var DrawCompressedTextureCommand = (function (_super) {
        __extends(DrawCompressedTextureCommand, _super);
        function DrawCompressedTextureCommand() {
            _super.apply(this, arguments);
            this.mipmaps = null;
        }
        DrawCompressedTextureCommand.create = function () {
            var obj = new this();
            return obj;
        };
        DrawCompressedTextureCommand.prototype.execute = function () {
            var gl = wd.DeviceManager.getInstance().gl, self = this;
            wd.Log.error(this.format === null, wd.Log.info.FUNC_NOT_SUPPORT(this.format));
            if (this.format !== wd.TextureFormat.RGBA) {
                this.mipmaps.forEach(function (mipmap, index) {
                    gl.compressedTexImage2D(self.glTarget, index, self.format, mipmap.width, mipmap.height, 0, self.getDrawTarget(mipmap.data));
                });
            }
            else {
                this.mipmaps.forEach(function (mipmap, index) {
                    gl.texImage2D(self.glTarget, index, gl[self.format], mipmap.width, mipmap.height, 0, gl[self.format], gl[self.type], self.getDrawTarget(mipmap.data));
                });
            }
        };
        return DrawCompressedTextureCommand;
    })(wd.DrawTextureCommand);
    wd.DrawCompressedTextureCommand = DrawCompressedTextureCommand;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var DrawTwoDTextureCommand = (function (_super) {
        __extends(DrawTwoDTextureCommand, _super);
        function DrawTwoDTextureCommand() {
            _super.apply(this, arguments);
            this.source = null;
        }
        DrawTwoDTextureCommand.prototype.drawTexture = function (index, source) {
            var gl = wd.DeviceManager.getInstance().gl;
            gl.texImage2D(this.glTarget, index, gl[this.format], gl[this.format], gl[this.type], this.getDrawTarget(source));
        };
        return DrawTwoDTextureCommand;
    })(wd.DrawTextureCommand);
    wd.DrawTwoDTextureCommand = DrawTwoDTextureCommand;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var DrawMipmapTwoDTextureCommand = (function (_super) {
        __extends(DrawMipmapTwoDTextureCommand, _super);
        function DrawMipmapTwoDTextureCommand() {
            _super.apply(this, arguments);
            this.mipmaps = null;
        }
        DrawMipmapTwoDTextureCommand.create = function () {
            var obj = new this();
            return obj;
        };
        DrawMipmapTwoDTextureCommand.prototype.execute = function () {
            var self = this;
            this.mipmaps.forEach(function (mipmap, index) {
                self.drawTexture(index, mipmap);
            });
        };
        return DrawMipmapTwoDTextureCommand;
    })(wd.DrawTwoDTextureCommand);
    wd.DrawMipmapTwoDTextureCommand = DrawMipmapTwoDTextureCommand;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var DrawNoMipmapTwoDTextureCommand = (function (_super) {
        __extends(DrawNoMipmapTwoDTextureCommand, _super);
        function DrawNoMipmapTwoDTextureCommand() {
            _super.apply(this, arguments);
        }
        DrawNoMipmapTwoDTextureCommand.create = function () {
            var obj = new this();
            return obj;
        };
        DrawNoMipmapTwoDTextureCommand.prototype.execute = function () {
            this.drawTexture(0, this.source);
        };
        return DrawNoMipmapTwoDTextureCommand;
    })(wd.DrawTwoDTextureCommand);
    wd.DrawNoMipmapTwoDTextureCommand = DrawNoMipmapTwoDTextureCommand;
})(wd || (wd = {}));

var wd;
(function (wd) {
    var Video = (function () {
        function Video(_a) {
            var urlArr = _a.urlArr, _b = _a.onLoad, onLoad = _b === void 0 ? function (video) { } : _b, _c = _a.onError, onError = _c === void 0 ? function (err) { } : _c;
            this.url = null;
            this.source = null;
            this.isStop = false;
            this._urlArr = null;
            this._onLoad = null;
            this._onError = null;
            this._urlArr = wdCb.Collection.create(urlArr);
            this._onLoad = onLoad;
            this._onError = onError;
        }
        Video.create = function (data) {
            var obj = new this(data);
            obj.initWhenCreate();
            return obj;
        };
        Video.prototype.initWhenCreate = function () {
            this.url = this._getCanPlayUrl();
            this.source = document.createElement("video");
            this.source.src = this.url;
            this._bindEvent();
        };
        Video.prototype.play = function () {
            this.isStop = false;
            this.source.play();
        };
        Video.prototype._getCanPlayUrl = function () {
            var self = this, canPlayUrl = null, extnameArr = [];
            this._urlArr.forEach(function (url) {
                var extname = wdCb.PathUtils.extname(url);
                extnameArr.push(extname);
                if (self._canplay(extname)) {
                    canPlayUrl = url;
                    return wdCb.$BREAK;
                }
            });
            wd.Log.error(canPlayUrl === null, wd.Log.info.FUNC_NOT_SUPPORT("browser", extnameArr.join(",")));
            return canPlayUrl;
        };
        Video.prototype._canplay = function (extname) {
            var video = document.createElement("video"), mimeStr = null;
            switch (extname) {
                case '.mp4':
                    mimeStr = 'video/mp4; codecs="avc1.42e01e, mp4a.40.2"';
                    break;
                case ".ogv":
                    mimeStr = 'video/ogg; codecs="theora, vorbis"';
                    break;
                case ".webm":
                    mimeStr = 'video/webm; codecs="vp8, vorbis"';
                    break;
                default:
                    wd.Log.error(true, wd.Log.info.FUNC_UNEXPECT(extname));
                    break;
            }
            return !!video.canPlayType && video.canPlayType(mimeStr) !== "";
        };
        Video.prototype._bindEvent = function () {
            var self = this;
            this.source.addEventListener("canplaythrough", function () {
                self._onLoad(self);
            }, false);
            this.source.addEventListener("error", function () {
                self._onError("errorCode " + self.source.error.code);
            }, false);
            this.source.addEventListener("ended", function () {
                self.isStop = true;
            }, false);
        };
        return Video;
    })();
    wd.Video = Video;
})(wd || (wd = {}));

var wd;
(function (wd) {
    var VideoManager = (function () {
        function VideoManager() {
        }
        VideoManager.getInstance = function () {
            if (this._instance === null) {
                this._instance = new this();
            }
            return this._instance;
        };
        VideoManager.prototype.play = function (id) {
            var asset = wd.VideoLoader.getInstance().get(id), video = null;
            wd.Log.error(!asset, wd.Log.info.FUNC_NOT_EXIST("video asset which id is " + id));
            video = asset.video;
            video.play();
        };
        VideoManager._instance = null;
        return VideoManager;
    })();
    wd.VideoManager = VideoManager;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var CustomMaterial = (function (_super) {
        __extends(CustomMaterial, _super);
        function CustomMaterial() {
            _super.apply(this, arguments);
        }
        CustomMaterial.create = function () {
            var obj = new this();
            return obj;
        };
        return CustomMaterial;
    })(wd.Material);
    wd.CustomMaterial = CustomMaterial;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var wd;
(function (wd) {
    var KinematicRigidBody = (function (_super) {
        __extends(KinematicRigidBody, _super);
        function KinematicRigidBody() {
            _super.apply(this, arguments);
            this._velocity = wd.Vector3.create(0, 0, 0);
            this._angularVelocity = wd.Vector3.create(0, 0, 0);
            this._mass = 1;
        }
        KinematicRigidBody.create = function () {
            var obj = new this();
            return obj;
        };
        Object.defineProperty(KinematicRigidBody.prototype, "velocity", {
            get: function () {
                return this._velocity;
            },
            set: function (velocity) {
                this._velocity = velocity;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(KinematicRigidBody.prototype, "angularVelocity", {
            get: function () {
                return this._angularVelocity;
            },
            set: function (angularVelocity) {
                this._angularVelocity = angularVelocity;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(KinematicRigidBody.prototype, "mass", {
            get: function () {
                return this._mass;
            },
            set: function (mass) {
                this._mass = mass;
            },
            enumerable: true,
            configurable: true
        });
        KinematicRigidBody.prototype.addBody = function () {
            this.addBodyToPhysicsEngine("addKinematicBody", {
                mass: this.mass,
                velocity: this.velocity,
                angularVelocity: this.angularVelocity
            });
        };
        __decorate([
            wd.operateBodyDataGetterAndSetter("Velocity")
        ], KinematicRigidBody.prototype, "velocity", null);
        __decorate([
            wd.operateBodyDataGetterAndSetter("AngularVelocity")
        ], KinematicRigidBody.prototype, "angularVelocity", null);
        __decorate([
            wd.operateBodyDataGetterAndSetter("Mass")
        ], KinematicRigidBody.prototype, "mass", null);
        return KinematicRigidBody;
    })(wd.RigidBody);
    wd.KinematicRigidBody = KinematicRigidBody;
})(wd || (wd = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var StaticRigidBody = (function (_super) {
        __extends(StaticRigidBody, _super);
        function StaticRigidBody() {
            _super.apply(this, arguments);
        }
        StaticRigidBody.create = function () {
            var obj = new this();
            return obj;
        };
        StaticRigidBody.prototype.addBody = function () {
            this.addBodyToPhysicsEngine("addStaticBody");
        };
        return StaticRigidBody;
    })(wd.RigidBody);
    wd.StaticRigidBody = StaticRigidBody;
})(wd || (wd = {}));

var wd;
(function (wd) {
    function script(scriptName) {
        return function (target) {
            wd.Script.addScript(scriptName, target);
        };
    }
    wd.script = script;
})(wd || (wd = {}));

//# sourceMappingURL=data:application/json;base64,
