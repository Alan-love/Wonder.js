var wd;
(function (wd) {
    wd.DebugConfig = {
        isTest: false,
        debugCollision: false,
        showDebugPanel: false
    };
})(wd || (wd = {}));
var wd;
(function (wd) {
    var DebugStatistics = (function () {
        function DebugStatistics() {
        }
        DebugStatistics.clear = function () {
            this.count.renderGameObjects = 0;
            this.count.drawCalls = 0;
        };
        DebugStatistics.init = function () {
            var self = this;
            this._startLoopSubscription = wd.EventManager.fromEvent(wd.EEngineEvent.STARTLOOP)
                .subscribe(function () {
                if (wd.DebugConfig.showDebugPanel) {
                    console.log("totalGameObjects:" + self.count.totalGameObjects + ", renderGameObjects:" + self.count.renderGameObjects + ", drawCalls:" + self.count.drawCalls);
                    console.log("fps:" + self.during.fps);
                    self.clear();
                }
            });
        };
        DebugStatistics.dispose = function () {
            this._startLoopSubscription.dispose();
        };
        DebugStatistics.count = {
            get totalGameObjects() {
                var count = 0;
                wd.Director.getInstance().scene.getChildren().forEach(function (child) {
                    if (child.hasComponent(wd.SpacePartition)) {
                        count += child.getComponent(wd.SpacePartition).getChildren().getCount();
                        return;
                    }
                    count++;
                });
                return count;
            },
            renderGameObjects: 0,
            drawCalls: 0
        };
        DebugStatistics.during = {
            get fps() {
                return wd.Director.getInstance().fps;
            }
        };
        DebugStatistics._startLoopSubscription = null;
        return DebugStatistics;
    }());
    wd.DebugStatistics = DebugStatistics;
})(wd || (wd = {}));
var wdFrp;
(function (wdFrp) {
    wdFrp.fromCollection = function (collection, scheduler) {
        if (scheduler === void 0) { scheduler = wdFrp.Scheduler.create(); }
        var arr = collection.toArray();
        return arr.length === 0 ? wdFrp.empty() : wdFrp.fromArray(arr, scheduler);
    };
})(wdFrp || (wdFrp = {}));
var wd;
(function (wd) {
    function assert(cond, message) {
        if (message === void 0) { message = "contract error"; }
        wd.Log.error(!cond, message);
    }
    wd.assert = assert;
    function require(InFunc) {
        return function (target, name, descriptor) {
            var value = descriptor.value;
            descriptor.value = function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i - 0] = arguments[_i];
                }
                if (wd.Main.isTest) {
                    InFunc.apply(this, args);
                }
                return value.apply(this, args);
            };
            return descriptor;
        };
    }
    wd.require = require;
    function ensure(OutFunc) {
        return function (target, name, descriptor) {
            var value = descriptor.value;
            descriptor.value = function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i - 0] = arguments[_i];
                }
                var result = value.apply(this, args), params = [result].concat(args);
                if (wd.Main.isTest) {
                    OutFunc.apply(this, params);
                }
                return result;
            };
            return descriptor;
        };
    }
    wd.ensure = ensure;
    function requireGetter(InFunc) {
        return function (target, name, descriptor) {
            var getter = descriptor.get;
            descriptor.get = function () {
                if (wd.Main.isTest) {
                    InFunc.call(this);
                }
                return getter.call(this);
            };
            return descriptor;
        };
    }
    wd.requireGetter = requireGetter;
    function requireSetter(InFunc) {
        return function (target, name, descriptor) {
            var setter = descriptor.set;
            descriptor.set = function (val) {
                if (wd.Main.isTest) {
                    InFunc.call(this, val);
                }
                setter.call(this, val);
            };
            return descriptor;
        };
    }
    wd.requireSetter = requireSetter;
    function ensureGetter(OutFunc) {
        return function (target, name, descriptor) {
            var getter = descriptor.get;
            descriptor.get = function () {
                var result = getter.call(this);
                if (wd.Main.isTest) {
                    OutFunc.call(this, result);
                }
                return result;
            };
            return descriptor;
        };
    }
    wd.ensureGetter = ensureGetter;
    function ensureSetter(OutFunc) {
        return function (target, name, descriptor) {
            var setter = descriptor.set;
            descriptor.set = function (val) {
                var result = setter.call(this, val), params = [result, val];
                if (wd.Main.isTest) {
                    OutFunc.apply(this, params);
                }
            };
            return descriptor;
        };
    }
    wd.ensureSetter = ensureSetter;
    function invariant(func) {
        return function (target) {
            if (wd.Main.isTest) {
                func(target);
            }
        };
    }
    wd.invariant = invariant;
})(wd || (wd = {}));
var wd;
(function (wd) {
    function cacheGetter(judgeFunc, returnCacheValueFunc, setCacheFunc) {
        return function (target, name, descriptor) {
            var getter = descriptor.get;
            descriptor.get = function () {
                var result = null;
                if (judgeFunc.call(this)) {
                    return returnCacheValueFunc.call(this);
                }
                result = getter.call(this);
                setCacheFunc.call(this, result);
                return result;
            };
            return descriptor;
        };
    }
    wd.cacheGetter = cacheGetter;
    function cache(judgeFunc, returnCacheValueFunc, setCacheFunc) {
        return function (target, name, descriptor) {
            var value = descriptor.value;
            descriptor.value = function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i - 0] = arguments[_i];
                }
                var result = null;
                if (judgeFunc.apply(this, args)) {
                    return returnCacheValueFunc.apply(this, args);
                }
                result = value.apply(this, args);
                setCacheFunc.apply(this, [result].concat(args));
                return result;
            };
            return descriptor;
        };
    }
    wd.cache = cache;
})(wd || (wd = {}));
var wd;
(function (wd) {
    function virtual(target, name, descriptor) {
        return descriptor;
    }
    wd.virtual = virtual;
})(wd || (wd = {}));
var wd;
(function (wd) {
    function operateBodyDataGetterAndSetter(dataName) {
        return function (target, name, descriptor) {
            var getter = descriptor.get, setter = descriptor.set;
            descriptor.get = function () {
                if (this.isPhysicsEngineAdapterExist()) {
                    var data = this.getPhysicsEngineAdapter()[("get" + dataName)](this.entityObject);
                    return data !== null ? data : this[("_" + lowerFirstChar(dataName))];
                }
                return getter.call(this);
            };
            descriptor.set = function (val) {
                setter.call(this, val);
                if (this.isPhysicsEngineAdapterExist()) {
                    this.getPhysicsEngineAdapter()[("set" + dataName)](this.entityObject, val);
                }
            };
            return descriptor;
        };
    }
    wd.operateBodyDataGetterAndSetter = operateBodyDataGetterAndSetter;
    function operateWorldDataGetterAndSetter(dataName) {
        return function (target, name, descriptor) {
            var getter = descriptor.get, setter = descriptor.set;
            descriptor.get = function () {
                var scene = wd.Director.getInstance().scene;
                if (isWorldDefined(scene)) {
                    var data = scene.physicsEngineAdapter[("get" + dataName)]();
                    return data !== null ? data : this[("_" + lowerFirstChar(dataName))];
                }
                return getter.call(this);
            };
            descriptor.set = function (val) {
                var scene = wd.Director.getInstance().scene;
                setter.call(this, val);
                if (isWorldDefined(scene)) {
                    scene.physicsEngineAdapter[("set" + dataName)](val);
                }
            };
            return descriptor;
        };
    }
    wd.operateWorldDataGetterAndSetter = operateWorldDataGetterAndSetter;
    function isWorldDefined(scene) {
        return scene.physicsEngineAdapter && scene.physicsEngineAdapter.world;
    }
    function lowerFirstChar(str) {
        var firstChar = str.slice(0, 1);
        return "" + firstChar.toLowerCase() + str.slice(1);
    }
})(wd || (wd = {}));
var wd;
(function (wd) {
    function script(scriptName) {
        return function (target) {
            wd.Script.addScript(scriptName, target);
        };
    }
    wd.script = script;
})(wd || (wd = {}));
var wd;
(function (wd) {
    function execOnlyOnce(flagName) {
        return function (target, name, descriptor) {
            var value = descriptor.value;
            descriptor.value = function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i - 0] = arguments[_i];
                }
                var result = null;
                if (this[flagName]) {
                    return;
                }
                this[flagName] = true;
                return value.apply(this, args);
            };
            return descriptor;
        };
    }
    wd.execOnlyOnce = execOnlyOnce;
})(wd || (wd = {}));
var wd;
(function (wd) {
    wd.ABSTRACT_ATTRIBUTE = null;
})(wd || (wd = {}));
var wd;
(function (wd) {
})(wd || (wd = {}));
Object.defineProperty(wd, "root", {
    get: function () {
        if (wd.JudgeUtils.isNodeJs()) {
            return global;
        }
        return window;
    }
});
var wd;
(function (wd) {
    wd.DEG_TO_RAD = Math.PI / 180;
    wd.RAD_TO_DEG = 180 / Math.PI;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var Vector2 = (function () {
        function Vector2() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            this.values = new Float32Array(2);
            if (args.length > 0) {
                this.values[0] = args[0];
                this.values[1] = args[1];
            }
        }
        Vector2.create = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var m = null;
            if (args.length === 0) {
                m = new this();
            }
            else {
                m = new this(args[0], args[1]);
            }
            return m;
        };
        Object.defineProperty(Vector2.prototype, "x", {
            get: function () {
                return this.values[0];
            },
            set: function (x) {
                this.values[0] = x;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Vector2.prototype, "y", {
            get: function () {
                return this.values[1];
            },
            set: function (y) {
                this.values[1] = y;
            },
            enumerable: true,
            configurable: true
        });
        Vector2.prototype.set = function (x, y) {
            this.x = x;
            this.y = y;
        };
        Vector2.prototype.add = function (v) {
            this.values[0] = this.values[0] + v.values[0];
            this.values[1] = this.values[1] + v.values[1];
            return this;
        };
        Vector2.prototype.mul = function (v) {
            this.values[0] = this.values[0] * v.values[0];
            this.values[1] = this.values[1] * v.values[1];
            return this;
        };
        Vector2.prototype.copy = function () {
            return Vector2.create(this.x, this.y);
        };
        return Vector2;
    }());
    wd.Vector2 = Vector2;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var Vector3 = (function () {
        function Vector3() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            this.values = null;
            this.values = new Float32Array(3);
            if (args.length > 0) {
                this.values[0] = args[0];
                this.values[1] = args[1];
                this.values[2] = args[2];
            }
        }
        Vector3.create = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var m = null;
            if (args.length === 0) {
                m = new this();
            }
            else {
                m = new this(args[0], args[1], args[2]);
            }
            return m;
        };
        Object.defineProperty(Vector3.prototype, "x", {
            get: function () {
                return this.values[0];
            },
            set: function (x) {
                this.values[0] = x;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Vector3.prototype, "y", {
            get: function () {
                return this.values[1];
            },
            set: function (y) {
                this.values[1] = y;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Vector3.prototype, "z", {
            get: function () {
                return this.values[2];
            },
            set: function (z) {
                this.values[2] = z;
            },
            enumerable: true,
            configurable: true
        });
        Vector3.prototype.normalize = function () {
            var v = this.values;
            var d = Math.sqrt(v[0] * v[0] + v[1] * v[1] + v[2] * v[2]);
            if (d === 0) {
                v[0] = 0;
                v[1] = 0;
                v[2] = 0;
                return this;
            }
            v[0] = v[0] / d;
            v[1] = v[1] / d;
            v[2] = v[2] / d;
            if (v[0] === -0) {
                v[0] = 0;
            }
            if (v[1] === -0) {
                v[1] = 0;
            }
            if (v[2] === -0) {
                v[2] = 0;
            }
            return this;
        };
        Vector3.prototype.isZero = function () {
            var v = this.values;
            return v[0] === 0 && v[1] === 0 && v[2] === 0;
        };
        Vector3.prototype.scale = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var v = this.values;
            if (args.length === 1) {
                var scalar = args[0];
                v[0] *= scalar;
                v[1] *= scalar;
                v[2] *= scalar;
            }
            else if (args.length === 3) {
                var x = args[0], y = args[1], z = args[2];
                v[0] *= x;
                v[1] *= y;
                v[2] *= z;
            }
            return this;
        };
        Vector3.prototype.set = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            if (args.length === 3) {
                this.x = args[0];
                this.y = args[1];
                this.z = args[2];
            }
            else {
                var v = args[0];
                this.x = v.x;
                this.y = v.y;
                this.z = v.z;
            }
        };
        Vector3.prototype.sub = function (v) {
            this.values[0] = this.values[0] - v.values[0];
            this.values[1] = this.values[1] - v.values[1];
            this.values[2] = this.values[2] - v.values[2];
            return this;
        };
        Vector3.prototype.sub2 = function (v1, v2) {
            this.values[0] = v1.values[0] - v2.values[0];
            this.values[1] = v1.values[1] - v2.values[1];
            this.values[2] = v1.values[2] - v2.values[2];
            return this;
        };
        Vector3.prototype.add = function (v) {
            this.values[0] = this.values[0] + v.values[0];
            this.values[1] = this.values[1] + v.values[1];
            this.values[2] = this.values[2] + v.values[2];
            return this;
        };
        Vector3.prototype.add2 = function (v1, v2) {
            this.values[0] = v1.values[0] + v2.values[0];
            this.values[1] = v1.values[1] + v2.values[1];
            this.values[2] = v1.values[2] + v2.values[2];
            return this;
        };
        Vector3.prototype.mul = function (v) {
            this.values[0] = this.values[0] * v.values[0];
            this.values[1] = this.values[1] * v.values[1];
            this.values[2] = this.values[2] * v.values[2];
            return this;
        };
        Vector3.prototype.mul2 = function (v1, v2) {
            this.values[0] = v1.values[0] * v2.values[0];
            this.values[1] = v1.values[1] * v2.values[1];
            this.values[2] = v1.values[2] * v2.values[2];
            return this;
        };
        Vector3.prototype.reverse = function () {
            this.values[0] = -this.values[0];
            this.values[1] = -this.values[1];
            this.values[2] = -this.values[2];
            return this;
        };
        Vector3.prototype.copy = function () {
            var result = Vector3.create(), i = 0, len = this.values.length;
            for (i = 0; i < len; i++) {
                result.values[i] = this.values[i];
            }
            return result;
        };
        Vector3.prototype.toVector4 = function () {
            return wd.Vector4.create(this.values[0], this.values[1], this.values[2], 1.0);
        };
        Vector3.prototype.length = function () {
            var v = this.values;
            return Math.sqrt(v[0] * v[0] + v[1] * v[1] + v[2] * v[2]);
        };
        Vector3.prototype.cross = function (lhs, rhs) {
            var a, b, r, ax, ay, az, bx, by, bz;
            a = lhs.values;
            b = rhs.values;
            r = this.values;
            ax = a[0];
            ay = a[1];
            az = a[2];
            bx = b[0];
            by = b[1];
            bz = b[2];
            r[0] = ay * bz - by * az;
            r[1] = az * bx - bz * ax;
            r[2] = ax * by - bx * ay;
            return this;
        };
        Vector3.prototype.lerp = function (lhs, rhs, alpha) {
            var a = lhs.values, b = rhs.values, r = this.values;
            r[0] = a[0] + alpha * (b[0] - a[0]);
            r[1] = a[1] + alpha * (b[1] - a[1]);
            r[2] = a[2] + alpha * (b[2] - a[2]);
            return this;
        };
        Vector3.prototype.dot = function (rhs) {
            var a = this.values, b = rhs.values;
            return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
        };
        Vector3.prototype.min = function (v) {
            if (this.x > v.x) {
                this.x = v.x;
            }
            if (this.y > v.y) {
                this.y = v.y;
            }
            if (this.z > v.z) {
                this.z = v.z;
            }
            return this;
        };
        Vector3.prototype.max = function (v) {
            if (this.x < v.x) {
                this.x = v.x;
            }
            if (this.y < v.y) {
                this.y = v.y;
            }
            if (this.z < v.z) {
                this.z = v.z;
            }
            return this;
        };
        Vector3.prototype.isEqual = function (v) {
            return this.x === v.x && this.y === v.y && this.z === v.z;
        };
        Vector3.prototype.toArray = function () {
            return [this.x, this.y, this.z];
        };
        Vector3.prototype.applyMatrix4 = function (m) {
            var x = this.x, y = this.y, z = this.z, e = m.values;
            this.x = e[0] * x + e[4] * y + e[8] * z + e[12];
            this.y = e[1] * x + e[5] * y + e[9] * z + e[13];
            this.z = e[2] * x + e[6] * y + e[10] * z + e[14];
            return this;
        };
        Vector3.prototype.distanceTo = function (v) {
            return Math.sqrt(this.distanceToSquared(v));
        };
        Vector3.prototype.distanceToSquared = function (v) {
            var dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;
            return Math.pow(dx, 2) + Math.pow(dy, 2) + Math.pow(dz, 2);
        };
        Vector3.up = Vector3.create(0, 1, 0);
        Vector3.forward = Vector3.create(0, 0, 1);
        Vector3.right = Vector3.create(1, 0, 0);
        return Vector3;
    }());
    wd.Vector3 = Vector3;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var Vector4 = (function () {
        function Vector4() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            this.values = new Float32Array(4);
            if (args.length > 0) {
                this.values[0] = args[0];
                this.values[1] = args[1];
                this.values[2] = args[2];
                this.values[3] = args[3];
            }
        }
        Vector4.create = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var m = null;
            if (args.length === 0) {
                m = new this();
            }
            else {
                m = new this(args[0], args[1], args[2], args[3]);
            }
            return m;
        };
        Object.defineProperty(Vector4.prototype, "x", {
            get: function () {
                return this.values[0];
            },
            set: function (x) {
                this.values[0] = x;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Vector4.prototype, "y", {
            get: function () {
                return this.values[1];
            },
            set: function (y) {
                this.values[1] = y;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Vector4.prototype, "z", {
            get: function () {
                return this.values[2];
            },
            set: function (z) {
                this.values[2] = z;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Vector4.prototype, "w", {
            get: function () {
                return this.values[3];
            },
            set: function (w) {
                this.values[3] = w;
            },
            enumerable: true,
            configurable: true
        });
        Vector4.prototype.normalize = function () {
            var v = this.values;
            var d = Math.sqrt(v[0] * v[0] + v[1] * v[1] + v[2] * v[2] + v[3] * v[3]);
            if (d === 0) {
                return Vector4.create(0, 0, 0, 0);
            }
            v[0] = v[0] / d;
            v[1] = v[1] / d;
            v[2] = v[2] / d;
            v[3] = v[3] / d;
            return this;
        };
        Vector4.prototype.copy = function () {
            return this.copyHelper(Vector4.create());
        };
        Vector4.prototype.toVector3 = function () {
            return wd.Vector3.create(this.values[0], this.values[1], this.values[2]);
        };
        Vector4.prototype.multiplyScalar = function (scalar) {
            this.x *= scalar;
            this.y *= scalar;
            this.z *= scalar;
            this.w *= scalar;
            return this;
        };
        Vector4.prototype.dot = function (v) {
            return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;
        };
        Vector4.prototype.set = function (x, y, z, w) {
            this.x = x;
            this.y = y;
            this.z = z;
            this.w = w;
        };
        Vector4.prototype.copyHelper = function (vector4) {
            var result = vector4, i = 0, len = this.values.length;
            for (i = 0; i < len; i++) {
                result.values[i] = this.values[i];
            }
            return result;
        };
        return Vector4;
    }());
    wd.Vector4 = Vector4;
})(wd || (wd = {}));
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var wd;
(function (wd) {
    var Matrix4 = (function () {
        function Matrix4() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            this.values = null;
            this._matrixArr = null;
            if (args.length === 1) {
                this.values = args[0];
            }
            else {
                this.values = new Float32Array([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]);
            }
            this._matrixArr = [];
        }
        Matrix4.create = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var m = null;
            if (args.length === 0) {
                m = new this();
            }
            else {
                m = new this(args[0]);
            }
            return m;
        };
        Matrix4.prototype.push = function () {
            this._matrixArr.push(this.values);
        };
        Matrix4.prototype.pop = function () {
            this.values = this._matrixArr.pop();
        };
        Matrix4.prototype.set = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var te = this.values, values = null;
            if (args.length === 1) {
                var matrix = args[0];
                values = matrix.values;
            }
            else {
                values = [
                    args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11], args[12], args[13], args[14], args[15]
                ];
            }
            te[0] = values[0];
            te[1] = values[1];
            te[2] = values[2];
            te[3] = values[3];
            te[4] = values[4];
            te[5] = values[5];
            te[6] = values[6];
            te[7] = values[7];
            te[8] = values[8];
            te[9] = values[9];
            te[10] = values[10];
            te[11] = values[11];
            te[12] = values[12];
            te[13] = values[13];
            te[14] = values[14];
            te[15] = values[15];
            return this;
        };
        Matrix4.prototype.setIdentity = function () {
            var e = this.values;
            e[0] = 1;
            e[4] = 0;
            e[8] = 0;
            e[12] = 0;
            e[1] = 0;
            e[5] = 1;
            e[9] = 0;
            e[13] = 0;
            e[2] = 0;
            e[6] = 0;
            e[10] = 1;
            e[14] = 0;
            e[3] = 0;
            e[7] = 0;
            e[11] = 0;
            e[15] = 1;
            return this;
        };
        Matrix4.prototype.invert = function () {
            var a00, a01, a02, a03, a10, a11, a12, a13, a20, a21, a22, a23, a30, a31, a32, a33, b00, b01, b02, b03, b04, b05, b06, b07, b08, b09, b10, b11, invDet, m;
            m = this.values;
            a00 = m[0];
            a01 = m[1];
            a02 = m[2];
            a03 = m[3];
            a10 = m[4];
            a11 = m[5];
            a12 = m[6];
            a13 = m[7];
            a20 = m[8];
            a21 = m[9];
            a22 = m[10];
            a23 = m[11];
            a30 = m[12];
            a31 = m[13];
            a32 = m[14];
            a33 = m[15];
            b00 = a00 * a11 - a01 * a10;
            b01 = a00 * a12 - a02 * a10;
            b02 = a00 * a13 - a03 * a10;
            b03 = a01 * a12 - a02 * a11;
            b04 = a01 * a13 - a03 * a11;
            b05 = a02 * a13 - a03 * a12;
            b06 = a20 * a31 - a21 * a30;
            b07 = a20 * a32 - a22 * a30;
            b08 = a20 * a33 - a23 * a30;
            b09 = a21 * a32 - a22 * a31;
            b10 = a21 * a33 - a23 * a31;
            b11 = a22 * a33 - a23 * a32;
            invDet = 1 / (b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06);
            m[0] = (a11 * b11 - a12 * b10 + a13 * b09) * invDet;
            m[1] = (-a01 * b11 + a02 * b10 - a03 * b09) * invDet;
            m[2] = (a31 * b05 - a32 * b04 + a33 * b03) * invDet;
            m[3] = (-a21 * b05 + a22 * b04 - a23 * b03) * invDet;
            m[4] = (-a10 * b11 + a12 * b08 - a13 * b07) * invDet;
            m[5] = (a00 * b11 - a02 * b08 + a03 * b07) * invDet;
            m[6] = (-a30 * b05 + a32 * b02 - a33 * b01) * invDet;
            m[7] = (a20 * b05 - a22 * b02 + a23 * b01) * invDet;
            m[8] = (a10 * b10 - a11 * b08 + a13 * b06) * invDet;
            m[9] = (-a00 * b10 + a01 * b08 - a03 * b06) * invDet;
            m[10] = (a30 * b04 - a31 * b02 + a33 * b00) * invDet;
            m[11] = (-a20 * b04 + a21 * b02 - a23 * b00) * invDet;
            m[12] = (-a10 * b09 + a11 * b07 - a12 * b06) * invDet;
            m[13] = (a00 * b09 - a01 * b07 + a02 * b06) * invDet;
            m[14] = (-a30 * b03 + a31 * b01 - a32 * b00) * invDet;
            m[15] = (a20 * b03 - a21 * b01 + a22 * b00) * invDet;
            return this;
        };
        Matrix4.prototype.invertTo3x3 = function () {
            var a11, a21, a31, a12, a22, a32, a13, a23, a33, m, r, det, idet;
            var mat3 = wd.Matrix3.create();
            m = this.values;
            r = mat3.values;
            a11 = m[10] * m[5] - m[6] * m[9];
            a21 = -m[10] * m[1] + m[2] * m[9];
            a31 = m[6] * m[1] - m[2] * m[5];
            a12 = -m[10] * m[4] + m[6] * m[8];
            a22 = m[10] * m[0] - m[2] * m[8];
            a32 = -m[6] * m[0] + m[2] * m[4];
            a13 = m[9] * m[4] - m[5] * m[8];
            a23 = -m[9] * m[0] + m[1] * m[8];
            a33 = m[5] * m[0] - m[1] * m[4];
            det = m[0] * a11 + m[1] * a12 + m[2] * a13;
            if (det === 0) {
                wd.Log.warn("can't invert matrix, determinant is 0");
                return mat3;
            }
            idet = 1 / det;
            r[0] = idet * a11;
            r[1] = idet * a21;
            r[2] = idet * a31;
            r[3] = idet * a12;
            r[4] = idet * a22;
            r[5] = idet * a32;
            r[6] = idet * a13;
            r[7] = idet * a23;
            r[8] = idet * a33;
            return mat3;
        };
        Matrix4.prototype.transpose = function () {
            var te = this.values;
            var tmp;
            tmp = te[1];
            te[1] = te[4];
            te[4] = tmp;
            tmp = te[2];
            te[2] = te[8];
            te[8] = tmp;
            tmp = te[6];
            te[6] = te[9];
            te[9] = tmp;
            tmp = te[3];
            te[3] = te[12];
            te[12] = tmp;
            tmp = te[7];
            te[7] = te[13];
            te[13] = tmp;
            tmp = te[11];
            te[11] = te[14];
            te[14] = tmp;
            return this;
        };
        Matrix4.prototype.setTranslate = function (x, y, z) {
            var e = this.values;
            e[0] = 1;
            e[4] = 0;
            e[8] = 0;
            e[12] = x;
            e[1] = 0;
            e[5] = 1;
            e[9] = 0;
            e[13] = y;
            e[2] = 0;
            e[6] = 0;
            e[10] = 1;
            e[14] = z;
            e[3] = 0;
            e[7] = 0;
            e[11] = 0;
            e[15] = 1;
            return this;
        };
        Matrix4.prototype.translate = function (x, y, z) {
            this.applyMatrix(Matrix4.create().setTranslate(x, y, z));
            return this;
        };
        Matrix4.prototype.setRotate = function (angle, x, y, z) {
            var e, s, c, len, rlen, nc, xy, yz, zx, xs, ys, zs;
            var angle = Math.PI * angle / 180;
            e = this.values;
            s = Math.sin(angle);
            c = Math.cos(angle);
            if (0 !== x && 0 === y && 0 === z) {
                if (x < 0) {
                    s = -s;
                }
                e[0] = 1;
                e[4] = 0;
                e[8] = 0;
                e[12] = 0;
                e[1] = 0;
                e[5] = c;
                e[9] = -s;
                e[13] = 0;
                e[2] = 0;
                e[6] = s;
                e[10] = c;
                e[14] = 0;
                e[3] = 0;
                e[7] = 0;
                e[11] = 0;
                e[15] = 1;
            }
            else if (0 === x && 0 !== y && 0 === z) {
                if (y < 0) {
                    s = -s;
                }
                e[0] = c;
                e[4] = 0;
                e[8] = s;
                e[12] = 0;
                e[1] = 0;
                e[5] = 1;
                e[9] = 0;
                e[13] = 0;
                e[2] = -s;
                e[6] = 0;
                e[10] = c;
                e[14] = 0;
                e[3] = 0;
                e[7] = 0;
                e[11] = 0;
                e[15] = 1;
            }
            else if (0 === x && 0 === y && 0 !== z) {
                if (z < 0) {
                    s = -s;
                }
                e[0] = c;
                e[4] = -s;
                e[8] = 0;
                e[12] = 0;
                e[1] = s;
                e[5] = c;
                e[9] = 0;
                e[13] = 0;
                e[2] = 0;
                e[6] = 0;
                e[10] = 1;
                e[14] = 0;
                e[3] = 0;
                e[7] = 0;
                e[11] = 0;
                e[15] = 1;
            }
            else {
                len = Math.sqrt(x * x + y * y + z * z);
                if (len !== 1) {
                    rlen = 1 / len;
                    x *= rlen;
                    y *= rlen;
                    z *= rlen;
                }
                nc = 1 - c;
                xy = x * y;
                yz = y * z;
                zx = z * x;
                xs = x * s;
                ys = y * s;
                zs = z * s;
                e[0] = x * x * nc + c;
                e[1] = xy * nc + zs;
                e[2] = zx * nc - ys;
                e[3] = 0;
                e[4] = xy * nc - zs;
                e[5] = y * y * nc + c;
                e[6] = yz * nc + xs;
                e[7] = 0;
                e[8] = zx * nc + ys;
                e[9] = yz * nc - xs;
                e[10] = z * z * nc + c;
                e[11] = 0;
                e[12] = 0;
                e[13] = 0;
                e[14] = 0;
                e[15] = 1;
            }
            return this;
        };
        Matrix4.prototype.rotate = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var angle = args[0];
            if (args.length === 2) {
                var vector3 = args[1];
                this.applyMatrix(Matrix4.create().setRotate(angle, vector3.values[0], vector3.values[1], vector3.values[2]));
            }
            else if (args.length === 4) {
                var x = args[1], y = args[2], z = args[3];
                this.applyMatrix(Matrix4.create().setRotate(angle, x, y, z));
            }
            return this;
        };
        Matrix4.prototype.setScale = function (x, y, z) {
            var e = this.values;
            e[0] = x;
            e[4] = 0;
            e[8] = 0;
            e[12] = 0;
            e[1] = 0;
            e[5] = y;
            e[9] = 0;
            e[13] = 0;
            e[2] = 0;
            e[6] = 0;
            e[10] = z;
            e[14] = 0;
            e[3] = 0;
            e[7] = 0;
            e[11] = 0;
            e[15] = 1;
            return this;
        };
        Matrix4.prototype.scale = function (x, y, z) {
            this.applyMatrix(Matrix4.create().setScale(x, y, z));
            return this;
        };
        Matrix4.prototype.setLookAt = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var x, y, z, eye, center, up;
            if (args.length === 3) {
                eye = args[0];
                center = args[1];
                up = args[2];
            }
            else if (args.length === 9) {
                eye = wd.Vector3.create(args[0], args[1], args[2]);
                center = wd.Vector3.create(args[3], args[4], args[5]);
                up = wd.Vector3.create(args[6], args[7], args[8]);
            }
            x = wd.Vector3.create();
            z = eye.copy().sub(center).normalize();
            y = up.copy().normalize();
            x.cross(y, z).normalize();
            y.cross(z, x);
            var r = this.values;
            r[0] = x.x;
            r[1] = x.y;
            r[2] = x.z;
            r[3] = 0;
            r[4] = y.x;
            r[5] = y.y;
            r[6] = y.z;
            r[7] = 0;
            r[8] = z.x;
            r[9] = z.y;
            r[10] = z.z;
            r[11] = 0;
            r[12] = eye.x;
            r[13] = eye.y;
            r[14] = eye.z;
            r[15] = 1;
            return this;
        };
        Matrix4.prototype.lookAt = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var matrix = Matrix4.create();
            this.applyMatrix(matrix.setLookAt.apply(matrix, args));
            return this;
        };
        Matrix4.prototype.setOrtho = function (left, right, bottom, top, near, far) {
            var e = this.values, rw, rh, rd;
            rw = 1 / (right - left);
            rh = 1 / (top - bottom);
            rd = 1 / (far - near);
            e[0] = 2 * rw;
            e[1] = 0;
            e[2] = 0;
            e[3] = 0;
            e[4] = 0;
            e[5] = 2 * rh;
            e[6] = 0;
            e[7] = 0;
            e[8] = 0;
            e[9] = 0;
            e[10] = -2 * rd;
            e[11] = 0;
            e[12] = -(right + left) * rw;
            e[13] = -(top + bottom) * rh;
            e[14] = -(far + near) * rd;
            e[15] = 1;
            return this;
        };
        Matrix4.prototype.ortho = function (left, right, bottom, top, near, far) {
            this.applyMatrix(Matrix4.create().setOrtho(left, right, bottom, top, near, far));
            return this;
        };
        Matrix4.prototype.setPerspective = function (fovy, aspect, near, far) {
            var e = null, rd = null, s = null, ct = null, fovy = Math.PI * fovy / 180 / 2;
            s = Math.sin(fovy);
            wd.Log.error(s === 0, wd.Log.info.FUNC_MUST_NOT_BE("frustum", "null"));
            rd = 1 / (far - near);
            ct = Math.cos(fovy) / s;
            e = this.values;
            e[0] = ct / aspect;
            e[1] = 0;
            e[2] = 0;
            e[3] = 0;
            e[4] = 0;
            e[5] = ct;
            e[6] = 0;
            e[7] = 0;
            e[8] = 0;
            e[9] = 0;
            e[10] = -(far + near) * rd;
            e[11] = -1;
            e[12] = 0;
            e[13] = 0;
            e[14] = -2 * near * far * rd;
            e[15] = 0;
            return this;
        };
        Matrix4.prototype.perspective = function (fovy, aspect, near, far) {
            this.applyMatrix(Matrix4.create().setPerspective(fovy, aspect, near, far));
            return this;
        };
        Matrix4.prototype.applyMatrix = function (other) {
            var a = this, b = other.copy();
            this.values = b.multiply(a).values;
            return this;
        };
        Matrix4.prototype.multiply = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var mat1 = null, mat2 = null, result = null;
            result = this.values;
            if (args.length === 1) {
                mat1 = this.values;
                mat2 = args[0].values;
            }
            else if (args.length === 2) {
                mat1 = args[0].values;
                mat2 = args[1].values;
            }
            var a = mat1[0], b = mat1[1], c = mat1[2], d = mat1[3], e = mat1[4], f = mat1[5], g = mat1[6], h = mat1[7], i = mat1[8], j = mat1[9], k = mat1[10], l = mat1[11], m = mat1[12], n = mat1[13], o = mat1[14], p = mat1[15], A = mat2[0], B = mat2[1], C = mat2[2], D = mat2[3], E = mat2[4], F = mat2[5], G = mat2[6], H = mat2[7], I = mat2[8], J = mat2[9], K = mat2[10], L = mat2[11], M = mat2[12], N = mat2[13], O = mat2[14], P = mat2[15];
            result[0] = A * a + B * e + C * i + D * m;
            result[1] = A * b + B * f + C * j + D * n;
            result[2] = A * c + B * g + C * k + D * o;
            result[3] = A * d + B * h + C * l + D * p;
            result[4] = E * a + F * e + G * i + H * m;
            result[5] = E * b + F * f + G * j + H * n;
            result[6] = E * c + F * g + G * k + H * o;
            result[7] = E * d + F * h + G * l + H * p;
            result[8] = I * a + J * e + K * i + L * m;
            result[9] = I * b + J * f + K * j + L * n;
            result[10] = I * c + J * g + K * k + L * o;
            result[11] = I * d + J * h + K * l + L * p;
            result[12] = M * a + N * e + O * i + P * m;
            result[13] = M * b + N * f + O * j + P * n;
            result[14] = M * c + N * g + O * k + P * o;
            result[15] = M * d + N * h + O * l + P * p;
            return this;
        };
        Matrix4.prototype.multiplyVector4 = function (vector) {
            var mat1 = this.values, vec4 = vector.values;
            var result = [];
            result[0] = vec4[0] * mat1[0] + vec4[1] * mat1[4] + vec4[2] * mat1[8] + vec4[3] * mat1[12];
            result[1] = vec4[0] * mat1[1] + vec4[1] * mat1[5] + vec4[2] * mat1[9] + vec4[3] * mat1[13];
            result[2] = vec4[0] * mat1[2] + vec4[1] * mat1[6] + vec4[2] * mat1[10] + vec4[3] * mat1[14];
            result[3] = vec4[0] * mat1[3] + vec4[1] * mat1[7] + vec4[2] * mat1[11] + vec4[3] * mat1[15];
            return wd.Vector4.create(result[0], result[1], result[2], result[3]);
        };
        Matrix4.prototype.multiplyVector3 = function (vector) {
            var mat1 = this.values, vec3 = vector.values;
            var result = [];
            result[0] = vec3[0] * mat1[0] + vec3[1] * mat1[4] + vec3[2] * mat1[8];
            result[1] = vec3[0] * mat1[1] + vec3[1] * mat1[5] + vec3[2] * mat1[9];
            result[2] = vec3[0] * mat1[2] + vec3[1] * mat1[6] + vec3[2] * mat1[10];
            return wd.Vector3.create(result[0], result[1], result[2]);
        };
        Matrix4.prototype.multiplyPoint = function (vector) {
            var mat1 = this.values, vec3 = vector.values;
            var result = [];
            result[0] = vec3[0] * mat1[0] + vec3[1] * mat1[4] + vec3[2] * mat1[8] + mat1[12];
            result[1] = vec3[0] * mat1[1] + vec3[1] * mat1[5] + vec3[2] * mat1[9] + mat1[13];
            result[2] = vec3[0] * mat1[2] + vec3[1] * mat1[6] + vec3[2] * mat1[10] + mat1[14];
            return wd.Vector3.create(result[0], result[1], result[2]);
        };
        Matrix4.prototype.copy = function () {
            var result = Matrix4.create(), i = 0, len = this.values.length;
            for (i = 0; i < len; i++) {
                result.values[i] = this.values[i];
            }
            return result;
        };
        Matrix4.prototype.getX = function () {
            return wd.Vector3.create(this.values[0], this.values[1], this.values[2]);
        };
        Matrix4.prototype.getY = function () {
            return wd.Vector3.create(this.values[4], this.values[5], this.values[6]);
        };
        Matrix4.prototype.getZ = function () {
            return wd.Vector3.create(this.values[8], this.values[9], this.values[10]);
        };
        Matrix4.prototype.getTranslation = function () {
            return wd.Vector3.create(this.values[12], this.values[13], this.values[14]);
        };
        Matrix4.prototype.getScale = function () {
            return wd.Vector3.create(this.getX().length(), this.getY().length(), this.getZ().length());
        };
        Matrix4.prototype.getRotation = function () {
            return wd.Quaternion.create().setFromMatrix(this);
        };
        Matrix4.prototype.getEulerAngles = function () {
            var x, y, z, sx, sy, sz, m, halfPi;
            var scale = this.getScale();
            sx = scale.x;
            sy = scale.y;
            sz = scale.z;
            m = this.values;
            y = Math.asin(-m[2] / sx);
            halfPi = Math.PI * 0.5;
            if (y < halfPi) {
                if (y > -halfPi) {
                    x = Math.atan2(m[6] / sy, m[10] / sz);
                    z = Math.atan2(m[1] / sx, m[0] / sx);
                }
                else {
                    z = 0;
                    x = -Math.atan2(m[4] / sy, m[5] / sy);
                }
            }
            else {
                z = 0;
                x = Math.atan2(m[4] / sy, m[5] / sy);
            }
            return wd.Vector3.create(x, y, z).scale(wd.RAD_TO_DEG);
        };
        Matrix4.prototype.setTRS = function (t, r, s) {
            var tx, ty, tz, qx, qy, qz, qw, sx, sy, sz, x2, y2, z2, xx, xy, xz, yy, yz, zz, wx, wy, wz, m;
            tx = t.x;
            ty = t.y;
            tz = t.z;
            qx = r.x;
            qy = r.y;
            qz = r.z;
            qw = r.w;
            sx = s.x;
            sy = s.y;
            sz = s.z;
            x2 = qx + qx;
            y2 = qy + qy;
            z2 = qz + qz;
            xx = qx * x2;
            xy = qx * y2;
            xz = qx * z2;
            yy = qy * y2;
            yz = qy * z2;
            zz = qz * z2;
            wx = qw * x2;
            wy = qw * y2;
            wz = qw * z2;
            m = this.values;
            m[0] = (1 - (yy + zz)) * sx;
            m[1] = (xy + wz) * sx;
            m[2] = (xz - wy) * sx;
            m[3] = 0;
            m[4] = (xy - wz) * sy;
            m[5] = (1 - (xx + zz)) * sy;
            m[6] = (yz + wx) * sy;
            m[7] = 0;
            m[8] = (xz + wy) * sz;
            m[9] = (yz - wx) * sz;
            m[10] = (1 - (xx + yy)) * sz;
            m[11] = 0;
            m[12] = tx;
            m[13] = ty;
            m[14] = tz;
            m[15] = 1;
            return this;
        };
        __decorate([
            wd.require(function (left, right, bottom, top, near, far) {
                wd.assert(left !== right && bottom !== top && near !== far, wd.Log.info.FUNC_MUST_NOT_BE("frustum", "null"));
            })
        ], Matrix4.prototype, "setOrtho", null);
        __decorate([
            wd.require(function (fovy, aspect, near, far) {
                wd.assert(near !== far && aspect !== 0, wd.Log.info.FUNC_MUST_NOT_BE("frustum", "null"));
                wd.assert(near > 0, wd.Log.info.FUNC_MUST("near", "> 0"));
                wd.assert(far > 0, wd.Log.info.FUNC_MUST("far", "> 0"));
            })
        ], Matrix4.prototype, "setPerspective", null);
        return Matrix4;
    }());
    wd.Matrix4 = Matrix4;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var Matrix3 = (function () {
        function Matrix3() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            this.values = null;
            if (args.length === 1) {
                this.values = args[0];
            }
            else {
                this.values = new Float32Array([1, 0, 0, 0, 1, 0, 0, 0, 1]);
            }
        }
        Matrix3.create = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var m = null;
            if (args.length === 0) {
                m = new this();
            }
            else {
                m = new this(args[0]);
            }
            return m;
        };
        Object.defineProperty(Matrix3.prototype, "a", {
            get: function () {
                return this.values[0];
            },
            set: function (a) {
                this.values[0] = a;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Matrix3.prototype, "c", {
            get: function () {
                return this.values[1];
            },
            set: function (c) {
                this.values[1] = c;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Matrix3.prototype, "b", {
            get: function () {
                return this.values[3];
            },
            set: function (b) {
                this.values[3] = b;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Matrix3.prototype, "d", {
            get: function () {
                return this.values[4];
            },
            set: function (d) {
                this.values[4] = d;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Matrix3.prototype, "tx", {
            get: function () {
                return this.values[6];
            },
            set: function (tx) {
                this.values[6] = tx;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Matrix3.prototype, "ty", {
            get: function () {
                return this.values[7];
            },
            set: function (ty) {
                this.values[7] = ty;
            },
            enumerable: true,
            configurable: true
        });
        Matrix3.prototype.setIdentity = function () {
            var e = this.values;
            e[0] = 1;
            e[3] = 0;
            e[6] = 0;
            e[1] = 0;
            e[4] = 1;
            e[7] = 0;
            e[2] = 0;
            e[5] = 0;
            e[8] = 1;
            return this;
        };
        Matrix3.prototype.invert = function () {
            var a1 = this.values[0];
            var b1 = this.values[1];
            var c1 = this.values[3];
            var d1 = this.values[4];
            var tx1 = this.values[6];
            var ty1 = this.values[7];
            var n = a1 * d1 - b1 * c1;
            this.values[0] = d1 / n;
            this.values[1] = -b1 / n;
            this.values[3] = -c1 / n;
            this.values[4] = a1 / n;
            this.values[6] = (c1 * ty1 - d1 * tx1) / n;
            this.values[7] = -(a1 * ty1 - b1 * tx1) / n;
            return this;
        };
        Matrix3.prototype.multiplyScalar = function (s) {
            var te = this.values;
            te[0] *= s;
            te[3] *= s;
            te[6] *= s;
            te[1] *= s;
            te[4] *= s;
            te[7] *= s;
            te[2] *= s;
            te[5] *= s;
            te[8] *= s;
            return this;
        };
        Matrix3.prototype.multiplyVector2 = function (vector) {
            var x = vector.x, y = vector.y, result = wd.Vector2.create(), e = this.values;
            result.x = e[0] * x + e[3] * y;
            result.y = e[1] * x + e[4] * y;
            return result;
        };
        Matrix3.prototype.multiplyPoint = function (vector) {
            var x = vector.x, y = vector.y, result = wd.Vector2.create(), e = this.values;
            result.x = e[0] * x + e[3] * y + this.tx;
            result.y = e[1] * x + e[4] * y + this.ty;
            return result;
        };
        Matrix3.prototype.multiply = function (matrix) {
            var m11 = this.a * matrix.a + this.c * matrix.b;
            var m12 = this.b * matrix.a + this.d * matrix.b;
            var m21 = this.a * matrix.c + this.c * matrix.d;
            var m22 = this.b * matrix.c + this.d * matrix.d;
            var dx = this.a * matrix.tx + this.c * matrix.ty + this.tx;
            var dy = this.b * matrix.tx + this.d * matrix.ty + this.ty;
            this.a = m11;
            this.b = m12;
            this.c = m21;
            this.d = m22;
            this.tx = dx;
            this.ty = dy;
            return this;
        };
        Matrix3.prototype.transpose = function () {
            var tmp, m = this.values;
            tmp = m[1];
            m[1] = m[3];
            m[3] = tmp;
            tmp = m[2];
            m[2] = m[6];
            m[6] = tmp;
            tmp = m[5];
            m[5] = m[7];
            m[7] = tmp;
            return this;
        };
        Matrix3.prototype.copy = function () {
            return Matrix3.create().set(this);
        };
        Matrix3.prototype.set = function (matrix) {
            var te = this.values, values = matrix.values;
            te[0] = values[0];
            te[3] = values[3];
            te[6] = values[6];
            te[1] = values[1];
            te[4] = values[4];
            te[7] = values[7];
            te[2] = values[2];
            te[5] = values[5];
            te[8] = values[8];
            return this;
        };
        Matrix3.prototype.setTS = function (t, s) {
            this.setPosition(t.x, t.y);
            this.setScale(s.x, s.y);
        };
        Matrix3.prototype.rotate = function (angle) {
            var rad = angle * wd.DEG_TO_RAD;
            var c = Math.cos(rad);
            var s = Math.sin(rad);
            var m11 = this.a * c + this.c * s;
            var m12 = this.b * c + this.d * s;
            var m21 = this.a * -s + this.c * c;
            var m22 = this.b * -s + this.d * c;
            this.a = m11;
            this.b = m12;
            this.c = m21;
            this.d = m22;
            return this;
        };
        Matrix3.prototype.setRotation = function (angle) {
            var rad = angle * wd.DEG_TO_RAD;
            var cos_a = Math.cos(rad);
            var sin_a = Math.sin(rad);
            var values = this.values;
            values[0] = cos_a;
            values[1] = -sin_a;
            values[3] = sin_a;
            values[4] = cos_a;
            return this;
        };
        Matrix3.prototype.translate = function (x, y) {
            this.tx += this.a * x + this.c * y;
            this.ty += this.b * x + this.d * y;
        };
        Matrix3.prototype.setPosition = function (x, y) {
            this.tx = x;
            this.ty = y;
        };
        Matrix3.prototype.scale = function (x, y) {
            this.a *= x;
            this.b *= x;
            this.c *= y;
            this.d *= y;
            return this;
        };
        Matrix3.prototype.setScale = function (x, y) {
            var values = this.values;
            values[0] = x;
            values[4] = y;
            return this;
        };
        Matrix3.prototype.getTranslation = function () {
            return wd.Vector2.create(this.tx, this.ty);
        };
        Matrix3.prototype.getScale = function () {
            return wd.Vector2.create(Math.sqrt(this.a * this.a + this.b * this.b), Math.sqrt(this.c * this.c + this.d * this.d));
        };
        Matrix3.prototype.getRotation = function () {
            return this._getSkewX();
        };
        Matrix3.prototype.getSkew = function () {
            return wd.Vector2.create(this._getSkewX(), this._getSkewY());
        };
        Matrix3.prototype._getDeltaTransformPoint = function (matrix, point) {
            return {
                x: point.x * matrix.a + point.y * matrix.c + 0,
                y: point.x * matrix.b + point.y * matrix.d + 0
            };
        };
        Matrix3.prototype._getSkewX = function () {
            var px = this._getDeltaTransformPoint(this, { x: 0, y: 1 });
            return ((180 / Math.PI) * Math.atan2(px.y, px.x) - 90);
        };
        Matrix3.prototype._getSkewY = function () {
            var py = this._getDeltaTransformPoint(this, { x: 1, y: 0 });
            return ((180 / Math.PI) * Math.atan2(py.y, py.x));
        };
        return Matrix3;
    }());
    wd.Matrix3 = Matrix3;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var Quaternion = (function () {
        function Quaternion(x, y, z, w) {
            if (x === void 0) { x = 0; }
            if (y === void 0) { y = 0; }
            if (z === void 0) { z = 0; }
            if (w === void 0) { w = 1; }
            this.x = null;
            this.y = null;
            this.z = null;
            this.w = null;
            this.x = x;
            this.y = y;
            this.z = z;
            this.w = w;
        }
        Quaternion.create = function (x, y, z, w) {
            var obj = new this(x, y, z, w);
            return obj;
        };
        Quaternion.prototype.setFromEulerAngles = function (eulerAngles) {
            var sx, cx, sy, cy, sz, cz, halfToRad, ex = eulerAngles.x, ey = eulerAngles.y, ez = eulerAngles.z;
            halfToRad = 0.5 * wd.DEG_TO_RAD;
            ex *= halfToRad;
            ey *= halfToRad;
            ez *= halfToRad;
            sx = Math.sin(ex);
            cx = Math.cos(ex);
            sy = Math.sin(ey);
            cy = Math.cos(ey);
            sz = Math.sin(ez);
            cz = Math.cos(ez);
            this.x = sx * cy * cz - cx * sy * sz;
            this.y = cx * sy * cz + sx * cy * sz;
            this.z = cx * cy * sz - sx * sy * cz;
            this.w = cx * cy * cz + sx * sy * sz;
            return this;
        };
        Quaternion.prototype.multiply = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var q1x, q1y, q1z, q1w, q2x, q2y, q2z, q2w, rhs1, rhs2, result = this;
            if (args.length === 1) {
                rhs1 = this;
                rhs2 = args[0];
            }
            else if (args.length === 2) {
                rhs1 = args[0];
                rhs2 = args[1];
            }
            q1x = rhs1.x;
            q1y = rhs1.y;
            q1z = rhs1.z;
            q1w = rhs1.w;
            q2x = rhs2.x;
            q2y = rhs2.y;
            q2z = rhs2.z;
            q2w = rhs2.w;
            result.x = q1w * q2x + q1x * q2w + q1y * q2z - q1z * q2y;
            result.y = q1w * q2y + q1y * q2w + q1z * q2x - q1x * q2z;
            result.z = q1w * q2z + q1z * q2w + q1x * q2y - q1y * q2x;
            result.w = q1w * q2w - q1x * q2x - q1y * q2y - q1z * q2z;
            return result;
        };
        Quaternion.prototype.setFromMatrix = function (matrix) {
            var m00, m01, m02, m10, m11, m12, m20, m21, m22, tr, s, rs, lx, ly, lz, m;
            m = matrix.values;
            m00 = m[0];
            m01 = m[1];
            m02 = m[2];
            m10 = m[4];
            m11 = m[5];
            m12 = m[6];
            m20 = m[8];
            m21 = m[9];
            m22 = m[10];
            lx = 1 / Math.sqrt(m00 * m00 + m01 * m01 + m02 * m02);
            ly = 1 / Math.sqrt(m10 * m10 + m11 * m11 + m12 * m12);
            lz = 1 / Math.sqrt(m20 * m20 + m21 * m21 + m22 * m22);
            m00 *= lx;
            m01 *= lx;
            m02 *= lx;
            m10 *= ly;
            m11 *= ly;
            m12 *= ly;
            m20 *= lz;
            m21 *= lz;
            m22 *= lz;
            tr = m00 + m11 + m22;
            if (tr >= 0) {
                s = Math.sqrt(tr + 1);
                this.w = s * 0.5;
                s = 0.5 / s;
                this.x = (m12 - m21) * s;
                this.y = (m20 - m02) * s;
                this.z = (m01 - m10) * s;
            }
            else {
                if (m00 > m11) {
                    if (m00 > m22) {
                        rs = (m00 - (m11 + m22)) + 1;
                        rs = Math.sqrt(rs);
                        this.x = rs * 0.5;
                        rs = 0.5 / rs;
                        this.w = (m12 - m21) * rs;
                        this.y = (m01 + m10) * rs;
                        this.z = (m02 + m20) * rs;
                    }
                    else {
                        rs = (m22 - (m00 + m11)) + 1;
                        rs = Math.sqrt(rs);
                        this.z = rs * 0.5;
                        rs = 0.5 / rs;
                        this.w = (m01 - m10) * rs;
                        this.x = (m20 + m02) * rs;
                        this.y = (m21 + m12) * rs;
                    }
                }
                else if (m11 > m22) {
                    rs = (m11 - (m22 + m00)) + 1;
                    rs = Math.sqrt(rs);
                    this.y = rs * 0.5;
                    rs = 0.5 / rs;
                    this.w = (m20 - m02) * rs;
                    this.z = (m12 + m21) * rs;
                    this.x = (m10 + m01) * rs;
                }
                else {
                    rs = (m22 - (m00 + m11)) + 1;
                    rs = Math.sqrt(rs);
                    this.z = rs * 0.5;
                    rs = 0.5 / rs;
                    this.w = (m01 - m10) * rs;
                    this.x = (m20 + m02) * rs;
                    this.y = (m21 + m12) * rs;
                }
            }
            return this;
        };
        Quaternion.prototype.setFromAxisAngle = function (angle, axis) {
            var sa, ca;
            axis = axis.normalize();
            angle *= 0.5 * wd.DEG_TO_RAD;
            sa = Math.sin(angle);
            ca = Math.cos(angle);
            this.x = sa * axis.x;
            this.y = sa * axis.y;
            this.z = sa * axis.z;
            this.w = ca;
            return this;
        };
        Quaternion.prototype.invert = function () {
            return this.conjugate().normalize();
        };
        Quaternion.prototype.conjugate = function () {
            this.x *= -1;
            this.y *= -1;
            this.z *= -1;
            return this;
        };
        Quaternion.prototype.clone = function () {
            return Quaternion.create(this.x, this.y, this.z, this.w);
        };
        Quaternion.prototype.copy = function () {
            return Quaternion.create(this.x, this.y, this.z, this.w);
        };
        Quaternion.prototype.normalize = function () {
            var len = this.length();
            if (len === 0) {
                this.x = this.y = this.z = 0;
                this.w = 1;
            }
            else {
                len = 1 / len;
                this.x *= len;
                this.y *= len;
                this.z *= len;
                this.w *= len;
            }
            return this;
        };
        Quaternion.prototype.length = function () {
            var x, y, z, w;
            x = this.x;
            y = this.y;
            z = this.z;
            w = this.w;
            return Math.sqrt(x * x + y * y + z * z + w * w);
        };
        Quaternion.prototype.multiplyVector3 = function (vector) {
            var q = this;
            var x = vector.x;
            var y = vector.y;
            var z = vector.z;
            var qx = q.x;
            var qy = q.y;
            var qz = q.z;
            var qw = q.w;
            var ix = qw * x + qy * z - qz * y;
            var iy = qw * y + qz * x - qx * z;
            var iz = qw * z + qx * y - qy * x;
            var iw = -qx * x - qy * y - qz * z;
            return wd.Vector3.create(ix * qw + iw * -qx + iy * -qz - iz * -qy, iy * qw + iw * -qy + iz * -qx - ix * -qz, iz * qw + iw * -qz + ix * -qy - iy * -qx);
        };
        Quaternion.prototype.set = function (x, y, z, w) {
            this.x = x;
            this.y = y;
            this.z = z;
            this.w = w;
        };
        Quaternion.prototype.sub = function (quat) {
            var result = quat.copy().invert().multiply(this);
            this.set(result.x, result.y, result.z, result.w);
            return this;
        };
        Quaternion.prototype.getEulerAngles = function () {
            var x, y, z, qx, qy, qz, qw, a2;
            qx = this.x;
            qy = this.y;
            qz = this.z;
            qw = this.w;
            a2 = 2 * (qw * qy - qx * qz);
            if (a2 <= -0.99999) {
                x = 2 * Math.atan2(qx, qw);
                y = -Math.PI / 2;
                z = 0;
            }
            else if (a2 >= 0.99999) {
                x = 2 * Math.atan2(qx, qw);
                y = Math.PI / 2;
                z = 0;
            }
            else {
                x = Math.atan2(2 * (qw * qx + qy * qz), 1 - 2 * (qx * qx + qy * qy));
                y = Math.asin(a2);
                z = Math.atan2(2 * (qw * qz + qx * qy), 1 - 2 * (qy * qy + qz * qz));
            }
            return wd.Vector3.create(x, y, z).scale(wd.RAD_TO_DEG);
        };
        Quaternion.prototype.slerp = function (left, right, amount) {
            var num2;
            var num3;
            var num = amount;
            var num4 = (((left.x * right.x) + (left.y * right.y)) + (left.z * right.z)) + (left.w * right.w);
            var flag = false;
            if (num4 < 0) {
                flag = true;
                num4 = -num4;
            }
            if (num4 > 0.999999) {
                num3 = 1 - num;
                num2 = flag ? -num : num;
            }
            else {
                var num5 = Math.acos(num4);
                var num6 = (1.0 / Math.sin(num5));
                num3 = (Math.sin((1.0 - num) * num5)) * num6;
                num2 = flag ? ((-Math.sin(num * num5)) * num6) : ((Math.sin(num * num5)) * num6);
            }
            return Quaternion.create((num3 * left.x) + (num2 * right.x), (num3 * left.y) + (num2 * right.y), (num3 * left.z) + (num2 * right.z), (num3 * left.w) + (num2 * right.w));
        };
        return Quaternion;
    }());
    wd.Quaternion = Quaternion;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var Plane = (function () {
        function Plane(a, b, c, d) {
            this.normal = wd.Vector3.create(0, 1, 0);
            this.d = 0;
            this.normal = wd.Vector3.create(a, b, c);
            this.d = d;
        }
        Plane.create = function (a, b, c, d) {
            var obj = new this(a, b, c, d);
            return obj;
        };
        Plane.prototype.getReflectionMatrix = function () {
            this.normalize();
            var x = this.normal.x;
            var y = this.normal.y;
            var z = this.normal.z;
            var temp = -2 * x;
            var temp2 = -2 * y;
            var temp3 = -2 * z;
            var result = wd.Matrix4.create();
            result.values[0] = (temp * x) + 1;
            result.values[1] = temp2 * x;
            result.values[2] = temp3 * x;
            result.values[3] = 0.0;
            result.values[4] = temp * y;
            result.values[5] = (temp2 * y) + 1;
            result.values[6] = temp3 * y;
            result.values[7] = 0.0;
            result.values[8] = temp * z;
            result.values[9] = temp2 * z;
            result.values[10] = (temp3 * z) + 1;
            result.values[11] = 0.0;
            result.values[12] = temp * this.d;
            result.values[13] = temp2 * this.d;
            result.values[14] = temp3 * this.d;
            result.values[15] = 1.0;
            return result;
        };
        Plane.prototype.normalize = function () {
            var norm = (Math.sqrt((this.normal.x * this.normal.x) + (this.normal.y * this.normal.y) + (this.normal.z * this.normal.z)));
            var magnitude = 0;
            if (norm !== 0) {
                magnitude = 1.0 / norm;
            }
            this.normal.x *= magnitude;
            this.normal.y *= magnitude;
            this.normal.z *= magnitude;
            this.d *= magnitude;
            return this;
        };
        Plane.prototype.copy = function () {
            return Plane.create(this.normal.x, this.normal.y, this.normal.z, this.d);
        };
        Plane.prototype.dotCoordinate = function (point) {
            return ((((this.normal.x * point.x) + (this.normal.y * point.y)) + (this.normal.z * point.z)) + this.d);
        };
        return Plane;
    }());
    wd.Plane = Plane;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var Ray = (function () {
        function Ray(origin, direction) {
            this._origin = null;
            this._direction = null;
            this._origin = origin;
            this._direction = direction;
        }
        Ray.create = function (origin, direction) {
            var obj = new this(origin, direction);
            return obj;
        };
        Ray.prototype.isIntersectWithAABB = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var center = null, halfExtends = null, diff = wd.Vector3.create(), absDiff = null, absDir = null, cross = wd.Vector3.create(), prod = wd.Vector3.create(), rayOrigin = this._origin, rayDir = this._direction;
            if (args.length === 1) {
                var aabb = args[0];
                center = aabb.center;
                halfExtends = aabb.halfExtents;
            }
            else if (args.length === 2) {
                var minPoint = args[0], maxPoint = args[1];
                center = wd.AABBShape.getCenter(minPoint, maxPoint);
                halfExtends = wd.AABBShape.getHalfExtents(minPoint, maxPoint);
            }
            diff.sub2(rayOrigin, center);
            absDiff = wd.Vector3.create(Math.abs(diff.x), Math.abs(diff.y), Math.abs(diff.z));
            prod.mul2(diff, rayDir);
            if (absDiff.x > halfExtends.x && prod.x >= 0) {
                return false;
            }
            if (absDiff.y > halfExtends.y && prod.y >= 0) {
                return false;
            }
            if (absDiff.z > halfExtends.z && prod.z >= 0) {
                return false;
            }
            absDir = wd.Vector3.create(Math.abs(rayDir.x), Math.abs(rayDir.y), Math.abs(rayDir.z));
            cross.cross(rayDir, diff);
            cross.set(Math.abs(cross.x), Math.abs(cross.y), Math.abs(cross.z));
            if (cross.x > halfExtends.y * absDir.z + halfExtends.z * absDir.y) {
                return false;
            }
            if (cross.y > halfExtends.x * absDir.z + halfExtends.z * absDir.x) {
                return false;
            }
            if (cross.z > halfExtends.x * absDir.y + halfExtends.y * absDir.x) {
                return false;
            }
            return true;
        };
        Ray.prototype.isIntersectWithSphere = function (sphere) {
            var center = sphere.center, radius = sphere.radius, diff = wd.Vector3.create(), a = 0, b = 0, c = 0, discr = 0, rayOrigin = this._origin, rayDir = this._direction;
            diff.sub2(rayOrigin, center);
            if (diff.dot(diff) < radius * radius) {
                return true;
            }
            a = rayDir.dot(rayDir);
            b = 2 * rayDir.dot(diff);
            c = center.dot(center);
            c += rayOrigin.dot(rayOrigin);
            c -= 2 * center.dot(rayOrigin);
            c -= radius * radius;
            discr = (b * b) - (4 * a * c);
            if (discr < 0) {
                return false;
            }
            return true;
        };
        return Ray;
    }());
    wd.Ray = Ray;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var Entity = (function () {
        function Entity() {
            this.uid = null;
            this._tagList = wdCb.Collection.create();
            this.uid = Entity._count;
            Entity._count += 1;
        }
        Entity.prototype.addTag = function (tag) {
            this._tagList.addChild(tag);
        };
        Entity.prototype.removeTag = function (tag) {
            this._tagList.removeChild(tag);
        };
        Entity.prototype.getTagList = function () {
            return this._tagList;
        };
        Entity.prototype.hasTag = function (tag) {
            return this._tagList.hasChild(tag);
        };
        Entity.prototype.containTag = function (tag) {
            return this._tagList.hasChild(function (t) {
                return t.indexOf(tag) > -1;
            });
        };
        Entity._count = 1;
        return Entity;
    }());
    wd.Entity = Entity;
})(wd || (wd = {}));
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var wd;
(function (wd) {
    var Component = (function (_super) {
        __extends(Component, _super);
        function Component() {
            _super.apply(this, arguments);
            this.entityObject = null;
        }
        Component.prototype.init = function () {
        };
        Component.prototype.dispose = function () {
        };
        Object.defineProperty(Component.prototype, "transform", {
            get: function () {
                if (!this.entityObject) {
                    return null;
                }
                return this.entityObject.transform;
            },
            enumerable: true,
            configurable: true
        });
        Component.prototype.addToObject = function (entityObject) {
            if (this.entityObject) {
                this.entityObject.removeComponent(this);
            }
            this.entityObject = entityObject;
        };
        Component.prototype.removeFromObject = function (entityObject) {
            this.entityObject = null;
        };
        __decorate([
            wd.virtual
        ], Component.prototype, "init", null);
        __decorate([
            wd.virtual
        ], Component.prototype, "dispose", null);
        return Component;
    }(wd.Entity));
    wd.Component = Component;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var Scheduler = (function () {
        function Scheduler() {
            this._scheduleCount = 0;
            this._schedules = wdCb.Hash.create();
        }
        Scheduler.create = function () {
            var obj = new this();
            return obj;
        };
        Scheduler.prototype.update = function (elapsedTime) {
            var _this = this;
            this._schedules.forEach(function (scheduleItem, scheduleId) {
                if (scheduleItem.isStop || scheduleItem.isPause) {
                    return;
                }
                scheduleItem.update(elapsedTime);
                if (scheduleItem.isFinish) {
                    _this.remove(scheduleId);
                }
            });
        };
        Scheduler.prototype.scheduleLoop = function (task, args) {
            if (args === void 0) { args = []; }
            return this._schedule(LoopScheduleItem, Array.prototype.slice.call(arguments, 0));
        };
        Scheduler.prototype.scheduleFrame = function (task, frame, args) {
            if (frame === void 0) { frame = 1; }
            return this._schedule(FrameScheduleItem, Array.prototype.slice.call(arguments, 0));
        };
        Scheduler.prototype.scheduleInterval = function (task, time, args) {
            if (time === void 0) { time = 0; }
            return this._schedule(IntervalScheduleItem, Array.prototype.slice.call(arguments, 0));
        };
        Scheduler.prototype.scheduleTime = function (task, time, args) {
            if (time === void 0) { time = 0; }
            return this._schedule(TimeScheduleItem, Array.prototype.slice.call(arguments, 0));
        };
        Scheduler.prototype.pause = function (scheduleId) {
            if (arguments.length === 0) {
                var self_1 = this;
                this._schedules.forEach(function (scheduleItem, scheduleId) {
                    self_1.pause(scheduleId);
                });
            }
            else if (arguments.length === 1) {
                var scheduleItem = this._schedules.getChild(arguments[0]);
                scheduleItem.pause();
            }
        };
        Scheduler.prototype.resume = function (scheduleId) {
            if (arguments.length === 0) {
                var self_2 = this;
                this._schedules.forEach(function (scheduleItem, scheduleId) {
                    self_2.resume(scheduleId);
                });
            }
            else if (arguments.length === 1) {
                var scheduleItem = this._schedules.getChild(arguments[0]);
                scheduleItem.resume();
            }
        };
        Scheduler.prototype.start = function (scheduleId) {
            if (arguments.length === 0) {
                var self_3 = this;
                this._schedules.forEach(function (scheduleItem, scheduleId) {
                    self_3.start(scheduleId);
                });
            }
            else if (arguments.length === 1) {
                var scheduleItem = this._schedules.getChild(arguments[0]);
                scheduleItem.start();
            }
        };
        Scheduler.prototype.stop = function (scheduleId) {
            if (arguments.length === 0) {
                var self_4 = this;
                this._schedules.forEach(function (scheduleItem, scheduleId) {
                    self_4.stop(scheduleId);
                });
            }
            else if (arguments.length === 1) {
                var scheduleItem = this._schedules.getChild(arguments[0]);
                scheduleItem.stop();
            }
        };
        Scheduler.prototype.has = function (scheduleId) {
            return !!this._schedules.hasChild(scheduleId);
        };
        Scheduler.prototype.remove = function (scheduleId) {
            this._schedules.removeChild(scheduleId);
        };
        Scheduler.prototype.removeAll = function () {
            this._schedules.removeAllChildren();
        };
        Scheduler.prototype._schedule = function (_class, args) {
            var scheduleId = this._buildId();
            this._schedules.setValue(scheduleId, _class.create.apply(_class, args));
            return scheduleId;
        };
        Scheduler.prototype._buildId = function () {
            return 'Schedule_' + (this._scheduleCount++);
        };
        return Scheduler;
    }());
    wd.Scheduler = Scheduler;
    var ScheduleItem = (function () {
        function ScheduleItem(task, args) {
            this.isPause = false;
            this.isStop = false;
            this.pauseTime = null;
            this.pauseElapsed = null;
            this.startTime = null;
            this.isFinish = false;
            this.task = null;
            this.args = null;
            this.timeController = wd.CommonTimeController.create();
            this.task = task;
            this.args = args;
        }
        ScheduleItem.prototype.pause = function () {
            this.isPause = true;
            this.timeController.pause();
        };
        ScheduleItem.prototype.resume = function () {
            this.isPause = false;
            this.timeController.resume();
        };
        ScheduleItem.prototype.start = function () {
            this.isStop = false;
            this.timeController.start();
        };
        ScheduleItem.prototype.stop = function () {
            this.isStop = true;
            this.timeController.stop();
        };
        ScheduleItem.prototype.finish = function () {
            this.isFinish = true;
        };
        return ScheduleItem;
    }());
    var TimeScheduleItem = (function (_super) {
        __extends(TimeScheduleItem, _super);
        function TimeScheduleItem(task, time, args) {
            if (time === void 0) { time = 0; }
            if (args === void 0) { args = []; }
            _super.call(this, task, args);
            this._time = null;
            this._time = time;
        }
        TimeScheduleItem.create = function (task, time, args) {
            if (time === void 0) { time = 0; }
            if (args === void 0) { args = []; }
            var obj = new this(task, time, args);
            return obj;
        };
        TimeScheduleItem.prototype.update = function (elapsedTime) {
            var elapsed = this.timeController.computeElapseTime(elapsedTime);
            if (elapsed >= this._time) {
                this.task.apply(this, this.args);
                this.finish();
            }
        };
        return TimeScheduleItem;
    }(ScheduleItem));
    var IntervalScheduleItem = (function (_super) {
        __extends(IntervalScheduleItem, _super);
        function IntervalScheduleItem(task, time, args) {
            if (time === void 0) { time = 0; }
            if (args === void 0) { args = []; }
            _super.call(this, task, args);
            this._intervalTime = null;
            this._elapsed = 0;
            this._intervalTime = time;
        }
        IntervalScheduleItem.create = function (task, time, args) {
            if (time === void 0) { time = 0; }
            if (args === void 0) { args = []; }
            var obj = new this(task, time, args);
            return obj;
        };
        IntervalScheduleItem.prototype.update = function (elapsedTime) {
            var elapsed = this.timeController.computeElapseTime(elapsedTime);
            if (elapsed - this._elapsed >= this._intervalTime) {
                this.task.apply(this, this.args);
                this._elapsed = elapsed;
            }
        };
        IntervalScheduleItem.prototype.start = function () {
            _super.prototype.start.call(this);
            this._elapsed = 0;
        };
        return IntervalScheduleItem;
    }(ScheduleItem));
    var LoopScheduleItem = (function (_super) {
        __extends(LoopScheduleItem, _super);
        function LoopScheduleItem() {
            _super.apply(this, arguments);
        }
        LoopScheduleItem.create = function (task, args) {
            if (args === void 0) { args = []; }
            var obj = new this(task, args);
            return obj;
        };
        LoopScheduleItem.prototype.update = function (elapsedTime) {
            this.task.apply(this, this.args);
        };
        return LoopScheduleItem;
    }(ScheduleItem));
    var FrameScheduleItem = (function (_super) {
        __extends(FrameScheduleItem, _super);
        function FrameScheduleItem(task, frame, args) {
            if (frame === void 0) { frame = 1; }
            if (args === void 0) { args = []; }
            _super.call(this, task, args);
            this._frame = null;
            this._frame = frame;
        }
        FrameScheduleItem.create = function (task, frame, args) {
            if (frame === void 0) { frame = 1; }
            if (args === void 0) { args = []; }
            var obj = new this(task, frame, args);
            return obj;
        };
        FrameScheduleItem.prototype.update = function (elapsedTime) {
            this._frame--;
            if (this._frame <= 0) {
                this.task.apply(this, this.args);
                this.finish();
            }
        };
        return FrameScheduleItem;
    }(ScheduleItem));
})(wd || (wd = {}));
var wd;
(function (wd) {
    var EGameState;
    (function (EGameState) {
        EGameState[EGameState["NORMAL"] = 0] = "NORMAL";
        EGameState[EGameState["STOP"] = 1] = "STOP";
        EGameState[EGameState["PAUSE"] = 2] = "PAUSE";
    })(EGameState || (EGameState = {}));
    var Director = (function () {
        function Director() {
            this.scene = null;
            this.scheduler = null;
            this.renderer = null;
            this._gameLoop = null;
            this._eventSubscription = null;
            this._gameState = EGameState.NORMAL;
            this._timeController = wd.DirectorTimeController.create();
            this._domEventManager = wd.DomEventManager.create();
        }
        Director.getInstance = function () {
            if (this._instance === null) {
                this._instance = new this();
                this._instance.initWhenCreate();
            }
            return this._instance;
        };
        Object.defineProperty(Director.prototype, "gameTime", {
            get: function () {
                return this._timeController.gameTime;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Director.prototype, "fps", {
            get: function () {
                return this._timeController.fps;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Director.prototype, "isNormal", {
            get: function () {
                return this._gameState === EGameState.NORMAL;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Director.prototype, "isStop", {
            get: function () {
                return this._gameState === EGameState.STOP;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Director.prototype, "isPause", {
            get: function () {
                return this._gameState === EGameState.PAUSE;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Director.prototype, "isTimeChange", {
            get: function () {
                return this._timeController.isTimeChange;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Director.prototype, "elapsed", {
            get: function () {
                return this._timeController.elapsed;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Director.prototype, "view", {
            get: function () {
                return wd.DeviceManager.getInstance().view;
            },
            enumerable: true,
            configurable: true
        });
        Director.prototype.initWhenCreate = function () {
            this.scene = wd.SceneDispatcher.create();
            this.scheduler = wd.Scheduler.create();
            this.renderer = wd.WebGLRenderer.create();
        };
        Director.prototype.start = function () {
            this._gameState = EGameState.NORMAL;
            this._startLoop();
        };
        Director.prototype.stop = function () {
            this._gameLoop && this._gameLoop.dispose();
            this._gameState = EGameState.STOP;
            this._timeController.stop();
            this.scheduler.stop();
            this._eventSubscription && this._eventSubscription.dispose();
        };
        Director.prototype.pause = function () {
            if (this._gameState === EGameState.PAUSE) {
                return;
            }
            this._gameState = EGameState.PAUSE;
            this._timeController.pause();
            this.scheduler.pause();
        };
        Director.prototype.resume = function () {
            this._gameState = EGameState.NORMAL;
            this._timeController.resume();
            this.scheduler.resume();
        };
        Director.prototype.getDeltaTime = function () {
            return this._timeController.deltaTime;
        };
        Director.prototype.initUIObjectScene = function () {
            var uiObjectScene = this.scene.uiObjectScene;
            this._initDomEvent();
            uiObjectScene.onEnter();
            uiObjectScene.init();
        };
        Director.prototype.runUIObjectScene = function (elapseTime) {
            var uiObjectScene = this.scene.uiObjectScene;
            wd.EventManager.trigger(uiObjectScene, wd.CustomEvent.create(wd.EEngineEvent.STARTLOOP));
            uiObjectScene.update(elapseTime);
            wd.EventManager.trigger(uiObjectScene, wd.CustomEvent.create(wd.EEngineEvent.ENDLOOP));
        };
        Director.prototype._startLoop = function () {
            var self = this;
            this._gameLoop = this._buildInitStream()
                .ignoreElements()
                .concat(this._buildLoopStream())
                .subscribe(function (time) {
                self._loopBody(time);
            });
        };
        Director.prototype._buildInitStream = function () {
            var _this = this;
            return wdFrp.callFunc(function () {
                _this._init();
            }, this);
        };
        Director.prototype._init = function () {
            this._initGameObjectScene();
            this.initUIObjectScene();
            wd.DebugStatistics.init();
        };
        Director.prototype._initGameObjectScene = function () {
            var gameObjectScene = this.scene.gameObjectScene;
            this._initDomEvent();
            wd.EventManager.trigger(wd.CustomEvent.create(wd.EEngineEvent.BEFORE_GAMEOBJECT_INIT));
            gameObjectScene.onEnter();
            gameObjectScene.init();
            this.renderer.init();
            this._timeController.start();
            this.scheduler.start();
            wd.EventManager.trigger(wd.CustomEvent.create(wd.EEngineEvent.AFTER_GAMEOBJECT_INIT));
            wd.EventManager.trigger(wd.CustomEvent.create(wd.EEngineEvent.AFTER_GAMEOBJECT_INIT_RIGIDBODY_ADD_CONSTRAINT));
        };
        Director.prototype._buildLoopStream = function () {
            return wdFrp.intervalRequest();
        };
        Director.prototype._loopBody = function (time) {
            var elapseTime = null;
            if (this._gameState === EGameState.PAUSE || this._gameState === EGameState.STOP) {
                return false;
            }
            elapseTime = this._timeController.computeElapseTime(time);
            this._run(elapseTime);
            return true;
        };
        Director.prototype._run = function (elapseTime) {
            this._runGameObjectScene(elapseTime);
            this.runUIObjectScene(elapseTime);
        };
        Director.prototype._runGameObjectScene = function (elapseTime) {
            var gameObjectScene = this.scene.gameObjectScene;
            this._timeController.tick(elapseTime);
            wd.EventManager.trigger(wd.CustomEvent.create(wd.EEngineEvent.STARTLOOP));
            this.scheduler.update(elapseTime);
            gameObjectScene.update(elapseTime);
            gameObjectScene.render(this.renderer);
            if (this.renderer.hasCommand()) {
                this.renderer.render();
            }
            wd.EventManager.trigger(wd.CustomEvent.create(wd.EEngineEvent.ENDLOOP));
        };
        Director.prototype._initDomEvent = function () {
            this._eventSubscription = this._domEventManager.initDomEvent();
        };
        Director._instance = null;
        __decorate([
            wd.execOnlyOnce("_isInitUIScene")
        ], Director.prototype, "initUIObjectScene", null);
        __decorate([
            wd.execOnlyOnce("_isInitDomEvent")
        ], Director.prototype, "_initDomEvent", null);
        return Director;
    }());
    wd.Director = Director;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var Main = (function () {
        function Main() {
        }
        Object.defineProperty(Main, "isTest", {
            get: function () {
                return this._isTest;
            },
            set: function (isTest) {
                this._isTest = isTest;
                wdFrp.Main.isTest = isTest;
            },
            enumerable: true,
            configurable: true
        });
        Main.setConfig = function (_a) {
            var canvasId = _a.canvasId, _b = _a.isTest, isTest = _b === void 0 ? wd.DebugConfig.isTest : _b, _c = _a.screenSize, screenSize = _c === void 0 ? wd.EScreenSize.FULL : _c;
            this.isTest = isTest;
            this.screenSize = screenSize;
            this._canvasId = canvasId;
            return this;
        };
        Main.init = function () {
            wd.DeviceManager.getInstance().createGL(this._canvasId);
            wd.DeviceManager.getInstance().setScreen();
            wd.GPUDetector.getInstance().detect();
            return this;
        };
        Main._isTest = false;
        Main.screenSize = null;
        Main._canvasId = null;
        return Main;
    }());
    wd.Main = Main;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var DomEventManager = (function () {
        function DomEventManager() {
            this._lastTriggerList = null;
        }
        DomEventManager.create = function () {
            var obj = new this();
            return obj;
        };
        Object.defineProperty(DomEventManager.prototype, "scene", {
            get: function () {
                return wd.Director.getInstance().scene;
            },
            enumerable: true,
            configurable: true
        });
        DomEventManager.prototype.initDomEvent = function () {
            var self = this;
            return wdFrp.fromArray([
                wd.EventManager.fromEvent(wd.EEventName.CLICK),
                wd.EventManager.fromEvent(wd.EEventName.MOUSEDOWN),
                wd.EventManager.fromEvent(wd.EEventName.MOUSEUP),
                wd.EventManager.fromEvent(wd.EEventName.MOUSEWHEEL),
                this._buildMouseDragStream()
            ])
                .mergeAll()
                .filter(function (e) {
                return !wd.Director.getInstance().isPause;
            })
                .map(function (e) {
                return self._getMouseEventTriggerListData(e);
            })
                .merge(wd.EventManager.fromEvent(wd.EEventName.MOUSEMOVE)
                .filter(function (e) {
                return !wd.Director.getInstance().isPause;
            })
                .map(function (e) {
                var triggerList = self._getMouseEventTriggerList(e);
                var _a = self._getMouseOverAndMouseOutObject(triggerList, self._lastTriggerList), mouseoverObjects = _a.mouseoverObjects, mouseoutObjects = _a.mouseoutObjects;
                self._setMouseOverTag(mouseoverObjects);
                self._setMouseOutTag(mouseoutObjects);
                self._lastTriggerList = triggerList.copy();
                triggerList = mouseoutObjects.addChildren(triggerList);
                return self._getMouseEventTriggerListData(e, triggerList);
            }))
                .filter(function (_a) {
                var triggerList = _a[0], e = _a[1];
                return triggerList.getCount() > 0;
            })
                .subscribe(function (_a) {
                var triggerList = _a[0], e = _a[1];
                triggerList.forEach(function (entityObject) {
                    self._trigger(e.copy(), entityObject);
                });
            });
        };
        DomEventManager.prototype._buildMouseDragStream = function () {
            return wd.EventManager.fromEvent(document, wd.EEventName.MOUSEDOWN)
                .flatMap(function (e) {
                return wd.EventManager.fromEvent(document, wd.EEventName.MOUSEMOVE).takeUntil(wd.EventManager.fromEvent(document, wd.EEventName.MOUSEUP));
            })
                .map(function (e) {
                e.name = wd.EEventName.MOUSEDRAG;
                return e;
            });
        };
        DomEventManager.prototype._getMouseOverAndMouseOutObject = function (currentTriggerList, lastTriggerList) {
            var mouseoverObjects = wdCb.Collection.create(), mouseoutObjects = wdCb.Collection.create();
            if (!lastTriggerList) {
                mouseoverObjects = currentTriggerList;
            }
            else {
                lastTriggerList.forEach(function (lastObject) {
                    if (!currentTriggerList.hasChild(function (currentObject) {
                        return wd.JudgeUtils.isEqual(currentObject, lastObject);
                    })) {
                        mouseoutObjects.addChild(lastObject);
                    }
                });
                currentTriggerList.forEach(function (currentObject) {
                    if (!lastTriggerList.hasChild(function (lastObject) {
                        return wd.JudgeUtils.isEqual(currentObject, lastObject);
                    })) {
                        mouseoverObjects.addChild(currentObject);
                    }
                });
            }
            return {
                mouseoverObjects: mouseoverObjects,
                mouseoutObjects: mouseoutObjects
            };
        };
        DomEventManager.prototype._setMouseOverTag = function (objects) {
            objects.forEach(function (object) {
                object.addTag(EEventTag.MOUSE_OVER);
            });
        };
        DomEventManager.prototype._setMouseOutTag = function (objects) {
            objects.forEach(function (object) {
                object.addTag(EEventTag.MOUSE_OUT);
            });
        };
        DomEventManager.prototype._setEventNameByEventTag = function (object, e) {
            if (object.hasTag(EEventTag.MOUSE_OVER)) {
                e.name = wd.EEventName.MOUSEOVER;
            }
            else if (object.hasTag(EEventTag.MOUSE_OUT)) {
                e.name = wd.EEventName.MOUSEOUT;
            }
            return e;
        };
        DomEventManager.prototype._removeEventTag = function (object) {
            object.removeTag(EEventTag.MOUSE_OVER);
            object.removeTag(EEventTag.MOUSE_OUT);
        };
        DomEventManager.prototype._trigger = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var e = args[0], entityObject = args[1], notSetTarget = false, event = null, customEvent = null, handlerName = null;
            if (args.length === 3 && args[2]) {
                notSetTarget = true;
                event = e;
            }
            else {
                event = this._setEventNameByEventTag(entityObject, e);
                this._removeEventTag(entityObject);
            }
            handlerName = wd.EventTriggerTable.getScriptHandlerName(event.name);
            customEvent = wd.CustomEvent.create(wd.EEngineEvent[wd.EventTriggerTable.getScriptEngineEvent(event.name)]);
            customEvent.getDataFromDomEvent(event);
            wd.EventManager.trigger(entityObject, customEvent, event, notSetTarget);
            event.getDataFromCustomEvent(customEvent);
            entityObject.execEventScript(handlerName, event);
            if (!event.isStopPropagation && entityObject.bubbleParent) {
                this._trigger(event.copy(), entityObject.bubbleParent, true);
            }
        };
        DomEventManager.prototype._getMouseEventTriggerList = function (e) {
            var topGameObject = null, topUIObject = null, triggerList = wdCb.Collection.create();
            topGameObject = this._findTopGameObject(e, this.scene.gameObjectScene);
            topUIObject = this._findTopUIObject(e, this.scene.uiObjectScene);
            if (topGameObject) {
                triggerList.addChild(topGameObject);
            }
            if (topUIObject) {
                triggerList.addChild(topUIObject);
            }
            if (this._isSceneAsTopOne(e, triggerList)) {
                triggerList.addChild(this.scene);
            }
            return triggerList;
        };
        DomEventManager.prototype._isSceneAsTopOne = function (e, triggerList) {
            return this._isTriggerScene(e) && triggerList.getCount() === 0;
        };
        DomEventManager.prototype._findTopGameObject = function (e, gameObjectScene) {
            var self = this;
            return this._findTriggerGameObjectList(e, gameObjectScene).sort(function (a, b) {
                return self._getDistanceToCamera(a) - self._getDistanceToCamera(b);
            })
                .getChild(0);
        };
        DomEventManager.prototype._getDistanceToCamera = function (obj) {
            return obj.transform.position.copy().sub(wd.Director.getInstance().scene.currentCamera.transform.position).length();
        };
        DomEventManager.prototype._findTopUIObject = function (e, uiObjectScene) {
            return this._findTriggerUIObjectList(e, uiObjectScene).sort(function (a, b) {
                return b.transform.zIndex - a.transform.zIndex;
            })
                .getChild(0);
        };
        DomEventManager.prototype._findTriggerGameObjectList = function (e, objectScene) {
            var triggerObjectList = wdCb.Collection.create(), self = this;
            var find = function (entityObject) {
                if (entityObject.hasComponent(wd.SpacePartition)) {
                    entityObject.getSpacePartition().getIntersectListWithRay(e)
                        .forEach(function (entityObject) {
                        self._addTriggerObjectByQueryDetector(entityObject, e, triggerObjectList);
                    });
                }
                else {
                    self._addTriggerObjectByQueryDetector(entityObject, e, triggerObjectList);
                    entityObject.forEach(function (child) {
                        find(child);
                    });
                }
            };
            objectScene.forEach(function (child) {
                find(child);
            });
            return triggerObjectList;
        };
        DomEventManager.prototype._findTriggerUIObjectList = function (e, objectScene) {
            var triggerObjectList = wdCb.Collection.create(), self = this;
            var find = function (entityObject) {
                self._addTriggerObjectByQueryDetector(entityObject, e, triggerObjectList);
                entityObject.forEach(function (child) {
                    find(child);
                });
            };
            objectScene.forEach(function (child) {
                find(child);
            });
            return triggerObjectList;
        };
        DomEventManager.prototype._addTriggerObjectByQueryDetector = function (entityObject, e, triggerObjectList) {
            if (entityObject.hasComponent(wd.EventTriggerDetector)) {
                var detector = entityObject.getComponent(wd.EventTriggerDetector);
                if (detector.isTrigger(e)) {
                    triggerObjectList.addChild(entityObject);
                }
            }
        };
        DomEventManager.prototype._isTriggerScene = function (e) {
            var detector = this.scene.getComponent(wd.EventTriggerDetector);
            return detector.isTrigger(e);
        };
        DomEventManager.prototype._getMouseEventTriggerListData = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            if (args.length === 1) {
                var e = args[0];
                return [this._getMouseEventTriggerList(e), e];
            }
            else {
                var e = args[0], triggerList = args[1];
                return [triggerList, e];
            }
        };
        return DomEventManager;
    }());
    wd.DomEventManager = DomEventManager;
    var EEventTag;
    (function (EEventTag) {
        EEventTag[EEventTag["MOUSE_OVER"] = "MOUSE_OVER"] = "MOUSE_OVER";
        EEventTag[EEventTag["MOUSE_OUT"] = "MOUSE_OUT"] = "MOUSE_OUT";
    })(EEventTag || (EEventTag = {}));
})(wd || (wd = {}));
var wd;
(function (wd) {
    var EntityObject = (function (_super) {
        __extends(EntityObject, _super);
        function EntityObject() {
            _super.apply(this, arguments);
            this._scriptList = wdCb.Hash.create();
            this._bubbleParent = null;
            this._transform = null;
            this.name = null;
            this.parent = null;
            this.actionManager = wd.ActionManager.create();
            this.children = wdCb.Collection.create();
            this.startLoopHandler = null;
            this.endLoopHandler = null;
            this.components = wdCb.Collection.create();
            this._scriptExecuteHistory = wdCb.Hash.create();
        }
        Object.defineProperty(EntityObject.prototype, "scriptList", {
            get: function () {
                return this._scriptList;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EntityObject.prototype, "bubbleParent", {
            get: function () {
                return this._bubbleParent ? this._bubbleParent : this.parent;
            },
            set: function (bubbleParent) {
                this._bubbleParent = bubbleParent;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EntityObject.prototype, "transform", {
            get: function () {
                return this._transform;
            },
            set: function (transform) {
                if (!transform) {
                    return;
                }
                if (this._transform) {
                    this.removeComponent(this._transform);
                }
                this.addComponent(transform);
                this._transform = transform;
            },
            enumerable: true,
            configurable: true
        });
        EntityObject.prototype.initWhenCreate = function () {
            this.transform = this.createTransform();
        };
        EntityObject.prototype.init = function () {
            var _this = this;
            this.startLoopHandler = wdCb.FunctionUtils.bind(this, function () {
                _this.onStartLoop();
            });
            this.endLoopHandler = wdCb.FunctionUtils.bind(this, function () {
                _this.onEndLoop();
            });
            this.bindStartLoopEvent();
            this.bindEndLoopEvent();
            this.initComponent();
            this.forEach(function (child) {
                child.init();
            });
            this.afterInitChildren();
            return this;
        };
        EntityObject.prototype.onStartLoop = function () {
            this.execScript("onStartLoop");
        };
        EntityObject.prototype.onEndLoop = function () {
            this.execScript("onEndLoop");
        };
        EntityObject.prototype.onEnter = function () {
        };
        EntityObject.prototype.onExit = function () {
            this.execScript("onExit");
        };
        EntityObject.prototype.onDispose = function () {
            this.execScript("onDispose");
        };
        EntityObject.prototype.dispose = function () {
            var components = null;
            this.onDispose();
            if (this.parent) {
                this.parent.removeChild(this);
                this.parent = null;
            }
            wd.EventManager.off(this);
            wd.EventManager.off(wd.EEngineEvent.STARTLOOP, this.startLoopHandler);
            wd.EventManager.off(wd.EEngineEvent.ENDLOOP, this.endLoopHandler);
            components = this.removeAllComponent();
            components.forEach(function (component) {
                component.dispose();
            });
            this.forEach(function (child) {
                child.dispose();
            });
        };
        EntityObject.prototype.hasChild = function (child) {
            return this.children.hasChild(child);
        };
        EntityObject.prototype.addChild = function (child) {
            if (child.parent) {
                child.parent.removeChild(child);
            }
            child.parent = this;
            child.transform.parent = this.transform;
            this.children.addChild(child);
            child.onEnter();
            return this;
        };
        EntityObject.prototype.addChildren = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            this.children.addChildren(args[0]);
            return this;
        };
        EntityObject.prototype.forEach = function (func) {
            this.children.forEach(func);
            return this;
        };
        EntityObject.prototype.filter = function (func) {
            return this.children.filter(func);
        };
        EntityObject.prototype.sort = function (func, isSortSelf) {
            if (isSortSelf === void 0) { isSortSelf = false; }
            return this.children.sort(func, isSortSelf);
        };
        EntityObject.prototype.getChildren = function () {
            return this.children;
        };
        EntityObject.prototype.getChild = function (index) {
            return this.children.getChild(index);
        };
        EntityObject.prototype.findChildByUid = function (uid) {
            return this.children.findOne(function (child) {
                return child.uid === uid;
            });
        };
        EntityObject.prototype.findChildByTag = function (tag) {
            return this.children.findOne(function (child) {
                return child.hasTag(tag);
            });
        };
        EntityObject.prototype.findChildByName = function (name) {
            return this.children.findOne(function (child) {
                return child.name.search(name) > -1;
            });
        };
        EntityObject.prototype.findChildrenByName = function (name) {
            return this.children.filter(function (child) {
                return child.name.search(name) > -1;
            });
        };
        EntityObject.prototype.getComponent = function (_class) {
            return this.components.findOne(function (component) {
                return component instanceof _class;
            });
        };
        EntityObject.prototype.findComponentByUid = function (uid) {
            return this.components.findOne(function (component) {
                return component.uid === uid;
            });
        };
        EntityObject.prototype.getFirstComponent = function () {
            return this.components.getChild(0);
        };
        EntityObject.prototype.forEachComponent = function (func) {
            this.components.forEach(func);
            return this;
        };
        EntityObject.prototype.removeChild = function (child) {
            child.onExit();
            this.children.removeChild(child);
            child.parent = null;
            return this;
        };
        EntityObject.prototype.hasComponent = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            if (args[0] instanceof wd.Component) {
                var component = args[0];
                return this.components.hasChild(component);
            }
            else {
                var _class_1 = args[0];
                return this.components.hasChild(function (component) {
                    return component instanceof _class_1;
                });
            }
        };
        EntityObject.prototype.addComponent = function (component) {
            if (this.hasComponent(component)) {
                wd.Log.assert(false, "the component already exist");
                return this;
            }
            this.components.addChild(component);
            component.addToObject(this);
            return this;
        };
        EntityObject.prototype.removeComponent = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var component = null;
            if (args[0] instanceof wd.Component) {
                component = args[0];
            }
            else {
                component = this.getComponent(args[0]);
            }
            this.components.removeChild(component);
            this._removeComponentHandler(component);
            return this;
        };
        EntityObject.prototype.removeAllComponent = function () {
            var _this = this;
            var result = wdCb.Collection.create();
            this.components.forEach(function (component) {
                _this._removeComponentHandler(component);
                result.addChild(component);
            }, this);
            this.components.removeAllChildren();
            return result;
        };
        EntityObject.prototype.render = function (renderer, camera) {
            var geometry = this._getGeometry(), rendererComponent = this._getRendererComponent();
            if (rendererComponent && geometry) {
                rendererComponent.render(renderer, geometry, camera);
                wd.DebugStatistics.count.renderGameObjects++;
            }
            this.getRenderList().forEach(function (child) {
                child.render(renderer, camera);
            });
        };
        EntityObject.prototype.update = function (elapsedTime) {
            var animation = this._getAnimation(), collider = this._getCollider();
            if (animation) {
                animation.update(elapsedTime);
            }
            this.actionManager.update(elapsedTime);
            this.execScript("update", elapsedTime);
            if (collider) {
                collider.update(elapsedTime);
            }
            this.beforeUpdateChildren(elapsedTime);
            this.forEach(function (child) {
                child.update(elapsedTime);
            });
        };
        EntityObject.prototype.execScript = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var method = args[0], self = this;
            if (args.length === 1) {
                this._scriptList.forEach(function (script, scriptName) {
                    script[method] && script[method]();
                    self._addToScriptExecuteHistory(scriptName, method);
                });
            }
            else if (args.length === 2) {
                var arg_1 = args[1];
                this._scriptList.forEach(function (script, scriptName) {
                    script[method] && script[method](arg_1);
                    self._addToScriptExecuteHistory(scriptName, method);
                });
            }
            else if (args.length === 3) {
                var arg_2 = args[1], isExecOnlyOnce_1 = args[2];
                this._scriptList.forEach(function (script, scriptName) {
                    if (isExecOnlyOnce_1 && self._isScriptExecuted(scriptName, method)) {
                        return;
                    }
                    script[method] && script[method](arg_2);
                    self._addToScriptExecuteHistory(scriptName, method);
                });
            }
        };
        EntityObject.prototype.execEventScript = function (method, arg) {
            this._scriptList.forEach(function (script) {
                script[method] && (arg ? script[method](arg) : script[method]());
            });
        };
        EntityObject.prototype.beforeUpdateChildren = function (elapsedTime) {
        };
        EntityObject.prototype.afterInitChildren = function () {
        };
        EntityObject.prototype.bindStartLoopEvent = function () {
            wd.EventManager.on(wd.EEngineEvent.STARTLOOP, this.startLoopHandler);
        };
        EntityObject.prototype.bindEndLoopEvent = function () {
            wd.EventManager.on(wd.EEngineEvent.ENDLOOP, this.endLoopHandler);
        };
        EntityObject.prototype.getRenderList = function () {
            if (this.children.getCount() > 100) {
                console.log(this.children.getCount());
            }
            return this.children;
        };
        EntityObject.prototype.initComponent = function () {
            if (this.hasComponent(wd.Geometry)) {
                this.getComponent(wd.Geometry).init();
            }
            this.components.filter(function (component) {
                return !(component instanceof wd.Geometry);
            })
                .forEach(function (component) {
                component.init();
            });
        };
        EntityObject.prototype.getAllChildren = function () {
            var result = wdCb.Collection.create();
            var getChildren = function (entityObject) {
                result.addChildren(entityObject.getChildren());
                entityObject.forEach(function (child) {
                    getChildren(child);
                });
            };
            getChildren(this);
            return result;
        };
        EntityObject.prototype._getGeometry = function () {
            return this.getComponent(wd.Geometry);
        };
        EntityObject.prototype._getAnimation = function () {
            return this.getComponent(wd.Animation);
        };
        EntityObject.prototype._getRendererComponent = function () {
            return this.getComponent(wd.RendererComponent);
        };
        EntityObject.prototype._getCollider = function () {
            return this.getComponent(wd.Collider);
        };
        EntityObject.prototype.getComponentCount = function (_class) {
            return this.components.filter(function (component) {
                return component instanceof _class;
            }).getCount();
        };
        EntityObject.prototype._removeComponentHandler = function (component) {
            component.removeFromObject(this);
        };
        EntityObject.prototype._addToScriptExecuteHistory = function (scriptName, method) {
            this._scriptExecuteHistory.addChild(this._buildScriptHistoryKey(scriptName, method), true);
        };
        EntityObject.prototype._isScriptExecuted = function (scriptName, method) {
            return this._scriptExecuteHistory.getChild(this._buildScriptHistoryKey(scriptName, method));
        };
        EntityObject.prototype._buildScriptHistoryKey = function (scriptName, method) {
            return scriptName + "_" + method;
        };
        __decorate([
            wd.virtual
        ], EntityObject.prototype, "initWhenCreate", null);
        __decorate([
            wd.virtual
        ], EntityObject.prototype, "beforeUpdateChildren", null);
        __decorate([
            wd.virtual
        ], EntityObject.prototype, "afterInitChildren", null);
        __decorate([
            wd.virtual
        ], EntityObject.prototype, "bindStartLoopEvent", null);
        __decorate([
            wd.virtual
        ], EntityObject.prototype, "bindEndLoopEvent", null);
        __decorate([
            wd.virtual
        ], EntityObject.prototype, "getRenderList", null);
        __decorate([
            wd.require(function () {
                wd.assert(this.getComponentCount(wd.Geometry) <= 1, wd.Log.info.FUNC_SHOULD_NOT("entityObject", "contain more than 1 geometry component"));
            })
        ], EntityObject.prototype, "_getGeometry", null);
        __decorate([
            wd.require(function () {
                wd.assert(this.getComponentCount(wd.Animation) <= 1, wd.Log.info.FUNC_SHOULD_NOT("entityObject", "contain more than 1 animation component"));
            })
        ], EntityObject.prototype, "_getAnimation", null);
        __decorate([
            wd.require(function () {
                wd.assert(this.getComponentCount(wd.RendererComponent) <= 1, wd.Log.info.FUNC_SHOULD_NOT("entityObject", "contain more than 1 rendererComponent"));
            })
        ], EntityObject.prototype, "_getRendererComponent", null);
        __decorate([
            wd.require(function () {
                wd.assert(this.getComponentCount(wd.Collider) <= 1, wd.Log.info.FUNC_SHOULD_NOT("entityObject", "contain more than 1 collider component"));
            })
        ], EntityObject.prototype, "_getCollider", null);
        return EntityObject;
    }(wd.Entity));
    wd.EntityObject = EntityObject;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var UIObject = (function (_super) {
        __extends(UIObject, _super);
        function UIObject() {
            _super.apply(this, arguments);
            this.name = "uiObject" + String(this.uid);
            this.uiManager = wd.UIManager.create(this);
        }
        UIObject.create = function () {
            var obj = new this();
            obj.initWhenCreate();
            return obj;
        };
        UIObject.prototype.beforeUpdateChildren = function (elapsedTime) {
            this.uiManager.update(elapsedTime);
        };
        UIObject.prototype.createTransform = function () {
            return wd.RectTransform.create();
        };
        UIObject.prototype.addComponent = function (component) {
            _super.prototype.addComponent.call(this, component);
            return this;
        };
        UIObject.prototype.addChild = function (child) {
            _super.prototype.addChild.call(this, child);
            return this;
        };
        __decorate([
            wd.require(function (component) {
                if (component instanceof wd.UI) {
                    wd.assert(!!!this.getComponent(wd.UI), wd.Log.info.FUNC_SHOULD("only has one UI component"));
                }
            })
        ], UIObject.prototype, "addComponent", null);
        __decorate([
            wd.require(function (child) {
                wd.assert(this.getComponent(wd.UIRenderer) === child.getComponent(wd.UIRenderer), wd.Log.info.FUNC_MUST_BE("the UIRenderer of UIObject and its children", "the same one"));
            })
        ], UIObject.prototype, "addChild", null);
        return UIObject;
    }(wd.EntityObject));
    wd.UIObject = UIObject;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var GameObject = (function (_super) {
        __extends(GameObject, _super);
        function GameObject() {
            _super.apply(this, arguments);
            this.name = "gameObject" + String(this.uid);
        }
        GameObject.create = function () {
            var obj = new this();
            obj.initWhenCreate();
            return obj;
        };
        GameObject.prototype.getSpacePartition = function () {
            return this.getComponent(wd.SpacePartition);
        };
        GameObject.prototype.addChild = function (child) {
            if (child.hasComponent(wd.CameraController)) {
                wd.Director.getInstance().scene.gameObjectScene.addToCameraList(child);
            }
            return _super.prototype.addChild.call(this, child);
        };
        GameObject.prototype.createTransform = function () {
            return wd.ThreeDTransform.create();
        };
        GameObject.prototype.getRenderList = function () {
            if (this.hasComponent(wd.Octree)) {
                return this.getSpacePartition().getRenderListByFrustumCull();
            }
            return this.children;
        };
        GameObject.prototype.afterInitChildren = function () {
            if (this.hasComponent(wd.Octree)) {
                return this.getSpacePartition().build();
            }
        };
        return GameObject;
    }(wd.EntityObject));
    wd.GameObject = GameObject;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var SceneDispatcher = (function (_super) {
        __extends(SceneDispatcher, _super);
        function SceneDispatcher() {
            _super.apply(this, arguments);
            this.name = "scene" + String(this.uid);
            this.uiObjectScene = wd.UIObjectScene.create();
            this.gameObjectScene = wd.GameObjectScene.create();
        }
        SceneDispatcher.create = function () {
            var obj = new this();
            obj.initWhenCreate();
            return obj;
        };
        Object.defineProperty(SceneDispatcher.prototype, "scriptList", {
            get: function () {
                return this.gameObjectScene.scriptList;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SceneDispatcher.prototype, "actionManager", {
            get: function () {
                return this.gameObjectScene.actionManager;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SceneDispatcher.prototype, "ambientLight", {
            get: function () {
                return this.gameObjectScene.ambientLight;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SceneDispatcher.prototype, "directionLights", {
            get: function () {
                return this.gameObjectScene.directionLights;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SceneDispatcher.prototype, "pointLights", {
            get: function () {
                return this.gameObjectScene.pointLights;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SceneDispatcher.prototype, "side", {
            get: function () {
                return this.gameObjectScene.side;
            },
            set: function (side) {
                this.gameObjectScene.side = side;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SceneDispatcher.prototype, "shadowMap", {
            get: function () {
                return this.gameObjectScene.shadowMap;
            },
            set: function (shadowMap) {
                this.gameObjectScene.shadowMap = shadowMap;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SceneDispatcher.prototype, "shader", {
            get: function () {
                return this.gameObjectScene.shader;
            },
            set: function (shader) {
                this.gameObjectScene.shader = shader;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SceneDispatcher.prototype, "currentCamera", {
            get: function () {
                return this.gameObjectScene.currentCamera;
            },
            set: function (arg) {
                this.gameObjectScene.currentCamera = arg;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SceneDispatcher.prototype, "isUseProgram", {
            get: function () {
                return this.gameObjectScene.isUseProgram;
            },
            set: function (isUseProgram) {
                this.gameObjectScene.isUseProgram = isUseProgram;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SceneDispatcher.prototype, "physics", {
            get: function () {
                return this.gameObjectScene.physics;
            },
            set: function (physics) {
                this.gameObjectScene.physics = physics;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SceneDispatcher.prototype, "physicsEngineAdapter", {
            get: function () {
                return this.gameObjectScene.physicsEngineAdapter;
            },
            set: function (physicsEngineAdapter) {
                this.gameObjectScene.physicsEngineAdapter = physicsEngineAdapter;
            },
            enumerable: true,
            configurable: true
        });
        SceneDispatcher.prototype.initWhenCreate = function () {
            _super.prototype.initWhenCreate.call(this);
            this.addComponent(wd.SceneEventTriggerDetector.create());
        };
        SceneDispatcher.prototype.useProgram = function (shader) {
            this.gameObjectScene.useProgram(shader);
        };
        SceneDispatcher.prototype.unUseProgram = function () {
            this.gameObjectScene.unUseProgram();
        };
        SceneDispatcher.prototype.addChild = function (child) {
            if (child instanceof wd.GameObject) {
                this.gameObjectScene.addChild(child);
            }
            else if (child instanceof wd.UIObject) {
                this.uiObjectScene.addChild(child);
            }
            child.parent = this;
            return this;
        };
        SceneDispatcher.prototype.addRenderTargetRenderer = function (renderTargetRenderer) {
            return this.gameObjectScene.addRenderTargetRenderer(renderTargetRenderer);
        };
        SceneDispatcher.prototype.removeRenderTargetRenderer = function (renderTargetRenderer) {
            this.gameObjectScene.removeRenderTargetRenderer(renderTargetRenderer);
        };
        SceneDispatcher.prototype.dispose = function () {
            this.gameObjectScene.dispose();
            this.uiObjectScene.dispose();
        };
        SceneDispatcher.prototype.hasChild = function (child) {
            if (child instanceof wd.GameObject) {
                return this.gameObjectScene.hasChild(child);
            }
            else if (child instanceof wd.UIObject) {
                return this.uiObjectScene.hasChild(child);
            }
        };
        SceneDispatcher.prototype.addChildren = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            if (args[0] instanceof wd.EntityObject) {
                var child = args[0];
                this.addChild(child);
            }
            if (args[0] instanceof wdCb.Collection) {
                var children = args[0], self_5 = this;
                children.forEach(function (child) {
                    self_5.addChild(child);
                });
            }
            else if (wd.JudgeUtils.isArray(args[0])) {
                var children = args[0];
                for (var _a = 0, children_1 = children; _a < children_1.length; _a++) {
                    var child = children_1[_a];
                    this.addChild(child);
                }
            }
            return this;
        };
        SceneDispatcher.prototype.getChildren = function () {
            return this.gameObjectScene.getChildren().addChildren(this.uiObjectScene.getChildren());
        };
        SceneDispatcher.prototype.findChildByUid = function (uid) {
            var result = this.gameObjectScene.findChildByUid(uid);
            if (!result) {
                result = this.uiObjectScene.findChildByUid(uid);
            }
            return result;
        };
        SceneDispatcher.prototype.findChildByTag = function (tag) {
            var result = this.gameObjectScene.findChildByTag(tag);
            if (!result) {
                result = this.uiObjectScene.findChildByTag(tag);
            }
            return result;
        };
        SceneDispatcher.prototype.findChildByName = function (name) {
            var result = this.gameObjectScene.findChildByName(name);
            if (!result) {
                result = this.uiObjectScene.findChildByName(name);
            }
            return result;
        };
        SceneDispatcher.prototype.findChildrenByName = function (name) {
            return this.gameObjectScene.findChildrenByName(name).addChildren(this.uiObjectScene.findChildrenByName(name));
        };
        SceneDispatcher.prototype.removeChild = function (child) {
            if (child instanceof wd.GameObject) {
                return this.gameObjectScene.removeChild(child);
            }
            else if (child instanceof wd.UIObject) {
                return this.uiObjectScene.removeChild(child);
            }
        };
        SceneDispatcher.prototype.onStartLoop = function () {
            this.gameObjectScene.onStartLoop();
            this.uiObjectScene.onStartLoop();
        };
        SceneDispatcher.prototype.onEndLoop = function () {
            this.gameObjectScene.onEndLoop();
            this.uiObjectScene.onEndLoop();
        };
        SceneDispatcher.prototype.onEnter = function () {
            this.gameObjectScene.onEnter();
            this.uiObjectScene.onEnter();
        };
        SceneDispatcher.prototype.onExit = function () {
            this.gameObjectScene.onExit();
            this.uiObjectScene.onExit();
        };
        SceneDispatcher.prototype.onDispose = function () {
            this.gameObjectScene.onDispose();
            this.uiObjectScene.onDispose();
        };
        SceneDispatcher.prototype.execScript = function (method, arg) {
            this.gameObjectScene.execScript.apply(this.gameObjectScene, arguments);
        };
        SceneDispatcher.prototype.execEventScript = function (method, arg) {
            this.gameObjectScene.execEventScript.apply(this.gameObjectScene, arguments);
        };
        SceneDispatcher.prototype.createTransform = function () {
            return null;
        };
        return SceneDispatcher;
    }(wd.EntityObject));
    wd.SceneDispatcher = SceneDispatcher;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var Scene = (function (_super) {
        __extends(Scene, _super);
        function Scene() {
            _super.apply(this, arguments);
        }
        return Scene;
    }(wd.EntityObject));
    wd.Scene = Scene;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var GameObjectScene = (function (_super) {
        __extends(GameObjectScene, _super);
        function GameObjectScene() {
            _super.apply(this, arguments);
            this._currentCamera = null;
            this.side = null;
            this.shadowMap = {
                enable: true,
                softType: EShadowMapSoftType.NONE
            };
            this.shader = null;
            this.isUseProgram = false;
            this.physics = PhysicsConfig.create();
            this.physicsEngineAdapter = null;
            this._lightManager = wd.LightManager.create();
            this._renderTargetRenderers = wdCb.Collection.create();
            this._collisionDetector = wd.CollisionDetector.create();
            this._cameraList = wdCb.Collection.create();
        }
        GameObjectScene.create = function () {
            var obj = new this();
            obj.initWhenCreate();
            return obj;
        };
        Object.defineProperty(GameObjectScene.prototype, "ambientLight", {
            get: function () {
                return this._lightManager.ambientLight;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameObjectScene.prototype, "directionLights", {
            get: function () {
                return this._lightManager.directionLights;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameObjectScene.prototype, "pointLights", {
            get: function () {
                return this._lightManager.pointLights;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameObjectScene.prototype, "currentCamera", {
            get: function () {
                return this._currentCamera || this._cameraList.getChild(0);
            },
            set: function (arg) {
                if (wd.JudgeUtils.isNumber(arg)) {
                    var index = arg;
                    this._currentCamera = this._cameraList.getChild(index);
                }
                else if (arg instanceof wd.GameObject) {
                    var currentCamera = arg;
                    this._currentCamera = currentCamera;
                }
            },
            enumerable: true,
            configurable: true
        });
        GameObjectScene.prototype.init = function () {
            if (this.physics.enable) {
                this.physicsEngineAdapter = wd.PhysicsEngineFactory.create(this.physics.engine);
                this.physicsEngineAdapter.init();
            }
            _super.prototype.init.call(this);
            this._renderTargetRenderers.forEach(function (renderTargetRenderer) { return renderTargetRenderer.init(); });
            return this;
        };
        GameObjectScene.prototype.useProgram = function (shader) {
            this.isUseProgram = true;
            this.shader = shader;
        };
        GameObjectScene.prototype.unUseProgram = function () {
            this.isUseProgram = false;
        };
        GameObjectScene.prototype.addChild = function (child) {
            if (this._isCamera(child)) {
                this._cameraList.addChild(child);
            }
            else if (this._isLight(child)) {
                this._lightManager.addChild(child);
            }
            return _super.prototype.addChild.call(this, child);
        };
        GameObjectScene.prototype.addToCameraList = function (cameraObject) {
            this._cameraList.addChild(cameraObject);
        };
        GameObjectScene.prototype.addRenderTargetRenderer = function (renderTargetRenderer) {
            this._renderTargetRenderers.addChild(renderTargetRenderer);
        };
        GameObjectScene.prototype.removeRenderTargetRenderer = function (renderTargetRenderer) {
            this._renderTargetRenderers.removeChild(renderTargetRenderer);
        };
        GameObjectScene.prototype.update = function (elapsedTime) {
            var currentCameraComponent = this._getCurrentCameraComponent();
            if (this.physics.enable) {
                this.physicsEngineAdapter.update(elapsedTime);
            }
            if (currentCameraComponent) {
                currentCameraComponent.update(elapsedTime);
            }
            _super.prototype.update.call(this, elapsedTime);
            this._collisionDetector.detect(this);
        };
        GameObjectScene.prototype.render = function (renderer) {
            var self = this;
            this._renderTargetRenderers.forEach(function (target) {
                target.render(renderer, self.currentCamera);
            });
            _super.prototype.render.call(this, renderer, this.currentCamera);
        };
        GameObjectScene.prototype.createTransform = function () {
            return null;
        };
        GameObjectScene.prototype._isCamera = function (child) {
            return child.hasComponent(wd.CameraController);
        };
        GameObjectScene.prototype._isLight = function (child) {
            return child.hasComponent(wd.Light);
        };
        GameObjectScene.prototype._getCurrentCameraComponent = function () {
            if (!this.currentCamera) {
                return null;
            }
            return this.currentCamera.getComponent(wd.CameraController);
        };
        __decorate([
            wd.requireSetter(function (arg) {
                if (wd.JudgeUtils.isNumber(arg)) {
                    var index = arg;
                    wd.assert(!!this._cameraList.getChild(index), wd.Log.info.FUNC_NOT_EXIST("current camera in cameraList"));
                }
            })
        ], GameObjectScene.prototype, "currentCamera", null);
        __decorate([
            wd.require(function (cameraObject) {
                wd.assert(cameraObject.hasComponent(wd.CameraController), wd.Log.info.FUNC_SHOULD("only add camera object"));
            })
        ], GameObjectScene.prototype, "addToCameraList", null);
        return GameObjectScene;
    }(wd.Scene));
    wd.GameObjectScene = GameObjectScene;
    var PhysicsConfig = (function () {
        function PhysicsConfig() {
            this._gravity = wd.Vector3.create(0, -9.8, 0);
            this.enable = false;
            this.engine = wd.EPhysicsEngineType.CANNON;
            this.iterations = 10;
        }
        PhysicsConfig.create = function () {
            var obj = new this();
            return obj;
        };
        Object.defineProperty(PhysicsConfig.prototype, "gravity", {
            get: function () {
                return this._gravity;
            },
            set: function (gravity) {
                this._gravity = gravity;
            },
            enumerable: true,
            configurable: true
        });
        __decorate([
            wd.operateWorldDataGetterAndSetter("Gravity")
        ], PhysicsConfig.prototype, "gravity", null);
        return PhysicsConfig;
    }());
    wd.PhysicsConfig = PhysicsConfig;
    (function (EShadowMapSoftType) {
        EShadowMapSoftType[EShadowMapSoftType["NONE"] = 0] = "NONE";
        EShadowMapSoftType[EShadowMapSoftType["PCF"] = 1] = "PCF";
    })(wd.EShadowMapSoftType || (wd.EShadowMapSoftType = {}));
    var EShadowMapSoftType = wd.EShadowMapSoftType;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var UIObjectScene = (function (_super) {
        __extends(UIObjectScene, _super);
        function UIObjectScene() {
            _super.apply(this, arguments);
        }
        UIObjectScene.create = function () {
            var obj = new this();
            obj.initWhenCreate();
            return obj;
        };
        UIObjectScene.prototype.onEndLoop = function () {
            _super.prototype.onEndLoop.call(this);
            this._resetAllTransformState();
            this._resetAllRendererClearCanvasFlag();
        };
        UIObjectScene.prototype.onStartLoop = function () {
            _super.prototype.onStartLoop.call(this);
            this._sortSiblingChildren();
        };
        UIObjectScene.prototype.createTransform = function () {
            return null;
        };
        UIObjectScene.prototype.beforeUpdateChildren = function (elapsedTime) {
            var self = this;
            this._resetAllRendererState();
            this.forEach(function (child) {
                var renderer = self._getUIRenderer(child);
                if (renderer.dirty) {
                    if (!renderer.isClearCanvas) {
                        renderer.clearCanvas();
                        renderer.dirtyDuringCurrentLoop = false;
                    }
                    renderer.state = wd.EUIRendererState.DIRTY;
                    renderer.resetDirty();
                }
                else {
                    if (renderer.state !== wd.EUIRendererState.DIRTY) {
                        renderer.state = wd.EUIRendererState.NOT_DIRTY;
                    }
                }
            });
        };
        UIObjectScene.prototype.bindStartLoopEvent = function () {
            wd.EventManager.on(this, wd.EEngineEvent.STARTLOOP, this.startLoopHandler);
        };
        UIObjectScene.prototype.bindEndLoopEvent = function () {
            wd.EventManager.on(this, wd.EEngineEvent.ENDLOOP, this.endLoopHandler);
        };
        UIObjectScene.prototype._getUIRenderer = function (uiObject) {
            return uiObject.getComponent(wd.UIRenderer);
        };
        UIObjectScene.prototype._resetAllRendererClearCanvasFlag = function () {
            var self = this;
            this.forEach(function (child) {
                var renderer = self._getUIRenderer(child);
                renderer.isClearCanvas = false;
            });
        };
        UIObjectScene.prototype._resetAllRendererState = function () {
            var self = this;
            this.forEach(function (child) {
                var renderer = self._getUIRenderer(child);
                renderer.state = wd.EUIRendererState.NORMAL;
            });
        };
        UIObjectScene.prototype._resetAllTransformState = function () {
            var self = this;
            var reset = function (uiObject) {
                if (self._isNotDirtyDuringThisLoop(self._getUIRenderer(uiObject))) {
                    self._resetTransformFlag(uiObject);
                }
                uiObject.forEach(function (child) {
                    reset(child);
                });
            };
            this.forEach(function (child) {
                reset(child);
            });
        };
        UIObjectScene.prototype._isNotDirtyDuringThisLoop = function (renderer) {
            return !renderer.dirtyDuringCurrentLoop;
        };
        UIObjectScene.prototype._resetTransformFlag = function (uiObject) {
            var transform = uiObject.transform;
            transform.isTranslate = false;
            transform.isScale = false;
            transform.isRotate = false;
        };
        UIObjectScene.prototype._sortSiblingChildren = function () {
            var sort = function (uiObject) {
                uiObject.sort(function (a, b) {
                    return a.transform.zIndex - b.transform.zIndex;
                }, true);
                uiObject.forEach(function (child) {
                    sort(child);
                });
            };
            sort(this);
        };
        __decorate([
            wd.require(function (elapsedTime) {
                this.forEach(function (child) {
                    wd.assert(child instanceof wd.UIObject, wd.Log.info.FUNC_MUST_BE("child", "UIObject"));
                    wd.assert(child.hasComponent(wd.UI), wd.Log.info.FUNC_SHOULD("UIObject", "contain ui component"));
                });
            })
        ], UIObjectScene.prototype, "beforeUpdateChildren", null);
        __decorate([
            wd.require(function (uiObject) {
                wd.assert(uiObject.getComponentCount(wd.UIRenderer) <= 1, wd.Log.info.FUNC_SHOULD_NOT("uiObject", "contain more than 1 uiRenderer component"));
            })
        ], UIObjectScene.prototype, "_getUIRenderer", null);
        __decorate([
            wd.ensure(function () {
                var self = this;
                this.getAllChildren().forEach(function (child) {
                    var renderer = self._getUIRenderer(child);
                    wd.assert(!renderer.isClearCanvas, wd.Log.info.FUNC_SHOULD("reset all UIRenderers->isClearCanvas"));
                });
            })
        ], UIObjectScene.prototype, "_resetAllRendererClearCanvasFlag", null);
        __decorate([
            wd.ensure(function () {
                var self = this;
                this.getAllChildren().forEach(function (child) {
                    var renderer = self._getUIRenderer(child);
                    wd.assert(renderer.state === wd.EUIRendererState.NORMAL, wd.Log.info.FUNC_SHOULD("reset all UIRenderers->state"));
                });
            })
        ], UIObjectScene.prototype, "_resetAllRendererState", null);
        return UIObjectScene;
    }(wd.Scene));
    wd.UIObjectScene = UIObjectScene;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var Skybox = (function (_super) {
        __extends(Skybox, _super);
        function Skybox() {
            _super.apply(this, arguments);
        }
        Skybox.create = function () {
            var obj = new this();
            obj.initWhenCreate();
            return obj;
        };
        Skybox.prototype.initWhenCreate = function () {
            _super.prototype.initWhenCreate.call(this);
            this.addComponent(wd.SkyboxRenderer.create());
        };
        return Skybox;
    }(wd.GameObject));
    wd.Skybox = Skybox;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var CollisionDetector = (function () {
        function CollisionDetector() {
            this._lastCollideObjects = null;
            this._collisionTable = wdCb.Hash.create();
        }
        CollisionDetector.create = function () {
            var obj = new this();
            return obj;
        };
        CollisionDetector.prototype.detect = function (scene) {
            var checkTargetList = scene.filter(function (entityObject) {
                return entityObject.hasComponent(wd.Collider) || wd.JudgeUtils.isSpacePartitionObject(entityObject);
            }), self = this;
            this._clearCollisionTable();
            checkTargetList.forEach(function (entityObject) {
                if (entityObject.hasComponent(wd.RigidBody)) {
                    return;
                }
                var _a = self._getCollideObjects(entityObject, checkTargetList), targetCollideObjects = _a.targetCollideObjects, sourceCollideObjects = _a.sourceCollideObjects;
                sourceCollideObjects.forEach(function (sourceObject) {
                    if (targetCollideObjects.getCount() > 0) {
                        if (self._isCollisionStart(sourceObject)) {
                            sourceObject.execScript("onCollisionStart", targetCollideObjects);
                            sourceObject.execScript("onContact", targetCollideObjects);
                            self._triggerCollisionEventOfCollideObjectWhichHasRigidBody(targetCollideObjects, sourceObject, ["onCollisionStart", "onContact"]);
                        }
                        else {
                            sourceObject.execScript("onContact", targetCollideObjects);
                            self._triggerCollisionEventOfCollideObjectWhichHasRigidBody(targetCollideObjects, sourceObject, ["onContact"]);
                        }
                        sourceObject.addTag(ECollisionTag.COLLIDED);
                        self._lastCollideObjects = targetCollideObjects;
                    }
                    else {
                        if (self._isCollisionEnd(sourceObject)) {
                            sourceObject.execScript("onCollisionEnd");
                            self._triggerCollisionEventOfCollideObjectWhichHasRigidBody(self._lastCollideObjects, sourceObject, ["onCollisionEnd"]);
                        }
                        sourceObject.removeTag(ECollisionTag.COLLIDED);
                    }
                });
            });
        };
        CollisionDetector.prototype._getCollideObjects = function (sourceObject, checkTargetList) {
            var targetCollideObjects = wdCb.Collection.create(), sourceCollideObjects = wdCb.Collection.create(), self = this, sourceCollider = null;
            if (wd.JudgeUtils.isSpacePartitionObject(sourceObject)) {
                checkTargetList.forEach(function (targetObject) {
                    if (wd.JudgeUtils.isSelf(sourceObject, targetObject)) {
                        return;
                    }
                    if (wd.JudgeUtils.isSpacePartitionObject(targetObject)) {
                        self._getCollideObjectsWithSpacePartition(targetObject.getSpacePartition(), sourceObject.getSpacePartition(), targetCollideObjects, sourceCollideObjects);
                    }
                    else {
                        self._getCollideObjectsWithSpacePartition(targetObject, sourceObject.getSpacePartition(), targetCollideObjects, sourceCollideObjects);
                    }
                });
                this._recordCollisionTargets(targetCollideObjects, sourceCollideObjects);
                return {
                    targetCollideObjects: targetCollideObjects.removeRepeatItems(),
                    sourceCollideObjects: sourceCollideObjects.removeRepeatItems()
                };
            }
            sourceCollider = sourceObject.getComponent(wd.Collider);
            checkTargetList.forEach(function (targetObject) {
                if (wd.JudgeUtils.isSelf(sourceObject, targetObject)) {
                    return;
                }
                if (wd.JudgeUtils.isSpacePartitionObject(targetObject)) {
                    self._getCollideObjectsWithSpacePartition(targetObject.getSpacePartition(), sourceCollider, sourceObject, targetCollideObjects, sourceCollideObjects);
                }
                else {
                    self._getCollideObjectsByGameObjectToGameObject(sourceObject, sourceCollider, targetObject, targetCollideObjects);
                }
            });
            sourceCollideObjects.addChild(sourceObject);
            if (targetCollideObjects.getCount() > 0) {
                this._recordCollisionTargets(targetCollideObjects, sourceCollideObjects);
            }
            return {
                targetCollideObjects: targetCollideObjects.removeRepeatItems(),
                sourceCollideObjects: sourceCollideObjects.removeRepeatItems()
            };
        };
        CollisionDetector.prototype._getCollideObjectsByGameObjectToGameObject = function (sourceObject, sourceCollider, targetObject, targetCollideObjects) {
            if (this._isTargetCollidedWithSourceInCurrentFrame(sourceObject, targetObject)) {
                targetCollideObjects.addChild(targetObject);
            }
            else if (!(this._isNotTransform(sourceObject) && this._isNotTransform(targetObject) && !sourceObject.hasTag(ECollisionTag.COLLIDED))
                && sourceCollider.isCollide(targetObject)) {
                targetCollideObjects.addChild(targetObject);
            }
        };
        CollisionDetector.prototype._clearCollisionTable = function () {
            this._collisionTable.removeAllChildren();
        };
        CollisionDetector.prototype._isTargetCollidedWithSourceInCurrentFrame = function (sourceObject, targetObject) {
            var targetCollideObjects = this._collisionTable.getChild(String(targetObject.uid));
            if (!targetCollideObjects) {
                return false;
            }
            return targetCollideObjects.hasChild(function (targetCollideObject) {
                return wd.JudgeUtils.isEqual(targetCollideObject, sourceObject);
            });
        };
        CollisionDetector.prototype._recordCollisionTargets = function (targetCollideObjects, sourceCollideObjects) {
            var table = this._collisionTable;
            sourceCollideObjects.forEach(function (sourceObject) {
                targetCollideObjects.forEach(function (targetObject) {
                    table.appendChild(String(sourceObject.uid), targetObject);
                });
            });
        };
        CollisionDetector.prototype._getCollideObjectsWithSpacePartition = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            if (args.length === 4) {
                if (args[0] instanceof wd.GameObject && args[1] instanceof wd.SpacePartition) {
                    var targetObject_1 = args[0], sourceSpacePartition = args[1], targetCollideObjects = args[2], sourceCollideObjects_1 = args[3], targetCollider_1 = targetObject_1.getComponent(wd.Collider), self_6 = this;
                    sourceSpacePartition.getCollideObjects(targetCollider_1.shape).forEach(function (sourceObject) {
                        self_6._getCollideObjectsByGameObjectToGameObject(targetObject_1, targetCollider_1, sourceObject, sourceCollideObjects_1);
                    });
                    if (sourceCollideObjects_1.getCount() > 0) {
                        targetCollideObjects.addChild(targetObject_1);
                    }
                    sourceCollideObjects_1.removeAllChildren();
                    sourceCollideObjects_1.addChildren(sourceSpacePartition.getChildren());
                }
                else if (args[0] instanceof wd.SpacePartition && args[1] instanceof wd.SpacePartition) {
                    var targetSpacePartition_1 = args[0], sourceSpacePartition = args[1], targetCollideObjects_1 = args[2], sourceCollideObjects_2 = args[3], self_7 = this;
                    sourceSpacePartition.getChildren()
                        .forEach(function (sourceObject) {
                        var sourceCollider = sourceObject.getComponent(wd.Collider);
                        self_7._getCollideObjectsWithSpacePartition(targetSpacePartition_1, sourceCollider, sourceObject, targetCollideObjects_1, sourceCollideObjects_2);
                    });
                }
            }
            else if (args.length === 5) {
                var targetSpacePartition = args[0], sourceCollider_1 = args[1], sourceObject_1 = args[2], targetCollideObjects_2 = args[3], sourceCollideObjects = args[4], self_8 = this;
                if (!sourceCollider_1) {
                    return;
                }
                targetSpacePartition.getCollideObjects(sourceCollider_1.shape).forEach(function (targetObject) {
                    self_8._getCollideObjectsByGameObjectToGameObject(sourceObject_1, sourceCollider_1, targetObject, targetCollideObjects_2);
                });
                sourceCollideObjects.addChild(sourceObject_1);
                return;
            }
        };
        CollisionDetector.prototype._isCollisionStart = function (entityObject) {
            return !entityObject.hasTag(ECollisionTag.COLLIDED);
        };
        CollisionDetector.prototype._isCollisionEnd = function (entityObject) {
            return entityObject.hasTag(ECollisionTag.COLLIDED);
        };
        CollisionDetector.prototype._triggerCollisionEventOfCollideObjectWhichHasRigidBody = function (collideObjects, currentGameObject, eventList) {
            collideObjects.filter(function (entityObject) {
                return entityObject.hasComponent(wd.RigidBody);
            })
                .forEach(function (collideObject) {
                for (var _i = 0, eventList_1 = eventList; _i < eventList_1.length; _i++) {
                    var eventName = eventList_1[_i];
                    collideObject.execScript(eventName, wdCb.Collection.create([currentGameObject]));
                }
            });
        };
        CollisionDetector.prototype._isNotTransform = function (entityObject) {
            return !entityObject.transform.isTransform;
        };
        __decorate([
            wd.require(function (sourceObject, checkTargetList) {
                checkTargetList.forEach(function (targetObject) {
                    wd.assert(targetObject instanceof wd.GameObject, wd.Log.info.FUNC_SHOULD("targetObject", "be GameObject"));
                });
            })
        ], CollisionDetector.prototype, "_getCollideObjects", null);
        __decorate([
            wd.require(function (sourceObject, sourceCollider, targetObject, targetCollideObjects) {
                wd.assert(sourceObject instanceof wd.GameObject && targetObject instanceof wd.GameObject, wd.Log.info.FUNC_SHOULD("sourceObject and targetObject", "be GameObject"));
            })
        ], CollisionDetector.prototype, "_getCollideObjectsByGameObjectToGameObject", null);
        return CollisionDetector;
    }());
    wd.CollisionDetector = CollisionDetector;
    var ECollisionTag;
    (function (ECollisionTag) {
        ECollisionTag[ECollisionTag["COLLIDED"] = "COLLIDED"] = "COLLIDED";
    })(ECollisionTag || (ECollisionTag = {}));
})(wd || (wd = {}));
var wd;
(function (wd) {
    var EventListenerMap = (function () {
        function EventListenerMap() {
            this.listenerMap = wdCb.Hash.create();
        }
        EventListenerMap.prototype.hasChild = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            if (args.length === 1 && wd.JudgeUtils.isFunction(args[0])) {
                return this.listenerMap.hasChild(args[0]);
            }
            else {
                var target = args[0], eventName = args[1], list = this.listenerMap.getChild(this.buildKey(target, eventName));
                return list && list.getCount() > 0;
            }
        };
        EventListenerMap.prototype.appendChild = function (target, eventName, data) {
            this.listenerMap.appendChild(this.buildKey(target, eventName), data);
        };
        EventListenerMap.prototype.filter = function (func) {
            return this.listenerMap.filter(func);
        };
        EventListenerMap.prototype.forEach = function (func) {
            return this.listenerMap.forEach(func);
        };
        EventListenerMap.prototype.getEventNameFromKey = function (key) {
            var separator = this.getEventSeparator();
            return key.indexOf(separator) > -1 ? key.split(separator)[1] : key;
        };
        EventListenerMap.prototype.isEventName = function (key, eventName) {
            return key.indexOf("" + this.getEventSeparator() + eventName) > -1
                || key === eventName;
        };
        return EventListenerMap;
    }());
    wd.EventListenerMap = EventListenerMap;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var CustomEventListenerMap = (function (_super) {
        __extends(CustomEventListenerMap, _super);
        function CustomEventListenerMap() {
            _super.apply(this, arguments);
        }
        CustomEventListenerMap.create = function () {
            var obj = new this();
            return obj;
        };
        CustomEventListenerMap.prototype.getChild = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var self = this;
            if (args.length === 1 && wd.JudgeUtils.isString(args[0])) {
                var eventName = args[0];
                return this.listenerMap.getChild(eventName);
            }
            else if (args.length === 1 && args[0] instanceof wd.EntityObject) {
                var target_1 = args[0];
                return this.listenerMap.filter(function (list, key) {
                    return self.isTarget(key, target_1, list);
                });
            }
            else if (args.length === 2) {
                var target = args[0], eventName = args[1];
                return this.listenerMap.getChild(this.buildKey(target, eventName));
            }
        };
        CustomEventListenerMap.prototype.removeChild = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var self = this;
            if (args.length === 1 && wd.JudgeUtils.isString(args[0])) {
                var eventName_1 = args[0];
                this.listenerMap.removeChild(function (list, key) {
                    return self.isEventName(key, eventName_1);
                });
            }
            else if (args.length === 1 && args[0] instanceof wd.EntityObject) {
                var target_2 = args[0];
                this.listenerMap.removeChild(function (list, key) {
                    return self.isTarget(key, target_2, list);
                });
            }
            else if (args.length === 2 && wd.JudgeUtils.isString(args[0])) {
                var eventName = args[0], handler_1 = args[1], list = null;
                if (this.listenerMap.hasChild(eventName)) {
                    list = this.listenerMap.getChild(eventName);
                    wdCb.Collection.create().addChild(list.removeChild(function (val) {
                        return val.originHandler === handler_1;
                    }));
                    if (list.getCount() === 0) {
                        this.listenerMap.removeChild(eventName);
                    }
                }
            }
            else if (args.length === 2 && wd.JudgeUtils.isNumber(args[0])) {
                var uid = args[0], eventName = args[1];
                this.listenerMap.removeChild(this.buildKey(uid, eventName));
            }
            else if (args.length === 2 && args[0] instanceof wd.EntityObject) {
                var target = args[0], eventName = args[1];
                this.listenerMap.removeChild(this.buildKey(target, eventName));
            }
            else if (args.length === 3 && args[0] instanceof wd.EntityObject) {
                var eventName = args[1], handler_2 = args[2];
                this.listenerMap.forEach(function (list, key) {
                    list.removeChild(function (val) {
                        return val.originHandler === handler_2;
                    });
                    if (list.getCount() === 0) {
                        return wdCb.$REMOVE;
                    }
                });
            }
        };
        CustomEventListenerMap.prototype.getUidFromKey = function (key) {
            var separator = "" + CustomEventListenerMap.eventSeparator;
            return key.indexOf(separator) > -1 ? Number(key.split(separator)[0]) : null;
        };
        CustomEventListenerMap.prototype.isTarget = function (key, target, list) {
            return key.indexOf(this._buildKeyPrefix(target.uid)) > -1 && list !== undefined;
        };
        CustomEventListenerMap.prototype.getEventSeparator = function () {
            return "" + CustomEventListenerMap.eventSeparator;
        };
        CustomEventListenerMap.prototype.buildKey = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            if (wd.JudgeUtils.isNumber(args[0])) {
                var uid = args[0], eventName = args[1];
                return this._buildKeyWithUid(uid, eventName);
            }
            else if (args[0] instanceof wd.EntityObject) {
                var target = args[0], eventName = args[1];
                return this._buildKeyWithUid(target.uid, eventName);
            }
            else if (args[0] === null) {
                var eventName = args[1];
                return eventName;
            }
        };
        CustomEventListenerMap.prototype._buildKeyWithUid = function (uid, eventName) {
            return "" + this._buildKeyPrefix(uid) + CustomEventListenerMap.eventSeparator + eventName;
        };
        CustomEventListenerMap.prototype._buildKeyPrefix = function (uid) {
            return "" + String(uid);
        };
        CustomEventListenerMap.eventSeparator = "@";
        return CustomEventListenerMap;
    }(wd.EventListenerMap));
    wd.CustomEventListenerMap = CustomEventListenerMap;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var DomEventListenerMap = (function (_super) {
        __extends(DomEventListenerMap, _super);
        function DomEventListenerMap() {
            _super.apply(this, arguments);
        }
        DomEventListenerMap.create = function () {
            var obj = new this();
            return obj;
        };
        DomEventListenerMap.prototype.getChild = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            if (args.length === 1) {
                var eventName = args[0];
                return this.listenerMap.getChild(eventName);
            }
            else if (args.length === 2) {
                var dom = args[0], eventName = args[1];
                return this.listenerMap.getChild(this.buildKey(dom, eventName));
            }
        };
        DomEventListenerMap.prototype.removeChild = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var self = this, result = null;
            if (args.length === 1 && wd.JudgeUtils.isString(args[0])) {
                var eventName_2 = args[0];
                result = this._getEventDataOffDataList(eventName_2, this.listenerMap.removeChild(function (list, key) {
                    return self.isEventName(key, eventName_2);
                }));
            }
            else if (args.length === 2 && wd.JudgeUtils.isString(args[0])) {
                var eventName_3 = args[0], handler_3 = args[1], resultList_1 = wdCb.Collection.create();
                this.listenerMap.forEach(function (list, key) {
                    if (self.isEventName(key, eventName_3)) {
                        var result_1 = list.removeChild(function (val) {
                            return val.originHandler === handler_3;
                        });
                        if (result_1.getCount() > 0) {
                            resultList_1.addChild(result_1);
                        }
                        if (list.getCount() === 0) {
                            return wdCb.$REMOVE;
                        }
                    }
                });
                result = this._getEventDataOffDataList(eventName_3, resultList_1);
            }
            else if (args.length === 2 && wd.JudgeUtils.isDom(args[0])) {
                var dom = args[0], eventName = args[1];
                result = this._getEventDataOffDataList(eventName, this.listenerMap.removeChild(this.buildKey(dom, eventName)));
            }
            else if (args.length === 3 && wd.JudgeUtils.isDom(args[0])) {
                var eventName = args[1], resultList_2 = wdCb.Collection.create(), handler_4 = args[2];
                this.listenerMap.forEach(function (list, key) {
                    var result = list.removeChild(function (val) {
                        return val.originHandler === handler_4;
                    });
                    if (result.getCount() > 0) {
                        resultList_2.addChild(result);
                    }
                    if (list.getCount() === 0) {
                        return wdCb.$REMOVE;
                    }
                });
                result = this._getEventDataOffDataList(eventName, resultList_2);
            }
            return result;
        };
        DomEventListenerMap.prototype.isDom = function (key, dom, list) {
            return key.indexOf(this._buildKeyPrefix(dom)) > -1 && list !== undefined;
        };
        DomEventListenerMap.prototype.getEventSeparator = function () {
            return "" + DomEventListenerMap.eventSeparator;
        };
        DomEventListenerMap.prototype.buildKey = function (dom, eventName) {
            return "" + this._buildKeyPrefix(dom) + DomEventListenerMap.eventSeparator + eventName;
        };
        DomEventListenerMap.prototype._buildKeyPrefix = function (dom) {
            return dom.id ? "" + dom.tagName + dom.id : "" + dom.tagName;
        };
        DomEventListenerMap.prototype._getEventDataOffDataList = function (eventName, result) {
            return result.map(function (list) {
                return list.map(function (data) {
                    return {
                        dom: data.dom,
                        eventName: eventName,
                        domHandler: data.domHandler
                    };
                });
            });
        };
        DomEventListenerMap.eventSeparator = "@";
        return DomEventListenerMap;
    }(wd.EventListenerMap));
    wd.DomEventListenerMap = DomEventListenerMap;
})(wd || (wd = {}));
var wd;
(function (wd) {
    (function (EEventType) {
        EEventType[EEventType["MOUSE"] = 0] = "MOUSE";
        EEventType[EEventType["KEYBOARD"] = 1] = "KEYBOARD";
        EEventType[EEventType["CUSTOM"] = 2] = "CUSTOM";
    })(wd.EEventType || (wd.EEventType = {}));
    var EEventType = wd.EEventType;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var EBrowserIdentifier;
    (function (EBrowserIdentifier) {
        EBrowserIdentifier[EBrowserIdentifier["FALLBACK"] = "fallback"] = "FALLBACK";
        EBrowserIdentifier[EBrowserIdentifier["FIREFOX"] = "firefox"] = "FIREFOX";
        EBrowserIdentifier[EBrowserIdentifier["CHROME"] = "chrome"] = "CHROME";
    })(EBrowserIdentifier || (EBrowserIdentifier = {}));
    (function (EEventName) {
        EEventName[EEventName["CLICK"] = "click"] = "CLICK";
        EEventName[EEventName["MOUSEOVER"] = "mouseover"] = "MOUSEOVER";
        EEventName[EEventName["MOUSEUP"] = "mouseup"] = "MOUSEUP";
        EEventName[EEventName["MOUSEOUT"] = "mouseout"] = "MOUSEOUT";
        EEventName[EEventName["MOUSEMOVE"] = "mousemove"] = "MOUSEMOVE";
        EEventName[EEventName["MOUSEDOWN"] = "mousedown"] = "MOUSEDOWN";
        EEventName[EEventName["MOUSEWHEEL"] = ("mousewheel|DOMMouseScroll*" + EBrowserIdentifier.FIREFOX)] = "MOUSEWHEEL";
        EEventName[EEventName["MOUSEDRAG"] = "mousedrag"] = "MOUSEDRAG";
        EEventName[EEventName["KEYDOWN"] = "keydown"] = "KEYDOWN";
        EEventName[EEventName["KEYUP"] = "keyup"] = "KEYUP";
        EEventName[EEventName["KEYPRESS"] = "keypress"] = "KEYPRESS";
    })(wd.EEventName || (wd.EEventName = {}));
    var EEventName = wd.EEventName;
    var EVENTNAME_SPLITTER = '|', BROWSER_IDENTIFIER = '*';
    var EventNameHandler = (function () {
        function EventNameHandler() {
        }
        EventNameHandler.handleEventName = function (domEventName) {
            var eventName = domEventName, fallbackEventName = null, specifyBrowserEventNameArr = [], result = null;
            for (var _i = 0, _a = eventName.split(EVENTNAME_SPLITTER); _i < _a.length; _i++) {
                var name_1 = _a[_i];
                if (this._isFallbackEventName(name_1)) {
                    fallbackEventName = name_1;
                }
                else {
                    specifyBrowserEventNameArr.push(name_1);
                }
            }
            result = this._getSpecifyBrowserEventName(specifyBrowserEventNameArr);
            return result !== null ? result : fallbackEventName;
        };
        EventNameHandler._isFallbackEventName = function (eventName) {
            return eventName.split(BROWSER_IDENTIFIER).length === 1;
        };
        EventNameHandler._getSpecifyBrowserEventName = function (specifyBrowserEventNameArr) {
            var result = null;
            for (var _i = 0, specifyBrowserEventNameArr_1 = specifyBrowserEventNameArr; _i < specifyBrowserEventNameArr_1.length; _i++) {
                var eventName = specifyBrowserEventNameArr_1[_i];
                var _a = eventName.split(BROWSER_IDENTIFIER), domEventName = _a[0], browserIdentifier = _a[1];
                switch (browserIdentifier) {
                    case EBrowserIdentifier.CHROME:
                        if (bowser.chrome) {
                            result = domEventName;
                        }
                        break;
                    case EBrowserIdentifier.FIREFOX:
                        if (bowser.firefox) {
                            result = domEventName;
                        }
                        break;
                    default:
                        break;
                }
                if (result) {
                    break;
                }
            }
            return result;
        };
        return EventNameHandler;
    }());
    wd.EventNameHandler = EventNameHandler;
})(wd || (wd = {}));
var wd;
(function (wd) {
    (function (EEventPhase) {
        EEventPhase[EEventPhase["BROADCAST"] = 0] = "BROADCAST";
        EEventPhase[EEventPhase["EMIT"] = 1] = "EMIT";
    })(wd.EEventPhase || (wd.EEventPhase = {}));
    var EEventPhase = wd.EEventPhase;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var _table = wdCb.Hash.create();
    _table.addChild(wd.EEventName.CLICK, wd.EEventType.MOUSE);
    _table.addChild(wd.EEventName.MOUSEOVER, wd.EEventType.MOUSE);
    _table.addChild(wd.EEventName.MOUSEOUT, wd.EEventType.MOUSE);
    _table.addChild(wd.EEventName.MOUSEMOVE, wd.EEventType.MOUSE);
    _table.addChild(wd.EEventName.MOUSEDOWN, wd.EEventType.MOUSE);
    _table.addChild(wd.EEventName.MOUSEUP, wd.EEventType.MOUSE);
    _table.addChild(wd.EEventName.MOUSEWHEEL, wd.EEventType.MOUSE);
    _table.addChild(wd.EEventName.MOUSEDRAG, wd.EEventType.MOUSE);
    _table.addChild(wd.EEventName.KEYDOWN, wd.EEventType.KEYBOARD);
    _table.addChild(wd.EEventName.KEYPRESS, wd.EEventType.KEYBOARD);
    _table.addChild(wd.EEventName.KEYUP, wd.EEventType.KEYBOARD);
    var EventTable = (function () {
        function EventTable() {
        }
        EventTable.getEventType = function (eventName) {
            var result = _table.getChild(eventName);
            if (result === void 0) {
                result = wd.EEventType.CUSTOM;
            }
            return result;
        };
        return EventTable;
    }());
    wd.EventTable = EventTable;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var Event = (function () {
        function Event(eventName) {
            this.p_type = null;
            this.name = null;
            this.currentTarget = null;
            this.isStopPropagation = false;
            this.phase = null;
            this.name = eventName;
        }
        Object.defineProperty(Event.prototype, "type", {
            get: function () {
                wd.Log.error(this.p_type === null, wd.Log.info.ABSTRACT_ATTRIBUTE);
                return this.p_type;
            },
            enumerable: true,
            configurable: true
        });
        Event.prototype.stopPropagation = function () {
            this.isStopPropagation = true;
        };
        Event.prototype.copyMember = function (destination, source, memberArr) {
            memberArr.forEach(function (member) {
                destination[member] = source[member];
            });
            return destination;
        };
        return Event;
    }());
    wd.Event = Event;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var DomEvent = (function (_super) {
        __extends(DomEvent, _super);
        function DomEvent(event, eventName) {
            _super.call(this, eventName);
            this._event = null;
            this.event = event;
        }
        Object.defineProperty(DomEvent.prototype, "event", {
            get: function () {
                return this._event;
            },
            set: function (event) {
                this._event = event || wd.root.event;
            },
            enumerable: true,
            configurable: true
        });
        DomEvent.prototype.preventDefault = function () {
            var e = this._event;
            if (bowser.msie && Number(bowser.version) <= 8) {
                e.returnValue = false;
            }
            else {
                e.preventDefault();
            }
        };
        DomEvent.prototype.getDataFromCustomEvent = function (event) {
            this.target = event.target;
            this.currentTarget = event.currentTarget;
            this.isStopPropagation = event.isStopPropagation;
        };
        return DomEvent;
    }(wd.Event));
    wd.DomEvent = DomEvent;
})(wd || (wd = {}));
var wd;
(function (wd_1) {
    var MouseEvent = (function (_super) {
        __extends(MouseEvent, _super);
        function MouseEvent() {
            _super.apply(this, arguments);
            this._location = null;
            this._locationInView = null;
            this._button = null;
            this.lastX = null;
            this.lastY = null;
            this.p_type = wd_1.EEventType.MOUSE;
        }
        MouseEvent.create = function (event, eventName) {
            var obj = new this(event, eventName);
            return obj;
        };
        Object.defineProperty(MouseEvent.prototype, "location", {
            get: function () {
                var point = null, e = this.event;
                if (this._location) {
                    return this._location;
                }
                point = wd_1.Point.create();
                if (bowser.msie) {
                    point.x = e.clientX + document.body.scrollLeft || document.documentElement.scrollLeft;
                    point.y = e.clientY + document.body.scrollTop || document.documentElement.scrollTop;
                }
                else {
                    point.x = e.pageX;
                    point.y = e.pageY;
                }
                return point;
            },
            set: function (point) {
                this._location = point;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MouseEvent.prototype, "locationInView", {
            get: function () {
                var point = null, viewOffset = null;
                if (this._locationInView) {
                    return this._locationInView;
                }
                point = this.location;
                viewOffset = wd_1.DeviceManager.getInstance().view.offset;
                return wd_1.Point.create(point.x - viewOffset.x, point.y - viewOffset.y);
            },
            set: function (locationInView) {
                this._locationInView = locationInView;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MouseEvent.prototype, "button", {
            get: function () {
                var e = this.event, mouseButton = null;
                if (this._button) {
                    return this._button;
                }
                if (bowser.msie) {
                    switch (e.button) {
                        case 1:
                            mouseButton = wd_1.EMouseButton.LEFT;
                            break;
                        case 4:
                            mouseButton = wd_1.EMouseButton.RIGHT;
                            break;
                        case 2:
                            mouseButton = wd_1.EMouseButton.CENTER;
                            break;
                        default:
                            wd_1.Log.error(true, wd_1.Log.info.FUNC_NOT_SUPPORT("multi mouse button"));
                            break;
                    }
                }
                else {
                    switch (e.button) {
                        case 0:
                            mouseButton = wd_1.EMouseButton.LEFT;
                            break;
                        case 1:
                            mouseButton = wd_1.EMouseButton.RIGHT;
                            break;
                        case 2:
                            mouseButton = wd_1.EMouseButton.CENTER;
                            break;
                        default:
                            wd_1.Log.error(true, wd_1.Log.info.FUNC_NOT_SUPPORT("multi mouse button"));
                            break;
                    }
                }
                return mouseButton;
            },
            set: function (button) {
                this._button = button;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MouseEvent.prototype, "wheel", {
            get: function () {
                var e = this.event;
                if (e.detail) {
                    return -1 * e.detail;
                }
                if (e.wheelDelta) {
                    return e.wheelDelta / 120;
                }
                return 0;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MouseEvent.prototype, "movementDelta", {
            get: function () {
                var e = this.event, dx = null, wd = null;
                if (this._isPointerLocked()) {
                    dx = e.movementX || e.webkitMovementX || e.mozMovementX || 0;
                    wd = e.movementY || e.webkitMovementY || e.mozMovementY || 0;
                }
                else {
                    var location_1 = this.location, lastX = this.lastX, lastY = this.lastY;
                    if (lastX === null && lastY === null) {
                        dx = 0;
                        wd = 0;
                    }
                    else {
                        dx = location_1.x - lastX;
                        wd = location_1.y - lastY;
                    }
                }
                return {
                    x: dx,
                    y: wd
                };
            },
            enumerable: true,
            configurable: true
        });
        MouseEvent.prototype.copy = function () {
            var eventObj = MouseEvent.create(this.event, this.name);
            return this.copyMember(eventObj, this, ["target", "currentTarget", "isStopPropagation", "phase", "lastX", "lastY"]);
        };
        MouseEvent.prototype._isPointerLocked = function () {
            return !!(document.pointerLockElement || document.mozPointerLockElement || document.webkitPointerLockElement);
        };
        return MouseEvent;
    }(wd_1.DomEvent));
    wd_1.MouseEvent = MouseEvent;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var SPECIAL_KEY_MAP = {
        8: "backspace",
        9: "tab",
        10: "return",
        13: "return",
        16: "shift",
        17: "ctrl",
        18: "alt",
        19: "pause",
        20: "capslock",
        27: "esc",
        32: "space",
        33: "pageup",
        34: "pagedown",
        35: "end",
        36: "home",
        37: "left",
        38: "up",
        39: "right",
        40: "down",
        45: "insert",
        46: "del",
        59: ";",
        61: "=",
        65: "a",
        66: "b",
        67: "c",
        68: "d",
        69: "e",
        70: "f",
        71: "g",
        72: "h",
        73: "i",
        74: "j",
        75: "k",
        76: "l",
        77: "m",
        78: "n",
        79: "o",
        80: "p",
        81: "q",
        82: "r",
        83: "s",
        84: "t",
        85: "u",
        86: "v",
        87: "w",
        88: "x",
        89: "y",
        90: "z",
        96: "0",
        97: "1",
        98: "2",
        99: "3",
        100: "4",
        101: "5",
        102: "6",
        103: "7",
        104: "8",
        105: "9",
        106: "*",
        107: "+",
        109: "-",
        110: ".",
        111: "/",
        112: "f1",
        113: "f2",
        114: "f3",
        115: "f4",
        116: "f5",
        117: "f6",
        118: "f7",
        119: "f8",
        120: "f9",
        121: "f10",
        122: "f11",
        123: "f12",
        144: "numlock",
        145: "scroll",
        173: "-",
        186: ";",
        187: "=",
        188: ",",
        189: "-",
        190: ".",
        191: "/",
        192: "`",
        219: "[",
        220: "\\",
        221: "]",
        222: "'"
    }, SHIFT_KEY_MAP = {
        "`": "~",
        "1": "!",
        "2": "@",
        "3": "#",
        "4": "$",
        "5": "%",
        "6": "^",
        "7": "&",
        "8": "*",
        "9": "(",
        "0": ")",
        "-": "_",
        "=": "+",
        ";": ": ",
        "'": "\"",
        ",": "<",
        ".": ">",
        "/": "?",
        "\\": "|"
    };
    var KeyboardEvent = (function (_super) {
        __extends(KeyboardEvent, _super);
        function KeyboardEvent() {
            _super.apply(this, arguments);
            this.p_type = wd.EEventType.KEYBOARD;
            this.keyState = null;
        }
        KeyboardEvent.create = function (event, eventName) {
            var obj = new this(event, eventName);
            return obj;
        };
        Object.defineProperty(KeyboardEvent.prototype, "ctrlKey", {
            get: function () {
                return this.event.ctrlKey;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(KeyboardEvent.prototype, "altKey", {
            get: function () {
                return this.event.altKey;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(KeyboardEvent.prototype, "shiftKey", {
            get: function () {
                return this.event.shiftKey;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(KeyboardEvent.prototype, "metaKey", {
            get: function () {
                return this.event.metaKey;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(KeyboardEvent.prototype, "keyCode", {
            get: function () {
                return this.event.keyCode;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(KeyboardEvent.prototype, "key", {
            get: function () {
                var key = SPECIAL_KEY_MAP[this.keyCode], char = null;
                if (!key) {
                    char = String.fromCharCode(this.keyCode).toLowerCase();
                    if (this.shiftKey) {
                        return SHIFT_KEY_MAP[char];
                    }
                    return char;
                }
                return key;
            },
            enumerable: true,
            configurable: true
        });
        KeyboardEvent.prototype.copy = function () {
            var eventObj = KeyboardEvent.create(this.event, this.name);
            return this.copyMember(eventObj, this, ["target", "currentTarget", "isStopPropagation", "phase", "altKey", "shiftKey", "ctrlKey", "metaKey", "keyCode", "key"]);
        };
        return KeyboardEvent;
    }(wd.DomEvent));
    wd.KeyboardEvent = KeyboardEvent;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var CustomEvent = (function (_super) {
        __extends(CustomEvent, _super);
        function CustomEvent() {
            _super.apply(this, arguments);
            this.userData = null;
            this.p_type = wd.EEventType.CUSTOM;
        }
        CustomEvent.create = function (eventName) {
            var obj = new this(eventName);
            return obj;
        };
        CustomEvent.prototype.copyPublicAttri = function (destination, source) {
            var property = null;
            wdCb.ExtendUtils.extend(destination, function (item, property) {
                return property.slice(0, 1) !== "_"
                    && !wd.JudgeUtils.isFunction(item);
            });
            return destination;
        };
        CustomEvent.prototype.copy = function () {
            var eventObj = CustomEvent.create(this.name);
            return this.copyMember(eventObj, this, ["target", "currentTarget", "isStopPropagation", "phase"]);
        };
        CustomEvent.prototype.getDataFromDomEvent = function (event) {
            this.target = event.target;
            this.currentTarget = event.currentTarget;
            this.isStopPropagation = event.isStopPropagation;
        };
        return CustomEvent;
    }(wd.Event));
    wd.CustomEvent = CustomEvent;
})(wd || (wd = {}));
var wd;
(function (wd) {
    (function (EMouseButton) {
        EMouseButton[EMouseButton["LEFT"] = 0] = "LEFT";
        EMouseButton[EMouseButton["RIGHT"] = 1] = "RIGHT";
        EMouseButton[EMouseButton["CENTER"] = 2] = "CENTER";
    })(wd.EMouseButton || (wd.EMouseButton = {}));
    var EMouseButton = wd.EMouseButton;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var EventListener = (function () {
        function EventListener(option) {
            this.eventType = null;
            this.priority = null;
            this.handlerDataList = wdCb.Collection.create();
            this.eventType = option.eventType;
            this.priority = option.priority || 1;
        }
        EventListener.create = function (option) {
            var obj = new this(option);
            obj.initWhenCreate(option);
            return obj;
        };
        EventListener.prototype.initWhenCreate = function (option) {
            this._setHandlerDataList(option);
        };
        EventListener.prototype._setHandlerDataList = function (option) {
            var i = null, REGEX_HANDER = /on\w+/;
            for (i in option) {
                if (option.hasOwnProperty(i)) {
                    if (REGEX_HANDER.test(i)) {
                        this.handlerDataList.addChild({
                            eventName: this._parseEventName(i),
                            handler: option[i]
                        });
                    }
                }
            }
        };
        EventListener.prototype._parseEventName = function (handlerName) {
            return handlerName.slice(2).toLowerCase();
        };
        return EventListener;
    }());
    wd.EventListener = EventListener;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var EventHandler = (function () {
        function EventHandler() {
        }
        return EventHandler;
    }());
    wd.EventHandler = EventHandler;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var DomEventHandler = (function (_super) {
        __extends(DomEventHandler, _super);
        function DomEventHandler() {
            _super.apply(this, arguments);
        }
        DomEventHandler.prototype.off = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var self = this, eventRegister = wd.DomEventRegister.getInstance(), eventOffDataList = null;
            eventOffDataList = eventRegister.remove.apply(eventRegister, args);
            if (eventOffDataList) {
                eventOffDataList.forEach(function (list) {
                    list.forEach(function (eventOffData) {
                        self._unBind(eventOffData.dom, eventOffData.eventName, eventOffData.domHandler);
                    });
                });
            }
        };
        DomEventHandler.prototype.trigger = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var dom = null, event = null, eventName = null, registerDataList = null;
            if (args.length === 1) {
                event = args[0];
                dom = this.getDefaultDom();
            }
            else {
                dom = args[0];
                event = args[1];
            }
            eventName = event.name;
            registerDataList = wd.DomEventRegister.getInstance().getEventRegisterDataList(dom, eventName);
            if (registerDataList === null || registerDataList.getCount() === 0) {
                return;
            }
            registerDataList.forEach(function (registerData) {
                var eventCopy = event.copy();
                registerData.handler(eventCopy, registerData.eventData);
            });
        };
        DomEventHandler.prototype.clearHandler = function () {
        };
        DomEventHandler.prototype.buildDomHandler = function (dom, eventName) {
            var self = this, context = wd.root;
            return wdCb.EventUtils.bindEvent(context, function (event) {
                self.triggerDomEvent(dom, event, eventName);
            });
        };
        DomEventHandler.prototype.handler = function (dom, eventName, handler, priority) {
            var domHandler = null, originHandler = handler;
            handler = this.addEngineHandler(eventName, handler);
            if (!wd.DomEventRegister.getInstance().isBinded(dom, eventName)) {
                domHandler = this._bind(dom, eventName);
            }
            else {
                domHandler = wd.DomEventRegister.getInstance().getDomHandler(dom, eventName);
            }
            wd.DomEventRegister.getInstance().register(dom, eventName, this.createEventData(), handler, originHandler, domHandler, priority);
        };
        DomEventHandler.prototype._bind = function (dom, eventName) {
            var domHandler = null;
            domHandler = this.buildDomHandler(dom, eventName);
            wdCb.EventUtils.addEvent(dom, wd.EventNameHandler.handleEventName(eventName), domHandler);
            return domHandler;
        };
        DomEventHandler.prototype._unBind = function (dom, eventName, handler) {
            wdCb.EventUtils.removeEvent(dom, wd.EventNameHandler.handleEventName(eventName), handler);
        };
        __decorate([
            wd.virtual
        ], DomEventHandler.prototype, "clearHandler", null);
        return DomEventHandler;
    }(wd.EventHandler));
    wd.DomEventHandler = DomEventHandler;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var MouseEventHandler = (function (_super) {
        __extends(MouseEventHandler, _super);
        function MouseEventHandler() {
            _super.apply(this, arguments);
        }
        MouseEventHandler.getInstance = function () {
            if (this._instance === null) {
                this._instance = new this();
            }
            return this._instance;
        };
        MouseEventHandler.prototype.on = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var dom = null, eventName = null, handler = null, priority = null;
            if (args.length === 3) {
                dom = this.getDefaultDom();
                eventName = args[0];
                handler = args[1];
                priority = args[2];
            }
            else {
                dom = args[0];
                eventName = args[1];
                handler = args[2];
                priority = args[3];
            }
            this.handler(dom, eventName, handler, priority);
        };
        MouseEventHandler.prototype.getDefaultDom = function () {
            return document.body;
        };
        MouseEventHandler.prototype.triggerDomEvent = function (dom, event, eventName) {
            var eventObj = this._createEventObject(dom, event, eventName);
            wd.EventManager.trigger(dom, eventObj);
        };
        MouseEventHandler.prototype.addEngineHandler = function (eventName, handler) {
            var resultHandler = null;
            switch (eventName) {
                case wd.EEventName.MOUSEMOVE:
                    resultHandler = this._handleMove(handler);
                    break;
                default:
                    resultHandler = handler;
                    break;
            }
            return resultHandler;
        };
        MouseEventHandler.prototype.createEventData = function () {
            var eventData = wdCb.Hash.create();
            eventData.addChild("lastX", null);
            eventData.addChild("lastY", null);
            return eventData;
        };
        MouseEventHandler.prototype._handleMove = function (handler) {
            var self = this;
            return function (event, eventData) {
                self._copyEventDataToEventObject(event, eventData);
                handler(event);
                self._saveLocation(event, eventData);
            };
        };
        MouseEventHandler.prototype._createEventObject = function (dom, event, eventName) {
            var obj = wd.MouseEvent.create(event ? event : wd.root.event, eventName);
            obj.target = dom;
            return obj;
        };
        MouseEventHandler.prototype._copyEventDataToEventObject = function (event, eventData) {
            event.lastX = eventData.getChild("lastX");
            event.lastY = eventData.getChild("lastY");
        };
        MouseEventHandler.prototype._saveLocation = function (event, eventData) {
            var location = event.location;
            eventData.addChild("lastX", location.x);
            eventData.addChild("lastY", location.y);
        };
        MouseEventHandler._instance = null;
        __decorate([
            wd.require(function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i - 0] = arguments[_i];
                }
                if (args.length === 4) {
                    var dom = args[0];
                    wd.assert(wd.JudgeUtils.isDom(dom), wd.Log.info.FUNC_MUST_BE("first param", "HTMLElement"));
                }
            })
        ], MouseEventHandler.prototype, "on", null);
        return MouseEventHandler;
    }(wd.DomEventHandler));
    wd.MouseEventHandler = MouseEventHandler;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var KeyboardEventHandler = (function (_super) {
        __extends(KeyboardEventHandler, _super);
        function KeyboardEventHandler() {
            _super.apply(this, arguments);
        }
        KeyboardEventHandler.getInstance = function () {
            if (this._instance === null) {
                this._instance = new this();
            }
            return this._instance;
        };
        KeyboardEventHandler.prototype.on = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var eventName = null, handler = null, priority = null;
            if (args.length === 3) {
                eventName = args[0];
                handler = args[1];
                priority = args[2];
            }
            else {
                wd.Log.warn("keyboard event can only bind on document.body");
                eventName = args[1];
                handler = args[2];
                priority = args[3];
            }
            this.handler(this.getDefaultDom(), eventName, handler, priority);
        };
        KeyboardEventHandler.prototype.triggerDomEvent = function (dom, event, eventName) {
            var eventObj = this._createEventObject(dom, event, eventName);
            wd.EventManager.trigger(dom, eventObj);
        };
        KeyboardEventHandler.prototype.getDefaultDom = function () {
            return document.body;
        };
        KeyboardEventHandler.prototype.addEngineHandler = function (eventName, handler) {
            var resultHandler = null;
            switch (eventName) {
                case wd.EEventName.KEYDOWN:
                    resultHandler = this._handleKeyDown(handler);
                    break;
                case wd.EEventName.KEYUP:
                    resultHandler = this._handleKeyUp(handler);
                    break;
                default:
                    resultHandler = handler;
                    break;
            }
            return resultHandler;
        };
        KeyboardEventHandler.prototype.createEventData = function () {
            var eventData = wdCb.Hash.create();
            eventData.addChild("keyState", {});
            return eventData;
        };
        KeyboardEventHandler.prototype._handleKeyDown = function (handler) {
            var self = this;
            return function (event, eventData) {
                var keyState = eventData.getChild("keyState");
                self._setKeyStateAllFalse(keyState);
                keyState[event.key] = true;
                self._copyEventDataToEventObject(event, eventData);
                handler(event);
            };
        };
        KeyboardEventHandler.prototype._handleKeyUp = function (handler) {
            var self = this;
            return function (event, eventData) {
                self._setKeyStateAllFalse(eventData.getChild("keyState"));
                self._copyEventDataToEventObject(event, eventData);
                handler(event);
            };
        };
        KeyboardEventHandler.prototype._copyEventDataToEventObject = function (event, eventData) {
            event.keyState = eventData.getChild("keyState");
        };
        KeyboardEventHandler.prototype._setKeyStateAllFalse = function (keyState) {
            for (var i in keyState) {
                if (keyState.hasOwnProperty(i)) {
                    keyState[i] = false;
                }
            }
        };
        KeyboardEventHandler.prototype._createEventObject = function (dom, event, eventName) {
            var obj = wd.KeyboardEvent.create(event ? event : wd.root.event, eventName);
            obj.target = dom;
            return obj;
        };
        KeyboardEventHandler._instance = null;
        return KeyboardEventHandler;
    }(wd.DomEventHandler));
    wd.KeyboardEventHandler = KeyboardEventHandler;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var CustomEventHandler = (function (_super) {
        __extends(CustomEventHandler, _super);
        function CustomEventHandler() {
            _super.apply(this, arguments);
        }
        CustomEventHandler.getInstance = function () {
            if (this._instance === null) {
                this._instance = new this();
            }
            return this._instance;
        };
        CustomEventHandler.prototype.on = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            if (args.length === 3) {
                var eventName = args[0], handler = args[1], originHandler = handler, priority = args[2];
                wd.CustomEventRegister.getInstance().register(null, eventName, handler, originHandler, null, priority);
            }
            else if (args.length === 4) {
                var target = args[0], eventName = args[1], handler = args[2], originHandler = handler, priority = args[3];
                wd.CustomEventRegister.getInstance().register(target, eventName, handler, originHandler, null, priority);
            }
        };
        CustomEventHandler.prototype.off = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var eventRegister = wd.CustomEventRegister.getInstance();
            eventRegister.remove.apply(eventRegister, args);
        };
        CustomEventHandler.prototype.trigger = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var event = null;
            if (args.length === 1 || args.length === 2) {
                var userData = null;
                if (args.length === 1) {
                    event = args[0];
                }
                else {
                    event = args[0];
                    userData = args[1];
                }
                return this._triggerEventHandler(event, userData);
            }
            else if (args.length === 3 || args.length === 4) {
                var target = null, userData = null, notSetTarget = null;
                if (args.length === 3) {
                    target = args[0];
                    event = args[1];
                    notSetTarget = args[2];
                }
                else {
                    target = args[0];
                    event = args[1];
                    userData = args[2];
                    notSetTarget = args[3];
                }
                return this._triggerTargetAndEventHandler(target, event, userData, notSetTarget);
            }
        };
        CustomEventHandler.prototype._triggerEventHandler = function (event, userData) {
            var registerDataList = null, self = this;
            registerDataList = wd.CustomEventRegister.getInstance().getEventRegisterDataList(event.name);
            if (registerDataList === null || registerDataList.getCount() === 0) {
                return false;
            }
            registerDataList.forEach(function (registerData) {
                event.currentTarget = registerData.target;
                event.target = registerData.target;
                self._setUserData(event, userData);
                registerData.handler(event);
            });
            return true;
        };
        CustomEventHandler.prototype._triggerTargetAndEventHandler = function (target, event, userData, notSetTarget) {
            var registerDataList = null, isStopPropagation = false, self = this;
            if (!notSetTarget) {
                event.target = target;
            }
            registerDataList = wd.CustomEventRegister.getInstance().getEventRegisterDataList(target, event.name);
            if (registerDataList === null || registerDataList.getCount() === 0) {
                return false;
            }
            registerDataList.forEach(function (registerData) {
                event.currentTarget = registerData.target;
                self._setUserData(event, userData);
                registerData.handler(event);
                if (event.isStopPropagation) {
                    isStopPropagation = true;
                }
            });
            return isStopPropagation;
        };
        CustomEventHandler.prototype._setUserData = function (event, userData) {
            if (userData) {
                event.userData = userData;
            }
        };
        CustomEventHandler._instance = null;
        return CustomEventHandler;
    }(wd.EventHandler));
    wd.CustomEventHandler = CustomEventHandler;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var EventDispatcher = (function () {
        function EventDispatcher() {
        }
        return EventDispatcher;
    }());
    wd.EventDispatcher = EventDispatcher;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var CustomEventDispatcher = (function (_super) {
        __extends(CustomEventDispatcher, _super);
        function CustomEventDispatcher() {
            _super.apply(this, arguments);
        }
        CustomEventDispatcher.getInstance = function () {
            if (this._instance === null) {
                this._instance = new this();
            }
            return this._instance;
        };
        CustomEventDispatcher.prototype.trigger = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            if (args.length === 1) {
                var event_1 = args[0], eventType = event_1.type;
                return wd.EventHandlerFactory.createEventHandler(eventType)
                    .trigger(event_1);
            }
            else if (args.length === 2 && (args[0] instanceof wd.Event)) {
                var event_2 = args[0], userData = args[1], eventType = event_2.type;
                return wd.EventHandlerFactory.createEventHandler(eventType)
                    .trigger(event_2, userData);
            }
            else if ((args.length === 2 && args[0] instanceof wd.EntityObject) || (args.length === 3 && wd.JudgeUtils.isBoolean(args[2]))) {
                var target = args[0], event_3 = args[1], notSetTarget = args[2] === void 0 ? false : args[2], eventType = event_3.type;
                return wd.EventHandlerFactory.createEventHandler(eventType)
                    .trigger(target, event_3, notSetTarget);
            }
            else if (args.length === 3 || args.length === 4) {
                var target = args[0], event_4 = args[1], userData = args[2], notSetTarget = args[3] === void 0 ? false : args[3], eventType = event_4.type;
                return wd.EventHandlerFactory.createEventHandler(eventType)
                    .trigger(target, event_4, userData, notSetTarget);
            }
        };
        CustomEventDispatcher.prototype.emit = function (target, eventObject, userData) {
            var isStopPropagation = false;
            if (!target) {
                return;
            }
            eventObject.phase = wd.EEventPhase.EMIT;
            eventObject.target = target;
            do {
                isStopPropagation = this._triggerWithUserData(target, eventObject, userData, true);
                if (isStopPropagation) {
                    break;
                }
                target = target.bubbleParent;
            } while (target);
        };
        CustomEventDispatcher.prototype.broadcast = function (target, eventObject, userData) {
            var self = this;
            var iterator = function (obj) {
                var children = obj.getChildren();
                if (children.getCount() === 0) {
                    return;
                }
                children.forEach(function (child) {
                    self._triggerWithUserData(child, eventObject, userData, true);
                    iterator(child);
                });
            };
            if (!target) {
                return;
            }
            eventObject.phase = wd.EEventPhase.BROADCAST;
            eventObject.target = target;
            this._triggerWithUserData(target, eventObject, userData, true);
            iterator(target);
        };
        CustomEventDispatcher.prototype._triggerWithUserData = function (target, event, userData, notSetTarget) {
            return userData ? this.trigger(target, event, userData, notSetTarget)
                : this.trigger(target, event, notSetTarget);
        };
        CustomEventDispatcher._instance = null;
        return CustomEventDispatcher;
    }(wd.EventDispatcher));
    wd.CustomEventDispatcher = CustomEventDispatcher;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var DomEventDispatcher = (function (_super) {
        __extends(DomEventDispatcher, _super);
        function DomEventDispatcher() {
            _super.apply(this, arguments);
        }
        DomEventDispatcher.getInstance = function () {
            if (this._instance === null) {
                this._instance = new this();
            }
            return this._instance;
        };
        DomEventDispatcher.prototype.trigger = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            if (args.length === 1) {
                var event_5 = args[0], eventType = event_5.type;
                wd.EventHandlerFactory.createEventHandler(eventType)
                    .trigger(event_5);
            }
            else if (args.length === 2 && wd.JudgeUtils.isDom(args[0])) {
                var dom = args[0], event_6 = args[1], eventType = event_6.type;
                wd.EventHandlerFactory.createEventHandler(eventType)
                    .trigger(dom, event_6);
            }
        };
        DomEventDispatcher._instance = null;
        return DomEventDispatcher;
    }(wd.EventDispatcher));
    wd.DomEventDispatcher = DomEventDispatcher;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var EventRegister = (function () {
        function EventRegister() {
            this.listenerMap = wd.ABSTRACT_ATTRIBUTE;
        }
        EventRegister.prototype.getEventRegisterDataList = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var result = this.listenerMap.getChild.apply(this.listenerMap, args);
            if (!result) {
                return null;
            }
            return result.sort(function (dataA, dataB) {
                return dataB.priority - dataA.priority;
            });
        };
        EventRegister.prototype.filter = function (func) {
            return this.listenerMap.filter(func);
        };
        EventRegister.prototype.forEach = function (func) {
            return this.listenerMap.forEach(func);
        };
        EventRegister.prototype.getChild = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            return this.listenerMap.getChild.apply(this.listenerMap, Array.prototype.slice.call(arguments, 0));
        };
        EventRegister.prototype.getEventNameFromKey = function (key) {
            return this.listenerMap.getEventNameFromKey(key);
        };
        return EventRegister;
    }());
    wd.EventRegister = EventRegister;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var CustomEventRegister = (function (_super) {
        __extends(CustomEventRegister, _super);
        function CustomEventRegister() {
            _super.apply(this, arguments);
            this.listenerMap = wd.CustomEventListenerMap.create();
        }
        CustomEventRegister.getInstance = function () {
            if (this._instance === null) {
                this._instance = new this();
            }
            return this._instance;
        };
        CustomEventRegister.prototype.register = function (target, eventName, handler, originHandler, domHandler, priority) {
            this.listenerMap.appendChild(target, eventName, {
                target: target,
                eventName: eventName,
                handler: handler,
                originHandler: originHandler,
                domHandler: domHandler,
                priority: priority
            });
        };
        CustomEventRegister.prototype.remove = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var target = args[0];
            if (args.length === 1 && wd.JudgeUtils.isString(args[0])) {
                var eventName = args[0];
                this.listenerMap.removeChild(eventName);
            }
            else if (args.length === 1 && args[0] instanceof wd.EntityObject) {
                this.listenerMap.removeChild(target);
                this._handleAfterAllEventHandlerRemoved(target);
            }
            else if (args.length === 2 && wd.JudgeUtils.isFunction(args[1])) {
                var eventName = args[0], handler = args[1];
                this.listenerMap.removeChild(eventName, handler);
            }
            else if (args.length === 2 && wd.JudgeUtils.isNumber(args[0])) {
                var uid = args[0], eventName = args[1];
                this.listenerMap.removeChild(uid, eventName);
            }
            else if ((args.length === 2 && args[0] instanceof wd.EntityObject) || args.length === 3) {
                this.listenerMap.removeChild.apply(this.listenerMap, args);
                if (this._isAllEventHandlerRemoved(target)) {
                    this._handleAfterAllEventHandlerRemoved(target);
                }
            }
        };
        CustomEventRegister.prototype.setBubbleParent = function (target, parent) {
            target.bubbleParent = parent;
        };
        CustomEventRegister.prototype.getUidFromKey = function (key) {
            return this.listenerMap.getUidFromKey(key);
        };
        CustomEventRegister.prototype.isTarget = function (key, target, list) {
            return this.listenerMap.isTarget(key, target, list);
        };
        CustomEventRegister.prototype._isAllEventHandlerRemoved = function (target) {
            return !this.listenerMap.hasChild(function (list, key) {
                return key.indexOf(String(target.uid)) > -1 && (list && list.getCount() > 0);
            });
        };
        CustomEventRegister.prototype._handleAfterAllEventHandlerRemoved = function (target) {
            this.setBubbleParent(target, null);
        };
        CustomEventRegister._instance = null;
        return CustomEventRegister;
    }(wd.EventRegister));
    wd.CustomEventRegister = CustomEventRegister;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var DomEventRegister = (function (_super) {
        __extends(DomEventRegister, _super);
        function DomEventRegister() {
            _super.apply(this, arguments);
            this.listenerMap = wd.DomEventListenerMap.create();
        }
        DomEventRegister.getInstance = function () {
            if (this._instance === null) {
                this._instance = new this();
            }
            return this._instance;
        };
        DomEventRegister.prototype.register = function (dom, eventName, eventData, handler, originHandler, domHandler, priority) {
            this.listenerMap.appendChild(dom, eventName, {
                dom: dom,
                eventName: eventName,
                eventData: eventData,
                handler: handler,
                originHandler: originHandler,
                domHandler: domHandler,
                priority: priority
            });
        };
        DomEventRegister.prototype.remove = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var result = null;
            if (args.length === 1 && wd.JudgeUtils.isString(args[0])) {
                var eventName = args[0];
                result = this.listenerMap.removeChild(eventName);
            }
            else if (args.length === 2 && wd.JudgeUtils.isFunction(args[1])) {
                var eventName = args[0], handler = args[1];
                result = this.listenerMap.removeChild(eventName, handler);
            }
            else if ((args.length === 2 && wd.JudgeUtils.isDom(args[0])) || args.length === 3) {
                result = this.listenerMap.removeChild.apply(this.listenerMap, args);
            }
            return result;
        };
        DomEventRegister.prototype.isBinded = function (dom, eventName) {
            return this.listenerMap.hasChild(dom, eventName);
        };
        DomEventRegister.prototype.isDom = function (key, dom, list) {
            return this.listenerMap.isDom(key, dom, list);
        };
        DomEventRegister.prototype.getDomHandler = function (dom, eventName) {
            var list = this.getChild(dom, eventName);
            if (list && list.getCount() > 0) {
                return list.getChild(0).domHandler;
            }
        };
        DomEventRegister._instance = null;
        return DomEventRegister;
    }(wd.EventRegister));
    wd.DomEventRegister = DomEventRegister;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var EventBinder = (function () {
        function EventBinder() {
        }
        return EventBinder;
    }());
    wd.EventBinder = EventBinder;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var CustomEventBinder = (function (_super) {
        __extends(CustomEventBinder, _super);
        function CustomEventBinder() {
            _super.apply(this, arguments);
        }
        CustomEventBinder.getInstance = function () {
            if (this._instance === null) {
                this._instance = new this();
            }
            return this._instance;
        };
        CustomEventBinder.prototype.on = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            if (args.length === 2) {
                var eventName = args[0], handler = args[1];
                wd.EventHandlerFactory.createEventHandler(wd.EventTable.getEventType(eventName))
                    .on(eventName, handler);
            }
            else if (args.length === 3 && wd.JudgeUtils.isString(args[0])) {
                var eventName = args[0], handler = args[1], priority = args[2];
                wd.EventHandlerFactory.createEventHandler(wd.EventTable.getEventType(eventName))
                    .on(eventName, handler, priority);
            }
            else if (args.length === 3 && args[0] instanceof wd.EntityObject) {
                var target = args[0], eventName = args[1], handler = args[2];
                wd.EventHandlerFactory.createEventHandler(wd.EventTable.getEventType(eventName))
                    .on(target, eventName, handler);
            }
            else if (args.length === 4) {
                var target = args[0], eventName = args[1], handler = args[2], priority = args[3];
                wd.EventHandlerFactory.createEventHandler(wd.EventTable.getEventType(eventName))
                    .on(target, eventName, handler, priority);
            }
        };
        CustomEventBinder.prototype.off = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var eventRegister = wd.CustomEventRegister.getInstance();
            if (args.length === 0) {
                eventRegister.forEach(function (list, key) {
                    var eventName = eventRegister.getEventNameFromKey(key), targetUid = eventRegister.getUidFromKey(key);
                    if (!targetUid) {
                        wd.EventHandlerFactory.createEventHandler(wd.EventTable.getEventType(eventName))
                            .off(eventName);
                    }
                    else {
                        wd.EventHandlerFactory.createEventHandler(wd.EventTable.getEventType(eventName)).off(targetUid, eventName);
                    }
                });
            }
            else if (args.length === 1 && wd.JudgeUtils.isString(args[0])) {
                var eventName_4 = args[0];
                eventRegister.forEach(function (list, key) {
                    var registeredEventName = eventRegister.getEventNameFromKey(key);
                    if (registeredEventName === eventName_4) {
                        wd.EventHandlerFactory.createEventHandler(wd.EventTable.getEventType(eventName_4))
                            .off(eventName_4);
                    }
                });
            }
            else if (args.length === 1 && args[0] instanceof wd.EntityObject) {
                var target_3 = args[0];
                eventRegister.forEach(function (list, key) {
                    var eventName = eventRegister.getEventNameFromKey(key);
                    if (eventRegister.isTarget(key, target_3, list)) {
                        wd.EventHandlerFactory.createEventHandler(wd.EventTable.getEventType(eventName))
                            .off(target_3, eventName);
                    }
                });
            }
            else if (args.length === 2 && wd.JudgeUtils.isString(args[0])) {
                var eventName = args[0], handler = args[1];
                wd.EventHandlerFactory.createEventHandler(wd.EventTable.getEventType(eventName))
                    .off(eventName, handler);
            }
            else if (args.length === 2 && args[0] instanceof wd.EntityObject) {
                var target = args[0], eventName = args[1];
                wd.EventHandlerFactory.createEventHandler(wd.EventTable.getEventType(eventName))
                    .off(target, eventName);
            }
            else if (args.length === 3 && args[0] instanceof wd.EntityObject) {
                var target = args[0], eventName = args[1], handler = args[2];
                wd.EventHandlerFactory.createEventHandler(wd.EventTable.getEventType(eventName))
                    .off(target, eventName, handler);
            }
        };
        CustomEventBinder.prototype._checkEventSeparator = function (eventName) {
            wd.assert(eventName.indexOf(wd.CustomEventListenerMap.eventSeparator) === -1, wd.Log.info.FUNC_SHOULD_NOT("eventName", "contain " + wd.CustomEventListenerMap.eventSeparator));
        };
        CustomEventBinder._instance = null;
        __decorate([
            wd.require(function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i - 0] = arguments[_i];
                }
                if (args.length === 1) {
                }
                else if (args.length === 2) {
                    var eventName = args[0];
                    this._checkEventSeparator(eventName);
                }
                else if (args.length === 3 && wd.JudgeUtils.isString(args[0])) {
                    var eventName = args[0];
                    this._checkEventSeparator(eventName);
                }
                else if (args.length === 3 && args[0] instanceof wd.EntityObject) {
                    var eventName = args[1];
                    this._checkEventSeparator(eventName);
                }
                else if (args.length === 4) {
                    var eventName = args[1];
                    this._checkEventSeparator(eventName);
                }
            })
        ], CustomEventBinder.prototype, "on", null);
        return CustomEventBinder;
    }(wd.EventBinder));
    wd.CustomEventBinder = CustomEventBinder;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var DomEventBinder = (function (_super) {
        __extends(DomEventBinder, _super);
        function DomEventBinder() {
            _super.apply(this, arguments);
        }
        DomEventBinder.getInstance = function () {
            if (this._instance === null) {
                this._instance = new this();
            }
            return this._instance;
        };
        DomEventBinder.prototype.on = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            if (args.length === 1) {
                var listener_1 = !(args[0] instanceof wd.EventListener) ? wd.EventListener.create(args[0]) : args[0];
                listener_1.handlerDataList.forEach(function (handlerData) {
                    wd.EventHandlerFactory.createEventHandler(listener_1.eventType)
                        .on(handlerData.eventName, handlerData.handler, listener_1.priority);
                });
            }
            else if (args.length === 2 && wd.JudgeUtils.isString(args[0])) {
                var eventName = args[0], handler = args[1];
                wd.EventHandlerFactory.createEventHandler(wd.EventTable.getEventType(eventName))
                    .on(eventName, handler);
            }
            else if (args.length === 2 && wd.JudgeUtils.isDom(args[0])) {
                var dom_1 = args[0], listener_2 = !(args[0] instanceof wd.EventListener) ? wd.EventListener.create(args[0]) : args[0];
                listener_2.handlerDataList.forEach(function (handlerData) {
                    wd.EventHandlerFactory.createEventHandler(listener_2.eventType)
                        .on(dom_1, handlerData.eventName, handlerData.handler, listener_2.priority);
                });
            }
            else if (args.length === 3 && wd.JudgeUtils.isString(args[0])) {
                var eventName = args[0], handler = args[1], priority = args[2];
                wd.EventHandlerFactory.createEventHandler(wd.EventTable.getEventType(eventName))
                    .on(eventName, handler, priority);
            }
            else if (args.length === 3 && wd.JudgeUtils.isDom(args[0])) {
                var dom = args[0], eventName = args[1], handler = args[2];
                wd.EventHandlerFactory.createEventHandler(wd.EventTable.getEventType(eventName))
                    .on(dom, eventName, handler);
            }
            else if (args.length === 4) {
                var dom = args[0], eventName = args[1], handler = args[2], priority = args[3];
                wd.EventHandlerFactory.createEventHandler(wd.EventTable.getEventType(eventName))
                    .on(dom, eventName, handler, priority);
            }
        };
        DomEventBinder.prototype.off = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var eventRegister = wd.DomEventRegister.getInstance();
            if (args.length === 0) {
                eventRegister.forEach(function (list, key) {
                    var eventName = eventRegister.getEventNameFromKey(key);
                    wd.EventHandlerFactory.createEventHandler(wd.EventTable.getEventType(eventName))
                        .off(eventName);
                });
            }
            else if (args.length === 1 && wd.JudgeUtils.isString(args[0])) {
                var eventName_5 = args[0];
                eventRegister.forEach(function (list, key) {
                    var registeredEventName = eventRegister.getEventNameFromKey(key);
                    if (registeredEventName === eventName_5) {
                        wd.EventHandlerFactory.createEventHandler(wd.EventTable.getEventType(eventName_5))
                            .off(eventName_5);
                    }
                });
            }
            else if (args.length === 1 && wd.JudgeUtils.isDom(args[0])) {
                var dom_2 = args[0];
                eventRegister.forEach(function (list, key) {
                    var eventName = eventRegister.getEventNameFromKey(key);
                    if (eventRegister.isDom(key, dom_2, list)) {
                        wd.EventHandlerFactory.createEventHandler(wd.EventTable.getEventType(eventName))
                            .off(dom_2, eventName);
                    }
                });
            }
            else if (args.length === 2 && wd.JudgeUtils.isString(args[0])) {
                var eventName = args[0], handler = args[1];
                wd.EventHandlerFactory.createEventHandler(wd.EventTable.getEventType(eventName))
                    .off(eventName, handler);
            }
            else if (args.length === 2 && wd.JudgeUtils.isDom(args[0])) {
                var dom = args[0], eventName = args[1];
                wd.EventHandlerFactory.createEventHandler(wd.EventTable.getEventType(eventName))
                    .off(dom, eventName);
            }
            else if (args.length === 3) {
                var dom = args[0], eventName = args[1], handler = args[2];
                wd.EventHandlerFactory.createEventHandler(wd.EventTable.getEventType(eventName))
                    .off(dom, eventName, handler);
            }
        };
        DomEventBinder.prototype._checkEventSeparator = function (eventName) {
            wd.assert(eventName.indexOf(wd.DomEventListenerMap.eventSeparator) === -1, wd.Log.info.FUNC_SHOULD_NOT("eventName", "contain " + wd.DomEventListenerMap.eventSeparator));
        };
        DomEventBinder._instance = null;
        __decorate([
            wd.require(function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i - 0] = arguments[_i];
                }
                if (args.length === 1) {
                }
                else if (args.length === 2) {
                }
                else if (args.length === 3 && wd.JudgeUtils.isString(args[0])) {
                    var eventName = args[0];
                    this._checkEventSeparator(eventName);
                }
                else if (args.length === 3 && wd.JudgeUtils.isDom(args[0])) {
                    var eventName = args[1];
                    this._checkEventSeparator(eventName);
                }
                else if (args.length === 4) {
                    var eventName = args[1];
                    this._checkEventSeparator(eventName);
                }
            })
        ], DomEventBinder.prototype, "on", null);
        return DomEventBinder;
    }(wd.EventBinder));
    wd.DomEventBinder = DomEventBinder;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var EventHandlerFactory = (function () {
        function EventHandlerFactory() {
        }
        EventHandlerFactory.createEventHandler = function (eventType) {
            var handler = null;
            switch (eventType) {
                case wd.EEventType.MOUSE:
                    handler = wd.MouseEventHandler.getInstance();
                    break;
                case wd.EEventType.KEYBOARD:
                    handler = wd.KeyboardEventHandler.getInstance();
                    break;
                case wd.EEventType.CUSTOM:
                    handler = wd.CustomEventHandler.getInstance();
                    break;
                default:
                    wd.Log.error(true, wd.Log.info.FUNC_INVALID("eventType"));
                    break;
            }
            return handler;
        };
        return EventHandlerFactory;
    }());
    wd.EventHandlerFactory = EventHandlerFactory;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var EventBinderFactory = (function () {
        function EventBinderFactory() {
        }
        EventBinderFactory.createEventBinder = function (eventName) {
            var binder = null, eventType = wd.EventTable.getEventType(eventName);
            switch (eventType) {
                case wd.EEventType.MOUSE:
                case wd.EEventType.KEYBOARD:
                    binder = wd.DomEventBinder.getInstance();
                    break;
                case wd.EEventType.CUSTOM:
                    binder = wd.CustomEventBinder.getInstance();
                    break;
                default:
                    wd.Log.error(true, wd.Log.info.FUNC_INVALID("eventName:" + eventName));
                    break;
            }
            return binder;
        };
        return EventBinderFactory;
    }());
    wd.EventBinderFactory = EventBinderFactory;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var EventDispatcherFactory = (function () {
        function EventDispatcherFactory() {
        }
        EventDispatcherFactory.createEventDispatcher = function (event) {
            var dispatcher = null, eventType = event.type;
            switch (eventType) {
                case wd.EEventType.MOUSE:
                case wd.EEventType.KEYBOARD:
                    dispatcher = wd.DomEventDispatcher.getInstance();
                    break;
                case wd.EEventType.CUSTOM:
                    dispatcher = wd.CustomEventDispatcher.getInstance();
                    break;
                default:
                    wd.Log.error(true, wd.Log.info.FUNC_INVALID("event:" + event));
                    break;
            }
            return dispatcher;
        };
        return EventDispatcherFactory;
    }());
    wd.EventDispatcherFactory = EventDispatcherFactory;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var EventManager = (function () {
        function EventManager() {
        }
        EventManager.on = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            if (args.length === 1) {
                var listener = args[0], eventBinder = wd.DomEventBinder.getInstance();
                eventBinder.on(listener);
            }
            else if (args.length === 2 && wd.JudgeUtils.isString(args[0])) {
                var eventName = args[0], handler = args[1], priority = 1, eventBinder = wd.EventBinderFactory.createEventBinder(eventName);
                eventBinder.on(eventName, handler, priority);
            }
            else if (args.length === 2 && wd.JudgeUtils.isDom(args[0])) {
                var dom = args[0], listener = args[1], eventBinder = wd.DomEventBinder.getInstance();
                eventBinder.on(dom, listener);
            }
            else if (args.length === 3 && wd.JudgeUtils.isString(args[0])) {
                var eventName = args[0], handler = args[1], priority = args[2], eventBinder = wd.EventBinderFactory.createEventBinder(eventName);
                eventBinder.on(eventName, handler, priority);
            }
            else if (args.length === 3 && args[0] instanceof wd.EntityObject) {
                var target = args[0], eventName = args[1], handler = args[2], priority = 1, eventBinder = wd.CustomEventBinder.getInstance();
                eventBinder.on(target, eventName, handler, priority);
            }
            else if (args.length === 3 && wd.JudgeUtils.isDom(args[0])) {
                var dom = args[0], eventName = args[1], handler = args[2], priority = 1, eventBinder = wd.DomEventBinder.getInstance();
                eventBinder.on(dom, eventName, handler, priority);
            }
            else if (args.length === 4 && args[0] instanceof wd.EntityObject) {
                var target = args[0], eventName = args[1], handler = args[2], priority = args[3], eventBinder = wd.CustomEventBinder.getInstance();
                eventBinder.on(target, eventName, handler, priority);
            }
            else if (args.length === 4 && wd.JudgeUtils.isDom(args[0])) {
                var dom = args[0], eventName = args[1], handler = args[2], priority = args[3], eventBinder = wd.DomEventBinder.getInstance();
                eventBinder.on(dom, eventName, handler, priority);
            }
        };
        EventManager.off = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            if (args.length === 0) {
                var customEventBinder = wd.CustomEventBinder.getInstance(), domEventBinder = wd.DomEventBinder.getInstance();
                customEventBinder.off();
                domEventBinder.off();
            }
            else if (args.length === 1 && wd.JudgeUtils.isString(args[0])) {
                var eventName = args[0], eventBinder = wd.EventBinderFactory.createEventBinder(eventName);
                eventBinder.off(eventName);
            }
            else if (args.length === 1 && args[0] instanceof wd.EntityObject) {
                var eventName = args[0], eventBinder = wd.CustomEventBinder.getInstance();
                eventBinder.off(eventName);
            }
            else if (args.length === 1 && wd.JudgeUtils.isDom(args[0])) {
                var eventName = args[0], eventBinder = wd.DomEventBinder.getInstance();
                eventBinder.off(eventName);
            }
            else if (args.length === 2 && wd.JudgeUtils.isString(args[0])) {
                var eventName = args[0], handler = args[1], eventBinder = wd.EventBinderFactory.createEventBinder(eventName);
                eventBinder.off(eventName, handler);
            }
            else if (args.length === 2 && args[0] instanceof wd.EntityObject) {
                var target = args[0], eventName = args[1], eventBinder = wd.CustomEventBinder.getInstance();
                eventBinder.off(target, eventName);
            }
            else if (args.length === 2 && wd.JudgeUtils.isDom(args[0])) {
                var dom = args[0], eventName = args[1], eventBinder = wd.DomEventBinder.getInstance();
                eventBinder.off(dom, eventName);
            }
            else if (args.length === 3 && args[0] instanceof wd.EntityObject) {
                var target = args[0], eventName = args[1], handler = args[2], eventBinder = wd.CustomEventBinder.getInstance();
                eventBinder.off(target, eventName, handler);
            }
            else if (args.length === 3 && wd.JudgeUtils.isDom(args[0])) {
                var dom = args[0], eventName = args[1], handler = args[2], eventBinder = wd.DomEventBinder.getInstance();
                eventBinder.off(dom, eventName, handler);
            }
        };
        EventManager.trigger = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            if (args.length === 1) {
                var event_7 = args[0], eventDispatcher = wd.EventDispatcherFactory.createEventDispatcher(event_7);
                eventDispatcher.trigger(event_7);
            }
            else if (args.length === 2 && args[0] instanceof wd.Event) {
                var event_8 = args[0], userData = args[1], eventDispatcher = wd.CustomEventDispatcher.getInstance();
                eventDispatcher.trigger(event_8, userData);
            }
            else if (args.length === 2 && args[0] instanceof wd.EntityObject) {
                var target = args[0], event_9 = args[1], eventDispatcher = wd.CustomEventDispatcher.getInstance();
                eventDispatcher.trigger(target, event_9);
            }
            else if (args.length === 2 && wd.JudgeUtils.isDom(args[0])) {
                var dom = args[0], event_10 = args[1], eventDispatcher = wd.DomEventDispatcher.getInstance();
                eventDispatcher.trigger(dom, event_10);
            }
            else if (args.length === 3) {
                var target = args[0], event_11 = args[1], userData = args[2], eventDispatcher = wd.CustomEventDispatcher.getInstance();
                eventDispatcher.trigger(target, event_11, userData);
            }
            else if (args.length === 4) {
                var target = args[0], event_12 = args[1], userData = args[2], notSetTarget = args[3], eventDispatcher = wd.CustomEventDispatcher.getInstance();
                eventDispatcher.trigger(target, event_12, userData, notSetTarget);
            }
        };
        EventManager.broadcast = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var eventDispatcher = wd.CustomEventDispatcher.getInstance();
            eventDispatcher.broadcast.apply(eventDispatcher, args);
        };
        EventManager.emit = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var eventDispatcher = wd.CustomEventDispatcher.getInstance();
            eventDispatcher.emit.apply(eventDispatcher, args);
        };
        EventManager.fromEvent = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var addHandler = null, removeHandler = null;
            if (args.length === 1) {
                var eventName_6 = args[0];
                addHandler = function (handler) {
                    EventManager.on(eventName_6, handler);
                };
                removeHandler = function (handler) {
                    EventManager.off(eventName_6, handler);
                };
            }
            else if (args.length === 2 && wd.JudgeUtils.isNumber(args[1])) {
                var eventName_7 = args[0], priority_1 = args[1];
                addHandler = function (handler) {
                    EventManager.on(eventName_7, handler, priority_1);
                };
                removeHandler = function (handler) {
                    EventManager.off(eventName_7, handler);
                };
            }
            else if (args.length === 2) {
                var eventName_8 = args[1];
                addHandler = function (handler) {
                    EventManager.on(args[0], eventName_8, handler);
                };
                removeHandler = function (handler) {
                    EventManager.off(args[0], eventName_8, handler);
                };
            }
            else if (args.length === 3) {
                var eventName_9 = args[1], priority_2 = args[2];
                addHandler = function (handler) {
                    EventManager.on(args[0], eventName_9, handler, priority_2);
                };
                removeHandler = function (handler) {
                    EventManager.off(args[0], eventName_9, handler);
                };
            }
            return wdFrp.fromEventPattern(addHandler, removeHandler);
        };
        EventManager.setBubbleParent = function (target, parent) {
            wd.CustomEventRegister.getInstance().setBubbleParent(target, parent);
        };
        __decorate([
            wd.require(function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i - 0] = arguments[_i];
                }
                if (args[0] instanceof wd.EntityObject) {
                    var eventName = args[1];
                    wd.assert(wd.EventTable.getEventType(eventName) === wd.EEventType.CUSTOM, wd.Log.info.FUNC_MUST_BE("event", "custom event"));
                }
                else if (wd.JudgeUtils.isDom(args[0])) {
                    var eventName = args[1], eventType = wd.EventTable.getEventType(eventName);
                    wd.assert(eventType === wd.EEventType.MOUSE || eventType === wd.EEventType.KEYBOARD, wd.Log.info.FUNC_MUST_BE("event", "dom event"));
                }
            })
        ], EventManager, "on", null);
        __decorate([
            wd.require(function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i - 0] = arguments[_i];
                }
                if (args.length > 2 && args[0] instanceof wd.EntityObject) {
                    var eventName = args[1];
                    wd.assert(wd.EventTable.getEventType(eventName) === wd.EEventType.CUSTOM, wd.Log.info.FUNC_MUST_BE("event", "custom event"));
                }
                else if (args.length > 2 && wd.JudgeUtils.isDom(args[0])) {
                    var eventName = args[1], eventType = wd.EventTable.getEventType(eventName);
                    wd.assert(eventType === wd.EEventType.MOUSE || eventType === wd.EEventType.KEYBOARD, wd.Log.info.FUNC_MUST_BE("event", "dom event"));
                }
            })
        ], EventManager, "off", null);
        __decorate([
            wd.require(function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i - 0] = arguments[_i];
                }
                if (args.length === 2 && args[0] instanceof wd.Event) {
                    var event_13 = args[0];
                    wd.assert(event_13 instanceof wd.CustomEvent, wd.Log.info.FUNC_MUST_BE("event type", "CUSTOM"));
                }
                else if (args[0] instanceof wd.EntityObject) {
                    var event_14 = args[1];
                    wd.assert(event_14 instanceof wd.CustomEvent, wd.Log.info.FUNC_MUST_BE("event type", "CUSTOM"));
                }
            })
        ], EventManager, "trigger", null);
        __decorate([
            wd.require(function (target, eventObject, userData) {
                wd.assert(eventObject instanceof wd.CustomEvent, wd.Log.info.FUNC_MUST_BE("eventObject", "CustomEvent"));
            })
        ], EventManager, "broadcast", null);
        __decorate([
            wd.require(function (target, eventObject, userData) {
                wd.assert(eventObject instanceof wd.CustomEvent, wd.Log.info.FUNC_MUST_BE("eventObject", "CustomEvent"));
            })
        ], EventManager, "emit", null);
        __decorate([
            wd.require(function (target, parent) {
                wd.assert(target instanceof wd.EntityObject, "only EntityObject can setBubleParent");
            })
        ], EventManager, "setBubbleParent", null);
        return EventManager;
    }());
    wd.EventManager = EventManager;
})(wd || (wd = {}));
var wd;
(function (wd) {
    (function (EEngineEvent) {
        EEngineEvent[EEngineEvent["STARTLOOP"] = "dy_startLoop"] = "STARTLOOP";
        EEngineEvent[EEngineEvent["ENDLOOP"] = "dy_endLoop"] = "ENDLOOP";
        EEngineEvent[EEngineEvent["BEFORE_GAMEOBJECT_INIT"] = "dy_beforeGameObjectInit"] = "BEFORE_GAMEOBJECT_INIT";
        EEngineEvent[EEngineEvent["AFTER_GAMEOBJECT_INIT"] = "dy_afterGameObjectInit"] = "AFTER_GAMEOBJECT_INIT";
        EEngineEvent[EEngineEvent["AFTER_GAMEOBJECT_INIT_RIGIDBODY_ADD_CONSTRAINT"] = "dy_afterGameObjectInit_rigidBody_addConstraint"] = "AFTER_GAMEOBJECT_INIT_RIGIDBODY_ADD_CONSTRAINT";
        EEngineEvent[EEngineEvent["MOUSE_CLICK"] = "dy_mouseclick"] = "MOUSE_CLICK";
        EEngineEvent[EEngineEvent["MOUSE_DOWN"] = "dy_mousedown"] = "MOUSE_DOWN";
        EEngineEvent[EEngineEvent["MOUSE_UP"] = "dy_mouseup"] = "MOUSE_UP";
        EEngineEvent[EEngineEvent["MOUSE_MOVE"] = "dy_mousemove"] = "MOUSE_MOVE";
        EEngineEvent[EEngineEvent["MOUSE_OVER"] = "dy_mouseover"] = "MOUSE_OVER";
        EEngineEvent[EEngineEvent["MOUSE_OUT"] = "dy_mouseout"] = "MOUSE_OUT";
        EEngineEvent[EEngineEvent["MOUSE_WHEEL"] = "dy_mousewheel"] = "MOUSE_WHEEL";
        EEngineEvent[EEngineEvent["MOUSE_DRAG"] = "dy_mousedrag"] = "MOUSE_DRAG";
        EEngineEvent[EEngineEvent["MATERIAL_CHANGE"] = "dy_material_change"] = "MATERIAL_CHANGE";
        EEngineEvent[EEngineEvent["UI_WIDTH_CHANGE"] = "dy_ui_width_change"] = "UI_WIDTH_CHANGE";
        EEngineEvent[EEngineEvent["UI_HEIGHT_CHANGE"] = "dy_ui_height_change"] = "UI_HEIGHT_CHANGE";
        EEngineEvent[EEngineEvent["TRANSFORM_TRANSLATE"] = "dy_transform_translate"] = "TRANSFORM_TRANSLATE";
        EEngineEvent[EEngineEvent["TRANSFORM_ROTATE"] = "dy_transform_rotate"] = "TRANSFORM_ROTATE";
        EEngineEvent[EEngineEvent["TRANSFORM_SCALE"] = "dy_transform_scale"] = "TRANSFORM_SCALE";
    })(wd.EEngineEvent || (wd.EEngineEvent = {}));
    var EEngineEvent = wd.EEngineEvent;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var EventTriggerDetector = (function (_super) {
        __extends(EventTriggerDetector, _super);
        function EventTriggerDetector() {
            _super.apply(this, arguments);
        }
        return EventTriggerDetector;
    }(wd.Component));
    wd.EventTriggerDetector = EventTriggerDetector;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var UIEventTriggerDetector = (function (_super) {
        __extends(UIEventTriggerDetector, _super);
        function UIEventTriggerDetector() {
            _super.apply(this, arguments);
        }
        UIEventTriggerDetector.create = function () {
            var obj = new this();
            return obj;
        };
        UIEventTriggerDetector.prototype.isTrigger = function (e) {
            var transform = this.entityObject.transform, width = transform.width, height = transform.height, position = transform.position, locationInView = e.locationInView, leftUpCornerPosition = null;
            leftUpCornerPosition = wd.Vector2.create(position.x - width / 2, position.y - height / 2);
            return wd.EventTriggerDetectorUtils.isInRect(locationInView, leftUpCornerPosition, width, height);
        };
        return UIEventTriggerDetector;
    }(wd.EventTriggerDetector));
    wd.UIEventTriggerDetector = UIEventTriggerDetector;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var RayCasterEventTriggerDetector = (function (_super) {
        __extends(RayCasterEventTriggerDetector, _super);
        function RayCasterEventTriggerDetector() {
            _super.apply(this, arguments);
        }
        RayCasterEventTriggerDetector.create = function () {
            var obj = new this();
            return obj;
        };
        RayCasterEventTriggerDetector.prototype.isTrigger = function (e) {
            var scene = wd.Director.getInstance().scene, cameraController = scene.currentCamera.getComponent(wd.CameraController), locationInView = e.locationInView;
            return cameraController.isIntersectWithRay(this.entityObject, locationInView.x, locationInView.y);
        };
        return RayCasterEventTriggerDetector;
    }(wd.EventTriggerDetector));
    wd.RayCasterEventTriggerDetector = RayCasterEventTriggerDetector;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var SceneEventTriggerDetector = (function (_super) {
        __extends(SceneEventTriggerDetector, _super);
        function SceneEventTriggerDetector() {
            _super.apply(this, arguments);
        }
        SceneEventTriggerDetector.create = function () {
            var obj = new this();
            return obj;
        };
        SceneEventTriggerDetector.prototype.isTrigger = function (e) {
            var view = wd.DeviceManager.getInstance().view, width = view.width, height = view.height, locationInView = e.locationInView, leftUpCornerPosition = wd.Vector2.create(0, 0);
            return wd.EventTriggerDetectorUtils.isInRect(locationInView, leftUpCornerPosition, width, height);
        };
        return SceneEventTriggerDetector;
    }(wd.EventTriggerDetector));
    wd.SceneEventTriggerDetector = SceneEventTriggerDetector;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var EventTriggerDetectorUtils = (function () {
        function EventTriggerDetectorUtils() {
        }
        EventTriggerDetectorUtils.isInRect = function (locationInView, leftUpCornerPosition, width, height) {
            return locationInView.x >= leftUpCornerPosition.x && locationInView.x <= leftUpCornerPosition.x + width && locationInView.y >= leftUpCornerPosition.y && locationInView.y <= leftUpCornerPosition.y + height;
        };
        return EventTriggerDetectorUtils;
    }());
    wd.EventTriggerDetectorUtils = EventTriggerDetectorUtils;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var _scriptHandlerNameTable = wdCb.Hash.create(), _scriptEngineEventTable = wdCb.Hash.create();
    _scriptHandlerNameTable.addChild(wd.EEventName.CLICK, "onMouseClick");
    _scriptHandlerNameTable.addChild(wd.EEventName.MOUSEOVER, "onMouseOver");
    _scriptHandlerNameTable.addChild(wd.EEventName.MOUSEOUT, "onMouseOut");
    _scriptHandlerNameTable.addChild(wd.EEventName.MOUSEMOVE, "onMouseMove");
    _scriptHandlerNameTable.addChild(wd.EEventName.MOUSEDOWN, "onMouseDown");
    _scriptHandlerNameTable.addChild(wd.EEventName.MOUSEUP, "onMouseUp");
    _scriptHandlerNameTable.addChild(wd.EEventName.MOUSEWHEEL, "onMouseWheel");
    _scriptHandlerNameTable.addChild(wd.EEventName.MOUSEDRAG, "onMouseDrag");
    _scriptEngineEventTable.addChild(wd.EEventName.CLICK, "MOUSE_CLICK");
    _scriptEngineEventTable.addChild(wd.EEventName.MOUSEDOWN, "MOUSE_DOWN");
    _scriptEngineEventTable.addChild(wd.EEventName.MOUSEUP, "MOUSE_UP");
    _scriptEngineEventTable.addChild(wd.EEventName.MOUSEMOVE, "MOUSE_MOVE");
    _scriptEngineEventTable.addChild(wd.EEventName.MOUSEOVER, "MOUSE_OVER");
    _scriptEngineEventTable.addChild(wd.EEventName.MOUSEOUT, "MOUSE_OUT");
    _scriptEngineEventTable.addChild(wd.EEventName.MOUSEWHEEL, "MOUSE_WHEEL");
    _scriptEngineEventTable.addChild(wd.EEventName.MOUSEDRAG, "MOUSE_DRAG");
    var EventTriggerTable = (function () {
        function EventTriggerTable() {
        }
        EventTriggerTable.getScriptHandlerName = function (eventName) {
            var result = _scriptHandlerNameTable.getChild(eventName);
            return result;
        };
        EventTriggerTable.getScriptEngineEvent = function (eventName) {
            var result = _scriptEngineEventTable.getChild(eventName);
            return result;
        };
        return EventTriggerTable;
    }());
    wd.EventTriggerTable = EventTriggerTable;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var Script = (function (_super) {
        __extends(Script, _super);
        function Script(url) {
            if (url === void 0) { url = null; }
            _super.call(this);
            this.url = null;
            this.url = url;
        }
        Script.create = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            if (args.length === 0) {
                return new this();
            }
            else if (args.length === 1) {
                var url = args[0];
                return new this(url);
            }
        };
        Script.addScript = function (scriptName, _class) {
            this.scriptList.push({
                name: scriptName,
                class: _class
            });
        };
        Script.prototype.createLoadJsStream = function () {
            wd.Log.error(!this.url, wd.Log.info.FUNC_MUST_DEFINE("url"));
            return wd.LoaderManager.getInstance().load(this.url)
                .map(function () {
                return Script.scriptList.pop();
            });
        };
        Script.prototype.addToObject = function (entityObject) {
            var self = this;
            _super.prototype.addToObject.call(this, entityObject);
            this.createLoadJsStream()
                .subscribe(function (data) {
                self._handlerAfterLoadedScript(data, entityObject);
            });
        };
        Script.prototype._handlerAfterLoadedScript = function (data, entityObject) {
            this._addScriptToEntityObject(entityObject, data);
            entityObject.execScript("onEnter", null, true);
            wd.EventManager.trigger(wd.CustomEvent.create(wd.EEngineEvent.BEFORE_GAMEOBJECT_INIT));
            entityObject.execScript("init", null, true);
            wd.EventManager.trigger(wd.CustomEvent.create(wd.EEngineEvent.AFTER_GAMEOBJECT_INIT));
            wd.EventManager.trigger(wd.CustomEvent.create(wd.EEngineEvent.AFTER_GAMEOBJECT_INIT_RIGIDBODY_ADD_CONSTRAINT));
        };
        Script.prototype._addScriptToEntityObject = function (entityObject, data) {
            entityObject.scriptList.addChild(data.name, new data.class(entityObject));
        };
        Script.scriptList = wdCb.Stack.create();
        return Script;
    }(wd.Component));
    wd.Script = Script;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var Transform = (function (_super) {
        __extends(Transform, _super);
        function Transform() {
            _super.apply(this, arguments);
            this.p_parent = null;
            this.dirtyLocal = true;
            this.children = wdCb.Collection.create();
        }
        Object.defineProperty(Transform.prototype, "parent", {
            get: function () {
                return this.p_parent;
            },
            set: function (parent) {
                this.setParent(parent);
            },
            enumerable: true,
            configurable: true
        });
        Transform.prototype.addChild = function (child) {
            this.children.addChild(child);
        };
        Transform.prototype.removeChild = function (child) {
            this.children.removeChild(child);
        };
        Transform.prototype.setParent = function (parent) {
            if (this.p_parent) {
                this.p_parent.removeChild(this);
            }
            if (!parent) {
                this.p_parent = null;
                return;
            }
            this.p_parent = parent;
            this.p_parent.addChild(this);
        };
        Transform.prototype.getMatrix = function (syncMethod, matrixAttriName) {
            var syncList = wdCb.Collection.create(), current = this.p_parent;
            syncList.addChild(this);
            while (current !== null) {
                syncList.addChild(current);
                current = current.parent;
            }
            syncList.reverse().forEach(function (transform) {
                transform[syncMethod]();
            });
            return this[matrixAttriName];
        };
        Transform.prototype.setChildrenTransformState = function (transformState) {
            if (this[transformState]) {
                this.children.forEach(function (child) {
                    child[transformState] = true;
                });
            }
        };
        return Transform;
    }(wd.Component));
    wd.Transform = Transform;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var ThreeDTransform = (function (_super) {
        __extends(ThreeDTransform, _super);
        function ThreeDTransform() {
            _super.apply(this, arguments);
            this._localToWorldMatrix = null;
            this._position = wd.Vector3.create();
            this._rotation = wd.Quaternion.create(0, 0, 0, 1);
            this._scale = wd.Vector3.create(1, 1, 1);
            this._eulerAngles = null;
            this._localPosition = wd.Vector3.create(0, 0, 0);
            this._localRotation = wd.Quaternion.create(0, 0, 0, 1);
            this._localEulerAngles = null;
            this._localScale = wd.Vector3.create(1, 1, 1);
            this._isTranslate = false;
            this._isRotate = false;
            this._isScale = false;
            this.dirtyWorld = null;
            this._localToParentMatrix = wd.Matrix4.create();
            this._endLoopSubscription = null;
        }
        ThreeDTransform.create = function () {
            var obj = new this();
            return obj;
        };
        Object.defineProperty(ThreeDTransform.prototype, "localToWorldMatrix", {
            get: function () {
                return this.getMatrix("sync", "_localToWorldMatrix");
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThreeDTransform.prototype, "position", {
            get: function () {
                this._position = this.localToWorldMatrix.getTranslation();
                return this._position;
            },
            set: function (position) {
                if (this.p_parent === null) {
                    this._localPosition = position.copy();
                }
                else {
                    this._localPosition = this.p_parent.localToWorldMatrix.copy().invert().multiplyPoint(position);
                }
                this.isTranslate = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThreeDTransform.prototype, "rotation", {
            get: function () {
                this._rotation.setFromMatrix(this.localToWorldMatrix);
                return this._rotation;
            },
            set: function (rotation) {
                if (this.p_parent === null) {
                    this._localRotation = rotation.copy();
                }
                else {
                    this._localRotation = this.p_parent.rotation.copy().invert().multiply(rotation);
                }
                this.isRotate = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThreeDTransform.prototype, "scale", {
            get: function () {
                this._scale = this.localToWorldMatrix.getScale();
                return this._scale;
            },
            set: function (scale) {
                if (this.p_parent === null) {
                    this._localScale = scale.copy();
                }
                else {
                    this._localScale = this.p_parent.localToWorldMatrix.copy().invert().multiplyVector3(scale);
                }
                this.isScale = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThreeDTransform.prototype, "eulerAngles", {
            get: function () {
                this._eulerAngles = this.localToWorldMatrix.getEulerAngles();
                return this._eulerAngles;
            },
            set: function (eulerAngles) {
                this._localRotation.setFromEulerAngles(eulerAngles);
                if (this.p_parent !== null) {
                    this._localRotation = this.p_parent.rotation.copy().invert().multiply(this._localRotation);
                }
                this.isRotate = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThreeDTransform.prototype, "localPosition", {
            get: function () {
                return this._localPosition;
            },
            set: function (position) {
                this._localPosition = position.copy();
                this.isTranslate = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThreeDTransform.prototype, "localRotation", {
            get: function () {
                return this._localRotation;
            },
            set: function (rotation) {
                this._localRotation = rotation.copy();
                this.isRotate = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThreeDTransform.prototype, "localEulerAngles", {
            get: function () {
                this._localEulerAngles = this._localRotation.getEulerAngles();
                return this._localEulerAngles;
            },
            set: function (localEulerAngles) {
                this._localRotation.setFromEulerAngles(localEulerAngles);
                this.isRotate = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThreeDTransform.prototype, "localScale", {
            get: function () {
                return this._localScale;
            },
            set: function (scale) {
                this._localScale = scale.copy();
                this.isScale = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThreeDTransform.prototype, "up", {
            get: function () {
                return this.localToWorldMatrix.getY().normalize();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThreeDTransform.prototype, "right", {
            get: function () {
                return this.localToWorldMatrix.getX().normalize();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThreeDTransform.prototype, "forward", {
            get: function () {
                return this.localToWorldMatrix.getZ().normalize().scale(-1);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThreeDTransform.prototype, "isTransform", {
            get: function () {
                return this.isTranslate || this.isRotate || this.isScale;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThreeDTransform.prototype, "isTranslate", {
            get: function () {
                return this._isTranslate;
            },
            set: function (isTranslate) {
                this._isTranslate = isTranslate;
                if (isTranslate) {
                    this.dirtyLocal = true;
                    this.setChildrenTransformState("isTranslate");
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThreeDTransform.prototype, "isRotate", {
            get: function () {
                return this._isRotate;
            },
            set: function (isRotate) {
                this._isRotate = isRotate;
                if (isRotate) {
                    this.dirtyLocal = true;
                    this.setChildrenTransformState("isRotate");
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThreeDTransform.prototype, "isScale", {
            get: function () {
                return this._isScale;
            },
            set: function (isScale) {
                this._isScale = isScale;
                if (isScale) {
                    this.dirtyLocal = true;
                    this.setChildrenTransformState("isScale");
                }
            },
            enumerable: true,
            configurable: true
        });
        ThreeDTransform.prototype.init = function () {
            var self = this;
            this._endLoopSubscription = wd.EventManager.fromEvent(wd.EEngineEvent.ENDLOOP)
                .subscribe(function () {
                self._resetTransformFlag();
            });
        };
        ThreeDTransform.prototype.dispose = function () {
            _super.prototype.dispose.call(this);
            this._endLoopSubscription && this._endLoopSubscription.dispose();
        };
        ThreeDTransform.prototype.sync = function () {
            if (this.dirtyLocal) {
                this._localToParentMatrix.setTRS(this._localPosition, this._localRotation, this._localScale);
                this.dirtyLocal = false;
                this.dirtyWorld = true;
            }
            if (this.dirtyWorld) {
                if (this.p_parent === null) {
                    this._localToWorldMatrix = this._localToParentMatrix.copy();
                }
                else {
                    this._localToWorldMatrix = this.p_parent.localToWorldMatrix.copy().multiply(this._localToParentMatrix);
                }
                this.dirtyWorld = false;
                this.children.forEach(function (child) {
                    child.dirtyWorld = true;
                });
            }
        };
        ThreeDTransform.prototype.translateLocal = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var translation = null;
            if (args.length === 3) {
                translation = wd.Vector3.create(args[0], args[1], args[2]);
            }
            else {
                translation = args[0];
            }
            this._localPosition = this._localPosition.add(this._localRotation.multiplyVector3(translation));
            this.isTranslate = true;
            return this;
        };
        ThreeDTransform.prototype.translate = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var translation = null;
            if (args.length === 3) {
                translation = wd.Vector3.create(args[0], args[1], args[2]);
            }
            else {
                translation = args[0];
            }
            this.position = translation.add(this.position);
            return this;
        };
        ThreeDTransform.prototype.rotate = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var eulerAngles = null, quaternion = wd.Quaternion.create();
            if (args.length === 3) {
                eulerAngles = wd.Vector3.create(args[0], args[1], args[2]);
            }
            else {
                eulerAngles = args[0];
            }
            quaternion.setFromEulerAngles(eulerAngles);
            if (this.p_parent === null) {
                this._localRotation = quaternion.multiply(this._localRotation);
            }
            else {
                quaternion = this.p_parent.rotation.copy().invert().multiply(quaternion);
                this._localRotation = quaternion.multiply(this.rotation);
            }
            this.isRotate = true;
            return this;
        };
        ThreeDTransform.prototype.rotateLocal = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var eulerAngles = null, quaternion = wd.Quaternion.create();
            if (args.length === 3) {
                eulerAngles = wd.Vector3.create(args[0], args[1], args[2]);
            }
            else {
                eulerAngles = args[0];
            }
            quaternion.setFromEulerAngles(eulerAngles);
            this._localRotation.multiply(quaternion);
            this.isRotate = true;
            return this;
        };
        ThreeDTransform.prototype.rotateAround = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var angle = null, center = null, axis = null, rot = null, dir = null;
            if (args.length === 3) {
                angle = args[0];
                center = args[1];
                axis = args[2];
            }
            else {
                angle = args[0];
                center = wd.Vector3.create(args[1], args[2], args[3]);
                axis = wd.Vector3.create(args[4], args[5], args[6]);
            }
            rot = wd.Quaternion.create().setFromAxisAngle(angle, axis);
            dir = this.position.copy().sub(center);
            dir = rot.multiplyVector3(dir);
            this.position = center.add(dir);
            this.rotation = rot.multiply(this.rotation);
            return this;
        };
        ThreeDTransform.prototype.lookAt = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var target = null, up = null;
            if (args.length === 1) {
                target = args[0];
                up = wd.Vector3.up;
            }
            else if (args.length === 2) {
                target = args[0];
                up = args[1];
            }
            else if (args.length === 3) {
                target = wd.Vector3.create(args[0], args[1], args[2]);
                up = wd.Vector3.up;
            }
            else {
                target = wd.Vector3.create(args[0], args[1], args[2]);
                up = wd.Vector3.create(args[3], args[4], args[5]);
            }
            this.rotation = wd.Quaternion.create().setFromMatrix(wd.Matrix4.create().setLookAt(this.position, target, up));
            return this;
        };
        ThreeDTransform.prototype._resetTransformFlag = function () {
            this.isTranslate = false;
            this.isScale = false;
            this.isRotate = false;
        };
        return ThreeDTransform;
    }(wd.Transform));
    wd.ThreeDTransform = ThreeDTransform;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var RectTransform = (function (_super) {
        __extends(RectTransform, _super);
        function RectTransform() {
            _super.apply(this, arguments);
            this._rotationMatrix = null;
            this._localPositionAndScaleMatrix = wd.Matrix3.create();
            this._position = wd.Vector2.create();
            this._rotation = 0;
            this._scale = wd.Vector2.create(1, 1);
            this._localPosition = wd.Vector2.create(0, 0);
            this._localScale = wd.Vector2.create(1, 1);
            this._anchorX = wd.Vector2.create(0.5, 0.5);
            this._anchorY = wd.Vector2.create(0.5, 0.5);
            this._width = null;
            this._height = null;
            this._isTranslate = false;
            this._isRotate = false;
            this._isScale = false;
            this.dirtyRotation = true;
            this.dirtyPositionAndScale = true;
            this.pivot = wd.Vector2.create(0, 0);
            this.zIndex = 1;
            this._localRotationMatrix = wd.Matrix3.create();
            this._localToParentMatrix = wd.Matrix3.create();
        }
        RectTransform.create = function () {
            var obj = new this();
            return obj;
        };
        Object.defineProperty(RectTransform.prototype, "rotationMatrix", {
            get: function () {
                return this.getMatrix("syncRotation", "_rotationMatrix");
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RectTransform.prototype, "localPositionAndScaleMatrix", {
            get: function () {
                return this.getMatrix("syncPositionAndScale", "_localPositionAndScaleMatrix");
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RectTransform.prototype, "position", {
            get: function () {
                this._position = this.localPositionAndScaleMatrix.getTranslation();
                return this._position;
            },
            set: function (position) {
                if (this.p_parent === null) {
                    this._localPosition = position.copy();
                }
                else {
                    this._localPosition = this.p_parent.localPositionAndScaleMatrix.copy().invert().multiplyPoint(position);
                }
                this.isTranslate = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RectTransform.prototype, "rotation", {
            get: function () {
                this._rotation = this.rotationMatrix.getRotation();
                return this._rotation;
            },
            set: function (angle) {
                this.resetRotation();
                this.rotate(angle);
                this.dirtyRotation = true;
                this.isRotate = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RectTransform.prototype, "scale", {
            get: function () {
                this._scale = this.localPositionAndScaleMatrix.getScale();
                return this._scale;
            },
            set: function (scale) {
                if (this.p_parent === null) {
                    this._localScale = scale.copy();
                }
                else {
                    this._localScale = this.p_parent.localPositionAndScaleMatrix.copy().invert().multiplyVector2(scale);
                }
                this.isScale = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RectTransform.prototype, "localPosition", {
            get: function () {
                return this._localPosition;
            },
            set: function (position) {
                this._localPosition = position.copy();
                this.isTranslate = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RectTransform.prototype, "localScale", {
            get: function () {
                return this._localScale;
            },
            set: function (scale) {
                this._localScale = scale.copy();
                this.isScale = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RectTransform.prototype, "anchorX", {
            get: function () {
                return this._anchorX;
            },
            set: function (anchorX) {
                var parentWidth = null;
                this._anchorX = anchorX;
                if (anchorX.x === anchorX.y) {
                    var widthFromAnchorToPosition = (anchorX.x - 0.5) * this._getParentWidth();
                    this.position = wd.Vector2.create(this._getParentPosition().x + widthFromAnchorToPosition, this.position.y);
                    return;
                }
                parentWidth = this._getParentWidth();
                this.position = wd.Vector2.create(this._getParentPosition().x + (anchorX.x + anchorX.y - 1) / 2 * parentWidth, this.position.y);
                this.width = parentWidth / this._getParentScale().x * (anchorX.y - anchorX.x) * this.scale.x;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RectTransform.prototype, "anchorY", {
            get: function () {
                return this._anchorY;
            },
            set: function (anchorY) {
                var parentHeight = null;
                this._anchorY = anchorY;
                if (anchorY.x === anchorY.y) {
                    var heightFromAnchorToPosition = (anchorY.x - 0.5) * this._getParentHeight();
                    this.position = wd.Vector2.create(this.position.x, this._getParentPosition().y + heightFromAnchorToPosition);
                    return;
                }
                parentHeight = this._getParentHeight();
                this.position = wd.Vector2.create(this.position.x, this._getParentPosition().y + (anchorY.x + anchorY.y - 1) / 2 * parentHeight);
                this.height = parentHeight / this._getParentScale().y * (anchorY.y - anchorY.x) * this.scale.y;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RectTransform.prototype, "width", {
            get: function () {
                return this._width * this.scale.x;
            },
            set: function (width) {
                if (width !== this._width) {
                    this._width = width;
                    wd.EventManager.trigger(this.entityObject, wd.CustomEvent.create(wd.EEngineEvent.UI_WIDTH_CHANGE));
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RectTransform.prototype, "height", {
            get: function () {
                return this._height * this.scale.y;
            },
            set: function (height) {
                if (height !== this._height) {
                    this._height = height;
                    wd.EventManager.trigger(this.entityObject, wd.CustomEvent.create(wd.EEngineEvent.UI_HEIGHT_CHANGE));
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RectTransform.prototype, "isTransform", {
            get: function () {
                return this.isTranslate || this.isRotate || this.isScale;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RectTransform.prototype, "isTranslate", {
            get: function () {
                return this._isTranslate;
            },
            set: function (isTranslate) {
                this._isTranslate = isTranslate;
                if (isTranslate) {
                    this.dirtyLocal = true;
                    wd.EventManager.broadcast(this.entityObject, wd.CustomEvent.create(wd.EEngineEvent.TRANSFORM_TRANSLATE));
                    this.setChildrenTransformState("isTranslate");
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RectTransform.prototype, "isRotate", {
            get: function () {
                return this._isRotate;
            },
            set: function (isRotate) {
                this._isRotate = isRotate;
                if (isRotate) {
                    this.dirtyLocal = true;
                    wd.EventManager.broadcast(this.entityObject, wd.CustomEvent.create(wd.EEngineEvent.TRANSFORM_ROTATE));
                    this.setChildrenTransformState("isRotate");
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RectTransform.prototype, "isScale", {
            get: function () {
                return this._isScale;
            },
            set: function (isScale) {
                this._isScale = isScale;
                if (isScale) {
                    this.dirtyLocal = true;
                    wd.EventManager.broadcast(this.entityObject, wd.CustomEvent.create(wd.EEngineEvent.TRANSFORM_SCALE));
                    this.setChildrenTransformState("isScale");
                }
            },
            enumerable: true,
            configurable: true
        });
        RectTransform.prototype.syncRotation = function () {
            if (this.dirtyRotation) {
                if (this.p_parent === null) {
                    this._rotationMatrix = this._localRotationMatrix.copy();
                }
                else {
                    this._rotationMatrix = this.p_parent.rotationMatrix.copy().multiply(this._localRotationMatrix);
                }
                this.children.forEach(function (child) {
                    child.dirtyRotation = true;
                });
            }
        };
        RectTransform.prototype.syncPositionAndScale = function () {
            if (this.dirtyLocal) {
                this._localToParentMatrix.setTS(this._localPosition, this._localScale);
                this.dirtyLocal = false;
                this.dirtyPositionAndScale = true;
            }
            if (this.dirtyPositionAndScale) {
                if (this.p_parent === null) {
                    this._localPositionAndScaleMatrix = this._localToParentMatrix.copy();
                }
                else {
                    this._localPositionAndScaleMatrix = this.p_parent.localPositionAndScaleMatrix.copy().multiply(this._localToParentMatrix);
                }
                this.dirtyLocal = false;
                this.children.forEach(function (child) {
                    child.dirtyPositionAndScale = true;
                });
            }
        };
        RectTransform.prototype.translate = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var translation = null;
            if (args.length === 2) {
                translation = wd.Vector2.create(args[0], args[1]);
            }
            else {
                translation = args[0];
            }
            this.position = translation.add(this.position);
            return this;
        };
        RectTransform.prototype.rotate = function (angle) {
            var position = this.position;
            this.rotateAround(angle, position.x + this.pivot.x, position.y - this.pivot.y);
            this.dirtyRotation = true;
            this.isRotate = true;
            return this;
        };
        RectTransform.prototype.rotateAround = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var angle = null, center = null, position = null, x = null, y = null;
            if (args.length === 2) {
                angle = args[0];
                center = args[1];
            }
            else {
                angle = args[0];
                center = wd.Vector2.create(args[1], args[2]);
            }
            x = center.x;
            y = center.y;
            this._translateInRotationMatrix(x, y);
            this._rotateAroundCanvasOriginPoint(angle);
            this._translateInRotationMatrix(-x, -y);
            return this;
        };
        RectTransform.prototype._translateInRotationMatrix = function (x, y) {
            this._localRotationMatrix.translate(x, y);
            return this;
        };
        RectTransform.prototype.resetPosition = function () {
            this.position = wd.Vector2.create(0, 0);
        };
        RectTransform.prototype.resetScale = function () {
            this.scale = wd.Vector2.create(1, 1);
        };
        RectTransform.prototype.resetRotation = function () {
            this._localRotationMatrix.setIdentity();
        };
        RectTransform.prototype.setChildrenTransform = function () {
            this.setChildrenTransformState("isTranslate");
            this.setChildrenTransformState("isRotate");
            this.setChildrenTransformState("isScale");
        };
        RectTransform.prototype._rotateAroundCanvasOriginPoint = function (angle) {
            this._localRotationMatrix.rotate(angle);
            this.dirtyRotation = true;
            return this;
        };
        RectTransform.prototype._getParentWidth = function () {
            if (this.p_parent === null) {
                return wd.DeviceManager.getInstance().view.width;
            }
            return this.p_parent.width;
        };
        RectTransform.prototype._getParentHeight = function () {
            if (this.p_parent === null) {
                return wd.DeviceManager.getInstance().view.height;
            }
            return this.p_parent.height;
        };
        RectTransform.prototype._getParentPosition = function () {
            if (this.p_parent === null) {
                var view = wd.DeviceManager.getInstance().view;
                return wd.Vector2.create(view.width / 2, view.height / 2);
            }
            return this.p_parent.position;
        };
        RectTransform.prototype._getParentScale = function () {
            if (this.p_parent === null) {
                return wd.Vector2.create(1, 1);
            }
            return this.p_parent.scale;
        };
        __decorate([
            wd.requireSetter(function (anchorX) {
                wd.assert(anchorX.x <= anchorX.y, wd.Log.info.FUNC_SHOULD("minX", "<= maxY"));
                wd.assert(anchorX.x >= 0 && anchorX.x <= 1, wd.Log.info.FUNC_SHOULD("minX", ">= 0 && <= 1"));
                wd.assert(anchorX.y >= 0 && anchorX.y <= 1, wd.Log.info.FUNC_SHOULD("maxX", ">= 0 && <= 1"));
            })
        ], RectTransform.prototype, "anchorX", null);
        __decorate([
            wd.requireSetter(function (anchorY) {
                wd.assert(anchorY.x <= anchorY.y, wd.Log.info.FUNC_SHOULD("minY", "<= maxY"));
                wd.assert(anchorY.x >= 0 && anchorY.x <= 1, wd.Log.info.FUNC_SHOULD("minY", ">= 0 && <= 1"));
                wd.assert(anchorY.y >= 0 && anchorY.y <= 1, wd.Log.info.FUNC_SHOULD("maxY", ">= 0 && <= 1"));
            })
        ], RectTransform.prototype, "anchorY", null);
        return RectTransform;
    }(wd.Transform));
    wd.RectTransform = RectTransform;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var ComponentContainer = (function () {
        function ComponentContainer() {
            this.list = wdCb.Collection.create();
        }
        ComponentContainer.prototype.addChild = function (component) {
            if (this.hasChild(component)) {
                return;
            }
            this.list.addChild(component);
        };
        ComponentContainer.prototype.removeChild = function (component) {
            this.list.removeChild(component);
        };
        ComponentContainer.prototype.hasChild = function (component) {
            return this.list.hasChild(component);
        };
        return ComponentContainer;
    }());
    wd.ComponentContainer = ComponentContainer;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var ActionManager = (function (_super) {
        __extends(ActionManager, _super);
        function ActionManager() {
            _super.apply(this, arguments);
        }
        ActionManager.create = function () {
            var obj = new this();
            return obj;
        };
        ActionManager.prototype.update = function (elapsedTime) {
            var removeQueue = [];
            this.list.forEach(function (child) {
                if (child.isFinish) {
                    removeQueue.push(child);
                    return;
                }
                if (child.isStop || child.isPause) {
                    return;
                }
                child.update(elapsedTime);
            });
            removeQueue.forEach(function (child) {
                child.entityObject.removeComponent(child);
            });
        };
        return ActionManager;
    }(wd.ComponentContainer));
    wd.ActionManager = ActionManager;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var UIManager = (function (_super) {
        __extends(UIManager, _super);
        function UIManager(uiObject) {
            _super.call(this);
            this._uiObject = null;
            this._uiObject = uiObject;
        }
        UIManager.create = function (uiObject) {
            var obj = new this(uiObject);
            return obj;
        };
        UIManager.prototype.update = function (elapsedTime) {
            if (this.list.getCount() === 0) {
                return;
            }
            if (this._isDirty()) {
                this.list.forEach(function (ui) {
                    ui.update(elapsedTime);
                });
            }
        };
        UIManager.prototype._isDirty = function () {
            return this._uiObject.getComponent(wd.UIRenderer).state === wd.EUIRendererState.DIRTY;
        };
        __decorate([
            wd.require(function (elapsedTime) {
                wd.assert(this.list.getCount() <= 1, wd.Log.info.FUNC_SHOULD("only contain one ui component"));
            })
        ], UIManager.prototype, "update", null);
        return UIManager;
    }(wd.ComponentContainer));
    wd.UIManager = UIManager;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var LightManager = (function () {
        function LightManager() {
            this._lights = wdCb.Hash.create();
        }
        LightManager.create = function () {
            var obj = new this();
            return obj;
        };
        Object.defineProperty(LightManager.prototype, "ambientLight", {
            get: function () {
                return this._lights.getChild(wd.AmbientLight.type);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LightManager.prototype, "directionLights", {
            get: function () {
                return this._lights.getChild(wd.DirectionLight.type);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LightManager.prototype, "pointLights", {
            get: function () {
                return this._lights.getChild(wd.PointLight.type);
            },
            enumerable: true,
            configurable: true
        });
        LightManager.prototype.addChild = function (light) {
            if (light.hasComponent(wd.AmbientLight)) {
                this._lights.addChild(wd.AmbientLight.type, light);
            }
            else if (light.hasComponent(wd.DirectionLight)) {
                this._lights.appendChild(wd.DirectionLight.type, light);
            }
            else if (light.hasComponent(wd.PointLight)) {
                this._lights.appendChild(wd.PointLight.type, light);
            }
            else {
                wd.Log.error(true, wd.Log.info.FUNC_INVALID("light"));
            }
        };
        return LightManager;
    }());
    wd.LightManager = LightManager;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var Animation = (function (_super) {
        __extends(Animation, _super);
        function Animation() {
            _super.apply(this, arguments);
            this.isFrameChange = false;
            this.state = EAnimationState.DEFAULT;
            this.pauseTime = null;
            this.resumeTime = null;
            this._isResume = false;
        }
        Object.defineProperty(Animation.prototype, "isStart", {
            get: function () {
                return this.state === EAnimationState.RUN;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Animation.prototype, "isStop", {
            get: function () {
                return this.state === EAnimationState.STOP;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Animation.prototype, "isPause", {
            get: function () {
                return this.state === EAnimationState.PAUSE;
            },
            enumerable: true,
            configurable: true
        });
        Animation.prototype.pause = function () {
            this.state = EAnimationState.PAUSE;
            this.pauseTime = this.getPauseTime();
        };
        Animation.prototype.resume = function () {
            this.state = EAnimationState.RUN;
            this._isResume = true;
            this.resumeTime = this.getResumeTime();
        };
        Animation.prototype.stop = function () {
            this.state = EAnimationState.STOP;
        };
        Animation.prototype.update = function (elapsedTime) {
            if (this.state === EAnimationState.DEFAULT || this.isStop) {
                return;
            }
            if (this.isPause) {
                this.handleWhenPause(elapsedTime);
                return;
            }
            if (this._isResume) {
                this._isResume = false;
                this.continueFromPausePoint(elapsedTime);
            }
            this.handleBeforeJudgeWhetherCurrentFrameFinish(elapsedTime);
            if (this.isCurrentFrameFinish(elapsedTime)) {
                this.handleWhenCurrentFrameFinish(elapsedTime);
            }
            else {
                this.isFrameChange = false;
            }
            this.computeInterpolation(elapsedTime);
            this.updateTargets();
        };
        return Animation;
    }(wd.Component));
    wd.Animation = Animation;
    (function (EAnimationState) {
        EAnimationState[EAnimationState["DEFAULT"] = 0] = "DEFAULT";
        EAnimationState[EAnimationState["RUN"] = 1] = "RUN";
        EAnimationState[EAnimationState["STOP"] = 2] = "STOP";
        EAnimationState[EAnimationState["PAUSE"] = 3] = "PAUSE";
    })(wd.EAnimationState || (wd.EAnimationState = {}));
    var EAnimationState = wd.EAnimationState;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var MorphAnimation = (function (_super) {
        __extends(MorphAnimation, _super);
        function MorphAnimation() {
            _super.apply(this, arguments);
            this.interpolation = 0;
            this.currentFrame = 0;
            this.nextFrame = 1;
            this.duration = null;
            this.fps = null;
            this.currentAnimName = null;
            this._oldTime = 0;
            this._frameCount = null;
            this._isStartFromStop = false;
        }
        MorphAnimation.create = function () {
            var obj = new this();
            return obj;
        };
        MorphAnimation.prototype.init = function () {
        };
        MorphAnimation.prototype.dispose = function () {
        };
        MorphAnimation.prototype.play = function (animName, fps) {
            var geometry = this.entityObject.getComponent(wd.ModelGeometry);
            this.currentAnimName = animName;
            this.fps = fps;
            this.duration = 1.0 / fps * 1000;
            this._frameCount = geometry.morphTargets.getChild(animName).getCount();
            this._start();
        };
        MorphAnimation.prototype.getPauseTime = function () {
            return wd.Director.getInstance().elapsed;
        };
        MorphAnimation.prototype.getResumeTime = function () {
            return this._oldTime;
        };
        MorphAnimation.prototype.handleWhenPause = function (elapsedTime) {
            this._oldTime = elapsedTime;
        };
        MorphAnimation.prototype.handleWhenCurrentFrameFinish = function (elapsedTime) {
            this.isFrameChange = true;
            this._oldTime = this._floor(elapsedTime);
            this.currentFrame = this.nextFrame;
            this.nextFrame++;
            if (this.nextFrame >= this._frameCount) {
                this.nextFrame = 0;
            }
        };
        MorphAnimation.prototype.handleBeforeJudgeWhetherCurrentFrameFinish = function (elapsedTime) {
            if (this._isStartFromStop) {
                this._isStartFromStop = false;
                this._resetAnim(elapsedTime);
            }
        };
        MorphAnimation.prototype.isCurrentFrameFinish = function (elapsedTime) {
            return elapsedTime - this._oldTime > this.duration;
        };
        MorphAnimation.prototype.computeInterpolation = function (elapsedTime) {
            this.interpolation = this.fps * (elapsedTime - this._oldTime) / 1000;
        };
        MorphAnimation.prototype.updateTargets = function () {
        };
        MorphAnimation.prototype.continueFromPausePoint = function (elapsedTime) {
            this._oldTime = elapsedTime - (this.resumeTime - this.pauseTime) % this.duration;
        };
        MorphAnimation.prototype._start = function () {
            this._oldTime = 0;
            this.currentFrame = 0;
            this.nextFrame = this.currentFrame + 1;
            if (this.isStop) {
                this._isStartFromStop = true;
            }
            this.state = wd.EAnimationState.RUN;
        };
        MorphAnimation.prototype._floor = function (time) {
            return time - time % this.duration;
        };
        MorphAnimation.prototype._resetAnim = function (elapsedTime) {
            this._oldTime = elapsedTime;
        };
        __decorate([
            wd.require(function (animName, fps) {
                var geometry = this.entityObject.getComponent(wd.ModelGeometry);
                wd.assert(geometry, wd.Log.info.FUNC_SHOULD("this entityObject", "add ModelGeometry component"));
                wd.assert(geometry.morphTargets.getChild(animName) && geometry.morphTargets.getChild(animName).getCount() > 0, wd.Log.info.FUNC_NOT_EXIST("\"" + animName + "\" animation"));
            }),
            wd.ensure(function () {
                wd.assert(this._frameCount > 1, wd.Log.info.FUNC_SHOULD("frames.count", "> 1"));
            })
        ], MorphAnimation.prototype, "play", null);
        return MorphAnimation;
    }(wd.Animation));
    wd.MorphAnimation = MorphAnimation;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var ArticulatedAnimation = (function (_super) {
        __extends(ArticulatedAnimation, _super);
        function ArticulatedAnimation() {
            _super.apply(this, arguments);
            this.data = null;
            this._interpolation = null;
            this._currentFrame = null;
            this._currentAnimName = null;
            this._beginElapsedTimeOfFirstFrame = null;
            this._lastFrameTime = null;
            this._pauseDuration = null;
            this._frameCount = null;
            this._currentAnimData = null;
            this._currentFrameData = null;
            this._prevFrameData = null;
            this._prevEndFrameDataMap = wdCb.Hash.create();
            this._startFrameDataMap = wdCb.Hash.create();
        }
        ArticulatedAnimation.create = function () {
            var obj = new this();
            return obj;
        };
        ArticulatedAnimation.prototype.init = function () {
        };
        ArticulatedAnimation.prototype.dispose = function () {
        };
        ArticulatedAnimation.prototype.play = function (animName) {
            this._currentAnimName = animName;
            this._currentAnimData = this.data.getChild(animName);
            this._resetAnim();
            this._saveStartFrameData();
            this._frameCount = this._currentAnimData.getCount();
            this.state = wd.EAnimationState.RUN;
        };
        ArticulatedAnimation.prototype.getPauseTime = function () {
            return this._getCurrentTime();
        };
        ArticulatedAnimation.prototype.getResumeTime = function () {
            return this._getCurrentTime();
        };
        ArticulatedAnimation.prototype.handleWhenPause = function (elapsedTime) {
        };
        ArticulatedAnimation.prototype.handleWhenCurrentFrameFinish = function (elapsedTime) {
            this._updateCurrentFrame(elapsedTime);
            this._updateTargetsToBeLastEndFrameData();
            this._saveStartFrameData();
        };
        ArticulatedAnimation.prototype.handleBeforeJudgeWhetherCurrentFrameFinish = function (elapsedTime) {
        };
        ArticulatedAnimation.prototype.isCurrentFrameFinish = function (elapsedTime) {
            return elapsedTime - this._beginElapsedTimeOfFirstFrame - this._pauseDuration > this._currentFrameData.time;
        };
        ArticulatedAnimation.prototype.computeInterpolation = function (elapsedTime) {
            switch (this._currentFrameData.interpolationMethod) {
                case wd.EKeyFrameInterpolation.LINEAR:
                    if (this._currentFrameData.time - this._lastFrameTime === 0) {
                        this._interpolation = 1;
                    }
                    else {
                        this._interpolation = (elapsedTime - this._beginElapsedTimeOfFirstFrame - this._pauseDuration - this._lastFrameTime) / (this._currentFrameData.time - this._lastFrameTime);
                    }
                    break;
                default:
                    wd.Log.error(true, wd.Log.info.FUNC_NOT_SUPPORT("interpolationMethod:" + this._currentFrameData.interpolationMethod));
                    break;
            }
        };
        ArticulatedAnimation.prototype.updateTargets = function () {
            var transform = this.entityObject.transform, interpolation = this._interpolation, isFrameChange = this.isFrameChange, prevEndFrameDataMap = this._prevEndFrameDataMap, startFrameDataMap = this._startFrameDataMap;
            this._currentFrameData.targets.forEach(function (target) {
                var endFrameData = target.data, startFrameData = startFrameDataMap.getChild(target.target);
                switch (target.target) {
                    case wd.EArticulatedAnimationTarget.TRANSLATION:
                        transform.position = wd.Vector3.create().lerp(startFrameData, endFrameData, interpolation);
                        break;
                    case wd.EArticulatedAnimationTarget.ROTATION:
                        transform.rotation = wd.Quaternion.create().slerp(startFrameData, endFrameData, interpolation);
                        break;
                    case wd.EArticulatedAnimationTarget.SCALE:
                        transform.scale = wd.Vector3.create().lerp(startFrameData, endFrameData, interpolation);
                        break;
                    default:
                        wd.Log.error(true, wd.Log.info.FUNC_NOT_SUPPORT("EArticulatedAnimationTarget:" + target.target));
                        break;
                }
                if (isFrameChange || !prevEndFrameDataMap.hasChild(target.target)) {
                    prevEndFrameDataMap.addChild(target.target, endFrameData);
                }
            });
        };
        ArticulatedAnimation.prototype.continueFromPausePoint = function (elapsedTime) {
            this._pauseDuration += this.resumeTime - this.pauseTime;
        };
        ArticulatedAnimation.prototype._resetAnim = function () {
            this._beginElapsedTimeOfFirstFrame = this._getCurrentTime();
            this._lastFrameTime = 0;
            this._pauseDuration = 0;
            this._currentFrame = 0;
            this._prevFrameData = null;
            this._updateCurrentFrameData();
            this._prevEndFrameDataMap.removeAllChildren();
            this._startFrameDataMap.removeAllChildren();
        };
        ArticulatedAnimation.prototype._getCurrentTime = function () {
            return wd.Director.getInstance().elapsed;
        };
        ArticulatedAnimation.prototype._saveStartFrameData = function () {
            var startFrameDataMap = this._startFrameDataMap, transform = this.entityObject.transform;
            this._currentFrameData.targets.forEach(function (target) {
                var startFrameData = null;
                switch (target.target) {
                    case wd.EArticulatedAnimationTarget.TRANSLATION:
                        startFrameData = transform.position;
                        break;
                    case wd.EArticulatedAnimationTarget.ROTATION:
                        startFrameData = transform.rotation;
                        break;
                    case wd.EArticulatedAnimationTarget.SCALE:
                        startFrameData = transform.scale;
                        break;
                    default:
                        wd.Log.error(true, wd.Log.info.FUNC_NOT_SUPPORT("EArticulatedAnimationTarget:" + target.target));
                        break;
                }
                startFrameDataMap.addChild(target.target, startFrameData);
            });
        };
        ArticulatedAnimation.prototype._updateCurrentFrameData = function () {
            this._currentFrameData = this._currentAnimData.getChild(this._currentFrame);
        };
        ArticulatedAnimation.prototype._updateCurrentFrame = function (elapsedTime) {
            this.isFrameChange = true;
            this._currentFrame++;
            if (this._currentFrame >= this._frameCount) {
                this._currentFrame = 0;
                this._beginElapsedTimeOfFirstFrame = elapsedTime - elapsedTime % this._currentAnimData.getChild(this._frameCount - 1).time;
                this._lastFrameTime = 0;
            }
            else {
                this._lastFrameTime = this._currentAnimData.getChild(this._currentFrame - 1).time;
            }
            this._prevFrameData = this._currentFrameData;
            this._updateCurrentFrameData();
        };
        ArticulatedAnimation.prototype._updateTargetsToBeLastEndFrameData = function () {
            var self = this, transform = this.entityObject.transform, prevEndFrameDataMap = this._prevEndFrameDataMap;
            this._prevFrameData.targets.forEach(function (target) {
                var prevEndFrameData = prevEndFrameDataMap.hasChild(target.target) ? prevEndFrameDataMap.getChild(target.target) : target.data;
                self._setTargetData(target.target, transform, prevEndFrameData);
            });
        };
        ArticulatedAnimation.prototype._setTargetData = function (target, transform, data) {
            switch (target) {
                case wd.EArticulatedAnimationTarget.TRANSLATION:
                    transform.position = data;
                    break;
                case wd.EArticulatedAnimationTarget.ROTATION:
                    transform.rotation = data;
                    break;
                case wd.EArticulatedAnimationTarget.SCALE:
                    transform.scale = data;
                    break;
                default:
                    wd.Log.error(true, wd.Log.info.FUNC_NOT_SUPPORT("EArticulatedAnimationTarget:" + target));
                    break;
            }
        };
        __decorate([
            wd.require(function (animName) {
                this.data.getChild(animName).forEach(function (data) {
                    wd.assert(data.time >= 0, wd.Log.info.FUNC_SHOULD("time", ">= 0"));
                    wd.assert(data.targets.getCount() > 0, wd.Log.info.FUNC_SHOULD("ArticulatedAnimationFrameData->targets.getCount()", "> 0"));
                    data.targets.forEach(function (target) {
                        var data = target.data;
                        switch (target.target) {
                            case wd.EArticulatedAnimationTarget.TRANSLATION:
                                wd.assert(data instanceof wd.Vector3, wd.Log.info.FUNC_MUST_BE("if target:EArticulatedAnimationTarget === TRANSLATION, its data", "Vector3"));
                                break;
                            case wd.EArticulatedAnimationTarget.ROTATION:
                                wd.assert(data instanceof wd.Quaternion, wd.Log.info.FUNC_MUST_BE("if target:EArticulatedAnimationTarget ===ROTATION, its data", "Quaternion"));
                                break;
                            case wd.EArticulatedAnimationTarget.SCALE:
                                wd.assert(data instanceof wd.Vector3, wd.Log.info.FUNC_MUST_BE("if target:EArticulatedAnimationTarget === SCALE, its data", "Vector3"));
                                break;
                            default:
                                wd.Log.error(true, wd.Log.info.FUNC_NOT_SUPPORT("EArticulatedAnimationTarget:" + target.target));
                                break;
                        }
                    });
                });
            })
        ], ArticulatedAnimation.prototype, "play", null);
        __decorate([
            wd.require(function () {
                wd.assert(this._currentFrameData !== null, wd.Log.info.FUNC_SHOULD("set currentFrameData"));
            })
        ], ArticulatedAnimation.prototype, "_saveStartFrameData", null);
        __decorate([
            wd.require(function () {
                wd.assert(this._prevFrameData !== null, wd.Log.info.FUNC_SHOULD_NOT("prevFrameData", "be null"));
            })
        ], ArticulatedAnimation.prototype, "_updateTargetsToBeLastEndFrameData", null);
        return ArticulatedAnimation;
    }(wd.Animation));
    wd.ArticulatedAnimation = ArticulatedAnimation;
})(wd || (wd = {}));
var wd;
(function (wd) {
    (function (EKeyFrameInterpolation) {
        EKeyFrameInterpolation[EKeyFrameInterpolation["LINEAR"] = 0] = "LINEAR";
    })(wd.EKeyFrameInterpolation || (wd.EKeyFrameInterpolation = {}));
    var EKeyFrameInterpolation = wd.EKeyFrameInterpolation;
})(wd || (wd = {}));
var wd;
(function (wd) {
    (function (EArticulatedAnimationTarget) {
        EArticulatedAnimationTarget[EArticulatedAnimationTarget["TRANSLATION"] = "position"] = "TRANSLATION";
        EArticulatedAnimationTarget[EArticulatedAnimationTarget["ROTATION"] = "rotation"] = "ROTATION";
        EArticulatedAnimationTarget[EArticulatedAnimationTarget["SCALE"] = "scale"] = "SCALE";
    })(wd.EArticulatedAnimationTarget || (wd.EArticulatedAnimationTarget = {}));
    var EArticulatedAnimationTarget = wd.EArticulatedAnimationTarget;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var Geometry = (function (_super) {
        __extends(Geometry, _super);
        function Geometry() {
            _super.apply(this, arguments);
            this._material = null;
            this.buffers = null;
            this.drawMode = wd.EDrawMode.TRIANGLES;
        }
        Object.defineProperty(Geometry.prototype, "material", {
            get: function () {
                return this._material;
            },
            set: function (material) {
                if (!wd.JudgeUtils.isEqual(material, this._material)) {
                    this._material = material;
                    this._material.geometry = this;
                    wd.EventManager.trigger(this.entityObject, wd.CustomEvent.create(wd.EEngineEvent.MATERIAL_CHANGE));
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Geometry.prototype, "geometryData", {
            get: function () {
                return this.buffers.geometryData;
            },
            enumerable: true,
            configurable: true
        });
        Geometry.prototype.init = function () {
            var geometryData = null, _a = this.computeData(), vertices = _a.vertices, faces = _a.faces, texCoords = _a.texCoords, colors = _a.colors, morphTargets = _a.morphTargets;
            this.buffers = this.createBufferContainer();
            geometryData = this.createGeometryData(vertices, faces, texCoords, colors, morphTargets);
            this.buffers.geometryData = geometryData;
            this.buffers.init();
            this._material.init();
            this.computeNormals();
        };
        Geometry.prototype.hasFaceNormals = function () {
            return this.buffers.geometryData.hasFaceNormals();
        };
        Geometry.prototype.hasVertexNormals = function () {
            return this.buffers.geometryData.hasVertexNormals();
        };
        Geometry.prototype.isSmoothShading = function () {
            return this._material.shading === wd.EShading.SMOOTH;
        };
        Geometry.prototype.dispose = function () {
            this.buffers.dispose();
            this._material.dispose();
        };
        Geometry.prototype.computeFaceNormals = function () {
            this.buffers.geometryData.computeFaceNormals();
        };
        Geometry.prototype.computeVertexNormals = function () {
            this.buffers.geometryData.computeVertexNormals();
        };
        Geometry.prototype.computeNormals = function () {
            if (this.isSmoothShading()) {
                if (!this.hasVertexNormals()) {
                    this.computeVertexNormals();
                }
            }
            else {
                if (!this.hasFaceNormals()) {
                    this.computeFaceNormals();
                }
            }
        };
        Geometry.prototype.createBufferContainer = function () {
            return wd.CommonBufferContainer.create(this.entityObject);
        };
        Geometry.prototype.createGeometryData = function (vertices, faces, texCoords, colors, morphTargets) {
            return this.createCommonGeometryData(vertices, faces, texCoords, colors);
        };
        Geometry.prototype.createCommonGeometryData = function (vertices, faces, texCoords, colors) {
            var geometryData = wd.CommonGeometryData.create(this);
            geometryData.vertices = vertices;
            geometryData.faces = faces;
            geometryData.texCoords = texCoords;
            geometryData.colors = colors;
            return geometryData;
        };
        __decorate([
            wd.ensure(function () {
                var geometryData = this.buffers.geometryData;
                wd.assert(geometryData.vertices.length > 0, wd.Log.info.FUNC_MUST("vertices.count", "> 0"));
                wd.assert(geometryData.faces.length * 3 === geometryData.indices.length, wd.Log.info.FUNC_SHOULD("faces.count", "be " + geometryData.indices.length / 3 + ", but actual is " + geometryData.faces.length));
            })
        ], Geometry.prototype, "init", null);
        __decorate([
            wd.require(function () {
                wd.assert(this.buffers && this.buffers.geometryData, wd.Log.info.FUNC_MUST_DEFINE("buffers->geometryData"));
            })
        ], Geometry.prototype, "hasFaceNormals", null);
        __decorate([
            wd.require(function () {
                wd.assert(this.buffers && this.buffers.geometryData, wd.Log.info.FUNC_MUST_DEFINE("buffers->geometryData"));
            })
        ], Geometry.prototype, "hasVertexNormals", null);
        __decorate([
            wd.require(function () {
                wd.assert(this.buffers && this.buffers.geometryData, wd.Log.info.FUNC_MUST_DEFINE("buffers->geometryData"));
            })
        ], Geometry.prototype, "computeFaceNormals", null);
        __decorate([
            wd.virtual
        ], Geometry.prototype, "computeNormals", null);
        __decorate([
            wd.virtual
        ], Geometry.prototype, "createBufferContainer", null);
        __decorate([
            wd.virtual
        ], Geometry.prototype, "createGeometryData", null);
        return Geometry;
    }(wd.Component));
    wd.Geometry = Geometry;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var GeometryUtils = (function () {
        function GeometryUtils() {
        }
        GeometryUtils.convertToFaces = function (indices, normals) {
            var hasNormals = this.hasData(normals), faces = [];
            for (var i = 0, len = indices.length; i < len; i += 3) {
                var a = indices[i], b = indices[i + 1], c = indices[i + 2], face = wd.Face3.create(a, b, c);
                if (hasNormals) {
                    face.vertexNormals.addChildren([
                        this.getThreeComponent(normals, a),
                        this.getThreeComponent(normals, b),
                        this.getThreeComponent(normals, c)
                    ]);
                    face.faceNormal = face.vertexNormals.getChild(0).copy();
                }
                faces.push(face);
            }
            return faces;
        };
        GeometryUtils.hasData = function (data) {
            return data && ((data.length && data.length > 0) || (data.getCount && data.getCount() > 0));
        };
        GeometryUtils.getThreeComponent = function (sourceData, index) {
            var startIndex = 3 * index;
            return wd.Vector3.create(sourceData[startIndex], sourceData[startIndex + 1], sourceData[startIndex + 2]);
        };
        GeometryUtils.iterateThreeComponent = function (dataArr, iterator) {
            for (var i = 0, len = dataArr.length; i < len; i += 3) {
                iterator(wd.Vector3.create(dataArr[i], dataArr[i + 1], dataArr[i + 2]));
            }
        };
        GeometryUtils.setThreeComponent = function (targetData, sourceData, index) {
            if (sourceData instanceof wd.Vector3) {
                targetData[index * 3] = sourceData.x;
                targetData[index * 3 + 1] = sourceData.y;
                targetData[index * 3 + 2] = sourceData.z;
            }
            else {
                targetData[index * 3] = sourceData[0];
                targetData[index * 3 + 1] = sourceData[1];
                targetData[index * 3 + 2] = sourceData[2];
            }
        };
        __decorate([
            wd.require(function (data) {
                if (data) {
                    wd.assert(data instanceof wdCb.Collection || data instanceof wdCb.Hash || wd.JudgeUtils.isArray(data), wd.Log.info.FUNC_SHOULD("data", "be Array or Collection or Hash"));
                }
            })
        ], GeometryUtils, "hasData", null);
        __decorate([
            wd.require(function (dataArr, iterator) {
                wd.assert(dataArr.length % 3 === 0, wd.Log.info.FUNC_SHOULD("dataArr.length", "times of three"));
            })
        ], GeometryUtils, "iterateThreeComponent", null);
        return GeometryUtils;
    }());
    wd.GeometryUtils = GeometryUtils;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var CustomGeometry = (function (_super) {
        __extends(CustomGeometry, _super);
        function CustomGeometry() {
            _super.apply(this, arguments);
            this._vertices = [];
            this._texCoords = [];
            this._colors = [];
            this._indices = [];
            this._normals = [];
        }
        CustomGeometry.create = function () {
            var geom = new this();
            return geom;
        };
        Object.defineProperty(CustomGeometry.prototype, "vertices", {
            get: function () {
                return this._vertices;
            },
            set: function (vertices) {
                this._vertices = vertices;
                if (this.buffers) {
                    this.buffers.geometryData.vertices = vertices;
                    this.buffers.removeCache(wd.EBufferDataType.VERTICE);
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CustomGeometry.prototype, "texCoords", {
            get: function () {
                return this._texCoords;
            },
            set: function (texCoords) {
                this._texCoords = texCoords;
                if (this.buffers) {
                    this.buffers.geometryData.texCoords = texCoords;
                    this.buffers.removeCache(wd.EBufferDataType.TEXCOORD);
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CustomGeometry.prototype, "colors", {
            get: function () {
                return this._colors;
            },
            set: function (colors) {
                this._colors = colors;
                if (this.buffers) {
                    this.buffers.geometryData.colors = colors;
                    this.buffers.removeCache(wd.EBufferDataType.COLOR);
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CustomGeometry.prototype, "indices", {
            get: function () {
                return this._indices;
            },
            set: function (indices) {
                this._indices = indices;
                if (this.buffers) {
                    this.buffers.geometryData.faces = wd.GeometryUtils.convertToFaces(indices, this.normals);
                    this.buffers.removeCache(wd.EBufferDataType.INDICE);
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CustomGeometry.prototype, "normals", {
            get: function () {
                return this._normals;
            },
            set: function (normals) {
                this._normals = normals;
                if (this.buffers) {
                    this.buffers.geometryData.faces = wd.GeometryUtils.convertToFaces(this.indices, normals);
                    this.buffers.removeCache(wd.EBufferDataType.NORMAL);
                }
            },
            enumerable: true,
            configurable: true
        });
        CustomGeometry.prototype.computeData = function () {
            return {
                vertices: this.vertices,
                faces: wd.GeometryUtils.convertToFaces(this.indices, this.normals),
                texCoords: this.texCoords,
                colors: this.colors
            };
        };
        return CustomGeometry;
    }(wd.Geometry));
    wd.CustomGeometry = CustomGeometry;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var ModelGeometry = (function (_super) {
        __extends(ModelGeometry, _super);
        function ModelGeometry() {
            _super.apply(this, arguments);
            this.vertices = null;
            this.colors = null;
            this.texCoords = null;
            this.faces = null;
            this.morphTargets = null;
            this.morphFaceNormals = wdCb.Hash.create();
            this.morphVertexNormals = wdCb.Hash.create();
        }
        ModelGeometry.create = function () {
            var geom = new this();
            return geom;
        };
        ModelGeometry.prototype.hasAnimation = function () {
            return this._hasMorphTargets() && (this.entityObject && this.entityObject.hasComponent(wd.MorphAnimation));
        };
        ModelGeometry.prototype.hasMorphFaceNormals = function () {
            return this.buffers.geometryData.hasMorphFaceNormals();
        };
        ModelGeometry.prototype.hasMorphVertexNormals = function () {
            return this.buffers.geometryData.hasMorphVertexNormals();
        };
        ModelGeometry.prototype.computeMorphNormals = function () {
            this.buffers.geometryData.computeMorphNormals();
        };
        ModelGeometry.prototype.computeNormals = function () {
            _super.prototype.computeNormals.call(this);
            if (this._hasMorphTargets()) {
                if (this.isSmoothShading()) {
                    if (!this.hasMorphVertexNormals()) {
                        this.computeMorphNormals();
                    }
                }
                else {
                    if (!this.hasMorphFaceNormals()) {
                        this.computeMorphNormals();
                    }
                }
            }
        };
        ModelGeometry.prototype.computeData = function () {
            return {
                vertices: this.vertices,
                faces: this.faces,
                texCoords: this.texCoords,
                colors: this.colors,
                morphTargets: this.morphTargets
            };
        };
        ModelGeometry.prototype.createBufferContainer = function () {
            if (this.hasAnimation()) {
                return wd.MorphBufferContainer.create(this.entityObject, this.entityObject.getComponent(wd.MorphAnimation));
            }
            return wd.CommonBufferContainer.create(this.entityObject);
        };
        ModelGeometry.prototype.createGeometryData = function (vertices, faces, texCoords, colors, morphTargets) {
            if (this.hasAnimation()) {
                var geometryData = wd.MorphGeometryData.create(this);
                geometryData.vertices = vertices;
                geometryData.faces = faces;
                geometryData.texCoords = texCoords;
                geometryData.colors = colors;
                geometryData.morphTargets = morphTargets;
                return geometryData;
            }
            return this.createCommonGeometryData(vertices, faces, texCoords, colors);
        };
        ModelGeometry.prototype._hasMorphTargets = function () {
            return this.morphTargets && this.morphTargets.getCount() > 0;
        };
        __decorate([
            wd.require(function () {
                wd.assert(this.buffers && this.buffers.geometryData, wd.Log.info.FUNC_MUST_DEFINE("buffers->geometryData"));
            })
        ], ModelGeometry.prototype, "hasMorphFaceNormals", null);
        __decorate([
            wd.require(function () {
                wd.assert(this.buffers && this.buffers.geometryData, wd.Log.info.FUNC_MUST_DEFINE("buffers->geometryData"));
            })
        ], ModelGeometry.prototype, "hasMorphVertexNormals", null);
        __decorate([
            wd.require(function () {
                wd.assert(this.buffers && this.buffers.geometryData, wd.Log.info.FUNC_MUST_DEFINE("buffers->geometryData"));
            })
        ], ModelGeometry.prototype, "computeMorphNormals", null);
        __decorate([
            wd.require(function () {
                if (this.hasAnimation()) {
                    wd.assert(this.entityObject.getComponent(wd.MorphAnimation), wd.Log.info.FUNC_SHOULD("entityObject with ModelGeometry", "add MorphAnimation component"));
                }
            })
        ], ModelGeometry.prototype, "createBufferContainer", null);
        return ModelGeometry;
    }(wd.Geometry));
    wd.ModelGeometry = ModelGeometry;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var BoxGeometry = (function (_super) {
        __extends(BoxGeometry, _super);
        function BoxGeometry() {
            _super.apply(this, arguments);
            this.width = null;
            this.height = null;
            this.depth = null;
            this.widthSegments = 1;
            this.heightSegments = 1;
            this.depthSegments = 1;
        }
        BoxGeometry.create = function () {
            var geom = new this();
            return geom;
        };
        BoxGeometry.prototype.computeData = function () {
            var width = this.width, height = this.height, depth = this.depth, widthSegments = this.widthSegments, heightSegments = this.heightSegments, depthSegments = this.depthSegments, sides = {
                FRONT: 0,
                BACK: 1,
                TOP: 2,
                BOTTOM: 3,
                RIGHT: 4,
                LEFT: 5
            };
            var faceAxes = [
                [0, 1, 3],
                [4, 5, 7],
                [3, 2, 6],
                [1, 0, 4],
                [1, 4, 2],
                [5, 0, 6]
            ];
            var faceNormals = [
                [0, 0, 1],
                [0, 0, -1],
                [0, 1, 0],
                [0, -1, 0],
                [1, 0, 0],
                [-1, 0, 0]
            ];
            var corners = [
                wd.Vector3.create(-width, -height, depth),
                wd.Vector3.create(width, -height, depth),
                wd.Vector3.create(width, height, depth),
                wd.Vector3.create(-width, height, depth),
                wd.Vector3.create(width, -height, -depth),
                wd.Vector3.create(-width, -height, -depth),
                wd.Vector3.create(-width, height, -depth),
                wd.Vector3.create(width, height, -depth)
            ];
            var vertices = [];
            var normals = [];
            var texCoords = [];
            var indices = [];
            function generateFace(side, uSegments, vSegments) {
                var x, y, z, u, v;
                var i, j;
                var offset = vertices.length / 3;
                for (i = 0; i <= uSegments; i++) {
                    for (j = 0; j <= vSegments; j++) {
                        var temp1 = wd.Vector3.create();
                        var temp2 = wd.Vector3.create();
                        var temp3 = wd.Vector3.create();
                        var r = wd.Vector3.create();
                        temp1.lerp(corners[faceAxes[side][0]], corners[faceAxes[side][1]], i / uSegments);
                        temp2.lerp(corners[faceAxes[side][0]], corners[faceAxes[side][2]], j / vSegments);
                        temp3.sub2(temp2, corners[faceAxes[side][0]]);
                        r.add2(temp1, temp3);
                        u = i / uSegments;
                        v = j / vSegments;
                        vertices.push(r.x, r.y, r.z);
                        normals.push(faceNormals[side][0], faceNormals[side][1], faceNormals[side][2]);
                        texCoords.push(u, v);
                        if ((i < uSegments) && (j < vSegments)) {
                            indices.push(offset + j + i * (uSegments + 1), offset + j + (i + 1) * (uSegments + 1), offset + j + i * (uSegments + 1) + 1);
                            indices.push(offset + j + (i + 1) * (uSegments + 1), offset + j + (i + 1) * (uSegments + 1) + 1, offset + j + i * (uSegments + 1) + 1);
                        }
                    }
                }
            }
            generateFace(sides.FRONT, widthSegments, heightSegments);
            generateFace(sides.BACK, widthSegments, heightSegments);
            generateFace(sides.TOP, widthSegments, depthSegments);
            generateFace(sides.BOTTOM, widthSegments, depthSegments);
            generateFace(sides.RIGHT, depthSegments, heightSegments);
            generateFace(sides.LEFT, depthSegments, heightSegments);
            return {
                vertices: vertices,
                faces: wd.GeometryUtils.convertToFaces(indices, normals),
                texCoords: texCoords
            };
        };
        return BoxGeometry;
    }(wd.Geometry));
    wd.BoxGeometry = BoxGeometry;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var RectGeometry = (function (_super) {
        __extends(RectGeometry, _super);
        function RectGeometry() {
            _super.apply(this, arguments);
            this.width = null;
            this.height = null;
        }
        RectGeometry.create = function () {
            var geom = new this();
            return geom;
        };
        RectGeometry.prototype.computeData = function () {
            var width = this.width, height = this.height, left = -width / 2, right = width / 2, up = height / 2, down = -height / 2, vertices = [], texCoords = [], indices = [], normals = [];
            vertices = [
                right, up, 0,
                left, up, 0,
                left, down, 0,
                right, down, 0
            ];
            indices = [
                0, 1, 2, 0, 2, 3
            ];
            texCoords = [
                1.0, 1.0,
                0.0, 1.0,
                0.0, 0.0,
                1.0, 0.0
            ];
            normals = [
                0, 0, 1,
                0, 0, 1,
                0, 0, 1,
                0, 0, 1
            ];
            return {
                vertices: vertices,
                faces: wd.GeometryUtils.convertToFaces(indices, normals),
                texCoords: texCoords
            };
        };
        return RectGeometry;
    }(wd.Geometry));
    wd.RectGeometry = RectGeometry;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var PlaneGeometry = (function (_super) {
        __extends(PlaneGeometry, _super);
        function PlaneGeometry() {
            _super.apply(this, arguments);
            this.width = null;
            this.height = null;
            this.widthSegments = 1;
            this.heightSegments = 1;
        }
        PlaneGeometry.create = function () {
            var geom = new this();
            return geom;
        };
        PlaneGeometry.prototype.computeData = function () {
            var width = this.width, height = this.height, widthSegments = this.widthSegments, heightSegments = this.heightSegments, x = null, y = null, z = null, u = null, v = null, i = null, j = null, vertices = [], texCoords = [], normals = [], indices = [];
            for (i = 0; i <= widthSegments; i++) {
                for (j = 0; j <= heightSegments; j++) {
                    x = -width + 2.0 * width * i / widthSegments;
                    y = 0.0;
                    z = -(-height + 2.0 * height * j / heightSegments);
                    u = i / widthSegments;
                    v = j / heightSegments;
                    vertices.push(x, y, z);
                    normals.push(0.0, 1.0, 0.0);
                    texCoords.push(u, v);
                    if ((i < widthSegments) && (j < heightSegments)) {
                        indices.push(j + i * (widthSegments + 1), j + (i + 1) * (widthSegments + 1), j + i * (widthSegments + 1) + 1);
                        indices.push(j + (i + 1) * (widthSegments + 1), j + (i + 1) * (widthSegments + 1) + 1, j + i * (widthSegments + 1) + 1);
                    }
                }
            }
            return {
                vertices: vertices,
                faces: wd.GeometryUtils.convertToFaces(indices, normals),
                texCoords: texCoords
            };
        };
        return PlaneGeometry;
    }(wd.Geometry));
    wd.PlaneGeometry = PlaneGeometry;
})(wd || (wd = {}));
var wd;
(function (wd) {
    (function (ESphereDrawMode) {
        ESphereDrawMode[ESphereDrawMode["LATITUDELONGTITUDE"] = 0] = "LATITUDELONGTITUDE";
    })(wd.ESphereDrawMode || (wd.ESphereDrawMode = {}));
    var ESphereDrawMode = wd.ESphereDrawMode;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var SphereGeometry = (function (_super) {
        __extends(SphereGeometry, _super);
        function SphereGeometry() {
            _super.apply(this, arguments);
            this.radius = 1;
            this.sphereDrawMode = wd.ESphereDrawMode.LATITUDELONGTITUDE;
            this.segments = 20;
        }
        SphereGeometry.create = function () {
            var geom = new this();
            return geom;
        };
        SphereGeometry.prototype.computeData = function () {
            var radius = this.radius, sphereDrawMode = this.sphereDrawMode, segments = this.segments, data = null;
            if (sphereDrawMode === wd.ESphereDrawMode.LATITUDELONGTITUDE) {
                var _a = GetDataByLatitudeLongtitude.create(radius, segments).getData(), vertices = _a.vertices, indices = _a.indices, normals = _a.normals, texCoords = _a.texCoords;
                return {
                    vertices: vertices,
                    faces: wd.GeometryUtils.convertToFaces(indices, normals),
                    texCoords: texCoords
                };
            }
            return data;
        };
        return SphereGeometry;
    }(wd.Geometry));
    wd.SphereGeometry = SphereGeometry;
    var GetDataByLatitudeLongtitude = (function () {
        function GetDataByLatitudeLongtitude(radius, bands) {
            this._radius = null;
            this._latitudeBands = null;
            this._longitudeBands = null;
            this._radius = radius;
            this._latitudeBands = bands;
            this._longitudeBands = bands;
        }
        GetDataByLatitudeLongtitude.create = function (radius, bands) {
            var geom = new this(radius, bands);
            return geom;
        };
        GetDataByLatitudeLongtitude.prototype.getData = function () {
            var vertices = [];
            var normals = [];
            var texCoords = [];
            var indices = [];
            for (var latNumber = 0; latNumber <= this._latitudeBands; latNumber++) {
                var theta = latNumber * Math.PI / this._latitudeBands;
                var sinTheta = Math.sin(theta);
                var cosTheta = Math.cos(theta);
                for (var longNumber = 0; longNumber <= this._longitudeBands; longNumber++) {
                    var phi = longNumber * 2 * Math.PI / this._longitudeBands;
                    var sinPhi = Math.sin(phi);
                    var cosPhi = Math.cos(phi);
                    var x = this._radius * cosPhi * sinTheta;
                    var y = this._radius * cosTheta;
                    var z = this._radius * sinPhi * sinTheta;
                    var u = 1 - (longNumber / this._longitudeBands);
                    var v = 1 - (latNumber / this._latitudeBands);
                    normals.push(x);
                    normals.push(y);
                    normals.push(z);
                    texCoords.push(u);
                    texCoords.push(v);
                    vertices.push(x);
                    vertices.push(y);
                    vertices.push(z);
                }
            }
            for (var latNumber = 0; latNumber < this._latitudeBands; latNumber++) {
                for (var longNumber = 0; longNumber < this._longitudeBands; longNumber++) {
                    var first = latNumber * (this._longitudeBands + 1) + longNumber;
                    var second = first + this._longitudeBands + 1;
                    indices.push(first + 1);
                    indices.push(second);
                    indices.push(first);
                    indices.push(first + 1);
                    indices.push(second + 1);
                    indices.push(second);
                }
            }
            return {
                vertices: vertices,
                indices: indices,
                normals: normals,
                texCoords: texCoords
            };
        };
        return GetDataByLatitudeLongtitude;
    }());
})(wd || (wd = {}));
var wd;
(function (wd) {
    var TriangleGeometry = (function (_super) {
        __extends(TriangleGeometry, _super);
        function TriangleGeometry() {
            _super.apply(this, arguments);
            this.width = null;
            this.height = null;
        }
        TriangleGeometry.create = function () {
            var geom = new this();
            return geom;
        };
        TriangleGeometry.prototype.computeData = function () {
            var width = this.width, height = this.height, left = -width / 2, right = width / 2, up = height / 2, down = -height / 2, vertices = [], texCoords = [], indices = [], normals = [];
            vertices = [
                0.0, up, 0,
                left, down, 0,
                right, down, 0
            ];
            indices = [
                0, 1, 2
            ];
            texCoords = [
                0.5, 1.0,
                0.0, 0.0,
                1.0, 0.0
            ];
            normals = [
                0, 0, 1,
                0, 0, 1,
                0, 0, 1
            ];
            return {
                vertices: vertices,
                faces: wd.GeometryUtils.convertToFaces(indices, normals),
                texCoords: texCoords
            };
        };
        return TriangleGeometry;
    }(wd.Geometry));
    wd.TriangleGeometry = TriangleGeometry;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var GeometryData = (function () {
        function GeometryData(geometry) {
            this._vertices = null;
            this._faces = null;
            this._texCoords = null;
            this._colors = null;
            this._tangents = null;
            this.isTangentDirty = true;
            this.geometry = null;
            this._normalCache = null;
            this._normalFromFaceCache = null;
            this._normalFromVertexCache = null;
            this._indiceCache = null;
            this._normalDirty = true;
            this._indiceDirty = true;
            this.geometry = geometry;
        }
        Object.defineProperty(GeometryData.prototype, "vertices", {
            get: function () {
                return this._vertices;
            },
            set: function (vertices) {
                this._vertices = vertices;
                this.isTangentDirty = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GeometryData.prototype, "normals", {
            get: function () {
                var geometry = this.geometry;
                if (geometry.isSmoothShading()) {
                    if (!this.hasVertexNormals()) {
                        this.computeVertexNormals();
                    }
                    return this.normalsFromVertexNormals;
                }
                if (!this.hasFaceNormals()) {
                    this.computeFaceNormals();
                }
                return this.normalsFromFaceNormal;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GeometryData.prototype, "normalsFromFaceNormal", {
            get: function () {
                var normals = null;
                if (!this.hasFaceNormals()) {
                    return [];
                }
                normals = [];
                this._faces.forEach(function (face) {
                    var normal = face.faceNormal;
                    wd.GeometryUtils.setThreeComponent(normals, normal, face.aIndex);
                    wd.GeometryUtils.setThreeComponent(normals, normal, face.bIndex);
                    wd.GeometryUtils.setThreeComponent(normals, normal, face.cIndex);
                });
                this._fillEmptyData(normals);
                return normals;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GeometryData.prototype, "normalsFromVertexNormals", {
            get: function () {
                var normals = null;
                if (!this.hasVertexNormals()) {
                    return [];
                }
                normals = [];
                this._faces.forEach(function (face) {
                    wd.GeometryUtils.setThreeComponent(normals, face.vertexNormals.getChild(0), face.aIndex);
                    wd.GeometryUtils.setThreeComponent(normals, face.vertexNormals.getChild(1), face.bIndex);
                    wd.GeometryUtils.setThreeComponent(normals, face.vertexNormals.getChild(2), face.cIndex);
                });
                this._fillEmptyData(normals);
                return normals;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GeometryData.prototype, "indices", {
            get: function () {
                var indices = [];
                for (var _i = 0, _a = this._faces; _i < _a.length; _i++) {
                    var face = _a[_i];
                    indices.push(face.aIndex, face.bIndex, face.cIndex);
                }
                return indices;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GeometryData.prototype, "faces", {
            get: function () {
                return this._faces;
            },
            set: function (faces) {
                this._faces = faces;
                this.onChangeFace();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GeometryData.prototype, "texCoords", {
            get: function () {
                return this._texCoords;
            },
            set: function (texCoords) {
                this._texCoords = texCoords;
                this.isTangentDirty = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GeometryData.prototype, "colors", {
            get: function () {
                return this._getColors(this._colors, this._vertices);
            },
            set: function (colors) {
                this._colors = colors;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GeometryData.prototype, "tangents", {
            get: function () {
                if (this.isTangentDirty) {
                    this.isTangentDirty = false;
                    this._tangents = this._calculateTangents(this._vertices, this.normals, this.texCoords, this.indices);
                }
                return this._tangents;
            },
            enumerable: true,
            configurable: true
        });
        GeometryData.prototype.computeFaceNormals = function () {
            var vertices = this._vertices;
            for (var _i = 0, _a = this._faces; _i < _a.length; _i++) {
                var face = _a[_i];
                face.faceNormal = this.computeFaceNormalsHelper(vertices, face.aIndex, face.bIndex, face.cIndex);
            }
        };
        GeometryData.prototype.computeVertexNormals = function () {
            var normals = null;
            if (!this.hasFaceNormals()) {
                this.computeFaceNormals();
            }
            normals = this.computeVertexNormalsHelper(this._vertices);
            for (var _i = 0, _a = this._faces; _i < _a.length; _i++) {
                var face = _a[_i];
                face.vertexNormals = wdCb.Collection.create([
                    normals[face.aIndex],
                    normals[face.bIndex],
                    normals[face.cIndex]
                ]);
            }
        };
        GeometryData.prototype.hasFaceNormals = function () {
            for (var _i = 0, _a = this._faces; _i < _a.length; _i++) {
                var face = _a[_i];
                if (!face.hasFaceNormal()) {
                    return false;
                }
            }
            return true;
        };
        GeometryData.prototype.hasVertexNormals = function () {
            for (var _i = 0, _a = this._faces; _i < _a.length; _i++) {
                var face = _a[_i];
                if (!face.hasVertexNormal()) {
                    return false;
                }
            }
            return true;
        };
        GeometryData.prototype.onChangeFace = function () {
            this.isTangentDirty = true;
            this._normalDirty = true;
            this._indiceDirty = true;
        };
        GeometryData.prototype.computeFaceNormalsHelper = function (vertices, aIndex, bIndex, cIndex) {
            var p0 = wd.GeometryUtils.getThreeComponent(vertices, aIndex), p1 = wd.GeometryUtils.getThreeComponent(vertices, bIndex), p2 = wd.GeometryUtils.getThreeComponent(vertices, cIndex), v0 = wd.Vector3.create().sub2(p2, p1), v1 = wd.Vector3.create().sub2(p0, p1);
            return wd.Vector3.create().cross(v0, v1).normalize();
        };
        GeometryData.prototype.computeVertexNormalsHelper = function (vertices) {
            var vl = vertices.length / 3, normals = null;
            normals = new Array(vl);
            for (var v = 0; v < vl; v++) {
                normals[v] = wd.Vector3.create();
            }
            for (var _i = 0, _a = this._faces; _i < _a.length; _i++) {
                var face = _a[_i];
                var faceNormal = null;
                faceNormal = face.faceNormal;
                normals[face.aIndex].add(faceNormal);
                normals[face.bIndex].add(faceNormal);
                normals[face.cIndex].add(faceNormal);
            }
            for (var v = 0; v < vl; v++) {
                normals[v].normalize();
            }
            return normals;
        };
        GeometryData.prototype._getColors = function (colors, vertices) {
            if (colors && colors.length > 0) {
                return colors;
            }
            else {
                return this._getColorsFromMaterial(vertices);
            }
        };
        GeometryData.prototype._getColorsFromMaterial = function (vertices) {
            var arr = [], i = 0, material = this.geometry.material, color = material.color, len = null;
            wdCb.Log.error(!vertices || vertices.length === 0, wdCb.Log.info.FUNC_MUST("has vertice data"));
            len = vertices.length;
            for (i = 0; i < len; i++) {
                arr.push(color.r, color.g, color.b);
            }
            return arr;
        };
        GeometryData.prototype._fillEmptyData = function (data) {
            for (var i = 0, len = data.length; i < len; i++) {
                if (isNaN(data[i])) {
                    data[i] = 0;
                }
            }
        };
        GeometryData.prototype._calculateTangents = function (vertices, normals, texCoords, indices) {
            var triangleCount = indices.length / 3, vertexCount = vertices.length / 3, i1, i2, i3, x1, x2, y1, y2, z1, z2, s1, s2, t1, t2, r, sdir = wd.Vector3.create(), tdir = wd.Vector3.create(), v1 = wd.Vector3.create(), v2 = wd.Vector3.create(), v3 = wd.Vector3.create(), w1 = wd.Vector2.create(), w2 = wd.Vector2.create(), w3 = wd.Vector2.create(), i, tan1 = new Float32Array(vertexCount * 3), tan2 = new Float32Array(vertexCount * 3), n = wd.Vector3.create(), temp = wd.Vector3.create(), tangents = [];
            for (i = 0; i < triangleCount; i++) {
                i1 = indices[i * 3];
                i2 = indices[i * 3 + 1];
                i3 = indices[i * 3 + 2];
                v1.set(vertices[i1 * 3], vertices[i1 * 3 + 1], vertices[i1 * 3 + 2]);
                v2.set(vertices[i2 * 3], vertices[i2 * 3 + 1], vertices[i2 * 3 + 2]);
                v3.set(vertices[i3 * 3], vertices[i3 * 3 + 1], vertices[i3 * 3 + 2]);
                w1.set(texCoords[i1 * 2], texCoords[i1 * 2 + 1]);
                w2.set(texCoords[i2 * 2], texCoords[i2 * 2 + 1]);
                w3.set(texCoords[i3 * 2], texCoords[i3 * 2 + 1]);
                x1 = v2.x - v1.x;
                x2 = v3.x - v1.x;
                y1 = v2.y - v1.y;
                y2 = v3.y - v1.y;
                z1 = v2.z - v1.z;
                z2 = v3.z - v1.z;
                s1 = w2.x - w1.x;
                s2 = w3.x - w1.x;
                t1 = w2.y - w1.y;
                t2 = w3.y - w1.y;
                r = 1.0 / (s1 * t2 - s2 * t1);
                sdir.set((t2 * x1 - t1 * x2) * r, (t2 * y1 - t1 * y2) * r, (t2 * z1 - t1 * z2) * r);
                tdir.set((s1 * x2 - s2 * x1) * r, (s1 * y2 - s2 * y1) * r, (s1 * z2 - s2 * z1) * r);
                tan1[i1 * 3 + 0] += sdir.x;
                tan1[i1 * 3 + 1] += sdir.y;
                tan1[i1 * 3 + 2] += sdir.z;
                tan1[i2 * 3 + 0] += sdir.x;
                tan1[i2 * 3 + 1] += sdir.y;
                tan1[i2 * 3 + 2] += sdir.z;
                tan1[i3 * 3 + 0] += sdir.x;
                tan1[i3 * 3 + 1] += sdir.y;
                tan1[i3 * 3 + 2] += sdir.z;
                tan2[i1 * 3 + 0] += tdir.x;
                tan2[i1 * 3 + 1] += tdir.y;
                tan2[i1 * 3 + 2] += tdir.z;
                tan2[i2 * 3 + 0] += tdir.x;
                tan2[i2 * 3 + 1] += tdir.y;
                tan2[i2 * 3 + 2] += tdir.z;
                tan2[i3 * 3 + 0] += tdir.x;
                tan2[i3 * 3 + 1] += tdir.y;
                tan2[i3 * 3 + 2] += tdir.z;
            }
            t1 = wd.Vector3.create();
            t2 = wd.Vector3.create();
            for (i = 0; i < vertexCount; i++) {
                var ndott = null;
                n.set(normals[i * 3], normals[i * 3 + 1], normals[i * 3 + 2]);
                t1.set(tan1[i * 3], tan1[i * 3 + 1], tan1[i * 3 + 2]);
                t2.set(tan2[i * 3], tan2[i * 3 + 1], tan2[i * 3 + 2]);
                ndott = n.dot(t1);
                temp = n.copy().scale(ndott);
                temp.sub2(t1, temp).normalize();
                tangents[i * 4] = temp.x;
                tangents[i * 4 + 1] = temp.y;
                tangents[i * 4 + 2] = temp.z;
                temp.cross(n, t1);
                tangents[i * 4 + 3] = (temp.dot(t2) < 0.0) ? -1.0 : 1.0;
            }
            return tangents;
        };
        __decorate([
            wd.requireGetter(function () {
                wd.assert(this._faces.length > 0, wd.Log.info.FUNC_SHOULD("faces.count", "> 0"));
                for (var _i = 0, _a = this._faces; _i < _a.length; _i++) {
                    var face = _a[_i];
                    if (this.geometry.isSmoothShading()) {
                        wd.assert(face.vertexNormals && face.vertexNormals.getCount() === 3, wd.Log.info.FUNC_SHOULD("faces->vertexNormals.count", "=== 3"));
                    }
                    else {
                        wd.assert(face.hasFaceNormal(), wd.Log.info.FUNC_SHOULD("faces->faceNormal", "has data"));
                    }
                }
            }),
            wd.cacheGetter(function () {
                return !this._normalDirty && this._normalCache;
            }, function () {
                return this._normalCache;
            }, function (result) {
                this._normalCache = result;
                this._normalDirty = false;
            })
        ], GeometryData.prototype, "normals", null);
        __decorate([
            wd.requireGetter(function () {
                wd.assert(this._faces.length > 0, wd.Log.info.FUNC_SHOULD("geometry", "has faces"));
            }),
            wd.ensureGetter(function (normals) {
                for (var _i = 0, normals_1 = normals; _i < normals_1.length; _i++) {
                    var data = normals_1[_i];
                    wd.assert(wd.JudgeUtils.isNumber(data), wd.Log.info.FUNC_SHOULD("normals data", "be number"));
                }
            }),
            wd.cacheGetter(function () {
                return !this._normalDirty && this._normalFromFaceCache;
            }, function () {
                return this._normalFromFaceCache;
            }, function (result) {
                this._normalFromFaceCache = result;
                this._normalDirty = false;
            })
        ], GeometryData.prototype, "normalsFromFaceNormal", null);
        __decorate([
            wd.requireGetter(function () {
                wd.assert(this._faces.length > 0, wd.Log.info.FUNC_SHOULD("geometry", "has faces"));
            }),
            wd.ensureGetter(function (normals) {
                for (var _i = 0, normals_2 = normals; _i < normals_2.length; _i++) {
                    var data = normals_2[_i];
                    wd.assert(wd.JudgeUtils.isNumber(data), wd.Log.info.FUNC_SHOULD("normals data", "be number"));
                }
            }),
            wd.cacheGetter(function () {
                return !this._normalDirty && this._normalFromVertexCache;
            }, function () {
                return this._normalFromVertexCache;
            }, function (result) {
                this._normalFromVertexCache = result;
                this._normalDirty = false;
            })
        ], GeometryData.prototype, "normalsFromVertexNormals", null);
        __decorate([
            wd.cacheGetter(function () {
                return !this._indiceDirty && this._indiceCache;
            }, function () {
                return this._indiceCache;
            }, function (result) {
                this._indiceCache = result;
                this._indiceDirty = false;
            })
        ], GeometryData.prototype, "indices", null);
        __decorate([
            wd.require(function () {
                wd.assert(wd.GeometryUtils.hasData(this.vertices), wd.Log.info.FUNC_MUST("contain vertices"));
            }),
            wd.ensure(function () {
                for (var _i = 0, _a = this._faces; _i < _a.length; _i++) {
                    var face = _a[_i];
                    wd.assert(face.faceNormal instanceof wd.Vector3, wd.Log.info.FUNC_SHOULD_NOT("faceNormal", "be null"));
                }
            })
        ], GeometryData.prototype, "computeFaceNormals", null);
        __decorate([
            wd.virtual
        ], GeometryData.prototype, "onChangeFace", null);
        return GeometryData;
    }());
    wd.GeometryData = GeometryData;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var CommonGeometryData = (function (_super) {
        __extends(CommonGeometryData, _super);
        function CommonGeometryData() {
            _super.apply(this, arguments);
        }
        CommonGeometryData.create = function (geometry) {
            var obj = new this(geometry);
            return obj;
        };
        return CommonGeometryData;
    }(wd.GeometryData));
    wd.CommonGeometryData = CommonGeometryData;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var MorphGeometryData = (function (_super) {
        __extends(MorphGeometryData, _super);
        function MorphGeometryData() {
            _super.apply(this, arguments);
            this._morphTargets = null;
            this._morphNormalCache = null;
            this._morphNormalDirty = true;
        }
        MorphGeometryData.create = function (geometry) {
            var obj = new this(geometry);
            return obj;
        };
        Object.defineProperty(MorphGeometryData.prototype, "morphNormals", {
            get: function () {
                var geometry = this.geometry;
                this._morphNormalDirty = false;
                if (geometry.isSmoothShading()) {
                    if (!this.hasMorphVertexNormals()) {
                        this.computeMorphNormals();
                    }
                    return geometry.morphVertexNormals;
                }
                if (!this.hasMorphFaceNormals()) {
                    this.computeMorphNormals();
                }
                return geometry.morphFaceNormals;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MorphGeometryData.prototype, "morphTargets", {
            get: function () {
                return this._morphTargets;
            },
            set: function (morphTargets) {
                this._morphTargets = morphTargets;
                this._morphNormalDirty = true;
            },
            enumerable: true,
            configurable: true
        });
        MorphGeometryData.prototype.computeMorphNormals = function () {
            var geometry = this.geometry, self = this;
            this._morphTargets.forEach(function (frames, animName) {
                var faceNormalList = wdCb.Collection.create(), vertexNormalList = wdCb.Collection.create();
                frames.forEach(function (vertices) {
                    var tempGeometryData = MorphGeometryData.create(geometry), faceNormalsOfEachFrame = null, vertexNormalsOfEachFrame = null;
                    tempGeometryData.vertices = vertices;
                    tempGeometryData.faces = self._copyFaces(geometry.faces);
                    tempGeometryData.computeFaceNormals();
                    tempGeometryData.computeVertexNormals();
                    _a = self._getMorphNormals(tempGeometryData), faceNormalsOfEachFrame = _a[0], vertexNormalsOfEachFrame = _a[1];
                    faceNormalList.addChild(faceNormalsOfEachFrame);
                    vertexNormalList.addChild(vertexNormalsOfEachFrame);
                    var _a;
                });
                geometry.morphFaceNormals.addChild(animName, faceNormalList);
                geometry.morphVertexNormals.addChild(animName, vertexNormalList);
            });
        };
        MorphGeometryData.prototype.hasMorphFaceNormals = function () {
            return this.geometry.morphFaceNormals.getCount() > 0;
        };
        MorphGeometryData.prototype.hasMorphVertexNormals = function () {
            return this.geometry.morphVertexNormals.getCount() > 0;
        };
        MorphGeometryData.prototype.onChangeFace = function () {
            this._morphNormalDirty = true;
        };
        MorphGeometryData.prototype._copyFaces = function (faces) {
            var copyFaces = [];
            for (var _i = 0, faces_1 = faces; _i < faces_1.length; _i++) {
                var face = faces_1[_i];
                copyFaces.push(face.copy());
            }
            return copyFaces;
        };
        MorphGeometryData.prototype._getMorphNormals = function (geometryData) {
            return [geometryData.normalsFromFaceNormal, geometryData.normalsFromVertexNormals];
        };
        __decorate([
            wd.cacheGetter(function () {
                return !this._morphNormalDirty && this._morphNormalCache;
            }, function () {
                return this._morphNormalCache;
            }, function (result) {
                this._morphNormalCache = result;
            })
        ], MorphGeometryData.prototype, "morphNormals", null);
        return MorphGeometryData;
    }(wd.GeometryData));
    wd.MorphGeometryData = MorphGeometryData;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var BufferContainer = (function () {
        function BufferContainer(entityObject) {
            this.geometryData = null;
            this.entityObject = null;
            this.container = wdCb.Hash.create();
            this._colorBuffer = null;
            this._texCoordBuffer = null;
            this._tangentBuffer = null;
            this._indiceBuffer = null;
            this.entityObject = entityObject;
        }
        BufferContainer.prototype.init = function () {
            var self = this;
            wd.EventManager.on(this.entityObject, wd.EEngineEvent.MATERIAL_CHANGE, function () {
                self.removeCache(wd.EBufferDataType.COLOR);
            });
        };
        BufferContainer.prototype.removeCache = function (type) {
            this.container.removeChild(type);
        };
        BufferContainer.prototype.getChild = function (type) {
            var result = null;
            switch (type) {
                case wd.EBufferDataType.VERTICE:
                    result = this.getVertice(type);
                    break;
                case wd.EBufferDataType.NORMAL:
                    result = this.getNormal(type);
                    break;
                case wd.EBufferDataType.TANGENT:
                    result = this._getTangent(type);
                    break;
                case wd.EBufferDataType.COLOR:
                    result = this._getColor(type);
                    break;
                case wd.EBufferDataType.INDICE:
                    result = this._getIndice(type);
                    break;
                case wd.EBufferDataType.TEXCOORD:
                    result = this._getTexCoord(type);
                    break;
                default:
                    wdCb.Log.error(true, wdCb.Log.info.FUNC_UNKNOW("EBufferDataType: " + type));
                    break;
            }
            return result;
        };
        BufferContainer.prototype.hasChild = function (type) {
            var data = this.geometryData[wd.BufferDataTable.getGeometryDataName(type)];
            return !!data && data.length > 0;
        };
        BufferContainer.prototype.dispose = function () {
            this.container.forEach(function (buffer) {
                buffer.dispose();
            });
        };
        BufferContainer.prototype.createBufferOnlyOnce = function (bufferAttriName, bufferClass) {
            if (this[bufferAttriName]) {
                return;
            }
            this[bufferAttriName] = bufferClass.create();
        };
        BufferContainer.prototype._getTangent = function (type) {
            var geometryData = null;
            this.createBufferOnlyOnce("_tangentBuffer", wd.ArrayBuffer);
            geometryData = this.geometryData[wd.BufferDataTable.getGeometryDataName(type)];
            this._tangentBuffer.resetData(new Float32Array(geometryData), 3, wd.EBufferType.FLOAT);
            return this._tangentBuffer;
        };
        BufferContainer.prototype._getColor = function (type) {
            var geometryData = null;
            this.createBufferOnlyOnce("_colorBuffer", wd.ArrayBuffer);
            geometryData = this.geometryData[wd.BufferDataTable.getGeometryDataName(type)];
            this._colorBuffer.resetData(new Float32Array(geometryData), 3, wd.EBufferType.FLOAT);
            return this._colorBuffer;
        };
        BufferContainer.prototype._getIndice = function (type) {
            var geometryData = null;
            this.createBufferOnlyOnce("_indiceBuffer", wd.ElementBuffer);
            geometryData = this.geometryData[wd.BufferDataTable.getGeometryDataName(type)];
            this._indiceBuffer.resetData(new Uint16Array(geometryData), wd.EBufferType.UNSIGNED_SHORT);
            return this._indiceBuffer;
        };
        BufferContainer.prototype._getTexCoord = function (type) {
            var geometryData = null;
            this.createBufferOnlyOnce("_texCoordBuffer", wd.ArrayBuffer);
            geometryData = this.geometryData[wd.BufferDataTable.getGeometryDataName(type)];
            this._texCoordBuffer.resetData(new Float32Array(geometryData), 2, wd.EBufferType.FLOAT);
            return this._texCoordBuffer;
        };
        BufferContainer.prototype._needReCalcuteTangent = function (type) {
            return this.geometryData.isTangentDirty && type === wd.EBufferDataType.TANGENT;
        };
        __decorate([
            wd.cache(function (type) {
                return this.container.hasChild(type) && !this._needReCalcuteTangent(type);
            }, function (type) {
                return this.container.getChild(type);
            }, function (result, type) {
                this.container.addChild(type, result);
            })
        ], BufferContainer.prototype, "_getTangent", null);
        __decorate([
            wd.cache(function (type) {
                return this.container.hasChild(type);
            }, function (type) {
                return this.container.getChild(type);
            }, function (result, type) {
                this.container.addChild(type, result);
            })
        ], BufferContainer.prototype, "_getColor", null);
        __decorate([
            wd.cache(function (type) {
                return this.container.hasChild(type);
            }, function (type) {
                return this.container.getChild(type);
            }, function (result, type) {
                this.container.addChild(type, result);
            })
        ], BufferContainer.prototype, "_getIndice", null);
        __decorate([
            wd.cache(function (type) {
                return this.container.hasChild(type);
            }, function (type) {
                return this.container.getChild(type);
            }, function (result, type) {
                this.container.addChild(type, result);
            })
        ], BufferContainer.prototype, "_getTexCoord", null);
        return BufferContainer;
    }());
    wd.BufferContainer = BufferContainer;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var CommonBufferContainer = (function (_super) {
        __extends(CommonBufferContainer, _super);
        function CommonBufferContainer() {
            _super.apply(this, arguments);
            this._verticeBuffer = null;
            this._normalBuffer = null;
        }
        CommonBufferContainer.create = function (entityObject) {
            var obj = new this(entityObject);
            return obj;
        };
        CommonBufferContainer.prototype.getVertice = function (type) {
            var geometryData = this.geometryData[wd.BufferDataTable.getGeometryDataName(type)];
            this.createBufferOnlyOnce("_verticeBuffer", wd.ArrayBuffer);
            this._verticeBuffer.resetData(new Float32Array(geometryData), 3, wd.EBufferType.FLOAT);
            return this._verticeBuffer;
        };
        CommonBufferContainer.prototype.getNormal = function (type) {
            var geometryData = this.geometryData[wd.BufferDataTable.getGeometryDataName(type)];
            this.createBufferOnlyOnce("_normalBuffer", wd.ArrayBuffer);
            this._normalBuffer.resetData(new Float32Array(geometryData), 3, wd.EBufferType.FLOAT);
            return this._normalBuffer;
        };
        __decorate([
            wd.cache(function (type) {
                return this.container.hasChild(type);
            }, function (type) {
                return this.container.getChild(type);
            }, function (result, type) {
                this.container.addChild(type, result);
            })
        ], CommonBufferContainer.prototype, "getVertice", null);
        __decorate([
            wd.cache(function (type) {
                return this.container.hasChild(type);
            }, function (type) {
                return this.container.getChild(type);
            }, function (result, type) {
                this.container.addChild(type, result);
            })
        ], CommonBufferContainer.prototype, "getNormal", null);
        return CommonBufferContainer;
    }(wd.BufferContainer));
    wd.CommonBufferContainer = CommonBufferContainer;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var MorphBufferContainer = (function (_super) {
        __extends(MorphBufferContainer, _super);
        function MorphBufferContainer(entityObject, animation) {
            _super.call(this, entityObject);
            this._animation = null;
            this._isCacheChangeFlag = {};
            this._isCacheChangeInLastLoop = {};
            this._currentVerticeBuffer = null;
            this._nextVerticeBuffer = null;
            this._currentNormalBuffer = null;
            this._nextNormalBuffer = null;
            this._animation = animation;
        }
        MorphBufferContainer.create = function (entityObject, animation) {
            var obj = new this(entityObject, animation);
            return obj;
        };
        MorphBufferContainer.prototype.getVertice = function (type) {
            return this._getMorphData(type, this.geometryData.morphTargets);
        };
        MorphBufferContainer.prototype.getNormal = function (type) {
            return this._getMorphData(type, this.geometryData.morphNormals);
        };
        MorphBufferContainer.prototype._getMorphData = function (type, morphDataTargets) {
            var cacheData = null, frames = null, result = null;
            if (this._isNotPlayAnimation()) {
                return this._getStaticData(type);
            }
            frames = morphDataTargets.getChild(this._animation.currentAnimName);
            wdCb.Log.error(!frames, wdCb.Log.info.FUNC_SHOULD("\"" + this._animation.currentAnimName + "\" animation", "contain frame data"));
            cacheData = this.container.getChild(type);
            if (!cacheData) {
                var currentBuffer = this._getCurrentBuffer(type), nextBuffer = this._getNextBuffer(type);
                currentBuffer.resetData(new Float32Array(frames.getChild(this._animation.currentFrame)), 3, wd.EBufferType.FLOAT);
                nextBuffer.resetData(new Float32Array(frames.getChild(this._animation.nextFrame)), 3, wd.EBufferType.FLOAT);
                result = [currentBuffer, nextBuffer];
                this.container.addChild(type, result);
                this._isCacheChangeInLastLoop[type] = false;
            }
            else {
                if (this._animation.isFrameChange && (this._isCacheChangeInLastLoop[type] || this._isCacheNotChange(type))) {
                    var currentBuffer = cacheData[0], nextBuffer = cacheData[1], newCurrentBuffer = null, newNextBuffer = null;
                    newCurrentBuffer = nextBuffer;
                    newNextBuffer = currentBuffer.resetData(new Float32Array(frames.getChild(this._animation.nextFrame)));
                    result = [newCurrentBuffer, newNextBuffer];
                    this.container.addChild(type, result);
                    this._isCacheChangeFlag[type] = true;
                    this._isCacheChangeInLastLoop[type] = true;
                }
                else {
                    this._isCacheChangeFlag[type] = false;
                    this._isCacheChangeInLastLoop[type] = false;
                    result = cacheData;
                }
            }
            return result;
        };
        MorphBufferContainer.prototype._getCurrentBuffer = function (type) {
            if (type === wd.EBufferDataType.VERTICE) {
                this.createBufferOnlyOnce("_currentVerticeBuffer", wd.ArrayBuffer);
                return this._currentVerticeBuffer;
            }
            this.createBufferOnlyOnce("_currentNormalBuffer", wd.ArrayBuffer);
            return this._currentNormalBuffer;
        };
        MorphBufferContainer.prototype._getNextBuffer = function (type) {
            if (type === wd.EBufferDataType.VERTICE) {
                this.createBufferOnlyOnce("_nextVerticeBuffer", wd.ArrayBuffer);
                return this._nextVerticeBuffer;
            }
            this.createBufferOnlyOnce("_nextNormalBuffer", wd.ArrayBuffer);
            return this._nextNormalBuffer;
        };
        MorphBufferContainer.prototype._isCacheNotChange = function (type) {
            return !this._isCacheChangeFlag[type];
        };
        MorphBufferContainer.prototype._isNotPlayAnimation = function () {
            return this._animation.currentAnimName === null;
        };
        MorphBufferContainer.prototype._getStaticData = function (type) {
            var data = null, result = null;
            switch (type) {
                case wd.EBufferDataType.VERTICE:
                    data = this.geometryData.vertices;
                    break;
                case wd.EBufferDataType.NORMAL:
                    data = this.geometryData.normals;
                    break;
                default:
                    wd.Log.error(true, wd.Log.info.FUNC_SHOULD("type", "be EBufferDataType.VERTICE or EBufferDataType.NORMAL"));
                    break;
            }
            this._animation.interpolation = 0;
            result = [
                this._getCurrentBuffer(type).resetData(new Float32Array(data), 3, wd.EBufferType.FLOAT),
                this._getNextBuffer(type).resetData(new Float32Array(data), 3, wd.EBufferType.FLOAT)
            ];
            return result;
        };
        MorphBufferContainer.prototype._getStaticDataCacheData = function (type) {
            return "static_" + type;
        };
        __decorate([
            wd.require(function (type) {
                wd.assert(this.geometryData.morphTargets && this.geometryData.morphTargets.getCount() > 0, wd.Log.info.FUNC_SHOULD("set morphTargets"));
            })
        ], MorphBufferContainer.prototype, "getVertice", null);
        __decorate([
            wd.require(function (type) {
                wd.assert(this.geometryData.morphTargets && this.geometryData.morphTargets.getCount() > 0, wd.Log.info.FUNC_SHOULD("set morphTargets"));
            })
        ], MorphBufferContainer.prototype, "getNormal", null);
        __decorate([
            wd.require(function (type) {
                wd.assert(type === wd.EBufferDataType.VERTICE || type === wd.EBufferDataType.NORMAL, wd.Log.info.FUNC_SHOULD("type", "be EBufferDataType.VERTICE or EBufferDataType.NORMAL"));
            })
        ], MorphBufferContainer.prototype, "_getCurrentBuffer", null);
        __decorate([
            wd.require(function (type) {
                wd.assert(type === wd.EBufferDataType.VERTICE || type === wd.EBufferDataType.NORMAL, wd.Log.info.FUNC_SHOULD("type", "be EBufferDataType.VERTICE or EBufferDataType.NORMAL"));
            })
        ], MorphBufferContainer.prototype, "_getNextBuffer", null);
        __decorate([
            wd.cache(function (type) {
                return this.container.hasChild(this._getStaticDataCacheData(type));
            }, function (type) {
                return this.container.getChild(this._getStaticDataCacheData(type));
            }, function (result, type) {
                this.container.addChild(this._getStaticDataCacheData(type), result);
            })
        ], MorphBufferContainer.prototype, "_getStaticData", null);
        return MorphBufferContainer;
    }(wd.BufferContainer));
    wd.MorphBufferContainer = MorphBufferContainer;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var Camera = (function () {
        function Camera() {
            this._worldToCameraMatrix = null;
            this._near = null;
            this._far = null;
            this.pMatrix = wd.Matrix4.create();
            this.entityObject = null;
            this.dirty = false;
        }
        Object.defineProperty(Camera.prototype, "cameraToWorldMatrix", {
            get: function () {
                return this.entityObject.transform.localToWorldMatrix.copy();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Camera.prototype, "worldToCameraMatrix", {
            get: function () {
                if (this._worldToCameraMatrix) {
                    return this._worldToCameraMatrix;
                }
                return this.cameraToWorldMatrix.invert();
            },
            set: function (matrix) {
                this._worldToCameraMatrix = matrix;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Camera.prototype, "near", {
            get: function () {
                return this._near;
            },
            set: function (near) {
                this._near = near;
                this.dirty = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Camera.prototype, "far", {
            get: function () {
                return this._far;
            },
            set: function (far) {
                this._far = far;
                this.dirty = true;
            },
            enumerable: true,
            configurable: true
        });
        Camera.prototype.init = function () {
            if (this.dirty) {
                this.updateProjectionMatrix();
                this.dirty = false;
            }
        };
        Camera.prototype.dispose = function () {
        };
        Camera.prototype.update = function (elapsedTime) {
            if (this.dirty) {
                this.updateProjectionMatrix();
                this.dirty = false;
            }
        };
        Camera.prototype.getInvViewProjMat = function () {
            return this.pMatrix.copy().multiply(this.worldToCameraMatrix).invert();
        };
        __decorate([
            wd.requireGetter(function () {
                wd.assert(this.entityObject, wd.Log.info.FUNC_MUST_DEFINE("entityObject"));
            })
        ], Camera.prototype, "cameraToWorldMatrix", null);
        __decorate([
            wd.virtual
        ], Camera.prototype, "init", null);
        __decorate([
            wd.virtual
        ], Camera.prototype, "dispose", null);
        return Camera;
    }());
    wd.Camera = Camera;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var OrthographicCamera = (function (_super) {
        __extends(OrthographicCamera, _super);
        function OrthographicCamera() {
            _super.apply(this, arguments);
            this._left = null;
            this._right = null;
            this._bottom = null;
            this._top = null;
        }
        OrthographicCamera.create = function () {
            var obj = new this();
            return obj;
        };
        Object.defineProperty(OrthographicCamera.prototype, "left", {
            get: function () {
                return this._left;
            },
            set: function (left) {
                this._left = left;
                this.dirty = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(OrthographicCamera.prototype, "right", {
            get: function () {
                return this._right;
            },
            set: function (right) {
                this._right = right;
                this.dirty = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(OrthographicCamera.prototype, "bottom", {
            get: function () {
                return this._bottom;
            },
            set: function (bottom) {
                this._bottom = bottom;
                this.dirty = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(OrthographicCamera.prototype, "top", {
            get: function () {
                return this._top;
            },
            set: function (top) {
                this._top = top;
                this.dirty = true;
            },
            enumerable: true,
            configurable: true
        });
        OrthographicCamera.prototype.convertScreenToWorld = function (screenX, screenY, distanceFromCamera) {
            var device = wd.DeviceManager.getInstance(), width = device.view.width, height = device.view.height, normalizedDeviceCoordinate = wd.Vector3.create(2 * screenX / width - 1, (height - screenY) / height * 2 - 1, (distanceFromCamera - this.far) / (this.far - this.near) * 2 + 1);
            return this.getInvViewProjMat().multiplyPoint(normalizedDeviceCoordinate);
        };
        OrthographicCamera.prototype.updateProjectionMatrix = function () {
            this.pMatrix.setOrtho(this._left, this._right, this._bottom, this._top, this.near, this.far);
        };
        return OrthographicCamera;
    }(wd.Camera));
    wd.OrthographicCamera = OrthographicCamera;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var PerspectiveCamera = (function (_super) {
        __extends(PerspectiveCamera, _super);
        function PerspectiveCamera() {
            _super.apply(this, arguments);
            this._fovy = null;
            this._aspect = null;
        }
        PerspectiveCamera.create = function () {
            var obj = new this();
            return obj;
        };
        Object.defineProperty(PerspectiveCamera.prototype, "fovy", {
            get: function () {
                return this._fovy;
            },
            set: function (fovy) {
                this._fovy = fovy;
                this.dirty = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PerspectiveCamera.prototype, "aspect", {
            get: function () {
                return this._aspect;
            },
            set: function (aspect) {
                this._aspect = aspect;
                this.dirty = true;
            },
            enumerable: true,
            configurable: true
        });
        PerspectiveCamera.prototype.zoomIn = function (speed, min) {
            if (min === void 0) { min = 1; }
            this.fovy = Math.max(this.fovy - speed, min);
        };
        PerspectiveCamera.prototype.zoomOut = function (speed, max) {
            if (max === void 0) { max = 179; }
            this.fovy = Math.min(this.fovy + speed, max);
        };
        PerspectiveCamera.prototype.convertScreenToWorld = function (screenX, screenY, distanceFromCamera) {
            var device = wd.DeviceManager.getInstance(), width = device.view.width, height = device.view.height, normalizedDeviceCoordinate = wd.Vector3.create(2 * screenX / width - 1, 1 - 2 * screenY / height, 1), invViewProjMat = this.getInvViewProjMat(), point = null, w = null;
            point = invViewProjMat.multiplyPoint(normalizedDeviceCoordinate);
            w = normalizedDeviceCoordinate.x * invViewProjMat.values[3] +
                normalizedDeviceCoordinate.y * invViewProjMat.values[7] +
                normalizedDeviceCoordinate.z * invViewProjMat.values[11] +
                invViewProjMat.values[15];
            point.scale(1 / w);
            return wd.Vector3.create().lerp(this.entityObject.transform.position, point, distanceFromCamera / this.far);
        };
        PerspectiveCamera.prototype.updateProjectionMatrix = function () {
            this.pMatrix.setPerspective(this._fovy, this._aspect, this.near, this.far);
        };
        return PerspectiveCamera;
    }(wd.Camera));
    wd.PerspectiveCamera = PerspectiveCamera;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var CameraController = (function (_super) {
        __extends(CameraController, _super);
        function CameraController(cameraComponent) {
            _super.call(this);
            this.camera = null;
            this.camera = cameraComponent;
        }
        Object.defineProperty(CameraController.prototype, "cameraToWorldMatrix", {
            get: function () {
                return this.camera.cameraToWorldMatrix;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CameraController.prototype, "worldToCameraMatrix", {
            get: function () {
                return this.camera.worldToCameraMatrix;
            },
            set: function (matrix) {
                this.camera.worldToCameraMatrix = matrix;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CameraController.prototype, "pMatrix", {
            get: function () {
                return this.camera.pMatrix;
            },
            set: function (pMatrix) {
                this.camera.pMatrix = pMatrix;
            },
            enumerable: true,
            configurable: true
        });
        CameraController.prototype.init = function () {
            this.camera.entityObject = this.entityObject;
            this.camera.init();
        };
        CameraController.prototype.update = function (elapsedTime) {
            this.camera.update(elapsedTime);
        };
        CameraController.prototype.dispose = function () {
            this.camera.dispose();
        };
        CameraController.prototype.isIntersectWithRay = function (entityObject, screenX, screenY) {
            var shape = null;
            if (!entityObject.hasComponent(wd.Collider)) {
                return false;
            }
            shape = entityObject.getComponent(wd.Collider).shape;
            return shape.isIntersectWithRay(this.createRay(screenX, screenY));
        };
        CameraController.prototype.createRay = function (screenX, screenY) {
            var from = this.convertScreenToWorld(screenX, screenY, this.camera.near), to = this.convertScreenToWorld(screenX, screenY, this.camera.far);
            return wd.Ray.create(from, to.sub(from));
        };
        CameraController.prototype.convertScreenToWorld = function (screenX, screenY, distanceFromCamera) {
            return this.camera.convertScreenToWorld(screenX, screenY, distanceFromCamera);
        };
        CameraController.prototype.getPlanes = function () {
            var frustumPlanes = [], transform = this.worldToCameraMatrix.applyMatrix(this.pMatrix);
            for (var index = 0; index < 6; index++) {
                frustumPlanes.push(wd.Plane.create(0, 0, 0, 0));
            }
            this._setPlanes(transform, frustumPlanes);
            return frustumPlanes;
        };
        CameraController.prototype._setPlanes = function (transform, frustumPlanes) {
            frustumPlanes[0].normal.x = transform.values[3] + transform.values[2];
            frustumPlanes[0].normal.y = transform.values[7] + transform.values[6];
            frustumPlanes[0].normal.z = transform.values[11] + transform.values[10];
            frustumPlanes[0].d = transform.values[15] + transform.values[14];
            frustumPlanes[0].normalize();
            frustumPlanes[1].normal.x = transform.values[3] - transform.values[2];
            frustumPlanes[1].normal.y = transform.values[7] - transform.values[6];
            frustumPlanes[1].normal.z = transform.values[11] - transform.values[10];
            frustumPlanes[1].d = transform.values[15] - transform.values[14];
            frustumPlanes[1].normalize();
            frustumPlanes[2].normal.x = transform.values[3] + transform.values[0];
            frustumPlanes[2].normal.y = transform.values[7] + transform.values[4];
            frustumPlanes[2].normal.z = transform.values[11] + transform.values[8];
            frustumPlanes[2].d = transform.values[15] + transform.values[12];
            frustumPlanes[2].normalize();
            frustumPlanes[3].normal.x = transform.values[3] - transform.values[0];
            frustumPlanes[3].normal.y = transform.values[7] - transform.values[4];
            frustumPlanes[3].normal.z = transform.values[11] - transform.values[8];
            frustumPlanes[3].d = transform.values[15] - transform.values[12];
            frustumPlanes[3].normalize();
            frustumPlanes[4].normal.x = transform.values[3] - transform.values[1];
            frustumPlanes[4].normal.y = transform.values[7] - transform.values[5];
            frustumPlanes[4].normal.z = transform.values[11] - transform.values[9];
            frustumPlanes[4].d = transform.values[15] - transform.values[13];
            frustumPlanes[4].normalize();
            frustumPlanes[5].normal.x = transform.values[3] + transform.values[1];
            frustumPlanes[5].normal.y = transform.values[7] + transform.values[5];
            frustumPlanes[5].normal.z = transform.values[11] + transform.values[9];
            frustumPlanes[5].d = transform.values[15] + transform.values[13];
            frustumPlanes[5].normalize();
        };
        return CameraController;
    }(wd.Component));
    wd.CameraController = CameraController;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var BasicCameraController = (function (_super) {
        __extends(BasicCameraController, _super);
        function BasicCameraController() {
            _super.apply(this, arguments);
        }
        BasicCameraController.create = function (cameraComponent) {
            var obj = new this(cameraComponent);
            return obj;
        };
        return BasicCameraController;
    }(wd.CameraController));
    wd.BasicCameraController = BasicCameraController;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var FlyCameraController = (function (_super) {
        __extends(FlyCameraController, _super);
        function FlyCameraController(cameraComponent) {
            _super.call(this, cameraComponent);
            this._control = null;
            if (cameraComponent instanceof wd.PerspectiveCamera) {
                this._control = wd.FlyPerspectiveCameraControl.create(cameraComponent);
            }
            else {
                this._control = wd.FlyOrthographicCameraControl.create(cameraComponent);
            }
        }
        FlyCameraController.create = function (cameraComponent) {
            var obj = new this(cameraComponent);
            return obj;
        };
        FlyCameraController.prototype.init = function () {
            _super.prototype.init.call(this);
            this._control.init(this.entityObject);
        };
        FlyCameraController.prototype.update = function (elapsedTime) {
            _super.prototype.update.call(this, elapsedTime);
            this._control.update(elapsedTime);
        };
        FlyCameraController.prototype.dispose = function () {
            _super.prototype.dispose.call(this);
            this._control.dispose();
        };
        return FlyCameraController;
    }(wd.CameraController));
    wd.FlyCameraController = FlyCameraController;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var FlyCameraControl = (function () {
        function FlyCameraControl(cameraComponent) {
            this.moveSpeed = 1.2;
            this.rotateSpeed = 100;
            this.cameraComponent = null;
            this._rotateX = 0;
            this._rotateY = 0;
            this._isRotate = false;
            this._mouseDragSubscription = null;
            this._keydownSubscription = null;
            this._gameObject = null;
            this.cameraComponent = cameraComponent;
        }
        FlyCameraControl.prototype.init = function (entityObject) {
            var eulerAngles = entityObject.transform.eulerAngles;
            this._rotateX = eulerAngles.x;
            this._rotateY = eulerAngles.y;
            this._gameObject = entityObject;
            this._bindCanvasEvent();
        };
        FlyCameraControl.prototype.update = function (elapsedTime) {
            if (!this._isRotate) {
                return;
            }
            this._isRotate = false;
            this._gameObject.transform.eulerAngles = wd.Vector3.create(this._rotateX, this._rotateY, 0);
        };
        FlyCameraControl.prototype.dispose = function () {
            this._removeEvent();
        };
        FlyCameraControl.prototype._move = function (event) {
            var speed = this.moveSpeed, entityObject = this._gameObject, keyState = event.keyState;
            if (keyState["a"] || keyState["left"]) {
                entityObject.transform.translateLocal(wd.Vector3.create(-speed, 0, 0));
            }
            else if (keyState["d"] || keyState["right"]) {
                entityObject.transform.translateLocal(wd.Vector3.create(speed, 0, 0));
            }
            else if (keyState["w"] || keyState["up"]) {
                entityObject.transform.translateLocal(wd.Vector3.create(0, 0, -speed));
            }
            else if (keyState["s"] || keyState["down"]) {
                entityObject.transform.translateLocal(wd.Vector3.create(0, 0, speed));
            }
        };
        FlyCameraControl.prototype._bindCanvasEvent = function () {
            var self = this, rotateSpeed = this.rotateSpeed, mousedrag = wd.EventManager.fromEvent(wd.Director.getInstance().scene, wd.EEngineEvent.MOUSE_DRAG), keydown = wd.EventManager.fromEvent(wd.EEventName.KEYDOWN), canvas = wd.Director.getInstance().view;
            this._mouseDragSubscription = mousedrag
                .map(function (e) {
                var movementDelta = e.userData.movementDelta, dx = null, dy = null, factor = rotateSpeed / canvas.height;
                dx = factor * movementDelta.x;
                dy = factor * movementDelta.y;
                self._isRotate = true;
                return {
                    dx: dx,
                    dy: dy
                };
            })
                .subscribe(function (pos) {
                self._rotateY -= pos.dx;
                self._rotateX -= pos.dy;
            });
            this._keydownSubscription = keydown.subscribe(function (e) {
                self._move(e);
                self.zoom(e);
            });
        };
        FlyCameraControl.prototype._removeEvent = function () {
            this._mouseDragSubscription.dispose();
            this._keydownSubscription.dispose();
        };
        return FlyCameraControl;
    }());
    wd.FlyCameraControl = FlyCameraControl;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var FlyPerspectiveCameraControl = (function (_super) {
        __extends(FlyPerspectiveCameraControl, _super);
        function FlyPerspectiveCameraControl() {
            _super.apply(this, arguments);
            this.zoomSpeed = 10;
        }
        FlyPerspectiveCameraControl.create = function (cameraComponent) {
            var obj = new this(cameraComponent);
            return obj;
        };
        FlyPerspectiveCameraControl.prototype.zoom = function (event) {
            var speed = this.zoomSpeed, keyState = event.keyState;
            if (keyState["g"]) {
                this.cameraComponent.zoomIn(speed);
            }
            else if (keyState["h"]) {
                this.cameraComponent.zoomOut(speed);
            }
        };
        return FlyPerspectiveCameraControl;
    }(wd.FlyCameraControl));
    wd.FlyPerspectiveCameraControl = FlyPerspectiveCameraControl;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var FlyOrthographicCameraControl = (function (_super) {
        __extends(FlyOrthographicCameraControl, _super);
        function FlyOrthographicCameraControl() {
            _super.apply(this, arguments);
        }
        FlyOrthographicCameraControl.create = function (cameraComponent) {
            var obj = new this(cameraComponent);
            return obj;
        };
        FlyOrthographicCameraControl.prototype.zoom = function (event) {
        };
        return FlyOrthographicCameraControl;
    }(wd.FlyCameraControl));
    wd.FlyOrthographicCameraControl = FlyOrthographicCameraControl;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var ArcballCameraController = (function (_super) {
        __extends(ArcballCameraController, _super);
        function ArcballCameraController() {
            _super.apply(this, arguments);
            this.moveSpeedX = 1;
            this.moveSpeedY = 1;
            this.rotateSpeed = 1;
            this.distance = 10;
            this.phi = Math.PI / 2;
            this.theta = Math.PI / 2;
            this.target = wd.Vector3.create(0, 0, 0);
            this.thetaMargin = 0.05;
            this.minDistance = 0.05;
            this._isChange = true;
            this._mouseDragSubscription = null;
            this._mouseWheelSubscription = null;
            this._keydownSubscription = null;
        }
        ArcballCameraController.create = function (cameraComponent) {
            var obj = new this(cameraComponent);
            return obj;
        };
        ArcballCameraController.prototype.init = function () {
            _super.prototype.init.call(this);
            this._bindCanvasEvent();
        };
        ArcballCameraController.prototype.update = function (elapsedTime) {
            var x = null, y = null, z = null;
            _super.prototype.update.call(this, elapsedTime);
            if (!this._isChange) {
                return;
            }
            this._isChange = false;
            x = ((this.distance) * Math.cos(this.phi) * Math.sin(this.theta) + this.target.x);
            z = ((this.distance) * Math.sin(this.phi) * Math.sin(this.theta) + this.target.z);
            y = ((this.distance) * Math.cos(this.theta) + this.target.y);
            this.entityObject.transform.position = wd.Vector3.create(x, y, z);
            this.entityObject.transform.lookAt(this.target);
        };
        ArcballCameraController.prototype.dispose = function () {
            _super.prototype.dispose.call(this);
            this._removeEvent();
        };
        ArcballCameraController.prototype._bindCanvasEvent = function () {
            var self = this, mousewheel = wd.EventManager.fromEvent(wd.Director.getInstance().scene, wd.EEngineEvent.MOUSE_WHEEL), mousedrag = wd.EventManager.fromEvent(wd.Director.getInstance().scene, wd.EEngineEvent.MOUSE_DRAG), keydown = wd.EventManager.fromEvent(wd.EEventName.KEYDOWN);
            this._mouseDragSubscription = mousedrag.subscribe(function (e) {
                self._changeOrbit(e.userData);
            });
            this._mouseWheelSubscription = mousewheel.subscribe(function (e) {
                var mouseEvent = e.userData;
                mouseEvent.preventDefault();
                self._changeDistance(mouseEvent);
            });
            this._keydownSubscription = keydown.subscribe(function (e) {
                self._changeTarget(e);
            });
        };
        ArcballCameraController.prototype._changeOrbit = function (e) {
            var movementDelta = e.movementDelta;
            this._isChange = true;
            this.phi += movementDelta.x / (100 / this.rotateSpeed);
            this.theta -= movementDelta.y / (100 / this.rotateSpeed);
            this._contrainTheta();
        };
        ArcballCameraController.prototype._changeTarget = function (e) {
            var moveSpeedX = this.moveSpeedX, moveSpeedY = this.moveSpeedY, dx = null, dy = null, keyState = e.keyState, transform = this.entityObject.transform;
            this._isChange = true;
            if (keyState["a"] || keyState["left"]) {
                dx = -moveSpeedX;
            }
            else if (keyState["d"] || keyState["right"]) {
                dx = moveSpeedX;
            }
            else if (keyState["w"] || keyState["up"]) {
                dy = moveSpeedY;
            }
            else if (keyState["s"] || keyState["down"]) {
                dy = -moveSpeedY;
            }
            this.target.add(wd.Vector3.create(transform.right.x * (dx), 0, transform.right.z * (dx)));
            this.target.add(wd.Vector3.create(transform.up.x * dy, transform.up.y * dy, 0));
        };
        ArcballCameraController.prototype._changeDistance = function (e) {
            this._isChange = true;
            this.distance -= e.wheel;
            this._contrainDistance();
        };
        ArcballCameraController.prototype._contrainDistance = function () {
            this.distance = wd.MathUtils.bigThan(this.distance, this.minDistance);
        };
        ArcballCameraController.prototype._contrainTheta = function () {
            this.theta = wd.MathUtils.clamp(this.theta, this.thetaMargin, Math.PI - this.thetaMargin);
        };
        ArcballCameraController.prototype._removeEvent = function () {
            this._mouseDragSubscription.dispose();
            this._mouseWheelSubscription.dispose();
            this._keydownSubscription.dispose();
        };
        return ArcballCameraController;
    }(wd.CameraController));
    wd.ArcballCameraController = ArcballCameraController;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var Action = (function (_super) {
        __extends(Action, _super);
        function Action() {
            _super.apply(this, arguments);
            this.p_target = null;
            this.isFinish = false;
        }
        Object.defineProperty(Action.prototype, "isStart", {
            get: function () {
                return !this.isStop;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Action.prototype, "isStop", {
            get: function () {
                return wd.Log.error(true, wd.Log.info.ABSTRACT_ATTRIBUTE);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Action.prototype, "isPause", {
            get: function () {
                return wd.Log.error(true, wd.Log.info.ABSTRACT_ATTRIBUTE);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Action.prototype, "target", {
            get: function () {
                return this.p_target;
            },
            set: function (target) {
                this.p_target = target;
            },
            enumerable: true,
            configurable: true
        });
        Action.prototype.reset = function () {
            this.isFinish = false;
        };
        Action.prototype.addToObject = function (entityObject) {
            _super.prototype.addToObject.call(this, entityObject);
            this.target = entityObject;
            entityObject.actionManager.addChild(this);
        };
        Action.prototype.removeFromObject = function (entityObject) {
            _super.prototype.removeFromObject.call(this, entityObject);
            entityObject.actionManager.removeChild(this);
        };
        Action.prototype.init = function () {
            this.start();
        };
        Action.prototype.finish = function () {
            this.isFinish = true;
            this.stop();
        };
        return Action;
    }(wd.Component));
    wd.Action = Action;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var ActionInstant = (function (_super) {
        __extends(ActionInstant, _super);
        function ActionInstant() {
            _super.apply(this, arguments);
        }
        Object.defineProperty(ActionInstant.prototype, "isStop", {
            get: function () {
                return false;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ActionInstant.prototype, "isPause", {
            get: function () {
                return false;
            },
            enumerable: true,
            configurable: true
        });
        ActionInstant.prototype.start = function () {
        };
        ActionInstant.prototype.stop = function () {
        };
        ActionInstant.prototype.pause = function () {
        };
        ActionInstant.prototype.resume = function () {
        };
        return ActionInstant;
    }(wd.Action));
    wd.ActionInstant = ActionInstant;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var CallFunc = (function (_super) {
        __extends(CallFunc, _super);
        function CallFunc(func, context, dataArr) {
            _super.call(this);
            this._context = null;
            this._callFunc = null;
            this._dataArr = null;
            this._context = context || wd.root;
            this._callFunc = func;
            this._dataArr = wdCb.Collection.create(dataArr);
        }
        CallFunc.create = function (func, context) {
            var data = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                data[_i - 2] = arguments[_i];
            }
            var dataArr = Array.prototype.slice.call(arguments, 2), action = new this(func, context, dataArr);
            return action;
        };
        CallFunc.prototype.reverse = function () {
            return this;
        };
        CallFunc.prototype.update = function (elapsedTime) {
            if (this._callFunc) {
                this._callFunc.call(this._context, this.p_target, this._dataArr);
            }
            this.finish();
        };
        CallFunc.prototype.copy = function () {
            return new CallFunc(this._context, this._callFunc, this._dataArr.copy(true).getChildren());
        };
        return CallFunc;
    }(wd.ActionInstant));
    wd.CallFunc = CallFunc;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var ActionInterval = (function (_super) {
        __extends(ActionInterval, _super);
        function ActionInterval() {
            _super.apply(this, arguments);
            this.elapsed = null;
            this.duration = null;
            this._isStop = true;
            this._isPause = false;
            this._timeController = wd.CommonTimeController.create();
        }
        Object.defineProperty(ActionInterval.prototype, "isStop", {
            get: function () {
                return this._isStop;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ActionInterval.prototype, "isPause", {
            get: function () {
                return this._isPause;
            },
            enumerable: true,
            configurable: true
        });
        ActionInterval.prototype.update = function (elapsedTime) {
            if (elapsedTime < this._timeController.startTime) {
                return;
            }
            this.elapsed = this._convertToRatio(this._timeController.computeElapseTime(elapsedTime));
            this.updateBody(elapsedTime);
            if (this.elapsed === 1) {
                this.finish();
            }
        };
        ActionInterval.prototype.start = function () {
            this._isStop = false;
            this._timeController.start();
        };
        ActionInterval.prototype.stop = function () {
            this._isStop = true;
            this._timeController.stop();
        };
        ActionInterval.prototype.reset = function () {
            _super.prototype.reset.call(this);
            this._isStop = true;
        };
        ActionInterval.prototype.pause = function () {
            this._isPause = true;
            this._timeController.pause();
        };
        ActionInterval.prototype.resume = function () {
            this._isPause = false;
            this._timeController.resume();
        };
        ActionInterval.prototype.updateBody = function (time) {
        };
        ActionInterval.prototype._convertToRatio = function (elapsed) {
            var ratio = elapsed / this.duration;
            return ratio > 1 ? 1 : ratio;
        };
        __decorate([
            wd.virtual
        ], ActionInterval.prototype, "updateBody", null);
        return ActionInterval;
    }(wd.Action));
    wd.ActionInterval = ActionInterval;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var Control = (function (_super) {
        __extends(Control, _super);
        function Control() {
            _super.apply(this, arguments);
        }
        Object.defineProperty(Control.prototype, "target", {
            set: function (target) {
                this.p_target = target;
                this.getInnerActions().forEach(function (action) {
                    action.target = target;
                });
            },
            enumerable: true,
            configurable: true
        });
        Control.prototype.init = function () {
            _super.prototype.init.call(this);
            this.iterate("init");
        };
        Control.prototype.reverse = function () {
            this.iterate("reverse");
            return this;
        };
        Control.prototype.reset = function () {
            _super.prototype.reset.call(this);
            this.iterate("reset");
            return this;
        };
        Control.prototype.iterate = function (method, argArr) {
            this.getInnerActions().forEach(function (action) {
                action[method].apply(action, argArr);
            });
        };
        return Control;
    }(wd.ActionInterval));
    wd.Control = Control;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var Sequence = (function (_super) {
        __extends(Sequence, _super);
        function Sequence(actionArr) {
            _super.call(this);
            this._actions = wdCb.Collection.create();
            this._currentAction = null;
            this._actionIndex = 0;
            this._actions.addChildren(actionArr);
        }
        Sequence.create = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var sequence = null;
            wd.Log.assert(args.length >= 2, "Sequence should has two actions at least");
            sequence = new this(args);
            sequence.initWhenCreate();
            return sequence;
        };
        Sequence.prototype.initWhenCreate = function () {
            this._currentAction = this._actions.getChild(0);
        };
        Sequence.prototype.update = function (elapsedTime) {
            if (this._actionIndex === this._actions.getCount()) {
                this.finish();
                return;
            }
            this._currentAction = this._actions.getChild(this._actionIndex);
            if (this._currentAction.isFinish) {
                this._startNextActionAndJudgeFinish();
                return;
            }
            this._currentAction.update(elapsedTime);
            if (this._currentAction.isFinish) {
                this._startNextActionAndJudgeFinish();
            }
            return null;
        };
        Sequence.prototype.copy = function () {
            var actionArr = [];
            this._actions.forEach(function (action) {
                actionArr.push(action.copy());
            });
            return Sequence.create.apply(Sequence, actionArr);
        };
        Sequence.prototype.reset = function () {
            _super.prototype.reset.call(this);
            this._actionIndex = 0;
            this._currentAction = this._actions.getChild(this._actionIndex);
            return this;
        };
        Sequence.prototype.start = function () {
            _super.prototype.start.call(this);
            this._currentAction.start();
            return this;
        };
        Sequence.prototype.stop = function () {
            _super.prototype.stop.call(this);
            this._currentAction.stop();
            return this;
        };
        Sequence.prototype.pause = function () {
            _super.prototype.pause.call(this);
            this._currentAction.pause();
            return this;
        };
        Sequence.prototype.resume = function () {
            _super.prototype.resume.call(this);
            this._currentAction.resume();
            return this;
        };
        Sequence.prototype.reverse = function () {
            this._actions = this._actions.reverse();
            _super.prototype.reverse.call(this);
            return this;
        };
        Sequence.prototype.getInnerActions = function () {
            return this._actions;
        };
        Sequence.prototype._startNextActionAndJudgeFinish = function () {
            this._actionIndex++;
            if (this._actionIndex === this._actions.getCount()) {
                this.finish();
                return;
            }
            this._actions.getChild(this._actionIndex).start();
        };
        return Sequence;
    }(wd.Control));
    wd.Sequence = Sequence;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var Spawn = (function (_super) {
        __extends(Spawn, _super);
        function Spawn(actionArr) {
            _super.call(this);
            this._actions = wdCb.Collection.create();
            this._actions.addChildren(actionArr);
        }
        Spawn.create = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var spawn = null;
            wd.Log.assert(args.length >= 2, "Sequence should has two actions at least");
            spawn = new this(args);
            return spawn;
        };
        Spawn.prototype.update = function (elapsedTime) {
            if (this._isFinish()) {
                this.finish();
                return;
            }
            this.iterate("update", [elapsedTime]);
            if (this._isFinish()) {
                this.finish();
            }
        };
        Spawn.prototype.start = function () {
            _super.prototype.start.call(this);
            this.iterate("start");
            return this;
        };
        Spawn.prototype.stop = function () {
            _super.prototype.stop.call(this);
            this.iterate("stop");
            return this;
        };
        Spawn.prototype.pause = function () {
            _super.prototype.pause.call(this);
            this.iterate("pause");
            return this;
        };
        Spawn.prototype.resume = function () {
            _super.prototype.resume.call(this);
            this.iterate("resume");
            return this;
        };
        Spawn.prototype.copy = function () {
            var actions = [];
            this._actions.forEach(function (action) {
                actions.push(action.copy());
            });
            return Spawn.create.apply(Spawn, actions);
        };
        Spawn.prototype.reset = function () {
            _super.prototype.reset.call(this);
            this.iterate("reset");
            return this;
        };
        Spawn.prototype.reverse = function () {
            this._actions = this._actions.reverse();
            _super.prototype.reverse.call(this);
            return this;
        };
        Spawn.prototype.getInnerActions = function () {
            return this._actions;
        };
        Spawn.prototype.iterate = function (method, argArr) {
            this._actions.forEach(function (action) {
                action[method].apply(action, argArr);
            });
        };
        Spawn.prototype._isFinish = function () {
            var isFinish = true;
            this._actions.forEach(function (action) {
                if (!action.isFinish) {
                    isFinish = false;
                    return wdCb.$BREAK;
                }
            });
            return isFinish;
        };
        return Spawn;
    }(wd.Control));
    wd.Spawn = Spawn;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var DelayTime = (function (_super) {
        __extends(DelayTime, _super);
        function DelayTime(delayTime) {
            _super.call(this);
            this.duration = delayTime;
        }
        DelayTime.create = function (delayTime) {
            var action = new this(delayTime);
            return action;
        };
        DelayTime.prototype.reverse = function () {
            return this;
        };
        DelayTime.prototype.copy = function () {
            return DelayTime.create(this.duration);
        };
        return DelayTime;
    }(wd.ActionInterval));
    wd.DelayTime = DelayTime;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var Repeat = (function (_super) {
        __extends(Repeat, _super);
        function Repeat(action, times) {
            _super.call(this);
            this._innerAction = null;
            this._originTimes = null;
            this._times = null;
            this._innerAction = action;
            this._times = times;
        }
        Repeat.create = function (action, times) {
            var repeat = new this(action, times);
            repeat.initWhenCreate();
            return repeat;
        };
        Repeat.prototype.initWhenCreate = function () {
            this._originTimes = this._times;
        };
        Repeat.prototype.update = function (elapsedTime) {
            if (this._times === 0) {
                this.finish();
                return;
            }
            this._innerAction.update(elapsedTime);
            if (this._innerAction.isFinish) {
                this._times -= 1;
                if (this._times !== 0) {
                    this._innerAction.reset();
                    this._innerAction.start();
                    return;
                }
                this.finish();
            }
        };
        Repeat.prototype.copy = function () {
            return Repeat.create(this._innerAction.copy(), this._times);
        };
        Repeat.prototype.reset = function () {
            _super.prototype.reset.call(this);
            this._times = this._originTimes;
            return this;
        };
        Repeat.prototype.start = function () {
            _super.prototype.start.call(this);
            this._innerAction.start();
        };
        Repeat.prototype.stop = function () {
            _super.prototype.stop.call(this);
            this._innerAction.stop();
        };
        Repeat.prototype.pause = function () {
            _super.prototype.pause.call(this);
            this._innerAction.pause();
        };
        Repeat.prototype.resume = function () {
            _super.prototype.resume.call(this);
            this._innerAction.resume();
        };
        Repeat.prototype.getInnerActions = function () {
            return wdCb.Collection.create([this._innerAction]);
        };
        return Repeat;
    }(wd.Control));
    wd.Repeat = Repeat;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var RepeatForever = (function (_super) {
        __extends(RepeatForever, _super);
        function RepeatForever(action) {
            _super.call(this);
            this._innerAction = null;
            this._innerAction = action;
        }
        RepeatForever.create = function (action) {
            var repeat = new this(action);
            return repeat;
        };
        RepeatForever.prototype.update = function (elapsedTime) {
            this._innerAction.update(elapsedTime);
            if (this._innerAction.isFinish) {
                this._innerAction.reset();
                this._innerAction.start();
            }
        };
        RepeatForever.prototype.copy = function () {
            return RepeatForever.create(this._innerAction.copy());
        };
        RepeatForever.prototype.start = function () {
            _super.prototype.start.call(this);
            this._innerAction.start();
        };
        RepeatForever.prototype.stop = function () {
            _super.prototype.stop.call(this);
            this._innerAction.stop();
        };
        RepeatForever.prototype.pause = function () {
            _super.prototype.pause.call(this);
            this._innerAction.pause();
        };
        RepeatForever.prototype.resume = function () {
            _super.prototype.resume.call(this);
            this._innerAction.resume();
        };
        RepeatForever.prototype.getInnerActions = function () {
            return wdCb.Collection.create([this._innerAction]);
        };
        return RepeatForever;
    }(wd.Control));
    wd.RepeatForever = RepeatForever;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var Tween = (function (_super) {
        __extends(Tween, _super);
        function Tween() {
            _super.apply(this, arguments);
            this._object = null;
            this._valuesStart = wdCb.Hash.create();
            this._valuesEnd = wdCb.Hash.create();
            this._easingFunction = Tween.Easing.Linear.None;
            this._interpolationFunction = Tween.Interpolation.Linear;
            this._onStartCallback = null;
            this._onStartCallbackFired = false;
            this._onUpdateCallback = null;
            this._onFinishCallback = null;
            this._onStopCallback = null;
        }
        Tween.create = function () {
            var obj = new this();
            return obj;
        };
        Tween.prototype.updateBody = function (time) {
            var self = this, easeValue = null;
            if (this._onStartCallbackFired === false) {
                if (this._onStartCallback !== null) {
                    this._onStartCallback.call(this._object.getChildren());
                }
                this._onStartCallbackFired = true;
            }
            easeValue = this._easingFunction(this.elapsed);
            this._valuesEnd.forEach(function (value, key) {
                var start = self._valuesStart.getChild(key), end = value;
                if (end instanceof Array) {
                    self._object.setValue(key, self._interpolationFunction(end, easeValue));
                }
                else {
                    if (wd.JudgeUtils.isString(end)) {
                        end = start + wd.root.parseFloat(end, 10);
                    }
                    if (wd.JudgeUtils.isNumber(end)) {
                        self._object.setValue(key, start + (end - start) * easeValue);
                    }
                }
            });
            if (this._onUpdateCallback !== null) {
                this._onUpdateCallback.call(this._object.getChildren(), easeValue);
            }
            return true;
        };
        Tween.prototype.from = function (object) {
            var self = this;
            this._object = wdCb.Hash.create(object);
            this._object.forEach(function (value, key) {
                self._valuesStart.addChild(key, wd.root.parseFloat(value, 10));
            });
            return this;
        };
        Tween.prototype.to = function (properties, duration) {
            if (duration === void 0) { duration = 1000; }
            this.duration = duration;
            this._valuesEnd = wdCb.Hash.create(properties);
            return this;
        };
        Tween.prototype.init = function () {
            var self = this;
            _super.prototype.init.call(this);
            this._valuesEnd.forEach(function (value, key) {
                if (value instanceof Array) {
                    if (value.length === 0) {
                        return;
                    }
                    self._valuesEnd.setValue(key, [self._object.getChild(key)].concat(self._valuesEnd.getChild(key)));
                }
                self._valuesStart.setValue(key, self._object.getChild(key));
                if ((self._valuesStart.getChild(key) instanceof Array) === false) {
                    self._valuesStart.setValue(key, self._valuesStart.getChild(key) * 1.0);
                }
            });
        };
        Tween.prototype.start = function () {
            _super.prototype.start.call(this);
            this._onStartCallbackFired = false;
            return this;
        };
        Tween.prototype.stop = function () {
            _super.prototype.stop.call(this);
            if (this._onStopCallback !== null) {
                this._onStopCallback.call(this._object.getChildren());
            }
            return this;
        };
        Tween.prototype.copy = function () {
            return Tween.create().from(this._valuesStart.getChildren())
                .to(this._valuesEnd.getChildren(), this.duration)
                .easing(this._easingFunction)
                .interpolation(this._interpolationFunction)
                .onStart(this._onStartCallback)
                .onStop(this._onStopCallback)
                .onFinish(this._onFinishCallback)
                .onUpdate(this._onUpdateCallback);
        };
        Tween.prototype.reverse = function () {
            var tmp = this._valuesStart;
            this._valuesStart = this._valuesEnd;
            this._valuesEnd = tmp;
        };
        Tween.prototype.easing = function (easing) {
            this._easingFunction = easing;
            return this;
        };
        Tween.prototype.interpolation = function (interpolation) {
            this._interpolationFunction = interpolation;
            return this;
        };
        Tween.prototype.onUpdate = function (callback) {
            this._onUpdateCallback = callback;
            return this;
        };
        Tween.prototype.onFinish = function (callback) {
            this._onFinishCallback = callback;
            return this;
        };
        Tween.prototype.onStart = function (callback) {
            this._onStartCallback = callback;
            return this;
        };
        Tween.prototype.onStop = function (callback) {
            this._onStopCallback = callback;
            return this;
        };
        Tween.prototype.finish = function () {
            _super.prototype.finish.call(this);
            if (this._onFinishCallback !== null) {
                this._onFinishCallback.call(this._object.getChildren());
            }
        };
        Tween.Easing = {
            Linear: {
                None: function (k) {
                    return k;
                }
            },
            Quadratic: {
                In: function (k) {
                    return k * k;
                },
                Out: function (k) {
                    return k * (2 - k);
                },
                InOut: function (k) {
                    if ((k *= 2) < 1)
                        return 0.5 * k * k;
                    return -0.5 * (--k * (k - 2) - 1);
                }
            },
            Cubic: {
                In: function (k) {
                    return k * k * k;
                },
                Out: function (k) {
                    return --k * k * k + 1;
                },
                InOut: function (k) {
                    if ((k *= 2) < 1)
                        return 0.5 * k * k * k;
                    return 0.5 * ((k -= 2) * k * k + 2);
                }
            },
            Quartic: {
                In: function (k) {
                    return k * k * k * k;
                },
                Out: function (k) {
                    return 1 - (--k * k * k * k);
                },
                InOut: function (k) {
                    if ((k *= 2) < 1)
                        return 0.5 * k * k * k * k;
                    return -0.5 * ((k -= 2) * k * k * k - 2);
                }
            },
            Quintic: {
                In: function (k) {
                    return k * k * k * k * k;
                },
                Out: function (k) {
                    return --k * k * k * k * k + 1;
                },
                InOut: function (k) {
                    if ((k *= 2) < 1)
                        return 0.5 * k * k * k * k * k;
                    return 0.5 * ((k -= 2) * k * k * k * k + 2);
                }
            },
            Sinusoidal: {
                In: function (k) {
                    return 1 - Math.cos(k * Math.PI / 2);
                },
                Out: function (k) {
                    return Math.sin(k * Math.PI / 2);
                },
                InOut: function (k) {
                    return 0.5 * (1 - Math.cos(Math.PI * k));
                }
            },
            Exponential: {
                In: function (k) {
                    return k === 0 ? 0 : Math.pow(1024, k - 1);
                },
                Out: function (k) {
                    return k === 1 ? 1 : 1 - Math.pow(2, -10 * k);
                },
                InOut: function (k) {
                    if (k === 0)
                        return 0;
                    if (k === 1)
                        return 1;
                    if ((k *= 2) < 1)
                        return 0.5 * Math.pow(1024, k - 1);
                    return 0.5 * (-Math.pow(2, -10 * (k - 1)) + 2);
                }
            },
            Circular: {
                In: function (k) {
                    return 1 - Math.sqrt(1 - k * k);
                },
                Out: function (k) {
                    return Math.sqrt(1 - (--k * k));
                },
                InOut: function (k) {
                    if ((k *= 2) < 1)
                        return -0.5 * (Math.sqrt(1 - k * k) - 1);
                    return 0.5 * (Math.sqrt(1 - (k -= 2) * k) + 1);
                }
            },
            Elastic: {
                In: function (k) {
                    var s, a = 0.1, p = 0.4;
                    if (k === 0)
                        return 0;
                    if (k === 1)
                        return 1;
                    if (!a || a < 1) {
                        a = 1;
                        s = p / 4;
                    }
                    else
                        s = p * Math.asin(1 / a) / (2 * Math.PI);
                    return -(a * Math.pow(2, 10 * (k -= 1)) * Math.sin((k - s) * (2 * Math.PI) / p));
                },
                Out: function (k) {
                    var s, a = 0.1, p = 0.4;
                    if (k === 0)
                        return 0;
                    if (k === 1)
                        return 1;
                    if (!a || a < 1) {
                        a = 1;
                        s = p / 4;
                    }
                    else
                        s = p * Math.asin(1 / a) / (2 * Math.PI);
                    return (a * Math.pow(2, -10 * k) * Math.sin((k - s) * (2 * Math.PI) / p) + 1);
                },
                InOut: function (k) {
                    var s, a = 0.1, p = 0.4;
                    if (k === 0)
                        return 0;
                    if (k === 1)
                        return 1;
                    if (!a || a < 1) {
                        a = 1;
                        s = p / 4;
                    }
                    else
                        s = p * Math.asin(1 / a) / (2 * Math.PI);
                    if ((k *= 2) < 1)
                        return -0.5 * (a * Math.pow(2, 10 * (k -= 1)) * Math.sin((k - s) * (2 * Math.PI) / p));
                    return a * Math.pow(2, -10 * (k -= 1)) * Math.sin((k - s) * (2 * Math.PI) / p) * 0.5 + 1;
                }
            },
            Back: {
                In: function (k) {
                    var s = 1.70158;
                    return k * k * ((s + 1) * k - s);
                },
                Out: function (k) {
                    var s = 1.70158;
                    return --k * k * ((s + 1) * k + s) + 1;
                },
                InOut: function (k) {
                    var s = 1.70158 * 1.525;
                    if ((k *= 2) < 1)
                        return 0.5 * (k * k * ((s + 1) * k - s));
                    return 0.5 * ((k -= 2) * k * ((s + 1) * k + s) + 2);
                }
            },
            Bounce: {
                In: function (k) {
                    return 1 - Tween.Easing.Bounce.Out(1 - k);
                },
                Out: function (k) {
                    if (k < (1 / 2.75)) {
                        return 7.5625 * k * k;
                    }
                    else if (k < (2 / 2.75)) {
                        return 7.5625 * (k -= (1.5 / 2.75)) * k + 0.75;
                    }
                    else if (k < (2.5 / 2.75)) {
                        return 7.5625 * (k -= (2.25 / 2.75)) * k + 0.9375;
                    }
                    else {
                        return 7.5625 * (k -= (2.625 / 2.75)) * k + 0.984375;
                    }
                },
                InOut: function (k) {
                    if (k < 0.5)
                        return Tween.Easing.Bounce.In(k * 2) * 0.5;
                    return Tween.Easing.Bounce.Out(k * 2 - 1) * 0.5 + 0.5;
                }
            }
        };
        Tween.Interpolation = {
            Linear: function (v, k) {
                var m = v.length - 1, f = m * k, i = Math.floor(f), fn = Tween.Interpolation.Utils.Linear;
                if (k < 0)
                    return fn(v[0], v[1], f);
                if (k > 1)
                    return fn(v[m], v[m - 1], m - f);
                return fn(v[i], v[i + 1 > m ? m : i + 1], f - i);
            },
            Bezier: function (v, k) {
                var b = 0, n = v.length - 1, pw = Math.pow, bn = Tween.Interpolation.Utils.Bernstein, i;
                for (i = 0; i <= n; i++) {
                    b += pw(1 - k, n - i) * pw(k, i) * v[i] * bn(n, i);
                }
                return b;
            },
            CatmullRom: function (v, k) {
                var m = v.length - 1, f = m * k, i = Math.floor(f), fn = Tween.Interpolation.Utils.CatmullRom;
                if (v[0] === v[m]) {
                    if (k < 0)
                        i = Math.floor(f = m * (1 + k));
                    return fn(v[(i - 1 + m) % m], v[i], v[(i + 1) % m], v[(i + 2) % m], f - i);
                }
                else {
                    if (k < 0)
                        return v[0] - (fn(v[0], v[0], v[1], v[1], -f) - v[0]);
                    if (k > 1)
                        return v[m] - (fn(v[m], v[m], v[m - 1], v[m - 1], f - m) - v[m]);
                    return fn(v[i ? i - 1 : 0], v[i], v[m < i + 1 ? m : i + 1], v[m < i + 2 ? m : i + 2], f - i);
                }
            },
            Utils: {
                Linear: function (p0, p1, t) {
                    return (p1 - p0) * t + p0;
                },
                Bernstein: function (n, i) {
                    var fc = Tween.Interpolation.Utils.Factorial;
                    return fc(n) / fc(i) / fc(n - i);
                },
                Factorial: (function () {
                    var a = [1];
                    return function (n) {
                        var s = 1, i;
                        if (a[n])
                            return a[n];
                        for (i = n; i > 1; i--)
                            s *= i;
                        return a[n] = s;
                    };
                })(),
                CatmullRom: function (p0, p1, p2, p3, t) {
                    var v0 = (p2 - p0) * 0.5, v1 = (p3 - p1) * 0.5, t2 = t * t, t3 = t * t2;
                    return (2 * p1 - 2 * p2 + v0 + v1) * t3 + (-3 * p1 + 3 * p2 - 2 * v0 - v1) * t2 + v0 * t + p1;
                }
            }
        };
        return Tween;
    }(wd.ActionInterval));
    wd.Tween = Tween;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var RendererComponent = (function (_super) {
        __extends(RendererComponent, _super);
        function RendererComponent() {
            _super.apply(this, arguments);
        }
        return RendererComponent;
    }(wd.Component));
    wd.RendererComponent = RendererComponent;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var MeshRenderer = (function (_super) {
        __extends(MeshRenderer, _super);
        function MeshRenderer() {
            _super.apply(this, arguments);
        }
        MeshRenderer.create = function () {
            var obj = new this();
            return obj;
        };
        MeshRenderer.prototype.render = function (renderer, geometry, camera) {
            renderer.addCommand(this.createDrawCommand(renderer, geometry, camera));
        };
        MeshRenderer.prototype.createDrawCommand = function (renderer, geometry, camera) {
            var quadCmd = renderer.createQuadCommand(), cameraComponent = camera.getComponent(wd.CameraController), material = geometry.material;
            quadCmd.buffers = geometry.buffers;
            quadCmd.animation = geometry.entityObject.getComponent(wd.Animation);
            quadCmd.drawMode = geometry.drawMode;
            quadCmd.mMatrix = this.entityObject.transform.localToWorldMatrix;
            quadCmd.vMatrix = cameraComponent.worldToCameraMatrix;
            quadCmd.pMatrix = cameraComponent.pMatrix;
            quadCmd.material = material;
            quadCmd.z = this.entityObject.transform.position.z;
            return quadCmd;
        };
        __decorate([
            wd.require(function (renderer, geometry, camera) {
                var controller = camera.getComponent(wd.CameraController);
                wd.assert(!!controller && !!controller.camera, wd.Log.info.FUNC_MUST("camera", "add Camera Component"));
                wd.assert(!!geometry, wd.Log.info.FUNC_MUST("Mesh", "add geometry component"));
            })
        ], MeshRenderer.prototype, "createDrawCommand", null);
        return MeshRenderer;
    }(wd.RendererComponent));
    wd.MeshRenderer = MeshRenderer;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var SkyboxRenderer = (function (_super) {
        __extends(SkyboxRenderer, _super);
        function SkyboxRenderer() {
            _super.apply(this, arguments);
        }
        SkyboxRenderer.create = function () {
            var obj = new this();
            return obj;
        };
        SkyboxRenderer.prototype.render = function (renderer, geometry, camera) {
            renderer.skyboxCommand = this.createDrawCommand(renderer, geometry, camera);
        };
        return SkyboxRenderer;
    }(wd.MeshRenderer));
    wd.SkyboxRenderer = SkyboxRenderer;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var UIRenderer = (function (_super) {
        __extends(UIRenderer, _super);
        function UIRenderer() {
            _super.apply(this, arguments);
            this._zIndex = 1;
            this.dirtyDuringCurrentLoop = false;
            this._dirty = true;
            this.context = null;
            this.isClearCanvas = false;
            this.state = wd.EUIRendererState.NORMAL;
            this.canvas = null;
            this._referenceList = wdCb.Collection.create();
        }
        UIRenderer.create = function () {
            var obj = new this();
            obj.initWhenCreate();
            return obj;
        };
        Object.defineProperty(UIRenderer.prototype, "zIndex", {
            get: function () {
                return this._zIndex;
            },
            set: function (zIndex) {
                if (zIndex !== this._zIndex) {
                    this._zIndex = zIndex;
                    if (this.canvas) {
                        wdCb.DomQuery.create(this.canvas).css("zIndex", zIndex);
                    }
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UIRenderer.prototype, "dirty", {
            get: function () {
                return this._dirty;
            },
            set: function (dirty) {
                if (dirty) {
                    this._dirty = true;
                    this.dirtyDuringCurrentLoop = true;
                }
            },
            enumerable: true,
            configurable: true
        });
        UIRenderer.prototype.resetDirty = function () {
            this._dirty = false;
        };
        UIRenderer.prototype.addToObject = function (object) {
            this._referenceList.addChild(object);
            this.entityObject = object;
        };
        UIRenderer.prototype.removeFromObject = function (object) {
            this._referenceList.removeChild(object);
            if (this._referenceList.getCount() > 0) {
                return;
            }
            _super.prototype.removeFromObject.call(this, object);
        };
        UIRenderer.prototype.init = function () {
        };
        UIRenderer.prototype.initWhenCreate = function () {
            this._createOverlayCanvas();
        };
        UIRenderer.prototype.dispose = function () {
            if (this._referenceList.getCount() > 0) {
                return;
            }
            wdCb.DomQuery.create(this.canvas).remove();
        };
        UIRenderer.prototype.render = function (renderer, geometry, camera) {
        };
        UIRenderer.prototype.clearCanvas = function () {
            this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);
            this.isClearCanvas = true;
        };
        UIRenderer.prototype._createOverlayCanvas = function () {
            var canvas = null, view = null;
            if (this.canvas) {
                return;
            }
            canvas = wdCb.DomQuery.create("<canvas></canvas>").prependTo("body");
            view = wd.DeviceManager.getInstance().view;
            canvas.css("position", "absolute");
            canvas.css("left", view.x + "px");
            canvas.css("top", view.y + "px");
            canvas.css("zIndex", this.zIndex);
            canvas.attr("width", view.width);
            canvas.attr("height", view.height);
            this.canvas = canvas.get(0);
            this.context = this.canvas.getContext("2d");
        };
        __decorate([
            wd.execOnlyOnce("_isInit")
        ], UIRenderer.prototype, "init", null);
        return UIRenderer;
    }(wd.RendererComponent));
    wd.UIRenderer = UIRenderer;
})(wd || (wd = {}));
var wd;
(function (wd) {
    (function (EUIRendererState) {
        EUIRendererState[EUIRendererState["NORMAL"] = 0] = "NORMAL";
        EUIRendererState[EUIRendererState["DIRTY"] = 1] = "DIRTY";
        EUIRendererState[EUIRendererState["NOT_DIRTY"] = 2] = "NOT_DIRTY";
    })(wd.EUIRendererState || (wd.EUIRendererState = {}));
    var EUIRendererState = wd.EUIRendererState;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var SpacePartition = (function (_super) {
        __extends(SpacePartition, _super);
        function SpacePartition() {
            _super.apply(this, arguments);
        }
        return SpacePartition;
    }(wd.Component));
    wd.SpacePartition = SpacePartition;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var Octree = (function (_super) {
        __extends(Octree, _super);
        function Octree() {
            _super.apply(this, arguments);
            this.maxDepth = 2;
            this.maxNodeCapacity = 64;
            this._root = null;
            this._selectionList = wdCb.Collection.create();
        }
        Octree.create = function () {
            var obj = new this();
            return obj;
        };
        Octree.prototype.addToObject = function (entityObject) {
            _super.prototype.addToObject.call(this, entityObject);
        };
        Octree.prototype.build = function () {
            var entityObjectList = this.getChildren(), currentDepth = 0, maxNodeCapacity = this.maxNodeCapacity, maxDepth = this.maxDepth;
            var buildTree = function (worldMin, worldMax, currentDepth, entityObjectList, parentNode) {
                var halfExtends = new wd.Vector3((worldMax.x - worldMin.x) / 2, (worldMax.y - worldMin.y) / 2, (worldMax.z - worldMin.z) / 2);
                for (var x = 0; x < 2; x++) {
                    for (var y = 0; y < 2; y++) {
                        for (var z = 0; z < 2; z++) {
                            var localMin = worldMin.copy().add(halfExtends.copy().scale(x, y, z)), localMax = worldMin.copy().add(halfExtends.copy().scale(x + 1, y + 1, z + 1)), node = wd.OctreeNode.create(localMin, localMax, maxNodeCapacity, currentDepth + 1, maxDepth);
                            node.addEntityObjects(entityObjectList);
                            if (node.entityObjectCount > maxNodeCapacity && currentDepth < maxDepth) {
                                buildTree(localMin, localMax, currentDepth + 1, entityObjectList, node);
                            }
                            parentNode.addNode(node);
                        }
                    }
                }
            };
            this._updateColliderForFirstCheck(entityObjectList);
            var _a = this._getWorldExtends(entityObjectList), worldMin = _a.worldMin, worldMax = _a.worldMax;
            this._root = wd.OctreeNode.create(worldMin, worldMax, maxNodeCapacity, currentDepth + 1, maxDepth);
            buildTree(worldMin, worldMax, currentDepth, entityObjectList, this._root);
        };
        Octree.prototype.getRenderListByFrustumCull = function () {
            var frustumPlanes = wd.Director.getInstance().scene.currentCamera.getComponent(wd.CameraController).getPlanes();
            return this._visitRoot("findAndAddToRenderList", [frustumPlanes, this._selectionList]);
        };
        Octree.prototype.getIntersectListWithRay = function (e) {
            var locationInView = e.locationInView;
            return this._visitRoot("findAndAddToIntersectList", [wd.Director.getInstance().scene.currentCamera.getComponent(wd.CameraController).createRay(locationInView.x, locationInView.y), this._selectionList]);
        };
        Octree.prototype.getCollideObjects = function (shape) {
            return this._visitRoot("findAndAddToCollideList", [shape, this._selectionList]);
        };
        Octree.prototype.getChildren = function () {
            return this.entityObject.getChildren();
        };
        Octree.prototype._visitRoot = function (method, args) {
            this._selectionList.removeAllChildren();
            this._root.nodeList.forEach(function (topNode) {
                topNode[method].apply(topNode, args);
            });
            this._selectionList = this._selectionList.removeRepeatItems();
            return this._selectionList;
        };
        Octree.prototype._updateColliderForFirstCheck = function (entityObjectList) {
            var collider = null, self = this;
            entityObjectList.forEach(function (entityObject) {
                if (!entityObject.hasComponent(wd.ColliderForFirstCheck)) {
                    collider = self._createCollider();
                    entityObject.addComponent(collider);
                    collider.init();
                }
                else {
                    collider = entityObject.getComponent(wd.BoxColliderForFirstCheck);
                }
                collider.update(null);
            });
        };
        Octree.prototype._getWorldExtends = function (entityObjectList) {
            var worldMin = wd.Vector3.create(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE), worldMax = wd.Vector3.create(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE), self = this;
            entityObjectList.forEach(function (entityObject) {
                var min = null, max = null, collider = null, shape = null;
                collider = entityObject.getComponent(wd.BoxColliderForFirstCheck);
                shape = collider.shape;
                min = shape.getMin();
                max = shape.getMax();
                self._checkExtends(min, worldMin, worldMax);
                self._checkExtends(max, worldMin, worldMax);
            });
            return {
                worldMin: worldMin,
                worldMax: worldMax
            };
        };
        Octree.prototype._createCollider = function () {
            return wd.BoxColliderForFirstCheck.create();
        };
        Octree.prototype._checkExtends = function (v, min, max) {
            if (v.x < min.x) {
                min.x = v.x;
            }
            if (v.y < min.y) {
                min.y = v.y;
            }
            if (v.z < min.z) {
                min.z = v.z;
            }
            if (v.x > max.x) {
                max.x = v.x;
            }
            if (v.y > max.y) {
                max.y = v.y;
            }
            if (v.z > max.z) {
                max.z = v.z;
            }
        };
        __decorate([
            wd.require(function (entityObject) {
                wd.assert(entityObject instanceof wd.GameObject, wd.Log.info.FUNC_SHOULD("Octree component", "add to GameObject"));
            })
        ], Octree.prototype, "addToObject", null);
        __decorate([
            wd.require(function () {
                wd.assert(!!wd.Director.getInstance().scene.currentCamera.getComponent(wd.CameraController), wd.Log.info.FUNC_SHOULD("contain CameraController component"));
            })
        ], Octree.prototype, "getRenderListByFrustumCull", null);
        __decorate([
            wd.require(function () {
                wd.assert(!!wd.Director.getInstance().scene.currentCamera.getComponent(wd.CameraController), wd.Log.info.FUNC_SHOULD("contain CameraController component"));
            })
        ], Octree.prototype, "getIntersectListWithRay", null);
        return Octree;
    }(wd.SpacePartition));
    wd.Octree = Octree;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var OctreeNode = (function () {
        function OctreeNode(minPoint, maxPoint, capacity, depth, maxDepth) {
            this.entityObjectList = wdCb.Collection.create();
            this.nodeList = wdCb.Collection.create();
            this._depth = null;
            this._maxDepth = null;
            this._capacity = null;
            this._minPoint = null;
            this._maxPoint = null;
            this._boundingVectors = null;
            this._capacity = capacity;
            this._depth = depth;
            this._maxDepth = maxDepth;
            this._minPoint = minPoint;
            this._maxPoint = maxPoint;
        }
        OctreeNode.create = function (minPoint, maxPoint, capacity, depth, maxDepth) {
            var obj = new this(minPoint, maxPoint, capacity, depth, maxDepth);
            obj.initWhenCreate();
            return obj;
        };
        Object.defineProperty(OctreeNode.prototype, "entityObjectCount", {
            get: function () {
                return this.entityObjectList.getCount();
            },
            enumerable: true,
            configurable: true
        });
        OctreeNode.prototype.initWhenCreate = function () {
            this._boundingVectors = wd.BoundingRegionUtils.buildBoundingVectors(this._minPoint, this._maxPoint);
        };
        OctreeNode.prototype.addEntityObjects = function (entityObjectList) {
            var self = this, localMin = this._minPoint, localMax = this._maxPoint;
            entityObjectList.forEach(function (entityObject) {
                if (entityObject.getComponent(wd.BoxColliderForFirstCheck).shape.isIntersectWithBox(localMin, localMax)) {
                    self.entityObjectList.addChild(entityObject);
                }
            });
        };
        OctreeNode.prototype.addNode = function (node) {
            this.nodeList.addChild(node);
        };
        OctreeNode.prototype.findAndAddToRenderList = function (frustumPlanes, selectionList) {
            if (wd.BoundingRegionUtils.isAABBIntersectFrustum(this._boundingVectors, frustumPlanes)) {
                if (this._hasNode()) {
                    this.nodeList.forEach(function (node) {
                        node.findAndAddToRenderList(frustumPlanes, selectionList);
                    });
                    return;
                }
                selectionList.addChildren(this.entityObjectList);
            }
        };
        OctreeNode.prototype.findAndAddToIntersectList = function (ray, selectionList) {
            if (ray.isIntersectWithAABB(this._minPoint, this._maxPoint)) {
                if (this._hasNode()) {
                    this.nodeList.forEach(function (node) {
                        node.findAndAddToIntersectList(ray, selectionList);
                    });
                    return;
                }
                selectionList.addChildren(this.entityObjectList);
            }
        };
        OctreeNode.prototype.findAndAddToCollideList = function (shape, selectionList) {
            if (shape.isIntersectWithBox(this._minPoint, this._maxPoint)) {
                if (this._hasNode()) {
                    this.nodeList.forEach(function (node) {
                        node.findAndAddToCollideList(shape, selectionList);
                    });
                    return;
                }
                selectionList.addChildren(this.entityObjectList);
            }
        };
        OctreeNode.prototype._hasNode = function () {
            return this.nodeList.getCount() > 0;
        };
        __decorate([
            wd.require(function (entityObjectList) {
                entityObjectList.forEach(function (entityObject) {
                    wd.assert(entityObject instanceof wd.GameObject, wd.Log.info.FUNC_SHOULD("add gameObjects"));
                });
            })
        ], OctreeNode.prototype, "addEntityObjects", null);
        return OctreeNode;
    }());
    wd.OctreeNode = OctreeNode;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var ColliderForFirstCheck = (function (_super) {
        __extends(ColliderForFirstCheck, _super);
        function ColliderForFirstCheck() {
            _super.apply(this, arguments);
        }
        return ColliderForFirstCheck;
    }(wd.Component));
    wd.ColliderForFirstCheck = ColliderForFirstCheck;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var BoxColliderForFirstCheck = (function (_super) {
        __extends(BoxColliderForFirstCheck, _super);
        function BoxColliderForFirstCheck() {
            _super.apply(this, arguments);
            this._collider = wd.BoxCollider.create();
        }
        BoxColliderForFirstCheck.create = function () {
            var obj = new this();
            return obj;
        };
        Object.defineProperty(BoxColliderForFirstCheck.prototype, "shape", {
            get: function () {
                return this._collider.shape;
            },
            enumerable: true,
            configurable: true
        });
        BoxColliderForFirstCheck.prototype.init = function () {
            this._collider.entityObject = this.entityObject;
            this._collider.init();
        };
        BoxColliderForFirstCheck.prototype.update = function (elapsedTime) {
            this._collider.update(elapsedTime);
        };
        return BoxColliderForFirstCheck;
    }(wd.ColliderForFirstCheck));
    wd.BoxColliderForFirstCheck = BoxColliderForFirstCheck;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var Collider = (function (_super) {
        __extends(Collider, _super);
        function Collider() {
            _super.apply(this, arguments);
            this.type = wd.ABSTRACT_ATTRIBUTE;
            this.boundingRegion = null;
        }
        Object.defineProperty(Collider.prototype, "shape", {
            get: function () {
                return this.boundingRegion.shape;
            },
            enumerable: true,
            configurable: true
        });
        Collider.prototype.init = function () {
            this.boundingRegion = this.createBoundingRegion();
            this.boundingRegion.init();
            this.buildBoundingRegion();
        };
        Collider.prototype.update = function (elapsedTime) {
            this.boundingRegion.update();
        };
        Collider.prototype.updateShape = function () {
            this.boundingRegion.updateShape();
        };
        Collider.prototype.isIntersectWith = function (collider) {
            if (collider instanceof wd.BoxCollider) {
                return this.boundingRegion.isIntersectWithBox(collider.boundingRegion);
            }
            else if (collider instanceof wd.SphereCollider) {
                return this.boundingRegion.isIntersectWithSphere(collider.boundingRegion);
            }
            else {
                wd.Log.warn(wd.Log.info.FUNC_NOT_SUPPORT(this.type + " collider", "intersect with " + collider.type + " collider"));
            }
        };
        Collider.prototype.isCollide = function (targetObject) {
            var collider = null;
            if (this._isSelf(targetObject) || !targetObject.hasComponent(Collider)) {
                return false;
            }
            collider = targetObject.getComponent(Collider);
            if (targetObject.hasComponent(wd.RigidBody)) {
                collider.updateShape();
            }
            return this.isIntersectWith(collider);
        };
        Collider.prototype._isSelf = function (entityObject) {
            return wd.JudgeUtils.isSelf(this.entityObject, entityObject);
        };
        __decorate([
            wd.require(function (collider) {
                wd.assert(collider instanceof Collider, wd.Log.info.FUNC_SHOULD("target", "be collider"));
            })
        ], Collider.prototype, "isIntersectWith", null);
        return Collider;
    }(wd.Component));
    wd.Collider = Collider;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var BoxCollider = (function (_super) {
        __extends(BoxCollider, _super);
        function BoxCollider() {
            _super.apply(this, arguments);
            this.center = wd.Vector3.create(0, 0, 0);
            this.halfExtents = null;
            this.type = wd.EColliderType.BOX;
        }
        BoxCollider.create = function () {
            var obj = new this();
            return obj;
        };
        BoxCollider.prototype.createBoundingRegion = function () {
            return wd.BoxBoundingRegion.create(this.entityObject);
        };
        BoxCollider.prototype.buildBoundingRegion = function () {
            this.boundingRegion.build(this.center, this.halfExtents);
        };
        return BoxCollider;
    }(wd.Collider));
    wd.BoxCollider = BoxCollider;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var SphereCollider = (function (_super) {
        __extends(SphereCollider, _super);
        function SphereCollider() {
            _super.apply(this, arguments);
            this.center = wd.Vector3.create(0, 0, 0);
            this.radius = null;
            this.type = wd.EColliderType.SPHERE;
        }
        SphereCollider.create = function () {
            var obj = new this();
            return obj;
        };
        SphereCollider.prototype.createBoundingRegion = function () {
            return wd.SphereBoundingRegion.create(this.entityObject);
        };
        SphereCollider.prototype.buildBoundingRegion = function () {
            this.boundingRegion.build(this.center, this.radius);
        };
        return SphereCollider;
    }(wd.Collider));
    wd.SphereCollider = SphereCollider;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var BoundingRegion = (function () {
        function BoundingRegion(entityObject) {
            this.shape = null;
            this.entityObject = null;
            this.isUserSpecifyTheRegion = false;
            this.originShape = null;
            this.debugObject = null;
            this.entityObject = entityObject;
        }
        BoundingRegion.prototype.init = function () {
            this.shape = this.createShape();
        };
        BoundingRegion.prototype.build = function (center) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            var params = Array.prototype.slice.call(arguments, 0);
            if (this.isBuildUserSpecifyBoundingRegion.apply(this, params)) {
                this.isUserSpecifyTheRegion = true;
                this.shape.setFromShapeParam.apply(this.shape, params);
            }
            else {
                this.shape.setFromPoints(wd.ColliderUtils.getVertices(this.entityObject));
            }
            this.originShape = this.shape.copy();
            if (wd.DebugConfig.debugCollision) {
                this.debugObject = this.buildDebugObjectFromShape(this.shape);
                wd.Director.getInstance().scene.addChild(this.debugObject);
            }
        };
        BoundingRegion.prototype.update = function () {
            if (this.isNotTransformed()) {
                return;
            }
            if (wd.DebugConfig.debugCollision) {
                this.updateShape();
                this.updateDebugObjectFromShape(this.shape);
            }
            else if (!this.entityObject.hasComponent(wd.RigidBody)) {
                this.updateShape();
            }
        };
        BoundingRegion.prototype.isIntersectWithSphere = function (boundingRegion) {
            return this.shape.isIntersectWithSphere(boundingRegion.shape);
        };
        BoundingRegion.prototype.isIntersectWithBox = function (boundingRegion) {
            return this.shape.isIntersectWithBox(boundingRegion.shape);
        };
        BoundingRegion.prototype.buildDebugObjectFromShape = function (shape) {
            var material = null, geometry = null, renderer = null, entityObject = null;
            material = wd.BasicMaterial.create();
            material.color = wd.Color.create("rgb(255,0,0)");
            geometry = wd.CustomGeometry.create();
            geometry.material = material;
            geometry.drawMode = wd.EDrawMode.LINES;
            this.setDebugObjectGeometry(geometry, shape);
            renderer = wd.MeshRenderer.create();
            entityObject = wd.GameObject.create();
            entityObject.addComponent(geometry);
            entityObject.addComponent(renderer);
            entityObject.transform.translate(shape.center);
            entityObject.name = "debugBoundingRegion" + this.entityObject.uid;
            entityObject.init();
            return entityObject;
        };
        __decorate([
            wd.ensure(function (returnValue, center) {
                var args = [];
                for (var _i = 2; _i < arguments.length; _i++) {
                    args[_i - 2] = arguments[_i];
                }
                if (this.isBuildUserSpecifyBoundingRegion.apply(this, Array.prototype.slice.call(arguments, 1))) {
                    wd.assert(this.shape.center.isEqual(center), wd.Log.info.FUNC_SHOULD_NOT("transform shape when build"));
                }
            })
        ], BoundingRegion.prototype, "build", null);
        return BoundingRegion;
    }());
    wd.BoundingRegion = BoundingRegion;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var BoxBoundingRegion = (function (_super) {
        __extends(BoxBoundingRegion, _super);
        function BoxBoundingRegion() {
            _super.apply(this, arguments);
        }
        BoxBoundingRegion.create = function (entityObject) {
            var obj = new this(entityObject);
            return obj;
        };
        BoxBoundingRegion.prototype.updateShape = function () {
            var transform = this.entityObject.transform;
            if (this.isUserSpecifyTheRegion) {
                this.shape.setFromTranslationAndScale(this.originShape, transform.localToWorldMatrix);
            }
            else {
                if (transform.isRotate) {
                    this.shape.setFromObject(this.entityObject);
                }
                else {
                    this.shape.setFromTranslationAndScale(this.originShape, transform.localToWorldMatrix);
                }
            }
        };
        BoxBoundingRegion.prototype.createShape = function () {
            return wd.AABBShape.create();
        };
        BoxBoundingRegion.prototype.updateDebugObjectFromShape = function (shape) {
            var geometry = this.debugObject.getComponent(wd.CustomGeometry);
            this.setDebugObjectGeometry(geometry, shape);
            this.debugObject.transform.position = shape.center;
        };
        BoxBoundingRegion.prototype.setDebugObjectGeometry = function (geometry, shape) {
            var halfExtents = shape.halfExtents, x = halfExtents.x, y = halfExtents.y, z = halfExtents.z;
            geometry.vertices = [
                -x, -y, -z, -x, -y, z, x, -y, z, x, -y, -z,
                -x, y, -z, -x, y, z, x, y, z, x, y, -z
            ];
            geometry.indices = [
                0, 1, 1, 2, 2, 3, 3, 0,
                4, 5, 5, 6, 6, 7, 7, 4,
                0, 4, 1, 5, 2, 6, 3, 7
            ];
        };
        BoxBoundingRegion.prototype.isBuildUserSpecifyBoundingRegion = function (center, halfExtents) {
            return !!center && !!halfExtents;
        };
        BoxBoundingRegion.prototype.isNotTransformed = function () {
            var transform = this.entityObject.transform;
            return !transform.isRotate && !transform.isTranslate && !transform.isScale;
        };
        __decorate([
            wd.require(function (shape) {
                wd.assert(this.debugObject, wd.Log.info.FUNC_SHOULD("build debugObject"));
            })
        ], BoxBoundingRegion.prototype, "updateDebugObjectFromShape", null);
        __decorate([
            wd.require(function (geometry, shape) {
                wd.assert(shape.halfExtents && !shape.halfExtents.isZero(), wd.Log.info.FUNC_SHOULD_NOT("halfExtents", "be zero"));
            })
        ], BoxBoundingRegion.prototype, "setDebugObjectGeometry", null);
        return BoxBoundingRegion;
    }(wd.BoundingRegion));
    wd.BoxBoundingRegion = BoxBoundingRegion;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var SphereBoundingRegion = (function (_super) {
        __extends(SphereBoundingRegion, _super);
        function SphereBoundingRegion() {
            _super.apply(this, arguments);
        }
        SphereBoundingRegion.create = function (entityObject) {
            var obj = new this(entityObject);
            return obj;
        };
        SphereBoundingRegion.prototype.updateShape = function () {
            var transform = this.entityObject.transform;
            this.shape.setFromTranslationAndScale(this.originShape, transform.localToWorldMatrix);
        };
        SphereBoundingRegion.prototype.createShape = function () {
            return wd.SphereShape.create();
        };
        SphereBoundingRegion.prototype.updateDebugObjectFromShape = function (shape) {
            this.debugObject.transform.position = shape.center;
            var scaleTimes = shape.radius / this.originShape.radius;
            this.debugObject.transform.scale = wd.Vector3.create(scaleTimes, scaleTimes, scaleTimes);
        };
        SphereBoundingRegion.prototype.isNotTransformed = function () {
            var transform = this.entityObject.transform;
            return !transform.isTranslate && !transform.isScale;
        };
        SphereBoundingRegion.prototype.isBuildUserSpecifyBoundingRegion = function (center, radius) {
            return !!center && !!radius;
        };
        SphereBoundingRegion.prototype.setDebugObjectGeometry = function (geometry, shape) {
            var SEGMENTS = 40, RINGCOUNT = 3;
            var radius = shape.radius, vertices = [], x = 0;
            for (var ring = 0; ring < RINGCOUNT; ring++) {
                var xo = 0, yo = 1, zo = 2, theta = null;
                if (ring === 1) {
                    xo = 1;
                    yo = 0;
                    zo = 2;
                }
                else if (ring === 2) {
                    xo = 0;
                    yo = 2;
                    zo = 1;
                }
                for (var i = 0; i < SEGMENTS; i++) {
                    theta = 2 * Math.PI * (i / SEGMENTS);
                    vertices[x + xo] = radius * Math.cos(theta);
                    vertices[x + yo] = 0;
                    vertices[x + zo] = radius * Math.sin(theta);
                    x += 3;
                    theta = 2 * Math.PI * ((i + 1) / SEGMENTS);
                    vertices[x + xo] = radius * Math.cos(theta);
                    vertices[x + yo] = 0;
                    vertices[x + zo] = radius * Math.sin(theta);
                    x += 3;
                }
            }
            geometry.vertices = vertices;
        };
        __decorate([
            wd.require(function (shape) {
                wd.assert(this.debugObject, wd.Log.info.FUNC_SHOULD("build debugObject"));
            })
        ], SphereBoundingRegion.prototype, "updateDebugObjectFromShape", null);
        __decorate([
            wd.require(function (geometry, shape) {
                wd.assert(shape.radius > 0, wd.Log.info.FUNC_SHOULD("radius", "> 0"));
            })
        ], SphereBoundingRegion.prototype, "setDebugObjectGeometry", null);
        return SphereBoundingRegion;
    }(wd.BoundingRegion));
    wd.SphereBoundingRegion = SphereBoundingRegion;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var BoundingRegionUtils = (function () {
        function BoundingRegionUtils() {
        }
        BoundingRegionUtils.isAABBInFrustum = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var boundingVectors = null, frustumPlanes = null;
            if (args.length === 2) {
                boundingVectors = args[0];
                frustumPlanes = args[1];
            }
            else if (args.length === 3) {
                var minPoint = args[0], maxPoint = args[1];
                boundingVectors = this.buildBoundingVectors(minPoint, maxPoint);
                frustumPlanes = args[2];
            }
            for (var p = 0; p < 6; p++) {
                for (var i = 0; i < 8; i++) {
                    if (frustumPlanes[p].dotCoordinate(boundingVectors[i]) < 0) {
                        return false;
                    }
                }
            }
            return true;
        };
        BoundingRegionUtils.isAABBIntersectFrustum = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var boundingVectors = null, frustumPlanes = null;
            if (args.length === 2) {
                boundingVectors = args[0];
                frustumPlanes = args[1];
            }
            else if (args.length === 3) {
                var minPoint = args[0], maxPoint = args[1];
                boundingVectors = this.buildBoundingVectors(minPoint, maxPoint);
                frustumPlanes = args[2];
            }
            for (var p = 0; p < 6; p++) {
                var inCount = 8;
                for (var i = 0; i < 8; i++) {
                    if (frustumPlanes[p].dotCoordinate(boundingVectors[i]) < 0) {
                        inCount--;
                    }
                    else {
                        break;
                    }
                }
                if (inCount === 0) {
                    return false;
                }
            }
            return true;
        };
        BoundingRegionUtils.buildBoundingVectors = function (minPoint, maxPoint) {
            var boundingVectors = [];
            boundingVectors.push(minPoint.copy());
            boundingVectors.push(maxPoint.copy());
            boundingVectors.push(minPoint.copy());
            boundingVectors[2].x = maxPoint.x;
            boundingVectors.push(minPoint.copy());
            boundingVectors[3].y = maxPoint.y;
            boundingVectors.push(minPoint.copy());
            boundingVectors[4].z = maxPoint.z;
            boundingVectors.push(maxPoint.copy());
            boundingVectors[5].z = minPoint.z;
            boundingVectors.push(maxPoint.copy());
            boundingVectors[6].x = minPoint.x;
            boundingVectors.push(maxPoint.copy());
            boundingVectors[7].y = minPoint.y;
            return boundingVectors;
        };
        return BoundingRegionUtils;
    }());
    wd.BoundingRegionUtils = BoundingRegionUtils;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var Shape = (function () {
        function Shape() {
            this.center = wd.Vector3.create(0, 0, 0);
        }
        Shape.prototype.isBoxAndSphereIntersected = function (box, sphere) {
            var sphereCenter = sphere.center, sphereRadius = sphere.radius;
            return sphereCenter.distanceToSquared(box.closestPointTo(sphereCenter)) < Math.pow(sphereRadius, 2);
        };
        return Shape;
    }());
    wd.Shape = Shape;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var AABBShape = (function (_super) {
        __extends(AABBShape, _super);
        function AABBShape() {
            _super.apply(this, arguments);
            this.halfExtents = wd.Vector3.create(0.5, 0.5, 0.5);
        }
        AABBShape.create = function () {
            var obj = new this();
            return obj;
        };
        AABBShape.getCenter = function (min, max) {
            return wd.Vector3.create().add2(max, min).scale(0.5);
        };
        AABBShape.getHalfExtents = function (min, max) {
            return wd.Vector3.create().sub2(max, min).scale(0.5);
        };
        AABBShape.prototype.setMinMax = function (min, max) {
            this.center = AABBShape.getCenter(min, max);
            this.halfExtents = AABBShape.getHalfExtents(min, max);
        };
        AABBShape.prototype.getMin = function () {
            return this.center.copy().sub(this.halfExtents);
        };
        AABBShape.prototype.getMax = function () {
            return this.center.copy().add(this.halfExtents);
        };
        AABBShape.prototype.setFromShapeParam = function (center, halfExtents) {
            this.center = center;
            this.halfExtents = halfExtents;
        };
        AABBShape.prototype.setFromPoints = function (points) {
            var self = this, min = this._getEmptyMin(), max = this._getEmptyMax();
            wd.GeometryUtils.iterateThreeComponent(points, function (point) {
                self._expandByPoint(point, min, max);
            });
            this.setMinMax(min, max);
            return this;
        };
        AABBShape.prototype.setFromTransformedAABB = function (aabb, matrix) {
            var bc = this.center, br = this.halfExtents, ac = aabb.center.values, ar = aabb.halfExtents.values, m = matrix.values, mx0 = m[0], mx1 = m[4], mx2 = m[8], my0 = m[1], my1 = m[5], my2 = m[9], mz0 = m[2], mz1 = m[6], mz2 = m[10], mx0a = Math.abs(mx0), mx1a = Math.abs(mx1), mx2a = Math.abs(mx2), my0a = Math.abs(my0), my1a = Math.abs(my1), my2a = Math.abs(my2), mz0a = Math.abs(mz0), mz1a = Math.abs(mz1), mz2a = Math.abs(mz2);
            bc.set(m[12] + mx0 * ac[0] + mx1 * ac[1] + mx2 * ac[2], m[13] + my0 * ac[0] + my1 * ac[1] + my2 * ac[2], m[14] + mz0 * ac[0] + mz1 * ac[1] + mz2 * ac[2]);
            br.set(mx0a * ar[0] + mx1a * ar[1] + mx2a * ar[2], my0a * ar[0] + my1a * ar[1] + my2a * ar[2], mz0a * ar[0] + mz1a * ar[1] + mz2a * ar[2]);
        };
        AABBShape.prototype.setFromTranslationAndScale = function (aabb, matrix) {
            var translation = matrix.getTranslation(), scale = matrix.getScale();
            this.center = aabb.center.copy().add(translation);
            this.halfExtents = aabb.halfExtents.copy().mul(scale);
        };
        AABBShape.prototype.setFromObject = function (entityObject) {
            var modelMatrix = entityObject.transform.localToWorldMatrix, vertices = wd.ColliderUtils.getVertices(entityObject), self = this, min = this._getEmptyMin(), max = this._getEmptyMax();
            wd.GeometryUtils.iterateThreeComponent(vertices, function (point) {
                point.applyMatrix4(modelMatrix);
                self._expandByPoint(point, min, max);
            });
            this.setMinMax(min, max);
        };
        AABBShape.prototype.isIntersectWithBox = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var aMax = this.getMax(), aMin = this.getMin(), bMax = null, bMin = null;
            if (args.length === 1) {
                var shape = args[0];
                bMin = shape.getMin();
                bMax = shape.getMax();
            }
            else if (args.length === 2) {
                bMin = args[0];
                bMax = args[1];
            }
            return (aMin.x <= bMax.x) && (aMax.x >= bMin.x) &&
                (aMin.y <= bMax.y) && (aMax.y >= bMin.y) &&
                (aMin.z <= bMax.z) && (aMax.z >= bMin.z);
        };
        AABBShape.prototype.isIntersectWithSphere = function (shape) {
            return this.isBoxAndSphereIntersected(this, shape);
        };
        AABBShape.prototype.isIntersectWithRay = function (ray) {
            return ray.isIntersectWithAABB(this);
        };
        AABBShape.prototype.closestPointTo = function (point) {
            var min = this.getMin(), max = this.getMax(), resultPoint = wd.Vector3.create();
            if (point.x < min.x) {
                resultPoint.x = min.x;
            }
            else if (point.x > max.x) {
                resultPoint.x = max.x;
            }
            else {
                resultPoint.x = point.x;
            }
            if (point.y < min.y) {
                resultPoint.y = min.y;
            }
            else if (point.y > max.y) {
                resultPoint.y = max.y;
            }
            else {
                resultPoint.y = point.y;
            }
            if (point.z < min.z) {
                resultPoint.z = min.z;
            }
            else if (point.z > max.z) {
                resultPoint.z = max.z;
            }
            else {
                resultPoint.z = point.z;
            }
            return resultPoint;
        };
        AABBShape.prototype.containPoint = function (point) {
            var min = this.getMin(), max = this.getMax();
            for (var i = 0; i < 3; ++i) {
                if (point.values[i] < min.values[i] || point.values[i] > max.values[i]) {
                    return false;
                }
            }
            return true;
        };
        AABBShape.prototype.copy = function () {
            var shape = AABBShape.create();
            shape.center = this.center.copy();
            shape.halfExtents = this.halfExtents.copy();
            return shape;
        };
        AABBShape.prototype._getEmptyMin = function () {
            return wd.Vector3.create(Infinity, Infinity, Infinity);
        };
        AABBShape.prototype._getEmptyMax = function () {
            return wd.Vector3.create(-Infinity, -Infinity, -Infinity);
        };
        AABBShape.prototype._expandByPoint = function (point, min, max) {
            min.min(point);
            max.max(point);
        };
        __decorate([
            wd.require(function (entityObject) {
                var vertices = wd.ColliderUtils.getVertices(entityObject);
                wd.assert(vertices && vertices.length > 0, wd.Log.info.FUNC_MUST_DEFINE("vertices"));
            })
        ], AABBShape.prototype, "setFromObject", null);
        return AABBShape;
    }(wd.Shape));
    wd.AABBShape = AABBShape;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var SphereShape = (function (_super) {
        __extends(SphereShape, _super);
        function SphereShape() {
            _super.apply(this, arguments);
            this.radius = 1;
        }
        SphereShape.create = function () {
            var obj = new this();
            return obj;
        };
        SphereShape.prototype.setFromShapeParam = function (center, radius) {
            this.center = center;
            this.radius = radius;
        };
        SphereShape.prototype.setFromPoints = function (points) {
            var aabb = wd.AABBShape.create();
            this.center = aabb.setFromPoints(points).center;
            this.radius = this._findMaxDistanceOfPointsToCenter(points);
        };
        SphereShape.prototype.setFromTranslationAndScale = function (sphere, matrix) {
            var translation = matrix.getTranslation(), scale = matrix.getScale();
            this.center = sphere.center.copy().add(translation);
            this.radius = sphere.radius * Math.max(scale.x, scale.y, scale.z);
        };
        SphereShape.prototype.isIntersectWithSphere = function (shape) {
            var radiusSum = this.radius + shape.radius;
            return shape.center.distanceToSquared(this.center) <= (Math.pow(radiusSum, 2));
        };
        SphereShape.prototype.isIntersectWithBox = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var shape = null;
            if (args.length === 1) {
                shape = args[0];
            }
            else if (args.length === 2) {
                var min = args[0], max = args[1];
                shape = wd.AABBShape.create();
                shape.setMinMax(min, max);
            }
            return this.isBoxAndSphereIntersected(shape, this);
        };
        SphereShape.prototype.isIntersectWithRay = function (ray) {
            return ray.isIntersectWithSphere(this);
        };
        SphereShape.prototype.containPoint = function (point) {
            return point.distanceToSquared(this.center) <= (Math.pow(this.radius, 2));
        };
        SphereShape.prototype.copy = function () {
            var shape = SphereShape.create();
            shape.center = this.center.copy();
            shape.radius = this.radius;
            return shape;
        };
        SphereShape.prototype._findMaxDistanceOfPointsToCenter = function (points) {
            var maxRadiusSq = 0, center = this.center;
            wd.GeometryUtils.iterateThreeComponent(points, function (point) {
                maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(point));
            });
            return Math.sqrt(maxRadiusSq);
        };
        return SphereShape;
    }(wd.Shape));
    wd.SphereShape = SphereShape;
})(wd || (wd = {}));
var wd;
(function (wd) {
    (function (EColliderType) {
        EColliderType[EColliderType["BOX"] = "box"] = "BOX";
        EColliderType[EColliderType["SPHERE"] = "sphere"] = "SPHERE";
    })(wd.EColliderType || (wd.EColliderType = {}));
    var EColliderType = wd.EColliderType;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var ColliderUtils = (function () {
        function ColliderUtils() {
        }
        ColliderUtils.getVertices = function (entityObject) {
            if (!entityObject.hasComponent(wd.Geometry)) {
                if (entityObject.hasTag(wd.EWDTag.CONTAINER)) {
                    return entityObject.getChild(0).getComponent(wd.Geometry).vertices;
                }
                return null;
            }
            return entityObject.getComponent(wd.Geometry).geometryData.vertices;
        };
        __decorate([
            wd.require(function (entityObject) {
                if (!entityObject.hasComponent(wd.Geometry)) {
                    if (entityObject.hasTag(wd.EWDTag.CONTAINER)) {
                        var firstChildVertices = entityObject.getChild(0).getComponent(wd.Geometry).vertices, secondChildVertices = entityObject.getChild(1).getComponent(wd.Geometry).vertices;
                        wd.assert(!!firstChildVertices && firstChildVertices.length === secondChildVertices.length, wd.Log.info.FUNC_SHOULD("if entityObject is EWDTag.CONTAINER, then its children should has its vertices"));
                    }
                }
            })
        ], ColliderUtils, "getVertices", null);
        return ColliderUtils;
    }());
    wd.ColliderUtils = ColliderUtils;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var RigidBody = (function (_super) {
        __extends(RigidBody, _super);
        function RigidBody() {
            _super.apply(this, arguments);
            this._friction = 0;
            this._restitution = 0;
            this._children = wdCb.Collection.create();
            this.lockConstraint = wd.LockConstraint.create(this);
            this.distanceConstraint = wd.DistanceConstraint.create(this);
            this.hingeConstraint = wd.HingeConstraint.create(this);
            this.pointToPointConstraintList = wd.PointToPointConstraintList.create(this);
            this._afterInitSubscription = null;
            this._afterInitRigidbodyAddConstraintSubscription = null;
        }
        Object.defineProperty(RigidBody.prototype, "friction", {
            get: function () {
                return this._friction;
            },
            set: function (friction) {
                this._friction = friction;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RigidBody.prototype, "restitution", {
            get: function () {
                return this._restitution;
            },
            set: function (restitution) {
                this._restitution = restitution;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RigidBody.prototype, "children", {
            get: function () {
                return this._children;
            },
            set: function (children) {
                if (wd.JudgeUtils.isArray(children)) {
                    var arr = children;
                    this._children = wdCb.Collection.create(arr);
                }
                else {
                    var list = children;
                    this._children = list;
                }
                this._children.forEach(function (child) {
                    child.addTag("isRigidbodyChild");
                });
            },
            enumerable: true,
            configurable: true
        });
        RigidBody.prototype.init = function () {
            var self = this;
            this._afterInitSubscription = wd.EventManager.fromEvent(wd.EEngineEvent.AFTER_GAMEOBJECT_INIT)
                .subscribe(function () {
                self._afterInitHandler();
            });
            this._afterInitRigidbodyAddConstraintSubscription = wd.EventManager.fromEvent(wd.EEngineEvent.AFTER_GAMEOBJECT_INIT_RIGIDBODY_ADD_CONSTRAINT)
                .subscribe(function () {
                self._afterInitRigidbodyAddConstraintHandler();
            });
        };
        RigidBody.prototype.addConstraint = function () {
            var _this = this;
            var engineAdapter = this.getPhysicsEngineAdapter();
            if (this.lockConstraint && this.lockConstraint.connectedBody) {
                engineAdapter.addLockConstraint(this.entityObject, this.lockConstraint);
            }
            if (this.distanceConstraint && this.distanceConstraint.connectedBody) {
                engineAdapter.addDistanceConstraint(this.entityObject, this.distanceConstraint);
            }
            if (this.hingeConstraint && this.hingeConstraint.connectedBody) {
                engineAdapter.addHingeConstraint(this.entityObject, this.hingeConstraint);
            }
            if (this.pointToPointConstraintList && this.pointToPointConstraintList.getCount() > 0) {
                this.pointToPointConstraintList.forEach(function (constraint) {
                    engineAdapter.addPointToPointConstraint(_this.entityObject, constraint);
                }, this);
            }
        };
        RigidBody.prototype.removeFromObject = function (entityObject) {
            var engineAdapter = this.getPhysicsEngineAdapter();
            if (engineAdapter) {
                this.getPhysicsEngineAdapter().removeGameObject(entityObject);
                this.getPhysicsEngineAdapter().removeConstraints(entityObject);
            }
            _super.prototype.removeFromObject.call(this, entityObject);
        };
        RigidBody.prototype.dispose = function () {
            this._children.forEach(function (child) {
                child.removeTag("isRigidbodyChild");
            }, this);
            this._afterInitSubscription && this._afterInitSubscription.dispose();
            this._afterInitRigidbodyAddConstraintSubscription && this._afterInitRigidbodyAddConstraintSubscription.dispose();
        };
        RigidBody.prototype.getPhysicsEngineAdapter = function () {
            return wd.Director.getInstance().scene.physicsEngineAdapter;
        };
        RigidBody.prototype.isPhysicsEngineAdapterExist = function () {
            return !!wd.Director.getInstance().scene && !!wd.Director.getInstance().scene.physicsEngineAdapter;
        };
        RigidBody.prototype.addBodyToPhysicsEngine = function (method, data) {
            if (data === void 0) { data = {}; }
            var engineAdapter = this.getPhysicsEngineAdapter(), position = this.entityObject.transform.position, rotation = this.entityObject.transform.rotation;
            engineAdapter[method](this.entityObject, wdCb.ExtendUtils.extend({
                position: position,
                rotation: rotation,
                children: this._children,
                lockConstraint: this.lockConstraint,
                onContact: wdCb.FunctionUtils.bind(this, this._onContact),
                onCollisionStart: wdCb.FunctionUtils.bind(this, this._onCollisionStart),
                onCollisionEnd: wdCb.FunctionUtils.bind(this, this._onCollisionEnd),
                friction: this.friction,
                restitution: this.restitution
            }, data));
        };
        RigidBody.prototype._onContact = function (collideObject) {
            this.entityObject.execScript("onContact", wdCb.Collection.create([collideObject]));
        };
        RigidBody.prototype._onCollisionStart = function (collideObject) {
            this.entityObject.execScript("onCollisionStart", wdCb.Collection.create([collideObject]));
        };
        RigidBody.prototype._onCollisionEnd = function () {
            this.entityObject.execScript("onCollisionEnd");
        };
        RigidBody.prototype._isContainer = function (entityObject) {
            var rigidBody = entityObject.getComponent(RigidBody);
            return rigidBody.children.getCount() > 0;
        };
        RigidBody.prototype._afterInitHandler = function () {
            this.addBody();
        };
        RigidBody.prototype._afterInitRigidbodyAddConstraintHandler = function () {
            this.addConstraint();
        };
        __decorate([
            wd.operateBodyDataGetterAndSetter("Friction")
        ], RigidBody.prototype, "friction", null);
        __decorate([
            wd.operateBodyDataGetterAndSetter("Restitution")
        ], RigidBody.prototype, "restitution", null);
        __decorate([
            wd.require(function () {
                if (this._isContainer(this.entityObject)) {
                    wd.assert(!this.entityObject.getComponent(wd.Collider), wd.Log.info.FUNC_SHOULD_NOT("container", "add collider component in the case of compound"));
                }
                else {
                    wd.assert(!!this.entityObject.getComponent(wd.Collider), wd.Log.info.FUNC_MUST_DEFINE("collider component when add rigid body component"));
                    wd.assert(!!this.entityObject.getComponent(wd.Collider).shape, wd.Log.info.FUNC_SHOULD("create collider.shape before adding rigid body component"));
                }
            })
        ], RigidBody.prototype, "addBodyToPhysicsEngine", null);
        __decorate([
            wd.execOnlyOnce("_isAfterInit")
        ], RigidBody.prototype, "_afterInitHandler", null);
        __decorate([
            wd.execOnlyOnce("_isAfterInitRigidbodyAddConstraint")
        ], RigidBody.prototype, "_afterInitRigidbodyAddConstraintHandler", null);
        return RigidBody;
    }(wd.Component));
    wd.RigidBody = RigidBody;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var DynamicRigidBody = (function (_super) {
        __extends(DynamicRigidBody, _super);
        function DynamicRigidBody() {
            _super.apply(this, arguments);
            this._linearDamping = 0;
            this._angularDamping = 0;
            this._velocity = wd.Vector3.create(0, 0, 0);
            this._angularVelocity = wd.Vector3.create(0, 0, 0);
            this._mass = 1;
            this.impulse = null;
            this.force = null;
            this.hitPoint = null;
        }
        DynamicRigidBody.create = function () {
            var obj = new this();
            return obj;
        };
        Object.defineProperty(DynamicRigidBody.prototype, "linearDamping", {
            get: function () {
                return this._linearDamping;
            },
            set: function (linearDamping) {
                this._linearDamping = linearDamping;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DynamicRigidBody.prototype, "angularDamping", {
            get: function () {
                return this._angularDamping;
            },
            set: function (angularDamping) {
                this._angularDamping = angularDamping;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DynamicRigidBody.prototype, "velocity", {
            get: function () {
                return this._velocity;
            },
            set: function (velocity) {
                this._velocity = velocity;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DynamicRigidBody.prototype, "angularVelocity", {
            get: function () {
                return this._angularVelocity;
            },
            set: function (angularVelocity) {
                this._angularVelocity = angularVelocity;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DynamicRigidBody.prototype, "mass", {
            get: function () {
                return this._mass;
            },
            set: function (mass) {
                this._mass = mass;
            },
            enumerable: true,
            configurable: true
        });
        DynamicRigidBody.prototype.addBody = function () {
            this.addBodyToPhysicsEngine("addDynamicBody", {
                mass: this.mass,
                linearDamping: this.linearDamping,
                angularDamping: this.angularDamping,
                velocity: this.velocity,
                angularVelocity: this.angularVelocity,
                impulse: this.impulse,
                force: this.force,
                hitPoint: this.hitPoint
            });
        };
        __decorate([
            wd.operateBodyDataGetterAndSetter("LinearDamping")
        ], DynamicRigidBody.prototype, "linearDamping", null);
        __decorate([
            wd.operateBodyDataGetterAndSetter("AngularDamping")
        ], DynamicRigidBody.prototype, "angularDamping", null);
        __decorate([
            wd.operateBodyDataGetterAndSetter("Velocity")
        ], DynamicRigidBody.prototype, "velocity", null);
        __decorate([
            wd.operateBodyDataGetterAndSetter("AngularVelocity")
        ], DynamicRigidBody.prototype, "angularVelocity", null);
        __decorate([
            wd.operateBodyDataGetterAndSetter("Mass")
        ], DynamicRigidBody.prototype, "mass", null);
        return DynamicRigidBody;
    }(wd.RigidBody));
    wd.DynamicRigidBody = DynamicRigidBody;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var KinematicRigidBody = (function (_super) {
        __extends(KinematicRigidBody, _super);
        function KinematicRigidBody() {
            _super.apply(this, arguments);
            this._velocity = wd.Vector3.create(0, 0, 0);
            this._angularVelocity = wd.Vector3.create(0, 0, 0);
            this._mass = 1;
        }
        KinematicRigidBody.create = function () {
            var obj = new this();
            return obj;
        };
        Object.defineProperty(KinematicRigidBody.prototype, "velocity", {
            get: function () {
                return this._velocity;
            },
            set: function (velocity) {
                this._velocity = velocity;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(KinematicRigidBody.prototype, "angularVelocity", {
            get: function () {
                return this._angularVelocity;
            },
            set: function (angularVelocity) {
                this._angularVelocity = angularVelocity;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(KinematicRigidBody.prototype, "mass", {
            get: function () {
                return this._mass;
            },
            set: function (mass) {
                this._mass = mass;
            },
            enumerable: true,
            configurable: true
        });
        KinematicRigidBody.prototype.addBody = function () {
            this.addBodyToPhysicsEngine("addKinematicBody", {
                mass: this.mass,
                velocity: this.velocity,
                angularVelocity: this.angularVelocity
            });
        };
        __decorate([
            wd.operateBodyDataGetterAndSetter("Velocity")
        ], KinematicRigidBody.prototype, "velocity", null);
        __decorate([
            wd.operateBodyDataGetterAndSetter("AngularVelocity")
        ], KinematicRigidBody.prototype, "angularVelocity", null);
        __decorate([
            wd.operateBodyDataGetterAndSetter("Mass")
        ], KinematicRigidBody.prototype, "mass", null);
        return KinematicRigidBody;
    }(wd.RigidBody));
    wd.KinematicRigidBody = KinematicRigidBody;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var StaticRigidBody = (function (_super) {
        __extends(StaticRigidBody, _super);
        function StaticRigidBody() {
            _super.apply(this, arguments);
        }
        StaticRigidBody.create = function () {
            var obj = new this();
            return obj;
        };
        StaticRigidBody.prototype.addBody = function () {
            this.addBodyToPhysicsEngine("addStaticBody");
        };
        return StaticRigidBody;
    }(wd.RigidBody));
    wd.StaticRigidBody = StaticRigidBody;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var PhysicsConstraint = (function () {
        function PhysicsConstraint(rigidBody) {
            this.maxForce = null;
            this.rigidBody = null;
            this.rigidBody = rigidBody;
        }
        return PhysicsConstraint;
    }());
    wd.PhysicsConstraint = PhysicsConstraint;
    var LockConstraint = (function (_super) {
        __extends(LockConstraint, _super);
        function LockConstraint() {
            _super.apply(this, arguments);
            this._connectedBody = null;
        }
        LockConstraint.create = function (rigidBody) {
            var obj = new this(rigidBody);
            return obj;
        };
        Object.defineProperty(LockConstraint.prototype, "connectedBody", {
            get: function () {
                return this._connectedBody;
            },
            set: function (connectedBody) {
                var engineAdapter = null;
                this._connectedBody = connectedBody;
                if (!this.rigidBody.isPhysicsEngineAdapterExist()) {
                    return;
                }
                engineAdapter = this.rigidBody.getPhysicsEngineAdapter();
                engineAdapter.removeLockConstraint(this.rigidBody.entityObject);
                this.rigidBody.addConstraint();
            },
            enumerable: true,
            configurable: true
        });
        return LockConstraint;
    }(PhysicsConstraint));
    wd.LockConstraint = LockConstraint;
    var DistanceConstraint = (function (_super) {
        __extends(DistanceConstraint, _super);
        function DistanceConstraint() {
            _super.apply(this, arguments);
            this._connectedBody = null;
            this.distance = null;
        }
        DistanceConstraint.create = function (rigidBody) {
            var obj = new this(rigidBody);
            return obj;
        };
        Object.defineProperty(DistanceConstraint.prototype, "connectedBody", {
            get: function () {
                return this._connectedBody;
            },
            set: function (connectedBody) {
                var engineAdapter = null;
                this._connectedBody = connectedBody;
                if (!this.rigidBody.isPhysicsEngineAdapterExist()) {
                    return;
                }
                engineAdapter = this.rigidBody.getPhysicsEngineAdapter();
                engineAdapter.removeDistanceConstraint(this.rigidBody.entityObject);
                this.rigidBody.addConstraint();
            },
            enumerable: true,
            configurable: true
        });
        return DistanceConstraint;
    }(PhysicsConstraint));
    wd.DistanceConstraint = DistanceConstraint;
    var HingeConstraint = (function (_super) {
        __extends(HingeConstraint, _super);
        function HingeConstraint() {
            _super.apply(this, arguments);
            this._connectedBody = null;
            this.pivotA = null;
            this.pivotB = null;
            this.axisA = null;
            this.axisB = null;
        }
        HingeConstraint.create = function (rigidBody) {
            var obj = new this(rigidBody);
            return obj;
        };
        Object.defineProperty(HingeConstraint.prototype, "connectedBody", {
            get: function () {
                return this._connectedBody;
            },
            set: function (connectedBody) {
                var engineAdapter = null;
                this._connectedBody = connectedBody;
                if (!this.rigidBody.isPhysicsEngineAdapterExist()) {
                    return;
                }
                engineAdapter = this.rigidBody.getPhysicsEngineAdapter();
                engineAdapter.removeHingeConstraint(this.rigidBody.entityObject);
                this.rigidBody.addConstraint();
            },
            enumerable: true,
            configurable: true
        });
        return HingeConstraint;
    }(PhysicsConstraint));
    wd.HingeConstraint = HingeConstraint;
    var PointToPointConstraint = (function (_super) {
        __extends(PointToPointConstraint, _super);
        function PointToPointConstraint() {
            _super.apply(this, arguments);
            this.connectedBody = null;
            this.pivotA = null;
            this.pivotB = null;
        }
        PointToPointConstraint.create = function (rigidBody) {
            var obj = new this(rigidBody);
            return obj;
        };
        return PointToPointConstraint;
    }(PhysicsConstraint));
    wd.PointToPointConstraint = PointToPointConstraint;
    var PointToPointConstraintList = (function () {
        function PointToPointConstraintList(rigidBody) {
            this._rigidBody = null;
            this._list = wdCb.Collection.create();
            this._rigidBody = rigidBody;
        }
        PointToPointConstraintList.create = function (rigidBody) {
            var obj = new this(rigidBody);
            return obj;
        };
        PointToPointConstraintList.prototype.forEach = function (func, context) {
            if (context === void 0) { context = wd.root; }
            this._list.forEach(func, context);
        };
        PointToPointConstraintList.prototype.getCount = function () {
            return this._list.getCount();
        };
        PointToPointConstraintList.prototype.addChild = function (constraint) {
            var engineAdapter = null;
            this._list.addChild(constraint);
            if (!this._rigidBody.isPhysicsEngineAdapterExist()) {
                return;
            }
            engineAdapter = this._rigidBody.getPhysicsEngineAdapter();
            engineAdapter.addPointToPointConstraint(this._rigidBody.entityObject, constraint);
        };
        PointToPointConstraintList.prototype.addChildren = function (arg) {
            var _this = this;
            if (wd.JudgeUtils.isArray(arg)) {
                for (var _i = 0, _a = arg; _i < _a.length; _i++) {
                    var constraint = _a[_i];
                    this.addChild(constraint);
                }
            }
            else {
                var constraintList = arg;
                constraintList.forEach(function (constraint) {
                    _this.addChild(constraint);
                }, this);
            }
        };
        PointToPointConstraintList.prototype.removeChild = function (constraint) {
            var engineAdapter = null;
            this._list.removeChild(constraint);
            if (!this._rigidBody.isPhysicsEngineAdapterExist()) {
                return;
            }
            engineAdapter = this._rigidBody.getPhysicsEngineAdapter();
            engineAdapter.removePointToPointConstraint(constraint);
        };
        return PointToPointConstraintList;
    }());
    wd.PointToPointConstraintList = PointToPointConstraintList;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var PhysicsEngineFactory = (function () {
        function PhysicsEngineFactory() {
        }
        PhysicsEngineFactory.create = function (type) {
            var result = null;
            switch (type) {
                case wd.EPhysicsEngineType.CANNON:
                    result = wd.CannonAdapter.create();
                    break;
                default:
                    wdCb.Log.error(true, wdCb.Log.info.FUNC_UNEXPECT("physics engine type"));
                    break;
            }
            return result;
        };
        return PhysicsEngineFactory;
    }());
    wd.PhysicsEngineFactory = PhysicsEngineFactory;
})(wd || (wd = {}));
var wd;
(function (wd) {
    (function (EPhysicsEngineType) {
        EPhysicsEngineType[EPhysicsEngineType["CANNON"] = 0] = "CANNON";
    })(wd.EPhysicsEngineType || (wd.EPhysicsEngineType = {}));
    var EPhysicsEngineType = wd.EPhysicsEngineType;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var CannonDataList = (function () {
        function CannonDataList() {
            this.dataList = wdCb.Collection.create();
        }
        CannonDataList.prototype.getCount = function () {
            return this.dataList.getCount();
        };
        CannonDataList.prototype.removeByGameObject = function (obj) {
            this.dataList.removeChild(function (_a) {
                var entityObject = _a.entityObject, body = _a.body;
                return wd.JudgeUtils.isEqual(entityObject, obj);
            });
        };
        return CannonDataList;
    }());
    wd.CannonDataList = CannonDataList;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var CannonGameObjectDataList = (function (_super) {
        __extends(CannonGameObjectDataList, _super);
        function CannonGameObjectDataList() {
            _super.apply(this, arguments);
        }
        CannonGameObjectDataList.create = function () {
            var obj = new this();
            return obj;
        };
        CannonGameObjectDataList.prototype.remove = function (obj) {
            this.removeByGameObject(obj);
        };
        CannonGameObjectDataList.prototype.updateBodyTransformData = function () {
            this.dataList.forEach(function (_a) {
                var entityObject = _a.entityObject, body = _a.body;
                var transform = entityObject.transform;
                if (transform.isTranslate || transform.isRotate) {
                    body.position = wd.CannonUtils.convertToCannonVector3(entityObject.transform.position);
                    body.quaternion = wd.CannonUtils.convertToCannonQuaternion(entityObject.transform.rotation);
                }
            });
        };
        CannonGameObjectDataList.prototype.updateGameObjectTransformData = function () {
            this.dataList.forEach(function (_a) {
                var entityObject = _a.entityObject, body = _a.body;
                if (entityObject.hasTag("isRigidbodyChild")) {
                    return;
                }
                entityObject.transform.position = wd.CannonUtils.convertToWonderVector3(body.position);
                entityObject.transform.rotation = wd.CannonUtils.convertToWonderQuaternion(body.quaternion);
            });
        };
        CannonGameObjectDataList.prototype.add = function (obj, body) {
            this.dataList.addChild({
                entityObject: obj,
                body: body
            });
        };
        CannonGameObjectDataList.prototype.findGameObjectByBody = function (b) {
            var result = this.dataList.findOne(function (_a) {
                var entityObject = _a.entityObject, body = _a.body;
                return body === b;
            });
            return result !== null ? result.entityObject : null;
        };
        CannonGameObjectDataList.prototype.findBodyByGameObject = function (obj) {
            var result = this.dataList.findOne(function (_a) {
                var entityObject = _a.entityObject, body = _a.body;
                return wd.JudgeUtils.isEqual(entityObject, obj);
            });
            return result !== null ? result.body : null;
        };
        return CannonGameObjectDataList;
    }(wd.CannonDataList));
    wd.CannonGameObjectDataList = CannonGameObjectDataList;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var CannonMaterialList = (function (_super) {
        __extends(CannonMaterialList, _super);
        function CannonMaterialList() {
            _super.apply(this, arguments);
        }
        CannonMaterialList.create = function () {
            var obj = new this();
            return obj;
        };
        CannonMaterialList.prototype.remove = function (obj) {
            this.removeByGameObject(obj);
        };
        CannonMaterialList.prototype.findMaterialByGameObject = function (obj) {
            var result = this.dataList.findOne(function (_a) {
                var entityObject = _a.entityObject, material = _a.material;
                return wd.JudgeUtils.isEqual(entityObject, obj);
            });
            return result !== null ? result.material : null;
        };
        CannonMaterialList.prototype.add = function (obj, material) {
            this.dataList.addChild({
                entityObject: obj,
                material: material
            });
        };
        CannonMaterialList.prototype.addContactMaterial = function (world, currentMaterial, friction, restitution) {
            this.dataList.forEach(function (_a) {
                var entityObject = _a.entityObject, material = _a.material;
                world.addContactMaterial(new CANNON.ContactMaterial(material, currentMaterial, {
                    friction: friction,
                    restitution: restitution
                }));
            });
        };
        CannonMaterialList.prototype.getContactMaterialData = function (world, currentMaterial, dataName) {
            var result = null;
            this.dataList.forEach(function (_a) {
                var entityObject = _a.entityObject, material = _a.material;
                var contactMaterial = world.getContactMaterial(material, currentMaterial);
                if (!contactMaterial) {
                    return;
                }
                result = contactMaterial[dataName];
                return wdCb.$BREAK;
            });
            return result;
        };
        CannonMaterialList.prototype.getContactMaterials = function (world, currentMaterial) {
            var resultArr = [];
            this.dataList.forEach(function (_a) {
                var entityObject = _a.entityObject, material = _a.material;
                var contactMaterial = world.getContactMaterial(material, currentMaterial);
                if (!contactMaterial) {
                    return;
                }
                resultArr.push(contactMaterial);
            });
            return resultArr;
        };
        CannonMaterialList.prototype.setContactMaterialData = function (world, currentMaterial, dataName, data) {
            this.dataList.forEach(function (_a) {
                var entityObject = _a.entityObject, material = _a.material;
                var contactMaterial = world.getContactMaterial(material, currentMaterial);
                if (!contactMaterial) {
                    return;
                }
                contactMaterial[dataName] = data;
            });
        };
        return CannonMaterialList;
    }(wd.CannonDataList));
    wd.CannonMaterialList = CannonMaterialList;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var CannonConstraintDataList = (function (_super) {
        __extends(CannonConstraintDataList, _super);
        function CannonConstraintDataList() {
            _super.apply(this, arguments);
        }
        return CannonConstraintDataList;
    }(wd.CannonDataList));
    wd.CannonConstraintDataList = CannonConstraintDataList;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var CannonSingleConstraintDataList = (function (_super) {
        __extends(CannonSingleConstraintDataList, _super);
        function CannonSingleConstraintDataList() {
            _super.apply(this, arguments);
        }
        CannonSingleConstraintDataList.prototype.add = function (obj, constraint) {
            this.dataList.addChild({
                entityObject: obj,
                constraint: constraint
            });
        };
        CannonSingleConstraintDataList.prototype.remove = function (obj) {
            this.removeByGameObject(obj);
        };
        CannonSingleConstraintDataList.prototype.findConstraintByGameObject = function (obj) {
            var result = this.dataList.findOne(function (_a) {
                var entityObject = _a.entityObject;
                return wd.JudgeUtils.isEqual(entityObject, obj);
            });
            return result !== null ? result.constraint : null;
        };
        return CannonSingleConstraintDataList;
    }(wd.CannonConstraintDataList));
    wd.CannonSingleConstraintDataList = CannonSingleConstraintDataList;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var CannonLockConstraintDataList = (function (_super) {
        __extends(CannonLockConstraintDataList, _super);
        function CannonLockConstraintDataList() {
            _super.apply(this, arguments);
        }
        CannonLockConstraintDataList.create = function () {
            var obj = new this();
            return obj;
        };
        return CannonLockConstraintDataList;
    }(wd.CannonSingleConstraintDataList));
    wd.CannonLockConstraintDataList = CannonLockConstraintDataList;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var CannonPointToPointConstraintDataList = (function (_super) {
        __extends(CannonPointToPointConstraintDataList, _super);
        function CannonPointToPointConstraintDataList() {
            _super.apply(this, arguments);
        }
        CannonPointToPointConstraintDataList.create = function () {
            var obj = new this();
            return obj;
        };
        CannonPointToPointConstraintDataList.prototype.filter = function (func) {
            return this.dataList.filter(func);
        };
        CannonPointToPointConstraintDataList.prototype.forEach = function (func) {
            this.dataList.forEach(func);
        };
        CannonPointToPointConstraintDataList.prototype.add = function (entityObject, pointToPointConstraint, constraint) {
            this.dataList.addChild({
                entityObject: entityObject,
                pointToPointConstraint: pointToPointConstraint,
                cannonConstraint: constraint
            });
        };
        CannonPointToPointConstraintDataList.prototype.remove = function (constraint) {
            this.dataList.removeChild(function (_a) {
                var pointToPointConstraint = _a.pointToPointConstraint;
                return wd.JudgeUtils.isEqual(pointToPointConstraint, constraint);
            });
        };
        CannonPointToPointConstraintDataList.prototype.findCannonConstraintByPointToPointConstraint = function (constraint) {
            var result = this.dataList.findOne(function (_a) {
                var pointToPointConstraint = _a.pointToPointConstraint;
                return wd.JudgeUtils.isEqual(pointToPointConstraint, constraint);
            });
            return result !== null ? result.cannonConstraint : null;
        };
        return CannonPointToPointConstraintDataList;
    }(wd.CannonConstraintDataList));
    wd.CannonPointToPointConstraintDataList = CannonPointToPointConstraintDataList;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var CannonDistanceConstraintDataList = (function (_super) {
        __extends(CannonDistanceConstraintDataList, _super);
        function CannonDistanceConstraintDataList() {
            _super.apply(this, arguments);
        }
        CannonDistanceConstraintDataList.create = function () {
            var obj = new this();
            return obj;
        };
        return CannonDistanceConstraintDataList;
    }(wd.CannonSingleConstraintDataList));
    wd.CannonDistanceConstraintDataList = CannonDistanceConstraintDataList;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var CannonHingeConstraintDataList = (function (_super) {
        __extends(CannonHingeConstraintDataList, _super);
        function CannonHingeConstraintDataList() {
            _super.apply(this, arguments);
        }
        CannonHingeConstraintDataList.create = function () {
            var obj = new this();
            return obj;
        };
        return CannonHingeConstraintDataList;
    }(wd.CannonSingleConstraintDataList));
    wd.CannonHingeConstraintDataList = CannonHingeConstraintDataList;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var CannonUtils = (function () {
        function CannonUtils() {
        }
        CannonUtils.convertToCannonVector3 = function (v) {
            return new CANNON.Vec3(v.x, v.y, v.z);
        };
        CannonUtils.convertToCannonQuaternion = function (rotation) {
            return new CANNON.Quaternion(rotation.x, rotation.y, rotation.z, rotation.w);
        };
        CannonUtils.convertToWonderVector3 = function (v) {
            return wd.Vector3.create(v.x, v.y, v.z);
        };
        CannonUtils.convertToWonderQuaternion = function (r) {
            return wd.Quaternion.create(r.x, r.y, r.z, r.w);
        };
        return CannonUtils;
    }());
    wd.CannonUtils = CannonUtils;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var CannonAdapter = (function () {
        function CannonAdapter() {
            this.world = null;
            this._materialList = wd.CannonMaterialList.create();
            this._gameObjectDataList = wd.CannonGameObjectDataList.create();
            this._lockConstraintDataList = wd.CannonLockConstraintDataList.create();
            this._distanceConstraintDataList = wd.CannonDistanceConstraintDataList.create();
            this._hingeConstraintDataList = wd.CannonHingeConstraintDataList.create();
            this._pointToPointConstraintDataList = wd.CannonPointToPointConstraintDataList.create();
            this._dynamicBody = null;
            this._kinematicBody = null;
            this._staticBody = null;
            this._lockConstraint = null;
            this._distanceConstraint = null;
            this._hingeConstraint = null;
            this._pointToPointConstraint = null;
        }
        CannonAdapter.create = function () {
            var obj = new this();
            return obj;
        };
        CannonAdapter.prototype.getGravity = function (gravity) {
            return wd.CannonUtils.convertToWonderVector3(this.world.gravity);
        };
        CannonAdapter.prototype.setGravity = function (gravity) {
            this.world.gravity = wd.CannonUtils.convertToCannonVector3(gravity);
        };
        CannonAdapter.prototype.getFriction = function (obj, friction) {
            return this._getMaterialData(obj, "friction");
        };
        CannonAdapter.prototype.setFriction = function (obj, friction) {
            this._setMaterialData(obj, "friction", friction);
        };
        CannonAdapter.prototype.getRestitution = function (obj, restitution) {
            return this._getMaterialData(obj, "restitution");
        };
        CannonAdapter.prototype.setRestitution = function (obj, restitution) {
            this._setMaterialData(obj, "restitution", restitution);
        };
        CannonAdapter.prototype.getLinearDamping = function (obj) {
            return this._getNumberData(obj, "linearDamping");
        };
        CannonAdapter.prototype.setLinearDamping = function (obj, linearDamping) {
            return this._setNumberData(obj, "linearDamping", linearDamping);
        };
        CannonAdapter.prototype.getAngularDamping = function (obj) {
            return this._getNumberData(obj, "angularDamping");
        };
        CannonAdapter.prototype.setAngularDamping = function (obj, angularDamping) {
            return this._setNumberData(obj, "angularDamping", angularDamping);
        };
        CannonAdapter.prototype.getMass = function (obj) {
            return this._getNumberData(obj, "mass");
        };
        CannonAdapter.prototype.setMass = function (obj, mass) {
            return this._setNumberData(obj, "mass", mass);
        };
        CannonAdapter.prototype.getVelocity = function (obj) {
            return this._getVec3Data(obj, "velocity");
        };
        CannonAdapter.prototype.setVelocity = function (obj, velocity) {
            this._setVec3Data(obj, "velocity", velocity);
        };
        CannonAdapter.prototype.getAngularVelocity = function (obj) {
            return this._getVec3Data(obj, "angularVelocity");
        };
        CannonAdapter.prototype.setAngularVelocity = function (obj, angularVelocity) {
            this._setVec3Data(obj, "angularVelocity", angularVelocity);
        };
        CannonAdapter.prototype.init = function () {
            var _a = wd.Director.getInstance().scene.physics, gravity = _a.gravity, iterations = _a.iterations;
            this.world = new CANNON.World();
            this.world.broadphase = new CANNON.NaiveBroadphase();
            this.world.solver.iterations = iterations;
            this.world.gravity.set(gravity.x, gravity.y, gravity.z);
            this._dynamicBody = wd.CannonDynamicBody.create(this.world, this._gameObjectDataList, this._materialList);
            this._kinematicBody = wd.CannonKinematicBody.create(this.world, this._gameObjectDataList, this._materialList);
            this._staticBody = wd.CannonStaticBody.create(this.world, this._gameObjectDataList, this._materialList);
            this._lockConstraint = wd.CannonLockConstraint.create(this.world, this._gameObjectDataList, this._lockConstraintDataList);
            this._distanceConstraint = wd.CannonDistanceConstraint.create(this.world, this._gameObjectDataList, this._distanceConstraintDataList);
            this._hingeConstraint = wd.CannonHingeConstraint.create(this.world, this._gameObjectDataList, this._hingeConstraintDataList);
            this._pointToPointConstraint = wd.CannonPointToPointConstraint.create(this.world, this._gameObjectDataList, this._pointToPointConstraintDataList);
        };
        CannonAdapter.prototype.addDynamicBody = function (entityObject, data) {
            this._dynamicBody.addBody(entityObject, data);
        };
        CannonAdapter.prototype.addKinematicBody = function (entityObject, data) {
            this._kinematicBody.addBody(entityObject, data);
        };
        CannonAdapter.prototype.addStaticBody = function (entityObject, data) {
            this._staticBody.addBody(entityObject, data);
        };
        CannonAdapter.prototype.addLockConstraint = function (entityObject, lockConstraint) {
            this._lockConstraint.addConstraint(entityObject, lockConstraint);
        };
        CannonAdapter.prototype.removeLockConstraint = function (entityObject) {
            this._lockConstraint.removeConstraint(entityObject);
        };
        CannonAdapter.prototype.addDistanceConstraint = function (entityObject, distanceConstraint) {
            this._distanceConstraint.addConstraint(entityObject, distanceConstraint);
        };
        CannonAdapter.prototype.removeDistanceConstraint = function (entityObject) {
            this._distanceConstraint.removeConstraint(entityObject);
        };
        CannonAdapter.prototype.addHingeConstraint = function (entityObject, hingeConstraint) {
            this._hingeConstraint.addConstraint(entityObject, hingeConstraint);
        };
        CannonAdapter.prototype.removeHingeConstraint = function (entityObject) {
            this._hingeConstraint.removeConstraint(entityObject);
        };
        CannonAdapter.prototype.addPointToPointConstraint = function (entityObject, pointToPointConstraint) {
            this._pointToPointConstraint.addConstraint(entityObject, pointToPointConstraint);
        };
        CannonAdapter.prototype.removePointToPointConstraint = function (pointToPointConstraint) {
            this._pointToPointConstraint.removeConstraint(pointToPointConstraint);
        };
        CannonAdapter.prototype.removeGameObject = function (obj) {
            var material = this._getMaterial(obj), body = this._gameObjectDataList.findBodyByGameObject(obj);
            if (body) {
                this.world.remove(body);
            }
            this._gameObjectDataList.remove(obj);
            this._materialList.remove(obj);
        };
        CannonAdapter.prototype.removeConstraints = function (obj) {
            var self = this;
            this._lockConstraint.removeConstraint(obj);
            this._distanceConstraint.removeConstraint(obj);
            this._hingeConstraint.removeConstraint(obj);
            this._pointToPointConstraintDataList
                .filter(function (_a) {
                var entityObject = _a.entityObject;
                return wd.JudgeUtils.isEqual(entityObject, obj);
            })
                .forEach(function (_a) {
                var pointToPointConstraint = _a.pointToPointConstraint;
                self._pointToPointConstraint.removeConstraint(pointToPointConstraint);
            });
        };
        CannonAdapter.prototype.update = function (elapsedTime) {
            this._gameObjectDataList.updateBodyTransformData();
            this.world.step(wd.Director.getInstance().getDeltaTime() / 1000);
            this._gameObjectDataList.updateGameObjectTransformData();
        };
        CannonAdapter.prototype._getMaterial = function (obj) {
            return this._materialList.findMaterialByGameObject(obj);
        };
        CannonAdapter.prototype._getNumberData = function (obj, dataName) {
            var body = this._gameObjectDataList.findBodyByGameObject(obj);
            if (!body) {
                return null;
            }
            return body[dataName];
        };
        CannonAdapter.prototype._setNumberData = function (obj, dataName, data) {
            var body = this._gameObjectDataList.findBodyByGameObject(obj);
            if (!body) {
                return null;
            }
            body[dataName] = data;
        };
        CannonAdapter.prototype._getVec3Data = function (obj, dataName) {
            var body = this._gameObjectDataList.findBodyByGameObject(obj);
            if (!body) {
                return null;
            }
            return wd.CannonUtils.convertToWonderVector3(body[dataName]);
        };
        CannonAdapter.prototype._setVec3Data = function (obj, dataName, data) {
            var body = this._gameObjectDataList.findBodyByGameObject(obj);
            if (!body) {
                return null;
            }
            body[dataName] = wd.CannonUtils.convertToCannonVector3(data);
        };
        CannonAdapter.prototype._getMaterialData = function (obj, dataName) {
            var result = null, currentMaterial = this._getMaterial(obj);
            if (!currentMaterial) {
                return null;
            }
            return this._materialList.getContactMaterialData(this.world, currentMaterial, dataName);
        };
        CannonAdapter.prototype._setMaterialData = function (obj, dataName, data) {
            var world = this.world, currentMaterial = this._getMaterial(obj);
            if (!currentMaterial) {
                wd.Log.warn("no material find, please add material first");
                return;
            }
            this._materialList.setContactMaterialData(this.world, currentMaterial, dataName, data);
        };
        __decorate([
            wd.require(function (obj, dataName) {
                var resultArr = [], firstData = null, currentMaterial = this._getMaterial(obj);
                if (!currentMaterial) {
                    return null;
                }
                resultArr = this._materialList.getContactMaterials(this.world, currentMaterial);
                firstData = resultArr[0];
                for (var _i = 0, resultArr_1 = resultArr; _i < resultArr_1.length; _i++) {
                    var data = resultArr_1[_i];
                    wd.assert(data === firstData, wd.Log.info.FUNC_SHOULD("the data of contact material which contains the same material", "be the same"));
                }
            })
        ], CannonAdapter.prototype, "_getMaterialData", null);
        return CannonAdapter;
    }());
    wd.CannonAdapter = CannonAdapter;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var CannonBody = (function () {
        function CannonBody(world, gameObjectDataList, materialList) {
            this.world = null;
            this.materialList = null;
            this.gameObjectList = null;
            this.world = world;
            this.gameObjectList = gameObjectDataList;
            this.materialList = materialList;
        }
        CannonBody.prototype.addBody = function (entityObject, data) {
            var body = this.createBody(data);
            if (data.children.getCount() > 0) {
                this._addCompounds(entityObject, data.children, body);
            }
            else {
                body.addShape(this._createShape(entityObject.getComponent(wd.Collider).shape));
            }
            this.afterAddShape(body, data);
            body.material = this._createMaterial(entityObject, data.friction, data.restitution);
            body.position = wd.CannonUtils.convertToCannonVector3(data.position);
            body.quaternion = wd.CannonUtils.convertToCannonQuaternion(data.rotation);
            this.world.addBody(body);
            this.gameObjectList.add(entityObject, body);
            this._bindCollideEvent(body, data.onCollisionStart, data.onContact, data.onCollisionEnd);
            return body;
        };
        CannonBody.prototype.afterAddShape = function (body, data) {
        };
        CannonBody.prototype._createShape = function (shape) {
            var cannonShape = null;
            if (shape instanceof wd.AABBShape) {
                cannonShape = new CANNON.Box(wd.CannonUtils.convertToCannonVector3(shape.halfExtents));
            }
            else if (shape instanceof wd.SphereShape) {
                cannonShape = new CANNON.Sphere(shape.radius);
            }
            return cannonShape;
        };
        CannonBody.prototype._bindCollideEvent = function (targetBody, onCollisionStart, onContact, onCollisionEnd) {
            var self = this;
            targetBody.addEventListener("collide", function (e) {
                var entityObject = self.gameObjectList.findGameObjectByBody(e.body), collideObject = null;
                if (!entityObject) {
                    return;
                }
                collideObject = entityObject;
                onCollisionStart(collideObject);
                onContact(collideObject);
                onCollisionEnd(collideObject);
            });
        };
        CannonBody.prototype._createMaterial = function (entityObject, friction, restitution) {
            var material = null, currentMaterial = null;
            material = this._getMaterial(entityObject);
            if (material) {
                return material;
            }
            currentMaterial = new CANNON.Material("material");
            this._addMaterial(entityObject, currentMaterial, friction, restitution);
            return currentMaterial;
        };
        CannonBody.prototype._getMaterial = function (obj) {
            return this.materialList.findMaterialByGameObject(obj);
        };
        CannonBody.prototype._addMaterial = function (entityObject, currentMaterial, friction, restitution) {
            this.materialList.add(entityObject, currentMaterial);
            this.materialList.addContactMaterial(this.world, currentMaterial, friction, restitution);
        };
        CannonBody.prototype._addCompounds = function (entityObject, children, body) {
            var _this = this;
            var position = entityObject.transform.position, rotation = entityObject.transform.rotation;
            children.forEach(function (child) {
                body.addShape(_this._createShape(child.getComponent(wd.Collider).shape), wd.CannonUtils.convertToCannonVector3(child.transform.position.copy().sub(position)), wd.CannonUtils.convertToCannonQuaternion(child.transform.rotation.copy().sub(rotation)));
            }, this);
        };
        __decorate([
            wd.virtual
        ], CannonBody.prototype, "afterAddShape", null);
        __decorate([
            wd.require(function (entityObject, children, body) {
                children.forEach(function (child) {
                    wd.assert(!!child.getComponent(wd.Collider), wd.Log.info.FUNC_MUST_DEFINE("collider component"));
                    wd.assert(!!child.getComponent(wd.Collider).shape, wd.Log.info.FUNC_SHOULD("create collider.shape"));
                });
            })
        ], CannonBody.prototype, "_addCompounds", null);
        return CannonBody;
    }());
    wd.CannonBody = CannonBody;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var CannonDynamicBody = (function (_super) {
        __extends(CannonDynamicBody, _super);
        function CannonDynamicBody() {
            _super.apply(this, arguments);
        }
        CannonDynamicBody.create = function (world, gameObjectDataList, materialList) {
            var obj = new this(world, gameObjectDataList, materialList);
            return obj;
        };
        CannonDynamicBody.prototype.createBody = function (_a) {
            var mass = _a.mass, linearDamping = _a.linearDamping, angularDamping = _a.angularDamping, velocity = _a.velocity, angularVelocity = _a.angularVelocity;
            return new CANNON.Body({
                mass: mass,
                linearDamping: linearDamping,
                angularDamping: angularDamping,
                velocity: wd.CannonUtils.convertToCannonVector3(velocity),
                angularVelocity: wd.CannonUtils.convertToCannonVector3(angularVelocity)
            });
        };
        CannonDynamicBody.prototype.afterAddShape = function (body, _a) {
            var impulse = _a.impulse, force = _a.force, hitPoint = _a.hitPoint;
            if (impulse && hitPoint) {
                body.applyImpulse(wd.CannonUtils.convertToCannonVector3(impulse), wd.CannonUtils.convertToCannonVector3(hitPoint));
            }
            if (force && hitPoint) {
                body.applyForce(wd.CannonUtils.convertToCannonVector3(force), wd.CannonUtils.convertToCannonVector3(hitPoint));
            }
        };
        return CannonDynamicBody;
    }(wd.CannonBody));
    wd.CannonDynamicBody = CannonDynamicBody;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var CannonKinematicBody = (function (_super) {
        __extends(CannonKinematicBody, _super);
        function CannonKinematicBody() {
            _super.apply(this, arguments);
        }
        CannonKinematicBody.create = function (world, gameObjectDataList, materialList) {
            var obj = new this(world, gameObjectDataList, materialList);
            return obj;
        };
        CannonKinematicBody.prototype.createBody = function (_a) {
            var mass = _a.mass, velocity = _a.velocity, angularVelocity = _a.angularVelocity;
            return new CANNON.Body({
                type: CANNON.Body.KINEMATIC,
                mass: mass,
                velocity: wd.CannonUtils.convertToCannonVector3(velocity),
                angularVelocity: wd.CannonUtils.convertToCannonVector3(angularVelocity)
            });
        };
        return CannonKinematicBody;
    }(wd.CannonBody));
    wd.CannonKinematicBody = CannonKinematicBody;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var CannonStaticBody = (function (_super) {
        __extends(CannonStaticBody, _super);
        function CannonStaticBody() {
            _super.apply(this, arguments);
        }
        CannonStaticBody.create = function (world, gameObjectDataList, materialList) {
            var obj = new this(world, gameObjectDataList, materialList);
            return obj;
        };
        CannonStaticBody.prototype.createBody = function (_a) {
            return new CANNON.Body({
                mass: 0
            });
        };
        return CannonStaticBody;
    }(wd.CannonBody));
    wd.CannonStaticBody = CannonStaticBody;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var CannonConstraint = (function () {
        function CannonConstraint(world, gameObjectDataList, constraintDataList) {
            this.world = null;
            this.gameObjectList = null;
            this.constraintDataList = null;
            this.world = world;
            this.gameObjectList = gameObjectDataList;
            this.constraintDataList = constraintDataList;
        }
        CannonConstraint.prototype.addConstraint = function (entityObject, wonderConstraint) {
            var constraint = null, body = this.gameObjectList.findBodyByGameObject(entityObject);
            constraint = this.createCannonConstraint(body, wonderConstraint);
            this.world.addConstraint(constraint);
            this.addToConstraintDataList(entityObject, wonderConstraint, constraint);
        };
        CannonConstraint.prototype.findBody = function (rigidBody) {
            return this.gameObjectList.findBodyByGameObject(rigidBody.entityObject);
        };
        __decorate([
            wd.require(function (entityObject, pointToPointConstraint) {
                wd.assert(this.gameObjectList.findBodyByGameObject(entityObject) !== null, wd.Log.info.FUNC_SHOULD("add rigid body"));
                wd.assert(this.findBody(pointToPointConstraint.connectedBody), wd.Log.info.FUNC_SHOULD("add connectedBody"));
            })
        ], CannonConstraint.prototype, "addConstraint", null);
        return CannonConstraint;
    }());
    wd.CannonConstraint = CannonConstraint;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var CannonSingleConstraint = (function (_super) {
        __extends(CannonSingleConstraint, _super);
        function CannonSingleConstraint() {
            _super.apply(this, arguments);
        }
        CannonSingleConstraint.prototype.removeConstraint = function (entityObject) {
            var constraint = this.constraintDataList.findConstraintByGameObject(entityObject);
            if (constraint) {
                this.world.removeConstraint(constraint);
            }
            this.constraintDataList.remove(entityObject);
        };
        CannonSingleConstraint.prototype.addToConstraintDataList = function (entityObject, wonderConstraint, cannonConstraint) {
            this.constraintDataList.add(entityObject, cannonConstraint);
        };
        return CannonSingleConstraint;
    }(wd.CannonConstraint));
    wd.CannonSingleConstraint = CannonSingleConstraint;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var CannonLockConstraint = (function (_super) {
        __extends(CannonLockConstraint, _super);
        function CannonLockConstraint() {
            _super.apply(this, arguments);
        }
        CannonLockConstraint.create = function (world, gameObjectDataList, constraintDataList) {
            var obj = new this(world, gameObjectDataList, constraintDataList);
            return obj;
        };
        CannonLockConstraint.prototype.createCannonConstraint = function (body, lockConstraint) {
            var constraint = null, connectedBody = this.findBody(lockConstraint.connectedBody);
            if (lockConstraint.maxForce) {
                constraint = new CANNON.LockConstraint(body, connectedBody, lockConstraint.maxForce);
            }
            else {
                constraint = new CANNON.LockConstraint(body, connectedBody);
            }
            return constraint;
        };
        return CannonLockConstraint;
    }(wd.CannonSingleConstraint));
    wd.CannonLockConstraint = CannonLockConstraint;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var CannonPointToPointConstraint = (function (_super) {
        __extends(CannonPointToPointConstraint, _super);
        function CannonPointToPointConstraint() {
            _super.apply(this, arguments);
        }
        CannonPointToPointConstraint.create = function (world, gameObjectDataList, constraintDataList) {
            var obj = new this(world, gameObjectDataList, constraintDataList);
            return obj;
        };
        CannonPointToPointConstraint.prototype.removeConstraint = function (pointToPointConstraint) {
            var constraint = this.constraintDataList.findCannonConstraintByPointToPointConstraint(pointToPointConstraint);
            if (constraint) {
                this.world.removeConstraint(constraint);
            }
            this.constraintDataList.remove(pointToPointConstraint);
        };
        CannonPointToPointConstraint.prototype.createCannonConstraint = function (body, pointToPointConstraint) {
            var constraint = null, connectedBody = this.findBody(pointToPointConstraint.connectedBody), pivotA = wd.CannonUtils.convertToCannonVector3(pointToPointConstraint.pivotA), pivotB = wd.CannonUtils.convertToCannonVector3(pointToPointConstraint.pivotB);
            if (pointToPointConstraint.maxForce) {
                constraint = new CANNON.PointToPointConstraint(body, pivotA, connectedBody, pivotB, pointToPointConstraint.maxForce);
            }
            else {
                constraint = new CANNON.PointToPointConstraint(body, pivotA, connectedBody, pivotB);
            }
            return constraint;
        };
        CannonPointToPointConstraint.prototype.addToConstraintDataList = function (entityObject, wonderConstraint, cannonConstraint) {
            this.constraintDataList.add(entityObject, wonderConstraint, cannonConstraint);
        };
        return CannonPointToPointConstraint;
    }(wd.CannonConstraint));
    wd.CannonPointToPointConstraint = CannonPointToPointConstraint;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var CannonDistanceConstraint = (function (_super) {
        __extends(CannonDistanceConstraint, _super);
        function CannonDistanceConstraint() {
            _super.apply(this, arguments);
        }
        CannonDistanceConstraint.create = function (world, gameObjectDataList, constraintDataList) {
            var obj = new this(world, gameObjectDataList, constraintDataList);
            return obj;
        };
        CannonDistanceConstraint.prototype.createCannonConstraint = function (body, distanceConstraint) {
            var constraint = null, connectedBody = this.findBody(distanceConstraint.connectedBody);
            constraint = new CANNON.DistanceConstraint(body, connectedBody, distanceConstraint.distance !== null ? distanceConstraint.distance : void 0, distanceConstraint.maxForce !== null ? distanceConstraint.maxForce : void 0);
            return constraint;
        };
        return CannonDistanceConstraint;
    }(wd.CannonSingleConstraint));
    wd.CannonDistanceConstraint = CannonDistanceConstraint;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var CannonHingeConstraint = (function (_super) {
        __extends(CannonHingeConstraint, _super);
        function CannonHingeConstraint() {
            _super.apply(this, arguments);
        }
        CannonHingeConstraint.create = function (world, gameObjectDataList, constraintDataList) {
            var obj = new this(world, gameObjectDataList, constraintDataList);
            return obj;
        };
        CannonHingeConstraint.prototype.createCannonConstraint = function (body, hingeConstraint) {
            var constraint = null, connectedBody = this.findBody(hingeConstraint.connectedBody), pivotA = wd.CannonUtils.convertToCannonVector3(hingeConstraint.pivotA), axisA = wd.CannonUtils.convertToCannonVector3(hingeConstraint.axisA), pivotB = wd.CannonUtils.convertToCannonVector3(hingeConstraint.pivotB), axisB = wd.CannonUtils.convertToCannonVector3(hingeConstraint.axisB), options = {};
            if (hingeConstraint.pivotA) {
                options.pivotA = pivotA;
            }
            if (hingeConstraint.axisA) {
                options.axisA = axisA;
            }
            if (hingeConstraint.pivotB) {
                options.pivotB = pivotB;
            }
            if (hingeConstraint.axisB) {
                options.axisB = axisB;
            }
            if (hingeConstraint.maxForce) {
                options.maxForce = hingeConstraint.maxForce;
            }
            constraint = new CANNON.HingeConstraint(body, connectedBody, options);
            return constraint;
        };
        return CannonHingeConstraint;
    }(wd.CannonSingleConstraint));
    wd.CannonHingeConstraint = CannonHingeConstraint;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var Light = (function (_super) {
        __extends(Light, _super);
        function Light() {
            _super.apply(this, arguments);
            this._shadowMapWidth = null;
            this._shadowMapHeight = null;
            this.color = wd.Color.create("#ffffff");
            this.castShadow = false;
            this.shadowCameraNear = 0.1;
            this.shadowCameraFar = 5000;
            this.shadowBias = wd.ShaderChunk.NULL;
            this.shadowDarkness = 0;
            this.shadowMap = null;
            this.shadowMapRenderer = null;
        }
        Object.defineProperty(Light.prototype, "position", {
            get: function () {
                return this.entityObject.transform.position;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Light.prototype, "shadowMapWidth", {
            get: function () {
                var maxCubemapTextureSize = wd.GPUDetector.getInstance().maxCubemapTextureSize;
                if (!this._shadowMapWidth || this._shadowMapWidth > maxCubemapTextureSize) {
                    return maxCubemapTextureSize;
                }
                return this._shadowMapWidth;
            },
            set: function (shadowMapWidth) {
                this._shadowMapWidth = shadowMapWidth;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Light.prototype, "shadowMapHeight", {
            get: function () {
                var maxCubemapTextureSize = wd.GPUDetector.getInstance().maxCubemapTextureSize;
                if (!this._shadowMapHeight || this._shadowMapHeight > maxCubemapTextureSize) {
                    return maxCubemapTextureSize;
                }
                return this._shadowMapHeight;
            },
            set: function (shadowMapHeight) {
                this._shadowMapHeight = shadowMapHeight;
            },
            enumerable: true,
            configurable: true
        });
        return Light;
    }(wd.Component));
    wd.Light = Light;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var AmbientLight = (function (_super) {
        __extends(AmbientLight, _super);
        function AmbientLight() {
            _super.apply(this, arguments);
        }
        AmbientLight.create = function () {
            var obj = new this();
            return obj;
        };
        AmbientLight.type = "ambientLight";
        return AmbientLight;
    }(wd.Light));
    wd.AmbientLight = AmbientLight;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var SourceLight = (function (_super) {
        __extends(SourceLight, _super);
        function SourceLight() {
            _super.apply(this, arguments);
            this.intensity = 1;
            this._beforeInitSubscription = null;
        }
        SourceLight.prototype.initWhenCreate = function () {
            var self = this;
            this._beforeInitSubscription = wd.EventManager.fromEvent(wd.EEngineEvent.BEFORE_GAMEOBJECT_INIT)
                .subscribe(function () {
                self.beforeInitHandler();
            });
        };
        SourceLight.prototype.dispose = function () {
            this.shadowMap && this.shadowMap.dispose();
            wd.Director.getInstance().scene.removeRenderTargetRenderer(this.shadowMapRenderer);
            this._beforeInitSubscription && this._beforeInitSubscription.dispose();
        };
        SourceLight.prototype.beforeInitHandler = function () {
            if (this.castShadow) {
                this.shadowMap = this.createShadowMap();
                this.shadowMapRenderer = this.createShadowMapRenderer();
                wd.Director.getInstance().scene.addRenderTargetRenderer(this.shadowMapRenderer);
            }
        };
        __decorate([
            wd.execOnlyOnce("_isBeforeInit")
        ], SourceLight.prototype, "beforeInitHandler", null);
        return SourceLight;
    }(wd.Light));
    wd.SourceLight = SourceLight;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var DirectionLight = (function (_super) {
        __extends(DirectionLight, _super);
        function DirectionLight() {
            _super.apply(this, arguments);
            this._shadowRenderList = null;
            this.shadowCameraLeft = -1000;
            this.shadowCameraRight = 1000;
            this.shadowCameraTop = 1000;
            this.shadowCameraBottom = -1000;
        }
        DirectionLight.create = function () {
            var obj = new this();
            obj.initWhenCreate();
            return obj;
        };
        Object.defineProperty(DirectionLight.prototype, "shadowRenderList", {
            get: function () {
                return this._shadowRenderList;
            },
            set: function (shadowRenderList) {
                this._shadowRenderList = wdCb.Collection.create(shadowRenderList);
            },
            enumerable: true,
            configurable: true
        });
        DirectionLight.prototype.createShadowMap = function () {
            return wd.TwoDShadowMapTexture.create();
        };
        DirectionLight.prototype.createShadowMapRenderer = function () {
            return wd.TwoDShadowMapRenderTargetRenderer.create(this);
        };
        DirectionLight.type = "directionLight";
        DirectionLight.defaultPosition = wd.Vector3.create(0, 0, 1);
        __decorate([
            wd.requireSetter(function (shadowRenderList) {
                wd.assert(wd.JudgeUtils.isArray(shadowRenderList), wd.Log.info.FUNC_MUST_BE("shadowRenderList", "array"));
            })
        ], DirectionLight.prototype, "shadowRenderList", null);
        return DirectionLight;
    }(wd.SourceLight));
    wd.DirectionLight = DirectionLight;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var PointLight = (function (_super) {
        __extends(PointLight, _super);
        function PointLight() {
            _super.apply(this, arguments);
            this._rangeLevel = null;
            this._shadowRenderList = wdCb.Hash.create();
            this._attenuation = wd.Attenuation.create();
        }
        PointLight.create = function () {
            var obj = new this();
            obj.initWhenCreate();
            return obj;
        };
        Object.defineProperty(PointLight.prototype, "rangeLevel", {
            get: function () {
                return this._rangeLevel;
            },
            set: function (rangeLevel) {
                this._rangeLevel = rangeLevel;
                this._attenuation.rangeLevel = this._rangeLevel;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PointLight.prototype, "range", {
            get: function () {
                return this._attenuation.range;
            },
            set: function (range) {
                this._attenuation.range = range;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PointLight.prototype, "constant", {
            get: function () {
                return this._attenuation.constant;
            },
            set: function (constant) {
                this._attenuation.constant = constant;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PointLight.prototype, "linear", {
            get: function () {
                return this._attenuation.linear;
            },
            set: function (linear) {
                this._attenuation.linear = linear;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PointLight.prototype, "quadratic", {
            get: function () {
                return this._attenuation.quadratic;
            },
            set: function (quadratic) {
                this._attenuation.quadratic = quadratic;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PointLight.prototype, "shadowRenderList", {
            get: function () {
                return this._shadowRenderList;
            },
            set: function (shadowRenderList) {
                shadowRenderList = shadowRenderList;
                for (var direction in shadowRenderList) {
                    if (shadowRenderList.hasOwnProperty(direction)) {
                        var list = shadowRenderList[direction];
                        this._shadowRenderList.addChild(direction, wdCb.Collection.create(list));
                    }
                }
            },
            enumerable: true,
            configurable: true
        });
        PointLight.prototype.createShadowMap = function () {
            return wd.CubemapShadowMapTexture.create();
        };
        PointLight.prototype.createShadowMapRenderer = function () {
            return wd.CubemapShadowMapRenderTargetRenderer.create(this);
        };
        PointLight.type = "pointLight";
        __decorate([
            wd.requireSetter(function (shadowRenderList) {
                wd.assert(wd.JudgeUtils.isDirectObject(shadowRenderList), wd.Log.info.FUNC_MUST_BE("shadowRenderList", "object"));
                for (var direction in shadowRenderList) {
                    if (shadowRenderList.hasOwnProperty(direction)) {
                        var list = shadowRenderList[direction];
                        wd.assert(wd.JudgeUtils.isArray(list) || shadowRenderList instanceof wdCb.Hash, wd.Log.info.FUNC_MUST_BE("renderList in each direction of shadowRenderList", "array"));
                    }
                }
            })
        ], PointLight.prototype, "shadowRenderList", null);
        return PointLight;
    }(wd.SourceLight));
    wd.PointLight = PointLight;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var Attenuation = (function () {
        function Attenuation() {
            this._constant = 1;
            this._range = null;
            this._linear = 0;
            this._quadratic = 0;
            this._rangeLevel = 0;
        }
        Attenuation.create = function () {
            var obj = new this();
            return obj;
        };
        Object.defineProperty(Attenuation.prototype, "constant", {
            get: function () {
                return this._constant;
            },
            set: function (constant) {
                this._constant = constant;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Attenuation.prototype, "range", {
            get: function () {
                return this._range;
            },
            set: function (range) {
                this._range = range;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Attenuation.prototype, "linear", {
            get: function () {
                return this._linear;
            },
            set: function (linear) {
                this._linear = linear;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Attenuation.prototype, "quadratic", {
            get: function () {
                return this._quadratic;
            },
            set: function (quadratic) {
                this._quadratic = quadratic;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Attenuation.prototype, "rangeLevel", {
            get: function () {
                return this._rangeLevel;
            },
            set: function (rangeLevel) {
                this._rangeLevel = rangeLevel;
                this.setByRangeLevel();
            },
            enumerable: true,
            configurable: true
        });
        Attenuation.prototype.setByRangeLevel = function () {
            switch (this._rangeLevel) {
                case 0:
                    this._range = 7;
                    this._linear = 0.7;
                    this._quadratic = 1.8;
                    break;
                case 1:
                    this._range = 13;
                    this._linear = 0.35;
                    this._quadratic = 0.44;
                    break;
                case 2:
                    this._range = 20;
                    this._linear = 0.22;
                    this._quadratic = 0.20;
                    break;
                case 3:
                    this._range = 32;
                    this._linear = 0.14;
                    this._quadratic = 0.07;
                    break;
                case 4:
                    this._range = 50;
                    this._linear = 0.09;
                    this._quadratic = 0.032;
                    break;
                case 5:
                    this._range = 65;
                    this._linear = 0.07;
                    this._quadratic = 0.017;
                    break;
                case 6:
                    this._range = 100;
                    this._linear = 0.045;
                    this._quadratic = 0.0075;
                    break;
                case 7:
                    this._range = 160;
                    this._linear = 0.027;
                    this._quadratic = 0.0028;
                    break;
                case 8:
                    this._range = 200;
                    this._linear = 0.022;
                    this._quadratic = 0.0019;
                    break;
                case 9:
                    this._range = 325;
                    this._linear = 0.014;
                    this._quadratic = 0.0007;
                    break;
                case 10:
                    this._range = 600;
                    this._linear = 0.007;
                    this._quadratic = 0.0002;
                    break;
                case 11:
                    this._range = 3250;
                    this._linear = 0.0014;
                    this._quadratic = 0.000007;
                    break;
                default:
                    wd.Log.error(true, "over light range");
                    break;
            }
        };
        return Attenuation;
    }());
    wd.Attenuation = Attenuation;
})(wd || (wd = {}));
var wd;
(function (wd) {
    (function (ELightModel) {
        ELightModel[ELightModel["PHONG"] = "PHONG"] = "PHONG";
        ELightModel[ELightModel["BLINN"] = "BLINN"] = "BLINN";
        ELightModel[ELightModel["LAMBERT"] = "LAMBERT"] = "LAMBERT";
        ELightModel[ELightModel["CONSTANT"] = "CONSTANT"] = "CONSTANT";
    })(wd.ELightModel || (wd.ELightModel = {}));
    var ELightModel = wd.ELightModel;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var UI = (function (_super) {
        __extends(UI, _super);
        function UI() {
            _super.apply(this, arguments);
            this.context = null;
        }
        Object.defineProperty(UI.prototype, "dirty", {
            get: function () {
                var renderer = this.getUIRenderer();
                if (!renderer) {
                    return true;
                }
                return renderer.dirty;
            },
            set: function (dirty) {
                if (dirty) {
                    var renderer = this.getUIRenderer();
                    if (!renderer) {
                        return;
                    }
                    renderer.dirty = dirty;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UI.prototype, "width", {
            get: function () {
                return this.entityObject ? this.entityObject.transform.width : null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UI.prototype, "height", {
            get: function () {
                return this.entityObject ? this.entityObject.transform.height : null;
            },
            enumerable: true,
            configurable: true
        });
        UI.prototype.init = function () {
            this.context = this.getContext();
        };
        UI.prototype.addToObject = function (entityObject) {
            _super.prototype.addToObject.call(this, entityObject);
            entityObject.uiManager.addChild(this);
        };
        UI.prototype.removeFromObject = function (entityObject) {
            _super.prototype.removeFromObject.call(this, entityObject);
            entityObject.uiManager.removeChild(this);
        };
        UI.prototype.update = function (elapsedTime) {
            var context = this.context;
            if (this.shouldNotUpdate()) {
                return;
            }
            context.save();
            this._setCanvasTransformForRotation();
            this.draw(elapsedTime);
            context.restore();
        };
        UI.prototype.draw = function (elapsedTime) {
        };
        UI.prototype.shouldNotUpdate = function () {
            return false;
        };
        UI.prototype.getContext = function () {
            return this.getUIRenderer().context;
        };
        UI.prototype.getCanvas = function () {
            return this.getUIRenderer().canvas;
        };
        UI.prototype.getUIRenderer = function () {
            if (!this.entityObject) {
                return null;
            }
            return this.entityObject.getComponent(wd.UIRenderer);
        };
        UI.prototype.drawInCenterPoint = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var context = args[0], source = args[1];
            if (args.length === 5) {
                var position = args[2], width = args[3], height = args[4];
                context.drawImage(source, position.x - width / 2, position.y - height / 2, width, height);
            }
            else if (args.length === 9) {
                var sx = args[2], sy = args[3], sw = args[4], sh = args[5], position = args[6], width = args[7], height = args[8];
                context.drawImage(source, sx, sy, sw, sh, position.x - width / 2, position.y - height / 2, width, height);
            }
        };
        UI.prototype._setCanvasTransformForRotation = function () {
            var matrix = this.entityObject.transform.rotationMatrix;
            this.context.setTransform(matrix.a, matrix.b, matrix.c, matrix.d, matrix.tx, matrix.ty);
        };
        __decorate([
            wd.virtual
        ], UI.prototype, "dirty", null);
        __decorate([
            wd.require(function (elapsedTime) {
                wd.assert(this.context !== null, wd.Log.info.FUNC_SHOULD("set context"));
            })
        ], UI.prototype, "update", null);
        __decorate([
            wd.virtual
        ], UI.prototype, "draw", null);
        __decorate([
            wd.virtual
        ], UI.prototype, "shouldNotUpdate", null);
        return UI;
    }(wd.Component));
    wd.UI = UI;
})(wd || (wd = {}));
var wd;
(function (wd) {
    (function (EFontXAlignment) {
        EFontXAlignment[EFontXAlignment["LEFT"] = 0] = "LEFT";
        EFontXAlignment[EFontXAlignment["CENTER"] = 1] = "CENTER";
        EFontXAlignment[EFontXAlignment["RIGHT"] = 2] = "RIGHT";
    })(wd.EFontXAlignment || (wd.EFontXAlignment = {}));
    var EFontXAlignment = wd.EFontXAlignment;
})(wd || (wd = {}));
var wd;
(function (wd) {
    (function (EFontYAlignment) {
        EFontYAlignment[EFontYAlignment["TOP"] = 0] = "TOP";
        EFontYAlignment[EFontYAlignment["MIDDLE"] = 1] = "MIDDLE";
        EFontYAlignment[EFontYAlignment["BOTTOM"] = 2] = "BOTTOM";
    })(wd.EFontYAlignment || (wd.EFontYAlignment = {}));
    var EFontYAlignment = wd.EFontYAlignment;
})(wd || (wd = {}));
var wd;
(function (wd) {
    (function (EFontDimension) {
        EFontDimension[EFontDimension["AUTO"] = "auto"] = "AUTO";
    })(wd.EFontDimension || (wd.EFontDimension = {}));
    var EFontDimension = wd.EFontDimension;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var Font = (function (_super) {
        __extends(Font, _super);
        function Font() {
            _super.apply(this, arguments);
            this.needFormat = false;
            this._isFirstUpdate = true;
            this._sizeChangeEventSubscription = null;
        }
        Font.prototype.init = function () {
            var self = this;
            _super.prototype.init.call(this);
            this._sizeChangeEventSubscription = wd.EventManager.fromEvent(this.entityObject, wd.EEngineEvent.UI_WIDTH_CHANGE)
                .merge(wd.EventManager.fromEvent(this.entityObject, wd.EEngineEvent.UI_HEIGHT_CHANGE))
                .subscribe(function () {
                self.dirty = true;
                self.needFormat = true;
            });
        };
        Font.prototype.dispose = function () {
            if (this._sizeChangeEventSubscription) {
                this._sizeChangeEventSubscription.dispose();
            }
        };
        Font.prototype.update = function (elapsedTime) {
            if (!this._isFirstUpdate) {
                if (this.needFormat) {
                    this.reFormat();
                }
            }
            else {
                this._isFirstUpdate = false;
            }
            this.needFormat = false;
            _super.prototype.update.call(this, elapsedTime);
        };
        Font.prototype.reFormat = function () {
        };
        Font.prototype.getLeftCornerPosition = function () {
            var transform = this.entityObject.transform, position = transform.position;
            return wd.Vector2.create(position.x - transform.width / 2, position.y - transform.height / 2);
        };
        __decorate([
            wd.virtual
        ], Font.prototype, "reFormat", null);
        return Font;
    }(wd.UI));
    wd.Font = Font;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var WORD_REX = /([a-zA-Z0-9]+|\S)/, FIRST_ENGLISH_OR_NUM = /^[a-zA-Z0-9]/, LAST_ENGLISH_OR_NUM = /[a-zA-Z0-9]+$/, LAST_INVALID_CHAR = /\s+$/;
    var PlainFont = (function (_super) {
        __extends(PlainFont, _super);
        function PlainFont() {
            _super.apply(this, arguments);
            this._text = "";
            this._fontSize = 10;
            this._fontFamily = "sans-serif";
            this._xAlignment = wd.EFontXAlignment.LEFT;
            this._yAlignment = wd.EFontYAlignment.TOP;
            this._fillEnabled = true;
            this._fillStyle = "rgba(0, 0, 0, 1)";
            this._strokeEnabled = false;
            this._strokeStyle = null;
            this._strokeSize = null;
            this._fontClientHeightCache = wdCb.Hash.create();
            this._lineHeight = null;
            this._strArr = [];
        }
        PlainFont.create = function () {
            var obj = new this();
            return obj;
        };
        Object.defineProperty(PlainFont.prototype, "text", {
            get: function () {
                return this._text;
            },
            set: function (text) {
                if (text !== this._text) {
                    this._text = text;
                    this.dirty = true;
                    this.needFormat = true;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PlainFont.prototype, "fontSize", {
            get: function () {
                return this._fontSize;
            },
            set: function (fontSize) {
                if (fontSize !== this._fontSize) {
                    this._fontSize = fontSize;
                    this.dirty = true;
                    this.needFormat = true;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PlainFont.prototype, "fontFamily", {
            get: function () {
                return this._fontFamily;
            },
            set: function (fontFamily) {
                if (fontFamily !== this._fontFamily) {
                    this._fontFamily = fontFamily;
                    this.dirty = true;
                    this.needFormat = true;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PlainFont.prototype, "xAlignment", {
            get: function () {
                return this._xAlignment;
            },
            set: function (xAlignment) {
                if (xAlignment !== this._xAlignment) {
                    this._xAlignment = xAlignment;
                    this.dirty = true;
                    this.needFormat = true;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PlainFont.prototype, "yAlignment", {
            get: function () {
                return this._yAlignment;
            },
            set: function (yAlignment) {
                if (yAlignment !== this._yAlignment) {
                    this._yAlignment = yAlignment;
                    this.dirty = true;
                    this.needFormat = true;
                }
            },
            enumerable: true,
            configurable: true
        });
        PlainFont.prototype.init = function () {
            _super.prototype.init.call(this);
            this._formatText();
            this._lineHeight = this._getDefaultLineHeight();
        };
        PlainFont.prototype.setFillStyle = function (fillStyle) {
            this._fillStyle = fillStyle;
        };
        PlainFont.prototype.enableStroke = function (strokeStyle, strokeSize) {
            this._strokeEnabled = true;
            this._fillEnabled = false;
            this._strokeStyle = strokeStyle;
            this._strokeSize = strokeSize;
        };
        PlainFont.prototype.enableFill = function (fillStyle) {
            this._fillEnabled = true;
            this._strokeEnabled = false;
            this._fillStyle = fillStyle;
        };
        PlainFont.prototype.setLineHeight = function (lineHeight) {
            this._lineHeight = lineHeight;
        };
        PlainFont.prototype.reFormat = function () {
            this._formatText();
            this._lineHeight = this._getDefaultLineHeight();
        };
        PlainFont.prototype.draw = function () {
            var context = this.context;
            context.font = this.fontSize + "px '" + this.fontFamily + "'";
            context.textBaseline = "top";
            context.textAlign = "start";
            if (this._strArr.length > 1) {
                this._drawMultiLine();
            }
            else {
                this._drawSingleLine();
            }
        };
        PlainFont.prototype._formatText = function () {
            var maxWidth = this.width;
            this._trimStr();
            if (maxWidth !== 0) {
                this._strArr = this._text.split('\n');
                for (var i = 0; i < this._strArr.length; i++) {
                    var text = this._strArr[i], allWidth = this._measure(text);
                    if (allWidth > maxWidth && text.length > 1) {
                        this._formatMultiLine(i, text, allWidth, maxWidth);
                    }
                }
            }
        };
        PlainFont.prototype._trimStr = function () {
            this._text = this._text.replace(LAST_INVALID_CHAR, "");
        };
        PlainFont.prototype._formatMultiLine = function (i, text, allWidth, maxWidth) {
            var _this = this;
            var LOOP_MAX_NUM = 100;
            var self = this, preText = null, truncationPointIndex = text.length * (maxWidth / allWidth) | 0, nextText = text.substr(truncationPointIndex), loopIndex = 0, width = allWidth - this._measure(nextText), pushNum = 0;
            var truncate = function () {
                while (width > maxWidth && loopIndex < LOOP_MAX_NUM) {
                    truncationPointIndex *= maxWidth / width;
                    truncationPointIndex = Math.floor(truncationPointIndex);
                    nextText = text.substr(truncationPointIndex);
                    width = allWidth - _this._measure(nextText);
                    loopIndex = loopIndex + 1;
                }
                loopIndex = 0;
            };
            var findTruncationPoint = function () {
                while (width < maxWidth && loopIndex < LOOP_MAX_NUM) {
                    if (nextText) {
                        var exec = WORD_REX.exec(nextText);
                        pushNum = exec ? exec[0].length : 1;
                    }
                    truncationPointIndex = truncationPointIndex + pushNum;
                    nextText = text.substr(truncationPointIndex);
                    width = allWidth - _this._measure(nextText);
                    loopIndex = loopIndex + 1;
                }
            };
            var handleTruncationPointIndex = function () {
                if (FIRST_ENGLISH_OR_NUM.test(nextText)) {
                    var preText_1 = text.substr(0, truncationPointIndex), pExec = LAST_ENGLISH_OR_NUM.exec(preText_1);
                    if (pExec) {
                        truncationPointIndex = truncationPointIndex - pExec[0].length;
                    }
                }
                else {
                    truncationPointIndex = truncationPointIndex - pushNum;
                }
                if (truncationPointIndex === 0) {
                    truncationPointIndex = 1;
                }
            };
            var setString = function () {
                nextText = text.substr(truncationPointIndex);
                preText = text.substr(0, truncationPointIndex);
                self._strArr[i] = nextText;
                self._strArr.splice(i, 0, preText);
            };
            truncate();
            findTruncationPoint();
            handleTruncationPointIndex();
            setString();
        };
        PlainFont.prototype._measure = function (text) {
            var context = this.context;
            context.font = this.fontSize + "px '" + this.fontFamily + "'";
            return context.measureText(text).width;
        };
        PlainFont.prototype._getDefaultLineHeight = function () {
            return this._computeLineHeight("normal");
        };
        PlainFont.prototype._computeLineHeight = function (lineHeight) {
            var div = wdCb.DomQuery.create("<div></div>"), dom = div.get(0), resultLineHeight = null;
            dom.style.cssText = "\n             font-family: " + this.fontFamily + ";\n             font-size: " + this.fontSize + "px;\n             position: absolute;\n             left: -100px;\n             top: -100px;\n             line-height: " + lineHeight + ";\n             ";
            div.prependTo("body");
            dom.innerHTML = "abc!";
            resultLineHeight = dom.clientHeight;
            div.remove();
            return resultLineHeight;
        };
        PlainFont.prototype._getFontClientHeight = function () {
            var fontSize = this.fontSize, fontName = this.fontFamily, key = fontSize + "." + fontName, cacheHeight = this._fontClientHeightCache.getChild(key), height = null;
            if (cacheHeight) {
                return cacheHeight;
            }
            height = this._computeLineHeight(1);
            this._fontClientHeightCache.addChild(key, height);
            return height;
        };
        PlainFont.prototype._drawMultiLine = function () {
            var context = this.context, position = this.getLeftCornerPosition(), x = position.x, y = position.y, lineHeight = this._lineHeight, fontClientHeight = this._getFontClientHeight(), self = this, lineCount = this._strArr.length, lineTotalHeight = (lineCount - 1) * lineHeight + fontClientHeight;
            if (self.yAlignment === wd.EFontYAlignment.BOTTOM) {
                y = y + self.height - lineTotalHeight;
            }
            else if (self.yAlignment === wd.EFontYAlignment.MIDDLE) {
                y = y + (self.height - lineTotalHeight) / 2;
            }
            for (var _i = 0, _a = this._strArr; _i < _a.length; _i++) {
                var str = _a[_i];
                if (self.xAlignment === wd.EFontXAlignment.RIGHT) {
                    x = x + self.width - self._measure(str);
                }
                else if (self.xAlignment == wd.EFontXAlignment.CENTER) {
                    x = x + (self.width - self._measure(str)) / 2;
                }
                if (self._fillEnabled) {
                    context.fillStyle = self._fillStyle;
                    context.fillText(str, x, y);
                }
                else if (self._strokeEnabled) {
                    context.strokeStyle = self._strokeStyle;
                    context.lineWidth = self._strokeSize;
                    context.strokeText(str, x, y);
                }
                x = position.x;
                y = y + lineHeight;
            }
        };
        PlainFont.prototype._drawSingleLine = function () {
            var context = this.context, position = this.getLeftCornerPosition(), x = position.x, y = position.y, fontClientHeight = this._getFontClientHeight(), self = this, lineCount = 1, lineTotalHeight = fontClientHeight, str = this._strArr[0];
            if (self.yAlignment === wd.EFontYAlignment.BOTTOM) {
                y = y + self.height - lineTotalHeight;
            }
            else if (self.yAlignment === wd.EFontYAlignment.MIDDLE) {
                y = y + (self.height - lineTotalHeight) / 2;
            }
            if (self.xAlignment === wd.EFontXAlignment.RIGHT) {
                x = x + self.width - self._measure(str);
            }
            else if (self.xAlignment == wd.EFontXAlignment.CENTER) {
                x = x + (self.width - self._measure(str)) / 2;
            }
            if (self._fillEnabled) {
                context.fillStyle = self._fillStyle;
                context.fillText(str, x, y);
            }
            else if (self._strokeEnabled) {
                context.strokeStyle = self._strokeStyle;
                context.lineWidth = self._strokeSize;
                context.strokeText(str, x, y);
            }
        };
        return PlainFont;
    }(wd.Font));
    wd.PlainFont = PlainFont;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var BitmapFont = (function (_super) {
        __extends(BitmapFont, _super);
        function BitmapFont() {
            _super.apply(this, arguments);
            this._text = "";
            this._xAlignment = wd.EFontXAlignment.LEFT;
            this.fntId = null;
            this.bitmapId = null;
            this._charFontList = wdCb.Collection.create();
        }
        BitmapFont.create = function () {
            var obj = new this();
            return obj;
        };
        Object.defineProperty(BitmapFont.prototype, "text", {
            get: function () {
                return this._text;
            },
            set: function (text) {
                if (text !== this._text) {
                    this._text = text;
                    this.dirty = true;
                    this.needFormat = true;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BitmapFont.prototype, "xAlignment", {
            get: function () {
                return this._xAlignment;
            },
            set: function (xAlignment) {
                if (xAlignment !== this._xAlignment) {
                    this._xAlignment = xAlignment;
                    this.dirty = true;
                    this.needFormat = true;
                }
            },
            enumerable: true,
            configurable: true
        });
        BitmapFont.prototype.init = function () {
            var fntObj = this._getFntObj(), imageAsset = this._getImageAsset();
            if (!fntObj) {
                wd.Log.log("impossible to create font: not find fnt file");
                return false;
            }
            if (!imageAsset) {
                wd.Log.log("impossible to create font: not find bitmap file");
                return false;
            }
            _super.prototype.init.call(this);
            this._createAndAddFontCharUIObjects(fntObj, imageAsset.source);
            this._formatText(fntObj);
        };
        BitmapFont.prototype.dispose = function () {
            _super.prototype.dispose.call(this);
            this._removeAllCharFont();
        };
        BitmapFont.prototype.reFormat = function () {
            var fntObj = this._getFntObj(), imageAsset = this._getImageAsset();
            this._removeAllCharFont();
            if (!fntObj) {
                wd.Log.log("impossible to create font: not find fnt file");
                return false;
            }
            if (!imageAsset) {
                wd.Log.log("impossible to create font: not find bitmap file");
                return false;
            }
            this._createAndAddFontCharUIObjects(fntObj, imageAsset.source);
            this._formatText(fntObj);
        };
        BitmapFont.prototype._getFntObj = function () {
            return wd.LoaderManager.getInstance().get(this.fntId);
        };
        BitmapFont.prototype._getImageAsset = function () {
            return wd.LoaderManager.getInstance().get(this.bitmapId);
        };
        BitmapFont.prototype._createAndAddFontCharUIObjects = function (fntObj, image) {
            var locStr = this.text, locFontDict = fntObj.fontDefDictionary, nextFontPositionX = 0, nextFontPositionY = 0, position = this.getLeftCornerPosition(), uiRenderer = this.getUIRenderer(), charFontUIObject = null, charFont = null;
            for (var i = 0, stringLen = locStr.length; i < stringLen; i++) {
                var key = String(locStr.charCodeAt(i)), char = locStr[i];
                if (this._isNewLine(char)) {
                    var charFontData_1 = this._createAndAddFontCharObjectOfNewLineChar(i, char, uiRenderer);
                    charFontUIObject = charFontData_1.charFontUIObject;
                    charFont = charFontData_1.charFont;
                    this._setCharFontUIObjectPosition(charFontUIObject, position.x + nextFontPositionX, position.y + nextFontPositionY);
                    charFont.startPosX = nextFontPositionX;
                    charFont.xAdvance = 0;
                    nextFontPositionX = 0;
                    nextFontPositionY = nextFontPositionY + fntObj.commonHeight;
                    continue;
                }
                var fontDef = this._getFontDef(locFontDict, key), charFontData = null;
                if (!fontDef) {
                    wd.Log.log("character not found " + char);
                    continue;
                }
                charFontData = this._createAndAddFontCharObjectOfCommonChar(fontDef, image, i, char, uiRenderer);
                charFontUIObject = charFontData.charFontUIObject;
                charFont = charFontData.charFont;
                this._setCharFontUIObjectPosition(charFontUIObject, position.x + nextFontPositionX + fontDef.xOffset, position.y + nextFontPositionY + fontDef.yOffset);
                charFont.startPosX = nextFontPositionX;
                charFont.xAdvance = fontDef.xAdvance;
                nextFontPositionX = nextFontPositionX + fontDef.xAdvance;
            }
        };
        BitmapFont.prototype._createAndAddFontCharObjectOfNewLineChar = function (index, char, uiRenderer) {
            var charFontUIObject = this._findCharFontUIObject(index), charFont = null;
            if (!charFontUIObject) {
                var charFontData = this._createCharFont(index, uiRenderer);
                charFontUIObject = charFontData.charFontUIObject;
                charFont = charFontData.charFont;
                this._addCharFontUIObject(charFontUIObject);
            }
            else {
                charFont = charFontUIObject.getComponent(wd.CharFont);
            }
            charFont.char = char;
            return {
                charFontUIObject: charFontUIObject,
                charFont: charFont
            };
        };
        BitmapFont.prototype._createAndAddFontCharObjectOfCommonChar = function (fontDef, image, index, char, uiRenderer) {
            var rect = wd.RectRegion.create(fontDef.rect.x, fontDef.rect.y, fontDef.rect.width, fontDef.rect.height), charFontUIObject = this._findCharFontUIObject(index), charFont = null;
            if (!charFontUIObject) {
                var charFontData = this._createCharFont(index, uiRenderer), transform = null;
                charFontUIObject = charFontData.charFontUIObject;
                transform = charFontUIObject.transform,
                    charFont = charFontData.charFont;
                charFont.image = image;
                charFont.rectRegion = rect;
                transform.width = rect.width;
                transform.height = rect.height;
                this._addCharFontUIObject(charFontUIObject);
            }
            else {
                charFont = charFontUIObject.getComponent(wd.CharFont);
            }
            charFont.char = char;
            return {
                charFontUIObject: charFontUIObject,
                charFont: charFont
            };
        };
        BitmapFont.prototype._formatText = function (fntObj) {
            if (this.width > 0) {
                this._formatMultiLine(fntObj);
            }
            this._formatAlign();
        };
        BitmapFont.prototype._formatMultiLine = function (fntObj) {
            var entityObject = this.entityObject, characterUIObject = null, charFont = null, position = this.getLeftCornerPosition(), x = 0, y = 0, lineHeight = fntObj.commonHeight;
            for (var i = 1, stringLen = this.text.length; i < stringLen; i++) {
                characterUIObject = this._findCharFontUIObject(i);
                charFont = characterUIObject.getComponent(wd.CharFont);
                if (this._isNewLine(charFont.char)) {
                    charFont.isNewLine = true;
                    charFont.isFullLine = false;
                    this._translateCharFontUIObject(characterUIObject, -x, y);
                    x = 0;
                }
                if (this._isExceedWidth(position, charFont, x)) {
                    var prevCharUIObject = this._findCharFontUIObject(i - 1);
                    if (prevCharUIObject) {
                        var prevCharFont = prevCharUIObject.getComponent(wd.CharFont);
                        prevCharFont.isNewLine = true;
                        if (!this._isSpaceUnicode(prevCharFont.char)) {
                            prevCharFont.isFullLine = true;
                        }
                    }
                    x = this._getLetterPosXLeft(charFont);
                    y = y + lineHeight;
                    this._translateCharFontUIObject(characterUIObject, -x, y);
                }
                else {
                    this._translateCharFontUIObject(characterUIObject, -x, y);
                }
            }
        };
        BitmapFont.prototype._formatAlign = function () {
            var position = this.getLeftCornerPosition(), self = this;
            if (this._xAlignment != wd.EFontXAlignment.LEFT) {
                var line_1 = [];
                this._charFontList.forEach(function (charFontUIObject) {
                    var charFont = charFontUIObject.getComponent(wd.CharFont);
                    if (!charFont.isNewLine) {
                        line_1.push(charFont);
                        return;
                    }
                    if (charFont.isNewLine && charFont.isFullLine) {
                        line_1 = [];
                        return;
                    }
                    self._alignLine(position, line_1, line_1[line_1.length - 1]);
                    line_1 = [];
                });
                if (line_1.length > 0) {
                    self._alignLine(position, line_1, line_1[line_1.length - 1]);
                }
            }
        };
        BitmapFont.prototype._createCharFont = function (index, uiRenderer) {
            var charFontUIObject = wd.UIObject.create(), charFont = wd.CharFont.create();
            charFontUIObject.addComponent(charFont);
            charFontUIObject.addComponent(uiRenderer);
            charFontUIObject.addTag(String(index));
            charFontUIObject.init();
            return {
                charFontUIObject: charFontUIObject,
                charFont: charFont
            };
        };
        BitmapFont.prototype._addCharFontUIObject = function (charFontUIObject) {
            this._charFontList.addChild(charFontUIObject);
            this.entityObject.addChild(charFontUIObject);
        };
        BitmapFont.prototype._findCharFontUIObject = function (index) {
            return this.entityObject.findChildByTag(String(index));
        };
        BitmapFont.prototype._isSpaceUnicode = function (char) {
            var charCode = char.charCodeAt(0);
            return charCode == 32 || charCode == 133 || charCode == 160 || charCode == 5760 || (charCode >= 8192 && charCode <= 8202) || charCode == 8232 || charCode == 8233 || charCode == 8239 || charCode == 8287 || charCode == 12288;
        };
        BitmapFont.prototype._isNewLine = function (char) {
            return char.charCodeAt(0) == 10;
        };
        BitmapFont.prototype._getLetterPosXLeft = function (sp) {
            return sp.startPosX;
        };
        BitmapFont.prototype._getLetterPosXRight = function (leftCornerPosition, sp) {
            return wd.CoordinateUtils.convertCenterPositionXToLeftCornerPositionX(sp.x, sp.width) - leftCornerPosition.x + sp.xAdvance;
        };
        BitmapFont.prototype._getFontDef = function (fontDict, key) {
            return fontDict[key];
        };
        BitmapFont.prototype._isExceedWidth = function (leftCornerPosition, charFont, x) {
            return this._getLetterPosXRight(leftCornerPosition, charFont) - x > this.width;
        };
        BitmapFont.prototype._alignLine = function (leftCornerPosition, line, lastCharFont) {
            var self = this;
            line = this._trimBottomSpaceChar(line);
            lastCharFont = line[line.length - 1];
            line.forEach(function (cp) {
                var shift = null, lineWidth = self._getLetterPosXRight(leftCornerPosition, lastCharFont);
                switch (self._xAlignment) {
                    case wd.EFontXAlignment.CENTER:
                        shift = (self.width - lineWidth) / 2;
                        break;
                    case wd.EFontXAlignment.RIGHT:
                        shift = self.width - lineWidth;
                        break;
                    default:
                        break;
                }
                cp.x = cp.x + shift;
            });
        };
        BitmapFont.prototype._trimBottomSpaceChar = function (line) {
            var i = line.length - 1;
            if (this._isNewLine(line[i].char)) {
                i = i - 1;
            }
            while (i >= 0 && this._isSpaceUnicode(line[i].char)) {
                i = i - 1;
            }
            line = line.splice(0, i + 1);
            return line;
        };
        BitmapFont.prototype._setCharFontUIObjectPosition = function (charFontUIObject, x, y) {
            var transform = charFontUIObject.transform;
            charFontUIObject.transform.position = wd.CoordinateUtils.convertLeftCornerPositionToCenterPosition(wd.Vector2.create(x, y), transform.width, transform.height);
        };
        BitmapFont.prototype._translateCharFontUIObject = function (charFontUIObject, x, y) {
            charFontUIObject.transform.translate(x, y);
        };
        BitmapFont.prototype._removeAllCharFont = function () {
            this._charFontList.forEach(function (charFont) {
                charFont.dispose();
            });
            this._charFontList.removeAllChildren();
        };
        __decorate([
            wd.require(function (fntObj) {
                if (this.width > 0) {
                    for (var i = 1, stringLen = this.text.length; i < stringLen; i++) {
                        var characterUIObject = this.entityObject.findChildByTag(String(i));
                        wd.assert(!!characterUIObject, "char not has corresponding entityObject");
                        wd.assert(characterUIObject.hasComponent(wd.CharFont), wd.Log.info.FUNC_SHOULD("char entityObject", "contain CharFont component"));
                    }
                }
            })
        ], BitmapFont.prototype, "_formatText", null);
        return BitmapFont;
    }(wd.Font));
    wd.BitmapFont = BitmapFont;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var CharFont = (function (_super) {
        __extends(CharFont, _super);
        function CharFont() {
            _super.apply(this, arguments);
            this._char = null;
            this.startPosX = null;
            this.xAdvance = null;
            this.image = null;
            this.rectRegion = null;
            this.isNewLine = false;
            this.isFullLine = false;
            this._subscription = null;
        }
        CharFont.create = function () {
            var obj = new this();
            return obj;
        };
        Object.defineProperty(CharFont.prototype, "x", {
            get: function () {
                return this.entityObject.transform.position.x;
            },
            set: function (x) {
                var position = this.entityObject.transform.position;
                this.entityObject.transform.position = wd.Vector2.create(x, position.y);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CharFont.prototype, "y", {
            get: function () {
                return this.entityObject.transform.position.y;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CharFont.prototype, "char", {
            get: function () {
                return this._char;
            },
            set: function (char) {
                if (this._char !== null) {
                    wd.Log.log(wd.Log.info.FUNC_NOT_SUPPORT("change char"));
                    return;
                }
                this._char = char;
            },
            enumerable: true,
            configurable: true
        });
        CharFont.prototype.init = function () {
            var self = this;
            _super.prototype.init.call(this);
            this._subscription = wdFrp.fromArray([wd.EventManager.fromEvent(this.entityObject, wd.EEngineEvent.TRANSFORM_TRANSLATE), wd.EventManager.fromEvent(this.entityObject, wd.EEngineEvent.TRANSFORM_ROTATE), wd.EventManager.fromEvent(this.entityObject, wd.EEngineEvent.TRANSFORM_SCALE)])
                .mergeAll()
                .subscribe(function () {
                self.dirty = true;
            });
        };
        CharFont.prototype.dispose = function () {
            _super.prototype.dispose.call(this);
            this._subscription.dispose();
        };
        CharFont.prototype.shouldNotUpdate = function () {
            return this.rectRegion === null || (this.width === 0 && this.height === 0);
        };
        CharFont.prototype.draw = function (elapsedTime) {
            var transform = null, position = null, dw = null, dh = null;
            transform = this.entityObject.transform;
            position = transform.position;
            dw = this.width;
            dh = this.height;
            this.drawInCenterPoint(this.context, this.image, this.rectRegion.x, this.rectRegion.y, this.rectRegion.width, this.rectRegion.height, position, dw, dh);
        };
        __decorate([
            wd.execOnlyOnce("_isInit")
        ], CharFont.prototype, "init", null);
        return CharFont;
    }(wd.Font));
    wd.CharFont = CharFont;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var ProgressBar = (function (_super) {
        __extends(ProgressBar, _super);
        function ProgressBar() {
            _super.apply(this, arguments);
            this._percent = 0;
            this.borderStyle = "rgba(0, 0, 0, 1)";
            this.fillStyle = "rgba(255, 0, 0, 1)";
            this.radius = 5;
            this._offScreenCanvas = null;
            this._offScreenContext = null;
        }
        ProgressBar.create = function () {
            var obj = new this();
            return obj;
        };
        Object.defineProperty(ProgressBar.prototype, "percent", {
            get: function () {
                return this._percent;
            },
            set: function (percent) {
                if (this._percent !== percent) {
                    this._percent = percent;
                    this.dirty = true;
                }
            },
            enumerable: true,
            configurable: true
        });
        ProgressBar.prototype.init = function () {
            _super.prototype.init.call(this);
            this._createOffScreenCanvas();
            this._drawProgressBar();
        };
        ProgressBar.prototype.shouldNotUpdate = function () {
            return this.percent <= 0;
        };
        ProgressBar.prototype.draw = function (elapsedTime) {
            var position = this.entityObject.transform.position;
            this._drawFromLeft(position);
            this._drawBorder(position);
        };
        ProgressBar.prototype._drawFromLeft = function (position) {
            var offscreenCanvas = this._offScreenCanvas, loadedWidth = this.width * this.percent;
            this.drawInCenterPoint(this.context, offscreenCanvas, 0, 0, loadedWidth, this.height, wd.Vector2.create(position.x - this.width / 2 + loadedWidth / 2, position.y), loadedWidth, this.height);
        };
        ProgressBar.prototype._drawBorder = function (position) {
            wd.RoundedRectUtils.drawRoundedRect(this.context, this.borderStyle, null, position.x - this.width / 2, position.y - this.height / 2, this.width, this.height, this.radius);
        };
        ProgressBar.prototype._createOffScreenCanvas = function () {
            var canvas = wdCb.DomQuery.create("<canvas></canvas>");
            canvas.attr("width", this.context.canvas.width);
            canvas.attr("height", this.context.canvas.height);
            this._offScreenCanvas = canvas.get(0);
            this._offScreenContext = this._offScreenCanvas.getContext("2d");
        };
        ProgressBar.prototype._drawProgressBar = function () {
            this._offScreenContext.clearRect(0, 0, this._offScreenCanvas.width, this._offScreenCanvas.height);
            wd.RoundedRectUtils.drawRoundedRect(this._offScreenContext, this.borderStyle, this.fillStyle, 0, 0, this.width, this.height, this.radius);
        };
        __decorate([
            wd.require(function (elapsedTime) {
                wd.assert(this.percent >= 0 && this.percent <= 1, wd.Log.info.FUNC_SHOULD("percent", " >= 0 and <= 1"));
            })
        ], ProgressBar.prototype, "draw", null);
        return ProgressBar;
    }(wd.UI));
    wd.ProgressBar = ProgressBar;
})(wd || (wd = {}));
var wd;
(function (wd) {
    function _canUseNewCanvasBlendModes() {
        var canvas = null, context = null;
        if (typeof document === 'undefined') {
            return false;
        }
        canvas = document.createElement('canvas');
        canvas.width = 1;
        canvas.height = 1;
        context = canvas.getContext('2d');
        context.fillStyle = '#000';
        context.fillRect(0, 0, 1, 1);
        context.globalCompositeOperation = 'multiply';
        context.fillStyle = '#fff';
        context.fillRect(0, 0, 1, 1);
        return context.getImageData(0, 0, 1, 1).data[0] === 0;
    }
    var Image = (function (_super) {
        __extends(Image, _super);
        function Image() {
            _super.apply(this, arguments);
            this._source = null;
            this.color = null;
            this.targetSource = null;
            this.targetColor = null;
        }
        Image.create = function () {
            var obj = new this();
            return obj;
        };
        Object.defineProperty(Image.prototype, "source", {
            get: function () {
                return this._source;
            },
            set: function (source) {
                if (source !== this._source) {
                    this._source = source;
                    this.dirty = true;
                }
            },
            enumerable: true,
            configurable: true
        });
        Image.prototype.shouldNotUpdate = function () {
            return this._getDrawSource() === null && this._getDrawColor() === null;
        };
        Image.prototype.draw = function (elapsedTime) {
            var drawColor = this._getDrawColor(), drawSource = this._getDrawSource();
            if (drawColor !== null) {
                var position = this.entityObject.transform.position;
                this._setFillStyle(drawColor.toString());
                if (drawColor.a < 1) {
                    this._setGlobalAlpha(this.context, drawColor.a);
                }
                this.context.fillRect(position.x - this.width / 2, position.y - this.height / 2, this.width, this.height);
                if (drawSource) {
                    this._blendColorWithSource();
                }
            }
            else {
                this.drawInCenterPoint(this.context, drawSource.source, this.entityObject.transform.position, this.width, this.height);
            }
        };
        Image.prototype._setFillStyle = function (style) {
            this.context.fillStyle = style;
        };
        Image.prototype._getDrawSource = function () {
            if (this.targetSource) {
                return this.targetSource;
            }
            return this.source;
        };
        Image.prototype._getDrawColor = function () {
            if (this.targetColor) {
                return this.targetColor;
            }
            return this.color;
        };
        Image.prototype._blendByMultiply = function () {
            this._setGlobalCompositeOperation(this.context, "multiply");
            this.drawInCenterPoint(this.context, this._getDrawSource().source, this.entityObject.transform.position, this.width, this.height);
        };
        Image.prototype._blendByPerPixel = function () {
            var context = this.context, canvas = this.getCanvas(), r = this.color.r, g = this.color.g, b = this.color.b, pixelData = null, pixels = null;
            context.globalCompositeOperation = "copy";
            this.drawInCenterPoint(this.context, this._getDrawSource().source, this.entityObject.transform.position, this.width, this.height);
            pixelData = context.getImageData(0, 0, canvas.width, canvas.height);
            pixels = pixelData.data;
            for (var i = 0, len = pixels.length; i < len; i += 4) {
                pixels[i] *= r;
                pixels[i + 1] *= g;
                pixels[i + 2] *= b;
            }
            context.putImageData(pixelData, 0, 0);
        };
        Image.prototype._setGlobalCompositeOperation = function (context, mode) {
            context.globalCompositeOperation = mode;
        };
        Image.prototype._setGlobalAlpha = function (context, alpha) {
            context.globalAlpha = alpha;
        };
        Image.constructorForBlend = function (obj) {
            obj._blendColorWithSource = _canUseNewCanvasBlendModes() ?
                obj._blendByMultiply : obj._blendByPerPixel;
            return true;
        };
        Image.constructorInitForBlend = Image.constructorForBlend(Image.prototype);
        __decorate([
            wd.require(function () {
                wd.assert(!!this._getDrawSource(), wd.Log.info.FUNC_SHOULD("source", "exist"));
            })
        ], Image.prototype, "_blendByMultiply", null);
        __decorate([
            wd.require(function () {
                wd.assert(!!this._getDrawSource(), wd.Log.info.FUNC_SHOULD("source", "exist"));
            })
        ], Image.prototype, "_blendByPerPixel", null);
        return Image;
    }(wd.UI));
    wd.Image = Image;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var InteractionUI = (function (_super) {
        __extends(InteractionUI, _super);
        function InteractionUI() {
            _super.apply(this, arguments);
            this.p_transitionMode = null;
            this.transitionManager = wd.TransitionManager.create(this);
        }
        Object.defineProperty(InteractionUI.prototype, "transitionMode", {
            get: function () {
                return this.p_transitionMode;
            },
            set: function (transitionMode) {
                this.p_transitionMode = transitionMode;
            },
            enumerable: true,
            configurable: true
        });
        return InteractionUI;
    }(wd.UI));
    wd.InteractionUI = InteractionUI;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var Button = (function (_super) {
        __extends(Button, _super);
        function Button() {
            _super.apply(this, arguments);
            this._text = null;
            this._mousedownSubscription = null;
            this._mouseupSubscription = null;
            this._mouseoverSubscription = null;
            this._mouseoutSubscription = null;
            this._stateMachine = wd.UIStateMachine.create(this);
        }
        Button.create = function () {
            var obj = new this();
            obj.initWhenCreate();
            return obj;
        };
        Object.defineProperty(Button.prototype, "text", {
            get: function () {
                var fontObject = null;
                if (this.entityObject === null) {
                    return this._text;
                }
                fontObject = this.getObject(wd.EButtonObjectName.TEXT);
                if (fontObject) {
                    return fontObject.getComponent(wd.PlainFont).text;
                }
                return null;
            },
            set: function (text) {
                var fontObject = null;
                this._text = text;
                if (this.entityObject === null || !this.getUIRenderer()) {
                    return;
                }
                fontObject = this.getObject(wd.EButtonObjectName.TEXT);
                if (fontObject) {
                    fontObject.getComponent(wd.PlainFont).text = text;
                }
                else {
                    this.entityObject.addChild(this._createFontObject());
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Button.prototype, "isDisabled", {
            get: function () {
                return this._stateMachine.currentState === wd.EUIState.DISABLED;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Button.prototype, "currentState", {
            get: function () {
                return this._stateMachine.currentState;
            },
            enumerable: true,
            configurable: true
        });
        Button.prototype.initWhenCreate = function () {
            this.transitionMode = wd.ETransitionMode.SPRITE;
            this.text = "button";
        };
        Button.prototype.init = function () {
            _super.prototype.init.call(this);
            if (!this._hasFontObject()) {
                this.entityObject.addChild(this._createFontObject());
            }
            this.entityObject.addChild(this._createBackgroundObject());
            this._bindEvent();
        };
        Button.prototype.dispose = function () {
            _super.prototype.dispose.call(this);
            this._mousedownSubscription.dispose();
            this._mouseupSubscription.dispose();
            this._mouseoverSubscription.dispose();
            this._mouseoutSubscription.dispose();
        };
        Button.prototype.getObject = function (objectName) {
            return this.entityObject.findChildByName(objectName);
        };
        Button.prototype.getObjectTransition = function (objectName) {
            return this.transitionManager.getObjectTransition(objectName);
        };
        Button.prototype.enable = function () {
            this._stateMachine.changeState(wd.EUIState.NORMAL);
        };
        Button.prototype.disable = function () {
            this._stateMachine.changeState(wd.EUIState.DISABLED);
        };
        Button.prototype.update = function (elapsedTime) {
            var target = this.transitionManager.getObjectTarget(wd.EButtonObjectName.BACKGROUND);
            if (!target) {
                var image = this.getObject(wd.EButtonObjectName.BACKGROUND).getComponent(wd.Image);
                switch (this.p_transitionMode) {
                    case wd.ETransitionMode.SPRITE:
                        image.targetSource = null;
                        break;
                    case wd.ETransitionMode.COLOR:
                        image.targetColor = null;
                        break;
                    default:
                        wd.Log.error(true, wd.Log.info.FUNC_UNEXPECT("transitionMode"));
                        break;
                }
                return;
            }
            switch (this.p_transitionMode) {
                case wd.ETransitionMode.SPRITE:
                    this.getObject(wd.EButtonObjectName.BACKGROUND).getComponent(wd.Image).targetSource = target;
                    break;
                case wd.ETransitionMode.COLOR:
                    this.getObject(wd.EButtonObjectName.BACKGROUND).getComponent(wd.Image).targetColor = target;
                    break;
                default:
                    wd.Log.error(true, wd.Log.info.FUNC_UNEXPECT("transitionMode"));
                    break;
            }
        };
        Button.prototype._createBackgroundObject = function () {
            var object = wd.UIObject.create(), image = wd.Image.create(), transform = this.entityObject.transform;
            object.addComponent(image);
            object.addComponent(this.getUIRenderer());
            object.transform.width = transform.width;
            object.transform.height = transform.height;
            object.transform.zIndex = 1;
            object.name = wd.EButtonObjectName.BACKGROUND;
            return object;
        };
        Button.prototype._createFontObject = function () {
            var fontObject = wd.UIObject.create(), font = wd.PlainFont.create(), transform = this.entityObject.transform;
            font.text = this._text;
            font.enableFill("#000000");
            font.xAlignment = wd.EFontXAlignment.CENTER;
            font.yAlignment = wd.EFontYAlignment.MIDDLE;
            fontObject.addComponent(font);
            fontObject.addComponent(this.getUIRenderer());
            fontObject.transform.width = transform.width;
            fontObject.transform.height = transform.height;
            fontObject.transform.zIndex = 2;
            fontObject.name = wd.EButtonObjectName.TEXT;
            return fontObject;
        };
        Button.prototype._hasFontObject = function () {
            return !!this.getObject(wd.EButtonObjectName.TEXT);
        };
        Button.prototype._bindEvent = function () {
            var self = this;
            this._mousedownSubscription = wd.EventManager.fromEvent(this.entityObject, wd.EEngineEvent.MOUSE_DOWN)
                .filter(function (e) {
                return !self.isDisabled;
            })
                .subscribe(function (e) {
                self._stateMachine.changeState(wd.EUIState.PRESSED);
            });
            this._mouseupSubscription = wd.EventManager.fromEvent(this.entityObject, wd.EEngineEvent.MOUSE_UP)
                .filter(function (e) {
                return !self.isDisabled;
            })
                .subscribe(function (e) {
                self._stateMachine.backState();
            });
            this._mouseoverSubscription = wd.EventManager.fromEvent(this.entityObject, wd.EEngineEvent.MOUSE_OVER)
                .filter(function (e) {
                return !self.isDisabled;
            })
                .subscribe(function (e) {
                self._stateMachine.changeState(wd.EUIState.HIGHLIGHT);
            });
            this._mouseoutSubscription = wd.EventManager.fromEvent(this.entityObject, wd.EEngineEvent.MOUSE_OUT)
                .filter(function (e) {
                return !self.isDisabled;
            })
                .subscribe(function (e) {
                self._stateMachine.backState();
            });
        };
        __decorate([
            wd.require(function (elapsedTime) {
                wd.assert(this.getObject(wd.EButtonObjectName.BACKGROUND).hasComponent(wd.Image), wd.Log.info.FUNC_SHOULD("Button UIObject", "contain Image component"));
            })
        ], Button.prototype, "update", null);
        return Button;
    }(wd.InteractionUI));
    wd.Button = Button;
})(wd || (wd = {}));
var wd;
(function (wd) {
    (function (EButtonObjectName) {
        EButtonObjectName[EButtonObjectName["BACKGROUND"] = "background"] = "BACKGROUND";
        EButtonObjectName[EButtonObjectName["TEXT"] = "text"] = "TEXT";
    })(wd.EButtonObjectName || (wd.EButtonObjectName = {}));
    var EButtonObjectName = wd.EButtonObjectName;
})(wd || (wd = {}));
var wd;
(function (wd) {
    (function (EUIState) {
        EUIState[EUIState["NORMAL"] = 0] = "NORMAL";
        EUIState[EUIState["HIGHLIGHT"] = 1] = "HIGHLIGHT";
        EUIState[EUIState["PRESSED"] = 2] = "PRESSED";
        EUIState[EUIState["DISABLED"] = 3] = "DISABLED";
    })(wd.EUIState || (wd.EUIState = {}));
    var EUIState = wd.EUIState;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var UIStateMachine = (function () {
        function UIStateMachine(ui) {
            this._ui = null;
            this._stateHistory = wdCb.Stack.create();
            this._ui = ui;
        }
        UIStateMachine.create = function (ui) {
            var obj = new this(ui);
            return obj;
        };
        Object.defineProperty(UIStateMachine.prototype, "transitionManager", {
            get: function () {
                return this._ui.transitionManager;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UIStateMachine.prototype, "currentState", {
            get: function () {
                return this._stateHistory.top || wd.EUIState.NORMAL;
            },
            enumerable: true,
            configurable: true
        });
        UIStateMachine.prototype.changeState = function (state) {
            this._stateHistory.push(state);
            this.transitionManager.changeState(state);
            this._ui.dirty = true;
        };
        UIStateMachine.prototype.backState = function () {
            var lastState = null;
            this._stateHistory.pop();
            lastState = this._stateHistory.top;
            if (!lastState) {
                lastState = wd.EUIState.NORMAL;
            }
            this.transitionManager.changeState(lastState);
            this._ui.dirty = true;
        };
        return UIStateMachine;
    }());
    wd.UIStateMachine = UIStateMachine;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var Transition = (function () {
        function Transition() {
            this._target = null;
        }
        Object.defineProperty(Transition.prototype, "target", {
            get: function () {
                if (this._target === null) {
                    this.changeState(wd.EUIState.NORMAL);
                }
                return this._target;
            },
            set: function (target) {
                this._target = target;
            },
            enumerable: true,
            configurable: true
        });
        return Transition;
    }());
    wd.Transition = Transition;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var SpriteTransition = (function (_super) {
        __extends(SpriteTransition, _super);
        function SpriteTransition() {
            _super.apply(this, arguments);
            this.normalSprite = null;
            this.highlightSprite = null;
            this.pressedSprite = null;
            this.disabledSprite = null;
        }
        SpriteTransition.create = function () {
            var obj = new this();
            return obj;
        };
        SpriteTransition.prototype.changeState = function (state) {
            switch (state) {
                case wd.EUIState.NORMAL:
                    this.target = this.normalSprite;
                    break;
                case wd.EUIState.HIGHLIGHT:
                    this.target = this.highlightSprite;
                    break;
                case wd.EUIState.PRESSED:
                    this.target = this.pressedSprite;
                    break;
                case wd.EUIState.DISABLED:
                    this.target = this.disabledSprite;
                    break;
                default:
                    wd.Log.error(true, wd.Log.info.FUNC_UNEXPECT("state"));
                    break;
            }
        };
        return SpriteTransition;
    }(wd.Transition));
    wd.SpriteTransition = SpriteTransition;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var ColorTransition = (function (_super) {
        __extends(ColorTransition, _super);
        function ColorTransition() {
            _super.apply(this, arguments);
            this.normalColor = null;
            this.highlightColor = null;
            this.pressedColor = null;
            this.disabledColor = null;
        }
        ColorTransition.create = function () {
            var obj = new this();
            return obj;
        };
        ColorTransition.prototype.changeState = function (state) {
            switch (state) {
                case wd.EUIState.NORMAL:
                    this.target = this.normalColor;
                    break;
                case wd.EUIState.HIGHLIGHT:
                    this.target = this.highlightColor;
                    break;
                case wd.EUIState.PRESSED:
                    this.target = this.pressedColor;
                    break;
                case wd.EUIState.DISABLED:
                    this.target = this.disabledColor;
                    break;
                default:
                    wd.Log.error(true, wd.Log.info.FUNC_UNEXPECT("state"));
                    break;
            }
        };
        return ColorTransition;
    }(wd.Transition));
    wd.ColorTransition = ColorTransition;
})(wd || (wd = {}));
var wd;
(function (wd) {
    (function (ETransitionMode) {
        ETransitionMode[ETransitionMode["SPRITE"] = 0] = "SPRITE";
        ETransitionMode[ETransitionMode["COLOR"] = 1] = "COLOR";
    })(wd.ETransitionMode || (wd.ETransitionMode = {}));
    var ETransitionMode = wd.ETransitionMode;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var TransitionManager = (function () {
        function TransitionManager(ui) {
            this._ui = null;
            this._spriteTransitionMap = wdCb.Hash.create();
            this._colorTransitionMap = wdCb.Hash.create();
            this._ui = ui;
        }
        TransitionManager.create = function (ui) {
            var obj = new this(ui);
            return obj;
        };
        TransitionManager.prototype.getObjectTransition = function (objectName) {
            var result = this._getTransitionMap().getChild(objectName);
            if (!result) {
                result = this._createTransitionInstance();
                this._getTransitionMap().addChild(objectName, result);
            }
            return result;
        };
        TransitionManager.prototype.getObjectTarget = function (objectName) {
            return this.getObjectTransition(objectName).target;
        };
        TransitionManager.prototype.changeState = function (state) {
            wdFrp.fromArray([
                this._spriteTransitionMap,
                this._colorTransitionMap
            ])
                .subscribe(function (map) {
                map.forEach(function (transition) {
                    transition.changeState(state);
                });
            });
        };
        TransitionManager.prototype._getTransitionMap = function () {
            var map = null;
            switch (this._ui.transitionMode) {
                case wd.ETransitionMode.SPRITE:
                    map = this._spriteTransitionMap;
                    break;
                case wd.ETransitionMode.COLOR:
                    map = this._colorTransitionMap;
                    break;
                default:
                    wd.Log.error(true, wd.Log.info.FUNC_UNEXPECT("transitionMode"));
                    break;
            }
            return map;
        };
        TransitionManager.prototype._createTransitionInstance = function () {
            var transition = null;
            switch (this._ui.transitionMode) {
                case wd.ETransitionMode.SPRITE:
                    transition = wd.SpriteTransition.create();
                    break;
                case wd.ETransitionMode.COLOR:
                    transition = wd.ColorTransition.create();
                    break;
                default:
                    wd.Log.error(true, wd.Log.info.FUNC_UNEXPECT("transitionMode"));
                    break;
            }
            return transition;
        };
        return TransitionManager;
    }());
    wd.TransitionManager = TransitionManager;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var RoundedRectUtils = (function () {
        function RoundedRectUtils() {
        }
        RoundedRectUtils.drawRoundedRect = function (context, strokeStyle, fillStyle, cornerX, cornerY, width, height, cornerRadius) {
            context.save();
            context.beginPath();
            if (width > 0) {
                context.moveTo(cornerX + cornerRadius, cornerY);
            }
            else {
                context.moveTo(cornerX - cornerRadius, cornerY);
            }
            context.arcTo(cornerX + width, cornerY, cornerX + width, cornerY + height, cornerRadius);
            context.arcTo(cornerX + width, cornerY + height, cornerX, cornerY + height, cornerRadius);
            context.arcTo(cornerX, cornerY + height, cornerX, cornerY, cornerRadius);
            if (width > 0) {
                context.arcTo(cornerX, cornerY, cornerX + cornerRadius, cornerY, cornerRadius);
            }
            else {
                context.arcTo(cornerX, cornerY, cornerX - cornerRadius, cornerY, cornerRadius);
            }
            context.closePath();
            context.strokeStyle = strokeStyle;
            context.fillStyle = fillStyle;
            if (strokeStyle) {
                context.stroke();
            }
            if (fillStyle) {
                context.fill();
            }
            context.restore();
        };
        return RoundedRectUtils;
    }());
    wd.RoundedRectUtils = RoundedRectUtils;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var JudgeUtils = (function (_super) {
        __extends(JudgeUtils, _super);
        function JudgeUtils() {
            _super.apply(this, arguments);
        }
        JudgeUtils.isView = function (obj) {
            return !!obj && obj.offset && obj.width && obj.height && this.isFunction(obj.getContext);
        };
        JudgeUtils.isEqual = function (target1, target2) {
            if ((!target1 && target2) || (target1 && !target2)) {
                return false;
            }
            if (target1.uid && target2.uid) {
                return target1.uid === target2.uid;
            }
            return target1 === target2;
        };
        JudgeUtils.isPowerOfTwo = function (value) {
            return (value & (value - 1)) === 0 && value !== 0;
        };
        JudgeUtils.isFloatArray = function (data) {
            return wd.EntityObject.prototype.toString.call(data) === "[object Float32Array]" || wd.EntityObject.prototype.toString.call(data) === "[object Float16Array]";
        };
        JudgeUtils.isInterface = function (target, memberOfInterface) {
            return !!target[memberOfInterface];
        };
        JudgeUtils.isSpacePartitionObject = function (entityObject) {
            return entityObject.hasComponent(wd.SpacePartition);
        };
        JudgeUtils.isSelf = function (self, entityObject) {
            return self.uid === entityObject.uid;
        };
        return JudgeUtils;
    }(wdCb.JudgeUtils));
    wd.JudgeUtils = JudgeUtils;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var MathUtils = (function () {
        function MathUtils() {
        }
        MathUtils.clamp = function (num, below, up) {
            if (num < below) {
                return below;
            }
            else if (num > up) {
                return up;
            }
            return num;
        };
        MathUtils.bigThan = function (num, below) {
            return num < below ? below : num;
        };
        MathUtils.generateZeroToOne = function () {
            return Math.random();
        };
        MathUtils.generateInteger = function (min, max) {
            var max = max + 1;
            return Math.floor(Math.random() * (max - min) + min);
        };
        __decorate([
            wd.require(function (min, max) {
                wd.assert(min < max, wd.Log.info.FUNC_SHOULD("min", "< max"));
            })
        ], MathUtils, "generateInteger", null);
        return MathUtils;
    }());
    wd.MathUtils = MathUtils;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var CoordinateUtils = (function () {
        function CoordinateUtils() {
        }
        CoordinateUtils.convertWebGLPositionToCanvasPosition = function (position) {
            var view = wd.DeviceManager.getInstance().view;
            return wd.Vector2.create(view.width / 2 + position.x, view.height / 2 - position.y);
        };
        CoordinateUtils.convertCanvasPositionToWebGLPosition = function (position) {
            var view = wd.DeviceManager.getInstance().view;
            return wd.Vector3.create(position.x - view.width / 2, view.height / 2 - position.y, 0);
        };
        CoordinateUtils.convertLeftCornerPositionToCenterPosition = function (position, width, height) {
            return wd.Vector2.create(this.convertLeftCornerPositionXToCenterPositionX(position.x, width), this.convertLeftCornerPositionYToCenterPositionY(position.y, height));
        };
        CoordinateUtils.convertLeftCornerPositionXToCenterPositionX = function (positionX, width) {
            return positionX + width / 2;
        };
        CoordinateUtils.convertLeftCornerPositionYToCenterPositionY = function (positionY, height) {
            return positionY + height / 2;
        };
        CoordinateUtils.convertCenterPositionToLeftCornerPosition = function (position, width, height) {
            return wd.Vector2.create(this.convertCenterPositionXToLeftCornerPositionX(position.x, width), this.convertCenterPositionYToLeftCornerPositionY(position.y, height));
        };
        CoordinateUtils.convertCenterPositionXToLeftCornerPositionX = function (positionX, width) {
            return positionX - width / 2;
        };
        CoordinateUtils.convertCenterPositionYToLeftCornerPositionY = function (positionY, height) {
            return positionY - height / 2;
        };
        __decorate([
            wd.require(function () {
                wd.assert(!!wd.DeviceManager.getInstance().view, wd.Log.info.FUNC_SHOULD("set view"));
            })
        ], CoordinateUtils, "convertWebGLPositionToCanvasPosition", null);
        __decorate([
            wd.require(function () {
                wd.assert(!!wd.DeviceManager.getInstance().view, wd.Log.info.FUNC_SHOULD("set view"));
            })
        ], CoordinateUtils, "convertCanvasPositionToWebGLPosition", null);
        return CoordinateUtils;
    }());
    wd.CoordinateUtils = CoordinateUtils;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var Log = (function (_super) {
        __extends(Log, _super);
        function Log() {
            _super.apply(this, arguments);
        }
        return Log;
    }(wdCb.Log));
    wd.Log = Log;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var TimeController = (function () {
        function TimeController() {
            this.elapsed = null;
            this.pauseElapsed = 0;
            this.pauseTime = null;
            this.startTime = null;
        }
        TimeController.prototype.start = function () {
            this.startTime = this.getNow();
            this.pauseElapsed = null;
        };
        TimeController.prototype.stop = function () {
            this.startTime = null;
        };
        TimeController.prototype.pause = function () {
            this.pauseTime = this.getNow();
        };
        TimeController.prototype.resume = function () {
            this.pauseElapsed += this.getNow() - this.pauseTime;
            this.pauseTime = null;
        };
        TimeController.prototype.computeElapseTime = function (time) {
            if (this.pauseElapsed) {
                this.elapsed = time - this.pauseElapsed - this.startTime;
                return this.elapsed;
            }
            this.elapsed = time - this.startTime;
            return this.elapsed;
        };
        return TimeController;
    }());
    wd.TimeController = TimeController;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var STARTING_FPS = 60, GAMETIME_SCALE = 1000;
    var DirectorTimeController = (function (_super) {
        __extends(DirectorTimeController, _super);
        function DirectorTimeController() {
            _super.apply(this, arguments);
            this.gameTime = null;
            this.fps = null;
            this.isTimeChange = false;
            this.deltaTime = null;
            this._lastTime = null;
        }
        DirectorTimeController.create = function () {
            var obj = new this();
            return obj;
        };
        DirectorTimeController.prototype.tick = function (time) {
            this.deltaTime = this._lastTime !== null ? time - this._lastTime : time;
            this._updateFps(this.deltaTime);
            this.gameTime = time / GAMETIME_SCALE;
            this._lastTime = time;
        };
        DirectorTimeController.prototype.start = function () {
            _super.prototype.start.call(this);
            this.isTimeChange = true;
            this.elapsed = 0;
        };
        DirectorTimeController.prototype.resume = function () {
            _super.prototype.resume.call(this);
            this.isTimeChange = true;
        };
        DirectorTimeController.prototype.getNow = function () {
            return wd.root.performance.now();
        };
        DirectorTimeController.prototype._updateFps = function (deltaTime) {
            if (this._lastTime === null) {
                this.fps = STARTING_FPS;
            }
            else {
                this.fps = 1000 / deltaTime;
            }
        };
        return DirectorTimeController;
    }(wd.TimeController));
    wd.DirectorTimeController = DirectorTimeController;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var CommonTimeController = (function (_super) {
        __extends(CommonTimeController, _super);
        function CommonTimeController() {
            _super.apply(this, arguments);
        }
        CommonTimeController.create = function () {
            var obj = new this();
            return obj;
        };
        CommonTimeController.prototype.getNow = function () {
            if (wd.Director.getInstance().isTimeChange) {
                return wd.Director.getInstance().elapsed;
            }
            return wd.root.performance.now();
        };
        return CommonTimeController;
    }(wd.TimeController));
    wd.CommonTimeController = CommonTimeController;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var RenderTargetRenderer = (function () {
        function RenderTargetRenderer(renderTargetTexture) {
            this.texture = null;
            this.frameBufferOperator = null;
            this.texture = renderTargetTexture;
        }
        RenderTargetRenderer.prototype.initWhenCreate = function () {
            this.frameBufferOperator = wd.FrameBuffer.create(this.texture.width, this.texture.height);
        };
        RenderTargetRenderer.prototype.init = function () {
            this.texture.createEmptyTexture();
            this.initFrameBuffer();
        };
        RenderTargetRenderer.prototype.render = function (renderer, camera) {
            this.beforeRender();
            this.renderFrameBufferTexture(renderer, camera);
            this.afterRender();
        };
        RenderTargetRenderer.prototype.dispose = function () {
            this.frameBufferOperator.dispose();
            this.disposeFrameBuffer();
            this.texture.dispose();
        };
        RenderTargetRenderer.prototype.beforeRender = function () {
        };
        RenderTargetRenderer.prototype.afterRender = function () {
        };
        __decorate([
            wd.virtual
        ], RenderTargetRenderer.prototype, "beforeRender", null);
        __decorate([
            wd.virtual
        ], RenderTargetRenderer.prototype, "afterRender", null);
        return RenderTargetRenderer;
    }());
    wd.RenderTargetRenderer = RenderTargetRenderer;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var TwoDRenderTargetRenderer = (function (_super) {
        __extends(TwoDRenderTargetRenderer, _super);
        function TwoDRenderTargetRenderer() {
            _super.apply(this, arguments);
            this.frameBuffer = null;
            this.renderBuffer = null;
            this._lastCamera = null;
        }
        TwoDRenderTargetRenderer.prototype.initFrameBuffer = function () {
            var frameBuffer = this.frameBufferOperator, gl = wd.DeviceManager.getInstance().gl;
            this.frameBuffer = frameBuffer.createFrameBuffer();
            this.renderBuffer = frameBuffer.createRenderBuffer();
            frameBuffer.bindFrameBuffer(this.frameBuffer);
            frameBuffer.attachTexture(gl.TEXTURE_2D, this.texture.glTexture);
            frameBuffer.attachRenderBuffer("DEPTH_ATTACHMENT", this.renderBuffer);
            frameBuffer.check();
            frameBuffer.unBind();
        };
        TwoDRenderTargetRenderer.prototype.renderFrameBufferTexture = function (renderer, camera) {
            var renderCamera = this.createCamera(camera);
            if (this._lastCamera) {
                this._lastCamera.dispose();
            }
            this._lastCamera = renderCamera;
            this.beforeRenderFrameBufferTexture(renderCamera);
            this.frameBufferOperator.bindFrameBuffer(this.frameBuffer);
            this.texture.bindToUnit(0);
            this.frameBufferOperator.setViewport();
            this.getRenderList().forEach(function (child) {
                child.render(renderer, renderCamera);
            });
            this.renderRenderer(renderer);
            this.frameBufferOperator.unBind();
            this.frameBufferOperator.restoreViewport();
        };
        TwoDRenderTargetRenderer.prototype.disposeFrameBuffer = function () {
            var gl = wd.DeviceManager.getInstance().gl;
            gl.deleteFramebuffer(this.frameBuffer);
            gl.deleteRenderbuffer(this.renderBuffer);
        };
        return TwoDRenderTargetRenderer;
    }(wd.RenderTargetRenderer));
    wd.TwoDRenderTargetRenderer = TwoDRenderTargetRenderer;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var MirrorRenderTargetRenderer = (function (_super) {
        __extends(MirrorRenderTargetRenderer, _super);
        function MirrorRenderTargetRenderer() {
            _super.apply(this, arguments);
        }
        MirrorRenderTargetRenderer.create = function (mirrorTexture) {
            var obj = new this(mirrorTexture);
            obj.initWhenCreate();
            return obj;
        };
        MirrorRenderTargetRenderer.prototype.beforeRenderFrameBufferTexture = function (renderCamera) {
        };
        MirrorRenderTargetRenderer.prototype.getRenderList = function () {
            return this.texture.renderList;
        };
        MirrorRenderTargetRenderer.prototype.renderRenderer = function (renderer) {
            this._setSceneSide(wd.ESide.BACK);
            renderer.render();
            this._setSceneSide(null);
        };
        MirrorRenderTargetRenderer.prototype.createCamera = function (camera) {
            var mirrorCameraComponent = null, plane = null, cameraComponent = camera.getComponent(wd.CameraController), mirrorCameraViewMatrix = null, projectionMatrix = null;
            plane = this.texture.getPlane();
            mirrorCameraViewMatrix =
                plane.getReflectionMatrix().applyMatrix(cameraComponent.worldToCameraMatrix);
            projectionMatrix = this._setClipPlane(mirrorCameraViewMatrix, cameraComponent.pMatrix, plane);
            mirrorCameraComponent = wd.PerspectiveCamera.create();
            mirrorCameraComponent.worldToCameraMatrix = mirrorCameraViewMatrix.copy();
            mirrorCameraComponent.pMatrix = projectionMatrix;
            return wd.GameObject.create().addComponent(wd.BasicCameraController.create(mirrorCameraComponent)).init();
        };
        MirrorRenderTargetRenderer.prototype._setSceneSide = function (side) {
            var scene = wd.Director.getInstance().scene;
            scene.side = side;
        };
        MirrorRenderTargetRenderer.prototype._setClipPlane = function (vMatrix, pMatrix, plane) {
            var projectionMatrix = pMatrix.copy(), q = wd.Vector4.create(), clipPlane = this._getClipPlaneInCameraSpace(vMatrix, plane), c = wd.Vector4.create();
            q.x = (Math.sign(clipPlane.x) + projectionMatrix.values[8]) / projectionMatrix.values[0];
            q.y = (Math.sign(clipPlane.y) + projectionMatrix.values[9]) / projectionMatrix.values[5];
            q.z = -1.0;
            q.w = (1.0 + projectionMatrix.values[10]) / projectionMatrix.values[14];
            c = clipPlane.multiplyScalar(2.0 / clipPlane.dot(q));
            projectionMatrix.values[2] = c.x;
            projectionMatrix.values[6] = c.y;
            projectionMatrix.values[10] = c.z + 1.0;
            projectionMatrix.values[14] = c.w;
            return projectionMatrix;
        };
        MirrorRenderTargetRenderer.prototype._getClipPlaneInCameraSpace = function (vMatrix, plane) {
            var clipPlane = wd.Vector4.create(), p = vMatrix.multiplyPoint(this.texture.getPosition()), n = vMatrix.copy().invert().transpose().multiplyPoint(plane.normal).normalize();
            clipPlane.set(n.x, n.y, n.z, -p.dot(n));
            return clipPlane;
        };
        return MirrorRenderTargetRenderer;
    }(wd.TwoDRenderTargetRenderer));
    wd.MirrorRenderTargetRenderer = MirrorRenderTargetRenderer;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var TwoDShadowMapRenderTargetRenderer = (function (_super) {
        __extends(TwoDShadowMapRenderTargetRenderer, _super);
        function TwoDShadowMapRenderTargetRenderer(light) {
            _super.call(this, light.shadowMap);
            this._light = null;
            this._shadowMapRendererUtils = null;
            this._light = light;
        }
        TwoDShadowMapRenderTargetRenderer.create = function (light) {
            var obj = new this(light);
            obj.initWhenCreate();
            return obj;
        };
        TwoDShadowMapRenderTargetRenderer.prototype.initWhenCreate = function () {
            this._shadowMapRendererUtils = wd.TwoDShadowMapRenderTargetRendererUtils.create(this._light, this.texture);
            _super.prototype.initWhenCreate.call(this);
        };
        TwoDShadowMapRenderTargetRenderer.prototype.init = function () {
            var self = this;
            this._handleShadowRendererList();
            this._shadowMapRendererUtils.bindEndLoop(function () {
                self._light.shadowRenderList.forEach(function (child) {
                    self._shadowMapRendererUtils.clearTwoDShadowMapData(child);
                });
            });
            this._shadowMapRendererUtils.createShaderWithShaderLib(wd.BuildTwoDShadowMapShaderLib.create());
            _super.prototype.init.call(this);
        };
        TwoDShadowMapRenderTargetRenderer.prototype.dispose = function () {
            _super.prototype.dispose.call(this);
            this._shadowMapRendererUtils.unBindEndLoop();
        };
        TwoDShadowMapRenderTargetRenderer.prototype.beforeRenderFrameBufferTexture = function (renderCamera) {
            var self = this;
            this._light.shadowRenderList.removeRepeatItems().forEach(function (child) {
                self._shadowMapRendererUtils.setShadowMapData(child, renderCamera);
            });
        };
        TwoDShadowMapRenderTargetRenderer.prototype.getRenderList = function () {
            return this._light.shadowRenderList;
        };
        TwoDShadowMapRenderTargetRenderer.prototype.renderRenderer = function (renderer) {
            renderer.render();
        };
        TwoDShadowMapRenderTargetRenderer.prototype.beforeRender = function () {
            this._shadowMapRendererUtils.beforeRender();
        };
        TwoDShadowMapRenderTargetRenderer.prototype.afterRender = function () {
            this._shadowMapRendererUtils.afterRender();
        };
        TwoDShadowMapRenderTargetRenderer.prototype.createCamera = function () {
            var orthoCameraComponent = wd.OrthographicCamera.create(), light = this._light, camera = wd.GameObject.create();
            orthoCameraComponent.left = light.shadowCameraLeft;
            orthoCameraComponent.right = light.shadowCameraRight;
            orthoCameraComponent.top = light.shadowCameraTop;
            orthoCameraComponent.bottom = light.shadowCameraBottom;
            orthoCameraComponent.near = light.shadowCameraNear;
            orthoCameraComponent.far = light.shadowCameraFar;
            camera.addComponent(wd.BasicCameraController.create(orthoCameraComponent));
            camera.transform.translate(light.position);
            camera.transform.lookAt(0, 0, 0);
            camera.init();
            return camera;
        };
        TwoDShadowMapRenderTargetRenderer.prototype._handleShadowRendererList = function () {
            var _this = this;
            var self = this, children = [];
            this._light.shadowRenderList.forEach(function (renderTarget) {
                children = children.concat(_this._shadowMapRendererUtils.addAllChildren(renderTarget));
            }, this);
            this._light.shadowRenderList.addChildren(children);
            this._light.shadowRenderList.removeChild(function (renderTarget) {
                return self._shadowMapRendererUtils.isContainer(renderTarget);
            });
        };
        return TwoDShadowMapRenderTargetRenderer;
    }(wd.TwoDRenderTargetRenderer));
    wd.TwoDShadowMapRenderTargetRenderer = TwoDShadowMapRenderTargetRenderer;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var CubemapRenderTargetRenderer = (function (_super) {
        __extends(CubemapRenderTargetRenderer, _super);
        function CubemapRenderTargetRenderer() {
            _super.apply(this, arguments);
            this._frameBufferList = wdCb.Collection.create();
            this._renderBufferList = wdCb.Collection.create();
            this._lastCameraList = null;
            this._lastPosition = null;
        }
        CubemapRenderTargetRenderer.prototype.initFrameBuffer = function () {
            var frameBufferOperator = this.frameBufferOperator, gl = wd.DeviceManager.getInstance().gl;
            for (var i = 0; i < 6; i++) {
                var frameBuffer = frameBufferOperator.createFrameBuffer(), renderBuffer = frameBufferOperator.createRenderBuffer();
                this._frameBufferList.addChild(frameBuffer);
                this._renderBufferList.addChild(renderBuffer);
                frameBufferOperator.bindFrameBuffer(frameBuffer);
                frameBufferOperator.attachTexture(gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, this.texture.glTexture);
                frameBufferOperator.attachRenderBuffer("DEPTH_ATTACHMENT", renderBuffer);
                frameBufferOperator.check();
            }
            frameBufferOperator.unBind();
        };
        CubemapRenderTargetRenderer.prototype.renderFrameBufferTexture = function (renderer, camera) {
            var renderCamera = null, faceRenderList = null, newCameraList = null, position = this.getPosition(), renderList = null;
            renderList = this.getRenderList();
            this.texture.bindToUnit(0);
            if (this._needCreateCamera(position)) {
                newCameraList = wdCb.Collection.create();
            }
            for (var i = 0; i < 6; i++) {
                faceRenderList = renderList.getChild(this._convertIndexToFaceKey(i));
                if (this._isEmpty(faceRenderList)) {
                    continue;
                }
                if (this._needCreateCamera(position)) {
                    renderCamera = this.createCamera(i);
                    newCameraList.addChild(renderCamera);
                }
                else {
                    renderCamera = this._lastCameraList.getChild(i);
                }
                this.frameBufferOperator.bindFrameBuffer(this._frameBufferList.getChild(i));
                this.frameBufferOperator.setViewport();
                faceRenderList.forEach(function (child) {
                    child.render(renderer, renderCamera);
                });
                renderer.render();
            }
            if (this._needCreateCamera(position)) {
                if (this._lastCameraList) {
                    this._lastCameraList.forEach(function (camera) {
                        camera.dispose();
                    });
                }
                this._lastCameraList = newCameraList;
                this._lastPosition = position;
            }
            this.frameBufferOperator.unBind();
            this.frameBufferOperator.restoreViewport();
        };
        CubemapRenderTargetRenderer.prototype.disposeFrameBuffer = function () {
            var gl = wd.DeviceManager.getInstance().gl;
            this._frameBufferList.forEach(function (buffer) { return gl.deleteFramebuffer(buffer); });
            this._renderBufferList.forEach(function (buffer) { return gl.deleteRenderbuffer(buffer); });
        };
        CubemapRenderTargetRenderer.prototype.createCamera = function (index) {
            var cubeCameraComponent = wd.PerspectiveCamera.create(), camera = wd.GameObject.create(), pos = this.getPosition();
            cubeCameraComponent.fovy = 90;
            this.setCamera(cubeCameraComponent);
            camera.addComponent(wd.BasicCameraController.create(cubeCameraComponent));
            camera.transform.translate(pos);
            this._lookAtFace(camera, pos, index);
            camera.init();
            return camera;
        };
        CubemapRenderTargetRenderer.prototype._isEmpty = function (faceRenderList) {
            return !faceRenderList || (faceRenderList.length && faceRenderList.length === 0) || (faceRenderList.getCount && faceRenderList.getCount() === 0);
        };
        CubemapRenderTargetRenderer.prototype._convertIndexToFaceKey = function (index) {
            var face = null;
            switch (index) {
                case 0:
                    face = "px";
                    break;
                case 1:
                    face = "nx";
                    break;
                case 2:
                    face = "py";
                    break;
                case 3:
                    face = "ny";
                    break;
                case 4:
                    face = "pz";
                    break;
                case 5:
                    face = "nz";
                    break;
                default:
                    break;
            }
            return face;
        };
        CubemapRenderTargetRenderer.prototype._lookAtFace = function (camera, position, index) {
            switch (index) {
                case 0:
                    camera.transform.lookAt(position.x + 1, position.y, position.z, 0, -1, 0);
                    break;
                case 1:
                    camera.transform.lookAt(position.x - 1, position.y, position.z, 0, -1, 0);
                    break;
                case 2:
                    camera.transform.lookAt(position.x, position.y + 1, position.z, 0, 0, 1);
                    break;
                case 3:
                    camera.transform.lookAt(position.x, position.y - 1, position.z, 0, 0, -1);
                    break;
                case 4:
                    camera.transform.lookAt(position.x, position.y, position.z + 1, 0, -1, 0);
                    break;
                case 5:
                    camera.transform.lookAt(position.x, position.y, position.z - 1, 0, -1, 0);
                    break;
                default:
                    break;
            }
        };
        CubemapRenderTargetRenderer.prototype._needCreateCamera = function (position) {
            if (this._lastPosition === null || this._lastCameraList === null) {
                return true;
            }
            return !position.isEqual(this._lastPosition);
        };
        return CubemapRenderTargetRenderer;
    }(wd.RenderTargetRenderer));
    wd.CubemapRenderTargetRenderer = CubemapRenderTargetRenderer;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var CubemapShadowMapRenderTargetRenderer = (function (_super) {
        __extends(CubemapShadowMapRenderTargetRenderer, _super);
        function CubemapShadowMapRenderTargetRenderer(light) {
            _super.call(this, light.shadowMap);
            this._light = null;
            this._shadowMapRendererUtils = null;
            this._light = light;
        }
        CubemapShadowMapRenderTargetRenderer.create = function (light) {
            var obj = new this(light);
            obj.initWhenCreate();
            return obj;
        };
        CubemapShadowMapRenderTargetRenderer.prototype.initWhenCreate = function () {
            this._shadowMapRendererUtils = wd.CubemapShadowMapRenderTargetRendererUtils.create(this._light, this.texture);
            _super.prototype.initWhenCreate.call(this);
        };
        CubemapShadowMapRenderTargetRenderer.prototype.init = function () {
            var self = this;
            this._handleShadowRendererList();
            this._shadowMapRendererUtils.bindEndLoop(function () {
                self._light.shadowRenderList.forEach(function (childList) {
                    childList.forEach(function (child) {
                        self._shadowMapRendererUtils.clearCubemapShadowMapData(child);
                    });
                });
            });
            this._shadowMapRendererUtils.createShaderWithShaderLib(wd.BuildCubemapShadowMapShaderLib.create());
            _super.prototype.init.call(this);
        };
        CubemapShadowMapRenderTargetRenderer.prototype.dispose = function () {
            _super.prototype.dispose.call(this);
            this._shadowMapRendererUtils.unBindEndLoop();
        };
        CubemapShadowMapRenderTargetRenderer.prototype.getRenderList = function () {
            return this._light.shadowRenderList;
        };
        CubemapShadowMapRenderTargetRenderer.prototype.beforeRender = function () {
            var utils = this._shadowMapRendererUtils;
            this._convertRenderListToCollection(this.getRenderList()).removeRepeatItems().forEach(function (child) {
                utils.setShadowMapData(child);
            });
            this._shadowMapRendererUtils.beforeRender();
        };
        CubemapShadowMapRenderTargetRenderer.prototype.afterRender = function () {
            this._shadowMapRendererUtils.afterRender();
        };
        CubemapShadowMapRenderTargetRenderer.prototype.setCamera = function (camera) {
            var light = this._light;
            camera.aspect = light.shadowMapWidth / light.shadowMapHeight;
            camera.near = light.shadowCameraNear;
            camera.far = light.shadowCameraFar;
        };
        CubemapShadowMapRenderTargetRenderer.prototype.getPosition = function () {
            return this._light.position;
        };
        CubemapShadowMapRenderTargetRenderer.prototype._convertRenderListToCollection = function (renderList) {
            var resultList = wdCb.Collection.create();
            renderList.forEach(function (list) {
                resultList.addChildren(list);
            });
            return resultList;
        };
        CubemapShadowMapRenderTargetRenderer.prototype._handleShadowRendererList = function () {
            var self = this, childrenMap = wdCb.Hash.create();
            this._light.shadowRenderList.forEach(function (childList, direction) {
                var children = [];
                childList.forEach(function (renderTarget) {
                    children = children.concat(self._shadowMapRendererUtils.addAllChildren(renderTarget));
                });
                childrenMap.addChild(direction, children);
            }, this);
            this._light.shadowRenderList.forEach(function (childList, direction) {
                childList.addChildren(childrenMap.getChild(direction));
            });
            this._light.shadowRenderList.forEach(function (childList) {
                childList.removeChild(function (renderTarget) {
                    return self._shadowMapRendererUtils.isContainer(renderTarget);
                });
            });
        };
        return CubemapShadowMapRenderTargetRenderer;
    }(wd.CubemapRenderTargetRenderer));
    wd.CubemapShadowMapRenderTargetRenderer = CubemapShadowMapRenderTargetRenderer;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var DynamicCubemapRenderTargetRenderer = (function (_super) {
        __extends(DynamicCubemapRenderTargetRenderer, _super);
        function DynamicCubemapRenderTargetRenderer() {
            _super.apply(this, arguments);
        }
        DynamicCubemapRenderTargetRenderer.create = function (texture) {
            var obj = new this(texture);
            obj.initWhenCreate();
            return obj;
        };
        DynamicCubemapRenderTargetRenderer.prototype.getRenderList = function () {
            return this.texture.renderList;
        };
        DynamicCubemapRenderTargetRenderer.prototype.setCamera = function (camera) {
            camera.aspect = 1;
            camera.near = this.texture.near;
            camera.far = this.texture.far;
        };
        DynamicCubemapRenderTargetRenderer.prototype.getPosition = function () {
            return this.texture.getPosition();
        };
        return DynamicCubemapRenderTargetRenderer;
    }(wd.CubemapRenderTargetRenderer));
    wd.DynamicCubemapRenderTargetRenderer = DynamicCubemapRenderTargetRenderer;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var ShadowMapRenderTargetRendererUtils = (function () {
        function ShadowMapRenderTargetRendererUtils(light, texture) {
            this.texture = null;
            this.light = null;
            this._endLoopHandler = null;
            this._shader = null;
            this.light = light;
            this.texture = texture;
        }
        ShadowMapRenderTargetRendererUtils.prototype.initWhenCreate = function () {
            this.texture.width = this.light.shadowMapWidth;
            this.texture.height = this.light.shadowMapHeight;
        };
        ShadowMapRenderTargetRendererUtils.prototype.init = function () {
            this.texture.init();
        };
        ShadowMapRenderTargetRendererUtils.prototype.setShadowMapData = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var target = args[0], material = target.getComponent(wd.Geometry).material, shadowMapCamera = null;
            if (args.length === 2) {
                shadowMapCamera = args[1];
            }
            wd.Log.error(!(material instanceof wd.LightMaterial), wd.Log.info.FUNC_MUST_BE("material", "LightMaterial when set shadowMap"));
            this.setMaterialShadowMapData(material, target, shadowMapCamera);
        };
        ShadowMapRenderTargetRendererUtils.prototype.bindEndLoop = function (func) {
            this._endLoopHandler = func;
            wd.EventManager.on(wd.EEngineEvent.ENDLOOP, this._endLoopHandler);
        };
        ShadowMapRenderTargetRendererUtils.prototype.unBindEndLoop = function () {
            wd.EventManager.off(wd.EEngineEvent.ENDLOOP, this._endLoopHandler);
        };
        ShadowMapRenderTargetRendererUtils.prototype.beforeRender = function () {
            var scene = wd.Director.getInstance().scene;
            scene.useProgram(this._shader);
        };
        ShadowMapRenderTargetRendererUtils.prototype.afterRender = function () {
            var scene = wd.Director.getInstance().scene;
            scene.unUseProgram();
        };
        ShadowMapRenderTargetRendererUtils.prototype.createShaderWithShaderLib = function (lib) {
            this._shader = wd.Shader.create();
            this._shader.addLib(wd.CommonShaderLib.create());
            this._shader.addLib(wd.CommonVerticeShaderLib.create());
            this._shader.addLib(lib);
        };
        ShadowMapRenderTargetRendererUtils.prototype.isContainer = function (entityObject) {
            return !entityObject.hasComponent(wd.Geometry);
        };
        ShadowMapRenderTargetRendererUtils.prototype.addAllChildren = function (entityObject) {
            var children = [], add = function (entityObject) {
                entityObject.forEach(function (child) {
                    children.push(child);
                    add(child);
                });
            };
            add(entityObject);
            return children;
        };
        ShadowMapRenderTargetRendererUtils.prototype.setShadowMap = function (target, shadowMap) {
            var material = null;
            if (!target.hasComponent(wd.Geometry)) {
                return;
            }
            material = target.getComponent(wd.Geometry).material;
            if (material.hasShadowMap(shadowMap)) {
                return;
            }
            wd.Log.error(!(material instanceof wd.LightMaterial), wd.Log.info.FUNC_MUST_BE("material", "LightMaterial when set shadowMap"));
            this.addShadowMap(material, shadowMap);
        };
        return ShadowMapRenderTargetRendererUtils;
    }());
    wd.ShadowMapRenderTargetRendererUtils = ShadowMapRenderTargetRendererUtils;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var CubemapShadowMapRenderTargetRendererUtils = (function (_super) {
        __extends(CubemapShadowMapRenderTargetRendererUtils, _super);
        function CubemapShadowMapRenderTargetRendererUtils() {
            _super.apply(this, arguments);
        }
        CubemapShadowMapRenderTargetRendererUtils.create = function (light, texture) {
            var obj = new this(light, texture);
            obj.initWhenCreate();
            return obj;
        };
        CubemapShadowMapRenderTargetRendererUtils.prototype.initWhenCreate = function () {
            var self = this;
            _super.prototype.initWhenCreate.call(this);
            this.light.shadowRenderList.forEach(function (childList) {
                childList.forEach(function (child) {
                    self.setShadowMap(child, self.texture);
                });
            });
        };
        CubemapShadowMapRenderTargetRendererUtils.prototype.clearCubemapShadowMapData = function (target) {
            var material = target.getComponent(wd.Geometry).material;
            material.clearCubemapShadowMapData();
        };
        CubemapShadowMapRenderTargetRendererUtils.prototype.setMaterialShadowMapData = function (material, target, shadowMapCamera) {
            material.addCubemapShadowMapData({
                shadowBias: this.light.shadowBias,
                shadowDarkness: this.light.shadowDarkness,
                lightPos: this.light.position,
                farPlane: this.light.shadowCameraFar
            });
            material.buildCubemapShadowMapData = {
                lightPos: this.light.position,
                farPlane: this.light.shadowCameraFar
            };
        };
        CubemapShadowMapRenderTargetRendererUtils.prototype.addShadowMap = function (material, shadowMap) {
            material.addCubemapShadowMap(shadowMap);
        };
        __decorate([
            wd.require(function (target) {
                var material = target.getComponent(wd.Geometry).material;
                wd.assert(material instanceof wd.LightMaterial, wd.Log.info.FUNC_MUST_BE("material", "LightMaterial when set shadowMap"));
            })
        ], CubemapShadowMapRenderTargetRendererUtils.prototype, "clearCubemapShadowMapData", null);
        return CubemapShadowMapRenderTargetRendererUtils;
    }(wd.ShadowMapRenderTargetRendererUtils));
    wd.CubemapShadowMapRenderTargetRendererUtils = CubemapShadowMapRenderTargetRendererUtils;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var TwoDShadowMapRenderTargetRendererUtils = (function (_super) {
        __extends(TwoDShadowMapRenderTargetRendererUtils, _super);
        function TwoDShadowMapRenderTargetRendererUtils() {
            _super.apply(this, arguments);
        }
        TwoDShadowMapRenderTargetRendererUtils.create = function (light, texture) {
            var obj = new this(light, texture);
            obj.initWhenCreate();
            return obj;
        };
        TwoDShadowMapRenderTargetRendererUtils.prototype.initWhenCreate = function () {
            var self = this;
            _super.prototype.initWhenCreate.call(this);
            this.light.shadowRenderList.forEach(function (child) {
                self.setShadowMap(child, self.texture);
            });
        };
        TwoDShadowMapRenderTargetRendererUtils.prototype.clearTwoDShadowMapData = function (target) {
            var material = target.getComponent(wd.Geometry).material;
            material.clearTwoDShadowMapData();
        };
        TwoDShadowMapRenderTargetRendererUtils.prototype.setMaterialShadowMapData = function (material, target, shadowMapCamera) {
            var cameraComponent = shadowMapCamera.getComponent(wd.CameraController);
            material.addTwoDShadowMapData({
                shadowBias: this.light.shadowBias,
                shadowDarkness: this.light.shadowDarkness,
                shadowSize: [this.light.shadowMapWidth, this.light.shadowMapHeight],
                lightPos: this.light.position,
                vpMatrixFromLight: cameraComponent.worldToCameraMatrix.applyMatrix(cameraComponent.pMatrix)
            });
            material.buildTwoDShadowMapData = {
                vpMatrixFromLight: cameraComponent.worldToCameraMatrix.applyMatrix(cameraComponent.pMatrix)
            };
        };
        TwoDShadowMapRenderTargetRendererUtils.prototype.addShadowMap = function (material, shadowMap) {
            material.addTwoDShadowMap(shadowMap);
        };
        __decorate([
            wd.require(function (target) {
                var material = target.getComponent(wd.Geometry).material;
                wd.assert(material instanceof wd.LightMaterial, wd.Log.info.FUNC_MUST_BE("material", "LightMaterial when set shadowMap"));
            })
        ], TwoDShadowMapRenderTargetRendererUtils.prototype, "clearTwoDShadowMapData", null);
        return TwoDShadowMapRenderTargetRendererUtils;
    }(wd.ShadowMapRenderTargetRendererUtils));
    wd.TwoDShadowMapRenderTargetRendererUtils = TwoDShadowMapRenderTargetRendererUtils;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var Renderer = (function () {
        function Renderer() {
            this.skyboxCommand = null;
        }
        Renderer.prototype.init = function () {
        };
        return Renderer;
    }());
    wd.Renderer = Renderer;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var WebGLRenderer = (function (_super) {
        __extends(WebGLRenderer, _super);
        function WebGLRenderer() {
            _super.apply(this, arguments);
            this._commandQueue = wdCb.Collection.create();
            this._clearOptions = {
                color: wd.Color.create("#000000")
            };
        }
        WebGLRenderer.create = function () {
            var obj = new this();
            return obj;
        };
        WebGLRenderer.prototype.createQuadCommand = function () {
            return wd.QuadCommand.create();
        };
        WebGLRenderer.prototype.addCommand = function (command) {
            if (this._commandQueue.hasChild(command)) {
                return;
            }
            this._commandQueue.addChild(command);
            command.init();
        };
        WebGLRenderer.prototype.hasCommand = function () {
            return this._commandQueue.getCount() > 0 || !!this.skyboxCommand;
        };
        WebGLRenderer.prototype.render = function () {
            var deviceManager = wd.DeviceManager.getInstance();
            deviceManager.clear(this._clearOptions);
            this._renderOpaqueCommands();
            deviceManager.depthWrite = false;
            this._renderSortedTransparentCommands();
            deviceManager.depthWrite = true;
            if (this.skyboxCommand) {
                deviceManager.depthFunc = wd.EDepthFunction.LEQUAL;
                this.skyboxCommand.execute();
                deviceManager.depthFunc = wd.EDepthFunction.LESS;
            }
            this._clearCommand();
        };
        WebGLRenderer.prototype.init = function () {
            var deviceManager = wd.DeviceManager.getInstance();
            deviceManager.depthTest = true;
            deviceManager.blend = false;
            deviceManager.setColorWrite(true, true, true, true);
            deviceManager.side = wd.ESide.FRONT;
            deviceManager.depthWrite = true;
        };
        WebGLRenderer.prototype.setClearColor = function (color) {
            this._setClearOptions({
                color: color
            });
        };
        WebGLRenderer.prototype._renderOpaqueCommands = function () {
            this._commandQueue
                .removeChild(function (command) {
                return !command.material.blend;
            })
                .forEach(function (command) {
                command.execute();
            });
        };
        WebGLRenderer.prototype._renderSortedTransparentCommands = function () {
            var self = this;
            this._commandQueue
                .sort(function (a, b) {
                return self._getObjectToCameraZDistance(b) - self._getObjectToCameraZDistance(a);
            })
                .forEach(function (command) {
                command.execute();
            });
        };
        WebGLRenderer.prototype._getObjectToCameraZDistance = function (quad) {
            return wd.Director.getInstance().scene.currentCamera.transform.position.z - quad.z;
        };
        WebGLRenderer.prototype._clearCommand = function () {
            this._commandQueue.removeAllChildren();
            this.skyboxCommand = null;
        };
        WebGLRenderer.prototype._setClearOptions = function (clearOptions) {
            wdCb.ExtendUtils.extend(this._clearOptions, clearOptions);
        };
        return WebGLRenderer;
    }(wd.Renderer));
    wd.WebGLRenderer = WebGLRenderer;
})(wd || (wd = {}));
var wd;
(function (wd) {
    (function (EDrawMode) {
        EDrawMode[EDrawMode["POINTS"] = "POINTS"] = "POINTS";
        EDrawMode[EDrawMode["LINES"] = "LINES"] = "LINES";
        EDrawMode[EDrawMode["LINE_LOOP"] = "LINE_LOOP"] = "LINE_LOOP";
        EDrawMode[EDrawMode["LINE_STRIP"] = "LINE_STRIP"] = "LINE_STRIP";
        EDrawMode[EDrawMode["TRIANGLES"] = "TRIANGLES"] = "TRIANGLES";
        EDrawMode[EDrawMode["TRIANGLE_STRIP"] = "TRIANGLE_STRIP"] = "TRIANGLE_STRIP";
        EDrawMode[EDrawMode["TRANGLE_FAN"] = "TRIANGLE_FAN"] = "TRANGLE_FAN";
    })(wd.EDrawMode || (wd.EDrawMode = {}));
    var EDrawMode = wd.EDrawMode;
})(wd || (wd = {}));
var wd;
(function (wd) {
    (function (EBufferType) {
        EBufferType[EBufferType["BYTE"] = "BYTE"] = "BYTE";
        EBufferType[EBufferType["UNSIGNED_BYTE"] = "UNSIGNED_BYTE"] = "UNSIGNED_BYTE";
        EBufferType[EBufferType["SHORT"] = "SHORT"] = "SHORT";
        EBufferType[EBufferType["UNSIGNED_SHORT"] = "UNSIGNED_SHORT"] = "UNSIGNED_SHORT";
        EBufferType[EBufferType["INT"] = "INT"] = "INT";
        EBufferType[EBufferType["UNSIGNED_INT"] = "UNSIGNED_INT"] = "UNSIGNED_INT";
        EBufferType[EBufferType["FLOAT"] = "FLOAT"] = "FLOAT";
    })(wd.EBufferType || (wd.EBufferType = {}));
    var EBufferType = wd.EBufferType;
})(wd || (wd = {}));
var wd;
(function (wd) {
    (function (EBufferDataType) {
        EBufferDataType[EBufferDataType["VERTICE"] = "VERTICE"] = "VERTICE";
        EBufferDataType[EBufferDataType["INDICE"] = "INDICE"] = "INDICE";
        EBufferDataType[EBufferDataType["NORMAL"] = "NORMAL"] = "NORMAL";
        EBufferDataType[EBufferDataType["TEXCOORD"] = "TEXCOORD"] = "TEXCOORD";
        EBufferDataType[EBufferDataType["TANGENT"] = "TANGENT"] = "TANGENT";
        EBufferDataType[EBufferDataType["COLOR"] = "COLOR"] = "COLOR";
    })(wd.EBufferDataType || (wd.EBufferDataType = {}));
    var EBufferDataType = wd.EBufferDataType;
})(wd || (wd = {}));
var wd;
(function (wd) {
    (function (EBufferUsage) {
        EBufferUsage[EBufferUsage["STREAM_DRAW"] = "STREAM_DRAW"] = "STREAM_DRAW";
        EBufferUsage[EBufferUsage["STATIC_DRAW"] = "STATIC_DRAW"] = "STATIC_DRAW";
        EBufferUsage[EBufferUsage["DYNAMIC_DRAW"] = "DYNAMIC_DRAW"] = "DYNAMIC_DRAW";
    })(wd.EBufferUsage || (wd.EBufferUsage = {}));
    var EBufferUsage = wd.EBufferUsage;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var Buffer = (function () {
        function Buffer() {
            this.buffer = null;
            this.type = null;
            this.count = null;
        }
        Buffer.prototype.dispose = function () {
            wd.DeviceManager.getInstance().gl.deleteBuffer(this.buffer);
            delete this.buffer;
        };
        return Buffer;
    }());
    wd.Buffer = Buffer;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var ElementBuffer = (function (_super) {
        __extends(ElementBuffer, _super);
        function ElementBuffer() {
            _super.apply(this, arguments);
            this._typeSize = null;
            this.data = null;
            this._type = null;
        }
        ElementBuffer.create = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var obj = new this();
            obj.initWhenCreate.apply(obj, args);
            return obj;
        };
        Object.defineProperty(ElementBuffer.prototype, "typeSize", {
            get: function () { return this._typeSize; },
            enumerable: true,
            configurable: true
        });
        ElementBuffer.prototype.initWhenCreate = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var gl = wd.DeviceManager.getInstance().gl;
            this.buffer = gl.createBuffer();
            if (!this.buffer) {
                wd.Log.log('Failed to create the this.buffer object');
                return null;
            }
            if (args.length === 0) {
                return;
            }
            else {
                var data = args[0], type = args[1], usage = args[2] || wd.EBufferUsage.STATIC_DRAW;
                if (!data || !this._checkDataType(data, type)) {
                    return null;
                }
                gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.buffer);
                gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, data, gl[usage]);
                gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);
                this.type = gl[type];
                this._type = type;
                this.count = data.length;
                this.data = data;
                this._typeSize = this._getInfo(type).size;
                return this.buffer;
            }
        };
        ElementBuffer.prototype.resetData = function (data, type) {
            if (type === void 0) { type = this._type; }
            var gl = wd.DeviceManager.getInstance().gl;
            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.buffer);
            gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, data, gl.DYNAMIC_DRAW);
            this.type = gl[type];
            this._type = type;
            this.data = data;
            this.count = data.length;
            this._typeSize = this._getInfo(type).size;
            return this;
        };
        ElementBuffer.prototype._checkDataType = function (data, type) {
            var info = this._getInfo(type);
            return data instanceof info.typeClass;
        };
        ElementBuffer.prototype._getInfo = function (type) {
            var info = null;
            switch (type) {
                case wd.EBufferType.UNSIGNED_BYTE:
                    info = {
                        typeClass: Uint8Array,
                        size: 1
                    };
                    break;
                case wd.EBufferType.SHORT:
                    info = {
                        typeClass: Int16Array,
                        size: 2
                    };
                    break;
                case wd.EBufferType.UNSIGNED_SHORT:
                    info = {
                        typeClass: Uint16Array,
                        size: 2
                    };
                    break;
                case wd.EBufferType.INT:
                    info = {
                        typeClass: Int32Array,
                        size: 4
                    };
                    break;
                case wd.EBufferType.UNSIGNED_INT:
                    info = {
                        typeClass: Uint32Array,
                        size: 4
                    };
                    break;
                case wd.EBufferType.FLOAT:
                    info = {
                        typeClass: Float32Array,
                        size: 4
                    };
                    break;
                default:
                    wd.Log.error(true, wd.Log.info.FUNC_INVALID("EBufferType"));
                    break;
            }
            return info;
        };
        __decorate([
            wd.require(function (data, type) {
                if (type === void 0) { type = this._type; }
                wd.assert(this.buffer, wd.Log.info.FUNC_MUST("create gl buffer"));
            })
        ], ElementBuffer.prototype, "resetData", null);
        return ElementBuffer;
    }(wd.Buffer));
    wd.ElementBuffer = ElementBuffer;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var ArrayBuffer = (function (_super) {
        __extends(ArrayBuffer, _super);
        function ArrayBuffer() {
            _super.apply(this, arguments);
            this.size = null;
            this.data = null;
            this._type = null;
        }
        ArrayBuffer.create = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var obj = new this();
            obj.initWhenCreate.apply(obj, args);
            return obj;
        };
        ArrayBuffer.prototype.initWhenCreate = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var gl = wd.DeviceManager.getInstance().gl;
            this.buffer = gl.createBuffer();
            if (!this.buffer) {
                wd.Log.log('Failed to create the this.buffer object');
                return null;
            }
            if (args.length === 0) {
                return;
            }
            else {
                var data = args[0], size = args[1], type = args[2], usage = args[3] || wd.EBufferUsage.STATIC_DRAW;
                if (!data) {
                    return null;
                }
                gl.bindBuffer(gl.ARRAY_BUFFER, this.buffer);
                gl.bufferData(gl.ARRAY_BUFFER, data, gl[usage]);
                gl.bindBuffer(gl.ARRAY_BUFFER, null);
                this.size = size;
                this.type = gl[type];
                this._type = type;
                this.count = data.length / size;
                this.data = data;
                return this.buffer;
            }
        };
        ArrayBuffer.prototype.resetData = function (data, size, type) {
            if (size === void 0) { size = this.size; }
            if (type === void 0) { type = this._type; }
            var gl = wd.DeviceManager.getInstance().gl;
            gl.bindBuffer(gl.ARRAY_BUFFER, this.buffer);
            gl.bufferData(gl.ARRAY_BUFFER, data, gl.DYNAMIC_DRAW);
            this.size = size;
            this.type = gl[type];
            this._type = type;
            this.count = data.length / size;
            this.data = data;
            return this;
        };
        __decorate([
            wd.require(function (data, size, type) {
                if (size === void 0) { size = this.size; }
                if (type === void 0) { type = this._type; }
                wd.assert(this.buffer, wd.Log.info.FUNC_MUST("create gl buffer"));
            })
        ], ArrayBuffer.prototype, "resetData", null);
        return ArrayBuffer;
    }(wd.Buffer));
    wd.ArrayBuffer = ArrayBuffer;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var _table = wdCb.Hash.create();
    _table.addChild(wd.EBufferDataType.VERTICE, "vertices");
    _table.addChild(wd.EBufferDataType.INDICE, "indices");
    _table.addChild(wd.EBufferDataType.NORMAL, "normals");
    _table.addChild(wd.EBufferDataType.TEXCOORD, "texCoords");
    _table.addChild(wd.EBufferDataType.COLOR, "colors");
    _table.addChild(wd.EBufferDataType.TANGENT, "tangents");
    var BufferDataTable = (function () {
        function BufferDataTable() {
        }
        BufferDataTable.getGeometryDataName = function (type) {
            var result = _table.getChild(type);
            wd.Log.error(result === void 0, wd.Log.info.FUNC_NOT_EXIST(type, "in BufferDataTable"));
            return result;
        };
        return BufferDataTable;
    }());
    wd.BufferDataTable = BufferDataTable;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var Program = (function () {
        function Program() {
            this._program = null;
            this._shader = null;
        }
        Program.create = function () {
            var obj = new this();
            return obj;
        };
        Program.prototype.use = function () {
            wd.DeviceManager.getInstance().gl.useProgram(this._program);
        };
        Program.prototype.getUniformLocation = function (name) {
            return wd.DeviceManager.getInstance().gl.getUniformLocation(this._program, name);
        };
        Program.prototype.sendUniformData = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var gl = wd.DeviceManager.getInstance().gl, pos = null, type = null, data = null;
            if (args[0] === null || args[0] instanceof WebGLUniformLocation) {
                pos = args[0];
            }
            else {
                var name_2 = args[0];
                pos = this.getUniformLocation(name_2);
            }
            type = args[1];
            data = args[2];
            if (this.isUniformDataNotExistByLocation(pos) || data === null) {
                return;
            }
            if (wd.JudgeUtils.isFunction(data)) {
                data = data();
            }
            switch (type) {
                case wd.EVariableType.FLOAT_1:
                    gl.uniform1f(pos, data);
                    break;
                case wd.EVariableType.FLOAT_2:
                    gl.uniform2f(pos, data[0], data[1]);
                    break;
                case wd.EVariableType.FLOAT_3:
                    data = this._convertToVector3(data);
                    gl.uniform3f(pos, data.x, data.y, data.z);
                    break;
                case wd.EVariableType.FLOAT_4:
                    data = this._convertToVector4(data);
                    gl.uniform4f(pos, data.x, data.y, data.z, data.w);
                    break;
                case wd.EVariableType.FLOAT_MAT3:
                    gl.uniformMatrix3fv(pos, false, data.values);
                    break;
                case wd.EVariableType.FLOAT_MAT4:
                    gl.uniformMatrix4fv(pos, false, data.values);
                    break;
                case wd.EVariableType.NUMBER_1:
                case wd.EVariableType.SAMPLER_CUBE:
                case wd.EVariableType.SAMPLER_2D:
                    gl.uniform1i(pos, data);
                    break;
                default:
                    wd.Log.error(true, wd.Log.info.FUNC_INVALID("EVariableType:", type));
                    break;
            }
        };
        Program.prototype.sendUniformDataFromCustomShader = function () {
            var self = this;
            this._shader.uniforms
                .filter(function (val) {
                return val.value !== wd.EVariableCategory.ENGINE;
            })
                .forEach(function (val, key) {
                if (val.type === wd.EVariableType.STRUCTURE) {
                    wd.Log.error(!wd.JudgeUtils.isDirectObject(val.value), wd.Log.info.FUNC_MUST_BE("value's type", "object{}"));
                    for (var i in val.value) {
                        self.sendStructureData(key + "." + i, val.value[i].type, val.value[i].value);
                    }
                }
                else {
                    self.sendUniformData(key, val.type, val.value);
                }
            });
        };
        Program.prototype.sendAttributeData = function (name, type, data) {
            var gl = wd.DeviceManager.getInstance().gl, pos = null, buffer = null;
            pos = gl.getAttribLocation(this._program, name);
            if (pos === -1 || data === null) {
                return;
            }
            if (wd.JudgeUtils.isFunction(data)) {
                buffer = data();
                wd.Log.error(!(data instanceof wd.ArrayBuffer), wd.Log.info.FUNC_MUST_BE("ArrayBuffer"));
            }
            else {
                buffer = data;
            }
            switch (type) {
                case wd.EVariableType.BUFFER:
                    gl.bindBuffer(gl.ARRAY_BUFFER, buffer.buffer);
                    gl.vertexAttribPointer(pos, buffer.size, buffer.type, false, 0, 0);
                    gl.enableVertexAttribArray(pos);
                    break;
                default:
                    wd.Log.error(true, wd.Log.info.FUNC_INVALID("EVariableType:", type));
                    break;
            }
        };
        Program.prototype.sendAttributeDataFromCustomShader = function () {
            var self = this;
            this._shader.attributes
                .filter(function (val) {
                return val.value !== wd.EVariableCategory.ENGINE;
            })
                .forEach(function (val, key) {
                self.sendAttributeData(key, self._convertAttributeDataType(val), val.value);
            });
        };
        Program.prototype.sendStructureData = function (name, type, data) {
            this.sendUniformData(name, type, data);
        };
        Program.prototype.initWithShader = function (shader) {
            var gl = wd.DeviceManager.getInstance().gl, vs = null, fs = null;
            this._program = wd.DeviceManager.getInstance().gl.createProgram();
            vs = shader.createVsShader();
            fs = shader.createFsShader();
            this._shader = shader;
            gl.attachShader(this._program, vs);
            gl.attachShader(this._program, fs);
            gl.bindAttribLocation(this._program, 0, "a_position");
            gl.linkProgram(this._program);
            wd.Log.error(gl.getProgramParameter(this._program, gl.LINK_STATUS) === false, gl.getProgramInfoLog(this._program));
            gl.deleteShader(vs);
            gl.deleteShader(fs);
            return this;
        };
        Program.prototype.dispose = function () {
            var gl = wd.DeviceManager.getInstance().gl;
            gl.deleteProgram(this._program);
            this._program = undefined;
        };
        Program.prototype.isUniformDataNotExistByLocation = function (pos) {
            return pos === null;
        };
        Program.prototype._convertAttributeDataType = function (val) {
            return wd.EVariableType.BUFFER;
        };
        Program.prototype._convertToVector3 = function (data) {
            if (wd.JudgeUtils.isArray(data)) {
                return wd.Vector3.create(data[0], data[1], data[2]);
            }
            return data;
        };
        Program.prototype._convertToVector4 = function (data) {
            if (wd.JudgeUtils.isArray(data)) {
                return wd.Vector4.create(data[0], data[1], data[2], data[3]);
            }
            return data;
        };
        __decorate([
            wd.require(function (data) {
                wd.assert(wd.JudgeUtils.isArray(data) || data instanceof wd.Vector3, wd.Log.info.FUNC_MUST_BE("shader->attributes->value", "Array<Array<any>> or Array<Vector3> stucture"));
            })
        ], Program.prototype, "_convertToVector3", null);
        __decorate([
            wd.require(function (data) {
                wd.assert(wd.JudgeUtils.isArray(data) || data instanceof wd.Vector4, wd.Log.info.FUNC_MUST_BE("shader->attributes->value", "Array<Array<any>> or Array<Vector4> stucture"));
            })
        ], Program.prototype, "_convertToVector4", null);
        return Program;
    }());
    wd.Program = Program;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var QuadCommand = (function () {
        function QuadCommand() {
            this.buffers = null;
            this.mMatrix = null;
            this.vMatrix = null;
            this.pMatrix = null;
            this.drawMode = wd.EDrawMode.TRIANGLES;
            this.z = null;
            this.material = null;
            this.animation = null;
        }
        QuadCommand.create = function () {
            var obj = new this();
            return obj;
        };
        Object.defineProperty(QuadCommand.prototype, "program", {
            get: function () {
                return this.material.program;
            },
            enumerable: true,
            configurable: true
        });
        QuadCommand.prototype.execute = function () {
            this.material.updateTexture();
            this.material.updateShader(this);
            this._draw();
        };
        QuadCommand.prototype.init = function () {
        };
        QuadCommand.prototype._draw = function () {
            var totalNum = 0, startOffset = 0, vertexBuffer = null, gl = wd.DeviceManager.getInstance().gl;
            this._setEffects();
            if (this.buffers.hasChild(wd.EBufferDataType.INDICE)) {
                var indexBuffer = this.buffers.getChild(wd.EBufferDataType.INDICE);
                totalNum = indexBuffer.count;
                gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer.buffer);
                wd.GlUtils.drawElements(gl[this.drawMode], totalNum, indexBuffer.type, indexBuffer.typeSize * startOffset);
            }
            else {
                vertexBuffer = this.buffers.getChild(wd.EBufferDataType.VERTICE);
                totalNum = vertexBuffer.count;
                wd.GlUtils.drawArrays(gl[this.drawMode], startOffset, totalNum);
            }
        };
        QuadCommand.prototype._setEffects = function () {
            var deviceManager = wd.DeviceManager.getInstance(), material = this.material;
            deviceManager.setColorWrite(material.redWrite, material.greenWrite, material.blueWrite, material.alphaWrite);
            deviceManager.polygonOffsetMode = material.polygonOffsetMode;
            deviceManager.side = this._getSide();
            deviceManager.blend = material.blend;
            if (material.blendFuncSeparate && material.blendEquationSeparate) {
                deviceManager.setBlendFuncSeparate(material.blendFuncSeparate);
                deviceManager.setBlendEquationSeparate(material.blendEquationSeparate);
            }
            else {
                wdCb.Log.error(!material.blendSrc || !material.blendDst || !material.blendEquation, wdCb.Log.info.FUNC_MUST("material.blendSrc || material.blendDst || material.blendEquation", "be set"));
                deviceManager.setBlendFunc(material.blendSrc, material.blendDst);
                deviceManager.setBlendEquation(material.blendEquation);
            }
        };
        QuadCommand.prototype._getSide = function () {
            var scene = wd.Director.getInstance().scene;
            return scene.side ? scene.side : this.material.side;
        };
        return QuadCommand;
    }());
    wd.QuadCommand = QuadCommand;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var GlUtils = (function () {
        function GlUtils() {
        }
        GlUtils.drawElements = function (mode, count, type, offset) {
            wd.DebugStatistics.count.drawCalls++;
            this._getGl().drawElements(mode, count, type, offset);
        };
        GlUtils.drawArrays = function (mode, first, count) {
            wd.DebugStatistics.count.drawCalls++;
            this._getGl().drawArrays(mode, first, count);
        };
        GlUtils._getGl = function () {
            return wd.DeviceManager.getInstance().gl;
        };
        return GlUtils;
    }());
    wd.GlUtils = GlUtils;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var FrameBuffer = (function () {
        function FrameBuffer(width, height) {
            this.width = null;
            this.height = null;
            this._originScissorTest = null;
            this.width = width;
            this.height = height;
        }
        FrameBuffer.create = function (width, height) {
            var obj = new this(width, height);
            return obj;
        };
        Object.defineProperty(FrameBuffer.prototype, "gl", {
            get: function () {
                return wd.DeviceManager.getInstance().gl;
            },
            enumerable: true,
            configurable: true
        });
        FrameBuffer.prototype.createFrameBuffer = function () {
            return this.gl.createFramebuffer();
        };
        FrameBuffer.prototype.bindFrameBuffer = function (buffer) {
            var gl = this.gl;
            gl.bindFramebuffer(gl.FRAMEBUFFER, buffer);
        };
        FrameBuffer.prototype.setViewport = function () {
            var deviceManager = wd.DeviceManager.getInstance();
            deviceManager.setViewport(0, 0, this.width, this.height);
            this._originScissorTest = deviceManager.scissorTest;
            deviceManager.scissorTest = false;
        };
        FrameBuffer.prototype.restoreViewport = function () {
            var deviceManager = wd.DeviceManager.getInstance(), view = deviceManager.view;
            deviceManager.setViewport(0, 0, view.width, view.height);
            deviceManager.scissorTest = this._originScissorTest;
        };
        FrameBuffer.prototype.dispose = function () {
            this.unBind();
        };
        FrameBuffer.prototype.unBind = function () {
            var gl = this.gl;
            gl.bindFramebuffer(gl.FRAMEBUFFER, null);
            gl.bindRenderbuffer(gl.RENDERBUFFER, null);
        };
        FrameBuffer.prototype.createRenderBuffer = function () {
            var gl = this.gl, renderBuffer = gl.createRenderbuffer();
            wd.Log.error(!renderBuffer, "Failed to create renderbuffer object");
            return renderBuffer;
        };
        FrameBuffer.prototype.attachTexture = function (glTarget, texture) {
            var gl = this.gl;
            gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, glTarget, texture, 0);
        };
        FrameBuffer.prototype.attachRenderBuffer = function (type, renderBuffer) {
            var gl = this.gl;
            gl.bindRenderbuffer(gl.RENDERBUFFER, renderBuffer);
            gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, this.width, this.height);
            gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl[type], gl.RENDERBUFFER, renderBuffer);
        };
        FrameBuffer.prototype.check = function () {
            var gl = this.gl, e = gl.checkFramebufferStatus(gl.FRAMEBUFFER);
            if (e !== gl.FRAMEBUFFER_COMPLETE) {
                wd.Log.error(true, "Frame buffer object is incomplete:" + e.toString());
            }
        };
        return FrameBuffer;
    }());
    wd.FrameBuffer = FrameBuffer;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var Shader = (function () {
        function Shader() {
            this._attributes = wdCb.Hash.create();
            this._uniforms = wdCb.Hash.create();
            this._vsSource = "";
            this._fsSource = "";
            this.program = wd.Program.create();
            this._definitionDataDirty = true;
            this._libs = wdCb.Collection.create();
            this._sourceBuilder = wd.ShaderSourceBuilder.create();
        }
        Shader.create = function () {
            var obj = new this();
            return obj;
        };
        Object.defineProperty(Shader.prototype, "attributes", {
            get: function () {
                return this._attributes;
            },
            set: function (attributes) {
                if (this._isNotEqual(attributes, this._attributes)) {
                    this._definitionDataDirty = true;
                }
                this._attributes = attributes;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Shader.prototype, "uniforms", {
            get: function () {
                return this._uniforms;
            },
            set: function (uniforms) {
                if (this._isNotEqual(uniforms, this._uniforms)) {
                    this._definitionDataDirty = true;
                }
                this._uniforms = uniforms;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Shader.prototype, "vsSource", {
            get: function () {
                return this._vsSource;
            },
            set: function (vsSource) {
                if (vsSource !== this._vsSource) {
                    this._definitionDataDirty = true;
                }
                this._vsSource = vsSource;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Shader.prototype, "fsSource", {
            get: function () {
                return this._fsSource;
            },
            set: function (fsSource) {
                if (fsSource !== this._fsSource) {
                    this._definitionDataDirty = true;
                }
                this._fsSource = fsSource;
            },
            enumerable: true,
            configurable: true
        });
        Shader.prototype.createVsShader = function () {
            var gl = wd.DeviceManager.getInstance().gl;
            return this._initShader(gl.createShader(gl.VERTEX_SHADER), this.vsSource);
        };
        Shader.prototype.createFsShader = function () {
            var gl = wd.DeviceManager.getInstance().gl;
            return this._initShader(gl.createShader(gl.FRAGMENT_SHADER), this.fsSource);
        };
        Shader.prototype.isEqual = function (other) {
            return this.vsSource === other.vsSource
                && this.fsSource === other.fsSource;
        };
        Shader.prototype.init = function () {
        };
        Shader.prototype.update = function (quadCmd, material) {
            var program = this.program;
            this.buildDefinitionData(quadCmd, material);
            if (this._definitionDataDirty) {
                this.program.initWithShader(this);
                this._definitionDataDirty = false;
            }
            this.program.use();
            this._libs.forEach(function (lib) {
                lib.sendShaderVariables(program, quadCmd, material);
            });
            program.sendAttributeDataFromCustomShader();
            program.sendUniformDataFromCustomShader();
            material.mapManager.sendData(program);
        };
        Shader.prototype.hasLib = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            if (args[0] instanceof wd.ShaderLib) {
                var lib = args[0];
                return this._libs.hasChild(lib);
            }
            else {
                var _class_2 = args[0];
                return this._libs.hasChild(function (lib) {
                    return lib instanceof _class_2;
                });
            }
        };
        Shader.prototype.addLib = function (lib) {
            this._libs.addChild(lib);
        };
        Shader.prototype.addShaderLibToTop = function (lib) {
            this._libs.unShiftChild(lib);
        };
        Shader.prototype.getLib = function (libClass) {
            return this._libs.findOne(function (lib) {
                return lib instanceof libClass;
            });
        };
        Shader.prototype.getLibs = function () {
            return this._libs;
        };
        Shader.prototype.removeLib = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            return this._libs.removeChild(args[0]);
        };
        Shader.prototype.removeAllLibs = function () {
            this._libs.removeAllChildren();
        };
        Shader.prototype.sortLib = function (func) {
            this._libs = this._libs.sort(func);
        };
        Shader.prototype.read = function (definitionData) {
            this._sourceBuilder.read(definitionData);
        };
        Shader.prototype.buildDefinitionData = function (quadCmd, material) {
            this._libs.forEach(function (lib) {
                lib.setShaderDefinition(quadCmd, material);
            });
            this._sourceBuilder.clearShaderDefinition();
            this._sourceBuilder.build(this._libs);
            this.attributes = this._sourceBuilder.attributes;
            this.uniforms = this._sourceBuilder.uniforms;
            this.vsSource = this._sourceBuilder.vsSource;
            this.fsSource = this._sourceBuilder.fsSource;
        };
        Shader.prototype._initShader = function (shader, source) {
            var gl = wd.DeviceManager.getInstance().gl;
            gl.shaderSource(shader, source);
            gl.compileShader(shader);
            if (gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
                return shader;
            }
            else {
                wd.Log.log(gl.getShaderInfoLog(shader));
                wd.Log.log("attributes:\n", this.attributes);
                wd.Log.log("uniforms:\n", this.uniforms);
                wd.Log.log("source:\n", source);
            }
        };
        Shader.prototype._isNotEqual = function (list1, list2) {
            var result = false;
            list1.forEach(function (data, key) {
                var list2Data = list2.getChild(key);
                if (!list2Data || data.type !== list2Data.type || data.value !== list2Data.value) {
                    result = true;
                    return wdCb.$BREAK;
                }
            });
            return result;
        };
        return Shader;
    }());
    wd.Shader = Shader;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var ShaderSourceBuilder = (function () {
        function ShaderSourceBuilder() {
            this.attributes = wdCb.Hash.create();
            this.uniforms = wdCb.Hash.create();
            this.vsSource = "";
            this.vsSourceTop = "";
            this.vsSourceDefine = "";
            this.vsSourceVarDeclare = "";
            this.vsSourceFuncDeclare = "";
            this.vsSourceFuncDefine = "";
            this.vsSourceBody = "";
            this.fsSource = "";
            this.fsSourceTop = "";
            this.fsSourceDefine = "";
            this.fsSourceVarDeclare = "";
            this.fsSourceFuncDeclare = "";
            this.fsSourceFuncDefine = "";
            this.fsSourceBody = "";
            this.vsSourceDefineList = wdCb.Collection.create();
            this.fsSourceDefineList = wdCb.Collection.create();
            this.attributesFromShaderLib = wdCb.Hash.create();
            this.uniformsFromShaderLib = wdCb.Hash.create();
            this.vsSourceTopFromShaderLib = "";
            this.vsSourceDefineFromShaderLib = "";
            this.vsSourceVarDeclareFromShaderLib = "";
            this.vsSourceFuncDeclareFromShaderLib = "";
            this.vsSourceFuncDefineFromShaderLib = "";
            this.vsSourceBodyFromShaderLib = "";
            this.fsSourceTopFromShaderLib = "";
            this.fsSourceDefineFromShaderLib = "";
            this.fsSourceVarDeclareFromShaderLib = "";
            this.fsSourceFuncDeclareFromShaderLib = "";
            this.fsSourceFuncDefineFromShaderLib = "";
            this.fsSourceBodyFromShaderLib = "";
        }
        ShaderSourceBuilder.create = function () {
            var obj = new this();
            return obj;
        };
        ShaderSourceBuilder.prototype.read = function (definitionData) {
            if (definitionData.attributes) {
                this.attributesFromShaderLib = (definitionData.attributes instanceof wdCb.Hash ? definitionData.attributes : wdCb.Hash.create(definitionData.attributes));
            }
            if (definitionData.uniforms) {
                this.uniformsFromShaderLib = (definitionData.uniforms instanceof wdCb.Hash ? definitionData.uniforms : wdCb.Hash.create(definitionData.uniforms));
            }
            this.vsSourceTopFromShaderLib = definitionData.vsSourceTop || "";
            this.vsSourceDefineFromShaderLib = definitionData.vsSourceDefine || "";
            this.vsSourceVarDeclareFromShaderLib = definitionData.vsSourceVarDeclare || "";
            this.vsSourceFuncDeclareFromShaderLib = definitionData.vsSourceFuncDeclare || "";
            this.vsSourceFuncDefineFromShaderLib = definitionData.vsSourceFuncDefine || "";
            this.vsSourceBodyFromShaderLib = definitionData.vsSourceBody || "";
            this.fsSourceTopFromShaderLib = definitionData.fsSourceTop || "";
            this.fsSourceDefineFromShaderLib = definitionData.fsSourceDefine || "";
            this.fsSourceVarDeclareFromShaderLib = definitionData.fsSourceVarDeclare || "";
            this.fsSourceFuncDeclareFromShaderLib = definitionData.fsSourceFuncDeclare || "";
            this.fsSourceFuncDefineFromShaderLib = definitionData.fsSourceFuncDefine || "";
            this.fsSourceBodyFromShaderLib = definitionData.fsSourceBody || "";
        };
        ShaderSourceBuilder.prototype.build = function (libs) {
            var self = this;
            this._readLibSource(libs);
            this._buildVsSource();
            this._buildFsSource();
            this.attributes
                .filter(function (data) {
                return (wd.JudgeUtils.isArray(data.value) || wd.JudgeUtils.isFloatArray(data.value)) && data.value !== wd.EVariableCategory.ENGINE;
            })
                .forEach(function (data, key) {
                data.value = self._convertArrayToArrayBuffer(data.type, data.value);
            });
        };
        ShaderSourceBuilder.prototype.clearShaderDefinition = function () {
            this.attributes.removeAllChildren();
            this.uniforms.removeAllChildren();
            this.vsSourceDefineList.removeAllChildren();
            this.fsSourceDefineList.removeAllChildren();
            this.vsSourceTop = "";
            this.vsSourceDefine = "";
            this.vsSourceVarDeclare = "";
            this.vsSourceFuncDeclare = "";
            this.vsSourceFuncDefine = "";
            this.vsSourceBody = "";
            this.fsSourceTop = "";
            this.fsSourceDefine = "";
            this.fsSourceVarDeclare = "";
            this.fsSourceFuncDeclare = "";
            this.fsSourceFuncDefine = "";
            this.fsSourceBody = "";
        };
        ShaderSourceBuilder.prototype._readLibSource = function (libs) {
            var self = this, vsSourceTop = "", vsSourceDefine = "", vsSourceVarDeclare = "", vsSourceFuncDeclare = "", vsSourceFuncDefine = "", vsSourceBody = "", fsSourceTop = "", fsSourceDefine = "", fsSourceVarDeclare = "", fsSourceFuncDeclare = "", fsSourceFuncDefine = "", fsSourceBody = "";
            libs.forEach(function (lib) {
                self.attributes.addChildren(lib.attributes);
                self.uniforms.addChildren(lib.uniforms);
                vsSourceTop += lib.vsSourceTop;
                vsSourceDefine += lib.vsSourceDefine;
                vsSourceVarDeclare += lib.vsSourceVarDeclare;
                vsSourceFuncDeclare += lib.vsSourceFuncDeclare;
                vsSourceFuncDefine += lib.vsSourceFuncDefine;
                vsSourceBody += lib.vsSourceBody;
                fsSourceTop += lib.fsSourceTop;
                fsSourceDefine += lib.fsSourceDefine;
                fsSourceVarDeclare += lib.fsSourceVarDeclare;
                fsSourceFuncDeclare += lib.fsSourceFuncDeclare;
                fsSourceFuncDefine += lib.fsSourceFuncDefine;
                fsSourceBody += lib.fsSourceBody;
                self.vsSourceDefineList.addChildren(lib.vsSourceDefineList);
                self.fsSourceDefineList.addChildren(lib.fsSourceDefineList);
            });
            this.attributes.addChildren(this.attributesFromShaderLib);
            this.uniforms.addChildren(this.uniformsFromShaderLib);
            this.vsSourceTop = vsSourceTop + this.vsSourceTopFromShaderLib;
            this.vsSourceDefine = vsSourceDefine + this.vsSourceDefineFromShaderLib;
            this.vsSourceVarDeclare = vsSourceVarDeclare + this.vsSourceVarDeclareFromShaderLib;
            this.vsSourceFuncDeclare = vsSourceFuncDeclare + this.vsSourceFuncDeclareFromShaderLib;
            this.vsSourceFuncDefine = vsSourceFuncDefine + this.vsSourceFuncDefineFromShaderLib;
            this.vsSourceBody = vsSourceBody + this.vsSourceBodyFromShaderLib;
            this.fsSourceTop = fsSourceTop + this.fsSourceTopFromShaderLib;
            this.fsSourceDefine = fsSourceDefine + this.fsSourceDefineFromShaderLib;
            this.fsSourceVarDeclare = fsSourceVarDeclare + this.fsSourceVarDeclareFromShaderLib;
            this.fsSourceFuncDeclare = fsSourceFuncDeclare + this.fsSourceFuncDeclareFromShaderLib;
            this.fsSourceFuncDefine = fsSourceFuncDefine + this.fsSourceFuncDefineFromShaderLib;
            this.fsSourceBody = fsSourceBody + this.fsSourceBodyFromShaderLib;
        };
        ShaderSourceBuilder.prototype._buildVsSource = function () {
            this.vsSource = this._buildVsSourceTop() + this._buildVsSourceDefine() + this._buildVsSourceVarDeclare() + this._buildVsSourceFuncDeclare() + this._buildVsSourceFuncDefine() + this._buildVsSourceBody();
        };
        ShaderSourceBuilder.prototype._buildFsSource = function () {
            this.fsSource = this._buildFsSourceTop() + this._buildFsSourceDefine() + this._buildFsSourceVarDeclare() + this._buildFsSourceFuncDeclare() + this._buildFsSourceFuncDefine() + this._buildFsSourceBody();
        };
        ShaderSourceBuilder.prototype._buildVsSourceTop = function () {
            return this._getPrecisionSource() + this.vsSourceTop;
        };
        ShaderSourceBuilder.prototype._buildVsSourceDefine = function () {
            return this._buildSourceDefine(this.vsSourceDefineList) + this.vsSourceDefine;
        };
        ShaderSourceBuilder.prototype._buildVsSourceVarDeclare = function () {
            return this._generateAttributeSource() + this._generateUniformSource(this.vsSourceVarDeclare, this.vsSourceFuncDefine, this.vsSourceBody) + this.vsSourceVarDeclare;
        };
        ShaderSourceBuilder.prototype._buildVsSourceFuncDeclare = function () {
            return this.vsSourceFuncDeclare;
        };
        ShaderSourceBuilder.prototype._buildVsSourceFuncDefine = function () {
            return this.vsSourceFuncDefine;
        };
        ShaderSourceBuilder.prototype._buildVsSourceBody = function () {
            return wd.ShaderSnippet.main_begin + this.vsSourceBody + wd.ShaderSnippet.main_end;
        };
        ShaderSourceBuilder.prototype._buildFsSourceTop = function () {
            return this._getPrecisionSource() + this.fsSourceTop;
        };
        ShaderSourceBuilder.prototype._buildFsSourceDefine = function () {
            return this._buildSourceDefine(this.fsSourceDefineList) + this.fsSourceDefine;
        };
        ShaderSourceBuilder.prototype._buildFsSourceVarDeclare = function () {
            return this._generateUniformSource(this.fsSourceVarDeclare, this.fsSourceFuncDefine, this.fsSourceBody) + this.fsSourceVarDeclare;
        };
        ShaderSourceBuilder.prototype._buildFsSourceFuncDeclare = function () {
            return this.fsSourceFuncDeclare;
        };
        ShaderSourceBuilder.prototype._buildFsSourceFuncDefine = function () {
            return this.fsSourceFuncDefine;
        };
        ShaderSourceBuilder.prototype._buildFsSourceBody = function () {
            return wd.ShaderSnippet.main_begin + this.fsSourceBody + wd.ShaderSnippet.main_end;
        };
        ShaderSourceBuilder.prototype._buildSourceDefine = function (defineList) {
            var result = "";
            defineList.forEach(function (define) {
                if (define.value === void 0) {
                    result += "#define " + define.name + "\n";
                }
                else {
                    result += "#define " + define.name + " " + define.value + "\n";
                }
            });
            return result;
        };
        ShaderSourceBuilder.prototype._getPrecisionSource = function () {
            var precision = wd.GPUDetector.getInstance().precision, result = null;
            switch (precision) {
                case wd.EGPUPrecision.HIGHP:
                    result = wd.ShaderChunk.highp_fragment.top;
                    break;
                case wd.EGPUPrecision.MEDIUMP:
                    result = wd.ShaderChunk.mediump_fragment.top;
                    break;
                case wd.EGPUPrecision.LOWP:
                    result = wd.ShaderChunk.lowp_fragment.top;
                    break;
                default:
                    result = "";
                    break;
            }
            return result;
        };
        ShaderSourceBuilder.prototype._generateAttributeSource = function () {
            var result = "";
            this.attributes.filter(function (data, key) {
                return !!data;
            }).forEach(function (data, key) {
                result += "attribute " + wd.VariableTypeTable.getVariableType(data.type) + " " + key + ";\n";
            });
            return result;
        };
        ShaderSourceBuilder.prototype._generateUniformSource = function (sourceVarDeclare, sourceFuncDefine, sourceBody) {
            var result = "", self = this;
            this.uniforms.filter(function (data, key) {
                return !!data && data.type !== wd.EVariableType.STRUCTURE && data.type !== wd.EVariableType.STRUCTURES && !self._isExistInSource(key, sourceVarDeclare) && (self._isExistInSource(key, sourceFuncDefine) || self._isExistInSource(key, sourceBody));
            }).forEach(function (data, key) {
                result += "uniform " + wd.VariableTypeTable.getVariableType(data.type) + " " + key + ";\n";
            });
            return result;
        };
        ShaderSourceBuilder.prototype._isExistInSource = function (key, source) {
            return source.indexOf(key) !== -1;
        };
        ShaderSourceBuilder.prototype._convertArrayToArrayBuffer = function (type, value) {
            var size = this._getBufferSize(type);
            if (wd.JudgeUtils.isArray(value)) {
                return wd.ArrayBuffer.create(new Float32Array(value), size, wd.EBufferType.FLOAT);
            }
            else if (wd.JudgeUtils.isFloatArray(value)) {
                return wd.ArrayBuffer.create(value, size, wd.EBufferType.FLOAT);
            }
        };
        ShaderSourceBuilder.prototype._getBufferSize = function (type) {
            var size = null;
            switch (type) {
                case wd.EVariableType.FLOAT_1:
                case wd.EVariableType.NUMBER_1:
                    size = 1;
                    break;
                case wd.EVariableType.FLOAT_3:
                    size = 3;
                    break;
                case wd.EVariableType.FLOAT_4:
                    size = 4;
                    break;
                default:
                    wd.Log.error(true, wd.Log.info.FUNC_UNEXPECT("EVariableType", type));
                    break;
            }
            return size;
        };
        return ShaderSourceBuilder;
    }());
    wd.ShaderSourceBuilder = ShaderSourceBuilder;
})(wd || (wd = {}));
var wd;
(function (wd) {
    (function (EVariableType) {
        EVariableType[EVariableType["FLOAT_1"] = 0] = "FLOAT_1";
        EVariableType[EVariableType["FLOAT_2"] = 1] = "FLOAT_2";
        EVariableType[EVariableType["FLOAT_3"] = 2] = "FLOAT_3";
        EVariableType[EVariableType["FLOAT_4"] = 3] = "FLOAT_4";
        EVariableType[EVariableType["FLOAT_MAT3"] = 4] = "FLOAT_MAT3";
        EVariableType[EVariableType["FLOAT_MAT4"] = 5] = "FLOAT_MAT4";
        EVariableType[EVariableType["BUFFER"] = 6] = "BUFFER";
        EVariableType[EVariableType["SAMPLER_CUBE"] = 7] = "SAMPLER_CUBE";
        EVariableType[EVariableType["SAMPLER_2D"] = 8] = "SAMPLER_2D";
        EVariableType[EVariableType["NUMBER_1"] = 9] = "NUMBER_1";
        EVariableType[EVariableType["STRUCTURE"] = 10] = "STRUCTURE";
        EVariableType[EVariableType["STRUCTURES"] = 11] = "STRUCTURES";
    })(wd.EVariableType || (wd.EVariableType = {}));
    var EVariableType = wd.EVariableType;
})(wd || (wd = {}));
var wd;
(function (wd) {
    (function (EVariableCategory) {
        EVariableCategory[EVariableCategory["ENGINE"] = "ENGINE"] = "ENGINE";
        EVariableCategory[EVariableCategory["CUSTOM"] = "CUSTOM"] = "CUSTOM";
    })(wd.EVariableCategory || (wd.EVariableCategory = {}));
    var EVariableCategory = wd.EVariableCategory;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var VariableLib = (function () {
        function VariableLib() {
        }
        VariableLib.a_position = {
            type: wd.EVariableType.FLOAT_3,
            value: wd.EVariableCategory.ENGINE
        };
        VariableLib.a_currentFramePosition = {
            type: wd.EVariableType.FLOAT_3,
            value: wd.EVariableCategory.ENGINE
        };
        VariableLib.a_nextFramePosition = {
            type: wd.EVariableType.FLOAT_3,
            value: wd.EVariableCategory.ENGINE
        };
        VariableLib.a_normal = {
            type: wd.EVariableType.FLOAT_3,
            value: wd.EVariableCategory.ENGINE
        };
        VariableLib.a_currentFrameNormal = {
            type: wd.EVariableType.FLOAT_3,
            value: wd.EVariableCategory.ENGINE
        };
        VariableLib.a_nextFrameNormal = {
            type: wd.EVariableType.FLOAT_3,
            value: wd.EVariableCategory.ENGINE
        };
        VariableLib.a_color = {
            type: wd.EVariableType.FLOAT_3,
            value: wd.EVariableCategory.ENGINE
        };
        VariableLib.a_texCoord = {
            type: wd.EVariableType.FLOAT_2,
            value: wd.EVariableCategory.ENGINE
        };
        VariableLib.a_tangent = {
            type: wd.EVariableType.FLOAT_3,
            value: wd.EVariableCategory.ENGINE
        };
        VariableLib.u_mMatrix = {
            type: wd.EVariableType.FLOAT_MAT4,
            value: wd.EVariableCategory.ENGINE
        };
        VariableLib.u_vMatrix = {
            type: wd.EVariableType.FLOAT_MAT4,
            value: wd.EVariableCategory.ENGINE
        };
        VariableLib.u_pMatrix = {
            type: wd.EVariableType.FLOAT_MAT4,
            value: wd.EVariableCategory.ENGINE
        };
        VariableLib.u_normalMatrix = {
            type: wd.EVariableType.FLOAT_MAT3,
            value: wd.EVariableCategory.ENGINE
        };
        VariableLib.u_samplerCube0 = {
            type: wd.EVariableType.SAMPLER_CUBE,
            value: wd.EVariableCategory.ENGINE
        };
        VariableLib.u_sampler2D0 = {
            type: wd.EVariableType.SAMPLER_2D,
            value: wd.EVariableCategory.ENGINE
        };
        VariableLib.u_sampler2D1 = {
            type: wd.EVariableType.SAMPLER_2D,
            value: wd.EVariableCategory.ENGINE
        };
        VariableLib.u_diffuseMapSampler = {
            type: wd.EVariableType.SAMPLER_2D,
            value: wd.EVariableCategory.ENGINE
        };
        VariableLib.u_specularMapSampler = {
            type: wd.EVariableType.SAMPLER_2D,
            value: wd.EVariableCategory.ENGINE
        };
        VariableLib.u_emissionMapSampler = {
            type: wd.EVariableType.SAMPLER_2D,
            value: wd.EVariableCategory.ENGINE
        };
        VariableLib.u_normalMapSampler = {
            type: wd.EVariableType.SAMPLER_2D,
            value: wd.EVariableCategory.ENGINE
        };
        VariableLib.u_mirrorSampler = {
            type: wd.EVariableType.SAMPLER_2D,
            value: wd.EVariableCategory.ENGINE
        };
        VariableLib.u_cameraPos = {
            type: wd.EVariableType.FLOAT_3,
            value: wd.EVariableCategory.ENGINE
        };
        VariableLib.u_refractionRatio = {
            type: wd.EVariableType.FLOAT_1,
            value: wd.EVariableCategory.ENGINE
        };
        VariableLib.u_reflectivity = {
            type: wd.EVariableType.FLOAT_1,
            value: wd.EVariableCategory.ENGINE
        };
        VariableLib.u_sourceRegion = {
            type: wd.EVariableType.FLOAT_4,
            value: wd.EVariableCategory.ENGINE
        };
        VariableLib.u_repeatRegion = {
            type: wd.EVariableType.FLOAT_4,
            value: wd.EVariableCategory.ENGINE
        };
        VariableLib.u_combineMode = {
            type: wd.EVariableType.NUMBER_1,
            value: wd.EVariableCategory.ENGINE
        };
        VariableLib.u_mixRatio = {
            type: wd.EVariableType.FLOAT_1,
            value: wd.EVariableCategory.ENGINE
        };
        VariableLib.u_diffuse = {
            type: wd.EVariableType.FLOAT_3,
            value: wd.EVariableCategory.ENGINE
        };
        VariableLib.u_specular = {
            type: wd.EVariableType.FLOAT_3,
            value: wd.EVariableCategory.ENGINE
        };
        VariableLib.u_emission = {
            type: wd.EVariableType.FLOAT_3,
            value: wd.EVariableCategory.ENGINE
        };
        VariableLib.u_shininess = {
            type: wd.EVariableType.FLOAT_1,
            value: wd.EVariableCategory.ENGINE
        };
        VariableLib.u_lightModel = {
            type: wd.EVariableType.NUMBER_1,
            value: wd.EVariableCategory.ENGINE
        };
        VariableLib.u_isBothSide = {
            type: wd.EVariableType.NUMBER_1,
            value: wd.EVariableCategory.ENGINE
        };
        VariableLib.u_opacity = {
            type: wd.EVariableType.FLOAT_1,
            value: wd.EVariableCategory.ENGINE
        };
        VariableLib.u_ambient = {
            type: wd.EVariableType.FLOAT_3,
            value: wd.EVariableCategory.ENGINE
        };
        VariableLib.u_directionLights = {
            type: wd.EVariableType.STRUCTURES,
            value: wd.EVariableCategory.ENGINE
        };
        VariableLib.u_pointLights = {
            type: wd.EVariableType.STRUCTURES,
            value: wd.EVariableCategory.ENGINE
        };
        VariableLib.u_vpMatrixFromLight = {
            type: wd.EVariableType.FLOAT_MAT4,
            value: wd.EVariableCategory.ENGINE
        };
        VariableLib.u_lightPos = {
            type: wd.EVariableType.FLOAT_3,
            value: wd.EVariableCategory.ENGINE
        };
        VariableLib.u_farPlane = {
            type: wd.EVariableType.FLOAT_1,
            value: wd.EVariableCategory.ENGINE
        };
        VariableLib.u_interpolation = {
            type: wd.EVariableType.FLOAT_1,
            value: wd.EVariableCategory.ENGINE
        };
        return VariableLib;
    }());
    wd.VariableLib = VariableLib;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var _table = wdCb.Hash.create();
    _table.addChild(wd.EVariableType.FLOAT_1, "float");
    _table.addChild(wd.EVariableType.FLOAT_2, "vec2");
    _table.addChild(wd.EVariableType.FLOAT_3, "vec3");
    _table.addChild(wd.EVariableType.FLOAT_4, "vec4");
    _table.addChild(wd.EVariableType.FLOAT_MAT3, "mat3");
    _table.addChild(wd.EVariableType.FLOAT_MAT4, "mat4");
    _table.addChild(wd.EVariableType.NUMBER_1, "int");
    _table.addChild(wd.EVariableType.SAMPLER_CUBE, "samplerCube");
    _table.addChild(wd.EVariableType.SAMPLER_2D, "sampler2D");
    var VariableTypeTable = (function () {
        function VariableTypeTable() {
        }
        VariableTypeTable.getVariableType = function (type) {
            var result = _table.getChild(type);
            wd.Log.error(result === void 0, wd.Log.info.FUNC_NOT_EXIST(type, "in VariableTypeTable"));
            return result;
        };
        return VariableTypeTable;
    }());
    wd.VariableTypeTable = VariableTypeTable;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var _table = wdCb.Hash.create();
    _table.addChild("diffuseMap", "u_diffuseMapSampler");
    _table.addChild("specularMap", "u_specularMapSampler");
    _table.addChild("emissionMap", "u_emissionMapSampler");
    _table.addChild("normalMap", "u_normalMapSampler");
    _table.addChild("mirrorReflectionMap", "u_mirrorSampler");
    var VariableNameTable = (function () {
        function VariableNameTable() {
        }
        VariableNameTable.getVariableName = function (name) {
            var result = _table.getChild(name);
            wd.Log.error(result === void 0, wd.Log.info.FUNC_NOT_EXIST(name, "in VariableNameTable"));
            return result;
        };
        return VariableNameTable;
    }());
    wd.VariableNameTable = VariableNameTable;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var ShaderLib = (function () {
        function ShaderLib() {
            this.type = wd.ABSTRACT_ATTRIBUTE;
            this.attributes = wdCb.Hash.create();
            this.uniforms = wdCb.Hash.create();
            this.vsSourceTop = "";
            this.vsSourceDefine = "";
            this.vsSourceVarDeclare = "";
            this.vsSourceFuncDeclare = "";
            this.vsSourceFuncDefine = "";
            this.vsSourceBody = "";
            this.fsSourceTop = "";
            this.fsSourceDefine = "";
            this.fsSourceVarDeclare = "";
            this.fsSourceFuncDeclare = "";
            this.fsSourceFuncDefine = "";
            this.fsSourceBody = "";
            this.vsSourceDefineList = wdCb.Collection.create();
            this.fsSourceDefineList = wdCb.Collection.create();
        }
        ShaderLib.prototype.setShaderDefinition = function (quadCmd, material) {
            var vs = null, fs = null;
            this._clearShaderDefinition();
            vs = this.getVsChunk();
            fs = this.getFsChunk();
            vs && this.setVsSource(vs);
            fs && this.setFsSource(fs);
        };
        ShaderLib.prototype.getVsChunk = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var type = args.length === 0 ? this.type : args[0];
            return this._getChunk(type, EShaderLibType.vs);
        };
        ShaderLib.prototype.getFsChunk = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var type = args.length === 0 ? this.type : args[0];
            return this._getChunk(type, EShaderLibType.fs);
        };
        ShaderLib.prototype.setVsSource = function (vs, operator) {
            if (operator === void 0) { operator = "="; }
            this._setSource(vs, EShaderLibType.vs, operator);
        };
        ShaderLib.prototype.setFsSource = function (fs, operator) {
            if (operator === void 0) { operator = "="; }
            this._setSource(fs, EShaderLibType.fs, operator);
        };
        ShaderLib.prototype.addAttributeVariable = function (variableArr) {
            this._addVariable(this.attributes, variableArr);
        };
        ShaderLib.prototype.addUniformVariable = function (variableArr) {
            this._addVariable(this.uniforms, variableArr);
        };
        ShaderLib.prototype.sendAttributeData = function (program, name, data) {
            program.sendAttributeData(name, wd.EVariableType.BUFFER, data);
        };
        ShaderLib.prototype.sendUniformData = function (program, name, data) {
            program.sendUniformData(name, wd.VariableLib[name].type, data);
        };
        ShaderLib.prototype._clearShaderDefinition = function () {
            this.attributes.removeAllChildren();
            this.uniforms.removeAllChildren();
            this.vsSourceDefineList.removeAllChildren();
            this.fsSourceDefineList.removeAllChildren();
            this.vsSourceTop = "";
            this.vsSourceDefine = "";
            this.vsSourceVarDeclare = "";
            this.vsSourceFuncDeclare = "";
            this.vsSourceFuncDefine = "";
            this.vsSourceBody = "";
            this.fsSourceTop = "";
            this.fsSourceDefine = "";
            this.fsSourceVarDeclare = "";
            this.fsSourceFuncDeclare = "";
            this.fsSourceFuncDefine = "";
            this.fsSourceBody = "";
        };
        ShaderLib.prototype._getChunk = function (type, sourceType) {
            var key = null;
            if (type.indexOf(".glsl") > -1) {
                key = "" + wdCb.PathUtils.basename(type, ".glsl");
            }
            else {
                if (sourceType === EShaderLibType.vs) {
                    key = type + "_vertex";
                }
                else {
                    key = type + "_fragment";
                }
            }
            return wd.ShaderChunk[key] ? wd.ShaderChunk[key] : wd.ShaderChunk.empty;
        };
        ShaderLib.prototype._setSource = function (chunk, sourceType, operator) {
            if (!chunk) {
                return;
            }
            switch (operator) {
                case "+":
                    this[(sourceType + "SourceTop")] += chunk.top;
                    this[(sourceType + "SourceDefine")] += chunk.define;
                    this[(sourceType + "SourceVarDeclare")] += chunk.varDeclare;
                    this[(sourceType + "SourceFuncDeclare")] += chunk.funcDeclare;
                    this[(sourceType + "SourceFuncDefine")] += chunk.funcDefine;
                    this[(sourceType + "SourceBody")] += chunk.body;
                    break;
                case "=":
                    this[(sourceType + "SourceTop")] = chunk.top;
                    this[(sourceType + "SourceDefine")] = chunk.define;
                    this[(sourceType + "SourceVarDeclare")] = chunk.varDeclare;
                    this[(sourceType + "SourceFuncDeclare")] = chunk.funcDeclare;
                    this[(sourceType + "SourceFuncDefine")] = chunk.funcDefine;
                    this[(sourceType + "SourceBody")] = chunk.body;
                    break;
                default:
                    wd.Log.error(true, wd.Log.info.FUNC_INVALID("opertor:", operator));
                    break;
            }
        };
        ShaderLib.prototype._addVariable = function (target, variableArr) {
            variableArr.forEach(function (variable) {
                wd.Log.assert(wd.VariableLib[variable], wd.Log.info.FUNC_SHOULD(variable, "exist in VariableLib"));
                target.addChild(variable, wd.VariableLib[variable]);
            });
        };
        __decorate([
            wd.virtual
        ], ShaderLib.prototype, "setShaderDefinition", null);
        __decorate([
            wd.require(function (program, name, data) {
                wd.assert(!!wd.VariableLib[name], name + " should exist in VariableLib");
            })
        ], ShaderLib.prototype, "sendUniformData", null);
        return ShaderLib;
    }());
    wd.ShaderLib = ShaderLib;
    var EShaderLibType;
    (function (EShaderLibType) {
        EShaderLibType[EShaderLibType["vs"] = "vs"] = "vs";
        EShaderLibType[EShaderLibType["fs"] = "fs"] = "fs";
    })(EShaderLibType || (EShaderLibType = {}));
})(wd || (wd = {}));
var wd;
(function (wd) {
    var CommonShaderLib = (function (_super) {
        __extends(CommonShaderLib, _super);
        function CommonShaderLib() {
            _super.apply(this, arguments);
            this.type = "common";
        }
        CommonShaderLib.create = function () {
            var obj = new this();
            return obj;
        };
        CommonShaderLib.prototype.sendShaderVariables = function (program, quadCmd, material) {
            this.sendUniformData(program, "u_mMatrix", quadCmd.mMatrix);
            this.sendUniformData(program, "u_vMatrix", quadCmd.vMatrix);
            this.sendUniformData(program, "u_pMatrix", quadCmd.pMatrix);
        };
        CommonShaderLib.prototype.setShaderDefinition = function (quadCmd, material) {
            _super.prototype.setShaderDefinition.call(this, quadCmd, material);
            this.addUniformVariable(["u_mMatrix", "u_vMatrix", "u_pMatrix"]);
            this.vsSourceDefine = wd.ShaderChunk.common_define.define + wd.ShaderChunk.common_vertex.define;
            this.vsSourceFuncDefine = wd.ShaderChunk.common_function.funcDefine + wd.ShaderChunk.common_vertex.funcDefine;
            this.fsSourceDefine = wd.ShaderChunk.common_define.define + wd.ShaderChunk.common_fragment.define;
            this.fsSourceFuncDefine = wd.ShaderChunk.common_function.funcDefine + wd.ShaderChunk.common_fragment.funcDefine;
        };
        return CommonShaderLib;
    }(wd.ShaderLib));
    wd.CommonShaderLib = CommonShaderLib;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var CommonVerticeShaderLib = (function (_super) {
        __extends(CommonVerticeShaderLib, _super);
        function CommonVerticeShaderLib() {
            _super.apply(this, arguments);
            this.type = "commonVertice";
        }
        CommonVerticeShaderLib.create = function () {
            var obj = new this();
            return obj;
        };
        CommonVerticeShaderLib.prototype.sendShaderVariables = function (program, quadCmd, material) {
            this._sendAttributeVariables(program, quadCmd);
        };
        CommonVerticeShaderLib.prototype.setShaderDefinition = function (quadCmd, material) {
            _super.prototype.setShaderDefinition.call(this, quadCmd, material);
            this.addAttributeVariable(["a_position"]);
        };
        CommonVerticeShaderLib.prototype._sendAttributeVariables = function (program, quadCmd) {
            if (quadCmd.buffers.hasChild(wd.EBufferDataType.VERTICE)) {
                this.sendAttributeData(program, "a_position", quadCmd.buffers.getChild(wd.EBufferDataType.VERTICE));
            }
        };
        return CommonVerticeShaderLib;
    }(wd.ShaderLib));
    wd.CommonVerticeShaderLib = CommonVerticeShaderLib;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var CommonNormalShaderLib = (function (_super) {
        __extends(CommonNormalShaderLib, _super);
        function CommonNormalShaderLib() {
            _super.apply(this, arguments);
            this.type = "commonNormal";
        }
        CommonNormalShaderLib.create = function () {
            var obj = new this();
            return obj;
        };
        CommonNormalShaderLib.prototype.sendShaderVariables = function (program, quadCmd, material) {
            this._sendAttributeVariables(program, quadCmd);
        };
        CommonNormalShaderLib.prototype.setShaderDefinition = function (quadCmd, material) {
            _super.prototype.setShaderDefinition.call(this, quadCmd, material);
            this.addAttributeVariable(["a_normal"]);
        };
        CommonNormalShaderLib.prototype._sendAttributeVariables = function (program, quadCmd) {
            if (quadCmd.buffers.hasChild(wd.EBufferDataType.NORMAL)) {
                this.sendAttributeData(program, "a_normal", quadCmd.buffers.getChild(wd.EBufferDataType.NORMAL));
            }
        };
        return CommonNormalShaderLib;
    }(wd.ShaderLib));
    wd.CommonNormalShaderLib = CommonNormalShaderLib;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var BasicShaderLib = (function (_super) {
        __extends(BasicShaderLib, _super);
        function BasicShaderLib() {
            _super.apply(this, arguments);
            this.type = "basic";
        }
        BasicShaderLib.create = function () {
            var obj = new this();
            return obj;
        };
        BasicShaderLib.prototype.sendShaderVariables = function (program, quadCmd, material) {
            if (quadCmd.buffers.hasChild(wd.EBufferDataType.COLOR)) {
                this.sendAttributeData(program, "a_color", quadCmd.buffers.getChild(wd.EBufferDataType.COLOR));
                this.sendUniformData(program, "u_opacity", material.opacity);
            }
        };
        BasicShaderLib.prototype.setShaderDefinition = function (quadCmd, material) {
            _super.prototype.setShaderDefinition.call(this, quadCmd, material);
            this.addAttributeVariable(["a_color"]);
            this.addUniformVariable(["u_opacity"]);
            this.vsSourceBody = wd.ShaderSnippet.setPos_mvp + wd.ShaderChunk.basic_vertex.body;
        };
        return BasicShaderLib;
    }(wd.ShaderLib));
    wd.BasicShaderLib = BasicShaderLib;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var BasicEndShaderLib = (function (_super) {
        __extends(BasicEndShaderLib, _super);
        function BasicEndShaderLib() {
            _super.apply(this, arguments);
            this.type = "basicEnd";
        }
        BasicEndShaderLib.create = function () {
            var obj = new this();
            return obj;
        };
        BasicEndShaderLib.prototype.sendShaderVariables = function (program, quadCmd, material) {
        };
        return BasicEndShaderLib;
    }(wd.ShaderLib));
    wd.BasicEndShaderLib = BasicEndShaderLib;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var MorphCommonShaderLib = (function (_super) {
        __extends(MorphCommonShaderLib, _super);
        function MorphCommonShaderLib() {
            _super.apply(this, arguments);
            this.type = "morphCommon";
        }
        MorphCommonShaderLib.create = function () {
            var obj = new this();
            return obj;
        };
        MorphCommonShaderLib.prototype.sendShaderVariables = function (program, quadCmd, material) {
            var anim = (quadCmd.animation);
            this.sendUniformData(program, "u_interpolation", anim.interpolation);
        };
        MorphCommonShaderLib.prototype.setShaderDefinition = function (quadCmd, material) {
            _super.prototype.setShaderDefinition.call(this, quadCmd, material);
            this.addUniformVariable(["u_interpolation"]);
        };
        __decorate([
            wd.require(function (program, quadCmd, material) {
                wd.assert(!!quadCmd.animation, wd.Log.info.FUNC_SHOULD("entityObject", "add MorphAnimation component"));
            })
        ], MorphCommonShaderLib.prototype, "sendShaderVariables", null);
        return MorphCommonShaderLib;
    }(wd.ShaderLib));
    wd.MorphCommonShaderLib = MorphCommonShaderLib;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var MorphVerticeShaderLib = (function (_super) {
        __extends(MorphVerticeShaderLib, _super);
        function MorphVerticeShaderLib() {
            _super.apply(this, arguments);
            this.type = "morphVertice";
        }
        MorphVerticeShaderLib.create = function () {
            var obj = new this();
            return obj;
        };
        MorphVerticeShaderLib.prototype.sendShaderVariables = function (program, quadCmd, material) {
            if (quadCmd.buffers.hasChild(wd.EBufferDataType.VERTICE)) {
                var morphVerticeData = quadCmd.buffers.getChild(wd.EBufferDataType.VERTICE);
                this.sendAttributeData(program, "a_currentFramePosition", morphVerticeData[0]);
                this.sendAttributeData(program, "a_nextFramePosition", morphVerticeData[1]);
            }
        };
        MorphVerticeShaderLib.prototype.setShaderDefinition = function (quadCmd, material) {
            _super.prototype.setShaderDefinition.call(this, quadCmd, material);
            this.addAttributeVariable(["a_currentFramePosition", "a_nextFramePosition"]);
        };
        __decorate([
            wd.require(function (program, quadCmd, material) {
                wd.assert(!!quadCmd.animation, wd.Log.info.FUNC_SHOULD("entityObject", "add MorphAnimation component"));
            })
        ], MorphVerticeShaderLib.prototype, "sendShaderVariables", null);
        return MorphVerticeShaderLib;
    }(wd.ShaderLib));
    wd.MorphVerticeShaderLib = MorphVerticeShaderLib;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var MorphNormalShaderLib = (function (_super) {
        __extends(MorphNormalShaderLib, _super);
        function MorphNormalShaderLib() {
            _super.apply(this, arguments);
            this.type = "morphNormal";
        }
        MorphNormalShaderLib.create = function () {
            var obj = new this();
            return obj;
        };
        MorphNormalShaderLib.prototype.sendShaderVariables = function (program, quadCmd, material) {
            if (quadCmd.buffers.hasChild(wd.EBufferDataType.NORMAL)) {
                var morphNormalData = quadCmd.buffers.getChild(wd.EBufferDataType.NORMAL);
                this.sendAttributeData(program, "a_currentFrameNormal", morphNormalData[0]);
                this.sendAttributeData(program, "a_nextFrameNormal", morphNormalData[1]);
            }
        };
        MorphNormalShaderLib.prototype.setShaderDefinition = function (quadCmd, material) {
            _super.prototype.setShaderDefinition.call(this, quadCmd, material);
            this.addAttributeVariable(["a_currentFrameNormal", "a_nextFrameNormal"]);
        };
        return MorphNormalShaderLib;
    }(wd.ShaderLib));
    wd.MorphNormalShaderLib = MorphNormalShaderLib;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var SkyboxShaderLib = (function (_super) {
        __extends(SkyboxShaderLib, _super);
        function SkyboxShaderLib() {
            _super.apply(this, arguments);
            this.type = "skybox";
        }
        SkyboxShaderLib.create = function () {
            var obj = new this();
            return obj;
        };
        SkyboxShaderLib.prototype.sendShaderVariables = function (program, quadCmd, material) {
        };
        SkyboxShaderLib.prototype.setShaderDefinition = function (quadCmd, material) {
            _super.prototype.setShaderDefinition.call(this, quadCmd, material);
            this.addUniformVariable(["u_samplerCube0"]);
        };
        return SkyboxShaderLib;
    }(wd.ShaderLib));
    wd.SkyboxShaderLib = SkyboxShaderLib;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var EnvMapForBasicShaderLib = (function (_super) {
        __extends(EnvMapForBasicShaderLib, _super);
        function EnvMapForBasicShaderLib() {
            _super.apply(this, arguments);
        }
        EnvMapForBasicShaderLib.prototype.sendShaderVariables = function (program, quadCmd, material) {
            this.sendUniformData(program, "u_normalMatrix", quadCmd.mMatrix.copy().invertTo3x3().transpose());
            this.sendUniformData(program, "u_cameraPos", wd.Director.getInstance().scene.currentCamera.transform.position);
        };
        EnvMapForBasicShaderLib.prototype.setShaderDefinition = function (quadCmd, material) {
            _super.prototype.setShaderDefinition.call(this, quadCmd, material);
            this.addUniformVariable(["u_samplerCube0", "u_cameraPos", "u_normalMatrix"]);
            this.vsSourceBody = wd.ShaderSnippet.setPos_mvp + this.getVsChunk().body;
        };
        EnvMapForBasicShaderLib.prototype.setEnvMapSource = function () {
            var vs = this.getVsChunk("envMap_forBasic"), fs = this.getFsChunk("envMap_forBasic");
            this.vsSourceTop = vs.top;
            this.vsSourceDefine = vs.define;
            this.vsSourceVarDeclare = vs.varDeclare;
            this.vsSourceFuncDeclare = vs.funcDeclare;
            this.vsSourceFuncDefine = vs.funcDefine;
            this.vsSourceBody += vs.body;
            this.setFsSource(fs);
        };
        return EnvMapForBasicShaderLib;
    }(wd.ShaderLib));
    wd.EnvMapForBasicShaderLib = EnvMapForBasicShaderLib;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var BasicEnvMapForBasicShaderLib = (function (_super) {
        __extends(BasicEnvMapForBasicShaderLib, _super);
        function BasicEnvMapForBasicShaderLib() {
            _super.apply(this, arguments);
            this.type = "basic_envMap_forBasic";
        }
        BasicEnvMapForBasicShaderLib.create = function () {
            var obj = new this();
            return obj;
        };
        return BasicEnvMapForBasicShaderLib;
    }(wd.EnvMapForBasicShaderLib));
    wd.BasicEnvMapForBasicShaderLib = BasicEnvMapForBasicShaderLib;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var ReflectionForBasicShaderLib = (function (_super) {
        __extends(ReflectionForBasicShaderLib, _super);
        function ReflectionForBasicShaderLib() {
            _super.apply(this, arguments);
            this.type = "reflection_forBasic";
        }
        ReflectionForBasicShaderLib.create = function () {
            var obj = new this();
            return obj;
        };
        ReflectionForBasicShaderLib.prototype.setShaderDefinition = function (quadCmd, material) {
            _super.prototype.setShaderDefinition.call(this, quadCmd, material);
            this.setEnvMapSource();
            this.setFsSource(this.getFsChunk(), "+");
        };
        return ReflectionForBasicShaderLib;
    }(wd.EnvMapForBasicShaderLib));
    wd.ReflectionForBasicShaderLib = ReflectionForBasicShaderLib;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var RefractionForBasicShaderLib = (function (_super) {
        __extends(RefractionForBasicShaderLib, _super);
        function RefractionForBasicShaderLib() {
            _super.apply(this, arguments);
            this.type = "refraction_forBasic";
        }
        RefractionForBasicShaderLib.create = function () {
            var obj = new this();
            return obj;
        };
        RefractionForBasicShaderLib.prototype.sendShaderVariables = function (program, quadCmd, material) {
            _super.prototype.sendShaderVariables.call(this, program, quadCmd, material);
            this.sendUniformData(program, "u_refractionRatio", material.refractionRatio);
        };
        RefractionForBasicShaderLib.prototype.setShaderDefinition = function (quadCmd, material) {
            _super.prototype.setShaderDefinition.call(this, quadCmd, material);
            this.addUniformVariable(["u_refractionRatio"]);
            this.setEnvMapSource();
            this.setFsSource(this.getFsChunk(), "+");
        };
        return RefractionForBasicShaderLib;
    }(wd.EnvMapForBasicShaderLib));
    wd.RefractionForBasicShaderLib = RefractionForBasicShaderLib;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var FresnelForBasicShaderLib = (function (_super) {
        __extends(FresnelForBasicShaderLib, _super);
        function FresnelForBasicShaderLib() {
            _super.apply(this, arguments);
            this.type = "fresnel_forBasic";
        }
        FresnelForBasicShaderLib.create = function () {
            var obj = new this();
            return obj;
        };
        FresnelForBasicShaderLib.prototype.sendShaderVariables = function (program, quadCmd, material) {
            _super.prototype.sendShaderVariables.call(this, program, quadCmd, material);
            this.sendUniformData(program, "u_refractionRatio", material.refractionRatio);
            this.sendUniformData(program, "u_reflectivity", material.reflectivity);
        };
        FresnelForBasicShaderLib.prototype.setShaderDefinition = function (quadCmd, material) {
            _super.prototype.setShaderDefinition.call(this, quadCmd, material);
            this.addUniformVariable(["u_refractionRatio", "u_reflectivity"]);
            this.setEnvMapSource();
            this.setFsSource(this.getFsChunk(), "+");
        };
        return FresnelForBasicShaderLib;
    }(wd.EnvMapForBasicShaderLib));
    wd.FresnelForBasicShaderLib = FresnelForBasicShaderLib;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var EnvMapForLightShaderLib = (function (_super) {
        __extends(EnvMapForLightShaderLib, _super);
        function EnvMapForLightShaderLib() {
            _super.apply(this, arguments);
        }
        EnvMapForLightShaderLib.prototype.sendShaderVariables = function (program, quadCmd, material) {
        };
        EnvMapForLightShaderLib.prototype.setShaderDefinition = function (quadCmd, material) {
            _super.prototype.setShaderDefinition.call(this, quadCmd, material);
            this.addUniformVariable(["u_samplerCube0"]);
            this.vsSourceBody = wd.ShaderSnippet.setPos_mvp + this.getVsChunk().body;
        };
        EnvMapForLightShaderLib.prototype.setEnvMapSource = function () {
            var vs = this.getVsChunk("envMap_forLight"), fs = this.getFsChunk("envMap_forLight");
            this.vsSourceTop = vs.top;
            this.vsSourceDefine = vs.define;
            this.vsSourceVarDeclare = vs.varDeclare;
            this.vsSourceFuncDeclare = vs.funcDeclare;
            this.vsSourceFuncDefine = vs.funcDefine;
            this.vsSourceBody += vs.body;
            this.setFsSource(fs);
        };
        return EnvMapForLightShaderLib;
    }(wd.ShaderLib));
    wd.EnvMapForLightShaderLib = EnvMapForLightShaderLib;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var BasicEnvMapForLightShaderLib = (function (_super) {
        __extends(BasicEnvMapForLightShaderLib, _super);
        function BasicEnvMapForLightShaderLib() {
            _super.apply(this, arguments);
            this.type = "basic_forLight_envMap";
        }
        BasicEnvMapForLightShaderLib.create = function () {
            var obj = new this();
            return obj;
        };
        return BasicEnvMapForLightShaderLib;
    }(wd.EnvMapForLightShaderLib));
    wd.BasicEnvMapForLightShaderLib = BasicEnvMapForLightShaderLib;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var ReflectionForLightShaderLib = (function (_super) {
        __extends(ReflectionForLightShaderLib, _super);
        function ReflectionForLightShaderLib() {
            _super.apply(this, arguments);
            this.type = "reflection_forLight";
        }
        ReflectionForLightShaderLib.create = function () {
            var obj = new this();
            return obj;
        };
        ReflectionForLightShaderLib.prototype.setShaderDefinition = function (quadCmd, material) {
            _super.prototype.setShaderDefinition.call(this, quadCmd, material);
            this.setEnvMapSource();
            this.setFsSource(this.getFsChunk(), "+");
        };
        return ReflectionForLightShaderLib;
    }(wd.EnvMapForLightShaderLib));
    wd.ReflectionForLightShaderLib = ReflectionForLightShaderLib;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var RefractionForLightShaderLib = (function (_super) {
        __extends(RefractionForLightShaderLib, _super);
        function RefractionForLightShaderLib() {
            _super.apply(this, arguments);
            this.type = "refraction_forLight";
        }
        RefractionForLightShaderLib.create = function () {
            var obj = new this();
            return obj;
        };
        RefractionForLightShaderLib.prototype.sendShaderVariables = function (program, quadCmd, material) {
            _super.prototype.sendShaderVariables.call(this, program, quadCmd, material);
            this.sendUniformData(program, "u_refractionRatio", material.refractionRatio);
        };
        RefractionForLightShaderLib.prototype.setShaderDefinition = function (quadCmd, material) {
            _super.prototype.setShaderDefinition.call(this, quadCmd, material);
            this.addUniformVariable(["u_refractionRatio"]);
            this.setEnvMapSource();
            this.setFsSource(this.getFsChunk(), "+");
        };
        return RefractionForLightShaderLib;
    }(wd.EnvMapForLightShaderLib));
    wd.RefractionForLightShaderLib = RefractionForLightShaderLib;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var FresnelForLightShaderLib = (function (_super) {
        __extends(FresnelForLightShaderLib, _super);
        function FresnelForLightShaderLib() {
            _super.apply(this, arguments);
            this.type = "fresnel_forLight";
        }
        FresnelForLightShaderLib.create = function () {
            var obj = new this();
            return obj;
        };
        FresnelForLightShaderLib.prototype.sendShaderVariables = function (program, quadCmd, material) {
            _super.prototype.sendShaderVariables.call(this, program, quadCmd, material);
            if (material.reflectivity !== null) {
                this.sendUniformData(program, "u_reflectivity", material.reflectivity);
            }
            else {
                this.sendUniformData(program, "u_reflectivity", wd.ShaderChunk.NULL);
                this.sendUniformData(program, "u_refractionRatio", material.refractionRatio);
            }
        };
        FresnelForLightShaderLib.prototype.setShaderDefinition = function (quadCmd, material) {
            _super.prototype.setShaderDefinition.call(this, quadCmd, material);
            this.addUniformVariable(["u_refractionRatio", "u_reflectivity"]);
            this.setEnvMapSource();
            this.setFsSource(this.getFsChunk(), "+");
        };
        return FresnelForLightShaderLib;
    }(wd.EnvMapForLightShaderLib));
    wd.FresnelForLightShaderLib = FresnelForLightShaderLib;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var MapShaderLib = (function (_super) {
        __extends(MapShaderLib, _super);
        function MapShaderLib() {
            _super.apply(this, arguments);
        }
        MapShaderLib.prototype.sendShaderVariables = function (program, quadCmd, material) {
            if (quadCmd.buffers.hasChild(wd.EBufferDataType.TEXCOORD)) {
                this.sendAttributeData(program, "a_texCoord", quadCmd.buffers.getChild(wd.EBufferDataType.TEXCOORD));
            }
        };
        MapShaderLib.prototype.setShaderDefinition = function (quadCmd, material) {
            _super.prototype.setShaderDefinition.call(this, quadCmd, material);
            this.addAttributeVariable(["a_texCoord"]);
            this.addUniformVariable(["u_sampler2D0", "u_sourceRegion", "u_repeatRegion"]);
            this._setMapSource();
        };
        MapShaderLib.prototype._setMapSource = function () {
            var vs = this.getVsChunk("map_forBasic"), fs = this.getFsChunk("map_forBasic");
            this.vsSourceTop = vs.top;
            this.vsSourceDefine = vs.define;
            this.vsSourceVarDeclare = vs.varDeclare;
            this.vsSourceFuncDeclare = vs.funcDeclare;
            this.vsSourceFuncDefine = vs.funcDefine;
            this.vsSourceBody = vs.body;
            this.setFsSource(fs);
        };
        return MapShaderLib;
    }(wd.ShaderLib));
    wd.MapShaderLib = MapShaderLib;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var BasicMapShaderLib = (function (_super) {
        __extends(BasicMapShaderLib, _super);
        function BasicMapShaderLib() {
            _super.apply(this, arguments);
            this.type = "map_forBasic";
        }
        BasicMapShaderLib.create = function () {
            var obj = new this();
            return obj;
        };
        return BasicMapShaderLib;
    }(wd.MapShaderLib));
    wd.BasicMapShaderLib = BasicMapShaderLib;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var MultiMapShaderLib = (function (_super) {
        __extends(MultiMapShaderLib, _super);
        function MultiMapShaderLib() {
            _super.apply(this, arguments);
            this.type = "multi_map_forBasic";
        }
        MultiMapShaderLib.create = function () {
            var obj = new this();
            return obj;
        };
        MultiMapShaderLib.prototype.sendShaderVariables = function (program, quadCmd, material) {
            _super.prototype.sendShaderVariables.call(this, program, quadCmd, material);
            this.sendUniformData(program, "u_combineMode", material.mapCombineMode);
            this.sendUniformData(program, "u_mixRatio", material.mapMixRatio);
        };
        MultiMapShaderLib.prototype.setShaderDefinition = function (quadCmd, material) {
            _super.prototype.setShaderDefinition.call(this, quadCmd, material);
            this.addUniformVariable(["u_sampler2D1", "u_combineMode", "u_mixRatio"]);
            this.fsSourceFuncDefine = this.getFsChunk().funcDefine;
            this.fsSourceBody = this.getFsChunk().body;
        };
        return MultiMapShaderLib;
    }(wd.MapShaderLib));
    wd.MultiMapShaderLib = MultiMapShaderLib;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var MirrorForBasicShaderLib = (function (_super) {
        __extends(MirrorForBasicShaderLib, _super);
        function MirrorForBasicShaderLib() {
            _super.apply(this, arguments);
            this.type = "mirror_forBasic";
        }
        MirrorForBasicShaderLib.create = function () {
            var obj = new this();
            return obj;
        };
        MirrorForBasicShaderLib.prototype.sendShaderVariables = function (program, quadCmd, material) {
        };
        MirrorForBasicShaderLib.prototype.setShaderDefinition = function (quadCmd, material) {
            _super.prototype.setShaderDefinition.call(this, quadCmd, material);
            this.addUniformVariable(["u_mirrorSampler"]);
        };
        return MirrorForBasicShaderLib;
    }(wd.ShaderLib));
    wd.MirrorForBasicShaderLib = MirrorForBasicShaderLib;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var LightCommonShaderLib = (function (_super) {
        __extends(LightCommonShaderLib, _super);
        function LightCommonShaderLib() {
            _super.apply(this, arguments);
            this.type = "lightCommon";
        }
        LightCommonShaderLib.create = function () {
            var obj = new this();
            return obj;
        };
        LightCommonShaderLib.prototype.sendShaderVariables = function (program, quadCmd, material) {
        };
        LightCommonShaderLib.prototype.setShaderDefinition = function (quadCmd, material) {
            _super.prototype.setShaderDefinition.call(this, quadCmd, material);
            this.setVsSource(this.getVsChunk("light_common.glsl"));
            this.setVsSource(this.getVsChunk(), "+");
            this.setFsSource(this.getFsChunk("light_common.glsl"));
            this.setFsSource(this.getFsChunk(), "+");
        };
        return LightCommonShaderLib;
    }(wd.ShaderLib));
    wd.LightCommonShaderLib = LightCommonShaderLib;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var LightShaderLib = (function (_super) {
        __extends(LightShaderLib, _super);
        function LightShaderLib() {
            _super.apply(this, arguments);
            this.type = "light";
        }
        LightShaderLib.create = function () {
            var obj = new this();
            return obj;
        };
        LightShaderLib.prototype.sendShaderVariables = function (program, quadCmd, material) {
            this.sendUniformData(program, "u_normalMatrix", quadCmd.mMatrix.copy().invertTo3x3().transpose());
            this.sendUniformData(program, "u_cameraPos", wd.Director.getInstance().scene.currentCamera.transform.position);
            this.sendUniformData(program, "u_shininess", material.shininess);
            this.sendUniformData(program, "u_opacity", material.opacity);
            this.sendUniformData(program, "u_lightModel", this._convertLightModelToGLSLVariable(material.lightModel));
            this._sendLightVariables(program);
        };
        LightShaderLib.prototype.setShaderDefinition = function (quadCmd, material) {
            _super.prototype.setShaderDefinition.call(this, quadCmd, material);
            this.addUniformVariable(["u_normalMatrix", "u_cameraPos", "u_shininess", "u_ambient", "u_opacity", "u_isBothSide", "u_lightModel"]);
            this._setLightDefinition(material);
        };
        LightShaderLib.prototype._sendLightVariables = function (program) {
            var scene = wd.Director.getInstance().scene, directionLights = scene.directionLights, ambientLight = scene.ambientLight, pointLights = scene.pointLights;
            if (ambientLight) {
                this.sendUniformData(program, "u_ambient", ambientLight.getComponent(wd.AmbientLight).color.toVector3());
            }
            if (pointLights) {
                this._sendPointLightVariables(program, pointLights);
            }
            if (directionLights) {
                this._sendDirectionLightVariables(program, directionLights);
            }
        };
        LightShaderLib.prototype._sendPointLightVariables = function (program, pointLights) {
            pointLights.forEach(function (pointLight, index) {
                var lightComponent = pointLight.getComponent(wd.PointLight);
                program.sendStructureData("u_pointLights[" + index + "].position", wd.EVariableType.FLOAT_3, lightComponent.position);
                program.sendStructureData("u_pointLights[" + index + "].color", wd.EVariableType.FLOAT_3, lightComponent.color.toVector3());
                program.sendStructureData("u_pointLights[" + index + "].intensity", wd.EVariableType.FLOAT_1, lightComponent.intensity);
                program.sendStructureData("u_pointLights[" + index + "].constant", wd.EVariableType.FLOAT_1, lightComponent.constant);
                program.sendStructureData("u_pointLights[" + index + "].linear", wd.EVariableType.FLOAT_1, lightComponent.linear);
                program.sendStructureData("u_pointLights[" + index + "].quadratic", wd.EVariableType.FLOAT_1, lightComponent.quadratic);
                if (lightComponent.range !== null) {
                    program.sendStructureData("u_pointLights[" + index + "].range", wd.EVariableType.FLOAT_1, lightComponent.range);
                }
                else {
                    program.sendStructureData("u_pointLights[" + index + "].range", wd.EVariableType.FLOAT_1, wd.ShaderChunk.NULL);
                }
            });
        };
        LightShaderLib.prototype._sendDirectionLightVariables = function (program, directionLights) {
            var self = this;
            directionLights.forEach(function (directionLight, index) {
                var lightComponent = directionLight.getComponent(wd.DirectionLight);
                if (self._isZero(lightComponent.position)) {
                    program.sendStructureData("u_directionLights[" + index + "].position", wd.EVariableType.FLOAT_3, wd.DirectionLight.defaultPosition);
                }
                else {
                    program.sendStructureData("u_directionLights[" + index + "].position", wd.EVariableType.FLOAT_3, lightComponent.position);
                }
                program.sendStructureData("u_directionLights[" + index + "].color", wd.EVariableType.FLOAT_3, lightComponent.color.toVector3());
                program.sendStructureData("u_directionLights[" + index + "].intensity", wd.EVariableType.FLOAT_1, lightComponent.intensity);
            });
        };
        LightShaderLib.prototype._isZero = function (position) {
            var val = position.values;
            return val[0] === 0 && val[1] === 0 && val[2] === 0;
        };
        LightShaderLib.prototype._setLightDefinition = function (material) {
            var scene = wd.Director.getInstance().scene, directionLights = scene.directionLights, pointLights = scene.pointLights, direction_lights_count = 0, point_lights_count = 0;
            if (directionLights) {
                this.addUniformVariable(["u_directionLights"]);
                direction_lights_count = directionLights.getCount();
            }
            if (pointLights) {
                this.addUniformVariable(["u_pointLights"]);
                point_lights_count = pointLights.getCount();
            }
            this._addDefine(this.vsSourceDefineList, direction_lights_count, point_lights_count);
            this._addDefine(this.fsSourceDefineList, direction_lights_count, point_lights_count);
            if (material.side === wd.ESide.BOTH) {
                this.fsSourceDefineList.addChildren([{
                        name: "BOTH_SIDE"
                    }]);
            }
        };
        LightShaderLib.prototype._addDefine = function (list, direction_lights_count, point_lights_count) {
            list.addChildren([{
                    name: "DIRECTION_LIGHTS_COUNT",
                    value: direction_lights_count
                }, {
                    name: "POINT_LIGHTS_COUNT",
                    value: point_lights_count
                }]);
        };
        LightShaderLib.prototype._convertLightModelToGLSLVariable = function (lightModel) {
            switch (lightModel) {
                case wd.ELightModel.BLINN:
                    return 1;
                case wd.ELightModel.PHONG:
                    return 2;
                case wd.ELightModel.CONSTANT:
                    return 3;
                default:
                    wd.Log.error(true, wd.Log.info.FUNC_UNEXPECT("lightModel:" + lightModel));
                    break;
            }
        };
        __decorate([
            wd.require(function (lightModel) {
                wd.assert(lightModel !== wd.ELightModel.LAMBERT, wd.Log.info.FUNC_SHOULD_NOT("lightModel", "=== ELightModel.LAMBERT"));
            })
        ], LightShaderLib.prototype, "_convertLightModelToGLSLVariable", null);
        return LightShaderLib;
    }(wd.ShaderLib));
    wd.LightShaderLib = LightShaderLib;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var LightEndShaderLib = (function (_super) {
        __extends(LightEndShaderLib, _super);
        function LightEndShaderLib() {
            _super.apply(this, arguments);
            this.type = "lightEnd";
        }
        LightEndShaderLib.create = function () {
            var obj = new this();
            return obj;
        };
        LightEndShaderLib.prototype.sendShaderVariables = function (program, quadCmd, material) {
        };
        return LightEndShaderLib;
    }(wd.ShaderLib));
    wd.LightEndShaderLib = LightEndShaderLib;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var LightMapShaderLib = (function (_super) {
        __extends(LightMapShaderLib, _super);
        function LightMapShaderLib() {
            _super.apply(this, arguments);
        }
        LightMapShaderLib.prototype.sendShaderVariables = function (program, quadCmd, material) {
            if (quadCmd.buffers.hasChild(wd.EBufferDataType.TEXCOORD)) {
                this.sendAttributeData(program, "a_texCoord", quadCmd.buffers.getChild(wd.EBufferDataType.TEXCOORD));
            }
        };
        LightMapShaderLib.prototype.setShaderDefinition = function (quadCmd, material) {
            _super.prototype.setShaderDefinition.call(this, quadCmd, material);
            this.addAttributeVariable(["a_texCoord"]);
        };
        return LightMapShaderLib;
    }(wd.ShaderLib));
    wd.LightMapShaderLib = LightMapShaderLib;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var DiffuseMapShaderLib = (function (_super) {
        __extends(DiffuseMapShaderLib, _super);
        function DiffuseMapShaderLib() {
            _super.apply(this, arguments);
            this.type = "diffuseMap";
        }
        DiffuseMapShaderLib.create = function () {
            var obj = new this();
            return obj;
        };
        DiffuseMapShaderLib.prototype.setShaderDefinition = function (quadCmd, material) {
            _super.prototype.setShaderDefinition.call(this, quadCmd, material);
            this.addUniformVariable([
                wd.VariableNameTable.getVariableName("diffuseMap"),
                "u_sourceRegion", "u_repeatRegion"
            ]);
        };
        return DiffuseMapShaderLib;
    }(wd.LightMapShaderLib));
    wd.DiffuseMapShaderLib = DiffuseMapShaderLib;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var SpecularMapShaderLib = (function (_super) {
        __extends(SpecularMapShaderLib, _super);
        function SpecularMapShaderLib() {
            _super.apply(this, arguments);
            this.type = "specularMap";
        }
        SpecularMapShaderLib.create = function () {
            var obj = new this();
            return obj;
        };
        SpecularMapShaderLib.prototype.setShaderDefinition = function (quadCmd, material) {
            _super.prototype.setShaderDefinition.call(this, quadCmd, material);
            this.addUniformVariable([
                wd.VariableNameTable.getVariableName("specularMap")
            ]);
        };
        return SpecularMapShaderLib;
    }(wd.LightMapShaderLib));
    wd.SpecularMapShaderLib = SpecularMapShaderLib;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var EmissionMapShaderLib = (function (_super) {
        __extends(EmissionMapShaderLib, _super);
        function EmissionMapShaderLib() {
            _super.apply(this, arguments);
            this.type = "emissionMap";
        }
        EmissionMapShaderLib.create = function () {
            var obj = new this();
            return obj;
        };
        EmissionMapShaderLib.prototype.setShaderDefinition = function (quadCmd, material) {
            _super.prototype.setShaderDefinition.call(this, quadCmd, material);
            this.addUniformVariable([
                wd.VariableNameTable.getVariableName("emissionMap")
            ]);
        };
        return EmissionMapShaderLib;
    }(wd.LightMapShaderLib));
    wd.EmissionMapShaderLib = EmissionMapShaderLib;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var NormalMapShaderLib = (function (_super) {
        __extends(NormalMapShaderLib, _super);
        function NormalMapShaderLib() {
            _super.apply(this, arguments);
            this.type = "normalMap";
        }
        NormalMapShaderLib.create = function () {
            var obj = new this();
            return obj;
        };
        NormalMapShaderLib.prototype.sendShaderVariables = function (program, quadCmd, material) {
            _super.prototype.sendShaderVariables.call(this, program, quadCmd, material);
            if (quadCmd.buffers.hasChild(wd.EBufferDataType.TANGENT)) {
                this.sendAttributeData(program, "a_tangent", quadCmd.buffers.getChild(wd.EBufferDataType.TANGENT));
            }
        };
        NormalMapShaderLib.prototype.setShaderDefinition = function (quadCmd, material) {
            _super.prototype.setShaderDefinition.call(this, quadCmd, material);
            this.addAttributeVariable(["a_tangent"]);
            this.addUniformVariable([
                wd.VariableNameTable.getVariableName("normalMap")
            ]);
        };
        return NormalMapShaderLib;
    }(wd.LightMapShaderLib));
    wd.NormalMapShaderLib = NormalMapShaderLib;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var NoDiffuseMapShaderLib = (function (_super) {
        __extends(NoDiffuseMapShaderLib, _super);
        function NoDiffuseMapShaderLib() {
            _super.apply(this, arguments);
            this.type = "noDiffuseMap";
        }
        NoDiffuseMapShaderLib.create = function () {
            var obj = new this();
            return obj;
        };
        NoDiffuseMapShaderLib.prototype.sendShaderVariables = function (program, quadCmd, material) {
            this.sendUniformData(program, "u_diffuse", material.color.toVector3());
        };
        NoDiffuseMapShaderLib.prototype.setShaderDefinition = function (quadCmd, material) {
            _super.prototype.setShaderDefinition.call(this, quadCmd, material);
            this.addUniformVariable(["u_diffuse"]);
        };
        return NoDiffuseMapShaderLib;
    }(wd.ShaderLib));
    wd.NoDiffuseMapShaderLib = NoDiffuseMapShaderLib;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var NoSpecularMapShaderLib = (function (_super) {
        __extends(NoSpecularMapShaderLib, _super);
        function NoSpecularMapShaderLib() {
            _super.apply(this, arguments);
            this.type = "noSpecularMap";
        }
        NoSpecularMapShaderLib.create = function () {
            var obj = new this();
            return obj;
        };
        NoSpecularMapShaderLib.prototype.sendShaderVariables = function (program, quadCmd, material) {
            this.sendUniformData(program, "u_specular", material.specularColor.toVector3());
        };
        NoSpecularMapShaderLib.prototype.setShaderDefinition = function (quadCmd, material) {
            _super.prototype.setShaderDefinition.call(this, quadCmd, material);
            this.addUniformVariable(["u_specular"]);
        };
        return NoSpecularMapShaderLib;
    }(wd.ShaderLib));
    wd.NoSpecularMapShaderLib = NoSpecularMapShaderLib;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var NoEmissionMapShaderLib = (function (_super) {
        __extends(NoEmissionMapShaderLib, _super);
        function NoEmissionMapShaderLib() {
            _super.apply(this, arguments);
            this.type = "noEmissionMap";
        }
        NoEmissionMapShaderLib.create = function () {
            var obj = new this();
            return obj;
        };
        NoEmissionMapShaderLib.prototype.sendShaderVariables = function (program, quadCmd, material) {
            this.sendUniformData(program, "u_emission", material.emissionColor.toVector3());
        };
        NoEmissionMapShaderLib.prototype.setShaderDefinition = function (quadCmd, material) {
            _super.prototype.setShaderDefinition.call(this, quadCmd, material);
            this.addUniformVariable(["u_emission"]);
        };
        return NoEmissionMapShaderLib;
    }(wd.ShaderLib));
    wd.NoEmissionMapShaderLib = NoEmissionMapShaderLib;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var NoNormalMapShaderLib = (function (_super) {
        __extends(NoNormalMapShaderLib, _super);
        function NoNormalMapShaderLib() {
            _super.apply(this, arguments);
            this.type = "noNormalMap";
        }
        NoNormalMapShaderLib.create = function () {
            var obj = new this();
            return obj;
        };
        NoNormalMapShaderLib.prototype.sendShaderVariables = function (program, quadCmd, material) {
        };
        return NoNormalMapShaderLib;
    }(wd.ShaderLib));
    wd.NoNormalMapShaderLib = NoNormalMapShaderLib;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var BuildShadowMapShaderLib = (function (_super) {
        __extends(BuildShadowMapShaderLib, _super);
        function BuildShadowMapShaderLib() {
            _super.apply(this, arguments);
        }
        BuildShadowMapShaderLib.prototype.setShaderDefinition = function (quadCmd, material) {
            _super.prototype.setShaderDefinition.call(this, quadCmd, material);
            this.setFsSource(this.getFsChunk("commonBuildShadowMap_fragment.glsl"));
            this.setFsSource(this.getFsChunk(), "+");
        };
        return BuildShadowMapShaderLib;
    }(wd.ShaderLib));
    wd.BuildShadowMapShaderLib = BuildShadowMapShaderLib;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var BuildTwoDShadowMapShaderLib = (function (_super) {
        __extends(BuildTwoDShadowMapShaderLib, _super);
        function BuildTwoDShadowMapShaderLib() {
            _super.apply(this, arguments);
            this.type = "buildTwoDShadowMap";
        }
        BuildTwoDShadowMapShaderLib.create = function () {
            var obj = new this();
            return obj;
        };
        BuildTwoDShadowMapShaderLib.prototype.sendShaderVariables = function (program, quadCmd, material) {
            this.sendUniformData(program, "u_vpMatrixFromLight", material.buildTwoDShadowMapData.vpMatrixFromLight);
        };
        BuildTwoDShadowMapShaderLib.prototype.setShaderDefinition = function (quadCmd, material) {
            _super.prototype.setShaderDefinition.call(this, quadCmd, material);
            this.addUniformVariable([
                "u_vpMatrixFromLight"
            ]);
        };
        return BuildTwoDShadowMapShaderLib;
    }(wd.BuildShadowMapShaderLib));
    wd.BuildTwoDShadowMapShaderLib = BuildTwoDShadowMapShaderLib;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var BuildCubemapShadowMapShaderLib = (function (_super) {
        __extends(BuildCubemapShadowMapShaderLib, _super);
        function BuildCubemapShadowMapShaderLib() {
            _super.apply(this, arguments);
            this.type = "buildCubemapShadowMap";
        }
        BuildCubemapShadowMapShaderLib.create = function () {
            var obj = new this();
            return obj;
        };
        BuildCubemapShadowMapShaderLib.prototype.sendShaderVariables = function (program, quadCmd, material) {
            this.sendUniformData(program, "u_lightPos", material.buildCubemapShadowMapData.lightPos);
            this.sendUniformData(program, "u_farPlane", material.buildCubemapShadowMapData.farPlane);
        };
        BuildCubemapShadowMapShaderLib.prototype.setShaderDefinition = function (quadCmd, material) {
            _super.prototype.setShaderDefinition.call(this, quadCmd, material);
            this.addUniformVariable([
                "u_lightPos", "u_farPlane"
            ]);
        };
        return BuildCubemapShadowMapShaderLib;
    }(wd.BuildShadowMapShaderLib));
    wd.BuildCubemapShadowMapShaderLib = BuildCubemapShadowMapShaderLib;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var TotalShadowMapShaderLib = (function (_super) {
        __extends(TotalShadowMapShaderLib, _super);
        function TotalShadowMapShaderLib() {
            _super.apply(this, arguments);
            this.type = "totalShadowMap";
        }
        TotalShadowMapShaderLib.create = function () {
            var obj = new this();
            return obj;
        };
        TotalShadowMapShaderLib.prototype.sendShaderVariables = function (program, quadCmd, material) {
        };
        return TotalShadowMapShaderLib;
    }(wd.ShaderLib));
    wd.TotalShadowMapShaderLib = TotalShadowMapShaderLib;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var ShadowMapShaderLib = (function (_super) {
        __extends(ShadowMapShaderLib, _super);
        function ShadowMapShaderLib() {
            _super.apply(this, arguments);
        }
        ShadowMapShaderLib.prototype.setShaderDefinition = function (quadCmd, material) {
            _super.prototype.setShaderDefinition.call(this, quadCmd, material);
            this._setShadowMapSource();
        };
        ShadowMapShaderLib.prototype._setShadowMapSource = function () {
            var scene = wd.Director.getInstance().scene, twoDShadowMapCount = scene.directionLights ? scene.directionLights.filter(function (light) {
                return light.getComponent(wd.DirectionLight).castShadow;
            }).getCount() : 0, cubemapShadowMapCount = scene.pointLights ? scene.pointLights.filter(function (light) {
                return light.getComponent(wd.PointLight).castShadow;
            }).getCount() : 0;
            if (scene.shadowMap.softType === wd.EShadowMapSoftType.PCF) {
                this.fsSourceDefineList.addChildren([{
                        name: "SHADOWMAP_TYPE_PCF"
                    }]);
            }
            this.vsSourceDefineList.addChild({
                name: "TWOD_SHADOWMAP_COUNT",
                value: twoDShadowMapCount
            });
            this.fsSourceDefineList.addChildren([
                {
                    name: "TWOD_SHADOWMAP_COUNT",
                    value: twoDShadowMapCount
                },
                {
                    name: "CUBEMAP_SHADOWMAP_COUNT",
                    value: cubemapShadowMapCount
                },
            ]);
        };
        return ShadowMapShaderLib;
    }(wd.ShaderLib));
    wd.ShadowMapShaderLib = ShadowMapShaderLib;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var TwoDShadowMapShaderLib = (function (_super) {
        __extends(TwoDShadowMapShaderLib, _super);
        function TwoDShadowMapShaderLib() {
            _super.apply(this, arguments);
            this.type = "twoDShadowMap";
        }
        TwoDShadowMapShaderLib.create = function () {
            var obj = new this();
            return obj;
        };
        TwoDShadowMapShaderLib.prototype.sendShaderVariables = function (program, quadCmd, material) {
            material.twoDShadowMapDatas.forEach(function (data, index) {
                program.sendStructureData("u_vpMatrixFromLight[" + index + "]", wd.EVariableType.FLOAT_MAT4, data.vpMatrixFromLight);
                program.sendStructureData("u_twoDShadowSize[" + index + "]", wd.EVariableType.FLOAT_2, data.shadowSize);
                program.sendStructureData("u_twoDShadowBias[" + index + "]", wd.EVariableType.FLOAT_1, data.shadowBias);
                program.sendStructureData("u_twoDShadowDarkness[" + index + "]", wd.EVariableType.FLOAT_1, data.shadowDarkness);
                program.sendStructureData("u_twoDLightPos[" + index + "]", wd.EVariableType.FLOAT_3, data.lightPos);
            });
        };
        return TwoDShadowMapShaderLib;
    }(wd.ShadowMapShaderLib));
    wd.TwoDShadowMapShaderLib = TwoDShadowMapShaderLib;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var CubemapShadowMapShaderLib = (function (_super) {
        __extends(CubemapShadowMapShaderLib, _super);
        function CubemapShadowMapShaderLib() {
            _super.apply(this, arguments);
            this.type = "cubemapShadowMap";
        }
        CubemapShadowMapShaderLib.create = function () {
            var obj = new this();
            return obj;
        };
        CubemapShadowMapShaderLib.prototype.sendShaderVariables = function (program, quadCmd, material) {
            material.cubemapShadowMapDatas.forEach(function (data, index) {
                program.sendStructureData("u_cubemapLightPos[" + index + "]", wd.EVariableType.FLOAT_3, data.lightPos);
                program.sendStructureData("u_farPlane[" + index + "]", wd.EVariableType.FLOAT_1, data.farPlane);
                program.sendStructureData("u_cubemapShadowBias[" + index + "]", wd.EVariableType.FLOAT_1, data.shadowBias);
                program.sendStructureData("u_cubemapShadowDarkness[" + index + "]", wd.EVariableType.FLOAT_1, data.shadowDarkness);
            });
        };
        return CubemapShadowMapShaderLib;
    }(wd.ShadowMapShaderLib));
    wd.CubemapShadowMapShaderLib = CubemapShadowMapShaderLib;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var NoShadowMapShaderLib = (function (_super) {
        __extends(NoShadowMapShaderLib, _super);
        function NoShadowMapShaderLib() {
            _super.apply(this, arguments);
            this.type = "noShadowMap";
        }
        NoShadowMapShaderLib.create = function () {
            var obj = new this();
            return obj;
        };
        NoShadowMapShaderLib.prototype.sendShaderVariables = function (program, quadCmd, material) {
        };
        return NoShadowMapShaderLib;
    }(wd.ShaderLib));
    wd.NoShadowMapShaderLib = NoShadowMapShaderLib;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var ShaderSnippet = (function () {
        function ShaderSnippet() {
        }
        ShaderSnippet.main_begin = "void main(void){\n";
        ShaderSnippet.main_end = "}\n";
        ShaderSnippet.setPos_mvp = "gl_Position = u_pMatrix * u_vMatrix * u_mMatrix * vec4(a_position, 1.0);\n";
        return ShaderSnippet;
    }());
    wd.ShaderSnippet = ShaderSnippet;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var Material = (function () {
        function Material() {
            this._blendType = null;
            this._blendSrc = wd.EBlendFunc.ONE;
            this._blendDst = wd.EBlendFunc.ZERO;
            this._blendEquation = wd.EBlendEquation.ADD;
            this.shader = wd.Shader.create();
            this.color = wd.Color.create("#ffffff");
            this.redWrite = true;
            this.greenWrite = true;
            this.blueWrite = true;
            this.alphaWrite = true;
            this.polygonOffsetMode = wd.EPolygonOffsetMode.NONE;
            this.side = wd.ESide.FRONT;
            this.blend = false;
            this.blendFuncSeparate = null;
            this.blendEquationSeparate = [wd.EBlendEquation.ADD, wd.EBlendEquation.ADD];
            this.shading = wd.EShading.FLAT;
            this.refractionRatio = 0;
            this.reflectivity = null;
            this.mapCombineMode = wd.ETextureCombineMode.MIX;
            this.mapMixRatio = 0.5;
            this.mapManager = wd.MapManager.create(this);
            this.geometry = null;
            this._afterInitSubscription = null;
        }
        Object.defineProperty(Material.prototype, "program", {
            get: function () {
                return this.shader.program;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Material.prototype, "blendType", {
            get: function () {
                if (this._blendType) {
                    return this._blendType;
                }
                if ((this.blendSrc === wd.EBlendFunc.ONE)
                    && (this.blendDst === wd.EBlendFunc.ZERO)
                    && (this.blendEquation === wd.EBlendEquation.ADD)) {
                    return wd.EBlendType.NONE;
                }
                else if ((this.blendSrc === wd.EBlendFunc.SRC_ALPHA)
                    && (this.blendDst === wd.EBlendFunc.ONE_MINUS_SRC_ALPHA)
                    && (this.blendEquation === wd.EBlendEquation.ADD)) {
                    return wd.EBlendType.NORMAL;
                }
                else if ((this.blendSrc === wd.EBlendFunc.ONE)
                    && (this.blendDst === wd.EBlendFunc.ONE)
                    && (this.blendEquation === wd.EBlendEquation.ADD)) {
                    return wd.EBlendType.ADDITIVE;
                }
                else if ((this.blendSrc === wd.EBlendFunc.SRC_ALPHA)
                    && (this.blendDst === wd.EBlendFunc.ONE)
                    && (this.blendEquation === wd.EBlendEquation.ADD)) {
                    return wd.EBlendType.ADDITIVEALPHA;
                }
                else if ((this.blendSrc === wd.EBlendFunc.DST_COLOR)
                    && (this.blendDst === wd.EBlendFunc.ZERO)
                    && (this.blendEquation === wd.EBlendEquation.ADD)) {
                    return wd.EBlendType.MULTIPLICATIVE;
                }
                else if ((this.blendSrc === wd.EBlendFunc.ONE)
                    && (this.blendDst === wd.EBlendFunc.ONE_MINUS_SRC_ALPHA)
                    && (this.blendEquation === wd.EBlendEquation.ADD)) {
                    return wd.EBlendType.PREMULTIPLIED;
                }
                else {
                    return wd.EBlendType.NORMAL;
                }
            },
            set: function (blendType) {
                switch (blendType) {
                    case wd.EBlendType.NONE:
                        this.blend = false;
                        this.blendSrc = wd.EBlendFunc.ONE;
                        this.blendDst = wd.EBlendFunc.ZERO;
                        this.blendEquation = wd.EBlendEquation.ADD;
                        break;
                    case wd.EBlendType.NORMAL:
                        this.blend = true;
                        this.blendSrc = wd.EBlendFunc.SRC_ALPHA;
                        this.blendDst = wd.EBlendFunc.ONE_MINUS_SRC_ALPHA;
                        this.blendEquation = wd.EBlendEquation.ADD;
                        break;
                    case wd.EBlendType.PREMULTIPLIED:
                        this.blend = true;
                        this.blendSrc = wd.EBlendFunc.ONE;
                        this.blendDst = wd.EBlendFunc.ONE_MINUS_SRC_ALPHA;
                        this.blendEquation = wd.EBlendEquation.ADD;
                        break;
                    case wd.EBlendType.ADDITIVE:
                        this.blend = true;
                        this.blendSrc = wd.EBlendFunc.ONE;
                        this.blendDst = wd.EBlendFunc.ONE;
                        this.blendEquation = wd.EBlendEquation.ADD;
                        break;
                    case wd.EBlendType.ADDITIVEALPHA:
                        this.blend = true;
                        this.blendSrc = wd.EBlendFunc.SRC_ALPHA;
                        this.blendDst = wd.EBlendFunc.ONE;
                        this.blendEquation = wd.EBlendEquation.ADD;
                        break;
                    case wd.EBlendType.MULTIPLICATIVE:
                        this.blend = true;
                        this.blendSrc = wd.EBlendFunc.DST_COLOR;
                        this.blendDst = wd.EBlendFunc.ZERO;
                        this.blendEquation = wd.EBlendEquation.ADD;
                        break;
                    default:
                        wd.Log.error(true, wd.Log.info.FUNC_INVALID("blendType"));
                        break;
                }
                this._blendType = blendType;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Material.prototype, "envMap", {
            get: function () {
                return this.mapManager.getEnvMap();
            },
            set: function (envMap) {
                this.mapManager.setEnvMap(envMap);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Material.prototype, "blendSrc", {
            get: function () {
                return this._blendSrc;
            },
            set: function (blendSrc) {
                this._blendSrc = blendSrc;
                this.blendFuncSeparate = null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Material.prototype, "blendDst", {
            get: function () {
                return this._blendDst;
            },
            set: function (blendDst) {
                this._blendDst = blendDst;
                this.blendFuncSeparate = null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Material.prototype, "blendEquation", {
            get: function () {
                return this._blendEquation;
            },
            set: function (blendEquation) {
                this._blendEquation = blendEquation;
                this.blendEquationSeparate = null;
            },
            enumerable: true,
            configurable: true
        });
        Material.prototype.init = function () {
            var self = this;
            this.shader.init();
            this.mapManager.init();
            this._afterInitSubscription = wd.EventManager.fromEvent(wd.EEngineEvent.AFTER_GAMEOBJECT_INIT)
                .subscribe(function () {
                self._afterInitHandler();
            });
        };
        Material.prototype.dispose = function () {
            this.mapManager.dispose();
            this._afterInitSubscription && this._afterInitSubscription.dispose();
        };
        Material.prototype.updateTexture = function () {
            this.mapManager.update();
        };
        Material.prototype.updateShader = function (quadCmd) {
            var scene = wd.Director.getInstance().scene;
            if (scene.isUseProgram) {
                scene.shader.update(quadCmd, this);
            }
            else {
                this.shader.update(quadCmd, this);
            }
        };
        Material.prototype.addShaderLib = function () {
        };
        Material.prototype.addMap = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            this.mapManager.addMap.apply(this.mapManager, args);
        };
        Material.prototype.addNormalShaderLib = function () {
            if (this._hasAnimation() && !this.shader.hasLib(wd.MorphNormalShaderLib)) {
                this._addShaderLibToTop(wd.MorphNormalShaderLib.create());
            }
            else if (!this.shader.hasLib(wd.CommonNormalShaderLib)) {
                this._addShaderLibToTop(wd.CommonNormalShaderLib.create());
            }
        };
        Material.prototype.setBlendByOpacity = function (opacity) {
            if (opacity < 1.0 && opacity > 0.0) {
                this.blend = true;
            }
            else {
                this.blend = false;
            }
        };
        Material.prototype._addTopShaderLib = function () {
            this.shader.addLib(wd.CommonShaderLib.create());
            if (this._hasAnimation()) {
                this.shader.addLib(wd.MorphCommonShaderLib.create());
                this.shader.addLib(wd.MorphVerticeShaderLib.create());
            }
            else {
                this.shader.addLib(wd.CommonVerticeShaderLib.create());
            }
        };
        Material.prototype._addShaderLibToTop = function (lib) {
            this.shader.addShaderLibToTop(lib);
        };
        Material.prototype._hasAnimation = function () {
            if (this.geometry instanceof wd.ModelGeometry) {
                var geo = (this.geometry);
                return geo.hasAnimation();
            }
            return false;
        };
        Material.prototype._afterInitHandler = function () {
            this._addTopShaderLib();
            this.addShaderLib();
        };
        __decorate([
            wd.require(function () {
                wd.assert(!(this.mirrorMap && this.envMap), wd.Log.info.FUNC_SHOULD_NOT("mirrorMap and envMap", "be set both"));
            })
        ], Material.prototype, "init", null);
        __decorate([
            wd.virtual
        ], Material.prototype, "addShaderLib", null);
        __decorate([
            wd.execOnlyOnce("_isAfterInit")
        ], Material.prototype, "_afterInitHandler", null);
        return Material;
    }());
    wd.Material = Material;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var BasicMaterial = (function (_super) {
        __extends(BasicMaterial, _super);
        function BasicMaterial() {
            _super.apply(this, arguments);
            this._opacity = 1.0;
        }
        BasicMaterial.create = function () {
            var obj = new this();
            return obj;
        };
        Object.defineProperty(BasicMaterial.prototype, "map", {
            set: function (map) {
                if (map instanceof wd.Texture || map instanceof wd.TextureAsset) {
                    this.addMap(map);
                }
                else {
                    var mapArr = (arguments[0]);
                    wdCb.Log.error(mapArr.length > 2, wdCb.Log.info.FUNC_SUPPORT("only", "map.count <= 2"));
                    for (var _i = 0, mapArr_1 = mapArr; _i < mapArr_1.length; _i++) {
                        var m = mapArr_1[_i];
                        this.addMap(m);
                    }
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BasicMaterial.prototype, "mirrorMap", {
            get: function () {
                return this.mapManager.getMirrorMap();
            },
            set: function (mirrorMap) {
                this.mapManager.setMirrorMap(mirrorMap);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BasicMaterial.prototype, "opacity", {
            get: function () {
                return this._opacity;
            },
            set: function (opacity) {
                this.setBlendByOpacity(opacity);
                this._opacity = opacity;
            },
            enumerable: true,
            configurable: true
        });
        BasicMaterial.prototype.addShaderLib = function () {
            var envMap = null;
            this.shader.addLib(wd.BasicShaderLib.create());
            this._setMapShaderLib();
            envMap = this.envMap;
            if (envMap) {
                this._setEnvMapShaderLib(envMap);
            }
            this._setMirrorMapShaderLib();
            this.shader.addLib(wd.BasicEndShaderLib.create());
        };
        BasicMaterial.prototype._setMapShaderLib = function () {
            var mapManager = this.mapManager, mapCount = mapManager.getMapCount(function (map) {
                return !mapManager.isMirrorMap(map);
            });
            if (mapCount > 0) {
                if (mapCount > 1) {
                    this.shader.addLib(wd.MultiMapShaderLib.create());
                }
                else {
                    this.shader.addLib(wd.BasicMapShaderLib.create());
                }
            }
        };
        BasicMaterial.prototype._setEnvMapShaderLib = function (envMap) {
            this.addNormalShaderLib();
            switch (envMap.mode) {
                case wd.EEnvMapMode.BASIC:
                    this.shader.addLib(wd.BasicEnvMapForBasicShaderLib.create());
                    break;
                case wd.EEnvMapMode.REFLECTION:
                    this.shader.addLib(wd.ReflectionForBasicShaderLib.create());
                    break;
                case wd.EEnvMapMode.REFRACTION:
                    this.shader.addLib(wd.RefractionForBasicShaderLib.create());
                    break;
                case wd.EEnvMapMode.FRESNEL:
                    this.shader.addLib(wd.FresnelForBasicShaderLib.create());
                    break;
                default:
                    wd.Log.error(true, wd.Log.info.FUNC_INVALID("EEnvMapMode"));
                    break;
            }
        };
        BasicMaterial.prototype._setMirrorMapShaderLib = function () {
            if (this.mirrorMap) {
                this.shader.addLib(wd.MirrorForBasicShaderLib.create());
            }
        };
        return BasicMaterial;
    }(wd.Material));
    wd.BasicMaterial = BasicMaterial;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var SkyboxMaterial = (function (_super) {
        __extends(SkyboxMaterial, _super);
        function SkyboxMaterial() {
            _super.apply(this, arguments);
        }
        SkyboxMaterial.create = function () {
            var obj = new this();
            obj.initWhenCreate();
            return obj;
        };
        SkyboxMaterial.prototype.initWhenCreate = function () {
            this.side = wd.ESide.BACK;
        };
        SkyboxMaterial.prototype.addShaderLib = function () {
            this.shader.addLib(wd.SkyboxShaderLib.create());
        };
        return SkyboxMaterial;
    }(wd.Material));
    wd.SkyboxMaterial = SkyboxMaterial;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var LightMaterial = (function (_super) {
        __extends(LightMaterial, _super);
        function LightMaterial() {
            _super.apply(this, arguments);
            this._diffuseMap = null;
            this._specularMap = null;
            this._emissionMap = null;
            this._normalMap = null;
            this._shininess = 32;
            this._opacity = 1.0;
            this.lightModel = wd.ELightModel.PHONG;
            this.twoDShadowMapDatas = wdCb.Collection.create();
            this.cubemapShadowMapDatas = wdCb.Collection.create();
            this.buildTwoDShadowMapData = null;
            this.buildCubemapShadowMapData = null;
            this.specularColor = wd.Color.create("0x111111");
            this.emissionColor = wd.Color.create("0x111111");
            this._twoDShadowMapSamplerIndex = 0;
            this._cubemapShadowMapSamplerIndex = 0;
        }
        LightMaterial.create = function () {
            var obj = new this();
            return obj;
        };
        Object.defineProperty(LightMaterial.prototype, "diffuseMap", {
            get: function () {
                return this._diffuseMap;
            },
            set: function (diffuseMap) {
                this.addMap(diffuseMap, {
                    samplerVariableName: wd.VariableNameTable.getVariableName("diffuseMap")
                });
                this._diffuseMap = diffuseMap;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LightMaterial.prototype, "specularMap", {
            get: function () {
                return this._specularMap;
            },
            set: function (specularMap) {
                this.addMap(specularMap, {
                    samplerVariableName: wd.VariableNameTable.getVariableName("specularMap")
                });
                this._specularMap = specularMap;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LightMaterial.prototype, "emissionMap", {
            get: function () {
                return this._emissionMap;
            },
            set: function (emissionMap) {
                this.addMap(emissionMap, {
                    samplerVariableName: wd.VariableNameTable.getVariableName("emissionMap")
                });
                this._emissionMap = emissionMap;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LightMaterial.prototype, "normalMap", {
            get: function () {
                return this._normalMap;
            },
            set: function (normalMap) {
                this.addMap(normalMap, {
                    samplerVariableName: wd.VariableNameTable.getVariableName("normalMap")
                });
                this._normalMap = normalMap;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LightMaterial.prototype, "shininess", {
            get: function () {
                if (Number(this._shininess) <= 0) {
                    return 32;
                }
                return this._shininess;
            },
            set: function (shininess) {
                this._shininess = shininess;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LightMaterial.prototype, "opacity", {
            get: function () {
                return this._opacity;
            },
            set: function (opacity) {
                this.setBlendByOpacity(opacity);
                this._opacity = opacity;
            },
            enumerable: true,
            configurable: true
        });
        LightMaterial.prototype.addTwoDShadowMap = function (shadowMap) {
            this.addMap(shadowMap, {
                samplerData: this._twoDShadowMapSamplerIndex
            });
            this._twoDShadowMapSamplerIndex++;
        };
        LightMaterial.prototype.addCubemapShadowMap = function (shadowMap) {
            this.addMap(shadowMap, {
                samplerData: this._cubemapShadowMapSamplerIndex
            });
            this._cubemapShadowMapSamplerIndex++;
        };
        LightMaterial.prototype.hasShadowMap = function (map) {
            return this.mapManager.hasMap(map);
        };
        LightMaterial.prototype.addTwoDShadowMapData = function (shadowMapData) {
            this.twoDShadowMapDatas.addChild(shadowMapData);
        };
        LightMaterial.prototype.addCubemapShadowMapData = function (shadowMapData) {
            this.cubemapShadowMapDatas.addChild(shadowMapData);
        };
        LightMaterial.prototype.clearTwoDShadowMapData = function () {
            this.twoDShadowMapDatas.removeAllChildren();
        };
        LightMaterial.prototype.clearCubemapShadowMapData = function () {
            this.cubemapShadowMapDatas.removeAllChildren();
        };
        LightMaterial.prototype.addShaderLib = function () {
            var envMap = null;
            this.addNormalShaderLib();
            this.shader.addLib(wd.LightCommonShaderLib.create());
            this._setLightMapShaderLib();
            this.shader.addLib(wd.LightShaderLib.create());
            envMap = this.envMap;
            if (envMap) {
                this._setEnvMapShaderLib(envMap);
            }
            this.shader.addLib(wd.LightEndShaderLib.create());
        };
        LightMaterial.prototype._setLightMapShaderLib = function () {
            var scene = wd.Director.getInstance().scene;
            if (this._diffuseMap) {
                this.shader.addLib(wd.DiffuseMapShaderLib.create());
            }
            else {
                this.shader.addLib(wd.NoDiffuseMapShaderLib.create());
            }
            if (this._specularMap) {
                this.shader.addLib(wd.SpecularMapShaderLib.create());
            }
            else {
                this.shader.addLib(wd.NoSpecularMapShaderLib.create());
            }
            if (this._emissionMap) {
                this.shader.addLib(wd.EmissionMapShaderLib.create());
            }
            else {
                this.shader.addLib(wd.NoEmissionMapShaderLib.create());
            }
            if (this._normalMap) {
                this.shader.addLib(wd.NormalMapShaderLib.create());
            }
            else {
                this.shader.addLib(wd.NoNormalMapShaderLib.create());
            }
            if (scene.shadowMap.enable && (this._hasTwoDShadowMap() || this._hasCubemapShadowMap())) {
                if (this._hasTwoDShadowMap()) {
                    this.shader.addLib(wd.TwoDShadowMapShaderLib.create());
                }
                if (this._hasCubemapShadowMap()) {
                    this.shader.addLib(wd.CubemapShadowMapShaderLib.create());
                }
                this.shader.addLib(wd.TotalShadowMapShaderLib.create());
            }
            else {
                this.shader.addLib(wd.NoShadowMapShaderLib.create());
            }
        };
        LightMaterial.prototype._setEnvMapShaderLib = function (envMap) {
            switch (envMap.mode) {
                case wd.EEnvMapMode.BASIC:
                    this.shader.addLib(wd.BasicEnvMapForLightShaderLib.create());
                    break;
                case wd.EEnvMapMode.REFLECTION:
                    this.shader.addLib(wd.ReflectionForLightShaderLib.create());
                    break;
                case wd.EEnvMapMode.REFRACTION:
                    this.shader.addLib(wd.RefractionForLightShaderLib.create());
                    break;
                case wd.EEnvMapMode.FRESNEL:
                    this.shader.addLib(wd.FresnelForLightShaderLib.create());
                    break;
                default:
                    wd.Log.error(true, wd.Log.info.FUNC_INVALID("EEnvMapMode"));
                    break;
            }
        };
        LightMaterial.prototype._hasTwoDShadowMap = function () {
            return this.mapManager.hasMap(function (map) {
                return map instanceof wd.TwoDShadowMapTexture;
            });
        };
        LightMaterial.prototype._hasCubemapShadowMap = function () {
            return this.mapManager.hasMap(function (map) {
                return map instanceof wd.CubemapShadowMapTexture;
            });
        };
        return LightMaterial;
    }(wd.Material));
    wd.LightMaterial = LightMaterial;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var ShaderMaterial = (function (_super) {
        __extends(ShaderMaterial, _super);
        function ShaderMaterial() {
            _super.apply(this, arguments);
        }
        ShaderMaterial.create = function () {
            var obj = new this();
            return obj;
        };
        return ShaderMaterial;
    }(wd.Material));
    wd.ShaderMaterial = ShaderMaterial;
})(wd || (wd = {}));
var wd;
(function (wd) {
    (function (EShading) {
        EShading[EShading["FLAT"] = 0] = "FLAT";
        EShading[EShading["SMOOTH"] = 1] = "SMOOTH";
    })(wd.EShading || (wd.EShading = {}));
    var EShading = wd.EShading;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var MapManager = (function () {
        function MapManager(material) {
            this._material = null;
            this._textures = wdCb.Hash.create();
            this._mirrorMap = null;
            this._material = material;
        }
        MapManager.create = function (material) {
            var obj = new this(material);
            return obj;
        };
        MapManager.prototype.init = function () {
            this._getMapList().forEach(function (texture) {
                texture.init();
            });
        };
        MapManager.prototype.addMap = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var map = null;
            if (args[0] instanceof wd.TextureAsset) {
                var asset = args[0];
                map = asset.toTexture();
            }
            else if (args[0] instanceof wd.Texture) {
                map = args[0];
            }
            if (args.length === 2) {
                var option = args[1];
                this._setMapOption(map, option);
            }
            map.material = this._material;
            this._textures.appendChild("map", map);
        };
        MapManager.prototype.getMap = function (index) {
            return this._textures.getChild("map").getChild(index);
        };
        MapManager.prototype.hasMap = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var maps = null;
            maps = this._textures.getChild("map");
            return maps && maps.hasChild(args[0]);
        };
        MapManager.prototype.getMapCount = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            if (args.length === 0) {
                var map = this._textures.getChild("map");
                return map ? map.getCount() : 0;
            }
            else {
                var filterFunc = args[0], map = this._textures.getChild("map");
                return map ? map.filter(filterFunc).getCount() : 0;
            }
        };
        MapManager.prototype.getEnvMap = function () {
            return this._getMap("envMap");
        };
        MapManager.prototype.setEnvMap = function (envMap) {
            this._setMap("envMap", envMap);
        };
        MapManager.prototype.getMirrorMap = function () {
            return this._mirrorMap;
        };
        MapManager.prototype.setMirrorMap = function (mirrorMap) {
            this.addMap(mirrorMap, {
                samplerVariableName: wd.VariableNameTable.getVariableName("mirrorReflectionMap")
            });
            this._mirrorMap = mirrorMap;
        };
        MapManager.prototype.isMirrorMap = function (map) {
            return map === this._mirrorMap;
        };
        MapManager.prototype.removeAllChildren = function () {
            this._textures.removeAllChildren();
        };
        MapManager.prototype.dispose = function () {
            this._getMapList().forEach(function (texture) {
                texture.dispose();
            });
            this.removeAllChildren();
        };
        MapManager.prototype.update = function () {
            this._getMapList()
                .filter(function (texture) {
                return texture instanceof wd.BasicTexture && texture.needUpdate;
            })
                .forEach(function (texture, index) {
                texture.update(index);
            });
        };
        MapManager.prototype.sendData = function (program) {
            this._getMapList().forEach(function (texture, index) {
                var samplerName = texture.getSamplerName(index), pos = program.getUniformLocation(samplerName);
                if (program.isUniformDataNotExistByLocation(pos)) {
                    return;
                }
                texture.bindToUnit(index);
                texture.sendData(program, pos, index);
            });
        };
        MapManager.prototype._getMapList = function () {
            return this._textures.toCollection();
        };
        MapManager.prototype._getMap = function (key) {
            return this._textures.getChild(key);
        };
        MapManager.prototype._setMap = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var key = args[0], map = args[1];
            if (!map) {
                this._removeMap(key, map);
                return;
            }
            if (arguments.length === 3) {
                var option = args[1];
                this._setMapOption(map, option);
            }
            map.material = this._material;
            this._textures.addChild(key, map);
        };
        MapManager.prototype._removeMap = function (key, map) {
            this._textures.removeChild(key);
        };
        MapManager.prototype._setMapOption = function (map, option) {
            map.variableData = option;
        };
        return MapManager;
    }());
    wd.MapManager = MapManager;
})(wd || (wd = {}));
var wd;
(function (wd) {
    (function (EAssetType) {
        EAssetType[EAssetType["UNKNOW"] = 0] = "UNKNOW";
        EAssetType[EAssetType["FONT"] = 1] = "FONT";
    })(wd.EAssetType || (wd.EAssetType = {}));
    var EAssetType = wd.EAssetType;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var Loader = (function () {
        function Loader() {
            this._container = wdCb.Hash.create();
        }
        Loader.prototype.load = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var url = args[0], id = null, self = this, data = null, stream = null;
            if (args.length === 1) {
                if (wd.JudgeUtils.isArray(url)) {
                    id = url.join("-");
                }
                else {
                    id = url;
                }
            }
            else {
                id = args[1];
            }
            data = this._container.getChild(id);
            if (data) {
                stream = wdFrp.just(data);
            }
            else {
                stream = this.loadAsset(url, id)
                    .do(function (data) {
                    self._container.addChild(id, data);
                }, function (err) {
                    self._errorHandle(url, err);
                }, null);
            }
            return stream;
        };
        Loader.prototype.get = function (id) {
            return this._container.getChild(id);
        };
        Loader.prototype.has = function (id) {
            return this._container.hasChild(id);
        };
        Loader.prototype.dispose = function () {
            this._container.removeAllChildren();
        };
        Loader.prototype._errorHandle = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var path = null, err = null;
            if (wd.JudgeUtils.isArray(args[0])) {
                path = args[0].join(",");
            }
            else {
                path = args[0];
            }
            err = args[1];
            wd.Log.log("load " + path + " asset fail:" + err);
        };
        return Loader;
    }());
    wd.Loader = Loader;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var GLSLLoader = (function (_super) {
        __extends(GLSLLoader, _super);
        function GLSLLoader() {
            _super.apply(this, arguments);
        }
        GLSLLoader.getInstance = function () {
            if (this._instance === null) {
                this._instance = new this();
            }
            return this._instance;
        };
        GLSLLoader.prototype.loadAsset = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var url = args[0];
            return wd.AjaxLoader.load(url, "text");
        };
        GLSLLoader._instance = null;
        __decorate([
            wd.require(function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i - 0] = arguments[_i];
                }
                wd.assert(!wd.JudgeUtils.isArray(args[0]), wd.Log.info.FUNC_MUST_BE("url", "string"));
            })
        ], GLSLLoader.prototype, "loadAsset", null);
        return GLSLLoader;
    }(wd.Loader));
    wd.GLSLLoader = GLSLLoader;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var JsLoader = (function (_super) {
        __extends(JsLoader, _super);
        function JsLoader() {
            _super.apply(this, arguments);
        }
        JsLoader.getInstance = function () {
            if (this._instance === null) {
                this._instance = new this();
            }
            return this._instance;
        };
        JsLoader.prototype.loadAsset = function () {
            var _this = this;
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var self = this, url = args[0];
            return wdFrp.fromPromise(new RSVP.Promise(function (resolve, reject) {
                var script = self._createScript();
                script.async = false;
                script.addEventListener("error", function (e) {
                    reject("load js file error. url:" + url);
                });
                if (script.readyState) {
                    script.onreadystatechange = function () {
                        if (script.readyState === "loaded" || script.readyState === "complete") {
                            script.onreadystatechange = null;
                            resolve(url);
                        }
                    };
                }
                else {
                    script.onload = function () {
                        resolve(url);
                    };
                }
                script.src = url;
                _this._appendScript(script);
            }));
        };
        JsLoader.prototype._createScript = function () {
            var script = document.createElement("script");
            script.type = "text/javascript";
            return script;
        };
        JsLoader.prototype._appendScript = function (script) {
            document.getElementsByTagName("head")[0].appendChild(script);
        };
        JsLoader._instance = null;
        __decorate([
            wd.require(function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i - 0] = arguments[_i];
                }
                wd.assert(!wd.JudgeUtils.isArray(args[0]), wd.Log.info.FUNC_MUST_BE("url", "string"));
            })
        ], JsLoader.prototype, "loadAsset", null);
        return JsLoader;
    }(wd.Loader));
    wd.JsLoader = JsLoader;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var VideoLoader = (function (_super) {
        __extends(VideoLoader, _super);
        function VideoLoader() {
            _super.apply(this, arguments);
        }
        VideoLoader.getInstance = function () {
            if (this._instance === null) {
                this._instance = new this();
            }
            return this._instance;
        };
        VideoLoader.prototype.loadAsset = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var urlArr = null;
            if (wd.JudgeUtils.isString(args[0])) {
                urlArr = [args[0]];
            }
            else {
                urlArr = args[0];
            }
            return wdFrp.fromPromise(new RSVP.Promise(function (resolve, reject) {
                wd.Video.create({
                    urlArr: urlArr,
                    onLoad: function (video) {
                        resolve(wd.VideoTextureAsset.create(video));
                    },
                    onError: function (err) {
                        reject(err);
                    }
                });
            }));
        };
        VideoLoader._instance = null;
        return VideoLoader;
    }(wd.Loader));
    wd.VideoLoader = VideoLoader;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var TextureLoader = (function (_super) {
        __extends(TextureLoader, _super);
        function TextureLoader() {
            _super.apply(this, arguments);
        }
        TextureLoader.getInstance = function () {
            if (this._instance === null) {
                this._instance = new this();
            }
            return this._instance;
        };
        TextureLoader.prototype.loadAsset = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var extname = null, stream = null, url = args[0];
            extname = wdCb.PathUtils.extname(url).toLowerCase();
            switch (extname) {
                case ".jpg":
                case ".jpeg":
                case ".gif":
                case ".bmp":
                    stream = wd.ImageLoader.load(url)
                        .map(function (image) {
                        var asset = wd.ImageTextureAsset.create(image);
                        asset.format = wd.ETextureFormat.RGB;
                        return asset;
                    });
                    break;
                case ".png":
                    stream = wd.ImageLoader.load(url)
                        .map(function (image) {
                        return wd.ImageTextureAsset.create(image);
                    });
                    break;
                case ".dds":
                    stream = wd.CompressedTextureLoader.load(url);
                    break;
                default:
                    wd.Log.error(true, wd.Log.info.FUNC_NOT_SUPPORT(extname));
                    break;
            }
            return stream;
        };
        TextureLoader._instance = null;
        __decorate([
            wd.require(function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i - 0] = arguments[_i];
                }
                wd.assert(!wd.JudgeUtils.isArray(args[0]), wd.Log.info.FUNC_MUST_BE("url", "string"));
            })
        ], TextureLoader.prototype, "loadAsset", null);
        return TextureLoader;
    }(wd.Loader));
    wd.TextureLoader = TextureLoader;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var ImageLoader = (function () {
        function ImageLoader() {
        }
        ImageLoader.load = function (url) {
            return wdFrp.fromPromise(new RSVP.Promise(function (resolve, reject) {
                var img = null;
                img = new wd.root.Image();
                img.onload = function () {
                    this.onload = null;
                    resolve(img);
                };
                img.onerror = function () {
                    reject("error");
                };
                img.src = url;
            }));
        };
        return ImageLoader;
    }());
    wd.ImageLoader = ImageLoader;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var AjaxLoader = (function () {
        function AjaxLoader() {
        }
        AjaxLoader.load = function (url, dataType) {
            return wdFrp.fromPromise(new RSVP.Promise(function (resolve, reject) {
                wdCb.AjaxUtils.ajax({
                    type: "get",
                    url: url,
                    contentType: "text/plain; charset=utf-8",
                    dataType: dataType,
                    success: function (data) {
                        resolve(data);
                    },
                    error: function (XMLHttpRequest, errorThrown) {
                        reject("url:" + url + "\nreadyState:" + XMLHttpRequest.readyState + "\nstatus:" + XMLHttpRequest.status + "\nmessage:" + errorThrown.message + "\nresponseText:" + XMLHttpRequest.responseText);
                    }
                });
            }));
        };
        return AjaxLoader;
    }());
    wd.AjaxLoader = AjaxLoader;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var ModelLoaderUtils = (function () {
        function ModelLoaderUtils() {
        }
        ModelLoaderUtils.getPath = function (filePath, mapUrl) {
            return wdCb.PathUtils.dirname(filePath) + "/" + mapUrl;
        };
        return ModelLoaderUtils;
    }());
    wd.ModelLoaderUtils = ModelLoaderUtils;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var CompressedTextureLoader = (function () {
        function CompressedTextureLoader() {
        }
        CompressedTextureLoader.load = function (url) {
            var _this = this;
            return wd.AjaxLoader.load(url, "arraybuffer")
                .map(function (data) {
                var texDatas = wd.DDSParser.parse(data, true), asset = wd.CompressedTextureAsset.create();
                asset.width = texDatas.width;
                asset.height = texDatas.height;
                asset.mipmaps = texDatas.mipmaps;
                if (texDatas.mipmapCount == 1) {
                    asset.minFilter = wd.ETextureFilterMode.LINEAR;
                }
                asset.format = _this._getCompressedFormat(texDatas.format);
                return asset;
            });
        };
        CompressedTextureLoader._getCompressedFormat = function (format) {
            var extension = wd.GPUDetector.getInstance().extensionCompressedTextureS3TC;
            if (format === wd.ETextureFormat.RGBA) {
                return format;
            }
            if (!extension) {
                return null;
            }
            switch (format) {
                case wd.ETextureFormat.RGB_S3TC_DXT1:
                    format = extension.COMPRESSED_RGB_S3TC_DXT1_EXT;
                    break;
                case wd.ETextureFormat.RGBA_S3TC_DXT1:
                    format = extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;
                    break;
                case wd.ETextureFormat.RGBA_S3TC_DXT3:
                    format = extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;
                    break;
                case wd.ETextureFormat.RGBA_S3TC_DXT5:
                    format = extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;
                    break;
            }
            return format;
        };
        return CompressedTextureLoader;
    }());
    wd.CompressedTextureLoader = CompressedTextureLoader;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var DDS_MAGIC = 0x20534444, DDSD_CAPS = 0x1, DDSD_HEIGHT = 0x2, DDSD_WIDTH = 0x4, DDSD_PITCH = 0x8, DDSD_PIXELFORMAT = 0x1000, DDSD_MIPMAPCOUNT = 0x20000, DDSD_LINEARSIZE = 0x80000, DDSD_DEPTH = 0x800000, DDSCAPS_COMPLEX = 0x8, DDSCAPS_MIPMAP = 0x400000, DDSCAPS_TEXTURE = 0x1000, DDSCAPS2_CUBEMAP = 0x200, DDSCAPS2_CUBEMAP_POSITIVEX = 0x400, DDSCAPS2_CUBEMAP_NEGATIVEX = 0x800, DDSCAPS2_CUBEMAP_POSITIVEY = 0x1000, DDSCAPS2_CUBEMAP_NEGATIVEY = 0x2000, DDSCAPS2_CUBEMAP_POSITIVEZ = 0x4000, DDSCAPS2_CUBEMAP_NEGATIVEZ = 0x8000, DDSCAPS2_VOLUME = 0x200000, DDPF_ALPHAPIXELS = 0x1, DDPF_ALPHA = 0x2, DDPF_FOURCC = 0x4, DDPF_RGB = 0x40, DDPF_YUV = 0x200, DDPF_LUMINANCE = 0x20000;
    var DDSParser = (function () {
        function DDSParser() {
        }
        DDSParser.parse = function (buffer, loadMipmaps) {
            if (loadMipmaps === void 0) { loadMipmaps = true; }
            var dds = new DDSData(), FOURCC_DXT1 = this._fourCCToInt32("DXT1"), FOURCC_DXT3 = this._fourCCToInt32("DXT3"), FOURCC_DXT5 = this._fourCCToInt32("DXT5"), headerLengthInt = 31, off_magic = 0, off_size = 1, off_flags = 2, off_height = 3, off_width = 4, off_mipmapCount = 7, off_pfFlags = 20, off_pfFourCC = 21, off_RGBBitCount = 22, off_RBitMask = 23, off_GBitMask = 24, off_BBitMask = 25, off_ABitMask = 26, off_caps = 27, off_caps2 = 28, off_caps3 = 29, off_caps4 = 30, header = new Int32Array(buffer, 0, headerLengthInt), blockBytes = null, fourCC = null, isRGBAUncompressed = null, dataOffset = null, width = null, height = null, faces = null;
            if (header[off_magic] !== DDS_MAGIC) {
                wd.Log.error(true, "Invalid magic number in DDS header.");
                return dds;
            }
            if ((!header[off_pfFlags]) & DDPF_FOURCC) {
                wd.Log.error(true, "Unsupported format, must contain a FourCC code.");
                return dds;
            }
            fourCC = header[off_pfFourCC];
            isRGBAUncompressed = false;
            switch (fourCC) {
                case FOURCC_DXT1:
                    blockBytes = 8;
                    dds.format = wd.ETextureFormat.RGB_S3TC_DXT1;
                    break;
                case FOURCC_DXT3:
                    blockBytes = 16;
                    dds.format = wd.ETextureFormat.RGBA_S3TC_DXT3;
                    break;
                case FOURCC_DXT5:
                    blockBytes = 16;
                    dds.format = wd.ETextureFormat.RGBA_S3TC_DXT5;
                    break;
                default:
                    if (header[off_RGBBitCount] == 32
                        && header[off_RBitMask] & 0xff0000
                        && header[off_GBitMask] & 0xff00
                        && header[off_BBitMask] & 0xff
                        && header[off_ABitMask] & 0xff000000) {
                        isRGBAUncompressed = true;
                        blockBytes = 64;
                        dds.format = wd.ETextureFormat.RGBA;
                    }
                    else {
                        wd.Log.error(true, "Unsupported FourCC code " + this._int32ToFourCC(fourCC));
                        return dds;
                    }
            }
            dds.mipmapCount = 1;
            if (header[off_flags] & DDSD_MIPMAPCOUNT && loadMipmaps !== false) {
                dds.mipmapCount = Math.max(1, header[off_mipmapCount]);
            }
            dds.isCubemap = header[off_caps2] & DDSCAPS2_CUBEMAP ? true : false;
            dds.width = header[off_width];
            dds.height = header[off_height];
            dataOffset = header[off_size] + 4;
            width = dds.width;
            height = dds.height;
            faces = dds.isCubemap ? 6 : 1;
            for (var face = 0; face < faces; face++) {
                for (var i = 0; i < dds.mipmapCount; i++) {
                    var mipmap = null, byteArray = null, dataLength = null;
                    if (isRGBAUncompressed) {
                        byteArray = this._loadARGBMip(buffer, dataOffset, width, height);
                        dataLength = byteArray.length;
                    }
                    else {
                        dataLength = Math.max(4, width) / 4 * Math.max(4, height) / 4 * blockBytes;
                        byteArray = new Uint8Array(buffer, dataOffset, dataLength);
                    }
                    mipmap = { "data": byteArray, "width": width, "height": height };
                    dds.mipmaps.addChild(mipmap);
                    dataOffset += dataLength;
                    width = Math.max(width * 0.5, 1);
                    height = Math.max(height * 0.5, 1);
                }
                width = dds.width;
                height = dds.height;
            }
            return dds;
        };
        DDSParser._fourCCToInt32 = function (value) {
            return value.charCodeAt(0) +
                (value.charCodeAt(1) << 8) +
                (value.charCodeAt(2) << 16) +
                (value.charCodeAt(3) << 24);
        };
        DDSParser._int32ToFourCC = function (value) {
            return String.fromCharCode(value & 0xff, (value >> 8) & 0xff, (value >> 16) & 0xff, (value >> 24) & 0xff);
        };
        DDSParser._loadARGBMip = function (buffer, dataOffset, width, height) {
            var dataLength = width * height * 4, srcBuffer = new Uint8Array(buffer, dataOffset, dataLength), byteArray = new Uint8Array(dataLength), dst = 0, src = 0;
            for (var y = 0; y < height; y++) {
                for (var x = 0; x < width; x++) {
                    var b = null, g = null, r = null, a = null;
                    b = srcBuffer[src];
                    src++;
                    g = srcBuffer[src];
                    src++;
                    r = srcBuffer[src];
                    src++;
                    a = srcBuffer[src];
                    src++;
                    byteArray[dst] = r;
                    dst++;
                    byteArray[dst] = g;
                    dst++;
                    byteArray[dst] = b;
                    dst++;
                    byteArray[dst] = a;
                    dst++;
                }
            }
            return byteArray;
        };
        return DDSParser;
    }());
    wd.DDSParser = DDSParser;
    var DDSData = (function () {
        function DDSData() {
            this.mipmaps = wdCb.Collection.create();
            this.width = 0;
            this.height = 0;
            this.format = null;
            this.mipmapCount = 1;
            this.isCubemap = false;
        }
        return DDSData;
    }());
    wd.DDSData = DDSData;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var TextureAsset = (function () {
        function TextureAsset() {
            this._width = null;
            this._height = null;
            this.generateMipmaps = true;
            this.sourceRegionMethod = wd.ETextureSourceRegionMethod.CHANGE_TEXCOORDS_IN_GLSL;
            this.format = wd.ETextureFormat.RGBA;
            this.source = TextureAsset.defaultTexture;
            this.repeatRegion = wd.RectRegion.create(0, 0, 1, 1);
            this.sourceRegion = null;
            this.sourceRegionMapping = wd.ETextureSourceRegionMapping.CANVAS;
            this.flipY = true;
            this.premultiplyAlpha = false;
            this.unpackAlignment = 4;
            this.wrapS = wd.ETextureWrapMode.CLAMP_TO_EDGE;
            this.wrapT = wd.ETextureWrapMode.CLAMP_TO_EDGE;
            this.magFilter = wd.ETextureFilterMode.LINEAR;
            this.minFilter = wd.ETextureFilterMode.LINEAR_MIPMAP_LINEAR;
            this.type = wd.ETextureType.UNSIGNED_BYTE;
            this.mipmaps = wdCb.Collection.create();
            this.anisotropy = 0;
            this.needUpdate = true;
        }
        Object.defineProperty(TextureAsset.prototype, "width", {
            get: function () {
                return this._width === null ? (this.source ? this.source.width : null) : this._width;
            },
            set: function (width) {
                this._width = width;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextureAsset.prototype, "height", {
            get: function () {
                return this._height === null ? (this.source ? this.source.height : null) : this._height;
            },
            set: function (height) {
                this._height = height;
            },
            enumerable: true,
            configurable: true
        });
        TextureAsset.prototype.copyToCubemapTexture = function (cubemapFaceTexture) {
            cubemapFaceTexture.generateMipmaps = this.generateMipmaps;
            cubemapFaceTexture.minFilter = this.minFilter;
            cubemapFaceTexture.magFilter = this.magFilter;
            cubemapFaceTexture.width = this.width;
            cubemapFaceTexture.height = this.height;
            cubemapFaceTexture.wrapS = this.wrapS;
            cubemapFaceTexture.wrapT = this.wrapT;
            cubemapFaceTexture.anisotropy = this.anisotropy;
            cubemapFaceTexture.premultiplyAlpha = this.premultiplyAlpha;
            cubemapFaceTexture.unpackAlignment = this.unpackAlignment;
            cubemapFaceTexture.needUpdate = this.needUpdate;
            cubemapFaceTexture.mode = wd.EEnvMapMode.BASIC;
        };
        TextureAsset.prototype.copyTo = function (texture) {
            wd.Log.error(!texture, wd.Log.info.FUNC_MUST_DEFINE("texture"));
            texture.source = this.source;
            texture.width = this.width;
            texture.height = this.height;
            texture.mipmaps = this.mipmaps.copy();
            texture.wrapS = this.wrapS;
            texture.wrapT = this.wrapT;
            texture.magFilter = this.magFilter;
            texture.minFilter = this.minFilter;
            texture.anisotropy = this.anisotropy;
            texture.format = this.format;
            texture.type = this.type;
            texture.repeatRegion = this.repeatRegion.copy();
            texture.sourceRegion = this.sourceRegion && this.sourceRegion.copy();
            texture.sourceRegionMapping = this.sourceRegionMapping;
            texture.sourceRegionMethod = this.sourceRegionMethod;
            texture.generateMipmaps = this.generateMipmaps;
            texture.premultiplyAlpha = this.premultiplyAlpha;
            texture.flipY = this.flipY;
            texture.unpackAlignment = this.unpackAlignment;
            texture.needUpdate = this.needUpdate;
            return texture;
        };
        TextureAsset.defaultTexture = null;
        return TextureAsset;
    }());
    wd.TextureAsset = TextureAsset;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var ImageTextureAsset = (function (_super) {
        __extends(ImageTextureAsset, _super);
        function ImageTextureAsset(source) {
            _super.call(this);
            this.source = source;
        }
        ImageTextureAsset.create = function (source) {
            var obj = new this(source);
            return obj;
        };
        ImageTextureAsset.prototype.toTexture = function () {
            return wd.ImageTexture.create(this);
        };
        ImageTextureAsset.prototype.toCubemapFaceTexture = function () {
            return wd.CubemapFaceImageTexture.create(this);
        };
        ImageTextureAsset.prototype.copyToCubemapFaceTexture = function (cubemapFaceTexture) {
            cubemapFaceTexture.source = this.source;
            cubemapFaceTexture.type = this.type;
            cubemapFaceTexture.format = this.format;
            cubemapFaceTexture.width = this.width;
            cubemapFaceTexture.height = this.height;
            cubemapFaceTexture.sourceRegion = this.sourceRegion;
            cubemapFaceTexture.sourceRegionMethod = wd.ETextureSourceRegionMethod.DRAW_IN_CANVAS;
        };
        return ImageTextureAsset;
    }(wd.TextureAsset));
    wd.ImageTextureAsset = ImageTextureAsset;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var VideoTextureAsset = (function (_super) {
        __extends(VideoTextureAsset, _super);
        function VideoTextureAsset(video) {
            _super.call(this);
            this.video = null;
            this.video = video;
            this.source = this.video.source;
        }
        VideoTextureAsset.create = function (video) {
            var obj = new this(video);
            obj.initWhenCreate();
            return obj;
        };
        VideoTextureAsset.prototype.initWhenCreate = function () {
            this.width = 0;
            this.height = 0;
            this.generateMipmaps = false;
            this.minFilter = null;
            this.magFilter = null;
            this.sourceRegion = null;
            this.sourceRegionMethod = null;
        };
        VideoTextureAsset.prototype.toTexture = function () {
            return wd.VideoTexture.create(this);
        };
        VideoTextureAsset.prototype.toCubemapFaceTexture = function () {
            return wd.Log.error(true, wd.Log.info.FUNC_NOT_SUPPORT("video texture", "cubemap"));
        };
        VideoTextureAsset.prototype.copyToCubemapFaceTexture = function (cubemapFaceTexture) {
            wd.Log.error(true, wd.Log.info.FUNC_NOT_SUPPORT("video texture", "cubemap"));
        };
        return VideoTextureAsset;
    }(wd.TextureAsset));
    wd.VideoTextureAsset = VideoTextureAsset;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var CompressedTextureAsset = (function (_super) {
        __extends(CompressedTextureAsset, _super);
        function CompressedTextureAsset() {
            _super.apply(this, arguments);
        }
        CompressedTextureAsset.create = function () {
            var obj = new this();
            obj.initWhenCreate();
            return obj;
        };
        CompressedTextureAsset.prototype.initWhenCreate = function () {
            this.generateMipmaps = false;
            this.flipY = false;
        };
        CompressedTextureAsset.prototype.toTexture = function () {
            return wd.CompressedTexture.create(this);
        };
        CompressedTextureAsset.prototype.toCubemapFaceTexture = function () {
            return wd.CubemapFaceCompressedTexture.create(this);
        };
        CompressedTextureAsset.prototype.copyToCubemapFaceTexture = function (cubemapFaceTexture) {
            cubemapFaceTexture.type = this.type;
            cubemapFaceTexture.format = this.format;
            cubemapFaceTexture.width = this.width;
            cubemapFaceTexture.height = this.height;
            cubemapFaceTexture.mipmaps = this.mipmaps;
            cubemapFaceTexture.minFilter = this.minFilter;
        };
        return CompressedTextureAsset;
    }(wd.TextureAsset));
    wd.CompressedTextureAsset = CompressedTextureAsset;
})(wd || (wd = {}));
var wd;
(function (wd) {
    (function (ETextureFilterMode) {
        ETextureFilterMode[ETextureFilterMode["NEAREST"] = "NEAREST"] = "NEAREST";
        ETextureFilterMode[ETextureFilterMode["NEAREST_MIPMAP_MEAREST"] = "NEAREST_MIPMAP_MEAREST"] = "NEAREST_MIPMAP_MEAREST";
        ETextureFilterMode[ETextureFilterMode["NEAREST_MIPMAP_LINEAR"] = "NEAREST_MIPMAP_LINEAR"] = "NEAREST_MIPMAP_LINEAR";
        ETextureFilterMode[ETextureFilterMode["LINEAR"] = "LINEAR"] = "LINEAR";
        ETextureFilterMode[ETextureFilterMode["LINEAR_MIPMAP_NEAREST"] = "LINEAR_MIPMAP_NEAREST"] = "LINEAR_MIPMAP_NEAREST";
        ETextureFilterMode[ETextureFilterMode["LINEAR_MIPMAP_LINEAR"] = "LINEAR_MIPMAP_LINEAR"] = "LINEAR_MIPMAP_LINEAR";
    })(wd.ETextureFilterMode || (wd.ETextureFilterMode = {}));
    var ETextureFilterMode = wd.ETextureFilterMode;
})(wd || (wd = {}));
var wd;
(function (wd) {
    (function (ETextureWrapMode) {
        ETextureWrapMode[ETextureWrapMode["REPEAT"] = "REPEAT"] = "REPEAT";
        ETextureWrapMode[ETextureWrapMode["MIRRORED_REPEAT"] = "MIRRORED_REPEAT"] = "MIRRORED_REPEAT";
        ETextureWrapMode[ETextureWrapMode["CLAMP_TO_EDGE"] = "CLAMP_TO_EDGE"] = "CLAMP_TO_EDGE";
    })(wd.ETextureWrapMode || (wd.ETextureWrapMode = {}));
    var ETextureWrapMode = wd.ETextureWrapMode;
})(wd || (wd = {}));
var wd;
(function (wd) {
    (function (ETextureFormat) {
        ETextureFormat[ETextureFormat["RGB"] = "RGB"] = "RGB";
        ETextureFormat[ETextureFormat["RGBA"] = "RGBA"] = "RGBA";
        ETextureFormat[ETextureFormat["ALPHA"] = "ALPHA"] = "ALPHA";
        ETextureFormat[ETextureFormat["LUMINANCE"] = "LUMINANCE"] = "LUMINANCE";
        ETextureFormat[ETextureFormat["LUMINANCE_ALPHA"] = "LUMINANCE_ALPHA"] = "LUMINANCE_ALPHA";
        ETextureFormat[ETextureFormat["RGB_S3TC_DXT1"] = "RGB_S3TC_DXT1"] = "RGB_S3TC_DXT1";
        ETextureFormat[ETextureFormat["RGBA_S3TC_DXT1"] = "RGBA_S3TC_DXT1"] = "RGBA_S3TC_DXT1";
        ETextureFormat[ETextureFormat["RGBA_S3TC_DXT3"] = "RGBA_S3TC_DXT3"] = "RGBA_S3TC_DXT3";
        ETextureFormat[ETextureFormat["RGBA_S3TC_DXT5"] = "RGBA_S3TC_DXT5"] = "RGBA_S3TC_DXT5";
    })(wd.ETextureFormat || (wd.ETextureFormat = {}));
    var ETextureFormat = wd.ETextureFormat;
})(wd || (wd = {}));
var wd;
(function (wd) {
    (function (ETextureType) {
        ETextureType[ETextureType["UNSIGNED_BYTE"] = "UNSIGNED_BYTE"] = "UNSIGNED_BYTE";
        ETextureType[ETextureType["UNSIGNED_SHORT_5_6_5"] = "UNSIGNED_SHORT_5_6_5"] = "UNSIGNED_SHORT_5_6_5";
        ETextureType[ETextureType["UNSIGNED_SHORT_4_4_4_4"] = "UNSIGNED_SHORT_4_4_4_4"] = "UNSIGNED_SHORT_4_4_4_4";
        ETextureType[ETextureType["UNSIGNED_SHORT_5_5_5_1"] = "UNSIGNED_SHORT_5_5_5_1"] = "UNSIGNED_SHORT_5_5_5_1";
    })(wd.ETextureType || (wd.ETextureType = {}));
    var ETextureType = wd.ETextureType;
})(wd || (wd = {}));
var wd;
(function (wd) {
    (function (EEnvMapMode) {
        EEnvMapMode[EEnvMapMode["BASIC"] = 0] = "BASIC";
        EEnvMapMode[EEnvMapMode["REFLECTION"] = 1] = "REFLECTION";
        EEnvMapMode[EEnvMapMode["REFRACTION"] = 2] = "REFRACTION";
        EEnvMapMode[EEnvMapMode["FRESNEL"] = 3] = "FRESNEL";
    })(wd.EEnvMapMode || (wd.EEnvMapMode = {}));
    var EEnvMapMode = wd.EEnvMapMode;
})(wd || (wd = {}));
var wd;
(function (wd) {
    (function (ETextureCombineMode) {
        ETextureCombineMode[ETextureCombineMode["MIX"] = 0] = "MIX";
        ETextureCombineMode[ETextureCombineMode["MULTIPLY"] = 1] = "MULTIPLY";
        ETextureCombineMode[ETextureCombineMode["ADD"] = 2] = "ADD";
    })(wd.ETextureCombineMode || (wd.ETextureCombineMode = {}));
    var ETextureCombineMode = wd.ETextureCombineMode;
})(wd || (wd = {}));
var wd;
(function (wd) {
    (function (ETextureSourceRegionMapping) {
        ETextureSourceRegionMapping[ETextureSourceRegionMapping["CANVAS"] = 0] = "CANVAS";
        ETextureSourceRegionMapping[ETextureSourceRegionMapping["UV"] = 1] = "UV";
    })(wd.ETextureSourceRegionMapping || (wd.ETextureSourceRegionMapping = {}));
    var ETextureSourceRegionMapping = wd.ETextureSourceRegionMapping;
})(wd || (wd = {}));
var wd;
(function (wd) {
    (function (ETextureSourceRegionMethod) {
        ETextureSourceRegionMethod[ETextureSourceRegionMethod["CHANGE_TEXCOORDS_IN_GLSL"] = 0] = "CHANGE_TEXCOORDS_IN_GLSL";
        ETextureSourceRegionMethod[ETextureSourceRegionMethod["DRAW_IN_CANVAS"] = 1] = "DRAW_IN_CANVAS";
    })(wd.ETextureSourceRegionMethod || (wd.ETextureSourceRegionMethod = {}));
    var ETextureSourceRegionMethod = wd.ETextureSourceRegionMethod;
})(wd || (wd = {}));
var wd;
(function (wd) {
    (function (ETextureTarget) {
        ETextureTarget[ETextureTarget["TEXTURE_2D"] = "TEXTURE_2D"] = "TEXTURE_2D";
        ETextureTarget[ETextureTarget["TEXTURE_CUBE_MAP"] = "TEXTURE_CUBE_MAP"] = "TEXTURE_CUBE_MAP";
    })(wd.ETextureTarget || (wd.ETextureTarget = {}));
    var ETextureTarget = wd.ETextureTarget;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var LoaderManager = (function () {
        function LoaderManager() {
            this.assetCount = 0;
            this.currentLoadedCount = 0;
            this._assetTable = wdCb.Hash.create();
        }
        LoaderManager.getInstance = function () {
            if (this._instance === null) {
                this._instance = new this();
            }
            return this._instance;
        };
        LoaderManager.prototype.load = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var self = this;
            if (wd.JudgeUtils.isString(args[0])) {
                var url = args[0], id = url;
                return this._createLoadSingleAssetStream(url, id);
            }
            else {
                var assetArr = args[0];
                return wdFrp.fromArray(assetArr).flatMap(function (asset) {
                    return self._createLoadMultiAssetStream(asset.type || wd.EAssetType.UNKNOW, asset.url, asset.id);
                });
            }
        };
        LoaderManager.prototype.reset = function () {
            this.assetCount = 0;
            this.currentLoadedCount = 0;
        };
        LoaderManager.prototype.dispose = function () {
            this.reset();
            wd.LoaderFactory.createAllLoader().forEach(function (loader) {
                loader.dispose();
            });
        };
        LoaderManager.prototype.get = function (id) {
            var loader = this._assetTable.getChild(id);
            return loader ? loader.get(id) : null;
        };
        LoaderManager.prototype._createLoadMultiAssetStream = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var type = args[0], url = args[1], id = args[2], loader = this._getLoader(type, url), stream = null, self = this;
            if (!loader.has(id)) {
                self.assetCount++;
            }
            return this._addToAssetTable(loader.load(url, id)
                .map(function (data) {
                self.currentLoadedCount++;
                return {
                    currentLoadedCount: self.currentLoadedCount,
                    assetCount: self.assetCount
                };
            }), id, loader);
        };
        LoaderManager.prototype._createLoadSingleAssetStream = function (url, id) {
            var loader = this._getLoader(wd.EAssetType.UNKNOW, url);
            return this._addToAssetTable(loader.load(url, id), id, loader);
        };
        LoaderManager.prototype._getLoader = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var type = args[0], extname = null;
            if (wd.JudgeUtils.isArray(args[1])) {
                extname = wdCb.PathUtils.extname(args[1][0]);
            }
            else {
                extname = wdCb.PathUtils.extname(args[1]);
            }
            return wd.LoaderFactory.create(type, extname.toLowerCase());
        };
        LoaderManager.prototype._addToAssetTable = function (loadStream, id, loader) {
            var self = this;
            return loadStream.do(null, null, function () {
                self._assetTable.addChild(id, loader);
            });
        };
        LoaderManager._instance = null;
        return LoaderManager;
    }());
    wd.LoaderManager = LoaderManager;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var LoaderFactory = (function () {
        function LoaderFactory() {
        }
        LoaderFactory.create = function (type, extname) {
            var loader = null;
            switch (type) {
                case wd.EAssetType.FONT:
                    loader = wd.FontLoader.getInstance();
                    break;
                case wd.EAssetType.UNKNOW:
                    loader = this._getLoaderByExtname(extname);
                    break;
                default:
                    wdCb.Log.error(true, wdCb.Log.info.FUNC_UNKNOW("asset type:" + type));
                    break;
            }
            return loader;
        };
        LoaderFactory.createAllLoader = function () {
            return wdCb.Collection.create([wd.JsLoader.getInstance(), wd.GLSLLoader.getInstance(), wd.TextureLoader.getInstance(), wd.VideoLoader.getInstance(), wd.FontLoader.getInstance(), wd.FntLoader.getInstance()]);
        };
        LoaderFactory._getLoaderByExtname = function (extname) {
            var loader = null;
            switch (extname) {
                case ".js":
                    loader = wd.JsLoader.getInstance();
                    break;
                case ".glsl":
                    loader = wd.GLSLLoader.getInstance();
                    break;
                case ".jpg":
                case ".jpeg":
                case ".png":
                case ".dds":
                case ".gif":
                case ".bmp":
                    loader = wd.TextureLoader.getInstance();
                    break;
                case ".mp4":
                case ".ogv":
                case ".webm":
                    loader = wd.VideoLoader.getInstance();
                    break;
                case ".gltf":
                    loader = wd.GLTFLoader.getInstance();
                    break;
                case ".wd":
                    loader = wd.WDLoader.getInstance();
                    break;
                case ".eot":
                case ".ttf":
                case ".woff":
                case ".svg":
                    loader = wd.FontLoader.getInstance();
                    break;
                case ".fnt":
                    loader = wd.FntLoader.getInstance();
                    break;
                default:
                    wd.Log.error(true, wd.Log.info.FUNC_UNKNOW("extname:" + extname));
                    break;
            }
            return loader;
        };
        return LoaderFactory;
    }());
    wd.LoaderFactory = LoaderFactory;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var GLTFLoader = (function (_super) {
        __extends(GLTFLoader, _super);
        function GLTFLoader() {
            _super.apply(this, arguments);
            this._gltfAssembler = wd.GLTFAssembler.create();
            this._gltfParser = wd.GLTFParser.create();
            this._arrayBufferMap = wdCb.Hash.create();
            this._imageMap = wdCb.Hash.create();
        }
        GLTFLoader.getInstance = function () {
            if (this._instance === null) {
                this._instance = new this();
            }
            return this._instance;
        };
        GLTFLoader.prototype.loadAsset = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var url = args[0], self = this, jsonData = null;
            return wd.AjaxLoader.load(url, "json")
                .flatMap(function (json) {
                jsonData = json;
                return self._createLoadAllAssetsStream(url, json);
            })
                .concat(wdFrp.callFunc(function () {
                return self._gltfAssembler.build(self._gltfParser.parse(jsonData, self._arrayBufferMap, self._imageMap));
            }));
        };
        GLTFLoader.prototype._createLoadAllAssetsStream = function (url, json) {
            return wdFrp.fromArray([
                this._createLoadBuffersStream(url, json),
                this._createLoadImageAssetStream(url, json)
            ])
                .mergeAll();
        };
        GLTFLoader.prototype._createLoadBuffersStream = function (filePath, json) {
            var arrayBufferMap = this._arrayBufferMap;
            return this._createLoadAssetStream(filePath, json, json.buffers, arrayBufferMap, function (id, url) {
                return wd.AjaxLoader.load(url, "arraybuffer")
                    .do(function (buffer) {
                    wd.Log.error(!(buffer instanceof ArrayBuffer), wd.Log.info.FUNC_SHOULD("Buffer:" + id, "be an array buffer"));
                    wd.Log.error(buffer.byteLength !== buffer.byteLength, wd.Log.info.FUNC_SHOULD("Buffer:" + id + "'s length is " + buffer.byteLength + ", but it", "be " + buffer.byteLength));
                    arrayBufferMap.addChild(id, buffer);
                });
            });
        };
        GLTFLoader.prototype._createLoadImageAssetStream = function (filePath, json) {
            var imageMap = this._imageMap;
            return this._createLoadAssetStream(filePath, json, json.images, imageMap, function (id, url) {
                return wd.ImageLoader.load(url)
                    .do(function (image) {
                    imageMap.addChild(id, image);
                });
            });
        };
        GLTFLoader.prototype._createLoadAssetStream = function (filePath, json, datas, dataMap, loadStreamFunc) {
            var streamArr = [];
            if (datas) {
                var id = null;
                for (id in datas) {
                    if (datas.hasOwnProperty(id)) {
                        var data = datas[id];
                        if (wd.GLTFUtils.isBase64(data.uri)) {
                            dataMap.addChild(id, wd.GLTFUtils.decodeArrayBuffer(data.uri));
                        }
                        else {
                            var url = wd.ModelLoaderUtils.getPath(filePath, data.uri);
                            streamArr.push(loadStreamFunc(id, url));
                        }
                    }
                }
            }
            return wdFrp.fromArray(streamArr).mergeAll();
        };
        GLTFLoader._instance = null;
        __decorate([
            wd.require(function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i - 0] = arguments[_i];
                }
                wd.assert(!wd.JudgeUtils.isArray(args[0]), wd.Log.info.FUNC_MUST_BE("url", "string"));
            })
        ], GLTFLoader.prototype, "loadAsset", null);
        return GLTFLoader;
    }(wd.Loader));
    wd.GLTFLoader = GLTFLoader;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var GLTFAssembler = (function () {
        function GLTFAssembler() {
            this._result = wdCb.Hash.create();
        }
        GLTFAssembler.create = function () {
            var obj = new this();
            return obj;
        };
        GLTFAssembler.prototype.build = function (parseData) {
            this._buildMetadata(parseData);
            this._buildModels(parseData);
            return this._result;
        };
        GLTFAssembler.prototype._buildMetadata = function (parseData) {
            var metadata = wdCb.Hash.create();
            for (var i in parseData.metadata) {
                if (parseData.metadata.hasOwnProperty(i)) {
                    metadata.addChild(i, parseData.metadata[i]);
                }
            }
            this._result.addChild("metadata", metadata);
        };
        GLTFAssembler.prototype._buildModels = function (parseData) {
            var models = wdCb.Collection.create(), self = this;
            var build = function (object) {
                var model = wd.GameObject.create();
                if (object.name) {
                    model.name = object.name;
                }
                if (self._isModelContainer(object)) {
                    model.addTag(wd.EWDTag.CONTAINER);
                }
                self._addComponents(model, object.components);
                model.addComponent(wd.MeshRenderer.create());
                if (object.children) {
                    object.children.forEach(function (child) {
                        model.addChild(build(child));
                    });
                }
                return model;
            };
            if (!parseData.objects) {
                return;
            }
            parseData.objects.forEach(function (object) {
                models.addChild(build(object));
            });
            this._result.addChild("models", models);
        };
        GLTFAssembler.prototype._isModelContainer = function (object) {
            return object.isContainer;
        };
        GLTFAssembler.prototype._addComponents = function (model, components) {
            var self = this;
            components.forEach(function (component) {
                if (self._isTransform(component)) {
                    model.transform = self._createTransform(component);
                }
                else if (self._isCamera(component)) {
                    model.addComponent(self._createCamera(component));
                }
                else if (self._isLight(component)) {
                    model.addComponent(self._createLight(component));
                }
                else if (self._isGeometry(component)) {
                    model.addComponent(self._createGeometry(component));
                }
                else if (self._isArticulatedAnimation(component)) {
                    model.addComponent(self._createArticulatedAnimation(component));
                }
            });
        };
        GLTFAssembler.prototype._isTransform = function (component) {
            return !!component.matrix || !!component.position;
        };
        GLTFAssembler.prototype._isCamera = function (component) {
            return !!component.camera;
        };
        GLTFAssembler.prototype._isLight = function (component) {
            return !!component.lightColor && !!component.type;
        };
        GLTFAssembler.prototype._isGeometry = function (component) {
            return !!component.material;
        };
        GLTFAssembler.prototype._isArticulatedAnimation = function (component) {
            return wd.GLTFUtils.isIGLTFArticulatedAnimation(component);
        };
        GLTFAssembler.prototype._createTransform = function (component) {
            var transform = wd.ThreeDTransform.create();
            if (component.matrix) {
                transform.position = component.matrix.getTranslation();
                transform.rotation = component.matrix.getRotation();
                transform.scale = component.matrix.getScale();
            }
            else {
                transform.position = component.position;
                transform.rotation = component.rotation;
                transform.scale = component.scale;
            }
            return transform;
        };
        GLTFAssembler.prototype._createCamera = function (component) {
            return wd.BasicCameraController.create(component.camera);
        };
        GLTFAssembler.prototype._createLight = function (component) {
            var light = null;
            switch (component.type) {
                case "ambient":
                    light = wd.AmbientLight.create();
                    light.color = component.lightColor;
                    break;
                case "directional":
                    light = wd.DirectionLight.create();
                    light.color = component.lightColor;
                    break;
                case "point":
                    light = wd.PointLight.create();
                    light.color = component.lightColor;
                    wd.GLTFUtils.addData(light, "range", component.distance);
                    wd.GLTFUtils.addData(light, "constant", component.constantAttenuation);
                    wd.GLTFUtils.addData(light, "linear", component.linearAttenuation);
                    wd.GLTFUtils.addData(light, "quadratic", component.quadraticAttenuation);
                    break;
                default:
                    break;
            }
            return light;
        };
        GLTFAssembler.prototype._createGeometry = function (component) {
            var geometry = wd.ModelGeometry.create();
            geometry.vertices = component.vertices;
            geometry.faces = component.faces;
            wd.GLTFUtils.addData(geometry, "colors", component.colors);
            wd.GLTFUtils.addData(geometry, "texCoords", component.texCoords);
            geometry.drawMode = component.drawMode;
            geometry.material = this._createMaterial(component.material);
            return geometry;
        };
        GLTFAssembler.prototype._createMaterial = function (materialData) {
            var material = null;
            switch (materialData.type) {
                case "BasicMaterial":
                    material = this._createBasicMaterial(materialData);
                    break;
                case "LightMaterial":
                    material = this._createLightMaterial(materialData);
                    break;
                default:
                    wd.Log.error(true, wd.Log.info.FUNC_UNEXPECT("material type:" + materialData.type));
                    break;
            }
            return material;
        };
        GLTFAssembler.prototype._createBasicMaterial = function (materialData) {
            var material = wd.BasicMaterial.create();
            this._setBasicDataOfMaterial(material, materialData);
            return material;
        };
        GLTFAssembler.prototype._createLightMaterial = function (materialData) {
            var material = wd.LightMaterial.create();
            this._setBasicDataOfMaterial(material, materialData);
            if (!!materialData.transparent && materialData.transparent === true && materialData.opacity) {
                material.opacity = materialData.opacity;
            }
            if (materialData.lightModel === wd.ELightModel.LAMBERT) {
                wd.Log.log(wd.Log.info.FUNC_NOT_SUPPORT("LAMBERT light model, use PHONG light model instead"));
                material.lightModel = wd.ELightModel.PHONG;
            }
            else {
                material.lightModel = materialData.lightModel;
            }
            wd.GLTFUtils.addData(material, "color", materialData.diffuseColor);
            wd.GLTFUtils.addData(material, "specularColor", materialData.specularColor);
            wd.GLTFUtils.addData(material, "emissionColor", materialData.emissionColor);
            wd.GLTFUtils.addData(material, "diffuseMap", materialData.diffuseMap);
            wd.GLTFUtils.addData(material, "specularMap", materialData.specularMap);
            wd.GLTFUtils.addData(material, "emissionMap", materialData.emissionMap);
            wd.GLTFUtils.addData(material, "shininess", materialData.shininess);
            return material;
        };
        GLTFAssembler.prototype._setBasicDataOfMaterial = function (material, materialData) {
            if (!!materialData.doubleSided && materialData.doubleSided === true) {
                material.side = wd.ESide.BOTH;
            }
            else {
                material.side = wd.ESide.FRONT;
            }
        };
        GLTFAssembler.prototype._createArticulatedAnimation = function (component) {
            var anim = wd.ArticulatedAnimation.create();
            anim.data = wdCb.Hash.create(component);
            return anim;
        };
        return GLTFAssembler;
    }());
    wd.GLTFAssembler = GLTFAssembler;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var GLTFParser = (function () {
        function GLTFParser() {
            this._data = {};
            this._arrayBufferMap = null;
            this._imageMap = null;
            this._json = null;
            this._geometryParser = wd.GLTFGeometryParser.create();
            this._articulatedAnimationParser = wd.GLTFArticulatedAnimationParser.create();
        }
        GLTFParser.create = function () {
            var obj = new this();
            return obj;
        };
        GLTFParser.prototype.parse = function (json, arrayBufferMap, imageMap) {
            this._json = json;
            this._arrayBufferMap = arrayBufferMap;
            this._imageMap = imageMap;
            if (json.asset) {
                this._parseMetadata();
            }
            this._parseObjects();
            if (json.animations) {
                this._articulatedAnimationParser.parse(json, this._data.objects, this._arrayBufferMap);
            }
            return this._data;
        };
        GLTFParser.prototype._parseMetadata = function () {
            var metadata = {}, json = this._json;
            for (var i in json.asset) {
                if (json.asset.hasOwnProperty(i)) {
                    metadata[i] = json.asset[i];
                }
            }
            this._data.metadata = metadata;
        };
        GLTFParser.prototype._parseObjects = function () {
            var self = this, json = this._json, objects = wdCb.Collection.create();
            var parse = function (nodeId, node) {
                var object = wd.GLTFUtils.createObjectData();
                object.id = nodeId;
                if (node.name) {
                    object.name = node.name;
                }
                if (node.meshes && node.meshes.length > 0) {
                    var mesh = null;
                    if (node.meshes.length > 1) {
                        wd.Log.warn(wd.Log.info.FUNC_NOT_SUPPORT("multi mesh(geometry), just use the first mesh(geometry)"));
                    }
                    mesh = json.meshes[node.meshes[0]];
                    if (!node.name && mesh.name) {
                        object.name = mesh.name;
                    }
                    self._geometryParser.parse(json, object, mesh, self._arrayBufferMap, self._imageMap);
                }
                if (node.extensions) {
                    if (node.extensions["KHR_materials_common"] && node.extensions["KHR_materials_common"].light) {
                        object.components.addChild(self._parseLight(node.extensions["KHR_materials_common"].light));
                    }
                }
                if (node.camera) {
                    object.components.addChild(self._parseCamera(node.camera));
                }
                if (node.matrix) {
                    object.components.addChild(self._parseTransform(node.matrix));
                }
                else if (node.rotation && node.scale && node.translation) {
                    object.components.addChild(self._parseTransform(node.translation, node.rotation, node.scale));
                }
                if (node.children) {
                    for (var _i = 0, _a = node.children; _i < _a.length; _i++) {
                        var childId = _a[_i];
                        object.children.addChild(parse(childId, json.nodes[childId]));
                    }
                }
                return object;
            };
            if (!json.scenes[json.scene]) {
                this._data.objects = objects;
                return;
            }
            for (var _i = 0, _a = json.scenes[json.scene].nodes; _i < _a.length; _i++) {
                var nodeId = _a[_i];
                objects.addChild(parse(nodeId, json.nodes[nodeId]));
            }
            this._data.objects = objects;
        };
        GLTFParser.prototype._parseLight = function (lightId) {
            var lightData = this._json.extensions["KHR_materials_common"].lights[lightId], light = {};
            wd.GLTFUtils.addData(light, "type", lightData.type);
            this._parseLightDataByType(light, lightData, light.type);
            return light;
        };
        GLTFParser.prototype._parseLightDataByType = function (light, lightData, type) {
            var data = lightData[type];
            switch (type) {
                case "ambient":
                case "directional":
                    light.lightColor = wd.GLTFUtils.getColor(data.color);
                    break;
                case "point":
                    light.lightColor = wd.GLTFUtils.getColor(data.color);
                    wd.GLTFUtils.addData(light, "distance", data.distance);
                    wd.GLTFUtils.addData(light, "constantAttenuation", data.constantAttenuation);
                    wd.GLTFUtils.addData(light, "linearAttenuation", data.linearAttenuation);
                    wd.GLTFUtils.addData(light, "quadraticAttenuation", data.quadraticAttenuation);
                    break;
                default:
                    break;
            }
        };
        GLTFParser.prototype._parseCamera = function (cameraId) {
            var cameraData = this._json.cameras[cameraId], camera = {};
            this._parseCameraDataByType(camera, cameraData);
            return camera;
        };
        GLTFParser.prototype._parseCameraDataByType = function (camera, cameraData) {
            var cameraComponent = null, type = cameraData.type, data = cameraData[type];
            switch (type) {
                case "perspective":
                    data = cameraData[type];
                    cameraComponent = wd.PerspectiveCamera.create();
                    cameraComponent.near = data.znear;
                    cameraComponent.far = data.zfar;
                    if (data.aspectRatio) {
                        cameraComponent.aspect = data.aspectRatio;
                    }
                    else {
                        var view = wd.DeviceManager.getInstance().view;
                        cameraComponent.aspect = view.width / view.height;
                    }
                    cameraComponent.fovy = data.yfov;
                    camera.camera = cameraComponent;
                    break;
                case "orthographic":
                    cameraComponent = wd.OrthographicCamera.create();
                    cameraComponent.near = data.znear;
                    cameraComponent.far = data.zfar;
                    cameraComponent.left = -data.xmag;
                    cameraComponent.right = data.xmag;
                    cameraComponent.top = data.ymag;
                    cameraComponent.bottom = -data.ymag;
                    camera.camera = cameraComponent;
                    break;
                default:
                    wd.Log.error(true, wd.Log.info.FUNC_UNEXPECT("camera type:" + type));
                    break;
            }
        };
        GLTFParser.prototype._parseTransform = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var transform = {};
            if (args.length === 1) {
                var matrix = args[0];
                transform.matrix = wd.Matrix4.create(new Float32Array(matrix));
            }
            else if (args.length === 3) {
                var translation = args[0], rotation = args[1], scale = args[2];
                transform.position = wd.Vector3.create(translation[0], translation[1], translation[2]);
                transform.rotation = wd.Quaternion.create(rotation[0], rotation[1], rotation[2], rotation[3]);
                transform.scale = wd.Vector3.create(scale[0], scale[1], scale[2]);
            }
            return transform;
        };
        __decorate([
            wd.require(function (lightId) {
                var lights = this._json.extensions["KHR_materials_common"].lights;
                wd.assert(lights && lights[lightId], wd.Log.info.FUNC_NOT_EXIST("lightId:" + lightId));
            })
        ], GLTFParser.prototype, "_parseLight", null);
        __decorate([
            wd.require(function (cameraId) {
                var cameras = this._json.cameras;
                wd.assert(cameras && cameras[cameraId], wd.Log.info.FUNC_NOT_EXIST("cameraId:" + cameraId));
            })
        ], GLTFParser.prototype, "_parseCamera", null);
        return GLTFParser;
    }());
    wd.GLTFParser = GLTFParser;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var GLTFGeometryParser = (function () {
        function GLTFGeometryParser() {
            this._arrayBufferMap = null;
            this._imageMap = null;
            this._json = null;
            this._materialParser = wd.GLTFMaterialParser.create();
        }
        GLTFGeometryParser.create = function () {
            var obj = new this();
            return obj;
        };
        GLTFGeometryParser.prototype.parse = function (json, object, mesh, arrayBufferMap, imageMap) {
            this._json = json;
            this._arrayBufferMap = arrayBufferMap;
            this._imageMap = imageMap;
            if (mesh.primitives.length > 1) {
                for (var _i = 0, _a = mesh.primitives; _i < _a.length; _i++) {
                    var primitive = _a[_i];
                    var childObject = wd.GLTFUtils.createObjectData();
                    this._setChildObjectNameWithMultiPrimitives(childObject, primitive);
                    childObject.components.addChild(this._parseGeometry(primitive));
                    object.children.addChild(childObject);
                }
                object.isContainer = true;
            }
            else if (mesh.primitives.length === 1) {
                object.components.addChild(this._parseGeometry(mesh.primitives[0]));
            }
            else {
            }
        };
        GLTFGeometryParser.prototype._setChildObjectNameWithMultiPrimitives = function (object, primitive) {
            object.name = primitive.material;
        };
        GLTFGeometryParser.prototype._parseGeometry = function (primitive) {
            var json = this._json, arrayBufferMap = this._arrayBufferMap, accessor = null, bufferArr = null, geometry = {}, vertices = null, texCoords = null, colors = null, normals = null, faces = null;
            for (var semantic in primitive.attributes) {
                if (primitive.attributes.hasOwnProperty(semantic)) {
                    var attribute = primitive.attributes[semantic];
                    accessor = json.accessors[attribute];
                    bufferArr = wd.GLTFUtils.getBufferArrFromAccessor(json, accessor, arrayBufferMap);
                    if (semantic === "POSITION") {
                        vertices = [];
                        this._addGeometryData(vertices, bufferArr);
                    }
                    else if (semantic.indexOf("TEXCOORD_") > -1) {
                        texCoords = [];
                        this._addGeometryData(texCoords, bufferArr);
                        this._normalizeTexCoords(texCoords);
                    }
                    else if (semantic === "NORMAL") {
                        normals = [];
                        for (var _i = 0, bufferArr_1 = bufferArr; _i < bufferArr_1.length; _i++) {
                            var data = bufferArr_1[_i];
                            normals.push(data);
                        }
                    }
                    else if (semantic === "COLOR") {
                        colors = [];
                        this._addGeometryData(colors, bufferArr);
                    }
                }
            }
            faces = this._getFaces(json, primitive.indices, normals);
            wd.GLTFUtils.addData(geometry, "vertices", vertices);
            wd.GLTFUtils.addData(geometry, "colors", colors);
            wd.GLTFUtils.addData(geometry, "texCoords", texCoords);
            wd.GLTFUtils.addData(geometry, "faces", faces);
            wd.GLTFUtils.addData(geometry, "drawMode", this._parseDrawMode(primitive.mode));
            geometry.material = this._materialParser.parse(json, primitive.material, this._imageMap);
            return geometry;
        };
        GLTFGeometryParser.prototype._addGeometryData = function (geometryData, sourceData) {
            for (var i = 0, len = sourceData.length; i < len; i++) {
                geometryData.push(sourceData[i]);
            }
        };
        GLTFGeometryParser.prototype._getFaces = function (json, indices, normals) {
            var accessor = null, bufferArr = null, face = null, faces = [];
            if (!indices) {
                return [];
            }
            accessor = json.accessors[indices];
            bufferArr = wd.GLTFUtils.getBufferArrFromAccessor(json, accessor, this._arrayBufferMap);
            for (var i = 0, len = bufferArr.length; i < len; i += 3) {
                var aIndex = bufferArr[i], bIndex = bufferArr[i + 1], cIndex = bufferArr[i + 2], verticeIndiceArr = [aIndex, bIndex, cIndex];
                face = wd.Face3.create(aIndex, bIndex, cIndex);
                if (wd.GeometryUtils.hasData(normals)) {
                    this._addNormalData(face.vertexNormals, normals, verticeIndiceArr);
                }
                faces.push(face);
            }
            return faces;
        };
        GLTFGeometryParser.prototype._addNormalData = function (targetNormals, sourceNormals, normalIndiceArr) {
            var aIndex = normalIndiceArr[0], bIndex = normalIndiceArr[1], cIndex = normalIndiceArr[2];
            targetNormals.addChildren([
                this._getThreeComponentData(sourceNormals, aIndex),
                this._getThreeComponentData(sourceNormals, bIndex),
                this._getThreeComponentData(sourceNormals, cIndex)
            ]);
        };
        GLTFGeometryParser.prototype._getThreeComponentData = function (sourceData, index) {
            var startIndex = 3 * index;
            return wd.Vector3.create(sourceData[startIndex], sourceData[startIndex + 1], sourceData[startIndex + 2]);
        };
        GLTFGeometryParser.prototype._parseDrawMode = function (mode) {
            var drawMode = null;
            if (!mode) {
                return null;
            }
            switch (mode) {
                case 0:
                    drawMode = wd.EDrawMode.POINTS;
                    break;
                case 1:
                    drawMode = wd.EDrawMode.LINES;
                    break;
                case 2:
                    drawMode = wd.EDrawMode.LINE_LOOP;
                    break;
                case 3:
                    drawMode = wd.EDrawMode.LINE_STRIP;
                    break;
                case 4:
                    drawMode = wd.EDrawMode.TRIANGLES;
                    break;
                case 5:
                    drawMode = wd.EDrawMode.TRIANGLE_STRIP;
                    break;
                case 6:
                    drawMode = wd.EDrawMode.TRANGLE_FAN;
                    break;
                default:
                    wd.Log.error(true, wd.Log.info.FUNC_UNEXPECT("mode:" + mode));
                    break;
            }
            return drawMode;
        };
        GLTFGeometryParser.prototype._normalizeTexCoords = function (texCoords) {
            if (!texCoords) {
                return;
            }
            for (var i = 0, len = texCoords.length / 2; i < len; i++) {
                texCoords[i * 2 + 1] = 1.0 - texCoords[i * 2 + 1];
            }
        };
        __decorate([
            wd.require(function (json, indices, normals) {
                var accessor = null, bufferArr = null;
                if (!indices) {
                    return [];
                }
                accessor = json.accessors[indices];
                bufferArr = wd.GLTFUtils.getBufferArrFromAccessor(json, accessor, this._arrayBufferMap);
                wd.assert(bufferArr.length % 3 === 0, wd.Log.info.FUNC_SHOULD("indices' count", "3 times"));
            })
        ], GLTFGeometryParser.prototype, "_getFaces", null);
        return GLTFGeometryParser;
    }());
    wd.GLTFGeometryParser = GLTFGeometryParser;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var GLTFMaterialParser = (function () {
        function GLTFMaterialParser() {
            this._imageMap = null;
            this._json = null;
        }
        GLTFMaterialParser.create = function () {
            var obj = new this();
            return obj;
        };
        GLTFMaterialParser.prototype.parse = function (json, materialId, imageMap) {
            var materialData = null, materialExtension = null;
            this._json = json;
            this._imageMap = imageMap;
            if (!this._isUseKHRMaterialExtension()) {
                wd.Log.log("no KHR_materials_common extension found, will use default material instead");
                var material_1 = {
                    type: "BasicMaterial",
                    doubleSided: false
                };
                return material_1;
            }
            var material = {};
            materialData = json.materials[materialId];
            wd.Log.error(!materialData.extensions || !materialData.extensions.KHR_materials_common, wd.Log.info.FUNC_SHOULD("materials", "define KHR_materials_common extensions"));
            materialExtension = materialData.extensions.KHR_materials_common;
            wd.GLTFUtils.addData(material, "doubleSided", materialExtension.doubleSided);
            wd.GLTFUtils.addData(material, "transparent", materialExtension.transparent);
            wd.GLTFUtils.addData(material, "opacity", materialExtension.transparency);
            material.type = this._getMaterialType(materialExtension.technique);
            material.lightModel = this._getLightModel(materialExtension.technique);
            this._addMaterialExtensionValues(material, materialExtension.values);
            return material;
        };
        GLTFMaterialParser.prototype._isUseKHRMaterialExtension = function () {
            var extensionsUsed = this._json.extensionsUsed;
            if (!extensionsUsed) {
                return false;
            }
            return extensionsUsed.indexOf("KHR_materials_common") > -1;
        };
        GLTFMaterialParser.prototype._getMaterialType = function (technique) {
            var type = null;
            switch (technique) {
                case "PHONG":
                case "BLINN":
                case "CONSTANT":
                case "LAMBERT":
                    type = "LightMaterial";
                    break;
                default:
                    wd.Log.error(true, wd.Log.info.FUNC_UNEXPECT("technique:" + technique));
                    break;
            }
            return type;
        };
        GLTFMaterialParser.prototype._getLightModel = function (technique) {
            var model = null;
            switch (technique) {
                case "PHONG":
                    model = wd.ELightModel.PHONG;
                    break;
                case "BLINN":
                    model = wd.ELightModel.BLINN;
                    break;
                case "CONSTANT":
                    model = wd.ELightModel.CONSTANT;
                    break;
                case "LAMBERT":
                    model = wd.ELightModel.LAMBERT;
                    break;
                default:
                    wd.Log.error(true, wd.Log.info.FUNC_UNEXPECT("technique:" + technique));
                    break;
            }
            return model;
        };
        GLTFMaterialParser.prototype._addMaterialExtensionValues = function (material, values) {
            if (!values) {
                return;
            }
            if (values.ambient) {
                wd.Log.warn(wd.Log.info.FUNC_NOT_SUPPORT("ambient of material"));
            }
            this._addMaterialLightColor(material, "diffuse", values.diffuse);
            this._addMaterialLightColor(material, "specular", values.specular);
            this._addMaterialLightColor(material, "emission", values.emission);
            if (values.shininess) {
                material.shininess = values.shininess.value;
            }
        };
        GLTFMaterialParser.prototype._addMaterialLightColor = function (material, colorName, colorData) {
            if (!colorData) {
                return;
            }
            if (wd.JudgeUtils.isArray(colorData)) {
                material[(colorName + "Color")] = wd.GLTFUtils.getColor(colorData);
            }
            else {
                if (this._isColor(colorData.type)) {
                    material[(colorName + "Color")] = wd.GLTFUtils.getColor(colorData.value);
                }
                else {
                    material[(colorName + "Map")] = this._getTexture(colorData.value);
                }
            }
        };
        GLTFMaterialParser.prototype._isColor = function (type) {
            return Number(type) === 35666;
        };
        GLTFMaterialParser.prototype._getTexture = function (textureId) {
            var texture = null, asset = null;
            if (!this._json.textures || !this._json.textures[textureId]) {
                return null;
            }
            texture = this._json.textures[textureId];
            asset = this._createTextureAsset(texture.target, texture.source);
            if (texture.internalFormat !== texture.format) {
                wd.Log.warn("texture.internalFormat(" + texture.internalFormat + ") !== texture.format(" + texture.format + "), here take texture.format value as their value");
            }
            if (texture.format) {
                asset.format = this._getTextureFormat(texture.format);
            }
            if (texture.type) {
                asset.type = this._getTextureType(texture.type);
            }
            this._addTextureSampler(asset, texture.sampler);
            return asset.toTexture();
        };
        GLTFMaterialParser.prototype._createTextureAsset = function (target, imageId) {
            var asset = null, source = this._imageMap.getChild(imageId);
            if (!source) {
                wd.Log.warn("no image found in loader(id:" + imageId + ")");
            }
            switch (target) {
                case 3553:
                    asset = wd.ImageTextureAsset.create(source);
                    break;
                default:
                    wd.Log.error(true, wd.Log.info.FUNC_NOT_SUPPORT("target except TEXTURE_2D"));
                    break;
            }
            return asset;
        };
        GLTFMaterialParser.prototype._getTextureType = function (type) {
            var textureType = null;
            switch (type) {
                case 5121:
                    textureType = wd.ETextureType.UNSIGNED_BYTE;
                    break;
                case 33635:
                    textureType = wd.ETextureType.UNSIGNED_SHORT_5_6_5;
                    break;
                case 32819:
                    textureType = wd.ETextureType.UNSIGNED_SHORT_4_4_4_4;
                    break;
                case 32820:
                    textureType = wd.ETextureType.UNSIGNED_SHORT_5_5_5_1;
                    break;
                default:
                    wd.Log.error(true, wd.Log.info.FUNC_UNEXPECT("texture->type:" + type));
                    break;
            }
            return textureType;
        };
        GLTFMaterialParser.prototype._getTextureFormat = function (format) {
            var textureFormat = null;
            switch (format) {
                case 6406:
                    textureFormat = wd.ETextureFormat.ALPHA;
                    break;
                case 6407:
                    textureFormat = wd.ETextureFormat.RGB;
                    break;
                case 6408:
                    textureFormat = wd.ETextureFormat.RGBA;
                    break;
                case 6409:
                    textureFormat = wd.ETextureFormat.LUMINANCE;
                    break;
                case 6410:
                    textureFormat = wd.ETextureFormat.LUMINANCE_ALPHA;
                    break;
                default:
                    wd.Log.error(true, wd.Log.info.FUNC_UNEXPECT("texture->format:" + format));
                    break;
            }
            return textureFormat;
        };
        GLTFMaterialParser.prototype._addTextureSampler = function (asset, samplerId) {
            var sampler = this._json.samplers[samplerId];
            asset.wrapT = this._getTextureWrap(sampler.wrapT);
            asset.wrapS = this._getTextureWrap(sampler.wrapS);
            asset.minFilter = this._getTextureFilter(sampler.minFilter);
            asset.magFilter = this._getTextureFilter(sampler.magFilter);
        };
        GLTFMaterialParser.prototype._getTextureFilter = function (filter) {
            var textureFilter = null;
            switch (filter) {
                case 9728:
                    textureFilter = wd.ETextureFilterMode.NEAREST;
                    break;
                case 9729:
                    textureFilter = wd.ETextureFilterMode.LINEAR;
                    break;
                case 9984:
                    textureFilter = wd.ETextureFilterMode.NEAREST_MIPMAP_MEAREST;
                    break;
                case 9985:
                    textureFilter = wd.ETextureFilterMode.LINEAR_MIPMAP_NEAREST;
                    break;
                case 9986:
                    textureFilter = wd.ETextureFilterMode.NEAREST_MIPMAP_LINEAR;
                    break;
                case 9987:
                    textureFilter = wd.ETextureFilterMode.LINEAR_MIPMAP_LINEAR;
                    break;
                default:
                    wd.Log.error(true, wd.Log.info.FUNC_UNEXPECT("texture filter:" + filter));
                    break;
            }
            return textureFilter;
        };
        GLTFMaterialParser.prototype._getTextureWrap = function (wrap) {
            var textureWrap = null;
            switch (wrap) {
                case 33071:
                    textureWrap = wd.ETextureWrapMode.CLAMP_TO_EDGE;
                    break;
                case 33648:
                    textureWrap = wd.ETextureWrapMode.MIRRORED_REPEAT;
                    break;
                case 10497:
                    textureWrap = wd.ETextureWrapMode.REPEAT;
                    break;
                default:
                    wd.Log.error(true, wd.Log.info.FUNC_UNEXPECT("texture wrap:" + wrap));
                    break;
            }
            return textureWrap;
        };
        __decorate([
            wd.require(function (asset, samplerId) {
                wd.assert(!!this._json.samplers[samplerId], wd.Log.info.FUNC_NOT_EXIST("samplerId:" + samplerId));
            })
        ], GLTFMaterialParser.prototype, "_addTextureSampler", null);
        return GLTFMaterialParser;
    }());
    wd.GLTFMaterialParser = GLTFMaterialParser;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var GLTFArticulatedAnimationParser = (function () {
        function GLTFArticulatedAnimationParser() {
            this._arrayBufferMap = null;
            this._json = null;
            this._arrayOffset = null;
        }
        GLTFArticulatedAnimationParser.create = function () {
            var obj = new this();
            return obj;
        };
        GLTFArticulatedAnimationParser.prototype.parse = function (json, objects, arrayBufferMap) {
            var nodeWithAnimationMap = wdCb.Hash.create();
            this._json = json;
            this._arrayBufferMap = arrayBufferMap;
            for (var animName in json.animations) {
                if (json.animations.hasOwnProperty(animName)) {
                    var animation = json.animations[animName], keyFrameDataList = wdCb.Collection.create();
                    for (var i = 0, len = animation.channels.length; i < len; i++) {
                        var channel = animation.channels[i], sampler = animation.samplers[channel.sampler], targetId = null, targetNode = null;
                        if (!sampler) {
                            continue;
                        }
                        targetId = channel.target.id;
                        targetNode = this._findNode(objects, targetId);
                        if (targetNode === null) {
                            wd.Log.warn("can't find node whose id is " + targetId + " to attach to animation named " + animName);
                            continue;
                        }
                        this._addAnimationToNode(nodeWithAnimationMap, targetId, targetNode, animName, keyFrameDataList);
                        this._addKeyFrameDatas(keyFrameDataList, channel, animation, sampler);
                    }
                }
            }
            this._addAnimationComponent(nodeWithAnimationMap);
        };
        GLTFArticulatedAnimationParser.prototype._addAnimationToNode = function (nodeWithAnimationMap, targetId, targetNode, animName, keyFrameDataList) {
            if (!nodeWithAnimationMap.hasChild(targetId)) {
                nodeWithAnimationMap.addChild(targetId, {
                    node: targetNode,
                    animationData: {}
                });
            }
            nodeWithAnimationMap.getChild(targetId).animationData[animName] = keyFrameDataList;
        };
        GLTFArticulatedAnimationParser.prototype._addKeyFrameDatas = function (keyFrameDataList, channel, animation, sampler) {
            var targetPath = channel.target.path, json = this._json, arrayBufferMap = this._arrayBufferMap, inputData = animation.parameters[sampler.input], bufferInput = wd.GLTFUtils.getBufferArrFromAccessor(json, json.accessors[inputData], arrayBufferMap);
            this._arrayOffset = 0;
            for (var j = 0; j < bufferInput.length; j++) {
                var keyFrameData = {};
                keyFrameData.time = this._convertSecondToMillisecond(bufferInput[j]);
                keyFrameData.interpolationMethod = this._convertTointerpolationMethod(sampler.interpolation);
                keyFrameData.targets = this._getKeyFrameDataTargets(targetPath, animation, sampler);
                keyFrameDataList.addChild(keyFrameData);
            }
        };
        GLTFArticulatedAnimationParser.prototype._getKeyFrameDataTargets = function (targetPath, animation, sampler) {
            var targets = wdCb.Collection.create(), outputData = animation.parameters[sampler.output], bufferOutput = wd.GLTFUtils.getBufferArrFromAccessor(this._json, this._json.accessors[outputData], this._arrayBufferMap);
            switch (targetPath) {
                case "translation":
                    targets.addChild({
                        target: wd.EArticulatedAnimationTarget.TRANSLATION,
                        data: wd.Vector3.create(bufferOutput[this._arrayOffset], bufferOutput[this._arrayOffset + 1], bufferOutput[this._arrayOffset + 2])
                    });
                    this._arrayOffset += 3;
                    break;
                case "rotation":
                    targets.addChild({
                        target: wd.EArticulatedAnimationTarget.ROTATION,
                        data: wd.Quaternion.create(bufferOutput[this._arrayOffset], bufferOutput[this._arrayOffset + 1], bufferOutput[this._arrayOffset + 2], bufferOutput[this._arrayOffset + 3])
                    });
                    this._arrayOffset += 4;
                    break;
                case "scale":
                    targets.addChild({
                        target: wd.EArticulatedAnimationTarget.SCALE,
                        data: wd.Vector3.create(bufferOutput[this._arrayOffset], bufferOutput[this._arrayOffset + 1], bufferOutput[this._arrayOffset + 2])
                    });
                    this._arrayOffset += 3;
                    break;
                default:
                    wd.Log.error(true, wd.Log.info.FUNC_NOT_SUPPORT("path:" + targetPath));
                    break;
            }
            return targets;
        };
        GLTFArticulatedAnimationParser.prototype._findNode = function (objects, targetId) {
            var find = function (objects) {
                var result = objects.findOne(function (object) {
                    return object.id === targetId;
                });
                if (result) {
                    return result;
                }
                objects.forEach(function (object) {
                    result = find(object.children);
                    if (result) {
                        return wdCb.$BREAK;
                    }
                });
                return result;
            };
            return find(objects);
        };
        GLTFArticulatedAnimationParser.prototype._addAnimationComponent = function (nodeWithAnimationMap) {
            nodeWithAnimationMap.forEach(function (_a) {
                var node = _a.node, animationData = _a.animationData;
                node.components.addChild(animationData);
            });
        };
        GLTFArticulatedAnimationParser.prototype._convertSecondToMillisecond = function (time) {
            return 1000 * time;
        };
        GLTFArticulatedAnimationParser.prototype._convertTointerpolationMethod = function (jsonInterpolation) {
            switch (jsonInterpolation) {
                case "LINEAR":
                    return wd.EKeyFrameInterpolation.LINEAR;
                default:
                    wd.Log.error(true, wd.Log.info.FUNC_NOT_SUPPORT("interpolation:" + jsonInterpolation));
                    break;
            }
        };
        __decorate([
            wd.ensure(function (returnVal, nodeWithAnimationMap) {
                nodeWithAnimationMap.forEach(function (_a) {
                    var node = _a.node, animationData = _a.animationData;
                    wd.assert(node.components.filter(function (component) {
                        return wd.GLTFUtils.isIGLTFArticulatedAnimation(component);
                    }).getCount() <= 1, wd.Log.info.FUNC_SHOULD("node", "only has 1 IGLTFArticulatedAnimation component"));
                });
            })
        ], GLTFArticulatedAnimationParser.prototype, "_addAnimationComponent", null);
        return GLTFArticulatedAnimationParser;
    }());
    wd.GLTFArticulatedAnimationParser = GLTFArticulatedAnimationParser;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var GLTFUtils = (function () {
        function GLTFUtils() {
        }
        GLTFUtils.addData = function (target, sourceName, sourceData) {
            if (sourceData !== undefined && sourceData !== null) {
                target[sourceName] = sourceData;
            }
        };
        GLTFUtils.isBase64 = function (uri) {
            return uri.length < 5 ? false : uri.substr(0, 5) === "data:";
        };
        GLTFUtils.decodeArrayBuffer = function (base64Str) {
            var base64 = base64Str.split(',')[1], decodedString = atob(base64), bufferLength = decodedString.length, arraybuffer = new Uint8Array(new ArrayBuffer(bufferLength));
            for (var i = 0; i < bufferLength; i++) {
                arraybuffer[i] = decodedString.charCodeAt(i);
            }
            return arraybuffer.buffer;
        };
        GLTFUtils.createObjectData = function () {
            return {
                id: null,
                isContainer: false,
                components: wdCb.Collection.create(),
                children: wdCb.Collection.create()
            };
        };
        GLTFUtils.getColor = function (value) {
            var color = wd.Color.create();
            color.r = Number(value[0]);
            color.g = Number(value[1]);
            color.b = Number(value[2]);
            if (value.length === 4) {
                color.a = Number(value[3]);
            }
            return color;
        };
        GLTFUtils.getBufferArrFromAccessor = function (json, accessor, arrayBufferMap) {
            var bufferView = json.bufferViews[accessor.bufferView], arrayBuffer = arrayBufferMap.getChild(bufferView.buffer), byteOffset = accessor.byteOffset + bufferView.byteOffset, count = accessor.count * this.getAccessorTypeSize(accessor);
            switch (accessor.componentType) {
                case 5120:
                    return new Int8Array(arrayBuffer, byteOffset, count);
                case 5121:
                    return new Uint8Array(arrayBuffer, byteOffset, count);
                case 5122:
                    return new Int16Array(arrayBuffer, byteOffset, count);
                case 5123:
                    return new Uint16Array(arrayBuffer, byteOffset, count);
                case 5126:
                    return new Float32Array(arrayBuffer, byteOffset, count);
                default:
                    wd.Log.error(true, wd.Log.info.FUNC_UNEXPECT("componentType:" + accessor.componentType));
                    break;
            }
        };
        GLTFUtils.getAccessorTypeSize = function (accessor) {
            var type = accessor.type;
            switch (type) {
                case "VEC2":
                    return 2;
                case "VEC3":
                    return 3;
                case "VEC4":
                    return 4;
                case "MAT2":
                    return 4;
                case "MAT3":
                    return 9;
                case "MAT4":
                    return 16;
                default:
                    return 1;
            }
        };
        GLTFUtils.isIGLTFArticulatedAnimation = function (component) {
            if (!wd.JudgeUtils.isDirectObject(component)) {
                return false;
            }
            for (var animName in component) {
                return component[animName] instanceof wdCb.Collection && component[animName].getCount() > 0 && component[animName].getChild(0).time !== void 0;
            }
        };
        return GLTFUtils;
    }());
    wd.GLTFUtils = GLTFUtils;
})(wd || (wd = {}));
var wd;
(function (wd) {
    (function (EWDTag) {
        EWDTag[EWDTag["CONTAINER"] = "CONTAINER"] = "CONTAINER";
    })(wd.EWDTag || (wd.EWDTag = {}));
    var EWDTag = wd.EWDTag;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var WDLoader = (function (_super) {
        __extends(WDLoader, _super);
        function WDLoader() {
            _super.apply(this, arguments);
            this._wdParser = wd.WDParser.create();
            this._wdBuilder = wd.WDBuilder.create();
            this._parseData = null;
        }
        WDLoader.getInstance = function () {
            if (this._instance === null) {
                this._instance = new this();
            }
            return this._instance;
        };
        WDLoader.prototype.loadAsset = function () {
            var _this = this;
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var url = args[0], self = this;
            return wd.AjaxLoader.load(url, "json")
                .flatMap(function (json) {
                self._parseData = self._wdParser.parse(json);
                return _this._createLoadMapStream(url);
            })
                .concat(wdFrp.callFunc(function () {
                return self._wdBuilder.build(self._parseData);
            }));
        };
        WDLoader.prototype._createLoadMapStream = function (filePath) {
            var streamArr = [], parseData = this._parseData, i = null;
            parseData.materials.forEach(function (material) {
                var mapUrlArr = [];
                if (material.diffuseMapUrl) {
                    mapUrlArr.push(["diffuseMap", material.diffuseMapUrl]);
                }
                if (material.specularMapUrl) {
                    mapUrlArr.push(["specularMap", material.specularMapUrl]);
                }
                if (material.normalMapUrl) {
                    mapUrlArr.push(["normalMap", material.normalMapUrl]);
                }
                streamArr.push(wdFrp.fromArray(mapUrlArr)
                    .flatMap(function (_a) {
                    var type = _a[0], mapUrl = _a[1];
                    return wd.TextureLoader.getInstance().load(wd.ModelLoaderUtils.getPath(filePath, mapUrl))
                        .do(function (asset) {
                        material[type] = asset.toTexture();
                    }, null, null);
                }));
            });
            return wdFrp.fromArray(streamArr).mergeAll();
        };
        WDLoader._instance = null;
        __decorate([
            wd.require(function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i - 0] = arguments[_i];
                }
                wd.assert(!wd.JudgeUtils.isArray(args[0]), wd.Log.info.FUNC_MUST_BE("url", "string"));
            })
        ], WDLoader.prototype, "loadAsset", null);
        return WDLoader;
    }(wd.Loader));
    wd.WDLoader = WDLoader;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var WDParser = (function () {
        function WDParser() {
            this._data = {};
            this._objectParser = wd.WDObjectParser.create();
        }
        WDParser.create = function () {
            var obj = new this();
            return obj;
        };
        WDParser.prototype.parse = function (json) {
            this._parseMetadata(json);
            this._parseScene(json);
            this._parseMaterial(json);
            this._parseObject(json);
            return this._data;
        };
        WDParser.prototype._parseMetadata = function (json) {
            this._data.metadata = json.metadata;
        };
        WDParser.prototype._parseObject = function (json) {
            this._objectParser.parse(this._data, json);
        };
        WDParser.prototype._parseScene = function (json) {
            this._data.scene = json.scene;
            if (json.scene.ambientColor) {
                this._data.scene.ambientColor = this._createColor(json.scene.ambientColor);
            }
        };
        WDParser.prototype._parseMaterial = function (json) {
            var _this = this;
            this._data.materials = wdCb.Hash.create(json.materials);
            this._data.materials.forEach(function (material) {
                if (material.diffuseColor) {
                    material.diffuseColor = _this._createColor(material.diffuseColor);
                }
                if (material.specularColor) {
                    material.specularColor = _this._createColor(material.specularColor);
                }
            });
        };
        WDParser.prototype._createColor = function (colorArr) {
            return wd.Color.create("rgb(" + colorArr.join(",").replace(/^(\d+),/g, "$1.0,").replace(/,(\d+),/g, ",$1.0,").replace(/,(\d+)$/g, ",$1.0") + ")");
        };
        return WDParser;
    }());
    wd.WDParser = WDParser;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var WDObjectParser = (function () {
        function WDObjectParser() {
        }
        WDObjectParser.create = function () {
            var obj = new this();
            return obj;
        };
        WDObjectParser.prototype.parse = function (data, json) {
            var parse = null, self = this;
            data.objects = wdCb.Collection.create(json.objects);
            parse = function (object) {
                if (self._isObjectContainer(object)) {
                    object.isContainer = true;
                }
                else {
                    object.isContainer = false;
                    self._parseFromIndices(object);
                }
                if (object.children) {
                    object.children = wdCb.Collection.create(object.children);
                    object.children.forEach(function (child) {
                        child.parent = object;
                        parse(child);
                    });
                }
            };
            data.objects.forEach(function (object) {
                object.parent = null;
                parse(object);
                self._removeObjectContainerData(object);
            });
        };
        WDObjectParser.prototype._isObjectContainer = function (object) {
            return !wd.GeometryUtils.hasData(object.verticeIndices);
        };
        WDObjectParser.prototype._parseFromIndices = function (object) {
            this._duplicateVertexWithDifferentUvs(object);
            this._parseObjectFromIndices(object);
            this._removeRebundantIndiceData(object);
        };
        WDObjectParser.prototype._duplicateVertexWithDifferentUvs = function (object) {
            var arr = [], container = wdCb.Hash.create(), verticeIndices = object.verticeIndices, uvIndices = object.uvIndices;
            if (!wd.GeometryUtils.hasData(uvIndices)) {
                return;
            }
            for (var i = 0, len = verticeIndices.length; i < len; i++) {
                var verticeIndex = verticeIndices[i];
                if (this._isSameVertexWithDifferentUvsByCompareToFirstOne(arr, uvIndices[i], verticeIndex)) {
                    if (this._isUvIndiceEqualTheOneOfAddedVertex(container, verticeIndex, uvIndices[i])) {
                        verticeIndices[i] = this._getVerticeIndexOfAddedVertexByFindContainer(container, verticeIndex, uvIndices[i]);
                    }
                    else {
                        this._addVertexData(object, container, verticeIndex, i);
                    }
                    verticeIndex = verticeIndices[i];
                }
                arr[verticeIndex] = uvIndices[i];
            }
        };
        WDObjectParser.prototype._isSameVertexWithDifferentUvsByCompareToFirstOne = function (arr, uvIndex, verticeIndex) {
            return arr[verticeIndex] !== void 0 && arr[verticeIndex] !== uvIndex;
        };
        WDObjectParser.prototype._addVertexData = function (object, container, verticeIndex, index) {
            var verticeIndices = object.verticeIndices, uvIndices = object.uvIndices, normalIndices = object.normalIndices, vertices = this._findData(object, "vertices"), normals = this._findData(object, "normals"), morphTargets = this._findData(object, "morphTargets"), verticeIndexOfAddedVertex = null;
            this._addThreeComponent(vertices, verticeIndex);
            verticeIndexOfAddedVertex = this._getVerticeIndexOfAddedVertex(vertices);
            verticeIndices[index] = verticeIndexOfAddedVertex;
            if (wd.GeometryUtils.hasData(morphTargets)) {
                for (var _i = 0, morphTargets_1 = morphTargets; _i < morphTargets_1.length; _i++) {
                    var frame = morphTargets_1[_i];
                    this._addThreeComponent(frame.vertices, verticeIndex);
                    if (wd.GeometryUtils.hasData(frame.normals)) {
                        this._addDuplicateNormalOfAddedVertex(frame.normals, normalIndices, index, verticeIndex);
                    }
                }
            }
            if (wd.GeometryUtils.hasData(normals)) {
                this._addDuplicateNormalOfAddedVertex(normals, normalIndices, index, verticeIndex);
                if (wd.GeometryUtils.hasData(normalIndices)) {
                    normalIndices[index] = verticeIndexOfAddedVertex;
                }
            }
            container.appendChild(String(verticeIndex), [uvIndices[index], verticeIndexOfAddedVertex]);
        };
        WDObjectParser.prototype._addDuplicateNormalOfAddedVertex = function (normals, normalIndices, index, oldVerticeIndex) {
            if (!wd.GeometryUtils.hasData(normalIndices)) {
                this._addThreeComponent(normals, normals, oldVerticeIndex);
                return;
            }
            this._addThreeComponent(normals, normals, normalIndices[index]);
        };
        WDObjectParser.prototype._isUvIndiceEqualTheOneOfAddedVertex = function (container, targetVerticeIndex, targetUvIndex) {
            var data = container.getChild(String(targetVerticeIndex));
            if (!data) {
                return false;
            }
            return data.hasChild(function (_a) {
                var uvIndex = _a[0], verticeIndex = _a[1];
                return uvIndex === targetUvIndex;
            });
        };
        WDObjectParser.prototype._getVerticeIndexOfAddedVertexByFindContainer = function (container, targetVerticeIndex, targetUvIndex) {
            var data = container.getChild(String(targetVerticeIndex));
            return data.findOne(function (_a) {
                var uvIndex = _a[0], verticeIndex = _a[1];
                return uvIndex === targetUvIndex;
            })[1];
        };
        WDObjectParser.prototype._getVerticeIndexOfAddedVertex = function (vertices) {
            return vertices.length / 3 - 1;
        };
        WDObjectParser.prototype._addThreeComponent = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            if (args.length === 2) {
                var data = args[0], index = args[1];
                data.push(data[index * 3], data[index * 3 + 1], data[index * 3 + 2]);
            }
            else {
                var targetData = args[0], sourceData = args[1], index = args[2];
                targetData.push(sourceData[index * 3], sourceData[index * 3 + 1], sourceData[index * 3 + 2]);
            }
        };
        WDObjectParser.prototype._parseObjectFromIndices = function (object) {
            var vertices = [], uvs = [], faces = [], face = null, colors = [], objectVertices = this._findData(object, "vertices"), objectUVs = this._findData(object, "uvs"), objectNormals = this._findData(object, "normals"), objectColors = this._findData(object, "colors");
            for (var i = 0, len = object.verticeIndices.length; i < len; i += 3) {
                var aIndex = object.verticeIndices[i], bIndex = object.verticeIndices[i + 1], cIndex = object.verticeIndices[i + 2], indexArr = [i, i + 1, i + 2], verticeIndiceArr = [aIndex, bIndex, cIndex];
                face = wd.Face3.create(aIndex, bIndex, cIndex);
                if (wd.GeometryUtils.hasData(object.uvIndices) && wd.GeometryUtils.hasData(objectUVs)) {
                    this._setUV(uvs, objectUVs, object.uvIndices, indexArr, verticeIndiceArr);
                }
                if (wd.GeometryUtils.hasData(objectNormals)) {
                    this._setNormal(face.vertexNormals, objectNormals, object.normalIndices, indexArr, verticeIndiceArr);
                }
                faces.push(face);
            }
            object.vertices = objectVertices;
            if (!wd.GeometryUtils.hasData(object.uvIndices)) {
                object.uvs = objectUVs;
            }
            else {
                object.uvs = uvs;
            }
            object.colors = objectColors;
            object.faces = faces;
            this._setMorphTargets(object, object.verticeIndices, object.normalIndices);
        };
        WDObjectParser.prototype._getAnimName = function (frameName) {
            var PATTERN = /([a-z]+)_?(\d+)/, DEFAULT_ANIM_NAME = "default";
            var parts = frameName.match(PATTERN);
            return parts && parts.length > 1 ? parts[1] : DEFAULT_ANIM_NAME;
        };
        WDObjectParser.prototype._removeRebundantIndiceData = function (object) {
            delete object.verticeIndices;
            delete object.uvIndices;
            delete object.normalIndices;
        };
        WDObjectParser.prototype._removeObjectContainerData = function (object) {
            var remove = null;
            remove = function (object) {
                if (object.isContainer) {
                    delete object.vertices;
                    delete object.uvs;
                    delete object.colors;
                }
                if (object.children) {
                    object.children.forEach(function (child) {
                        remove(child);
                    });
                }
            };
            remove(object);
        };
        WDObjectParser.prototype._findData = function (object, dataName) {
            var data = null;
            do {
                data = object[dataName];
            } while (!data && (object = object.parent) !== null);
            return data;
        };
        WDObjectParser.prototype._setUV = function (targetUVs, sourceUVs, uvIndices, indexArr, verticeIndiceArr) {
            var uvIndice1 = null, uvIndice2 = null, uvIndice3 = null, index1 = indexArr[0], index2 = indexArr[1], index3 = indexArr[2], aIndex = verticeIndiceArr[0], bIndex = verticeIndiceArr[1], cIndex = verticeIndiceArr[2];
            uvIndice1 = uvIndices[index1];
            uvIndice2 = uvIndices[index2];
            uvIndice3 = uvIndices[index3];
            this._setTwoComponentData(targetUVs, sourceUVs, aIndex, uvIndice1);
            this._setTwoComponentData(targetUVs, sourceUVs, bIndex, uvIndice2);
            this._setTwoComponentData(targetUVs, sourceUVs, cIndex, uvIndice3);
        };
        WDObjectParser.prototype._setTwoComponentData = function (targetData, sourceData, index, indice) {
            targetData[index * 2] = sourceData[indice * 2];
            targetData[index * 2 + 1] = sourceData[indice * 2 + 1];
        };
        WDObjectParser.prototype._setThreeComponentData = function (targetData, sourceData, index, indice) {
            targetData[index * 3] = sourceData[indice * 3];
            targetData[index * 3 + 1] = sourceData[indice * 3 + 1];
            targetData[index * 3 + 2] = sourceData[indice * 3 + 2];
        };
        WDObjectParser.prototype._getThreeComponentData = function (sourceData, index) {
            var startIndex = 3 * index;
            return wd.Vector3.create(sourceData[startIndex], sourceData[startIndex + 1], sourceData[startIndex + 2]);
        };
        WDObjectParser.prototype._setNormal = function (targetNormals, sourceNormals, normalIndices, indexArr, verticeIndiceArr) {
            var index1 = indexArr[0], index2 = indexArr[1], index3 = indexArr[2];
            if (!wd.GeometryUtils.hasData(normalIndices)) {
                this._addNormalData(targetNormals, sourceNormals, verticeIndiceArr);
                return;
            }
            this._addNormalData(targetNormals, sourceNormals, [normalIndices[index1], normalIndices[index2], normalIndices[index3]]);
        };
        WDObjectParser.prototype._addNormalData = function (targetNormals, sourceNormals, normalIndiceArr) {
            var aIndex = normalIndiceArr[0], bIndex = normalIndiceArr[1], cIndex = normalIndiceArr[2];
            if (targetNormals instanceof wdCb.Collection) {
                targetNormals.addChildren([
                    this._getThreeComponentData(sourceNormals, aIndex),
                    this._getThreeComponentData(sourceNormals, bIndex),
                    this._getThreeComponentData(sourceNormals, cIndex)
                ]);
            }
            else {
                var normals = targetNormals;
                for (var _i = 0, _a = [this._getThreeComponentData(sourceNormals, aIndex), this._getThreeComponentData(sourceNormals, bIndex), this._getThreeComponentData(sourceNormals, cIndex)]; _i < _a.length; _i++) {
                    var v = _a[_i];
                    normals.push(v.x, v.y, v.z);
                }
            }
        };
        WDObjectParser.prototype._setMorphTargets = function (object, verticeIndices, normalIndices) {
            var objectMorphTargets = this._findData(object, "morphTargets"), morphTargets = null, morphNormals = null;
            if (wd.GeometryUtils.hasData(objectMorphTargets)) {
                morphTargets = wdCb.Hash.create();
                morphNormals = wdCb.Hash.create();
                for (var _i = 0, objectMorphTargets_1 = objectMorphTargets; _i < objectMorphTargets_1.length; _i++) {
                    var frameData = objectMorphTargets_1[_i];
                    var animName = this._getAnimName(frameData.name);
                    morphTargets.appendChild(animName, frameData.vertices);
                    if (wd.GeometryUtils.hasData(frameData.normals)) {
                        if (wd.GeometryUtils.hasData(normalIndices)) {
                            var normals = [];
                            for (var i = 0, len = verticeIndices.length; i < len; i++) {
                                this._setThreeComponentData(normals, frameData.normals, verticeIndices[i], normalIndices[i]);
                            }
                            morphNormals.appendChild(animName, normals);
                        }
                        else {
                            morphNormals.appendChild(animName, frameData.normals);
                        }
                    }
                }
            }
            object.morphTargets = morphTargets;
            object.morphNormals = morphNormals;
        };
        __decorate([
            wd.require(function (container, targetVerticeIndex, targetUvIndex) {
                wd.assert(this._isUvIndiceEqualTheOneOfAddedVertex(container, targetVerticeIndex, targetUvIndex), wd.Log.info.FUNC_SHOULD("uvIndex", "equal the one of added vertex"));
            })
        ], WDObjectParser.prototype, "_getVerticeIndexOfAddedVertexByFindContainer", null);
        __decorate([
            wd.ensure(function (returnValue, object) {
                wd.assert(!object.verticeIndices, wd.Log.info.FUNC_SHOULD("object.verticeIndices", "be removed"));
                wd.assert(!object.uvIndices, wd.Log.info.FUNC_SHOULD("object.uvIndices", "be removed"));
                wd.assert(!object.normalIndices, wd.Log.info.FUNC_SHOULD("object.normalIndices", "be removed"));
            })
        ], WDObjectParser.prototype, "_removeRebundantIndiceData", null);
        return WDObjectParser;
    }());
    wd.WDObjectParser = WDObjectParser;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var WDBuilder = (function () {
        function WDBuilder() {
            this._result = wdCb.Hash.create();
        }
        WDBuilder.create = function () {
            var obj = new this();
            return obj;
        };
        WDBuilder.prototype.build = function (parseData) {
            this._buildMetadata(parseData);
            this._buildScene(parseData);
            this._buildModels(parseData);
            return this._result;
        };
        WDBuilder.prototype._buildMetadata = function (parseData) {
            var metadata = wdCb.Hash.create();
            for (var i in parseData.metadata) {
                if (parseData.metadata.hasOwnProperty(i)) {
                    metadata.addChild(i, parseData.metadata[i]);
                }
            }
            this._result.addChild("metadata", metadata);
        };
        WDBuilder.prototype._buildScene = function (parseData) {
            var scene = wdCb.Hash.create();
            if (parseData.scene.ambientColor) {
                scene.addChild("ambientColor", parseData.scene.ambientColor);
            }
            this._result.addChild("scene", scene);
        };
        WDBuilder.prototype._buildModels = function (parseData) {
            var models = wdCb.Collection.create(), self = this, build = null;
            build = function (objects, models) {
                objects.forEach(function (object) {
                    var geometry = null, model = null;
                    model = wd.GameObject.create();
                    if (self._isModelContainer(object)) {
                        model.addTag(wd.EWDTag.CONTAINER);
                    }
                    else {
                        geometry = wd.ModelGeometry.create();
                        geometry.vertices = object.vertices;
                        geometry.faces = object.faces;
                        geometry.texCoords = object.uvs;
                        geometry.colors = object.colors;
                        if (object.material) {
                            geometry.material = self._buildMaterial(object.material, parseData.materials);
                        }
                        geometry.morphTargets = object.morphTargets;
                        geometry.morphFaceNormals = object.morphNormals;
                        geometry.morphVertexNormals = object.morphNormals;
                        if (wd.GeometryUtils.hasData(geometry.morphTargets)) {
                            model.addComponent(wd.MorphAnimation.create());
                        }
                        model.addComponent(geometry);
                    }
                    model.name = object.name;
                    model.addComponent(wd.MeshRenderer.create());
                    models.addChild(model);
                    if (object.children) {
                        build(object.children, model);
                    }
                });
            };
            build(parseData.objects, models);
            this._result.addChild("models", models);
        };
        WDBuilder.prototype._isModelContainer = function (object) {
            return object.isContainer;
        };
        WDBuilder.prototype._buildMaterial = function (materialName, materials) {
            var DEFAULTYPE = "LightMaterial";
            var materialData = null, type = null, material = null;
            _a = materials.findOne(function (material, name) {
                return name === materialName;
            }), materialData = _a[1];
            type = materialData.type || DEFAULTYPE;
            wdCb.Log.error(!wd[type], wdCb.Log.info.FUNC_NOT_EXIST("materialClass:" + type));
            material = wd[type].create();
            material.name = materialName;
            if (materialData.diffuseColor) {
                material.color = materialData.diffuseColor;
            }
            if (materialData.specularColor) {
                material.specularColor = materialData.specularColor;
            }
            if (materialData.diffuseMap) {
                material.diffuseMap = materialData.diffuseMap;
            }
            if (materialData.specularMap) {
                material.specularMap = materialData.specularMap;
            }
            if (materialData.normalMap) {
                material.normalMap = materialData.normalMap;
            }
            if (materialData.shininess !== null) {
                material.shininess = materialData.shininess;
            }
            if (materialData.opacity !== null) {
                material.opacity = materialData.opacity;
            }
            return material;
            var _a;
        };
        return WDBuilder;
    }());
    wd.WDBuilder = WDBuilder;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var TYPE = {
        ".eot": "embedded-opentype",
        ".ttf": "truetype",
        ".woff": "woff",
        ".svg": "svg"
    };
    var FontLoader = (function (_super) {
        __extends(FontLoader, _super);
        function FontLoader() {
            _super.apply(this, arguments);
            this._familyName = null;
        }
        FontLoader.getInstance = function () {
            if (this._instance === null) {
                this._instance = new this();
            }
            return this._instance;
        };
        FontLoader.prototype.dispose = function () {
            _super.prototype.dispose.call(this);
            wdCb.DomQuery.create("#" + this._familyName).remove();
        };
        FontLoader.prototype.loadAsset = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var familyName = args[1], self = this;
            this._familyName = familyName;
            return wdFrp.fromPromise(new RSVP.Promise(function (resolve, reject) {
                self._addStyleElement(args, familyName);
                if (document.fonts) {
                    document.fonts.load("1em " + familyName).then(function () {
                        resolve();
                    }, function (e) {
                        reject(e);
                    });
                }
                else {
                    wd.Log.warn("your browser not support document.fonts api, so it can't ensure that the font is loaded");
                    resolve();
                }
            }));
        };
        FontLoader.prototype._getType = function (url) {
            return TYPE[wdCb.PathUtils.extname(url).toLowerCase()];
        };
        FontLoader.prototype._addStyleElement = function (args, familyName) {
            var fontStyleEle = wdCb.DomQuery.create("<style id=\"" + familyName + "\"></style>"), fontStr = null;
            fontStyleEle.prependTo("body");
            fontStr = "@font-face { font-family:" + familyName + "; src:";
            if (wd.JudgeUtils.isArray(args[0])) {
                var urlArr = args[0];
                for (var _i = 0, urlArr_1 = urlArr; _i < urlArr_1.length; _i++) {
                    var url = urlArr_1[_i];
                    fontStr += "url('" + url + "') format('" + this._getType(url) + "'),";
                }
                fontStr = fontStr.replace(/,$/, ";");
            }
            else {
                var url = args[0];
                fontStr += "url('" + url + "') format('" + this._getType(url) + "');";
            }
            fontStyleEle.get(0).textContent += fontStr + "};";
        };
        FontLoader._instance = null;
        __decorate([
            wd.require(function (url) {
                var extname = wdCb.PathUtils.extname(url).toLowerCase();
                wd.assert(!!TYPE[extname], wd.Log.info.FUNC_UNKNOW("type:" + extname));
            })
        ], FontLoader.prototype, "_getType", null);
        return FontLoader;
    }(wd.Loader));
    wd.FontLoader = FontLoader;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var COMMON_EXP = /common [^\n]*(\n|$)/gi, PAGE_EXP = /page [^\n]*(\n|$)/gi, CHAR_EXP = /char [^\n]*(\n|$)/gi, ITEM_EXP = /\w+=[^ \r\n]+/gi, INT_EXP = /^[\-]?\d+$/;
    var FntParser = (function () {
        function FntParser() {
        }
        FntParser.create = function () {
            var obj = new this();
            return obj;
        };
        FntParser.prototype.parseFnt = function (fntStr, url) {
            var fnt = {}, commonObj = null, pageObj = null;
            commonObj = this._parseStrToObj(fntStr.match(COMMON_EXP)[0]);
            fnt.commonHeight = commonObj["lineHeight"];
            if (commonObj["pages"] !== 1) {
                wd.Log.log("only supports 1 page");
            }
            pageObj = this._parseStrToObj(fntStr.match(PAGE_EXP)[0]);
            if (pageObj["id"] !== 0) {
                wd.Log.log("file could not be found");
            }
            fnt.atlasName = wdCb.PathUtils.changeBasename(url, pageObj["file"]);
            this._parseChar(fntStr, fnt);
            return fnt;
        };
        FntParser.prototype._parseStrToObj = function (str) {
            var arr = str.match(ITEM_EXP), obj = {};
            if (arr) {
                for (var _i = 0, arr_1 = arr; _i < arr_1.length; _i++) {
                    var tempStr = arr_1[_i];
                    var index = tempStr.indexOf("="), key = tempStr.substring(0, index), value = tempStr.substring(index + 1);
                    if (value.match(INT_EXP)) {
                        value = parseInt(value);
                    }
                    else if (value[0] == '"') {
                        value = value.substring(1, value.length - 1);
                    }
                    obj[key] = value;
                }
            }
            return obj;
        };
        FntParser.prototype._parseChar = function (fntStr, fnt) {
            var charLines = fntStr.match(CHAR_EXP), fontDefDictionary = {};
            for (var _i = 0, charLines_1 = charLines; _i < charLines_1.length; _i++) {
                var char = charLines_1[_i];
                var charObj = this._parseStrToObj(char), charId = charObj["id"];
                fontDefDictionary[charId] = {
                    rect: { x: charObj["x"], y: charObj["y"], width: charObj["width"], height: charObj["height"] },
                    xOffset: charObj["xoffset"],
                    yOffset: charObj["yoffset"],
                    xAdvance: charObj["xadvance"]
                };
            }
            fnt.fontDefDictionary = fontDefDictionary;
        };
        return FntParser;
    }());
    wd.FntParser = FntParser;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var FntLoader = (function (_super) {
        __extends(FntLoader, _super);
        function FntLoader() {
            _super.apply(this, arguments);
            this._parser = wd.FntParser.create();
        }
        FntLoader.getInstance = function () {
            if (this._instance === null) {
                this._instance = new this();
            }
            return this._instance;
        };
        FntLoader.prototype.loadAsset = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var url = args[0], self = this;
            return wd.AjaxLoader.load(url, "text")
                .map(function (fntStr) {
                return self._parser.parseFnt(fntStr, url);
            });
        };
        FntLoader._instance = null;
        __decorate([
            wd.require(function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i - 0] = arguments[_i];
                }
                wd.assert(!wd.JudgeUtils.isArray(args[0]), wd.Log.info.FUNC_MUST_BE("url", "string"));
            })
        ], FntLoader.prototype, "loadAsset", null);
        return FntLoader;
    }(wd.Loader));
    wd.FntLoader = FntLoader;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var DeviceManager = (function () {
        function DeviceManager() {
            this.view = null;
            this.gl = null;
            this._scissorTest = null;
            this._depthTest = null;
            this._depthFunc = null;
            this._side = null;
            this.polygonOffset = null;
            this._polygonOffsetMode = null;
            this._depthWrite = null;
            this._blend = null;
            this._writeRed = null;
            this._writeGreen = null;
            this._writeBlue = null;
            this._writeAlpha = null;
            this._blendSrc = null;
            this._blendDst = null;
            this._blendEquation = null;
            this._blendFuncSeparate = null;
            this._blendEquationSeparate = null;
        }
        DeviceManager.getInstance = function () {
            if (this._instance === null) {
                this._instance = new this();
            }
            return this._instance;
        };
        Object.defineProperty(DeviceManager.prototype, "scissorTest", {
            get: function () {
                return this._scissorTest;
            },
            set: function (scissorTest) {
                var gl = this.gl;
                if (scissorTest) {
                    gl.enable(gl.SCISSOR_TEST);
                }
                else {
                    gl.disable(gl.SCISSOR_TEST);
                }
                this._scissorTest = scissorTest;
            },
            enumerable: true,
            configurable: true
        });
        DeviceManager.prototype.setScissor = function (x, y, width, height) {
            this.gl.scissor(x, y, width, height);
            if (!this.scissorTest) {
                this.scissorTest = true;
            }
        };
        DeviceManager.prototype.setViewport = function (x, y, width, height) {
            this.gl.viewport(x, y, width, height);
        };
        Object.defineProperty(DeviceManager.prototype, "depthTest", {
            get: function () {
                return this._depthTest;
            },
            set: function (depthTest) {
                var gl = this.gl;
                if (this._depthTest !== depthTest) {
                    if (depthTest) {
                        gl.enable(gl.DEPTH_TEST);
                    }
                    else {
                        gl.disable(gl.DEPTH_TEST);
                    }
                    this._depthTest = depthTest;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DeviceManager.prototype, "depthFunc", {
            get: function () {
                return this._depthFunc;
            },
            set: function (depthFunc) {
                var gl = this.gl;
                if (this._depthFunc !== depthFunc) {
                    gl.depthFunc(gl[depthFunc]);
                    this._depthFunc = depthFunc;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DeviceManager.prototype, "side", {
            get: function () {
                return this._side;
            },
            set: function (side) {
                var gl = this.gl;
                if (this._side !== side) {
                    switch (side) {
                        case ESide.NONE:
                            gl.enable(gl.CULL_FACE);
                            gl.cullFace(gl.FRONT_AND_BACK);
                            break;
                        case ESide.BOTH:
                            gl.disable(gl.CULL_FACE);
                            break;
                        case ESide.FRONT:
                            gl.enable(gl.CULL_FACE);
                            gl.cullFace(gl.BACK);
                            break;
                        case ESide.BACK:
                            gl.enable(gl.CULL_FACE);
                            gl.cullFace(gl.FRONT);
                            break;
                        default:
                            wd.Log.error(true, wd.Log.info.FUNC_UNEXPECT("side", side));
                            break;
                    }
                    this._side = side;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DeviceManager.prototype, "polygonOffsetMode", {
            get: function () {
                return this._polygonOffsetMode;
            },
            set: function (polygonOffsetMode) {
                var gl = this.gl;
                if (this._polygonOffsetMode !== polygonOffsetMode) {
                    switch (polygonOffsetMode) {
                        case EPolygonOffsetMode.NONE:
                            gl.polygonOffset(0.0, 0.0);
                            gl.disable(gl.POLYGON_OFFSET_FILL);
                            break;
                        case EPolygonOffsetMode.IN:
                            gl.enable(gl.POLYGON_OFFSET_FILL);
                            gl.polygonOffset(1.0, 1.0);
                            break;
                        case EPolygonOffsetMode.OUT:
                            gl.enable(gl.POLYGON_OFFSET_FILL);
                            gl.polygonOffset(-1.0, -1.0);
                            break;
                        case EPolygonOffsetMode.CUSTOM:
                            gl.enable(gl.POLYGON_OFFSET_FILL);
                            wd.Log.error(!this.polygonOffset, wd.Log.info.FUNC_MUST_DEFINE("polygonOffset"));
                            gl.polygonOffset(this.polygonOffset.x, this.polygonOffset.y);
                            break;
                        default:
                            break;
                    }
                    this._polygonOffsetMode = polygonOffsetMode;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DeviceManager.prototype, "depthWrite", {
            get: function () {
                return this._depthWrite;
            },
            set: function (depthWrite) {
                if (this._depthWrite !== depthWrite) {
                    this.gl.depthMask(depthWrite);
                    this._depthWrite = depthWrite;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DeviceManager.prototype, "blend", {
            get: function () {
                return this._blend;
            },
            set: function (blend) {
                var gl = this.gl;
                if (this._blend !== blend) {
                    if (blend) {
                        gl.enable(gl.BLEND);
                    }
                    else {
                        gl.disable(gl.BLEND);
                    }
                    this._blend = blend;
                }
            },
            enumerable: true,
            configurable: true
        });
        DeviceManager.prototype.setBlendFunc = function (blendSrc, blendDst) {
            if ((this._blendSrc !== blendSrc) || (this._blendDst !== blendDst)) {
                this._blend && this.gl.blendFunc(this.gl[blendSrc], this.gl[blendDst]);
                this._blendSrc = blendSrc;
                this._blendDst = blendDst;
            }
        };
        DeviceManager.prototype.setBlendEquation = function (blendEquation) {
            if (this._blendEquation !== blendEquation) {
                this._blend && this.gl.blendEquation(this.gl[blendEquation]);
                this._blendEquation = blendEquation;
            }
        };
        DeviceManager.prototype.setBlendFuncSeparate = function (blendFuncSeparate) {
            var gl = this.gl;
            if (!this._blendFuncSeparate || this._blendFuncSeparate[0] !== blendFuncSeparate[0] || this._blendFuncSeparate[1] !== blendFuncSeparate[1]) {
                this._blend && gl.blendFuncSeparate(gl[blendFuncSeparate[0]], gl[blendFuncSeparate[1]], gl[blendFuncSeparate[2]], gl[blendFuncSeparate[3]]);
                this._blendFuncSeparate = blendFuncSeparate;
            }
        };
        DeviceManager.prototype.setBlendEquationSeparate = function (blendEquationSeparate) {
            var gl = this.gl;
            if (!this._blendEquationSeparate || this._blendEquationSeparate[0] !== blendEquationSeparate[0] || this._blendEquationSeparate[1] !== blendEquationSeparate[1]) {
                this._blend && gl.blendEquationSeparate(gl[blendEquationSeparate[0]], gl[blendEquationSeparate[1]]);
                this._blendEquationSeparate = blendEquationSeparate;
            }
        };
        DeviceManager.prototype.setColorWrite = function (writeRed, writeGreen, writeBlue, writeAlpha) {
            if (this._writeRed !== writeRed
                || this._writeGreen !== writeGreen
                || this._writeBlue !== writeBlue
                || this._writeAlpha !== writeAlpha) {
                this.gl.colorMask(writeRed, writeGreen, writeBlue, writeAlpha);
                this._writeRed = writeRed;
                this._writeGreen = writeGreen;
                this._writeBlue = writeBlue;
                this._writeAlpha = writeAlpha;
            }
        };
        DeviceManager.prototype.clear = function (options) {
            var gl = this.gl, color = options.color;
            gl.clearColor(color.r, color.g, color.b, color.a);
            this.setColorWrite(true, true, true, true);
            gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT);
        };
        DeviceManager.prototype.createGL = function (canvasId) {
            var canvas = null;
            if (canvasId) {
                canvas = wdCb.DomQuery.create(canvasId).get(0);
            }
            else {
                canvas = wdCb.DomQuery.create("<canvas></canvas>").prependTo("body").get(0);
            }
            this.view = wd.ViewWebGL.create(canvas);
            this.gl = this.view.getContext();
        };
        DeviceManager.prototype.setScreen = function () {
            var screenSize = wd.Main.screenSize, x = null, y = null, width = null, height = null;
            if (screenSize === wd.EScreenSize.FULL) {
                x = 0;
                y = 0;
                width = wd.root.innerWidth;
                height = wd.root.innerHeight;
                wdCb.DomQuery.create("body").css("margin", "0");
            }
            else {
                x = screenSize.x || 0;
                y = screenSize.y || 0;
                width = screenSize.width || wd.root.innerWidth;
                height = screenSize.height || wd.root.innerHeight;
            }
            this.view.x = x;
            this.view.y = y;
            this.view.width = width;
            this.view.height = height;
            this.setViewport(0, 0, width, height);
        };
        DeviceManager._instance = null;
        __decorate([
            wd.require(function () {
                wd.assert(wd.Main.screenSize !== null, wd.Log.info.FUNC_NOT_EXIST("Main.screenSize"));
            })
        ], DeviceManager.prototype, "setScreen", null);
        return DeviceManager;
    }());
    wd.DeviceManager = DeviceManager;
    (function (EDepthFunction) {
        EDepthFunction[EDepthFunction["NEVER"] = "NEVER"] = "NEVER";
        EDepthFunction[EDepthFunction["ALWAYS"] = "ALWAYS"] = "ALWAYS";
        EDepthFunction[EDepthFunction["LESS"] = "LESS"] = "LESS";
        EDepthFunction[EDepthFunction["LEQUAL"] = "LEQUAL"] = "LEQUAL";
        EDepthFunction[EDepthFunction["EQUAL"] = "EQUAL"] = "EQUAL";
        EDepthFunction[EDepthFunction["GEQUAL"] = "GEQUAL"] = "GEQUAL";
        EDepthFunction[EDepthFunction["GREATER"] = "GREATER"] = "GREATER";
        EDepthFunction[EDepthFunction["NOTEQUAL"] = "NOTEQUAL"] = "NOTEQUAL";
    })(wd.EDepthFunction || (wd.EDepthFunction = {}));
    var EDepthFunction = wd.EDepthFunction;
    (function (ESide) {
        ESide[ESide["NONE"] = 0] = "NONE";
        ESide[ESide["BOTH"] = 1] = "BOTH";
        ESide[ESide["BACK"] = 2] = "BACK";
        ESide[ESide["FRONT"] = 3] = "FRONT";
    })(wd.ESide || (wd.ESide = {}));
    var ESide = wd.ESide;
    (function (EPolygonOffsetMode) {
        EPolygonOffsetMode[EPolygonOffsetMode["NONE"] = 0] = "NONE";
        EPolygonOffsetMode[EPolygonOffsetMode["IN"] = 1] = "IN";
        EPolygonOffsetMode[EPolygonOffsetMode["OUT"] = 2] = "OUT";
        EPolygonOffsetMode[EPolygonOffsetMode["CUSTOM"] = 3] = "CUSTOM";
    })(wd.EPolygonOffsetMode || (wd.EPolygonOffsetMode = {}));
    var EPolygonOffsetMode = wd.EPolygonOffsetMode;
    (function (EBlendFunc) {
        EBlendFunc[EBlendFunc["ZERO"] = "ZEOR"] = "ZERO";
        EBlendFunc[EBlendFunc["ONE"] = "ONE"] = "ONE";
        EBlendFunc[EBlendFunc["SRC_COLOR"] = "SRC_COLOR"] = "SRC_COLOR";
        EBlendFunc[EBlendFunc["ONE_MINUS_SRC_COLOR"] = "ONE_MINUS_SRC_COLOR"] = "ONE_MINUS_SRC_COLOR";
        EBlendFunc[EBlendFunc["DST_COLOR"] = "DST_COLOR"] = "DST_COLOR";
        EBlendFunc[EBlendFunc["ONE_MINUS_DST_COLOR"] = "ONE_MINUS_DST_COLOR"] = "ONE_MINUS_DST_COLOR";
        EBlendFunc[EBlendFunc["SRC_ALPHA"] = "SRC_ALPHA"] = "SRC_ALPHA";
        EBlendFunc[EBlendFunc["SRC_ALPHA_SATURATE"] = "SRC_ALPHA_SATURATE"] = "SRC_ALPHA_SATURATE";
        EBlendFunc[EBlendFunc["ONE_MINUS_SRC_ALPHA"] = "ONE_MINUS_SRC_ALPHA"] = "ONE_MINUS_SRC_ALPHA";
        EBlendFunc[EBlendFunc["DST_ALPHA"] = "DST_ALPHA"] = "DST_ALPHA";
        EBlendFunc[EBlendFunc["ONE_MINUS_DST_ALPH"] = "ONE_MINUS_DST_ALPHA"] = "ONE_MINUS_DST_ALPH";
    })(wd.EBlendFunc || (wd.EBlendFunc = {}));
    var EBlendFunc = wd.EBlendFunc;
    (function (EBlendEquation) {
        EBlendEquation[EBlendEquation["ADD"] = "FUNC_ADD"] = "ADD";
        EBlendEquation[EBlendEquation["SUBTRACT"] = "FUNC_SUBTRACT"] = "SUBTRACT";
        EBlendEquation[EBlendEquation["REVERSE_SUBTRAC"] = "FUNC_REVERSE_SUBTRACT"] = "REVERSE_SUBTRAC";
    })(wd.EBlendEquation || (wd.EBlendEquation = {}));
    var EBlendEquation = wd.EBlendEquation;
    (function (EBlendType) {
        EBlendType[EBlendType["NONE"] = 0] = "NONE";
        EBlendType[EBlendType["NORMAL"] = 1] = "NORMAL";
        EBlendType[EBlendType["ADDITIVE"] = 2] = "ADDITIVE";
        EBlendType[EBlendType["ADDITIVEALPHA"] = 3] = "ADDITIVEALPHA";
        EBlendType[EBlendType["MULTIPLICATIVE"] = 4] = "MULTIPLICATIVE";
        EBlendType[EBlendType["PREMULTIPLIED"] = 5] = "PREMULTIPLIED";
    })(wd.EBlendType || (wd.EBlendType = {}));
    var EBlendType = wd.EBlendType;
    (function (ECanvasType) {
        ECanvasType[ECanvasType["UI"] = "UI"] = "UI";
    })(wd.ECanvasType || (wd.ECanvasType = {}));
    var ECanvasType = wd.ECanvasType;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var GPUDetector = (function () {
        function GPUDetector() {
            this.maxTextureUnit = null;
            this.maxTextureSize = null;
            this.maxCubemapTextureSize = null;
            this.maxAnisotropy = null;
            this.extensionCompressedTextureS3TC = null;
            this.extensionTextureFilterAnisotropic = null;
            this.precision = null;
            this._isDetected = false;
        }
        GPUDetector.getInstance = function () {
            if (this._instance === null) {
                this._instance = new this();
            }
            return this._instance;
        };
        Object.defineProperty(GPUDetector.prototype, "gl", {
            get: function () {
                return wd.DeviceManager.getInstance().gl;
            },
            enumerable: true,
            configurable: true
        });
        GPUDetector.prototype.detect = function () {
            this._isDetected = true;
            this._detectExtension();
            this._detectCapabilty();
        };
        GPUDetector.prototype._detectExtension = function () {
            this.extensionCompressedTextureS3TC = this._getExtension("WEBGL_compressed_texture_s3tc");
            this.extensionTextureFilterAnisotropic = this._getExtension("EXT_texture_filter_anisotropic");
        };
        GPUDetector.prototype._detectCapabilty = function () {
            var gl = this.gl;
            this.maxTextureUnit = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);
            this.maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);
            this.maxCubemapTextureSize = gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE);
            this.maxAnisotropy = this._getMaxAnisotropy();
            this._detectPrecision();
        };
        GPUDetector.prototype._getExtension = function (name) {
            var extension, gl = this.gl;
            switch (name) {
                case "EXT_texture_filter_anisotropic":
                    extension = gl.getExtension("EXT_texture_filter_anisotropic") || gl.getExtension("MOZ_EXT_texture_filter_anisotropic") || gl.getExtension("WEBKIT_EXT_texture_filter_anisotropic");
                    break;
                case "WEBGL_compressed_texture_s3tc":
                    extension = gl.getExtension("WEBGL_compressed_texture_s3tc") || gl.getExtension("MOZ_WEBGL_compressed_texture_s3tc") || gl.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");
                    break;
                case "WEBGL_compressed_texture_pvrtc":
                    extension = gl.getExtension("WEBGL_compressed_texture_pvrtc") || gl.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");
                    break;
                default:
                    extension = gl.getExtension(name);
            }
            return extension;
        };
        GPUDetector.prototype._getMaxAnisotropy = function () {
            var extension = this.extensionTextureFilterAnisotropic, gl = this.gl;
            return extension !== null ? gl.getParameter(extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT) : 0;
        };
        GPUDetector.prototype._detectPrecision = function () {
            var gl = this.gl, vertexShaderPrecisionHighpFloat = gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.HIGH_FLOAT), vertexShaderPrecisionMediumpFloat = gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.MEDIUM_FLOAT), fragmentShaderPrecisionHighpFloat = gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT), fragmentShaderPrecisionMediumpFloat = gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT), highpAvailable = vertexShaderPrecisionHighpFloat.precision > 0 && fragmentShaderPrecisionHighpFloat.precision > 0, mediumpAvailable = vertexShaderPrecisionMediumpFloat.precision > 0 && fragmentShaderPrecisionMediumpFloat.precision > 0;
            if (!highpAvailable) {
                if (mediumpAvailable) {
                    this.precision = EGPUPrecision.MEDIUMP;
                    wd.Log.warn(wd.Log.info.FUNC_NOT_SUPPORT("gpu", "highp, using mediump"));
                }
                else {
                    this.precision = EGPUPrecision.LOWP;
                    wd.Log.warn(wd.Log.info.FUNC_NOT_SUPPORT("gpu", "highp and mediump, using lowp"));
                }
            }
            else {
                this.precision = EGPUPrecision.HIGHP;
            }
        };
        GPUDetector._instance = null;
        return GPUDetector;
    }());
    wd.GPUDetector = GPUDetector;
    (function (EGPUPrecision) {
        EGPUPrecision[EGPUPrecision["HIGHP"] = 0] = "HIGHP";
        EGPUPrecision[EGPUPrecision["MEDIUMP"] = 1] = "MEDIUMP";
        EGPUPrecision[EGPUPrecision["LOWP"] = 2] = "LOWP";
    })(wd.EGPUPrecision || (wd.EGPUPrecision = {}));
    var EGPUPrecision = wd.EGPUPrecision;
})(wd || (wd = {}));
var wd;
(function (wd) {
    (function (EScreenSize) {
        EScreenSize[EScreenSize["FULL"] = 0] = "FULL";
    })(wd.EScreenSize || (wd.EScreenSize = {}));
    var EScreenSize = wd.EScreenSize;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var Point = (function () {
        function Point(x, y) {
            if (x === void 0) { x = null; }
            if (y === void 0) { y = null; }
            this.x = null;
            this.y = null;
            this.x = x;
            this.y = y;
        }
        Point.create = function (x, y) {
            if (x === void 0) { x = null; }
            if (y === void 0) { y = null; }
            var obj = new this(x, y);
            return obj;
        };
        return Point;
    }());
    wd.Point = Point;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var Face3 = (function () {
        function Face3(aIndex, bIndex, cIndex, faceNormal, vertexNormals) {
            this._faceNormal = null;
            this.aIndex = null;
            this.bIndex = null;
            this.cIndex = null;
            this.vertexNormals = null;
            this.aIndex = aIndex;
            this.bIndex = bIndex;
            this.cIndex = cIndex;
            this._faceNormal = faceNormal;
            this.vertexNormals = vertexNormals;
        }
        Face3.create = function (aIndex, bIndex, cIndex, faceNormal, vertexNormals) {
            if (faceNormal === void 0) { faceNormal = null; }
            if (vertexNormals === void 0) { vertexNormals = wdCb.Collection.create(); }
            var obj = new this(aIndex, bIndex, cIndex, faceNormal, vertexNormals);
            return obj;
        };
        Object.defineProperty(Face3.prototype, "faceNormal", {
            get: function () {
                return this._faceNormal !== null ? this._faceNormal : wd.Vector3.create(0, 0, 0);
            },
            set: function (faceNormal) {
                this._faceNormal = faceNormal;
            },
            enumerable: true,
            configurable: true
        });
        Face3.prototype.hasFaceNormal = function () {
            return this._faceNormal !== null;
        };
        Face3.prototype.hasVertexNormal = function () {
            return this.vertexNormals.getCount() > 0;
        };
        Face3.prototype.copy = function () {
            var copyFaceNormal = this._faceNormal ? this._faceNormal.copy() : null, copyVertexNormals = null;
            if (this.vertexNormals) {
                copyVertexNormals = wdCb.Collection.create();
                this.vertexNormals.forEach(function (vertexNormal) {
                    copyVertexNormals.addChild(vertexNormal.copy());
                });
            }
            return Face3.create(this.aIndex, this.bIndex, this.cIndex, copyFaceNormal, copyVertexNormals);
        };
        return Face3;
    }());
    wd.Face3 = Face3;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var RectRegion = (function (_super) {
        __extends(RectRegion, _super);
        function RectRegion() {
            _super.apply(this, arguments);
        }
        Object.defineProperty(RectRegion.prototype, "width", {
            get: function () {
                return this.z;
            },
            set: function (width) {
                this.z = width;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RectRegion.prototype, "height", {
            get: function () {
                return this.w;
            },
            set: function (height) {
                this.w = height;
            },
            enumerable: true,
            configurable: true
        });
        RectRegion.prototype.copy = function () {
            return this.copyHelper(RectRegion.create());
        };
        RectRegion.prototype.isNotEmpty = function () {
            return this.x !== 0
                || this.y !== 0
                || this.width !== 0
                || this.height !== 0;
        };
        return RectRegion;
    }(wd.Vector4));
    wd.RectRegion = RectRegion;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var ViewWebGL = (function () {
        function ViewWebGL(dom) {
            this._dom = null;
            this._dom = dom;
        }
        ViewWebGL.create = function (view) {
            var obj = new this(view);
            return obj;
        };
        Object.defineProperty(ViewWebGL.prototype, "offset", {
            get: function () {
                var view = this._dom, offset = { x: view.offsetLeft, y: view.offsetTop };
                while (view = view.offsetParent) {
                    offset.x += view.offsetLeft;
                    offset.y += view.offsetTop;
                }
                return offset;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ViewWebGL.prototype, "dom", {
            get: function () {
                return this._dom;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ViewWebGL.prototype, "width", {
            get: function () {
                return this._dom.width;
            },
            set: function (width) {
                this._dom.width = width;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ViewWebGL.prototype, "height", {
            get: function () {
                return this._dom.height;
            },
            set: function (height) {
                this._dom.height = height;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ViewWebGL.prototype, "x", {
            get: function () {
                return Number(this._dom.style.left.slice(0, -2));
            },
            set: function (x) {
                this._dom.style.position = "absolute";
                this._dom.style.left = x + "px";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ViewWebGL.prototype, "y", {
            get: function () {
                return Number(this._dom.style.top.slice(0, -2));
            },
            set: function (y) {
                this._dom.style.position = "absolute";
                this._dom.style.top = y + "px";
            },
            enumerable: true,
            configurable: true
        });
        ViewWebGL.prototype.getContext = function () {
            return this._dom.getContext("webgl") || this._dom.getContext("experimental-webgl");
        };
        return ViewWebGL;
    }());
    wd.ViewWebGL = ViewWebGL;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var Color = (function () {
        function Color() {
            this.r = null;
            this.g = null;
            this.b = null;
            this.a = null;
            this._colorString = null;
        }
        Color.create = function (colorVal) {
            var obj = new this();
            obj.initWhenCreate(colorVal);
            return obj;
        };
        Color.prototype.initWhenCreate = function (colorVal) {
            if (!colorVal) {
                return;
            }
            this._colorString = colorVal;
            this._setColor(colorVal);
        };
        Color.prototype.toVector3 = function () {
            return wd.Vector3.create(this.r, this.g, this.b);
        };
        Color.prototype.toVector4 = function () {
            return wd.Vector4.create(this.r, this.g, this.b, this.a);
        };
        Color.prototype.toString = function () {
            return this._colorString;
        };
        Color.prototype._setColor = function (colorVal) {
            var REGEX_RGBA = /^rgba\((\d+),\s*(\d+),\s*(\d+),\s*([^\)]+)\)$/i, REGEX_RGB = /^rgb\((\d+),\s*(\d+),\s*(\d+)\)$/i, REGEX_RGB_2 = /^rgb\((\d+\.\d+),\s*(\d+\.\d+),\s*(\d+\.\d+)\)$/i, REGEX_NUM = /^\#([0-9a-f]{6})$/i;
            var color = null;
            if (REGEX_RGBA.test(colorVal)) {
                color = REGEX_RGBA.exec(colorVal);
                this.r = this._getColorValue(color, 1);
                this.g = this._getColorValue(color, 2);
                this.b = this._getColorValue(color, 3);
                this.a = Number(color[4]);
                return this;
            }
            if (REGEX_RGB.test(colorVal)) {
                color = REGEX_RGB.exec(colorVal);
                this.r = this._getColorValue(color, 1);
                this.g = this._getColorValue(color, 2);
                this.b = this._getColorValue(color, 3);
                this.a = 1;
                return this;
            }
            if (REGEX_RGB_2.test(colorVal)) {
                color = REGEX_RGB_2.exec(colorVal);
                this.r = parseFloat(color[1]);
                this.g = parseFloat(color[2]);
                this.b = parseFloat(color[3]);
                this.a = 1;
                return this;
            }
            if (REGEX_NUM.test(colorVal)) {
                color = REGEX_NUM.exec(colorVal);
                this._setHex(parseInt(color[1], 16));
                return this;
            }
        };
        Color.prototype._getColorValue = function (color, index, num) {
            if (num === void 0) { num = 255; }
            return Math.min(num, parseInt(color[index], 10)) / num;
        };
        Color.prototype._setHex = function (hex) {
            hex = Math.floor(hex);
            this.r = (hex >> 16 & 255) / 255;
            this.g = (hex >> 8 & 255) / 255;
            this.b = (hex & 255) / 255;
            this.a = 1;
            return this;
        };
        return Color;
    }());
    wd.Color = Color;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var Texture = (function () {
        function Texture() {
            this.material = null;
            this.width = null;
            this.height = null;
            this.variableData = null;
            this.wrapS = null;
            this.wrapT = null;
            this.magFilter = null;
            this.minFilter = null;
            this.glTexture = null;
            this.target = wd.ETextureTarget.TEXTURE_2D;
        }
        Object.defineProperty(Texture.prototype, "geometry", {
            get: function () {
                return this.material.geometry;
            },
            enumerable: true,
            configurable: true
        });
        Texture.prototype.bindToUnit = function (unit) {
            var gl = wd.DeviceManager.getInstance().gl, maxUnit = wd.GPUDetector.getInstance().maxTextureUnit;
            if (unit >= maxUnit) {
                wd.Log.warn("trying to use " + unit + " texture units, but GPU only supports " + maxUnit + " units");
            }
            gl.activeTexture(gl["TEXTURE" + String(unit)]);
            gl.bindTexture(gl[this.target], this.glTexture);
            return this;
        };
        Texture.prototype.sendData = function (program, pos, unit) {
            program.sendUniformData(pos, this.getSamplerType(), unit);
            this.sendOtherData(program, unit);
        };
        Texture.prototype.dispose = function () {
            var gl = wd.DeviceManager.getInstance().gl;
            gl.deleteTexture(this.glTexture);
            delete this.glTexture;
        };
        Texture.prototype.filterFallback = function (filter) {
            if (filter === wd.ETextureFilterMode.NEAREST || filter === wd.ETextureFilterMode.NEAREST_MIPMAP_MEAREST || filter === wd.ETextureFilterMode.NEAREST_MIPMAP_LINEAR) {
                return wd.ETextureFilterMode.NEAREST;
            }
            return wd.ETextureFilterMode.LINEAR;
        };
        Texture.prototype.sendOtherData = function (program, unit) {
        };
        Texture.prototype.getSamplerNameByVariableData = function (unit, type) {
            var samplerName = null;
            if (this.variableData) {
                if (this.variableData.samplerVariableName) {
                    samplerName = this.variableData.samplerVariableName;
                }
            }
            else {
                samplerName = type === wd.EVariableType.SAMPLER_2D ? "u_sampler2D" + unit : "u_samplerCube" + unit;
            }
            return samplerName;
        };
        Texture.prototype.getSamplerType = function () {
            var type = null;
            switch (this.target) {
                case wd.ETextureTarget.TEXTURE_2D:
                    type = wd.EVariableType.SAMPLER_2D;
                    break;
                case wd.ETextureTarget.TEXTURE_CUBE_MAP:
                    type = wd.EVariableType.SAMPLER_CUBE;
                    break;
                default:
                    break;
            }
            return type;
        };
        Texture.prototype.isSourcePowerOfTwo = function () {
            return wd.TextureUtils.isPowerOfTwo(this.width, this.height);
        };
        Texture.prototype.setTextureParameters = function (textureType, isSourcePowerOfTwo) {
            var gl = wd.DeviceManager.getInstance().gl;
            if (isSourcePowerOfTwo) {
                gl.texParameteri(textureType, gl.TEXTURE_WRAP_S, gl[this.wrapS]);
                gl.texParameteri(textureType, gl.TEXTURE_WRAP_T, gl[this.wrapT]);
                gl.texParameteri(textureType, gl.TEXTURE_MAG_FILTER, gl[this.magFilter]);
                gl.texParameteri(textureType, gl.TEXTURE_MIN_FILTER, gl[this.minFilter]);
            }
            else {
                gl.texParameteri(textureType, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
                gl.texParameteri(textureType, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
                gl.texParameteri(textureType, gl.TEXTURE_MAG_FILTER, gl[this.filterFallback(this.magFilter)]);
                gl.texParameteri(textureType, gl.TEXTURE_MIN_FILTER, gl[this.filterFallback(this.minFilter)]);
            }
        };
        __decorate([
            wd.virtual
        ], Texture.prototype, "sendOtherData", null);
        __decorate([
            wd.virtual
        ], Texture.prototype, "isSourcePowerOfTwo", null);
        return Texture;
    }());
    wd.Texture = Texture;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var TextureUtils = (function () {
        function TextureUtils() {
        }
        TextureUtils.isPowerOfTwo = function (width, height) {
            return wd.JudgeUtils.isPowerOfTwo(width) && wd.JudgeUtils.isPowerOfTwo(height);
        };
        return TextureUtils;
    }());
    wd.TextureUtils = TextureUtils;
})(wd || (wd = {}));
var wd;
(function (wd_2) {
    var BasicTextureUtils = (function (_super) {
        __extends(BasicTextureUtils, _super);
        function BasicTextureUtils() {
            _super.apply(this, arguments);
        }
        BasicTextureUtils.isDrawPartOfTexture = function (sourceRegion, sourceRegionMethod) {
            return sourceRegion && sourceRegion.isNotEmpty() && sourceRegionMethod === wd_2.ETextureSourceRegionMethod.DRAW_IN_CANVAS;
        };
        BasicTextureUtils.drawPartOfTextureByCanvas = function (source, canvasWidth, canvasHeight, sx, sy, sWidth, sHeight, dx, wd, dWidth, dHeight) {
            var canvas = wdCb.DomQuery.create("<canvas></canvas>").get(0), ctx = null;
            canvas.width = canvasWidth;
            canvas.height = canvasHeight;
            ctx = canvas.getContext("2d");
            ctx.drawImage(source, sx, sy, sWidth, sHeight, dx, wd, dWidth, dHeight);
            return canvas;
        };
        BasicTextureUtils.isSourcePowerOfTwo = function (sourceRegion, sourceRegionMethod, width, height) {
            if (this.isDrawPartOfTexture(sourceRegion, sourceRegionMethod)) {
                return this.isPowerOfTwo(sourceRegion.width, sourceRegion.height);
            }
            return this.isPowerOfTwo(width, height);
        };
        BasicTextureUtils.needClampMaxSize = function (maxSize, width, height) {
            return width > maxSize || height > maxSize;
        };
        BasicTextureUtils.clampToMaxSize = function (source, maxSize) {
            var maxDimension = null, newWidth = null, newHeight = null, canvas = null;
            maxDimension = Math.max(source.width, source.height);
            newWidth = Math.floor(source.width * maxSize / maxDimension);
            newHeight = Math.floor(source.height * maxSize / maxDimension);
            canvas = this.drawPartOfTextureByCanvas(source, newWidth, newHeight, 0, 0, source.width, source.height, 0, 0, newWidth, newHeight);
            wd_2.Log.log("source is too big (width:" + source.width + ", height:" + source.height + "), resize it to be width:" + canvas.width + ", height:" + canvas.height + ".");
            return canvas;
        };
        return BasicTextureUtils;
    }(wd_2.TextureUtils));
    wd_2.BasicTextureUtils = BasicTextureUtils;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var RenderTargetTexture = (function (_super) {
        __extends(RenderTargetTexture, _super);
        function RenderTargetTexture() {
            _super.apply(this, arguments);
        }
        RenderTargetTexture.prototype.init = function () {
            this.minFilter = wd.ETextureFilterMode.LINEAR;
            this.magFilter = wd.ETextureFilterMode.LINEAR;
            this.wrapS = wd.ETextureWrapMode.CLAMP_TO_EDGE;
            this.wrapT = wd.ETextureWrapMode.CLAMP_TO_EDGE;
            return this;
        };
        RenderTargetTexture.prototype.getPosition = function () {
            return this.geometry.entityObject.transform.position;
        };
        RenderTargetTexture.prototype.setEmptyTexture = function (texture) {
            var gl = wd.DeviceManager.getInstance().gl;
            wd.Log.error(!texture, "Failed to create texture object");
            gl.bindTexture(gl[this.target], texture);
            this.setTextureParameters(gl[this.target], this.isSourcePowerOfTwo());
        };
        return RenderTargetTexture;
    }(wd.Texture));
    wd.RenderTargetTexture = RenderTargetTexture;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var TwoDRenderTargetTexture = (function (_super) {
        __extends(TwoDRenderTargetTexture, _super);
        function TwoDRenderTargetTexture() {
            _super.apply(this, arguments);
            this._renderList = null;
            this.width = 256;
            this.height = 256;
        }
        Object.defineProperty(TwoDRenderTargetTexture.prototype, "renderList", {
            get: function () {
                return this._renderList;
            },
            set: function (renderList) {
                if (wd.JudgeUtils.isArray(renderList)) {
                    this._renderList = wdCb.Collection.create(renderList);
                }
                else if (renderList instanceof wdCb.Collection) {
                    this._renderList = renderList;
                }
                else {
                    wd.Log.error(true, wd.Log.info.FUNC_MUST_BE("renderList", "array or wdCb.Collection"));
                }
            },
            enumerable: true,
            configurable: true
        });
        TwoDRenderTargetTexture.prototype.createEmptyTexture = function () {
            var gl = wd.DeviceManager.getInstance().gl, texture = gl.createTexture();
            this.setEmptyTexture(texture);
            gl.texImage2D(gl[this.target], 0, gl.RGBA, this.width, this.height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
            this.glTexture = texture;
        };
        return TwoDRenderTargetTexture;
    }(wd.RenderTargetTexture));
    wd.TwoDRenderTargetTexture = TwoDRenderTargetTexture;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var ShadowMapTextureUtils = (function () {
        function ShadowMapTextureUtils() {
        }
        ShadowMapTextureUtils.setTextureParameters = function (textureType) {
            var gl = wd.DeviceManager.getInstance().gl, scene = wd.Director.getInstance().scene;
            if (scene.shadowMap.softType === wd.EShadowMapSoftType.PCF) {
                gl.texParameteri(textureType, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
                gl.texParameteri(textureType, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
            }
        };
        return ShadowMapTextureUtils;
    }());
    wd.ShadowMapTextureUtils = ShadowMapTextureUtils;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var MirrorTexture = (function (_super) {
        __extends(MirrorTexture, _super);
        function MirrorTexture() {
            _super.apply(this, arguments);
            this._plane = null;
        }
        MirrorTexture.create = function () {
            var obj = new this();
            return obj;
        };
        MirrorTexture.prototype.init = function () {
            _super.prototype.init.call(this);
            wd.Director.getInstance().scene.addRenderTargetRenderer(wd.MirrorRenderTargetRenderer.create(this));
            return this;
        };
        MirrorTexture.prototype.getSamplerName = function (unit) {
            return this.getSamplerNameByVariableData(unit, wd.EVariableType.SAMPLER_2D);
        };
        MirrorTexture.prototype.getPlane = function () {
            var normalData = null, normal = null, p = null;
            if (this._plane && !this.geometry.entityObject.transform.dirtyLocal) {
                return this._plane;
            }
            wd.Log.error(!(this.geometry instanceof wd.PlaneGeometry), wd.Log.info.FUNC_MUST_BE("geometry", "PlaneGeometry"));
            normalData = this.geometry.geometryData.normals;
            normal = this.geometry.entityObject.transform.localRotation.multiplyVector3(wd.Vector3.create(normalData[0], normalData[1], normalData[2])).normalize();
            p = this.getPosition();
            this._plane = wd.Plane.create(normal.x, normal.y, normal.z, -p.dot(normal));
            return this._plane;
        };
        return MirrorTexture;
    }(wd.TwoDRenderTargetTexture));
    wd.MirrorTexture = MirrorTexture;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var TwoDShadowMapTexture = (function (_super) {
        __extends(TwoDShadowMapTexture, _super);
        function TwoDShadowMapTexture() {
            _super.apply(this, arguments);
        }
        TwoDShadowMapTexture.create = function () {
            var obj = new this();
            return obj;
        };
        TwoDShadowMapTexture.prototype.getSamplerName = function (unit) {
            wd.Log.error(!wd.JudgeUtils.isNumber(this.variableData.samplerData), wd.Log.info.FUNC_MUST_BE("shadowMapTexture->variableData.samplerData", "samplerIndex"));
            return "u_twoDShadowMapSampler[" + this.variableData.samplerData + "]";
        };
        TwoDShadowMapTexture.prototype.setTextureParameters = function (textureType, isSourcePowerOfTwo) {
            _super.prototype.setTextureParameters.call(this, textureType, isSourcePowerOfTwo);
            wd.ShadowMapTextureUtils.setTextureParameters(textureType);
        };
        return TwoDShadowMapTexture;
    }(wd.TwoDRenderTargetTexture));
    wd.TwoDShadowMapTexture = TwoDShadowMapTexture;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var CubemapRenderTargetTexture = (function (_super) {
        __extends(CubemapRenderTargetTexture, _super);
        function CubemapRenderTargetTexture() {
            _super.apply(this, arguments);
            this.target = wd.ETextureTarget.TEXTURE_CUBE_MAP;
        }
        CubemapRenderTargetTexture.prototype.createEmptyTexture = function () {
            var gl = wd.DeviceManager.getInstance().gl, texture = gl.createTexture(), i = null;
            this.setEmptyTexture(texture);
            for (i = 0; i < 6; i++) {
                gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, gl.RGBA, this.width, this.height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
            }
            this.glTexture = texture;
        };
        return CubemapRenderTargetTexture;
    }(wd.RenderTargetTexture));
    wd.CubemapRenderTargetTexture = CubemapRenderTargetTexture;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var CubemapShadowMapTexture = (function (_super) {
        __extends(CubemapShadowMapTexture, _super);
        function CubemapShadowMapTexture() {
            _super.apply(this, arguments);
        }
        CubemapShadowMapTexture.create = function () {
            var obj = new this();
            return obj;
        };
        CubemapShadowMapTexture.prototype.getSamplerName = function (unit) {
            wd.Log.error(!wd.JudgeUtils.isNumber(this.variableData.samplerData), wd.Log.info.FUNC_MUST_BE("shadowMapTexture->variableData.samplerData", "samplerIndex"));
            return "u_cubemapShadowMapSampler[" + this.variableData.samplerData + "]";
        };
        return CubemapShadowMapTexture;
    }(wd.CubemapRenderTargetTexture));
    wd.CubemapShadowMapTexture = CubemapShadowMapTexture;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var DynamicCubemapTexture = (function (_super) {
        __extends(DynamicCubemapTexture, _super);
        function DynamicCubemapTexture() {
            _super.apply(this, arguments);
            this._renderList = null;
            this.size = 256;
            this.near = 0.1;
            this.far = 100;
            this.mode = null;
        }
        DynamicCubemapTexture.create = function () {
            var obj = new this();
            return obj;
        };
        Object.defineProperty(DynamicCubemapTexture.prototype, "renderList", {
            get: function () {
                return this._renderList;
            },
            set: function (renderList) {
                if (wd.JudgeUtils.isDirectObject(renderList)) {
                    this._renderList = wdCb.Hash.create(renderList);
                }
                else if (renderList instanceof wdCb.Hash) {
                    this._renderList = renderList;
                }
                else {
                    wd.Log.error(true, wd.Log.info.FUNC_MUST_BE("renderList", "array or wdCb.Collection"));
                }
            },
            enumerable: true,
            configurable: true
        });
        DynamicCubemapTexture.prototype.init = function () {
            _super.prototype.init.call(this);
            this.width = this.size;
            this.height = this.size;
            wd.Director.getInstance().scene.addRenderTargetRenderer(wd.DynamicCubemapRenderTargetRenderer.create(this));
            return this;
        };
        DynamicCubemapTexture.prototype.getSamplerName = function (unit) {
            return this.getSamplerNameByVariableData(unit, wd.EVariableType.SAMPLER_CUBE);
        };
        return DynamicCubemapTexture;
    }(wd.CubemapRenderTargetTexture));
    wd.DynamicCubemapTexture = DynamicCubemapTexture;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var BasicTexture = (function (_super) {
        __extends(BasicTexture, _super);
        function BasicTexture() {
            _super.apply(this, arguments);
            this.p_sourceRegionMethod = null;
            this.generateMipmaps = null;
            this.format = null;
            this.source = null;
            this.repeatRegion = null;
            this.sourceRegion = null;
            this.sourceRegionMapping = null;
            this.flipY = null;
            this.premultiplyAlpha = null;
            this.unpackAlignment = null;
            this.type = null;
            this.mipmaps = null;
            this.anisotropy = null;
            this.needUpdate = null;
        }
        Object.defineProperty(BasicTexture.prototype, "sourceRegionMethod", {
            get: function () {
                return this.p_sourceRegionMethod;
            },
            set: function (sourceRegionMethod) {
                this.p_sourceRegionMethod = sourceRegionMethod;
            },
            enumerable: true,
            configurable: true
        });
        BasicTexture.prototype.initWhenCreate = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var gl = wd.DeviceManager.getInstance().gl;
            this.glTexture = gl.createTexture();
        };
        BasicTexture.prototype.init = function () {
        };
        BasicTexture.prototype.update = function (index) {
            var gl = wd.DeviceManager.getInstance().gl, isSourcePowerOfTwo = this.isSourcePowerOfTwo();
            this.bindToUnit(index);
            gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, this.flipY);
            gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, this.premultiplyAlpha);
            gl.pixelStorei(gl.UNPACK_ALIGNMENT, this.unpackAlignment);
            if (this.needClampMaxSize()) {
                this.clampToMaxSize();
                isSourcePowerOfTwo = this.isSourcePowerOfTwo();
                if (!isSourcePowerOfTwo) {
                    wd.Log.warn("texture size is not power of two after clampToMaxSize()");
                }
            }
            this.setTextureParameters(gl[this.target], isSourcePowerOfTwo);
            this.allocateSourceToTexture(isSourcePowerOfTwo);
            if (this.generateMipmaps && isSourcePowerOfTwo) {
                gl.generateMipmap(gl[this.target]);
            }
            this.needUpdate = false;
            return this;
        };
        BasicTexture.prototype.getSamplerName = function (unit) {
            return this.getSamplerNameByVariableData(unit, wd.EVariableType.SAMPLER_2D);
        };
        BasicTexture.prototype.sendOtherData = function (program, unit) {
            var sourceRegion = null;
            if (this.sourceRegion && this.sourceRegionMethod === wd.ETextureSourceRegionMethod.CHANGE_TEXCOORDS_IN_GLSL) {
                sourceRegion = this._convertSourceRegionToUV();
            }
            else {
                sourceRegion = wd.RectRegion.create(0, 0, 1, 1);
            }
            program.sendUniformData("u_sourceRegion", wd.EVariableType.FLOAT_4, sourceRegion);
            program.sendUniformData("u_repeatRegion", wd.EVariableType.FLOAT_4, this.repeatRegion);
            return this;
        };
        BasicTexture.prototype.needClampMaxSize = function () {
            if (!this.source) {
                return false;
            }
            return wd.BasicTextureUtils.needClampMaxSize(wd.GPUDetector.getInstance().maxTextureSize, this.source.width, this.source.height);
        };
        BasicTexture.prototype.clampToMaxSize = function () {
            this.source = wd.BasicTextureUtils.clampToMaxSize(this.source, wd.GPUDetector.getInstance().maxTextureSize);
        };
        BasicTexture.prototype.setTextureParameters = function (textureType, isSourcePowerOfTwo) {
            _super.prototype.setTextureParameters.call(this, textureType, isSourcePowerOfTwo);
            this._setAnisotropy(textureType);
        };
        BasicTexture.prototype.isSourcePowerOfTwo = function () {
            return wd.BasicTextureUtils.isSourcePowerOfTwo(this.sourceRegion, this.sourceRegionMethod, this.width, this.height);
        };
        BasicTexture.prototype._setAnisotropy = function (textureType) {
            var gpu = wd.GPUDetector.getInstance(), gl = wd.DeviceManager.getInstance().gl;
            if (!gpu.extensionTextureFilterAnisotropic) {
                return;
            }
            if (this.anisotropy > 1) {
                gl.texParameterf(textureType, gpu.extensionTextureFilterAnisotropic.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(this.anisotropy, gpu.maxAnisotropy));
            }
        };
        BasicTexture.prototype._convertSourceRegionCanvasMapToUV = function (sourceRegion) {
            var width = this.width, height = this.height, region = null;
            region = wd.RectRegion.create(sourceRegion.x / width, sourceRegion.y / height, sourceRegion.width / width, sourceRegion.height / height);
            region.y = 1 - region.y - region.height;
            return region;
        };
        BasicTexture.prototype._convertSourceRegionToUV = function () {
            if (this.sourceRegionMapping === wd.ETextureSourceRegionMapping.CANVAS) {
                return this._convertSourceRegionCanvasMapToUV(this.sourceRegion);
            }
            else if (this.sourceRegionMapping === wd.ETextureSourceRegionMapping.UV) {
                return this.sourceRegion;
            }
        };
        __decorate([
            wd.virtual
        ], BasicTexture.prototype, "needClampMaxSize", null);
        return BasicTexture;
    }(wd.Texture));
    wd.BasicTexture = BasicTexture;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var TwoDTexture = (function (_super) {
        __extends(TwoDTexture, _super);
        function TwoDTexture() {
            _super.apply(this, arguments);
        }
        TwoDTexture.prototype.initWhenCreate = function (asset) {
            _super.prototype.initWhenCreate.call(this);
            asset.copyTo(this);
        };
        return TwoDTexture;
    }(wd.BasicTexture));
    wd.TwoDTexture = TwoDTexture;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var CommonTexture = (function (_super) {
        __extends(CommonTexture, _super);
        function CommonTexture() {
            _super.apply(this, arguments);
        }
        CommonTexture.prototype.allocateSourceToTexture = function (isSourcePowerOfTwo) {
            var mipmapCmd = null, noMipmapCmd = null, gl = wd.DeviceManager.getInstance().gl;
            if (isSourcePowerOfTwo && this.mipmaps.getCount() > 0) {
                mipmapCmd = wd.DrawMipmapTwoDTextureCommand.create();
                mipmapCmd.mipmaps = this.mipmaps;
                mipmapCmd.format = this.format;
                mipmapCmd.type = this.type;
                mipmapCmd.sourceRegion = this.sourceRegion;
                mipmapCmd.sourceRegionMethod = this.sourceRegionMethod;
                mipmapCmd.glTarget = gl.TEXTURE_2D;
                mipmapCmd.execute();
                this.generateMipmaps = false;
            }
            else {
                noMipmapCmd = wd.DrawNoMipmapTwoDTextureCommand.create();
                noMipmapCmd.source = this.source;
                noMipmapCmd.format = this.format;
                noMipmapCmd.type = this.type;
                noMipmapCmd.sourceRegion = this.sourceRegion;
                noMipmapCmd.sourceRegionMethod = this.sourceRegionMethod;
                noMipmapCmd.glTarget = gl.TEXTURE_2D;
                noMipmapCmd.execute();
            }
        };
        return CommonTexture;
    }(wd.TwoDTexture));
    wd.CommonTexture = CommonTexture;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var ImageTexture = (function (_super) {
        __extends(ImageTexture, _super);
        function ImageTexture() {
            _super.apply(this, arguments);
        }
        ImageTexture.create = function (arg) {
            var obj = new this();
            obj.initWhenCreate(arg);
            return obj;
        };
        ImageTexture.prototype.initWhenCreate = function (arg) {
            if (arguments[0] instanceof wd.ImageTextureAsset) {
                var asset = arguments[0];
                _super.prototype.initWhenCreate.call(this, asset);
            }
            else {
                var canvas = arguments[0];
                _super.prototype.initWhenCreate.call(this, wd.ImageTextureAsset.create(canvas));
            }
        };
        return ImageTexture;
    }(wd.CommonTexture));
    wd.ImageTexture = ImageTexture;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var VideoTexture = (function (_super) {
        __extends(VideoTexture, _super);
        function VideoTexture() {
            _super.apply(this, arguments);
            this._video = null;
            this._startLoopHandler = null;
        }
        VideoTexture.create = function (asset) {
            var obj = new this();
            obj.initWhenCreate(asset);
            return obj;
        };
        VideoTexture.prototype.initWhenCreate = function (asset) {
            _super.prototype.initWhenCreate.call(this, asset);
            this._video = asset.video;
        };
        VideoTexture.prototype.init = function () {
            var _this = this;
            _super.prototype.init.call(this);
            this._startLoopHandler = wdCb.FunctionUtils.bind(this, function () {
                if (_this._video.isStop) {
                    _this.needUpdate = false;
                }
                else {
                    _this.needUpdate = true;
                }
            });
            wd.EventManager.on(wd.EEngineEvent.STARTLOOP, this._startLoopHandler);
            return this;
        };
        VideoTexture.prototype.dispose = function () {
            wd.EventManager.off(wd.EEngineEvent.STARTLOOP, this._startLoopHandler);
        };
        VideoTexture.prototype.needClampMaxSize = function () {
            return false;
        };
        return VideoTexture;
    }(wd.CommonTexture));
    wd.VideoTexture = VideoTexture;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var CubemapTexture = (function (_super) {
        __extends(CubemapTexture, _super);
        function CubemapTexture(assets) {
            _super.call(this);
            this.assets = null;
            this.textures = wdCb.Collection.create();
            this.mode = null;
            this.target = wd.ETextureTarget.TEXTURE_CUBE_MAP;
            this._areAllCompressedAsset = false;
            this.assets = assets;
        }
        CubemapTexture.create = function (assets) {
            var obj = new this(assets);
            obj.initWhenCreate(assets);
            return obj;
        };
        CubemapTexture.prototype.initWhenCreate = function (assets) {
            _super.prototype.initWhenCreate.call(this);
            if (this._areAssetsAllCompressedAsset(assets)) {
                this._areAllCompressedAsset = true;
            }
            else {
                this._areAllCompressedAsset = false;
            }
            this._createTextures(assets);
            this._getRepresentAsset(assets).copyToCubemapTexture(this);
            if (this._areAllCompressedAsset) {
                this.generateMipmaps = false;
                if (this._hasNoMipmapCompressedAsset()) {
                    this.minFilter = this.filterFallback(this.minFilter);
                }
            }
            else {
                this.generateMipmaps = true;
            }
            this.flipY = false;
        };
        CubemapTexture.prototype.getSamplerName = function (unit) {
            return this.getSamplerNameByVariableData(unit, wd.EVariableType.SAMPLER_CUBE);
        };
        CubemapTexture.prototype.sendOtherData = function (program, unit) {
            program.sendUniformData("u_repeatRegion", wd.EVariableType.FLOAT_4, this.repeatRegion);
            return this;
        };
        CubemapTexture.prototype.allocateSourceToTexture = function (isSourcePowerOfTwo) {
            if (this._areAllCompressedAsset) {
                this.textures.forEach(function (texture, i) {
                    texture.draw(i);
                });
            }
            else {
                this.textures.forEach(function (texture, i) {
                    texture.draw(i);
                });
            }
        };
        CubemapTexture.prototype.needClampMaxSize = function () {
            var needAllClampMaxSize = false;
            this.textures.forEach(function (texture) {
                if (texture.needClampMaxSize()) {
                    needAllClampMaxSize = true;
                    return wdCb.$BREAK;
                }
            });
            return needAllClampMaxSize;
        };
        CubemapTexture.prototype.isSourcePowerOfTwo = function () {
            var areAllSourcePowerOfTwo = true;
            this.textures.forEach(function (texture) {
                if (!texture.isSourcePowerOfTwo()) {
                    areAllSourcePowerOfTwo = false;
                    return wdCb.$BREAK;
                }
            });
            return areAllSourcePowerOfTwo;
        };
        CubemapTexture.prototype.clampToMaxSize = function () {
            this.textures.forEach(function (texture) {
                texture.clampToMaxSize();
            });
        };
        CubemapTexture.prototype._hasNoMipmapCompressedAsset = function () {
            var self = this;
            if (!this._areAllCompressedAsset) {
                return false;
            }
            return this.textures.filter(function (texture) {
                return !self._isMipmapFilter(texture.minFilter);
            }).getCount() > 0;
        };
        CubemapTexture.prototype._isMipmapFilter = function (filter) {
            return filter === wd.ETextureFilterMode.LINEAR_MIPMAP_LINEAR || filter === wd.ETextureFilterMode.LINEAR_MIPMAP_NEAREST || filter === wd.ETextureFilterMode.NEAREST_MIPMAP_LINEAR || filter === wd.ETextureFilterMode.NEAREST_MIPMAP_MEAREST;
        };
        CubemapTexture.prototype._getRepresentAsset = function (assets) {
            return assets[0].asset;
        };
        CubemapTexture.prototype._areAssetsAllImageAssets = function (assets) {
            var areImageAssets = [];
            for (var _i = 0, assets_1 = assets; _i < assets_1.length; _i++) {
                var data = assets_1[_i];
                if (data.asset instanceof wd.ImageTextureAsset) {
                    areImageAssets.push(data);
                }
            }
            return areImageAssets.length === 6;
        };
        CubemapTexture.prototype._areAssetsAllCompressedAsset = function (assets) {
            var areCompressedAssets = [];
            for (var _i = 0, assets_2 = assets; _i < assets_2.length; _i++) {
                var data = assets_2[_i];
                if (data.asset instanceof wd.CompressedTextureAsset) {
                    areCompressedAssets.push(data);
                }
            }
            return areCompressedAssets.length === 6;
        };
        CubemapTexture.prototype._createTextures = function (assets) {
            var self = this;
            for (var _i = 0, assets_3 = assets; _i < assets_3.length; _i++) {
                var data = assets_3[_i];
                var face = data.asset.toCubemapFaceTexture();
                if (data.sourceRegion && face instanceof wd.CubemapFaceImageTexture) {
                    var twoDFace = face;
                    twoDFace.sourceRegion = data.sourceRegion;
                }
                if (data.type) {
                    face.type = data.type;
                }
                self.textures.addChild(face);
            }
        };
        CubemapTexture.prototype._areTextureSizOfAllFaceseEqual = function (assets) {
            var textureWidthSizeArr = [], textureHeightSizeArr = [];
            for (var _i = 0, assets_4 = assets; _i < assets_4.length; _i++) {
                var data = assets_4[_i];
                if (data.sourceRegion) {
                    textureWidthSizeArr.push(data.sourceRegion.width);
                    textureHeightSizeArr.push(data.sourceRegion.height);
                }
                else {
                    textureWidthSizeArr.push(data.asset.width);
                    textureHeightSizeArr.push(data.asset.height);
                }
            }
            return this._areAllElementsEqual(textureWidthSizeArr) && this._areAllElementsEqual(textureHeightSizeArr);
        };
        CubemapTexture.prototype._hasSourceRegion = function (assets) {
            for (var _i = 0, assets_5 = assets; _i < assets_5.length; _i++) {
                var data = assets_5[_i];
                if (data.sourceRegion) {
                    return true;
                }
            }
            return false;
        };
        CubemapTexture.prototype._areAllElementsEqual = function (arr) {
            var lastEle = arr[0];
            for (var _i = 0, arr_2 = arr; _i < arr_2.length; _i++) {
                var ele = arr_2[_i];
                if (ele !== lastEle) {
                    return false;
                }
            }
            return true;
        };
        __decorate([
            wd.require(function (assets) {
                wd.assert(assets.length === 6, wd.Log.info.FUNC_MUST("cubemap", "has 6 assets"));
                wd.assert(this._areAssetsAllImageAssets(assets) || this._areAssetsAllCompressedAsset(assets), wd.Log.info.FUNC_MUST_BE("cubemap six face's assets", "all ImageTextureAsset or all CompressedTextureAsset"));
                if (this._areAssetsAllCompressedAsset(assets)) {
                    wd.assert(!this._hasSourceRegion(assets), wd.Log.info.FUNC_SHOULD_NOT("compressed face", "contain sourceRegion data"));
                }
                wd.assert(this._areTextureSizOfAllFaceseEqual(assets), wd.Log.info.FUNC_MUST_BE("all cubemap faces' texture size", "equal"));
            })
        ], CubemapTexture.prototype, "initWhenCreate", null);
        return CubemapTexture;
    }(wd.BasicTexture));
    wd.CubemapTexture = CubemapTexture;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var CubemapFaceTexture = (function () {
        function CubemapFaceTexture() {
            this.type = wd.ETextureType.UNSIGNED_BYTE;
            this.format = null;
            this.width = null;
            this.height = null;
        }
        return CubemapFaceTexture;
    }());
    wd.CubemapFaceTexture = CubemapFaceTexture;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var CubemapFaceImageTexture = (function (_super) {
        __extends(CubemapFaceImageTexture, _super);
        function CubemapFaceImageTexture() {
            _super.apply(this, arguments);
            this.sourceRegion = null;
            this.source = null;
        }
        CubemapFaceImageTexture.create = function (asset) {
            var obj = new this();
            obj.initWhenCreate(asset);
            return obj;
        };
        Object.defineProperty(CubemapFaceImageTexture.prototype, "sourceRegionMethod", {
            get: function () {
                return wd.ETextureSourceRegionMethod.DRAW_IN_CANVAS;
            },
            set: function (sourceRegionMethod) {
                var a = sourceRegionMethod;
            },
            enumerable: true,
            configurable: true
        });
        CubemapFaceImageTexture.prototype.initWhenCreate = function (asset) {
            asset.copyToCubemapFaceTexture(this);
        };
        CubemapFaceImageTexture.prototype.isSourcePowerOfTwo = function () {
            return wd.BasicTextureUtils.isSourcePowerOfTwo(this.sourceRegion, this.sourceRegionMethod, this.width, this.height);
        };
        CubemapFaceImageTexture.prototype.needClampMaxSize = function () {
            if (!this.source) {
                return false;
            }
            return wd.BasicTextureUtils.needClampMaxSize(wd.GPUDetector.getInstance().maxCubemapTextureSize, this.source.width, this.source.height);
        };
        CubemapFaceImageTexture.prototype.clampToMaxSize = function () {
            var maxSize = wd.GPUDetector.getInstance().maxCubemapTextureSize;
            this.source = wd.BasicTextureUtils.clampToMaxSize(this.source, maxSize);
        };
        CubemapFaceImageTexture.prototype.draw = function (index) {
            var noMipmapCmd = wd.DrawNoMipmapTwoDTextureCommand.create(), gl = wd.DeviceManager.getInstance().gl;
            noMipmapCmd.source = this.source;
            noMipmapCmd.sourceRegion = this.sourceRegion;
            noMipmapCmd.sourceRegionMethod = this.sourceRegionMethod;
            noMipmapCmd.glTarget = gl.TEXTURE_CUBE_MAP_POSITIVE_X + index;
            noMipmapCmd.format = this.format;
            noMipmapCmd.type = this.type;
            noMipmapCmd.execute();
        };
        __decorate([
            wd.requireSetter(function (sourceRegionMethod) {
                wd.assert(sourceRegionMethod === wd.ETextureSourceRegionMethod.DRAW_IN_CANVAS, wd.Log.info.FUNC_SUPPORT("cubemap twoD face texture->sourceRegionMethod only", "DRAW_IN_CANVAS"));
            })
        ], CubemapFaceImageTexture.prototype, "sourceRegionMethod", null);
        return CubemapFaceImageTexture;
    }(wd.CubemapFaceTexture));
    wd.CubemapFaceImageTexture = CubemapFaceImageTexture;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var CubemapFaceCompressedTexture = (function (_super) {
        __extends(CubemapFaceCompressedTexture, _super);
        function CubemapFaceCompressedTexture() {
            _super.apply(this, arguments);
            this.mipmaps = null;
            this.minFilter = null;
        }
        CubemapFaceCompressedTexture.create = function (asset) {
            var obj = new this();
            obj.initWhenCreate(asset);
            return obj;
        };
        CubemapFaceCompressedTexture.prototype.initWhenCreate = function (asset) {
            asset.copyToCubemapFaceTexture(this);
        };
        CubemapFaceCompressedTexture.prototype.isSourcePowerOfTwo = function () {
            return wd.BasicTextureUtils.isSourcePowerOfTwo(null, null, this.width, this.height);
        };
        CubemapFaceCompressedTexture.prototype.needClampMaxSize = function () {
            return wd.BasicTextureUtils.needClampMaxSize(wd.GPUDetector.getInstance().maxCubemapTextureSize, this.width, this.height);
        };
        CubemapFaceCompressedTexture.prototype.clampToMaxSize = function () {
            wd.Log.warn("CubemapFaceCompressedTexture's texture size is over maxCubemapTextureSize");
        };
        CubemapFaceCompressedTexture.prototype.draw = function (index) {
            var compressedCmd = wd.DrawCompressedTextureCommand.create(), gl = wd.DeviceManager.getInstance().gl;
            compressedCmd.glTarget = gl.TEXTURE_CUBE_MAP_POSITIVE_X + index;
            compressedCmd.type = this.type;
            compressedCmd.format = this.format;
            compressedCmd.mipmaps = this.mipmaps;
            compressedCmd.execute();
        };
        return CubemapFaceCompressedTexture;
    }(wd.CubemapFaceTexture));
    wd.CubemapFaceCompressedTexture = CubemapFaceCompressedTexture;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var CompressedTexture = (function (_super) {
        __extends(CompressedTexture, _super);
        function CompressedTexture() {
            _super.apply(this, arguments);
        }
        CompressedTexture.create = function (asset) {
            var obj = new this();
            obj.initWhenCreate(asset);
            return obj;
        };
        Object.defineProperty(CompressedTexture.prototype, "sourceRegionMethod", {
            get: function () {
                wd.Log.assert(this.p_sourceRegionMethod === wd.ETextureSourceRegionMethod.DRAW_IN_CANVAS, "compressed texture not support ETextureSourceRegionMethod.DRAW_IN_CANVAS, will use ETextureSourceRegionMethod.CHANGE_TEXCOORDS_IN_GLSL instead");
                return wd.ETextureSourceRegionMethod.CHANGE_TEXCOORDS_IN_GLSL;
            },
            enumerable: true,
            configurable: true
        });
        CompressedTexture.prototype.allocateSourceToTexture = function (isSourcePowerOfTwo) {
            var gl = wd.DeviceManager.getInstance().gl, compressedCmd = wd.DrawCompressedTextureCommand.create();
            compressedCmd.glTarget = gl.TEXTURE_2D;
            compressedCmd.type = this.type;
            compressedCmd.format = this.format;
            compressedCmd.mipmaps = this.mipmaps;
            compressedCmd.sourceRegion = this.sourceRegion;
            compressedCmd.sourceRegionMethod = this.sourceRegionMethod;
            compressedCmd.execute();
            if (this.mipmaps.getCount() > 1) {
                this.generateMipmaps = false;
            }
        };
        CompressedTexture.prototype.needClampMaxSize = function () {
            return false;
        };
        return CompressedTexture;
    }(wd.TwoDTexture));
    wd.CompressedTexture = CompressedTexture;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var DrawTextureCommand = (function () {
        function DrawTextureCommand() {
            this.format = null;
            this.type = null;
            this.sourceRegion = null;
            this.sourceRegionMethod = wd.ETextureSourceRegionMethod.CHANGE_TEXCOORDS_IN_GLSL;
            this.glTarget = null;
        }
        DrawTextureCommand.prototype.getDrawTarget = function (source, sourceRegion) {
            if (sourceRegion === void 0) { sourceRegion = this.sourceRegion; }
            var result = null;
            if (wd.BasicTextureUtils.isDrawPartOfTexture(sourceRegion, this.sourceRegionMethod)) {
                result = wd.BasicTextureUtils.drawPartOfTextureByCanvas(source, sourceRegion.width, sourceRegion.height, sourceRegion.x, sourceRegion.y, sourceRegion.width, sourceRegion.height, 0, 0, sourceRegion.width, sourceRegion.height);
            }
            else {
                result = source;
            }
            return result;
        };
        return DrawTextureCommand;
    }());
    wd.DrawTextureCommand = DrawTextureCommand;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var DrawCompressedTextureCommand = (function (_super) {
        __extends(DrawCompressedTextureCommand, _super);
        function DrawCompressedTextureCommand() {
            _super.apply(this, arguments);
            this.mipmaps = null;
        }
        DrawCompressedTextureCommand.create = function () {
            var obj = new this();
            return obj;
        };
        DrawCompressedTextureCommand.prototype.execute = function () {
            var gl = wd.DeviceManager.getInstance().gl, self = this;
            wd.Log.error(this.format === null, wd.Log.info.FUNC_NOT_SUPPORT(this.format));
            if (this.format !== wd.ETextureFormat.RGBA) {
                this.mipmaps.forEach(function (mipmap, index) {
                    gl.compressedTexImage2D(self.glTarget, index, self.format, mipmap.width, mipmap.height, 0, self.getDrawTarget(mipmap.data));
                });
            }
            else {
                this.mipmaps.forEach(function (mipmap, index) {
                    gl.texImage2D(self.glTarget, index, gl[self.format], mipmap.width, mipmap.height, 0, gl[self.format], gl[self.type], self.getDrawTarget(mipmap.data));
                });
            }
        };
        return DrawCompressedTextureCommand;
    }(wd.DrawTextureCommand));
    wd.DrawCompressedTextureCommand = DrawCompressedTextureCommand;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var DrawTwoDTextureCommand = (function (_super) {
        __extends(DrawTwoDTextureCommand, _super);
        function DrawTwoDTextureCommand() {
            _super.apply(this, arguments);
            this.source = null;
        }
        DrawTwoDTextureCommand.prototype.drawTexture = function (index, source) {
            var gl = wd.DeviceManager.getInstance().gl;
            gl.texImage2D(this.glTarget, index, gl[this.format], gl[this.format], gl[this.type], this.getDrawTarget(source));
        };
        return DrawTwoDTextureCommand;
    }(wd.DrawTextureCommand));
    wd.DrawTwoDTextureCommand = DrawTwoDTextureCommand;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var DrawMipmapTwoDTextureCommand = (function (_super) {
        __extends(DrawMipmapTwoDTextureCommand, _super);
        function DrawMipmapTwoDTextureCommand() {
            _super.apply(this, arguments);
            this.mipmaps = null;
        }
        DrawMipmapTwoDTextureCommand.create = function () {
            var obj = new this();
            return obj;
        };
        DrawMipmapTwoDTextureCommand.prototype.execute = function () {
            var self = this;
            this.mipmaps.forEach(function (mipmap, index) {
                self.drawTexture(index, mipmap);
            });
        };
        return DrawMipmapTwoDTextureCommand;
    }(wd.DrawTwoDTextureCommand));
    wd.DrawMipmapTwoDTextureCommand = DrawMipmapTwoDTextureCommand;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var DrawNoMipmapTwoDTextureCommand = (function (_super) {
        __extends(DrawNoMipmapTwoDTextureCommand, _super);
        function DrawNoMipmapTwoDTextureCommand() {
            _super.apply(this, arguments);
        }
        DrawNoMipmapTwoDTextureCommand.create = function () {
            var obj = new this();
            return obj;
        };
        DrawNoMipmapTwoDTextureCommand.prototype.execute = function () {
            this.drawTexture(0, this.source);
        };
        return DrawNoMipmapTwoDTextureCommand;
    }(wd.DrawTwoDTextureCommand));
    wd.DrawNoMipmapTwoDTextureCommand = DrawNoMipmapTwoDTextureCommand;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var Video = (function () {
        function Video(_a) {
            var urlArr = _a.urlArr, _b = _a.onLoad, onLoad = _b === void 0 ? function (video) { } : _b, _c = _a.onError, onError = _c === void 0 ? function (err) { } : _c;
            this.url = null;
            this.source = null;
            this.isStop = false;
            this._urlArr = null;
            this._onLoad = null;
            this._onError = null;
            this._urlArr = wdCb.Collection.create(urlArr);
            this._onLoad = onLoad;
            this._onError = onError;
        }
        Video.create = function (data) {
            var obj = new this(data);
            obj.initWhenCreate();
            return obj;
        };
        Video.prototype.initWhenCreate = function () {
            this.url = this._getCanPlayUrl();
            this.source = document.createElement("video");
            this.source.src = this.url;
            this._bindEvent();
        };
        Video.prototype.play = function () {
            this.isStop = false;
            this.source.play();
        };
        Video.prototype._getCanPlayUrl = function () {
            var self = this, canPlayUrl = null, extnameArr = [];
            this._urlArr.forEach(function (url) {
                var extname = wdCb.PathUtils.extname(url);
                extnameArr.push(extname);
                if (self._canplay(extname)) {
                    canPlayUrl = url;
                    return wdCb.$BREAK;
                }
            });
            wd.Log.error(canPlayUrl === null, wd.Log.info.FUNC_NOT_SUPPORT("browser", extnameArr.join(",")));
            return canPlayUrl;
        };
        Video.prototype._canplay = function (extname) {
            var video = document.createElement("video"), mimeStr = null;
            switch (extname) {
                case '.mp4':
                    mimeStr = 'video/mp4; codecs="avc1.42e01e, mp4a.40.2"';
                    break;
                case ".ogv":
                    mimeStr = 'video/ogg; codecs="theora, vorbis"';
                    break;
                case ".webm":
                    mimeStr = 'video/webm; codecs="vp8, vorbis"';
                    break;
                default:
                    wd.Log.error(true, wd.Log.info.FUNC_UNEXPECT(extname));
                    break;
            }
            return !!video.canPlayType && video.canPlayType(mimeStr) !== "";
        };
        Video.prototype._bindEvent = function () {
            var self = this;
            this.source.addEventListener("canplaythrough", function () {
                self._onLoad(self);
            }, false);
            this.source.addEventListener("error", function () {
                self._onError("errorCode " + self.source.error.code);
            }, false);
            this.source.addEventListener("ended", function () {
                self.isStop = true;
            }, false);
        };
        return Video;
    }());
    wd.Video = Video;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var VideoManager = (function () {
        function VideoManager() {
        }
        VideoManager.getInstance = function () {
            if (this._instance === null) {
                this._instance = new this();
            }
            return this._instance;
        };
        VideoManager.prototype.play = function (id) {
            var asset = wd.VideoLoader.getInstance().get(id), video = null;
            wd.Log.error(!asset, wd.Log.info.FUNC_NOT_EXIST("video asset which id is " + id));
            video = asset.video;
            video.play();
        };
        VideoManager._instance = null;
        return VideoManager;
    }());
    wd.VideoManager = VideoManager;
})(wd || (wd = {}));
var wd;
(function (wd) {
    var ShaderChunk = (function () {
        function ShaderChunk() {
        }
        ShaderChunk.empty = { top: "", define: "", varDeclare: "", funcDeclare: "", funcDefine: "", body: "" };
        ShaderChunk.NULL = -1.0;
        ShaderChunk.morphNormal_vertex = { top: "", define: "", varDeclare: "", funcDeclare: "", funcDefine: "", body: "vec3 a_normal = a_currentFrameNormal + (a_nextFrameNormal - a_currentFrameNormal) * u_interpolation;\n", };
        ShaderChunk.morphVertice_vertex = { top: "", define: "", varDeclare: "", funcDeclare: "", funcDefine: "", body: "vec3 a_position = a_currentFramePosition + (a_nextFramePosition - a_currentFramePosition) * u_interpolation;\n", };
        ShaderChunk.basicEnd_fragment = { top: "", define: "", varDeclare: "", funcDeclare: "", funcDefine: "", body: "gl_FragColor = vec4(totalColor.rgb, totalColor.a * u_opacity);\n", };
        ShaderChunk.basic_fragment = { top: "", define: "", varDeclare: "varying vec3 v_color;\n", funcDeclare: "", funcDefine: "", body: "vec4 totalColor = vec4(v_color, 1.0);\n", };
        ShaderChunk.basic_vertex = { top: "", define: "", varDeclare: "varying vec3 v_color;\n", funcDeclare: "", funcDefine: "", body: "v_color = a_color;\n", };
        ShaderChunk.common_define = { top: "", define: "#define NULL -1.0\n", varDeclare: "", funcDeclare: "", funcDefine: "", body: "", };
        ShaderChunk.common_fragment = { top: "", define: "", varDeclare: "", funcDeclare: "", funcDefine: "", body: "", };
        ShaderChunk.common_function = { top: "", define: "", varDeclare: "", funcDeclare: "", funcDefine: "mat2 transpose(mat2 m) {\n  return mat2(  m[0][0], m[1][0],   // new col 0\n                m[0][1], m[1][1]    // new col 1\n             );\n  }\nmat3 transpose(mat3 m) {\n  return mat3(  m[0][0], m[1][0], m[2][0],  // new col 0\n                m[0][1], m[1][1], m[2][1],  // new col 1\n                m[0][2], m[1][2], m[2][2]   // new col 1\n             );\n  }\n", body: "", };
        ShaderChunk.common_vertex = { top: "", define: "", varDeclare: "", funcDeclare: "", funcDefine: "", body: "", };
        ShaderChunk.highp_fragment = { top: "precision highp float;\nprecision highp int;\n", define: "", varDeclare: "", funcDeclare: "", funcDefine: "", body: "", };
        ShaderChunk.lowp_fragment = { top: "precision lowp float;\nprecision lowp int;\n", define: "", varDeclare: "", funcDeclare: "", funcDefine: "", body: "", };
        ShaderChunk.mediump_fragment = { top: "precision mediump float;\nprecision mediump int;\n", define: "", varDeclare: "", funcDeclare: "", funcDefine: "", body: "", };
        ShaderChunk.map_forBasic_fragment = { top: "", define: "", varDeclare: "varying vec2 v_mapCoord;\n", funcDeclare: "", funcDefine: "", body: "totalColor *= texture2D(u_sampler2D0, v_mapCoord);\n", };
        ShaderChunk.map_forBasic_vertex = { top: "", define: "", varDeclare: "varying vec2 v_mapCoord;\n", funcDeclare: "", funcDefine: "", body: "vec2 sourceTexCoord = a_texCoord * u_sourceRegion.zw + u_sourceRegion.xy;\n    v_mapCoord = sourceTexCoord * u_repeatRegion.zw + u_repeatRegion.xy;\n", };
        ShaderChunk.multi_map_forBasic_fragment = { top: "", define: "", varDeclare: "", funcDeclare: "", funcDefine: "vec4 getMapColor(){\n            vec4 color0 = texture2D(u_sampler2D0, v_mapCoord);\n            vec4 color1 = texture2D(u_sampler2D1, v_mapCoord);\n            if(u_combineMode == 0){\n                return mix(color0, color1, u_mixRatio);\n            }\n            else if(u_combineMode == 1){\n                return color0 * color1;\n            }\n            else if(u_combineMode == 2){\n                return color0 + color1;\n            }\n		}\n", body: "totalColor *= getMapColor();\n", };
        ShaderChunk.lightCommon_fragment = { top: "", define: "", varDeclare: "varying vec3 v_worldPosition;\n#if POINT_LIGHTS_COUNT > 0\nstruct PointLight {\n    vec3 position;\n    vec3 color;\n    float intensity;\n\n    float range;\n    float constant;\n    float linear;\n    float quadratic;\n};\nuniform PointLight u_pointLights[POINT_LIGHTS_COUNT];\n\n#endif\n\n\n#if DIRECTION_LIGHTS_COUNT > 0\nstruct DirectionLight {\n    vec3 position;\n\n    float intensity;\n\n    vec3 color;\n};\nuniform DirectionLight u_directionLights[DIRECTION_LIGHTS_COUNT];\n#endif\n", funcDeclare: "", funcDefine: "", body: "", };
        ShaderChunk.lightCommon_vertex = { top: "", define: "", varDeclare: "varying vec3 v_worldPosition;\n#if POINT_LIGHTS_COUNT > 0\nstruct PointLight {\n    vec3 position;\n    vec3 color;\n    float intensity;\n\n    float range;\n    float constant;\n    float linear;\n    float quadratic;\n};\nuniform PointLight u_pointLights[POINT_LIGHTS_COUNT];\n\n#endif\n\n\n#if DIRECTION_LIGHTS_COUNT > 0\nstruct DirectionLight {\n    vec3 position;\n\n    float intensity;\n\n    vec3 color;\n};\nuniform DirectionLight u_directionLights[DIRECTION_LIGHTS_COUNT];\n#endif\n", funcDeclare: "", funcDefine: "", body: "v_worldPosition = vec3(u_mMatrix * vec4(a_position, 1.0));\n", };
        ShaderChunk.lightEnd_fragment = { top: "", define: "", varDeclare: "", funcDeclare: "", funcDefine: "", body: "gl_FragColor = vec4(totalColor.rgb, totalColor.a * u_opacity);\n", };
        ShaderChunk.light_common = { top: "", define: "", varDeclare: "", funcDeclare: "vec3 getDirectionLightDirByLightPos(vec3 lightPos);\nvec3 getPointLightDirByLightPos(vec3 lightPos);\nvec3 getPointLightDirByLightPos(vec3 lightPos, vec3 worldPosition);\n", funcDefine: "vec3 getDirectionLightDirByLightPos(vec3 lightPos){\n    return lightPos - vec3(0.0);\n    //return vec3(0.0) - lightPos;\n}\nvec3 getPointLightDirByLightPos(vec3 lightPos){\n    return lightPos - v_worldPosition;\n}\nvec3 getPointLightDirByLightPos(vec3 lightPos, vec3 worldPosition){\n    return lightPos - worldPosition;\n}\n", body: "", };
        ShaderChunk.light_fragment = { top: "", define: "", varDeclare: "", funcDeclare: "", funcDefine: "float getBlinnShininess(float shininess, vec3 normal, vec3 lightDir, vec3 viewDir, float dotResultBetweenNormAndLight){\n        vec3 halfAngle = normalize(lightDir + viewDir);\n        float blinnTerm = dot(normal, halfAngle);\n\n        blinnTerm = clamp(blinnTerm, 0.0, 1.0);\n        blinnTerm = dotResultBetweenNormAndLight != 0.0 ? blinnTerm : 0.0;\n        blinnTerm = pow(blinnTerm, shininess);\n\n        return blinnTerm;\n}\n\nfloat getPhongShininess(float shininess, vec3 normal, vec3 lightDir, vec3 viewDir, float dotResultBetweenNormAndLight){\n        vec3 reflectDir = reflect(-lightDir, normal);\n        float phongTerm = dot(viewDir, reflectDir);\n\n        phongTerm = clamp(phongTerm, 0.0, 1.0);\n        phongTerm = dotResultBetweenNormAndLight != 0.0 ? phongTerm : 0.0;\n        phongTerm = pow(phongTerm, shininess);\n\n        return phongTerm;\n}\n\nvec3 calcLight(vec3 lightDir, vec3 color, float intensity, float attenuation, vec3 normal, vec3 viewDir)\n{\n        vec3 materialDiffuse = getMaterialDiffuse();\n        vec3 materialSpecular = getMaterialSpecular();\n        vec3 materialEmission = getMaterialEmission();\n\n        float dotResultBetweenNormAndLight = dot(normal, lightDir);\n        float diff = max(dotResultBetweenNormAndLight, 0.0);\n\n        vec3 emissionColor = u_emission * materialEmission;\n\n        vec3 ambientColor = u_ambient * materialDiffuse;\n\n\n        if(u_lightModel == 3){\n            return emissionColor + ambientColor;\n        }\n\n        vec3 diffuseColor = diff * color * materialDiffuse * intensity;\n\n\n        float spec = 0.0;\n\n        if(u_lightModel == 2){\n                spec = getPhongShininess(u_shininess, normal, lightDir, viewDir, diff);\n        }\n        else if(u_lightModel == 1){\n                spec = getBlinnShininess(u_shininess, normal, lightDir, viewDir, diff);\n        }\n\n        vec3 specularColor = spec * materialSpecular * intensity;\n\n        return emissionColor + ambientColor + attenuation * (diffuseColor + specularColor);\n}\n\n\n\n\n\n#if POINT_LIGHTS_COUNT > 0\n        vec3 calcPointLight(vec3 lightDir, PointLight light, vec3 normal, vec3 viewDir)\n{\n        //lightDir is not normalize computing distance\n        float distance = length(lightDir);\n\n        float attenuation = 0.0;\n\n        if(light.range == NULL || distance < light.range)\n        {\n                attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * (distance * distance));\n        }\n\n        lightDir = normalize(lightDir);\n\n        return calcLight(lightDir, light.color, light.intensity, attenuation, normal, viewDir);\n}\n#endif\n\n\n\n#if DIRECTION_LIGHTS_COUNT > 0\n        vec3 calcDirectionLight(vec3 lightDir, DirectionLight light, vec3 normal, vec3 viewDir)\n{\n        float attenuation = 1.0;\n\n        lightDir = normalize(lightDir);\n\n        return calcLight(lightDir, light.color, light.intensity, attenuation, normal, viewDir);\n}\n#endif\n\n\n\nvec3 calcTotalLight(vec3 norm, vec3 viewDir){\n        vec3 totalLight = vec3(0.0);\n\n    #if POINT_LIGHTS_COUNT > 0\n                for(int i = 0; i < POINT_LIGHTS_COUNT; i++){\n                totalLight += calcPointLight(getPointLightDir(i), u_pointLights[i], norm, viewDir);\n        }\n    #endif\n\n    #if DIRECTION_LIGHTS_COUNT > 0\n                for(int i = 0; i < DIRECTION_LIGHTS_COUNT; i++){\n                totalLight += calcDirectionLight(getDirectionLightDir(i), u_directionLights[i], norm, viewDir);\n        }\n    #endif\n\n        return totalLight;\n}\n", body: "vec3 normal = normalize(getNormal());\n\n#ifdef BOTH_SIDE\nnormal = normal * (-1.0 + 2.0 * float(gl_FrontFacing));\n#endif\n\nvec3 viewDir = normalize(getViewDir());\n\nvec4 totalColor = vec4(calcTotalLight(normal, viewDir), 1.0);\n\ntotalColor *= vec4(getShadowVisibility(), 1.0);\n", };
        ShaderChunk.light_vertex = { top: "", define: "", varDeclare: "", funcDeclare: "", funcDefine: "", body: "gl_Position = u_pMatrix * u_vMatrix * vec4(v_worldPosition, 1.0);\n", };
        ShaderChunk.mirror_forBasic_fragment = { top: "", define: "", varDeclare: "varying vec4 v_mirrorCoord;\n", funcDeclare: "", funcDefine: "//todo add more blend way to mix mirror color and textureColor\n		float blendOverlay(float base, float blend) {\n			return( base < 0.5 ? ( 2.0 * base * blend ) : (1.0 - 2.0 * ( 1.0 - base ) * ( 1.0 - blend ) ) );\n		}\n		vec4 getMirrorColor(in vec4 materialColor){\n			vec4 color = texture2DProj(u_mirrorSampler, v_mirrorCoord);\n\n			color = vec4(blendOverlay(materialColor.r, color.r), blendOverlay(materialColor.g, color.g), blendOverlay(materialColor.b, color.b), 1.0);\n\n			return color;\n		}\n", body: "totalColor = getMirrorColor(totalColor);\n", };
        ShaderChunk.mirror_forBasic_vertex = { top: "", define: "", varDeclare: "varying vec4 v_mirrorCoord;\n", funcDeclare: "", funcDefine: "", body: "mat4 textureMatrix = mat4(\n                        0.5, 0.0, 0.0, 0.0,\n                        0.0, 0.5, 0.0, 0.0,\n                        0.0, 0.0, 0.5, 0.0,\n                        0.5, 0.5, 0.5, 1.0\n);\n\nv_mirrorCoord = textureMatrix * gl_Position;\n", };
        ShaderChunk.skybox_fragment = { top: "", define: "", varDeclare: "varying vec3 v_dir;\n", funcDeclare: "", funcDefine: "", body: "gl_FragColor = textureCube(u_samplerCube0, v_dir);\n", };
        ShaderChunk.skybox_vertex = { top: "", define: "", varDeclare: "varying vec3 v_dir;\n", funcDeclare: "", funcDefine: "", body: "vec4 pos = u_pMatrix * mat4(mat3(u_vMatrix)) * u_mMatrix * vec4(a_position, 1.0);\n\n    gl_Position = pos.xyww;\n\n    v_dir = a_position;\n", };
        ShaderChunk.basic_envMap_forBasic_fragment = { top: "", define: "", varDeclare: "varying vec3 v_dir;\n", funcDeclare: "", funcDefine: "", body: "totalColor *= textureCube(u_samplerCube0, v_dir);\n", };
        ShaderChunk.basic_envMap_forBasic_vertex = { top: "", define: "", varDeclare: "varying vec3 v_dir;\n", funcDeclare: "", funcDefine: "", body: "v_dir = a_position;\n", };
        ShaderChunk.envMap_forBasic_fragment = { top: "", define: "", varDeclare: "varying vec3 v_normal;\nvarying vec3 v_position;\n", funcDeclare: "", funcDefine: "", body: "vec3 inDir = normalize(v_position - u_cameraPos);\n", };
        ShaderChunk.envMap_forBasic_vertex = { top: "", define: "", varDeclare: "varying vec3 v_normal;\nvarying vec3 v_position;\n", funcDeclare: "", funcDefine: "", body: "v_normal = normalize( u_normalMatrix * a_normal);\n    v_position = vec3(u_mMatrix * vec4(a_position, 1.0));\n", };
        ShaderChunk.fresnel_forBasic_fragment = { top: "", define: "", varDeclare: "", funcDeclare: "", funcDefine: "float computeFresnelRatio(vec3 inDir, vec3 normal, float refractionRatio){\n    float f = pow(1.0 - refractionRatio, 2.0) / pow(1.0 + refractionRatio, 2.0);\n    float fresnelPower = 5.0;\n    float ratio = f + (1.0 - f) * pow((1.0 - dot(inDir, normal)), fresnelPower);\n\n    return ratio / 100.0;\n}\nvec4 getEnvMapTotalColor(vec3 inDir, vec3 normal){\n    vec3 reflectDir = reflect(inDir, normal);\n    vec3 refractDir = refract(inDir, normal, u_refractionRatio);\n\n    vec4 reflectColor = textureCube(u_samplerCube0, reflectDir);\n    vec4 refractColor = textureCube(u_samplerCube0, refractDir);\n\n    vec4 totalColor = vec4(0.0);\n\n	if(u_reflectivity != NULL){\n        totalColor = mix(reflectColor, refractColor, u_reflectivity);\n	}\n	else{\n        totalColor = mix(reflectColor, refractColor, computeFresnelRatio(inDir, normal, u_refractionRatio));\n	}\n\n	return totalColor;\n}\n", body: "totalColor *= getEnvMapTotalColor(inDir, normalize(v_normal));\n", };
        ShaderChunk.reflection_forBasic_fragment = { top: "", define: "", varDeclare: "", funcDeclare: "", funcDefine: "", body: "totalColor *= textureCube(u_samplerCube0, reflect(inDir, normalize(v_normal)));\n", };
        ShaderChunk.refraction_forBasic_fragment = { top: "", define: "", varDeclare: "", funcDeclare: "", funcDefine: "", body: "totalColor *= textureCube(u_samplerCube0, refract(inDir, normalize(v_normal), u_refractionRatio));\n", };
        ShaderChunk.basic_envMap_forLight_fragment = { top: "", define: "", varDeclare: "varying vec3 v_basicEnvMap_dir;\n", funcDeclare: "", funcDefine: "", body: "totalColor *= textureCube(u_samplerCube0, v_basicEnvMap_dir);\n", };
        ShaderChunk.basic_envMap_forLight_vertex = { top: "", define: "", varDeclare: "varying vec3 v_basicEnvMap_dir;\n", funcDeclare: "", funcDefine: "", body: "v_basicEnvMap_dir = a_position;\n", };
        ShaderChunk.envMap_forLight_fragment = { top: "", define: "", varDeclare: "", funcDeclare: "", funcDefine: "", body: "vec3 inDir = normalize(v_worldPosition - u_cameraPos);\n", };
        ShaderChunk.envMap_forLight_vertex = { top: "", define: "", varDeclare: "", funcDeclare: "", funcDefine: "", body: "", };
        ShaderChunk.fresnel_forLight_fragment = { top: "", define: "", varDeclare: "", funcDeclare: "", funcDefine: "float computeFresnelRatio(vec3 inDir, vec3 normal, float refractionRatio){\n    float f = pow(1.0 - refractionRatio, 2.0) / pow(1.0 + refractionRatio, 2.0);\n    float fresnelPower = 5.0;\n    float ratio = f + (1.0 - f) * pow((1.0 - dot(inDir, normal)), fresnelPower);\n\n    return ratio / 100.0;\n}\n\nvec4 getEnvMapTotalColor(vec3 inDir, vec3 normal){\n    vec3 reflectDir = reflect(inDir, normal);\n    vec3 refractDir = refract(inDir, normal, u_refractionRatio);\n\n    vec4 reflectColor = textureCube(u_samplerCube0, reflectDir);\n    vec4 refractColor = textureCube(u_samplerCube0, refractDir);\n\n    vec4 totalColor = vec4(0.0);\n\n	if(u_reflectivity != NULL){\n        totalColor = mix(reflectColor, refractColor, u_reflectivity);\n	}\n	else{\n        totalColor = mix(reflectColor, refractColor, computeFresnelRatio(inDir, normal, u_refractionRatio));\n	}\n\n	return totalColor;\n}\n", body: "totalColor *= getEnvMapTotalColor(inDir, normalize(getNormal()));\n", };
        ShaderChunk.reflection_forLight_fragment = { top: "", define: "", varDeclare: "", funcDeclare: "", funcDefine: "", body: "totalColor *= textureCube(u_samplerCube0, reflect(inDir, normalize(getNormal())));\n", };
        ShaderChunk.refraction_forLight_fragment = { top: "", define: "", varDeclare: "", funcDeclare: "", funcDefine: "", body: "totalColor *= textureCube(u_samplerCube0, refract(inDir, getNormal(), u_refractionRatio));\n", };
        ShaderChunk.diffuseMap_fragment = { top: "", define: "", varDeclare: "varying vec2 v_diffuseMapTexCoord;\n", funcDeclare: "", funcDefine: "vec3 getMaterialDiffuse() {\n        return vec3(texture2D(u_diffuseMapSampler, v_diffuseMapTexCoord));\n    }\n", body: "", };
        ShaderChunk.diffuseMap_vertex = { top: "", define: "", varDeclare: "varying vec2 v_diffuseMapTexCoord;\n", funcDeclare: "", funcDefine: "", body: "vec2 sourceTexCoord = a_texCoord * u_sourceRegion.zw + u_sourceRegion.xy;\n    v_diffuseMapTexCoord = sourceTexCoord * u_repeatRegion.zw + u_repeatRegion.xy;\n    //v_diffuseMapTexCoord = a_texCoord;\n", };
        ShaderChunk.emissionMap_fragment = { top: "", define: "", varDeclare: "varying vec2 v_emissionMapTexCoord;\n", funcDeclare: "", funcDefine: "vec3 getMaterialEmission() {\n        return vec3(texture2D(u_emissionMapSampler, v_emissionMapTexCoord));\n    }\n", body: "", };
        ShaderChunk.emissionMap_vertex = { top: "", define: "", varDeclare: "varying vec2 v_emissionMapTexCoord;\n", funcDeclare: "", funcDefine: "", body: "v_emissionMapTexCoord = a_texCoord;\n", };
        ShaderChunk.noDiffuseMap_fragment = { top: "", define: "", varDeclare: "", funcDeclare: "", funcDefine: "vec3 getMaterialDiffuse() {\n        return u_diffuse;\n    }\n", body: "", };
        ShaderChunk.noEmissionMap_fragment = { top: "", define: "", varDeclare: "", funcDeclare: "", funcDefine: "vec3 getMaterialEmission() {\n        return u_emission;\n    }\n", body: "", };
        ShaderChunk.noNormalMap_fragment = { top: "", define: "", varDeclare: "varying vec3 v_normal;\n", funcDeclare: "vec3 getNormal();\n\n", funcDefine: "#if POINT_LIGHTS_COUNT > 0\nvec3 getPointLightDir(int index){\n    //workaround '[] : Index expression must be constant' error\n    for (int x = 0; x <= POINT_LIGHTS_COUNT; x++) {\n        if(x == index){\n            return getPointLightDirByLightPos(u_pointLights[x].position);\n        }\n    }\n    /*!\n    solve error in window7 chrome/firefox:\n    not all control paths return a value.\n    failed to create d3d shaders\n    */\n    return vec3(0.0);\n}\n#endif\n\n#if DIRECTION_LIGHTS_COUNT > 0\nvec3 getDirectionLightDir(int index){\n    //workaround '[] : Index expression must be constant' error\n    for (int x = 0; x <= DIRECTION_LIGHTS_COUNT; x++) {\n        if(x == index){\n            return getDirectionLightDirByLightPos(u_directionLights[x].position);\n        }\n    }\n\n    /*!\n    solve error in window7 chrome/firefox:\n    not all control paths return a value.\n    failed to create d3d shaders\n    */\n    return vec3(0.0);\n}\n#endif\n\n\nvec3 getViewDir(){\n    return normalize(u_cameraPos - v_worldPosition);\n}\nvec3 getNormal(){\n    return v_normal;\n}\n\n", body: "", };
        ShaderChunk.noNormalMap_vertex = { top: "", define: "", varDeclare: "varying vec3 v_normal;\n", funcDeclare: "", funcDefine: "", body: "//v_normal = normalize( vec3(u_normalMatrix * vec4(a_normal, 1.0)));\n    v_normal = normalize( u_normalMatrix * a_normal);\n", };
        ShaderChunk.noSpecularMap_fragment = { top: "", define: "", varDeclare: "", funcDeclare: "", funcDefine: "vec3 getMaterialSpecular() {\n        return u_specular;\n    }\n", body: "", };
        ShaderChunk.normalMap_fragment = { top: "", define: "", varDeclare: "varying vec2 v_normalMapTexCoord;\nvarying vec3 v_viewDir;\n#if POINT_LIGHTS_COUNT > 0\nvarying vec3 v_pointLightDir[POINT_LIGHTS_COUNT];\n#endif\n\n#if DIRECTION_LIGHTS_COUNT > 0\nvarying vec3 v_directionLightDir[DIRECTION_LIGHTS_COUNT];\n#endif\n\n", funcDeclare: "vec3 getNormal();\n\nvec3 getLightDir(vec3 lightPos);\n\n", funcDefine: "#if POINT_LIGHTS_COUNT > 0\nvec3 getPointLightDir(int index){\n    //workaround '[] : Index expression must be constant' error\n    for (int x = 0; x <= POINT_LIGHTS_COUNT; x++) {\n        if(x == index){\n            return v_pointLightDir[x];\n        }\n    }\n    /*!\n    solve error in window7 chrome/firefox:\n    not all control paths return a value.\n    failed to create d3d shaders\n    */\n    return vec3(0.0);\n}\n#endif\n\n#if DIRECTION_LIGHTS_COUNT > 0\n\nvec3 getDirectionLightDir(int index){\n    //workaround '[] : Index expression must be constant' error\n    for (int x = 0; x <= DIRECTION_LIGHTS_COUNT; x++) {\n        if(x == index){\n            return v_directionLightDir[x];\n        }\n    }\n\n    /*!\n    solve error in window7 chrome/firefox:\n    not all control paths return a value.\n    failed to create d3d shaders\n    */\n    return vec3(0.0);\n}\n#endif\n\n\nvec3 getViewDir(){\n    return v_viewDir;\n}\nvec3 getNormal(){\n        // Obtain normal from normal map in range [0,1]\n        vec3 normal = texture2D(u_normalMapSampler, v_normalMapTexCoord).rgb;\n\n        // Transform normal vector to range [-1,1]\n        return normalize(normal * 2.0 - 1.0);  // this normal is in tangent space\n}\n", body: "", };
        ShaderChunk.normalMap_vertex = { top: "", define: "", varDeclare: "varying vec2 v_normalMapTexCoord;\n	varying vec3 v_viewDir;\n\n\n#if POINT_LIGHTS_COUNT > 0\nvarying vec3 v_pointLightDir[POINT_LIGHTS_COUNT];\n#endif\n\n#if DIRECTION_LIGHTS_COUNT > 0\nvarying vec3 v_directionLightDir[DIRECTION_LIGHTS_COUNT];\n#endif\n\n", funcDeclare: "", funcDefine: "mat3 computeTBN(){\n            //vec3 T = normalize(normalMatrix * tangent);\n            //vec3 B = normalize(normalMatrix * bitangent);\n            //vec3 N = normalize(normalMatrix * normal);\n\n            vec3 T = normalize(u_normalMatrix * a_tangent);\n            vec3 N = normalize(u_normalMatrix * a_normal);\n            // re-orthogonalize T with respect to N\n            T = normalize(T - dot(T, N) * N);\n            // then retrieve perpendicular vector B with the cross product of T and N\n            vec3 B = cross(T, N);\n\n\n            return transpose(mat3(T, B, N));\n        }\n", body: "mat3 TBN = computeTBN();\n\n    //v_tangentLightPos = TBN * light.position;\n    //v_tangentCameraPos  = TBN * u_cameraPos;\n    //v_tangentPos  = TBN * v_position;\n\n\n    vec3 tangentPosition = TBN * vec3(u_mMatrix * vec4(a_position, 1.0));\n\n    v_normalMapTexCoord = a_texCoord;\n\n    v_viewDir = normalize(TBN * u_cameraPos - tangentPosition);\n\n\n#if POINT_LIGHTS_COUNT > 0\n       for(int i = 0; i < POINT_LIGHTS_COUNT; i++){\n            //not normalize for computing distance\n            v_pointLightDir[i] = TBN * getPointLightDirByLightPos(u_pointLights[i].position, tangentPosition);\n       }\n#endif\n\n#if DIRECTION_LIGHTS_COUNT > 0\n       for(int i = 0; i < DIRECTION_LIGHTS_COUNT; i++){\n            v_directionLightDir[i] = normalize(- TBN * getDirectionLightDirByLightPos(u_directionLights[i].position));\n       }\n#endif\n\n", };
        ShaderChunk.specularMap_fragment = { top: "", define: "", varDeclare: "varying vec2 v_specularMapTexCoord;\n", funcDeclare: "", funcDefine: "vec3 getMaterialSpecular() {\n        return vec3(texture2D(u_specularMapSampler, v_specularMapTexCoord));\n    }\n", body: "", };
        ShaderChunk.specularMap_vertex = { top: "", define: "", varDeclare: "varying vec2 v_specularMapTexCoord;\n", funcDeclare: "", funcDefine: "", body: "v_specularMapTexCoord = a_texCoord;\n", };
        ShaderChunk.buildCubemapShadowMap_fragment = { top: "", define: "", varDeclare: "varying vec3 v_worldPosition;\n", funcDeclare: "", funcDefine: "", body: "\n// get distance between fragment and light source\n    float lightDistance = length(v_worldPosition - u_lightPos);\n\n    // map to [0,1] range by dividing by farPlane\n    lightDistance = lightDistance / u_farPlane;\n\n\ngl_FragData[0] = packDepth(lightDistance);\n\n\n//gl_FragColor = vec4(0.5, 0.0, 1.0, 1.0);\n//gl_FragData[0] = vec4(lightDistance, 1.0, 1.0, 1.0);\n", };
        ShaderChunk.buildCubemapShadowMap_vertex = { top: "", define: "", varDeclare: "varying vec3 v_worldPosition;\n", funcDeclare: "", funcDefine: "", body: "v_worldPosition = vec3(u_mMatrix * vec4(a_position, 1.0));\n    gl_Position = u_pMatrix * u_vMatrix * vec4(v_worldPosition, 1.0);\n", };
        ShaderChunk.buildTwoDShadowMap_fragment = { top: "", define: "", varDeclare: "", funcDeclare: "", funcDefine: "", body: "gl_FragData[0] = packDepth(gl_FragCoord.z);\n", };
        ShaderChunk.buildTwoDShadowMap_vertex = { top: "", define: "", varDeclare: "", funcDeclare: "", funcDefine: "", body: "gl_Position = u_vpMatrixFromLight * u_mMatrix * vec4(a_position, 1.0);\n//gl_Position = u_pMatrix* u_vMatrix * u_mMatrix * vec4(a_position, 1.0);\n", };
        ShaderChunk.commonBuildShadowMap_fragment = { top: "", define: "", varDeclare: "", funcDeclare: "", funcDefine: "// Packing a float in GLSL with multiplication and mod\nvec4 packDepth(in float depth) {\n    const vec4 bit_shift = vec4(256.0 * 256.0 * 256.0, 256.0 * 256.0, 256.0, 1.0);\n    const vec4 bit_mask = vec4(0.0, 1.0 / 256.0, 1.0 / 256.0, 1.0 / 256.0);\n    // combination of mod and multiplication and division works better\n    vec4 res = mod(depth * bit_shift * vec4(255), vec4(256) ) / vec4(255);\n    res -= res.xxyz * bit_mask;\n\n    return res;\n}\n", body: "", };
        ShaderChunk.cubemapShadowMap_fragment = { top: "", define: "", varDeclare: "uniform samplerCube u_cubemapShadowMapSampler[ CUBEMAP_SHADOWMAP_COUNT ];\n	uniform float u_cubemapShadowDarkness[ CUBEMAP_SHADOWMAP_COUNT ];\n	uniform float u_cubemapShadowBias[ CUBEMAP_SHADOWMAP_COUNT ];\n	uniform float u_farPlane[ CUBEMAP_SHADOWMAP_COUNT ];\n	uniform vec3 u_cubemapLightPos[ CUBEMAP_SHADOWMAP_COUNT ];\n", funcDeclare: "", funcDefine: "// PCF\nfloat getCubemapShadowVisibilityByPCF(float currentDepth, vec3 fragToLight, samplerCube cubemapShadowMapSampler, float shadowBias, float farPlane, float shadowDarkness){\n    //only support in opengl es 3.0+\n    //vec3 sampleOffsetDirections[20] = vec3[]\n    //(\n       //vec3( 1,  1,  1), vec3( 1, -1,  1), vec3(-1, -1,  1), vec3(-1,  1,  1),\n       //vec3( 1,  1, -1), vec3( 1, -1, -1), vec3(-1, -1, -1), vec3(-1,  1, -1),\n       //vec3( 1,  1,  0), vec3( 1, -1,  0), vec3(-1, -1,  0), vec3(-1,  1,  0),\n       //vec3( 1,  0,  1), vec3(-1,  0,  1), vec3( 1,  0, -1), vec3(-1,  0, -1),\n       //vec3( 0,  1,  1), vec3( 0, -1,  1), vec3( 0, -1, -1), vec3( 0,  1, -1)\n    //);\n\n    vec3 sampleOffsetDirections[20];\n\n    sampleOffsetDirections[0] = vec3( 1,  1,  1);\n    sampleOffsetDirections[1] = vec3( 1,  -1,  1);\n    sampleOffsetDirections[2] = vec3( -1,  -1,  1);\n    sampleOffsetDirections[3] = vec3( -1,  1,  1);\n\n    sampleOffsetDirections[4] = vec3( 1,  1,  -1);\n    sampleOffsetDirections[5] = vec3( 1,  -1,  -1);\n    sampleOffsetDirections[6] = vec3( -1,  -1,  -1);\n    sampleOffsetDirections[7] = vec3( -1,  1,  -1);\n\n    sampleOffsetDirections[8] = vec3( 1,  1,  0);\n    sampleOffsetDirections[9] = vec3( 1,  -1,  0);\n    sampleOffsetDirections[10] = vec3( -1,  -1,  0);\n    sampleOffsetDirections[11] = vec3( -1,  1,  0);\n\n    sampleOffsetDirections[12] = vec3( 1,  0,  1);\n    sampleOffsetDirections[13] = vec3( -1,  0,  1);\n    sampleOffsetDirections[14] = vec3( 1,  0,  -1);\n    sampleOffsetDirections[15] = vec3( -1,  0,  -1);\n\n    sampleOffsetDirections[16] = vec3( 0,  1,  1);\n    sampleOffsetDirections[17] = vec3( 0,  -1,  1);\n    sampleOffsetDirections[18] = vec3( 0,  -1,  -1);\n    sampleOffsetDirections[19] = vec3( 0,  1,  -1);\n\n    float shadow = 0.0;\n    int samples = 20;\n\n    //float diskRadius = 0.00000;\n    //Another interesting trick we can apply here is that we can change the diskRadius based on how far the viewer is away from a fragment; this way we can increase the offset radius by the distance to the viewer, making the shadows softer when far away and sharper when close by.\n    float viewDistance = length(u_cameraPos - v_worldPosition);\n    float diskRadius = (1.0 + (viewDistance / farPlane)) / 25.0;\n\n    //for(int i = 0; i < samples; ++i)\n    for(int i = 0; i < 20; ++i)\n    {\n        float pcfDepth = unpackDepth(textureCube(cubemapShadowMapSampler, fragToLight + sampleOffsetDirections[i] * diskRadius));\n        pcfDepth *= farPlane;   // Undo mapping [0;1]\n        shadow += currentDepth - shadowBias > pcfDepth  ? shadowDarkness : 1.0;\n    }\n    shadow /= float(samples);\n\n    return shadow;\n}\n\n\nfloat getCubemapShadowVisibility(vec3 lightDir, samplerCube cubemapShadowMapSampler, vec3 lightPos, float farPlane, float shadowBias, float  shadowDarkness) {\n// Get vector between fragment position and light position\n    vec3 fragToLight= v_worldPosition - lightPos;\n    // Use the light to fragment vector to sample from the depth map\n    // Now get current linear depth as the length between the fragment and light position\n    float currentDepth = length(fragToLight);\n\n    #if defined(SHADOWMAP_TYPE_PCF)\n    return getCubemapShadowVisibilityByPCF(currentDepth, fragToLight, cubemapShadowMapSampler, getShadowBias(lightDir, shadowBias), farPlane, shadowDarkness);\n    #endif\n\n    float closestDepth = unpackDepth(textureCube(cubemapShadowMapSampler, fragToLight));\n\n    // It is currently in linear range between [0,1]. Re-transform back to original value\n    closestDepth *= farPlane;\n\n\n    return float(currentDepth > closestDepth + getShadowBias(lightDir, shadowBias) ? shadowDarkness : 1.0);\n}\n", body: "", };
        ShaderChunk.noShadowMap_fragment = { top: "", define: "", varDeclare: "", funcDeclare: "", funcDefine: "vec3 getShadowVisibility() {\n        return vec3(1.0);\n    }\n", body: "", };
        ShaderChunk.totalShadowMap_fragment = { top: "", define: "", varDeclare: "", funcDeclare: "float getShadowBias(vec3 lightDir, float shadowBias);\nfloat unpackDepth(vec4 rgbaDepth);\n", funcDefine: "float getShadowBias(vec3 lightDir, float shadowBias){\n    float bias = shadowBias;\n\n    if(shadowBias == NULL){\n        bias = 0.005;\n    }\n\n\n     /*!\n     A shadow bias of 0.005 solves the issues of our scene by a large extent, but some surfaces that have a steep angle to the light source might still produce shadow acne. A more solid approach would be to change the amount of bias based on the surface angle towards the light: something we can solve with the dot product:\n     */\n\n     return max(bias * (1.0 - dot(normalize(getNormal()), lightDir)), bias);\n\n    //return bias;\n}\n\nfloat unpackDepth(vec4 rgbaDepth) {\n    const vec4 bitShift = vec4(1.0 / (256.0 * 256.0 * 256.0), 1.0 / (256.0 * 256.0), 1.0 / 256.0, 1.0);\n    return dot(rgbaDepth, bitShift);\n}\n\nvec3 getShadowVisibility() {\n    vec3 shadowColor = vec3(1.0);\n    vec3 twoDLightDir = vec3(0.0);\n    vec3 cubemapLightDir = vec3(0.0);\n\n\n    //to normalMap, the lightDir use the origin one instead of normalMap's lightDir here(the lightDir is used for computing shadowBias, the origin one is enough for it)\n\n    #if TWOD_SHADOWMAP_COUNT > 0\n	for( int i = 0; i < TWOD_SHADOWMAP_COUNT; i ++ ) {\n        twoDLightDir = getDirectionLightDirByLightPos(u_twoDLightPos[i]);\n\n	////if is opposite to direction of light rays, no shadow\n\n        shadowColor *= getTwoDShadowVisibility(twoDLightDir, u_twoDShadowMapSampler[i], v_positionFromLight[i], u_twoDShadowBias[i], u_twoDShadowDarkness[i], u_twoDShadowSize[i]);\n	}\n	#endif\n\n\n	#if CUBEMAP_SHADOWMAP_COUNT > 0\n	for( int i = 0; i < CUBEMAP_SHADOWMAP_COUNT; i ++ ) {\n        cubemapLightDir = getPointLightDirByLightPos(u_cubemapLightPos[i]);\n\n	////if is opposite to direction of light rays, no shadow\n\n        shadowColor *= getCubemapShadowVisibility(cubemapLightDir, u_cubemapShadowMapSampler[i], u_cubemapLightPos[i], u_farPlane[i], u_cubemapShadowBias[i], u_cubemapShadowDarkness[i]);\n	}\n	#endif\n\n	return shadowColor;\n}\n\n", body: "", };
        ShaderChunk.twoDShadowMap_fragment = { top: "", define: "", varDeclare: "varying vec4 v_positionFromLight[ TWOD_SHADOWMAP_COUNT ];\n	uniform sampler2D u_twoDShadowMapSampler[ TWOD_SHADOWMAP_COUNT ];\n	uniform float u_twoDShadowDarkness[ TWOD_SHADOWMAP_COUNT ];\n	uniform float u_twoDShadowBias[ TWOD_SHADOWMAP_COUNT ];\n	uniform vec2 u_twoDShadowSize[ TWOD_SHADOWMAP_COUNT ];\n	uniform vec3 u_twoDLightPos[ TWOD_SHADOWMAP_COUNT ];\n", funcDeclare: "", funcDefine: "// PCF\nfloat getTwoDShadowVisibilityByPCF(float currentDepth, vec2 shadowCoord, sampler2D twoDShadowMapSampler, float shadowBias, float shadowDarkness, vec2 shadowMapSize){\n\n    float shadow = 0.0;\n    vec2 texelSize = vec2(1.0 / shadowMapSize[0], 1.0 / shadowMapSize[1]);\n\n    for(int x = -1; x <= 1; ++x)\n    {\n        for(int y = -1; y <= 1; ++y)\n        {\n            float pcfDepth = unpackDepth(texture2D(twoDShadowMapSampler, shadowCoord + vec2(x, y) * texelSize));\n            shadow += currentDepth - shadowBias > pcfDepth  ? shadowDarkness : 1.0;\n        }\n    }\n    shadow /= 9.0;\n\n    return shadow;\n}\n\n\n\nfloat getTwoDShadowVisibility(vec3 lightDir, sampler2D twoDShadowMapSampler, vec4 v_positionFromLight, float shadowBias, float shadowDarkness, vec2 shadowSize) {\n    //project texture\n    vec3 shadowCoord = (v_positionFromLight.xyz / v_positionFromLight.w) / 2.0 + 0.5;\n    //vec3 shadowCoord = vec3(0.5, 0.5, 0.5);\n\n    #ifdef SHADOWMAP_TYPE_PCF\n    // Percentage-close filtering\n    // (9 pixel kernel)\n    return getTwoDShadowVisibilityByPCF(shadowCoord.z, shadowCoord.xy, twoDShadowMapSampler, getShadowBias(lightDir, shadowBias), shadowDarkness, shadowSize);\n\n    #else\n    return shadowCoord.z > unpackDepth(texture2D(twoDShadowMapSampler, shadowCoord.xy)) + getShadowBias(lightDir, shadowBias) ? shadowDarkness : 1.0;\n    #endif\n}\n", body: "", };
        ShaderChunk.twoDShadowMap_vertex = { top: "", define: "", varDeclare: "varying vec4 v_positionFromLight[ TWOD_SHADOWMAP_COUNT ];\nuniform mat4 u_vpMatrixFromLight[ TWOD_SHADOWMAP_COUNT ];\n", funcDeclare: "", funcDefine: "", body: "for( int i = 0; i < TWOD_SHADOWMAP_COUNT; i ++ ) {\n    v_positionFromLight[i] = u_vpMatrixFromLight[i] * vec4(v_worldPosition, 1.0);\n	}\n", };
        return ShaderChunk;
    }());
    wd.ShaderChunk = ShaderChunk;
})(wd || (wd = {}));

//# sourceMappingURL=data:application/json;base64,
