// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as Curry                           from "../../../../../../node_modules/bs-platform/lib/es6/curry.js";
import * as Sinon                           from "../../../../../../node_modules/wonder-bs-sinon/lib/es6_global/src/sinon.js";
import * as MainStateTool$Wonderjs          from "../state/MainStateTool.js";
import * as ParseSettingService$Wonderjs    from "../../../../src/service/record/main/setting/ParseSettingService.js";
import * as BufferSettingService$Wonderjs   from "../../../../src/service/record/main/setting/BufferSettingService.js";
import * as OperateSettingService$Wonderjs  from "../../../../src/service/record/main/setting/OperateSettingService.js";
import * as ConfigDataLoaderSystem$Wonderjs from "../../../../src/asset/ConfigDataLoaderSystem.js";
import * as CreateStateMainService$Wonderjs from "../../../../src/service/state/main/state/CreateStateMainService.js";

function createGetContextStub(fakeGl, sandbox) {
  return Sinon.returns(fakeGl, Curry._1(Sinon.createEmptyStub, sandbox[0]));
}

function buildFakeGl(sandbox) {
  return {
          VERTEX_SHADER: 0,
          FRAGMENT_SHADER: 1,
          HIGH_FLOAT: 2,
          MEDIUM_FLOAT: 3,
          viewport: Curry._1(Sinon.createEmptyStub, sandbox[0]),
          getShaderPrecisionFormat: Sinon.returns({
                precision: 1
              }, Curry._1(Sinon.createEmptyStub, sandbox[0])),
          getExtension: Sinon.returns(0, Curry._1(Sinon.createEmptyStub, sandbox[0]))
        };
}

function buildFakeCanvas(id, gl, sandbox) {
  return {
          id: id,
          nodeType: 1,
          style: {
            left: "",
            top: "",
            width: "",
            height: "",
            position: "static"
          },
          width: 0,
          height: 0,
          getContext: createGetContextStub(gl, sandbox)
        };
}

function buildFakeDomForNotPassCanvasId(sandbox) {
  var fakeGl = buildFakeGl(sandbox);
  var canvasDom = buildFakeCanvas("a", fakeGl, sandbox);
  var div = {
    innerHTML: "",
    firstChild: canvasDom
  };
  var body = {
    prepend: Curry._1(Sinon.createEmptyStub, sandbox[0]),
    style: {
      cssText: ""
    }
  };
  var createElementStub = Curry._3(Sinon.createMethodStub, sandbox[0], document, "createElement");
  Sinon.returns(div, Sinon.withOneArg("div", createElementStub));
  Sinon.returns(canvasDom, Sinon.withOneArg("canvas", createElementStub));
  Sinon.returns(/* :: */[
        body,
        /* [] */0
      ], Sinon.withOneArg("body", Curry._3(Sinon.createMethodStub, sandbox[0], document, "querySelectorAll")));
  return /* tuple */[
          canvasDom,
          fakeGl,
          div,
          body
        ];
}

function buildSetting(isDebug, canvasId, buffer, context, useHardwareInstance, useWorker) {
  if (canvasId) {
    return "\n {\n    \"is_debug\": " + (String(isDebug) + (",\n    \"canvas_id\": \"" + (String(canvasId[0]) + ("\",\n    \"context\": " + (String(context) + (",\n    \"buffer\": " + (String(buffer) + (",\n    \"gpu\": {\n        \"use_hardware_instance\": " + (String(useHardwareInstance) + ("\n    },\n    \"worker\": {\n        \"use_worker\": " + (String(useWorker) + "\n    }\n}\n        ")))))))))));
  } else {
    return "\n {\n    \"is_debug\": " + (String(isDebug) + (",\n    \"context\": " + (String(context) + (",\n    \"buffer\": " + (String(buffer) + (",\n    \"gpu\": {\n        \"use_hardware_instance\": " + (String(useHardwareInstance) + ("\n    },\n    \"worker\": {\n        \"use_worker\": " + (String(useWorker) + "\n    }\n}\n        ")))))))));
  }
}

function buildBufferConfigStr($staropt$star, $staropt$star$1, $staropt$star$2, $staropt$star$3, $staropt$star$4, $staropt$star$5, _) {
  var customGeometryPointDataBufferCount = $staropt$star ? $staropt$star[0] : 300;
  var transformDataBufferCount = $staropt$star$1 ? $staropt$star$1[0] : 50;
  var basicMaterialDataBufferCount = $staropt$star$2 ? $staropt$star$2[0] : 50;
  var lightMaterialDataBufferCount = $staropt$star$3 ? $staropt$star$3[0] : 50;
  var sourceInstanceCount = $staropt$star$4 ? $staropt$star$4[0] : 2;
  var objectInstanceCountPerSourceInstance = $staropt$star$5 ? $staropt$star$5[0] : 100;
  return "\n       {\n            \"custom_geometry_point_data_buffer_count\": " + (String(customGeometryPointDataBufferCount) + (",\n  \"transform_data_buffer_count\": " + (String(transformDataBufferCount) + (",\n  \"basic_material_data_buffer_count\": " + (String(basicMaterialDataBufferCount) + (",\n  \"light_material_data_buffer_count\": " + (String(lightMaterialDataBufferCount) + (",\n  \"instanceBuffer\": {\n    \"sourceInstanceCount\": " + (String(sourceInstanceCount) + (",\n\"objectInstanceCountPerSourceInstance\": " + (String(objectInstanceCountPerSourceInstance) + "\n  }\n       }\n        ")))))))))));
}

function setToStateData(state, isDebug, canvasId, context, useHardwareInstance, useWorker, buffer) {
  var stateData = MainStateTool$Wonderjs.getStateData(/* () */0);
  return MainStateTool$Wonderjs.setState(ConfigDataLoaderSystem$Wonderjs._createRecordWithState(ConfigDataLoaderSystem$Wonderjs._setSetting(stateData, state, ParseSettingService$Wonderjs.convertToRecord(JSON.parse(buildSetting(isDebug, canvasId, buffer, context, useHardwareInstance, useWorker))))));
}

function createStateAndSetToStateData($staropt$star, $staropt$star$1, $staropt$star$2, $staropt$star$3, $staropt$star$4, $staropt$star$5, _) {
  var isDebug = $staropt$star ? $staropt$star[0] : "true";
  var canvasId = $staropt$star$1 ? $staropt$star$1[0] : /* None */0;
  var context = $staropt$star$2 ? $staropt$star$2[0] : "\n        {\n        \"alpha\": true,\n        \"depth\": true,\n        \"stencil\": false,\n        \"antialias\": true,\n        \"premultiplied_alpha\": true,\n        \"preserve_drawing_buffer\": false\n        }\n               ";
  var useHardwareInstance = $staropt$star$3 ? $staropt$star$3[0] : "false";
  var useWorker = $staropt$star$4 ? $staropt$star$4[0] : "false";
  var buffer = $staropt$star$5 ? $staropt$star$5[0] : buildBufferConfigStr(/* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* () */0);
  return setToStateData(CreateStateMainService$Wonderjs.createState(/* () */0), isDebug, canvasId, context, useHardwareInstance, useWorker, buffer);
}

function setMemory(state, $staropt$star, _) {
  var maxDisposeCount = $staropt$star ? $staropt$star[0] : 1000;
  var newrecord = state.slice();
  var newrecord$1 = state[/* settingRecord */0].slice();
  var init = OperateSettingService$Wonderjs.unsafeGetMemory(state[/* settingRecord */0]);
  newrecord$1[/* memory */1] = /* Some */[/* record */[
      /* maxDisposeCount */maxDisposeCount,
      /* maxTypeArrayPoolSize */init[/* maxTypeArrayPoolSize */1],
      /* maxBigTypeArrayPoolSize */init[/* maxBigTypeArrayPoolSize */2]
    ]];
  newrecord[/* settingRecord */0] = newrecord$1;
  return newrecord;
}

function setBufferSize(state, $staropt$star, _) {
  var customGeometryPointDataBufferCount = $staropt$star ? $staropt$star[0] : 100;
  var newrecord = state.slice();
  var newrecord$1 = state[/* settingRecord */0].slice();
  var init = BufferSettingService$Wonderjs.unsafeGetBuffer(state[/* settingRecord */0]);
  newrecord$1[/* buffer */2] = /* Some */[/* record */[
      /* customGeometryPointDataBufferCount */customGeometryPointDataBufferCount,
      /* transformDataBufferCount */init[/* transformDataBufferCount */1],
      /* basicMaterialDataBufferCount */init[/* basicMaterialDataBufferCount */2],
      /* lightMaterialDataBufferCount */init[/* lightMaterialDataBufferCount */3],
      /* instanceBuffer */init[/* instanceBuffer */4]
    ]];
  newrecord[/* settingRecord */0] = newrecord$1;
  return newrecord;
}

function unsafeGetGPU(state) {
  return OperateSettingService$Wonderjs.unsafeGetGPU(state[/* settingRecord */0]);
}

function setGPU(config, state) {
  var newrecord = state.slice();
  var newrecord$1 = state[/* settingRecord */0].slice();
  newrecord$1[/* gpu */5] = /* Some */[config];
  newrecord[/* settingRecord */0] = newrecord$1;
  return newrecord;
}

function setUseWorker(isUseWorker, state) {
  var newrecord = state.slice();
  var newrecord$1 = state[/* settingRecord */0].slice();
  newrecord$1[/* worker */6] = /* Some */[/* record */[/* useWorker */isUseWorker]];
  newrecord[/* settingRecord */0] = newrecord$1;
  return newrecord;
}

export {
  createGetContextStub           ,
  buildFakeGl                    ,
  buildFakeCanvas                ,
  buildFakeDomForNotPassCanvasId ,
  buildSetting                   ,
  buildBufferConfigStr           ,
  setToStateData                 ,
  createStateAndSetToStateData   ,
  setMemory                      ,
  setBufferSize                  ,
  unsafeGetGPU                   ,
  setGPU                         ,
  setUseWorker                   ,
  
}
/* Sinon Not a pure module */
