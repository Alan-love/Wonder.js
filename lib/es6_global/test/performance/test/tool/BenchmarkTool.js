// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as Curry                     from "../../../../../../node_modules/bs-platform/lib/es6/curry.js";
import * as Js_option                 from "../../../../../../node_modules/bs-platform/lib/es6/js_option.js";
import * as Puppeteer                 from "puppeteer";
import * as Benchmark$WonderBenchmark from "../../../../../../node_modules/wonder-benchmark/lib/es6_global/src/Benchmark.js";

var $$setTimeout = (
               function(timeout) {

                jest.setTimeout(timeout);
               }
                );

function _prepare(launchPromise, config, scriptFilePathList, fileName, browser, page, state) {
  Curry._1($$setTimeout, 500000);
  return launchPromise.then((function (b) {
                  browser[0] = /* Some */[b];
                  return b.newPage();
                })).then((function (p) {
                page[0] = /* Some */[p];
                state[0] = Benchmark$WonderBenchmark.prepareBeforeAll(Benchmark$WonderBenchmark.createState(/* Some */[config], p, Js_option.getExn(browser[0]), /* :: */[
                          "./dist/wd.js",
                          scriptFilePathList
                        ], fileName));
                return Promise.resolve(p);
              }));
}

function prepareForHeadless($staropt$star, $staropt$star$1, fileName, browser, page, state) {
  var config = $staropt$star ? $staropt$star[0] : /* record */[
      /* isClosePage : true */1,
      /* execCount */20
    ];
  var scriptFilePathList = $staropt$star$1 ? $staropt$star$1[0] : /* [] */0;
  return _prepare(Puppeteer.launch({
                  ignoreHTTPSErrors: undefined,
                  executablePath: undefined,
                  slowMo: undefined,
                  args: /* array */[
                    "--headless",
                    "--hide-scrollbars",
                    "--mute-audio"
                  ],
                  handleSIGINT: undefined,
                  timeout: undefined,
                  dumpio: undefined,
                  userDataDir: undefined,
                  headless: false
                }), config, scriptFilePathList, fileName, browser, page, state);
}

function prepareForNoHeadless($staropt$star, $staropt$star$1, fileName, browser, page, state) {
  var config = $staropt$star ? $staropt$star[0] : /* record */[
      /* isClosePage : true */1,
      /* execCount */20
    ];
  var scriptFilePathList = $staropt$star$1 ? $staropt$star$1[0] : /* [] */0;
  return _prepare(Puppeteer.launch({
                  ignoreHTTPSErrors: undefined,
                  executablePath: undefined,
                  slowMo: undefined,
                  args: undefined,
                  handleSIGINT: undefined,
                  timeout: undefined,
                  dumpio: undefined,
                  userDataDir: undefined,
                  headless: false
                }), config, scriptFilePathList, fileName, browser, page, state);
}

function handleAfterAll(browser, state) {
  return Js_option.getExn(browser).close().then((function () {
                var match = Benchmark$WonderBenchmark.needGenerateData(state);
                return Promise.resolve(match !== 0 ? Benchmark$WonderBenchmark.generateDataFile(state) : state);
              }));
}

export {
  $$setTimeout         ,
  _prepare             ,
  prepareForHeadless   ,
  prepareForNoHeadless ,
  handleAfterAll       ,
  
}
/* setTimeout Not a pure module */
