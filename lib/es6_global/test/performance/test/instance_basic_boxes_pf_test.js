// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as Curry                     from "../../../../../node_modules/bs-platform/lib/es6/curry.js";
import * as Sinon                     from "../../../../../node_modules/wonder-bs-sinon/lib/es6_global/src/sinon.js";
import * as Sinon$1                   from "sinon";
import * as Wonder_jest               from "../../../../../node_modules/wonder-bs-jest/lib/es6_global/src/wonder_jest.js";
import * as BenchmarkTool$Wonderjs    from "./tool/BenchmarkTool.js";
import * as Benchmark$WonderBenchmark from "../../../../../node_modules/wonder-benchmark/lib/es6_global/src/Benchmark.js";

describe("instance + basic boxes", (function () {
        var sandbox = Sinon.getSandboxDefaultVal(/* () */0);
        var state = [Benchmark$WonderBenchmark.createEmptyState(/* () */0)];
        var browser = [/* None */0];
        var page = [/* None */0];
        beforeAll((function () {
                return BenchmarkTool$Wonderjs.prepareForHeadless(/* None */0, /* Some */[/* :: */[
                              "./test/performance/js/BasicBoxesTool.js",
                              /* :: */[
                                "./test/performance/js/InstanceBasicBoxesTool.js",
                                /* :: */[
                                  "./test/performance/js/CameraTool.js",
                                  /* [] */0
                                ]
                              ]
                            ]], "instance_basic_boxes.json", browser, page, state);
              }));
        afterAll((function () {
                return BenchmarkTool$Wonderjs.handleAfterAll(browser[0], state[0]);
              }));
        beforeEach((function () {
                sandbox[0] = Sinon$1.sandbox.create();
                return /* () */0;
              }));
        afterEach((function () {
                return Curry._1(Sinon.restoreSandbox, sandbox[0]);
              }));
        describe("test static", (function () {
                describe("test hardware instance", (function () {
                        return Wonder_jest.testPromise("create 100k boxes", (function () {
                                      var body = ( function() {
                var state = wd.setMainConfig({
                    isTest: false
                });

                return initSample(state);



                function initSample(state) {
var n1 = performance.now();

                var data = InstanceBasicBoxesTool.createBoxes(1, 60000, true, state);
                    var state = data[0];
                    var boxes = data[1];

                    var data = InstanceBasicBoxesTool.setPosition(boxes, state);
                    var state = data[0];
                    var boxes = data[1];

                    var data = InstanceBasicBoxesTool.createCamera(state);
                    var state = data[0];

var n2 = performance.now();

                    var state = wd.initDirector(state);



                    /* var state = wd.setState(state); */


var n3 = performance.now();
                    var state = wd.loopBody(100.0, state);




var n4 = performance.now();


                    /* return state; */




return {"errorRate": 10, "textArray": ["prepare", "init", "loopBody"], "timeArray": [n1, n2, n3, n4] }
                }
}
);
                                      return Benchmark$WonderBenchmark.compare(/* tuple */[
                                                  Wonder_jest.Expect[/* expect */0],
                                                  Wonder_jest.Expect[/* toBe */2]
                                                ], Benchmark$WonderBenchmark.exec("create_100k_boxes_hardware", body, state[0]));
                                    }));
                      }));
                describe("test batch instance", (function () {
                        return Wonder_jest.testPromise("create 2k boxes", (function () {
                                      var body = ( function() {
                var state = wd.setMainConfig({
                    isTest: false,
                    gpuConfig: {
useHardwareInstance:false
                    }
                });

                return initSample(state);



                function initSample(state) {
var n1 = performance.now();

                var data = InstanceBasicBoxesTool.createBoxes(1, 2000, true, state);
                    var state = data[0];
                    var boxes = data[1];

                    var data = InstanceBasicBoxesTool.setPosition(boxes, state);
                    var state = data[0];
                    var boxes = data[1];

                    var data = InstanceBasicBoxesTool.createCamera(state);
                    var state = data[0];

var n2 = performance.now();

                    var state = wd.initDirector(state);



var n3 = performance.now();
                    var state = wd.loopBody(100.0, state);




var n4 = performance.now();


return {"errorRate": 10, "textArray": ["prepare", "init", "loopBody"], "timeArray": [n1, n2, n3, n4] }
                }
}
);
                                      return Benchmark$WonderBenchmark.compare(/* tuple */[
                                                  Wonder_jest.Expect[/* expect */0],
                                                  Wonder_jest.Expect[/* toBe */2]
                                                ], Benchmark$WonderBenchmark.exec("create_2k_boxes_batch", body, state[0]));
                                    }));
                      }));
                return /* () */0;
              }));
        describe("test dynamic", (function () {
                Wonder_jest.testPromise("create 10k boxes+transform", (function () {
                        var body = ( function() {
                var state = wd.setMainConfig({
                    isTest: false
                });

                return initSample(state);



                function initSample(state) {
var n1 = performance.now();

                var data = InstanceBasicBoxesTool.createBoxes(1, 10000, false, state);
                    var state = data[0];
                    var boxes = data[1];

                    var data = InstanceBasicBoxesTool.setPosition(boxes, state);
                    var state = data[0];
                    var boxes = data[1];

                    var data = InstanceBasicBoxesTool.createCamera(state);
                    var state = data[0];



                    var state = InstanceBasicBoxesTool.setData(boxes, state);


var n2 = performance.now();

                    var state = wd.initDirector(state);





var n3 = performance.now();
                    var state = wd.loopBody(100.0, state);




var n4 = performance.now();





return {"errorRate": 10, "textArray": ["prepare", "init", "loopBody"], "timeArray": [n1, n2, n3, n4] }
                }
}
);
                        return Benchmark$WonderBenchmark.compare(/* tuple */[
                                    Wonder_jest.Expect[/* expect */0],
                                    Wonder_jest.Expect[/* toBe */2]
                                  ], Benchmark$WonderBenchmark.exec("create_10k_boxes+transform", body, state[0]));
                      }));
                Wonder_jest.testPromise("create 10k boxes+transform+set parent", (function () {
                        var body = ( function() {
                var state = wd.setMainConfig({
                    isTest: false
                });

                return initSample(state);



                function initSample(state) {
var n1 = performance.now();

                var data = InstanceBasicBoxesTool.createBoxesWithHierachy(5000, false, state);

                    var state = data[0];
                    var boxes = data[1];

                    var data = InstanceBasicBoxesTool.setPosition(boxes, state);
                    var state = data[0];
                    var boxes = data[1];

                    var data = InstanceBasicBoxesTool.createCamera(state);
                    var state = data[0];



                    var state = InstanceBasicBoxesTool.setData(boxes, state);


var n2 = performance.now();

                    var state = wd.initDirector(state);





var n3 = performance.now();
                    var state = wd.loopBody(100.0, state);




var n4 = performance.now();





return {"errorRate": 10, "textArray": ["prepare", "init", "loopBody"], "timeArray": [n1, n2, n3, n4] }
                }
}
);
                        return Benchmark$WonderBenchmark.compare(/* tuple */[
                                    Wonder_jest.Expect[/* expect */0],
                                    Wonder_jest.Expect[/* toBe */2]
                                  ], Benchmark$WonderBenchmark.exec("create_10k_boxes+transform+set_parent", body, state[0]));
                      }));
                Wonder_jest.testPromise("create and dispose 200(sourceInstance box)*5(objectInstance box)", (function () {
                        var body = ( function() {
                var state = wd.setMainConfig({
                    isTest: false
                });

                return initSample(state);



                function initSample(state) {
var n1 = performance.now();

                var data = InstanceBasicBoxesTool.createBoxes(1, 1, false, state);

                    var state = data[0];
                    var boxes = data[1];

                    var data = InstanceBasicBoxesTool.setPosition(boxes, state);
                    var state = data[0];
                    var boxes = data[1];

                    var data = InstanceBasicBoxesTool.createCamera(state);
                    var state = data[0];



                var state = InstanceBasicBoxesTool.createAndDisposeSourceInstanceGameObjects(boxes, state);


var n2 = performance.now();

                    var state = wd.initDirector(state);





var n3 = performance.now();
                    var state = wd.loopBody(100.0, state);

var n4 = performance.now();
                    var state = wd.loopBody(200.0, state);



var n5 = performance.now();





return {"errorRate": 10, "textArray": ["prepare", "init", "loopBody1", "loopBody2"], "timeArray": [n1, n2, n3, n4, n5] }
                }
}
);
                        return Benchmark$WonderBenchmark.compare(/* tuple */[
                                    Wonder_jest.Expect[/* expect */0],
                                    Wonder_jest.Expect[/* toBe */2]
                                  ], Benchmark$WonderBenchmark.exec("createAndDispose_200_5_boxes", body, state[0]));
                      }));
                return Wonder_jest.testPromise("create and dispose 1(sourceInstance box)*2k(objectInstance box)", (function () {
                              var body = ( function() {
                var state = wd.setMainConfig({
                    isTest: false
                });

                return initSample(state);



                function initSample(state) {
var n1 = performance.now();

                var data = InstanceBasicBoxesTool.createBoxes(1, 1, false, state);

                    var state = data[0];
                    var boxes = data[1];

                    var data = InstanceBasicBoxesTool.setPosition(boxes, state);
                    var state = data[0];
                    var boxes = data[1];

                    var data = InstanceBasicBoxesTool.createCamera(state);
                    var state = data[0];



                var state = InstanceBasicBoxesTool.createAndDisposeObjectInstanceGameObjects(boxes, state);


var n2 = performance.now();

                    var state = wd.initDirector(state);





var n3 = performance.now();
                    var state = wd.loopBody(100.0, state);

var n4 = performance.now();
                    var state = wd.loopBody(200.0, state);



var n5 = performance.now();





return {"errorRate": 10, "textArray": ["prepare", "init", "loopBody1", "loopBody2"], "timeArray": [n1, n2, n3, n4, n5] }
                }
}
);
                              return Benchmark$WonderBenchmark.compare(/* tuple */[
                                          Wonder_jest.Expect[/* expect */0],
                                          Wonder_jest.Expect[/* toBe */2]
                                        ], Benchmark$WonderBenchmark.exec("createAndDispose_1_2k_boxes", body, state[0]));
                            }));
              }));
        return /* () */0;
      }));

export {
  
}
/*  Not a pure module */
