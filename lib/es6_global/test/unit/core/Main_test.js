// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as Curry                       from "../../../../../node_modules/bs-platform/lib/es6/curry.js";
import * as Sinon                       from "../../../../../node_modules/wonder-bs-sinon/lib/es6_global/src/sinon.js";
import * as Sinon$1                     from "sinon";
import * as Wonder_jest                 from "../../../../../node_modules/wonder-bs-jest/lib/es6_global/src/wonder_jest.js";
import * as Main$Wonderjs               from "../../../src/core/api/Main.js";
import * as DomTool$Wonderjs            from "../tool/DomTool.js";
import * as MainTool$Wonderjs           from "../tool/core/MainTool.js";
import * as StateData$Wonderjs          from "../../../src/core/StateData.js";
import * as ViewSystem$Wonderjs         from "../../../src/renderer/device/ViewSystem.js";
import * as GpuDetectTool$Wonderjs      from "../tool/render/device/GpuDetectTool.js";
import * as GpuConfigSystem$Wonderjs    from "../../../src/config/GpuConfigSystem.js";
import * as InitConfigSystem$Wonderjs   from "../../../src/renderer/config/init/InitConfigSystem.js";
import * as BufferConfigSystem$Wonderjs from "../../../src/config/BufferConfigSystem.js";

describe("Main", (function () {
        var sandbox = Sinon.getSandboxDefaultVal(/* () */0);
        beforeEach((function () {
                sandbox[0] = Sinon$1.sandbox.create();
                return /* () */0;
              }));
        afterEach((function () {
                return Curry._1(Sinon.restoreSandbox, sandbox[0]);
              }));
        describe("setMainConfig", (function () {
                describe("isTest", (function () {
                        describe("if true", (function () {
                                return Wonder_jest.test("it will open wonder.js contract check", (function () {
                                              MainTool$Wonderjs.buildFakeDomForNotPassCanvasId(sandbox);
                                              Main$Wonderjs.setMainConfig(MainTool$Wonderjs.buildMainConfig(/* None */0, /* None */0, /* None */0, /* Some */[true], /* None */0, /* () */0));
                                              return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](InitConfigSystem$Wonderjs.getIsTest(StateData$Wonderjs.stateData)), /* true */1);
                                            }));
                              }));
                        return /* () */0;
                      }));
                describe("canvasId", (function () {
                        describe("if pass canvas id", (function () {
                                Wonder_jest.test("if correspond canvas don't exist, error", (function () {
                                        return Wonder_jest.Expect[/* toThrowMessage */20]("canvas whose id is a should exist", Wonder_jest.Expect[/* expect */0]((function () {
                                                          return Main$Wonderjs.setMainConfig(MainTool$Wonderjs.buildMainConfig(/* None */0, /* None */0, /* Some */["a"], /* None */0, /* None */0, /* () */0));
                                                        })));
                                      }));
                                describe("else", (function () {
                                        beforeEach((function () {
                                                var canvasDom = {
                                                  id: "a",
                                                  getContext: MainTool$Wonderjs.createGetContextStub(MainTool$Wonderjs.buildFakeGl(sandbox), sandbox)
                                                };
                                                Sinon.returns(/* :: */[
                                                      canvasDom,
                                                      /* [] */0
                                                    ], Sinon.withOneArg("#a", Curry._3(Sinon.createMethodStub, sandbox[0], document, "querySelectorAll")));
                                                return /* () */0;
                                              }));
                                        Wonder_jest.test("save canvas to state and get webgl1 context from it", (function () {
                                                return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](DomTool$Wonderjs.getId(ViewSystem$Wonderjs.getCanvas(Main$Wonderjs.setMainConfig(MainTool$Wonderjs.buildMainConfig(/* None */0, /* None */0, /* Some */["a"], /* None */0, /* None */0, /* () */0))))), "a");
                                              }));
                                        return Wonder_jest.test("suppport pass canvas id which starts with #", (function () {
                                                      return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](DomTool$Wonderjs.getId(ViewSystem$Wonderjs.getCanvas(Main$Wonderjs.setMainConfig(MainTool$Wonderjs.buildMainConfig(/* None */0, /* None */0, /* Some */["#a"], /* None */0, /* None */0, /* () */0))))), "a");
                                                    }));
                                      }));
                                return /* () */0;
                              }));
                        describe("else", (function () {
                                var exec = function () {
                                  var match = MainTool$Wonderjs.buildFakeDomForNotPassCanvasId(sandbox);
                                  Main$Wonderjs.setMainConfig(MainTool$Wonderjs.buildMainConfig(/* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* () */0));
                                  return /* tuple */[
                                          match[0],
                                          match[2],
                                          match[3]
                                        ];
                                };
                                Wonder_jest.test("test create canvas", (function () {
                                        var match = exec(/* () */0);
                                        return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](match[1].innerHTML), "<canvas></canvas>");
                                      }));
                                return Wonder_jest.test("prepend to body", (function () {
                                              var match = exec(/* () */0);
                                              return Sinon.toCalledWith(/* :: */[
                                                          match[0],
                                                          /* [] */0
                                                        ], Wonder_jest.Expect[/* expect */0](match[2].prepend));
                                            }));
                              }));
                        return /* () */0;
                      }));
                describe("contextConfig", (function () {
                        describe("if pass contextConfig", (function () {
                                return Wonder_jest.test("set webgl context option by passed data.(use default value if the field isn't passed)", (function () {
                                              var match = MainTool$Wonderjs.buildFakeDomForNotPassCanvasId(sandbox);
                                              Main$Wonderjs.setMainConfig(MainTool$Wonderjs.buildMainConfig(/* None */0, /* None */0, /* None */0, /* None */0, /* Some */[{
                                                          alpha: undefined,
                                                          depth: undefined,
                                                          stencil: true,
                                                          antialias: false,
                                                          premultipliedAlpha: true,
                                                          preserveDrawingBuffer: false
                                                        }], /* () */0));
                                              return Sinon.toCalledWith(/* :: */[
                                                          Sinon$1.match.any,
                                                          /* :: */[
                                                            {
                                                              alpha: true,
                                                              depth: true,
                                                              stencil: true,
                                                              antialias: false,
                                                              premultipliedAlpha: true,
                                                              preserveDrawingBuffer: false
                                                            },
                                                            /* [] */0
                                                          ]
                                                        ], Wonder_jest.Expect[/* expect */0](match[0].getContext));
                                            }));
                              }));
                        describe("else", (function () {
                                return Wonder_jest.test("set default webgl context option", (function () {
                                              var match = MainTool$Wonderjs.buildFakeDomForNotPassCanvasId(sandbox);
                                              Main$Wonderjs.setMainConfig(MainTool$Wonderjs.buildMainConfig(/* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* () */0));
                                              return Sinon.toCalledWith(/* :: */[
                                                          Sinon$1.match.any,
                                                          /* :: */[
                                                            {
                                                              alpha: true,
                                                              depth: true,
                                                              stencil: false,
                                                              antialias: true,
                                                              premultipliedAlpha: true,
                                                              preserveDrawingBuffer: false
                                                            },
                                                            /* [] */0
                                                          ]
                                                        ], Wonder_jest.Expect[/* expect */0](match[0].getContext));
                                            }));
                              }));
                        return Wonder_jest.test("set to state", (function () {
                                      MainTool$Wonderjs.buildFakeDomForNotPassCanvasId(sandbox);
                                      var state = Main$Wonderjs.setMainConfig(MainTool$Wonderjs.buildMainConfig(/* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* () */0));
                                      return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](ViewSystem$Wonderjs.getContextConfig(state)), /* record */[
                                                  /* alpha : true */1,
                                                  /* depth : true */1,
                                                  /* stencil : false */0,
                                                  /* antialias : true */1,
                                                  /* premultipliedAlpha : true */1,
                                                  /* preserveDrawingBuffer : false */0
                                                ]);
                                    }));
                      }));
                describe("bufferConfig", (function () {
                        var _buildBufferConfig = function ($staropt$star, _) {
                          return {
                                  geometryPointDataBufferCount: $staropt$star ? $staropt$star[0] : undefined
                                };
                        };
                        var _buildExpectedBufferConfig = function ($staropt$star, _) {
                          var geometryPointDataBufferCount = $staropt$star ? $staropt$star[0] : 1000000;
                          return /* record */[/* geometryPointDataBufferCount */geometryPointDataBufferCount];
                        };
                        describe("if pass bufferConfig", (function () {
                                return Wonder_jest.test("set to state (use default value if the field isn't passed)", (function () {
                                              MainTool$Wonderjs.buildFakeDomForNotPassCanvasId(sandbox);
                                              var state = Main$Wonderjs.setMainConfig(MainTool$Wonderjs.buildMainConfig(/* Some */[_buildBufferConfig(/* Some */[200], /* () */0)], /* None */0, /* None */0, /* None */0, /* None */0, /* () */0));
                                              return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](BufferConfigSystem$Wonderjs.getConfig(state)), _buildExpectedBufferConfig(/* Some */[200], /* () */0));
                                            }));
                              }));
                        describe("else", (function () {
                                return Wonder_jest.test("set default data", (function () {
                                              MainTool$Wonderjs.buildFakeDomForNotPassCanvasId(sandbox);
                                              var state = Main$Wonderjs.setMainConfig(MainTool$Wonderjs.buildMainConfig(/* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* () */0));
                                              return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](BufferConfigSystem$Wonderjs.getConfig(state)), _buildExpectedBufferConfig(/* Some */[1000000], /* () */0));
                                            }));
                              }));
                        return /* () */0;
                      }));
                describe("gpuConfig", (function () {
                        var _buildGpuConfig = function ($staropt$star, _) {
                          return {
                                  useHardwareInstance: $staropt$star ? $staropt$star[0] : undefined
                                };
                        };
                        var _buildExpectedGpuConfig = function ($staropt$star, _) {
                          var useHardwareInstance = $staropt$star ? $staropt$star[0] : true;
                          return /* record */[/* useHardwareInstance */+useHardwareInstance];
                        };
                        describe("if pass gpuConfig", (function () {
                                return Wonder_jest.test("set to state (use default value if the field isn't passed)", (function () {
                                              MainTool$Wonderjs.buildFakeDomForNotPassCanvasId(sandbox);
                                              var useHardwareInstance = false;
                                              var state = Main$Wonderjs.setMainConfig(MainTool$Wonderjs.buildMainConfig(/* None */0, /* Some */[_buildGpuConfig(/* Some */[useHardwareInstance], /* () */0)], /* None */0, /* None */0, /* None */0, /* () */0));
                                              return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](GpuConfigSystem$Wonderjs.getConfig(state)), _buildExpectedGpuConfig(/* Some */[useHardwareInstance], /* () */0));
                                            }));
                              }));
                        describe("else", (function () {
                                return Wonder_jest.test("set default data", (function () {
                                              MainTool$Wonderjs.buildFakeDomForNotPassCanvasId(sandbox);
                                              var state = Main$Wonderjs.setMainConfig(MainTool$Wonderjs.buildMainConfig(/* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* () */0));
                                              return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](GpuConfigSystem$Wonderjs.getConfig(state)), _buildExpectedGpuConfig(/* Some */[true], /* () */0));
                                            }));
                              }));
                        return /* () */0;
                      }));
                describe("detect gpu", (function () {
                        describe("detect extension", (function () {
                                return Wonder_jest.test("detect instanced_arrays", (function () {
                                              var match = MainTool$Wonderjs.buildFakeDomForNotPassCanvasId(sandbox);
                                              Main$Wonderjs.setMainConfig(MainTool$Wonderjs.buildMainConfig(/* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* () */0));
                                              return Sinon.toCalledWith(/* :: */[
                                                          "ANGLE_instanced_arrays",
                                                          /* [] */0
                                                        ], Wonder_jest.Expect[/* expect */0](match[1].getExtension));
                                            }));
                              }));
                        describe("detect capabilty", (function () {
                                var _prepare = function (sandbox) {
                                  var warn = Sinon.createMethodStubWithJsObjSandbox(sandbox, console, "warn");
                                  var match = MainTool$Wonderjs.buildFakeDomForNotPassCanvasId(sandbox);
                                  var fakeGl = match[1];
                                  Sinon.returns({
                                        precision: 0
                                      }, fakeGl.getShaderPrecisionFormat);
                                  return /* tuple */[
                                          fakeGl,
                                          warn,
                                          0,
                                          1,
                                          2,
                                          3
                                        ];
                                };
                                Wonder_jest.test("if highp is available, use highp", (function () {
                                        var match = _prepare(sandbox);
                                        var highFloat = match[4];
                                        var fakeGl = match[0];
                                        Sinon.returns({
                                              precision: 1
                                            }, Sinon.withTwoArgs(match[2], highFloat, fakeGl.getShaderPrecisionFormat));
                                        Sinon.returns({
                                              precision: 1
                                            }, Sinon.withTwoArgs(match[3], highFloat, fakeGl.getShaderPrecisionFormat));
                                        var state = Main$Wonderjs.setMainConfig(MainTool$Wonderjs.buildMainConfig(/* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* () */0));
                                        return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](GpuDetectTool$Wonderjs.getData(state)[/* precision */1]), /* Some */[/* HIGHP */0]);
                                      }));
                                Wonder_jest.test("else if mediump is available, warn and use mediump", (function () {
                                        var match = _prepare(sandbox);
                                        var mediumFloat = match[5];
                                        var fakeGl = match[0];
                                        Sinon.returns({
                                              precision: 1
                                            }, Sinon.withTwoArgs(match[2], mediumFloat, fakeGl.getShaderPrecisionFormat));
                                        Sinon.returns({
                                              precision: 1
                                            }, Sinon.withTwoArgs(match[3], mediumFloat, fakeGl.getShaderPrecisionFormat));
                                        var state = Main$Wonderjs.setMainConfig(MainTool$Wonderjs.buildMainConfig(/* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* () */0));
                                        return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](/* tuple */[
                                                        Sinon.getCallCount(match[1]),
                                                        GpuDetectTool$Wonderjs.getData(state)[/* precision */1]
                                                      ]), /* tuple */[
                                                    1,
                                                    /* Some */[/* MEDIUMP */1]
                                                  ]);
                                      }));
                                return Wonder_jest.test("else, warn and use lowp", (function () {
                                              var match = _prepare(sandbox);
                                              var state = Main$Wonderjs.setMainConfig(MainTool$Wonderjs.buildMainConfig(/* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* () */0));
                                              return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](/* tuple */[
                                                              Sinon.getCallCount(match[1]),
                                                              GpuDetectTool$Wonderjs.getData(state)[/* precision */1]
                                                            ]), /* tuple */[
                                                          1,
                                                          /* Some */[/* LOWP */2]
                                                        ]);
                                            }));
                              }));
                        return /* () */0;
                      }));
                return /* () */0;
              }));
        return /* () */0;
      }));

export {
  
}
/*  Not a pure module */
