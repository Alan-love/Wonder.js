// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as Curry                         from "../../../../../../node_modules/bs-platform/lib/es6/curry.js";
import * as Sinon                         from "../../../../../../node_modules/wonder-bs-sinon/lib/es6_global/src/sinon.js";
import * as Sinon$1                       from "sinon";
import * as Caml_array                    from "../../../../../../node_modules/bs-platform/lib/es6/caml_array.js";
import * as Wonder_jest                   from "../../../../../../node_modules/wonder-bs-jest/lib/es6_global/src/wonder_jest.js";
import * as Material$Wonderjs             from "../../../../src/ecs/component/api/material/Material.js";
import * as TestTool$Wonderjs             from "../../tool/TestTool.js";
import * as CloneTool$Wonderjs            from "../../tool/core/CloneTool.js";
import * as StateTool$Wonderjs            from "../../tool/core/StateTool.js";
import * as Transform$Wonderjs            from "../../../../src/ecs/component/api/transform/Transform.js";
import * as FakeGlTool$Wonderjs           from "../../tool/gl/FakeGlTool.js";
import * as GameObject$Wonderjs           from "../../../../src/ecs/admin/api/GameObject.js";
import * as GeometryTool$Wonderjs         from "../../tool/component/geometry/GeometryTool.js";
import * as MaterialTool$Wonderjs         from "../../tool/component/material/MaterialTool.js";
import * as Vector3System$Wonderjs        from "../../../../src/structure/Vector3System.js";
import * as GameObjectTool$Wonderjs       from "../../tool/core/GameObjectTool.js";
import * as BoxGeometryTool$Wonderjs      from "../../tool/component/geometry/BoxGeometryTool.js";
import * as BufferConfigTool$Wonderjs     from "../../tool/config/BufferConfigTool.js";
import * as MeshRendererTool$Wonderjs     from "../../tool/component/meshRenderer/MeshRendererTool.js";
import * as BasicMaterialTool$Wonderjs    from "../../tool/component/material/BasicMaterialTool.js";
import * as PerspectiveCamera$Wonderjs    from "../../../../src/ecs/component/api/cameraController/PerspectiveCamera.js";
import * as ObjectInstanceTool$Wonderjs   from "../../tool/component/instance/ObjectInstanceTool.js";
import * as SourceInstanceTool$Wonderjs   from "../../tool/component/instance/SourceInstanceTool.js";
import * as CameraControllerTool$Wonderjs from "../../tool/component/cameraController/CameraControllerTool.js";

describe("clone gameObject", (function () {
        var sandbox = Sinon.getSandboxDefaultVal(/* () */0);
        var state = [StateTool$Wonderjs.createState(/* None */0, /* () */0)];
        var _cloneGameObject = function (gameObject, count, state) {
          return CloneTool$Wonderjs.cloneGameObject(gameObject, count, /* false */0, state);
        };
        var _getClonedTransformDataArr = function (gameObject, count, state) {
          var match = _cloneGameObject(gameObject, count, state);
          var clonedGameObjectArr = match[1];
          var state$1 = match[0];
          return /* tuple */[
                  CloneTool$Wonderjs.getFlattenClonedGameObjectArr(clonedGameObjectArr),
                  CloneTool$Wonderjs.getFlattenClonedGameObjectArr(clonedGameObjectArr).map((function (clonedGameObject) {
                          return GameObject$Wonderjs.getGameObjectTransformComponent(clonedGameObject, state$1);
                        }))
                ];
        };
        beforeEach((function () {
                sandbox[0] = Sinon$1.sandbox.create();
                state[0] = TestTool$Wonderjs.init(sandbox, /* None */0, /* Some */[BufferConfigTool$Wonderjs.buildBufferConfig(1000)], /* () */0);
                return /* () */0;
              }));
        afterEach((function () {
                return Curry._1(Sinon.restoreSandbox, sandbox[0]);
              }));
        Wonder_jest.test("clone gameObject", (function () {
                var match = GameObject$Wonderjs.createGameObject(state[0]);
                var match$1 = _cloneGameObject(match[1], 2, match[0]);
                return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](match$1[1]), /* array */[/* int array */[
                              1,
                              2
                            ]]);
              }));
        describe("clone components", (function () {
                describe("contract check", (function () {
                        Wonder_jest.test("shouldn't clone sourceInstance gameObject", (function () {
                                var match = SourceInstanceTool$Wonderjs.createSourceInstanceGameObject(state[0]);
                                var gameObject = match[1];
                                var state$1 = match[0];
                                return Wonder_jest.Expect[/* toThrowMessage */20]("shouldn't clone sourceInstance gameObject", Wonder_jest.Expect[/* expect */0]((function () {
                                                  _cloneGameObject(gameObject, 2, state$1);
                                                  return /* () */0;
                                                })));
                              }));
                        return Wonder_jest.test("shouldn't clone objectInstance gameObject", (function () {
                                      var match = ObjectInstanceTool$Wonderjs.createObjectInstanceGameObject(state[0]);
                                      var objectInstanceGameObject = match[3];
                                      var state$1 = match[0];
                                      return Wonder_jest.Expect[/* toThrowMessage */20]("shouldn't clone objectInstance gameObject", Wonder_jest.Expect[/* expect */0]((function () {
                                                        _cloneGameObject(objectInstanceGameObject, 2, state$1);
                                                        return /* () */0;
                                                      })));
                                    }));
                      }));
                describe("test clone meshRenderer component", (function () {
                        Wonder_jest.test("test clone specific count of meshRenderers", (function () {
                                var match = MeshRendererTool$Wonderjs.createGameObject(state[0]);
                                var match$1 = _cloneGameObject(match[1], 2, match[0]);
                                var state$1 = match$1[0];
                                return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](CloneTool$Wonderjs.getFlattenClonedGameObjectArr(match$1[1]).map((function (clonedGameObject) {
                                                      return GameObject$Wonderjs.getGameObjectMeshRendererComponent(clonedGameObject, state$1);
                                                    })).length), 2);
                              }));
                        return Wonder_jest.test("add cloned gameObject to renderGameObjectArray", (function () {
                                      var match = MeshRendererTool$Wonderjs.createGameObject(state[0]);
                                      var gameObject1 = match[1];
                                      var match$1 = _cloneGameObject(gameObject1, 2, match[0]);
                                      return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](MeshRendererTool$Wonderjs.getRenderArray(match$1[0])), /* int array */[gameObject1].concat(CloneTool$Wonderjs.getFlattenClonedGameObjectArr(match$1[1])));
                                    }));
                      }));
                describe("test clone geometry component", (function () {
                        var _createAndInitGameObject = function (state) {
                          var match = BoxGeometryTool$Wonderjs.createGameObject(state);
                          var gameObject1 = match[1];
                          var state$1 = GameObject$Wonderjs.initGameObject(gameObject1, match[0]);
                          return /* tuple */[
                                  state$1,
                                  gameObject1,
                                  match[2]
                                ];
                        };
                        var _prepare = function (state) {
                          var match = _createAndInitGameObject(state);
                          return CloneTool$Wonderjs.cloneWithGeometry(match[0], match[1], match[2], 2);
                        };
                        return Wonder_jest.test("test clone specific count of geometrys", (function () {
                                      var match = _prepare(state[0]);
                                      return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](match[4].length), 2);
                                    }));
                      }));
                describe("test clone material component", (function () {
                        var _prepare = function () {
                          var match = BasicMaterialTool$Wonderjs.createGameObject(state[0]);
                          var material1 = match[2];
                          var gameObject1 = match[1];
                          var state$1 = MaterialTool$Wonderjs.setShaderIndex(material1, 1, match[0]);
                          var match$1 = _cloneGameObject(gameObject1, 2, state$1);
                          var clonedGameObjectArr = match$1[1];
                          var state$2 = match$1[0];
                          return /* tuple */[
                                  state$2,
                                  gameObject1,
                                  material1,
                                  CloneTool$Wonderjs.getFlattenClonedGameObjectArr(clonedGameObjectArr),
                                  CloneTool$Wonderjs.getFlattenClonedGameObjectArr(clonedGameObjectArr).map((function (clonedGameObject) {
                                          return GameObject$Wonderjs.getGameObjectMaterialComponent(clonedGameObject, state$2);
                                        }))
                                ];
                        };
                        Wonder_jest.test("test clone specific count of materials", (function () {
                                var match = _prepare(/* () */0);
                                return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](match[4].length), 2);
                              }));
                        describe("test init cloned material", (function () {
                                return Wonder_jest.test("can correctly set cloned one's shader index", (function () {
                                              var match = _prepare(/* () */0);
                                              var clonedMaterialArr = match[4];
                                              var clonedGameObjectArr = match[3];
                                              var state = FakeGlTool$Wonderjs.setFakeGl(FakeGlTool$Wonderjs.buildFakeGl(sandbox, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* () */0), match[0]);
                                              var state$1 = MaterialTool$Wonderjs.prepareForInit(state);
                                              var state$2 = GameObject$Wonderjs.initGameObject(Caml_array.caml_array_get(clonedGameObjectArr, 1), GameObject$Wonderjs.initGameObject(Caml_array.caml_array_get(clonedGameObjectArr, 0), state$1));
                                              return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](/* tuple */[
                                                              MaterialTool$Wonderjs.unsafeGetShaderIndex(Caml_array.caml_array_get(clonedMaterialArr, 0), state$2),
                                                              MaterialTool$Wonderjs.unsafeGetShaderIndex(Caml_array.caml_array_get(clonedMaterialArr, 1), state$2)
                                                            ]), /* tuple */[
                                                          1,
                                                          1
                                                        ]);
                                            }));
                              }));
                        Wonder_jest.test("add cloned material's gameObject to map", (function () {
                                var match = _prepare(/* () */0);
                                var clonedMaterialArr = match[4];
                                var clonedGameObjectArr = match[3];
                                var state = match[0];
                                return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](/* tuple */[
                                                Material$Wonderjs.getMaterialGameObject(Caml_array.caml_array_get(clonedMaterialArr, 0), state),
                                                Material$Wonderjs.getMaterialGameObject(Caml_array.caml_array_get(clonedMaterialArr, 1), state)
                                              ]), /* tuple */[
                                            Caml_array.caml_array_get(clonedGameObjectArr, 0),
                                            Caml_array.caml_array_get(clonedGameObjectArr, 1)
                                          ]);
                              }));
                        describe("set cloned material data", (function () {
                                var _prepare = function () {
                                  var match = BasicMaterialTool$Wonderjs.createGameObject(state[0]);
                                  return /* tuple */[
                                          match[0],
                                          match[1],
                                          match[2]
                                        ];
                                };
                                var _clone = function (gameObject, state) {
                                  var match = _cloneGameObject(gameObject, 2, state);
                                  var clonedGameObjectArr = match[1];
                                  var state$1 = match[0];
                                  return /* tuple */[
                                          state$1,
                                          CloneTool$Wonderjs.getFlattenClonedGameObjectArr(clonedGameObjectArr),
                                          CloneTool$Wonderjs.getFlattenClonedGameObjectArr(clonedGameObjectArr).map((function (clonedGameObject) {
                                                  return GameObject$Wonderjs.getGameObjectMaterialComponent(clonedGameObject, state$1);
                                                }))
                                        ];
                                };
                                return Wonder_jest.test("set color", (function () {
                                              var match = _prepare(/* () */0);
                                              var color = /* float array */[
                                                1,
                                                0.2,
                                                0.3
                                              ];
                                              var state = Material$Wonderjs.setMaterialColor(match[2], color, match[0]);
                                              var match$1 = _clone(match[1], state);
                                              var clonedMaterialArr = match$1[2];
                                              var state$1 = FakeGlTool$Wonderjs.setFakeGl(FakeGlTool$Wonderjs.buildFakeGl(sandbox, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* () */0), match$1[0]);
                                              var state$2 = MaterialTool$Wonderjs.prepareForInit(state$1);
                                              return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](/* tuple */[
                                                              Material$Wonderjs.getMaterialColor(Caml_array.caml_array_get(clonedMaterialArr, 0), state$2),
                                                              Material$Wonderjs.getMaterialColor(Caml_array.caml_array_get(clonedMaterialArr, 1), state$2)
                                                            ]), /* tuple */[
                                                          color,
                                                          color
                                                        ]);
                                            }));
                              }));
                        describe("fix bug", (function () {
                                return Wonder_jest.test("if source material's shaderIndex not exist, not set cloned material's shaderIndex", (function () {
                                              var match = BasicMaterialTool$Wonderjs.createGameObject(state[0]);
                                              var match$1 = _cloneGameObject(match[1], 1, match[0]);
                                              var state$1 = match$1[0];
                                              var clonedMaterialArr = CloneTool$Wonderjs.getFlattenClonedGameObjectArr(match$1[1]).map((function (clonedGameObject) {
                                                      return GameObject$Wonderjs.getGameObjectMaterialComponent(clonedGameObject, state$1);
                                                    }));
                                              return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](MaterialTool$Wonderjs.hasShaderIndex(Caml_array.caml_array_get(clonedMaterialArr, 0), state$1)), /* false */0);
                                            }));
                              }));
                        return /* () */0;
                      }));
                describe("test clone transform component", (function () {
                        var _prepare = function () {
                          var match = GameObjectTool$Wonderjs.createGameObject(state[0]);
                          var gameObject1 = match[1];
                          var state$1 = match[0];
                          var match$1 = _getClonedTransformDataArr(gameObject1, 2, state$1);
                          return /* tuple */[
                                  state$1,
                                  gameObject1,
                                  match[2],
                                  match$1[0],
                                  match$1[1]
                                ];
                        };
                        Wonder_jest.test("test clone specific count of transforms", (function () {
                                var match = _prepare(/* () */0);
                                return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](match[4].length), 2);
                              }));
                        describe("set cloned transform's localPosition by source transform's localPosition", (function () {
                                Wonder_jest.test("test", (function () {
                                        var match = GameObjectTool$Wonderjs.createGameObject(state[0]);
                                        var pos1 = /* tuple */[
                                          1,
                                          2,
                                          3
                                        ];
                                        var state$1 = Transform$Wonderjs.setTransformLocalPosition(match[2], pos1, match[0]);
                                        var match$1 = _getClonedTransformDataArr(match[1], 2, state$1);
                                        return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](match$1[1].map((function (transform) {
                                                              return Transform$Wonderjs.getTransformLocalPosition(transform, state$1);
                                                            }))), /* array */[
                                                    pos1,
                                                    pos1
                                                  ]);
                                      }));
                                describe("fix bug", (function () {
                                        return Wonder_jest.test("source transform,cloned transforms shouldn't affect each other", (function () {
                                                      var match = GameObjectTool$Wonderjs.createGameObject(state[0]);
                                                      var transform1 = match[2];
                                                      var pos1 = /* tuple */[
                                                        1,
                                                        2,
                                                        3
                                                      ];
                                                      var state$1 = Transform$Wonderjs.setTransformLocalPosition(transform1, pos1, match[0]);
                                                      var match$1 = _getClonedTransformDataArr(match[1], 2, state$1);
                                                      var clonedTransformArr = match$1[1];
                                                      var pos2 = /* tuple */[
                                                        2,
                                                        4,
                                                        6
                                                      ];
                                                      var state$2 = Transform$Wonderjs.setTransformLocalPosition(Caml_array.caml_array_get(clonedTransformArr, 1), pos2, state$1);
                                                      return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](/* tuple */[
                                                                      Transform$Wonderjs.getTransformLocalPosition(transform1, state$2),
                                                                      clonedTransformArr.map((function (transform) {
                                                                              return Transform$Wonderjs.getTransformLocalPosition(transform, state$2);
                                                                            }))
                                                                    ]), /* tuple */[
                                                                  pos1,
                                                                  /* array */[
                                                                    pos1,
                                                                    pos2
                                                                  ]
                                                                ]);
                                                    }));
                                      }));
                                return /* () */0;
                              }));
                        return Wonder_jest.test("add cloned transform's gameObject to map", (function () {
                                      var match = _prepare(/* () */0);
                                      var clonedTransformArr = match[4];
                                      var clonedGameObjectArr = match[3];
                                      var state = match[0];
                                      return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](/* tuple */[
                                                      Transform$Wonderjs.getTransformGameObject(Caml_array.caml_array_get(clonedTransformArr, 0), state),
                                                      Transform$Wonderjs.getTransformGameObject(Caml_array.caml_array_get(clonedTransformArr, 1), state)
                                                    ]), /* tuple */[
                                                  Caml_array.caml_array_get(clonedGameObjectArr, 0),
                                                  Caml_array.caml_array_get(clonedGameObjectArr, 1)
                                                ]);
                                    }));
                      }));
                describe("test clone cameraController component", (function () {
                        var _prepare = function (state) {
                          var match = CameraControllerTool$Wonderjs.createCameraGameObject(state);
                          var gameObject1 = match[1];
                          var match$1 = _cloneGameObject(gameObject1, 2, match[0]);
                          var clonedGameObjectArr = match$1[1];
                          var state$1 = match$1[0];
                          return /* tuple */[
                                  state$1,
                                  gameObject1,
                                  match[3],
                                  clonedGameObjectArr,
                                  CloneTool$Wonderjs.getFlattenClonedGameObjectArr(clonedGameObjectArr).map((function (clonedGameObject) {
                                          return GameObject$Wonderjs.getGameObjectCameraControllerComponent(clonedGameObject, state$1);
                                        }))
                                ];
                        };
                        Wonder_jest.test("test clone specific count of cameraControllers", (function () {
                                var match = _prepare(state[0]);
                                return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](match[4].length), 2);
                              }));
                        Wonder_jest.test("set cloned cameraController's near by source one's near", (function () {
                                var match = _prepare(state[0]);
                                var state$1 = match[0];
                                var sourceNear = PerspectiveCamera$Wonderjs.getPerspectiveCameraNear(match[2], state$1);
                                return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](match[4].map((function (cameraController) {
                                                      return PerspectiveCamera$Wonderjs.getPerspectiveCameraNear(cameraController, state$1);
                                                    }))), /* float array */[
                                            sourceNear,
                                            sourceNear
                                          ]);
                              }));
                        Wonder_jest.test("set cloned cameraController's far by source one's far", (function () {
                                var match = _prepare(state[0]);
                                var state$1 = match[0];
                                var sourceFar = PerspectiveCamera$Wonderjs.getPerspectiveCameraFar(match[2], state$1);
                                return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](match[4].map((function (cameraController) {
                                                      return PerspectiveCamera$Wonderjs.getPerspectiveCameraFar(cameraController, state$1);
                                                    }))), /* float array */[
                                            sourceFar,
                                            sourceFar
                                          ]);
                              }));
                        Wonder_jest.test("set cloned cameraController's fovy by source one's fovy", (function () {
                                var match = _prepare(state[0]);
                                var state$1 = match[0];
                                var sourceFovy = PerspectiveCamera$Wonderjs.getPerspectiveCameraFovy(match[2], state$1);
                                return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](match[4].map((function (cameraController) {
                                                      return PerspectiveCamera$Wonderjs.getPerspectiveCameraFovy(cameraController, state$1);
                                                    }))), /* float array */[
                                            sourceFovy,
                                            sourceFovy
                                          ]);
                              }));
                        return Wonder_jest.test("set cloned cameraController's aspect by source one's aspect", (function () {
                                      var match = _prepare(state[0]);
                                      var state$1 = match[0];
                                      var sourceAspect = PerspectiveCamera$Wonderjs.getPerspectiveCameraAspect(match[2], state$1);
                                      return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](match[4].map((function (cameraController) {
                                                            return PerspectiveCamera$Wonderjs.getPerspectiveCameraAspect(cameraController, state$1);
                                                          }))), /* float array */[
                                                  sourceAspect,
                                                  sourceAspect
                                                ]);
                                    }));
                      }));
                return /* () */0;
              }));
        describe("clone children", (function () {
                describe("test clone gameObject", (function () {
                        return Wonder_jest.test("get all cloned gameObjects(include cloned children)", (function () {
                                      var match = GameObjectTool$Wonderjs.createGameObject(state[0]);
                                      var match$1 = GameObjectTool$Wonderjs.createGameObject(match[0]);
                                      var state$1 = Transform$Wonderjs.setTransformParent(match[2], match$1[2], match$1[0]);
                                      var match$2 = _cloneGameObject(match[1], 2, state$1);
                                      return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](match$2[1]), /* array */[
                                                  /* int array */[
                                                    2,
                                                    3
                                                  ],
                                                  /* int array */[
                                                    4,
                                                    5
                                                  ]
                                                ]);
                                    }));
                      }));
                describe("cloned children's components", (function () {
                        var _createMeshRendererGameObject = function (state) {
                          var match = MeshRendererTool$Wonderjs.createGameObject(state);
                          var gameObject1 = match[1];
                          var state$1 = match[0];
                          return /* tuple */[
                                  state$1,
                                  gameObject1,
                                  match[2],
                                  GameObject$Wonderjs.getGameObjectTransformComponent(gameObject1, state$1)
                                ];
                        };
                        Wonder_jest.test("test clone meshRenderer component", (function () {
                                var match = _createMeshRendererGameObject(state[0]);
                                var match$1 = _createMeshRendererGameObject(match[0]);
                                var state$1 = Transform$Wonderjs.setTransformParent(match[3], match$1[3], match$1[0]);
                                var match$2 = _cloneGameObject(match[1], 2, state$1);
                                var state$2 = match$2[0];
                                return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](CloneTool$Wonderjs.getFlattenClonedGameObjectArr(match$2[1]).map((function (clonedGameObject) {
                                                      return GameObject$Wonderjs.getGameObjectMeshRendererComponent(clonedGameObject, state$2);
                                                    })).length), 4);
                              }));
                        describe("test clone geometry component", (function () {
                                return Wonder_jest.test("test clone specific count of geometrys", (function () {
                                              var match = BoxGeometryTool$Wonderjs.createGameObject(state[0]);
                                              var gameObject1 = match[1];
                                              var state$1 = match[0];
                                              var transform1 = GameObject$Wonderjs.getGameObjectTransformComponent(gameObject1, state$1);
                                              var match$1 = BoxGeometryTool$Wonderjs.createGameObject(state$1);
                                              var state$2 = match$1[0];
                                              var transform2 = GameObject$Wonderjs.getGameObjectTransformComponent(match$1[1], state$2);
                                              var state$3 = Transform$Wonderjs.setTransformParent(transform1, transform2, state$2);
                                              var state$4 = GeometryTool$Wonderjs.initGeometrys(state$3);
                                              var match$2 = _cloneGameObject(gameObject1, 2, state$4);
                                              var state$5 = match$2[0];
                                              return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](CloneTool$Wonderjs.getFlattenClonedGameObjectArr(match$2[1]).map((function (clonedGameObject) {
                                                                    return GameObject$Wonderjs.getGameObjectGeometryComponent(clonedGameObject, state$5);
                                                                  })).length), 4);
                                            }));
                              }));
                        describe("test clone material component", (function () {
                                return Wonder_jest.test("test clone specific count of materials", (function () {
                                              var match = BasicMaterialTool$Wonderjs.createGameObject(state[0]);
                                              var gameObject1 = match[1];
                                              var state$1 = MaterialTool$Wonderjs.setShaderIndex(match[2], 0, match[0]);
                                              var transform1 = GameObject$Wonderjs.getGameObjectTransformComponent(gameObject1, state$1);
                                              var match$1 = BasicMaterialTool$Wonderjs.createGameObject(state$1);
                                              var state$2 = MaterialTool$Wonderjs.setShaderIndex(match$1[2], 0, match$1[0]);
                                              var transform2 = GameObject$Wonderjs.getGameObjectTransformComponent(match$1[1], state$2);
                                              var state$3 = Transform$Wonderjs.setTransformParent(transform1, transform2, state$2);
                                              var match$2 = _cloneGameObject(gameObject1, 2, state$3);
                                              var state$4 = match$2[0];
                                              return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](CloneTool$Wonderjs.getFlattenClonedGameObjectArr(match$2[1]).map((function (clonedGameObject) {
                                                                    return GameObject$Wonderjs.getGameObjectMaterialComponent(clonedGameObject, state$4);
                                                                  })).length), 4);
                                            }));
                              }));
                        describe("test clone transform component", (function () {
                                var _prepare = function () {
                                  var match = GameObjectTool$Wonderjs.createGameObject(state[0]);
                                  var transform1 = match[2];
                                  var match$1 = GameObjectTool$Wonderjs.createGameObject(match[0]);
                                  var transform2 = match$1[2];
                                  var match$2 = GameObjectTool$Wonderjs.createGameObject(match$1[0]);
                                  var transform3 = match$2[2];
                                  var match$3 = GameObjectTool$Wonderjs.createGameObject(match$2[0]);
                                  var transform4 = match$3[2];
                                  var state$1 = Transform$Wonderjs.setTransformParent(transform3, transform4, Transform$Wonderjs.setTransformParent(transform1, transform3, Transform$Wonderjs.setTransformParent(transform1, transform2, match$3[0])));
                                  return /* tuple */[
                                          state$1,
                                          match[1],
                                          transform1,
                                          match$1[1],
                                          transform2,
                                          match$2[1],
                                          transform3,
                                          match$3[1],
                                          transform4
                                        ];
                                };
                                Wonder_jest.test("set parent", (function () {
                                        var match = _prepare(/* () */0);
                                        var state = match[0];
                                        var match$1 = _getClonedTransformDataArr(match[1], 2, state);
                                        var clonedTransformArr = match$1[1];
                                        return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](/* tuple */[
                                                        Transform$Wonderjs.getTransformParent(Caml_array.caml_array_get(clonedTransformArr, 0), state),
                                                        Transform$Wonderjs.getTransformParent(Caml_array.caml_array_get(clonedTransformArr, 1), state),
                                                        Transform$Wonderjs.getTransformParent(Caml_array.caml_array_get(clonedTransformArr, 2), state),
                                                        Transform$Wonderjs.getTransformParent(Caml_array.caml_array_get(clonedTransformArr, 3), state),
                                                        Transform$Wonderjs.getTransformParent(Caml_array.caml_array_get(clonedTransformArr, 4), state),
                                                        Transform$Wonderjs.getTransformParent(Caml_array.caml_array_get(clonedTransformArr, 5), state),
                                                        Transform$Wonderjs.getTransformParent(Caml_array.caml_array_get(clonedTransformArr, 6), state),
                                                        Transform$Wonderjs.getTransformParent(Caml_array.caml_array_get(clonedTransformArr, 7), state)
                                                      ]), /* tuple */[
                                                    undefined,
                                                    undefined,
                                                    Caml_array.caml_array_get(clonedTransformArr, 0),
                                                    Caml_array.caml_array_get(clonedTransformArr, 1),
                                                    Caml_array.caml_array_get(clonedTransformArr, 0),
                                                    Caml_array.caml_array_get(clonedTransformArr, 1),
                                                    Caml_array.caml_array_get(clonedTransformArr, 4),
                                                    Caml_array.caml_array_get(clonedTransformArr, 5)
                                                  ]);
                                      }));
                                return Wonder_jest.test("test set cloned transform's localPosition by corresponding source transform's localPosition", (function () {
                                              var match = _prepare(/* () */0);
                                              var pos1 = /* tuple */[
                                                1,
                                                2,
                                                3
                                              ];
                                              var pos2 = /* tuple */[
                                                2,
                                                2,
                                                3
                                              ];
                                              var pos3 = /* tuple */[
                                                3,
                                                20,
                                                3
                                              ];
                                              var pos4 = /* tuple */[
                                                4,
                                                2,
                                                3
                                              ];
                                              var state = Transform$Wonderjs.setTransformLocalPosition(match[2], pos1, match[0]);
                                              var state$1 = Transform$Wonderjs.setTransformLocalPosition(match[4], pos2, state);
                                              var state$2 = Transform$Wonderjs.setTransformLocalPosition(match[6], pos3, state$1);
                                              var state$3 = Transform$Wonderjs.setTransformLocalPosition(match[8], pos4, state$2);
                                              var match$1 = _getClonedTransformDataArr(match[1], 1, state$3);
                                              return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](match$1[1].map((function (transform) {
                                                                    return Transform$Wonderjs.getTransformPosition(transform, state$3);
                                                                  }))), /* array */[
                                                          pos1,
                                                          Vector3System$Wonderjs.add(/* Float */0, pos1, pos2),
                                                          Vector3System$Wonderjs.add(/* Float */0, pos1, pos3),
                                                          Vector3System$Wonderjs.add(/* Float */0, Vector3System$Wonderjs.add(/* Float */0, pos1, pos3), pos4)
                                                        ]);
                                            }));
                              }));
                        return /* () */0;
                      }));
                return /* () */0;
              }));
        return /* () */0;
      }));

export {
  
}
/*  Not a pure module */
