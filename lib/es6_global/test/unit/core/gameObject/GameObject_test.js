// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as Curry                             from "../../../../../../node_modules/bs-platform/lib/es6/curry.js";
import * as Sinon                             from "../../../../../../node_modules/wonder-bs-sinon/lib/es6_global/src/sinon.js";
import * as Sinon$1                           from "sinon";
import * as Caml_array                        from "../../../../../../node_modules/bs-platform/lib/es6/caml_array.js";
import * as Wonder_jest                       from "../../../../../../node_modules/wonder-bs-jest/lib/es6_global/src/wonder_jest.js";
import * as Geometry$Wonderjs                 from "../../../../src/ecs/component/api/geometry/Geometry.js";
import * as TestTool$Wonderjs                 from "../../tool/TestTool.js";
import * as StateTool$Wonderjs                from "../../tool/core/StateTool.js";
import * as Transform$Wonderjs                from "../../../../src/ecs/component/api/transform/Transform.js";
import * as FakeGlTool$Wonderjs               from "../../tool/gl/FakeGlTool.js";
import * as GameObject$Wonderjs               from "../../../../src/ecs/admin/api/GameObject.js";
import * as ArraySystem$Wonderjs              from "../../../../src/structure/ArraySystem.js";
import * as BoxGeometry$Wonderjs              from "../../../../src/ecs/component/api/geometry/BoxGeometry.js";
import * as GeometryTool$Wonderjs             from "../../tool/component/geometry/GeometryTool.js";
import * as MaterialTool$Wonderjs             from "../../tool/component/material/MaterialTool.js";
import * as MeshRenderer$Wonderjs             from "../../../../src/ecs/component/api/meshRenderer/MeshRenderer.js";
import * as BasicMaterial$Wonderjs            from "../../../../src/ecs/component/api/material/BasicMaterial.js";
import * as TransformTool$Wonderjs            from "../../tool/component/transform/TransformTool.js";
import * as VboBufferTool$Wonderjs            from "../../tool/render/buffer/VboBufferTool.js";
import * as GameObjectTool$Wonderjs           from "../../tool/core/GameObjectTool.js";
import * as BoxGeometryTool$Wonderjs          from "../../tool/component/geometry/BoxGeometryTool.js";
import * as CameraController$Wonderjs         from "../../../../src/ecs/component/api/cameraController/CameraController.js";
import * as MemoryConfigTool$Wonderjs         from "../../tool/config/MemoryConfigTool.js";
import * as MeshRendererTool$Wonderjs         from "../../tool/component/meshRenderer/MeshRendererTool.js";
import * as BasicMaterialTool$Wonderjs        from "../../tool/component/material/BasicMaterialTool.js";
import * as ObjectInstanceTool$Wonderjs       from "../../tool/component/instance/ObjectInstanceTool.js";
import * as SourceInstanceTool$Wonderjs       from "../../tool/component/instance/SourceInstanceTool.js";
import * as CameraControllerTool$Wonderjs     from "../../tool/component/cameraController/CameraControllerTool.js";
import * as SparseMapSystem$WonderCommonlib   from "../../../../../../node_modules/wonder-commonlib/lib/es6_global/src/SparseMapSystem.js";
import * as InitBasicMaterialJobTool$Wonderjs from "../../tool/render/core/init/jobs/InitBasicMaterialJobTool.js";

describe("GameObject", (function () {
        var sandbox = Sinon.getSandboxDefaultVal(/* () */0);
        var state = [StateTool$Wonderjs.createState(/* None */0, /* () */0)];
        beforeEach((function () {
                sandbox[0] = Sinon$1.sandbox.create();
                state[0] = TestTool$Wonderjs.init(sandbox, /* None */0, /* None */0, /* () */0);
                return /* () */0;
              }));
        afterEach((function () {
                return Curry._1(Sinon.restoreSandbox, sandbox[0]);
              }));
        describe("createGameObject", (function () {
                Wonder_jest.test("create a new gameObject which is just uidStr(string)", (function () {
                        var match = GameObject$Wonderjs.createGameObject(state[0]);
                        return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](match[1]), 0);
                      }));
                Wonder_jest.test("add new transform component", (function () {
                        var match = GameObject$Wonderjs.createGameObject(state[0]);
                        return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](GameObject$Wonderjs.hasGameObjectTransformComponent(match[1], match[0])), /* true */1);
                      }));
                describe("change state", (function () {
                        return Wonder_jest.test("state->uid + 1", (function () {
                                      var match = GameObject$Wonderjs.createGameObject(state[0]);
                                      var data = GameObjectTool$Wonderjs.getGameObjectData(match[0]);
                                      return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](data[/* uid */0]), 1);
                                    }));
                      }));
                return /* () */0;
              }));
        describe("test operate component", (function () {
                describe("test transform component", (function () {
                        describe("addGameObjectTransformComponent", (function () {
                                Wonder_jest.test("if this type of component is already exist, error", (function () {
                                        var match = GameObject$Wonderjs.createGameObject(state[0]);
                                        var gameObject = match[1];
                                        var state$1 = match[0];
                                        return Wonder_jest.Expect[/* toThrowMessage */20]("this type of component is already exist", Wonder_jest.Expect[/* expect */0]((function () {
                                                          var match = Transform$Wonderjs.createTransform(state$1);
                                                          return GameObject$Wonderjs.addGameObjectTransformComponent(gameObject, match[1], match[0]);
                                                        })));
                                      }));
                                return Wonder_jest.test("can get component's gameObject", (function () {
                                              var match = GameObject$Wonderjs.createGameObject(state[0]);
                                              var gameObject = match[1];
                                              var state$1 = match[0];
                                              return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](Transform$Wonderjs.getTransformGameObject(GameObject$Wonderjs.getGameObjectTransformComponent(gameObject, state$1), state$1)), gameObject);
                                            }));
                              }));
                        describe("getGameObjectTransformComponent", (function () {
                                return Wonder_jest.test("get transform component", (function () {
                                              var match = GameObject$Wonderjs.createGameObject(state[0]);
                                              return TransformTool$Wonderjs.isTransform(GameObject$Wonderjs.getGameObjectTransformComponent(match[1], match[0]));
                                            }));
                              }));
                        describe("hasGameObjectTransformComponent", (function () {
                                return Wonder_jest.test("has transform component", (function () {
                                              var match = GameObject$Wonderjs.createGameObject(state[0]);
                                              return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](GameObject$Wonderjs.hasGameObjectTransformComponent(match[1], match[0])), /* true */1);
                                            }));
                              }));
                        return /* () */0;
                      }));
                describe("test material component", (function () {
                        describe("getGameObjectMaterialComponent", (function () {
                                return Wonder_jest.test("get material component", (function () {
                                              var match = GameObject$Wonderjs.createGameObject(state[0]);
                                              var gameObject = match[1];
                                              var match$1 = BasicMaterial$Wonderjs.createBasicMaterial(match[0]);
                                              var state$1 = GameObject$Wonderjs.addGameObjectMaterialComponent(gameObject, match$1[1], match$1[0]);
                                              return MaterialTool$Wonderjs.isMaterial(GameObject$Wonderjs.getGameObjectMaterialComponent(gameObject, state$1));
                                            }));
                              }));
                        describe("hasGameObjectMaterialComponent", (function () {
                                return Wonder_jest.test("has material component", (function () {
                                              var match = GameObject$Wonderjs.createGameObject(state[0]);
                                              var gameObject = match[1];
                                              var match$1 = BasicMaterial$Wonderjs.createBasicMaterial(match[0]);
                                              var state$1 = GameObject$Wonderjs.addGameObjectMaterialComponent(gameObject, match$1[1], match$1[0]);
                                              return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](GameObject$Wonderjs.hasGameObjectMaterialComponent(gameObject, state$1)), /* true */1);
                                            }));
                              }));
                        return /* () */0;
                      }));
                describe("test geometry component", (function () {
                        describe("getGameObjectMaterialComponent", (function () {
                                return Wonder_jest.test("get geometry component", (function () {
                                              var match = GameObject$Wonderjs.createGameObject(state[0]);
                                              var gameObject = match[1];
                                              var match$1 = BoxGeometry$Wonderjs.createBoxGeometry(match[0]);
                                              var state$1 = GameObject$Wonderjs.addGameObjectGeometryComponent(gameObject, match$1[1], match$1[0]);
                                              return GeometryTool$Wonderjs.isGeometry(GameObject$Wonderjs.getGameObjectGeometryComponent(gameObject, state$1));
                                            }));
                              }));
                        describe("hasGameObjectGeometryComponent", (function () {
                                return Wonder_jest.test("has geometry component", (function () {
                                              var match = GameObject$Wonderjs.createGameObject(state[0]);
                                              var gameObject = match[1];
                                              var match$1 = BoxGeometry$Wonderjs.createBoxGeometry(match[0]);
                                              var state$1 = GameObject$Wonderjs.addGameObjectGeometryComponent(gameObject, match$1[1], match$1[0]);
                                              return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](GameObject$Wonderjs.hasGameObjectGeometryComponent(gameObject, state$1)), /* true */1);
                                            }));
                              }));
                        return /* () */0;
                      }));
                describe("test meshRenderer component", (function () {
                        describe("getGameObjectMeshRendererComponent", (function () {
                                return Wonder_jest.test("get meshRenderer component", (function () {
                                              var match = GameObject$Wonderjs.createGameObject(state[0]);
                                              var gameObject = match[1];
                                              var match$1 = MeshRenderer$Wonderjs.createMeshRenderer(match[0]);
                                              var state$1 = GameObject$Wonderjs.addGameObjectMeshRendererComponent(gameObject, match$1[1], match$1[0]);
                                              return MeshRendererTool$Wonderjs.isMeshRenderer(GameObject$Wonderjs.getGameObjectMeshRendererComponent(gameObject, state$1));
                                            }));
                              }));
                        describe("hasGameObjectMeshRendererComponent", (function () {
                                return Wonder_jest.test("has meshRenderer component", (function () {
                                              var match = GameObject$Wonderjs.createGameObject(state[0]);
                                              var gameObject = match[1];
                                              var match$1 = MeshRenderer$Wonderjs.createMeshRenderer(match[0]);
                                              var state$1 = GameObject$Wonderjs.addGameObjectMeshRendererComponent(gameObject, match$1[1], match$1[0]);
                                              return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](GameObject$Wonderjs.hasGameObjectMeshRendererComponent(gameObject, state$1)), /* true */1);
                                            }));
                              }));
                        return /* () */0;
                      }));
                describe("test cameraController component", (function () {
                        var _prepare = function () {
                          var match = GameObject$Wonderjs.createGameObject(state[0]);
                          var gameObject = match[1];
                          var match$1 = CameraController$Wonderjs.createCameraController(match[0]);
                          var cameraController = match$1[1];
                          var state$1 = GameObject$Wonderjs.addGameObjectCameraControllerComponent(gameObject, cameraController, match$1[0]);
                          return /* tuple */[
                                  state$1,
                                  gameObject,
                                  cameraController
                                ];
                        };
                        describe("addGameObjectCameraControllerComponent", (function () {
                                Wonder_jest.test("if this type of component is already exist, error", (function () {
                                        var match = _prepare(/* () */0);
                                        var gameObject = match[1];
                                        var state = match[0];
                                        return Wonder_jest.Expect[/* toThrowMessage */20]("this type of component is already exist", Wonder_jest.Expect[/* expect */0]((function () {
                                                          var match = CameraController$Wonderjs.createCameraController(state);
                                                          return GameObject$Wonderjs.addGameObjectCameraControllerComponent(gameObject, match[1], match[0]);
                                                        })));
                                      }));
                                return Wonder_jest.test("can get component's gameObject", (function () {
                                              var match = _prepare(/* () */0);
                                              var gameObject = match[1];
                                              var state = match[0];
                                              return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](CameraController$Wonderjs.getCameraControllerGameObject(GameObject$Wonderjs.getGameObjectCameraControllerComponent(gameObject, state), state)), gameObject);
                                            }));
                              }));
                        describe("getGameObjectCameraControllerComponent", (function () {
                                return Wonder_jest.test("get cameraController component", (function () {
                                              var match = _prepare(/* () */0);
                                              return CameraControllerTool$Wonderjs.isCameraController(GameObject$Wonderjs.getGameObjectCameraControllerComponent(match[1], match[0]));
                                            }));
                              }));
                        describe("hasGameObjectCameraControllerComponent", (function () {
                                return Wonder_jest.test("has cameraController component", (function () {
                                              var match = _prepare(/* () */0);
                                              return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](GameObject$Wonderjs.hasGameObjectCameraControllerComponent(match[1], match[0])), /* true */1);
                                            }));
                              }));
                        return /* () */0;
                      }));
                return /* () */0;
              }));
        describe("dispose", (function () {
                describe("test alive", (function () {
                        Wonder_jest.test("disposed one shouldn't alive before reallocate", (function () {
                                var match = GameObject$Wonderjs.createGameObject(state[0]);
                                var gameObject = match[1];
                                var state$1 = GameObject$Wonderjs.disposeGameObject(gameObject, match[0]);
                                return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](GameObject$Wonderjs.isGameObjectAlive(gameObject, state$1)), /* false */0);
                              }));
                        return Wonder_jest.test("disposed one shouldn't alive after reallocate", (function () {
                                      var state$1 = MemoryConfigTool$Wonderjs.setConfig(state[0], /* Some */[2], /* () */0);
                                      var match = GameObject$Wonderjs.createGameObject(state$1);
                                      var gameObject1 = match[1];
                                      var match$1 = GameObject$Wonderjs.createGameObject(match[0]);
                                      var gameObject2 = match$1[1];
                                      var match$2 = GameObject$Wonderjs.createGameObject(match$1[0]);
                                      var gameObject3 = match$2[1];
                                      var match$3 = GameObject$Wonderjs.createGameObject(match$2[0]);
                                      var state$2 = GameObject$Wonderjs.disposeGameObject(gameObject1, match$3[0]);
                                      var state$3 = GameObject$Wonderjs.disposeGameObject(gameObject2, state$2);
                                      var state$4 = GameObject$Wonderjs.disposeGameObject(gameObject3, state$3);
                                      return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](/* tuple */[
                                                      GameObject$Wonderjs.isGameObjectAlive(gameObject1, state$4),
                                                      GameObject$Wonderjs.isGameObjectAlive(gameObject2, state$4),
                                                      GameObject$Wonderjs.isGameObjectAlive(gameObject3, state$4),
                                                      GameObject$Wonderjs.isGameObjectAlive(match$3[1], state$4)
                                                    ]), /* tuple */[
                                                  /* false */0,
                                                  /* false */0,
                                                  /* false */0,
                                                  /* true */1
                                                ]);
                                    }));
                      }));
                describe("should dispose all components", (function () {
                        Wonder_jest.test("dispose tranform component", (function () {
                                var match = GameObject$Wonderjs.createGameObject(state[0]);
                                var gameObject1 = match[1];
                                var match$1 = GameObject$Wonderjs.createGameObject(match[0]);
                                var state$1 = match$1[0];
                                var transform1 = GameObject$Wonderjs.getGameObjectTransformComponent(gameObject1, state$1);
                                var transform2 = GameObject$Wonderjs.getGameObjectTransformComponent(match$1[1], state$1);
                                var state$2 = Transform$Wonderjs.setTransformParent(transform1, transform2, state$1);
                                var pos2 = /* tuple */[
                                  2,
                                  3,
                                  4
                                ];
                                var state$3 = Transform$Wonderjs.setTransformLocalPosition(transform2, pos2, Transform$Wonderjs.setTransformLocalPosition(transform1, /* tuple */[
                                          1,
                                          2,
                                          3
                                        ], state$2));
                                var state$4 = GameObject$Wonderjs.disposeGameObject(gameObject1, state$3);
                                return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](Transform$Wonderjs.getTransformPosition(transform2, state$4)), pos2);
                              }));
                        Wonder_jest.test("dispose meshRenderer component", (function () {
                                var match = MeshRendererTool$Wonderjs.createGameObject(state[0]);
                                var match$1 = MeshRendererTool$Wonderjs.createGameObject(match[0]);
                                var state$1 = GameObject$Wonderjs.disposeGameObject(match[1], match$1[0]);
                                return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](MeshRendererTool$Wonderjs.getRenderArray(state$1)), /* int array */[match$1[1]]);
                              }));
                        Wonder_jest.test("dispose material component", (function () {
                                var match = BasicMaterialTool$Wonderjs.createGameObject(state[0]);
                                var match$1 = BasicMaterialTool$Wonderjs.createGameObject(match[0]);
                                var state$1 = GameObject$Wonderjs.disposeGameObject(match[1], match$1[0]);
                                var match$2 = MaterialTool$Wonderjs.getMaterialData(state$1);
                                var disposedIndexArray = match$2[/* disposedIndexArray */5];
                                return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](/* tuple */[
                                                +disposedIndexArray.includes(match[2]),
                                                +disposedIndexArray.includes(match$1[2])
                                              ]), /* tuple */[
                                            /* true */1,
                                            /* false */0
                                          ]);
                              }));
                        Wonder_jest.test("dispose geometry component", (function () {
                                TestTool$Wonderjs.closeContractCheck(/* () */0);
                                var match = BoxGeometryTool$Wonderjs.createGameObject(state[0]);
                                var match$1 = BoxGeometryTool$Wonderjs.createGameObject(match[0]);
                                var state$1 = GeometryTool$Wonderjs.initGeometrys(match$1[0]);
                                var state$2 = GameObject$Wonderjs.disposeGameObject(match[1], state$1);
                                return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](/* tuple */[
                                                GeometryTool$Wonderjs.isGeometryDisposed(match[2], state$2),
                                                GeometryTool$Wonderjs.isGeometryDisposed(match$1[2], state$2)
                                              ]), /* tuple */[
                                            /* true */1,
                                            /* false */0
                                          ]);
                              }));
                        Wonder_jest.test("dispose cameraController component", (function () {
                                var match = CameraControllerTool$Wonderjs.createCameraGameObject(state[0]);
                                var match$1 = CameraControllerTool$Wonderjs.createCameraGameObject(match[0]);
                                var state$1 = GameObject$Wonderjs.disposeGameObject(match[1], match$1[0]);
                                var match$2 = CameraControllerTool$Wonderjs.getData(state$1);
                                var disposedIndexArray = match$2[/* disposedIndexArray */7];
                                return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](/* tuple */[
                                                +disposedIndexArray.includes(match[3]),
                                                +disposedIndexArray.includes(match$1[3])
                                              ]), /* tuple */[
                                            /* true */1,
                                            /* false */0
                                          ]);
                              }));
                        Wonder_jest.test("dispose sourceInstance component", (function () {
                                var match = SourceInstanceTool$Wonderjs.createSourceInstanceGameObject(state[0]);
                                var sourceInstance = match[2];
                                var state$1 = VboBufferTool$Wonderjs.passBufferShouldExistCheckWhenDisposeSourceInstance(sourceInstance, match[0]);
                                var state$2 = GameObject$Wonderjs.disposeGameObject(match[1], state$1);
                                var match$1 = SourceInstanceTool$Wonderjs.getSourceInstanceData(state$2);
                                var disposedIndexArray = match$1[/* disposedIndexArray */6];
                                return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](disposedIndexArray), /* int array */[sourceInstance]);
                              }));
                        return Wonder_jest.test("dispose objectInstance component", (function () {
                                      var match = ObjectInstanceTool$Wonderjs.createObjectInstanceGameObject(state[0]);
                                      var state$1 = GameObject$Wonderjs.disposeGameObject(match[3], match[0]);
                                      var match$1 = ObjectInstanceTool$Wonderjs.getObjectInstanceData(state$1);
                                      var disposedIndexArray = match$1[/* disposedIndexArray */2];
                                      return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](disposedIndexArray), /* int array */[match[4]]);
                                    }));
                      }));
                describe("test reallocate gameObject", (function () {
                        describe("if have dispose too many gameObjects, reallocate gameObject", (function () {
                                describe("reallocate component maps", (function () {
                                        Wonder_jest.test("new transformMap should only has alive data", (function () {
                                                var state$1 = MemoryConfigTool$Wonderjs.setConfig(state[0], /* Some */[2], /* () */0);
                                                var match = GameObject$Wonderjs.createGameObject(state$1);
                                                var gameObject1 = match[1];
                                                var match$1 = GameObject$Wonderjs.createGameObject(match[0]);
                                                var gameObject2 = match$1[1];
                                                var match$2 = GameObject$Wonderjs.createGameObject(match$1[0]);
                                                var state$2 = GameObject$Wonderjs.disposeGameObject(gameObject1, match$2[0]);
                                                var state$3 = GameObject$Wonderjs.disposeGameObject(gameObject2, state$2);
                                                var match$3 = GameObjectTool$Wonderjs.getGameObjectData(state$3);
                                                var transformMap = match$3[/* transformMap */4];
                                                return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](/* tuple */[
                                                                SparseMapSystem$WonderCommonlib.has(gameObject1, transformMap),
                                                                SparseMapSystem$WonderCommonlib.has(gameObject2, transformMap),
                                                                SparseMapSystem$WonderCommonlib.has(match$2[1], transformMap)
                                                              ]), /* tuple */[
                                                            /* false */0,
                                                            /* false */0,
                                                            /* true */1
                                                          ]);
                                              }));
                                        Wonder_jest.test("new meshRendererMap should only has alive data", (function () {
                                                var state$1 = MemoryConfigTool$Wonderjs.setConfig(state[0], /* Some */[2], /* () */0);
                                                var match = GameObject$Wonderjs.createGameObject(state$1);
                                                var gameObject1 = match[1];
                                                var match$1 = GameObject$Wonderjs.createGameObject(match[0]);
                                                var gameObject2 = match$1[1];
                                                var match$2 = GameObject$Wonderjs.createGameObject(match$1[0]);
                                                var gameObject3 = match$2[1];
                                                var match$3 = MeshRenderer$Wonderjs.createMeshRenderer(match$2[0]);
                                                var match$4 = MeshRenderer$Wonderjs.createMeshRenderer(match$3[0]);
                                                var match$5 = MeshRenderer$Wonderjs.createMeshRenderer(match$4[0]);
                                                var state$2 = GameObject$Wonderjs.addGameObjectMeshRendererComponent(gameObject3, match$5[1], GameObject$Wonderjs.addGameObjectMeshRendererComponent(gameObject2, match$4[1], GameObject$Wonderjs.addGameObjectMeshRendererComponent(gameObject1, match$3[1], match$5[0])));
                                                var state$3 = GameObject$Wonderjs.disposeGameObject(gameObject1, state$2);
                                                var state$4 = GameObject$Wonderjs.disposeGameObject(gameObject2, state$3);
                                                var match$6 = GameObjectTool$Wonderjs.getGameObjectData(state$4);
                                                var meshRendererMap = match$6[/* meshRendererMap */7];
                                                return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](/* tuple */[
                                                                SparseMapSystem$WonderCommonlib.has(gameObject1, meshRendererMap),
                                                                SparseMapSystem$WonderCommonlib.has(gameObject2, meshRendererMap),
                                                                SparseMapSystem$WonderCommonlib.has(gameObject3, meshRendererMap)
                                                              ]), /* tuple */[
                                                            /* false */0,
                                                            /* false */0,
                                                            /* true */1
                                                          ]);
                                              }));
                                        Wonder_jest.test("new geometryMap should only has alive data", (function () {
                                                var state = TestTool$Wonderjs.initWithoutBuildFakeDom(sandbox, /* None */0, /* Some */[GeometryTool$Wonderjs.buildBufferConfig(1000)], /* () */0);
                                                TestTool$Wonderjs.closeContractCheck(/* () */0);
                                                var state$1 = MemoryConfigTool$Wonderjs.setConfig(state, /* Some */[2], /* () */0);
                                                var match = BoxGeometryTool$Wonderjs.createGameObject(state$1);
                                                var gameObject1 = match[1];
                                                var match$1 = BoxGeometryTool$Wonderjs.createGameObject(match[0]);
                                                var gameObject2 = match$1[1];
                                                var match$2 = BoxGeometryTool$Wonderjs.createGameObject(match$1[0]);
                                                var state$2 = GeometryTool$Wonderjs.initGeometrys(match$2[0]);
                                                var state$3 = GameObject$Wonderjs.disposeGameObject(gameObject1, state$2);
                                                var state$4 = GameObject$Wonderjs.disposeGameObject(gameObject2, state$3);
                                                var match$3 = GameObjectTool$Wonderjs.getGameObjectData(state$4);
                                                var geometryMap = match$3[/* geometryMap */6];
                                                return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](/* tuple */[
                                                                SparseMapSystem$WonderCommonlib.has(gameObject1, geometryMap),
                                                                SparseMapSystem$WonderCommonlib.has(gameObject2, geometryMap),
                                                                SparseMapSystem$WonderCommonlib.has(match$2[1], geometryMap)
                                                              ]), /* tuple */[
                                                            /* false */0,
                                                            /* false */0,
                                                            /* true */1
                                                          ]);
                                              }));
                                        Wonder_jest.test("new materialMap should only has alive data", (function () {
                                                var state$1 = MemoryConfigTool$Wonderjs.setConfig(state[0], /* Some */[2], /* () */0);
                                                var match = BasicMaterialTool$Wonderjs.createGameObject(state$1);
                                                var gameObject1 = match[1];
                                                var match$1 = BasicMaterialTool$Wonderjs.createGameObject(match[0]);
                                                var gameObject2 = match$1[1];
                                                var match$2 = BasicMaterialTool$Wonderjs.createGameObject(match$1[0]);
                                                var state$2 = GameObject$Wonderjs.disposeGameObject(gameObject1, match$2[0]);
                                                var state$3 = GameObject$Wonderjs.disposeGameObject(gameObject2, state$2);
                                                var match$3 = GameObjectTool$Wonderjs.getGameObjectData(state$3);
                                                var materialMap = match$3[/* materialMap */8];
                                                return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](/* tuple */[
                                                                SparseMapSystem$WonderCommonlib.has(gameObject1, materialMap),
                                                                SparseMapSystem$WonderCommonlib.has(gameObject2, materialMap),
                                                                SparseMapSystem$WonderCommonlib.has(match$2[1], materialMap)
                                                              ]), /* tuple */[
                                                            /* false */0,
                                                            /* false */0,
                                                            /* true */1
                                                          ]);
                                              }));
                                        Wonder_jest.test("new cameraControllerMap should only has alive data", (function () {
                                                var state$1 = MemoryConfigTool$Wonderjs.setConfig(state[0], /* Some */[2], /* () */0);
                                                var match = CameraControllerTool$Wonderjs.createCameraGameObject(state$1);
                                                var gameObject1 = match[1];
                                                var match$1 = CameraControllerTool$Wonderjs.createCameraGameObject(match[0]);
                                                var gameObject2 = match$1[1];
                                                var match$2 = CameraControllerTool$Wonderjs.createCameraGameObject(match$1[0]);
                                                var state$2 = GameObject$Wonderjs.disposeGameObject(gameObject1, match$2[0]);
                                                var state$3 = GameObject$Wonderjs.disposeGameObject(gameObject2, state$2);
                                                var match$3 = GameObjectTool$Wonderjs.getGameObjectData(state$3);
                                                var cameraControllerMap = match$3[/* cameraControllerMap */5];
                                                return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](/* tuple */[
                                                                SparseMapSystem$WonderCommonlib.has(gameObject1, cameraControllerMap),
                                                                SparseMapSystem$WonderCommonlib.has(gameObject2, cameraControllerMap),
                                                                SparseMapSystem$WonderCommonlib.has(match$2[1], cameraControllerMap)
                                                              ]), /* tuple */[
                                                            /* false */0,
                                                            /* false */0,
                                                            /* true */1
                                                          ]);
                                              }));
                                        Wonder_jest.test("new sourceInstanceMap should only has alive data", (function () {
                                                var state$1 = MemoryConfigTool$Wonderjs.setConfig(state[0], /* Some */[1], /* () */0);
                                                var match = SourceInstanceTool$Wonderjs.createSourceInstanceGameObject(state$1);
                                                var gameObject1 = match[1];
                                                var match$1 = SourceInstanceTool$Wonderjs.createSourceInstanceGameObject(match[0]);
                                                var state$2 = GameObject$Wonderjs.disposeGameObject(gameObject1, match$1[0]);
                                                var match$2 = GameObjectTool$Wonderjs.getGameObjectData(state$2);
                                                var sourceInstanceMap = match$2[/* sourceInstanceMap */9];
                                                return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](/* tuple */[
                                                                SparseMapSystem$WonderCommonlib.has(gameObject1, sourceInstanceMap),
                                                                SparseMapSystem$WonderCommonlib.has(match$1[1], sourceInstanceMap)
                                                              ]), /* tuple */[
                                                            /* false */0,
                                                            /* true */1
                                                          ]);
                                              }));
                                        return Wonder_jest.test("new objectInstanceMap should only has alive data", (function () {
                                                      var state$1 = MemoryConfigTool$Wonderjs.setConfig(state[0], /* Some */[1], /* () */0);
                                                      var match = ObjectInstanceTool$Wonderjs.createObjectInstanceGameObject(state$1);
                                                      var objectInstanceGameObject1 = match[3];
                                                      var match$1 = ObjectInstanceTool$Wonderjs.createObjectInstanceGameObject(match[0]);
                                                      var state$2 = GameObject$Wonderjs.disposeGameObject(objectInstanceGameObject1, match$1[0]);
                                                      var match$2 = GameObjectTool$Wonderjs.getGameObjectData(state$2);
                                                      var objectInstanceMap = match$2[/* objectInstanceMap */10];
                                                      return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](/* tuple */[
                                                                      SparseMapSystem$WonderCommonlib.has(objectInstanceGameObject1, objectInstanceMap),
                                                                      SparseMapSystem$WonderCommonlib.has(match$1[3], objectInstanceMap)
                                                                    ]), /* tuple */[
                                                                  /* false */0,
                                                                  /* true */1
                                                                ]);
                                                    }));
                                      }));
                                describe("test reallocate twice", (function () {
                                        return Wonder_jest.test("test reallocate component maps", (function () {
                                                      var state$1 = MemoryConfigTool$Wonderjs.setConfig(state[0], /* Some */[2], /* () */0);
                                                      var match = GameObject$Wonderjs.createGameObject(state$1);
                                                      var gameObject1 = match[1];
                                                      var match$1 = GameObject$Wonderjs.createGameObject(match[0]);
                                                      var gameObject2 = match$1[1];
                                                      var match$2 = GameObject$Wonderjs.createGameObject(match$1[0]);
                                                      var gameObject3 = match$2[1];
                                                      var match$3 = GameObject$Wonderjs.createGameObject(match$2[0]);
                                                      var gameObject4 = match$3[1];
                                                      var state$2 = GameObject$Wonderjs.disposeGameObject(gameObject1, match$3[0]);
                                                      var state$3 = GameObject$Wonderjs.disposeGameObject(gameObject2, state$2);
                                                      var state$4 = GameObject$Wonderjs.disposeGameObject(gameObject3, state$3);
                                                      var state$5 = GameObject$Wonderjs.disposeGameObject(gameObject4, state$4);
                                                      var match$4 = GameObjectTool$Wonderjs.getGameObjectData(state$5);
                                                      var transformMap = match$4[/* transformMap */4];
                                                      return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](/* tuple */[
                                                                      SparseMapSystem$WonderCommonlib.has(gameObject1, transformMap),
                                                                      SparseMapSystem$WonderCommonlib.has(gameObject2, transformMap),
                                                                      SparseMapSystem$WonderCommonlib.has(gameObject3, transformMap),
                                                                      SparseMapSystem$WonderCommonlib.has(gameObject4, transformMap)
                                                                    ]), /* tuple */[
                                                                  /* false */0,
                                                                  /* false */0,
                                                                  /* false */0,
                                                                  /* false */0
                                                                ]);
                                                    }));
                                      }));
                                Wonder_jest.test("empty disposedUidMap", (function () {
                                        var state$1 = MemoryConfigTool$Wonderjs.setConfig(state[0], /* Some */[2], /* () */0);
                                        var match = GameObject$Wonderjs.createGameObject(state$1);
                                        var gameObject1 = match[1];
                                        var match$1 = GameObject$Wonderjs.createGameObject(match[0]);
                                        var gameObject2 = match$1[1];
                                        var match$2 = GameObject$Wonderjs.createGameObject(match$1[0]);
                                        var gameObject3 = match$2[1];
                                        var state$2 = GameObject$Wonderjs.disposeGameObject(gameObject1, match$2[0]);
                                        var state$3 = GameObject$Wonderjs.disposeGameObject(gameObject2, state$2);
                                        var state$4 = GameObject$Wonderjs.disposeGameObject(gameObject3, state$3);
                                        var match$3 = GameObjectTool$Wonderjs.getGameObjectData(state$4);
                                        var disposedUidMap = match$3[/* disposedUidMap */2];
                                        return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](/* tuple */[
                                                        SparseMapSystem$WonderCommonlib.has(gameObject1, disposedUidMap),
                                                        SparseMapSystem$WonderCommonlib.has(gameObject2, disposedUidMap),
                                                        SparseMapSystem$WonderCommonlib.has(gameObject3, disposedUidMap)
                                                      ]), /* tuple */[
                                                    /* false */0,
                                                    /* false */0,
                                                    /* true */1
                                                  ]);
                                      }));
                                return Wonder_jest.test("update aliveUidArray", (function () {
                                              var state$1 = MemoryConfigTool$Wonderjs.setConfig(state[0], /* Some */[2], /* () */0);
                                              var match = GameObject$Wonderjs.createGameObject(state$1);
                                              var match$1 = GameObject$Wonderjs.createGameObject(match[0]);
                                              var match$2 = GameObject$Wonderjs.createGameObject(match$1[0]);
                                              var gameObject3 = match$2[1];
                                              var state$2 = GameObject$Wonderjs.disposeGameObject(match[1], match$2[0]);
                                              var state$3 = GameObject$Wonderjs.disposeGameObject(match$1[1], state$2);
                                              var state$4 = GameObject$Wonderjs.disposeGameObject(gameObject3, state$3);
                                              var match$3 = GameObjectTool$Wonderjs.getGameObjectData(state$4);
                                              var aliveUidArray = match$3[/* aliveUidArray */3];
                                              return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](aliveUidArray), /* int array */[gameObject3]);
                                            }));
                              }));
                        return /* () */0;
                      }));
                return /* () */0;
              }));
        describe("batchDispose", (function () {
                describe("batch dispose all components", (function () {
                        Wonder_jest.test("batch dispose meshRenderer components", (function () {
                                var match = MeshRendererTool$Wonderjs.createGameObject(state[0]);
                                var match$1 = MeshRendererTool$Wonderjs.createGameObject(match[0]);
                                var state$1 = GameObject$Wonderjs.batchDisposeGameObject(/* int array */[
                                      match[1],
                                      match$1[1]
                                    ], match$1[0]);
                                return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](MeshRendererTool$Wonderjs.getRenderArray(state$1)), /* int array */[]);
                              }));
                        Wonder_jest.test("batch dispose transform componets", (function () {
                                var match = GameObjectTool$Wonderjs.createGameObject(state[0]);
                                var transform1 = match[2];
                                var match$1 = GameObjectTool$Wonderjs.createGameObject(match[0]);
                                var transform2 = match$1[2];
                                var match$2 = GameObjectTool$Wonderjs.createGameObject(match$1[0]);
                                var transform3 = match$2[2];
                                var state$1 = Transform$Wonderjs.setTransformParent(transform2, transform3, Transform$Wonderjs.setTransformParent(transform1, transform2, match$2[0]));
                                var pos3 = /* tuple */[
                                  4,
                                  3,
                                  4
                                ];
                                var state$2 = Transform$Wonderjs.setTransformLocalPosition(transform3, pos3, Transform$Wonderjs.setTransformLocalPosition(transform2, /* tuple */[
                                          2,
                                          3,
                                          4
                                        ], Transform$Wonderjs.setTransformLocalPosition(transform1, /* tuple */[
                                              1,
                                              2,
                                              3
                                            ], state$1)));
                                var state$3 = GameObject$Wonderjs.batchDisposeGameObject(/* int array */[
                                      match[1],
                                      match$1[1]
                                    ], state$2);
                                return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](Transform$Wonderjs.getTransformPosition(transform3, state$3)), pos3);
                              }));
                        Wonder_jest.test("batch dispose material componets", (function () {
                                var match = BasicMaterialTool$Wonderjs.createGameObject(state[0]);
                                var match$1 = BasicMaterialTool$Wonderjs.createGameObject(match[0]);
                                var state$1 = GameObject$Wonderjs.batchDisposeGameObject(/* int array */[
                                      match[1],
                                      match$1[1]
                                    ], match$1[0]);
                                var match$2 = MaterialTool$Wonderjs.getMaterialData(state$1);
                                var disposedIndexArray = match$2[/* disposedIndexArray */5];
                                return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](/* tuple */[
                                                +disposedIndexArray.includes(match[2]),
                                                +disposedIndexArray.includes(match$1[2])
                                              ]), /* tuple */[
                                            /* true */1,
                                            /* true */1
                                          ]);
                              }));
                        Wonder_jest.test("batch dispose geometry componets", (function () {
                                TestTool$Wonderjs.closeContractCheck(/* () */0);
                                var match = BoxGeometryTool$Wonderjs.createGameObject(state[0]);
                                var match$1 = BoxGeometryTool$Wonderjs.createGameObject(match[0]);
                                var state$1 = GeometryTool$Wonderjs.initGeometrys(match$1[0]);
                                var state$2 = GameObject$Wonderjs.batchDisposeGameObject(/* int array */[
                                      match[1],
                                      match$1[1]
                                    ], state$1);
                                return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](/* tuple */[
                                                GeometryTool$Wonderjs.isGeometryDisposed(match[2], state$2),
                                                GeometryTool$Wonderjs.isGeometryDisposed(match$1[2], state$2)
                                              ]), /* tuple */[
                                            /* true */1,
                                            /* true */1
                                          ]);
                              }));
                        Wonder_jest.test("batch dispose cameraController componets", (function () {
                                var match = CameraControllerTool$Wonderjs.createCameraGameObject(state[0]);
                                var match$1 = CameraControllerTool$Wonderjs.createCameraGameObject(match[0]);
                                var state$1 = GameObject$Wonderjs.batchDisposeGameObject(/* int array */[
                                      match[1],
                                      match$1[1]
                                    ], match$1[0]);
                                var match$2 = CameraControllerTool$Wonderjs.getData(state$1);
                                var disposedIndexArray = match$2[/* disposedIndexArray */7];
                                return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](/* tuple */[
                                                +disposedIndexArray.includes(match[3]),
                                                +disposedIndexArray.includes(match$1[3])
                                              ]), /* tuple */[
                                            /* true */1,
                                            /* true */1
                                          ]);
                              }));
                        describe("batch dispose objectInstance componets", (function () {
                                describe("dispose data", (function () {
                                        Wonder_jest.test("remove from sourceInstanceMap, gameObjectMap", (function () {
                                                var match = ObjectInstanceTool$Wonderjs.createObjectInstanceGameObjectArr(2, state[0]);
                                                var objectInstanceArr = match[4];
                                                var state$1 = GameObject$Wonderjs.batchDisposeGameObject(match[3], match[0]);
                                                var match$1 = ObjectInstanceTool$Wonderjs.getObjectInstanceData(state$1);
                                                var sourceInstanceMap = match$1[/* sourceInstanceMap */1];
                                                return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](/* tuple */[
                                                                SparseMapSystem$WonderCommonlib.has(Caml_array.caml_array_get(objectInstanceArr, 0), sourceInstanceMap),
                                                                SparseMapSystem$WonderCommonlib.has(Caml_array.caml_array_get(objectInstanceArr, 1), sourceInstanceMap),
                                                                SparseMapSystem$WonderCommonlib.has(Caml_array.caml_array_get(objectInstanceArr, 0), match$1[/* gameObjectMap */3]),
                                                                SparseMapSystem$WonderCommonlib.has(Caml_array.caml_array_get(objectInstanceArr, 1), sourceInstanceMap)
                                                              ]), /* tuple */[
                                                            /* false */0,
                                                            /* false */0,
                                                            /* false */0,
                                                            /* false */0
                                                          ]);
                                              }));
                                        return Wonder_jest.test("remove from sourceInstance->objectInstanceArrayMap", (function () {
                                                      var match = ObjectInstanceTool$Wonderjs.createObjectInstanceGameObjectArr(3, state[0]);
                                                      var state$1 = GameObject$Wonderjs.batchDisposeGameObject(match[3], match[0]);
                                                      var match$1 = SourceInstanceTool$Wonderjs.getSourceInstanceData(state$1);
                                                      var objectInstanceArrayMap = match$1[/* objectInstanceArrayMap */1];
                                                      return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](SparseMapSystem$WonderCommonlib.unsafeGet(match[2], objectInstanceArrayMap)), /* int array */[]);
                                                    }));
                                      }));
                                describe("contract check", (function () {
                                        return Wonder_jest.test("all objectInstance should belong to the same sourceInstance", (function () {
                                                      var match = ObjectInstanceTool$Wonderjs.createObjectInstanceGameObject(state[0]);
                                                      var objectInstanceGameObject1 = match[3];
                                                      var match$1 = ObjectInstanceTool$Wonderjs.createObjectInstanceGameObject(match[0]);
                                                      var objectInstanceGameObject2 = match$1[3];
                                                      var state$1 = match$1[0];
                                                      return Wonder_jest.Expect[/* toThrowMessage */20]("all objectInstance should belong to the same sourceInstance", Wonder_jest.Expect[/* expect */0]((function () {
                                                                        GameObject$Wonderjs.batchDisposeGameObject(/* int array */[
                                                                              objectInstanceGameObject1,
                                                                              objectInstanceGameObject2
                                                                            ], state$1);
                                                                        return /* () */0;
                                                                      })));
                                                    }));
                                      }));
                                return /* () */0;
                              }));
                        describe("batch dispose sourceInstance componets", (function () {
                                describe("dispose data", (function () {
                                        Wonder_jest.test("remove from map", (function () {
                                                var match = SourceInstanceTool$Wonderjs.createSourceInstanceGameObjectArr(2, state[0]);
                                                var sourceInstanceArr = match[2];
                                                var state$1 = ArraySystem$Wonderjs.reduceState((function (state, sourceInstance) {
                                                        return VboBufferTool$Wonderjs.passBufferShouldExistCheckWhenDisposeSourceInstance(sourceInstance, state);
                                                      }), match[0], sourceInstanceArr);
                                                var state$2 = GameObject$Wonderjs.batchDisposeGameObject(match[1], state$1);
                                                var match$1 = SourceInstanceTool$Wonderjs.getSourceInstanceData(state$2);
                                                var objectInstanceArrayMap = match$1[/* objectInstanceArrayMap */1];
                                                return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](/* tuple */[
                                                                SparseMapSystem$WonderCommonlib.has(Caml_array.caml_array_get(sourceInstanceArr, 0), objectInstanceArrayMap),
                                                                SparseMapSystem$WonderCommonlib.has(Caml_array.caml_array_get(sourceInstanceArr, 1), objectInstanceArrayMap)
                                                              ]), /* tuple */[
                                                            /* false */0,
                                                            /* false */0
                                                          ]);
                                              }));
                                        return Wonder_jest.test("remove from buffer map", (function () {
                                                      var match = SourceInstanceTool$Wonderjs.createSourceInstanceGameObjectArr(2, state[0]);
                                                      var sourceInstanceArr = match[2];
                                                      var state$1 = ArraySystem$Wonderjs.reduceState((function (state, sourceInstance) {
                                                              return VboBufferTool$Wonderjs.passBufferShouldExistCheckWhenDisposeSourceInstance(sourceInstance, state);
                                                            }), match[0], sourceInstanceArr);
                                                      var state$2 = GameObject$Wonderjs.batchDisposeGameObject(match[1], state$1);
                                                      var match$1 = VboBufferTool$Wonderjs.getVboBufferData(state$2);
                                                      var modelMatrixInstanceBufferMap = match$1[/* modelMatrixInstanceBufferMap */2];
                                                      return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](/* tuple */[
                                                                      SparseMapSystem$WonderCommonlib.has(Caml_array.caml_array_get(sourceInstanceArr, 0), modelMatrixInstanceBufferMap),
                                                                      SparseMapSystem$WonderCommonlib.has(Caml_array.caml_array_get(sourceInstanceArr, 1), modelMatrixInstanceBufferMap)
                                                                    ]), /* tuple */[
                                                                  /* false */0,
                                                                  /* false */0
                                                                ]);
                                                    }));
                                      }));
                                return /* () */0;
                              }));
                        return /* () */0;
                      }));
                describe("test reallocate gameObject", (function () {
                        return Wonder_jest.test("if have dispose too many gameObjects, reallocate gameObject", (function () {
                                      var state$1 = MemoryConfigTool$Wonderjs.setConfig(state[0], /* Some */[2], /* () */0);
                                      var match = GameObject$Wonderjs.createGameObject(state$1);
                                      var gameObject1 = match[1];
                                      var match$1 = GameObject$Wonderjs.createGameObject(match[0]);
                                      var gameObject2 = match$1[1];
                                      var match$2 = GameObject$Wonderjs.createGameObject(match$1[0]);
                                      var gameObject3 = match$2[1];
                                      var match$3 = GameObject$Wonderjs.createGameObject(match$2[0]);
                                      var gameObject4 = match$3[1];
                                      var state$2 = GameObject$Wonderjs.batchDisposeGameObject(/* int array */[
                                            gameObject1,
                                            gameObject2,
                                            gameObject3,
                                            gameObject4
                                          ], match$3[0]);
                                      var match$4 = GameObjectTool$Wonderjs.getGameObjectData(state$2);
                                      var disposeCount = match$4[/* disposeCount */1];
                                      var transformMap = match$4[/* transformMap */4];
                                      return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](/* tuple */[
                                                      disposeCount,
                                                      SparseMapSystem$WonderCommonlib.has(gameObject1, transformMap),
                                                      SparseMapSystem$WonderCommonlib.has(gameObject2, transformMap),
                                                      SparseMapSystem$WonderCommonlib.has(gameObject3, transformMap),
                                                      SparseMapSystem$WonderCommonlib.has(gameObject4, transformMap)
                                                    ]), /* tuple */[
                                                  0,
                                                  /* false */0,
                                                  /* false */0,
                                                  /* false */0,
                                                  /* false */0
                                                ]);
                                    }));
                      }));
                return /* () */0;
              }));
        describe("initGameObject", (function () {
                describe("init components", (function () {
                        beforeEach((function () {
                                state[0] = InitBasicMaterialJobTool$Wonderjs.initWithRenderConfigWithoutBuildFakeDom(sandbox);
                                return /* () */0;
                              }));
                        Wonder_jest.test("init material component", (function () {
                                var match = InitBasicMaterialJobTool$Wonderjs.prepareGameObject(sandbox, state[0]);
                                var attachShader = Sinon.createEmptyStubWithJsObjSandbox(sandbox);
                                var state$1 = FakeGlTool$Wonderjs.setFakeGl(FakeGlTool$Wonderjs.buildFakeGl(sandbox, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[attachShader], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* () */0), match[0]);
                                var state$2 = MaterialTool$Wonderjs.prepareForInit(state$1);
                                GameObject$Wonderjs.initGameObject(match[1], state$2);
                                return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](Sinon.getCallCount(attachShader)), 2);
                              }));
                        return Wonder_jest.test("init geometry component", (function () {
                                      var match = GameObject$Wonderjs.createGameObject(state[0]);
                                      var gameObject = match[1];
                                      var match$1 = BoxGeometry$Wonderjs.createBoxGeometry(match[0]);
                                      var geometry = match$1[1];
                                      var state$1 = BoxGeometryTool$Wonderjs.setDefaultConfigData(geometry, match$1[0]);
                                      var state$2 = GameObject$Wonderjs.addGameObjectGeometryComponent(gameObject, geometry, state$1);
                                      var state$3 = GameObject$Wonderjs.initGameObject(gameObject, state$2);
                                      return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](Geometry$Wonderjs.getGeometryVertices(geometry, state$3)), BoxGeometryTool$Wonderjs.getDefaultVertices(/* () */0));
                                    }));
                      }));
                return /* () */0;
              }));
        describe("contract check: is alive", (function () {
                describe("if gameObject is disposed", (function () {
                        var _testTwoParamFunc = function (func) {
                          var match = GameObject$Wonderjs.createGameObject(state[0]);
                          var gameObject = match[1];
                          var state$1 = GameObject$Wonderjs.disposeGameObject(gameObject, match[0]);
                          return Wonder_jest.Expect[/* toThrowMessage */20]("gameObject should alive", Wonder_jest.Expect[/* expect */0]((function () {
                                            return Curry._2(func, gameObject, state$1);
                                          })));
                        };
                        var _testThreeParmFunc = function (func) {
                          var match = GameObject$Wonderjs.createGameObject(state[0]);
                          var gameObject = match[1];
                          var state$1 = GameObject$Wonderjs.disposeGameObject(gameObject, match[0]);
                          return Wonder_jest.Expect[/* toThrowMessage */20]("gameObject should alive", Wonder_jest.Expect[/* expect */0]((function () {
                                            return Curry._3(func, gameObject, 1, state$1);
                                          })));
                        };
                        Wonder_jest.test("getGameObjectTransformComponent should error", (function () {
                                return _testTwoParamFunc(GameObject$Wonderjs.getGameObjectTransformComponent);
                              }));
                        Wonder_jest.test("getGameObjectMaterialComponent should error", (function () {
                                return _testTwoParamFunc(GameObject$Wonderjs.getGameObjectMaterialComponent);
                              }));
                        Wonder_jest.test("getGameObjectMeshRendererComponent should error", (function () {
                                return _testTwoParamFunc(GameObject$Wonderjs.getGameObjectMeshRendererComponent);
                              }));
                        Wonder_jest.test("getGameObjectGeometryComponent should error", (function () {
                                return _testTwoParamFunc(GameObject$Wonderjs.getGameObjectGeometryComponent);
                              }));
                        Wonder_jest.test("getGameObjectCameraControllerComponent should error", (function () {
                                return _testTwoParamFunc(GameObject$Wonderjs.getGameObjectCameraControllerComponent);
                              }));
                        Wonder_jest.test("disposeGameObject should error", (function () {
                                return _testTwoParamFunc(GameObject$Wonderjs.disposeGameObject);
                              }));
                        Wonder_jest.test("batchDisposeGameObject should error", (function () {
                                var match = GameObject$Wonderjs.createGameObject(state[0]);
                                var gameObject = match[1];
                                var state$1 = GameObject$Wonderjs.disposeGameObject(gameObject, match[0]);
                                return Wonder_jest.Expect[/* toThrowMessage */20]("gameObject should alive", Wonder_jest.Expect[/* expect */0]((function () {
                                                  return GameObject$Wonderjs.batchDisposeGameObject(/* int array */[gameObject], state$1);
                                                })));
                              }));
                        Wonder_jest.test("initGameObject should error", (function () {
                                return _testTwoParamFunc(GameObject$Wonderjs.initGameObject);
                              }));
                        Wonder_jest.test("hasGameObjectGeometryComponent should error", (function () {
                                return _testTwoParamFunc(GameObject$Wonderjs.hasGameObjectGeometryComponent);
                              }));
                        Wonder_jest.test("addGameObjectTransformComponent should error", (function () {
                                return _testThreeParmFunc(GameObject$Wonderjs.addGameObjectTransformComponent);
                              }));
                        Wonder_jest.test("disposeGameObjectTransformComponent should error", (function () {
                                return _testThreeParmFunc(GameObject$Wonderjs.disposeGameObjectTransformComponent);
                              }));
                        Wonder_jest.test("addGameObjectCameraControllerComponent should error", (function () {
                                return _testThreeParmFunc(GameObject$Wonderjs.addGameObjectCameraControllerComponent);
                              }));
                        Wonder_jest.test("disposeGameObjectCameraControllerComponent should error", (function () {
                                return _testThreeParmFunc(GameObject$Wonderjs.disposeGameObjectCameraControllerComponent);
                              }));
                        Wonder_jest.test("addGameObjectMaterialComponent should error", (function () {
                                return _testThreeParmFunc(GameObject$Wonderjs.addGameObjectMaterialComponent);
                              }));
                        Wonder_jest.test("disposeGameObjectMaterialComponent should error", (function () {
                                return _testThreeParmFunc(GameObject$Wonderjs.disposeGameObjectMaterialComponent);
                              }));
                        Wonder_jest.test("addGameObjectMeshRendererComponent should error", (function () {
                                return _testThreeParmFunc(GameObject$Wonderjs.addGameObjectTransformComponent);
                              }));
                        Wonder_jest.test("addGameObjectMeshRendererComponent should error", (function () {
                                return _testThreeParmFunc(GameObject$Wonderjs.addGameObjectTransformComponent);
                              }));
                        Wonder_jest.test("disposeGameObjectMeshRendererComponent should error", (function () {
                                return _testThreeParmFunc(GameObject$Wonderjs.disposeGameObjectMeshRendererComponent);
                              }));
                        Wonder_jest.test("addGameObjectGeometryComponent should error", (function () {
                                return _testThreeParmFunc(GameObject$Wonderjs.addGameObjectGeometryComponent);
                              }));
                        return Wonder_jest.test("disposeGameObjectGeometryComponent should error", (function () {
                                      return _testThreeParmFunc(GameObject$Wonderjs.disposeGameObjectGeometryComponent);
                                    }));
                      }));
                return /* () */0;
              }));
        return /* () */0;
      }));

export {
  
}
/*  Not a pure module */
