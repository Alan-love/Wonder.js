// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as Curry                           from "../../../../../../node_modules/bs-platform/lib/es6/curry.js";
import * as Sinon                           from "../../../../../../node_modules/wonder-bs-sinon/lib/es6_global/src/sinon.js";
import * as Sinon$1                         from "sinon";
import * as Wonder_jest                     from "../../../../../../node_modules/wonder-bs-jest/lib/es6_global/src/wonder_jest.js";
import * as TestTool$Wonderjs               from "../../tool/TestTool.js";
import * as StateTool$Wonderjs              from "../../tool/core/StateTool.js";
import * as RandomTool$Wonderjs             from "../../tool/RandomTool.js";
import * as SchedulerTool$Wonderjs          from "../../tool/core/SchedulerTool.js";
import * as VboBufferTool$Wonderjs          from "../../tool/render/buffer/VboBufferTool.js";
import * as GlobalTempTool$Wonderjs         from "../../tool/definition/GlobalTempTool.js";
import * as RenderDataTool$Wonderjs         from "../../tool/render/render/RenderDataTool.js";
import * as DeviceManagerTool$Wonderjs      from "../../tool/device/DeviceManagerTool.js";
import * as TypeArrayPoolTool$Wonderjs      from "../../tool/structure/TypeArrayPoolTool.js";
import * as GlobalTempStateCommon$Wonderjs  from "../../../../src/definition/global_temp/GlobalTempStateCommon.js";
import * as SparseMapSystem$WonderCommonlib from "../../../../../../node_modules/wonder-commonlib/lib/es6_global/src/SparseMapSystem.js";

describe("test redo,undo other data", (function () {
        var sandbox = Sinon.getSandboxDefaultVal(/* () */0);
        var state = [StateTool$Wonderjs.createState(/* None */0, /* () */0)];
        var _prepareDeviceManagerData = function (state) {
          DeviceManagerTool$Wonderjs.getDeviceManagerData(state);
          var gl = RandomTool$Wonderjs.getRandomFloat(10);
          var colorWrite = /* Some */[/* tuple */[
              true,
              true,
              true,
              false
            ]];
          var clearColor = /* Some */[/* tuple */[
              1,
              0.1,
              0.2,
              1
            ]];
          var newrecord = state.slice();
          return /* tuple */[
                  (newrecord[/* deviceManagerData */9] = /* record */[
                      /* gl : Some */[gl],
                      /* colorWrite */colorWrite,
                      /* clearColor */clearColor
                    ], newrecord),
                  /* Some */[gl],
                  /* tuple */[
                    colorWrite,
                    clearColor
                  ]
                ];
        };
        var _prepareTypeArrayPoolData = function (state) {
          var float32ArrayPoolMap = /* array */[/* array */[new Float32Array(/* float array */[RandomTool$Wonderjs.getRandomFloat(3)])]];
          var uint16ArrayPoolMap = /* array */[/* array */[new Uint16Array(/* int array */[RandomTool$Wonderjs.getRandomInt(3)])]];
          var newrecord = state.slice();
          return /* tuple */[
                  (newrecord[/* typeArrayPoolData */26] = /* record */[
                      /* float32ArrayPoolMap */float32ArrayPoolMap,
                      /* uint16ArrayPoolMap */uint16ArrayPoolMap
                    ], newrecord),
                  /* tuple */[
                    float32ArrayPoolMap,
                    uint16ArrayPoolMap
                  ]
                ];
        };
        var _prepareVboBufferData = function (state) {
          var match = VboBufferTool$Wonderjs.getVboBufferData(state);
          var vertexBufferMap = match[/* vertexBufferMap */0];
          var elementArrayBufferMap = match[/* elementArrayBufferMap */1];
          var modelMatrixInstanceBufferMap = match[/* modelMatrixInstanceBufferMap */2];
          match[/* vertexArrayBufferPool */3].push(0);
          match[/* elementArrayBufferPool */4].push(1);
          match[/* modelMatrixInstanceBufferPool */5].push(2);
          SparseMapSystem$WonderCommonlib.set(0, 10, vertexBufferMap);
          SparseMapSystem$WonderCommonlib.set(0, 11, elementArrayBufferMap);
          SparseMapSystem$WonderCommonlib.set(0, 12, modelMatrixInstanceBufferMap);
          return /* tuple */[
                  state,
                  0,
                  /* tuple */[
                    10,
                    11,
                    12
                  ],
                  /* tuple */[
                    0,
                    1,
                    2
                  ]
                ];
        };
        beforeEach((function () {
                sandbox[0] = Sinon$1.sandbox.create();
                state[0] = TestTool$Wonderjs.init(sandbox, /* None */0, /* None */0, /* () */0);
                return /* () */0;
              }));
        afterEach((function () {
                return Curry._1(Sinon.restoreSandbox, sandbox[0]);
              }));
        describe("deepCopyStateForRestore", (function () {
                describe("deep copy scheduler data", (function () {
                        return Wonder_jest.test("shadow copy funcRecordArray, isFinishMap", (function () {
                                      return StateTool$Wonderjs.testShadowCopyArrayLikeMapData((function (state) {
                                                    var match = SchedulerTool$Wonderjs.getSchedulerData(state);
                                                    return /* array */[
                                                            match[/* funcRecordArray */1],
                                                            match[/* isFinishMap */2]
                                                          ];
                                                  }), state[0]);
                                    }));
                      }));
                describe("deep copy deviceManager data", (function () {
                        Wonder_jest.test("clean gl", (function () {
                                var match = _prepareDeviceManagerData(state[0]);
                                var copiedState = StateTool$Wonderjs.deepCopyStateForRestore(match[0]);
                                var match$1 = DeviceManagerTool$Wonderjs.getDeviceManagerData(copiedState);
                                return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](match$1[/* gl */0]), /* None */0);
                              }));
                        return Wonder_jest.test("directly use readonly data", (function () {
                                      var match = _prepareDeviceManagerData(state[0]);
                                      var state$1 = match[0];
                                      var copiedState = StateTool$Wonderjs.deepCopyStateForRestore(state$1);
                                      var targetData = DeviceManagerTool$Wonderjs.getDeviceManagerData(state$1);
                                      var copiedData = DeviceManagerTool$Wonderjs.getDeviceManagerData(copiedState);
                                      return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](/* tuple */[
                                                      copiedData[/* colorWrite */1],
                                                      copiedData[/* clearColor */2]
                                                    ]), /* tuple */[
                                                  targetData[/* colorWrite */1],
                                                  targetData[/* clearColor */2]
                                                ]);
                                    }));
                      }));
                describe("deep copy vbo buffer data", (function () {
                        return Wonder_jest.test("clean all buffer map and all buffer pool data", (function () {
                                      var match = _prepareVboBufferData(state[0]);
                                      var copiedState = StateTool$Wonderjs.deepCopyStateForRestore(match[0]);
                                      var match$1 = VboBufferTool$Wonderjs.getVboBufferData(copiedState);
                                      var vertexBufferMap = match$1[/* vertexBufferMap */0];
                                      var elementArrayBufferMap = match$1[/* elementArrayBufferMap */1];
                                      var modelMatrixInstanceBufferMap = match$1[/* modelMatrixInstanceBufferMap */2];
                                      return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](/* tuple */[
                                                      vertexBufferMap,
                                                      elementArrayBufferMap,
                                                      modelMatrixInstanceBufferMap,
                                                      match$1[/* vertexArrayBufferPool */3],
                                                      match$1[/* elementArrayBufferPool */4],
                                                      match$1[/* modelMatrixInstanceBufferPool */5]
                                                    ]), /* tuple */[
                                                  /* array */[],
                                                  /* array */[],
                                                  /* array */[],
                                                  /* array */[],
                                                  /* array */[],
                                                  /* array */[]
                                                ]);
                                    }));
                      }));
                describe("deep copy typeArrayPool data", (function () {
                        return Wonder_jest.test("clean pool map", (function () {
                                      var match = _prepareTypeArrayPoolData(state[0]);
                                      var copiedState = StateTool$Wonderjs.deepCopyStateForRestore(match[0]);
                                      var match$1 = TypeArrayPoolTool$Wonderjs.getTypeArrayPoolData(copiedState);
                                      return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](/* tuple */[
                                                      match$1[/* float32ArrayPoolMap */0],
                                                      match$1[/* uint16ArrayPoolMap */1]
                                                    ]), /* tuple */[
                                                  SparseMapSystem$WonderCommonlib.createEmpty(/* () */0),
                                                  SparseMapSystem$WonderCommonlib.createEmpty(/* () */0)
                                                ]);
                                    }));
                      }));
                return /* () */0;
              }));
        describe("restore", (function () {
                describe("restore render data to target state", (function () {
                        return Wonder_jest.test("clean renderArray, cameraData", (function () {
                                      var state$1 = state[0];
                                      var data = RenderDataTool$Wonderjs.getRenderData(state$1);
                                      data[/* renderArray */0] = /* Some */[/* int array */[0]];
                                      data[/* cameraData */1] = /* Some */[1];
                                      StateTool$Wonderjs.restore(StateTool$Wonderjs.createNewCompleteState(/* () */0), state$1);
                                      var match = RenderDataTool$Wonderjs.getRenderData(StateTool$Wonderjs.getState(/* () */0));
                                      var renderArray = match[/* renderArray */0];
                                      var cameraData = match[/* cameraData */1];
                                      return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](/* tuple */[
                                                      renderArray,
                                                      cameraData
                                                    ]), /* tuple */[
                                                  /* None */0,
                                                  /* None */0
                                                ]);
                                    }));
                      }));
                describe("restore global temp data to target state", (function () {
                        return Wonder_jest.test("use current data->float32Array1", (function () {
                                      var state$1 = state[0];
                                      var currentState = StateTool$Wonderjs.createNewCompleteState(/* () */0);
                                      var data = GlobalTempStateCommon$Wonderjs.getGlobalTempData(currentState);
                                      data[/* float32Array1 */0] = new Float32Array(/* float array */[2]);
                                      StateTool$Wonderjs.restore(currentState, state$1);
                                      var match = GlobalTempTool$Wonderjs.getGlobalTempData(StateTool$Wonderjs.getState(/* () */0));
                                      var float32Array1 = match[/* float32Array1 */0];
                                      return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](float32Array1), data[/* float32Array1 */0]);
                                    }));
                      }));
                describe("restore vbo buffer data to target state", (function () {
                        Wonder_jest.test("clean buffer map data", (function () {
                                var match = _prepareVboBufferData(state[0]);
                                var match$1 = _prepareVboBufferData(StateTool$Wonderjs.createNewCompleteState(/* () */0));
                                var newState = StateTool$Wonderjs.restore(match$1[0], match[0]);
                                var match$2 = VboBufferTool$Wonderjs.getVboBufferData(newState);
                                var vertexBufferMap = match$2[/* vertexBufferMap */0];
                                var elementArrayBufferMap = match$2[/* elementArrayBufferMap */1];
                                var modelMatrixInstanceBufferMap = match$2[/* modelMatrixInstanceBufferMap */2];
                                return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](/* tuple */[
                                                vertexBufferMap,
                                                elementArrayBufferMap,
                                                modelMatrixInstanceBufferMap
                                              ]), /* tuple */[
                                            /* array */[],
                                            /* array */[],
                                            /* array */[]
                                          ]);
                              }));
                        return Wonder_jest.test("add current state->vboBufferData->vertexBufferMap, elementArrayBufferMap, modelMatrixInstanceBufferMap buffer to pool", (function () {
                                      var match = _prepareVboBufferData(state[0]);
                                      var match$1 = _prepareVboBufferData(StateTool$Wonderjs.createNewCompleteState(/* () */0));
                                      var match$2 = match$1[3];
                                      var match$3 = match$1[2];
                                      StateTool$Wonderjs.restore(match$1[0], match[0]);
                                      var match$4 = VboBufferTool$Wonderjs.getVboBufferData(StateTool$Wonderjs.getState(/* () */0));
                                      return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](/* tuple */[
                                                      match$4[/* vertexArrayBufferPool */3],
                                                      match$4[/* elementArrayBufferPool */4],
                                                      match$4[/* modelMatrixInstanceBufferPool */5]
                                                    ]), /* tuple */[
                                                  /* array */[
                                                    match$2[0],
                                                    match$3[0]
                                                  ],
                                                  /* array */[
                                                    match$2[1],
                                                    match$3[1]
                                                  ],
                                                  /* array */[
                                                    match$2[2],
                                                    match$3[2]
                                                  ]
                                                ]);
                                    }));
                      }));
                return /* () */0;
              }));
        return /* () */0;
      }));

export {
  
}
/*  Not a pure module */
