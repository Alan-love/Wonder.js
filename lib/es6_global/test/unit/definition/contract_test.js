// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as Curry                     from "../../../../../node_modules/bs-platform/lib/es6/curry.js";
import * as Sinon                     from "../../../../../node_modules/wonder-bs-sinon/lib/es6_global/src/sinon.js";
import * as Sinon$1                   from "sinon";
import * as Wonder_jest               from "../../../../../node_modules/wonder-bs-jest/lib/es6_global/src/wonder_jest.js";
import * as Contract$Wonderjs         from "../../../src/definition/Contract.js";
import * as StateData$Wonderjs        from "../../../src/core/StateData.js";
import * as InitConfigSystem$Wonderjs from "../../../src/renderer/config/init/InitConfigSystem.js";

describe("contract", (function () {
        var sandbox = Sinon.getSandboxDefaultVal(/* () */0);
        beforeEach((function () {
                sandbox[0] = Sinon$1.sandbox.create();
                return /* () */0;
              }));
        afterEach((function () {
                return Curry._1(Sinon.restoreSandbox, sandbox[0]);
              }));
        describe("requireCheck", (function () {
                var exec = function () {
                  var stub = Curry._1(Sinon.createEmptyStub, sandbox[0]);
                  Contract$Wonderjs.requireCheck((function () {
                          Curry._1(stub, /* () */0);
                          return /* () */0;
                        }));
                  return stub;
                };
                Wonder_jest.test("if stateData->isTest === true, check", (function () {
                        InitConfigSystem$Wonderjs.setIsTest(/* true */1, StateData$Wonderjs.stateData);
                        return Sinon.toCalledOnce(Wonder_jest.Expect[/* expect */0](exec(/* () */0)));
                      }));
                return Wonder_jest.test("else, not check", (function () {
                              InitConfigSystem$Wonderjs.setIsTest(/* false */0, StateData$Wonderjs.stateData);
                              return Sinon.toCalledOnce(Wonder_jest.Expect[/* not_ */22](Wonder_jest.Expect[/* expect */0](exec(/* () */0))));
                            }));
              }));
        return /* () */0;
      }));

export {
  
}
/*  Not a pure module */
