// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as Curry                               from "../../../../../node_modules/bs-platform/lib/es6/curry.js";
import * as Sinon                               from "../../../../../node_modules/wonder-bs-sinon/lib/es6_global/src/sinon.js";
import * as Sinon$1                             from "sinon";
import * as Wonder_jest                         from "../../../../../node_modules/wonder-bs-jest/lib/es6_global/src/wonder_jest.js";
import * as TestTool$Wonderjs                   from "../../tool/TestTool.js";
import * as TransformTool$Wonderjs              from "../../tool/service/transform/TransformTool.js";
import * as CopyArrayBufferService$Wonderjs     from "../../../src/service/primitive/copy/CopyArrayBufferService.js";
import * as CreateStateMainService$Wonderjs     from "../../../src/service/state/main/state/CreateStateMainService.js";
import * as RecordTransformMainService$Wonderjs from "../../../src/service/state/main/transform/RecordTransformMainService.js";

describe("CopyArrayBufferService", (function () {
        var sandbox = Sinon.getSandboxDefaultVal(/* () */0);
        var state = [CreateStateMainService$Wonderjs.createState(/* () */0)];
        beforeEach((function () {
                sandbox[0] = Sinon$1.sandbox.create();
                state[0] = TestTool$Wonderjs.init(sandbox, /* None */0, /* None */0, /* () */0);
                return /* () */0;
              }));
        afterEach((function () {
                return Curry._1(Sinon.restoreSandbox, sandbox[0]);
              }));
        describe("copyArrayBufferData", (function () {
                describe("copy source buffer to target buffer", (function () {
                        var _prepare = function (state) {
                          var sourceBuffer = TransformTool$Wonderjs.createBuffer(3);
                          var match = TransformTool$Wonderjs.setDefaultTypeArrData(3, state[0], TransformTool$Wonderjs.createTypeArrays(sourceBuffer, 3));
                          var targetBuffer = TransformTool$Wonderjs.createBuffer(3);
                          var match$1 = TransformTool$Wonderjs.createTypeArrays(targetBuffer, 3);
                          var matrixArr = /* float array */[
                            1,
                            0,
                            0,
                            0,
                            0,
                            1,
                            0,
                            0,
                            0,
                            0,
                            1,
                            0,
                            10,
                            11,
                            12,
                            1
                          ];
                          var position = /* tuple */[
                            1,
                            2,
                            3
                          ];
                          RecordTransformMainService$Wonderjs.setLocalToWorldMatrix(0, matrixArr, match[0]);
                          RecordTransformMainService$Wonderjs.setLocalPositionByTuple(0, position, match[1]);
                          CopyArrayBufferService$Wonderjs.copyArrayBufferData(sourceBuffer, targetBuffer);
                          return /* tuple */[
                                  state[0],
                                  0,
                                  /* tuple */[
                                    match$1[0],
                                    match$1[1]
                                  ],
                                  /* tuple */[
                                    matrixArr,
                                    position
                                  ]
                                ];
                        };
                        Wonder_jest.test("test1", (function () {
                                var match = _prepare(state);
                                var match$1 = match[3];
                                var match$2 = match[2];
                                var transform = match[1];
                                return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](/* tuple */[
                                                RecordTransformMainService$Wonderjs.getLocalToWorldMatrixTypeArray(transform, match$2[0]),
                                                RecordTransformMainService$Wonderjs.getLocalPositionTuple(transform, match$2[1])
                                              ]), /* tuple */[
                                            new Float32Array(match$1[0]),
                                            match$1[1]
                                          ]);
                              }));
                        return Wonder_jest.test("test2", (function () {
                                      var match = _prepare(state);
                                      var match$1 = match[2];
                                      var transform = match[1];
                                      var state$1 = match[0];
                                      return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](/* tuple */[
                                                      RecordTransformMainService$Wonderjs.getLocalToWorldMatrixTypeArray(transform + 1 | 0, match$1[0]),
                                                      RecordTransformMainService$Wonderjs.getLocalPositionTuple(transform + 1 | 0, match$1[1])
                                                    ]), /* tuple */[
                                                  TransformTool$Wonderjs.getDefaultLocalToWorldMatrixTypeArray(state$1),
                                                  TransformTool$Wonderjs.getDefaultLocalPositionTuple(state$1)
                                                ]);
                                    }));
                      }));
                return /* () */0;
              }));
        return /* () */0;
      }));

export {
  
}
/*  Not a pure module */
