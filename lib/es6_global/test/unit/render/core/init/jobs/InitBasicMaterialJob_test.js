// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as Curry                             from "../../../../../../../../node_modules/bs-platform/lib/es6/curry.js";
import * as Sinon                             from "../../../../../../../../node_modules/wonder-bs-sinon/lib/es6_global/src/sinon.js";
import * as Sinon$1                           from "sinon";
import * as Wonder_jest                       from "../../../../../../../../node_modules/wonder-bs-jest/lib/es6_global/src/wonder_jest.js";
import * as GLSLTool$Wonderjs                 from "../../../../tool/render/core/GLSLTool.js";
import * as StateTool$Wonderjs                from "../../../../tool/core/StateTool.js";
import * as FakeGlTool$Wonderjs               from "../../../../tool/gl/FakeGlTool.js";
import * as InstanceTool$Wonderjs             from "../../../../tool/component/instance/InstanceTool.js";
import * as GLSLLocationTool$Wonderjs         from "../../../../tool/render/shader/GLSLLocationTool.js";
import * as InitBasicMaterialJobTool$Wonderjs from "../../../../tool/render/core/init/jobs/InitBasicMaterialJobTool.js";

describe("test init_basic_material job", (function () {
        var sandbox = Sinon.getSandboxDefaultVal(/* () */0);
        var state = [StateTool$Wonderjs.createState(/* None */0, /* () */0)];
        beforeEach((function () {
                sandbox[0] = Sinon$1.sandbox.create();
                state[0] = InitBasicMaterialJobTool$Wonderjs.initWithRenderConfig(sandbox);
                return /* () */0;
              }));
        afterEach((function () {
                return Curry._1(Sinon.restoreSandbox, sandbox[0]);
              }));
        describe("test get attribute location", (function () {
                describe("test get a_position location", (function () {
                        Wonder_jest.test("test get location", (function () {
                                var match = InitBasicMaterialJobTool$Wonderjs.prepareGameObject(sandbox, state[0]);
                                var getAttribLocation = GLSLLocationTool$Wonderjs.getAttribLocation(/* None */0, sandbox, "a_position");
                                var state$1 = FakeGlTool$Wonderjs.setFakeGl(FakeGlTool$Wonderjs.buildFakeGl(sandbox, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[getAttribLocation], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* () */0), match[0]);
                                InitBasicMaterialJobTool$Wonderjs.exec(state$1);
                                return Sinon.toCalledOnce(Wonder_jest.Expect[/* expect */0](Sinon.withTwoArgs(Sinon$1.match.any, "a_position", getAttribLocation)));
                              }));
                        describe("test cache", (function () {
                                return Wonder_jest.test("if cached, not query gl location", (function () {
                                              var match = InitBasicMaterialJobTool$Wonderjs.prepareGameObject(sandbox, state[0]);
                                              var match$1 = InitBasicMaterialJobTool$Wonderjs.prepareGameObject(sandbox, match[0]);
                                              var getAttribLocation = GLSLLocationTool$Wonderjs.getAttribLocation(/* None */0, sandbox, "a_position");
                                              var state$1 = FakeGlTool$Wonderjs.setFakeGl(FakeGlTool$Wonderjs.buildFakeGl(sandbox, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[getAttribLocation], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* () */0), match$1[0]);
                                              InitBasicMaterialJobTool$Wonderjs.exec(state$1);
                                              return Sinon.toCalledOnce(Wonder_jest.Expect[/* expect */0](Sinon.withTwoArgs(Sinon$1.match.any, "a_position", getAttribLocation)));
                                            }));
                              }));
                        return /* () */0;
                      }));
                return /* () */0;
              }));
        describe("test get uniform location", (function () {
                var _testGetLocation = function (name) {
                  var match = InitBasicMaterialJobTool$Wonderjs.prepareGameObject(sandbox, state[0]);
                  var getUniformLocation = GLSLLocationTool$Wonderjs.getUniformLocation(/* None */0, sandbox, name);
                  var state$1 = FakeGlTool$Wonderjs.setFakeGl(FakeGlTool$Wonderjs.buildFakeGl(sandbox, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[getUniformLocation], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* () */0), match[0]);
                  InitBasicMaterialJobTool$Wonderjs.exec(state$1);
                  return Sinon.toCalledOnce(Wonder_jest.Expect[/* expect */0](Sinon.withTwoArgs(Sinon$1.match.any, name, getUniformLocation)));
                };
                describe("test get u_mMatrix location", (function () {
                        Wonder_jest.test("test get location", (function () {
                                return _testGetLocation("u_mMatrix");
                              }));
                        describe("test cache", (function () {
                                return Wonder_jest.test("if cached, not query gl location", (function () {
                                              var match = InitBasicMaterialJobTool$Wonderjs.prepareGameObject(sandbox, state[0]);
                                              var match$1 = InitBasicMaterialJobTool$Wonderjs.prepareGameObject(sandbox, match[0]);
                                              var getUniformLocation = GLSLLocationTool$Wonderjs.getUniformLocation(/* None */0, sandbox, "u_mMatrix");
                                              var state$1 = FakeGlTool$Wonderjs.setFakeGl(FakeGlTool$Wonderjs.buildFakeGl(sandbox, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[getUniformLocation], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* () */0), match$1[0]);
                                              InitBasicMaterialJobTool$Wonderjs.exec(state$1);
                                              return Sinon.toCalledOnce(Wonder_jest.Expect[/* expect */0](Sinon.withTwoArgs(Sinon$1.match.any, "u_mMatrix", getUniformLocation)));
                                            }));
                              }));
                        return /* () */0;
                      }));
                return Wonder_jest.test("test get u_color location", (function () {
                              return _testGetLocation("u_color");
                            }));
              }));
        describe("test glsl", (function () {
                Wonder_jest.test("glsl only set glPosition,glFragColor once", (function () {
                        var shaderSource = InitBasicMaterialJobTool$Wonderjs.prepareForJudgeGLSL(sandbox, state[0]);
                        return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](/* tuple */[
                                        GLSLTool$Wonderjs.containSpecifyCount(GLSLTool$Wonderjs.getVsSource(shaderSource), "gl_Position =", /* Some */[1], /* () */0),
                                        GLSLTool$Wonderjs.containSpecifyCount(GLSLTool$Wonderjs.getFsSource(shaderSource), "gl_FragColor =", /* Some */[1], /* () */0)
                                      ]), /* tuple */[
                                    /* true */1,
                                    /* true */1
                                  ]);
                      }));
                describe("test shader lib's glsl", (function () {
                        Wonder_jest.test("test common shader lib's glsl", (function () {
                                var shaderSource = InitBasicMaterialJobTool$Wonderjs.prepareForJudgeGLSL(sandbox, state[0]);
                                return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](GLSLTool$Wonderjs.containMultiline(GLSLTool$Wonderjs.getVsSource(shaderSource), /* :: */[
                                                    "uniform mat4 u_vMatrix;\n",
                                                    /* :: */[
                                                      "uniform mat4 u_pMatrix;\n",
                                                      /* [] */0
                                                    ]
                                                  ])), /* true */1);
                              }));
                        describe("test modelMatrix instance shader libs", (function () {
                                Wonder_jest.test("if has no sourceInstance component, use modelMatrix_noInstance shader lib", (function () {
                                        var shaderSource = InitBasicMaterialJobTool$Wonderjs.prepareForJudgeGLSL(sandbox, state[0]);
                                        return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](GLSLTool$Wonderjs.containMultiline(GLSLTool$Wonderjs.getVsSource(shaderSource), /* :: */[
                                                            "uniform mat4 u_mMatrix;",
                                                            /* :: */[
                                                              "mat4 mMatrix = u_mMatrix;",
                                                              /* [] */0
                                                            ]
                                                          ])), /* true */1);
                                      }));
                                describe("else", (function () {
                                        Wonder_jest.test("if support hardware instance, use modelMatrix_hardware_instance shader lib", (function () {
                                                var match = InitBasicMaterialJobTool$Wonderjs.prepareForJudgeGLSLNotExec(sandbox, state[0]);
                                                var match$1 = InstanceTool$Wonderjs.addSourceInstance(match[2], match[0]);
                                                var state$1 = InstanceTool$Wonderjs.setGpuDetectDataAllowHardwareInstance(sandbox, match$1[0]);
                                                InitBasicMaterialJobTool$Wonderjs.exec(state$1);
                                                return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](GLSLTool$Wonderjs.containMultiline(GLSLTool$Wonderjs.getVsSource(match[1]), /* :: */[
                                                                    "attribute vec4 a_mVec4_0;",
                                                                    /* :: */[
                                                                      "attribute vec4 a_mVec4_1;",
                                                                      /* :: */[
                                                                        "attribute vec4 a_mVec4_2;",
                                                                        /* :: */[
                                                                          "attribute vec4 a_mVec4_3;",
                                                                          /* :: */[
                                                                            "mat4 mMatrix = mat4(a_mVec4_0, a_mVec4_1, a_mVec4_2, a_mVec4_3);",
                                                                            /* [] */0
                                                                          ]
                                                                        ]
                                                                      ]
                                                                    ]
                                                                  ])), /* true */1);
                                              }));
                                        describe("else, use modelMatrix_batch_instance shader lib", (function () {
                                                var _setGpuConfigDataAllowBatchInstance = function (state) {
                                                  var newrecord = state.slice();
                                                  newrecord[/* gpuConfig */1] = /* Some */[/* record */[/* useHardwareInstance : false */0]];
                                                  return newrecord;
                                                };
                                                var _setGpuDetectDataAllowBatchInstance = function (state) {
                                                  var newrecord = state.slice();
                                                  var init = state[/* gpuDetectData */4];
                                                  newrecord[/* gpuDetectData */4] = /* record */[
                                                    /* extensionInstancedArrays : None */0,
                                                    /* precision */init[/* precision */1]
                                                  ];
                                                  return newrecord;
                                                };
                                                Wonder_jest.test("if state->gpuConfig->useHardwareInstance == false, use batch", (function () {
                                                        var match = InitBasicMaterialJobTool$Wonderjs.prepareForJudgeGLSLNotExec(sandbox, state[0]);
                                                        var match$1 = InstanceTool$Wonderjs.addSourceInstance(match[2], match[0]);
                                                        var state$1 = _setGpuConfigDataAllowBatchInstance(match$1[0]);
                                                        InitBasicMaterialJobTool$Wonderjs.exec(state$1);
                                                        return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](GLSLTool$Wonderjs.containMultiline(GLSLTool$Wonderjs.getVsSource(match[1]), /* :: */[
                                                                            "uniform mat4 u_mMatrix;",
                                                                            /* :: */[
                                                                              "mat4 mMatrix = u_mMatrix;",
                                                                              /* [] */0
                                                                            ]
                                                                          ])), /* true */1);
                                                      }));
                                                return Wonder_jest.test("if gpu not support hardware instance, use batch", (function () {
                                                              var match = InitBasicMaterialJobTool$Wonderjs.prepareForJudgeGLSLNotExec(sandbox, state[0]);
                                                              var match$1 = InstanceTool$Wonderjs.addSourceInstance(match[2], match[0]);
                                                              var state$1 = _setGpuDetectDataAllowBatchInstance(match$1[0]);
                                                              var state$2 = InstanceTool$Wonderjs.setGpuDetectDataAllowBatchInstance(state$1);
                                                              InitBasicMaterialJobTool$Wonderjs.exec(state$2);
                                                              return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](GLSLTool$Wonderjs.containMultiline(GLSLTool$Wonderjs.getVsSource(match[1]), /* :: */[
                                                                                  "uniform mat4 u_mMatrix;",
                                                                                  /* :: */[
                                                                                    "mat4 mMatrix = u_mMatrix;",
                                                                                    /* [] */0
                                                                                  ]
                                                                                ])), /* true */1);
                                                            }));
                                              }));
                                        return /* () */0;
                                      }));
                                return /* () */0;
                              }));
                        Wonder_jest.test("test vertex shader lib's glsl", (function () {
                                var shaderSource = InitBasicMaterialJobTool$Wonderjs.prepareForJudgeGLSL(sandbox, state[0]);
                                return Wonder_jest.Expect[/* toContainString */11]("attribute vec3 a_position;\n")(Wonder_jest.Expect[/* expect */0](GLSLTool$Wonderjs.getVsSource(shaderSource)));
                              }));
                        describe("test basic shader lib's glsl", (function () {
                                Wonder_jest.test("test vs glsl", (function () {
                                        var shaderSource = InitBasicMaterialJobTool$Wonderjs.prepareForJudgeGLSL(sandbox, state[0]);
                                        return Wonder_jest.Expect[/* toContainString */11]("\ngl_Position = u_pMatrix * u_vMatrix * mMatrix * vec4(a_position, 1.0);\n")(Wonder_jest.Expect[/* expect */0](GLSLTool$Wonderjs.getVsSource(shaderSource)));
                                      }));
                                return Wonder_jest.test("test fs glsl", (function () {
                                              var shaderSource = InitBasicMaterialJobTool$Wonderjs.prepareForJudgeGLSL(sandbox, state[0]);
                                              return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](GLSLTool$Wonderjs.containMultiline(GLSLTool$Wonderjs.getFsSource(shaderSource), /* :: */[
                                                                  "uniform vec3 u_color;",
                                                                  /* :: */[
                                                                    "vec4 totalColor = vec4(u_color, 1.0);\n",
                                                                    /* [] */0
                                                                  ]
                                                                ])), /* true */1);
                                            }));
                              }));
                        return Wonder_jest.test("test basic_end shader lib's glsl", (function () {
                                      var shaderSource = InitBasicMaterialJobTool$Wonderjs.prepareForJudgeGLSL(sandbox, state[0]);
                                      return Wonder_jest.Expect[/* toContainString */11]("gl_FragColor = vec4(totalColor.rgb, totalColor.a);")(Wonder_jest.Expect[/* expect */0](GLSLTool$Wonderjs.getFsSource(shaderSource)));
                                    }));
                      }));
                return /* () */0;
              }));
        return /* () */0;
      }));

export {
  
}
/*  Not a pure module */
