// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as Sinon                                  from "../../../../../../../../node_modules/wonder-bs-sinon/lib/es6_global/src/sinon.js";
import * as Sinon$1                                from "sinon";
import * as Wonder_jest                            from "../../../../../../../../node_modules/wonder-bs-jest/lib/es6_global/src/wonder_jest.js";
import * as GLSLTool$Wonderjs                      from "../../../../tool/render/core/GLSLTool.js";
import * as StateTool$Wonderjs                     from "../../../../tool/core/StateTool.js";
import * as SimpleBasicRenderPipelineTool$Wonderjs from "../../../../tool/render/core/init/pipelines/SimpleBasicRenderPipelineTool.js";

describe("test simple_basic_render pipeline", (function () {
        var sandbox = Sinon.getSandboxDefaultVal(/* () */0);
        var state = [StateTool$Wonderjs.createState(/* None */0, /* () */0)];
        beforeEach((function () {
                sandbox[0] = Sinon$1.sandbox.create();
                state[0] = SimpleBasicRenderPipelineTool$Wonderjs.initWithRenderConfig(sandbox);
                return /* () */0;
              }));
        describe("exec jobs", (function () {
                describe("exec init_basic_material job", (function () {
                        return Wonder_jest.test("should contain basic_end shader lib's glsl", (function () {
                                      var shaderSource = SimpleBasicRenderPipelineTool$Wonderjs.prepareForJudgeGLSL(sandbox, state[0]);
                                      return Wonder_jest.Expect[/* toContainString */11]("gl_FragColor = vec4(totalColor.rgb, totalColor.a);")(Wonder_jest.Expect[/* expect */0](GLSLTool$Wonderjs.getFsSource(shaderSource)));
                                    }));
                      }));
                return /* () */0;
              }));
        return /* () */0;
      }));

export {
  
}
/*  Not a pure module */
