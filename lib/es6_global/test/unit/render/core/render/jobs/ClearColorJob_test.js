// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as Curry                      from "../../../../../../../../node_modules/bs-platform/lib/es6/curry.js";
import * as Sinon                      from "../../../../../../../../node_modules/wonder-bs-sinon/lib/es6_global/src/sinon.js";
import * as Sinon$1                    from "sinon";
import * as Wonder_jest                from "../../../../../../../../node_modules/wonder-bs-jest/lib/es6_global/src/wonder_jest.js";
import * as ColorTool$Wonderjs         from "../../../../tool/ColorTool.js";
import * as StateTool$Wonderjs         from "../../../../tool/core/StateTool.js";
import * as FakeGlTool$Wonderjs        from "../../../../tool/gl/FakeGlTool.js";
import * as RenderJobsTool$Wonderjs    from "../../../../tool/render/core/render/jobs/RenderJobsTool.js";
import * as ClearColorJobTool$Wonderjs from "../../../../tool/render/core/render/jobs/ClearColorJobTool.js";

describe("test clear_color job", (function () {
        var sandbox = Sinon.getSandboxDefaultVal(/* () */0);
        var state = [StateTool$Wonderjs.createState(/* None */0, /* () */0)];
        var _render = function ($staropt$star, state) {
          var colorHexStr = $staropt$star ? $staropt$star[0] : "#123456";
          return ClearColorJobTool$Wonderjs.getJob(RenderJobsTool$Wonderjs.buildConfigData(/* Some */[/* Some */[/* array */[colorHexStr]]], /* None */0, /* () */0), state);
        };
        beforeEach((function () {
                sandbox[0] = Sinon$1.sandbox.create();
                state[0] = RenderJobsTool$Wonderjs.initWithRenderConfig(sandbox);
                return /* () */0;
              }));
        afterEach((function () {
                return Curry._1(Sinon.restoreSandbox, sandbox[0]);
              }));
        Wonder_jest.test("clear gl color", (function () {
                var state$1 = state[0];
                var colorHexStr = "#123456";
                var clearColor = Sinon.createEmptyStubWithJsObjSandbox(sandbox);
                var state$2 = FakeGlTool$Wonderjs.setFakeGl(FakeGlTool$Wonderjs.buildFakeGl(sandbox, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[clearColor], /* None */0, /* None */0, /* None */0, /* None */0, /* () */0), state$1);
                _render(/* Some */[colorHexStr], state$2);
                var match = ColorTool$Wonderjs.convert16HexToRGBA(colorHexStr);
                return Sinon.toCalledWith(/* :: */[
                            match[0],
                            /* :: */[
                              match[1],
                              /* :: */[
                                match[2],
                                /* :: */[
                                  match[3],
                                  /* [] */0
                                ]
                              ]
                            ]
                          ], Wonder_jest.Expect[/* expect */0](clearColor));
              }));
        return Wonder_jest.test("if color is the same as the last one, not clear", (function () {
                      var state$1 = state[0];
                      var clearColor = Sinon.createEmptyStubWithJsObjSandbox(sandbox);
                      var state$2 = FakeGlTool$Wonderjs.setFakeGl(FakeGlTool$Wonderjs.buildFakeGl(sandbox, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[clearColor], /* None */0, /* None */0, /* None */0, /* None */0, /* () */0), state$1);
                      var state$3 = _render(/* None */0, state$2);
                      var state$4 = _render(/* None */0, state$3);
                      _render(/* None */0, state$4);
                      return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](Sinon.getCallCount(clearColor)), 1);
                    }));
      }));

export {
  
}
/*  Not a pure module */
