// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as Curry                       from "../../../../../../../../node_modules/bs-platform/lib/es6/curry.js";
import * as Sinon                       from "../../../../../../../../node_modules/wonder-bs-sinon/lib/es6_global/src/sinon.js";
import * as Sinon$1                     from "sinon";
import * as Wonder_jest                 from "../../../../../../../../node_modules/wonder-bs-jest/lib/es6_global/src/wonder_jest.js";
import * as StateTool$Wonderjs          from "../../../../tool/core/StateTool.js";
import * as FakeGlTool$Wonderjs         from "../../../../tool/gl/FakeGlTool.js";
import * as RenderJobsTool$Wonderjs     from "../../../../tool/render/core/render/jobs/RenderJobsTool.js";
import * as ClearBufferJobTool$Wonderjs from "../../../../tool/render/core/render/jobs/ClearBufferJobTool.js";

describe("test clear_buffer job", (function () {
        var sandbox = Sinon.getSandboxDefaultVal(/* () */0);
        var state = [StateTool$Wonderjs.createState(/* None */0, /* () */0)];
        var _render = function ($staropt$star, state) {
          var flags = $staropt$star ? $staropt$star[0] : /* array */["COLOR_BUFFER"];
          return ClearBufferJobTool$Wonderjs.getJob(RenderJobsTool$Wonderjs.buildConfigData(/* Some */[/* Some */[flags]], /* None */0, /* () */0), state);
        };
        beforeEach((function () {
                sandbox[0] = Sinon$1.sandbox.create();
                state[0] = RenderJobsTool$Wonderjs.initWithRenderConfig(sandbox);
                return /* () */0;
              }));
        afterEach((function () {
                return Curry._1(Sinon.restoreSandbox, sandbox[0]);
              }));
        describe("clear gl buffer", (function () {
                describe("clear which buffer is decide by flags", (function () {
                        Wonder_jest.test("test pass COLOR_BUFFER flag", (function () {
                                var state$1 = state[0];
                                var clear = Sinon.createEmptyStubWithJsObjSandbox(sandbox);
                                var state$2 = FakeGlTool$Wonderjs.setFakeGl(FakeGlTool$Wonderjs.buildFakeGl(sandbox, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[1], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[clear], /* None */0, /* None */0, /* None */0, /* () */0), state$1);
                                _render(/* Some */[/* array */["COLOR_BUFFER"]], state$2);
                                return Sinon.toCalledWith(/* :: */[
                                            1,
                                            /* [] */0
                                          ], Wonder_jest.Expect[/* expect */0](clear));
                              }));
                        Wonder_jest.test("test pass DEPTH_BUFFER flag", (function () {
                                var state$1 = state[0];
                                var clear = Sinon.createEmptyStubWithJsObjSandbox(sandbox);
                                var state$2 = FakeGlTool$Wonderjs.setFakeGl(FakeGlTool$Wonderjs.buildFakeGl(sandbox, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[1], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[clear], /* None */0, /* None */0, /* None */0, /* () */0), state$1);
                                _render(/* Some */[/* array */["DEPTH_BUFFER"]], state$2);
                                return Sinon.toCalledWith(/* :: */[
                                            1,
                                            /* [] */0
                                          ], Wonder_jest.Expect[/* expect */0](clear));
                              }));
                        Wonder_jest.test("test pass STENCIL_BUFFER flag", (function () {
                                var state$1 = state[0];
                                var clear = Sinon.createEmptyStubWithJsObjSandbox(sandbox);
                                var state$2 = FakeGlTool$Wonderjs.setFakeGl(FakeGlTool$Wonderjs.buildFakeGl(sandbox, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[1], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[clear], /* None */0, /* None */0, /* None */0, /* () */0), state$1);
                                _render(/* Some */[/* array */["STENCIL_BUFFER"]], state$2);
                                return Sinon.toCalledWith(/* :: */[
                                            1,
                                            /* [] */0
                                          ], Wonder_jest.Expect[/* expect */0](clear));
                              }));
                        return Wonder_jest.test("test pass all flags", (function () {
                                      var state$1 = state[0];
                                      var clear = Sinon.createEmptyStubWithJsObjSandbox(sandbox);
                                      var state$2 = FakeGlTool$Wonderjs.setFakeGl(FakeGlTool$Wonderjs.buildFakeGl(sandbox, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[1], /* Some */[2], /* Some */[3], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[clear], /* None */0, /* None */0, /* None */0, /* () */0), state$1);
                                      _render(/* Some */[/* array */[
                                              "COLOR_BUFFER",
                                              "DEPTH_BUFFER",
                                              "STENCIL_BUFFER"
                                            ]], state$2);
                                      return Sinon.toCalledWith(/* :: */[
                                                  3,
                                                  /* [] */0
                                                ], Wonder_jest.Expect[/* expect */0](clear));
                                    }));
                      }));
                return /* () */0;
              }));
        describe("set color write", (function () {
                Wonder_jest.test("set to all true", (function () {
                        var state$1 = state[0];
                        var colorMask = Sinon.createEmptyStubWithJsObjSandbox(sandbox);
                        var state$2 = FakeGlTool$Wonderjs.setFakeGl(FakeGlTool$Wonderjs.buildFakeGl(sandbox, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[colorMask], /* None */0, /* None */0, /* () */0), state$1);
                        _render(/* None */0, state$2);
                        return Sinon.toCalledWith(/* :: */[
                                    true,
                                    /* :: */[
                                      true,
                                      /* :: */[
                                        true,
                                        /* :: */[
                                          true,
                                          /* [] */0
                                        ]
                                      ]
                                    ]
                                  ], Wonder_jest.Expect[/* expect */0](colorMask));
                      }));
                return Wonder_jest.test("if color write is the same as the last one, not set", (function () {
                              var state$1 = state[0];
                              var colorMask = Sinon.createEmptyStubWithJsObjSandbox(sandbox);
                              var state$2 = FakeGlTool$Wonderjs.setFakeGl(FakeGlTool$Wonderjs.buildFakeGl(sandbox, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[colorMask], /* None */0, /* None */0, /* () */0), state$1);
                              var state$3 = _render(/* None */0, state$2);
                              var state$4 = _render(/* None */0, state$3);
                              _render(/* None */0, state$4);
                              return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](Sinon.getCallCount(colorMask)), 1);
                            }));
              }));
        return /* () */0;
      }));

export {
  
}
/*  Not a pure module */
