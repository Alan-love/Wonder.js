// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as Curry                                    from "../../../../../../../../../../node_modules/bs-platform/lib/es6/curry.js";
import * as Sinon                                    from "../../../../../../../../../../node_modules/wonder-bs-sinon/lib/es6_global/src/sinon.js";
import * as Sinon$1                                  from "sinon";
import * as Caml_array                               from "../../../../../../../../../../node_modules/bs-platform/lib/es6/caml_array.js";
import * as Caml_int32                               from "../../../../../../../../../../node_modules/bs-platform/lib/es6/caml_int32.js";
import * as Wonder_jest                              from "../../../../../../../../../../node_modules/wonder-bs-jest/lib/es6_global/src/wonder_jest.js";
import * as Material$Wonderjs                        from "../../../../../../../../src/ecs/component/api/material/Material.js";
import * as StateTool$Wonderjs                       from "../../../../../../tool/core/StateTool.js";
import * as Transform$Wonderjs                       from "../../../../../../../../src/ecs/component/api/transform/Transform.js";
import * as FakeGlTool$Wonderjs                      from "../../../../../../tool/gl/FakeGlTool.js";
import * as GameObject$Wonderjs                      from "../../../../../../../../src/ecs/admin/api/GameObject.js";
import * as ArraySystem$Wonderjs                     from "../../../../../../../../src/structure/ArraySystem.js";
import * as GeometryTool$Wonderjs                    from "../../../../../../tool/component/geometry/GeometryTool.js";
import * as InstanceTool$Wonderjs                    from "../../../../../../tool/component/instance/InstanceTool.js";
import * as TransformTool$Wonderjs                   from "../../../../../../tool/component/transform/TransformTool.js";
import * as GLSLSenderTool$Wonderjs                  from "../../../../../../tool/render/shader/GLSLSenderTool.js";
import * as RenderJobsTool$Wonderjs                  from "../../../../../../tool/render/core/render/jobs/RenderJobsTool.js";
import * as SourceInstance$Wonderjs                  from "../../../../../../../../src/ecs/component/api/instance/SourceInstance.js";
import * as TypeArrayUtils$Wonderjs                  from "../../../../../../../../src/utils/TypeArrayUtils.js";
import * as GLSLLocationTool$Wonderjs                from "../../../../../../tool/render/shader/GLSLLocationTool.js";
import * as InstanceBufferTool$Wonderjs              from "../../../../../../tool/render/buffer/InstanceBufferTool.js";
import * as RenderBasicHardwareInstanceTool$Wonderjs from "../../../../../../tool/render/instance/RenderBasicHardwareInstanceTool.js";

describe("test render basic hardware instance", (function () {
        var sandbox = Sinon.getSandboxDefaultVal(/* () */0);
        var state = [StateTool$Wonderjs.createState(/* None */0, /* () */0)];
        beforeEach((function () {
                sandbox[0] = Sinon$1.sandbox.create();
                state[0] = RenderJobsTool$Wonderjs.initWithRenderConfigAndBufferConfig(sandbox, GeometryTool$Wonderjs.buildBufferConfig(3000));
                return /* () */0;
              }));
        afterEach((function () {
                return Curry._1(Sinon.restoreSandbox, sandbox[0]);
              }));
        describe("use program", (function () {
                var _prepareForUseProgram = function (sandbox, state) {
                  var match = RenderBasicHardwareInstanceTool$Wonderjs.prepare(sandbox, state);
                  var createProgram = Sinon.returns(1, Sinon.onCall(0, Sinon.createEmptyStubWithJsObjSandbox(sandbox)));
                  var useProgram = Sinon.createEmptyStubWithJsObjSandbox(sandbox);
                  var state$1 = FakeGlTool$Wonderjs.setFakeGl(FakeGlTool$Wonderjs.buildFakeGl(sandbox, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[createProgram], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[useProgram], /* None */0, /* () */0), match[0]);
                  return /* tuple */[
                          state$1,
                          1,
                          createProgram,
                          useProgram
                        ];
                };
                Wonder_jest.test("create program and use program only once", (function () {
                        var match = _prepareForUseProgram(sandbox, state[0]);
                        RenderBasicHardwareInstanceTool$Wonderjs.render(RenderJobsTool$Wonderjs.initSystemAndRender(match[0]));
                        return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](Sinon.getCallCount(match[2])), 1);
                      }));
                return Wonder_jest.test("only use sourceInstance's gameObject's program", (function () {
                              var match = _prepareForUseProgram(sandbox, state[0]);
                              RenderBasicHardwareInstanceTool$Wonderjs.render(RenderJobsTool$Wonderjs.initSystemAndRender(match[0]));
                              return Sinon.toCalledWith(/* :: */[
                                          match[1],
                                          /* [] */0
                                        ], Wonder_jest.Expect[/* expect */0](match[3]));
                            }));
              }));
        describe("send attribute data", (function () {
                describe("send sourceInstance gameObject's a_position", (function () {
                        return Wonder_jest.test("test attach buffer to attribute", (function () {
                                      var match = RenderBasicHardwareInstanceTool$Wonderjs.prepare(sandbox, state[0]);
                                      var vertexAttribPointer = Sinon.createEmptyStubWithJsObjSandbox(sandbox);
                                      var getAttribLocation = GLSLLocationTool$Wonderjs.getAttribLocation(/* Some */[0], sandbox, "a_position");
                                      var state$1 = FakeGlTool$Wonderjs.setFakeGl(FakeGlTool$Wonderjs.buildFakeGl(sandbox, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[1], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[getAttribLocation], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[vertexAttribPointer], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* () */0), match[0]);
                                      RenderBasicHardwareInstanceTool$Wonderjs.render(RenderJobsTool$Wonderjs.initSystemAndRender(state$1));
                                      return Sinon.toCalledWith(/* :: */[
                                                  0,
                                                  /* :: */[
                                                    3,
                                                    /* :: */[
                                                      1,
                                                      /* :: */[
                                                        false,
                                                        /* :: */[
                                                          0,
                                                          /* :: */[
                                                            0,
                                                            /* [] */0
                                                          ]
                                                        ]
                                                      ]
                                                    ]
                                                  ]
                                                ], Wonder_jest.Expect[/* expect */0](Sinon.getCall(0, vertexAttribPointer)));
                                    }));
                      }));
                return /* () */0;
              }));
        describe("send uniform data", (function () {
                Wonder_jest.test("send shader uniform data only once per shader", (function () {
                        var match = RenderBasicHardwareInstanceTool$Wonderjs.prepare(sandbox, state[0]);
                        var match$1 = RenderBasicHardwareInstanceTool$Wonderjs.createSourceInstanceGameObject(sandbox, match[0]);
                        var match$2 = RenderJobsTool$Wonderjs.prepareGameObject(sandbox, match$1[0]);
                        var uniformMatrix4fv = Sinon.createEmptyStubWithJsObjSandbox(sandbox);
                        var getUniformLocation = GLSLLocationTool$Wonderjs.getUniformLocation(/* Some */[1], sandbox, "u_vMatrix");
                        var state$1 = FakeGlTool$Wonderjs.setFakeGl(FakeGlTool$Wonderjs.buildFakeGl(sandbox, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[getUniformLocation], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[uniformMatrix4fv], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* () */0), match$2[0]);
                        RenderBasicHardwareInstanceTool$Wonderjs.render(RenderJobsTool$Wonderjs.updateSystem(RenderJobsTool$Wonderjs.initSystemAndRender(state$1)));
                        return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](Sinon.getCallCount(Sinon.withOneArg(1, uniformMatrix4fv))), 2);
                      }));
                return GLSLSenderTool$Wonderjs.JudgeSendUniformData[/* testSendVector3 */3](sandbox, "u_color", (function (param, _, _$1, state) {
                              return Material$Wonderjs.setMaterialColor(param[1], /* float array */[
                                          0,
                                          1,
                                          0.2
                                        ], state);
                            }), /* :: */[
                            0,
                            /* :: */[
                              1,
                              /* :: */[
                                0.2,
                                /* [] */0
                              ]
                            ]
                          ], /* None */0, /* () */0);
              }));
        describe("send instance data", (function () {
                describe("send modelMatrix data", (function () {
                        describe("create instance buffer when first send", (function () {
                                Wonder_jest.test("test create buffer", (function () {
                                        var match = RenderBasicHardwareInstanceTool$Wonderjs.prepare(sandbox, state[0]);
                                        var createBuffer = Sinon.createEmptyStubWithJsObjSandbox(sandbox);
                                        var state$1 = FakeGlTool$Wonderjs.setFakeGl(FakeGlTool$Wonderjs.buildFakeGl(sandbox, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[createBuffer], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* () */0), match[0]);
                                        RenderBasicHardwareInstanceTool$Wonderjs.render(RenderJobsTool$Wonderjs.initSystemAndRender(state$1));
                                        return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](Sinon.getCallCount(createBuffer)), 3);
                                      }));
                                return Wonder_jest.test("test not create buffer when second call", (function () {
                                              var match = RenderBasicHardwareInstanceTool$Wonderjs.prepare(sandbox, state[0]);
                                              var createBuffer = Sinon.returns(1, Sinon.createEmptyStubWithJsObjSandbox(sandbox));
                                              var state$1 = FakeGlTool$Wonderjs.setFakeGl(FakeGlTool$Wonderjs.buildFakeGl(sandbox, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[createBuffer], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* () */0), match[0]);
                                              var state$2 = RenderBasicHardwareInstanceTool$Wonderjs.render(RenderJobsTool$Wonderjs.initSystemAndRender(state$1));
                                              RenderBasicHardwareInstanceTool$Wonderjs.render(state$2);
                                              return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](Sinon.getCallCount(createBuffer)), 3);
                                            }));
                              }));
                        describe("set instance buffer's capacity", (function () {
                                describe("contract check", (function () {
                                        return Wonder_jest.test("capacity should be a multiplier of 4", (function () {
                                                      return Wonder_jest.Expect[/* toThrowMessage */20]("capacity should be a multiplier of 4", Wonder_jest.Expect[/* expect */0]((function () {
                                                                        return InstanceBufferTool$Wonderjs.createModelMatrixFloat32Array(3);
                                                                      })));
                                                    }));
                                      }));
                                describe("if current capacity < target capacity", (function () {
                                        var _prepare = function (sandbox, state) {
                                          var match = RenderBasicHardwareInstanceTool$Wonderjs.prepare(sandbox, state);
                                          var match$1 = match[2];
                                          var sourceInstance = match$1[3];
                                          var state$1 = match[0];
                                          for(var _for = 0; _for <= 62; ++_for){
                                            SourceInstance$Wonderjs.createSourceInstanceObjectInstance(sourceInstance, state$1);
                                          }
                                          return /* tuple */[
                                                  state$1,
                                                  match[1],
                                                  sourceInstance,
                                                  match$1[4]
                                                ];
                                        };
                                        describe("delete old instance buffer", (function () {
                                                var _prepare$1 = function (sandbox, state) {
                                                  var match = _prepare(sandbox, state[0]);
                                                  var createBuffer = Sinon.createEmptyStubWithJsObjSandbox(sandbox);
                                                  Sinon.returns(1, Sinon.onCall(2, createBuffer));
                                                  Sinon.returns(2, Sinon.onCall(3, createBuffer));
                                                  var deleteBuffer = Sinon.createEmptyStubWithJsObjSandbox(sandbox);
                                                  return /* tuple */[
                                                          match[0],
                                                          1,
                                                          2,
                                                          createBuffer,
                                                          deleteBuffer
                                                        ];
                                                };
                                                Wonder_jest.test("test delete", (function () {
                                                        var match = _prepare$1(sandbox, state);
                                                        var deleteBuffer = match[4];
                                                        var state$1 = FakeGlTool$Wonderjs.setFakeGl(FakeGlTool$Wonderjs.buildFakeGl(sandbox, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[deleteBuffer], /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[match[3]], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* () */0), match[0]);
                                                        RenderBasicHardwareInstanceTool$Wonderjs.render(RenderJobsTool$Wonderjs.initSystemAndRender(state$1));
                                                        return Sinon.toCalledWith(/* :: */[
                                                                    match[1],
                                                                    /* [] */0
                                                                  ], Wonder_jest.Expect[/* expect */0](deleteBuffer));
                                                      }));
                                                return Wonder_jest.test("not bind deleted buffer", (function () {
                                                              var match = _prepare$1(sandbox, state);
                                                              var bindBuffer = Sinon.createEmptyStubWithJsObjSandbox(sandbox);
                                                              var state$1 = FakeGlTool$Wonderjs.setFakeGl(FakeGlTool$Wonderjs.buildFakeGl(sandbox, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[match[4]], /* None */0, /* None */0, /* Some */[bindBuffer], /* None */0, /* Some */[match[3]], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* () */0), match[0]);
                                                              RenderBasicHardwareInstanceTool$Wonderjs.render(RenderJobsTool$Wonderjs.initSystemAndRender(state$1));
                                                              return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](Sinon.getCallCount(Sinon.withTwoArgs(Sinon$1.match.any, match[1], bindBuffer))), 1);
                                                            }));
                                              }));
                                        Wonder_jest.test("create new one", (function () {
                                                var match = _prepare(sandbox, state[0]);
                                                var createBuffer = Sinon.returns(1, Sinon.createEmptyStubWithJsObjSandbox(sandbox));
                                                var state$1 = FakeGlTool$Wonderjs.setFakeGl(FakeGlTool$Wonderjs.buildFakeGl(sandbox, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[createBuffer], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* () */0), match[0]);
                                                RenderBasicHardwareInstanceTool$Wonderjs.render(RenderJobsTool$Wonderjs.initSystemAndRender(state$1));
                                                return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](Sinon.getCallCount(createBuffer)), 4);
                                              }));
                                        Wonder_jest.test("bufferData with increased capacity and dynamic draw", (function () {
                                                var match = _prepare(sandbox, state[0]);
                                                var bufferData = Sinon.createEmptyStubWithJsObjSandbox(sandbox);
                                                var state$1 = FakeGlTool$Wonderjs.setFakeGl(FakeGlTool$Wonderjs.buildFakeGl(sandbox, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[1], /* None */0, /* None */0, /* None */0, /* Some */[2], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[bufferData], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* () */0), match[0]);
                                                RenderBasicHardwareInstanceTool$Wonderjs.render(RenderJobsTool$Wonderjs.initSystemAndRender(state$1));
                                                return Sinon.toCalledOnce(Wonder_jest.Expect[/* expect */0](Sinon.withThreeArgs(1, 8192, 2, bufferData)));
                                              }));
                                        describe("fix bug", (function () {
                                                describe("test in the next render(if current capacity >= target capacity)", (function () {
                                                        Wonder_jest.test("should use the instance buffer created in the previous render", (function () {
                                                                var match = _prepare(sandbox, state[0]);
                                                                var createBuffer = Sinon.returns(1, Sinon.createEmptyStubWithJsObjSandbox(sandbox));
                                                                var state$1 = FakeGlTool$Wonderjs.setFakeGl(FakeGlTool$Wonderjs.buildFakeGl(sandbox, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[createBuffer], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* () */0), match[0]);
                                                                var state$2 = RenderJobsTool$Wonderjs.initSystemAndRender(state$1);
                                                                var state$3 = RenderBasicHardwareInstanceTool$Wonderjs.render(state$2);
                                                                return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](InstanceBufferTool$Wonderjs.getOrCreateBuffer(match[2], state$3)), 1);
                                                              }));
                                                        return Wonder_jest.test("shouldn't create instance buffer", (function () {
                                                                      var match = _prepare(sandbox, state[0]);
                                                                      var createBuffer = Sinon.returns(1, Sinon.createEmptyStubWithJsObjSandbox(sandbox));
                                                                      var state$1 = FakeGlTool$Wonderjs.setFakeGl(FakeGlTool$Wonderjs.buildFakeGl(sandbox, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[createBuffer], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* () */0), match[0]);
                                                                      var state$2 = RenderJobsTool$Wonderjs.initSystemAndRender(state$1);
                                                                      var state$3 = RenderBasicHardwareInstanceTool$Wonderjs.render(state$2);
                                                                      var callCount = Sinon.getCallCount(createBuffer);
                                                                      RenderBasicHardwareInstanceTool$Wonderjs.render(state$3);
                                                                      return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](Sinon.getCallCount(createBuffer)), callCount);
                                                                    }));
                                                      }));
                                                return /* () */0;
                                              }));
                                        return /* () */0;
                                      }));
                                return /* () */0;
                              }));
                        describe("send sourceInstance gameObject's and objectInstanceGameObject gameObjects' model matrices", (function () {
                                var _prepare = function (sandbox, state) {
                                  var match = RenderBasicHardwareInstanceTool$Wonderjs.prepare(sandbox, state);
                                  var match$1 = match[2];
                                  return /* tuple */[
                                          match[0],
                                          match[1],
                                          match$1[3],
                                          match$1[4]
                                        ];
                                };
                                return Wonder_jest.test("buffer sub data", (function () {
                                              var match = _prepare(sandbox, state[0]);
                                              var objectInstanceGameObject = match[3];
                                              var state$1 = match[0];
                                              var sourceTransform = GameObject$Wonderjs.getGameObjectTransformComponent(match[1], state$1);
                                              var objectTransform = GameObject$Wonderjs.getGameObjectTransformComponent(objectInstanceGameObject, state$1);
                                              var state$2 = Transform$Wonderjs.setTransformLocalPosition(objectInstanceGameObject, /* tuple */[
                                                    2,
                                                    4,
                                                    5
                                                  ], Transform$Wonderjs.setTransformLocalPosition(sourceTransform, /* tuple */[
                                                        1,
                                                        2,
                                                        3
                                                      ], state$1));
                                              var bufferSubData = Sinon.createEmptyStubWithJsObjSandbox(sandbox);
                                              var state$3 = FakeGlTool$Wonderjs.setFakeGl(FakeGlTool$Wonderjs.buildFakeGl(sandbox, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[1], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[bufferSubData], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* () */0), state$2);
                                              var state$4 = RenderBasicHardwareInstanceTool$Wonderjs.render(RenderJobsTool$Wonderjs.initSystemAndRender(state$3));
                                              var data = new Float32Array(1024);
                                              var transformArr = /* int array */[
                                                sourceTransform,
                                                objectTransform
                                              ];
                                              ArraySystem$Wonderjs.reduceOneParam((function (offset, index) {
                                                      var transform = Caml_array.caml_array_get(transformArr, index);
                                                      TypeArrayUtils$Wonderjs.fillFloat32ArrayWithOffset(data, TransformTool$Wonderjs.getLocalToWorldMatrixTypeArray(transform, state$4), offset);
                                                      return offset + 16 | 0;
                                                    }), 0, ArraySystem$Wonderjs.range(0, 1));
                                              ArraySystem$Wonderjs.reduceOneParam((function (offset, _) {
                                                      TypeArrayUtils$Wonderjs.fillFloat32ArrayWithOffset(data, new Float32Array(/* float array */[
                                                                0,
                                                                0,
                                                                0,
                                                                0,
                                                                0,
                                                                0,
                                                                0,
                                                                0,
                                                                0,
                                                                0,
                                                                0,
                                                                0,
                                                                0,
                                                                0,
                                                                0,
                                                                0
                                                              ]), offset);
                                                      return offset + 16 | 0;
                                                    }), 32, ArraySystem$Wonderjs.range(2, 63));
                                              return Sinon.toCalledOnce(Wonder_jest.Expect[/* expect */0](Sinon.withThreeArgs(1, 0, data, bufferSubData)));
                                            }));
                              }));
                        describe("handle instance data position", (function () {
                                var _prepare = function (sandbox, state) {
                                  var match = RenderBasicHardwareInstanceTool$Wonderjs.prepare(sandbox, state[0]);
                                  var getAttribLocation = GLSLLocationTool$Wonderjs.getAttribLocation(/* Some */[1], sandbox, "a_mVec4_0");
                                  Sinon.returns(2, Sinon.withTwoArgs(Sinon$1.match.any, "a_mVec4_1", getAttribLocation));
                                  Sinon.returns(3, Sinon.withTwoArgs(Sinon$1.match.any, "a_mVec4_2", getAttribLocation));
                                  Sinon.returns(4, Sinon.withTwoArgs(Sinon$1.match.any, "a_mVec4_3", getAttribLocation));
                                  return /* tuple */[
                                          match[0],
                                          1,
                                          2,
                                          3,
                                          4,
                                          getAttribLocation
                                        ];
                                };
                                Wonder_jest.test("enableVertexAttribArray instance data", (function () {
                                        var match = _prepare(sandbox, state);
                                        var enableVertexAttribArray = Sinon.createEmptyStubWithJsObjSandbox(sandbox);
                                        var state$1 = FakeGlTool$Wonderjs.setFakeGl(FakeGlTool$Wonderjs.buildFakeGl(sandbox, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[match[5]], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[enableVertexAttribArray], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* () */0), match[0]);
                                        var state$2 = RenderJobsTool$Wonderjs.initSystemAndRender(state$1);
                                        RenderBasicHardwareInstanceTool$Wonderjs.render(state$2);
                                        return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](/* tuple */[
                                                        Sinon.getCallCount(Sinon.withOneArg(match[1], enableVertexAttribArray)),
                                                        Sinon.getCallCount(Sinon.withOneArg(match[2], enableVertexAttribArray)),
                                                        Sinon.getCallCount(Sinon.withOneArg(match[3], enableVertexAttribArray)),
                                                        Sinon.getCallCount(Sinon.withOneArg(match[4], enableVertexAttribArray))
                                                      ]), /* tuple */[
                                                    1,
                                                    1,
                                                    1,
                                                    1
                                                  ]);
                                      }));
                                describe("vertexAttribPointer instance data", (function () {
                                        var _prepare$1 = function (sandbox, state) {
                                          var match = _prepare(sandbox, state);
                                          var vertexAttribPointer = Sinon.createEmptyStubWithJsObjSandbox(sandbox);
                                          var state$1 = FakeGlTool$Wonderjs.setFakeGl(FakeGlTool$Wonderjs.buildFakeGl(sandbox, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[1], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[match[5]], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[vertexAttribPointer], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* () */0), match[0]);
                                          var state$2 = RenderJobsTool$Wonderjs.initSystemAndRender(state$1);
                                          RenderBasicHardwareInstanceTool$Wonderjs.render(state$2);
                                          return /* tuple */[
                                                  1,
                                                  match[1],
                                                  match[2],
                                                  match[3],
                                                  match[4],
                                                  vertexAttribPointer
                                                ];
                                        };
                                        Wonder_jest.test("test first data", (function () {
                                                var match = _prepare$1(sandbox, state);
                                                return Sinon.toCalledWith(/* :: */[
                                                            match[1],
                                                            /* :: */[
                                                              4,
                                                              /* :: */[
                                                                match[0],
                                                                /* :: */[
                                                                  false,
                                                                  /* :: */[
                                                                    64,
                                                                    /* :: */[
                                                                      0,
                                                                      /* [] */0
                                                                    ]
                                                                  ]
                                                                ]
                                                              ]
                                                            ]
                                                          ], Wonder_jest.Expect[/* expect */0](match[5]));
                                              }));
                                        Wonder_jest.test("test second data", (function () {
                                                var match = _prepare$1(sandbox, state);
                                                return Sinon.toCalledWith(/* :: */[
                                                            match[2],
                                                            /* :: */[
                                                              4,
                                                              /* :: */[
                                                                match[0],
                                                                /* :: */[
                                                                  false,
                                                                  /* :: */[
                                                                    64,
                                                                    /* :: */[
                                                                      16,
                                                                      /* [] */0
                                                                    ]
                                                                  ]
                                                                ]
                                                              ]
                                                            ]
                                                          ], Wonder_jest.Expect[/* expect */0](match[5]));
                                              }));
                                        Wonder_jest.test("test third data", (function () {
                                                var match = _prepare$1(sandbox, state);
                                                return Sinon.toCalledWith(/* :: */[
                                                            match[3],
                                                            /* :: */[
                                                              4,
                                                              /* :: */[
                                                                match[0],
                                                                /* :: */[
                                                                  false,
                                                                  /* :: */[
                                                                    64,
                                                                    /* :: */[
                                                                      32,
                                                                      /* [] */0
                                                                    ]
                                                                  ]
                                                                ]
                                                              ]
                                                            ]
                                                          ], Wonder_jest.Expect[/* expect */0](match[5]));
                                              }));
                                        return Wonder_jest.test("test fourth data", (function () {
                                                      var match = _prepare$1(sandbox, state);
                                                      return Sinon.toCalledWith(/* :: */[
                                                                  match[4],
                                                                  /* :: */[
                                                                    4,
                                                                    /* :: */[
                                                                      match[0],
                                                                      /* :: */[
                                                                        false,
                                                                        /* :: */[
                                                                          64,
                                                                          /* :: */[
                                                                            48,
                                                                            /* [] */0
                                                                          ]
                                                                        ]
                                                                      ]
                                                                    ]
                                                                  ]
                                                                ], Wonder_jest.Expect[/* expect */0](match[5]));
                                                    }));
                                      }));
                                return Wonder_jest.test("vertexAttribDivisorANGLE 1", (function () {
                                              var match = _prepare(sandbox, state);
                                              var state$1 = match[0];
                                              var vertexAttribDivisorANGLE = InstanceTool$Wonderjs.getExtensionInstancedArrays(state$1).vertexAttribDivisorANGLE;
                                              var state$2 = FakeGlTool$Wonderjs.setFakeGl(FakeGlTool$Wonderjs.buildFakeGl(sandbox, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[match[5]], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* () */0), state$1);
                                              var state$3 = RenderJobsTool$Wonderjs.initSystemAndRender(state$2);
                                              RenderBasicHardwareInstanceTool$Wonderjs.render(state$3);
                                              return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](/* tuple */[
                                                              Sinon.getCallCount(Sinon.withTwoArgs(match[1], 1, vertexAttribDivisorANGLE)),
                                                              Sinon.getCallCount(Sinon.withTwoArgs(match[2], 1, vertexAttribDivisorANGLE)),
                                                              Sinon.getCallCount(Sinon.withTwoArgs(match[3], 1, vertexAttribDivisorANGLE)),
                                                              Sinon.getCallCount(Sinon.withTwoArgs(match[4], 1, vertexAttribDivisorANGLE))
                                                            ]), /* tuple */[
                                                          1,
                                                          1,
                                                          1,
                                                          1
                                                        ]);
                                            }));
                              }));
                        describe("optimize", (function () {
                                describe("add isModelMatrixIsStatic logic", (function () {
                                        var _prepare = function (sandbox, isStatic, state) {
                                          var match = RenderBasicHardwareInstanceTool$Wonderjs.prepare(sandbox, state[0]);
                                          var sourceInstance = match[2][3];
                                          var state$1 = SourceInstance$Wonderjs.markSourceInstanceModelMatrixIsStatic(sourceInstance, isStatic, match[0]);
                                          var bufferSubData = Sinon.createEmptyStubWithJsObjSandbox(sandbox);
                                          var state$2 = FakeGlTool$Wonderjs.setFakeGl(FakeGlTool$Wonderjs.buildFakeGl(sandbox, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[bufferSubData], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* () */0), state$1);
                                          var state$3 = RenderJobsTool$Wonderjs.initSystemAndRender(state$2);
                                          return /* tuple */[
                                                  state$3,
                                                  sourceInstance,
                                                  bufferSubData
                                                ];
                                        };
                                        describe("if isModelMatrixIsStatic is true", (function () {
                                                Wonder_jest.test("if not send data before, send data", (function () {
                                                        var match = _prepare(sandbox, true, state);
                                                        RenderBasicHardwareInstanceTool$Wonderjs.render(match[0]);
                                                        return Sinon.toCalledOnce(Wonder_jest.Expect[/* expect */0](match[2]));
                                                      }));
                                                return Wonder_jest.test("else, not send data", (function () {
                                                              var match = _prepare(sandbox, true, state);
                                                              var state$1 = RenderBasicHardwareInstanceTool$Wonderjs.render(match[0]);
                                                              RenderBasicHardwareInstanceTool$Wonderjs.render(state$1);
                                                              return Sinon.toCalledOnce(Wonder_jest.Expect[/* expect */0](match[2]));
                                                            }));
                                              }));
                                        describe("else", (function () {
                                                return Wonder_jest.test("send data", (function () {
                                                              var match = _prepare(sandbox, false, state);
                                                              RenderBasicHardwareInstanceTool$Wonderjs.render(match[0]);
                                                              return Sinon.toCalledOnce(Wonder_jest.Expect[/* expect */0](match[2]));
                                                            }));
                                              }));
                                        describe("support switch static to dynamic", (function () {
                                                describe("test after switch", (function () {
                                                        return Wonder_jest.test("send data", (function () {
                                                                      var match = _prepare(sandbox, false, state);
                                                                      var state$1 = RenderBasicHardwareInstanceTool$Wonderjs.render(match[0]);
                                                                      var state$2 = SourceInstance$Wonderjs.markSourceInstanceModelMatrixIsStatic(match[1], false, state$1);
                                                                      var state$3 = RenderBasicHardwareInstanceTool$Wonderjs.render(state$2);
                                                                      RenderBasicHardwareInstanceTool$Wonderjs.render(state$3);
                                                                      return Sinon.toCalledThrice(Wonder_jest.Expect[/* expect */0](match[2]));
                                                                    }));
                                                      }));
                                                return /* () */0;
                                              }));
                                        describe("support switch dynamic to static", (function () {
                                                describe("test after switch", (function () {
                                                        return Wonder_jest.test("send data in the next render, and not send data in the next next render", (function () {
                                                                      var match = _prepare(sandbox, false, state);
                                                                      var state$1 = RenderBasicHardwareInstanceTool$Wonderjs.render(match[0]);
                                                                      var state$2 = SourceInstance$Wonderjs.markSourceInstanceModelMatrixIsStatic(match[1], true, state$1);
                                                                      var state$3 = RenderBasicHardwareInstanceTool$Wonderjs.render(state$2);
                                                                      var state$4 = RenderBasicHardwareInstanceTool$Wonderjs.render(state$3);
                                                                      RenderBasicHardwareInstanceTool$Wonderjs.render(state$4);
                                                                      return Sinon.toCalledTwice(Wonder_jest.Expect[/* expect */0](match[2]));
                                                                    }));
                                                      }));
                                                return /* () */0;
                                              }));
                                        describe("support switch static to dynamic to static", (function () {
                                                describe("test after switch", (function () {
                                                        return Wonder_jest.test("send data in the next render, and not send data in the next next render", (function () {
                                                                      var match = _prepare(sandbox, false, state);
                                                                      var sourceInstance = match[1];
                                                                      var state$1 = RenderBasicHardwareInstanceTool$Wonderjs.render(match[0]);
                                                                      var state$2 = SourceInstance$Wonderjs.markSourceInstanceModelMatrixIsStatic(sourceInstance, false, state$1);
                                                                      var state$3 = RenderBasicHardwareInstanceTool$Wonderjs.render(state$2);
                                                                      var state$4 = SourceInstance$Wonderjs.markSourceInstanceModelMatrixIsStatic(sourceInstance, true, state$3);
                                                                      var state$5 = RenderBasicHardwareInstanceTool$Wonderjs.render(state$4);
                                                                      var state$6 = RenderBasicHardwareInstanceTool$Wonderjs.render(state$5);
                                                                      var state$7 = RenderBasicHardwareInstanceTool$Wonderjs.render(state$6);
                                                                      RenderBasicHardwareInstanceTool$Wonderjs.render(state$7);
                                                                      return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](Sinon.getCallCount(match[2])), 3);
                                                                    }));
                                                      }));
                                                return /* () */0;
                                              }));
                                        return /* () */0;
                                      }));
                                return /* () */0;
                              }));
                        return /* () */0;
                      }));
                return /* () */0;
              }));
        describe("draw instance", (function () {
                return Wonder_jest.test("drawElementsInstancedANGLE", (function () {
                              var match = RenderBasicHardwareInstanceTool$Wonderjs.prepare(sandbox, state[0]);
                              var state$1 = match[0];
                              var drawElementsInstancedANGLE = InstanceTool$Wonderjs.getExtensionInstancedArrays(state$1).drawElementsInstancedANGLE;
                              var state$2 = FakeGlTool$Wonderjs.setFakeGl(FakeGlTool$Wonderjs.buildFakeGl(sandbox, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[1], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* () */0), state$1);
                              var state$3 = RenderJobsTool$Wonderjs.initSystemAndRender(state$2);
                              var state$4 = RenderBasicHardwareInstanceTool$Wonderjs.render(state$3);
                              return Sinon.toCalledWith(/* :: */[
                                          1,
                                          /* :: */[
                                            GeometryTool$Wonderjs.getIndicesCount(match[2][0], state$4),
                                            /* :: */[
                                              GeometryTool$Wonderjs.getIndexType(state$4),
                                              /* :: */[
                                                Caml_int32.imul(GeometryTool$Wonderjs.getIndexTypeSize(state$4), 0),
                                                /* :: */[
                                                  2,
                                                  /* [] */0
                                                ]
                                              ]
                                            ]
                                          ]
                                        ], Wonder_jest.Expect[/* expect */0](drawElementsInstancedANGLE));
                            }));
              }));
        return /* () */0;
      }));

export {
  
}
/*  Not a pure module */
