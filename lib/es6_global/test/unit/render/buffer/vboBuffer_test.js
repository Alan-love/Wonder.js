// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as Curry                                    from "../../../../../../node_modules/bs-platform/lib/es6/curry.js";
import * as Sinon                                    from "../../../../../../node_modules/wonder-bs-sinon/lib/es6_global/src/sinon.js";
import * as Sinon$1                                  from "sinon";
import * as Wonder_jest                              from "../../../../../../node_modules/wonder-bs-jest/lib/es6_global/src/wonder_jest.js";
import * as TestTool$Wonderjs                        from "../../tool/TestTool.js";
import * as StateTool$Wonderjs                       from "../../tool/core/StateTool.js";
import * as FakeGlTool$Wonderjs                      from "../../tool/gl/FakeGlTool.js";
import * as GameObject$Wonderjs                      from "../../../../src/ecs/admin/api/GameObject.js";
import * as GeometryTool$Wonderjs                    from "../../tool/component/geometry/GeometryTool.js";
import * as VboBufferTool$Wonderjs                   from "../../tool/render/buffer/VboBufferTool.js";
import * as RenderJobsTool$Wonderjs                  from "../../tool/render/core/render/jobs/RenderJobsTool.js";
import * as BoxGeometryTool$Wonderjs                 from "../../tool/component/geometry/BoxGeometryTool.js";
import * as MemoryConfigTool$Wonderjs                from "../../tool/config/MemoryConfigTool.js";
import * as RenderBasicHardwareInstanceTool$Wonderjs from "../../tool/render/instance/RenderBasicHardwareInstanceTool.js";

describe("test vbo buffer", (function () {
        var sandbox = Sinon.getSandboxDefaultVal(/* () */0);
        var state = [StateTool$Wonderjs.createState(/* None */0, /* () */0)];
        beforeEach((function () {
                sandbox[0] = Sinon$1.sandbox.create();
                state[0] = TestTool$Wonderjs.init(sandbox, /* None */0, /* Some */[GeometryTool$Wonderjs.buildBufferConfig(1000)], /* () */0);
                return /* () */0;
              }));
        afterEach((function () {
                return Curry._1(Sinon.restoreSandbox, sandbox[0]);
              }));
        describe("test buffer pool", (function () {
                describe("test create geometry after dispose one", (function () {
                        var _prepare = function (state) {
                          var state$1 = MemoryConfigTool$Wonderjs.setConfig(state, /* Some */[1], /* () */0);
                          var match = BoxGeometryTool$Wonderjs.createGameObject(state$1);
                          var state$2 = GeometryTool$Wonderjs.initGeometrys(match[0]);
                          return /* tuple */[
                                  state$2,
                                  match[1],
                                  match[2]
                                ];
                        };
                        return Wonder_jest.test("getOrCreateBuffer should use old one(created buffer previously) in pool", (function () {
                                      var match = _prepare(state[0]);
                                      var geometry1 = match[2];
                                      var createBuffer = Sinon.createEmptyStubWithJsObjSandbox(sandbox);
                                      Sinon.returns(10, Sinon.onCall(0, createBuffer));
                                      Sinon.returns(12, Sinon.onCall(1, createBuffer));
                                      Sinon.returns(11, Sinon.onCall(2, createBuffer));
                                      Sinon.returns(13, Sinon.onCall(3, createBuffer));
                                      var state$1 = FakeGlTool$Wonderjs.setFakeGl(FakeGlTool$Wonderjs.buildFakeGl(sandbox, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[createBuffer], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* () */0), match[0]);
                                      VboBufferTool$Wonderjs.getOrCreateArrayBuffer(geometry1, state$1);
                                      VboBufferTool$Wonderjs.getOrCreateElementArrayBuffer(geometry1, state$1);
                                      var state$2 = GameObject$Wonderjs.disposeGameObjectGeometryComponent(match[1], geometry1, state$1);
                                      var match$1 = BoxGeometryTool$Wonderjs.createGameObject(state$2);
                                      var geometry2 = match$1[2];
                                      var state$3 = GameObject$Wonderjs.initGameObject(match$1[1], match$1[0]);
                                      var resultArrayBuffer2 = VboBufferTool$Wonderjs.getOrCreateArrayBuffer(geometry2, state$3);
                                      var resultElementArrayBuffer2 = VboBufferTool$Wonderjs.getOrCreateElementArrayBuffer(geometry2, state$3);
                                      return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](/* tuple */[
                                                      Sinon.getCallCount(createBuffer),
                                                      resultArrayBuffer2,
                                                      resultElementArrayBuffer2
                                                    ]), /* tuple */[
                                                  2,
                                                  10,
                                                  12
                                                ]);
                                    }));
                      }));
                describe("test create souceInstance gameObject after dispose one", (function () {
                        return Wonder_jest.test("getOrCreateBuffer should use old one(created buffer previously) in pool", (function () {
                                      var match = RenderBasicHardwareInstanceTool$Wonderjs.prepare(sandbox, state[0]);
                                      var sourceInstance1 = match[2][3];
                                      var createBuffer = Sinon.createEmptyStubWithJsObjSandbox(sandbox);
                                      Sinon.returns(0, Sinon.onCall(0, createBuffer));
                                      Sinon.returns(1, Sinon.onCall(1, createBuffer));
                                      Sinon.returns(2, Sinon.onCall(2, createBuffer));
                                      Sinon.returns(3, Sinon.onCall(3, createBuffer));
                                      var state$1 = FakeGlTool$Wonderjs.setFakeGl(FakeGlTool$Wonderjs.buildFakeGl(sandbox, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[createBuffer], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* () */0), match[0]);
                                      var state$2 = RenderBasicHardwareInstanceTool$Wonderjs.render(RenderJobsTool$Wonderjs.initSystemAndRender(state$1));
                                      var instanceBuffer1 = VboBufferTool$Wonderjs.getOrCreateInstanceBuffer(sourceInstance1, state$2);
                                      var state$3 = GameObject$Wonderjs.disposeGameObjectSourceInstanceComponent(match[1], sourceInstance1, state$2);
                                      var match$1 = RenderBasicHardwareInstanceTool$Wonderjs.createSourceInstanceGameObject(sandbox, state$3);
                                      var instanceBuffer2 = VboBufferTool$Wonderjs.getOrCreateInstanceBuffer(match$1[2][3], match$1[0]);
                                      return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](instanceBuffer1), instanceBuffer2);
                                    }));
                      }));
                return /* () */0;
              }));
        return /* () */0;
      }));

export {
  
}
/*  Not a pure module */
