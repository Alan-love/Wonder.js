// Generated by BUCKLESCRIPT VERSION 3.1.4, PLEASE EDIT WITH CARE

import * as Curry from "../../../../../../../node_modules/bs-platform/lib/es6/curry.js";
import * as Sinon from "../../../../../../../node_modules/wonder-bs-sinon/lib/es6_global/src/sinon.js";
import * as Sinon$1 from "sinon";
import * as Wonder_jest from "../../../../../../../node_modules/wonder-bs-jest/lib/es6_global/src/wonder_jest.js";
import * as TestTool$Wonderjs from "../../../../tool/TestTool.js";
import * as CameraTool$Wonderjs from "../../../../tool/service/camera/CameraTool.js";
import * as GameObjectAPI$Wonderjs from "../../../../../src/api/GameObjectAPI.js";
import * as MainStateTool$Wonderjs from "../../../../tool/service/state/MainStateTool.js";
import * as GameObjectTool$Wonderjs from "../../../../tool/service/gameObject/GameObjectTool.js";
import * as ArrayService$WonderCommonlib from "../../../../../../../node_modules/wonder-commonlib/lib/es6_global/src/ArrayService.js";
import * as SparseMapService$WonderCommonlib from "../../../../../../../node_modules/wonder-commonlib/lib/es6_global/src/SparseMapService.js";
import * as PerspectiveCameraProjectionAPI$Wonderjs from "../../../../../src/api/PerspectiveCameraProjectionAPI.js";
import * as PerspectiveCameraProjectionTool$Wonderjs from "../../../../tool/service/camera/PerspectiveCameraProjectionTool.js";

describe("PerspectiveCameraProjection", (function () {
        var sandbox = Sinon.getSandboxDefaultVal(/* () */0);
        var state = [MainStateTool$Wonderjs.createState(/* () */0)];
        beforeEach((function () {
                sandbox[0] = Sinon$1.sandbox.create();
                state[0] = TestTool$Wonderjs.init(sandbox, /* None */0, /* None */0, /* () */0);
                return /* () */0;
              }));
        afterEach((function () {
                return Curry._1(Sinon.restoreSandbox, sandbox[0]);
              }));
        describe("createPerspectiveCameraProjection", (function () {
                Wonder_jest.test("create a new camera which is just index(int)", (function () {
                        var match = PerspectiveCameraProjectionAPI$Wonderjs.createPerspectiveCameraProjection(state[0]);
                        return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](match[1]), 0);
                      }));
                describe("change state", (function () {
                        return Wonder_jest.test("state->index + 1", (function () {
                                      var match = PerspectiveCameraProjectionAPI$Wonderjs.createPerspectiveCameraProjection(state[0]);
                                      var record = match[0][/* perspectiveCameraProjectionRecord */14];
                                      return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](record[/* index */0]), 1);
                                    }));
                      }));
                return Wonder_jest.test("add to dirty array", (function () {
                              var match = PerspectiveCameraProjectionAPI$Wonderjs.createPerspectiveCameraProjection(state[0]);
                              return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](PerspectiveCameraProjectionTool$Wonderjs.getDirtyArray(match[0])), /* array */[match[1]]);
                            }));
              }));
        describe("unsafeGetPerspectiveCameraProjectionGameObject", (function () {
                return Wonder_jest.test("get cameraProjection's gameObject", (function () {
                              var match = PerspectiveCameraProjectionAPI$Wonderjs.createPerspectiveCameraProjection(state[0]);
                              var cameraProjection = match[1];
                              var match$1 = GameObjectAPI$Wonderjs.createGameObject(match[0]);
                              var gameObject = match$1[1];
                              var state$1 = GameObjectAPI$Wonderjs.addGameObjectPerspectiveCameraProjectionComponent(gameObject, cameraProjection, match$1[0]);
                              return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](PerspectiveCameraProjectionAPI$Wonderjs.unsafeGetPerspectiveCameraProjectionGameObject(cameraProjection, state$1)), gameObject);
                            }));
              }));
        describe("dispose component", (function () {
                var _prepareTwo = function (state) {
                  var match = CameraTool$Wonderjs.createCameraGameObject(state);
                  var match$1 = CameraTool$Wonderjs.createCameraGameObject(match[0]);
                  return /* tuple */[
                          match$1[0],
                          match[1],
                          match[3][1],
                          match$1[1],
                          match$1[3][1]
                        ];
                };
                describe("dispose data", (function () {
                        Wonder_jest.test("dirtyArray: remove from array", (function () {
                                var match = CameraTool$Wonderjs.createCameraGameObject(state[0]);
                                var perspectiveCameraProjection1 = match[3][1];
                                var state$1 = PerspectiveCameraProjectionTool$Wonderjs.updateCameraProjection(perspectiveCameraProjection1, match[0]);
                                var state$2 = GameObjectTool$Wonderjs.disposeGameObjectPerspectiveCameraProjectionComponent(match[1], perspectiveCameraProjection1, state$1);
                                var match$1 = state$2[/* perspectiveCameraProjectionRecord */14];
                                return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](ArrayService$WonderCommonlib.removeDuplicateItems(match$1[/* dirtyArray */1])), /* array */[0]);
                              }));
                        Wonder_jest.test("remove from pMatrixMap, gameObjectMap", (function () {
                                var match = CameraTool$Wonderjs.createCameraGameObject(state[0]);
                                var perspectiveCameraProjection1 = match[3][1];
                                var state$1 = PerspectiveCameraProjectionTool$Wonderjs.updateCameraProjection(perspectiveCameraProjection1, match[0]);
                                var state$2 = GameObjectTool$Wonderjs.disposeGameObjectPerspectiveCameraProjectionComponent(match[1], perspectiveCameraProjection1, state$1);
                                var match$1 = state$2[/* perspectiveCameraProjectionRecord */14];
                                return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](/* tuple */[
                                                SparseMapService$WonderCommonlib.has(perspectiveCameraProjection1, match$1[/* pMatrixMap */2]),
                                                SparseMapService$WonderCommonlib.has(perspectiveCameraProjection1, match$1[/* gameObjectMap */7])
                                              ]), /* tuple */[
                                            false,
                                            false
                                          ]);
                              }));
                        return Wonder_jest.test("remove from nearMap, farMap, fovyMap, aspectMap", (function () {
                                      var match = CameraTool$Wonderjs.createCameraGameObject(state[0]);
                                      var perspectiveCameraProjection1 = match[3][1];
                                      var state$1 = GameObjectTool$Wonderjs.disposeGameObjectPerspectiveCameraProjectionComponent(match[1], perspectiveCameraProjection1, match[0]);
                                      var record = state$1[/* perspectiveCameraProjectionRecord */14];
                                      return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](/* tuple */[
                                                      SparseMapService$WonderCommonlib.has(perspectiveCameraProjection1, record[/* nearMap */3]),
                                                      SparseMapService$WonderCommonlib.has(perspectiveCameraProjection1, record[/* farMap */4]),
                                                      SparseMapService$WonderCommonlib.has(perspectiveCameraProjection1, record[/* fovyMap */5]),
                                                      SparseMapService$WonderCommonlib.has(perspectiveCameraProjection1, record[/* aspectMap */6])
                                                    ]), /* tuple */[
                                                  false,
                                                  false,
                                                  false,
                                                  false
                                                ]);
                                    }));
                      }));
                describe("test add new one after dispose old one", (function () {
                        Wonder_jest.test("use disposed index as new index firstly", (function () {
                                var match = _prepareTwo(state[0]);
                                var perspectiveCameraProjection1 = match[2];
                                var state$1 = GameObjectTool$Wonderjs.disposeGameObjectPerspectiveCameraProjectionComponent(match[1], perspectiveCameraProjection1, match[0]);
                                var match$1 = CameraTool$Wonderjs.createCameraGameObject(state$1);
                                return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](match$1[3][1]), perspectiveCameraProjection1);
                              }));
                        return Wonder_jest.test("if has no disposed index, get index from record.index", (function () {
                                      var match = _prepareTwo(state[0]);
                                      var perspectiveCameraProjection1 = match[2];
                                      var state$1 = GameObjectTool$Wonderjs.disposeGameObjectPerspectiveCameraProjectionComponent(match[1], perspectiveCameraProjection1, match[0]);
                                      var match$1 = CameraTool$Wonderjs.createCameraGameObject(state$1);
                                      var match$2 = CameraTool$Wonderjs.createCameraGameObject(match$1[0]);
                                      return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](/* tuple */[
                                                      match$1[3][1],
                                                      match$2[3][1]
                                                    ]), /* tuple */[
                                                  perspectiveCameraProjection1,
                                                  match[4] + 1 | 0
                                                ]);
                                    }));
                      }));
                describe("contract check", (function () {
                        return Wonder_jest.test("expect dispose the alive component, but actual not", (function () {
                                      var match = _prepareTwo(state[0]);
                                      var perspectiveCameraProjection1 = match[2];
                                      var gameObject1 = match[1];
                                      var state$1 = GameObjectTool$Wonderjs.disposeGameObjectPerspectiveCameraProjectionComponent(gameObject1, perspectiveCameraProjection1, match[0]);
                                      return Wonder_jest.Expect[/* toThrowMessage */20]("expect dispose the alive component, but actual not", Wonder_jest.Expect[/* expect */0]((function () {
                                                        GameObjectTool$Wonderjs.disposeGameObjectPerspectiveCameraProjectionComponent(gameObject1, perspectiveCameraProjection1, state$1);
                                                        return /* () */0;
                                                      })));
                                    }));
                      }));
                return /* () */0;
              }));
        describe("contract check: is alive", (function () {
                describe("if cameraProjection is disposed", (function () {
                        var _testGetFunc = function (getFunc) {
                          var match = CameraTool$Wonderjs.createCameraGameObject(state[0]);
                          var cameraProjection = match[3][1];
                          var state$1 = GameObjectTool$Wonderjs.disposeGameObjectPerspectiveCameraProjectionComponent(match[1], cameraProjection, match[0]);
                          return Wonder_jest.Expect[/* toThrowMessage */20]("expect component alive, but actual not", Wonder_jest.Expect[/* expect */0]((function () {
                                            return Curry._2(getFunc, cameraProjection, state$1);
                                          })));
                        };
                        Wonder_jest.test("unsafeGetPerspectiveCameraProjectionGameObject should error", (function () {
                                return _testGetFunc(PerspectiveCameraProjectionAPI$Wonderjs.unsafeGetPerspectiveCameraProjectionGameObject);
                              }));
                        return Wonder_jest.test("unsafeGetPerspectiveCameraProjectionPMatrix should error", (function () {
                                      return _testGetFunc(PerspectiveCameraProjectionAPI$Wonderjs.unsafeGetPerspectiveCameraProjectionPMatrix);
                                    }));
                      }));
                return /* () */0;
              }));
        describe("getFovy", (function () {
                return Wonder_jest.test("test", (function () {
                              var match = PerspectiveCameraProjectionAPI$Wonderjs.createPerspectiveCameraProjection(state[0]);
                              var cameraProjection = match[1];
                              var state$1 = PerspectiveCameraProjectionAPI$Wonderjs.setPerspectiveCameraFovy(cameraProjection, 65, match[0]);
                              return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](PerspectiveCameraProjectionAPI$Wonderjs.unsafeGetPerspectiveCameraFovy(cameraProjection, state$1)), 65);
                            }));
              }));
        describe("getAspect", (function () {
                return Wonder_jest.test("test", (function () {
                              var match = PerspectiveCameraProjectionAPI$Wonderjs.createPerspectiveCameraProjection(state[0]);
                              var cameraProjection = match[1];
                              var state$1 = PerspectiveCameraProjectionAPI$Wonderjs.setPerspectiveCameraAspect(cameraProjection, 1, match[0]);
                              return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](PerspectiveCameraProjectionAPI$Wonderjs.unsafeGetPerspectiveCameraAspect(cameraProjection, state$1)), 1);
                            }));
              }));
        describe("getNear", (function () {
                return Wonder_jest.test("test", (function () {
                              var match = PerspectiveCameraProjectionAPI$Wonderjs.createPerspectiveCameraProjection(state[0]);
                              var cameraProjection = match[1];
                              var state$1 = PerspectiveCameraProjectionAPI$Wonderjs.setPerspectiveCameraNear(cameraProjection, 0.1, match[0]);
                              return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](PerspectiveCameraProjectionAPI$Wonderjs.unsafeGetPerspectiveCameraNear(cameraProjection, state$1)), 0.1);
                            }));
              }));
        describe("getFar", (function () {
                return Wonder_jest.test("test", (function () {
                              var match = PerspectiveCameraProjectionAPI$Wonderjs.createPerspectiveCameraProjection(state[0]);
                              var cameraProjection = match[1];
                              var state$1 = PerspectiveCameraProjectionAPI$Wonderjs.setPerspectiveCameraFar(cameraProjection, 1000, match[0]);
                              return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](PerspectiveCameraProjectionAPI$Wonderjs.unsafeGetPerspectiveCameraFar(cameraProjection, state$1)), 1000);
                            }));
              }));
        return /* () */0;
      }));

export {
  
}
/*  Not a pure module */
