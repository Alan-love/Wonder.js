// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as Curry                                   from "../../../../../../../node_modules/bs-platform/lib/es6/curry.js";
import * as Wonder_jest                             from "../../../../../../../node_modules/wonder-bs-jest/lib/es6_global/src/wonder_jest.js";
import * as MaterialAdmin$Wonderjs                  from "../../../../../src/ecs/admin/component/material/MaterialAdmin.js";
import * as MaterialSystem$Wonderjs                 from "../../../../../src/ecs/component/system/material/MaterialSystem.js";
import * as DeviceManagerSystem$Wonderjs            from "../../../../../src/renderer/device/DeviceManagerSystem.js";
import * as MaterialGroupCommon$Wonderjs            from "../../../../../src/ecs/component/system/material/MaterialGroupCommon.js";
import * as MaterialShaderIndexCommon$Wonderjs      from "../../../../../src/ecs/component/system/material/MaterialShaderIndexCommon.js";
import * as MaterialInitComponentCommon$Wonderjs    from "../../../../../src/ecs/component/system/material/MaterialInitComponentCommon.js";
import * as MaterialDisposeComponentCommon$Wonderjs from "../../../../../src/ecs/component/system/material/MaterialDisposeComponentCommon.js";

var getMaterialData = MaterialSystem$Wonderjs.getMaterialData;

var unsafeGetShaderIndex = MaterialSystem$Wonderjs.unsafeGetShaderIndex;

var hasShaderIndex = MaterialShaderIndexCommon$Wonderjs.hasShaderIndex;

var setShaderIndex = MaterialSystem$Wonderjs.setShaderIndex;

function isMaterial(material) {
  return Curry._2(Wonder_jest.Expect[/* Operators */23][/* >= */2], Wonder_jest.Expect[/* expect */0](material), 0);
}

var dispose = MaterialDisposeComponentCommon$Wonderjs.handleDisposeComponent;

function prepareForInit(state) {
  return MaterialAdmin$Wonderjs.pregetGLSLData(DeviceManagerSystem$Wonderjs.getGl(state), state);
}

function initMaterial(materialIndex, state) {
  return MaterialInitComponentCommon$Wonderjs.initMaterial(DeviceManagerSystem$Wonderjs.getGl(state), materialIndex, state);
}

function isMaterialDisposed(material, state) {
  var match = MaterialSystem$Wonderjs.getMaterialData(state);
  var disposedIndexArray = match[/* disposedIndexArray */5];
  return +disposedIndexArray.includes(material);
}

var getGroupCount = MaterialGroupCommon$Wonderjs.getGroupCount;

export {
  getMaterialData      ,
  unsafeGetShaderIndex ,
  hasShaderIndex       ,
  setShaderIndex       ,
  isMaterial           ,
  dispose              ,
  prepareForInit       ,
  initMaterial         ,
  isMaterialDisposed   ,
  getGroupCount        ,
  
}
/* Wonder_jest Not a pure module */
