// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as Curry                                from "../../../../../../../node_modules/bs-platform/lib/es6/curry.js";
import * as Wonder_jest                          from "../../../../../../../node_modules/wonder-bs-jest/lib/es6_global/src/wonder_jest.js";
import * as GameObject$Wonderjs                  from "../../../../../src/ecs/admin/api/GameObject.js";
import * as CameraController$Wonderjs            from "../../../../../src/ecs/component/api/cameraController/CameraController.js";
import * as PerspectiveCamera$Wonderjs           from "../../../../../src/ecs/component/api/cameraController/PerspectiveCamera.js";
import * as CameraControllerSystem$Wonderjs      from "../../../../../src/ecs/component/system/cameraController/CameraControllerSystem.js";
import * as CameraControllerStateCommon$Wonderjs from "../../../../../src/ecs/component/system/cameraController/CameraControllerStateCommon.js";

function isCameraController(cameraController) {
  return Curry._2(Wonder_jest.Expect[/* Operators */23][/* >= */2], Wonder_jest.Expect[/* expect */0](cameraController), 0);
}

function getCameraControllerData(state) {
  return state[/* cameraControllerData */12];
}

var getPerspectiveCameraData = CameraControllerStateCommon$Wonderjs.getPerspectiveCameraData;

function getDirtyArray(state) {
  return state[/* cameraControllerData */12][/* dirtyArray */2];
}

var getWorldToCameraMatrix = CameraControllerSystem$Wonderjs.getWorldToCameraMatrix;

var getPMatrix = CameraControllerSystem$Wonderjs.getPMatrix;

var init = CameraControllerSystem$Wonderjs.init;

var update = CameraControllerSystem$Wonderjs.update;

function createCameraControllerPerspectiveCamera(state) {
  var match = CameraController$Wonderjs.createCameraController(state);
  var cameraController = match[1];
  var state$1 = PerspectiveCamera$Wonderjs.setPerspectiveCameraAspect(cameraController, 1, PerspectiveCamera$Wonderjs.setPerspectiveCameraFovy(cameraController, 60, PerspectiveCamera$Wonderjs.setPerspectiveCameraFar(cameraController, 1000, PerspectiveCamera$Wonderjs.setPerspectiveCameraNear(cameraController, 0.1, match[0]))));
  var state$2 = CameraController$Wonderjs.setCameraControllerPerspectiveCamera(cameraController, state$1);
  return /* tuple */[
          state$2,
          cameraController
        ];
}

function getPMatrixOfCreateCameraControllerPerspectiveCamera() {
  return new Float32Array(/* float array */[
              1.7320508075688776,
              0,
              0,
              0,
              0,
              1.7320508075688776,
              0,
              0,
              0,
              0,
              -1.0002000200020003,
              -1,
              0,
              0,
              -0.2000200020002,
              0
            ]);
}

function createCameraGameObject(state) {
  var match = createCameraControllerPerspectiveCamera(state);
  var cameraController = match[1];
  var match$1 = GameObject$Wonderjs.createGameObject(match[0]);
  var gameObject = match$1[1];
  var state$1 = GameObject$Wonderjs.addGameObjectCameraControllerComponent(gameObject, cameraController, match$1[0]);
  return /* tuple */[
          state$1,
          gameObject,
          GameObject$Wonderjs.getGameObjectTransformComponent(gameObject, state$1),
          cameraController
        ];
}

var getData = CameraControllerSystem$Wonderjs.getCameraControllerData;

var getCurrentCameraController = CameraControllerSystem$Wonderjs.getCurrentCameraController;

export {
  getData                                             ,
  isCameraController                                  ,
  getCameraControllerData                             ,
  getPerspectiveCameraData                            ,
  getDirtyArray                                       ,
  getWorldToCameraMatrix                              ,
  getPMatrix                                          ,
  init                                                ,
  update                                              ,
  createCameraControllerPerspectiveCamera             ,
  getPMatrixOfCreateCameraControllerPerspectiveCamera ,
  createCameraGameObject                              ,
  getCurrentCameraController                          ,
  
}
/* Wonder_jest Not a pure module */
