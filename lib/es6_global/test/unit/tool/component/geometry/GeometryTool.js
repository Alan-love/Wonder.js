// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as Curry                                   from "../../../../../../../node_modules/bs-platform/lib/es6/curry.js";
import * as Sinon                                   from "../../../../../../../node_modules/wonder-bs-sinon/lib/es6_global/src/sinon.js";
import * as Wonder_jest                             from "../../../../../../../node_modules/wonder-bs-jest/lib/es6_global/src/wonder_jest.js";
import * as TestTool$Wonderjs                       from "../../TestTool.js";
import * as GameObject$Wonderjs                     from "../../../../../src/ecs/admin/api/GameObject.js";
import * as GeometrySystem$Wonderjs                 from "../../../../../src/ecs/component/system/geometry/GeometrySystem.js";
import * as DeviceManagerSystem$Wonderjs            from "../../../../../src/renderer/device/DeviceManagerSystem.js";
import * as GeometryGroupCommon$Wonderjs            from "../../../../../src/ecs/component/system/geometry/GeometryGroupCommon.js";
import * as GeometryOperateCommon$Wonderjs          from "../../../../../src/ecs/component/system/geometry/GeometryOperateCommon.js";
import * as SparseMapSystem$WonderCommonlib         from "../../../../../../../node_modules/wonder-commonlib/lib/es6_global/src/SparseMapSystem.js";
import * as GeometryInitComponentCommon$Wonderjs    from "../../../../../src/ecs/component/system/geometry/GeometryInitComponentCommon.js";
import * as GeometryDisposeComponentCommon$Wonderjs from "../../../../../src/ecs/component/system/geometry/GeometryDisposeComponentCommon.js";

var getGeometryData = GeometrySystem$Wonderjs.getGeometryData;

var initGeometrys = GeometrySystem$Wonderjs.init;

var initGeometry = GeometryInitComponentCommon$Wonderjs.initGeometry;

function buildBoxGeometryConfigDataJsObj($staropt$star, $staropt$star$1, $staropt$star$2, $staropt$star$3, $staropt$star$4, $staropt$star$5, _) {
  var width = $staropt$star ? $staropt$star[0] : undefined;
  var height = $staropt$star$1 ? $staropt$star$1[0] : undefined;
  var depth = $staropt$star$2 ? $staropt$star$2[0] : undefined;
  var widthSegment = $staropt$star$3 ? $staropt$star$3[0] : undefined;
  var heightSegment = $staropt$star$4 ? $staropt$star$4[0] : undefined;
  var depthSegment = $staropt$star$5 ? $staropt$star$5[0] : undefined;
  return {
          width: width,
          height: height,
          depth: depth,
          widthSegment: widthSegment,
          heightSegment: heightSegment,
          depthSegment: depthSegment
        };
}

var getVerticesCount = GeometrySystem$Wonderjs.getVerticesCount;

var getIndicesCount = GeometrySystem$Wonderjs.getIndicesCount;

function getIndexType(state) {
  return GeometrySystem$Wonderjs.getIndexType(DeviceManagerSystem$Wonderjs.getGl(state));
}

function getIndexTypeSize(state) {
  return GeometrySystem$Wonderjs.getIndexTypeSize(DeviceManagerSystem$Wonderjs.getGl(state));
}

var hasIndices = GeometrySystem$Wonderjs.hasIndices;

function isGeometry(geometry) {
  return Curry._2(Wonder_jest.Expect[/* Operators */23][/* >= */2], Wonder_jest.Expect[/* expect */0](geometry), 0);
}

function buildBufferConfig(count) {
  return {
          geometryPointDataBufferCount: count
        };
}

var dispose = GeometryDisposeComponentCommon$Wonderjs.handleDisposeComponent;

function batchDisposeGeometryByCloseContractCheck(gameObjectArr, state) {
  TestTool$Wonderjs.closeContractCheck(/* () */0);
  var state$1 = GameObject$Wonderjs.batchDisposeGameObject(gameObjectArr, state);
  TestTool$Wonderjs.openContractCheck(/* () */0);
  return state$1;
}

function disposeGeometryByCloseContractCheck(gameObject, geometry, state) {
  TestTool$Wonderjs.closeContractCheck(/* () */0);
  var state$1 = GameObject$Wonderjs.disposeGameObjectGeometryComponent(gameObject, geometry, state);
  TestTool$Wonderjs.openContractCheck(/* () */0);
  return state$1;
}

function createStubComputeFuncData(sandbox, geometry, state) {
  var match = GeometrySystem$Wonderjs.getGeometryData(state);
  var computeDataFuncMap = match[/* computeDataFuncMap */3];
  var computeDataFunc = Sinon.createEmptyStubWithJsObjSandbox(sandbox);
  SparseMapSystem$WonderCommonlib.set(geometry, computeDataFunc, computeDataFuncMap);
  return /* tuple */[
          state,
          computeDataFunc
        ];
}

function isGeometryDisposed(geometry, state) {
  var match = GeometrySystem$Wonderjs.getGeometryData(state);
  var disposedIndexArray = match[/* disposedIndexArray */6];
  return +disposedIndexArray.includes(geometry);
}

var getGroupCount = GeometryGroupCommon$Wonderjs.getGroupCount;

var setVerticesWithArray = GeometryOperateCommon$Wonderjs.setVerticesWithArray;

var setIndicesWithArray = GeometryOperateCommon$Wonderjs.setIndicesWithArray;

export {
  getGeometryData                          ,
  initGeometrys                            ,
  initGeometry                             ,
  buildBoxGeometryConfigDataJsObj          ,
  getVerticesCount                         ,
  getIndicesCount                          ,
  getIndexType                             ,
  getIndexTypeSize                         ,
  hasIndices                               ,
  isGeometry                               ,
  buildBufferConfig                        ,
  dispose                                  ,
  batchDisposeGeometryByCloseContractCheck ,
  disposeGeometryByCloseContractCheck      ,
  createStubComputeFuncData                ,
  isGeometryDisposed                       ,
  getGroupCount                            ,
  setVerticesWithArray                     ,
  setIndicesWithArray                      ,
  
}
/* Sinon Not a pure module */
