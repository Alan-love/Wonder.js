// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as Curry                           from "../../../../../../../node_modules/bs-platform/lib/es6/curry.js";
import * as Js_option                       from "../../../../../../../node_modules/bs-platform/lib/es6/js_option.js";
import * as Wonder_jest                     from "../../../../../../../node_modules/wonder-bs-jest/lib/es6_global/src/wonder_jest.js";
import * as TestTool$Wonderjs               from "../../TestTool.js";
import * as GameObject$Wonderjs             from "../../../../../src/ecs/admin/api/GameObject.js";
import * as TransformSystem$Wonderjs        from "../../../../../src/ecs/component/system/transform/TransformSystem.js";
import * as SparseMapSystem$WonderCommonlib from "../../../../../../../node_modules/wonder-commonlib/lib/es6_global/src/SparseMapSystem.js";

function getTransformData(state) {
  return Js_option.getExn(state[/* transformData */11]);
}

function getDefaultPosition() {
  return /* tuple */[
          0,
          0,
          0
        ];
}

function getDefaultLocalToWorldMatrix() {
  return new Float32Array(/* float array */[
              1,
              0,
              0,
              0,
              0,
              1,
              0,
              0,
              0,
              0,
              1,
              0,
              0,
              0,
              0,
              1
            ]);
}

function isTransform(transform) {
  return Curry._2(Wonder_jest.Expect[/* Operators */23][/* >= */2], Wonder_jest.Expect[/* expect */0](transform), 0);
}

var getLocalToWorldMatrixTypeArray = TransformSystem$Wonderjs.getLocalToWorldMatrixTypeArray;

function dispose(transform, state) {
  TestTool$Wonderjs.closeContractCheck(/* () */0);
  var state$1 = GameObject$Wonderjs.disposeGameObjectTransformComponent(0, transform, state);
  TestTool$Wonderjs.openContractCheck(/* () */0);
  return state$1;
}

function isDisposed(transform, state) {
  var match = Js_option.getExn(state[/* transformData */11]);
  return 1 - SparseMapSystem$WonderCommonlib.has(transform, match[/* localToWorldMatrixMap */4]);
}

function changeTupleToTypeArray(param) {
  return new Float32Array(/* float array */[
              param[0],
              param[1],
              param[2]
            ]);
}

var getTransformLocalPositionTypeArray = TransformSystem$Wonderjs.getLocalPositionTypeArray;

var setTransformLocalPositionByTypeArray = TransformSystem$Wonderjs.setLocalPositionByTypeArray;

var getTransformPositionTypeArray = TransformSystem$Wonderjs.getPositionTypeArray;

var setTransformPositionByTypeArray = TransformSystem$Wonderjs.setPositionByTypeArray;

export {
  getTransformData                     ,
  getDefaultPosition                   ,
  getDefaultLocalToWorldMatrix         ,
  isTransform                          ,
  getLocalToWorldMatrixTypeArray       ,
  dispose                              ,
  isDisposed                           ,
  getTransformLocalPositionTypeArray   ,
  setTransformLocalPositionByTypeArray ,
  getTransformPositionTypeArray        ,
  setTransformPositionByTypeArray      ,
  changeTupleToTypeArray               ,
  
}
/* Wonder_jest Not a pure module */
