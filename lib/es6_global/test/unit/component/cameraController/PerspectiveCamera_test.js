// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as Curry                      from "../../../../../../node_modules/bs-platform/lib/es6/curry.js";
import * as Sinon                      from "../../../../../../node_modules/wonder-bs-sinon/lib/es6_global/src/sinon.js";
import * as Sinon$1                    from "sinon";
import * as Wonder_jest                from "../../../../../../node_modules/wonder-bs-jest/lib/es6_global/src/wonder_jest.js";
import * as TestTool$Wonderjs          from "../../tool/TestTool.js";
import * as StateTool$Wonderjs         from "../../tool/core/StateTool.js";
import * as CameraController$Wonderjs  from "../../../../src/ecs/component/api/cameraController/CameraController.js";
import * as PerspectiveCamera$Wonderjs from "../../../../src/ecs/component/api/cameraController/PerspectiveCamera.js";

describe("PerspectiveCamera", (function () {
        var sandbox = Sinon.getSandboxDefaultVal(/* () */0);
        var state = [StateTool$Wonderjs.createState(/* None */0, /* () */0)];
        beforeEach((function () {
                sandbox[0] = Sinon$1.sandbox.create();
                state[0] = TestTool$Wonderjs.init(sandbox, /* None */0, /* None */0, /* () */0);
                return /* () */0;
              }));
        afterEach((function () {
                return Curry._1(Sinon.restoreSandbox, sandbox[0]);
              }));
        describe("getFovy", (function () {
                return Wonder_jest.test("test", (function () {
                              var match = CameraController$Wonderjs.createCameraController(state[0]);
                              var cameraController = match[1];
                              var state$1 = PerspectiveCamera$Wonderjs.setPerspectiveCameraFovy(cameraController, 65, match[0]);
                              return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](PerspectiveCamera$Wonderjs.getPerspectiveCameraFovy(cameraController, state$1)), 65);
                            }));
              }));
        describe("getAspect", (function () {
                return Wonder_jest.test("test", (function () {
                              var match = CameraController$Wonderjs.createCameraController(state[0]);
                              var cameraController = match[1];
                              var state$1 = PerspectiveCamera$Wonderjs.setPerspectiveCameraAspect(cameraController, 1, match[0]);
                              return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](PerspectiveCamera$Wonderjs.getPerspectiveCameraAspect(cameraController, state$1)), 1);
                            }));
              }));
        describe("getNear", (function () {
                return Wonder_jest.test("test", (function () {
                              var match = CameraController$Wonderjs.createCameraController(state[0]);
                              var cameraController = match[1];
                              var state$1 = PerspectiveCamera$Wonderjs.setPerspectiveCameraNear(cameraController, 0.1, match[0]);
                              return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](PerspectiveCamera$Wonderjs.getPerspectiveCameraNear(cameraController, state$1)), 0.1);
                            }));
              }));
        describe("getFar", (function () {
                return Wonder_jest.test("test", (function () {
                              var match = CameraController$Wonderjs.createCameraController(state[0]);
                              var cameraController = match[1];
                              var state$1 = PerspectiveCamera$Wonderjs.setPerspectiveCameraFar(cameraController, 1000, match[0]);
                              return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](PerspectiveCamera$Wonderjs.getPerspectiveCameraFar(cameraController, state$1)), 1000);
                            }));
              }));
        return /* () */0;
      }));

export {
  
}
/*  Not a pure module */
