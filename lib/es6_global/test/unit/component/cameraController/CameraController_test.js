// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as Curry                           from "../../../../../../node_modules/bs-platform/lib/es6/curry.js";
import * as Sinon                           from "../../../../../../node_modules/wonder-bs-sinon/lib/es6_global/src/sinon.js";
import * as Sinon$1                         from "sinon";
import * as Js_option                       from "../../../../../../node_modules/bs-platform/lib/es6/js_option.js";
import * as Wonder_jest                     from "../../../../../../node_modules/wonder-bs-jest/lib/es6_global/src/wonder_jest.js";
import * as TestTool$Wonderjs               from "../../tool/TestTool.js";
import * as StateTool$Wonderjs              from "../../tool/core/StateTool.js";
import * as Transform$Wonderjs              from "../../../../src/ecs/component/api/transform/Transform.js";
import * as GameObject$Wonderjs             from "../../../../src/ecs/admin/api/GameObject.js";
import * as DirectorTool$Wonderjs           from "../../tool/core/DirectorTool.js";
import * as CameraController$Wonderjs       from "../../../../src/ecs/component/api/cameraController/CameraController.js";
import * as PerspectiveCamera$Wonderjs      from "../../../../src/ecs/component/api/cameraController/PerspectiveCamera.js";
import * as CameraControllerTool$Wonderjs   from "../../tool/component/cameraController/CameraControllerTool.js";
import * as SparseMapSystem$WonderCommonlib from "../../../../../../node_modules/wonder-commonlib/lib/es6_global/src/SparseMapSystem.js";

describe("CameraController", (function () {
        var sandbox = Sinon.getSandboxDefaultVal(/* () */0);
        var state = [StateTool$Wonderjs.createState(/* None */0, /* () */0)];
        var _testBuildPMatrix = function (execFunc) {
          return Wonder_jest.test("build dirty cameraControllers' pMatrix", (function () {
                        var match = CameraControllerTool$Wonderjs.createCameraControllerPerspectiveCamera(state[0]);
                        var state$1 = Curry._1(execFunc, match[0]);
                        return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](CameraController$Wonderjs.getCameraControllerPMatrix(match[1], state$1)), new Float32Array(/* float array */[
                                        1.7320508075688776,
                                        0,
                                        0,
                                        0,
                                        0,
                                        1.7320508075688776,
                                        0,
                                        0,
                                        0,
                                        0,
                                        -1.0002000200020003,
                                        -1,
                                        0,
                                        0,
                                        -0.2000200020002,
                                        0
                                      ]));
                      }));
        };
        beforeEach((function () {
                sandbox[0] = Sinon$1.sandbox.create();
                state[0] = TestTool$Wonderjs.init(sandbox, /* None */0, /* None */0, /* () */0);
                return /* () */0;
              }));
        afterEach((function () {
                return Curry._1(Sinon.restoreSandbox, sandbox[0]);
              }));
        describe("createCameraController", (function () {
                Wonder_jest.test("create a new camera which is just index(int)", (function () {
                        var match = CameraController$Wonderjs.createCameraController(state[0]);
                        return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](match[1]), 0);
                      }));
                describe("change state", (function () {
                        return Wonder_jest.test("state->index + 1", (function () {
                                      var match = CameraController$Wonderjs.createCameraController(state[0]);
                                      var data = CameraControllerTool$Wonderjs.getCameraControllerData(match[0]);
                                      return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](data[/* index */0]), 1);
                                    }));
                      }));
                return Wonder_jest.test("add to dirty array", (function () {
                              var match = CameraController$Wonderjs.createCameraController(state[0]);
                              return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](CameraControllerTool$Wonderjs.getDirtyArray(match[0])), /* int array */[match[1]]);
                            }));
              }));
        describe("initSystem", (function () {
                return _testBuildPMatrix(CameraControllerTool$Wonderjs.init);
              }));
        describe("update", (function () {
                _testBuildPMatrix(CameraControllerTool$Wonderjs.update);
                return Wonder_jest.test("test dirty during multi updates", (function () {
                              var match = CameraControllerTool$Wonderjs.createCameraControllerPerspectiveCamera(state[0]);
                              var cameraController = match[1];
                              var state$1 = CameraControllerTool$Wonderjs.update(match[0]);
                              var state$2 = PerspectiveCamera$Wonderjs.setPerspectiveCameraNear(cameraController, 0.2, state$1);
                              var state$3 = CameraControllerTool$Wonderjs.update(state$2);
                              return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](CameraController$Wonderjs.getCameraControllerPMatrix(cameraController, state$3)), new Float32Array(/* float array */[
                                              1.7320508075688776,
                                              0,
                                              0,
                                              0,
                                              0,
                                              1.7320508075688776,
                                              0,
                                              0,
                                              0,
                                              0,
                                              -1.0004000800160033,
                                              -1,
                                              0,
                                              0,
                                              -0.40008001600320064,
                                              0
                                            ]));
                            }));
              }));
        describe("getWorldToCameraMatrix", (function () {
                var _prepare = function () {
                  var match = CameraControllerTool$Wonderjs.createCameraControllerPerspectiveCamera(state[0]);
                  var cameraController = match[1];
                  var match$1 = GameObject$Wonderjs.createGameObject(match[0]);
                  var gameObject = match$1[1];
                  var state$1 = GameObject$Wonderjs.addGameObjectCameraControllerComponent(gameObject, cameraController, match$1[0]);
                  var transform = GameObject$Wonderjs.getGameObjectTransformComponent(gameObject, state$1);
                  var state$2 = Transform$Wonderjs.setTransformLocalPosition(transform, /* tuple */[
                        1,
                        2,
                        3
                      ], state$1);
                  return /* tuple */[
                          state$2,
                          gameObject,
                          transform,
                          cameraController
                        ];
                };
                describe("runtime check", (function () {
                        return Wonder_jest.test("if cameraController->gameObject not exist, error", (function () {
                                      var match = CameraControllerTool$Wonderjs.createCameraControllerPerspectiveCamera(state[0]);
                                      var cameraController = match[1];
                                      var state$1 = match[0];
                                      return Wonder_jest.Expect[/* toThrowMessage */20]("cameraController's gameObject should exist", Wonder_jest.Expect[/* expect */0]((function () {
                                                        CameraController$Wonderjs.getCameraControllerWorldToCameraMatrix(cameraController, state$1);
                                                        return /* () */0;
                                                      })));
                                    }));
                      }));
                return Wonder_jest.test("get cameraController->gameObject->transform-> localToWorldMatrix->invert", (function () {
                              var match = _prepare(/* () */0);
                              var state = CameraControllerTool$Wonderjs.init(match[0]);
                              var state$1 = DirectorTool$Wonderjs.updateSystem(/* None */0, state);
                              return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](CameraController$Wonderjs.getCameraControllerWorldToCameraMatrix(match[3], state$1)), new Float32Array(/* float array */[
                                              1,
                                              0,
                                              0,
                                              0,
                                              0,
                                              1,
                                              0,
                                              0,
                                              0,
                                              0,
                                              1,
                                              0,
                                              -1,
                                              -2,
                                              -3,
                                              1
                                            ]));
                            }));
              }));
        describe("getCameraControllerGameObject", (function () {
                return Wonder_jest.test("get cameraController's gameObject", (function () {
                              var match = CameraControllerTool$Wonderjs.createCameraControllerPerspectiveCamera(state[0]);
                              var cameraController = match[1];
                              var match$1 = GameObject$Wonderjs.createGameObject(match[0]);
                              var gameObject = match$1[1];
                              var state$1 = GameObject$Wonderjs.addGameObjectCameraControllerComponent(gameObject, cameraController, match$1[0]);
                              return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](CameraController$Wonderjs.getCameraControllerGameObject(cameraController, state$1)), gameObject);
                            }));
              }));
        describe("get current cameraController", (function () {
                Wonder_jest.test("the first created cameraController is the current cameraController", (function () {
                        var match = CameraControllerTool$Wonderjs.createCameraControllerPerspectiveCamera(state[0]);
                        var match$1 = CameraControllerTool$Wonderjs.createCameraControllerPerspectiveCamera(match[0]);
                        return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](Js_option.getExn(CameraControllerTool$Wonderjs.getCurrentCameraController(match$1[0]))), match[1]);
                      }));
                describe("contract check", (function () {
                        return Wonder_jest.test("current camera should exist", (function () {
                                      return Wonder_jest.Expect[/* toThrowMessage */20]("should has at least one camera", Wonder_jest.Expect[/* expect */0]((function () {
                                                        CameraControllerTool$Wonderjs.getCurrentCameraController(state[0]);
                                                        return /* () */0;
                                                      })));
                                    }));
                      }));
                return /* () */0;
              }));
        describe("dispose component", (function () {
                var _prepareTwo = function (state) {
                  var match = CameraControllerTool$Wonderjs.createCameraGameObject(state);
                  var match$1 = CameraControllerTool$Wonderjs.createCameraGameObject(match[0]);
                  return /* tuple */[
                          match$1[0],
                          match[1],
                          match[3],
                          match$1[1],
                          match$1[3]
                        ];
                };
                describe("dispose cameraController data", (function () {
                        return Wonder_jest.test("remove from cameraArray, dirtyArray, pMatrixMap, gameObjectMap, updateCameraFuncMap", (function () {
                                      var match = CameraControllerTool$Wonderjs.createCameraGameObject(state[0]);
                                      var cameraController1 = match[3];
                                      var state$1 = GameObject$Wonderjs.disposeGameObjectCameraControllerComponent(match[1], cameraController1, match[0]);
                                      var match$1 = CameraControllerTool$Wonderjs.getCameraControllerData(state$1);
                                      var cameraArray = match$1[/* cameraArray */1];
                                      var dirtyArray = match$1[/* dirtyArray */2];
                                      var pMatrixMap = match$1[/* pMatrixMap */3];
                                      var gameObjectMap = match$1[/* gameObjectMap */4];
                                      var updateCameraFuncMap = match$1[/* updateCameraFuncMap */5];
                                      return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](/* tuple */[
                                                      SparseMapSystem$WonderCommonlib.has(cameraController1, cameraArray),
                                                      SparseMapSystem$WonderCommonlib.has(cameraController1, dirtyArray),
                                                      SparseMapSystem$WonderCommonlib.has(cameraController1, pMatrixMap),
                                                      SparseMapSystem$WonderCommonlib.has(cameraController1, gameObjectMap),
                                                      SparseMapSystem$WonderCommonlib.has(cameraController1, updateCameraFuncMap)
                                                    ]), /* tuple */[
                                                  /* false */0,
                                                  /* false */0,
                                                  /* false */0,
                                                  /* false */0,
                                                  /* false */0
                                                ]);
                                    }));
                      }));
                describe("dispose perspective camera data", (function () {
                        return Wonder_jest.test("remove from nearMap, farMap, fovyMap, aspectMap", (function () {
                                      var match = CameraControllerTool$Wonderjs.createCameraGameObject(state[0]);
                                      var cameraController1 = match[3];
                                      var state$1 = GameObject$Wonderjs.disposeGameObjectCameraControllerComponent(match[1], cameraController1, match[0]);
                                      var data = CameraControllerTool$Wonderjs.getPerspectiveCameraData(state$1);
                                      return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](/* tuple */[
                                                      SparseMapSystem$WonderCommonlib.has(cameraController1, data[/* nearMap */0]),
                                                      SparseMapSystem$WonderCommonlib.has(cameraController1, data[/* farMap */1]),
                                                      SparseMapSystem$WonderCommonlib.has(cameraController1, data[/* fovyMap */2]),
                                                      SparseMapSystem$WonderCommonlib.has(cameraController1, data[/* aspectMap */3])
                                                    ]), /* tuple */[
                                                  /* false */0,
                                                  /* false */0,
                                                  /* false */0,
                                                  /* false */0
                                                ]);
                                    }));
                      }));
                describe("test add new one after dispose old one", (function () {
                        Wonder_jest.test("use disposed index as new index firstly", (function () {
                                var match = _prepareTwo(state[0]);
                                var cameraController1 = match[2];
                                var state$1 = GameObject$Wonderjs.disposeGameObjectCameraControllerComponent(match[1], cameraController1, match[0]);
                                var match$1 = CameraControllerTool$Wonderjs.createCameraGameObject(state$1);
                                return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](match$1[3]), cameraController1);
                              }));
                        return Wonder_jest.test("if has no disposed index, get index from meshRendererData.index", (function () {
                                      var match = _prepareTwo(state[0]);
                                      var cameraController1 = match[2];
                                      var state$1 = GameObject$Wonderjs.disposeGameObjectCameraControllerComponent(match[1], cameraController1, match[0]);
                                      var match$1 = CameraControllerTool$Wonderjs.createCameraGameObject(state$1);
                                      var match$2 = CameraControllerTool$Wonderjs.createCameraGameObject(match$1[0]);
                                      return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](/* tuple */[
                                                      match$1[3],
                                                      match$2[3]
                                                    ]), /* tuple */[
                                                  cameraController1,
                                                  match[4] + 1 | 0
                                                ]);
                                    }));
                      }));
                describe("contract check", (function () {
                        return Wonder_jest.test("shouldn't dispose the component which isn't alive", (function () {
                                      var match = _prepareTwo(state[0]);
                                      var cameraController1 = match[2];
                                      var gameObject1 = match[1];
                                      var state$1 = GameObject$Wonderjs.disposeGameObjectCameraControllerComponent(gameObject1, cameraController1, match[0]);
                                      return Wonder_jest.Expect[/* toThrowMessage */20]("shouldn't dispose the component which isn't alive", Wonder_jest.Expect[/* expect */0]((function () {
                                                        GameObject$Wonderjs.disposeGameObjectCameraControllerComponent(gameObject1, cameraController1, state$1);
                                                        return /* () */0;
                                                      })));
                                    }));
                      }));
                return /* () */0;
              }));
        describe("contract check: is alive", (function () {
                describe("if cameraController is disposed", (function () {
                        var _testGetFunc = function (getFunc) {
                          var match = CameraControllerTool$Wonderjs.createCameraGameObject(state[0]);
                          var cameraController = match[3];
                          var state$1 = GameObject$Wonderjs.disposeGameObjectCameraControllerComponent(match[1], cameraController, match[0]);
                          return Wonder_jest.Expect[/* toThrowMessage */20]("component should alive", Wonder_jest.Expect[/* expect */0]((function () {
                                            return Curry._2(getFunc, cameraController, state$1);
                                          })));
                        };
                        Wonder_jest.test("getCameraControllerPMatrix should error", (function () {
                                return _testGetFunc(CameraController$Wonderjs.getCameraControllerPMatrix);
                              }));
                        Wonder_jest.test("getCameraControllerGameObject should error", (function () {
                                return _testGetFunc(CameraController$Wonderjs.getCameraControllerGameObject);
                              }));
                        Wonder_jest.test("getCameraControllerPMatrix should error", (function () {
                                return _testGetFunc(CameraController$Wonderjs.getCameraControllerPMatrix);
                              }));
                        Wonder_jest.test("getCameraControllerWorldToCameraMatrix should error", (function () {
                                return _testGetFunc(CameraController$Wonderjs.getCameraControllerWorldToCameraMatrix);
                              }));
                        return Wonder_jest.test("setCameraControllerPerspectiveCamera should error", (function () {
                                      return _testGetFunc(CameraController$Wonderjs.setCameraControllerPerspectiveCamera);
                                    }));
                      }));
                return /* () */0;
              }));
        return /* () */0;
      }));

export {
  
}
/*  Not a pure module */
