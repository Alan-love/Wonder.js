// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as Curry                           from "../../../../../../node_modules/bs-platform/lib/es6/curry.js";
import * as Sinon                           from "../../../../../../node_modules/wonder-bs-sinon/lib/es6_global/src/sinon.js";
import * as Sinon$1                         from "sinon";
import * as Wonder_jest                     from "../../../../../../node_modules/wonder-bs-jest/lib/es6_global/src/wonder_jest.js";
import * as Material$Wonderjs               from "../../../../src/ecs/component/api/material/Material.js";
import * as TestTool$Wonderjs               from "../../tool/TestTool.js";
import * as StateTool$Wonderjs              from "../../tool/core/StateTool.js";
import * as GameObject$Wonderjs             from "../../../../src/ecs/admin/api/GameObject.js";
import * as MaterialTool$Wonderjs           from "../../tool/component/material/MaterialTool.js";
import * as BasicMaterial$Wonderjs          from "../../../../src/ecs/component/api/material/BasicMaterial.js";
import * as BasicMaterialTool$Wonderjs      from "../../tool/component/material/BasicMaterialTool.js";
import * as SparseMapSystem$WonderCommonlib from "../../../../../../node_modules/wonder-commonlib/lib/es6_global/src/SparseMapSystem.js";

describe("Material", (function () {
        var sandbox = Sinon.getSandboxDefaultVal(/* () */0);
        var state = [StateTool$Wonderjs.createState(/* None */0, /* () */0)];
        beforeEach((function () {
                sandbox[0] = Sinon$1.sandbox.create();
                state[0] = TestTool$Wonderjs.init(sandbox, /* None */0, /* None */0, /* () */0);
                return /* () */0;
              }));
        afterEach((function () {
                return Curry._1(Sinon.restoreSandbox, sandbox[0]);
              }));
        describe("getMaterialGameObject", (function () {
                return Wonder_jest.test("get material's gameObject", (function () {
                              var match = BasicMaterial$Wonderjs.createBasicMaterial(state[0]);
                              var material = match[1];
                              var match$1 = GameObject$Wonderjs.createGameObject(match[0]);
                              var gameObject = match$1[1];
                              var state$1 = GameObject$Wonderjs.addGameObjectMaterialComponent(gameObject, material, match$1[0]);
                              return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](Material$Wonderjs.getMaterialGameObject(material, state$1)), gameObject);
                            }));
              }));
        describe("getMaterialColor", (function () {
                return Wonder_jest.test("test default color", (function () {
                              var match = BasicMaterial$Wonderjs.createBasicMaterial(state[0]);
                              return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](Material$Wonderjs.getMaterialColor(match[1], match[0])), /* float array */[
                                          1,
                                          1,
                                          1
                                        ]);
                            }));
              }));
        describe("setMaterialColor", (function () {
                return Wonder_jest.test("test set color", (function () {
                              var match = BasicMaterial$Wonderjs.createBasicMaterial(state[0]);
                              var material = match[1];
                              var color = /* float array */[
                                0.2,
                                0.3,
                                0.5
                              ];
                              var state$1 = Material$Wonderjs.setMaterialColor(material, color, match[0]);
                              return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](Material$Wonderjs.getMaterialColor(material, state$1)), color);
                            }));
              }));
        describe("disposeComponent", (function () {
                describe("dispose data", (function () {
                        Wonder_jest.test("remove from colorMap, shaderIndexMap, gameObjectMap", (function () {
                                var match = BasicMaterialTool$Wonderjs.createGameObject(state[0]);
                                var material1 = match[2];
                                var state$1 = GameObject$Wonderjs.disposeGameObjectMaterialComponent(match[1], material1, match[0]);
                                var match$1 = MaterialTool$Wonderjs.getMaterialData(state$1);
                                return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](/* tuple */[
                                                SparseMapSystem$WonderCommonlib.has(material1, match$1[/* colorMap */2]),
                                                SparseMapSystem$WonderCommonlib.has(material1, match$1[/* shaderIndexMap */1]),
                                                SparseMapSystem$WonderCommonlib.has(material1, match$1[/* gameObjectMap */3])
                                              ]), /* tuple */[
                                            /* false */0,
                                            /* false */0,
                                            /* false */0
                                          ]);
                              }));
                        return Wonder_jest.test("reset group count", (function () {
                                      var match = BasicMaterial$Wonderjs.createBasicMaterial(state[0]);
                                      var material1 = match[1];
                                      var match$1 = GameObject$Wonderjs.createGameObject(match[0]);
                                      var gameObject1 = match$1[1];
                                      var state$1 = GameObject$Wonderjs.addGameObjectMaterialComponent(gameObject1, material1, match$1[0]);
                                      var match$2 = GameObject$Wonderjs.createGameObject(state$1);
                                      var state$2 = GameObject$Wonderjs.addGameObjectMaterialComponent(match$2[1], material1, match$2[0]);
                                      var state$3 = GameObject$Wonderjs.disposeGameObjectMaterialComponent(gameObject1, material1, state$2);
                                      return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](MaterialTool$Wonderjs.getGroupCount(material1, state$3)), 0);
                                    }));
                      }));
                describe("test add new one after dispose old one", (function () {
                        Wonder_jest.test("use disposed index as new index firstly", (function () {
                                var match = BasicMaterialTool$Wonderjs.createGameObject(state[0]);
                                var material1 = match[2];
                                var state$1 = GameObject$Wonderjs.disposeGameObjectMaterialComponent(match[1], material1, match[0]);
                                var match$1 = BasicMaterial$Wonderjs.createBasicMaterial(state$1);
                                return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](match$1[1]), material1);
                              }));
                        return Wonder_jest.test("if has no disposed index, get index from materialData.index", (function () {
                                      var match = BasicMaterialTool$Wonderjs.createGameObject(state[0]);
                                      var material1 = match[2];
                                      var state$1 = GameObject$Wonderjs.disposeGameObjectMaterialComponent(match[1], material1, match[0]);
                                      var match$1 = BasicMaterial$Wonderjs.createBasicMaterial(state$1);
                                      var match$2 = BasicMaterial$Wonderjs.createBasicMaterial(match$1[0]);
                                      return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](/* tuple */[
                                                      match$1[1],
                                                      match$2[1]
                                                    ]), /* tuple */[
                                                  material1,
                                                  material1 + 1 | 0
                                                ]);
                                    }));
                      }));
                describe("contract check", (function () {
                        return Wonder_jest.test("shouldn't dispose the component which isn't alive", (function () {
                                      var match = BasicMaterialTool$Wonderjs.createGameObject(state[0]);
                                      var material1 = match[2];
                                      var gameObject1 = match[1];
                                      var state$1 = GameObject$Wonderjs.disposeGameObjectMaterialComponent(gameObject1, material1, match[0]);
                                      return Wonder_jest.Expect[/* toThrowMessage */20]("shouldn't dispose the component which isn't alive", Wonder_jest.Expect[/* expect */0]((function () {
                                                        GameObject$Wonderjs.disposeGameObjectMaterialComponent(gameObject1, material1, state$1);
                                                        return /* () */0;
                                                      })));
                                    }));
                      }));
                return /* () */0;
              }));
        describe("contract check: is alive", (function () {
                describe("if material is disposed", (function () {
                        return Wonder_jest.test("getMaterialGameObject should error", (function () {
                                      var getFunc = Material$Wonderjs.getMaterialGameObject;
                                      var match = BasicMaterial$Wonderjs.createBasicMaterial(state[0]);
                                      var material = match[1];
                                      var match$1 = GameObject$Wonderjs.createGameObject(match[0]);
                                      var gameObject = match$1[1];
                                      var state$1 = GameObject$Wonderjs.addGameObjectMaterialComponent(gameObject, material, match$1[0]);
                                      var state$2 = GameObject$Wonderjs.disposeGameObjectMaterialComponent(gameObject, material, state$1);
                                      return Wonder_jest.Expect[/* toThrowMessage */20]("component should alive", Wonder_jest.Expect[/* expect */0]((function () {
                                                        return Curry._2(getFunc, material, state$2);
                                                      })));
                                    }));
                      }));
                return /* () */0;
              }));
        return /* () */0;
      }));

export {
  
}
/*  Not a pure module */
