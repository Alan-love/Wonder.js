// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as $$Array                       from "../../../../../../node_modules/bs-platform/lib/es6/array.js";
import * as Curry                         from "../../../../../../node_modules/bs-platform/lib/es6/curry.js";
import * as Sinon                         from "../../../../../../node_modules/wonder-bs-sinon/lib/es6_global/src/sinon.js";
import * as Sinon$1                       from "sinon";
import * as Caml_array                    from "../../../../../../node_modules/bs-platform/lib/es6/caml_array.js";
import * as Wonder_jest                   from "../../../../../../node_modules/wonder-bs-jest/lib/es6_global/src/wonder_jest.js";
import * as Material$Wonderjs             from "../../../../src/ecs/component/api/material/Material.js";
import * as TestTool$Wonderjs             from "../../tool/TestTool.js";
import * as CloneTool$Wonderjs            from "../../tool/core/CloneTool.js";
import * as StateTool$Wonderjs            from "../../tool/core/StateTool.js";
import * as FakeGlTool$Wonderjs           from "../../tool/gl/FakeGlTool.js";
import * as GameObject$Wonderjs           from "../../../../src/ecs/admin/api/GameObject.js";
import * as ArraySystem$Wonderjs          from "../../../../src/structure/ArraySystem.js";
import * as MaterialTool$Wonderjs         from "../../tool/component/material/MaterialTool.js";
import * as MeshRenderer$Wonderjs         from "../../../../src/ecs/component/api/meshRenderer/MeshRenderer.js";
import * as RenderJobsTool$Wonderjs       from "../../tool/render/core/render/jobs/RenderJobsTool.js";
import * as BoxGeometryTool$Wonderjs      from "../../tool/component/geometry/BoxGeometryTool.js";
import * as WebGLRenderTool$Wonderjs      from "../../tool/render/core/WebGLRenderTool.js";
import * as GLSLLocationTool$Wonderjs     from "../../tool/render/shader/GLSLLocationTool.js";
import * as BasicMaterialTool$Wonderjs    from "../../tool/component/material/BasicMaterialTool.js";
import * as MaterialGroupTool$Wonderjs    from "../../tool/component/material/MaterialGroupTool.js";
import * as CameraControllerTool$Wonderjs from "../../tool/component/cameraController/CameraControllerTool.js";

describe("test shared material", (function () {
        var sandbox = Sinon.getSandboxDefaultVal(/* () */0);
        var state = [StateTool$Wonderjs.createState(/* None */0, /* () */0)];
        beforeEach((function () {
                sandbox[0] = Sinon$1.sandbox.create();
                state[0] = TestTool$Wonderjs.init(sandbox, /* None */0, /* None */0, /* () */0);
                return /* () */0;
              }));
        afterEach((function () {
                return Curry._1(Sinon.restoreSandbox, sandbox[0]);
              }));
        Wonder_jest.test("shared material can be added to gameObject", (function () {
                var match = BasicMaterialTool$Wonderjs.createGameObject(state[0]);
                var material1 = match[2];
                var match$1 = MaterialGroupTool$Wonderjs.createGameObjectWithSharedMaterial(material1, match[0]);
                return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](GameObject$Wonderjs.getGameObjectMaterialComponent(match$1[1], match$1[0])), material1);
              }));
        Wonder_jest.test("shared material can get the same gameObject(first gameObject)", (function () {
                var match = BasicMaterialTool$Wonderjs.createGameObject(state[0]);
                var material1 = match[2];
                var gameObject1 = match[1];
                var match$1 = MaterialGroupTool$Wonderjs.createGameObjectWithSharedMaterial(material1, match[0]);
                var state$1 = match$1[0];
                return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](/* tuple */[
                                Material$Wonderjs.getMaterialGameObject(material1, state$1),
                                Material$Wonderjs.getMaterialGameObject(match$1[2], state$1)
                              ]), /* tuple */[
                            gameObject1,
                            gameObject1
                          ]);
              }));
        describe("test clone material component(share material)", (function () {
                var _createGameObject = function (state) {
                  var match = BasicMaterialTool$Wonderjs.createGameObject(state);
                  return /* tuple */[
                          match[0],
                          match[1],
                          match[2]
                        ];
                };
                var _prepare = function (count, state) {
                  var match = _createGameObject(state);
                  return CloneTool$Wonderjs.cloneWithMaterial(match[0], match[1], match[2], count, /* true */1);
                };
                Wonder_jest.test("cloned materials share material with source material", (function () {
                        var match = _prepare(2, state[0]);
                        var material = match[2];
                        return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](match[4]), /* int array */[
                                    material,
                                    material
                                  ]);
                      }));
                describe("test init cloned material", (function () {
                        var _createAndInitGameObject = function (state) {
                          var match = BasicMaterialTool$Wonderjs.createGameObject(state);
                          var gameObject1 = match[1];
                          var state$1 = GameObject$Wonderjs.initGameObject(gameObject1, match[0]);
                          return /* tuple */[
                                  state$1,
                                  gameObject1,
                                  match[2]
                                ];
                        };
                        var _prepare = function (state) {
                          var state$1 = MaterialTool$Wonderjs.prepareForInit(state);
                          var createProgram = Sinon.createEmptyStubWithJsObjSandbox(sandbox);
                          var state$2 = FakeGlTool$Wonderjs.setFakeGl(FakeGlTool$Wonderjs.buildFakeGl(sandbox, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[createProgram], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* () */0), state$1);
                          var match = _createAndInitGameObject(state$2);
                          return /* tuple */[
                                  CloneTool$Wonderjs.cloneWithMaterial(match[0], match[1], match[2], 2, /* true */1),
                                  createProgram
                                ];
                        };
                        var _initClonedMaterials = function (clonedMaterialArr, state) {
                          return ArraySystem$Wonderjs.reduceState((function (state, clonedMaterial) {
                                        return MaterialTool$Wonderjs.initMaterial(clonedMaterial, state);
                                      }), state, clonedMaterialArr);
                        };
                        return Wonder_jest.test("not init cloned material shader", (function () {
                                      var match = _prepare(state[0]);
                                      var createProgram = match[1];
                                      var match$1 = match[0];
                                      var callCount = Sinon.getCallCount(createProgram);
                                      _initClonedMaterials(match$1[4], match$1[0]);
                                      return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](Sinon.getCallCount(createProgram)), callCount);
                                    }));
                      }));
                describe("test dispose cloned material", (function () {
                        Wonder_jest.test("not collect dispose index", (function () {
                                var match = _prepare(1, state[0]);
                                var state$1 = MaterialTool$Wonderjs.dispose(Caml_array.caml_array_get(match[4], 0), match[0]);
                                var match$1 = MaterialTool$Wonderjs.getMaterialData(state$1);
                                var disposedIndexArray = match$1[/* disposedIndexArray */5];
                                return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](disposedIndexArray), /* int array */[]);
                              }));
                        Wonder_jest.test("dispose all cloned material shouldn't cause really dispose", (function () {
                                var match = _prepare(1, state[0]);
                                var state$1 = MaterialTool$Wonderjs.dispose(Caml_array.caml_array_get(match[4], 0), match[0]);
                                var match$1 = MaterialTool$Wonderjs.getMaterialData(state$1);
                                return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](match$1[/* gameObjectMap */3]), /* int array */[0]);
                              }));
                        return Wonder_jest.test("dispose all cloned material and source material should cause really dispose", (function () {
                                      var match = _prepare(1, state[0]);
                                      var material1 = match[2];
                                      var state$1 = MaterialTool$Wonderjs.dispose(Caml_array.caml_array_get(match[4], 0), match[0]);
                                      var state$2 = MaterialTool$Wonderjs.dispose(material1, state$1);
                                      return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](MaterialTool$Wonderjs.isMaterialDisposed(material1, state$2)), /* true */1);
                                    }));
                      }));
                describe("test batch dispose cloned material", (function () {
                        Wonder_jest.test("not collect dispose index", (function () {
                                var match = _prepare(1, state[0]);
                                var state$1 = GameObject$Wonderjs.batchDisposeGameObject(/* int array */[Caml_array.caml_array_get(match[3], 0)], match[0]);
                                var match$1 = MaterialTool$Wonderjs.getMaterialData(state$1);
                                var disposedIndexArray = match$1[/* disposedIndexArray */5];
                                return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](disposedIndexArray), /* int array */[]);
                              }));
                        Wonder_jest.test("dispose all cloned material shouldn't cause really dispose", (function () {
                                var match = _prepare(1, state[0]);
                                var state$1 = GameObject$Wonderjs.batchDisposeGameObject(/* int array */[Caml_array.caml_array_get(match[3], 0)], match[0]);
                                var match$1 = MaterialTool$Wonderjs.getMaterialData(state$1);
                                return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](match$1[/* gameObjectMap */3]), /* int array */[0]);
                              }));
                        return Wonder_jest.test("dispose all cloned material and source material should cause really dispose", (function () {
                                      var match = _prepare(1, state[0]);
                                      var state$1 = GameObject$Wonderjs.batchDisposeGameObject(/* int array */[
                                            match[1],
                                            Caml_array.caml_array_get(match[3], 0)
                                          ], match[0]);
                                      return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](MaterialTool$Wonderjs.isMaterialDisposed(match[2], state$1)), /* true */1);
                                    }));
                      }));
                Wonder_jest.test("source material's gameObject is cloned material's gameObject", (function () {
                        var match = _prepare(2, state[0]);
                        var clonedMaterialArr = match[4];
                        var gameObject = match[1];
                        var state$1 = match[0];
                        return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](/* tuple */[
                                        Material$Wonderjs.getMaterialGameObject(Caml_array.caml_array_get(clonedMaterialArr, 0), state$1),
                                        Material$Wonderjs.getMaterialGameObject(Caml_array.caml_array_get(clonedMaterialArr, 1), state$1)
                                      ]), /* tuple */[
                                    gameObject,
                                    gameObject
                                  ]);
                      }));
                describe("should send shared materials' uniform cacheable data only once", (function () {
                        var _prepareSendUinformData = function (sandbox, state) {
                          var match = RenderJobsTool$Wonderjs.prepareGameObject(sandbox, state);
                          var gameObject = match[1];
                          var match$1 = CameraControllerTool$Wonderjs.createCameraGameObject(match[0]);
                          var state$1 = match$1[0];
                          return /* tuple */[
                                  state$1,
                                  gameObject,
                                  /* tuple */[
                                    GameObject$Wonderjs.getGameObjectTransformComponent(gameObject, state$1),
                                    match[3]
                                  ],
                                  match$1[2],
                                  match$1[3]
                                ];
                        };
                        var _prepareGameObject = function (material, state) {
                          var match = BoxGeometryTool$Wonderjs.createBoxGeometry(state);
                          var geometry = match[1];
                          var match$1 = MeshRenderer$Wonderjs.createMeshRenderer(match[0]);
                          var meshRenderer = match$1[1];
                          var match$2 = GameObject$Wonderjs.createGameObject(match$1[0]);
                          var gameObject = match$2[1];
                          var state$1 = GameObject$Wonderjs.addGameObjectMeshRendererComponent(gameObject, meshRenderer, GameObject$Wonderjs.addGameObjectGeometryComponent(gameObject, geometry, GameObject$Wonderjs.addGameObjectMaterialComponent(gameObject, material, match$2[0])));
                          return /* tuple */[
                                  state$1,
                                  gameObject,
                                  geometry,
                                  meshRenderer
                                ];
                        };
                        return Wonder_jest.test("test send u_color", (function () {
                                      var match = _prepareSendUinformData(sandbox, state[0]);
                                      var material1 = match[2][1];
                                      var match$1 = _prepareGameObject(material1, match[0]);
                                      var color = /* float array */[
                                        0,
                                        1,
                                        0.2
                                      ];
                                      var state$1 = Material$Wonderjs.setMaterialColor(material1, color, match$1[0]);
                                      var uniform3f = Sinon.createEmptyStubWithJsObjSandbox(sandbox);
                                      var getUniformLocation = GLSLLocationTool$Wonderjs.getUniformLocation(/* Some */[0], sandbox, "u_color");
                                      var state$2 = FakeGlTool$Wonderjs.setFakeGl(FakeGlTool$Wonderjs.buildFakeGl(sandbox, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[getUniformLocation], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[uniform3f], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* () */0), state$1);
                                      WebGLRenderTool$Wonderjs.render(RenderJobsTool$Wonderjs.updateSystem(RenderJobsTool$Wonderjs.initSystemAndRender(state$2)));
                                      return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](/* tuple */[
                                                      Sinon.getCallCount(Sinon.withOneArg(0, uniform3f)),
                                                      Sinon.getArgs(Sinon.getCall(0, Sinon.withOneArg(0, uniform3f)))
                                                    ]), /* tuple */[
                                                  1,
                                                  /* :: */[
                                                    0,
                                                    $$Array.to_list(color)
                                                  ]
                                                ]);
                                    }));
                      }));
                return /* () */0;
              }));
        return /* () */0;
      }));

export {
  
}
/*  Not a pure module */
