// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as Curry                           from "../../../../../../node_modules/bs-platform/lib/es6/curry.js";
import * as Sinon                           from "../../../../../../node_modules/wonder-bs-sinon/lib/es6_global/src/sinon.js";
import * as Sinon$1                         from "sinon";
import * as Wonder_jest                     from "../../../../../../node_modules/wonder-bs-jest/lib/es6_global/src/wonder_jest.js";
import * as TestTool$Wonderjs               from "../../tool/TestTool.js";
import * as StateTool$Wonderjs              from "../../tool/core/StateTool.js";
import * as GameObject$Wonderjs             from "../../../../src/ecs/admin/api/GameObject.js";
import * as MeshRenderer$Wonderjs           from "../../../../src/ecs/component/api/meshRenderer/MeshRenderer.js";
import * as MeshRendererTool$Wonderjs       from "../../tool/component/meshRenderer/MeshRendererTool.js";
import * as SparseMapSystem$WonderCommonlib from "../../../../../../node_modules/wonder-commonlib/lib/es6_global/src/SparseMapSystem.js";

describe("MeshRenderer", (function () {
        var sandbox = Sinon.getSandboxDefaultVal(/* () */0);
        var state = [StateTool$Wonderjs.createState(/* None */0, /* () */0)];
        var _prepareTwo = function (state) {
          var match = MeshRendererTool$Wonderjs.createGameObject(state);
          var match$1 = MeshRendererTool$Wonderjs.createGameObject(match[0]);
          return /* tuple */[
                  match$1[0],
                  match[1],
                  match[2],
                  match$1[1],
                  match$1[2]
                ];
        };
        beforeEach((function () {
                sandbox[0] = Sinon$1.sandbox.create();
                state[0] = TestTool$Wonderjs.init(sandbox, /* None */0, /* None */0, /* () */0);
                return /* () */0;
              }));
        afterEach((function () {
                return Curry._1(Sinon.restoreSandbox, sandbox[0]);
              }));
        describe("getRenderArray", (function () {
                return Wonder_jest.test("get array of gameObject which has MeshRenderer component", (function () {
                              var match = _prepareTwo(state[0]);
                              return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](MeshRendererTool$Wonderjs.getRenderArray(match[0])), /* int array */[
                                          match[1],
                                          match[3]
                                        ]);
                            }));
              }));
        describe("disposeComponent", (function () {
                describe("dispose data", (function () {
                        Wonder_jest.test("remove from gameObjectMap", (function () {
                                var match = MeshRendererTool$Wonderjs.createGameObject(state[0]);
                                var meshRenderer1 = match[2];
                                var state$1 = GameObject$Wonderjs.disposeGameObjectMeshRendererComponent(match[1], meshRenderer1, match[0]);
                                var match$1 = MeshRendererTool$Wonderjs.getMeshRendererData(state$1);
                                return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](SparseMapSystem$WonderCommonlib.has(meshRenderer1, match$1[/* gameObjectMap */2])), /* false */0);
                              }));
                        describe("remove from renderGameObjectArray", (function () {
                                Wonder_jest.test("test getRenderArray", (function () {
                                        var match = _prepareTwo(state[0]);
                                        var state$1 = GameObject$Wonderjs.disposeGameObjectMeshRendererComponent(match[1], match[2], match[0]);
                                        return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](MeshRendererTool$Wonderjs.getRenderArray(state$1)), /* int array */[match[3]]);
                                      }));
                                return Wonder_jest.test("test add gameObject after dispose", (function () {
                                              var match = MeshRendererTool$Wonderjs.createGameObject(state[0]);
                                              var state$1 = GameObject$Wonderjs.disposeGameObjectMeshRendererComponent(match[1], match[2], match[0]);
                                              var match$1 = MeshRendererTool$Wonderjs.createGameObject(state$1);
                                              return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](MeshRendererTool$Wonderjs.getRenderArray(match$1[0])), /* int array */[match$1[1]]);
                                            }));
                              }));
                        return /* () */0;
                      }));
                Wonder_jest.test("the disposed meshRenderer shouldn't affect other alive ones' data", (function () {
                        var match = _prepareTwo(state[0]);
                        var state$1 = GameObject$Wonderjs.disposeGameObjectMeshRendererComponent(match[1], match[2], match[0]);
                        return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](MeshRenderer$Wonderjs.getMeshRendererGameObject(match[4], state$1)), match[3]);
                      }));
                describe("test add new one after dispose old one", (function () {
                        Wonder_jest.test("use disposed index as new index firstly", (function () {
                                var match = _prepareTwo(state[0]);
                                var meshRenderer1 = match[2];
                                var state$1 = GameObject$Wonderjs.disposeGameObjectMeshRendererComponent(match[1], meshRenderer1, match[0]);
                                var match$1 = MeshRenderer$Wonderjs.createMeshRenderer(state$1);
                                return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](match$1[1]), meshRenderer1);
                              }));
                        return Wonder_jest.test("if has no disposed index, get index from meshRendererData.index", (function () {
                                      var match = _prepareTwo(state[0]);
                                      var meshRenderer2 = match[4];
                                      var state$1 = GameObject$Wonderjs.disposeGameObjectMeshRendererComponent(match[3], meshRenderer2, match[0]);
                                      var match$1 = MeshRenderer$Wonderjs.createMeshRenderer(state$1);
                                      var match$2 = MeshRenderer$Wonderjs.createMeshRenderer(match$1[0]);
                                      return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](/* tuple */[
                                                      match$1[1],
                                                      match$2[1]
                                                    ]), /* tuple */[
                                                  meshRenderer2,
                                                  meshRenderer2 + 1 | 0
                                                ]);
                                    }));
                      }));
                describe("contract check", (function () {
                        return Wonder_jest.test("shouldn't dispose the component which isn't alive", (function () {
                                      var match = _prepareTwo(state[0]);
                                      var meshRenderer1 = match[2];
                                      var gameObject1 = match[1];
                                      var state$1 = GameObject$Wonderjs.disposeGameObjectMeshRendererComponent(gameObject1, meshRenderer1, match[0]);
                                      return Wonder_jest.Expect[/* toThrowMessage */20]("shouldn't dispose the component which isn't alive", Wonder_jest.Expect[/* expect */0]((function () {
                                                        GameObject$Wonderjs.disposeGameObjectMeshRendererComponent(gameObject1, meshRenderer1, state$1);
                                                        return /* () */0;
                                                      })));
                                    }));
                      }));
                return /* () */0;
              }));
        describe("contract check: is alive", (function () {
                describe("if meshRenderer is disposed", (function () {
                        return Wonder_jest.test("getMeshRendererGameObject should error", (function () {
                                      var match = MeshRendererTool$Wonderjs.createGameObject(state[0]);
                                      var meshRenderer1 = match[2];
                                      var state$1 = GameObject$Wonderjs.disposeGameObjectMeshRendererComponent(match[1], meshRenderer1, match[0]);
                                      return Wonder_jest.Expect[/* toThrowMessage */20]("component should alive", Wonder_jest.Expect[/* expect */0]((function () {
                                                        return MeshRenderer$Wonderjs.getMeshRendererGameObject(meshRenderer1, state$1);
                                                      })));
                                    }));
                      }));
                return /* () */0;
              }));
        return /* () */0;
      }));

export {
  
}
/*  Not a pure module */
