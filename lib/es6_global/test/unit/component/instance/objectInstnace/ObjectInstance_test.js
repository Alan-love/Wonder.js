// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as Curry                           from "../../../../../../../node_modules/bs-platform/lib/es6/curry.js";
import * as Sinon                           from "../../../../../../../node_modules/wonder-bs-sinon/lib/es6_global/src/sinon.js";
import * as Sinon$1                         from "sinon";
import * as Wonder_jest                     from "../../../../../../../node_modules/wonder-bs-jest/lib/es6_global/src/wonder_jest.js";
import * as TestTool$Wonderjs               from "../../../tool/TestTool.js";
import * as StateTool$Wonderjs              from "../../../tool/core/StateTool.js";
import * as GameObject$Wonderjs             from "../../../../../src/ecs/admin/api/GameObject.js";
import * as ObjectInstanceTool$Wonderjs     from "../../../tool/component/instance/ObjectInstanceTool.js";
import * as SourceInstanceTool$Wonderjs     from "../../../tool/component/instance/SourceInstanceTool.js";
import * as SparseMapSystem$WonderCommonlib from "../../../../../../../node_modules/wonder-commonlib/lib/es6_global/src/SparseMapSystem.js";

describe("ObjectInstance", (function () {
        var sandbox = Sinon.getSandboxDefaultVal(/* () */0);
        var state = [StateTool$Wonderjs.createState(/* None */0, /* () */0)];
        beforeEach((function () {
                sandbox[0] = Sinon$1.sandbox.create();
                state[0] = TestTool$Wonderjs.init(sandbox, /* None */0, /* None */0, /* () */0);
                return /* () */0;
              }));
        afterEach((function () {
                return Curry._1(Sinon.restoreSandbox, sandbox[0]);
              }));
        describe("dispose component", (function () {
                describe("dispose data", (function () {
                        Wonder_jest.test("remove from sourceInstanceMap, gameObjectMap", (function () {
                                var match = ObjectInstanceTool$Wonderjs.createObjectInstanceGameObject(state[0]);
                                var objectInstance = match[4];
                                var state$1 = GameObject$Wonderjs.disposeGameObjectObjectInstanceComponent(match[1], objectInstance, match[0]);
                                var match$1 = ObjectInstanceTool$Wonderjs.getObjectInstanceData(state$1);
                                return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](/* tuple */[
                                                SparseMapSystem$WonderCommonlib.has(objectInstance, match$1[/* sourceInstanceMap */1]),
                                                SparseMapSystem$WonderCommonlib.has(objectInstance, match$1[/* gameObjectMap */3])
                                              ]), /* tuple */[
                                            /* false */0,
                                            /* false */0
                                          ]);
                              }));
                        return Wonder_jest.test("remove from sourceInstance->objectInstanceArrayMap", (function () {
                                      var match = ObjectInstanceTool$Wonderjs.createObjectInstanceGameObject(state[0]);
                                      var objectInstance = match[4];
                                      var state$1 = GameObject$Wonderjs.disposeGameObjectObjectInstanceComponent(match[1], objectInstance, match[0]);
                                      var match$1 = SourceInstanceTool$Wonderjs.getSourceInstanceData(state$1);
                                      var objectInstanceArrayMap = match$1[/* objectInstanceArrayMap */1];
                                      return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](SparseMapSystem$WonderCommonlib.has(objectInstance, SparseMapSystem$WonderCommonlib.unsafeGet(match[2], objectInstanceArrayMap))), /* false */0);
                                    }));
                      }));
                describe("test add new one after dispose old one", (function () {
                        Wonder_jest.test("use disposed index as new index firstly", (function () {
                                var match = ObjectInstanceTool$Wonderjs.createObjectInstanceGameObject(state[0]);
                                var objectInstance1 = match[4];
                                var state$1 = GameObject$Wonderjs.disposeGameObjectObjectInstanceComponent(match[1], objectInstance1, match[0]);
                                var match$1 = ObjectInstanceTool$Wonderjs.createObjectInstanceGameObject(state$1);
                                return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](match$1[4]), objectInstance1);
                              }));
                        return Wonder_jest.test("if has no disposed index, get index from objectInstanceData.index", (function () {
                                      var match = ObjectInstanceTool$Wonderjs.createObjectInstanceGameObject(state[0]);
                                      var objectInstance1 = match[4];
                                      var state$1 = GameObject$Wonderjs.disposeGameObjectObjectInstanceComponent(match[1], objectInstance1, match[0]);
                                      var match$1 = ObjectInstanceTool$Wonderjs.createObjectInstanceGameObject(state$1);
                                      var match$2 = ObjectInstanceTool$Wonderjs.createObjectInstanceGameObject(match$1[0]);
                                      return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](/* tuple */[
                                                      match$1[4],
                                                      match$2[4]
                                                    ]), /* tuple */[
                                                  objectInstance1,
                                                  objectInstance1 + 1 | 0
                                                ]);
                                    }));
                      }));
                describe("contract check", (function () {
                        return Wonder_jest.test("shouldn't dispose the component which isn't alive", (function () {
                                      var match = ObjectInstanceTool$Wonderjs.createObjectInstanceGameObject(state[0]);
                                      var objectInstance1 = match[4];
                                      var gameObject1 = match[1];
                                      var state$1 = GameObject$Wonderjs.disposeGameObjectObjectInstanceComponent(gameObject1, objectInstance1, match[0]);
                                      return Wonder_jest.Expect[/* toThrowMessage */20]("shouldn't dispose the component which isn't alive", Wonder_jest.Expect[/* expect */0]((function () {
                                                        GameObject$Wonderjs.disposeGameObjectObjectInstanceComponent(gameObject1, objectInstance1, state$1);
                                                        return /* () */0;
                                                      })));
                                    }));
                      }));
                return /* () */0;
              }));
        return /* () */0;
      }));

export {
  
}
/*  Not a pure module */
