// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as Curry                           from "../../../../../../../node_modules/bs-platform/lib/es6/curry.js";
import * as Sinon                           from "../../../../../../../node_modules/wonder-bs-sinon/lib/es6_global/src/sinon.js";
import * as Sinon$1                         from "sinon";
import * as Caml_array                      from "../../../../../../../node_modules/bs-platform/lib/es6/caml_array.js";
import * as Wonder_jest                     from "../../../../../../../node_modules/wonder-bs-jest/lib/es6_global/src/wonder_jest.js";
import * as TestTool$Wonderjs               from "../../../tool/TestTool.js";
import * as StateTool$Wonderjs              from "../../../tool/core/StateTool.js";
import * as GameObject$Wonderjs             from "../../../../../src/ecs/admin/api/GameObject.js";
import * as TransformTool$Wonderjs          from "../../../tool/component/transform/TransformTool.js";
import * as VboBufferTool$Wonderjs          from "../../../tool/render/buffer/VboBufferTool.js";
import * as SourceInstance$Wonderjs         from "../../../../../src/ecs/component/api/instance/SourceInstance.js";
import * as ObjectInstanceTool$Wonderjs     from "../../../tool/component/instance/ObjectInstanceTool.js";
import * as SourceInstanceTool$Wonderjs     from "../../../tool/component/instance/SourceInstanceTool.js";
import * as SparseMapSystem$WonderCommonlib from "../../../../../../../node_modules/wonder-commonlib/lib/es6_global/src/SparseMapSystem.js";

describe("SourceInstance", (function () {
        var sandbox = Sinon.getSandboxDefaultVal(/* () */0);
        var state = [StateTool$Wonderjs.createState(/* None */0, /* () */0)];
        beforeEach((function () {
                sandbox[0] = Sinon$1.sandbox.create();
                state[0] = TestTool$Wonderjs.init(sandbox, /* None */0, /* None */0, /* () */0);
                return /* () */0;
              }));
        afterEach((function () {
                return Curry._1(Sinon.restoreSandbox, sandbox[0]);
              }));
        describe("getSourceInstanceObjectInstanceArray", (function () {
                return Wonder_jest.test("get objectInstanceArray", (function () {
                              var match = ObjectInstanceTool$Wonderjs.createObjectInstanceGameObject(state[0]);
                              return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](SourceInstance$Wonderjs.getSourceInstanceObjectInstanceArray(match[2], match[0])), /* int array */[match[3]]);
                            }));
              }));
        describe("dispose component", (function () {
                describe("dispose data", (function () {
                        Wonder_jest.test("remove from sourceInstanceListMap, modelMatrixFloat32ArrayMap, modelMatrixInstanceBufferCapacityMap, isModelMatrixStaticMap, isSendModelMatrixDataMap, gameObjectMap", (function () {
                                var match = SourceInstanceTool$Wonderjs.createSourceInstanceGameObject(state[0]);
                                var sourceInstance = match[2];
                                var state$1 = GameObject$Wonderjs.disposeGameObjectSourceInstanceComponent(match[1], sourceInstance, match[0]);
                                var match$1 = SourceInstanceTool$Wonderjs.getSourceInstanceData(state$1);
                                var objectInstanceArrayMap = match$1[/* objectInstanceArrayMap */1];
                                return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](/* tuple */[
                                                SparseMapSystem$WonderCommonlib.has(sourceInstance, objectInstanceArrayMap),
                                                SparseMapSystem$WonderCommonlib.has(sourceInstance, match$1[/* modelMatrixFloat32ArrayMap */3]),
                                                SparseMapSystem$WonderCommonlib.has(sourceInstance, match$1[/* modelMatrixInstanceBufferCapacityMap */2]),
                                                SparseMapSystem$WonderCommonlib.has(sourceInstance, match$1[/* isModelMatrixStaticMap */4]),
                                                SparseMapSystem$WonderCommonlib.has(sourceInstance, match$1[/* isSendModelMatrixDataMap */5]),
                                                SparseMapSystem$WonderCommonlib.has(sourceInstance, match$1[/* gameObjectMap */7])
                                              ]), /* tuple */[
                                            /* false */0,
                                            /* false */0,
                                            /* false */0,
                                            /* false */0,
                                            /* false */0,
                                            /* false */0
                                          ]);
                              }));
                        Wonder_jest.test("remove from buffer map", (function () {
                                var match = SourceInstanceTool$Wonderjs.createSourceInstanceGameObject(state[0]);
                                var sourceInstance = match[2];
                                var state$1 = GameObject$Wonderjs.disposeGameObjectSourceInstanceComponent(match[1], sourceInstance, match[0]);
                                var match$1 = VboBufferTool$Wonderjs.getVboBufferData(state$1);
                                var modelMatrixInstanceBufferMap = match$1[/* modelMatrixInstanceBufferMap */2];
                                return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](SparseMapSystem$WonderCommonlib.has(sourceInstance, modelMatrixInstanceBufferMap)), /* false */0);
                              }));
                        describe("dispose all objectInstance gameObjects", (function () {
                                describe("should dispose all components", (function () {
                                        Wonder_jest.test("dispose transform component", (function () {
                                                var match = ObjectInstanceTool$Wonderjs.createObjectInstanceGameObjectArr(2, state[0]);
                                                var objectInstanceGameObjectArr = match[3];
                                                var state$1 = match[0];
                                                var objectInstanceGameObject1 = Caml_array.caml_array_get(objectInstanceGameObjectArr, 0);
                                                var objectInstanceGameObject2 = Caml_array.caml_array_get(objectInstanceGameObjectArr, 1);
                                                var transform1 = GameObject$Wonderjs.getGameObjectTransformComponent(objectInstanceGameObject1, state$1);
                                                var transform2 = GameObject$Wonderjs.getGameObjectTransformComponent(objectInstanceGameObject2, state$1);
                                                var state$2 = GameObject$Wonderjs.disposeGameObjectSourceInstanceComponent(match[1], match[2], state$1);
                                                return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](/* tuple */[
                                                                TransformTool$Wonderjs.isDisposed(transform1, state$2),
                                                                TransformTool$Wonderjs.isDisposed(transform2, state$2)
                                                              ]), /* tuple */[
                                                            /* true */1,
                                                            /* true */1
                                                          ]);
                                              }));
                                        return Wonder_jest.test("dispose objectInstance component", (function () {
                                                      var match = ObjectInstanceTool$Wonderjs.createObjectInstanceGameObjectArr(2, state[0]);
                                                      var objectInstanceArr = match[4];
                                                      var state$1 = match[0];
                                                      var objectInstance1 = Caml_array.caml_array_get(objectInstanceArr, 0);
                                                      var objectInstance2 = Caml_array.caml_array_get(objectInstanceArr, 1);
                                                      GameObject$Wonderjs.disposeGameObjectSourceInstanceComponent(match[1], match[2], state$1);
                                                      return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](/* tuple */[
                                                                      ObjectInstanceTool$Wonderjs.isDisposed(objectInstance1, state$1),
                                                                      ObjectInstanceTool$Wonderjs.isDisposed(objectInstance2, state$1)
                                                                    ]), /* tuple */[
                                                                  /* true */1,
                                                                  /* true */1
                                                                ]);
                                                    }));
                                      }));
                                return /* () */0;
                              }));
                        return /* () */0;
                      }));
                describe("test add new one after dispose old one", (function () {
                        Wonder_jest.test("use disposed index as new index firstly", (function () {
                                var match = SourceInstanceTool$Wonderjs.createSourceInstanceGameObject(state[0]);
                                var sourceInstance1 = match[2];
                                var state$1 = GameObject$Wonderjs.disposeGameObjectSourceInstanceComponent(match[1], sourceInstance1, match[0]);
                                var match$1 = SourceInstanceTool$Wonderjs.createSourceInstanceGameObject(state$1);
                                return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](match$1[2]), sourceInstance1);
                              }));
                        return Wonder_jest.test("if has no disposed index, get index from sourceInstanceData.index", (function () {
                                      var match = SourceInstanceTool$Wonderjs.createSourceInstanceGameObject(state[0]);
                                      var sourceInstance1 = match[2];
                                      var state$1 = GameObject$Wonderjs.disposeGameObjectSourceInstanceComponent(match[1], sourceInstance1, match[0]);
                                      var match$1 = SourceInstanceTool$Wonderjs.createSourceInstanceGameObject(state$1);
                                      var match$2 = SourceInstanceTool$Wonderjs.createSourceInstanceGameObject(match$1[0]);
                                      return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](/* tuple */[
                                                      match$1[2],
                                                      match$2[2]
                                                    ]), /* tuple */[
                                                  sourceInstance1,
                                                  sourceInstance1 + 1 | 0
                                                ]);
                                    }));
                      }));
                describe("contract check", (function () {
                        return Wonder_jest.test("shouldn't dispose the component which isn't alive", (function () {
                                      var match = SourceInstanceTool$Wonderjs.createSourceInstanceGameObject(state[0]);
                                      var sourceInstance1 = match[2];
                                      var gameObject1 = match[1];
                                      var state$1 = GameObject$Wonderjs.disposeGameObjectSourceInstanceComponent(gameObject1, sourceInstance1, match[0]);
                                      return Wonder_jest.Expect[/* toThrowMessage */20]("shouldn't dispose the component which isn't alive", Wonder_jest.Expect[/* expect */0]((function () {
                                                        GameObject$Wonderjs.disposeGameObjectSourceInstanceComponent(gameObject1, sourceInstance1, state$1);
                                                        return /* () */0;
                                                      })));
                                    }));
                      }));
                return /* () */0;
              }));
        return /* () */0;
      }));

export {
  
}
/*  Not a pure module */
