// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as Curry                           from "../../../../../../node_modules/bs-platform/lib/es6/curry.js";
import * as Sinon                           from "../../../../../../node_modules/wonder-bs-sinon/lib/es6_global/src/sinon.js";
import * as Sinon$1                         from "sinon";
import * as Wonder_jest                     from "../../../../../../node_modules/wonder-bs-jest/lib/es6_global/src/wonder_jest.js";
import * as TestTool$Wonderjs               from "../../tool/TestTool.js";
import * as StateTool$Wonderjs              from "../../tool/core/StateTool.js";
import * as Transform$Wonderjs              from "../../../../src/ecs/component/api/transform/Transform.js";
import * as GameObject$Wonderjs             from "../../../../src/ecs/admin/api/GameObject.js";
import * as TransformTool$Wonderjs          from "../../tool/component/transform/TransformTool.js";
import * as Vector3System$Wonderjs          from "../../../../src/structure/Vector3System.js";
import * as GameObjectTool$Wonderjs         from "../../tool/core/GameObjectTool.js";
import * as SparseMapSystem$WonderCommonlib from "../../../../../../node_modules/wonder-commonlib/lib/es6_global/src/SparseMapSystem.js";

describe("Transform", (function () {
        var sandbox = Sinon.getSandboxDefaultVal(/* () */0);
        var state = [StateTool$Wonderjs.createState(/* None */0, /* () */0)];
        var _judgeOneToOne = function (param, param$1, param$2, state) {
          var child = param[1];
          var parent = param[0];
          return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](/* tuple */[
                          Transform$Wonderjs.getTransformLocalPosition(parent, state),
                          Transform$Wonderjs.getTransformPosition(parent, state),
                          Transform$Wonderjs.getTransformLocalPosition(child, state),
                          Transform$Wonderjs.getTransformPosition(child, state)
                        ]), /* tuple */[
                      param$1[0],
                      param$1[1],
                      param$2[0],
                      param$2[1]
                    ]);
        };
        var _judgeOneToTwo = function (param, param$1, param$2, param$3, state) {
          var child2 = param[2];
          var child1 = param[1];
          var parent = param[0];
          return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](/* tuple */[
                          Transform$Wonderjs.getTransformLocalPosition(parent, state),
                          Transform$Wonderjs.getTransformPosition(parent, state),
                          Transform$Wonderjs.getTransformLocalPosition(child1, state),
                          Transform$Wonderjs.getTransformPosition(child1, state),
                          Transform$Wonderjs.getTransformLocalPosition(child2, state),
                          Transform$Wonderjs.getTransformPosition(child2, state)
                        ]), /* tuple */[
                      param$1[0],
                      param$1[1],
                      param$2[0],
                      param$2[1],
                      param$3[0],
                      param$3[1]
                    ]);
        };
        beforeEach((function () {
                sandbox[0] = Sinon$1.sandbox.create();
                state[0] = TestTool$Wonderjs.init(sandbox, /* None */0, /* None */0, /* () */0);
                return /* () */0;
              }));
        afterEach((function () {
                return Curry._1(Sinon.restoreSandbox, sandbox[0]);
              }));
        describe("createTransform", (function () {
                Wonder_jest.test("create a new transform which is just index(int)", (function () {
                        var match = Transform$Wonderjs.createTransform(state[0]);
                        return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](match[1]), 0);
                      }));
                describe("change state", (function () {
                        return Wonder_jest.test("state->index + 1", (function () {
                                      var match = Transform$Wonderjs.createTransform(state[0]);
                                      var data = TransformTool$Wonderjs.getTransformData(match[0]);
                                      return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](data[/* index */0]), 1);
                                    }));
                      }));
                return /* () */0;
              }));
        describe("getTransformParent", (function () {
                return Wonder_jest.test("default value should be Js.Nullable.undefined", (function () {
                              var match = Transform$Wonderjs.createTransform(state[0]);
                              return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](Transform$Wonderjs.getTransformParent(match[1], match[0])), undefined);
                            }));
              }));
        describe("setTransformParent", (function () {
                describe("the change of parent before setted as parent will affect child", (function () {
                        Wonder_jest.test("test one(parent)-one(child)", (function () {
                                var match = Transform$Wonderjs.createTransform(state[0]);
                                var parent = match[1];
                                var match$1 = Transform$Wonderjs.createTransform(match[0]);
                                var child = match$1[1];
                                var pos = /* tuple */[
                                  1,
                                  2,
                                  3
                                ];
                                var state$1 = Transform$Wonderjs.setTransformParent(parent, child, Transform$Wonderjs.setTransformLocalPosition(parent, pos, match$1[0]));
                                return _judgeOneToOne(/* tuple */[
                                            parent,
                                            child
                                          ], /* tuple */[
                                            pos,
                                            pos
                                          ], /* tuple */[
                                            TransformTool$Wonderjs.getDefaultPosition(/* () */0),
                                            pos
                                          ], state$1);
                              }));
                        return Wonder_jest.test("test one(parent)-two(child)", (function () {
                                      var match = Transform$Wonderjs.createTransform(state[0]);
                                      var parent = match[1];
                                      var match$1 = Transform$Wonderjs.createTransform(match[0]);
                                      var child1 = match$1[1];
                                      var match$2 = Transform$Wonderjs.createTransform(match$1[0]);
                                      var child2 = match$2[1];
                                      var pos1 = /* tuple */[
                                        1,
                                        2,
                                        3
                                      ];
                                      var pos2 = /* tuple */[
                                        10,
                                        20,
                                        30
                                      ];
                                      var state$1 = Transform$Wonderjs.setTransformParent(parent, child1, Transform$Wonderjs.setTransformLocalPosition(parent, pos1, match$2[0]));
                                      var state$2 = Transform$Wonderjs.setTransformParent(parent, child2, Transform$Wonderjs.setTransformLocalPosition(child2, pos2, state$1));
                                      return _judgeOneToTwo(/* tuple */[
                                                  parent,
                                                  child1,
                                                  child2
                                                ], /* tuple */[
                                                  pos1,
                                                  pos1
                                                ], /* tuple */[
                                                  TransformTool$Wonderjs.getDefaultPosition(/* () */0),
                                                  pos1
                                                ], /* tuple */[
                                                  pos2,
                                                  Vector3System$Wonderjs.add(/* Float */0, pos1, pos2)
                                                ], state$2);
                                    }));
                      }));
                describe("if set parent to be null, remove its current parent", (function () {
                        describe("test one(parent)-one(child)", (function () {
                                var exec = function () {
                                  var match = Transform$Wonderjs.createTransform(state[0]);
                                  var parent = match[1];
                                  var match$1 = Transform$Wonderjs.createTransform(match[0]);
                                  var child = match$1[1];
                                  var pos = /* tuple */[
                                    1,
                                    2,
                                    3
                                  ];
                                  var state$1 = Transform$Wonderjs.setTransformParent(parent, child, Transform$Wonderjs.setTransformLocalPosition(parent, pos, match$1[0]));
                                  var state$2 = Transform$Wonderjs.setTransformParent(null, child, state$1);
                                  return /* tuple */[
                                          state$2,
                                          parent,
                                          child,
                                          pos
                                        ];
                                };
                                Wonder_jest.test("test remove its current parent", (function () {
                                        var match = exec(/* () */0);
                                        return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](Transform$Wonderjs.getTransformParent(match[2], match[0])), undefined);
                                      }));
                                return Wonder_jest.test("test position and local position", (function () {
                                              var match = exec(/* () */0);
                                              var pos = match[3];
                                              return _judgeOneToOne(/* tuple */[
                                                          match[1],
                                                          match[2]
                                                        ], /* tuple */[
                                                          pos,
                                                          pos
                                                        ], /* tuple */[
                                                          TransformTool$Wonderjs.getDefaultPosition(/* () */0),
                                                          TransformTool$Wonderjs.getDefaultPosition(/* () */0)
                                                        ], match[0]);
                                            }));
                              }));
                        return Wonder_jest.test("test one(parent)-two(child)", (function () {
                                      var match = Transform$Wonderjs.createTransform(state[0]);
                                      var parent = match[1];
                                      var match$1 = Transform$Wonderjs.createTransform(match[0]);
                                      var child1 = match$1[1];
                                      var match$2 = Transform$Wonderjs.createTransform(match$1[0]);
                                      var child2 = match$2[1];
                                      var pos1 = /* tuple */[
                                        1,
                                        2,
                                        3
                                      ];
                                      var pos2 = /* tuple */[
                                        10,
                                        20,
                                        30
                                      ];
                                      var state$1 = Transform$Wonderjs.setTransformParent(parent, child1, Transform$Wonderjs.setTransformLocalPosition(parent, pos1, match$2[0]));
                                      var state$2 = Transform$Wonderjs.setTransformParent(parent, child2, Transform$Wonderjs.setTransformLocalPosition(child2, pos2, state$1));
                                      var state$3 = Transform$Wonderjs.setTransformParent(null, child2, state$2);
                                      return _judgeOneToTwo(/* tuple */[
                                                  parent,
                                                  child1,
                                                  child2
                                                ], /* tuple */[
                                                  pos1,
                                                  pos1
                                                ], /* tuple */[
                                                  TransformTool$Wonderjs.getDefaultPosition(/* () */0),
                                                  pos1
                                                ], /* tuple */[
                                                  pos2,
                                                  pos2
                                                ], state$3);
                                    }));
                      }));
                describe("if child already has parent", (function () {
                        Wonder_jest.test("can set the same parent", (function () {
                                var match = Transform$Wonderjs.createTransform(state[0]);
                                var parent = match[1];
                                var match$1 = Transform$Wonderjs.createTransform(match[0]);
                                var child = match$1[1];
                                var state$1 = Transform$Wonderjs.setTransformParent(parent, child, Transform$Wonderjs.setTransformLocalPosition(parent, /* tuple */[
                                          1,
                                          2,
                                          3
                                        ], match$1[0]));
                                var state$2 = Transform$Wonderjs.setTransformParent(parent, child, state$1);
                                return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](Transform$Wonderjs.getTransformParent(child, state$2)), parent);
                              }));
                        return Wonder_jest.test("can set different parent", (function () {
                                      var match = Transform$Wonderjs.createTransform(state[0]);
                                      var parent1 = match[1];
                                      var match$1 = Transform$Wonderjs.createTransform(match[0]);
                                      var parent2 = match$1[1];
                                      var match$2 = Transform$Wonderjs.createTransform(match$1[0]);
                                      var child = match$2[1];
                                      var state$1 = Transform$Wonderjs.setTransformParent(parent1, child, Transform$Wonderjs.setTransformLocalPosition(parent1, /* tuple */[
                                                1,
                                                2,
                                                3
                                              ], match$2[0]));
                                      var state$2 = Transform$Wonderjs.setTransformParent(parent2, child, Transform$Wonderjs.setTransformLocalPosition(parent2, /* tuple */[
                                                300,
                                                20,
                                                30
                                              ], state$1));
                                      return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](Transform$Wonderjs.getTransformParent(child, state$2)), parent2);
                                    }));
                      }));
                describe("fix bug", (function () {
                        return Wonder_jest.test("test two(parent)-two(child)", (function () {
                                      var match = GameObjectTool$Wonderjs.createGameObject(state[0]);
                                      var transform1 = match[2];
                                      var match$1 = GameObjectTool$Wonderjs.createGameObject(match[0]);
                                      var transform2 = match$1[2];
                                      var match$2 = GameObjectTool$Wonderjs.createGameObject(match$1[0]);
                                      var transform3 = match$2[2];
                                      var match$3 = GameObjectTool$Wonderjs.createGameObject(match$2[0]);
                                      var transform4 = match$3[2];
                                      var state$1 = Transform$Wonderjs.setTransformParent(transform2, transform4, Transform$Wonderjs.setTransformParent(transform1, transform3, match$3[0]));
                                      var pos1 = /* tuple */[
                                        1,
                                        2,
                                        3
                                      ];
                                      var pos2 = /* tuple */[
                                        2,
                                        3,
                                        4
                                      ];
                                      var pos3 = /* tuple */[
                                        4,
                                        3,
                                        4
                                      ];
                                      var pos4 = /* tuple */[
                                        7,
                                        3,
                                        4
                                      ];
                                      TransformTool$Wonderjs.getTransformData(state$1);
                                      var state$2 = Transform$Wonderjs.setTransformLocalPosition(transform4, pos4, Transform$Wonderjs.setTransformLocalPosition(transform3, pos3, Transform$Wonderjs.setTransformLocalPosition(transform2, pos2, Transform$Wonderjs.setTransformLocalPosition(transform1, pos1, state$1))));
                                      return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](/* tuple */[
                                                      Transform$Wonderjs.getTransformPosition(transform1, state$2),
                                                      Transform$Wonderjs.getTransformPosition(transform2, state$2),
                                                      Transform$Wonderjs.getTransformPosition(transform3, state$2),
                                                      Transform$Wonderjs.getTransformPosition(transform4, state$2)
                                                    ]), /* tuple */[
                                                  pos1,
                                                  pos2,
                                                  Vector3System$Wonderjs.add(/* Float */0, pos3, pos1),
                                                  Vector3System$Wonderjs.add(/* Float */0, pos4, pos2)
                                                ]);
                                    }));
                      }));
                return /* () */0;
              }));
        describe("getTransformChildren", (function () {
                return Wonder_jest.test("get parent's all children", (function () {
                              var match = Transform$Wonderjs.createTransform(state[0]);
                              var parent = match[1];
                              var match$1 = Transform$Wonderjs.createTransform(match[0]);
                              var child1 = match$1[1];
                              var match$2 = Transform$Wonderjs.createTransform(match$1[0]);
                              var child2 = match$2[1];
                              var state$1 = Transform$Wonderjs.setTransformParent(parent, child1, match$2[0]);
                              var state$2 = Transform$Wonderjs.setTransformParent(parent, child2, state$1);
                              return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](Transform$Wonderjs.getTransformChildren(parent, state$2)), /* int array */[
                                          child1,
                                          child2
                                        ]);
                            }));
              }));
        describe("setTransformLocalPosition", (function () {
                var _prepare = function () {
                  var match = Transform$Wonderjs.createTransform(state[0]);
                  var parent = match[1];
                  var match$1 = Transform$Wonderjs.createTransform(match[0]);
                  var child = match$1[1];
                  var pos1 = /* tuple */[
                    1,
                    2,
                    3
                  ];
                  var pos2 = /* tuple */[
                    5,
                    10,
                    30
                  ];
                  var state$1 = Transform$Wonderjs.setTransformParent(parent, child, match$1[0]);
                  var state$2 = Transform$Wonderjs.setTransformLocalPosition(child, pos2, Transform$Wonderjs.setTransformLocalPosition(parent, pos1, state$1));
                  return /* tuple */[
                          state$2,
                          parent,
                          child,
                          pos1,
                          pos2
                        ];
                };
                Wonder_jest.test("change parent's localPosition should affect children", (function () {
                        var match = _prepare(/* () */0);
                        var pos2 = match[4];
                        var parent = match[1];
                        var state = Transform$Wonderjs.setTransformLocalPosition(parent, pos2, match[0]);
                        return _judgeOneToOne(/* tuple */[
                                    parent,
                                    match[2]
                                  ], /* tuple */[
                                    pos2,
                                    pos2
                                  ], /* tuple */[
                                    pos2,
                                    Vector3System$Wonderjs.add(/* Float */0, pos2, pos2)
                                  ], state);
                      }));
                return Wonder_jest.test("change child's localPosition shouldn't affect parent", (function () {
                              var match = _prepare(/* () */0);
                              var pos1 = match[3];
                              var child = match[2];
                              var state = Transform$Wonderjs.setTransformLocalPosition(child, pos1, match[0]);
                              return _judgeOneToOne(/* tuple */[
                                          match[1],
                                          child
                                        ], /* tuple */[
                                          pos1,
                                          pos1
                                        ], /* tuple */[
                                          pos1,
                                          Vector3System$Wonderjs.add(/* Float */0, pos1, pos1)
                                        ], state);
                            }));
              }));
        describe("setTransformLocalPositionByTypeArray", (function () {
                var _prepare = function () {
                  var match = Transform$Wonderjs.createTransform(state[0]);
                  var parent = match[1];
                  var match$1 = Transform$Wonderjs.createTransform(match[0]);
                  var child = match$1[1];
                  var pos1 = new Float32Array(/* float array */[
                        1,
                        2,
                        3
                      ]);
                  var pos2 = new Float32Array(/* float array */[
                        5,
                        10,
                        30
                      ]);
                  var state$1 = Transform$Wonderjs.setTransformParent(parent, child, match$1[0]);
                  var state$2 = TransformTool$Wonderjs.setTransformLocalPositionByTypeArray(child, pos2, TransformTool$Wonderjs.setTransformLocalPositionByTypeArray(parent, pos1, state$1));
                  return /* tuple */[
                          state$2,
                          parent,
                          child,
                          pos1,
                          /* tuple */[
                            1,
                            2,
                            3
                          ],
                          pos2,
                          /* tuple */[
                            5,
                            10,
                            30
                          ]
                        ];
                };
                return Wonder_jest.test("change parent's localPosition should affect children", (function () {
                              var match = _prepare(/* () */0);
                              var pos2Tuple = match[6];
                              var pos2 = match[5];
                              var child = match[2];
                              var parent = match[1];
                              var state = TransformTool$Wonderjs.setTransformLocalPositionByTypeArray(parent, pos2, match[0]);
                              return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](/* tuple */[
                                              TransformTool$Wonderjs.getTransformLocalPositionTypeArray(parent, state),
                                              TransformTool$Wonderjs.getTransformPositionTypeArray(parent, state),
                                              TransformTool$Wonderjs.getTransformLocalPositionTypeArray(child, state),
                                              TransformTool$Wonderjs.getTransformPositionTypeArray(child, state)
                                            ]), /* tuple */[
                                          pos2,
                                          pos2,
                                          pos2,
                                          TransformTool$Wonderjs.changeTupleToTypeArray(Vector3System$Wonderjs.add(/* Float */0, pos2Tuple, pos2Tuple))
                                        ]);
                            }));
              }));
        describe("getTransformPosition", (function () {
                Wonder_jest.test("default value should be (0.,0.,0.)", (function () {
                        var match = Transform$Wonderjs.createTransform(state[0]);
                        return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](Transform$Wonderjs.getTransformPosition(match[1], match[0])), TransformTool$Wonderjs.getDefaultPosition(/* () */0));
                      }));
                return Wonder_jest.test("can get the newest position", (function () {
                              var match = Transform$Wonderjs.createTransform(state[0]);
                              var parent = match[1];
                              var match$1 = Transform$Wonderjs.createTransform(match[0]);
                              var child = match$1[1];
                              var pos = /* tuple */[
                                1,
                                2,
                                3
                              ];
                              var state$1 = Transform$Wonderjs.setTransformParent(parent, child, Transform$Wonderjs.setTransformLocalPosition(parent, pos, match$1[0]));
                              return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](Transform$Wonderjs.getTransformPosition(child, state$1)), pos);
                            }));
              }));
        describe("setTransformPosition", (function () {
                describe("set position in world coordinate system", (function () {
                        Wonder_jest.test("change parent's position should affect children", (function () {
                                var match = Transform$Wonderjs.createTransform(state[0]);
                                var parent = match[1];
                                var match$1 = Transform$Wonderjs.createTransform(match[0]);
                                var child = match$1[1];
                                var pos2 = /* tuple */[
                                  5,
                                  10,
                                  30
                                ];
                                var state$1 = Transform$Wonderjs.setTransformParent(parent, child, match$1[0]);
                                var state$2 = Transform$Wonderjs.setTransformLocalPosition(parent, /* tuple */[
                                      1,
                                      2,
                                      3
                                    ], state$1);
                                var state$3 = Transform$Wonderjs.setTransformLocalPosition(child, pos2, state$2);
                                var state$4 = Transform$Wonderjs.setTransformPosition(parent, pos2, state$3);
                                return _judgeOneToOne(/* tuple */[
                                            parent,
                                            child
                                          ], /* tuple */[
                                            pos2,
                                            pos2
                                          ], /* tuple */[
                                            pos2,
                                            Vector3System$Wonderjs.add(/* Float */0, pos2, pos2)
                                          ], state$4);
                              }));
                        return Wonder_jest.test("change child's position shouldn't affect parent", (function () {
                                      var match = Transform$Wonderjs.createTransform(state[0]);
                                      var parent = match[1];
                                      var match$1 = Transform$Wonderjs.createTransform(match[0]);
                                      var child = match$1[1];
                                      var pos1 = /* tuple */[
                                        1,
                                        2,
                                        3
                                      ];
                                      var pos3 = /* tuple */[
                                        2,
                                        3,
                                        4
                                      ];
                                      var state$1 = Transform$Wonderjs.setTransformParent(parent, child, match$1[0]);
                                      var state$2 = Transform$Wonderjs.setTransformLocalPosition(parent, pos1, state$1);
                                      var state$3 = Transform$Wonderjs.setTransformLocalPosition(child, /* tuple */[
                                            5,
                                            10,
                                            30
                                          ], state$2);
                                      var state$4 = Transform$Wonderjs.setTransformPosition(child, pos3, state$3);
                                      return _judgeOneToOne(/* tuple */[
                                                  parent,
                                                  child
                                                ], /* tuple */[
                                                  pos1,
                                                  pos1
                                                ], /* tuple */[
                                                  /* tuple */[
                                                    1,
                                                    1,
                                                    1
                                                  ],
                                                  pos3
                                                ], state$4);
                                    }));
                      }));
                return /* () */0;
              }));
        describe("setTransformPositionByTypeArray", (function () {
                describe("set position in world coordinate system", (function () {
                        return Wonder_jest.test("change parent's position should affect children", (function () {
                                      var match = Transform$Wonderjs.createTransform(state[0]);
                                      var parent = match[1];
                                      var match$1 = Transform$Wonderjs.createTransform(match[0]);
                                      var child = match$1[1];
                                      var pos1 = new Float32Array(/* float array */[
                                            1,
                                            2,
                                            3
                                          ]);
                                      var pos2 = new Float32Array(/* float array */[
                                            5,
                                            4,
                                            30
                                          ]);
                                      var state$1 = Transform$Wonderjs.setTransformParent(parent, child, match$1[0]);
                                      var state$2 = TransformTool$Wonderjs.setTransformLocalPositionByTypeArray(parent, pos1, state$1);
                                      var state$3 = TransformTool$Wonderjs.setTransformLocalPositionByTypeArray(child, pos2, state$2);
                                      var state$4 = TransformTool$Wonderjs.setTransformLocalPositionByTypeArray(parent, pos2, state$3);
                                      return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](/* tuple */[
                                                      TransformTool$Wonderjs.getTransformPositionTypeArray(parent, state$4),
                                                      TransformTool$Wonderjs.getTransformPositionTypeArray(child, state$4)
                                                    ]), /* tuple */[
                                                  pos2,
                                                  TransformTool$Wonderjs.changeTupleToTypeArray(Vector3System$Wonderjs.add(/* Float */0, /* tuple */[
                                                            5,
                                                            4,
                                                            30
                                                          ], /* tuple */[
                                                            5,
                                                            4,
                                                            30
                                                          ]))
                                                ]);
                                    }));
                      }));
                return /* () */0;
              }));
        describe("getTransformGameObject", (function () {
                return Wonder_jest.test("get transform's gameObject", (function () {
                              var match = GameObject$Wonderjs.createGameObject(state[0]);
                              var gameObject = match[1];
                              var state$1 = match[0];
                              var transform = GameObject$Wonderjs.getGameObjectTransformComponent(gameObject, state$1);
                              return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](Transform$Wonderjs.getTransformGameObject(transform, state$1)), gameObject);
                            }));
              }));
        describe("dispose component", (function () {
                var _prepare = function () {
                  var match = Transform$Wonderjs.createTransform(state[0]);
                  var transform1 = match[1];
                  var match$1 = Transform$Wonderjs.createTransform(match[0]);
                  var transform2 = match$1[1];
                  var state$1 = Transform$Wonderjs.setTransformParent(transform1, transform2, match$1[0]);
                  return /* tuple */[
                          state$1,
                          transform1,
                          transform2
                        ];
                };
                describe("test if dirty", (function () {
                        return Wonder_jest.test("the disposed transform shouldn't affect other alive ones' data", (function () {
                                      var match = Transform$Wonderjs.createTransform(state[0]);
                                      var transform1 = match[1];
                                      var match$1 = Transform$Wonderjs.createTransform(match[0]);
                                      var transform2 = match$1[1];
                                      var pos2 = /* tuple */[
                                        5,
                                        10,
                                        30
                                      ];
                                      var state$1 = Transform$Wonderjs.setTransformLocalPosition(transform2, pos2, Transform$Wonderjs.setTransformLocalPosition(transform1, /* tuple */[
                                                1,
                                                2,
                                                3
                                              ], match$1[0]));
                                      var state$2 = TransformTool$Wonderjs.dispose(transform1, state$1);
                                      return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](Transform$Wonderjs.getTransformLocalPosition(transform2, state$2)), pos2);
                                    }));
                      }));
                describe("test if not dirty", (function () {
                        return Wonder_jest.test("the disposed transform shouldn't affect other alive ones' data", (function () {
                                      var match = Transform$Wonderjs.createTransform(state[0]);
                                      var transform1 = match[1];
                                      var match$1 = Transform$Wonderjs.createTransform(match[0]);
                                      var transform2 = match$1[1];
                                      var pos2 = /* tuple */[
                                        5,
                                        10,
                                        30
                                      ];
                                      var state$1 = Transform$Wonderjs.setTransformLocalPosition(transform2, pos2, Transform$Wonderjs.setTransformLocalPosition(transform1, /* tuple */[
                                                1,
                                                2,
                                                3
                                              ], match$1[0]));
                                      var state$2 = TransformTool$Wonderjs.dispose(transform1, state$1);
                                      return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](Transform$Wonderjs.getTransformLocalPosition(transform2, state$2)), pos2);
                                    }));
                      }));
                describe("if child is disposed", (function () {
                        Wonder_jest.test("should remove it from childMap", (function () {
                                var match = Transform$Wonderjs.createTransform(state[0]);
                                var transform1 = match[1];
                                var match$1 = Transform$Wonderjs.createTransform(match[0]);
                                var transform2 = match$1[1];
                                var state$1 = Transform$Wonderjs.setTransformParent(transform1, transform2, match$1[0]);
                                var state$2 = TransformTool$Wonderjs.dispose(transform2, state$1);
                                return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](Transform$Wonderjs.getTransformChildren(transform1, state$2)), /* int array */[]);
                              }));
                        describe("shouldn't affect parent", (function () {
                                Wonder_jest.test("test disposed one has no parent", (function () {
                                        var match = _prepare(/* () */0);
                                        var transform2 = match[2];
                                        var transform1 = match[1];
                                        var pos2 = /* tuple */[
                                          5,
                                          10,
                                          30
                                        ];
                                        var state = Transform$Wonderjs.setTransformLocalPosition(transform2, pos2, Transform$Wonderjs.setTransformLocalPosition(transform1, /* tuple */[
                                                  1,
                                                  2,
                                                  3
                                                ], match[0]));
                                        var state$1 = TransformTool$Wonderjs.dispose(transform1, state);
                                        return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](Transform$Wonderjs.getTransformPosition(transform2, state$1)), pos2);
                                      }));
                                return Wonder_jest.test("test disposed one has parent", (function () {
                                              var match = _prepare(/* () */0);
                                              var transform2 = match[2];
                                              var transform1 = match[1];
                                              var match$1 = Transform$Wonderjs.createTransform(match[0]);
                                              var transform0 = match$1[1];
                                              var state = Transform$Wonderjs.setTransformParent(transform0, transform1, match$1[0]);
                                              var pos0 = /* tuple */[
                                                2,
                                                4,
                                                6
                                              ];
                                              var pos1 = /* tuple */[
                                                1,
                                                2,
                                                3
                                              ];
                                              var state$1 = Transform$Wonderjs.setTransformLocalPosition(transform2, /* tuple */[
                                                    5,
                                                    10,
                                                    30
                                                  ], Transform$Wonderjs.setTransformLocalPosition(transform1, pos1, Transform$Wonderjs.setTransformLocalPosition(transform0, pos0, state)));
                                              var state$2 = TransformTool$Wonderjs.dispose(transform2, state$1);
                                              return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](/* tuple */[
                                                              Transform$Wonderjs.getTransformPosition(transform0, state$2),
                                                              Transform$Wonderjs.getTransformPosition(transform1, state$2)
                                                            ]), /* tuple */[
                                                          pos0,
                                                          Vector3System$Wonderjs.add(/* Float */0, pos0, pos1)
                                                        ]);
                                            }));
                              }));
                        return /* () */0;
                      }));
                describe("if parent is disposed", (function () {
                        Wonder_jest.test("should remove it from parentMap", (function () {
                                var match = _prepare(/* () */0);
                                var state = TransformTool$Wonderjs.dispose(match[1], match[0]);
                                return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](Transform$Wonderjs.getTransformParent(match[2], state)), undefined);
                              }));
                        return Wonder_jest.test("should affect children", (function () {
                                      var match = _prepare(/* () */0);
                                      var transform2 = match[2];
                                      var transform1 = match[1];
                                      var match$1 = Transform$Wonderjs.createTransform(match[0]);
                                      var transform0 = match$1[1];
                                      var state = Transform$Wonderjs.setTransformParent(transform0, transform1, match$1[0]);
                                      var pos1 = /* tuple */[
                                        1,
                                        2,
                                        3
                                      ];
                                      var pos2 = /* tuple */[
                                        5,
                                        10,
                                        30
                                      ];
                                      var state$1 = Transform$Wonderjs.setTransformLocalPosition(transform2, pos2, Transform$Wonderjs.setTransformLocalPosition(transform1, pos1, Transform$Wonderjs.setTransformLocalPosition(transform0, /* tuple */[
                                                    2,
                                                    4,
                                                    6
                                                  ], state)));
                                      var state$2 = TransformTool$Wonderjs.dispose(transform0, state$1);
                                      return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](/* tuple */[
                                                      Transform$Wonderjs.getTransformPosition(transform1, state$2),
                                                      Transform$Wonderjs.getTransformPosition(transform2, state$2)
                                                    ]), /* tuple */[
                                                  pos1,
                                                  Vector3System$Wonderjs.add(/* Float */0, pos1, pos2)
                                                ]);
                                    }));
                      }));
                describe("dispose map data", (function () {
                        return Wonder_jest.test("remove from localToWorldMatrixMap, localPositionMap,parentMap, childMap,  dirtyMap, gameObjectMap", (function () {
                                      var match = GameObjectTool$Wonderjs.createGameObject(state[0]);
                                      var transform1 = match[2];
                                      var state$1 = GameObject$Wonderjs.disposeGameObjectTransformComponent(match[1], transform1, match[0]);
                                      var match$1 = TransformTool$Wonderjs.getTransformData(state$1);
                                      return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](/* tuple */[
                                                      SparseMapSystem$WonderCommonlib.has(transform1, match$1[/* localToWorldMatrixMap */4]),
                                                      SparseMapSystem$WonderCommonlib.has(transform1, match$1[/* localPositionMap */5]),
                                                      SparseMapSystem$WonderCommonlib.has(transform1, match$1[/* parentMap */1]),
                                                      SparseMapSystem$WonderCommonlib.has(transform1, match$1[/* childMap */2]),
                                                      SparseMapSystem$WonderCommonlib.has(transform1, match$1[/* dirtyMap */6]),
                                                      SparseMapSystem$WonderCommonlib.has(transform1, match$1[/* gameObjectMap */3])
                                                    ]), /* tuple */[
                                                  /* false */0,
                                                  /* false */0,
                                                  /* false */0,
                                                  /* false */0,
                                                  /* false */0,
                                                  /* false */0
                                                ]);
                                    }));
                      }));
                describe("test add new one after dispose old one", (function () {
                        describe("if has disposed one", (function () {
                                Wonder_jest.test("use disposed index(transform) as new index", (function () {
                                        var match = _prepare(/* () */0);
                                        var transform2 = match[2];
                                        var transform1 = match[1];
                                        var state = TransformTool$Wonderjs.dispose(transform1, match[0]);
                                        var state$1 = TransformTool$Wonderjs.dispose(transform2, state);
                                        var match$1 = Transform$Wonderjs.createTransform(state$1);
                                        var match$2 = Transform$Wonderjs.createTransform(match$1[0]);
                                        return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](/* tuple */[
                                                        match$1[1],
                                                        match$2[1]
                                                      ]), /* tuple */[
                                                    transform2,
                                                    transform1
                                                  ]);
                                      }));
                                return Wonder_jest.test("new one can get default localPosition", (function () {
                                              var match = _prepare(/* () */0);
                                              var state = TransformTool$Wonderjs.dispose(match[1], match[0]);
                                              var match$1 = Transform$Wonderjs.createTransform(state);
                                              return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](Transform$Wonderjs.getTransformLocalPosition(match$1[1], match$1[0])), TransformTool$Wonderjs.getDefaultPosition(/* () */0));
                                            }));
                              }));
                        Wonder_jest.test("else, increase transformData.index", (function () {
                                var match = _prepare(/* () */0);
                                var match$1 = Transform$Wonderjs.createTransform(match[0]);
                                return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](match$1[1]), match[2] + 1 | 0);
                              }));
                        describe("fix bug", (function () {
                                return Wonder_jest.test("new one should has default transform data", (function () {
                                              var match = _prepare(/* () */0);
                                              var transform1 = match[1];
                                              var state = Transform$Wonderjs.setTransformLocalPosition(transform1, /* tuple */[
                                                    0,
                                                    1,
                                                    2
                                                  ], match[0]);
                                              Transform$Wonderjs.getTransformPosition(transform1, state);
                                              var state$1 = TransformTool$Wonderjs.dispose(transform1, state);
                                              var match$1 = Transform$Wonderjs.createTransform(state$1);
                                              var transform3 = match$1[1];
                                              var state$2 = match$1[0];
                                              return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](/* tuple */[
                                                              Transform$Wonderjs.getTransformLocalPosition(transform3, state$2),
                                                              Transform$Wonderjs.getTransformPosition(transform3, state$2)
                                                            ]), /* tuple */[
                                                          TransformTool$Wonderjs.getDefaultPosition(/* () */0),
                                                          TransformTool$Wonderjs.getDefaultPosition(/* () */0)
                                                        ]);
                                            }));
                              }));
                        return /* () */0;
                      }));
                describe("contract check", (function () {
                        return Wonder_jest.test("shouldn't dispose the component which isn't alive", (function () {
                                      var match = GameObjectTool$Wonderjs.createGameObject(state[0]);
                                      var transform1 = match[2];
                                      var gameObject1 = match[1];
                                      var state$1 = GameObject$Wonderjs.disposeGameObjectTransformComponent(gameObject1, transform1, match[0]);
                                      return Wonder_jest.Expect[/* toThrowMessage */20]("shouldn't dispose the component which isn't alive", Wonder_jest.Expect[/* expect */0]((function () {
                                                        GameObject$Wonderjs.disposeGameObjectTransformComponent(gameObject1, transform1, state$1);
                                                        return /* () */0;
                                                      })));
                                    }));
                      }));
                return /* () */0;
              }));
        describe("contract check: is alive", (function () {
                describe("if transform is disposed", (function () {
                        var _testGetFunc = function (getFunc) {
                          var match = Transform$Wonderjs.createTransform(state[0]);
                          var transform1 = match[1];
                          var state$1 = TransformTool$Wonderjs.dispose(transform1, match[0]);
                          return Wonder_jest.Expect[/* toThrowMessage */20]("component should alive", Wonder_jest.Expect[/* expect */0]((function () {
                                            return Curry._2(getFunc, transform1, state$1);
                                          })));
                        };
                        var _testSetFunc = function (setFunc) {
                          var match = Transform$Wonderjs.createTransform(state[0]);
                          var transform1 = match[1];
                          var state$1 = TransformTool$Wonderjs.dispose(transform1, match[0]);
                          return Wonder_jest.Expect[/* toThrowMessage */20]("component should alive", Wonder_jest.Expect[/* expect */0]((function () {
                                            return Curry._3(setFunc, transform1, 1, state$1);
                                          })));
                        };
                        Wonder_jest.test("getTransformPosition should error", (function () {
                                return _testGetFunc(Transform$Wonderjs.getTransformPosition);
                              }));
                        Wonder_jest.test("getTransformLocalPosition should error", (function () {
                                return _testGetFunc(Transform$Wonderjs.getTransformLocalPosition);
                              }));
                        Wonder_jest.test("getTransformParent should error", (function () {
                                return _testGetFunc(Transform$Wonderjs.getTransformParent);
                              }));
                        Wonder_jest.test("getTransformChildren should error", (function () {
                                return _testGetFunc(Transform$Wonderjs.getTransformChildren);
                              }));
                        Wonder_jest.test("getTransformGameObject should error", (function () {
                                return _testGetFunc(Transform$Wonderjs.getTransformGameObject);
                              }));
                        Wonder_jest.test("setTransformPosition should error", (function () {
                                return _testSetFunc(Transform$Wonderjs.setTransformPosition);
                              }));
                        Wonder_jest.test("setTransformLocalPosition should error", (function () {
                                return _testSetFunc(Transform$Wonderjs.setTransformLocalPosition);
                              }));
                        return Wonder_jest.test("setTransformParent should error", (function () {
                                      return _testSetFunc(Transform$Wonderjs.setTransformParent);
                                    }));
                      }));
                return /* () */0;
              }));
        describe("fix bug", (function () {
                Wonder_jest.test("the second transform's default localToWorldMatrix should be identity matrix4 when create two transforms", (function () {
                        var match = Transform$Wonderjs.createTransform(state[0]);
                        var match$1 = Transform$Wonderjs.createTransform(match[0]);
                        return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](TransformTool$Wonderjs.getLocalToWorldMatrixTypeArray(match$1[1], match$1[0])), TransformTool$Wonderjs.getDefaultLocalToWorldMatrix(/* () */0));
                      }));
                return Wonder_jest.test("get the data from Float32Array may not equal to the value which is setted", (function () {
                              var match = Transform$Wonderjs.createTransform(state[0]);
                              var transform0 = match[1];
                              var state$1 = Transform$Wonderjs.setTransformLocalPosition(transform0, /* tuple */[
                                    0.1,
                                    0,
                                    0
                                  ], match[0]);
                              return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](Transform$Wonderjs.getTransformLocalPosition(transform0, state$1)), /* tuple */[
                                          0.10000000149011612,
                                          0,
                                          0
                                        ]);
                            }));
              }));
        return /* () */0;
      }));

export {
  
}
/*  Not a pure module */
