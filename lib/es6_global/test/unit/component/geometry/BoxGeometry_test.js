// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as Curry                    from "../../../../../../node_modules/bs-platform/lib/es6/curry.js";
import * as Sinon                    from "../../../../../../node_modules/wonder-bs-sinon/lib/es6_global/src/sinon.js";
import * as Sinon$1                  from "sinon";
import * as Js_dict                  from "../../../../../../node_modules/bs-platform/lib/es6/js_dict.js";
import * as Wonder_jest              from "../../../../../../node_modules/wonder-bs-jest/lib/es6_global/src/wonder_jest.js";
import * as Geometry$Wonderjs        from "../../../../src/ecs/component/api/geometry/Geometry.js";
import * as TestTool$Wonderjs        from "../../tool/TestTool.js";
import * as StateTool$Wonderjs       from "../../tool/core/StateTool.js";
import * as GameObject$Wonderjs      from "../../../../src/ecs/admin/api/GameObject.js";
import * as BoxGeometry$Wonderjs     from "../../../../src/ecs/component/api/geometry/BoxGeometry.js";
import * as GeometryTool$Wonderjs    from "../../tool/component/geometry/GeometryTool.js";
import * as BoxGeometryTool$Wonderjs from "../../tool/component/geometry/BoxGeometryTool.js";

describe("BoxGeometry", (function () {
        var sandbox = Sinon.getSandboxDefaultVal(/* () */0);
        var state = [StateTool$Wonderjs.createState(/* None */0, /* () */0)];
        beforeEach((function () {
                sandbox[0] = Sinon$1.sandbox.create();
                state[0] = TestTool$Wonderjs.init(sandbox, /* None */0, /* None */0, /* () */0);
                return /* () */0;
              }));
        afterEach((function () {
                return Curry._1(Sinon.restoreSandbox, sandbox[0]);
              }));
        describe("createBoxGeometry", (function () {
                return Wonder_jest.test("create a new geometry which is just index(int)", (function () {
                              var match = BoxGeometry$Wonderjs.createBoxGeometry(state[0]);
                              return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](match[1]), 0);
                            }));
              }));
        describe("setConfigData", (function () {
                Wonder_jest.test("test set config data", (function () {
                        var match = BoxGeometry$Wonderjs.createBoxGeometry(state[0]);
                        var geometry = match[1];
                        var state$1 = BoxGeometry$Wonderjs.setBoxGeometryConfigData(geometry, GeometryTool$Wonderjs.buildBoxGeometryConfigDataJsObj(/* Some */[10], /* Some */[20], /* Some */[30], /* Some */[2], /* Some */[3], /* Some */[4], /* () */0), match[0]);
                        return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](Geometry$Wonderjs.getGeometryConfigData(geometry, state$1)), Js_dict.fromList(/* :: */[
                                        /* tuple */[
                                          "width",
                                          10
                                        ],
                                        /* :: */[
                                          /* tuple */[
                                            "height",
                                            20
                                          ],
                                          /* :: */[
                                            /* tuple */[
                                              "depth",
                                              30
                                            ],
                                            /* :: */[
                                              /* tuple */[
                                                "widthSegment",
                                                2
                                              ],
                                              /* :: */[
                                                /* tuple */[
                                                  "heightSegment",
                                                  3
                                                ],
                                                /* :: */[
                                                  /* tuple */[
                                                    "depthSegment",
                                                    4
                                                  ],
                                                  /* [] */0
                                                ]
                                              ]
                                            ]
                                          ]
                                        ]
                                      ]));
                      }));
                return Wonder_jest.test("if not pass full data, use default data", (function () {
                              var match = BoxGeometry$Wonderjs.createBoxGeometry(state[0]);
                              var geometry = match[1];
                              var state$1 = BoxGeometry$Wonderjs.setBoxGeometryConfigData(geometry, GeometryTool$Wonderjs.buildBoxGeometryConfigDataJsObj(/* None */0, /* Some */[20], /* None */0, /* None */0, /* None */0, /* None */0, /* () */0), match[0]);
                              return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](Geometry$Wonderjs.getGeometryConfigData(geometry, state$1)), Js_dict.fromList(/* :: */[
                                              /* tuple */[
                                                "width",
                                                10
                                              ],
                                              /* :: */[
                                                /* tuple */[
                                                  "height",
                                                  20
                                                ],
                                                /* :: */[
                                                  /* tuple */[
                                                    "depth",
                                                    10
                                                  ],
                                                  /* :: */[
                                                    /* tuple */[
                                                      "widthSegment",
                                                      1
                                                    ],
                                                    /* :: */[
                                                      /* tuple */[
                                                        "heightSegment",
                                                        1
                                                      ],
                                                      /* :: */[
                                                        /* tuple */[
                                                          "depthSegment",
                                                          1
                                                        ],
                                                        /* [] */0
                                                      ]
                                                    ]
                                                  ]
                                                ]
                                              ]
                                            ]));
                            }));
              }));
        describe("test compute data", (function () {
                return Wonder_jest.test("test with 2 segments", (function () {
                              var match = BoxGeometry$Wonderjs.createBoxGeometry(state[0]);
                              var geometry = match[1];
                              var state$1 = BoxGeometry$Wonderjs.setBoxGeometryConfigData(geometry, GeometryTool$Wonderjs.buildBoxGeometryConfigDataJsObj(/* Some */[10], /* Some */[20], /* Some */[30], /* Some */[2], /* Some */[2], /* Some */[2], /* () */0), match[0]);
                              var match$1 = BoxGeometryTool$Wonderjs.computeData(geometry, state$1);
                              return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](/* tuple */[
                                              match$1[/* vertices */0],
                                              match$1[/* indices */1]
                                            ]), /* tuple */[
                                          /* float array */[
                                            -10,
                                            -20,
                                            30,
                                            -10,
                                            0,
                                            30,
                                            -10,
                                            20,
                                            30,
                                            0,
                                            -20,
                                            30,
                                            0,
                                            0,
                                            30,
                                            0,
                                            20,
                                            30,
                                            10,
                                            -20,
                                            30,
                                            10,
                                            0,
                                            30,
                                            10,
                                            20,
                                            30,
                                            10,
                                            -20,
                                            -30,
                                            10,
                                            0,
                                            -30,
                                            10,
                                            20,
                                            -30,
                                            0,
                                            -20,
                                            -30,
                                            0,
                                            0,
                                            -30,
                                            0,
                                            20,
                                            -30,
                                            -10,
                                            -20,
                                            -30,
                                            -10,
                                            0,
                                            -30,
                                            -10,
                                            20,
                                            -30,
                                            -10,
                                            20,
                                            30,
                                            -10,
                                            20,
                                            0,
                                            -10,
                                            20,
                                            -30,
                                            0,
                                            20,
                                            30,
                                            0,
                                            20,
                                            0,
                                            0,
                                            20,
                                            -30,
                                            10,
                                            20,
                                            30,
                                            10,
                                            20,
                                            0,
                                            10,
                                            20,
                                            -30,
                                            10,
                                            -20,
                                            30,
                                            10,
                                            -20,
                                            0,
                                            10,
                                            -20,
                                            -30,
                                            0,
                                            -20,
                                            30,
                                            0,
                                            -20,
                                            0,
                                            0,
                                            -20,
                                            -30,
                                            -10,
                                            -20,
                                            30,
                                            -10,
                                            -20,
                                            0,
                                            -10,
                                            -20,
                                            -30,
                                            10,
                                            -20,
                                            30,
                                            10,
                                            0,
                                            30,
                                            10,
                                            20,
                                            30,
                                            10,
                                            -20,
                                            0,
                                            10,
                                            0,
                                            0,
                                            10,
                                            20,
                                            0,
                                            10,
                                            -20,
                                            -30,
                                            10,
                                            0,
                                            -30,
                                            10,
                                            20,
                                            -30,
                                            -10,
                                            -20,
                                            -30,
                                            -10,
                                            0,
                                            -30,
                                            -10,
                                            20,
                                            -30,
                                            -10,
                                            -20,
                                            0,
                                            -10,
                                            0,
                                            0,
                                            -10,
                                            20,
                                            0,
                                            -10,
                                            -20,
                                            30,
                                            -10,
                                            0,
                                            30,
                                            -10,
                                            20,
                                            30
                                          ],
                                          /* array */[
                                            0,
                                            3,
                                            1,
                                            3,
                                            4,
                                            1,
                                            1,
                                            4,
                                            2,
                                            4,
                                            5,
                                            2,
                                            3,
                                            6,
                                            4,
                                            6,
                                            7,
                                            4,
                                            4,
                                            7,
                                            5,
                                            7,
                                            8,
                                            5,
                                            9,
                                            12,
                                            10,
                                            12,
                                            13,
                                            10,
                                            10,
                                            13,
                                            11,
                                            13,
                                            14,
                                            11,
                                            12,
                                            15,
                                            13,
                                            15,
                                            16,
                                            13,
                                            13,
                                            16,
                                            14,
                                            16,
                                            17,
                                            14,
                                            18,
                                            21,
                                            19,
                                            21,
                                            22,
                                            19,
                                            19,
                                            22,
                                            20,
                                            22,
                                            23,
                                            20,
                                            21,
                                            24,
                                            22,
                                            24,
                                            25,
                                            22,
                                            22,
                                            25,
                                            23,
                                            25,
                                            26,
                                            23,
                                            27,
                                            30,
                                            28,
                                            30,
                                            31,
                                            28,
                                            28,
                                            31,
                                            29,
                                            31,
                                            32,
                                            29,
                                            30,
                                            33,
                                            31,
                                            33,
                                            34,
                                            31,
                                            31,
                                            34,
                                            32,
                                            34,
                                            35,
                                            32,
                                            36,
                                            39,
                                            37,
                                            39,
                                            40,
                                            37,
                                            37,
                                            40,
                                            38,
                                            40,
                                            41,
                                            38,
                                            39,
                                            42,
                                            40,
                                            42,
                                            43,
                                            40,
                                            40,
                                            43,
                                            41,
                                            43,
                                            44,
                                            41,
                                            45,
                                            48,
                                            46,
                                            48,
                                            49,
                                            46,
                                            46,
                                            49,
                                            47,
                                            49,
                                            50,
                                            47,
                                            48,
                                            51,
                                            49,
                                            51,
                                            52,
                                            49,
                                            49,
                                            52,
                                            50,
                                            52,
                                            53,
                                            50
                                          ]
                                        ]);
                            }));
              }));
        describe("contract check: is alive", (function () {
                describe("if geometry is disposed", (function () {
                        return Wonder_jest.test("setBoxGeometryConfigData should error", (function () {
                                      var setFunc = BoxGeometry$Wonderjs.setBoxGeometryConfigData;
                                      var match = BoxGeometryTool$Wonderjs.createGameObject(state[0]);
                                      var geometry = match[2];
                                      var state$1 = GeometryTool$Wonderjs.initGeometrys(match[0]);
                                      TestTool$Wonderjs.closeContractCheck(/* () */0);
                                      var state$2 = GameObject$Wonderjs.disposeGameObjectGeometryComponent(match[1], geometry, state$1);
                                      TestTool$Wonderjs.openContractCheck(/* () */0);
                                      return Wonder_jest.Expect[/* toThrowMessage */20]("component should alive", Wonder_jest.Expect[/* expect */0]((function () {
                                                        return Curry._3(setFunc, geometry, 0, state$2);
                                                      })));
                                    }));
                      }));
                return /* () */0;
              }));
        return /* () */0;
      }));

export {
  
}
/*  Not a pure module */
