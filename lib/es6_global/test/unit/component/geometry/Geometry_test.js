// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as Curry                           from "../../../../../../node_modules/bs-platform/lib/es6/curry.js";
import * as Sinon                           from "../../../../../../node_modules/wonder-bs-sinon/lib/es6_global/src/sinon.js";
import * as Sinon$1                         from "sinon";
import * as Wonder_jest                     from "../../../../../../node_modules/wonder-bs-jest/lib/es6_global/src/wonder_jest.js";
import * as Geometry$Wonderjs               from "../../../../src/ecs/component/api/geometry/Geometry.js";
import * as TestTool$Wonderjs               from "../../tool/TestTool.js";
import * as StateTool$Wonderjs              from "../../tool/core/StateTool.js";
import * as FakeGlTool$Wonderjs             from "../../tool/gl/FakeGlTool.js";
import * as GameObject$Wonderjs             from "../../../../src/ecs/admin/api/GameObject.js";
import * as BoxGeometry$Wonderjs            from "../../../../src/ecs/component/api/geometry/BoxGeometry.js";
import * as GeometryTool$Wonderjs           from "../../tool/component/geometry/GeometryTool.js";
import * as VboBufferTool$Wonderjs          from "../../tool/render/buffer/VboBufferTool.js";
import * as BoxGeometryTool$Wonderjs        from "../../tool/component/geometry/BoxGeometryTool.js";
import * as SparseMapSystem$WonderCommonlib from "../../../../../../node_modules/wonder-commonlib/lib/es6_global/src/SparseMapSystem.js";

describe("Geometry", (function () {
        var sandbox = Sinon.getSandboxDefaultVal(/* () */0);
        var state = [StateTool$Wonderjs.createState(/* None */0, /* () */0)];
        beforeEach((function () {
                sandbox[0] = Sinon$1.sandbox.create();
                state[0] = TestTool$Wonderjs.init(sandbox, /* None */0, /* Some */[GeometryTool$Wonderjs.buildBufferConfig(1000)], /* () */0);
                return /* () */0;
              }));
        afterEach((function () {
                return Curry._1(Sinon.restoreSandbox, sandbox[0]);
              }));
        describe("init", (function () {
                describe("init all geometrys", (function () {
                        var _prepare = function () {
                          var match = BoxGeometry$Wonderjs.createBoxGeometry(state[0]);
                          var geometry1 = match[1];
                          var match$1 = BoxGeometry$Wonderjs.createBoxGeometry(match[0]);
                          var geometry2 = match$1[1];
                          var state$1 = BoxGeometryTool$Wonderjs.setDefaultConfigData(geometry1, match$1[0]);
                          var state$2 = BoxGeometryTool$Wonderjs.setDefaultConfigData(geometry2, state$1);
                          return /* tuple */[
                                  state$2,
                                  geometry1,
                                  geometry2
                                ];
                        };
                        Wonder_jest.test("compute and set vertices", (function () {
                                var match = _prepare(/* () */0);
                                var state = GeometryTool$Wonderjs.initGeometrys(match[0]);
                                return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](/* tuple */[
                                                Geometry$Wonderjs.getGeometryVertices(match[1], state),
                                                Geometry$Wonderjs.getGeometryVertices(match[2], state)
                                              ]), /* tuple */[
                                            BoxGeometryTool$Wonderjs.getDefaultVertices(/* () */0),
                                            BoxGeometryTool$Wonderjs.getDefaultVertices(/* () */0)
                                          ]);
                              }));
                        return Wonder_jest.test("compute and set indices", (function () {
                                      var match = _prepare(/* () */0);
                                      var state = GeometryTool$Wonderjs.initGeometrys(match[0]);
                                      return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](/* tuple */[
                                                      Geometry$Wonderjs.getGeometryIndices(match[1], state),
                                                      Geometry$Wonderjs.getGeometryIndices(match[2], state)
                                                    ]), /* tuple */[
                                                  BoxGeometryTool$Wonderjs.getDefaultIndices(/* () */0),
                                                  BoxGeometryTool$Wonderjs.getDefaultIndices(/* () */0)
                                                ]);
                                    }));
                      }));
                describe("contract check", (function () {
                        return Wonder_jest.test("shouldn't dispose any geometry before init", (function () {
                                      var match = BoxGeometryTool$Wonderjs.createBoxGeometry(state[0]);
                                      var geometry1 = match[1];
                                      var match$1 = BoxGeometryTool$Wonderjs.createBoxGeometry(match[0]);
                                      var state$1 = VboBufferTool$Wonderjs.passBufferShouldExistCheckWhenDisposeGeometry(geometry1, match$1[0]);
                                      return Wonder_jest.Expect[/* toThrow */18](Wonder_jest.Expect[/* expect */0]((function () {
                                                        GeometryTool$Wonderjs.dispose(geometry1, state$1);
                                                        return /* () */0;
                                                      })));
                                    }));
                      }));
                return /* () */0;
              }));
        describe("set vertices with array", (function () {
                return Wonder_jest.test("if vertices already exist, fill new data in it", (function () {
                              var match = BoxGeometry$Wonderjs.createBoxGeometry(state[0]);
                              var geometry = match[1];
                              var state$1 = GeometryTool$Wonderjs.setVerticesWithArray(geometry, /* float array */[
                                    1,
                                    2,
                                    3
                                  ], match[0]);
                              var newData = /* float array */[
                                3,
                                3,
                                5
                              ];
                              var state$2 = GeometryTool$Wonderjs.setVerticesWithArray(geometry, newData, state$1);
                              return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](Geometry$Wonderjs.getGeometryVertices(geometry, state$2)), new Float32Array(newData));
                            }));
              }));
        describe("set vertices with type array", (function () {
                return Wonder_jest.test("directly set it", (function () {
                              var match = BoxGeometry$Wonderjs.createBoxGeometry(state[0]);
                              var geometry = match[1];
                              var state$1 = GeometryTool$Wonderjs.setVerticesWithArray(geometry, /* float array */[
                                    1,
                                    2,
                                    3
                                  ], match[0]);
                              var newData = new Float32Array(/* float array */[
                                    3,
                                    5,
                                    5
                                  ]);
                              var state$2 = Geometry$Wonderjs.setGeometryVertices(geometry, newData, state$1);
                              return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](Geometry$Wonderjs.getGeometryVertices(geometry, state$2)), newData);
                            }));
              }));
        describe("set indices with array", (function () {
                return Wonder_jest.test("if indices already exist, fill new data in it", (function () {
                              var match = BoxGeometry$Wonderjs.createBoxGeometry(state[0]);
                              var geometry = match[1];
                              var state$1 = GeometryTool$Wonderjs.setIndicesWithArray(geometry, /* int array */[
                                    1,
                                    2,
                                    3
                                  ], match[0]);
                              var newData = /* int array */[
                                3,
                                3,
                                5
                              ];
                              var state$2 = GeometryTool$Wonderjs.setIndicesWithArray(geometry, newData, state$1);
                              return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](Geometry$Wonderjs.getGeometryIndices(geometry, state$2)), new Uint16Array(newData));
                            }));
              }));
        describe("set indices with type array", (function () {
                return Wonder_jest.test("directly set it", (function () {
                              var match = BoxGeometry$Wonderjs.createBoxGeometry(state[0]);
                              var geometry = match[1];
                              var state$1 = GeometryTool$Wonderjs.setIndicesWithArray(geometry, /* int array */[
                                    1,
                                    2,
                                    3
                                  ], match[0]);
                              var newData = new Uint16Array(/* int array */[
                                    3,
                                    5,
                                    5
                                  ]);
                              var state$2 = Geometry$Wonderjs.setGeometryIndices(geometry, newData, state$1);
                              return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](Geometry$Wonderjs.getGeometryIndices(geometry, state$2)), newData);
                            }));
              }));
        describe("getDrawMode", (function () {
                return Wonder_jest.test("return TRIANGLES", (function () {
                              var state$1 = FakeGlTool$Wonderjs.setFakeGl({
                                    TRIANGLES: 1
                                  }, state[0]);
                              return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](Geometry$Wonderjs.getGeometryDrawMode(state$1)), 1);
                            }));
              }));
        describe("getGeometryGameObject", (function () {
                return Wonder_jest.test("get geometry's gameObject", (function () {
                              var match = BoxGeometry$Wonderjs.createBoxGeometry(state[0]);
                              var geometry = match[1];
                              var match$1 = GameObject$Wonderjs.createGameObject(match[0]);
                              var gameObject = match$1[1];
                              var state$1 = GameObject$Wonderjs.addGameObjectGeometryComponent(gameObject, geometry, match$1[0]);
                              return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](Geometry$Wonderjs.getGeometryGameObject(geometry, state$1)), gameObject);
                            }));
              }));
        describe("dispose component", (function () {
                describe("dispose data", (function () {
                        Wonder_jest.test("remove from verticesMap, indicesMap, configDataMap, isInitMap, computeDataFuncMap, gameObjectMap", (function () {
                                var match = BoxGeometryTool$Wonderjs.createGameObject(state[0]);
                                var geometry1 = match[2];
                                var state$1 = VboBufferTool$Wonderjs.passBufferShouldExistCheckWhenDisposeGeometry(geometry1, match[0]);
                                var state$2 = GeometryTool$Wonderjs.initGeometrys(state$1);
                                var state$3 = GameObject$Wonderjs.disposeGameObjectGeometryComponent(match[1], geometry1, state$2);
                                var match$1 = GeometryTool$Wonderjs.getGeometryData(state$3);
                                var computeDataFuncMap = match$1[/* computeDataFuncMap */3];
                                var configDataMap = match$1[/* configDataMap */4];
                                var gameObjectMap = match$1[/* gameObjectMap */5];
                                var isInitMap = match$1[/* isInitMap */7];
                                return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](/* tuple */[
                                                SparseMapSystem$WonderCommonlib.has(geometry1, match$1[/* verticesMap */1]),
                                                SparseMapSystem$WonderCommonlib.has(geometry1, match$1[/* indicesMap */2]),
                                                SparseMapSystem$WonderCommonlib.has(geometry1, configDataMap),
                                                SparseMapSystem$WonderCommonlib.has(geometry1, isInitMap),
                                                SparseMapSystem$WonderCommonlib.has(geometry1, computeDataFuncMap),
                                                SparseMapSystem$WonderCommonlib.has(geometry1, gameObjectMap)
                                              ]), /* tuple */[
                                            /* false */0,
                                            /* false */0,
                                            /* false */0,
                                            /* false */0,
                                            /* false */0,
                                            /* false */0
                                          ]);
                              }));
                        Wonder_jest.test("reset group count", (function () {
                                var match = BoxGeometry$Wonderjs.createBoxGeometry(state[0]);
                                var geometry1 = match[1];
                                var match$1 = GameObject$Wonderjs.createGameObject(match[0]);
                                var gameObject1 = match$1[1];
                                var state$1 = GameObject$Wonderjs.addGameObjectGeometryComponent(gameObject1, geometry1, match$1[0]);
                                var match$2 = GameObject$Wonderjs.createGameObject(state$1);
                                var state$2 = GameObject$Wonderjs.addGameObjectGeometryComponent(match$2[1], geometry1, match$2[0]);
                                var state$3 = GameObject$Wonderjs.disposeGameObjectGeometryComponent(gameObject1, geometry1, state$2);
                                return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](GeometryTool$Wonderjs.getGroupCount(geometry1, state$3)), 0);
                              }));
                        return Wonder_jest.test("remove from buffer map", (function () {
                                      var match = BoxGeometryTool$Wonderjs.createGameObject(state[0]);
                                      var geometry1 = match[2];
                                      var state$1 = VboBufferTool$Wonderjs.passBufferShouldExistCheckWhenDisposeGeometry(geometry1, match[0]);
                                      var state$2 = GeometryTool$Wonderjs.initGeometrys(state$1);
                                      var state$3 = GameObject$Wonderjs.disposeGameObjectGeometryComponent(match[1], geometry1, state$2);
                                      var match$1 = VboBufferTool$Wonderjs.getVboBufferData(state$3);
                                      var vertexBufferMap = match$1[/* vertexBufferMap */0];
                                      var elementArrayBufferMap = match$1[/* elementArrayBufferMap */1];
                                      return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](/* tuple */[
                                                      SparseMapSystem$WonderCommonlib.has(geometry1, vertexBufferMap),
                                                      SparseMapSystem$WonderCommonlib.has(geometry1, elementArrayBufferMap)
                                                    ]), /* tuple */[
                                                  /* false */0,
                                                  /* false */0
                                                ]);
                                    }));
                      }));
                describe("test add new one after dispose old one", (function () {
                        Wonder_jest.test("use disposed index as new index firstly", (function () {
                                var match = BoxGeometryTool$Wonderjs.createGameObject(state[0]);
                                var geometry1 = match[2];
                                var gameObject1 = match[1];
                                var state$1 = GameObject$Wonderjs.initGameObject(gameObject1, match[0]);
                                var state$2 = VboBufferTool$Wonderjs.passBufferShouldExistCheckWhenDisposeGeometry(geometry1, state$1);
                                var state$3 = GameObject$Wonderjs.disposeGameObjectGeometryComponent(gameObject1, geometry1, state$2);
                                var match$1 = BoxGeometry$Wonderjs.createBoxGeometry(state$3);
                                return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](match$1[1]), geometry1);
                              }));
                        Wonder_jest.test("if has no disposed index, get index from geometryData.index", (function () {
                                var match = BoxGeometryTool$Wonderjs.createGameObject(state[0]);
                                var geometry1 = match[2];
                                var gameObject1 = match[1];
                                var state$1 = GameObject$Wonderjs.initGameObject(gameObject1, match[0]);
                                var state$2 = VboBufferTool$Wonderjs.passBufferShouldExistCheckWhenDisposeGeometry(geometry1, state$1);
                                var state$3 = GameObject$Wonderjs.disposeGameObjectGeometryComponent(gameObject1, geometry1, state$2);
                                var match$1 = BoxGeometry$Wonderjs.createBoxGeometry(state$3);
                                var match$2 = BoxGeometry$Wonderjs.createBoxGeometry(match$1[0]);
                                return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](/* tuple */[
                                                match$1[1],
                                                match$2[1]
                                              ]), /* tuple */[
                                            geometry1,
                                            geometry1 + 1 | 0
                                          ]);
                              }));
                        describe("fix bug", (function () {
                                return Wonder_jest.test("new one after init should has its own geometry point data", (function () {
                                              var match = BoxGeometryTool$Wonderjs.createGameObject(state[0]);
                                              var geometry1 = match[2];
                                              var gameObject1 = match[1];
                                              var state$1 = GameObject$Wonderjs.initGameObject(gameObject1, match[0]);
                                              var state$2 = VboBufferTool$Wonderjs.passBufferShouldExistCheckWhenDisposeGeometry(geometry1, state$1);
                                              var state$3 = GameObject$Wonderjs.disposeGameObjectGeometryComponent(gameObject1, geometry1, state$2);
                                              var match$1 = BoxGeometry$Wonderjs.createBoxGeometry(state$3);
                                              var geometry2 = match$1[1];
                                              var state$4 = BoxGeometry$Wonderjs.setBoxGeometryConfigData(geometry2, GeometryTool$Wonderjs.buildBoxGeometryConfigDataJsObj(/* Some */[20], /* Some */[30], /* Some */[40], /* None */0, /* None */0, /* None */0, /* () */0), match$1[0]);
                                              var state$5 = GeometryTool$Wonderjs.initGeometry(geometry2, state$4);
                                              return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](/* tuple */[
                                                              Geometry$Wonderjs.getGeometryVertices(geometry2, state$5),
                                                              Geometry$Wonderjs.getGeometryIndices(geometry2, state$5)
                                                            ]), /* tuple */[
                                                          new Float32Array(/* float array */[
                                                                -20,
                                                                -30,
                                                                40,
                                                                -20,
                                                                30,
                                                                40,
                                                                20,
                                                                -30,
                                                                40,
                                                                20,
                                                                30,
                                                                40,
                                                                20,
                                                                -30,
                                                                -40,
                                                                20,
                                                                30,
                                                                -40,
                                                                -20,
                                                                -30,
                                                                -40,
                                                                -20,
                                                                30,
                                                                -40,
                                                                -20,
                                                                30,
                                                                40,
                                                                -20,
                                                                30,
                                                                -40,
                                                                20,
                                                                30,
                                                                40,
                                                                20,
                                                                30,
                                                                -40,
                                                                20,
                                                                -30,
                                                                40,
                                                                20,
                                                                -30,
                                                                -40,
                                                                -20,
                                                                -30,
                                                                40,
                                                                -20,
                                                                -30,
                                                                -40,
                                                                20,
                                                                -30,
                                                                40,
                                                                20,
                                                                30,
                                                                40,
                                                                20,
                                                                -30,
                                                                -40,
                                                                20,
                                                                30,
                                                                -40,
                                                                -20,
                                                                -30,
                                                                -40,
                                                                -20,
                                                                30,
                                                                -40,
                                                                -20,
                                                                -30,
                                                                40,
                                                                -20,
                                                                30,
                                                                40
                                                              ]),
                                                          new Uint16Array(/* array */[
                                                                0,
                                                                2,
                                                                1,
                                                                2,
                                                                3,
                                                                1,
                                                                4,
                                                                6,
                                                                5,
                                                                6,
                                                                7,
                                                                5,
                                                                8,
                                                                10,
                                                                9,
                                                                10,
                                                                11,
                                                                9,
                                                                12,
                                                                14,
                                                                13,
                                                                14,
                                                                15,
                                                                13,
                                                                16,
                                                                18,
                                                                17,
                                                                18,
                                                                19,
                                                                17,
                                                                20,
                                                                22,
                                                                21,
                                                                22,
                                                                23,
                                                                21
                                                              ])
                                                        ]);
                                            }));
                              }));
                        return /* () */0;
                      }));
                describe("contract check", (function () {
                        return Wonder_jest.test("shouldn't dispose the component which isn't alive", (function () {
                                      var match = BoxGeometryTool$Wonderjs.createGameObject(state[0]);
                                      var geometry1 = match[2];
                                      var gameObject1 = match[1];
                                      var state$1 = GameObject$Wonderjs.initGameObject(gameObject1, match[0]);
                                      var state$2 = VboBufferTool$Wonderjs.passBufferShouldExistCheckWhenDisposeGeometry(geometry1, state$1);
                                      var state$3 = GameObject$Wonderjs.disposeGameObjectGeometryComponent(gameObject1, geometry1, state$2);
                                      return Wonder_jest.Expect[/* toThrowMessage */20]("shouldn't dispose the component which isn't alive", Wonder_jest.Expect[/* expect */0]((function () {
                                                        GameObject$Wonderjs.disposeGameObjectGeometryComponent(gameObject1, geometry1, state$3);
                                                        return /* () */0;
                                                      })));
                                    }));
                      }));
                return /* () */0;
              }));
        describe("contract check", (function () {
                describe("check is alive", (function () {
                        describe("if geometry is disposed", (function () {
                                var _testGetFunc = function (getFunc) {
                                  var match = BoxGeometryTool$Wonderjs.createGameObject(state[0]);
                                  var geometry = match[2];
                                  var state$1 = GeometryTool$Wonderjs.initGeometrys(match[0]);
                                  var state$2 = VboBufferTool$Wonderjs.passBufferShouldExistCheckWhenDisposeGeometry(geometry, state$1);
                                  var state$3 = GameObject$Wonderjs.disposeGameObjectGeometryComponent(match[1], geometry, state$2);
                                  return Wonder_jest.Expect[/* toThrowMessage */20]("component should alive", Wonder_jest.Expect[/* expect */0]((function () {
                                                    return Curry._2(getFunc, geometry, state$3);
                                                  })));
                                };
                                var _testSetFunc = function (setFunc) {
                                  var match = BoxGeometryTool$Wonderjs.createGameObject(state[0]);
                                  var geometry = match[2];
                                  var state$1 = GeometryTool$Wonderjs.initGeometrys(match[0]);
                                  var state$2 = VboBufferTool$Wonderjs.passBufferShouldExistCheckWhenDisposeGeometry(geometry, state$1);
                                  var state$3 = GameObject$Wonderjs.disposeGameObjectGeometryComponent(match[1], geometry, state$2);
                                  return Wonder_jest.Expect[/* toThrowMessage */20]("component should alive", Wonder_jest.Expect[/* expect */0]((function () {
                                                    return Curry._3(setFunc, geometry, 0, state$3);
                                                  })));
                                };
                                Wonder_jest.test("getGeometryVertices should error", (function () {
                                        return _testGetFunc(Geometry$Wonderjs.getGeometryVertices);
                                      }));
                                Wonder_jest.test("getGeometryIndices should error", (function () {
                                        return _testGetFunc(Geometry$Wonderjs.getGeometryIndices);
                                      }));
                                Wonder_jest.test("getGeometryConfigData should error", (function () {
                                        return _testGetFunc(Geometry$Wonderjs.getGeometryConfigData);
                                      }));
                                Wonder_jest.test("getGeometryGameObject should error", (function () {
                                        return _testGetFunc(Geometry$Wonderjs.getGeometryGameObject);
                                      }));
                                Wonder_jest.test("setGeometryVertices should error", (function () {
                                        return _testSetFunc(Geometry$Wonderjs.setGeometryVertices);
                                      }));
                                return Wonder_jest.test("setGeometryIndices should error", (function () {
                                              return _testSetFunc(Geometry$Wonderjs.setGeometryIndices);
                                            }));
                              }));
                        return /* () */0;
                      }));
                return /* () */0;
              }));
        return /* () */0;
      }));

export {
  
}
/*  Not a pure module */
