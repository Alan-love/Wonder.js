// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as Curry                    from "../../../../../../../node_modules/bs-platform/lib/es6/curry.js";
import * as Sinon                    from "../../../../../../../node_modules/wonder-bs-sinon/lib/es6_global/src/sinon.js";
import * as Sinon$1                  from "sinon";
import * as Wonder_jest              from "../../../../../../../node_modules/wonder-bs-jest/lib/es6_global/src/wonder_jest.js";
import * as StateAPI$Wonderjs        from "../../../../../src/api/StateAPI.js";
import * as TestTool$Wonderjs        from "../../../../tool/TestTool.js";
import * as FakeGlTool$Wonderjs      from "../../../../tool/gl/FakeGlTool.js";
import * as GameObjectAPI$Wonderjs   from "../../../../../src/api/GameObjectAPI.js";
import * as MainStateTool$Wonderjs   from "../../../../tool/service/state/MainStateTool.js";
import * as BoxGeometryAPI$Wonderjs  from "../../../../../src/api/geometry/BoxGeometryAPI.js";
import * as GameObjectTool$Wonderjs  from "../../../../tool/service/gameObject/GameObjectTool.js";
import * as BoxGeometryTool$Wonderjs from "../../../../tool/service/geometry/BoxGeometryTool.js";

describe("fix redo,undo bug", (function () {
        var sandbox = Sinon.getSandboxDefaultVal(/* () */0);
        var state = [MainStateTool$Wonderjs.createState(/* () */0)];
        beforeEach((function () {
                sandbox[0] = Sinon$1.sandbox.create();
                state[0] = TestTool$Wonderjs.initWithJobConfig(sandbox, /* None */0, /* None */0, /* None */0, /* None */0, /* () */0);
                return /* () */0;
              }));
        afterEach((function () {
                return Curry._1(Sinon.restoreSandbox, sandbox[0]);
              }));
        return Wonder_jest.test("fix \"1.create box1; 2.get copied state by deepCopyForRestore; 3.dispose box1; 4.add box2; 5.restore to copied state. the box1's vertices from copied state is wrong!\" bug", (function () {
                      var match = BoxGeometryTool$Wonderjs.createGameObject(state[0]);
                      var boxGameObject = match[1];
                      var state$1 = GameObjectAPI$Wonderjs.initGameObject(boxGameObject, match[0]);
                      var state$2 = FakeGlTool$Wonderjs.setFakeGl(FakeGlTool$Wonderjs.buildFakeGl(sandbox, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* () */0), state$1);
                      var copiedState = StateAPI$Wonderjs.deepCopyForRestore(state$2);
                      var state$3 = GameObjectTool$Wonderjs.disposeGameObject(boxGameObject, state$2);
                      var match$1 = BoxGeometryTool$Wonderjs.createGameObject(state$3);
                      GameObjectAPI$Wonderjs.initGameObject(match$1[1], match$1[0]);
                      return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](BoxGeometryAPI$Wonderjs.getBoxGeometryVertices(copiedState)), BoxGeometryTool$Wonderjs.getDefaultVertices(/* () */0));
                    }));
      }));

export {
  
}
/*  Not a pure module */
