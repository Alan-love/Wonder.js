// Generated by BUCKLESCRIPT VERSION 3.1.4, PLEASE EDIT WITH CARE

import * as Curry from "../../../../../../../node_modules/bs-platform/lib/es6/curry.js";
import * as Sinon from "../../../../../../../node_modules/wonder-bs-sinon/lib/es6_global/src/sinon.js";
import * as Sinon$1 from "sinon";
import * as Wonder_jest from "../../../../../../../node_modules/wonder-bs-jest/lib/es6_global/src/wonder_jest.js";
import * as Js_primitive from "../../../../../../../node_modules/bs-platform/lib/es6/js_primitive.js";
import * as TestTool$Wonderjs from "../../../../tool/TestTool.js";
import * as CameraTool$Wonderjs from "../../../../tool/service/camera/CameraTool.js";
import * as FakeGlTool$Wonderjs from "../../../../tool/gl/FakeGlTool.js";
import * as SettingTool$Wonderjs from "../../../../tool/service/setting/SettingTool.js";
import * as TransformAPI$Wonderjs from "../../../../../src/api/TransformAPI.js";
import * as MainStateTool$Wonderjs from "../../../../tool/service/state/MainStateTool.js";
import * as PointLightAPI$Wonderjs from "../../../../../src/api/light/PointLightAPI.js";
import * as TransformTool$Wonderjs from "../../../../tool/service/transform/TransformTool.js";
import * as TypeArrayTool$Wonderjs from "../../../../tool/service/primitive/TypeArrayTool.js";
import * as GameObjectTool$Wonderjs from "../../../../tool/service/gameObject/GameObjectTool.js";
import * as PointLightTool$Wonderjs from "../../../../tool/service/light/PointLightTool.js";
import * as AllMaterialTool$Wonderjs from "../../../../tool/service/material/AllMaterialTool.js";
import * as AmbientLightAPI$Wonderjs from "../../../../../src/api/light/AmbientLightAPI.js";
import * as MeshRendererAPI$Wonderjs from "../../../../../src/api/MeshRendererAPI.js";
import * as AmbientLightTool$Wonderjs from "../../../../tool/service/light/AmbientLightTool.js";
import * as BasicMaterialAPI$Wonderjs from "../../../../../src/api/material/BasicMaterialAPI.js";
import * as LightMaterialAPI$Wonderjs from "../../../../../src/api/material/LightMaterialAPI.js";
import * as MeshRendererTool$Wonderjs from "../../../../tool/service/meshRenderer/MeshRendererTool.js";
import * as BasicMaterialTool$Wonderjs from "../../../../tool/service/material/BasicMaterialTool.js";
import * as CustomGeometryAPI$Wonderjs from "../../../../../src/api/geometry/CustomGeometryAPI.js";
import * as DirectionLightAPI$Wonderjs from "../../../../../src/api/light/DirectionLightAPI.js";
import * as LightMaterialTool$Wonderjs from "../../../../tool/service/material/LightMaterialTool.js";
import * as CustomGeometryTool$Wonderjs from "../../../../tool/service/geometry/CustomGeometryTool.js";
import * as DirectionLightTool$Wonderjs from "../../../../tool/service/light/DirectionLightTool.js";
import * as ObjectInstanceTool$Wonderjs from "../../../../tool/service/instance/ObjectInstanceTool.js";
import * as SourceInstanceTool$Wonderjs from "../../../../tool/service/instance/SourceInstanceTool.js";
import * as StaticTransformTool$Wonderjs from "../../../../tool/service/primitive/StaticTransformTool.js";
import * as BasicSourceTextureAPI$Wonderjs from "../../../../../src/api/texture/BasicSourceTextureAPI.js";
import * as BasicSourceTextureTool$Wonderjs from "../../../../tool/service/texture/BasicSourceTextureTool.js";
import * as SparseMapService$WonderCommonlib from "../../../../../../../node_modules/wonder-commonlib/lib/es6_global/src/SparseMapService.js";
import * as PerspectiveCameraProjectionAPI$Wonderjs from "../../../../../src/api/PerspectiveCameraProjectionAPI.js";
import * as ArrayBufferViewSourceTextureAPI$Wonderjs from "../../../../../src/api/texture/ArrayBufferViewSourceTextureAPI.js";
import * as PerspectiveCameraProjectionTool$Wonderjs from "../../../../tool/service/camera/PerspectiveCameraProjectionTool.js";
import * as ArrayBufferViewSourceTextureTool$Wonderjs from "../../../../tool/service/texture/ArrayBufferViewSourceTextureTool.js";

describe("test redo,undo component record", (function () {
        var sandbox = Sinon.getSandboxDefaultVal(/* () */0);
        var state = [MainStateTool$Wonderjs.createState(/* () */0)];
        var _prepareMeshRendererData = function (state) {
          var match = MeshRendererTool$Wonderjs.createBasicMaterialGameObject(state[0]);
          var match$1 = MeshRendererTool$Wonderjs.createLightMaterialGameObject(match[0]);
          var match$2 = MeshRendererTool$Wonderjs.createBasicMaterialGameObject(match$1[0]);
          var meshRenderer3 = match$2[2];
          var gameObject3 = match$2[1];
          var state$1 = GameObjectTool$Wonderjs.disposeGameObjectMeshRendererComponent(gameObject3, meshRenderer3, match$2[0]);
          return /* tuple */[
                  state$1,
                  match[1],
                  match$1[1],
                  gameObject3,
                  match[2],
                  match$1[2],
                  meshRenderer3
                ];
        };
        var _prepareTransformMatrixData = function (state) {
          var match = GameObjectTool$Wonderjs.createGameObject(state[0]);
          var transform1 = match[2];
          var match$1 = GameObjectTool$Wonderjs.createGameObject(match[0]);
          var transform2 = match$1[2];
          var match$2 = GameObjectTool$Wonderjs.createGameObject(match$1[0]);
          var transform3 = match$2[2];
          var gameObject3 = match$2[1];
          var state$1 = TransformAPI$Wonderjs.setTransformParent(transform1, transform2, match$2[0]);
          var state$2 = TransformAPI$Wonderjs.setTransformLocalPosition(transform1, /* tuple */[
                1,
                2,
                3
              ], state$1);
          var state$3 = TransformAPI$Wonderjs.setTransformLocalPosition(transform2, /* tuple */[
                2,
                4,
                10
              ], state$2);
          var state$4 = TransformAPI$Wonderjs.setTransformLocalPosition(transform3, /* tuple */[
                -1,
                4,
                5
              ], state$3);
          var state$5 = GameObjectTool$Wonderjs.disposeGameObjectTransformComponent(gameObject3, transform3, false, state$4);
          return /* tuple */[
                  state$5,
                  match[1],
                  match$1[1],
                  gameObject3,
                  transform1,
                  transform2,
                  transform3
                ];
        };
        var _prepareBasicCameraViewData = function (state) {
          var match = CameraTool$Wonderjs.createCameraGameObject(state[0]);
          var match$1 = CameraTool$Wonderjs.createCameraGameObject(match[0]);
          var match$2 = CameraTool$Wonderjs.createCameraGameObject(match$1[0]);
          var basicCameraView3 = match$2[3][0];
          var gameObject3 = match$2[1];
          var state$1 = GameObjectTool$Wonderjs.disposeGameObjectBasicCameraViewComponent(gameObject3, basicCameraView3, match$2[0]);
          return /* tuple */[
                  state$1,
                  match[1],
                  match$1[1],
                  gameObject3,
                  match[3][0],
                  match$1[3][0],
                  basicCameraView3
                ];
        };
        var _preparePerspectiveCameraProjectionData = function (state) {
          var match = CameraTool$Wonderjs.createCameraGameObject(state[0]);
          var perspectiveCameraProjection1 = match[3][1];
          var match$1 = CameraTool$Wonderjs.createCameraGameObject(match[0]);
          var perspectiveCameraProjection2 = match$1[3][1];
          var match$2 = CameraTool$Wonderjs.createCameraGameObject(match$1[0]);
          var perspectiveCameraProjection3 = match$2[3][1];
          var gameObject3 = match$2[1];
          var state$1 = PerspectiveCameraProjectionAPI$Wonderjs.setPerspectiveCameraNear(perspectiveCameraProjection2, 0.2, match$2[0]);
          var state$2 = PerspectiveCameraProjectionAPI$Wonderjs.setPerspectiveCameraFar(perspectiveCameraProjection2, 100, state$1);
          var state$3 = PerspectiveCameraProjectionAPI$Wonderjs.setPerspectiveCameraFar(perspectiveCameraProjection3, 100, state$2);
          var state$4 = PerspectiveCameraProjectionAPI$Wonderjs.setPerspectiveCameraAspect(perspectiveCameraProjection1, 1, state$3);
          var state$5 = PerspectiveCameraProjectionAPI$Wonderjs.setPerspectiveCameraAspect(perspectiveCameraProjection2, 2, state$4);
          var state$6 = PerspectiveCameraProjectionAPI$Wonderjs.setPerspectiveCameraFovy(perspectiveCameraProjection2, 60, state$5);
          var state$7 = PerspectiveCameraProjectionTool$Wonderjs.update(state$6);
          var state$8 = GameObjectTool$Wonderjs.disposeGameObjectPerspectiveCameraProjectionComponent(gameObject3, perspectiveCameraProjection3, state$7);
          return /* tuple */[
                  state$8,
                  match[1],
                  match$1[1],
                  gameObject3,
                  perspectiveCameraProjection1,
                  perspectiveCameraProjection2,
                  perspectiveCameraProjection3
                ];
        };
        var _prepareBasicMaterialData = function (state) {
          var match = BasicMaterialTool$Wonderjs.createGameObject(state[0]);
          var match$1 = BasicMaterialTool$Wonderjs.createGameObject(match[0]);
          var material2 = match$1[2];
          var match$2 = BasicMaterialTool$Wonderjs.createGameObject(match$1[0]);
          var state$1 = AllMaterialTool$Wonderjs.prepareForInit(match$2[0]);
          var state$2 = BasicMaterialAPI$Wonderjs.setBasicMaterialColor(material2, /* array */[
                1,
                0.5,
                0.0
              ], state$1);
          return /* tuple */[
                  state$2,
                  match[1],
                  match$1[1],
                  match$2[1],
                  match[2],
                  material2,
                  match$2[2]
                ];
        };
        var _prepareLightMaterialData = function (state) {
          var match = LightMaterialTool$Wonderjs.createGameObject(state[0]);
          var match$1 = LightMaterialTool$Wonderjs.createGameObject(match[0]);
          var material2 = match$1[2];
          var match$2 = LightMaterialTool$Wonderjs.createGameObject(match$1[0]);
          var state$1 = AllMaterialTool$Wonderjs.prepareForInit(match$2[0]);
          var diffuseColor2 = /* array */[
            1,
            0.5,
            0.0
          ];
          var specularColor2 = /* array */[
            0,
            1.0,
            0.5
          ];
          var state$2 = LightMaterialAPI$Wonderjs.setLightMaterialDiffuseColor(material2, diffuseColor2, state$1);
          var state$3 = LightMaterialAPI$Wonderjs.setLightMaterialSpecularColor(material2, specularColor2, state$2);
          return /* tuple */[
                  state$3,
                  match[1],
                  match$1[1],
                  match$2[1],
                  match[2],
                  material2,
                  match$2[2]
                ];
        };
        var _prepareBasicSourceTextureData = function (state) {
          var match = BasicSourceTextureAPI$Wonderjs.createBasicSourceTexture(state);
          var match$1 = BasicSourceTextureAPI$Wonderjs.createBasicSourceTexture(match[0]);
          var texture2 = match$1[1];
          var match$2 = BasicSourceTextureAPI$Wonderjs.createBasicSourceTexture(match$1[0]);
          var state$1 = AllMaterialTool$Wonderjs.prepareForInit(match$2[0]);
          var state$2 = BasicSourceTextureAPI$Wonderjs.setBasicSourceTextureWrapS(texture2, 1, state$1);
          var state$3 = BasicSourceTextureAPI$Wonderjs.setBasicSourceTextureWrapT(texture2, 1, state$2);
          var state$4 = BasicSourceTextureAPI$Wonderjs.setBasicSourceTextureMagFilter(texture2, 1, state$3);
          var state$5 = BasicSourceTextureAPI$Wonderjs.setBasicSourceTextureMinFilter(texture2, 1, state$4);
          var state$6 = BasicSourceTextureAPI$Wonderjs.setBasicSourceTextureType(texture2, 1, state$5);
          var state$7 = BasicSourceTextureAPI$Wonderjs.setBasicSourceTextureFormat(texture2, 2, state$6);
          return /* tuple */[
                  state$7,
                  match[1],
                  texture2,
                  match$2[1]
                ];
        };
        var _prepareArrayBufferViewSourceTextureData = function (state) {
          var match = ArrayBufferViewSourceTextureAPI$Wonderjs.createArrayBufferViewSourceTexture(state);
          var match$1 = ArrayBufferViewSourceTextureAPI$Wonderjs.createArrayBufferViewSourceTexture(match[0]);
          var texture2 = match$1[1];
          var match$2 = ArrayBufferViewSourceTextureAPI$Wonderjs.createArrayBufferViewSourceTexture(match$1[0]);
          var state$1 = AllMaterialTool$Wonderjs.prepareForInit(match$2[0]);
          var state$2 = ArrayBufferViewSourceTextureAPI$Wonderjs.setArrayBufferViewSourceTextureWrapS(texture2, 1, state$1);
          var state$3 = ArrayBufferViewSourceTextureAPI$Wonderjs.setArrayBufferViewSourceTextureWrapT(texture2, 1, state$2);
          var state$4 = ArrayBufferViewSourceTextureAPI$Wonderjs.setArrayBufferViewSourceTextureMagFilter(texture2, 1, state$3);
          var state$5 = ArrayBufferViewSourceTextureAPI$Wonderjs.setArrayBufferViewSourceTextureMinFilter(texture2, 1, state$4);
          var state$6 = ArrayBufferViewSourceTextureAPI$Wonderjs.setArrayBufferViewSourceTextureType(texture2, 1, state$5);
          var state$7 = ArrayBufferViewSourceTextureAPI$Wonderjs.setArrayBufferViewSourceTextureFormat(texture2, 2, state$6);
          var state$8 = ArrayBufferViewSourceTextureAPI$Wonderjs.setArrayBufferViewSourceTextureWidth(texture2, 2, state$7);
          var state$9 = ArrayBufferViewSourceTextureAPI$Wonderjs.setArrayBufferViewSourceTextureHeight(texture2, 4, state$8);
          return /* tuple */[
                  state$9,
                  match[1],
                  texture2,
                  match$2[1]
                ];
        };
        beforeEach((function () {
                sandbox[0] = Sinon$1.sandbox.create();
                state[0] = TestTool$Wonderjs.initWithJobConfig(sandbox, /* None */0, /* None */0, /* None */0, /* None */0, /* () */0);
                return /* () */0;
              }));
        afterEach((function () {
                return Curry._1(Sinon.restoreSandbox, sandbox[0]);
              }));
        describe("deep copy meshRenderer record", (function () {
                Wonder_jest.test("copied record should equal to source record", (function () {
                        var match = _prepareMeshRendererData(state);
                        var gameObject2 = match[2];
                        var gameObject1 = match[1];
                        var copiedState = MainStateTool$Wonderjs.deepCopyForRestore(match[0]);
                        return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](MeshRendererTool$Wonderjs.getMeshRendererRecord(copiedState)), /* record */[
                                    /* index */3,
                                    /* basicMaterialRenderGameObjectArray : array */[gameObject1],
                                    /* lightMaterialRenderGameObjectArray : array */[gameObject2],
                                    /* gameObjectMap : array */[
                                      gameObject1,
                                      gameObject2,
                                      undefined
                                    ],
                                    /* disposedIndexArray : array */[match[6]]
                                  ]);
                      }));
                return Wonder_jest.test("changing copied state shouldn't affect source state", (function () {
                              var match = _prepareMeshRendererData(state);
                              var gameObject2 = match[2];
                              var gameObject1 = match[1];
                              var state$1 = match[0];
                              var copiedState = MainStateTool$Wonderjs.deepCopyForRestore(state$1);
                              var record = MeshRendererTool$Wonderjs.getMeshRendererRecord(copiedState);
                              Js_primitive.undefined_to_opt(record[/* basicMaterialRenderGameObjectArray */1].pop());
                              Js_primitive.undefined_to_opt(record[/* lightMaterialRenderGameObjectArray */2].pop());
                              Js_primitive.undefined_to_opt(record[/* disposedIndexArray */4].pop());
                              SparseMapService$WonderCommonlib.deleteVal(match[5], record[/* gameObjectMap */3]);
                              return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](MeshRendererTool$Wonderjs.getMeshRendererRecord(state$1)), /* record */[
                                          /* index */3,
                                          /* basicMaterialRenderGameObjectArray : array */[gameObject1],
                                          /* lightMaterialRenderGameObjectArray : array */[gameObject2],
                                          /* gameObjectMap : array */[
                                            gameObject1,
                                            gameObject2,
                                            undefined
                                          ],
                                          /* disposedIndexArray : array */[match[6]]
                                        ]);
                            }));
              }));
        describe("deepCopyForRestore", (function () {
                var _testCopyTypeArraySingleValue = function (param, state) {
                  var setDataFunc = param[2];
                  var match = Curry._1(param[0], state[0]);
                  var component1 = match[2];
                  var match$1 = Curry._1(param[3], /* () */0);
                  var data1 = match$1[0];
                  var state$1 = Curry._3(setDataFunc, component1, data1, match[0]);
                  var copiedState = MainStateTool$Wonderjs.deepCopyForRestore(state$1);
                  Curry._3(setDataFunc, component1, match$1[1], copiedState);
                  return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](Curry._2(param[1], component1, state$1)), data1);
                };
                describe("deep copy transform record", (function () {
                        Wonder_jest.test("copy localToWorldMatrices", (function () {
                                return _testCopyTypeArraySingleValue(/* tuple */[
                                            GameObjectTool$Wonderjs.createGameObject,
                                            TransformTool$Wonderjs.getLocalToWorldMatrix,
                                            TransformTool$Wonderjs.setLocalToWorldMatrix,
                                            (function () {
                                                return /* tuple */[
                                                        /* array */[
                                                          2,
                                                          0,
                                                          0,
                                                          0,
                                                          0,
                                                          1,
                                                          0,
                                                          0,
                                                          0,
                                                          0,
                                                          1,
                                                          0,
                                                          0,
                                                          0,
                                                          0,
                                                          1
                                                        ],
                                                        /* array */[
                                                          3,
                                                          1,
                                                          0,
                                                          0,
                                                          0,
                                                          1,
                                                          0,
                                                          0,
                                                          0,
                                                          0,
                                                          1,
                                                          0,
                                                          0,
                                                          0,
                                                          0,
                                                          1
                                                        ]
                                                      ];
                                              })
                                          ], state);
                              }));
                        Wonder_jest.test("copy localPositions", (function () {
                                return _testCopyTypeArraySingleValue(/* tuple */[
                                            GameObjectTool$Wonderjs.createGameObject,
                                            TransformAPI$Wonderjs.getTransformLocalPosition,
                                            TransformAPI$Wonderjs.setTransformLocalPosition,
                                            (function () {
                                                return /* tuple */[
                                                        /* tuple */[
                                                          2,
                                                          0,
                                                          0
                                                        ],
                                                        /* tuple */[
                                                          3,
                                                          1,
                                                          2
                                                        ]
                                                      ];
                                              })
                                          ], state);
                              }));
                        Wonder_jest.test("deep copy childMap", (function () {
                                var match = _prepareTransformMatrixData(state);
                                var transform2 = match[5];
                                var state$1 = match[0];
                                TransformAPI$Wonderjs.getTransformPosition(transform2, state$1);
                                var copiedState = MainStateTool$Wonderjs.deepCopyForRestore(state$1);
                                var match$1 = TransformAPI$Wonderjs.createTransform(copiedState);
                                TransformAPI$Wonderjs.setTransformParent(match$1[1], transform2, match$1[0]);
                                return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](TransformAPI$Wonderjs.unsafeGetTransformChildren(match[4], state$1)), /* array */[transform2]);
                              }));
                        return Wonder_jest.test("clean localToWorldMatrixCacheMap, normalMatrixCacheMap", (function () {
                                      var match = _prepareTransformMatrixData(state);
                                      var state$1 = match[0];
                                      TransformTool$Wonderjs.updateAndGetNormalMatrixTypeArray(match[5], state$1);
                                      var copiedState = MainStateTool$Wonderjs.deepCopyForRestore(state$1);
                                      var match$1 = TransformAPI$Wonderjs.createTransform(copiedState);
                                      var match$2 = TransformTool$Wonderjs.getRecord(match$1[0]);
                                      var localToWorldMatrixCacheMap = match$2[/* localToWorldMatrixCacheMap */13];
                                      var normalMatrixCacheMap = match$2[/* normalMatrixCacheMap */14];
                                      return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](/* tuple */[
                                                      localToWorldMatrixCacheMap,
                                                      normalMatrixCacheMap
                                                    ]), /* tuple */[
                                                  SparseMapService$WonderCommonlib.createEmpty(/* () */0),
                                                  SparseMapService$WonderCommonlib.createEmpty(/* () */0)
                                                ]);
                                    }));
                      }));
                describe("deep copy material record", (function () {
                        describe("test basic material", (function () {
                                Wonder_jest.test("shadow copy textureCountMap,materialArrayForWorkerInit", (function () {
                                        return MainStateTool$Wonderjs.testShadowCopyArrayLikeMapData((function (state) {
                                                      var match = BasicMaterialTool$Wonderjs.getRecord(state);
                                                      var materialArrayForWorkerInit = match[/* materialArrayForWorkerInit */11];
                                                      return /* array */[
                                                              match[/* textureCountMap */6],
                                                              materialArrayForWorkerInit
                                                            ];
                                                    }), state[0]);
                                      }));
                                Wonder_jest.test("copy colors", (function () {
                                        return _testCopyTypeArraySingleValue(/* tuple */[
                                                    GameObjectTool$Wonderjs.createGameObject,
                                                    (function (material, state) {
                                                        return TypeArrayTool$Wonderjs.truncateArray(BasicMaterialAPI$Wonderjs.getBasicMaterialColor(material, state));
                                                      }),
                                                    BasicMaterialAPI$Wonderjs.setBasicMaterialColor,
                                                    (function () {
                                                        return /* tuple */[
                                                                /* array */[
                                                                  0.1,
                                                                  0,
                                                                  0
                                                                ],
                                                                /* array */[
                                                                  0.2,
                                                                  0,
                                                                  0
                                                                ]
                                                              ];
                                                      })
                                                  ], state);
                                      }));
                                Wonder_jest.test("copy textureIndices", (function () {
                                        return _testCopyTypeArraySingleValue(/* tuple */[
                                                    GameObjectTool$Wonderjs.createGameObject,
                                                    BasicMaterialAPI$Wonderjs.unsafeGetBasicMaterialMap,
                                                    BasicMaterialAPI$Wonderjs.setBasicMaterialMap,
                                                    (function () {
                                                        return /* tuple */[
                                                                1,
                                                                2
                                                              ];
                                                      })
                                                  ], state);
                                      }));
                                return Wonder_jest.test("copy mapUnits", (function () {
                                              return _testCopyTypeArraySingleValue(/* tuple */[
                                                          GameObjectTool$Wonderjs.createGameObject,
                                                          BasicMaterialTool$Wonderjs.getMapUnit,
                                                          BasicMaterialTool$Wonderjs.setMapUnit,
                                                          (function () {
                                                              return /* tuple */[
                                                                      1,
                                                                      2
                                                                    ];
                                                            })
                                                        ], state);
                                            }));
                              }));
                        describe("test light material", (function () {
                                Wonder_jest.test("shadow copy textureCountMap,materialArrayForWorkerInit", (function () {
                                        return MainStateTool$Wonderjs.testShadowCopyArrayLikeMapData((function (state) {
                                                      var match = LightMaterialTool$Wonderjs.getRecord(state);
                                                      var materialArrayForWorkerInit = match[/* materialArrayForWorkerInit */16];
                                                      return /* array */[
                                                              match[/* textureCountMap */9],
                                                              materialArrayForWorkerInit
                                                            ];
                                                    }), state[0]);
                                      }));
                                Wonder_jest.test("copy diffuseColors", (function () {
                                        return _testCopyTypeArraySingleValue(/* tuple */[
                                                    GameObjectTool$Wonderjs.createGameObject,
                                                    (function (material, state) {
                                                        return TypeArrayTool$Wonderjs.truncateArray(LightMaterialAPI$Wonderjs.getLightMaterialDiffuseColor(material, state));
                                                      }),
                                                    LightMaterialAPI$Wonderjs.setLightMaterialDiffuseColor,
                                                    (function () {
                                                        return /* tuple */[
                                                                /* array */[
                                                                  0.1,
                                                                  0,
                                                                  0
                                                                ],
                                                                /* array */[
                                                                  0.2,
                                                                  0,
                                                                  0
                                                                ]
                                                              ];
                                                      })
                                                  ], state);
                                      }));
                                Wonder_jest.test("copy specularColors", (function () {
                                        return _testCopyTypeArraySingleValue(/* tuple */[
                                                    GameObjectTool$Wonderjs.createGameObject,
                                                    (function (material, state) {
                                                        return TypeArrayTool$Wonderjs.truncateArray(LightMaterialAPI$Wonderjs.getLightMaterialSpecularColor(material, state));
                                                      }),
                                                    LightMaterialAPI$Wonderjs.setLightMaterialSpecularColor,
                                                    (function () {
                                                        return /* tuple */[
                                                                /* array */[
                                                                  0.1,
                                                                  0,
                                                                  0
                                                                ],
                                                                /* array */[
                                                                  0.2,
                                                                  0,
                                                                  0
                                                                ]
                                                              ];
                                                      })
                                                  ], state);
                                      }));
                                Wonder_jest.test("copy shininess", (function () {
                                        return _testCopyTypeArraySingleValue(/* tuple */[
                                                    GameObjectTool$Wonderjs.createGameObject,
                                                    LightMaterialAPI$Wonderjs.getLightMaterialShininess,
                                                    LightMaterialAPI$Wonderjs.setLightMaterialShininess,
                                                    (function () {
                                                        return /* tuple */[
                                                                1,
                                                                2
                                                              ];
                                                      })
                                                  ], state);
                                      }));
                                Wonder_jest.test("copy textureIndices", (function () {
                                        return _testCopyTypeArraySingleValue(/* tuple */[
                                                    GameObjectTool$Wonderjs.createGameObject,
                                                    LightMaterialAPI$Wonderjs.unsafeGetLightMaterialDiffuseMap,
                                                    LightMaterialAPI$Wonderjs.setLightMaterialDiffuseMap,
                                                    (function () {
                                                        return /* tuple */[
                                                                1,
                                                                2
                                                              ];
                                                      })
                                                  ], state);
                                      }));
                                Wonder_jest.test("copy diffuseMapUnits", (function () {
                                        return _testCopyTypeArraySingleValue(/* tuple */[
                                                    GameObjectTool$Wonderjs.createGameObject,
                                                    LightMaterialTool$Wonderjs.getDiffuseMapUnit,
                                                    LightMaterialTool$Wonderjs.setDiffuseMapUnit,
                                                    (function () {
                                                        return /* tuple */[
                                                                1,
                                                                2
                                                              ];
                                                      })
                                                  ], state);
                                      }));
                                return Wonder_jest.test("copy specularMapUnits", (function () {
                                              return _testCopyTypeArraySingleValue(/* tuple */[
                                                          GameObjectTool$Wonderjs.createGameObject,
                                                          LightMaterialTool$Wonderjs.getSpecularMapUnit,
                                                          LightMaterialTool$Wonderjs.setSpecularMapUnit,
                                                          (function () {
                                                              return /* tuple */[
                                                                      1,
                                                                      2
                                                                    ];
                                                            })
                                                        ], state);
                                            }));
                              }));
                        return /* () */0;
                      }));
                describe("deep copy texture record", (function () {
                        describe("deep copy basic source texture record", (function () {
                                return Wonder_jest.test("shadow copy sourceMap,glTextureMap, \n                    bindTextureUnitCacheMap, disposedIndexArray,needAddedSourceArray,needInitedTextureIndexArray\n                    \n                    ", (function () {
                                              return MainStateTool$Wonderjs.testShadowCopyArrayLikeMapData((function (state) {
                                                            var match = BasicSourceTextureTool$Wonderjs.getRecord(state);
                                                            return /* array */[
                                                                    match[/* sourceMap */8],
                                                                    match[/* glTextureMap */9],
                                                                    match[/* bindTextureUnitCacheMap */10],
                                                                    match[/* disposedIndexArray */11],
                                                                    match[/* needAddedSourceArray */12],
                                                                    match[/* needInitedTextureIndexArray */13]
                                                                  ];
                                                          }), state[0]);
                                            }));
                              }));
                        describe("deep copy arrayBufferView source texture record", (function () {
                                return Wonder_jest.test("shadow copy sourceMap,glTextureMap, \n                    bindTextureUnitCacheMap, disposedIndexArray,needAddedSourceArray,needInitedTextureIndexArray\n                    \n                    ", (function () {
                                              return MainStateTool$Wonderjs.testShadowCopyArrayLikeMapData((function (state) {
                                                            var match = ArrayBufferViewSourceTextureTool$Wonderjs.getRecord(state);
                                                            return /* array */[
                                                                    match[/* sourceMap */10],
                                                                    match[/* glTextureMap */11],
                                                                    match[/* bindTextureUnitCacheMap */12],
                                                                    match[/* disposedIndexArray */13],
                                                                    match[/* needAddedSourceArray */14],
                                                                    match[/* needInitedTextureIndexArray */15]
                                                                  ];
                                                          }), state[0]);
                                            }));
                              }));
                        return /* () */0;
                      }));
                describe("deep copy light record", (function () {
                        describe("test ambient light", (function () {
                                describe("copy type array record", (function () {
                                        return Wonder_jest.test("copy colors", (function () {
                                                      return _testCopyTypeArraySingleValue(/* tuple */[
                                                                  AmbientLightTool$Wonderjs.createGameObject,
                                                                  AmbientLightAPI$Wonderjs.getAmbientLightColor,
                                                                  AmbientLightAPI$Wonderjs.setAmbientLightColor,
                                                                  (function () {
                                                                      return /* tuple */[
                                                                              /* array */[
                                                                                1,
                                                                                1,
                                                                                0
                                                                              ],
                                                                              /* array */[
                                                                                0,
                                                                                1,
                                                                                0
                                                                              ]
                                                                            ];
                                                                    })
                                                                ], state);
                                                    }));
                                      }));
                                return Wonder_jest.test("shadow copy mappedIndexMap, gameObjectMap", (function () {
                                              return MainStateTool$Wonderjs.testShadowCopyArrayLikeMapData((function (state) {
                                                            var match = AmbientLightTool$Wonderjs.getRecord(state);
                                                            return /* array */[
                                                                    match[/* mappedIndexMap */3],
                                                                    match[/* gameObjectMap */4]
                                                                  ];
                                                          }), state[0]);
                                            }));
                              }));
                        describe("test direction light", (function () {
                                describe("copy type array record", (function () {
                                        Wonder_jest.test("copy colors", (function () {
                                                return _testCopyTypeArraySingleValue(/* tuple */[
                                                            DirectionLightTool$Wonderjs.createGameObject,
                                                            DirectionLightAPI$Wonderjs.getDirectionLightColor,
                                                            DirectionLightAPI$Wonderjs.setDirectionLightColor,
                                                            (function () {
                                                                return /* tuple */[
                                                                        /* array */[
                                                                          1,
                                                                          1,
                                                                          0
                                                                        ],
                                                                        /* array */[
                                                                          0,
                                                                          1,
                                                                          0
                                                                        ]
                                                                      ];
                                                              })
                                                          ], state);
                                              }));
                                        return Wonder_jest.test("copy intensities", (function () {
                                                      return _testCopyTypeArraySingleValue(/* tuple */[
                                                                  DirectionLightTool$Wonderjs.createGameObject,
                                                                  DirectionLightAPI$Wonderjs.getDirectionLightIntensity,
                                                                  DirectionLightAPI$Wonderjs.setDirectionLightIntensity,
                                                                  (function () {
                                                                      return /* tuple */[
                                                                              2,
                                                                              3
                                                                            ];
                                                                    })
                                                                ], state);
                                                    }));
                                      }));
                                return Wonder_jest.test("shadow copy mappedIndexMap, gameObjectMap", (function () {
                                              return MainStateTool$Wonderjs.testShadowCopyArrayLikeMapData((function (state) {
                                                            var match = DirectionLightTool$Wonderjs.getRecord(state);
                                                            return /* array */[
                                                                    match[/* mappedIndexMap */4],
                                                                    match[/* gameObjectMap */5]
                                                                  ];
                                                          }), state[0]);
                                            }));
                              }));
                        describe("test point light", (function () {
                                describe("copy type array record", (function () {
                                        Wonder_jest.test("copy colors", (function () {
                                                return _testCopyTypeArraySingleValue(/* tuple */[
                                                            PointLightTool$Wonderjs.createGameObject,
                                                            PointLightAPI$Wonderjs.getPointLightColor,
                                                            PointLightAPI$Wonderjs.setPointLightColor,
                                                            (function () {
                                                                return /* tuple */[
                                                                        /* array */[
                                                                          1,
                                                                          1,
                                                                          0
                                                                        ],
                                                                        /* array */[
                                                                          0,
                                                                          1,
                                                                          0
                                                                        ]
                                                                      ];
                                                              })
                                                          ], state);
                                              }));
                                        Wonder_jest.test("copy intensities", (function () {
                                                return _testCopyTypeArraySingleValue(/* tuple */[
                                                            PointLightTool$Wonderjs.createGameObject,
                                                            PointLightAPI$Wonderjs.getPointLightIntensity,
                                                            PointLightAPI$Wonderjs.setPointLightIntensity,
                                                            (function () {
                                                                return /* tuple */[
                                                                        2,
                                                                        3
                                                                      ];
                                                              })
                                                          ], state);
                                              }));
                                        Wonder_jest.test("copy constants", (function () {
                                                return _testCopyTypeArraySingleValue(/* tuple */[
                                                            PointLightTool$Wonderjs.createGameObject,
                                                            PointLightAPI$Wonderjs.getPointLightConstant,
                                                            PointLightAPI$Wonderjs.setPointLightConstant,
                                                            (function () {
                                                                return /* tuple */[
                                                                        2,
                                                                        3
                                                                      ];
                                                              })
                                                          ], state);
                                              }));
                                        Wonder_jest.test("copy linears", (function () {
                                                return _testCopyTypeArraySingleValue(/* tuple */[
                                                            PointLightTool$Wonderjs.createGameObject,
                                                            PointLightAPI$Wonderjs.getPointLightLinear,
                                                            PointLightAPI$Wonderjs.setPointLightLinear,
                                                            (function () {
                                                                return /* tuple */[
                                                                        2,
                                                                        3
                                                                      ];
                                                              })
                                                          ], state);
                                              }));
                                        Wonder_jest.test("copy quadratics", (function () {
                                                return _testCopyTypeArraySingleValue(/* tuple */[
                                                            PointLightTool$Wonderjs.createGameObject,
                                                            PointLightAPI$Wonderjs.getPointLightQuadratic,
                                                            PointLightAPI$Wonderjs.setPointLightQuadratic,
                                                            (function () {
                                                                return /* tuple */[
                                                                        2,
                                                                        3
                                                                      ];
                                                              })
                                                          ], state);
                                              }));
                                        return Wonder_jest.test("copy ranges", (function () {
                                                      return _testCopyTypeArraySingleValue(/* tuple */[
                                                                  PointLightTool$Wonderjs.createGameObject,
                                                                  PointLightAPI$Wonderjs.getPointLightRange,
                                                                  PointLightAPI$Wonderjs.setPointLightRange,
                                                                  (function () {
                                                                      return /* tuple */[
                                                                              2,
                                                                              3
                                                                            ];
                                                                    })
                                                                ], state);
                                                    }));
                                      }));
                                return Wonder_jest.test("shadow copy mappedIndexMap, gameObjectMap", (function () {
                                              return MainStateTool$Wonderjs.testShadowCopyArrayLikeMapData((function (state) {
                                                            var match = PointLightTool$Wonderjs.getRecord(state);
                                                            return /* array */[
                                                                    match[/* mappedIndexMap */8],
                                                                    match[/* gameObjectMap */9]
                                                                  ];
                                                          }), state[0]);
                                            }));
                              }));
                        return /* () */0;
                      }));
                describe("deep copy sourceInstance record", (function () {
                        Wonder_jest.test("deep copy matrixFloat32ArrayMap", (function () {
                                var match = SourceInstanceTool$Wonderjs.createSourceInstanceGameObject(state[0]);
                                var sourceInstance1 = match[2];
                                var state$1 = match[0];
                                var match$1 = SourceInstanceTool$Wonderjs.getRecord(state$1);
                                var originMatrixFloat32Array = new Float32Array(/* array */[1]);
                                SparseMapService$WonderCommonlib.set(sourceInstance1, originMatrixFloat32Array, match$1[/* matrixFloat32ArrayMap */6]);
                                var copiedState = MainStateTool$Wonderjs.deepCopyForRestore(state$1);
                                var match$2 = SourceInstanceTool$Wonderjs.getRecord(copiedState);
                                var matrixFloat32Array = SparseMapService$WonderCommonlib.unsafeGet(sourceInstance1, match$2[/* matrixFloat32ArrayMap */6]);
                                matrixFloat32Array[0] = 1000;
                                var match$3 = SourceInstanceTool$Wonderjs.getRecord(state$1);
                                return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](SparseMapService$WonderCommonlib.unsafeGet(sourceInstance1, match$3[/* matrixFloat32ArrayMap */6])), originMatrixFloat32Array);
                              }));
                        return Wonder_jest.test("shadow copy objectInstanceTransformIndexMap, matrixInstanceBufferCapacityMap, gameObjectMap, disposedIndexArray", (function () {
                                      return MainStateTool$Wonderjs.testShadowCopyArrayLikeMapData((function (state) {
                                                    var match = SourceInstanceTool$Wonderjs.getRecord(state);
                                                    return /* array */[
                                                            match[/* objectInstanceTransformIndexMap */1],
                                                            match[/* matrixInstanceBufferCapacityMap */5],
                                                            match[/* gameObjectMap */9],
                                                            match[/* disposedIndexArray */8]
                                                          ];
                                                  }), state[0]);
                                    }));
                      }));
                describe("deep copy gameObject record", (function () {
                        return Wonder_jest.test("shadow copy disposedUidMap,\n\n        disposedUidArray,\n        disposedUidArrayForKeepOrder,\n        disposedBasicCameraViewArray,\n        disposedTransformArray,\n        disposedTransformArrayForKeepOrder,\n        disposedPerspectiveCameraProjectionArray,\n        disposedBasicMaterialArray,\n        disposedLightMaterialArray,\n        disposedBoxGeometryArray,\n        disposedCustomGeometryArray,\n        disposedSourceInstanceArray,\n        disposedObjectInstanceArray,\n        disposedAmbientLightArray,\n        disposedDirectionLightArray,\n        disposedPointLightArray,\n        disposedMeshRendererComponentArray,\n        disposedMeshRendererUidArray,\n                \n                \n                aliveUidArray, transformMap, basicCameraViewMap, currentGeometryDataMap, meshRendererMap, basicMaterialMap, lightMaterialMap, ambientLightMap, directionLightMap, pointLightMap, sourceInstanceMap, objectInstanceMap", (function () {
                                      return MainStateTool$Wonderjs.testShadowCopyArrayLikeMapData((function (state) {
                                                    var match = GameObjectTool$Wonderjs.getGameObjectRecord(state);
                                                    var disposedUidMap = match[/* disposedUidMap */2];
                                                    var disposedUidArray = match[/* disposedUidArray */3];
                                                    var disposedUidArrayForKeepOrder = match[/* disposedUidArrayForKeepOrder */4];
                                                    var disposedBasicCameraViewArray = match[/* disposedBasicCameraViewArray */5];
                                                    var disposedTransformArray = match[/* disposedTransformArray */6];
                                                    var disposedTransformArrayForKeepOrder = match[/* disposedTransformArrayForKeepOrder */7];
                                                    var disposedPerspectiveCameraProjectionArray = match[/* disposedPerspectiveCameraProjectionArray */8];
                                                    var disposedBasicMaterialArray = match[/* disposedBasicMaterialArray */9];
                                                    var disposedLightMaterialArray = match[/* disposedLightMaterialArray */10];
                                                    var disposedBoxGeometryArray = match[/* disposedBoxGeometryArray */11];
                                                    var disposedCustomGeometryArray = match[/* disposedCustomGeometryArray */12];
                                                    var disposedSourceInstanceArray = match[/* disposedSourceInstanceArray */13];
                                                    var disposedObjectInstanceArray = match[/* disposedObjectInstanceArray */14];
                                                    var disposedAmbientLightArray = match[/* disposedAmbientLightArray */15];
                                                    var disposedDirectionLightArray = match[/* disposedDirectionLightArray */16];
                                                    var disposedPointLightArray = match[/* disposedPointLightArray */17];
                                                    var disposedMeshRendererComponentArray = match[/* disposedMeshRendererComponentArray */18];
                                                    var disposedMeshRendererUidArray = match[/* disposedMeshRendererUidArray */19];
                                                    var aliveUidArray = match[/* aliveUidArray */20];
                                                    var currentGeometryDataMap = match[/* currentGeometryDataMap */21];
                                                    var transformMap = match[/* transformMap */22];
                                                    var basicCameraViewMap = match[/* basicCameraViewMap */23];
                                                    var meshRendererMap = match[/* meshRendererMap */25];
                                                    var basicMaterialMap = match[/* basicMaterialMap */26];
                                                    var lightMaterialMap = match[/* lightMaterialMap */27];
                                                    var sourceInstanceMap = match[/* sourceInstanceMap */28];
                                                    var objectInstanceMap = match[/* objectInstanceMap */29];
                                                    var ambientLightMap = match[/* ambientLightMap */30];
                                                    var directionLightMap = match[/* directionLightMap */31];
                                                    var pointLightMap = match[/* pointLightMap */32];
                                                    return /* array */[
                                                            disposedUidMap,
                                                            disposedUidArray,
                                                            disposedUidArrayForKeepOrder,
                                                            disposedBasicCameraViewArray,
                                                            disposedTransformArray,
                                                            disposedTransformArrayForKeepOrder,
                                                            disposedPerspectiveCameraProjectionArray,
                                                            disposedBasicMaterialArray,
                                                            disposedLightMaterialArray,
                                                            disposedBoxGeometryArray,
                                                            disposedCustomGeometryArray,
                                                            disposedSourceInstanceArray,
                                                            disposedObjectInstanceArray,
                                                            disposedAmbientLightArray,
                                                            disposedDirectionLightArray,
                                                            disposedPointLightArray,
                                                            disposedMeshRendererComponentArray,
                                                            disposedMeshRendererUidArray,
                                                            aliveUidArray,
                                                            transformMap,
                                                            basicCameraViewMap,
                                                            currentGeometryDataMap,
                                                            meshRendererMap,
                                                            basicMaterialMap,
                                                            lightMaterialMap,
                                                            ambientLightMap,
                                                            directionLightMap,
                                                            pointLightMap,
                                                            sourceInstanceMap,
                                                            objectInstanceMap
                                                          ];
                                                  }), state[0]);
                                    }));
                      }));
                describe("deep copy objectInstance record", (function () {
                        return Wonder_jest.test("shadow copy sourceInstanceMap, gameObjectMap, disposedIndexArray", (function () {
                                      return MainStateTool$Wonderjs.testShadowCopyArrayLikeMapData((function (state) {
                                                    var match = ObjectInstanceTool$Wonderjs.getObjectInstanceRecord(state);
                                                    return /* array */[
                                                            match[/* sourceInstanceMap */1],
                                                            match[/* gameObjectMap */3],
                                                            match[/* disposedIndexArray */2]
                                                          ];
                                                  }), state[0]);
                                    }));
                      }));
                describe("deep copy basicCameraView record", (function () {
                        return Wonder_jest.test("shadow copy gameObjectMap, disposedIndexArray", (function () {
                                      return MainStateTool$Wonderjs.testShadowCopyArrayLikeMapData((function (state) {
                                                    var match = state[/* basicCameraViewRecord */13];
                                                    return /* array */[
                                                            match[/* gameObjectMap */1],
                                                            match[/* disposedIndexArray */2]
                                                          ];
                                                  }), state[0]);
                                    }));
                      }));
                describe("deep copy basicCameraView record", (function () {
                        Wonder_jest.test("shadow copy dirtyArray, nearMap, farMap, fovyMap, aspectMap, gameObjectMap, disposedIndexArray", (function () {
                                return MainStateTool$Wonderjs.testShadowCopyArrayLikeMapData((function (state) {
                                              var match = state[/* perspectiveCameraProjectionRecord */14];
                                              return /* array */[
                                                      match[/* dirtyArray */1],
                                                      match[/* nearMap */3],
                                                      match[/* farMap */4],
                                                      match[/* fovyMap */5],
                                                      match[/* aspectMap */6],
                                                      match[/* gameObjectMap */7],
                                                      match[/* disposedIndexArray */8]
                                                    ];
                                            }), state[0]);
                              }));
                        return Wonder_jest.test("deep copy pMatrixMap", (function () {
                                      var match = _preparePerspectiveCameraProjectionData(state);
                                      var state$1 = match[0];
                                      var copiedState = MainStateTool$Wonderjs.deepCopyForRestore(state$1);
                                      var record = copiedState[/* perspectiveCameraProjectionRecord */14];
                                      SparseMapService$WonderCommonlib.unsafeGet(0, record[/* pMatrixMap */2])[1] = 10.0;
                                      var oldPMatrix = SparseMapService$WonderCommonlib.unsafeGet(0, state$1[/* perspectiveCameraProjectionRecord */14][/* pMatrixMap */2]);
                                      return Curry._2(Wonder_jest.Expect[/* Operators */23][/* <> */6], Wonder_jest.Expect[/* expect */0](oldPMatrix[1]), 10.0);
                                    }));
                      }));
                return /* () */0;
              }));
        describe("restore", (function () {
                var _testRestoreStateEqualTargetState = function (state, prepareDataFunc, getDataFunc) {
                  var match = Curry._1(prepareDataFunc, state);
                  var state$1 = match[0];
                  var currentState = MainStateTool$Wonderjs.createNewCompleteStateWithRenderConfig(sandbox);
                  var match$1 = Curry._1(prepareDataFunc, [currentState]);
                  MainStateTool$Wonderjs.restore(match$1[0], state$1);
                  return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](Curry._1(getDataFunc, MainStateTool$Wonderjs.unsafeGetState(/* () */0))), Curry._1(getDataFunc, state$1));
                };
                describe("restore meshRenderer record to target state", (function () {
                        var _prepare = function (state) {
                          var match = _prepareMeshRendererData(state);
                          var state$1 = AllMaterialTool$Wonderjs.prepareForInit(match[0]);
                          var match$1 = MeshRendererTool$Wonderjs.createBasicMaterialGameObject(MainStateTool$Wonderjs.createNewCompleteState(sandbox));
                          var currentState = AllMaterialTool$Wonderjs.pregetGLSLData(match$1[0]);
                          return /* tuple */[
                                  /* tuple */[
                                    state$1,
                                    match[1],
                                    match[2],
                                    match[3],
                                    match[4],
                                    match[5],
                                    match[6]
                                  ],
                                  /* tuple */[
                                    currentState,
                                    match$1[1],
                                    match$1[2]
                                  ]
                                ];
                        };
                        Wonder_jest.test("set restored state to stateData", (function () {
                                var match = _prepare(state);
                                var currentState = MainStateTool$Wonderjs.restore(match[1][0], match[0][0]);
                                return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](MainStateTool$Wonderjs.unsafeGetState(/* () */0)), currentState);
                              }));
                        Wonder_jest.test("change restored state should affect source state", (function () {
                                var match = _prepare(state);
                                var state$1 = match[0][0];
                                MainStateTool$Wonderjs.restore(match[1][0], state$1);
                                var match$1 = MeshRendererTool$Wonderjs.createBasicMaterialGameObject(MainStateTool$Wonderjs.createNewCompleteState(sandbox));
                                return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](MeshRendererAPI$Wonderjs.unsafeGetMeshRendererGameObject(match$1[2], state$1)), match$1[1]);
                              }));
                        return Wonder_jest.test("changing restored state which is restored from deep copied state shouldn't affect source state", (function () {
                                      var match = _prepare(state);
                                      var match$1 = match[0];
                                      var state$1 = match$1[0];
                                      var currentState = MainStateTool$Wonderjs.restore(match[1][0], MainStateTool$Wonderjs.deepCopyForRestore(state$1));
                                      MeshRendererTool$Wonderjs.createBasicMaterialGameObject(currentState);
                                      return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](/* tuple */[
                                                      MeshRendererTool$Wonderjs.getMeshRendererRecord(state$1)[/* basicMaterialRenderGameObjectArray */1],
                                                      MeshRendererTool$Wonderjs.getMeshRendererRecord(state$1)[/* lightMaterialRenderGameObjectArray */2]
                                                    ]), /* tuple */[
                                                  /* array */[match$1[1]],
                                                  /* array */[match$1[2]]
                                                ]);
                                    }));
                      }));
                describe("restore transform record to target state", (function () {
                        var _test = function (state) {
                          var match = TransformTool$Wonderjs.getRecord(state);
                          var localToWorldMatrices = match[/* localToWorldMatrices */2];
                          var localPositions = match[/* localPositions */3];
                          return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](/* tuple */[
                                          localToWorldMatrices,
                                          localPositions
                                        ]), /* tuple */[
                                      new Float32Array(/* array */[
                                            1,
                                            0,
                                            0,
                                            0,
                                            0,
                                            1,
                                            0,
                                            0,
                                            0,
                                            0,
                                            1,
                                            0,
                                            1,
                                            2,
                                            3,
                                            1,
                                            1,
                                            0,
                                            0,
                                            0,
                                            0,
                                            1,
                                            0,
                                            0,
                                            0,
                                            0,
                                            1,
                                            0,
                                            3,
                                            6,
                                            13,
                                            1,
                                            1,
                                            0,
                                            0,
                                            0,
                                            0,
                                            1,
                                            0,
                                            0,
                                            0,
                                            0,
                                            1,
                                            0,
                                            0,
                                            0,
                                            0,
                                            1,
                                            1,
                                            0,
                                            0,
                                            0,
                                            0,
                                            1,
                                            0,
                                            0,
                                            0,
                                            0,
                                            1,
                                            0,
                                            0,
                                            0,
                                            0,
                                            1,
                                            1,
                                            0,
                                            0,
                                            0,
                                            0,
                                            1,
                                            0,
                                            0,
                                            0,
                                            0,
                                            1,
                                            0,
                                            0,
                                            0,
                                            0,
                                            1
                                          ]),
                                      new Float32Array(/* array */[
                                            1,
                                            2,
                                            3,
                                            2,
                                            4,
                                            10,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0
                                          ])
                                    ]);
                        };
                        Wonder_jest.test("test restore typeArrays", (function () {
                                state[0] = TestTool$Wonderjs.initWithJobConfigWithoutBuildFakeDom(sandbox, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[SettingTool$Wonderjs.buildBufferConfigStr(/* None */0, /* None */0, /* Some */[5], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* () */0)], /* None */0, /* None */0, /* () */0);
                                var match = _prepareTransformMatrixData(state);
                                var transform1 = match[4];
                                var state$1 = FakeGlTool$Wonderjs.setFakeGl(FakeGlTool$Wonderjs.buildFakeGl(sandbox, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* () */0), match[0]);
                                var state$2 = TransformTool$Wonderjs.update(transform1, state$1);
                                var state$3 = TransformTool$Wonderjs.update(match[5], state$2);
                                var copiedState = MainStateTool$Wonderjs.deepCopyForRestore(state$3);
                                var match$1 = GameObjectTool$Wonderjs.createGameObject(state$3);
                                TransformAPI$Wonderjs.setTransformLocalPosition(match$1[2], /* tuple */[
                                      -2,
                                      3,
                                      1
                                    ], match$1[0]);
                                var currentState = TransformAPI$Wonderjs.setTransformLocalPosition(transform1, /* tuple */[
                                      11,
                                      17,
                                      20
                                    ], state$3);
                                var currentState$1 = TransformTool$Wonderjs.update(transform1, currentState);
                                MainStateTool$Wonderjs.restore(currentState$1, copiedState);
                                return _test(MainStateTool$Wonderjs.unsafeGetState(/* () */0));
                              }));
                        describe("test restore to the same state", (function () {
                                return Wonder_jest.test("should not change typeArrays", (function () {
                                              state[0] = TestTool$Wonderjs.initWithJobConfigWithoutBuildFakeDom(sandbox, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[SettingTool$Wonderjs.buildBufferConfigStr(/* None */0, /* None */0, /* Some */[5], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* () */0)], /* None */0, /* None */0, /* () */0);
                                              var match = _prepareTransformMatrixData(state);
                                              var state$1 = FakeGlTool$Wonderjs.setFakeGl(FakeGlTool$Wonderjs.buildFakeGl(sandbox, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* () */0), match[0]);
                                              var state$2 = TransformTool$Wonderjs.update(match[4], state$1);
                                              var state$3 = TransformTool$Wonderjs.update(match[5], state$2);
                                              MainStateTool$Wonderjs.restore(state$3, state$3);
                                              return _test(MainStateTool$Wonderjs.unsafeGetState(/* () */0));
                                            }));
                              }));
                        return /* () */0;
                      }));
                describe("restore customGeometry record to target state", (function () {
                        var _prepare = function () {
                          var state = TestTool$Wonderjs.initWithJobConfigWithoutBuildFakeDom(sandbox, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[SettingTool$Wonderjs.buildBufferConfigStr(/* Some */[4], /* Some */[3], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* () */0)], /* None */0, /* None */0, /* () */0);
                          var match = CustomGeometryTool$Wonderjs.createGameObjectAndSetPointData(state);
                          var state$1 = FakeGlTool$Wonderjs.setFakeGl(FakeGlTool$Wonderjs.buildFakeGl(sandbox, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* () */0), match[0]);
                          var copiedState = MainStateTool$Wonderjs.deepCopyForRestore(state$1);
                          var match$1 = CustomGeometryTool$Wonderjs.createGameObject(state$1);
                          var geometry2 = match$1[2];
                          var match$2 = CustomGeometryTool$Wonderjs.createGameObject(state$1);
                          var geometry3 = match$2[2];
                          var vertices2 = new Float32Array(/* array */[
                                2,
                                3,
                                40,
                                1,
                                3,
                                5,
                                3,
                                4,
                                11
                              ]);
                          var texCoords2 = new Float32Array(/* array */[
                                1,
                                0.5,
                                0.2,
                                0.3,
                                0.3,
                                0.5
                              ]);
                          var normals2 = new Float32Array(/* array */[
                                3,
                                2,
                                4,
                                5,
                                6,
                                7,
                                2.5,
                                1.5,
                                0
                              ]);
                          var indices2 = new Uint16Array(/* array */[
                                0,
                                1,
                                2
                              ]);
                          var currentState = CustomGeometryAPI$Wonderjs.setCustomGeometryIndices(geometry2, indices2, CustomGeometryAPI$Wonderjs.setCustomGeometryNormals(geometry3, normals2, CustomGeometryAPI$Wonderjs.setCustomGeometryTexCoords(geometry2, texCoords2, CustomGeometryAPI$Wonderjs.setCustomGeometryVertices(geometry2, vertices2, match$2[0]))));
                          return /* tuple */[
                                  /* tuple */[
                                    currentState,
                                    copiedState
                                  ],
                                  /* tuple */[
                                    match[2],
                                    geometry2,
                                    geometry3
                                  ]
                                ];
                        };
                        Wonder_jest.test("test restore typeArrays", (function () {
                                var match = _prepare(/* () */0);
                                var match$1 = match[0];
                                MainStateTool$Wonderjs.restore(match$1[0], match$1[1]);
                                var match$2 = CustomGeometryTool$Wonderjs.getRecord(MainStateTool$Wonderjs.unsafeGetState(/* () */0));
                                return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](/* tuple */[
                                                match$2[/* vertices */2],
                                                match$2[/* texCoords */3],
                                                match$2[/* normals */4],
                                                match$2[/* indices */5]
                                              ]), /* tuple */[
                                            new Float32Array(/* array */[
                                                  10,
                                                  0,
                                                  0,
                                                  0,
                                                  0,
                                                  0,
                                                  0,
                                                  0,
                                                  0,
                                                  0,
                                                  0,
                                                  0
                                                ]),
                                            new Float32Array(/* array */[
                                                  0.5,
                                                  0,
                                                  0,
                                                  0,
                                                  0,
                                                  0,
                                                  0,
                                                  0
                                                ]),
                                            new Float32Array(/* array */[
                                                  1,
                                                  0,
                                                  0,
                                                  0,
                                                  0,
                                                  0,
                                                  0,
                                                  0,
                                                  0,
                                                  0,
                                                  0,
                                                  0
                                                ]),
                                            new Uint16Array(/* array */[
                                                  2,
                                                  0,
                                                  0,
                                                  0
                                                ])
                                          ]);
                              }));
                        return Wonder_jest.test("test set point after restore", (function () {
                                      var match = _prepare(/* () */0);
                                      var geometry3 = match[1][2];
                                      var match$1 = match[0];
                                      var restoredState = MainStateTool$Wonderjs.restore(match$1[0], match$1[1]);
                                      var vertices3 = new Float32Array(/* array */[
                                            3,
                                            4,
                                            11
                                          ]);
                                      var restoredState$1 = CustomGeometryAPI$Wonderjs.setCustomGeometryVertices(geometry3, vertices3, restoredState);
                                      var vertices = CustomGeometryAPI$Wonderjs.getCustomGeometryVertices(geometry3, restoredState$1);
                                      return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](vertices), vertices3);
                                    }));
                      }));
                describe("restore material record to target state", (function () {
                        describe("test basic material", (function () {
                                return Wonder_jest.test("test restore typeArrays", (function () {
                                              state[0] = TestTool$Wonderjs.initWithJobConfigWithoutBuildFakeDom(sandbox, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[SettingTool$Wonderjs.buildBufferConfigStr(/* None */0, /* None */0, /* None */0, /* Some */[4], /* None */0, /* Some */[1], /* None */0, /* None */0, /* None */0, /* None */0, /* () */0)], /* None */0, /* None */0, /* () */0);
                                              var match = _prepareBasicMaterialData(state);
                                              var state$1 = FakeGlTool$Wonderjs.setFakeGl(FakeGlTool$Wonderjs.buildFakeGl(sandbox, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* () */0), match[0]);
                                              var copiedState = MainStateTool$Wonderjs.deepCopyForRestore(state$1);
                                              var match$1 = BasicMaterialTool$Wonderjs.createGameObject(state$1);
                                              var material4 = match$1[2];
                                              var currentState = BasicMaterialAPI$Wonderjs.setBasicMaterialColor(material4, /* array */[
                                                    1,
                                                    0.1,
                                                    1
                                                  ], match$1[0]);
                                              var match$2 = BasicSourceTextureAPI$Wonderjs.createBasicSourceTexture(currentState);
                                              var match$3 = BasicSourceTextureAPI$Wonderjs.createBasicSourceTexture(match$2[0]);
                                              var currentState$1 = BasicMaterialAPI$Wonderjs.setBasicMaterialMap(material4, match$3[1], match$3[0]);
                                              var currentState$2 = AllMaterialTool$Wonderjs.pregetGLSLData(currentState$1);
                                              MainStateTool$Wonderjs.restore(currentState$2, copiedState);
                                              var defaultUnit = BasicSourceTextureTool$Wonderjs.getDefaultUnit(/* () */0);
                                              var match$4 = BasicMaterialTool$Wonderjs.getRecord(MainStateTool$Wonderjs.unsafeGetState(/* () */0));
                                              return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](/* tuple */[
                                                              match$4[/* colors */3],
                                                              match$4[/* textureIndices */4],
                                                              match$4[/* mapUnits */5]
                                                            ]), /* tuple */[
                                                          new Float32Array(/* array */[
                                                                1,
                                                                1,
                                                                1,
                                                                1,
                                                                0.5,
                                                                0,
                                                                1,
                                                                1,
                                                                1,
                                                                1,
                                                                1,
                                                                1
                                                              ]),
                                                          new Uint32Array(/* array */[
                                                                0,
                                                                0,
                                                                0,
                                                                0
                                                              ]),
                                                          new Uint8Array(/* array */[
                                                                defaultUnit,
                                                                defaultUnit,
                                                                defaultUnit,
                                                                defaultUnit
                                                              ])
                                                        ]);
                                            }));
                              }));
                        describe("test light material", (function () {
                                return Wonder_jest.test("test restore typeArrays", (function () {
                                              state[0] = TestTool$Wonderjs.initWithJobConfigWithoutBuildFakeDom(sandbox, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[SettingTool$Wonderjs.buildBufferConfigStr(/* None */0, /* None */0, /* None */0, /* None */0, /* Some */[4], /* Some */[1], /* None */0, /* None */0, /* None */0, /* None */0, /* () */0)], /* None */0, /* None */0, /* () */0);
                                              var match = _prepareLightMaterialData(state);
                                              var state$1 = FakeGlTool$Wonderjs.setFakeGl(FakeGlTool$Wonderjs.buildFakeGl(sandbox, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* () */0), match[0]);
                                              var copiedState = MainStateTool$Wonderjs.deepCopyForRestore(state$1);
                                              var match$1 = LightMaterialTool$Wonderjs.createGameObject(state$1);
                                              var material4 = match$1[2];
                                              var currentState = LightMaterialAPI$Wonderjs.setLightMaterialDiffuseColor(material4, /* array */[
                                                    1,
                                                    0.1,
                                                    1
                                                  ], match$1[0]);
                                              var currentState$1 = LightMaterialAPI$Wonderjs.setLightMaterialSpecularColor(material4, /* array */[
                                                    0.5,
                                                    0.2,
                                                    0
                                                  ], currentState);
                                              LightMaterialTool$Wonderjs.createAndSetMaps(material4, state$1);
                                              var currentState$2 = AllMaterialTool$Wonderjs.pregetGLSLData(currentState$1);
                                              MainStateTool$Wonderjs.restore(currentState$2, copiedState);
                                              var defaultUnit = BasicSourceTextureTool$Wonderjs.getDefaultUnit(/* () */0);
                                              var match$2 = LightMaterialTool$Wonderjs.getRecord(MainStateTool$Wonderjs.unsafeGetState(/* () */0));
                                              return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](/* tuple */[
                                                              match$2[/* diffuseColors */3],
                                                              match$2[/* specularColors */4],
                                                              match$2[/* textureIndices */6],
                                                              match$2[/* diffuseMapUnits */7],
                                                              match$2[/* specularMapUnits */8]
                                                            ]), /* tuple */[
                                                          new Float32Array(/* array */[
                                                                1,
                                                                1,
                                                                1,
                                                                1,
                                                                0.5,
                                                                0,
                                                                1,
                                                                1,
                                                                1,
                                                                1,
                                                                1,
                                                                1
                                                              ]),
                                                          new Float32Array(/* array */[
                                                                1,
                                                                1,
                                                                1,
                                                                0,
                                                                1,
                                                                0.5,
                                                                1,
                                                                1,
                                                                1,
                                                                1,
                                                                1,
                                                                1
                                                              ]),
                                                          new Uint32Array(/* array */[
                                                                0,
                                                                0,
                                                                0,
                                                                0
                                                              ]),
                                                          new Uint8Array(/* array */[
                                                                defaultUnit,
                                                                defaultUnit,
                                                                defaultUnit,
                                                                defaultUnit
                                                              ]),
                                                          new Uint8Array(/* array */[
                                                                defaultUnit,
                                                                defaultUnit,
                                                                defaultUnit,
                                                                defaultUnit
                                                              ])
                                                        ]);
                                            }));
                              }));
                        return /* () */0;
                      }));
                describe("restore light record to target state", (function () {
                        var _prepareLightData = function (createGameObjectFunc, state) {
                          var match = Curry._1(createGameObjectFunc, state[0]);
                          var match$1 = Curry._1(createGameObjectFunc, match[0]);
                          var state$1 = AllMaterialTool$Wonderjs.prepareForInit(match$1[0]);
                          var state$2 = FakeGlTool$Wonderjs.setFakeGl(FakeGlTool$Wonderjs.buildFakeGl(sandbox, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* () */0), state$1);
                          return /* tuple */[
                                  state$2,
                                  match[1],
                                  match$1[1],
                                  match[2],
                                  match$1[2]
                                ];
                        };
                        describe("test ambient light", (function () {
                                return Wonder_jest.test("test restore typeArrays", (function () {
                                              var match = _prepareLightData(AmbientLightTool$Wonderjs.createGameObject, state);
                                              var state$1 = AmbientLightAPI$Wonderjs.setAmbientLightColor(match[4], /* array */[
                                                    0,
                                                    0.5,
                                                    0
                                                  ], match[0]);
                                              var copiedState = MainStateTool$Wonderjs.deepCopyForRestore(state$1);
                                              var currentState = AmbientLightAPI$Wonderjs.setAmbientLightColor(match[3], /* array */[
                                                    0.5,
                                                    0.1,
                                                    1
                                                  ], state$1);
                                              var currentState$1 = AllMaterialTool$Wonderjs.pregetGLSLData(currentState);
                                              MainStateTool$Wonderjs.restore(currentState$1, copiedState);
                                              var match$1 = AmbientLightTool$Wonderjs.getRecord(MainStateTool$Wonderjs.unsafeGetState(/* () */0));
                                              return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](match$1[/* colors */2]), new Float32Array(/* array */[
                                                              1,
                                                              1,
                                                              1,
                                                              0,
                                                              0.5,
                                                              0,
                                                              1,
                                                              1,
                                                              1
                                                            ]));
                                            }));
                              }));
                        describe("test direction light", (function () {
                                return Wonder_jest.test("test restore typeArrays", (function () {
                                              var match = _prepareLightData(DirectionLightTool$Wonderjs.createGameObject, state);
                                              var light2 = match[4];
                                              var state$1 = DirectionLightAPI$Wonderjs.setDirectionLightColor(light2, /* array */[
                                                    0,
                                                    0.5,
                                                    0
                                                  ], match[0]);
                                              var copiedState = MainStateTool$Wonderjs.deepCopyForRestore(state$1);
                                              var match$1 = DirectionLightTool$Wonderjs.createGameObject(state$1);
                                              var match$2 = DirectionLightTool$Wonderjs.createGameObject(state$1);
                                              var light4 = match$2[2];
                                              var currentState = DirectionLightAPI$Wonderjs.setDirectionLightColor(match$1[2], /* array */[
                                                    1,
                                                    0.1,
                                                    0
                                                  ], match$2[0]);
                                              var currentState$1 = DirectionLightAPI$Wonderjs.setDirectionLightColor(light4, /* array */[
                                                    0,
                                                    0.5,
                                                    0.5
                                                  ], currentState);
                                              var currentState$2 = DirectionLightAPI$Wonderjs.setDirectionLightColor(match[3], /* array */[
                                                    0,
                                                    0.5,
                                                    1
                                                  ], currentState$1);
                                              var currentState$3 = DirectionLightAPI$Wonderjs.setDirectionLightIntensity(light2, 0.2, currentState$2);
                                              var currentState$4 = DirectionLightAPI$Wonderjs.setDirectionLightIntensity(light4, 0.5, currentState$3);
                                              var currentState$5 = AllMaterialTool$Wonderjs.pregetGLSLData(currentState$4);
                                              MainStateTool$Wonderjs.restore(currentState$5, copiedState);
                                              var match$3 = DirectionLightTool$Wonderjs.getRecord(MainStateTool$Wonderjs.unsafeGetState(/* () */0));
                                              return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](/* tuple */[
                                                              match$3[/* colors */2],
                                                              match$3[/* intensities */3]
                                                            ]), /* tuple */[
                                                          new Float32Array(/* array */[
                                                                1,
                                                                1,
                                                                1,
                                                                0,
                                                                0.5,
                                                                0,
                                                                1,
                                                                1,
                                                                1,
                                                                1,
                                                                1,
                                                                1
                                                              ]),
                                                          new Float32Array(/* array */[
                                                                1,
                                                                1,
                                                                1,
                                                                1
                                                              ])
                                                        ]);
                                            }));
                              }));
                        describe("test point light", (function () {
                                return Wonder_jest.test("test restore typeArrays", (function () {
                                              var match = _prepareLightData(PointLightTool$Wonderjs.createGameObject, state);
                                              var light2 = match[4];
                                              var state$1 = PointLightAPI$Wonderjs.setPointLightColor(light2, /* array */[
                                                    0,
                                                    0.5,
                                                    0
                                                  ], match[0]);
                                              var copiedState = MainStateTool$Wonderjs.deepCopyForRestore(state$1);
                                              var match$1 = PointLightTool$Wonderjs.createGameObject(state$1);
                                              var light3 = match$1[2];
                                              var match$2 = PointLightTool$Wonderjs.createGameObject(match$1[0]);
                                              var currentState = PointLightAPI$Wonderjs.setPointLightColor(light3, /* array */[
                                                    1,
                                                    0.1,
                                                    1
                                                  ], match$2[0]);
                                              var currentState$1 = PointLightAPI$Wonderjs.setPointLightColor(match$2[2], /* array */[
                                                    1,
                                                    0.2,
                                                    1
                                                  ], currentState);
                                              var currentState$2 = PointLightAPI$Wonderjs.setPointLightColor(match[3], /* array */[
                                                    0,
                                                    0,
                                                    1
                                                  ], currentState$1);
                                              var currentState$3 = PointLightAPI$Wonderjs.setPointLightRange(light2, 0.2, currentState$2);
                                              var currentState$4 = PointLightAPI$Wonderjs.setPointLightRange(light3, 0.5, currentState$3);
                                              var currentState$5 = AllMaterialTool$Wonderjs.pregetGLSLData(currentState$4);
                                              MainStateTool$Wonderjs.restore(currentState$5, copiedState);
                                              var match$3 = PointLightTool$Wonderjs.getRecord(MainStateTool$Wonderjs.unsafeGetState(/* () */0));
                                              return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](/* tuple */[
                                                              match$3[/* colors */2],
                                                              match$3[/* ranges */7]
                                                            ]), /* tuple */[
                                                          new Float32Array(/* array */[
                                                                1,
                                                                1,
                                                                1,
                                                                0,
                                                                0.5,
                                                                0,
                                                                1,
                                                                1,
                                                                1,
                                                                1,
                                                                1,
                                                                1
                                                              ]),
                                                          new Float32Array(/* array */[
                                                                65,
                                                                65,
                                                                65,
                                                                65
                                                              ])
                                                        ]);
                                            }));
                              }));
                        return /* () */0;
                      }));
                describe("restore texture record to target state", (function () {
                        describe("test restore basic source texture record", (function () {
                                return Wonder_jest.test("test restore typeArrays", (function () {
                                              state[0] = TestTool$Wonderjs.initWithJobConfigWithoutBuildFakeDom(sandbox, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[SettingTool$Wonderjs.buildBufferConfigStr(/* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[4], /* None */0, /* None */0, /* None */0, /* () */0)], /* None */0, /* None */0, /* () */0);
                                              var match = _prepareBasicSourceTextureData(state[0]);
                                              var state$1 = FakeGlTool$Wonderjs.setFakeGl(FakeGlTool$Wonderjs.buildFakeGl(sandbox, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* () */0), match[0]);
                                              var copiedState = MainStateTool$Wonderjs.deepCopyForRestore(state$1);
                                              var match$1 = BasicSourceTextureAPI$Wonderjs.createBasicSourceTexture(state$1);
                                              var currentState = BasicSourceTextureAPI$Wonderjs.setBasicSourceTextureWrapT(match$1[1], 1, match$1[0]);
                                              var currentState$1 = AllMaterialTool$Wonderjs.pregetGLSLData(currentState);
                                              MainStateTool$Wonderjs.restore(currentState$1, copiedState);
                                              var defaultWrapS = BasicSourceTextureTool$Wonderjs.getDefaultWrapS(/* () */0);
                                              var defaultWrapT = BasicSourceTextureTool$Wonderjs.getDefaultWrapT(/* () */0);
                                              var defaultMagFilter = BasicSourceTextureTool$Wonderjs.getDefaultMagFilter(/* () */0);
                                              var defaultMinFilter = BasicSourceTextureTool$Wonderjs.getDefaultMinFilter(/* () */0);
                                              var defaultFormat = BasicSourceTextureTool$Wonderjs.getDefaultFormat(/* () */0);
                                              var defaultType = BasicSourceTextureTool$Wonderjs.getDefaultType(/* () */0);
                                              var defaultIsNeedUpdate = BasicSourceTextureTool$Wonderjs.getDefaultIsNeedUpdate(/* () */0);
                                              var match$2 = BasicSourceTextureTool$Wonderjs.getRecord(MainStateTool$Wonderjs.unsafeGetState(/* () */0));
                                              return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](/* tuple */[
                                                              match$2[/* wrapSs */1],
                                                              match$2[/* wrapTs */2],
                                                              match$2[/* magFilters */3],
                                                              match$2[/* minFilters */4],
                                                              match$2[/* formats */5],
                                                              match$2[/* types */6],
                                                              match$2[/* isNeedUpdates */7]
                                                            ]), /* tuple */[
                                                          new Uint8Array(/* array */[
                                                                defaultWrapS,
                                                                1,
                                                                defaultWrapS,
                                                                defaultWrapS
                                                              ]),
                                                          new Uint8Array(/* array */[
                                                                defaultWrapT,
                                                                1,
                                                                defaultWrapT,
                                                                defaultWrapT
                                                              ]),
                                                          new Uint8Array(/* array */[
                                                                defaultMagFilter,
                                                                1,
                                                                defaultMagFilter,
                                                                defaultMagFilter
                                                              ]),
                                                          new Uint8Array(/* array */[
                                                                defaultMinFilter,
                                                                1,
                                                                defaultMinFilter,
                                                                defaultMinFilter
                                                              ]),
                                                          new Uint8Array(/* array */[
                                                                defaultFormat,
                                                                2,
                                                                defaultFormat,
                                                                defaultFormat
                                                              ]),
                                                          new Uint8Array(/* array */[
                                                                defaultType,
                                                                1,
                                                                defaultType,
                                                                defaultType
                                                              ]),
                                                          new Uint8Array(/* array */[
                                                                defaultIsNeedUpdate,
                                                                defaultIsNeedUpdate,
                                                                defaultIsNeedUpdate,
                                                                defaultIsNeedUpdate
                                                              ])
                                                        ]);
                                            }));
                              }));
                        describe("test restore arrayBufferView source texture record", (function () {
                                return Wonder_jest.test("test restore typeArrays", (function () {
                                              state[0] = TestTool$Wonderjs.initWithJobConfigWithoutBuildFakeDom(sandbox, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[SettingTool$Wonderjs.buildBufferConfigStr(/* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[4], /* None */0, /* None */0, /* () */0)], /* None */0, /* None */0, /* () */0);
                                              var match = _prepareArrayBufferViewSourceTextureData(state[0]);
                                              var state$1 = FakeGlTool$Wonderjs.setFakeGl(FakeGlTool$Wonderjs.buildFakeGl(sandbox, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* () */0), match[0]);
                                              var copiedState = MainStateTool$Wonderjs.deepCopyForRestore(state$1);
                                              var match$1 = ArrayBufferViewSourceTextureAPI$Wonderjs.createArrayBufferViewSourceTexture(state$1);
                                              var currentState = ArrayBufferViewSourceTextureAPI$Wonderjs.setArrayBufferViewSourceTextureWrapT(match$1[1], 1, match$1[0]);
                                              var currentState$1 = AllMaterialTool$Wonderjs.pregetGLSLData(currentState);
                                              MainStateTool$Wonderjs.restore(currentState$1, copiedState);
                                              var defaultWrapS = ArrayBufferViewSourceTextureTool$Wonderjs.getDefaultWrapS(/* () */0);
                                              var defaultWrapT = ArrayBufferViewSourceTextureTool$Wonderjs.getDefaultWrapT(/* () */0);
                                              var defaultMagFilter = ArrayBufferViewSourceTextureTool$Wonderjs.getDefaultMagFilter(/* () */0);
                                              var defaultMinFilter = ArrayBufferViewSourceTextureTool$Wonderjs.getDefaultMinFilter(/* () */0);
                                              var defaultFormat = ArrayBufferViewSourceTextureTool$Wonderjs.getDefaultFormat(/* () */0);
                                              var defaultType = ArrayBufferViewSourceTextureTool$Wonderjs.getDefaultType(/* () */0);
                                              var defaultIsNeedUpdate = ArrayBufferViewSourceTextureTool$Wonderjs.getDefaultIsNeedUpdate(/* () */0);
                                              var defaultWidth = ArrayBufferViewSourceTextureTool$Wonderjs.getDefaultWidth(/* () */0);
                                              var defaultHeight = ArrayBufferViewSourceTextureTool$Wonderjs.getDefaultHeight(/* () */0);
                                              var match$2 = ArrayBufferViewSourceTextureTool$Wonderjs.getRecord(MainStateTool$Wonderjs.unsafeGetState(/* () */0));
                                              return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](/* tuple */[
                                                              match$2[/* wrapSs */1],
                                                              match$2[/* wrapTs */2],
                                                              match$2[/* magFilters */3],
                                                              match$2[/* minFilters */4],
                                                              match$2[/* formats */5],
                                                              match$2[/* types */6],
                                                              match$2[/* isNeedUpdates */7],
                                                              match$2[/* widths */8],
                                                              match$2[/* heights */9]
                                                            ]), /* tuple */[
                                                          new Uint8Array(/* array */[
                                                                defaultWrapS,
                                                                1,
                                                                defaultWrapS,
                                                                defaultWrapS
                                                              ]),
                                                          new Uint8Array(/* array */[
                                                                defaultWrapT,
                                                                1,
                                                                defaultWrapT,
                                                                defaultWrapT
                                                              ]),
                                                          new Uint8Array(/* array */[
                                                                defaultMagFilter,
                                                                1,
                                                                defaultMagFilter,
                                                                defaultMagFilter
                                                              ]),
                                                          new Uint8Array(/* array */[
                                                                defaultMinFilter,
                                                                1,
                                                                defaultMinFilter,
                                                                defaultMinFilter
                                                              ]),
                                                          new Uint8Array(/* array */[
                                                                defaultFormat,
                                                                2,
                                                                defaultFormat,
                                                                defaultFormat
                                                              ]),
                                                          new Uint8Array(/* array */[
                                                                defaultType,
                                                                1,
                                                                defaultType,
                                                                defaultType
                                                              ]),
                                                          new Uint8Array(/* array */[
                                                                defaultIsNeedUpdate,
                                                                defaultIsNeedUpdate,
                                                                defaultIsNeedUpdate,
                                                                defaultIsNeedUpdate
                                                              ]),
                                                          new Uint16Array(/* array */[
                                                                defaultWidth,
                                                                2,
                                                                defaultWidth,
                                                                defaultWidth
                                                              ]),
                                                          new Uint16Array(/* array */[
                                                                defaultHeight,
                                                                4,
                                                                defaultHeight,
                                                                defaultHeight
                                                              ])
                                                        ]);
                                            }));
                              }));
                        return /* () */0;
                      }));
                describe("restore sourceInstance record to target state", (function () {
                        Wonder_jest.test("test restore typeArrays", (function () {
                                var state = TestTool$Wonderjs.initWithJobConfigWithoutBuildFakeDom(sandbox, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[SettingTool$Wonderjs.buildBufferConfigStr(/* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[3], /* Some */[3], /* () */0)], /* None */0, /* None */0, /* () */0);
                                var match = ObjectInstanceTool$Wonderjs.createObjectInstanceGameObjectArr(2, state);
                                var sourceInstance1 = match[2];
                                var state$1 = FakeGlTool$Wonderjs.setFakeGl(FakeGlTool$Wonderjs.buildFakeGl(sandbox, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* () */0), match[0]);
                                var match$1 = ObjectInstanceTool$Wonderjs.createObjectInstanceGameObjectArr(3, state$1);
                                var state$2 = StaticTransformTool$Wonderjs.markModelMatrixIsStatic(match$1[2], false, StaticTransformTool$Wonderjs.markModelMatrixIsStatic(sourceInstance1, true, match$1[0]));
                                var copiedState = MainStateTool$Wonderjs.deepCopyForRestore(state$2);
                                var match$2 = ObjectInstanceTool$Wonderjs.createObjectInstanceGameObjectArr(1, state$2);
                                var currentState = StaticTransformTool$Wonderjs.markModelMatrixIsStatic(sourceInstance1, false, StaticTransformTool$Wonderjs.markModelMatrixIsStatic(match$2[2], true, match$2[0]));
                                MainStateTool$Wonderjs.restore(currentState, copiedState);
                                var match$3 = SourceInstanceTool$Wonderjs.getRecord(MainStateTool$Wonderjs.unsafeGetState(/* () */0));
                                return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](/* tuple */[
                                                match$3[/* isTransformStatics */3],
                                                match$3[/* objectInstanceTransformCollections */4]
                                              ]), /* tuple */[
                                            new Uint8Array(/* array */[
                                                  1,
                                                  0,
                                                  1
                                                ]),
                                            new Uint32Array(/* array */[
                                                  1,
                                                  2,
                                                  0,
                                                  4,
                                                  5,
                                                  6,
                                                  0,
                                                  0,
                                                  0
                                                ])
                                          ]);
                              }));
                        Wonder_jest.test("add current state->sourceInstanceRecord->matrixFloat32ArrayMap typeArr to pool", (function () {
                                var state$1 = state[0];
                                var currentState = MainStateTool$Wonderjs.createNewCompleteState(sandbox);
                                var match = SourceInstanceTool$Wonderjs.getRecord(currentState);
                                var typeArr = new Float32Array(/* array */[1]);
                                SparseMapService$WonderCommonlib.set(0, typeArr, match[/* matrixFloat32ArrayMap */6]);
                                MainStateTool$Wonderjs.restore(currentState, state$1);
                                var match$1 = MainStateTool$Wonderjs.unsafeGetState(/* () */0)[/* typeArrayPoolRecord */36];
                                return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](SparseMapService$WonderCommonlib.unsafeGet(typeArr.length, match$1[/* float32ArrayPoolMap */0])), /* array */[typeArr]);
                              }));
                        return Wonder_jest.test("mark is-not-send-modelMatrixData", (function () {
                                      var state$1 = state[0];
                                      var match = SourceInstanceTool$Wonderjs.getRecord(state$1);
                                      SparseMapService$WonderCommonlib.set(1, false, SparseMapService$WonderCommonlib.set(0, true, match[/* isSendTransformMatrixDataMap */7]));
                                      MainStateTool$Wonderjs.restore(MainStateTool$Wonderjs.createNewCompleteState(sandbox), state$1);
                                      var match$1 = SourceInstanceTool$Wonderjs.getRecord(MainStateTool$Wonderjs.unsafeGetState(/* () */0));
                                      return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](match$1[/* isSendTransformMatrixDataMap */7]), /* array */[
                                                  false,
                                                  false
                                                ]);
                                    }));
                      }));
                Wonder_jest.test("restore basicCameraView record to target state", (function () {
                        return _testRestoreStateEqualTargetState(state, _prepareBasicCameraViewData, (function (state) {
                                      return state[/* basicCameraViewRecord */13];
                                    }));
                      }));
                return Wonder_jest.test("restore perspectiveCameraProjection record to target state", (function () {
                              return _testRestoreStateEqualTargetState(state, _preparePerspectiveCameraProjectionData, (function (state) {
                                            return state[/* perspectiveCameraProjectionRecord */14];
                                          }));
                            }));
              }));
        return /* () */0;
      }));

export {
  
}
/*  Not a pure module */
