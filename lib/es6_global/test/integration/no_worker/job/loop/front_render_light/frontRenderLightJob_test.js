// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as $$Array                                              from "../../../../../../../../node_modules/bs-platform/lib/es6/array.js";
import * as Curry                                                from "../../../../../../../../node_modules/bs-platform/lib/es6/curry.js";
import * as Sinon                                                from "../../../../../../../../node_modules/wonder-bs-sinon/lib/es6_global/src/sinon.js";
import * as Sinon$1                                              from "sinon";
import * as Caml_array                                           from "../../../../../../../../node_modules/bs-platform/lib/es6/caml_array.js";
import * as Caml_int32                                           from "../../../../../../../../node_modules/bs-platform/lib/es6/caml_int32.js";
import * as Wonder_jest                                          from "../../../../../../../../node_modules/wonder-bs-jest/lib/es6_global/src/wonder_jest.js";
import * as SinonTool$Wonderjs                                   from "../../../tool/sinon/SinonTool.js";
import * as CameraTool$Wonderjs                                  from "../../../../../tool/service/camera/CameraTool.js";
import * as FakeGlTool$Wonderjs                                  from "../../../../../tool/gl/FakeGlTool.js";
import * as ArrayService$Wonderjs                                from "../../../../../../src/service/atom/ArrayService.js";
import * as DirectorTool$Wonderjs                                from "../../../../../tool/core/DirectorTool.js";
import * as GeometryTool$Wonderjs                                from "../../../../../tool/service/geometry/GeometryTool.js";
import * as TransformAPI$Wonderjs                                from "../../../../../../src/api/TransformAPI.js";
import * as GameObjectAPI$Wonderjs                               from "../../../../../../src/api/GameObjectAPI.js";
import * as MainStateTool$Wonderjs                               from "../../../../../tool/service/state/MainStateTool.js";
import * as PointLightAPI$Wonderjs                               from "../../../../../../src/api/light/PointLightAPI.js";
import * as BoxGeometryAPI$Wonderjs                              from "../../../../../../src/api/geometry/BoxGeometryAPI.js";
import * as GLSLSenderTool$Wonderjs                              from "../../../../../tool/service/sender/GLSLSenderTool.js";
import * as GameObjectTool$Wonderjs                              from "../../../../../tool/service/gameObject/GameObjectTool.js";
import * as PointLightTool$Wonderjs                              from "../../../../../tool/service/light/PointLightTool.js";
import * as RenderJobsTool$Wonderjs                              from "../../../../../tool/job/no_worker/loop/RenderJobsTool.js";
import * as AmbientLightAPI$Wonderjs                             from "../../../../../../src/api/light/AmbientLightAPI.js";
import * as BoxGeometryTool$Wonderjs                             from "../../../../../tool/service/geometry/BoxGeometryTool.js";
import * as AmbientLightTool$Wonderjs                            from "../../../../../tool/service/light/AmbientLightTool.js";
import * as GLSLLocationTool$Wonderjs                            from "../../../../../tool/service/location/GLSLLocationTool.js";
import * as LightMaterialAPI$Wonderjs                            from "../../../../../../src/api/material/LightMaterialAPI.js";
import * as DirectionLightAPI$Wonderjs                           from "../../../../../../src/api/light/DirectionLightAPI.js";
import * as LoopRenderJobTool$Wonderjs                           from "../../../../../tool/job/no_worker/loop/LoopRenderJobTool.js";
import * as DirectionLightTool$Wonderjs                          from "../../../../../tool/service/light/DirectionLightTool.js";
import * as FrontRenderLightJobTool$Wonderjs                     from "../../../../../tool/job/no_worker/loop/FrontRenderLightJobTool.js";
import * as CreateRenderStateMainService$Wonderjs                from "../../../../../../src/service/state/main/render/CreateRenderStateMainService.js";
import * as PerspectiveCameraProjectionTool$Wonderjs             from "../../../../../tool/service/camera/PerspectiveCameraProjectionTool.js";
import * as FrontRenderLightForNoWorkerAndWorkerJobTool$Wonderjs from "../../../../tool/job/FrontRenderLightForNoWorkerAndWorkerJobTool.js";

describe("test front render light job", (function () {
        var sandbox = Sinon.getSandboxDefaultVal(/* () */0);
        var state = [MainStateTool$Wonderjs.createState(/* () */0)];
        beforeEach((function () {
                sandbox[0] = Sinon$1.sandbox.create();
                state[0] = RenderJobsTool$Wonderjs.initWithJobConfig(sandbox, LoopRenderJobTool$Wonderjs.buildNoWorkerJobConfig(/* () */0));
                return /* () */0;
              }));
        afterEach((function () {
                return Curry._1(Sinon.restoreSandbox, sandbox[0]);
              }));
        describe("use program", (function () {
                var _prepare = FrontRenderLightForNoWorkerAndWorkerJobTool$Wonderjs.prepareForUseProgramCase;
                Wonder_jest.test("test use", (function () {
                        var match = RenderJobsTool$Wonderjs.prepareForUseProgramCase(sandbox, _prepare, state[0]);
                        DirectorTool$Wonderjs.runWithDefaultTime(RenderJobsTool$Wonderjs.init(match[0]));
                        return Sinon.toCalledWith(/* array */[match[1]], Wonder_jest.Expect[/* expect */0](match[2]));
                      }));
                return Wonder_jest.test("if the program is already used, not use again", (function () {
                              var match = RenderJobsTool$Wonderjs.prepareForUseProgramCase(sandbox, _prepare, state[0]);
                              var state$1 = RenderJobsTool$Wonderjs.init(match[0]);
                              var state$2 = DirectorTool$Wonderjs.runWithDefaultTime(state$1);
                              DirectorTool$Wonderjs.runWithDefaultTime(state$2);
                              return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](Sinon.getCallCount(match[2])), 1);
                            }));
              }));
        describe("send attribute data", (function () {
                var _prepare = function (sandbox, state) {
                  var match = FrontRenderLightJobTool$Wonderjs.prepareGameObject(sandbox, state);
                  var match$1 = AmbientLightTool$Wonderjs.createGameObject(match[0]);
                  return CameraTool$Wonderjs.createCameraGameObject(match$1[0])[0];
                };
                describe("init vbo buffers when first send", (function () {
                        var _prepare = function (sandbox, state) {
                          var match = FrontRenderLightJobTool$Wonderjs.prepareGameObject(sandbox, state);
                          var match$1 = CameraTool$Wonderjs.createCameraGameObject(match[0]);
                          return /* tuple */[
                                  match$1[0],
                                  match[2]
                                ];
                        };
                        Wonder_jest.test("create buffers", (function () {
                                var match = _prepare(sandbox, state[0]);
                                var createBuffer = Sinon.createEmptyStubWithJsObjSandbox(sandbox);
                                var state$1 = FakeGlTool$Wonderjs.setFakeGl(FakeGlTool$Wonderjs.buildFakeGl(sandbox, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[createBuffer], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* () */0), match[0]);
                                DirectorTool$Wonderjs.runWithDefaultTime(RenderJobsTool$Wonderjs.init(state$1));
                                return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](Sinon.getCallCount(createBuffer)), 3);
                              }));
                        describe("init vertex buffer", (function () {
                                Wonder_jest.test("bufferData", (function () {
                                        var match = _prepare(sandbox, state[0]);
                                        var bufferData = Sinon.createEmptyStubWithJsObjSandbox(sandbox);
                                        var state$1 = FakeGlTool$Wonderjs.setFakeGl(FakeGlTool$Wonderjs.buildFakeGl(sandbox, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[1], /* None */0, /* None */0, /* Some */[2], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[bufferData], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* () */0), match[0]);
                                        var state$2 = DirectorTool$Wonderjs.runWithDefaultTime(RenderJobsTool$Wonderjs.init(state$1));
                                        var vertices = BoxGeometryAPI$Wonderjs.getBoxGeometryVertices(state$2);
                                        return Sinon.toCalledOnce(Wonder_jest.Expect[/* expect */0](Sinon.withThreeArgs(1, vertices, 2, bufferData)));
                                      }));
                                return Wonder_jest.test("bind buffer and unbind buffer", (function () {
                                              var match = _prepare(sandbox, state[0]);
                                              var createBuffer = Sinon.returns(10, Sinon.createEmptyStubWithJsObjSandbox(sandbox));
                                              var bindBuffer = Sinon.createEmptyStubWithJsObjSandbox(sandbox);
                                              var bufferData = Sinon.createEmptyStubWithJsObjSandbox(sandbox);
                                              var state$1 = FakeGlTool$Wonderjs.setFakeGl(FakeGlTool$Wonderjs.buildFakeGl(sandbox, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[1], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[bindBuffer], /* None */0, /* Some */[createBuffer], /* Some */[bufferData], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* () */0), match[0]);
                                              DirectorTool$Wonderjs.runWithDefaultTime(RenderJobsTool$Wonderjs.init(state$1));
                                              return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](/* tuple */[
                                                              Sinon.calledBefore(Sinon.withTwoArgs(1, 10, bindBuffer), bufferData),
                                                              Sinon.calledAfter(Sinon.withTwoArgs(1, null, bindBuffer), bufferData)
                                                            ]), /* tuple */[
                                                          /* true */1,
                                                          /* true */1
                                                        ]);
                                            }));
                              }));
                        describe("init normal buffer", (function () {
                                return Wonder_jest.test("bufferData", (function () {
                                              var match = _prepare(sandbox, state[0]);
                                              var bufferData = Sinon.createEmptyStubWithJsObjSandbox(sandbox);
                                              var state$1 = FakeGlTool$Wonderjs.setFakeGl(FakeGlTool$Wonderjs.buildFakeGl(sandbox, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[1], /* None */0, /* None */0, /* Some */[2], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[bufferData], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* () */0), match[0]);
                                              var state$2 = DirectorTool$Wonderjs.runWithDefaultTime(RenderJobsTool$Wonderjs.init(state$1));
                                              var normals = BoxGeometryAPI$Wonderjs.getBoxGeometryNormals(state$2);
                                              return Sinon.toCalledOnce(Wonder_jest.Expect[/* expect */0](Sinon.withThreeArgs(1, normals, 2, bufferData)));
                                            }));
                              }));
                        describe("init index buffer", (function () {
                                Wonder_jest.test("bufferData", (function () {
                                        var match = _prepare(sandbox, state[0]);
                                        var bufferData = Sinon.createEmptyStubWithJsObjSandbox(sandbox);
                                        var state$1 = FakeGlTool$Wonderjs.setFakeGl(FakeGlTool$Wonderjs.buildFakeGl(sandbox, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[1], /* None */0, /* Some */[2], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[bufferData], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* () */0), match[0]);
                                        var state$2 = DirectorTool$Wonderjs.runWithDefaultTime(RenderJobsTool$Wonderjs.init(state$1));
                                        var indices = BoxGeometryAPI$Wonderjs.getBoxGeometryIndices(state$2);
                                        return Sinon.toCalledOnce(Wonder_jest.Expect[/* expect */0](Sinon.withThreeArgs(1, indices, 2, bufferData)));
                                      }));
                                return Wonder_jest.test("bind buffer and unbind buffer", (function () {
                                              var match = _prepare(sandbox, state[0]);
                                              var createBuffer = Sinon.returns(10, Sinon.createEmptyStubWithJsObjSandbox(sandbox));
                                              var bindBuffer = Sinon.createEmptyStubWithJsObjSandbox(sandbox);
                                              var bufferData = Sinon.createEmptyStubWithJsObjSandbox(sandbox);
                                              var state$1 = FakeGlTool$Wonderjs.setFakeGl(FakeGlTool$Wonderjs.buildFakeGl(sandbox, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[5], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[bindBuffer], /* None */0, /* Some */[createBuffer], /* Some */[bufferData], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* () */0), match[0]);
                                              DirectorTool$Wonderjs.runWithDefaultTime(RenderJobsTool$Wonderjs.init(state$1));
                                              return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](/* tuple */[
                                                              Sinon.calledBefore(Sinon.withTwoArgs(5, 10, bindBuffer), bufferData),
                                                              Sinon.calledAfter(Sinon.withTwoArgs(5, null, bindBuffer), Sinon.withOneArg(5, bufferData))
                                                            ]), /* tuple */[
                                                          /* true */1,
                                                          /* true */1
                                                        ]);
                                            }));
                              }));
                        return /* () */0;
                      }));
                describe("send buffer", (function () {
                        describe("optimize", (function () {
                                var _prepare = function (sandbox, state) {
                                  var match = FrontRenderLightJobTool$Wonderjs.prepareGameObject(sandbox, state);
                                  var match$1 = AmbientLightTool$Wonderjs.createGameObject(match[0]);
                                  var match$2 = CameraTool$Wonderjs.createCameraGameObject(match$1[0]);
                                  return /* tuple */[
                                          match$2[0],
                                          match[2]
                                        ];
                                };
                                Wonder_jest.test("if lastSendGeometry === geometryIndex, not send", (function () {
                                        var match = _prepare(sandbox, state[0]);
                                        var match$1 = FrontRenderLightJobTool$Wonderjs.prepareGameObjectWithSharedGeometry(sandbox, match[1], match[0]);
                                        var vertexAttribPointer = Sinon.createEmptyStubWithJsObjSandbox(sandbox);
                                        var state$1 = FakeGlTool$Wonderjs.setFakeGl(FakeGlTool$Wonderjs.buildFakeGl(sandbox, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[1], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[vertexAttribPointer], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* () */0), match$1[0]);
                                        var state$2 = RenderJobsTool$Wonderjs.init(state$1);
                                        DirectorTool$Wonderjs.runWithDefaultTime(state$2);
                                        return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](Sinon.getCallCount(vertexAttribPointer)), 2);
                                      }));
                                return Wonder_jest.test("else, send", (function () {
                                              var match = _prepare(sandbox, state[0]);
                                              var match$1 = FrontRenderLightJobTool$Wonderjs.prepareGameObject(sandbox, match[0]);
                                              var vertexAttribPointer = Sinon.createEmptyStubWithJsObjSandbox(sandbox);
                                              var state$1 = FakeGlTool$Wonderjs.setFakeGl(FakeGlTool$Wonderjs.buildFakeGl(sandbox, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[1], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[vertexAttribPointer], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* () */0), match$1[0]);
                                              var state$2 = RenderJobsTool$Wonderjs.init(state$1);
                                              var state$3 = DirectorTool$Wonderjs.runWithDefaultTime(state$2);
                                              DirectorTool$Wonderjs.runWithDefaultTime(state$3);
                                              return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](Sinon.getCallCount(vertexAttribPointer)), 8);
                                            }));
                              }));
                        describe("send a_position", (function () {
                                return Wonder_jest.test("attach buffer to attribute", (function () {
                                              var state$1 = _prepare(sandbox, state[0]);
                                              var vertexAttribPointer = Sinon.createEmptyStubWithJsObjSandbox(sandbox);
                                              var getAttribLocation = GLSLLocationTool$Wonderjs.getAttribLocation(/* Some */[0], sandbox, "a_position");
                                              var state$2 = FakeGlTool$Wonderjs.setFakeGl(FakeGlTool$Wonderjs.buildFakeGl(sandbox, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[1], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[getAttribLocation], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[vertexAttribPointer], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* () */0), state$1);
                                              DirectorTool$Wonderjs.runWithDefaultTime(RenderJobsTool$Wonderjs.init(state$2));
                                              return Sinon.toCalledWith(/* int array */[
                                                          0,
                                                          3,
                                                          1,
                                                          false,
                                                          0,
                                                          0
                                                        ], Wonder_jest.Expect[/* expect */0](vertexAttribPointer));
                                            }));
                              }));
                        describe("send a_normal", (function () {
                                return Wonder_jest.test("attach buffer to attribute", (function () {
                                              var state$1 = _prepare(sandbox, state[0]);
                                              var vertexAttribPointer = Sinon.createEmptyStubWithJsObjSandbox(sandbox);
                                              var createBuffer = SinonTool$Wonderjs.returnDifferentOnEachCall(Sinon.createEmptyStubWithJsObjSandbox(sandbox));
                                              var getAttribLocation = GLSLLocationTool$Wonderjs.getAttribLocation(/* Some */[0], sandbox, "a_normal");
                                              var state$2 = FakeGlTool$Wonderjs.setFakeGl(FakeGlTool$Wonderjs.buildFakeGl(sandbox, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[1], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[getAttribLocation], /* None */0, /* None */0, /* None */0, /* Some */[createBuffer], /* None */0, /* None */0, /* Some */[vertexAttribPointer], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* () */0), state$1);
                                              DirectorTool$Wonderjs.runWithDefaultTime(RenderJobsTool$Wonderjs.init(state$2));
                                              return Sinon.toCalledWith(/* int array */[
                                                          0,
                                                          3,
                                                          1,
                                                          false,
                                                          0,
                                                          0
                                                        ], Wonder_jest.Expect[/* expect */0](vertexAttribPointer));
                                            }));
                              }));
                        return /* () */0;
                      }));
                return /* () */0;
              }));
        describe("send uniform data", (function () {
                var _prepare = function (sandbox, state) {
                  var match = FrontRenderLightJobTool$Wonderjs.prepareGameObject(sandbox, state);
                  var match$1 = AmbientLightTool$Wonderjs.createGameObject(match[0]);
                  var match$2 = CameraTool$Wonderjs.createCameraGameObject(match$1[0]);
                  return /* tuple */[
                          match$2[0],
                          match[1],
                          match[3],
                          match$1[2],
                          match$2[2]
                        ];
                };
                describe("test sended record per shader", (function () {
                        var testSendShaderUniformMatrix4DataOnlyOnce = function (name, prepareSendUinformDataFunc) {
                          return RenderJobsTool$Wonderjs.testSendShaderUniformMatrix4DataOnlyOnce(sandbox, name, /* tuple */[
                                      prepareSendUinformDataFunc,
                                      FrontRenderLightJobTool$Wonderjs.prepareGameObject
                                    ], state);
                        };
                        GLSLSenderTool$Wonderjs.JudgeSendUniformData[/* testSendMatrix4 */1](sandbox, "u_vMatrix", (function (_, cameraTransform, _$1, state) {
                                return TransformAPI$Wonderjs.setTransformLocalPosition(cameraTransform, /* tuple */[
                                            10,
                                            2,
                                            3
                                          ], state);
                              }), new Float32Array(/* float array */[
                                  1,
                                  0,
                                  0,
                                  0,
                                  0,
                                  1,
                                  0,
                                  0,
                                  0,
                                  0,
                                  1,
                                  0,
                                  -10,
                                  -2,
                                  -3,
                                  1
                                ]), FrontRenderLightJobTool$Wonderjs.prepareGameObject, /* Some */[(function (prepareSendUniformData) {
                                  return testSendShaderUniformMatrix4DataOnlyOnce("u_vMatrix", prepareSendUniformData);
                                })], /* () */0);
                        GLSLSenderTool$Wonderjs.JudgeSendUniformData[/* testSendMatrix4 */1](sandbox, "u_pMatrix", (function (_, _$1, _$2, state) {
                                return state;
                              }), PerspectiveCameraProjectionTool$Wonderjs.getPMatrixOfCreateBasicCameraViewPerspectiveCamera(/* () */0), FrontRenderLightJobTool$Wonderjs.prepareGameObject, /* Some */[(function (prepareSendUniformData) {
                                  return testSendShaderUniformMatrix4DataOnlyOnce("u_pMatrix", prepareSendUniformData);
                                })], /* () */0);
                        GLSLSenderTool$Wonderjs.JudgeSendUniformData[/* testSendVector3 */4](sandbox, "u_cameraPos", (function (_, _$1, param, state) {
                                return TransformAPI$Wonderjs.setTransformLocalPosition(param[0], /* tuple */[
                                            10,
                                            2,
                                            3
                                          ], state);
                              }), /* :: */[
                              10,
                              /* :: */[
                                2,
                                /* :: */[
                                  3,
                                  /* [] */0
                                ]
                              ]
                            ], /* Some */[FrontRenderLightJobTool$Wonderjs.prepareGameObject], /* Some */[(function (prepareSendUniformData) {
                                  var name = "u_cameraPos";
                                  var prepareSendUinformDataFunc = prepareSendUniformData;
                                  return RenderJobsTool$Wonderjs.testSendShaderUniformVec3DataOnlyOnce(sandbox, name, /* tuple */[
                                              prepareSendUinformDataFunc,
                                              FrontRenderLightJobTool$Wonderjs.prepareGameObject
                                            ], state);
                                })], /* () */0);
                        describe("test send light record", (function () {
                                describe("test send ambient light record", (function () {
                                        var _setFakeGl = function (sandbox, state) {
                                          var uniform3f = Sinon.createEmptyStubWithJsObjSandbox(sandbox);
                                          var getUniformLocation = GLSLLocationTool$Wonderjs.getUniformLocation(/* Some */[0], sandbox, "u_ambient");
                                          var state$1 = FakeGlTool$Wonderjs.setFakeGl(FakeGlTool$Wonderjs.buildFakeGl(sandbox, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[getUniformLocation], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[uniform3f], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* () */0), state);
                                          return /* tuple */[
                                                  state$1,
                                                  0,
                                                  uniform3f
                                                ];
                                        };
                                        Wonder_jest.test("send u_ambient", (function () {
                                                var match = _prepare(sandbox, state[0]);
                                                var state$1 = AmbientLightAPI$Wonderjs.setAmbientLightColor(match[3], /* float array */[
                                                      1,
                                                      0,
                                                      0.5
                                                    ], match[0]);
                                                var match$1 = _setFakeGl(sandbox, state$1);
                                                DirectorTool$Wonderjs.runWithDefaultTime(RenderJobsTool$Wonderjs.init(match$1[0]));
                                                return Sinon.toCalledWith(/* float array */[
                                                            match$1[1],
                                                            1,
                                                            0,
                                                            0.5
                                                          ], Wonder_jest.Expect[/* expect */0](match$1[2]));
                                              }));
                                        Wonder_jest.test("send shader record only once", (function () {
                                                var match = _prepare(sandbox, state[0]);
                                                var match$1 = FrontRenderLightJobTool$Wonderjs.prepareGameObject(sandbox, match[0]);
                                                var state$1 = AmbientLightAPI$Wonderjs.setAmbientLightColor(match[3], /* float array */[
                                                      1,
                                                      0,
                                                      0.5
                                                    ], match$1[0]);
                                                var match$2 = _setFakeGl(sandbox, state$1);
                                                DirectorTool$Wonderjs.runWithDefaultTime(RenderJobsTool$Wonderjs.init(match$2[0]));
                                                return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](Sinon.getCallCount(Sinon.withOneArg(match$2[1], match$2[2]))), 1);
                                              }));
                                        return Wonder_jest.test("test send after dispose one", (function () {
                                                      var match = _prepare(sandbox, state[0]);
                                                      var light = match[3];
                                                      var state$1 = match[0];
                                                      var lightGameObject1 = AmbientLightAPI$Wonderjs.unsafeGetAmbientLightGameObject(light, state$1);
                                                      var match$1 = AmbientLightTool$Wonderjs.createGameObject(state$1);
                                                      var match$2 = AmbientLightTool$Wonderjs.createGameObject(match$1[0]);
                                                      var color1 = /* float array */[
                                                        1,
                                                        0,
                                                        0.5
                                                      ];
                                                      var color2 = /* float array */[
                                                        0,
                                                        1,
                                                        0.5
                                                      ];
                                                      var color3 = /* float array */[
                                                        0,
                                                        0,
                                                        1
                                                      ];
                                                      var state$2 = AmbientLightAPI$Wonderjs.setAmbientLightColor(light, color1, match$2[0]);
                                                      var state$3 = AmbientLightAPI$Wonderjs.setAmbientLightColor(match$1[2], color2, state$2);
                                                      var state$4 = AmbientLightAPI$Wonderjs.setAmbientLightColor(match$2[2], color3, state$3);
                                                      var state$5 = GameObjectTool$Wonderjs.disposeGameObject(lightGameObject1, state$4);
                                                      var match$3 = _setFakeGl(sandbox, state$5);
                                                      var pos = match$3[1];
                                                      DirectorTool$Wonderjs.runWithDefaultTime(RenderJobsTool$Wonderjs.init(match$3[0]));
                                                      var stub = Sinon.withOneArg(pos, match$3[2]);
                                                      return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](/* tuple */[
                                                                      Sinon.getSpecificArg(0, stub),
                                                                      Sinon.getSpecificArg(1, stub)
                                                                    ]), /* tuple */[
                                                                  /* :: */[
                                                                    pos,
                                                                    $$Array.to_list(color3)
                                                                  ],
                                                                  /* :: */[
                                                                    pos,
                                                                    $$Array.to_list(color2)
                                                                  ]
                                                                ]);
                                                    }));
                                      }));
                                describe("test send direction light record", (function () {
                                        var _prepareFour = function (sandbox, state) {
                                          var match = FrontRenderLightJobTool$Wonderjs.prepareGameObject(sandbox, state);
                                          var match$1 = DirectionLightTool$Wonderjs.createGameObject(match[0]);
                                          var match$2 = DirectionLightTool$Wonderjs.createGameObject(match$1[0]);
                                          var match$3 = DirectionLightTool$Wonderjs.createGameObject(match$2[0]);
                                          var match$4 = DirectionLightTool$Wonderjs.createGameObject(match$3[0]);
                                          var match$5 = CameraTool$Wonderjs.createCameraGameObject(match$4[0]);
                                          return /* tuple */[
                                                  match$5[0],
                                                  /* tuple */[
                                                    match$1[1],
                                                    match$2[1],
                                                    match$3[1],
                                                    match$4[1]
                                                  ],
                                                  match[3],
                                                  /* tuple */[
                                                    match$1[2],
                                                    match$2[2],
                                                    match$3[2],
                                                    match$4[2]
                                                  ],
                                                  match$5[2]
                                                ];
                                        };
                                        describe("send structure record", (function () {
                                                describe("send position", (function () {
                                                        Wonder_jest.test("test one light", (function () {
                                                                var match = FrontRenderLightForNoWorkerAndWorkerJobTool$Wonderjs.prepareOneForDirectionLight(sandbox, state[0]);
                                                                var state$1 = match[0];
                                                                var state$2 = TransformAPI$Wonderjs.setTransformPosition(GameObjectAPI$Wonderjs.unsafeGetGameObjectTransformComponent(match[1], state$1), /* tuple */[
                                                                      1,
                                                                      2,
                                                                      3
                                                                    ], state$1);
                                                                var match$1 = FrontRenderLightForNoWorkerAndWorkerJobTool$Wonderjs.setFakeGlForLight(sandbox, /* array */["u_directionLights[0].position"], state$2);
                                                                DirectorTool$Wonderjs.runWithDefaultTime(RenderJobsTool$Wonderjs.init(match$1[0]));
                                                                return Sinon.toCalledWith(/* float array */[
                                                                            Caml_array.caml_array_get(match$1[1], 0),
                                                                            1,
                                                                            2,
                                                                            3
                                                                          ], Wonder_jest.Expect[/* expect */0](match$1[2][1]));
                                                              }));
                                                        return Wonder_jest.test("test four lights", (function () {
                                                                      var match = _prepareFour(sandbox, state[0]);
                                                                      var match$1 = match[1];
                                                                      var state$1 = match[0];
                                                                      var state$2 = TransformAPI$Wonderjs.setTransformPosition(GameObjectAPI$Wonderjs.unsafeGetGameObjectTransformComponent(match$1[3], state$1), /* tuple */[
                                                                            4,
                                                                            2,
                                                                            3
                                                                          ], TransformAPI$Wonderjs.setTransformPosition(GameObjectAPI$Wonderjs.unsafeGetGameObjectTransformComponent(match$1[2], state$1), /* tuple */[
                                                                                3,
                                                                                2,
                                                                                3
                                                                              ], TransformAPI$Wonderjs.setTransformPosition(GameObjectAPI$Wonderjs.unsafeGetGameObjectTransformComponent(match$1[1], state$1), /* tuple */[
                                                                                    2,
                                                                                    2,
                                                                                    3
                                                                                  ], TransformAPI$Wonderjs.setTransformPosition(GameObjectAPI$Wonderjs.unsafeGetGameObjectTransformComponent(match$1[0], state$1), /* tuple */[
                                                                                        1,
                                                                                        2,
                                                                                        3
                                                                                      ], state$1))));
                                                                      var match$2 = FrontRenderLightForNoWorkerAndWorkerJobTool$Wonderjs.setFakeGlForLight(sandbox, /* array */[
                                                                            "u_directionLights[0].position",
                                                                            "u_directionLights[1].position",
                                                                            "u_directionLights[2].position",
                                                                            "u_directionLights[3].position"
                                                                          ], state$2);
                                                                      var uniform3f = match$2[2][1];
                                                                      var posArr = match$2[1];
                                                                      DirectorTool$Wonderjs.runWithDefaultTime(RenderJobsTool$Wonderjs.init(match$2[0]));
                                                                      return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](/* tuple */[
                                                                                      Sinon.getArgs(Sinon.getCall(0, Sinon.withOneArg(Caml_array.caml_array_get(posArr, 0), uniform3f))),
                                                                                      Sinon.getArgs(Sinon.getCall(0, Sinon.withOneArg(Caml_array.caml_array_get(posArr, 1), uniform3f))),
                                                                                      Sinon.getArgs(Sinon.getCall(0, Sinon.withOneArg(Caml_array.caml_array_get(posArr, 2), uniform3f))),
                                                                                      Sinon.getArgs(Sinon.getCall(0, Sinon.withOneArg(Caml_array.caml_array_get(posArr, 3), uniform3f)))
                                                                                    ]), /* tuple */[
                                                                                  /* :: */[
                                                                                    Caml_array.caml_array_get(posArr, 0),
                                                                                    /* :: */[
                                                                                      1,
                                                                                      /* :: */[
                                                                                        2,
                                                                                        /* :: */[
                                                                                          3,
                                                                                          /* [] */0
                                                                                        ]
                                                                                      ]
                                                                                    ]
                                                                                  ],
                                                                                  /* :: */[
                                                                                    Caml_array.caml_array_get(posArr, 1),
                                                                                    /* :: */[
                                                                                      2,
                                                                                      /* :: */[
                                                                                        2,
                                                                                        /* :: */[
                                                                                          3,
                                                                                          /* [] */0
                                                                                        ]
                                                                                      ]
                                                                                    ]
                                                                                  ],
                                                                                  /* :: */[
                                                                                    Caml_array.caml_array_get(posArr, 2),
                                                                                    /* :: */[
                                                                                      3,
                                                                                      /* :: */[
                                                                                        2,
                                                                                        /* :: */[
                                                                                          3,
                                                                                          /* [] */0
                                                                                        ]
                                                                                      ]
                                                                                    ]
                                                                                  ],
                                                                                  /* :: */[
                                                                                    Caml_array.caml_array_get(posArr, 3),
                                                                                    /* :: */[
                                                                                      4,
                                                                                      /* :: */[
                                                                                        2,
                                                                                        /* :: */[
                                                                                          3,
                                                                                          /* [] */0
                                                                                        ]
                                                                                      ]
                                                                                    ]
                                                                                  ]
                                                                                ]);
                                                                    }));
                                                      }));
                                                describe("send color", (function () {
                                                        return Wonder_jest.test("test one light", (function () {
                                                                      var match = FrontRenderLightForNoWorkerAndWorkerJobTool$Wonderjs.prepareOneForDirectionLight(sandbox, state[0]);
                                                                      var color = /* float array */[
                                                                        1,
                                                                        0,
                                                                        0
                                                                      ];
                                                                      var state$1 = DirectionLightAPI$Wonderjs.setDirectionLightColor(match[3], color, match[0]);
                                                                      var match$1 = FrontRenderLightForNoWorkerAndWorkerJobTool$Wonderjs.setFakeGlForLight(sandbox, /* array */["u_directionLights[0].color"], state$1);
                                                                      DirectorTool$Wonderjs.runWithDefaultTime(RenderJobsTool$Wonderjs.init(match$1[0]));
                                                                      return Sinon.toCalledWith(/* float array */[Caml_array.caml_array_get(match$1[1], 0)].concat(color), Wonder_jest.Expect[/* expect */0](match$1[2][1]));
                                                                    }));
                                                      }));
                                                describe("send intensity", (function () {
                                                        return Wonder_jest.test("test one light", (function () {
                                                                      var match = FrontRenderLightForNoWorkerAndWorkerJobTool$Wonderjs.prepareOneForDirectionLight(sandbox, state[0]);
                                                                      var state$1 = DirectionLightAPI$Wonderjs.setDirectionLightIntensity(match[3], 2, match[0]);
                                                                      var match$1 = FrontRenderLightForNoWorkerAndWorkerJobTool$Wonderjs.setFakeGlForLight(sandbox, /* array */["u_directionLights[0].intensity"], state$1);
                                                                      DirectorTool$Wonderjs.runWithDefaultTime(RenderJobsTool$Wonderjs.init(match$1[0]));
                                                                      return Sinon.toCalledWith(ArrayService$Wonderjs.push(2, /* float array */[Caml_array.caml_array_get(match$1[1], 0)]), Wonder_jest.Expect[/* expect */0](match$1[2][0]));
                                                                    }));
                                                      }));
                                                return /* () */0;
                                              }));
                                        return /* () */0;
                                      }));
                                describe("test send point light record", (function () {
                                        var _prepareOne = function (sandbox, state) {
                                          var match = FrontRenderLightJobTool$Wonderjs.prepareGameObject(sandbox, state);
                                          var match$1 = PointLightTool$Wonderjs.createGameObject(match[0]);
                                          var match$2 = CameraTool$Wonderjs.createCameraGameObject(match$1[0]);
                                          return /* tuple */[
                                                  match$2[0],
                                                  match$1[1],
                                                  match[3],
                                                  match$1[2],
                                                  match$2[2]
                                                ];
                                        };
                                        describe("send structure record", (function () {
                                                describe("send position", (function () {
                                                        return Wonder_jest.test("test four lights", (function () {
                                                                      var match = FrontRenderLightForNoWorkerAndWorkerJobTool$Wonderjs.prepareFourForPointLight(sandbox, state[0]);
                                                                      var match$1 = match[1];
                                                                      var state$1 = match[0];
                                                                      var state$2 = TransformAPI$Wonderjs.setTransformPosition(GameObjectAPI$Wonderjs.unsafeGetGameObjectTransformComponent(match$1[3], state$1), /* tuple */[
                                                                            4,
                                                                            2,
                                                                            3
                                                                          ], TransformAPI$Wonderjs.setTransformPosition(GameObjectAPI$Wonderjs.unsafeGetGameObjectTransformComponent(match$1[2], state$1), /* tuple */[
                                                                                3,
                                                                                2,
                                                                                3
                                                                              ], TransformAPI$Wonderjs.setTransformPosition(GameObjectAPI$Wonderjs.unsafeGetGameObjectTransformComponent(match$1[1], state$1), /* tuple */[
                                                                                    2,
                                                                                    2,
                                                                                    3
                                                                                  ], TransformAPI$Wonderjs.setTransformPosition(GameObjectAPI$Wonderjs.unsafeGetGameObjectTransformComponent(match$1[0], state$1), /* tuple */[
                                                                                        1,
                                                                                        2,
                                                                                        3
                                                                                      ], state$1))));
                                                                      var match$2 = FrontRenderLightForNoWorkerAndWorkerJobTool$Wonderjs.setFakeGlForLight(sandbox, /* array */[
                                                                            "u_pointLights[0].position",
                                                                            "u_pointLights[1].position",
                                                                            "u_pointLights[2].position",
                                                                            "u_pointLights[3].position"
                                                                          ], state$2);
                                                                      var uniform3f = match$2[2][1];
                                                                      var posArr = match$2[1];
                                                                      DirectorTool$Wonderjs.runWithDefaultTime(RenderJobsTool$Wonderjs.init(match$2[0]));
                                                                      return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](/* tuple */[
                                                                                      Sinon.getArgs(Sinon.getCall(0, Sinon.withOneArg(Caml_array.caml_array_get(posArr, 0), uniform3f))),
                                                                                      Sinon.getArgs(Sinon.getCall(0, Sinon.withOneArg(Caml_array.caml_array_get(posArr, 1), uniform3f))),
                                                                                      Sinon.getArgs(Sinon.getCall(0, Sinon.withOneArg(Caml_array.caml_array_get(posArr, 2), uniform3f))),
                                                                                      Sinon.getArgs(Sinon.getCall(0, Sinon.withOneArg(Caml_array.caml_array_get(posArr, 3), uniform3f)))
                                                                                    ]), /* tuple */[
                                                                                  /* :: */[
                                                                                    Caml_array.caml_array_get(posArr, 0),
                                                                                    /* :: */[
                                                                                      1,
                                                                                      /* :: */[
                                                                                        2,
                                                                                        /* :: */[
                                                                                          3,
                                                                                          /* [] */0
                                                                                        ]
                                                                                      ]
                                                                                    ]
                                                                                  ],
                                                                                  /* :: */[
                                                                                    Caml_array.caml_array_get(posArr, 1),
                                                                                    /* :: */[
                                                                                      2,
                                                                                      /* :: */[
                                                                                        2,
                                                                                        /* :: */[
                                                                                          3,
                                                                                          /* [] */0
                                                                                        ]
                                                                                      ]
                                                                                    ]
                                                                                  ],
                                                                                  /* :: */[
                                                                                    Caml_array.caml_array_get(posArr, 2),
                                                                                    /* :: */[
                                                                                      3,
                                                                                      /* :: */[
                                                                                        2,
                                                                                        /* :: */[
                                                                                          3,
                                                                                          /* [] */0
                                                                                        ]
                                                                                      ]
                                                                                    ]
                                                                                  ],
                                                                                  /* :: */[
                                                                                    Caml_array.caml_array_get(posArr, 3),
                                                                                    /* :: */[
                                                                                      4,
                                                                                      /* :: */[
                                                                                        2,
                                                                                        /* :: */[
                                                                                          3,
                                                                                          /* [] */0
                                                                                        ]
                                                                                      ]
                                                                                    ]
                                                                                  ]
                                                                                ]);
                                                                    }));
                                                      }));
                                                describe("send color", (function () {
                                                        return Wonder_jest.test("test one light", (function () {
                                                                      var match = _prepareOne(sandbox, state[0]);
                                                                      var color = /* float array */[
                                                                        1,
                                                                        0,
                                                                        0
                                                                      ];
                                                                      var state$1 = PointLightAPI$Wonderjs.setPointLightColor(match[3], color, match[0]);
                                                                      var match$1 = FrontRenderLightForNoWorkerAndWorkerJobTool$Wonderjs.setFakeGlForLight(sandbox, /* array */["u_pointLights[0].color"], state$1);
                                                                      DirectorTool$Wonderjs.runWithDefaultTime(RenderJobsTool$Wonderjs.init(match$1[0]));
                                                                      return Sinon.toCalledWith(/* float array */[Caml_array.caml_array_get(match$1[1], 0)].concat(color), Wonder_jest.Expect[/* expect */0](match$1[2][1]));
                                                                    }));
                                                      }));
                                                describe("send intensity", (function () {
                                                        return Wonder_jest.test("test one light", (function () {
                                                                      var match = _prepareOne(sandbox, state[0]);
                                                                      var state$1 = PointLightAPI$Wonderjs.setPointLightIntensity(match[3], 2, match[0]);
                                                                      var match$1 = FrontRenderLightForNoWorkerAndWorkerJobTool$Wonderjs.setFakeGlForLight(sandbox, /* array */["u_pointLights[0].intensity"], state$1);
                                                                      DirectorTool$Wonderjs.runWithDefaultTime(RenderJobsTool$Wonderjs.init(match$1[0]));
                                                                      return Sinon.toCalledWith(ArrayService$Wonderjs.push(2, /* float array */[Caml_array.caml_array_get(match$1[1], 0)]), Wonder_jest.Expect[/* expect */0](match$1[2][0]));
                                                                    }));
                                                      }));
                                                describe("send constant", (function () {
                                                        return Wonder_jest.test("test one light", (function () {
                                                                      var match = _prepareOne(sandbox, state[0]);
                                                                      var state$1 = PointLightAPI$Wonderjs.setPointLightConstant(match[3], 2, match[0]);
                                                                      var match$1 = FrontRenderLightForNoWorkerAndWorkerJobTool$Wonderjs.setFakeGlForLight(sandbox, /* array */["u_pointLights[0].constant"], state$1);
                                                                      DirectorTool$Wonderjs.runWithDefaultTime(RenderJobsTool$Wonderjs.init(match$1[0]));
                                                                      return Sinon.toCalledWith(ArrayService$Wonderjs.push(2, /* float array */[Caml_array.caml_array_get(match$1[1], 0)]), Wonder_jest.Expect[/* expect */0](match$1[2][0]));
                                                                    }));
                                                      }));
                                                describe("send linear", (function () {
                                                        return Wonder_jest.test("test one light", (function () {
                                                                      var match = _prepareOne(sandbox, state[0]);
                                                                      var state$1 = PointLightAPI$Wonderjs.setPointLightLinear(match[3], 2, match[0]);
                                                                      var match$1 = FrontRenderLightForNoWorkerAndWorkerJobTool$Wonderjs.setFakeGlForLight(sandbox, /* array */["u_pointLights[0].linear"], state$1);
                                                                      DirectorTool$Wonderjs.runWithDefaultTime(RenderJobsTool$Wonderjs.init(match$1[0]));
                                                                      return Sinon.toCalledWith(ArrayService$Wonderjs.push(2, /* float array */[Caml_array.caml_array_get(match$1[1], 0)]), Wonder_jest.Expect[/* expect */0](match$1[2][0]));
                                                                    }));
                                                      }));
                                                describe("send quadratic", (function () {
                                                        return Wonder_jest.test("test one light", (function () {
                                                                      var match = _prepareOne(sandbox, state[0]);
                                                                      var state$1 = PointLightAPI$Wonderjs.setPointLightQuadratic(match[3], 2.5, match[0]);
                                                                      var match$1 = FrontRenderLightForNoWorkerAndWorkerJobTool$Wonderjs.setFakeGlForLight(sandbox, /* array */["u_pointLights[0].quadratic"], state$1);
                                                                      DirectorTool$Wonderjs.runWithDefaultTime(RenderJobsTool$Wonderjs.init(match$1[0]));
                                                                      return Sinon.toCalledWith(ArrayService$Wonderjs.push(2.5, /* float array */[Caml_array.caml_array_get(match$1[1], 0)]), Wonder_jest.Expect[/* expect */0](match$1[2][0]));
                                                                    }));
                                                      }));
                                                describe("send range", (function () {
                                                        return Wonder_jest.test("test one light", (function () {
                                                                      var match = _prepareOne(sandbox, state[0]);
                                                                      var state$1 = PointLightAPI$Wonderjs.setPointLightRange(match[3], 2, match[0]);
                                                                      var match$1 = FrontRenderLightForNoWorkerAndWorkerJobTool$Wonderjs.setFakeGlForLight(sandbox, /* array */["u_pointLights[0].range"], state$1);
                                                                      DirectorTool$Wonderjs.runWithDefaultTime(RenderJobsTool$Wonderjs.init(match$1[0]));
                                                                      return Sinon.toCalledWith(ArrayService$Wonderjs.push(2, /* float array */[Caml_array.caml_array_get(match$1[1], 0)]), Wonder_jest.Expect[/* expect */0](match$1[2][0]));
                                                                    }));
                                                      }));
                                                return /* () */0;
                                              }));
                                        return /* () */0;
                                      }));
                                return /* () */0;
                              }));
                        return /* () */0;
                      }));
                describe("test send light material record", (function () {
                        GLSLSenderTool$Wonderjs.JudgeSendUniformData[/* testSendFloat */5](sandbox, "u_shininess", (function (_, param, _$1, state) {
                                return LightMaterialAPI$Wonderjs.setLightMaterialShininess(param[1], 30, state);
                              }), 30, /* Some */[FrontRenderLightJobTool$Wonderjs.prepareGameObject], /* None */0, /* () */0);
                        describe("test send map record", (function () {
                                GLSLSenderTool$Wonderjs.JudgeSendUniformData[/* testSendVector3 */4](sandbox, "u_diffuse", (function (_, param, _$1, state) {
                                        return LightMaterialAPI$Wonderjs.setLightMaterialDiffuseColor(param[1], /* float array */[
                                                    1,
                                                    0,
                                                    0.5
                                                  ], state);
                                      }), /* :: */[
                                      1,
                                      /* :: */[
                                        0,
                                        /* :: */[
                                          0.5,
                                          /* [] */0
                                        ]
                                      ]
                                    ], /* Some */[FrontRenderLightJobTool$Wonderjs.prepareGameObject], /* None */0, /* () */0);
                                return GLSLSenderTool$Wonderjs.JudgeSendUniformData[/* testSendVector3 */4](sandbox, "u_specular", (function (_, param, _$1, state) {
                                              return LightMaterialAPI$Wonderjs.setLightMaterialSpecularColor(param[1], /* float array */[
                                                          1,
                                                          0,
                                                          0.5
                                                        ], state);
                                            }), /* :: */[
                                            1,
                                            /* :: */[
                                              0,
                                              /* :: */[
                                                0.5,
                                                /* [] */0
                                              ]
                                            ]
                                          ], /* Some */[FrontRenderLightJobTool$Wonderjs.prepareGameObject], /* None */0, /* () */0);
                              }));
                        return /* () */0;
                      }));
                GLSLSenderTool$Wonderjs.JudgeSendUniformData[/* testSendMatrix4 */1](sandbox, "u_mMatrix", (function (gameObjectTransform, _, _$1, state) {
                        return TransformAPI$Wonderjs.setTransformLocalPosition(gameObjectTransform, /* tuple */[
                                    1,
                                    2,
                                    3
                                  ], state);
                      }), new Float32Array(/* float array */[
                          1,
                          0,
                          0,
                          0,
                          0,
                          1,
                          0,
                          0,
                          0,
                          0,
                          1,
                          0,
                          1,
                          2,
                          3,
                          1
                        ]), FrontRenderLightJobTool$Wonderjs.prepareGameObject, /* None */0, /* () */0);
                return GLSLSenderTool$Wonderjs.JudgeSendUniformData[/* testSendMatrix3 */2](sandbox, "u_normalMatrix", (function (gameObjectTransform, _, _$1, state) {
                              return TransformAPI$Wonderjs.setTransformLocalPosition(gameObjectTransform, /* tuple */[
                                          10,
                                          2,
                                          3
                                        ], state);
                            }), new Float32Array(/* float array */[
                                1,
                                0,
                                0,
                                0,
                                1,
                                0,
                                0,
                                0,
                                1
                              ]), FrontRenderLightJobTool$Wonderjs.prepareGameObject, /* Some */[(function (prepareSendUniformData) {
                                Wonder_jest.test("send per each gameObject", (function () {
                                        var match = Curry._3(prepareSendUniformData, sandbox, FrontRenderLightJobTool$Wonderjs.prepareGameObject, state[0]);
                                        var match$1 = FrontRenderLightJobTool$Wonderjs.prepareGameObject(sandbox, match[0]);
                                        var state$1 = TransformAPI$Wonderjs.setTransformLocalPosition(match[2][0], /* tuple */[
                                              1,
                                              2,
                                              3
                                            ], match$1[0]);
                                        var uniformMatrix3fv = Sinon.createEmptyStubWithJsObjSandbox(sandbox);
                                        var getUniformLocation = GLSLLocationTool$Wonderjs.getUniformLocation(/* Some */[0], sandbox, "u_normalMatrix");
                                        var state$2 = FakeGlTool$Wonderjs.setFakeGl(FakeGlTool$Wonderjs.buildFakeGl(sandbox, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[getUniformLocation], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[uniformMatrix3fv], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* () */0), state$1);
                                        DirectorTool$Wonderjs.runWithDefaultTime(RenderJobsTool$Wonderjs.init(state$2));
                                        return Sinon.toCalledTwice(Wonder_jest.Expect[/* expect */0](uniformMatrix3fv));
                                      }));
                                describe("test cache", (function () {
                                        return Wonder_jest.test("test in different loops", (function () {
                                                      var match = Curry._3(prepareSendUniformData, sandbox, FrontRenderLightJobTool$Wonderjs.prepareGameObject, state[0]);
                                                      var state$1 = TransformAPI$Wonderjs.setTransformLocalPosition(match[2][0], /* tuple */[
                                                            1,
                                                            2,
                                                            3
                                                          ], match[0]);
                                                      var uniformMatrix3fv = Sinon.createEmptyStubWithJsObjSandbox(sandbox);
                                                      var getUniformLocation = GLSLLocationTool$Wonderjs.getUniformLocation(/* Some */[0], sandbox, "u_normalMatrix");
                                                      var state$2 = FakeGlTool$Wonderjs.setFakeGl(FakeGlTool$Wonderjs.buildFakeGl(sandbox, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[getUniformLocation], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[uniformMatrix3fv], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* () */0), state$1);
                                                      var state$3 = DirectorTool$Wonderjs.runWithDefaultTime(RenderJobsTool$Wonderjs.init(state$2));
                                                      DirectorTool$Wonderjs.runWithDefaultTime(state$3);
                                                      return Sinon.toCalledTwice(Wonder_jest.Expect[/* expect */0](uniformMatrix3fv));
                                                    }));
                                      }));
                                return /* () */0;
                              })], /* () */0);
              }));
        describe("draw", (function () {
                describe("if geometry has index buffer, bind index buffer and drawElements", (function () {
                        var _prepareForDrawElements = function (sandbox, state) {
                          var match = FrontRenderLightJobTool$Wonderjs.prepareGameObject(sandbox, state);
                          var match$1 = CameraTool$Wonderjs.createCameraGameObject(match[0]);
                          return /* tuple */[
                                  match$1[0],
                                  match[2]
                                ];
                        };
                        return Wonder_jest.test("drawElements", (function () {
                                      var match = _prepareForDrawElements(sandbox, state[0]);
                                      var drawElements = Sinon.createEmptyStubWithJsObjSandbox(sandbox);
                                      var state$1 = FakeGlTool$Wonderjs.setFakeGl(FakeGlTool$Wonderjs.buildFakeGl(sandbox, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[1], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[drawElements], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* () */0), match[0]);
                                      var state$2 = RenderJobsTool$Wonderjs.init(state$1);
                                      var state$3 = DirectorTool$Wonderjs.runWithDefaultTime(state$2);
                                      return Sinon.toCalledOnce(Wonder_jest.Expect[/* expect */0](Sinon.withFourArgs(1, BoxGeometryTool$Wonderjs.getIndicesCount(match[1], CreateRenderStateMainService$Wonderjs.createRenderState(state$3)), GeometryTool$Wonderjs.getIndexType(CreateRenderStateMainService$Wonderjs.createRenderState(state$3)), Caml_int32.imul(GeometryTool$Wonderjs.getIndexTypeSize(CreateRenderStateMainService$Wonderjs.createRenderState(state$3)), 0), drawElements)));
                                    }));
                      }));
                return /* () */0;
              }));
        return /* () */0;
      }));

export {
  
}
/*  Not a pure module */
