// Generated by BUCKLESCRIPT VERSION 3.1.4, PLEASE EDIT WITH CARE

import * as Curry from "../../../../../../node_modules/bs-platform/lib/es6/curry.js";
import * as Sinon from "../../../../../../node_modules/wonder-bs-sinon/lib/es6_global/src/sinon.js";
import * as DomService$Wonderjs from "../../../../src/service/primitive/DomService.js";
import * as SettingTool$Wonderjs from "../../../tool/service/setting/SettingTool.js";
import * as CreateStateMainService$Wonderjs from "../../../../src/service/state/main/state/CreateStateMainService.js";

var addTransferControlToOffscreen = (
  function(canvas) {
    if(canvas.transferControlToOffscreen === undefined){
      canvas.transferControlToOffscreen = function(){
        return canvas
      };
    }

    return canvas;
  }
  );

function buildFakeCanvas() {
  return Curry._1(addTransferControlToOffscreen, DomService$Wonderjs.buildCanvas(/* () */0));
}

function buildFakeDiv() {
  return DomService$Wonderjs.buildDom("<div></div>");
}

function buildFakeCanvasForNotPassCanvasIdWithCanvas(sandbox, canvasDom) {
  var div = DomService$Wonderjs.buildDom("<div></div>");
  var body = {
    prepend: Curry._1(Sinon.createEmptyStub, sandbox[0]),
    style: {
      cssText: ""
    }
  };
  var createElementStub = Curry._3(Sinon.createMethodStub, sandbox[0], document, "createElement");
  Sinon.returns(div, Sinon.withOneArg("div", createElementStub));
  Sinon.returns(canvasDom, Sinon.withOneArg("canvas", createElementStub));
  Sinon.returns(/* :: */[
        body,
        /* [] */0
      ], Sinon.withOneArg("body", Curry._3(Sinon.createMethodStub, sandbox[0], document, "querySelectorAll")));
  return canvasDom;
}

function buildFakeCanvasForNotPassCanvasId(sandbox) {
  return buildFakeCanvasForNotPassCanvasIdWithCanvas(sandbox, Curry._1(addTransferControlToOffscreen, DomService$Wonderjs.buildCanvas(/* () */0)));
}

function createStateAndSetToStateData($staropt$star, $staropt$star$1, $staropt$star$2, $staropt$star$3, $staropt$star$4, $staropt$star$5, $staropt$star$6, _) {
  var state = $staropt$star ? $staropt$star[0] : CreateStateMainService$Wonderjs.createState(/* () */0);
  var isDebug = $staropt$star$1 ? $staropt$star$1[0] : "true";
  var canvasId = $staropt$star$2 ? $staropt$star$2[0] : /* None */0;
  var context = $staropt$star$3 ? $staropt$star$3[0] : "\n        {\n        \"alpha\": true,\n        \"depth\": true,\n        \"stencil\": false,\n        \"antialias\": true,\n        \"premultiplied_alpha\": true,\n        \"preserve_drawing_buffer\": false\n        }\n               ";
  var useHardwareInstance = $staropt$star$4 ? $staropt$star$4[0] : "false";
  var useWorker = $staropt$star$5 ? $staropt$star$5[0] : "false";
  var buffer = $staropt$star$6 ? $staropt$star$6[0] : SettingTool$Wonderjs.buildBufferConfigStr(/* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* () */0);
  return SettingTool$Wonderjs.setToStateData(state, isDebug, canvasId, context, useHardwareInstance, useWorker, buffer);
}

var setMemory = SettingTool$Wonderjs.setMemory;

export {
  addTransferControlToOffscreen ,
  buildFakeCanvas ,
  buildFakeDiv ,
  buildFakeCanvasForNotPassCanvasIdWithCanvas ,
  buildFakeCanvasForNotPassCanvasId ,
  createStateAndSetToStateData ,
  setMemory ,
  
}
/* addTransferControlToOffscreen Not a pure module */
