// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as ArraySystem$Wonderjs                      from "../../../../../structure/ArraySystem.js";
import * as ShaderSystem$Wonderjs                     from "../../../../shader/ShaderSystem.js";
import * as GeometryAdmin$Wonderjs                    from "../../../../../ecs/admin/component/GeometryAdmin.js";
import * as InstanceUtils$Wonderjs                    from "../../../../utils/InstanceUtils.js";
import * as ProgramSystem$Wonderjs                    from "../../../../shader/program/ProgramSystem.js";
import * as RenderDataSystem$Wonderjs                 from "../../../../render/RenderDataSystem.js";
import * as GLSLSenderDrawUtils$Wonderjs              from "../../../../shader/sender/utils/GLSLSenderDrawUtils.js";
import * as RenderBasicJobCommon$Wonderjs             from "./RenderBasicJobCommon.js";
import * as RenderBasicInstanceJobCommon$Wonderjs     from "./instance/RenderBasicInstanceJobCommon.js";
import * as GLSLSenderConfigDataHandleSystem$Wonderjs from "../../../../shader/sender/GLSLSenderConfigDataHandleSystem.js";

function _sendShaderUniformData(gl, state) {
  return ArraySystem$Wonderjs.reduceState((function (state, shaderIndex) {
                var program = ProgramSystem$Wonderjs.unsafeGetProgram(shaderIndex, state);
                return ArraySystem$Wonderjs.reduceState((function (state, param) {
                              param[/* sendNoCachableDataFunc */2](gl, param[/* pos */0], param[/* getNoCachableDataFunc */1](state));
                              return state;
                            }), state, GLSLSenderConfigDataHandleSystem$Wonderjs.unsafeGetShaderUniformSendNoCachableData(shaderIndex, ProgramSystem$Wonderjs.use(gl, program, state)));
              }), state, ShaderSystem$Wonderjs.getAllShaderIndexArray(state));
}

function _render(gl, state) {
  var state$1 = _sendShaderUniformData(gl, state);
  var match = RenderDataSystem$Wonderjs.getRenderArrayFromState(state$1);
  if (match) {
    return ArraySystem$Wonderjs.reduceState((function (state, uid) {
                  if (InstanceUtils$Wonderjs.isSourceInstance(uid, state)) {
                    return RenderBasicInstanceJobCommon$Wonderjs.render(gl, uid, state);
                  } else {
                    var match = RenderBasicJobCommon$Wonderjs.render(gl, uid, state);
                    var state$1 = match[0];
                    GLSLSenderDrawUtils$Wonderjs.drawElement(/* tuple */[
                          GeometryAdmin$Wonderjs.getDrawMode(gl),
                          GeometryAdmin$Wonderjs.getIndexType(gl),
                          GeometryAdmin$Wonderjs.getIndexTypeSize(gl),
                          GeometryAdmin$Wonderjs.getIndicesCount(match[2], state$1)
                        ], gl);
                    return state$1;
                  }
                }), state$1, match[0]);
  } else {
    return state$1;
  }
}

function getJob(_, gl, state) {
  return _render(gl, state);
}

export {
  _sendShaderUniformData ,
  _render                ,
  getJob                 ,
  
}
/* ArraySystem-Wonderjs Not a pure module */
