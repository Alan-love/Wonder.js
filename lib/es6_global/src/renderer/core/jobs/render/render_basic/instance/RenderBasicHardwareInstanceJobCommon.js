// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as Js_option                                 from "../../../../../../../../../node_modules/bs-platform/lib/es6/js_option.js";
import * as ArraySystem$Wonderjs                      from "../../../../../../structure/ArraySystem.js";
import * as GPUStateUtils$Wonderjs                    from "../../../../../device/gpu/GPUStateUtils.js";
import * as GeometryAdmin$Wonderjs                    from "../../../../../../ecs/admin/component/GeometryAdmin.js";
import * as TransformAdmin$Wonderjs                   from "../../../../../../ecs/admin/component/TransformAdmin.js";
import * as TypeArrayUtils$Wonderjs                   from "../../../../../../utils/TypeArrayUtils.js";
import * as GameObjectAdmin$Wonderjs                  from "../../../../../../ecs/admin/GameObjectAdmin.js";
import * as ArraySystem$WonderCommonlib               from "../../../../../../../../../node_modules/wonder-commonlib/lib/es6_global/src/ArraySystem.js";
import * as GLSLSenderDrawUtils$Wonderjs              from "../../../../../shader/sender/utils/GLSLSenderDrawUtils.js";
import * as SourceInstanceAdmin$Wonderjs              from "../../../../../../ecs/admin/component/instance/SourceInstanceAdmin.js";
import * as InstanceBufferSystem$Wonderjs             from "../../../../../buffer/InstanceBufferSystem.js";
import * as RenderBasicJobCommon$Wonderjs             from "../RenderBasicJobCommon.js";
import * as GameObjectComponentCommon$Wonderjs        from "../../../../../../ecs/admin/GameObjectComponentCommon.js";
import * as VboBufferGetStateDataUtils$Wonderjs       from "../../../../../buffer/VboBufferGetStateDataUtils.js";
import * as GLSLSenderConfigDataHandleSystem$Wonderjs from "../../../../../shader/sender/GLSLSenderConfigDataHandleSystem.js";

function _fillModelMatrixTypeArr(uid, matricesArrayForInstance, offset, state) {
  var transform = GameObjectAdmin$Wonderjs.unsafeGetTransformComponent(uid, state);
  TypeArrayUtils$Wonderjs.fillFloat32ArrayWithFloat32Array(matricesArrayForInstance, offset, TransformAdmin$Wonderjs.getLocalToWorldMatrixTypeArray(transform, state), 0, 16);
  return state;
}

function _sendModelMatrixData(gl, sourceUid, extension, sourceInstance, shaderIndex, objectInstanceArray, instanceRenderListCount, modelMatrixInstanceBufferCapacityMap, modelMatrixInstanceBufferMap, modelMatrixFloat32ArrayMap, _, state) {
  var modelMatrixInstanceBuffer = InstanceBufferSystem$Wonderjs.getOrCreateBuffer(gl, sourceInstance, modelMatrixInstanceBufferCapacityMap, modelMatrixInstanceBufferMap, state);
  var matricesArrayForInstance = InstanceBufferSystem$Wonderjs.getOrCreateModelMatrixFloat32Array(sourceInstance, modelMatrixInstanceBufferCapacityMap, modelMatrixFloat32ArrayMap, state);
  var match = InstanceBufferSystem$Wonderjs.setCapacityAndUpdateBufferAndTypeArray(gl, sourceInstance, (instanceRenderListCount << 6), modelMatrixInstanceBuffer, matricesArrayForInstance, modelMatrixInstanceBufferMap, modelMatrixFloat32ArrayMap, modelMatrixInstanceBufferCapacityMap, state);
  var matricesArrayForInstance$1 = match[1];
  var offset = [0];
  var state$1 = _fillModelMatrixTypeArr(sourceUid, matricesArrayForInstance$1, offset[0], state);
  offset[0] = offset[0] + 16 | 0;
  var state$2 = ArraySystem$Wonderjs.reduceState((function (state, objectInstance) {
          var state$1 = _fillModelMatrixTypeArr(objectInstance, matricesArrayForInstance$1, offset[0], state);
          offset[0] = offset[0] + 16 | 0;
          return state$1;
        }), state$1, objectInstanceArray);
  InstanceBufferSystem$Wonderjs.updateData(gl, matricesArrayForInstance$1, match[0]);
  ArraySystem$WonderCommonlib.forEachi((function (param, index) {
          var pos = param[/* pos */0];
          gl.enableVertexAttribArray(pos);
          gl.vertexAttribPointer(pos, 4, gl.FLOAT, false, 64, (index << 4));
          return extension.vertexAttribDivisorANGLE(pos, 1);
        }), GLSLSenderConfigDataHandleSystem$Wonderjs.getInstanceAttributeSendData(shaderIndex, state$2));
  return state$2;
}

function render(gl, uid, state) {
  var match = RenderBasicJobCommon$Wonderjs.render(gl, uid, state);
  var shaderIndex = match[1];
  var state$1 = match[0];
  var extension = Js_option.getExn(GPUStateUtils$Wonderjs.getGpuDetectData(state$1)[/* extensionInstancedArrays */0]);
  var transformData = TransformAdmin$Wonderjs.getTransformData(state$1);
  var match$1 = VboBufferGetStateDataUtils$Wonderjs.getVboBufferData(state$1);
  var modelMatrixInstanceBufferMap = match$1[/* modelMatrixInstanceBufferMap */2];
  var match$2 = SourceInstanceAdmin$Wonderjs.getSourceInstanceData(state$1);
  var modelMatrixFloat32ArrayMap = match$2[/* modelMatrixFloat32ArrayMap */3];
  var modelMatrixInstanceBufferCapacityMap = match$2[/* modelMatrixInstanceBufferCapacityMap */2];
  var sourceInstance = GameObjectComponentCommon$Wonderjs.unsafeGetSourceInstanceComponent(uid, state$1);
  var objectInstanceArray = SourceInstanceAdmin$Wonderjs.getObjectInstanceArray(sourceInstance, state$1);
  var instanceRenderListCount = objectInstanceArray.length + 1 | 0;
  var match$3 = SourceInstanceAdmin$Wonderjs.isModelMatrixIsStatic(sourceInstance, state$1);
  var state$2;
  if (match$3 !== 0) {
    var match$4 = SourceInstanceAdmin$Wonderjs.isSendModelMatrix(sourceInstance, state$1);
    state$2 = match$4 !== 0 ? state$1 : SourceInstanceAdmin$Wonderjs.markSendModelMatrix(sourceInstance, /* true */1, _sendModelMatrixData(gl, uid, extension, sourceInstance, shaderIndex, objectInstanceArray, instanceRenderListCount, modelMatrixInstanceBufferCapacityMap, modelMatrixInstanceBufferMap, modelMatrixFloat32ArrayMap, transformData, state$1));
  } else {
    state$2 = _sendModelMatrixData(gl, uid, extension, sourceInstance, shaderIndex, objectInstanceArray, instanceRenderListCount, modelMatrixInstanceBufferCapacityMap, modelMatrixInstanceBufferMap, modelMatrixFloat32ArrayMap, transformData, SourceInstanceAdmin$Wonderjs.markSendModelMatrix(sourceInstance, /* false */0, state$1));
  }
  GLSLSenderDrawUtils$Wonderjs.drawElementsInstancedANGLE(GeometryAdmin$Wonderjs.getDrawMode(gl), GeometryAdmin$Wonderjs.getIndexType(gl), GeometryAdmin$Wonderjs.getIndexTypeSize(gl), GeometryAdmin$Wonderjs.getIndicesCount(match[2], state$2), instanceRenderListCount, extension);
  return state$2;
}

export {
  _fillModelMatrixTypeArr ,
  _sendModelMatrixData    ,
  render                  ,
  
}
/* ArraySystem-Wonderjs Not a pure module */
