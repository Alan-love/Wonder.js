// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as Js_option    from "../../../../../node_modules/bs-platform/lib/es6/js_option.js";
import * as Caml_array   from "../../../../../node_modules/bs-platform/lib/es6/caml_array.js";
import * as Js_boolean   from "../../../../../node_modules/bs-platform/lib/es6/js_boolean.js";
import * as Dom$Wonderjs from "../../external/Dom.js";

var _getOptionValueFromState = Js_option.getExn;

function getCanvas(state) {
  return Js_option.getExn(state[/* viewData */7][/* canvas */0]);
}

function setCanvas(canvas, state) {
  var newrecord = state.slice();
  var init = state[/* viewData */7];
  newrecord[/* viewData */7] = /* record */[
    /* canvas : Some */[canvas],
    /* contextConfig */init[/* contextConfig */1]
  ];
  return newrecord;
}

function _setAbsolutePosition(canvas) {
  canvas.style.position = "absolute";
  return canvas;
}

function setX(x, canvas) {
  canvas.style.left = "" + (String(x) + "px");
  return canvas;
}

function setY(y, canvas) {
  canvas.style.top = "" + (String(y) + "px");
  return canvas;
}

function setWidth(width, canvas) {
  canvas.width = width;
  return canvas;
}

function setHeight(height, canvas) {
  canvas.height = height;
  return canvas;
}

function setStyleWidth(width, canvas) {
  canvas.style.width = width;
  return canvas;
}

function setStyleHeight(height, canvas) {
  canvas.style.height = height;
  return canvas;
}

function getFullScreenData() {
  var root = window;
  return /* tuple */[
          0,
          0,
          root.innerWidth,
          root.innerHeight,
          "100%",
          "100%"
        ];
}

function _setBodyMargin($$document) {
  var bodies = $$document.querySelectorAll("body");
  if (bodies.length) {
    Dom$Wonderjs.setBatchStyle(Caml_array.caml_array_get(bodies, 0), "margin:0");
    return /* () */0;
  } else {
    return /* () */0;
  }
}

function setToFullScreen(param, canvas) {
  _setBodyMargin(document);
  return setStyleHeight(param[5], setStyleWidth(param[4], setHeight(param[3], setWidth(param[2], setY(param[1], setX(param[0], _setAbsolutePosition(canvas)))))));
}

function getContextConfig(state) {
  return Js_option.getExn(state[/* viewData */7][/* contextConfig */1]);
}

function setContextConfig(contextConfig, state) {
  var newrecord = state.slice();
  var init = state[/* viewData */7];
  newrecord[/* viewData */7] = /* record */[
    /* canvas */init[/* canvas */0],
    /* contextConfig : Some */[contextConfig]
  ];
  return newrecord;
}

function _convertContextConfigDataToJsObj(param) {
  return {
          alpha: Js_boolean.to_js_boolean(param[/* alpha */0]),
          depth: Js_boolean.to_js_boolean(param[/* depth */1]),
          stencil: Js_boolean.to_js_boolean(param[/* stencil */2]),
          antialias: Js_boolean.to_js_boolean(param[/* antialias */3]),
          premultipliedAlpha: Js_boolean.to_js_boolean(param[/* premultipliedAlpha */4]),
          preserveDrawingBuffer: Js_boolean.to_js_boolean(param[/* preserveDrawingBuffer */5])
        };
}

function getContext(canvas, options) {
  return canvas.getContext("webgl", _convertContextConfigDataToJsObj(options));
}

export {
  _getOptionValueFromState         ,
  getCanvas                        ,
  setCanvas                        ,
  _setAbsolutePosition             ,
  setX                             ,
  setY                             ,
  setWidth                         ,
  setHeight                        ,
  setStyleWidth                    ,
  setStyleHeight                   ,
  getFullScreenData                ,
  _setBodyMargin                   ,
  setToFullScreen                  ,
  getContextConfig                 ,
  setContextConfig                 ,
  _convertContextConfigDataToJsObj ,
  getContext                       ,
  
}
/* No side effect */
