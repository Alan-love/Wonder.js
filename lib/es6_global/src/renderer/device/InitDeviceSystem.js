// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as $$String                     from "../../../../../node_modules/bs-platform/lib/es6/string.js";
import * as Pervasives                   from "../../../../../node_modules/bs-platform/lib/es6/pervasives.js";
import * as Dom$Wonderjs                 from "../../external/Dom.js";
import * as Log$WonderLog                from "../../../../../node_modules/wonder-log/lib/es6_global/src/Log.js";
import * as DomUtils$Wonderjs            from "../../utils/DomUtils.js";
import * as Contract$WonderLog           from "../../../../../node_modules/wonder-log/lib/es6_global/src/Contract.js";
import * as StateData$Wonderjs           from "../../core/StateData.js";
import * as ViewSystem$Wonderjs          from "./ViewSystem.js";
import * as DeviceManagerSystem$Wonderjs from "./DeviceManagerSystem.js";

function _getCanvasId(domId) {
  var match = $$String.contains(domId, /* "#" */35);
  if (match !== 0) {
    return domId;
  } else {
    return Contract$WonderLog.ensureCheck((function (id) {
                  return Contract$WonderLog.test(Log$WonderLog.buildAssertMessage("dom id start with \'#\'", "is " + (String(domId) + "")), (function () {
                                return Contract$WonderLog.assertTrue(+(/#[^#]+/).test(id));
                              }));
                }), StateData$Wonderjs.stateData[/* isDebug */1], "#" + (String(domId) + ""));
  }
}

function createCanvas(param) {
  var canvasId = param[/* canvasId */0];
  if (canvasId) {
    var canvasId$1 = canvasId[0];
    var match = Dom$Wonderjs.findFirstHtmlElement(document, _getCanvasId(canvasId$1));
    if (match) {
      return match[0];
    } else {
      return Pervasives.failwith("canvas whose id is " + (String(canvasId$1) + " should exist"));
    }
  } else {
    var arg = Dom$Wonderjs.findFirstHtmlElement(document, "body");
    return (function (param) {
                return Dom$Wonderjs.prependTo(param, arg);
              })(DomUtils$Wonderjs.buildDom("<canvas></canvas>"));
  }
}

function getFullScreenData() {
  return ViewSystem$Wonderjs.getFullScreenData(/* () */0);
}

function setToFullScreen(screenData, gl, canvas, state) {
  return /* tuple */[
          DeviceManagerSystem$Wonderjs.setViewport(gl, /* tuple */[
                screenData[0],
                screenData[1],
                screenData[2],
                screenData[3]
              ], state),
          ViewSystem$Wonderjs.setToFullScreen(screenData, canvas)
        ];
}

export {
  _getCanvasId      ,
  createCanvas      ,
  getFullScreenData ,
  setToFullScreen   ,
  
}
/* Log-WonderLog Not a pure module */
