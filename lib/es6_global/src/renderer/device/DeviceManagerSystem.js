// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as Caml_obj            from "../../../../../node_modules/bs-platform/lib/es6/caml_obj.js";
import * as Js_option           from "../../../../../node_modules/bs-platform/lib/es6/js_option.js";
import * as ViewSystem$Wonderjs from "./ViewSystem.js";

function _getDeviceManagerData(state) {
  return state[/* deviceManagerData */9];
}

function getGl(state) {
  return Js_option.getExn(state[/* deviceManagerData */9][/* gl */0]);
}

function setGl(gl, state) {
  var newrecord = state.slice();
  var init = state[/* deviceManagerData */9];
  newrecord[/* deviceManagerData */9] = /* record */[
    /* gl : Some */[gl],
    /* colorWrite */init[/* colorWrite */1],
    /* clearColor */init[/* clearColor */2]
  ];
  return newrecord;
}

var createGL = ViewSystem$Wonderjs.getContext;

function setColorWrite(gl, writeRed, writeGreen, writeBlue, writeAlpha, state) {
  var match = state[/* deviceManagerData */9];
  var colorWrite = match[/* colorWrite */1];
  var exit = 0;
  if (colorWrite) {
    var match$1 = colorWrite[0];
    if (Caml_obj.caml_equal(match$1[0], writeRed) && Caml_obj.caml_equal(match$1[1], writeGreen) && Caml_obj.caml_equal(match$1[2], writeBlue) && Caml_obj.caml_equal(match$1[3], writeAlpha)) {
      return state;
    } else {
      exit = 1;
    }
  } else {
    exit = 1;
  }
  if (exit === 1) {
    gl.colorMask(writeRed, writeGreen, writeBlue, writeAlpha);
    var newrecord = state.slice();
    var init = state[/* deviceManagerData */9];
    newrecord[/* deviceManagerData */9] = /* record */[
      /* gl */init[/* gl */0],
      /* colorWrite : Some */[/* tuple */[
          writeRed,
          writeGreen,
          writeBlue,
          writeAlpha
        ]],
      /* clearColor */init[/* clearColor */2]
    ];
    return newrecord;
  }
  
}

function clearBuffer(gl, bit, state) {
  var state$1 = setColorWrite(gl, true, true, true, true, state);
  gl.clear(bit);
  return state$1;
}

function clearColor(gl, param, state) {
  var a = param[3];
  var b = param[2];
  var g = param[1];
  var r = param[0];
  var match = state[/* deviceManagerData */9];
  var clearColor$1 = match[/* clearColor */2];
  var exit = 0;
  if (clearColor$1) {
    var match$1 = clearColor$1[0];
    if (match$1[0] === r && match$1[1] === g && match$1[2] === b && match$1[3] === a) {
      return state;
    } else {
      exit = 1;
    }
  } else {
    exit = 1;
  }
  if (exit === 1) {
    gl.clearColor(r, g, b, a);
    var newrecord = state.slice();
    var init = state[/* deviceManagerData */9];
    newrecord[/* deviceManagerData */9] = /* record */[
      /* gl */init[/* gl */0],
      /* colorWrite */init[/* colorWrite */1],
      /* clearColor : Some */[/* tuple */[
          r,
          g,
          b,
          a
        ]]
    ];
    return newrecord;
  }
  
}

function deepCopyStateForRestore(state) {
  var match = state[/* deviceManagerData */9];
  var newrecord = state.slice();
  newrecord[/* deviceManagerData */9] = /* record */[
    /* gl : None */0,
    /* colorWrite */match[/* colorWrite */1],
    /* clearColor */match[/* clearColor */2]
  ];
  return newrecord;
}

function restore(_, param, targetState) {
  var newrecord = targetState.slice();
  var init = targetState[/* deviceManagerData */9];
  newrecord[/* deviceManagerData */9] = /* record */[
    /* gl : Some */[param[/* gl */0]],
    /* colorWrite */init[/* colorWrite */1],
    /* clearColor */init[/* clearColor */2]
  ];
  return newrecord;
}

export {
  _getDeviceManagerData   ,
  getGl                   ,
  setGl                   ,
  createGL                ,
  setColorWrite           ,
  clearBuffer             ,
  clearColor              ,
  deepCopyStateForRestore ,
  restore                 ,
  
}
/* No side effect */
