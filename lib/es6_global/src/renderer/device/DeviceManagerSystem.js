// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as Js_option           from "../../../../../node_modules/bs-platform/lib/es6/js_option.js";
import * as Log$WonderLog       from "../../../../../node_modules/wonder-log/lib/es6_global/src/Log.js";
import * as Contract$WonderLog  from "../../../../../node_modules/wonder-log/lib/es6_global/src/Contract.js";
import * as StateData$Wonderjs  from "../../core/StateData.js";
import * as ViewSystem$Wonderjs from "./ViewSystem.js";

function _getDeviceManagerData(state) {
  return state[/* deviceManagerData */11];
}

function unsafeGetGl(state) {
  Contract$WonderLog.requireCheck((function () {
          return Contract$WonderLog.test(Log$WonderLog.buildAssertMessage("gl exist", "not"), (function () {
                        return Contract$WonderLog.assertExist(state[/* deviceManagerData */11][/* gl */0]);
                      }));
        }), StateData$Wonderjs.stateData[/* isDebug */1]);
  return Js_option.getExn(state[/* deviceManagerData */11][/* gl */0]);
}

function setGl(gl, state) {
  var newrecord = state.slice();
  var init = state[/* deviceManagerData */11];
  newrecord[/* deviceManagerData */11] = /* record */[
    /* gl : Some */[gl],
    /* colorWrite */init[/* colorWrite */1],
    /* clearColor */init[/* clearColor */2],
    /* side */init[/* side */3],
    /* viewport */init[/* viewport */4]
  ];
  return newrecord;
}

function createGl(contextConfig, canvas) {
  return ViewSystem$Wonderjs.getContext(canvas, contextConfig);
}

function setColorWrite(gl, param, state) {
  var writeAlpha = param[3];
  var writeBlue = param[2];
  var writeGreen = param[1];
  var writeRed = param[0];
  var match = state[/* deviceManagerData */11];
  var colorWrite = match[/* colorWrite */1];
  var exit = 0;
  if (colorWrite) {
    var match$1 = colorWrite[0];
    if (match$1[0] === writeRed && match$1[1] === writeGreen && match$1[2] === writeBlue && match$1[3] === writeAlpha) {
      return state;
    } else {
      exit = 1;
    }
  } else {
    exit = 1;
  }
  if (exit === 1) {
    gl.colorMask(writeRed, writeGreen, writeBlue, writeAlpha);
    var newrecord = state.slice();
    var init = state[/* deviceManagerData */11];
    newrecord[/* deviceManagerData */11] = /* record */[
      /* gl */init[/* gl */0],
      /* colorWrite : Some */[/* tuple */[
          writeRed,
          writeGreen,
          writeBlue,
          writeAlpha
        ]],
      /* clearColor */init[/* clearColor */2],
      /* side */init[/* side */3],
      /* viewport */init[/* viewport */4]
    ];
    return newrecord;
  }
  
}

function _setSide(gl, targetSide) {
  switch (targetSide) {
    case 0 : 
        gl.enable(gl.CULL_FACE);
        gl.cullFace(gl.FRONT_AND_BACK);
        return /* () */0;
    case 1 : 
        gl.disable(gl.CULL_FACE);
        return /* () */0;
    case 2 : 
        gl.enable(gl.CULL_FACE);
        gl.cullFace(gl.BACK);
        return /* () */0;
    case 3 : 
        gl.enable(gl.CULL_FACE);
        gl.cullFace(gl.FRONT);
        return /* () */0;
    
  }
}

function setSide(gl, targetSide, state) {
  var match = state[/* deviceManagerData */11];
  var side = match[/* side */3];
  var exit = 0;
  if (side) {
    if (side[0] === targetSide) {
      return state;
    } else {
      exit = 1;
    }
  } else {
    exit = 1;
  }
  if (exit === 1) {
    _setSide(gl, targetSide);
    var newrecord = state.slice();
    var init = state[/* deviceManagerData */11];
    newrecord[/* deviceManagerData */11] = /* record */[
      /* gl */init[/* gl */0],
      /* colorWrite */init[/* colorWrite */1],
      /* clearColor */init[/* clearColor */2],
      /* side : Some */[targetSide],
      /* viewport */init[/* viewport */4]
    ];
    return newrecord;
  }
  
}

function clearBuffer(gl, bit, state) {
  var state$1 = setColorWrite(gl, /* tuple */[
        true,
        true,
        true,
        true
      ], state);
  gl.clear(bit);
  return state$1;
}

function clearColor(gl, param, state) {
  var a = param[3];
  var b = param[2];
  var g = param[1];
  var r = param[0];
  var match = state[/* deviceManagerData */11];
  var clearColor$1 = match[/* clearColor */2];
  var exit = 0;
  if (clearColor$1) {
    var match$1 = clearColor$1[0];
    if (match$1[0] === r && match$1[1] === g && match$1[2] === b && match$1[3] === a) {
      return state;
    } else {
      exit = 1;
    }
  } else {
    exit = 1;
  }
  if (exit === 1) {
    gl.clearColor(r, g, b, a);
    var newrecord = state.slice();
    var init = state[/* deviceManagerData */11];
    newrecord[/* deviceManagerData */11] = /* record */[
      /* gl */init[/* gl */0],
      /* colorWrite */init[/* colorWrite */1],
      /* clearColor : Some */[/* tuple */[
          r,
          g,
          b,
          a
        ]],
      /* side */init[/* side */3],
      /* viewport */init[/* viewport */4]
    ];
    return newrecord;
  }
  
}

function setViewport(gl, param, state) {
  var height = param[3];
  var width = param[2];
  var y = param[1];
  var x = param[0];
  var match = state[/* deviceManagerData */11];
  var viewport = match[/* viewport */4];
  var exit = 0;
  if (viewport) {
    var match$1 = viewport[0];
    if (match$1[0] === x && match$1[1] === y && match$1[2] === width && match$1[3] === height) {
      return state;
    } else {
      exit = 1;
    }
  } else {
    exit = 1;
  }
  if (exit === 1) {
    gl.viewport(x, y, width, height);
    var newrecord = state.slice();
    var init = state[/* deviceManagerData */11];
    newrecord[/* deviceManagerData */11] = /* record */[
      /* gl */init[/* gl */0],
      /* colorWrite */init[/* colorWrite */1],
      /* clearColor */init[/* clearColor */2],
      /* side */init[/* side */3],
      /* viewport : Some */[/* tuple */[
          x,
          y,
          width,
          height
        ]]
    ];
    return newrecord;
  }
  
}

function deepCopyStateForRestore(state) {
  var match = state[/* deviceManagerData */11];
  var newrecord = state.slice();
  newrecord[/* deviceManagerData */11] = /* record */[
    /* gl : None */0,
    /* colorWrite */match[/* colorWrite */1],
    /* clearColor */match[/* clearColor */2],
    /* side */match[/* side */3],
    /* viewport */match[/* viewport */4]
  ];
  return newrecord;
}

function restore(_, param, targetState) {
  var newrecord = targetState.slice();
  var init = targetState[/* deviceManagerData */11];
  newrecord[/* deviceManagerData */11] = /* record */[
    /* gl : Some */[param[/* gl */0]],
    /* colorWrite */init[/* colorWrite */1],
    /* clearColor */init[/* clearColor */2],
    /* side */init[/* side */3],
    /* viewport */init[/* viewport */4]
  ];
  return newrecord;
}

export {
  _getDeviceManagerData   ,
  unsafeGetGl             ,
  setGl                   ,
  createGl                ,
  setColorWrite           ,
  _setSide                ,
  setSide                 ,
  clearBuffer             ,
  clearColor              ,
  setViewport             ,
  deepCopyStateForRestore ,
  restore                 ,
  
}
/* Log-WonderLog Not a pure module */
