// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as Curry                          from "../../../../../../node_modules/bs-platform/lib/es6/curry.js";
import * as Caml_obj                       from "../../../../../../node_modules/bs-platform/lib/es6/caml_obj.js";
import * as Caml_array                     from "../../../../../../node_modules/bs-platform/lib/es6/caml_array.js";
import * as Js_primitive                   from "../../../../../../node_modules/bs-platform/lib/es6/js_primitive.js";
import * as Contract$Wonderjs              from "../../../definition/Contract.js";
import * as ArraySystem$Wonderjs           from "../../../structure/ArraySystem.js";
import * as InstanceUtils$Wonderjs         from "../../utils/InstanceUtils.js";
import * as Caml_builtin_exceptions        from "../../../../../../node_modules/bs-platform/lib/es6/caml_builtin_exceptions.js";
import * as ArraySystem$WonderCommonlib    from "../../../../../../node_modules/wonder-commonlib/lib/es6_global/src/ArraySystem.js";
import * as HashMapSystem$WonderCommonlib  from "../../../../../../node_modules/wonder-commonlib/lib/es6_global/src/HashMapSystem.js";
import * as ExceptionHandleSystem$Wonderjs from "../../../exception/ExceptionHandleSystem.js";

function getInitPipelines(state) {
  return state[/* renderConfig */3][/* init_pipelines */2];
}

function getInitJobs(state) {
  return state[/* renderConfig */3][/* init_jobs */4];
}

function getRenderPipelines(state) {
  return state[/* renderConfig */3][/* render_pipelines */3];
}

function getRenderJobs(state) {
  return state[/* renderConfig */3][/* render_jobs */5];
}

function getShaders(state) {
  return state[/* renderConfig */3][/* shaders */6];
}

function getShaderLibs(state) {
  return state[/* renderConfig */3][/* shader_libs */7];
}

function getRenderSetting(state) {
  return state[/* renderConfig */3][/* render_setting */1];
}

function _getJobHandleMap(state) {
  return state[/* renderConfig */3][/* jobHandleMap */0];
}

function findFirst(arr, func) {
  return Contract$Wonderjs.ensureCheck((function () {
                return Contract$Wonderjs.test("should find result", (function () {
                              return Contract$Wonderjs.assertExist(Js_primitive.undefined_to_opt(arr.find(Curry.__1(func))));
                            }));
              }), arr.find(func));
}

var _filterTargetName = Caml_obj.caml_equal;

function _getExecutableJob(jobs, param) {
  var jobItemName = param[/* name */0];
  var match = findFirst(jobs, (function (param) {
          return Caml_obj.caml_equal(param[/* name */0], jobItemName);
        }));
  return /* record */[
          /* name */jobItemName,
          /* flags */param[/* flags */1],
          /* shader */match[/* shader */1]
        ];
}

function getInitPipelineExecutableJobs(param, init_pipelines, jobs) {
  var init_pipeline = param[/* init_pipeline */3];
  var init_pipelineItem = findFirst(init_pipelines, (function (param) {
          return Caml_obj.caml_equal(param[/* name */0], init_pipeline);
        }));
  return init_pipelineItem[/* jobs */1].map((function (param) {
                return _getExecutableJob(jobs, param);
              }));
}

function getRenderPipelineExecutableJobs(param, render_pipelines, jobs) {
  var render_pipeline = param[/* render_pipeline */4];
  var render_pipelineItem = findFirst(render_pipelines, (function (param) {
          return Caml_obj.caml_equal(param[/* name */0], render_pipeline);
        }));
  return render_pipelineItem[/* jobs */1].map((function (param) {
                return _getExecutableJob(jobs, param);
              }));
}

function execJobs(gl, jobs, state) {
  var jobHandleMap = state[/* renderConfig */3][/* jobHandleMap */0];
  return ArraySystem$Wonderjs.reduceState((function (state, param) {
                var match = HashMapSystem$WonderCommonlib.get(param[/* name */0], jobHandleMap);
                if (match) {
                  return Curry._3(match[0], /* tuple */[
                              param[/* flags */1],
                              param[/* shader */2]
                            ], gl, state);
                } else {
                  return state;
                }
              }), state, jobs);
}

function _findFirstShaderData(shaderLibName, shaderLibs) {
  return findFirst(shaderLibs, (function (item) {
                return Caml_obj.caml_equal(item[/* name */0], shaderLibName);
              }));
}

function getMaterialShaderLibDataArr(param, gameObject, shaderLibItems, shaderLibs, state) {
  var groups = param[/* groups */1];
  var static_branchs = param[/* static_branchs */0];
  return ArraySystem$Wonderjs.reduceOneParam((function (resultDataArr, param) {
                var name = param[/* name */1];
                var type_ = param[/* type_ */0];
                if (type_) {
                  switch (type_[0]) {
                    case "group" : 
                        var group = findFirst(groups, (function (item) {
                                return Caml_obj.caml_equal(item[/* name */0], name);
                              }));
                        var shaderLibArr = group[/* value */1].map((function (name) {
                                return _findFirstShaderData(name, shaderLibs);
                              }));
                        return resultDataArr.concat(shaderLibArr);
                    case "static_branch" : 
                        var match = findFirst(static_branchs, (function (item) {
                                return Caml_obj.caml_equal(item[/* name */0], name);
                              }));
                        var value = match[/* value */1];
                        if (name === "modelMatrix_instance") {
                          var shaderLibName = InstanceUtils$Wonderjs.isSourceInstance(gameObject, state) ? (
                              InstanceUtils$Wonderjs.isSupportInstance(state) ? Caml_array.caml_array_get(value, 1) : Caml_array.caml_array_get(value, 2)
                            ) : Caml_array.caml_array_get(value, 0);
                          resultDataArr.push(_findFirstShaderData(shaderLibName, shaderLibs));
                          return resultDataArr;
                        } else {
                          throw [
                                Caml_builtin_exceptions.match_failure,
                                [
                                  "/Users/y/Github/Wonder.js/src/renderer/config/render/RenderConfigSystem.re",
                                  100,
                                  15
                                ]
                              ];
                        }
                        break;
                    default:
                      throw [
                            Caml_builtin_exceptions.match_failure,
                            [
                              "/Users/y/Github/Wonder.js/src/renderer/config/render/RenderConfigSystem.re",
                              90,
                              13
                            ]
                          ];
                  }
                } else {
                  resultDataArr.push(_findFirstShaderData(name, shaderLibs));
                  return resultDataArr;
                }
              }), ArraySystem$WonderCommonlib.createEmpty(/* () */0), shaderLibItems);
}

function throwJobFlagsShouldBeDefined() {
  return ExceptionHandleSystem$Wonderjs.throwMessage("jobFlags should be defined");
}

export {
  getInitPipelines                ,
  getInitJobs                     ,
  getRenderPipelines              ,
  getRenderJobs                   ,
  getShaders                      ,
  getShaderLibs                   ,
  getRenderSetting                ,
  _getJobHandleMap                ,
  findFirst                       ,
  _filterTargetName               ,
  _getExecutableJob               ,
  getInitPipelineExecutableJobs   ,
  getRenderPipelineExecutableJobs ,
  execJobs                        ,
  _findFirstShaderData            ,
  getMaterialShaderLibDataArr     ,
  throwJobFlagsShouldBeDefined    ,
  
}
/* ArraySystem-Wonderjs Not a pure module */
