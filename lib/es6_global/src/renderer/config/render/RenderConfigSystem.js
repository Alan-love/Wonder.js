// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as Curry                          from "../../../../../../node_modules/bs-platform/lib/es6/curry.js";
import * as Caml_obj                       from "../../../../../../node_modules/bs-platform/lib/es6/caml_obj.js";
import * as Caml_array                     from "../../../../../../node_modules/bs-platform/lib/es6/caml_array.js";
import * as Log$WonderLog                  from "../../../../../../node_modules/wonder-log/lib/es6_global/src/Log.js";
import * as Contract$WonderLog             from "../../../../../../node_modules/wonder-log/lib/es6_global/src/Contract.js";
import * as StateData$Wonderjs             from "../../../core/StateData.js";
import * as ArraySystem$Wonderjs           from "../../../structure/ArraySystem.js";
import * as InstanceUtils$Wonderjs         from "../../utils/InstanceUtils.js";
import * as Caml_builtin_exceptions        from "../../../../../../node_modules/bs-platform/lib/es6/caml_builtin_exceptions.js";
import * as ArraySystem$WonderCommonlib    from "../../../../../../node_modules/wonder-commonlib/lib/es6_global/src/ArraySystem.js";
import * as HashMapSystem$WonderCommonlib  from "../../../../../../node_modules/wonder-commonlib/lib/es6_global/src/HashMapSystem.js";
import * as ExceptionHandleSystem$Wonderjs from "../../../exception/ExceptionHandleSystem.js";

function getInitPipelines(state) {
  return state[/* renderConfig */3][/* init_pipelines */2];
}

function getInitJobs(state) {
  return state[/* renderConfig */3][/* init_jobs */4];
}

function getRenderPipelines(state) {
  return state[/* renderConfig */3][/* render_pipelines */3];
}

function getRenderJobs(state) {
  return state[/* renderConfig */3][/* render_jobs */5];
}

function getShaders(state) {
  return state[/* renderConfig */3][/* shaders */6];
}

function getShaderLibs(state) {
  return state[/* renderConfig */3][/* shader_libs */7];
}

function getRenderSetting(state) {
  return state[/* renderConfig */3][/* render_setting */1];
}

function _getJobHandleMap(state) {
  return state[/* renderConfig */3][/* jobHandleMap */0];
}

function findFirst(arr, func) {
  return Contract$WonderLog.ensureCheck((function (first) {
                return Contract$WonderLog.test(Log$WonderLog.buildAssertMessage("find result", "not"), (function () {
                              return Contract$WonderLog.assertNullableExist(first);
                            }));
              }), StateData$Wonderjs.stateData[/* isDebug */1], arr.find(func));
}

var _filterTargetName = Caml_obj.caml_equal;

function _getExecutableJob(jobs, param) {
  var jobItemName = param[/* name */0];
  var match = findFirst(jobs, (function (param) {
          return Caml_obj.caml_equal(param[/* name */0], jobItemName);
        }));
  return /* record */[
          /* name */jobItemName,
          /* flags */param[/* flags */1],
          /* shader */match[/* shader */1]
        ];
}

function _getPipelineExecutableJobs(pipeline, pipelines, jobs) {
  var pipelineItem = findFirst(pipelines, (function (param) {
          return Caml_obj.caml_equal(param[/* name */0], pipeline);
        }));
  return pipelineItem[/* jobs */1].map((function (param) {
                return _getExecutableJob(jobs, param);
              }));
}

function getInitPipelineExecutableJobs(param, init_pipelines, jobs) {
  return _getPipelineExecutableJobs(param[/* init_pipeline */3], init_pipelines, jobs);
}

function getRenderPipelineExecutableJobs(param, render_pipelines, jobs) {
  return _getPipelineExecutableJobs(param[/* render_pipeline */4], render_pipelines, jobs);
}

function execJobs(gl, jobs, state) {
  var jobHandleMap = state[/* renderConfig */3][/* jobHandleMap */0];
  return ArraySystem$Wonderjs.reduceState((function (state, param) {
                var match = HashMapSystem$WonderCommonlib.get(param[/* name */0], jobHandleMap);
                if (match) {
                  return Curry._3(match[0], /* tuple */[
                              param[/* flags */1],
                              param[/* shader */2]
                            ], gl, state);
                } else {
                  return state;
                }
              }), state, jobs);
}

function _findFirstShaderData(shaderLibName, shaderLibs) {
  return findFirst(shaderLibs, (function (item) {
                return Caml_obj.caml_equal(item[/* name */0], shaderLibName);
              }));
}

function _getMaterialShaderLibDataArrByGroup(groups, name, shaderLibs, resultDataArr) {
  return resultDataArr.concat(findFirst(groups, (function (item) {
                        return Caml_obj.caml_equal(item[/* name */0], name);
                      }))[/* value */1].map((function (name) {
                    return _findFirstShaderData(name, shaderLibs);
                  })));
}

function _getMaterialShaderLibDataArrByStaticBranchModelMatrixInstance(param, param$1, resultDataArr) {
  var value = param$1[1];
  var state = param[1];
  return ArraySystem$Wonderjs.push(_findFirstShaderData(InstanceUtils$Wonderjs.isSourceInstance(param[0], state) ? (
                    InstanceUtils$Wonderjs.isSupportInstance(state) ? Caml_array.caml_array_get(value, 1) : Caml_array.caml_array_get(value, 2)
                  ) : Caml_array.caml_array_get(value, 0), param$1[0]), resultDataArr);
}

function _getMaterialShaderLibDataArrByStaticBranch(param, param$1, resultDataArr) {
  var name = param[1];
  var match = findFirst(param$1[0], (function (item) {
          return Caml_obj.caml_equal(item[/* name */0], name);
        }));
  if (name === "modelMatrix_instance") {
    return _getMaterialShaderLibDataArrByStaticBranchModelMatrixInstance(/* tuple */[
                param[0],
                param[2]
              ], /* tuple */[
                param$1[1],
                match[/* value */1]
              ], resultDataArr);
  } else {
    throw [
          Caml_builtin_exceptions.match_failure,
          [
            "/Users/y/Github/Wonder.js/src/renderer/config/render/RenderConfigSystem.re",
            107,
            2
          ]
        ];
  }
}

function _getMaterialShaderLibDataArrByType(param, param$1, resultDataArr) {
  var shaderLibs = param$1[0];
  var name = param[2];
  switch (param[0]) {
    case "group" : 
        return _getMaterialShaderLibDataArrByGroup(param[1], name, shaderLibs, resultDataArr);
    case "static_branch" : 
        return _getMaterialShaderLibDataArrByStaticBranch(/* tuple */[
                    param[3],
                    name,
                    param[4]
                  ], /* tuple */[
                    param$1[1],
                    shaderLibs
                  ], resultDataArr);
    default:
      throw [
            Caml_builtin_exceptions.match_failure,
            [
              "/Users/y/Github/Wonder.js/src/renderer/config/render/RenderConfigSystem.re",
              123,
              2
            ]
          ];
  }
}

function getMaterialShaderLibDataArr(gameObject, param, state) {
  var shaderLibs = param[2];
  var match = param[0];
  var groups = match[/* groups */1];
  var static_branchs = match[/* static_branchs */0];
  return ArraySystem$WonderCommonlib.reduceOneParam((function (resultDataArr, param) {
                var name = param[/* name */1];
                var type_ = param[/* type_ */0];
                if (type_) {
                  return _getMaterialShaderLibDataArrByType(/* tuple */[
                              type_[0],
                              groups,
                              name,
                              gameObject,
                              state
                            ], /* tuple */[
                              shaderLibs,
                              static_branchs
                            ], resultDataArr);
                } else {
                  return ArraySystem$Wonderjs.push(_findFirstShaderData(name, shaderLibs), resultDataArr);
                }
              }), ArraySystem$WonderCommonlib.createEmpty(/* () */0), param[1]);
}

function throwJobFlagsShouldBeDefined() {
  return ExceptionHandleSystem$Wonderjs.throwMessage("jobFlags should be defined");
}

export {
  getInitPipelines                                              ,
  getInitJobs                                                   ,
  getRenderPipelines                                            ,
  getRenderJobs                                                 ,
  getShaders                                                    ,
  getShaderLibs                                                 ,
  getRenderSetting                                              ,
  _getJobHandleMap                                              ,
  findFirst                                                     ,
  _filterTargetName                                             ,
  _getExecutableJob                                             ,
  _getPipelineExecutableJobs                                    ,
  getInitPipelineExecutableJobs                                 ,
  getRenderPipelineExecutableJobs                               ,
  execJobs                                                      ,
  _findFirstShaderData                                          ,
  _getMaterialShaderLibDataArrByGroup                           ,
  _getMaterialShaderLibDataArrByStaticBranchModelMatrixInstance ,
  _getMaterialShaderLibDataArrByStaticBranch                    ,
  _getMaterialShaderLibDataArrByType                            ,
  getMaterialShaderLibDataArr                                   ,
  throwJobFlagsShouldBeDefined                                  ,
  
}
/* Log-WonderLog Not a pure module */
