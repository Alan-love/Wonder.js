// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as Contract$Wonderjs                   from "../../definition/Contract.js";
import * as SparseMapSystem$Wonderjs            from "../../structure/SparseMapSystem.js";
import * as SparseMapSystem$WonderCommonlib     from "../../../../../node_modules/wonder-commonlib/lib/es6_global/src/SparseMapSystem.js";
import * as VboBufferGetStateDataUtils$Wonderjs from "./VboBufferGetStateDataUtils.js";

function _getBufferAndSetBufferMap(gl, bufferPool) {
  var match = bufferPool.pop();
  if (match !== undefined) {
    return match;
  } else {
    return gl.createBuffer();
  }
}

function getArrayBuffer(gl, state) {
  var match = VboBufferGetStateDataUtils$Wonderjs.getVboBufferData(state);
  return _getBufferAndSetBufferMap(gl, match[/* vertexArrayBufferPool */3]);
}

function getElementArrayBuffer(gl, state) {
  var match = VboBufferGetStateDataUtils$Wonderjs.getVboBufferData(state);
  return _getBufferAndSetBufferMap(gl, match[/* elementArrayBufferPool */4]);
}

function getInstanceBuffer(gl, state) {
  var match = VboBufferGetStateDataUtils$Wonderjs.getVboBufferData(state);
  return _getBufferAndSetBufferMap(gl, match[/* modelMatrixInstanceBufferPool */5]);
}

function _unsafeGetBufferFromBufferMap(index, bufferMap) {
  return Contract$Wonderjs.ensureCheck((function () {
                return Contract$Wonderjs.test("buffer should exist in bufferMap", (function () {
                              return Contract$Wonderjs.assertTrue(SparseMapSystem$WonderCommonlib.has(index, bufferMap));
                            }));
              }), SparseMapSystem$WonderCommonlib.unsafeGet(index, bufferMap));
}

function addGeometryBufferToPool(geometryIndex, state) {
  var match = VboBufferGetStateDataUtils$Wonderjs.getVboBufferData(state);
  var vertexBufferMap = match[/* vertexBufferMap */0];
  var elementArrayBufferMap = match[/* elementArrayBufferMap */1];
  match[/* vertexArrayBufferPool */3].push(_unsafeGetBufferFromBufferMap(geometryIndex, vertexBufferMap));
  match[/* elementArrayBufferPool */4].push(_unsafeGetBufferFromBufferMap(geometryIndex, elementArrayBufferMap));
  return state;
}

function addAllBufferToPool(state) {
  var match = VboBufferGetStateDataUtils$Wonderjs.getVboBufferData(state);
  var vertexBufferMap = match[/* vertexBufferMap */0];
  var elementArrayBufferMap = match[/* elementArrayBufferMap */1];
  var modelMatrixInstanceBufferMap = match[/* modelMatrixInstanceBufferMap */2];
  var modelMatrixInstanceBufferPool = match[/* modelMatrixInstanceBufferPool */5];
  var elementArrayBufferPool = match[/* elementArrayBufferPool */4];
  var vertexArrayBufferPool = match[/* vertexArrayBufferPool */3];
  SparseMapSystem$Wonderjs.forEachValid((function (buffer) {
          vertexArrayBufferPool.push(buffer);
          return /* () */0;
        }), vertexBufferMap);
  SparseMapSystem$Wonderjs.forEachValid((function (buffer) {
          elementArrayBufferPool.push(buffer);
          return /* () */0;
        }), elementArrayBufferMap);
  SparseMapSystem$Wonderjs.forEachValid((function (buffer) {
          modelMatrixInstanceBufferPool.push(buffer);
          return /* () */0;
        }), modelMatrixInstanceBufferMap);
  return /* tuple */[
          vertexArrayBufferPool,
          elementArrayBufferPool,
          modelMatrixInstanceBufferPool
        ];
}

function addInstanceBufferToPool(sourceInstanceIndex, state) {
  var match = VboBufferGetStateDataUtils$Wonderjs.getVboBufferData(state);
  var modelMatrixInstanceBufferMap = match[/* modelMatrixInstanceBufferMap */2];
  match[/* modelMatrixInstanceBufferPool */5].push(_unsafeGetBufferFromBufferMap(sourceInstanceIndex, modelMatrixInstanceBufferMap));
  return state;
}

export {
  _getBufferAndSetBufferMap     ,
  getArrayBuffer                ,
  getElementArrayBuffer         ,
  getInstanceBuffer             ,
  _unsafeGetBufferFromBufferMap ,
  addGeometryBufferToPool       ,
  addAllBufferToPool            ,
  addInstanceBufferToPool       ,
  
}
/* SparseMapSystem-Wonderjs Not a pure module */
