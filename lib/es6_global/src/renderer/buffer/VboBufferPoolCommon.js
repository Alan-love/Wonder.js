// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as Log$WonderLog                       from "../../../../../node_modules/wonder-log/lib/es6_global/src/Log.js";
import * as Contract$WonderLog                  from "../../../../../node_modules/wonder-log/lib/es6_global/src/Contract.js";
import * as StateData$Wonderjs                  from "../../core/StateData.js";
import * as ArraySystem$Wonderjs                from "../../structure/ArraySystem.js";
import * as SparseMapSystem$Wonderjs            from "../../structure/SparseMapSystem.js";
import * as SparseMapSystem$WonderCommonlib     from "../../../../../node_modules/wonder-commonlib/lib/es6_global/src/SparseMapSystem.js";
import * as VboBufferGetStateDataUtils$Wonderjs from "./VboBufferGetStateDataUtils.js";

function _getBufferAndSetBufferMap(gl, bufferPool) {
  var match = bufferPool.pop();
  if (match !== undefined) {
    return match;
  } else {
    return gl.createBuffer();
  }
}

function getArrayBuffer(gl, state) {
  var match = VboBufferGetStateDataUtils$Wonderjs.getVboBufferData(state);
  return _getBufferAndSetBufferMap(gl, match[/* vertexArrayBufferPool */4]);
}

function getElementArrayBuffer(gl, state) {
  var match = VboBufferGetStateDataUtils$Wonderjs.getVboBufferData(state);
  return _getBufferAndSetBufferMap(gl, match[/* elementArrayBufferPool */5]);
}

function getInstanceBuffer(gl, state) {
  var match = VboBufferGetStateDataUtils$Wonderjs.getVboBufferData(state);
  return _getBufferAndSetBufferMap(gl, match[/* matrixInstanceBufferPool */6]);
}

var _getBufferFromBufferMap = SparseMapSystem$WonderCommonlib.get;

function _unsafeGetBufferFromBufferMap(index, bufferMap) {
  return Contract$WonderLog.ensureCheck((function () {
                return Contract$WonderLog.test(Log$WonderLog.buildAssertMessage("buffer exist in bufferMap", "not"), (function () {
                              return Contract$WonderLog.assertTrue(SparseMapSystem$WonderCommonlib.has(index, bufferMap));
                            }));
              }), StateData$Wonderjs.stateData[/* isDebug */1], SparseMapSystem$WonderCommonlib.unsafeGet(index, bufferMap));
}

function _addBufferToPool(geometryIndex, bufferMap, pool) {
  var match = SparseMapSystem$WonderCommonlib.get(geometryIndex, bufferMap);
  if (match) {
    return ArraySystem$Wonderjs.push(match[0], pool);
  } else {
    return pool;
  }
}

function addGeometryBufferToPool(geometryIndex, state) {
  var data = VboBufferGetStateDataUtils$Wonderjs.getVboBufferData(state);
  var newrecord = state.slice();
  newrecord[/* vboBufferData */29] = /* record */[
    /* vertexBufferMap */data[/* vertexBufferMap */0],
    /* normalBufferMap */data[/* normalBufferMap */1],
    /* elementArrayBufferMap */data[/* elementArrayBufferMap */2],
    /* matrixInstanceBufferMap */data[/* matrixInstanceBufferMap */3],
    /* vertexArrayBufferPool */_addBufferToPool(geometryIndex, data[/* normalBufferMap */1], _addBufferToPool(geometryIndex, data[/* vertexBufferMap */0], data[/* vertexArrayBufferPool */4])),
    /* elementArrayBufferPool */_addBufferToPool(geometryIndex, data[/* elementArrayBufferMap */2], data[/* elementArrayBufferPool */5]),
    /* matrixInstanceBufferPool */data[/* matrixInstanceBufferPool */6]
  ];
  return newrecord;
}

function addAllBufferToPool(state) {
  var match = VboBufferGetStateDataUtils$Wonderjs.getVboBufferData(state);
  var matrixInstanceBufferPool = match[/* matrixInstanceBufferPool */6];
  var elementArrayBufferPool = match[/* elementArrayBufferPool */5];
  var vertexArrayBufferPool = match[/* vertexArrayBufferPool */4];
  SparseMapSystem$Wonderjs.forEachValid((function (buffer) {
          vertexArrayBufferPool.push(buffer);
          return /* () */0;
        }), match[/* vertexBufferMap */0]);
  SparseMapSystem$Wonderjs.forEachValid((function (buffer) {
          vertexArrayBufferPool.push(buffer);
          return /* () */0;
        }), match[/* normalBufferMap */1]);
  SparseMapSystem$Wonderjs.forEachValid((function (buffer) {
          elementArrayBufferPool.push(buffer);
          return /* () */0;
        }), match[/* elementArrayBufferMap */2]);
  SparseMapSystem$Wonderjs.forEachValid((function (buffer) {
          matrixInstanceBufferPool.push(buffer);
          return /* () */0;
        }), match[/* matrixInstanceBufferMap */3]);
  return /* tuple */[
          vertexArrayBufferPool,
          elementArrayBufferPool,
          matrixInstanceBufferPool
        ];
}

function addInstanceBufferToPool(sourceInstanceIndex, state) {
  var match = VboBufferGetStateDataUtils$Wonderjs.getVboBufferData(state);
  match[/* matrixInstanceBufferPool */6].push(_unsafeGetBufferFromBufferMap(sourceInstanceIndex, match[/* matrixInstanceBufferMap */3]));
  return state;
}

export {
  _getBufferAndSetBufferMap     ,
  getArrayBuffer                ,
  getElementArrayBuffer         ,
  getInstanceBuffer             ,
  _getBufferFromBufferMap       ,
  _unsafeGetBufferFromBufferMap ,
  _addBufferToPool              ,
  addGeometryBufferToPool       ,
  addAllBufferToPool            ,
  addInstanceBufferToPool       ,
  
}
/* Log-WonderLog Not a pure module */
