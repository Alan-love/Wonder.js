// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as Log$WonderLog                                       from "../../../../../../node_modules/wonder-log/lib/es6_global/src/Log.js";
import * as Contract$WonderLog                                  from "../../../../../../node_modules/wonder-log/lib/es6_global/src/Contract.js";
import * as StateData$Wonderjs                                  from "../../../core/StateData.js";
import * as ArraySystem$Wonderjs                                from "../../../structure/ArraySystem.js";
import * as ArraySystem$WonderCommonlib                         from "../../../../../../node_modules/wonder-commonlib/lib/es6_global/src/ArraySystem.js";
import * as GLSLLocationSystem$Wonderjs                         from "../location/GLSLLocationSystem.js";
import * as GLSLSenderDrawUtils$Wonderjs                        from "./utils/GLSLSenderDrawUtils.js";
import * as GLSLSenderStateUtils$Wonderjs                       from "./utils/GLSLSenderStateUtils.js";
import * as SparseMapSystem$WonderCommonlib                     from "../../../../../../node_modules/wonder-commonlib/lib/es6_global/src/SparseMapSystem.js";
import * as GLSLSenderSendDataUtils$Wonderjs                    from "./utils/GLSLSenderSendDataUtils.js";
import * as GLSLSenderConfigDataHandleShaderDataCommon$Wonderjs from "./GLSLSenderConfigDataHandleShaderDataCommon.js";

function _addInstanceArrayBufferSendData(param, param$1) {
  return /* tuple */[
          param$1[0],
          ArraySystem$Wonderjs.push(/* record */[/* pos */GLSLLocationSystem$Wonderjs.getAttribLocation(param[1], param[2], param[3], param[0])], param$1[1])
        ];
}

function _addOtherArrayBufferSendData(param, param$1) {
  return /* tuple */[
          ArraySystem$Wonderjs.push(/* record */[
                /* pos */GLSLLocationSystem$Wonderjs.getAttribLocation(param[1], param[2], param[5], param[0]),
                /* size */GLSLSenderSendDataUtils$Wonderjs.getBufferSizeByType(param[4]),
                /* buffer */param[3],
                /* sendFunc */GLSLSenderSendDataUtils$Wonderjs.sendBuffer
              ], param$1[0]),
          param$1[1]
        ];
}

function _addElementBufferSendData(buffer, param) {
  return /* tuple */[
          ArraySystem$Wonderjs.push(/* record */[
                /* pos */0,
                /* size */0,
                /* buffer */buffer,
                /* sendFunc */GLSLSenderDrawUtils$Wonderjs.bindElementArrayBuffer
              ], param[0]),
          param[1]
        ];
}

function _readAttributes(param, sendDataArrTuple, attributes) {
  if (attributes) {
    var attributeLocationMap = param[2];
    var program = param[1];
    var gl = param[0];
    return ArraySystem$WonderCommonlib.reduceOneParam((function (sendDataArrTuple, param) {
                  var type_ = param[/* type_ */2];
                  var buffer = param[/* buffer */1];
                  var name = param[/* name */0];
                  if (name) {
                    if (type_) {
                      var name$1 = name[0];
                      if (buffer === "instance") {
                        return _addInstanceArrayBufferSendData(/* tuple */[
                                    gl,
                                    program,
                                    name$1,
                                    attributeLocationMap
                                  ], sendDataArrTuple);
                      } else {
                        return _addOtherArrayBufferSendData(/* tuple */[
                                    gl,
                                    program,
                                    name$1,
                                    buffer,
                                    type_[0],
                                    attributeLocationMap
                                  ], sendDataArrTuple);
                      }
                    } else {
                      return _addElementBufferSendData(buffer, sendDataArrTuple);
                    }
                  } else {
                    return _addElementBufferSendData(buffer, sendDataArrTuple);
                  }
                }), sendDataArrTuple, attributes[0]);
  } else {
    return sendDataArrTuple;
  }
}

function _readAttributeSendData(shaderLibDataArr, gl, program, attributeLocationMap) {
  return ArraySystem$WonderCommonlib.reduceOneParam((function (sendDataArrTuple, param) {
                var variables = param[/* variables */2];
                if (variables) {
                  return _readAttributes(/* tuple */[
                              gl,
                              program,
                              attributeLocationMap
                            ], sendDataArrTuple, variables[0][/* attributes */1]);
                } else {
                  return sendDataArrTuple;
                }
              }), /* tuple */[
              /* array */[],
              /* array */[]
            ], shaderLibDataArr);
}

function _setToAttributeSendMap(shaderIndex, _, state, param) {
  var match = GLSLSenderStateUtils$Wonderjs.getGLSLSenderData(state);
  SparseMapSystem$WonderCommonlib.set(shaderIndex, param[0], match[/* attributeSendDataMap */0]);
  SparseMapSystem$WonderCommonlib.set(shaderIndex, param[1], match[/* instanceAttributeSendDataMap */1]);
  return state;
}

function addAttributeSendData(param, shaderLibDataArr, state) {
  var shaderIndex = param[1];
  Contract$WonderLog.requireCheck((function () {
          return Contract$WonderLog.test(Log$WonderLog.buildAssertMessage("not be added before", "be"), (function () {
                        return Contract$WonderLog.assertNotExist(SparseMapSystem$WonderCommonlib.get(shaderIndex, GLSLSenderStateUtils$Wonderjs.getGLSLSenderData(state)[/* attributeSendDataMap */0]));
                      }));
        }), StateData$Wonderjs.stateData[/* isDebug */1]);
  var attributeLocationMap = GLSLSenderConfigDataHandleShaderDataCommon$Wonderjs.getOrCreateHashMap(GLSLLocationSystem$Wonderjs.getAttributeLocationMap(shaderIndex, state));
  return GLSLLocationSystem$Wonderjs.setAttributeLocationMap(shaderIndex, attributeLocationMap, _setToAttributeSendMap(shaderIndex, attributeLocationMap, state, _readAttributeSendData(shaderLibDataArr, param[0], param[2], attributeLocationMap)));
}

function unsafeGetAttributeSendData(shaderIndex, state) {
  var match = GLSLSenderStateUtils$Wonderjs.getGLSLSenderData(state);
  return Contract$WonderLog.ensureCheck((function (sendData) {
                return Contract$WonderLog.test(Log$WonderLog.buildAssertMessage("attribute send data exist", "not"), (function () {
                              return Contract$WonderLog.assertNullableExist(sendData);
                            }));
              }), StateData$Wonderjs.stateData[/* isDebug */1], SparseMapSystem$WonderCommonlib.unsafeGet(shaderIndex, match[/* attributeSendDataMap */0]));
}

function unsafeGetInstanceAttributeSendData(shaderIndex, state) {
  var match = GLSLSenderStateUtils$Wonderjs.getGLSLSenderData(state);
  return Contract$WonderLog.ensureCheck((function (sendData) {
                return Contract$WonderLog.test(Log$WonderLog.buildAssertMessage("instance attribute send data exist", "not"), (function () {
                              return Contract$WonderLog.assertNullableExist(sendData);
                            }));
              }), StateData$Wonderjs.stateData[/* isDebug */1], SparseMapSystem$WonderCommonlib.unsafeGet(shaderIndex, match[/* instanceAttributeSendDataMap */1]));
}

export {
  _addInstanceArrayBufferSendData    ,
  _addOtherArrayBufferSendData       ,
  _addElementBufferSendData          ,
  _readAttributes                    ,
  _readAttributeSendData             ,
  _setToAttributeSendMap             ,
  addAttributeSendData               ,
  unsafeGetAttributeSendData         ,
  unsafeGetInstanceAttributeSendData ,
  
}
/* Log-WonderLog Not a pure module */
