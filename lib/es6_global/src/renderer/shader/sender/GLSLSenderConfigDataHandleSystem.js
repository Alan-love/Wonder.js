// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as Contract$Wonderjs                from "../../../definition/Contract.js";
import * as TransformAdmin$Wonderjs          from "../../../ecs/admin/component/TransformAdmin.js";
import * as MaterialAdminAci$Wonderjs        from "../../../ecs/admin/avoid_circle_import/component/MaterialAdminAci.js";
import * as RenderDataSystem$Wonderjs        from "../../render/RenderDataSystem.js";
import * as ArraySystem$WonderCommonlib      from "../../../../../../node_modules/wonder-commonlib/lib/es6_global/src/ArraySystem.js";
import * as GLSLLocationSystem$Wonderjs      from "../location/GLSLLocationSystem.js";
import * as GLSLSenderDrawUtils$Wonderjs     from "./utils/GLSLSenderDrawUtils.js";
import * as GLSLSenderStateUtils$Wonderjs    from "./utils/GLSLSenderStateUtils.js";
import * as HashMapSystem$WonderCommonlib    from "../../../../../../node_modules/wonder-commonlib/lib/es6_global/src/HashMapSystem.js";
import * as ExceptionHandleSystem$Wonderjs   from "../../../exception/ExceptionHandleSystem.js";
import * as SparseMapSystem$WonderCommonlib  from "../../../../../../node_modules/wonder-commonlib/lib/es6_global/src/SparseMapSystem.js";
import * as GLSLSenderSendDataUtils$Wonderjs from "./utils/GLSLSenderSendDataUtils.js";

function _getOrCreateHashMap(map) {
  if (map) {
    return map[0];
  } else {
    return HashMapSystem$WonderCommonlib.createEmpty(/* () */0);
  }
}

function addAttributeSendData(gl, shaderIndex, program, shaderLibDataArr, state) {
  Contract$Wonderjs.requireCheck((function () {
          return Contract$Wonderjs.test("shouldn't be added before", (function () {
                        return Contract$Wonderjs.assertNotExist(SparseMapSystem$WonderCommonlib.get(shaderIndex, GLSLSenderStateUtils$Wonderjs.getGLSLSenderData(state)[/* attributeSendDataMap */0]));
                      }));
        }));
  var attributeLocationMap = _getOrCreateHashMap(GLSLLocationSystem$Wonderjs.getAttributeLocationMap(shaderIndex, state));
  var sendDataArr = ArraySystem$WonderCommonlib.createEmpty(/* () */0);
  var instanceSendNoCacheableDataArr = ArraySystem$WonderCommonlib.createEmpty(/* () */0);
  ArraySystem$WonderCommonlib.forEach((function (param) {
          var variables = param[/* variables */2];
          if (variables) {
            var attributes = variables[0][/* attributes */1];
            if (attributes) {
              return ArraySystem$WonderCommonlib.forEach((function (param) {
                            var type_ = param[/* type_ */2];
                            var buffer = param[/* buffer */1];
                            var name = param[/* name */0];
                            var exit = 0;
                            if (name) {
                              if (type_) {
                                var name$1 = name[0];
                                if (buffer === "instance") {
                                  instanceSendNoCacheableDataArr.push(/* record */[/* pos */GLSLLocationSystem$Wonderjs.getAttribLocation(program, name$1, attributeLocationMap, gl)]);
                                  return /* () */0;
                                } else {
                                  sendDataArr.push(/* record */[
                                        /* pos */GLSLLocationSystem$Wonderjs.getAttribLocation(program, name$1, attributeLocationMap, gl),
                                        /* size */GLSLSenderSendDataUtils$Wonderjs.getBufferSizeByType(type_[0]),
                                        /* buffer */buffer,
                                        /* sendFunc */GLSLSenderSendDataUtils$Wonderjs.sendBuffer
                                      ]);
                                  return /* () */0;
                                }
                              } else {
                                exit = 1;
                              }
                            } else {
                              exit = 1;
                            }
                            if (exit === 1) {
                              sendDataArr.push(/* record */[
                                    /* pos */0,
                                    /* size */0,
                                    /* buffer */buffer,
                                    /* sendFunc */GLSLSenderDrawUtils$Wonderjs.bindElementArrayBuffer
                                  ]);
                              return /* () */0;
                            }
                            
                          }), attributes[0]);
            } else {
              return /* () */0;
            }
          } else {
            return /* () */0;
          }
        }), shaderLibDataArr);
  var match = GLSLSenderStateUtils$Wonderjs.getGLSLSenderData(state);
  SparseMapSystem$WonderCommonlib.set(shaderIndex, sendDataArr, match[/* attributeSendDataMap */0]);
  SparseMapSystem$WonderCommonlib.set(shaderIndex, instanceSendNoCacheableDataArr, match[/* instanceAttributeSendDataMap */1]);
  return GLSLLocationSystem$Wonderjs.setAttributeLocationMap(shaderIndex, attributeLocationMap, state);
}

var _getModelMNoCacheableData = TransformAdmin$Wonderjs.getLocalToWorldMatrixTypeArray;

function _addUniformSendDataByType(sendNoCacheableDataArr, sendCacheableDataArr, type_, shaderCacheMap, name, pos, getDataFunc) {
  switch (type_) {
    case "mat4" : 
        sendNoCacheableDataArr.push(/* record */[
              /* pos */pos,
              /* getNoCacheableDataFunc */getDataFunc,
              /* sendNoCacheableDataFunc */GLSLSenderSendDataUtils$Wonderjs.sendMatrix4
            ]);
        return /* () */0;
    case "vec3" : 
        sendCacheableDataArr.push(/* record */[
              /* shaderCacheMap */shaderCacheMap,
              /* name */name,
              /* pos */pos,
              /* getCacheableDataFunc */getDataFunc,
              /* sendCacheableDataFunc */GLSLSenderSendDataUtils$Wonderjs.sendFloat3
            ]);
        return /* () */0;
    default:
      return ExceptionHandleSystem$Wonderjs.throwMessage("unknow type:" + (String(type_) + ""));
  }
}

function _addShaderUniformSendDataByType(sendNoCacheableDataArr, type_, pos, getDataFunc) {
  if (type_ === "mat4") {
    sendNoCacheableDataArr.push(/* record */[
          /* pos */pos,
          /* getNoCacheableDataFunc */getDataFunc,
          /* sendNoCacheableDataFunc */GLSLSenderSendDataUtils$Wonderjs.sendMatrix4
        ]);
    return /* () */0;
  } else {
    return ExceptionHandleSystem$Wonderjs.throwMessage("unknow type:" + (String(type_) + ""));
  }
}

function _addInstanceUniformSendDataByType(sendNoCacheableDataArr, type_, pos, getDataFunc) {
  if (type_ === "mat4") {
    sendNoCacheableDataArr.push(/* record */[
          /* pos */pos,
          /* getNoCacheableDataFunc */getDataFunc,
          /* sendNoCacheableDataFunc */GLSLSenderSendDataUtils$Wonderjs.sendMatrix4
        ]);
    return /* () */0;
  } else {
    return ExceptionHandleSystem$Wonderjs.throwMessage("unknow type:" + (String(type_) + ""));
  }
}

function addUniformSendData(gl, shaderIndex, program, shaderLibDataArr, state) {
  Contract$Wonderjs.requireCheck((function () {
          return Contract$Wonderjs.test("shouldn't be added before", (function () {
                        return Contract$Wonderjs.assertNotExist(SparseMapSystem$WonderCommonlib.get(shaderIndex, GLSLSenderStateUtils$Wonderjs.getGLSLSenderData(state)[/* uniformSendNoCacheableDataMap */3]));
                      }));
        }));
  var data = GLSLSenderStateUtils$Wonderjs.getGLSLSenderData(state);
  var uniformLocationMap = _getOrCreateHashMap(GLSLLocationSystem$Wonderjs.getUniformLocationMap(shaderIndex, state));
  var uniformCacheMap = _getOrCreateHashMap(GLSLSenderSendDataUtils$Wonderjs.getCacheMap(shaderIndex, data));
  var sendNoCacheableDataArr = ArraySystem$WonderCommonlib.createEmpty(/* () */0);
  var sendCacheableDataArr = ArraySystem$WonderCommonlib.createEmpty(/* () */0);
  var shaderSendNoCacheableDataArr = ArraySystem$WonderCommonlib.createEmpty(/* () */0);
  var instanceSendNoCacheableDataArr = ArraySystem$WonderCommonlib.createEmpty(/* () */0);
  ArraySystem$WonderCommonlib.forEach((function (param) {
          var variables = param[/* variables */2];
          if (variables) {
            var uniforms = variables[0][/* uniforms */0];
            if (uniforms) {
              return ArraySystem$WonderCommonlib.forEach((function (param) {
                            var from = param[/* from */3];
                            var type_ = param[/* type_ */2];
                            var field = param[/* field */1];
                            var name = param[/* name */0];
                            var pos = GLSLLocationSystem$Wonderjs.getUniformLocation(program, name, uniformLocationMap, gl);
                            switch (from) {
                              case "camera" : 
                                  switch (field) {
                                    case "pMatrix" : 
                                        return _addShaderUniformSendDataByType(shaderSendNoCacheableDataArr, type_, pos, RenderDataSystem$Wonderjs.getCameraPMatrixDataFromState);
                                    case "vMatrix" : 
                                        return _addShaderUniformSendDataByType(shaderSendNoCacheableDataArr, type_, pos, RenderDataSystem$Wonderjs.getCameraVMatrixDataFromState);
                                    default:
                                      return ExceptionHandleSystem$Wonderjs.throwMessage("unknow field:" + (String(field) + ""));
                                  }
                                  break;
                              case "material" : 
                                  if (field === "color") {
                                    return _addUniformSendDataByType(sendNoCacheableDataArr, sendCacheableDataArr, type_, uniformCacheMap, name, pos, MaterialAdminAci$Wonderjs.unsafeGetColor);
                                  } else {
                                    return ExceptionHandleSystem$Wonderjs.throwMessage("unknow field:" + (String(field) + ""));
                                  }
                                  break;
                              case "model" : 
                                  switch (field) {
                                    case "instance_mMatrix" : 
                                        return _addInstanceUniformSendDataByType(instanceSendNoCacheableDataArr, type_, pos, _getModelMNoCacheableData);
                                    case "mMatrix" : 
                                        return _addUniformSendDataByType(sendNoCacheableDataArr, sendCacheableDataArr, type_, uniformCacheMap, name, pos, _getModelMNoCacheableData);
                                    default:
                                      return ExceptionHandleSystem$Wonderjs.throwMessage("unknow field:" + (String(field) + ""));
                                  }
                                  break;
                              default:
                                return ExceptionHandleSystem$Wonderjs.throwMessage("unknow from:" + (String(from) + ""));
                            }
                          }), uniforms[0]);
            } else {
              return /* () */0;
            }
          } else {
            return /* () */0;
          }
        }), shaderLibDataArr);
  SparseMapSystem$WonderCommonlib.set(shaderIndex, sendNoCacheableDataArr, data[/* uniformSendNoCacheableDataMap */3]);
  SparseMapSystem$WonderCommonlib.set(shaderIndex, sendCacheableDataArr, data[/* uniformSendCacheableDataMap */4]);
  SparseMapSystem$WonderCommonlib.set(shaderIndex, shaderSendNoCacheableDataArr, data[/* shaderUniformSendNoCacheableDataMap */5]);
  SparseMapSystem$WonderCommonlib.set(shaderIndex, instanceSendNoCacheableDataArr, data[/* instanceUniformSendNoCacheableDataMap */6]);
  return GLSLLocationSystem$Wonderjs.setUniformLocationMap(shaderIndex, uniformLocationMap, state);
}

function getAttributeSendData(shaderIndex, state) {
  var match = GLSLSenderStateUtils$Wonderjs.getGLSLSenderData(state);
  return Contract$Wonderjs.ensureCheck((function () {
                return Contract$Wonderjs.test("attribute send data should exist", (function () {
                              var match = GLSLSenderStateUtils$Wonderjs.getGLSLSenderData(state);
                              return Contract$Wonderjs.assertExist(SparseMapSystem$WonderCommonlib.get(shaderIndex, match[/* attributeSendDataMap */0]));
                            }));
              }), SparseMapSystem$WonderCommonlib.unsafeGet(shaderIndex, match[/* attributeSendDataMap */0]));
}

function getInstanceAttributeSendData(shaderIndex, state) {
  var match = GLSLSenderStateUtils$Wonderjs.getGLSLSenderData(state);
  return Contract$Wonderjs.ensureCheck((function () {
                return Contract$Wonderjs.test("instance attribute send data should exist", (function () {
                              var match = GLSLSenderStateUtils$Wonderjs.getGLSLSenderData(state);
                              return Contract$Wonderjs.assertExist(SparseMapSystem$WonderCommonlib.get(shaderIndex, match[/* instanceAttributeSendDataMap */1]));
                            }));
              }), SparseMapSystem$WonderCommonlib.unsafeGet(shaderIndex, match[/* instanceAttributeSendDataMap */1]));
}

function _getUniformSendData(shaderIndex, map) {
  return Contract$Wonderjs.ensureCheck((function () {
                return Contract$Wonderjs.test("uniform send data should exist", (function () {
                              return Contract$Wonderjs.assertExist(SparseMapSystem$WonderCommonlib.get(shaderIndex, map));
                            }));
              }), SparseMapSystem$WonderCommonlib.unsafeGet(shaderIndex, map));
}

function getUniformSendNoCacheableData(shaderIndex, state) {
  return _getUniformSendData(shaderIndex, GLSLSenderStateUtils$Wonderjs.getGLSLSenderData(state)[/* uniformSendNoCacheableDataMap */3]);
}

function getUniformSendCacheableData(shaderIndex, state) {
  return _getUniformSendData(shaderIndex, GLSLSenderStateUtils$Wonderjs.getGLSLSenderData(state)[/* uniformSendCacheableDataMap */4]);
}

function getShaderUniformSendNoCacheableData(shaderIndex, state) {
  return _getUniformSendData(shaderIndex, GLSLSenderStateUtils$Wonderjs.getGLSLSenderData(state)[/* shaderUniformSendNoCacheableDataMap */5]);
}

function getInstanceUniformSendNoCacheableData(shaderIndex, state) {
  return _getUniformSendData(shaderIndex, GLSLSenderStateUtils$Wonderjs.getGLSLSenderData(state)[/* instanceUniformSendNoCacheableDataMap */6]);
}

export {
  _getOrCreateHashMap                   ,
  addAttributeSendData                  ,
  _getModelMNoCacheableData             ,
  _addUniformSendDataByType             ,
  _addShaderUniformSendDataByType       ,
  _addInstanceUniformSendDataByType     ,
  addUniformSendData                    ,
  getAttributeSendData                  ,
  getInstanceAttributeSendData          ,
  _getUniformSendData                   ,
  getUniformSendNoCacheableData         ,
  getUniformSendCacheableData           ,
  getShaderUniformSendNoCacheableData   ,
  getInstanceUniformSendNoCacheableData ,
  
}
/* TransformAdmin-Wonderjs Not a pure module */
