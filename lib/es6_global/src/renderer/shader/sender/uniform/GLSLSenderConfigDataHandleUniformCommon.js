// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as Log$WonderLog                                                          from "../../../../../../../node_modules/wonder-log/lib/es6_global/src/Log.js";
import * as Contract$WonderLog                                                     from "../../../../../../../node_modules/wonder-log/lib/es6_global/src/Contract.js";
import * as StateData$Wonderjs                                                     from "../../../../core/StateData.js";
import * as ArraySystem$WonderCommonlib                                            from "../../../../../../../node_modules/wonder-commonlib/lib/es6_global/src/ArraySystem.js";
import * as GLSLLocationSystem$Wonderjs                                            from "../../location/GLSLLocationSystem.js";
import * as GLSLSenderStateUtils$Wonderjs                                          from "../utils/GLSLSenderStateUtils.js";
import * as SparseMapSystem$WonderCommonlib                                        from "../../../../../../../node_modules/wonder-commonlib/lib/es6_global/src/SparseMapSystem.js";
import * as GLSLSenderSendDataUtils$Wonderjs                                       from "../utils/GLSLSenderSendDataUtils.js";
import * as GLSLSenderConfigDataHandleShaderDataCommon$Wonderjs                    from "../GLSLSenderConfigDataHandleShaderDataCommon.js";
import * as GLSLSenderConfigDataHandleLightUniformCommon$Wonderjs                  from "./light/GLSLSenderConfigDataHandleLightUniformCommon.js";
import * as GLSLSenderConfigDataHandleCameraUniformCommon$Wonderjs                 from "./camera/GLSLSenderConfigDataHandleCameraUniformCommon.js";
import * as GLSLSenderConfigDataHandleMoodelUniformCommon$Wonderjs                 from "./model/GLSLSenderConfigDataHandleMoodelUniformCommon.js";
import * as GLSLSenderConfigDataHandleMaterialUniformCommon$Wonderjs               from "./material/GLSLSenderConfigDataHandleMaterialUniformCommon.js";
import * as GLSLSenderConfigDataHandleUniformShaderCachableCommon$Wonderjs         from "./GLSLSenderConfigDataHandleUniformShaderCachableCommon.js";
import * as GLSLSenderConfigDataHandleUniformShaderNoCachableCommon$Wonderjs       from "./GLSLSenderConfigDataHandleUniformShaderNoCachableCommon.js";
import * as GLSLSenderConfigDataHandleUniformRenderObjectModelCommon$Wonderjs      from "./GLSLSenderConfigDataHandleUniformRenderObjectModelCommon.js";
import * as GLSLSenderConfigDataHandleUniformInstanceNoCachableCommon$Wonderjs     from "./GLSLSenderConfigDataHandleUniformInstanceNoCachableCommon.js";
import * as GLSLSenderConfigDataHandleUniformRenderObjectMaterialCommon$Wonderjs   from "./GLSLSenderConfigDataHandleUniformRenderObjectMaterialCommon.js";
import * as GLSLSenderConfigDataHandleUniformShaderCachableFunctionCommon$Wonderjs from "./GLSLSenderConfigDataHandleUniformShaderCachableFunctionCommon.js";

function _setToUniformSendMap(shaderIndex, param, state, param$1) {
  GLSLSenderConfigDataHandleUniformRenderObjectModelCommon$Wonderjs.setToUniformSendMap(shaderIndex, param[/* uniformRenderObjectSendModelDataMap */3], param$1[0]);
  GLSLSenderConfigDataHandleUniformRenderObjectMaterialCommon$Wonderjs.setToUniformSendMap(shaderIndex, param[/* uniformRenderObjectSendMaterialDataMap */4], param$1[1]);
  GLSLSenderConfigDataHandleUniformShaderNoCachableCommon$Wonderjs.setToUniformSendMap(shaderIndex, param[/* uniformShaderSendNoCachableDataMap */5], param$1[2]);
  GLSLSenderConfigDataHandleUniformShaderCachableCommon$Wonderjs.setToUniformSendMap(shaderIndex, param[/* uniformShaderSendCachableDataMap */6], param$1[3]);
  GLSLSenderConfigDataHandleUniformShaderCachableFunctionCommon$Wonderjs.setToUniformSendMap(shaderIndex, param[/* uniformShaderSendCachableFunctionDataMap */7], param$1[4]);
  GLSLSenderConfigDataHandleUniformInstanceNoCachableCommon$Wonderjs.setToUniformSendMap(shaderIndex, param[/* uniformInstanceSendNoCachableDataMap */8], param$1[5]);
  return state;
}

function _readUniforms(param, sendDataArrTuple, uniforms) {
  if (uniforms) {
    var uniformCacheMap = param[3];
    var uniformLocationMap = param[2];
    var program = param[1];
    var gl = param[0];
    return ArraySystem$WonderCommonlib.reduceOneParam((function (sendDataArrTuple, param) {
                  var from = param[/* from */3];
                  var type_ = param[/* type_ */2];
                  var field = param[/* field */1];
                  var name = param[/* name */0];
                  switch (from) {
                    case "ambientLight" : 
                        return GLSLSenderConfigDataHandleLightUniformCommon$Wonderjs.addAmbientLightSendData(/* tuple */[
                                    field,
                                    program,
                                    uniformCacheMap,
                                    uniformLocationMap
                                  ], sendDataArrTuple);
                    case "basicMaterial" : 
                        return GLSLSenderConfigDataHandleMaterialUniformCommon$Wonderjs.addBasicMaterialSendData(/* tuple */[
                                    field,
                                    GLSLLocationSystem$Wonderjs.getUniformLocation(program, name, uniformLocationMap, gl),
                                    name,
                                    type_,
                                    uniformCacheMap
                                  ], sendDataArrTuple);
                    case "camera" : 
                        return GLSLSenderConfigDataHandleCameraUniformCommon$Wonderjs.addCameraSendData(/* tuple */[
                                    field,
                                    GLSLLocationSystem$Wonderjs.getUniformLocation(program, name, uniformLocationMap, gl),
                                    name,
                                    type_,
                                    uniformCacheMap
                                  ], sendDataArrTuple);
                    case "directionLight" : 
                        return GLSLSenderConfigDataHandleLightUniformCommon$Wonderjs.addDirectionLightSendData(/* tuple */[
                                    field,
                                    program,
                                    uniformCacheMap,
                                    uniformLocationMap
                                  ], sendDataArrTuple);
                    case "lightMaterial" : 
                        return GLSLSenderConfigDataHandleMaterialUniformCommon$Wonderjs.addLightMaterialSendData(/* tuple */[
                                    field,
                                    GLSLLocationSystem$Wonderjs.getUniformLocation(program, name, uniformLocationMap, gl),
                                    name,
                                    type_,
                                    uniformCacheMap
                                  ], sendDataArrTuple);
                    case "model" : 
                        return GLSLSenderConfigDataHandleMoodelUniformCommon$Wonderjs.addModelSendData(/* tuple */[
                                    field,
                                    GLSLLocationSystem$Wonderjs.getUniformLocation(program, name, uniformLocationMap, gl),
                                    name,
                                    type_,
                                    uniformCacheMap
                                  ], sendDataArrTuple);
                    case "pointLight" : 
                        return GLSLSenderConfigDataHandleLightUniformCommon$Wonderjs.addPointLightSendData(/* tuple */[
                                    field,
                                    program,
                                    uniformCacheMap,
                                    uniformLocationMap
                                  ], sendDataArrTuple);
                    default:
                      return Log$WonderLog.fatal(Log$WonderLog.buildFatalMessage("_readUniforms", "unknow from:" + (String(from) + ""), "", "", ""));
                  }
                }), sendDataArrTuple, uniforms[0]);
  } else {
    return sendDataArrTuple;
  }
}

function _readUniformSendData(shaderLibDataArr, gl, program, param) {
  var uniformCacheMap = param[1];
  var uniformLocationMap = param[0];
  return ArraySystem$WonderCommonlib.reduceOneParam((function (sendDataArrTuple, param) {
                var variables = param[/* variables */2];
                if (variables) {
                  return _readUniforms(/* tuple */[
                              gl,
                              program,
                              uniformLocationMap,
                              uniformCacheMap
                            ], sendDataArrTuple, variables[0][/* uniforms */0]);
                } else {
                  return sendDataArrTuple;
                }
              }), /* tuple */[
              /* array */[],
              /* array */[],
              /* array */[],
              /* array */[],
              /* array */[],
              /* array */[]
            ], shaderLibDataArr);
}

function _checkShouldNotAddBefore(shaderIndex, state) {
  return Contract$WonderLog.requireCheck((function () {
                return Contract$WonderLog.test(Log$WonderLog.buildAssertMessage("not be added before", "be"), (function () {
                              return Contract$WonderLog.assertNotExist(SparseMapSystem$WonderCommonlib.get(shaderIndex, GLSLSenderStateUtils$Wonderjs.getGLSLSenderData(state)[/* uniformRenderObjectSendModelDataMap */3]));
                            }));
              }), StateData$Wonderjs.stateData[/* isDebug */1]);
}

function addUniformSendData(gl, param, state) {
  var shaderIndex = param[1];
  _checkShouldNotAddBefore(shaderIndex, state);
  var data = GLSLSenderStateUtils$Wonderjs.getGLSLSenderData(state);
  var uniformLocationMap = GLSLSenderConfigDataHandleShaderDataCommon$Wonderjs.getOrCreateHashMap(GLSLLocationSystem$Wonderjs.getUniformLocationMap(shaderIndex, state));
  return GLSLLocationSystem$Wonderjs.setUniformLocationMap(shaderIndex, uniformLocationMap, _setToUniformSendMap(shaderIndex, data, state, _readUniformSendData(param[2], gl, param[0], /* tuple */[
                      uniformLocationMap,
                      GLSLSenderConfigDataHandleShaderDataCommon$Wonderjs.getOrCreateHashMap(GLSLSenderSendDataUtils$Wonderjs.getCacheMap(shaderIndex, data))
                    ])));
}

var unsafeGetUniformRenderObjectSendMaterialData = GLSLSenderConfigDataHandleUniformRenderObjectMaterialCommon$Wonderjs.unsafeGetUniformSendData;

var unsafeGetUniformRenderObjectSendModelData = GLSLSenderConfigDataHandleUniformRenderObjectModelCommon$Wonderjs.unsafeGetUniformSendData;

var unsafeGetUniformShaderSendNoCachableData = GLSLSenderConfigDataHandleUniformShaderNoCachableCommon$Wonderjs.unsafeGetUniformSendData;

var unsafeGetUniformShaderSendCachableData = GLSLSenderConfigDataHandleUniformShaderCachableCommon$Wonderjs.unsafeGetUniformSendData;

var unsafeGetUniformShaderSendCachableFunctionData = GLSLSenderConfigDataHandleUniformShaderCachableFunctionCommon$Wonderjs.unsafeGetUniformSendData;

var unsafeGetUniformInstanceSendNoCachableData = GLSLSenderConfigDataHandleUniformInstanceNoCachableCommon$Wonderjs.unsafeGetUniformSendData;

export {
  _setToUniformSendMap                           ,
  _readUniforms                                  ,
  _readUniformSendData                           ,
  _checkShouldNotAddBefore                       ,
  addUniformSendData                             ,
  unsafeGetUniformRenderObjectSendMaterialData   ,
  unsafeGetUniformRenderObjectSendModelData      ,
  unsafeGetUniformShaderSendNoCachableData       ,
  unsafeGetUniformShaderSendCachableData         ,
  unsafeGetUniformShaderSendCachableFunctionData ,
  unsafeGetUniformInstanceSendNoCachableData     ,
  
}
/* Log-WonderLog Not a pure module */
