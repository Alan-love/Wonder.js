// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as Log$WonderLog                                                          from "../../../../../../node_modules/wonder-log/lib/es6_global/src/Log.js";
import * as Contract$WonderLog                                                     from "../../../../../../node_modules/wonder-log/lib/es6_global/src/Contract.js";
import * as StateData$Wonderjs                                                     from "../../../core/StateData.js";
import * as TransformAdmin$Wonderjs                                                from "../../../ecs/admin/component/TransformAdmin.js";
import * as RenderDataSystem$Wonderjs                                              from "../../render/RenderDataSystem.js";
import * as ArraySystem$WonderCommonlib                                            from "../../../../../../node_modules/wonder-commonlib/lib/es6_global/src/ArraySystem.js";
import * as GLSLLocationSystem$Wonderjs                                            from "../location/GLSLLocationSystem.js";
import * as GLSLSenderStateUtils$Wonderjs                                          from "./utils/GLSLSenderStateUtils.js";
import * as SendPointLightHandle$Wonderjs                                          from "../../../data/render/shader_lib/variable/SendPointLightHandle.js";
import * as BasicMaterialAdminAci$Wonderjs                                         from "../../../ecs/admin/avoid_circle_import/component/BasicMaterialAdminAci.js";
import * as LightMaterialAdminAci$Wonderjs                                         from "../../../ecs/admin/avoid_circle_import/component/LightMaterialAdminAci.js";
import * as SendAmbientLightHandle$Wonderjs                                        from "../../../data/render/shader_lib/variable/SendAmbientLightHandle.js";
import * as SparseMapSystem$WonderCommonlib                                        from "../../../../../../node_modules/wonder-commonlib/lib/es6_global/src/SparseMapSystem.js";
import * as GLSLSenderSendDataUtils$Wonderjs                                       from "./utils/GLSLSenderSendDataUtils.js";
import * as SendDirectionLightHandle$Wonderjs                                      from "../../../data/render/shader_lib/variable/SendDirectionLightHandle.js";
import * as GLSLSenderConfigDataHandleShaderDataCommon$Wonderjs                    from "./GLSLSenderConfigDataHandleShaderDataCommon.js";
import * as GLSLSenderConfigDataHandleUniformShaderCachableCommon$Wonderjs         from "./GLSLSenderConfigDataHandleUniformShaderCachableCommon.js";
import * as GLSLSenderConfigDataHandleUniformShaderNoCachableCommon$Wonderjs       from "./GLSLSenderConfigDataHandleUniformShaderNoCachableCommon.js";
import * as GLSLSenderConfigDataHandleUniformRenderObjectModelCommon$Wonderjs      from "./GLSLSenderConfigDataHandleUniformRenderObjectModelCommon.js";
import * as GLSLSenderConfigDataHandleUniformInstanceNoCachableCommon$Wonderjs     from "./GLSLSenderConfigDataHandleUniformInstanceNoCachableCommon.js";
import * as GLSLSenderConfigDataHandleUniformRenderObjectMaterialCommon$Wonderjs   from "./GLSLSenderConfigDataHandleUniformRenderObjectMaterialCommon.js";
import * as GLSLSenderConfigDataHandleUniformShaderCachableFunctionCommon$Wonderjs from "./GLSLSenderConfigDataHandleUniformShaderCachableFunctionCommon.js";

var _getModelMatrixNoCachableData = TransformAdmin$Wonderjs.getLocalToWorldMatrixTypeArray;

function _getNormalMatrixNoCachableData(transform, state) {
  return TransformAdmin$Wonderjs.getNormalMatrixTypeArray(transform, state)[0];
}

function _addCameraSendData(param, sendDataArrTuple) {
  var type_ = param[3];
  var pos = param[1];
  var field = param[0];
  switch (field) {
    case "pMatrix" : 
        return GLSLSenderConfigDataHandleUniformShaderNoCachableCommon$Wonderjs.addUniformSendDataByType(/* tuple */[
                    type_,
                    pos
                  ], sendDataArrTuple, RenderDataSystem$Wonderjs.getCameraPMatrixDataFromState);
    case "position" : 
        return GLSLSenderConfigDataHandleUniformShaderCachableCommon$Wonderjs.addUniformSendDataByType(/* tuple */[
                    param[4],
                    param[2],
                    pos,
                    type_
                  ], sendDataArrTuple, RenderDataSystem$Wonderjs.getCameraPositionDataFromState);
    case "vMatrix" : 
        return GLSLSenderConfigDataHandleUniformShaderNoCachableCommon$Wonderjs.addUniformSendDataByType(/* tuple */[
                    type_,
                    pos
                  ], sendDataArrTuple, RenderDataSystem$Wonderjs.getCameraVMatrixDataFromState);
    default:
      return Log$WonderLog.fatal(Log$WonderLog.buildFatalMessage("_addCameraSendData", "unknow field:" + (String(field) + ""), "", "", ""));
  }
}

function _addAmbientLightSendData(param, sendDataArrTuple) {
  var field = param[0];
  if (field === "send") {
    return GLSLSenderConfigDataHandleUniformShaderCachableFunctionCommon$Wonderjs.addUniformSendDataByType(/* tuple */[
                param[1],
                param[2],
                param[3]
              ], sendDataArrTuple, SendAmbientLightHandle$Wonderjs.send);
  } else {
    return Log$WonderLog.fatal(Log$WonderLog.buildFatalMessage("_addAmbientLightSendData", "unknow field:" + (String(field) + ""), "", "", ""));
  }
}

function _addDirectionLightSendData(param, sendDataArrTuple) {
  var field = param[0];
  if (field === "send") {
    return GLSLSenderConfigDataHandleUniformShaderCachableFunctionCommon$Wonderjs.addUniformSendDataByType(/* tuple */[
                param[1],
                param[2],
                param[3]
              ], sendDataArrTuple, SendDirectionLightHandle$Wonderjs.send);
  } else {
    return Log$WonderLog.fatal(Log$WonderLog.buildFatalMessage("_addDirectionLightSendData", "unknow field:" + (String(field) + ""), "", "", ""));
  }
}

function _addPointLightSendData(param, sendDataArrTuple) {
  var field = param[0];
  if (field === "send") {
    return GLSLSenderConfigDataHandleUniformShaderCachableFunctionCommon$Wonderjs.addUniformSendDataByType(/* tuple */[
                param[1],
                param[2],
                param[3]
              ], sendDataArrTuple, SendPointLightHandle$Wonderjs.send);
  } else {
    return Log$WonderLog.fatal(Log$WonderLog.buildFatalMessage("_addPointLightSendData", "unknow field:" + (String(field) + ""), "", "", ""));
  }
}

function _addBasicMaterialSendData(param, sendDataArrTuple) {
  var field = param[0];
  if (field === "color") {
    return GLSLSenderConfigDataHandleUniformRenderObjectMaterialCommon$Wonderjs.addUniformSendDataByType(/* tuple */[
                param[4],
                param[2],
                param[1],
                param[3]
              ], sendDataArrTuple, BasicMaterialAdminAci$Wonderjs.unsafeGetColor);
  } else {
    return Log$WonderLog.fatal(Log$WonderLog.buildFatalMessage("_addBasicMaterialSendData", "unknow field:" + (String(field) + ""), "", "", ""));
  }
}

function _addLightMaterialSendData(param, sendDataArrTuple) {
  var uniformCacheMap = param[4];
  var type_ = param[3];
  var name = param[2];
  var pos = param[1];
  var field = param[0];
  switch (field) {
    case "diffuseColor" : 
        return GLSLSenderConfigDataHandleUniformRenderObjectMaterialCommon$Wonderjs.addUniformSendDataByType(/* tuple */[
                    uniformCacheMap,
                    name,
                    pos,
                    type_
                  ], sendDataArrTuple, LightMaterialAdminAci$Wonderjs.unsafeGetDiffuseColor);
    case "shininess" : 
        return GLSLSenderConfigDataHandleUniformRenderObjectMaterialCommon$Wonderjs.addUniformSendDataByType(/* tuple */[
                    uniformCacheMap,
                    name,
                    pos,
                    type_
                  ], sendDataArrTuple, LightMaterialAdminAci$Wonderjs.unsafeGetShininess);
    case "specularColor" : 
        return GLSLSenderConfigDataHandleUniformRenderObjectMaterialCommon$Wonderjs.addUniformSendDataByType(/* tuple */[
                    uniformCacheMap,
                    name,
                    pos,
                    type_
                  ], sendDataArrTuple, LightMaterialAdminAci$Wonderjs.unsafeGetSpecularColor);
    default:
      return Log$WonderLog.fatal(Log$WonderLog.buildFatalMessage("_addLightMaterialSendData", "unknow field:" + (String(field) + ""), "", "", ""));
  }
}

function _addModelSendData(param, sendDataArrTuple) {
  var type_ = param[3];
  var pos = param[1];
  var field = param[0];
  switch (field) {
    case "instance_mMatrix" : 
        return GLSLSenderConfigDataHandleUniformInstanceNoCachableCommon$Wonderjs.addUniformSendDataByType(pos, sendDataArrTuple, /* tuple */[
                    _getModelMatrixNoCachableData,
                    GLSLSenderSendDataUtils$Wonderjs.sendMatrix4
                  ]);
    case "instance_normalMatrix" : 
        return GLSLSenderConfigDataHandleUniformInstanceNoCachableCommon$Wonderjs.addUniformSendDataByType(pos, sendDataArrTuple, /* tuple */[
                    _getNormalMatrixNoCachableData,
                    GLSLSenderSendDataUtils$Wonderjs.sendMatrix3
                  ]);
    case "mMatrix" : 
        return GLSLSenderConfigDataHandleUniformRenderObjectModelCommon$Wonderjs.addUniformSendDataByType(/* tuple */[
                    pos,
                    type_
                  ], sendDataArrTuple, _getModelMatrixNoCachableData);
    case "normalMatrix" : 
        return GLSLSenderConfigDataHandleUniformRenderObjectModelCommon$Wonderjs.addUniformSendDataByType(/* tuple */[
                    pos,
                    type_
                  ], sendDataArrTuple, _getNormalMatrixNoCachableData);
    default:
      return Log$WonderLog.fatal(Log$WonderLog.buildFatalMessage("_addModelSendData", "unknow field:" + (String(field) + ""), "", "", ""));
  }
}

function _setToUniformSendMap(shaderIndex, param, state, param$1) {
  GLSLSenderConfigDataHandleUniformRenderObjectModelCommon$Wonderjs.setToUniformSendMap(shaderIndex, param[/* uniformRenderObjectSendModelDataMap */3], param$1[0]);
  GLSLSenderConfigDataHandleUniformRenderObjectMaterialCommon$Wonderjs.setToUniformSendMap(shaderIndex, param[/* uniformRenderObjectSendMaterialDataMap */4], param$1[1]);
  GLSLSenderConfigDataHandleUniformShaderNoCachableCommon$Wonderjs.setToUniformSendMap(shaderIndex, param[/* uniformShaderSendNoCachableDataMap */5], param$1[2]);
  GLSLSenderConfigDataHandleUniformShaderCachableCommon$Wonderjs.setToUniformSendMap(shaderIndex, param[/* uniformShaderSendCachableDataMap */6], param$1[3]);
  GLSLSenderConfigDataHandleUniformShaderCachableFunctionCommon$Wonderjs.setToUniformSendMap(shaderIndex, param[/* uniformShaderSendCachableFunctionDataMap */7], param$1[4]);
  GLSLSenderConfigDataHandleUniformInstanceNoCachableCommon$Wonderjs.setToUniformSendMap(shaderIndex, param[/* uniformInstanceSendNoCachableDataMap */8], param$1[5]);
  return state;
}

function _readUniforms(param, sendDataArrTuple, uniforms) {
  if (uniforms) {
    var uniformCacheMap = param[3];
    var uniformLocationMap = param[2];
    var program = param[1];
    var gl = param[0];
    return ArraySystem$WonderCommonlib.reduceOneParam((function (sendDataArrTuple, param) {
                  var from = param[/* from */3];
                  var type_ = param[/* type_ */2];
                  var field = param[/* field */1];
                  var name = param[/* name */0];
                  switch (from) {
                    case "ambientLight" : 
                        return _addAmbientLightSendData(/* tuple */[
                                    field,
                                    program,
                                    uniformCacheMap,
                                    uniformLocationMap
                                  ], sendDataArrTuple);
                    case "basicMaterial" : 
                        return _addBasicMaterialSendData(/* tuple */[
                                    field,
                                    GLSLLocationSystem$Wonderjs.getUniformLocation(program, name, uniformLocationMap, gl),
                                    name,
                                    type_,
                                    uniformCacheMap
                                  ], sendDataArrTuple);
                    case "camera" : 
                        return _addCameraSendData(/* tuple */[
                                    field,
                                    GLSLLocationSystem$Wonderjs.getUniformLocation(program, name, uniformLocationMap, gl),
                                    name,
                                    type_,
                                    uniformCacheMap
                                  ], sendDataArrTuple);
                    case "directionLight" : 
                        return _addDirectionLightSendData(/* tuple */[
                                    field,
                                    program,
                                    uniformCacheMap,
                                    uniformLocationMap
                                  ], sendDataArrTuple);
                    case "lightMaterial" : 
                        return _addLightMaterialSendData(/* tuple */[
                                    field,
                                    GLSLLocationSystem$Wonderjs.getUniformLocation(program, name, uniformLocationMap, gl),
                                    name,
                                    type_,
                                    uniformCacheMap
                                  ], sendDataArrTuple);
                    case "model" : 
                        return _addModelSendData(/* tuple */[
                                    field,
                                    GLSLLocationSystem$Wonderjs.getUniformLocation(program, name, uniformLocationMap, gl),
                                    name,
                                    type_,
                                    uniformCacheMap
                                  ], sendDataArrTuple);
                    case "pointLight" : 
                        return _addPointLightSendData(/* tuple */[
                                    field,
                                    program,
                                    uniformCacheMap,
                                    uniformLocationMap
                                  ], sendDataArrTuple);
                    default:
                      return Log$WonderLog.fatal(Log$WonderLog.buildFatalMessage("_readUniforms", "unknow from:" + (String(from) + ""), "", "", ""));
                  }
                }), sendDataArrTuple, uniforms[0]);
  } else {
    return sendDataArrTuple;
  }
}

function _readUniformSendData(shaderLibDataArr, gl, program, param) {
  var uniformCacheMap = param[1];
  var uniformLocationMap = param[0];
  return ArraySystem$WonderCommonlib.reduceOneParam((function (sendDataArrTuple, param) {
                var variables = param[/* variables */2];
                if (variables) {
                  return _readUniforms(/* tuple */[
                              gl,
                              program,
                              uniformLocationMap,
                              uniformCacheMap
                            ], sendDataArrTuple, variables[0][/* uniforms */0]);
                } else {
                  return sendDataArrTuple;
                }
              }), /* tuple */[
              /* array */[],
              /* array */[],
              /* array */[],
              /* array */[],
              /* array */[],
              /* array */[]
            ], shaderLibDataArr);
}

function _checkShouldNotAddBefore(shaderIndex, state) {
  return Contract$WonderLog.requireCheck((function () {
                return Contract$WonderLog.test(Log$WonderLog.buildAssertMessage("not be added before", "be"), (function () {
                              return Contract$WonderLog.assertNotExist(SparseMapSystem$WonderCommonlib.get(shaderIndex, GLSLSenderStateUtils$Wonderjs.getGLSLSenderData(state)[/* uniformRenderObjectSendModelDataMap */3]));
                            }));
              }), StateData$Wonderjs.stateData[/* isDebug */1]);
}

function addUniformSendData(gl, param, state) {
  var shaderIndex = param[1];
  _checkShouldNotAddBefore(shaderIndex, state);
  var data = GLSLSenderStateUtils$Wonderjs.getGLSLSenderData(state);
  var uniformLocationMap = GLSLSenderConfigDataHandleShaderDataCommon$Wonderjs.getOrCreateHashMap(GLSLLocationSystem$Wonderjs.getUniformLocationMap(shaderIndex, state));
  return GLSLLocationSystem$Wonderjs.setUniformLocationMap(shaderIndex, uniformLocationMap, _setToUniformSendMap(shaderIndex, data, state, _readUniformSendData(param[2], gl, param[0], /* tuple */[
                      uniformLocationMap,
                      GLSLSenderConfigDataHandleShaderDataCommon$Wonderjs.getOrCreateHashMap(GLSLSenderSendDataUtils$Wonderjs.getCacheMap(shaderIndex, data))
                    ])));
}

var unsafeGetUniformRenderObjectSendMaterialData = GLSLSenderConfigDataHandleUniformRenderObjectMaterialCommon$Wonderjs.unsafeGetUniformSendData;

var unsafeGetUniformRenderObjectSendModelData = GLSLSenderConfigDataHandleUniformRenderObjectModelCommon$Wonderjs.unsafeGetUniformSendData;

var unsafeGetUniformShaderSendNoCachableData = GLSLSenderConfigDataHandleUniformShaderNoCachableCommon$Wonderjs.unsafeGetUniformSendData;

var unsafeGetUniformShaderSendCachableData = GLSLSenderConfigDataHandleUniformShaderCachableCommon$Wonderjs.unsafeGetUniformSendData;

var unsafeGetUniformShaderSendCachableFunctionData = GLSLSenderConfigDataHandleUniformShaderCachableFunctionCommon$Wonderjs.unsafeGetUniformSendData;

var unsafeGetUniformInstanceSendNoCachableData = GLSLSenderConfigDataHandleUniformInstanceNoCachableCommon$Wonderjs.unsafeGetUniformSendData;

export {
  _getModelMatrixNoCachableData                  ,
  _getNormalMatrixNoCachableData                 ,
  _addCameraSendData                             ,
  _addAmbientLightSendData                       ,
  _addDirectionLightSendData                     ,
  _addPointLightSendData                         ,
  _addBasicMaterialSendData                      ,
  _addLightMaterialSendData                      ,
  _addModelSendData                              ,
  _setToUniformSendMap                           ,
  _readUniforms                                  ,
  _readUniformSendData                           ,
  _checkShouldNotAddBefore                       ,
  addUniformSendData                             ,
  unsafeGetUniformRenderObjectSendMaterialData   ,
  unsafeGetUniformRenderObjectSendModelData      ,
  unsafeGetUniformShaderSendNoCachableData       ,
  unsafeGetUniformShaderSendCachableData         ,
  unsafeGetUniformShaderSendCachableFunctionData ,
  unsafeGetUniformInstanceSendNoCachableData     ,
  
}
/* Log-WonderLog Not a pure module */
