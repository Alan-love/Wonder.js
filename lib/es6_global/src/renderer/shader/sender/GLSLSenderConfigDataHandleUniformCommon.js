// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as Contract$Wonderjs                                        from "../../../definition/Contract.js";
import * as TransformAdmin$Wonderjs                                  from "../../../ecs/admin/component/TransformAdmin.js";
import * as MaterialAdminAci$Wonderjs                                from "../../../ecs/admin/avoid_circle_import/component/MaterialAdminAci.js";
import * as RenderDataSystem$Wonderjs                                from "../../render/RenderDataSystem.js";
import * as ArraySystem$WonderCommonlib                              from "../../../../../../node_modules/wonder-commonlib/lib/es6_global/src/ArraySystem.js";
import * as GLSLLocationSystem$Wonderjs                              from "../location/GLSLLocationSystem.js";
import * as GLSLSenderStateUtils$Wonderjs                            from "./utils/GLSLSenderStateUtils.js";
import * as ExceptionHandleSystem$Wonderjs                           from "../../../exception/ExceptionHandleSystem.js";
import * as SparseMapSystem$WonderCommonlib                          from "../../../../../../node_modules/wonder-commonlib/lib/es6_global/src/SparseMapSystem.js";
import * as GLSLSenderSendDataUtils$Wonderjs                         from "./utils/GLSLSenderSendDataUtils.js";
import * as GLSLSenderConfigDataHandleShaderDataCommon$Wonderjs      from "./GLSLSenderConfigDataHandleShaderDataCommon.js";
import * as GLSLSenderConfigDataHandleUniformCacheCommon$Wonderjs    from "./GLSLSenderConfigDataHandleUniformCacheCommon.js";
import * as GLSLSenderConfigDataHandleUniformShaderCommon$Wonderjs   from "./GLSLSenderConfigDataHandleUniformShaderCommon.js";
import * as GLSLSenderConfigDataHandleUniformNoCacheCommon$Wonderjs  from "./GLSLSenderConfigDataHandleUniformNoCacheCommon.js";
import * as GLSLSenderConfigDataHandleUniformInstanceCommon$Wonderjs from "./GLSLSenderConfigDataHandleUniformInstanceCommon.js";

var _getModelMNoCachableData = TransformAdmin$Wonderjs.getLocalToWorldMatrixTypeArray;

function _addUniformSendDataByType(param, sendDataArrTuple, getDataFunc) {
  var pos = param[3];
  var type_ = param[0];
  switch (type_) {
    case "mat4" : 
        return GLSLSenderConfigDataHandleUniformNoCacheCommon$Wonderjs.addUniformSendDataByType(pos, sendDataArrTuple, getDataFunc);
    case "vec3" : 
        return GLSLSenderConfigDataHandleUniformCacheCommon$Wonderjs.addUniformSendDataByType(/* tuple */[
                    param[1],
                    param[2],
                    pos
                  ], sendDataArrTuple, getDataFunc);
    default:
      return ExceptionHandleSystem$Wonderjs.throwMessage("unknow type:" + (String(type_) + ""));
  }
}

function _addCameraSendData(param, sendDataArrTuple) {
  var type_ = param[2];
  var pos = param[1];
  var field = param[0];
  switch (field) {
    case "pMatrix" : 
        return GLSLSenderConfigDataHandleUniformShaderCommon$Wonderjs.addUniformSendDataByType(/* tuple */[
                    type_,
                    pos
                  ], sendDataArrTuple, RenderDataSystem$Wonderjs.getCameraPMatrixDataFromState);
    case "vMatrix" : 
        return GLSLSenderConfigDataHandleUniformShaderCommon$Wonderjs.addUniformSendDataByType(/* tuple */[
                    type_,
                    pos
                  ], sendDataArrTuple, RenderDataSystem$Wonderjs.getCameraVMatrixDataFromState);
    default:
      return ExceptionHandleSystem$Wonderjs.throwMessage("unknow field:" + (String(field) + ""));
  }
}

function _addMaterialSendData(param, sendDataArrTuple) {
  var field = param[0];
  if (field === "color") {
    return _addUniformSendDataByType(/* tuple */[
                param[3],
                param[4],
                param[2],
                param[1]
              ], sendDataArrTuple, MaterialAdminAci$Wonderjs.unsafeGetColor);
  } else {
    return ExceptionHandleSystem$Wonderjs.throwMessage("unknow field:" + (String(field) + ""));
  }
}

function _addModelSendData(param, sendDataArrTuple) {
  var type_ = param[3];
  var pos = param[1];
  var field = param[0];
  switch (field) {
    case "instance_mMatrix" : 
        return GLSLSenderConfigDataHandleUniformInstanceCommon$Wonderjs.addUniformSendDataByType(/* tuple */[
                    type_,
                    pos
                  ], sendDataArrTuple, _getModelMNoCachableData);
    case "mMatrix" : 
        return _addUniformSendDataByType(/* tuple */[
                    type_,
                    param[4],
                    param[2],
                    pos
                  ], sendDataArrTuple, _getModelMNoCachableData);
    default:
      return ExceptionHandleSystem$Wonderjs.throwMessage("unknow field:" + (String(field) + ""));
  }
}

function _setToUniformSendMap(shaderIndex, param, state, param$1) {
  GLSLSenderConfigDataHandleUniformNoCacheCommon$Wonderjs.setToUniformSendMap(shaderIndex, param[/* uniformSendNoCachableDataMap */3], param$1[0]);
  GLSLSenderConfigDataHandleUniformCacheCommon$Wonderjs.setToUniformSendMap(shaderIndex, param[/* uniformSendCachableDataMap */4], param$1[1]);
  GLSLSenderConfigDataHandleUniformShaderCommon$Wonderjs.setToUniformSendMap(shaderIndex, param[/* shaderUniformSendNoCachableDataMap */5], param$1[2]);
  GLSLSenderConfigDataHandleUniformInstanceCommon$Wonderjs.setToUniformSendMap(shaderIndex, param[/* instanceUniformSendNoCachableDataMap */6], param$1[3]);
  return state;
}

function _readUniforms(param, sendDataArrTuple, uniforms) {
  if (uniforms) {
    var uniformCacheMap = param[3];
    var uniformLocationMap = param[2];
    var program = param[1];
    var gl = param[0];
    return ArraySystem$WonderCommonlib.reduceOneParam((function (sendDataArrTuple, param) {
                  var from = param[/* from */3];
                  var type_ = param[/* type_ */2];
                  var field = param[/* field */1];
                  var name = param[/* name */0];
                  var pos = GLSLLocationSystem$Wonderjs.getUniformLocation(program, name, uniformLocationMap, gl);
                  switch (from) {
                    case "camera" : 
                        return _addCameraSendData(/* tuple */[
                                    field,
                                    pos,
                                    type_
                                  ], sendDataArrTuple);
                    case "material" : 
                        return _addMaterialSendData(/* tuple */[
                                    field,
                                    pos,
                                    name,
                                    type_,
                                    uniformCacheMap
                                  ], sendDataArrTuple);
                    case "model" : 
                        return _addModelSendData(/* tuple */[
                                    field,
                                    pos,
                                    name,
                                    type_,
                                    uniformCacheMap
                                  ], sendDataArrTuple);
                    default:
                      return ExceptionHandleSystem$Wonderjs.throwMessage("unknow from:" + (String(from) + ""));
                  }
                }), sendDataArrTuple, uniforms[0]);
  } else {
    return sendDataArrTuple;
  }
}

function _readUniformSendData(shaderLibDataArr, gl, program, param) {
  var uniformCacheMap = param[1];
  var uniformLocationMap = param[0];
  return ArraySystem$WonderCommonlib.reduceOneParam((function (sendDataArrTuple, param) {
                var variables = param[/* variables */2];
                if (variables) {
                  return _readUniforms(/* tuple */[
                              gl,
                              program,
                              uniformLocationMap,
                              uniformCacheMap
                            ], sendDataArrTuple, variables[0][/* uniforms */0]);
                } else {
                  return sendDataArrTuple;
                }
              }), /* tuple */[
              /* array */[],
              /* array */[],
              /* array */[],
              /* array */[]
            ], shaderLibDataArr);
}

function _checkShouldNotAddBefore(shaderIndex, state) {
  return Contract$Wonderjs.requireCheck((function () {
                return Contract$Wonderjs.test("shouldn't be added before", (function () {
                              return Contract$Wonderjs.assertNotExist(SparseMapSystem$WonderCommonlib.get(shaderIndex, GLSLSenderStateUtils$Wonderjs.getGLSLSenderData(state)[/* uniformSendNoCachableDataMap */3]));
                            }));
              }));
}

function addUniformSendData(gl, param, state) {
  var shaderIndex = param[1];
  _checkShouldNotAddBefore(shaderIndex, state);
  var data = GLSLSenderStateUtils$Wonderjs.getGLSLSenderData(state);
  var uniformLocationMap = GLSLSenderConfigDataHandleShaderDataCommon$Wonderjs.getOrCreateHashMap(GLSLLocationSystem$Wonderjs.getUniformLocationMap(shaderIndex, state));
  return GLSLLocationSystem$Wonderjs.setUniformLocationMap(shaderIndex, uniformLocationMap, _setToUniformSendMap(shaderIndex, data, state, _readUniformSendData(param[2], gl, param[0], /* tuple */[
                      uniformLocationMap,
                      GLSLSenderConfigDataHandleShaderDataCommon$Wonderjs.getOrCreateHashMap(GLSLSenderSendDataUtils$Wonderjs.getCacheMap(shaderIndex, data))
                    ])));
}

var getUniformSendNoCachableData = GLSLSenderConfigDataHandleUniformNoCacheCommon$Wonderjs.getUniformSendData;

var getUniformSendCachableData = GLSLSenderConfigDataHandleUniformCacheCommon$Wonderjs.getUniformSendData;

var getShaderUniformSendNoCachableData = GLSLSenderConfigDataHandleUniformShaderCommon$Wonderjs.getUniformSendData;

var getInstanceUniformSendNoCachableData = GLSLSenderConfigDataHandleUniformInstanceCommon$Wonderjs.getUniformSendData;

export {
  _getModelMNoCachableData             ,
  _addUniformSendDataByType            ,
  _addCameraSendData                   ,
  _addMaterialSendData                 ,
  _addModelSendData                    ,
  _setToUniformSendMap                 ,
  _readUniforms                        ,
  _readUniformSendData                 ,
  _checkShouldNotAddBefore             ,
  addUniformSendData                   ,
  getUniformSendNoCachableData         ,
  getUniformSendCachableData           ,
  getShaderUniformSendNoCachableData   ,
  getInstanceUniformSendNoCachableData ,
  
}
/* TransformAdmin-Wonderjs Not a pure module */
