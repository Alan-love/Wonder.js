// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as Caml_array                                from "../../../../../node_modules/bs-platform/lib/es6/caml_array.js";
import * as ArraySystem$Wonderjs                      from "../../structure/ArraySystem.js";
import * as ProgramSystem$Wonderjs                    from "./program/ProgramSystem.js";
import * as ShaderStateCommon$Wonderjs                from "./ShaderStateCommon.js";
import * as HashMapSystem$WonderCommonlib             from "../../../../../node_modules/wonder-commonlib/lib/es6_global/src/HashMapSystem.js";
import * as ShaderSourceBuildCommon$Wonderjs          from "./ShaderSourceBuildCommon.js";
import * as GLSLSenderConfigDataHandleSystem$Wonderjs from "./sender/GLSLSenderConfigDataHandleSystem.js";

function getAllShaderIndexArray(state) {
  return ArraySystem$Wonderjs.range(0, ShaderStateCommon$Wonderjs.getShaderData(state)[/* index */0] - 1 | 0);
}

function _genereateShaderIndex(state) {
  var shaderData = ShaderStateCommon$Wonderjs.getShaderData(state);
  var index = shaderData[/* index */0];
  shaderData[/* index */0] = index + 1 | 0;
  return /* tuple */[
          state,
          index
        ];
}

function _getShaderIndex(key, param) {
  var shaderIndexMap = param[/* shaderIndexMap */1];
  return HashMapSystem$WonderCommonlib.get(key, shaderIndexMap);
}

function _setShaderIndex(key, shaderIndex, param) {
  var shaderIndexMap = param[/* shaderIndexMap */1];
  return HashMapSystem$WonderCommonlib.set(key, shaderIndex, shaderIndexMap);
}

function _join(array) {
  var output = "";
  for(var i = 0 ,i_finish = array.length - 1 | 0; i <= i_finish; ++i){
    output = output + Caml_array.caml_array_get(array, i)[/* name */0];
  }
  return output;
}

var _buildShaderIndexMapKey = _join;

function _init(gl, materialIndex, shaderLibDataArr, buildGLSLSource, state) {
  var shaderData = ShaderStateCommon$Wonderjs.getShaderData(state);
  var key = _join(shaderLibDataArr);
  var match = _getShaderIndex(key, shaderData);
  if (match) {
    return match[0];
  } else {
    var match$1 = _genereateShaderIndex(state);
    var shaderIndex = match$1[1];
    var state$1 = match$1[0];
    _setShaderIndex(key, shaderIndex, shaderData);
    var match$2 = buildGLSLSource(materialIndex, shaderLibDataArr, state$1);
    var program = ProgramSystem$Wonderjs.initShader(match$2[0], match$2[1], gl, ProgramSystem$Wonderjs.registerProgram(shaderIndex, state$1, ProgramSystem$Wonderjs.createProgram(gl)));
    GLSLSenderConfigDataHandleSystem$Wonderjs.addUniformSendData(gl, /* tuple */[
          program,
          shaderIndex,
          shaderLibDataArr
        ], GLSLSenderConfigDataHandleSystem$Wonderjs.addAttributeSendData(/* tuple */[
              gl,
              shaderIndex,
              program
            ], shaderLibDataArr, state$1));
    return shaderIndex;
  }
}

var getPrecisionSource = ShaderSourceBuildCommon$Wonderjs.getPrecisionSource;

var initMaterialShader = _init;

var getIntersectShaderIndexDataArray = ShaderStateCommon$Wonderjs.getIntersectShaderIndexDataArray;

var deepCopyStateForRestore = ShaderStateCommon$Wonderjs.deepCopyStateForRestore;

var restore = ShaderStateCommon$Wonderjs.restore;

export {
  getAllShaderIndexArray           ,
  _genereateShaderIndex            ,
  _getShaderIndex                  ,
  _setShaderIndex                  ,
  _join                            ,
  _buildShaderIndexMapKey          ,
  _init                            ,
  getPrecisionSource               ,
  initMaterialShader               ,
  getIntersectShaderIndexDataArray ,
  deepCopyStateForRestore          ,
  restore                          ,
  
}
/* ArraySystem-Wonderjs Not a pure module */
