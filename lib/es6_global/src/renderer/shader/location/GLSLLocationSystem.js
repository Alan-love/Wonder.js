// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as HashMapSystem$WonderCommonlib        from "../../../../../../node_modules/wonder-commonlib/lib/es6_global/src/HashMapSystem.js";
import * as SparseMapSystem$WonderCommonlib      from "../../../../../../node_modules/wonder-commonlib/lib/es6_global/src/SparseMapSystem.js";
import * as ShaderRestoreFromStateUtils$Wonderjs from "../utils/ShaderRestoreFromStateUtils.js";

function _getGLSLLocationData(state) {
  return state[/* glslLocationData */18];
}

function getAttribLocation(program, name, attributeLocationMap, gl) {
  var match = HashMapSystem$WonderCommonlib.get(name, attributeLocationMap);
  if (match) {
    return match[0];
  } else {
    var pos = gl.getAttribLocation(program, name);
    HashMapSystem$WonderCommonlib.set(name, pos, attributeLocationMap);
    return pos;
  }
}

function getUniformLocation(program, name, uniformLocationMap, gl) {
  var match = HashMapSystem$WonderCommonlib.get(name, uniformLocationMap);
  if (match) {
    return match[0];
  } else {
    var pos = gl.getUniformLocation(program, name);
    HashMapSystem$WonderCommonlib.set(name, pos, uniformLocationMap);
    return pos;
  }
}

function getAttributeLocationMap(shaderIndex, state) {
  return SparseMapSystem$WonderCommonlib.get(shaderIndex, state[/* glslLocationData */18][/* attributeLocationMap */0]);
}

function setAttributeLocationMap(shaderIndex, attributeLocationMap, state) {
  SparseMapSystem$WonderCommonlib.set(shaderIndex, attributeLocationMap, state[/* glslLocationData */18][/* attributeLocationMap */0]);
  return state;
}

function getUniformLocationMap(shaderIndex, state) {
  return SparseMapSystem$WonderCommonlib.get(shaderIndex, state[/* glslLocationData */18][/* uniformLocationMap */1]);
}

function setUniformLocationMap(shaderIndex, uniformLocationMap, state) {
  SparseMapSystem$WonderCommonlib.set(shaderIndex, uniformLocationMap, state[/* glslLocationData */18][/* uniformLocationMap */1]);
  return state;
}

function createLocationMap() {
  return HashMapSystem$WonderCommonlib.createEmpty(/* () */0);
}

function deepCopyStateForRestore(state) {
  return state;
}

function restore(intersectShaderIndexDataArray, currentState, targetState) {
  var match = currentState[/* glslLocationData */18];
  var newrecord = targetState.slice();
  newrecord[/* glslLocationData */18] = /* record */[
    /* attributeLocationMap */ShaderRestoreFromStateUtils$Wonderjs.getIntersectShaderRelatedMap(intersectShaderIndexDataArray, match[/* attributeLocationMap */0]),
    /* uniformLocationMap */ShaderRestoreFromStateUtils$Wonderjs.getIntersectShaderRelatedMap(intersectShaderIndexDataArray, match[/* uniformLocationMap */1])
  ];
  return newrecord;
}

export {
  _getGLSLLocationData    ,
  getAttribLocation       ,
  getUniformLocation      ,
  getAttributeLocationMap ,
  setAttributeLocationMap ,
  getUniformLocationMap   ,
  setUniformLocationMap   ,
  createLocationMap       ,
  deepCopyStateForRestore ,
  restore                 ,
  
}
/* HashMapSystem-WonderCommonlib Not a pure module */
