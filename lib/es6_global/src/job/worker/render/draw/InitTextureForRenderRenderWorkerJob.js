// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as Most                                                              from "most";
import * as MostUtils$Wonderjs                                                from "../../../../asset/utils/MostUtils.js";
import * as MessageService$Wonderjs                                           from "../../../../service/primitive/worker/MessageService.js";
import * as InitTextureService$Wonderjs                                       from "../../../../service/primitive/texture/InitTextureService.js";
import * as DeviceManagerService$Wonderjs                                     from "../../../../service/record/all/device/DeviceManagerService.js";
import * as StateRenderWorkerService$Wonderjs                                 from "../../../../service/state/render_worker/state/StateRenderWorkerService.js";
import * as RecordBasicSourceTextureRenderWorkerService$Wonderjs              from "../../../../service/state/render_worker/texture/basic_source/RecordBasicSourceTextureRenderWorkerService.js";
import * as SourceMapBasicSourceTextureRenderWorkerService$Wonderjs           from "../../../../service/state/render_worker/texture/basic_source/SourceMapBasicSourceTextureRenderWorkerService.js";
import * as RecordArrayBufferViewSourceTextureRenderWorkerService$Wonderjs    from "../../../../service/state/render_worker/texture/arrayBufferView_source/RecordArrayBufferViewSourceTextureRenderWorkerService.js";
import * as SourceMapArrayBufferViewSourceTextureRenderWorkerService$Wonderjs from "../../../../service/state/render_worker/texture/arrayBufferView_source/SourceMapArrayBufferViewSourceTextureRenderWorkerService.js";

function execJob(_, e, stateData) {
  var state = StateRenderWorkerService$Wonderjs.unsafeGetState(stateData);
  var data = MessageService$Wonderjs.getRecord(e);
  var initData = data.initData;
  var textureData = initData.textureData;
  return Most.fromPromise(Most.forEach((function (state) {
                      StateRenderWorkerService$Wonderjs.setState(stateData, state);
                      return /* () */0;
                    }), MostUtils$Wonderjs.concatArray(/* array */[
                        SourceMapBasicSourceTextureRenderWorkerService$Wonderjs.addSourceFromImageDataStream(textureData.basicSourceTextureData.needAddedImageDataArray, state),
                        MostUtils$Wonderjs.callFunc((function () {
                                var state = StateRenderWorkerService$Wonderjs.unsafeGetState(stateData);
                                var data = MessageService$Wonderjs.getRecord(e);
                                var initData = data.initData;
                                var textureData = initData.textureData;
                                return StateRenderWorkerService$Wonderjs.setState(stateData, SourceMapArrayBufferViewSourceTextureRenderWorkerService$Wonderjs.addSourceArray(textureData.arrayBufferViewSourceTextureData.needAddedSourceArray, state));
                              })),
                        MostUtils$Wonderjs.callFunc((function () {
                                var state = StateRenderWorkerService$Wonderjs.unsafeGetState(stateData);
                                var data = MessageService$Wonderjs.getRecord(e);
                                var initData = data.initData;
                                var textureData = initData.textureData;
                                var basicSourceTextureRecord = RecordBasicSourceTextureRenderWorkerService$Wonderjs.getRecord(state);
                                var arrayBufferViewSourceTextureRecord = RecordArrayBufferViewSourceTextureRenderWorkerService$Wonderjs.getRecord(state);
                                var newrecord = basicSourceTextureRecord.slice();
                                state[/* basicSourceTextureRecord */13] = /* Some */[(newrecord[/* glTextureMap */8] = InitTextureService$Wonderjs.initTexturesWithIndexArray(DeviceManagerService$Wonderjs.unsafeGetGl(state[/* deviceManagerRecord */3]), textureData.basicSourceTextureData.needInitedTextureIndexArray, basicSourceTextureRecord[/* glTextureMap */8]), newrecord)];
                                var newrecord$1 = arrayBufferViewSourceTextureRecord.slice();
                                state[/* arrayBufferViewSourceTextureRecord */14] = /* Some */[(newrecord$1[/* glTextureMap */10] = InitTextureService$Wonderjs.initTexturesWithIndexArray(DeviceManagerService$Wonderjs.unsafeGetGl(state[/* deviceManagerRecord */3]), textureData.arrayBufferViewSourceTextureData.needInitedTextureIndexArray, arrayBufferViewSourceTextureRecord[/* glTextureMap */10]), newrecord$1)];
                                return state;
                              }))
                      ])).then((function () {
                    return Promise.resolve(e);
                  })));
}

export {
  execJob ,
  
}
/* most Not a pure module */
