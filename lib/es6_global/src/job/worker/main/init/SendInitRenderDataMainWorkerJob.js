// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as MostUtils$Wonderjs                       from "../../../../asset/utils/MostUtils.js";
import * as ViewService$Wonderjs                     from "../../../../service/record/main/device/ViewService.js";
import * as ScreenService$Wonderjs                   from "../../../../service/primitive/device/ScreenService.js";
import * as WorkerService$Wonderjs                   from "../../../../service/primitive/worker/WorkerService.js";
import * as JobConfigUtils$Wonderjs                  from "../../utils/JobConfigUtils.js";
import * as IsDebugMainService$Wonderjs              from "../../../../service/state/main/state/IsDebugMainService.js";
import * as BufferSettingService$Wonderjs            from "../../../../service/record/main/setting/BufferSettingService.js";
import * as CopyTransformService$Wonderjs            from "../../../../service/record/main/transform/CopyTransformService.js";
import * as StateDataMainService$Wonderjs            from "../../../../service/state/main/state/StateDataMainService.js";
import * as OperateSettingService$Wonderjs           from "../../../../service/record/main/setting/OperateSettingService.js";
import * as WorkerInstanceService$Wonderjs           from "../../../../service/record/main/workerInstance/WorkerInstanceService.js";
import * as WorkerDetectMainService$Wonderjs         from "../../../../service/state/main/workerDetect/WorkerDetectMainService.js";
import * as JudgeInstanceMainService$Wonderjs        from "../../../../service/state/main/instance/JudgeInstanceMainService.js";
import * as GetDataRenderConfigService$Wonderjs      from "../../../../service/record/all/renderConfig/GetDataRenderConfigService.js";
import * as RecordTransformMainService$Wonderjs      from "../../../../service/state/main/transform/RecordTransformMainService.js";
import * as RecordBoxGeometryMainService$Wonderjs    from "../../../../service/state/main/geometry/box/RecordBoxGeometryMainService.js";
import * as RecordRenderConfigMainService$Wonderjs   from "../../../../service/state/main/renderConfig/RecordRenderConfigMainService.js";
import * as RecordBasicMaterialMainService$Wonderjs  from "../../../../service/state/main/material/basic/RecordBasicMaterialMainService.js";
import * as RecordLightMaterialMainService$Wonderjs  from "../../../../service/state/main/material/light/RecordLightMaterialMainService.js";
import * as RecordCustomGeometryMainService$Wonderjs from "../../../../service/state/main/geometry/custom/RecordCustomGeometryMainService.js";
import * as RecordSourceInstanceMainService$Wonderjs from "../../../../service/state/main/instance/RecordSourceInstanceMainService.js";

function _buildMaterialData(buffer, index, disposedIndexArray, isSourceInstanceMap) {
  return {
          buffer: buffer,
          index: index,
          disposedIndexArray: disposedIndexArray,
          isSourceInstanceMap: isSourceInstanceMap
        };
}

function _buildData(operateType, canvas, stateData) {
  var state = StateDataMainService$Wonderjs.unsafeGetState(stateData);
  var settingRecord = state[/* settingRecord */0];
  var gameObjectRecord = state[/* gameObjectRecord */10];
  var ambientLightRecord = state[/* ambientLightRecord */17];
  var directionLightRecord = state[/* directionLightRecord */18];
  var pointLightRecord = state[/* pointLightRecord */19];
  var match = OperateSettingService$Wonderjs.unsafeGetGPU(settingRecord);
  var match$1 = OperateSettingService$Wonderjs.unsafeGetMemory(settingRecord);
  var buffer = BufferSettingService$Wonderjs.unsafeGetBuffer(settingRecord);
  var renderConfigRecord = RecordRenderConfigMainService$Wonderjs.getRecord(state);
  var transformRecord = RecordTransformMainService$Wonderjs.getRecord(state);
  var basicMaterialRecord = RecordBasicMaterialMainService$Wonderjs.getRecord(state);
  var lightMaterialRecord = RecordLightMaterialMainService$Wonderjs.getRecord(state);
  RecordBoxGeometryMainService$Wonderjs.getRecord(state);
  var customGeometryRecord = RecordCustomGeometryMainService$Wonderjs.getRecord(state);
  var sourceInstanceRecord = RecordSourceInstanceMainService$Wonderjs.getRecord(state);
  var match$2 = ScreenService$Wonderjs.queryFullScreenData(/* () */0);
  return {
          operateType: operateType,
          canvas: canvas,
          contextConfig: OperateSettingService$Wonderjs.unsafeGetContext(settingRecord),
          isDebug: IsDebugMainService$Wonderjs.getIsDebug(stateData),
          viewportData: /* float array */[
            match$2[0],
            match$2[1],
            match$2[2],
            match$2[3]
          ],
          bufferData: {
            customGeometryPointDataBufferCount: buffer[/* customGeometryPointDataBufferCount */0],
            transformDataBufferCount: buffer[/* transformDataBufferCount */1],
            basicMaterialDataBufferCount: buffer[/* basicMaterialDataBufferCount */2],
            lightMaterialDataBufferCount: buffer[/* lightMaterialDataBufferCount */3]
          },
          gpuData: {
            useHardwareInstance: match[/* useHardwareInstance */0]
          },
          memoryData: {
            maxBigTypeArrayPoolSize: match$1[/* maxBigTypeArrayPoolSize */2]
          },
          instanceBufferData: {
            sourceInstanceCount: BufferSettingService$Wonderjs.getSourceInstanceCount(settingRecord),
            objectInstanceCountPerSourceInstance: BufferSettingService$Wonderjs.getObjectInstanceCountPerSourceInstance(settingRecord)
          },
          workerDetectData: {
            isUseWorker: WorkerDetectMainService$Wonderjs.isUseWorker(state)
          },
          renderConfigData: {
            shaders: JSON.stringify(GetDataRenderConfigService$Wonderjs.getShaders(renderConfigRecord)),
            shaderLibs: JSON.stringify(GetDataRenderConfigService$Wonderjs.getShaderLibs(renderConfigRecord))
          },
          transformData: {
            buffer: CopyTransformService$Wonderjs.unsafeGetCopiedBuffer(transformRecord)
          },
          basicMaterialData: _buildMaterialData(basicMaterialRecord[/* buffer */1], basicMaterialRecord[/* index */0], basicMaterialRecord[/* disposedIndexArray */8], JudgeInstanceMainService$Wonderjs.buildMap(basicMaterialRecord[/* index */0], RecordBasicMaterialMainService$Wonderjs.getRecord(state)[/* gameObjectMap */6], gameObjectRecord)),
          lightMaterialData: _buildMaterialData(lightMaterialRecord[/* buffer */1], lightMaterialRecord[/* index */0], lightMaterialRecord[/* disposedIndexArray */12], JudgeInstanceMainService$Wonderjs.buildMap(lightMaterialRecord[/* index */0], RecordLightMaterialMainService$Wonderjs.getRecord(state)[/* gameObjectMap */10], gameObjectRecord)),
          customGeometryData: {
            buffer: customGeometryRecord[/* buffer */1]
          },
          ambientLightData: {
            buffer: ambientLightRecord[/* buffer */1],
            index: ambientLightRecord[/* index */0]
          },
          directionLightData: {
            buffer: directionLightRecord[/* buffer */1],
            index: directionLightRecord[/* index */0]
          },
          pointLightData: {
            buffer: pointLightRecord[/* buffer */1],
            index: pointLightRecord[/* index */0]
          },
          sourceInstanceData: {
            buffer: sourceInstanceRecord[/* buffer */2],
            objectInstanceTransformIndexMap: sourceInstanceRecord[/* objectInstanceTransformIndexMap */1]
          }
        };
}

function execJob(flags, stateData) {
  return MostUtils$Wonderjs.callFunc((function () {
                var state = StateDataMainService$Wonderjs.unsafeGetState(stateData);
                var viewRecord = state[/* viewRecord */8];
                var workerInstanceRecord = state[/* workerInstanceRecord */34];
                var operateType = JobConfigUtils$Wonderjs.getOperateType(flags);
                var offscreen = ViewService$Wonderjs.getCanvas(viewRecord).transferControlToOffscreen();
                WorkerService$Wonderjs.postMessageWithTransferData(_buildData(operateType, offscreen, stateData), /* array */[offscreen], WorkerInstanceService$Wonderjs.unsafeGetRenderWorker(workerInstanceRecord));
                return /* Some */[operateType];
              }));
}

export {
  _buildMaterialData ,
  _buildData         ,
  execJob            ,
  
}
/* MostUtils-Wonderjs Not a pure module */
