// Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE

import * as Js_primitive from "../../../../../../../node_modules/bs-platform/lib/es6/js_primitive.js";
import * as Log$WonderLog from "../../../../../../../node_modules/wonder-log/lib/es6_global/src/Log.js";
import * as Contract$WonderLog from "../../../../../../../node_modules/wonder-log/lib/es6_global/src/Contract.js";
import * as MostUtils$Wonderjs from "../../../../asset/utils/MostUtils.js";
import * as ViewService$Wonderjs from "../../../../service/record/main/device/ViewService.js";
import * as ScreenService$Wonderjs from "../../../../service/primitive/device/ScreenService.js";
import * as StateDataMain$Wonderjs from "../../../../service/state/main/data/StateDataMain.js";
import * as WorkerService$Wonderjs from "../../../../service/primitive/worker/WorkerService.js";
import * as JobConfigUtils$Wonderjs from "../../utils/JobConfigUtils.js";
import * as IsDebugMainService$Wonderjs from "../../../../service/state/main/state/IsDebugMainService.js";
import * as BufferSettingService$Wonderjs from "../../../../service/record/main/setting/BufferSettingService.js";
import * as CopyTransformService$Wonderjs from "../../../../service/record/main/transform/CopyTransformService.js";
import * as StateDataMainService$Wonderjs from "../../../../service/state/main/state/StateDataMainService.js";
import * as OperateSettingService$Wonderjs from "../../../../service/record/main/setting/OperateSettingService.js";
import * as WorkerInstanceService$Wonderjs from "../../../../service/record/main/workerInstance/WorkerInstanceService.js";
import * as WorkerDetectMainService$Wonderjs from "../../../../service/state/main/workerDetect/WorkerDetectMainService.js";
import * as JudgeInstanceMainService$Wonderjs from "../../../../service/state/main/instance/JudgeInstanceMainService.js";
import * as GetDataRenderConfigService$Wonderjs from "../../../../service/record/all/renderConfig/GetDataRenderConfigService.js";
import * as RecordTransformMainService$Wonderjs from "../../../../service/state/main/transform/RecordTransformMainService.js";
import * as InitSourceTextureMainService$Wonderjs from "../../../../service/state/main/texture/InitSourceTextureMainService.js";
import * as RecordBoxGeometryMainService$Wonderjs from "../../../../service/state/main/geometry/box/RecordBoxGeometryMainService.js";
import * as RecordRenderConfigMainService$Wonderjs from "../../../../service/state/main/renderConfig/RecordRenderConfigMainService.js";
import * as RecordBasicMaterialMainService$Wonderjs from "../../../../service/state/main/material/basic/RecordBasicMaterialMainService.js";
import * as RecordLightMaterialMainService$Wonderjs from "../../../../service/state/main/material/light/RecordLightMaterialMainService.js";
import * as RecordSourceTextureMainService$Wonderjs from "../../../../service/state/main/texture/RecordSourceTextureMainService.js";
import * as OperateSourceTextureMainService$Wonderjs from "../../../../service/state/main/texture/OperateSourceTextureMainService.js";
import * as RecordCustomGeometryMainService$Wonderjs from "../../../../service/state/main/geometry/custom/RecordCustomGeometryMainService.js";
import * as RecordSourceInstanceMainService$Wonderjs from "../../../../service/state/main/instance/RecordSourceInstanceMainService.js";
import * as RecordBasicSourceTextureMainService$Wonderjs from "../../../../service/state/main/texture/basic_source/RecordBasicSourceTextureMainService.js";
import * as OperateBasicSourceTextureMainService$Wonderjs from "../../../../service/state/main/texture/basic_source/OperateBasicSourceTextureMainService.js";
import * as RecordArrayBufferViewSourceTextureMainService$Wonderjs from "../../../../service/state/main/texture/arrayBufferView_source/RecordArrayBufferViewSourceTextureMainService.js";

function _buildMaterialData(buffer, index, disposedIndexArray, isSourceInstanceMap) {
  return {
          buffer: buffer,
          index: index,
          disposedIndexArray: disposedIndexArray,
          isSourceInstanceMap: isSourceInstanceMap
        };
}

function _buildTextureData(state) {
  Contract$WonderLog.requireCheck((function () {
          var basicSourceTextureRecord = RecordBasicSourceTextureMainService$Wonderjs.getRecord(state);
          var needInitedTextureIndexArray = basicSourceTextureRecord[/* needInitedTextureIndexArray */14];
          Contract$WonderLog.test(Log$WonderLog.buildAssertMessage("basicSourceTextureRecord->needInitedTextureIndexArray should be empty", "is " + (String(needInitedTextureIndexArray) + "")), (function () {
                  return Contract$WonderLog.Operators[/* = */0](needInitedTextureIndexArray.length, 0);
                }));
          var arrayBufferViewSourceTextureRecord = RecordArrayBufferViewSourceTextureMainService$Wonderjs.getRecord(state);
          var needInitedTextureIndexArray$1 = arrayBufferViewSourceTextureRecord[/* needInitedTextureIndexArray */16];
          return Contract$WonderLog.test(Log$WonderLog.buildAssertMessage("arrayBufferViewSourceTextureRecord->needInitedTextureIndexArray should be empty", "is " + (String(needInitedTextureIndexArray$1) + "")), (function () {
                        return Contract$WonderLog.Operators[/* = */0](needInitedTextureIndexArray$1.length, 0);
                      }));
        }), IsDebugMainService$Wonderjs.getIsDebug(StateDataMain$Wonderjs.stateData));
  var sourceTextureRecord = RecordSourceTextureMainService$Wonderjs.getRecord(state);
  var basicSourceTextureRecord = RecordBasicSourceTextureMainService$Wonderjs.getRecord(state);
  var arrayBufferViewSourceTextureRecord = RecordArrayBufferViewSourceTextureMainService$Wonderjs.getRecord(state);
  return {
          buffer: sourceTextureRecord[/* buffer */0],
          basicSourceTextureData: {
            index: basicSourceTextureRecord[/* index */0],
            needAddedImageDataArray: OperateBasicSourceTextureMainService$Wonderjs.convertNeedAddedSourceArrayToImageDataArr(basicSourceTextureRecord[/* needAddedSourceArray */13])
          },
          arrayBufferViewSourceTextureData: {
            index: arrayBufferViewSourceTextureRecord[/* index */0],
            sourceMap: arrayBufferViewSourceTextureRecord[/* sourceMap */11]
          }
        };
}

function _buildData(operateType, canvas, stateData) {
  var state = StateDataMainService$Wonderjs.unsafeGetState(stateData);
  var settingRecord = state[/* settingRecord */0];
  var gameObjectRecord = state[/* gameObjectRecord */10];
  var directionLightRecord = state[/* directionLightRecord */20];
  var pointLightRecord = state[/* pointLightRecord */21];
  var match = OperateSettingService$Wonderjs.unsafeGetGPU(settingRecord);
  var match$1 = OperateSettingService$Wonderjs.unsafeGetMemory(settingRecord);
  var buffer = BufferSettingService$Wonderjs.unsafeGetBuffer(settingRecord);
  var renderConfigRecord = RecordRenderConfigMainService$Wonderjs.getRecord(state);
  var transformRecord = RecordTransformMainService$Wonderjs.getRecord(state);
  var basicMaterialRecord = RecordBasicMaterialMainService$Wonderjs.getRecord(state);
  var lightMaterialRecord = RecordLightMaterialMainService$Wonderjs.getRecord(state);
  RecordBoxGeometryMainService$Wonderjs.getRecord(state);
  var customGeometryRecord = RecordCustomGeometryMainService$Wonderjs.getRecord(state);
  var sourceInstanceRecord = RecordSourceInstanceMainService$Wonderjs.getRecord(state);
  var match$2 = ScreenService$Wonderjs.queryFullScreenData(/* () */0);
  return {
          operateType: operateType,
          canvas: canvas,
          contextConfig: OperateSettingService$Wonderjs.unsafeGetContext(settingRecord),
          isDebug: IsDebugMainService$Wonderjs.getIsDebug(stateData),
          viewportData: /* array */[
            match$2[0],
            match$2[1],
            match$2[2],
            match$2[3]
          ],
          bufferData: {
            customGeometryPointCount: buffer[/* customGeometryPointCount */0],
            customGeometryCount: buffer[/* customGeometryCount */1],
            transformCount: buffer[/* transformCount */2],
            basicMaterialCount: buffer[/* basicMaterialCount */3],
            lightMaterialCount: buffer[/* lightMaterialCount */4],
            textureCountPerMaterial: buffer[/* textureCountPerMaterial */5],
            basicSourceTextureCount: buffer[/* basicSourceTextureCount */6],
            arrayBufferViewSourceTextureCount: buffer[/* arrayBufferViewSourceTextureCount */7]
          },
          gpuData: {
            useHardwareInstance: match[/* useHardwareInstance */0]
          },
          memoryData: {
            maxBigTypeArrayPoolSize: match$1[/* maxBigTypeArrayPoolSize */2]
          },
          instanceBufferData: {
            sourceInstanceCount: BufferSettingService$Wonderjs.getSourceInstanceCount(settingRecord),
            objectInstanceCountPerSourceInstance: BufferSettingService$Wonderjs.getObjectInstanceCountPerSourceInstance(settingRecord)
          },
          workerDetectData: {
            isUseWorker: WorkerDetectMainService$Wonderjs.isUseWorker(state)
          },
          browserDetectData: {
            browser: state[/* browserDetectRecord */39][/* browser */0]
          },
          renderConfigData: {
            shaders: JSON.stringify(GetDataRenderConfigService$Wonderjs.getShaders(renderConfigRecord)),
            shaderLibs: JSON.stringify(GetDataRenderConfigService$Wonderjs.getShaderLibs(renderConfigRecord))
          },
          transformData: {
            buffer: CopyTransformService$Wonderjs.unsafeGetCopiedBuffer(transformRecord)
          },
          basicMaterialData: _buildMaterialData(basicMaterialRecord[/* buffer */1], basicMaterialRecord[/* index */0], basicMaterialRecord[/* disposedIndexArray */10], JudgeInstanceMainService$Wonderjs.buildMap(basicMaterialRecord[/* index */0], RecordBasicMaterialMainService$Wonderjs.getRecord(state)[/* gameObjectMap */8], gameObjectRecord)),
          lightMaterialData: _buildMaterialData(lightMaterialRecord[/* buffer */1], lightMaterialRecord[/* index */0], lightMaterialRecord[/* disposedIndexArray */15], JudgeInstanceMainService$Wonderjs.buildMap(lightMaterialRecord[/* index */0], RecordLightMaterialMainService$Wonderjs.getRecord(state)[/* gameObjectMap */13], gameObjectRecord)),
          customGeometryData: {
            buffer: customGeometryRecord[/* buffer */1]
          },
          directionLightData: {
            buffer: directionLightRecord[/* buffer */1],
            index: directionLightRecord[/* index */0]
          },
          pointLightData: {
            buffer: pointLightRecord[/* buffer */1],
            index: pointLightRecord[/* index */0]
          },
          sourceInstanceData: {
            buffer: sourceInstanceRecord[/* buffer */2],
            objectInstanceTransformIndexMap: sourceInstanceRecord[/* objectInstanceTransformIndexMap */1]
          },
          textureData: _buildTextureData(state)
        };
}

function _clearData(state) {
  return InitSourceTextureMainService$Wonderjs.clearNeedInitedTextureIndexArray(OperateSourceTextureMainService$Wonderjs.clearNeedAddedSourceArr(state));
}

function execJob(flags, stateData) {
  return MostUtils$Wonderjs.callFunc((function () {
                var state = StateDataMainService$Wonderjs.unsafeGetState(stateData);
                var viewRecord = state[/* viewRecord */8];
                var workerInstanceRecord = state[/* workerInstanceRecord */37];
                var operateType = JobConfigUtils$Wonderjs.getOperateType(flags);
                var offscreen = ViewService$Wonderjs.unsafeGetCanvas(viewRecord).transferControlToOffscreen();
                WorkerService$Wonderjs.postMessageWithTransferData(_buildData(operateType, offscreen, stateData), /* array */[offscreen], WorkerInstanceService$Wonderjs.unsafeGetRenderWorker(workerInstanceRecord));
                var state$1 = InitSourceTextureMainService$Wonderjs.clearNeedInitedTextureIndexArray(OperateSourceTextureMainService$Wonderjs.clearNeedAddedSourceArr(state));
                StateDataMainService$Wonderjs.setState(stateData, state$1);
                return Js_primitive.some(operateType);
              }));
}

export {
  _buildMaterialData ,
  _buildTextureData ,
  _buildData ,
  _clearData ,
  execJob ,
  
}
/* Log-WonderLog Not a pure module */
