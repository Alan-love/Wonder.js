// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as IndicesService$Wonderjs                    from "../../../../service/primitiive/geometry/IndicesService.js";
import * as DrawGLSLMainService$Wonderjs               from "../../../../service/state/main/sender/DrawGLSLMainService.js";
import * as DeviceManagerService$Wonderjs              from "../../../../service/record/device/DeviceManagerService.js";
import * as RenderGeometryService$Wonderjs             from "../../../../service/record/geometry/RenderGeometryService.js";
import * as ReduceStateMainService$Wonderjs            from "../../../../service/state/main/array/ReduceStateMainService.js";
import * as JudgeInstanceMainService$Wonderjs          from "../../../../service/state/main/instance/JudgeInstanceMainService.js";
import * as OperateRenderMainService$Wonderjs          from "../../../../service/state/main/render/OperateRenderMainService.js";
import * as FrontRenderLightJobCommon$Wonderjs         from "./FrontRenderLightJobCommon.js";
import * as HasComponentGameObjectService$Wonderjs     from "../../../../service/record/gameObject/HasComponentGameObjectService.js";
import * as FrontRenderLightInstanceJobCommon$Wonderjs from "./instance/FrontRenderLightInstanceJobCommon.js";

function _getLightMaterialRenderArray(renderArray, state) {
  return renderArray.filter((function (uid) {
                return HasComponentGameObjectService$Wonderjs.hasLightMaterialComponent(uid, state[/* gameObjectRecord */10]);
              }));
}

function _render(gl, state) {
  var match = OperateRenderMainService$Wonderjs.getRenderArray(state);
  if (match) {
    return ReduceStateMainService$Wonderjs.reduceState((function (state, uid) {
                  if (JudgeInstanceMainService$Wonderjs.isSourceInstance(uid, state)) {
                    return FrontRenderLightInstanceJobCommon$Wonderjs.render(gl, uid, state);
                  } else {
                    var match = FrontRenderLightJobCommon$Wonderjs.render(gl, uid, state);
                    var state$1 = match[0];
                    DrawGLSLMainService$Wonderjs.drawElement(/* tuple */[
                          RenderGeometryService$Wonderjs.getDrawMode(gl),
                          RenderGeometryService$Wonderjs.getIndexType(gl),
                          RenderGeometryService$Wonderjs.getIndexTypeSize(gl),
                          IndicesService$Wonderjs.getIndicesCount(match[2], state$1[/* boxGeometryRecord */20][/* indicesMap */3])
                        ], gl);
                    return state$1;
                  }
                }), state, _getLightMaterialRenderArray(match[0], state));
  } else {
    return state;
  }
}

function execJob(_, _$1, state) {
  return _render(DeviceManagerService$Wonderjs.unsafeGetGl(state[/* deviceManagerRecord */9]), state);
}

export {
  _getLightMaterialRenderArray ,
  _render                      ,
  execJob                      ,
  
}
/* IndicesService-Wonderjs Not a pure module */
