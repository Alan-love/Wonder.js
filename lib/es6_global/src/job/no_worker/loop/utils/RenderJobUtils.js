// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as Log$WonderLog                                         from "../../../../../../../node_modules/wonder-log/lib/es6_global/src/Log.js";
import * as ProgramService$Wonderjs                               from "../../../../service/record/program/ProgramService.js";
import * as UseProgramMainService$Wonderjs                        from "../../../../service/state/main/program/UseProgramMainService.js";
import * as ArrayBufferMainService$Wonderjs                       from "../../../../service/state/main/vboBuffer/ArrayBufferMainService.js";
import * as ReduceStateMainService$Wonderjs                       from "../../../../service/state/main/array/ReduceStateMainService.js";
import * as IndicesGeometryMainService$Wonderjs                   from "../../../../service/state/main/geometry/IndicesGeometryMainService.js";
import * as NormalsGeometryMainService$Wonderjs                   from "../../../../service/state/main/geometry/NormalsGeometryMainService.js";
import * as VerticesGeometryMainService$Wonderjs                  from "../../../../service/state/main/geometry/VerticesGeometryMainService.js";
import * as ElementArrayBufferMainService$Wonderjs                from "../../../../service/state/main/vboBuffer/ElementArrayBufferMainService.js";
import * as GetComponentGameObjectService$Wonderjs                from "../../../../service/record/gameObject/GetComponentGameObjectService.js";
import * as HandleAttributeConfigDataMainService$Wonderjs         from "../../../../service/state/main/sender/attribute/HandleAttributeConfigDataMainService.js";
import * as HandleUniformRenderObjectModelMainService$Wonderjs    from "../../../../service/state/main/sender/uniform/HandleUniformRenderObjectModelMainService.js";
import * as HandleUniformRenderObjectMaterialMainService$Wonderjs from "../../../../service/state/main/sender/uniform/HandleUniformRenderObjectMaterialMainService.js";

function _directlySendAttributeData(gl, shaderIndex, geometryIndex, state) {
  var match = state[/* vboBufferRecord */30];
  var elementArrayBufferMap = match[/* elementArrayBufferMap */2];
  var normalBufferMap = match[/* normalBufferMap */1];
  var vertexBufferMap = match[/* vertexBufferMap */0];
  return ReduceStateMainService$Wonderjs.reduceState((function (state, param) {
                var buffer = param[/* buffer */2];
                var arrayBuffer;
                switch (buffer) {
                  case "index" : 
                      arrayBuffer = ElementArrayBufferMainService$Wonderjs.getOrCreateBuffer(gl, /* tuple */[
                            geometryIndex,
                            elementArrayBufferMap
                          ], IndicesGeometryMainService$Wonderjs.unsafeGetIndices, state);
                      break;
                  case "normal" : 
                      arrayBuffer = ArrayBufferMainService$Wonderjs.getOrCreateBuffer(gl, /* tuple */[
                            geometryIndex,
                            normalBufferMap
                          ], NormalsGeometryMainService$Wonderjs.unsafeGetNormals, state);
                      break;
                  case "vertex" : 
                      arrayBuffer = ArrayBufferMainService$Wonderjs.getOrCreateBuffer(gl, /* tuple */[
                            geometryIndex,
                            vertexBufferMap
                          ], VerticesGeometryMainService$Wonderjs.unsafeGetVertices, state);
                      break;
                  default:
                    arrayBuffer = Log$WonderLog.fatal(Log$WonderLog.buildFatalMessage("_sendAttributeData", "unknonw buffer: " + (String(buffer) + ""), "", "", ""));
                }
                return param[/* sendFunc */3](gl, /* tuple */[
                            param[/* size */1],
                            param[/* pos */0]
                          ], arrayBuffer, state);
              }), state, HandleAttributeConfigDataMainService$Wonderjs.unsafeGetAttributeSendData(shaderIndex, state));
}

function _sendAttributeData(gl, shaderIndex, geometryIndex, state) {
  var record = state[/* glslSenderRecord */26];
  var lastSendGeometry = record[/* lastSendGeometry */11];
  var exit = 0;
  if (lastSendGeometry) {
    if (lastSendGeometry[0] === geometryIndex) {
      return state;
    } else {
      exit = 1;
    }
  } else {
    exit = 1;
  }
  if (exit === 1) {
    record[/* lastSendGeometry */11] = /* Some */[geometryIndex];
    return _directlySendAttributeData(gl, shaderIndex, geometryIndex, state);
  }
  
}

function _sendUniformRenderObjectModelData(gl, shaderIndex, transformIndex, state) {
  return ReduceStateMainService$Wonderjs.reduceState((function (state, param) {
                param[/* sendDataFunc */2](gl, param[/* pos */0], param[/* getDataFunc */1](transformIndex, state));
                return state;
              }), state, HandleUniformRenderObjectModelMainService$Wonderjs.unsafeGetUniformSendData(shaderIndex, state));
}

function _sendUniformRenderObjectMaterialData(gl, shaderIndex, materialIndex, state) {
  return ReduceStateMainService$Wonderjs.reduceState((function (state, param) {
                param[/* sendDataFunc */4](gl, param[/* shaderCacheMap */0], /* tuple */[
                      param[/* name */1],
                      param[/* pos */2]
                    ], param[/* getDataFunc */3](materialIndex, state));
                return state;
              }), state, HandleUniformRenderObjectMaterialMainService$Wonderjs.unsafeGetUniformSendData(shaderIndex, state));
}

function render(gl, param, state) {
  var gameObjectRecord = state[/* gameObjectRecord */10];
  var uid = param[2];
  var shaderIndex = param[1];
  var materialIndex = param[0];
  var transformIndex = GetComponentGameObjectService$Wonderjs.unsafeGetTransformComponent(uid, gameObjectRecord);
  var geometryIndex = GetComponentGameObjectService$Wonderjs.unsafeGetBoxGeometryComponent(uid, gameObjectRecord);
  var program = ProgramService$Wonderjs.unsafeGetProgram(shaderIndex, state[/* programRecord */24]);
  var state$1 = _sendUniformRenderObjectModelData(gl, shaderIndex, transformIndex, _sendAttributeData(gl, shaderIndex, geometryIndex, UseProgramMainService$Wonderjs.use(gl, program, state)));
  var record = state$1[/* glslSenderRecord */26];
  var lastSendMaterial = record[/* lastSendMaterial */10];
  var state$2;
  var exit = 0;
  if (lastSendMaterial && lastSendMaterial[0] === materialIndex) {
    state$2 = state$1;
  } else {
    exit = 1;
  }
  if (exit === 1) {
    record[/* lastSendMaterial */10] = /* Some */[materialIndex];
    state$2 = _sendUniformRenderObjectMaterialData(gl, shaderIndex, materialIndex, state$1);
  }
  return /* tuple */[
          state$2,
          shaderIndex,
          geometryIndex
        ];
}

export {
  _directlySendAttributeData           ,
  _sendAttributeData                   ,
  _sendUniformRenderObjectModelData    ,
  _sendUniformRenderObjectMaterialData ,
  render                               ,
  
}
/* Log-WonderLog Not a pure module */
