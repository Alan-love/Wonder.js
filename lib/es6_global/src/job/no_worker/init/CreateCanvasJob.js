// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as $$String                       from "../../../../../../node_modules/bs-platform/lib/es6/string.js";
import * as Pervasives                     from "../../../../../../node_modules/bs-platform/lib/es6/pervasives.js";
import * as Dom$Wonderjs                   from "../../../external/Dom.js";
import * as Log$WonderLog                  from "../../../../../../node_modules/wonder-log/lib/es6_global/src/Log.js";
import * as Contract$WonderLog             from "../../../../../../node_modules/wonder-log/lib/es6_global/src/Contract.js";
import * as DomService$Wonderjs            from "../../../service/primitiive/DomService.js";
import * as ViewService$Wonderjs           from "../../../service/record/device/ViewService.js";
import * as MainStateData$Wonderjs         from "../../../service/state/main/data/MainStateData.js";
import * as IsDebugMainService$Wonderjs    from "../../../service/state/main/state/IsDebugMainService.js";
import * as OperateSettingService$Wonderjs from "../../../service/record/setting/OperateSettingService.js";

function _getCanvasId(domId) {
  var match = $$String.contains(domId, /* "#" */35);
  if (match !== 0) {
    return domId;
  } else {
    return Contract$WonderLog.ensureCheck((function (id) {
                  return Contract$WonderLog.test(Log$WonderLog.buildAssertMessage("dom id start with \'#\'", "is " + (String(domId) + "")), (function () {
                                return Contract$WonderLog.assertTrue(+(/#[^#]+/).test(id));
                              }));
                }), IsDebugMainService$Wonderjs.getIsDebug(MainStateData$Wonderjs.stateData), "#" + (String(domId) + ""));
  }
}

function _createCanvas(canvasId) {
  if (canvasId) {
    var canvasId$1 = canvasId[0];
    var match = Dom$Wonderjs.findFirstHtmlElement(document, _getCanvasId(canvasId$1));
    if (match) {
      return match[0];
    } else {
      return Pervasives.failwith("canvas whose id is " + (String(canvasId$1) + " should exist"));
    }
  } else {
    var arg = Dom$Wonderjs.findFirstHtmlElement(document, "body");
    return (function (param) {
                return Dom$Wonderjs.prependTo(param, arg);
              })(DomService$Wonderjs.buildDom("<canvas></canvas>"));
  }
}

function execJob(_, state) {
  var newrecord = state.slice();
  newrecord[/* viewRecord */8] = ViewService$Wonderjs.setCanvas(_createCanvas(OperateSettingService$Wonderjs.getCanvasId(state[/* settingRecord */0])), state[/* viewRecord */8]);
  return newrecord;
}

export {
  _getCanvasId  ,
  _createCanvas ,
  execJob       ,
  
}
/* Log-WonderLog Not a pure module */
