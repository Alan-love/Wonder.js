// Generated by BUCKLESCRIPT VERSION 3.1.4, PLEASE EDIT WITH CARE

import * as Most from "most";
import * as Log$WonderLog from "../../../../../node_modules/wonder-log/lib/es6_global/src/Log.js";
import * as StateDataMain$Wonderjs from "../../service/state/main/data/StateDataMain.js";
import * as NameEventService$Wonderjs from "../../service/record/main/event/NameEventService.js";
import * as IsDebugMainService$Wonderjs from "../../service/state/main/state/IsDebugMainService.js";
import * as StateDataMainService$Wonderjs from "../../service/state/main/state/StateDataMainService.js";
import * as ManageEventMainService$Wonderjs from "../../service/state/main/event/ManageEventMainService.js";
import * as HandleMouseEventMainService$Wonderjs from "../../service/state/main/event/handle/HandleMouseEventMainService.js";
import * as HandleTouchEventMainService$Wonderjs from "../../service/state/main/event/handle/HandleTouchEventMainService.js";
import * as CreateCustomEventMainService$Wonderjs from "../../service/state/main/event/event/CreateCustomEventMainService.js";
import * as HandleKeyboardEventMainService$Wonderjs from "../../service/state/main/event/handle/HandleKeyboardEventMainService.js";

function _getDefaultDom() {
  return document.body;
}

function _fromDomEvent(eventName) {
  return Most.fromEvent(eventName, document.body, false);
}

function _convertMouseEventToPointEvent(eventName, param) {
  return /* record */[
          /* name */eventName,
          /* location */param[/* location */1],
          /* locationInView */param[/* locationInView */2],
          /* button : Some */[param[/* button */3]],
          /* wheel : Some */[param[/* wheel */4]],
          /* movementDelta */param[/* movementDelta */5],
          /* event */param[/* event */6]
        ];
}

function _bindMouseEventToTriggerPointEvent(mouseEventName, customEventName, pointEventName, state) {
  return ManageEventMainService$Wonderjs.onMouseEvent(mouseEventName, (function (mouseEvent, state) {
                return ManageEventMainService$Wonderjs.triggerCustomGlobalEvent(CreateCustomEventMainService$Wonderjs.create(customEventName, /* Some */[_convertMouseEventToPointEvent(pointEventName, mouseEvent)]), state);
              }), state, /* None */0, /* () */0);
}

function _convertTouchEventToPointEvent(eventName, param) {
  return /* record */[
          /* name */eventName,
          /* location */param[/* location */1],
          /* locationInView */param[/* locationInView */2],
          /* button : None */0,
          /* wheel : None */0,
          /* movementDelta */param[/* movementDelta */4],
          /* event */param[/* event */5]
        ];
}

function _bindTouchEventToTriggerPointEvent(touchEventName, customEventName, pointEventName, state) {
  return ManageEventMainService$Wonderjs.onTouchEvent(touchEventName, (function (touchEvent, state) {
                return ManageEventMainService$Wonderjs.triggerCustomGlobalEvent(CreateCustomEventMainService$Wonderjs.create(customEventName, /* Some */[_convertTouchEventToPointEvent(pointEventName, touchEvent)]), state);
              }), state, /* None */0, /* () */0);
}

function bindDomEventToTriggerPointEvent(state) {
  var browser = state[/* browserDetectRecord */39][/* browser */0];
  if (browser >= 2) {
    if (browser >= 4) {
      return Log$WonderLog.fatal(Log$WonderLog.buildFatalMessage("bindDomEventToTriggerPointEvent", "unknown browser", "", "", "browser:" + (String(browser) + "")));
    } else {
      return _bindTouchEventToTriggerPointEvent(/* TouchDrag */13, NameEventService$Wonderjs.getPointDragEventName(/* () */0), /* PointDrag */5, _bindTouchEventToTriggerPointEvent(/* TouchMove */11, NameEventService$Wonderjs.getPointMoveEventName(/* () */0), /* PointMove */3, _bindTouchEventToTriggerPointEvent(/* TouchStart */12, NameEventService$Wonderjs.getPointDownEventName(/* () */0), /* PointDown */1, _bindTouchEventToTriggerPointEvent(/* TouchEnd */10, NameEventService$Wonderjs.getPointUpEventName(/* () */0), /* PointUp */2, _bindTouchEventToTriggerPointEvent(/* TouchTap */9, NameEventService$Wonderjs.getPointTapEventName(/* () */0), /* PointTap */0, state)))));
    }
  } else {
    return _bindMouseEventToTriggerPointEvent(/* MouseDrag */5, NameEventService$Wonderjs.getPointDragEventName(/* () */0), /* PointDrag */5, _bindMouseEventToTriggerPointEvent(/* MouseMove */3, NameEventService$Wonderjs.getPointMoveEventName(/* () */0), /* PointMove */3, _bindMouseEventToTriggerPointEvent(/* MouseWheel */4, NameEventService$Wonderjs.getPointScaleEventName(/* () */0), /* PointScale */4, _bindMouseEventToTriggerPointEvent(/* MouseDown */1, NameEventService$Wonderjs.getPointDownEventName(/* () */0), /* PointDown */1, _bindMouseEventToTriggerPointEvent(/* MouseUp */2, NameEventService$Wonderjs.getPointUpEventName(/* () */0), /* PointUp */2, _bindMouseEventToTriggerPointEvent(/* Click */0, NameEventService$Wonderjs.getPointTapEventName(/* () */0), /* PointTap */0, state))))));
  }
}

function _execMouseEventHandle(mouseEventName, $$event) {
  StateDataMainService$Wonderjs.setState(StateDataMain$Wonderjs.stateData, HandleMouseEventMainService$Wonderjs.execEventHandle(mouseEventName, $$event, StateDataMainService$Wonderjs.unsafeGetState(StateDataMain$Wonderjs.stateData)));
  return /* () */0;
}

function _execMouseMoveEventHandle(mouseEventName, $$event) {
  StateDataMainService$Wonderjs.setState(StateDataMain$Wonderjs.stateData, HandleMouseEventMainService$Wonderjs.setLastXYWhenMouseMove(mouseEventName, $$event, HandleMouseEventMainService$Wonderjs.execEventHandle(mouseEventName, $$event, StateDataMainService$Wonderjs.unsafeGetState(StateDataMain$Wonderjs.stateData))));
  return /* () */0;
}

function _execMouseDragingEventHandle(mouseEventName, $$event) {
  StateDataMainService$Wonderjs.setState(StateDataMain$Wonderjs.stateData, HandleMouseEventMainService$Wonderjs.setLastXYByLocation(mouseEventName, $$event, HandleMouseEventMainService$Wonderjs.execEventHandle(mouseEventName, $$event, StateDataMainService$Wonderjs.unsafeGetState(StateDataMain$Wonderjs.stateData))));
  return /* () */0;
}

function _execMouseDragStartEventHandle() {
  StateDataMainService$Wonderjs.setState(StateDataMain$Wonderjs.stateData, HandleMouseEventMainService$Wonderjs.setLastXY(/* None */0, /* None */0, HandleMouseEventMainService$Wonderjs.setIsDrag(true, StateDataMainService$Wonderjs.unsafeGetState(StateDataMain$Wonderjs.stateData))));
  return /* () */0;
}

function _execMouseDragEndEventHandle() {
  StateDataMainService$Wonderjs.setState(StateDataMain$Wonderjs.stateData, HandleMouseEventMainService$Wonderjs.setIsDrag(false, StateDataMainService$Wonderjs.unsafeGetState(StateDataMain$Wonderjs.stateData)));
  return /* () */0;
}

function _execTouchEventHandle(touchEventName, $$event) {
  StateDataMainService$Wonderjs.setState(StateDataMain$Wonderjs.stateData, HandleTouchEventMainService$Wonderjs.execEventHandle(touchEventName, $$event, StateDataMainService$Wonderjs.unsafeGetState(StateDataMain$Wonderjs.stateData)));
  return /* () */0;
}

function _execTouchMoveEventHandle(touchEventName, $$event) {
  StateDataMainService$Wonderjs.setState(StateDataMain$Wonderjs.stateData, HandleTouchEventMainService$Wonderjs.setLastXYWhenTouchMove(touchEventName, $$event, HandleTouchEventMainService$Wonderjs.execEventHandle(touchEventName, $$event, StateDataMainService$Wonderjs.unsafeGetState(StateDataMain$Wonderjs.stateData))));
  return /* () */0;
}

function _execTouchDragingEventHandle(touchEventName, $$event) {
  StateDataMainService$Wonderjs.setState(StateDataMain$Wonderjs.stateData, HandleTouchEventMainService$Wonderjs.setLastXYByLocation(touchEventName, $$event, HandleTouchEventMainService$Wonderjs.execEventHandle(touchEventName, $$event, StateDataMainService$Wonderjs.unsafeGetState(StateDataMain$Wonderjs.stateData))));
  return /* () */0;
}

function _execTouchDragStartEventHandle() {
  StateDataMainService$Wonderjs.setState(StateDataMain$Wonderjs.stateData, HandleTouchEventMainService$Wonderjs.setLastXY(/* None */0, /* None */0, HandleTouchEventMainService$Wonderjs.setIsDrag(true, StateDataMainService$Wonderjs.unsafeGetState(StateDataMain$Wonderjs.stateData))));
  return /* () */0;
}

function _execTouchDragEndEventHandle() {
  StateDataMainService$Wonderjs.setState(StateDataMain$Wonderjs.stateData, HandleTouchEventMainService$Wonderjs.setIsDrag(false, StateDataMainService$Wonderjs.unsafeGetState(StateDataMain$Wonderjs.stateData)));
  return /* () */0;
}

function _execKeyboardEventHandle(keyboardEventName, $$event) {
  StateDataMainService$Wonderjs.setState(StateDataMain$Wonderjs.stateData, HandleKeyboardEventMainService$Wonderjs.execEventHandle(keyboardEventName, $$event, StateDataMainService$Wonderjs.unsafeGetState(StateDataMain$Wonderjs.stateData)));
  return /* () */0;
}

function fromDomEvent(param) {
  var browser = param[/* browserDetectRecord */39][/* browser */0];
  return Most.mergeArray(browser >= 2 ? (
                browser >= 4 ? Log$WonderLog.fatal(Log$WonderLog.buildFatalMessage("fromDomEvent", "unknown browser", "", "", "browser:" + (String(browser) + ""))) : /* array */[
                    Most.tap((function ($$event) {
                            return _execTouchEventHandle(/* TouchTap */9, $$event);
                          }), Most.since(_fromDomEvent("touchstart"), _fromDomEvent("touchend"))),
                    Most.tap((function ($$event) {
                            return _execTouchEventHandle(/* TouchEnd */10, $$event);
                          }), _fromDomEvent("touchend")),
                    Most.tap((function ($$event) {
                            return _execTouchEventHandle(/* TouchStart */12, $$event);
                          }), _fromDomEvent("touchstart")),
                    Most.tap((function ($$event) {
                            return _execTouchMoveEventHandle(/* TouchMove */11, $$event);
                          }), _fromDomEvent("touchmove")),
                    Most.tap((function ($$event) {
                            return _execTouchDragingEventHandle(/* TouchDrag */13, $$event);
                          }), Most.flatMap((function () {
                                return Most.until(Most.tap((function () {
                                                  return _execTouchDragEndEventHandle(/* () */0);
                                                }), _fromDomEvent("touchend")), _fromDomEvent("touchmove"));
                              }), Most.tap((function () {
                                    return _execTouchDragStartEventHandle(/* () */0);
                                  }), _fromDomEvent("touchstart"))))
                  ]
              ) : /* array */[
                Most.tap((function ($$event) {
                        return _execMouseEventHandle(/* Click */0, $$event);
                      }), _fromDomEvent("click")),
                Most.tap((function ($$event) {
                        return _execMouseEventHandle(/* MouseDown */1, $$event);
                      }), _fromDomEvent("mousedown")),
                Most.tap((function ($$event) {
                        return _execMouseEventHandle(/* MouseUp */2, $$event);
                      }), _fromDomEvent("mouseup")),
                Most.tap((function ($$event) {
                        return _execMouseMoveEventHandle(/* MouseMove */3, $$event);
                      }), _fromDomEvent("mousemove")),
                Most.tap((function ($$event) {
                        return _execMouseEventHandle(/* MouseWheel */4, $$event);
                      }), _fromDomEvent("mousewheel")),
                Most.tap((function ($$event) {
                        return _execMouseDragingEventHandle(/* MouseDrag */5, $$event);
                      }), Most.flatMap((function () {
                            return Most.until(Most.tap((function () {
                                              return _execMouseDragEndEventHandle(/* () */0);
                                            }), _fromDomEvent("mouseup")), _fromDomEvent("mousemove"));
                          }), Most.tap((function () {
                                return _execMouseDragStartEventHandle(/* () */0);
                              }), _fromDomEvent("mousedown")))),
                Most.tap((function ($$event) {
                        return _execKeyboardEventHandle(/* KeyUp */6, $$event);
                      }), _fromDomEvent("keyup")),
                Most.tap((function ($$event) {
                        return _execKeyboardEventHandle(/* KeyDown */7, $$event);
                      }), _fromDomEvent("keydown")),
                Most.tap((function ($$event) {
                        return _execKeyboardEventHandle(/* KeyPress */8, $$event);
                      }), _fromDomEvent("keypress"))
              ]);
}

function handleDomEventStreamError(e) {
  var message = e.message;
  var stack = e.stack;
  var partial_arg = "message:" + (String(message) + ("\nstack:" + (String(stack) + "")));
  var partial_arg$1 = "from dom event stream error";
  return Log$WonderLog.debug((function (param) {
                return Log$WonderLog.buildDebugMessage(partial_arg$1, partial_arg, param);
              }), IsDebugMainService$Wonderjs.getIsDebug(StateDataMain$Wonderjs.stateData));
}

function initEvent(state) {
  var domEventStreamSubscription = fromDomEvent(state).subscribe({
        next: (function () {
            return /* () */0;
          }),
        error: handleDomEventStreamError,
        complete: (function () {
            return /* () */0;
          })
      });
  return bindDomEventToTriggerPointEvent(ManageEventMainService$Wonderjs.setDomEventStreamSubscription(domEventStreamSubscription, state));
}

export {
  _getDefaultDom ,
  _fromDomEvent ,
  _convertMouseEventToPointEvent ,
  _bindMouseEventToTriggerPointEvent ,
  _convertTouchEventToPointEvent ,
  _bindTouchEventToTriggerPointEvent ,
  bindDomEventToTriggerPointEvent ,
  _execMouseEventHandle ,
  _execMouseMoveEventHandle ,
  _execMouseDragingEventHandle ,
  _execMouseDragStartEventHandle ,
  _execMouseDragEndEventHandle ,
  _execTouchEventHandle ,
  _execTouchMoveEventHandle ,
  _execTouchDragingEventHandle ,
  _execTouchDragStartEventHandle ,
  _execTouchDragEndEventHandle ,
  _execKeyboardEventHandle ,
  fromDomEvent ,
  handleDomEventStreamError ,
  initEvent ,
  
}
/* most Not a pure module */
