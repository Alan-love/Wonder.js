// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as ArrayService$Wonderjs                          from "../../../service/atom/ArrayService.js";
import * as DrawGLSLService$Wonderjs                       from "../../../service/record/render/sender/DrawGLSLService.js";
import * as ArrayService$WonderCommonlib                   from "../../../../../../node_modules/wonder-commonlib/lib/es6_global/src/ArrayService.js";
import * as RenderBasicJobCommon$Wonderjs                  from "../../common/render_basic/RenderBasicJobCommon.js";
import * as RenderGeometryService$Wonderjs                 from "../../../service/record/main/geometry/RenderGeometryService.js";
import * as ShaderIndexRenderService$Wonderjs              from "../../../service/state/render/shader/ShaderIndexRenderService.js";
import * as RenderBasicInstanceJobCommon$Wonderjs          from "../../common/render_basic/instance/RenderBasicInstanceJobCommon.js";
import * as RenderObjectBufferTypeArrayService$Wonderjs    from "../../../service/record/main/render/RenderObjectBufferTypeArrayService.js";
import * as CurrentComponentDataMapRenderService$Wonderjs  from "../../../service/state/render/gameObject/CurrentComponentDataMapRenderService.js";
import * as ShaderIndexBasicMaterialRenderService$Wonderjs from "../../../service/state/render/material/basic/ShaderIndexBasicMaterialRenderService.js";

function _getShaderIndex(materialIndex, renderState) {
  return ShaderIndexRenderService$Wonderjs.getShaderIndex(materialIndex, ShaderIndexBasicMaterialRenderService$Wonderjs.getShaderIndex, renderState);
}

function render(gl, param, renderState) {
  var sourceInstanceIndices = param[5];
  var geometryTypes = param[4];
  var geometryIndices = param[3];
  var materialIndices = param[2];
  var transformIndices = param[1];
  return ArrayService$WonderCommonlib.reduceOneParam((function (renderState, index) {
                var transformIndex = RenderObjectBufferTypeArrayService$Wonderjs.getComponent(index, transformIndices);
                var materialIndex = RenderObjectBufferTypeArrayService$Wonderjs.getComponent(index, materialIndices);
                var shaderIndex = ShaderIndexRenderService$Wonderjs.getShaderIndex(materialIndex, ShaderIndexBasicMaterialRenderService$Wonderjs.getShaderIndex, renderState);
                var geometryIndex = RenderObjectBufferTypeArrayService$Wonderjs.getComponent(index, geometryIndices);
                var geometryType = RenderObjectBufferTypeArrayService$Wonderjs.getGeometryType(index, geometryTypes);
                var sourceInstance = RenderObjectBufferTypeArrayService$Wonderjs.getComponent(index, sourceInstanceIndices);
                if (RenderObjectBufferTypeArrayService$Wonderjs.hasSourceInstance(sourceInstance)) {
                  return RenderBasicInstanceJobCommon$Wonderjs.render(gl, /* tuple */[
                              transformIndex,
                              materialIndex,
                              shaderIndex,
                              geometryIndex,
                              geometryType,
                              sourceInstance
                            ], renderState);
                } else {
                  var renderState$1 = RenderBasicJobCommon$Wonderjs.render(gl, /* tuple */[
                        transformIndex,
                        materialIndex,
                        shaderIndex,
                        geometryIndex,
                        geometryType
                      ], renderState);
                  var getIndicesCountFunc = CurrentComponentDataMapRenderService$Wonderjs.getGetIndicesCountFunc(geometryType);
                  DrawGLSLService$Wonderjs.drawElement(/* tuple */[
                        RenderGeometryService$Wonderjs.getDrawMode(gl),
                        RenderGeometryService$Wonderjs.getIndexType(gl),
                        RenderGeometryService$Wonderjs.getIndexTypeSize(gl),
                        getIndicesCountFunc(geometryIndex, renderState$1)
                      ], gl);
                  return renderState$1;
                }
              }), renderState, ArrayService$Wonderjs.range(0, param[0] - 1 | 0));
}

export {
  _getShaderIndex ,
  render          ,
  
}
/* ArrayService-Wonderjs Not a pure module */
