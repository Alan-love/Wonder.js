// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as List                           from "../../../../../node_modules/bs-platform/lib/es6/list.js";
import * as Curry                          from "../../../../../node_modules/bs-platform/lib/es6/curry.js";
import * as Pervasives                     from "../../../../../node_modules/bs-platform/lib/es6/pervasives.js";
import * as JobSystem$Wonderjs             from "../JobSystem.js";
import * as ArraySystem$WonderCommonlib    from "../../../../../node_modules/wonder-commonlib/lib/es6_global/src/ArraySystem.js";
import * as HashMapSystem$WonderCommonlib  from "../../../../../node_modules/wonder-commonlib/lib/es6_global/src/HashMapSystem.js";
import * as RenderJobConfigSystem$Wonderjs from "./RenderJobConfigSystem.js";
import * as RenderJobHandleSystem$Wonderjs from "./RenderJobHandleSystem.js";

function _getAllRenderJobs(executableJobs, jobHandleMap, _) {
  return ArraySystem$WonderCommonlib.reduceOneParam((function (list, param) {
                var name = param[/* name */0];
                var match = HashMapSystem$WonderCommonlib.get(name, jobHandleMap);
                if (match) {
                  return Pervasives.$at(list, /* :: */[
                              /* tuple */[
                                name,
                                Curry._1(match[0], /* tuple */[
                                      param[/* flags */1],
                                      param[/* shader */2]
                                    ])
                              ],
                              /* [] */0
                            ]);
                } else {
                  return JobSystem$Wonderjs.handleGetNoneJob(name, jobHandleMap);
                }
              }), /* [] */0, executableJobs);
}

function _getRenderInitJobList(state) {
  return state[/* jobData */3][/* renderInitJobList */1];
}

function _getRenderRenderJobList(state) {
  return state[/* jobData */3][/* renderRenderJobList */3];
}

function execRenderInitJobs(gl, state) {
  return List.fold_left((function (state, param) {
                return Curry._2(param[1], gl, state);
              }), state, state[/* jobData */3][/* renderInitJobList */1]);
}

function execRenderRenderJobs(gl, state) {
  return List.fold_left((function (state, param) {
                return Curry._2(param[1], gl, state);
              }), state, state[/* jobData */3][/* renderRenderJobList */3]);
}

function init(state) {
  var newrecord = state.slice();
  var init$1 = state[/* jobData */3];
  newrecord[/* jobData */3] = /* record */[
    /* logicInitJobList */init$1[/* logicInitJobList */0],
    /* renderInitJobList */_getAllRenderJobs(RenderJobConfigSystem$Wonderjs.getInitPipelineExecutableJobs(RenderJobConfigSystem$Wonderjs.getRenderSetting(state), RenderJobConfigSystem$Wonderjs.getInitPipelines(state), RenderJobConfigSystem$Wonderjs.getInitJobs(state)), RenderJobHandleSystem$Wonderjs.createInitJobHandleMap(/* () */0), state),
    /* logicUpdateJobList */init$1[/* logicUpdateJobList */2],
    /* renderRenderJobList */_getAllRenderJobs(RenderJobConfigSystem$Wonderjs.getRenderPipelineExecutableJobs(RenderJobConfigSystem$Wonderjs.getRenderSetting(state), RenderJobConfigSystem$Wonderjs.getRenderPipelines(state), RenderJobConfigSystem$Wonderjs.getRenderJobs(state)), RenderJobHandleSystem$Wonderjs.createRenderJobHandleMap(/* () */0), state)
  ];
  return newrecord;
}

function addRenderInitJob(targetJobName, afterJobName, targetHandleFunc, state) {
  var newrecord = state.slice();
  var init = state[/* jobData */3];
  newrecord[/* jobData */3] = /* record */[
    /* logicInitJobList */init[/* logicInitJobList */0],
    /* renderInitJobList */JobSystem$Wonderjs.addJob(/* tuple */[
          targetJobName,
          afterJobName,
          targetHandleFunc
        ], state[/* jobData */3][/* renderInitJobList */1]),
    /* logicUpdateJobList */init[/* logicUpdateJobList */2],
    /* renderRenderJobList */init[/* renderRenderJobList */3]
  ];
  return newrecord;
}

function addRenderRenderJob(targetJobName, afterJobName, targetHandleFunc, state) {
  var newrecord = state.slice();
  var init = state[/* jobData */3];
  newrecord[/* jobData */3] = /* record */[
    /* logicInitJobList */init[/* logicInitJobList */0],
    /* renderInitJobList */init[/* renderInitJobList */1],
    /* logicUpdateJobList */init[/* logicUpdateJobList */2],
    /* renderRenderJobList */JobSystem$Wonderjs.addJob(/* tuple */[
          targetJobName,
          afterJobName,
          targetHandleFunc
        ], state[/* jobData */3][/* renderRenderJobList */3])
  ];
  return newrecord;
}

function removeRenderInitJob(targetJobName, state) {
  var newrecord = state.slice();
  var init = state[/* jobData */3];
  newrecord[/* jobData */3] = /* record */[
    /* logicInitJobList */init[/* logicInitJobList */0],
    /* renderInitJobList */JobSystem$Wonderjs.removeJob(targetJobName, state[/* jobData */3][/* renderInitJobList */1]),
    /* logicUpdateJobList */init[/* logicUpdateJobList */2],
    /* renderRenderJobList */init[/* renderRenderJobList */3]
  ];
  return newrecord;
}

function removeRenderRenderJob(targetJobName, state) {
  var newrecord = state.slice();
  var init = state[/* jobData */3];
  newrecord[/* jobData */3] = /* record */[
    /* logicInitJobList */init[/* logicInitJobList */0],
    /* renderInitJobList */init[/* renderInitJobList */1],
    /* logicUpdateJobList */init[/* logicUpdateJobList */2],
    /* renderRenderJobList */JobSystem$Wonderjs.removeJob(targetJobName, state[/* jobData */3][/* renderRenderJobList */3])
  ];
  return newrecord;
}

export {
  _getAllRenderJobs       ,
  _getRenderInitJobList   ,
  _getRenderRenderJobList ,
  execRenderInitJobs      ,
  execRenderRenderJobs    ,
  init                    ,
  addRenderInitJob        ,
  addRenderRenderJob      ,
  removeRenderInitJob     ,
  removeRenderRenderJob   ,
  
}
/* JobSystem-Wonderjs Not a pure module */
