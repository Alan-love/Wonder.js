// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as Most                               from "most";
import * as MostUtils$Wonderjs                 from "./utils/MostUtils.js";
import * as FetchCommon$Wonderjs               from "./FetchCommon.js";
import * as PathService$Wonderjs               from "../service/primitiive/PathService.js";
import * as ArrayService$Wonderjs              from "../service/atom/ArrayService.js";
import * as IsDebugMainService$Wonderjs        from "../service/state/main/state/IsDebugMainService.js";
import * as NoWorkerJobService$Wonderjs        from "../service/state/main/job/NoWorkerJobService.js";
import * as ParseSettingService$Wonderjs       from "../service/record/setting/ParseSettingService.js";
import * as StateDataMainService$Wonderjs      from "../service/state/main/state/StateDataMainService.js";
import * as OperateSettingService$Wonderjs     from "../service/record/setting/OperateSettingService.js";
import * as ParseWorkerJobService$Wonderjs     from "../service/record/workerJob/ParseWorkerJobService.js";
import * as RecordWorkerJobService$Wonderjs    from "../service/record/workerJob/RecordWorkerJobService.js";
import * as ParseNoWorkerJobService$Wonderjs   from "../service/record/noWorkerJob/ParseNoWorkerJobService.js";
import * as WorkerDetectMainService$Wonderjs   from "../service/state/main/workerDetect/WorkerDetectMainService.js";
import * as ParseRenderConfigService$Wonderjs  from "../service/record/renderConfig/ParseRenderConfigService.js";
import * as RecordNoWorkerJobService$Wonderjs  from "../service/record/noWorkerJob/RecordNoWorkerJobService.js";
import * as RecordRenderConfigService$Wonderjs from "../service/record/renderConfig/RecordRenderConfigService.js";

function _collectAllRecords(stream) {
  return Most.reduce((function (arr, record) {
                return ArrayService$Wonderjs.push(record, arr);
              }), /* array */[], stream);
}

function _createFetchNoWorkerJobStreamArr(dataDir, fetchFunc) {
  return /* array */[
          Most.map(ParseNoWorkerJobService$Wonderjs.convertSettingToRecord, FetchCommon$Wonderjs.createFetchJsonStream(PathService$Wonderjs.join(/* array */[
                        dataDir,
                        "no_worker/setting/setting.json"
                      ]), fetchFunc)),
          Most.map(ParseNoWorkerJobService$Wonderjs.convertInitPipelinesToRecord, FetchCommon$Wonderjs.createFetchJsonStream(PathService$Wonderjs.join(/* array */[
                        dataDir,
                        "no_worker/pipeline/init_pipelines.json"
                      ]), fetchFunc)),
          Most.map(ParseNoWorkerJobService$Wonderjs.convertLoopPipelinesToRecord, FetchCommon$Wonderjs.createFetchJsonStream(PathService$Wonderjs.join(/* array */[
                        dataDir,
                        "no_worker/pipeline/loop_pipelines.json"
                      ]), fetchFunc)),
          Most.map(ParseNoWorkerJobService$Wonderjs.convertInitJobsToRecord, FetchCommon$Wonderjs.createFetchJsonStream(PathService$Wonderjs.join(/* array */[
                        dataDir,
                        "no_worker/job/init_jobs.json"
                      ]), fetchFunc)),
          Most.map(ParseNoWorkerJobService$Wonderjs.convertLoopJobsToRecord, FetchCommon$Wonderjs.createFetchJsonStream(PathService$Wonderjs.join(/* array */[
                        dataDir,
                        "no_worker/job/loop_jobs.json"
                      ]), fetchFunc))
        ];
}

function _createFetchRenderConfigStreamArr(dataDir, fetchFunc) {
  return /* array */[
          Most.map(ParseRenderConfigService$Wonderjs.convertShadersToRecord, FetchCommon$Wonderjs.createFetchJsonStream(PathService$Wonderjs.join(/* array */[
                        dataDir,
                        "render/shader/shaders.json"
                      ]), fetchFunc)),
          Most.map(ParseRenderConfigService$Wonderjs.convertShaderLibsToRecord, FetchCommon$Wonderjs.createFetchJsonStream(PathService$Wonderjs.join(/* array */[
                        dataDir,
                        "render/shader/shader_libs.json"
                      ]), fetchFunc))
        ];
}

function _setSetting(stateData, state, setting) {
  IsDebugMainService$Wonderjs.setIsDebug(stateData, OperateSettingService$Wonderjs.unsafeGetIsDebug(setting));
  var newrecord = state.slice();
  newrecord[/* settingRecord */0] = OperateSettingService$Wonderjs.setSetting(setting);
  return newrecord;
}

function _createHandleNoWorkerJobConfigStreamArr(dataDir, fetchFunc, state) {
  return Most.fromPromise(_collectAllRecords(MostUtils$Wonderjs.concatArray(_createFetchNoWorkerJobStreamArr(dataDir, fetchFunc))).then((function (recordArr) {
                    var newrecord = state.slice();
                    return Promise.resolve(NoWorkerJobService$Wonderjs.init((newrecord[/* noWorkerJobRecord */2] = RecordNoWorkerJobService$Wonderjs.create(recordArr), newrecord)));
                  })));
}

function _createHandleRenderConfigStreamArr(dataDir, fetchFunc, state) {
  return Most.fromPromise(_collectAllRecords(MostUtils$Wonderjs.concatArray(_createFetchRenderConfigStreamArr(dataDir, fetchFunc))).then((function (recordArr) {
                    var newrecord = state.slice();
                    return Promise.resolve((newrecord[/* renderConfigRecord */4] = RecordRenderConfigService$Wonderjs.create(recordArr), newrecord));
                  })));
}

function _createFetchWorkerJobStreamArr(dataDir, fetchFunc) {
  return /* array */[
          Most.map(ParseWorkerJobService$Wonderjs.convertSettingToRecord, FetchCommon$Wonderjs.createFetchJsonStream(PathService$Wonderjs.join(/* array */[
                        dataDir,
                        "worker/setting/setting.json"
                      ]), fetchFunc)),
          Most.map(ParseWorkerJobService$Wonderjs.convertMainInitPipelinesToRecord, FetchCommon$Wonderjs.createFetchJsonStream(PathService$Wonderjs.join(/* array */[
                        dataDir,
                        "worker/pipeline/main/main_init_pipelines.json"
                      ]), fetchFunc)),
          Most.map(ParseWorkerJobService$Wonderjs.convertMainInitJobsToRecord, FetchCommon$Wonderjs.createFetchJsonStream(PathService$Wonderjs.join(/* array */[
                        dataDir,
                        "worker/job/main/main_init_jobs.json"
                      ]), fetchFunc)),
          Most.map(ParseWorkerJobService$Wonderjs.convertWorkerPipelinesToRecord, FetchCommon$Wonderjs.createFetchJsonStream(PathService$Wonderjs.join(/* array */[
                        dataDir,
                        "worker/pipeline/worker/worker_pipelines.json"
                      ]), fetchFunc)),
          Most.map(ParseWorkerJobService$Wonderjs.convertWorkerJobsToRecord, FetchCommon$Wonderjs.createFetchJsonStream(PathService$Wonderjs.join(/* array */[
                        dataDir,
                        "worker/job/worker/worker_jobs.json"
                      ]), fetchFunc))
        ];
}

function _createHandleWorkerJobConfigStreamArr(dataDir, fetchFunc, state) {
  return Most.fromPromise(_collectAllRecords(MostUtils$Wonderjs.concatArray(_createFetchWorkerJobStreamArr(dataDir, fetchFunc))).then((function (recordArr) {
                    var newrecord = state.slice();
                    return Promise.resolve((newrecord[/* workerJobRecord */3] = RecordWorkerJobService$Wonderjs.create(recordArr), newrecord));
                  })));
}

function _createHandleJobConfigStreamArr(dataDir, fetchFunc, state) {
  var match = WorkerDetectMainService$Wonderjs.isUseWorker(state);
  if (match !== 0) {
    return _createHandleWorkerJobConfigStreamArr(dataDir, fetchFunc, state);
  } else {
    return _createHandleNoWorkerJobConfigStreamArr(dataDir, fetchFunc, state);
  }
}

function load(jsonPathArr, fetchFunc, stateData) {
  var settingFilePath = jsonPathArr[0];
  var dataDir = jsonPathArr[1];
  return Most.flatMap((function (json) {
                return Most.tap((function (state) {
                              StateDataMainService$Wonderjs.setState(stateData, state);
                              return /* () */0;
                            }), Most.concatMap((function (state) {
                                  return _createHandleRenderConfigStreamArr(dataDir, fetchFunc, state);
                                }), _createHandleJobConfigStreamArr(dataDir, fetchFunc, WorkerDetectMainService$Wonderjs.detect(_setSetting(stateData, StateDataMainService$Wonderjs.getState(stateData), ParseSettingService$Wonderjs.convertToRecord(json))))));
              }), FetchCommon$Wonderjs.createFetchJsonStream(settingFilePath, fetchFunc));
}

export {
  _collectAllRecords                      ,
  _createFetchNoWorkerJobStreamArr        ,
  _createFetchRenderConfigStreamArr       ,
  _setSetting                             ,
  _createHandleNoWorkerJobConfigStreamArr ,
  _createHandleRenderConfigStreamArr      ,
  _createFetchWorkerJobStreamArr          ,
  _createHandleWorkerJobConfigStreamArr   ,
  _createHandleJobConfigStreamArr         ,
  load                                    ,
  
}
/* most Not a pure module */
