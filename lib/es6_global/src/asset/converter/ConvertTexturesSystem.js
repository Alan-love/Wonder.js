// Generated by BUCKLESCRIPT VERSION 3.1.4, PLEASE EDIT WITH CARE

import * as Log$WonderLog from "../../../../../node_modules/wonder-log/lib/es6_global/src/Log.js";
import * as ArrayService$Wonderjs from "../../service/atom/ArrayService.js";
import * as ConvertCommon$Wonderjs from "./ConvertCommon.js";
import * as ArrayService$WonderCommonlib from "../../../../../node_modules/wonder-commonlib/lib/es6_global/src/ArrayService.js";

function convertToBasicSourceTextures(param) {
  return /* record */[/* count */ConvertCommon$Wonderjs.getCount(param[/* nodes */10])];
}

function convertToSamplers(param) {
  var samplers = param[/* samplers */5];
  if (samplers) {
    return ArrayService$WonderCommonlib.reduceOneParam((function (arr, param) {
                  var wrapT = param[/* wrapT */3];
                  var wrapS = param[/* wrapS */2];
                  var minFilter = param[/* minFilter */1];
                  var magFilter = param[/* magFilter */0];
                  var tmp;
                  if (magFilter) {
                    var magFilter$1 = magFilter[0];
                    tmp = magFilter$1 !== 9728 ? (
                        magFilter$1 !== 9729 ? Log$WonderLog.fatal(Log$WonderLog.buildFatalMessage("_convertToSamplers", "unknown magFilter: " + (String(magFilter$1) + ""), "", "", "")) : /* LINEAR */1
                      ) : /* NEAREST */0;
                  } else {
                    tmp = /* LINEAR */1;
                  }
                  var tmp$1;
                  if (minFilter) {
                    var minFilter$1 = minFilter[0];
                    var switcher = minFilter$1 - 9728 | 0;
                    if (switcher === 0 || switcher === 1) {
                      tmp$1 = switcher !== 0 ? /* LINEAR */1 : /* NEAREST */0;
                    } else {
                      var switcher$1 = switcher - 256 | 0;
                      tmp$1 = switcher$1 > 3 || switcher$1 < 0 ? Log$WonderLog.fatal(Log$WonderLog.buildFatalMessage("_convertToSamplers", "unknown minFilter: " + (String(minFilter$1) + ""), "", "", "")) : switcher$1 + 2 | 0;
                    }
                  } else {
                    tmp$1 = /* NEAREST */0;
                  }
                  var tmp$2;
                  if (wrapS) {
                    var wrapS$1 = wrapS[0];
                    tmp$2 = wrapS$1 !== 10497 ? (
                        wrapS$1 !== 33071 ? (
                            wrapS$1 !== 33648 ? Log$WonderLog.fatal(Log$WonderLog.buildFatalMessage("_convertToSamplers", "unknown wrapS: " + (String(wrapS$1) + ""), "", "", "")) : /* MIRRORED_REPEAT */1
                          ) : /* CLAMP_TO_EDGE */0
                      ) : /* REPEAT */2;
                  } else {
                    tmp$2 = /* CLAMP_TO_EDGE */0;
                  }
                  var tmp$3;
                  if (wrapT) {
                    var wrapT$1 = wrapT[0];
                    tmp$3 = wrapT$1 !== 10497 ? (
                        wrapT$1 !== 33071 ? (
                            wrapT$1 !== 33648 ? Log$WonderLog.fatal(Log$WonderLog.buildFatalMessage("_convertToSamplers", "unknown wrapT: " + (String(wrapT$1) + ""), "", "", "")) : /* MIRRORED_REPEAT */1
                          ) : /* CLAMP_TO_EDGE */0
                      ) : /* REPEAT */2;
                  } else {
                    tmp$3 = /* CLAMP_TO_EDGE */0;
                  }
                  return ArrayService$Wonderjs.push(/* record */[
                              /* magFilter */tmp,
                              /* minFilter */tmp$1,
                              /* wrapS */tmp$2,
                              /* wrapT */tmp$3
                            ], arr);
                }), /* array */[], samplers[0]);
  } else {
    return /* array */[];
  }
}

export {
  convertToBasicSourceTextures ,
  convertToSamplers ,
  
}
/* Log-WonderLog Not a pure module */
