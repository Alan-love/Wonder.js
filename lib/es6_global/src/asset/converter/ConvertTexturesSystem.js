// Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE

import * as Log$WonderLog from "../../../../../node_modules/wonder-log/lib/es6_global/src/Log.js";
import * as ArrayService$Wonderjs from "../../service/atom/ArrayService.js";
import * as ConvertCommon$Wonderjs from "./ConvertCommon.js";
import * as OptionService$Wonderjs from "../../service/atom/OptionService.js";
import * as ArrayService$WonderCommonlib from "../../../../../node_modules/wonder-commonlib/lib/es6_global/src/ArrayService.js";

function _buildDefaultName(textureIndex) {
  return ConvertCommon$Wonderjs.buildDefaultName("texture", textureIndex);
}

function _getFormat(mimeType) {
  switch (mimeType) {
    case "image/jpeg" : 
        return /* RGB */0;
    case "image/png" : 
        return /* RGBA */1;
    default:
      return Log$WonderLog.fatal(Log$WonderLog.buildFatalMessage("convertToBasicSourceTextures", "unknown mimeType", "", "", "mimeType: " + (String(mimeType) + "")));
  }
}

function convertToBasicSourceTextures(gltf) {
  var textures = gltf[/* textures */4];
  if (textures !== undefined) {
    var images = gltf[/* images */3];
    return ArrayService$WonderCommonlib.reduceOneParami((function (arr, texture, index) {
                  var name = texture[/* name */2];
                  var source = texture[/* source */1];
                  var tmp;
                  if (name !== undefined) {
                    tmp = name;
                  } else if (source !== undefined) {
                    var match = OptionService$Wonderjs.unsafeGet(images)[source];
                    var name$1 = match[/* name */1];
                    tmp = name$1 !== undefined ? name$1 : ConvertCommon$Wonderjs.buildDefaultName("texture", index);
                  } else {
                    tmp = ConvertCommon$Wonderjs.buildDefaultName("texture", index);
                  }
                  var image = OptionService$Wonderjs.unsafeGet(images)[OptionService$Wonderjs.unsafeGet(source)];
                  return ArrayService$Wonderjs.push(/* record */[
                              /* name */tmp,
                              /* format */_getFormat(OptionService$Wonderjs.unsafeGet(image[/* mimeType */3]))
                            ], arr);
                }), /* array */[], textures);
  } else {
    return /* array */[];
  }
}

function _convertMagFilter(magFilter) {
  if (magFilter !== undefined) {
    var magFilter$1 = magFilter;
    if (magFilter$1 !== 9728) {
      if (magFilter$1 !== 9729) {
        return Log$WonderLog.fatal(Log$WonderLog.buildFatalMessage("_convertToSamplers", "unknown magFilter: " + (String(magFilter$1) + ""), "", "", ""));
      } else {
        return /* LINEAR */1;
      }
    } else {
      return /* NEAREST */0;
    }
  } else {
    return /* LINEAR */1;
  }
}

function _convertMinFilter(minFilter) {
  if (minFilter !== undefined) {
    var minFilter$1 = minFilter;
    var switcher = minFilter$1 - 9728 | 0;
    if (switcher === 0 || switcher === 1) {
      if (switcher !== 0) {
        return /* LINEAR */1;
      } else {
        return /* NEAREST */0;
      }
    } else {
      var switcher$1 = switcher - 256 | 0;
      if (switcher$1 > 3 || switcher$1 < 0) {
        return Log$WonderLog.fatal(Log$WonderLog.buildFatalMessage("_convertToSamplers", "unknown minFilter: " + (String(minFilter$1) + ""), "", "", ""));
      } else {
        return switcher$1 + 2 | 0;
      }
    }
  } else {
    return /* NEAREST */0;
  }
}

function _convertWrapS(wrapS) {
  if (wrapS !== undefined) {
    var wrapS$1 = wrapS;
    if (wrapS$1 !== 10497) {
      if (wrapS$1 !== 33071) {
        if (wrapS$1 !== 33648) {
          return Log$WonderLog.fatal(Log$WonderLog.buildFatalMessage("_convertToSamplers", "unknown wrapS: " + (String(wrapS$1) + ""), "", "", ""));
        } else {
          return /* MIRRORED_REPEAT */1;
        }
      } else {
        return /* CLAMP_TO_EDGE */0;
      }
    } else {
      return /* REPEAT */2;
    }
  } else {
    return /* CLAMP_TO_EDGE */0;
  }
}

function _convertWrapT(wrapT) {
  if (wrapT !== undefined) {
    var wrapT$1 = wrapT;
    if (wrapT$1 !== 10497) {
      if (wrapT$1 !== 33071) {
        if (wrapT$1 !== 33648) {
          return Log$WonderLog.fatal(Log$WonderLog.buildFatalMessage("_convertToSamplers", "unknown wrapT: " + (String(wrapT$1) + ""), "", "", ""));
        } else {
          return /* MIRRORED_REPEAT */1;
        }
      } else {
        return /* CLAMP_TO_EDGE */0;
      }
    } else {
      return /* REPEAT */2;
    }
  } else {
    return /* CLAMP_TO_EDGE */0;
  }
}

function convertToSamplers(param) {
  var samplers = param[/* samplers */5];
  if (samplers !== undefined) {
    return ArrayService$WonderCommonlib.reduceOneParam((function (arr, param) {
                  return ArrayService$Wonderjs.push(/* record */[
                              /* magFilter */_convertMagFilter(param[/* magFilter */0]),
                              /* minFilter */_convertMinFilter(param[/* minFilter */1]),
                              /* wrapS */_convertWrapS(param[/* wrapS */2]),
                              /* wrapT */_convertWrapT(param[/* wrapT */3])
                            ], arr);
                }), /* array */[], samplers);
  } else {
    return /* array */[];
  }
}

export {
  _buildDefaultName ,
  _getFormat ,
  convertToBasicSourceTextures ,
  _convertMagFilter ,
  _convertMinFilter ,
  _convertWrapS ,
  _convertWrapT ,
  convertToSamplers ,
  
}
/* Log-WonderLog Not a pure module */
