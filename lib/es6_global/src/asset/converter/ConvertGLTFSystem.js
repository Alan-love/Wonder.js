// Generated by BUCKLESCRIPT VERSION 3.1.4, PLEASE EDIT WITH CARE

import * as Most from "most";
import * as Log$WonderLog from "../../../../../node_modules/wonder-log/lib/es6_global/src/Log.js";
import * as Contract$WonderLog from "../../../../../node_modules/wonder-log/lib/es6_global/src/Contract.js";
import * as ConvertCommon$Wonderjs from "./ConvertCommon.js";
import * as OptionService$Wonderjs from "../../service/atom/OptionService.js";
import * as StateDataMain$Wonderjs from "../../service/state/main/data/StateDataMain.js";
import * as IsDebugMainService$Wonderjs from "../../service/state/main/state/IsDebugMainService.js";
import * as ConvertImagesSystem$Wonderjs from "./ConvertImagesSystem.js";
import * as ConvertBuffersSystem$Wonderjs from "./ConvertBuffersSystem.js";
import * as ConvertCamerasSystem$Wonderjs from "./ConvertCamerasSystem.js";
import * as ConvertIndicesSystem$Wonderjs from "./ConvertIndicesSystem.js";
import * as ConvertTexturesSystem$Wonderjs from "./ConvertTexturesSystem.js";
import * as ConvertGeometrysSystem$Wonderjs from "./ConvertGeometrysSystem.js";
import * as ConvertMaterialsSystem$Wonderjs from "./ConvertMaterialsSystem.js";
import * as ConvertTransformsSystem$Wonderjs from "./ConvertTransformsSystem.js";
import * as ConvertMultiPrimitivesSystem$Wonderjs from "./ConvertMultiPrimitivesSystem.js";
import * as ConvertGLTFJsonToRecordSystem$Wonderjs from "./ConvertGLTFJsonToRecordSystem.js";

function _convertToScene(param) {
  var scenes = param[/* scenes */1];
  Contract$WonderLog.requireCheck((function () {
          return Contract$WonderLog.test(Log$WonderLog.buildAssertMessage("only has one scene", "not"), (function () {
                        return Contract$WonderLog.Operators[/* = */0](scenes.length, 1);
                      }));
        }), IsDebugMainService$Wonderjs.getIsDebug(StateDataMain$Wonderjs.stateData));
  return /* record */[/* gameObjects */OptionService$Wonderjs.unsafeGet(scenes[param[/* scene */2]][/* nodes */0])];
}

function _convertGLTFToWD(gltf) {
  var gltf$1 = ConvertMultiPrimitivesSystem$Wonderjs.convertMultiPrimitivesToNodes(gltf);
  return /* record */[
          /* asset : record */[
            /* version */gltf$1[/* asset */0][/* version */0],
            /* generator */"GLTF2WD"
          ],
          /* scene */_convertToScene(gltf$1),
          /* indices */ConvertIndicesSystem$Wonderjs.convertToIndices(gltf$1),
          /* gameObjects : record */[/* count */ConvertCommon$Wonderjs.getCount(gltf$1[/* nodes */10])],
          /* images */ConvertImagesSystem$Wonderjs.convertToImages(gltf$1),
          /* basicSourceTextures */ConvertTexturesSystem$Wonderjs.convertToBasicSourceTextures(gltf$1),
          /* samplers */ConvertTexturesSystem$Wonderjs.convertToSamplers(gltf$1),
          /* buffers */ConvertBuffersSystem$Wonderjs.convertToBuffers(gltf$1),
          /* bufferViews */ConvertBuffersSystem$Wonderjs.convertToBufferViews(gltf$1),
          /* accessors */ConvertBuffersSystem$Wonderjs.convertToAccessors(gltf$1),
          /* basicCameraViews */ConvertCamerasSystem$Wonderjs.convertToBasicCameraViews(gltf$1),
          /* perspectiveCameraProjections */ConvertCamerasSystem$Wonderjs.convertToPerspectiveCameraProjections(gltf$1),
          /* transforms */ConvertTransformsSystem$Wonderjs.convertToTransforms(gltf$1),
          /* customGeometrys */ConvertGeometrysSystem$Wonderjs.convertToGeometrys(gltf$1),
          /* lightMaterials */ConvertMaterialsSystem$Wonderjs.convertToLightMaterials(gltf$1)
        ];
}

function convert(gltfFileContent) {
  var gltf = ConvertGLTFJsonToRecordSystem$Wonderjs.convert(JSON.parse(gltfFileContent));
  return Most.map((function (imageArr) {
                return /* tuple */[
                        _convertGLTFToWD(gltf),
                        imageArr,
                        ConvertBuffersSystem$Wonderjs.buildBufferArray(gltf)
                      ];
              }), ConvertImagesSystem$Wonderjs.buildImageArray(gltf));
}

export {
  _convertToScene ,
  _convertGLTFToWD ,
  convert ,
  
}
/* most Not a pure module */
