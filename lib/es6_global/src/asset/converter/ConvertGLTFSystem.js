// Generated by BUCKLESCRIPT VERSION 3.1.4, PLEASE EDIT WITH CARE

import * as Caml_array from "../../../../../node_modules/bs-platform/lib/es6/caml_array.js";
import * as Log$WonderLog from "../../../../../node_modules/wonder-log/lib/es6_global/src/Log.js";
import * as Contract$WonderLog from "../../../../../node_modules/wonder-log/lib/es6_global/src/Contract.js";
import * as GLTFUtils$Wonderjs from "../utils/GLTFUtils.js";
import * as ConvertCommon$Wonderjs from "./ConvertCommon.js";
import * as OptionService$Wonderjs from "../../service/atom/OptionService.js";
import * as StateDataMain$Wonderjs from "../../service/state/main/data/StateDataMain.js";
import * as IsDebugMainService$Wonderjs from "../../service/state/main/state/IsDebugMainService.js";
import * as ConvertImagesSystem$Wonderjs from "./ConvertImagesSystem.js";
import * as ConvertLightsSystem$Wonderjs from "./ConvertLightsSystem.js";
import * as ConvertBuffersSystem$Wonderjs from "./ConvertBuffersSystem.js";
import * as ConvertCamerasSystem$Wonderjs from "./ConvertCamerasSystem.js";
import * as ConvertIndicesSystem$Wonderjs from "./ConvertIndicesSystem.js";
import * as ConvertTexturesSystem$Wonderjs from "./ConvertTexturesSystem.js";
import * as ConvertGeometrysSystem$Wonderjs from "./ConvertGeometrysSystem.js";
import * as ConvertMaterialsSystem$Wonderjs from "./ConvertMaterialsSystem.js";
import * as ConvertTransformsSystem$Wonderjs from "./ConvertTransformsSystem.js";
import * as ConvertGameObjectsSystem$Wonderjs from "./ConvertGameObjectsSystem.js";
import * as ConvertDefaultMaterialSystem$Wonderjs from "./ConvertDefaultMaterialSystem.js";
import * as ConvertMultiPrimitivesSystem$Wonderjs from "./ConvertMultiPrimitivesSystem.js";
import * as ConvertGLTFJsonToRecordSystem$Wonderjs from "./ConvertGLTFJsonToRecordSystem.js";

function _convertToScene(ambientLightArr, param) {
  var scene = param[/* scene */2];
  var scenes = param[/* scenes */1];
  Contract$WonderLog.requireCheck((function () {
          Contract$WonderLog.test(Log$WonderLog.buildAssertMessage("only has one scene", "not"), (function () {
                  return Contract$WonderLog.Operators[/* = */0](scenes.length, 1);
                }));
          return Contract$WonderLog.test(Log$WonderLog.buildAssertMessage("has one ambientLight at most", "not"), (function () {
                        return Contract$WonderLog.Operators[/* <= */11](ambientLightArr.length, 1);
                      }));
        }), IsDebugMainService$Wonderjs.getIsDebug(StateDataMain$Wonderjs.stateData));
  var scene$1 = scene ? scene[0] : 0;
  var match = ambientLightArr.length === 1;
  return /* record */[
          /* gameObjects */OptionService$Wonderjs.unsafeGet(ConvertCommon$Wonderjs.getScene(scenes, scene$1)[/* nodes */0]),
          /* ambientLight */match ? /* Some */[/* record */[/* color */Caml_array.caml_array_get(ambientLightArr, 0)[/* color */0]]] : /* None */0
        ];
}

function _convertGLTFToWD(gltf) {
  var gltf$1 = ConvertDefaultMaterialSystem$Wonderjs.convert(ConvertMultiPrimitivesSystem$Wonderjs.convertMultiPrimitivesToNodes(gltf));
  var match = ConvertLightsSystem$Wonderjs.convertToLights(gltf$1);
  return /* record */[
          /* asset : record */[
            /* version */gltf$1[/* asset */0][/* version */0],
            /* generator */GLTFUtils$Wonderjs.getGenerator(/* () */0)
          ],
          /* scene */_convertToScene(match[0], gltf$1),
          /* indices */ConvertIndicesSystem$Wonderjs.convertToIndices(gltf$1),
          /* gameObjects */ConvertGameObjectsSystem$Wonderjs.convert(gltf$1),
          /* images */ConvertImagesSystem$Wonderjs.convertToImages(gltf$1),
          /* basicSourceTextures */ConvertTexturesSystem$Wonderjs.convertToBasicSourceTextures(gltf$1),
          /* samplers */ConvertTexturesSystem$Wonderjs.convertToSamplers(gltf$1),
          /* buffers */ConvertBuffersSystem$Wonderjs.convertToBuffers(gltf$1),
          /* bufferViews */ConvertBuffersSystem$Wonderjs.convertToBufferViews(gltf$1),
          /* accessors */ConvertBuffersSystem$Wonderjs.convertToAccessors(gltf$1),
          /* directionLights */match[1],
          /* pointLights */match[2],
          /* basicCameraViews */ConvertCamerasSystem$Wonderjs.convertToBasicCameraViews(gltf$1),
          /* perspectiveCameraProjections */ConvertCamerasSystem$Wonderjs.convertToPerspectiveCameraProjections(gltf$1),
          /* transforms */ConvertTransformsSystem$Wonderjs.convertToTransforms(gltf$1),
          /* customGeometrys */ConvertGeometrysSystem$Wonderjs.convertToGeometrys(gltf$1),
          /* lightMaterials */ConvertMaterialsSystem$Wonderjs.convertToLightMaterials(gltf$1)
        ];
}

function convert(gltfFileContent) {
  return _convertGLTFToWD(ConvertGLTFJsonToRecordSystem$Wonderjs.convert(JSON.parse(gltfFileContent)));
}

export {
  _convertToScene ,
  _convertGLTFToWD ,
  convert ,
  
}
/* Log-WonderLog Not a pure module */
