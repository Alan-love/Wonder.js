// Generated by BUCKLESCRIPT VERSION 3.1.4, PLEASE EDIT WITH CARE

import * as Most from "most";
import * as Curry from "../../../../../node_modules/bs-platform/lib/es6/curry.js";
import * as Log$WonderLog from "../../../../../node_modules/wonder-log/lib/es6_global/src/Log.js";
import * as PathService$Wonderjs from "../../service/primitive/PathService.js";
import * as ArrayService$Wonderjs from "../../service/atom/ArrayService.js";
import * as ConvertCommon$Wonderjs from "./ConvertCommon.js";
import * as LoadImageSystem$Wonderjs from "../loader/LoadImageSystem.js";
import * as ArrayService$WonderCommonlib from "../../../../../node_modules/wonder-commonlib/lib/es6_global/src/ArrayService.js";

function _getSourcePath(filePath, sourceRelativePath) {
  return Curry._2(PathService$Wonderjs.resolve, filePath, sourceRelativePath);
}

function buildImageArray(param) {
  var images = param[/* images */3];
  var imageArr = /* array */[];
  if (images) {
    return Most.map((function () {
                  return imageArr;
                }), Most.mergeArray(ArrayService$WonderCommonlib.reduceOneParam((function (streamArr, param) {
                          var uri = param[/* uri */0];
                          if (uri) {
                            var uri$1 = uri[0];
                            var match = ConvertCommon$Wonderjs.isBase64(uri$1);
                            if (match) {
                              return ArrayService$Wonderjs.push(Most.tap((function (image) {
                                                ArrayService$Wonderjs.push(image, imageArr);
                                                return /* () */0;
                                              }), LoadImageSystem$Wonderjs.loadBase64Image(uri$1)), streamArr);
                            } else {
                              return Log$WonderLog.fatal(Log$WonderLog.buildFatalMessage("_loadImages", "only support base64 uri", "", "", ""));
                            }
                          } else {
                            return Log$WonderLog.fatal(Log$WonderLog.buildFatalMessage("_loadImages", "image->uri should exist", "", "", ""));
                          }
                        }), /* array */[], images[0])));
  } else {
    return Most.just(imageArr);
  }
}

function convertToImages(param) {
  var images = param[/* images */3];
  if (images) {
    return ArrayService$WonderCommonlib.reduceOneParam((function (arr, param) {
                  var uri = param[/* uri */0];
                  if (uri) {
                    return ArrayService$Wonderjs.push(/* record */[/* uri */uri[0]], arr);
                  } else {
                    return Log$WonderLog.fatal(Log$WonderLog.buildFatalMessage("_convertToImages", "uri should exist", "", "", ""));
                  }
                }), /* array */[], images[0]);
  } else {
    return /* array */[];
  }
}

export {
  _getSourcePath ,
  buildImageArray ,
  convertToImages ,
  
}
/* most Not a pure module */
