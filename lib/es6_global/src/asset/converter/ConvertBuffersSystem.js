// Generated by BUCKLESCRIPT VERSION 3.1.4, PLEASE EDIT WITH CARE

import * as Log$WonderLog from "../../../../../node_modules/wonder-log/lib/es6_global/src/Log.js";
import * as ArrayService$Wonderjs from "../../service/atom/ArrayService.js";
import * as ArrayService$WonderCommonlib from "../../../../../node_modules/wonder-commonlib/lib/es6_global/src/ArrayService.js";

function convertToBuffers(param) {
  return ArrayService$WonderCommonlib.reduceOneParam((function (arr, param) {
                var uri = param[/* uri */0];
                if (uri) {
                  return ArrayService$Wonderjs.push(/* record */[
                              /* uri */uri[0],
                              /* byteLength */param[/* byteLength */1]
                            ], arr);
                } else {
                  return Log$WonderLog.fatal(Log$WonderLog.buildFatalMessage("_convertToBuffers", "uri should exist", "", "", ""));
                }
              }), /* array */[], param[/* buffers */6]);
}

function convertToAccessors(param) {
  return ArrayService$WonderCommonlib.reduceOneParam((function (arr, param) {
                var type_ = param[/* type_ */4];
                var componentType = param[/* componentType */3];
                var byteOffset = param[/* byteOffset */1];
                var bufferView = param[/* bufferView */0];
                var tmp;
                var exit = 0;
                var switcher = componentType - 5120 | 0;
                if (switcher > 6 || switcher < 0) {
                  exit = 1;
                } else {
                  switch (switcher) {
                    case 0 : 
                        tmp = /* BYTE */0;
                        break;
                    case 1 : 
                        tmp = /* UNSIGNED_BYTE */1;
                        break;
                    case 2 : 
                        tmp = /* SHORT */2;
                        break;
                    case 3 : 
                        tmp = /* UNSIGNED_SHORT */3;
                        break;
                    case 4 : 
                        exit = 1;
                        break;
                    case 5 : 
                        tmp = /* UNSIGNED_INT */4;
                        break;
                    case 6 : 
                        tmp = /* FLOAT */5;
                        break;
                    
                  }
                }
                if (exit === 1) {
                  tmp = Log$WonderLog.fatal(Log$WonderLog.buildFatalMessage("_convertToAccessors", "unknown componentType: " + (String(componentType) + ""), "", "", ""));
                }
                var tmp$1;
                switch (type_) {
                  case "MAT2" : 
                      tmp$1 = /* MAT2 */4;
                      break;
                  case "MAT3" : 
                      tmp$1 = /* MAT3 */5;
                      break;
                  case "MAT4" : 
                      tmp$1 = /* MAT4 */6;
                      break;
                  case "SCALAR" : 
                      tmp$1 = /* SCALAR */0;
                      break;
                  case "VEC2" : 
                      tmp$1 = /* VEC2 */1;
                      break;
                  case "VEC3" : 
                      tmp$1 = /* VEC3 */2;
                      break;
                  case "VEC4" : 
                      tmp$1 = /* VEC4 */3;
                      break;
                  default:
                    tmp$1 = Log$WonderLog.fatal(Log$WonderLog.buildFatalMessage("_convertToAccessors", "unknown type_:" + (String(type_) + ""), "", "", ""));
                }
                return ArrayService$Wonderjs.push(/* record */[
                            /* bufferView */bufferView ? bufferView[0] : Log$WonderLog.fatal(Log$WonderLog.buildFatalMessage("_convertToAccessors", "bufferView should exist", "", "", "")),
                            /* byteOffset */byteOffset ? byteOffset[0] : 0,
                            /* count */param[/* count */2],
                            /* componentType */tmp,
                            /* type_ */tmp$1
                          ], arr);
              }), /* array */[], param[/* accessors */8]);
}

function convertToBufferViews(param) {
  return ArrayService$WonderCommonlib.reduceOneParam((function (arr, param) {
                var byteOffset = param[/* byteOffset */1];
                return ArrayService$Wonderjs.push(/* record */[
                            /* buffer */param[/* buffer */0],
                            /* byteOffset */byteOffset ? byteOffset[0] : 0,
                            /* byteLength */param[/* byteLength */2],
                            /* byteStride */param[/* byteStride */3]
                          ], arr);
              }), /* array */[], param[/* bufferViews */7]);
}

export {
  convertToBuffers ,
  convertToAccessors ,
  convertToBufferViews ,
  
}
/* Log-WonderLog Not a pure module */
