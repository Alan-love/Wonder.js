// Generated by BUCKLESCRIPT VERSION 3.1.4, PLEASE EDIT WITH CARE

import * as Caml_array from "../../../../../node_modules/bs-platform/lib/es6/caml_array.js";
import * as ArrayService$Wonderjs from "../../service/atom/ArrayService.js";
import * as ArrayService$WonderCommonlib from "../../../../../node_modules/wonder-commonlib/lib/es6_global/src/ArrayService.js";

function _getTranslationTuple(mat) {
  return /* tuple */[
          Caml_array.caml_array_get(mat, 12),
          Caml_array.caml_array_get(mat, 13),
          Caml_array.caml_array_get(mat, 14)
        ];
}

function _getScaleTuple(mat) {
  var m11 = Caml_array.caml_array_get(mat, 0);
  var m12 = Caml_array.caml_array_get(mat, 1);
  var m13 = Caml_array.caml_array_get(mat, 2);
  var m21 = Caml_array.caml_array_get(mat, 4);
  var m22 = Caml_array.caml_array_get(mat, 5);
  var m23 = Caml_array.caml_array_get(mat, 6);
  var m31 = Caml_array.caml_array_get(mat, 8);
  var m32 = Caml_array.caml_array_get(mat, 9);
  var m33 = Caml_array.caml_array_get(mat, 10);
  return /* tuple */[
          Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13),
          Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23),
          Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33)
        ];
}

function _getRotationTuple(mat) {
  var trace = Caml_array.caml_array_get(mat, 0) + Caml_array.caml_array_get(mat, 5) + Caml_array.caml_array_get(mat, 10);
  if (trace > 0) {
    var s = Math.sqrt(trace + 1.0) * 2;
    return /* tuple */[
            (Caml_array.caml_array_get(mat, 6) - Caml_array.caml_array_get(mat, 9)) / s,
            (Caml_array.caml_array_get(mat, 8) - Caml_array.caml_array_get(mat, 2)) / s,
            (Caml_array.caml_array_get(mat, 1) - Caml_array.caml_array_get(mat, 4)) / s,
            0.25 * s
          ];
  } else if (Caml_array.caml_array_get(mat, 0) > Caml_array.caml_array_get(mat, 5) && Caml_array.caml_array_get(mat, 0) > Caml_array.caml_array_get(mat, 10)) {
    var s$1 = Math.sqrt(1.0 + Caml_array.caml_array_get(mat, 0) - Caml_array.caml_array_get(mat, 5) - Caml_array.caml_array_get(mat, 10)) * 2;
    return /* tuple */[
            0.25 * s$1,
            (Caml_array.caml_array_get(mat, 1) + Caml_array.caml_array_get(mat, 4)) / s$1,
            (Caml_array.caml_array_get(mat, 8) + Caml_array.caml_array_get(mat, 2)) / s$1,
            (Caml_array.caml_array_get(mat, 6) - Caml_array.caml_array_get(mat, 9)) / s$1
          ];
  } else if (Caml_array.caml_array_get(mat, 5) > Caml_array.caml_array_get(mat, 10)) {
    var s$2 = Math.sqrt(1.0 + Caml_array.caml_array_get(mat, 5) - Caml_array.caml_array_get(mat, 0) - Caml_array.caml_array_get(mat, 10)) * 2;
    return /* tuple */[
            (Caml_array.caml_array_get(mat, 1) + Caml_array.caml_array_get(mat, 4)) / s$2,
            0.25 * s$2,
            (Caml_array.caml_array_get(mat, 6) + Caml_array.caml_array_get(mat, 9)) / s$2,
            (Caml_array.caml_array_get(mat, 8) - Caml_array.caml_array_get(mat, 2)) / s$2
          ];
  } else {
    var s$3 = Math.sqrt(1.0 + Caml_array.caml_array_get(mat, 10) - Caml_array.caml_array_get(mat, 0) - Caml_array.caml_array_get(mat, 5)) * 2;
    return /* tuple */[
            (Caml_array.caml_array_get(mat, 8) + Caml_array.caml_array_get(mat, 2)) / s$3,
            (Caml_array.caml_array_get(mat, 6) + Caml_array.caml_array_get(mat, 9)) / s$3,
            0.25 * s$3,
            (Caml_array.caml_array_get(mat, 1) - Caml_array.caml_array_get(mat, 4)) / s$3
          ];
  }
}

function convertToTransforms(param) {
  return ArrayService$WonderCommonlib.reduceOneParam((function (arr, param) {
                var scale = param[/* scale */7];
                var rotation = param[/* rotation */6];
                var translation = param[/* translation */5];
                var matrix = param[/* matrix */4];
                if (matrix) {
                  var matrix$1 = matrix[0];
                  return ArrayService$Wonderjs.push(/* record */[
                              /* translation : Some */[_getTranslationTuple(matrix$1)],
                              /* rotation : Some */[_getRotationTuple(matrix$1)],
                              /* scale : Some */[_getScaleTuple(matrix$1)]
                            ], arr);
                } else {
                  return ArrayService$Wonderjs.push(/* record */[
                              /* translation */translation ? /* Some */[translation[0]] : /* None */0,
                              /* rotation */rotation ? /* Some */[rotation[0]] : /* None */0,
                              /* scale */scale ? /* Some */[scale[0]] : /* None */0
                            ], arr);
                }
              }), /* array */[], param[/* nodes */10]);
}

export {
  _getTranslationTuple ,
  _getScaleTuple ,
  _getRotationTuple ,
  convertToTransforms ,
  
}
/* ArrayService-Wonderjs Not a pure module */
