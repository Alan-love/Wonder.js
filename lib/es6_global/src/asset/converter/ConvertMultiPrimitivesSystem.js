// Generated by BUCKLESCRIPT VERSION 3.1.4, PLEASE EDIT WITH CARE

import * as ArrayService$Wonderjs from "../../service/atom/ArrayService.js";
import * as SparseMapService$Wonderjs from "../../service/atom/SparseMapService.js";
import * as ArrayService$WonderCommonlib from "../../../../../node_modules/wonder-commonlib/lib/es6_global/src/ArrayService.js";
import * as SparseMapService$WonderCommonlib from "../../../../../node_modules/wonder-commonlib/lib/es6_global/src/SparseMapService.js";

function _buildMultiPrimitivesMeshMap(meshes) {
  return ArrayService$WonderCommonlib.reduceOneParami((function (param, param$1, meshIndex) {
                  var primitives = param$1[/* primitives */0];
                  var newMeshIndex = param[1];
                  var multiPrimitivesMeshMap = param[0];
                  var primitivesLen = primitives.length;
                  if (primitivesLen === 0 || primitivesLen === 1) {
                    return /* tuple */[
                            multiPrimitivesMeshMap,
                            newMeshIndex
                          ];
                  } else {
                    var newMeshDataArr = ArrayService$WonderCommonlib.reduceOneParami((function (newMeshDataArr, primitive, primitiveIndex) {
                            return ArrayService$Wonderjs.push(/* tuple */[
                                        /* record */[/* primitives : array */[primitive]],
                                        newMeshIndex + primitiveIndex | 0
                                      ], newMeshDataArr);
                          }), /* array */[], primitives);
                    return /* tuple */[
                            SparseMapService$WonderCommonlib.set(meshIndex, newMeshDataArr, multiPrimitivesMeshMap),
                            newMeshIndex + newMeshDataArr.length | 0
                          ];
                  }
                }), /* tuple */[
                SparseMapService$WonderCommonlib.createEmpty(/* () */0),
                meshes.length
              ], meshes)[0];
}

function _buildNewMeshes(meshes, multiPrimitivesMeshMap) {
  return SparseMapService$Wonderjs.reduceiValid((function (newMeshes, newMeshDataArr, _) {
                return newMeshes.concat(newMeshDataArr.map((function (param) {
                                  return param[0];
                                })));
              }), meshes.slice(), multiPrimitivesMeshMap);
}

function _buildNewNodes(nodes, multiPrimitivesMeshMap) {
  var match = ArrayService$WonderCommonlib.reduceOneParam((function (param, node) {
          var mesh = node[/* mesh */1];
          var newNodeIndex = param[2];
          var newNodesOfMultiPrimitives = param[1];
          var newNodes = param[0];
          if (mesh) {
            var match = SparseMapService$WonderCommonlib.get(mesh[0], multiPrimitivesMeshMap);
            if (match) {
              var newMeshDataArr = match[0];
              var newNodesOfMultiPrimitives$1 = ArrayService$WonderCommonlib.reduceOneParam((function (newNodesOfMultiPrimitives, param) {
                      return ArrayService$Wonderjs.push(/* record */[
                                  /* camera */node[/* camera */0],
                                  /* mesh : Some */[param[1]],
                                  /* children : None */0,
                                  /* matrix */node[/* matrix */3],
                                  /* translation */node[/* translation */4],
                                  /* rotation */node[/* rotation */5],
                                  /* scale */node[/* scale */6]
                                ], newNodesOfMultiPrimitives);
                    }), newNodesOfMultiPrimitives, newMeshDataArr);
              var newChildren = ArrayService$Wonderjs.range(newNodeIndex, (newNodeIndex + newMeshDataArr.length | 0) - 1 | 0);
              var match$1 = node[/* children */2];
              return /* tuple */[
                      ArrayService$Wonderjs.push(/* record */[
                            /* camera */node[/* camera */0],
                            /* mesh : None */0,
                            /* children */match$1 ? /* Some */[match$1[0].concat(newChildren)] : /* Some */[newChildren],
                            /* matrix */node[/* matrix */3],
                            /* translation */node[/* translation */4],
                            /* rotation */node[/* rotation */5],
                            /* scale */node[/* scale */6]
                          ], newNodes),
                      newNodesOfMultiPrimitives$1,
                      newNodeIndex + newMeshDataArr.length | 0
                    ];
            } else {
              return /* tuple */[
                      ArrayService$Wonderjs.push(node, newNodes),
                      newNodesOfMultiPrimitives,
                      newNodeIndex
                    ];
            }
          } else {
            return /* tuple */[
                    ArrayService$Wonderjs.push(node, newNodes),
                    newNodesOfMultiPrimitives,
                    newNodeIndex
                  ];
          }
        }), /* tuple */[
        /* array */[],
        /* array */[],
        nodes.length
      ], nodes);
  return match[0].concat(match[1]);
}

function convertMultiPrimitivesToNodes(gltf) {
  var meshes = gltf[/* meshes */11];
  var multiPrimitivesMeshMap = _buildMultiPrimitivesMeshMap(meshes);
  return /* record */[
          /* asset */gltf[/* asset */0],
          /* scenes */gltf[/* scenes */1],
          /* scene */gltf[/* scene */2],
          /* images */gltf[/* images */3],
          /* textures */gltf[/* textures */4],
          /* samplers */gltf[/* samplers */5],
          /* buffers */gltf[/* buffers */6],
          /* bufferViews */gltf[/* bufferViews */7],
          /* accessors */gltf[/* accessors */8],
          /* cameras */gltf[/* cameras */9],
          /* nodes */_buildNewNodes(gltf[/* nodes */10], multiPrimitivesMeshMap),
          /* meshes */_buildNewMeshes(meshes, multiPrimitivesMeshMap),
          /* materials */gltf[/* materials */12]
        ];
}

export {
  _buildMultiPrimitivesMeshMap ,
  _buildNewMeshes ,
  _buildNewNodes ,
  convertMultiPrimitivesToNodes ,
  
}
/* ArrayService-Wonderjs Not a pure module */
