// Generated by BUCKLESCRIPT VERSION 3.1.4, PLEASE EDIT WITH CARE

import * as DataViewCommon$Wonderjs from "./DataViewCommon.js";
import * as SparseMapService$Wonderjs from "../../service/atom/SparseMapService.js";

function _getFloat1(typeArray, index) {
  return typeArray[index];
}

function _getUint16_1(typeArray, index) {
  return typeArray[index];
}

function _fillBuffer(param, param$1) {
  var getValueFunc = param$1[1];
  var writeDataViewFunc = param$1[0];
  var points = param[1];
  var dataView = param[0];
  var offset = param[3];
  for(var i = 0 ,i_finish = param[2] - 1 | 0; i <= i_finish; ++i){
    offset = writeDataViewFunc(getValueFunc(points, i), offset, dataView);
  }
  return /* tuple */[
          dataView,
          offset
        ];
}

function build(totalByteLength, meshPointDataMap) {
  var buffer = new ArrayBuffer(totalByteLength);
  var dataView = DataViewCommon$Wonderjs.create(buffer);
  SparseMapService$Wonderjs.reduceiValid((function (param, param$1, _) {
          var indices = param$1[3];
          var texCoords = param$1[2];
          var normals = param$1[1];
          var vertices = param$1[0];
          var verticesLength = vertices.length;
          var normalsLength = normals.length;
          var texCoordsLength = texCoords ? texCoords[0].length : 0;
          var indicesLength = indices.length;
          var match = _fillBuffer(/* tuple */[
                param[0],
                vertices,
                verticesLength,
                param[1]
              ], /* tuple */[
                DataViewCommon$Wonderjs.writeFloat,
                _getFloat1
              ]);
          var match$1 = _fillBuffer(/* tuple */[
                match[0],
                normals,
                normalsLength,
                match[1]
              ], /* tuple */[
                DataViewCommon$Wonderjs.writeFloat,
                _getFloat1
              ]);
          var offset = match$1[1];
          var dataView = match$1[0];
          var match$2 = texCoords ? _fillBuffer(/* tuple */[
                  dataView,
                  texCoords[0],
                  texCoordsLength,
                  offset
                ], /* tuple */[
                  DataViewCommon$Wonderjs.writeFloat,
                  _getFloat1
                ]) : /* tuple */[
              dataView,
              offset
            ];
          return _fillBuffer(/* tuple */[
                      match$2[0],
                      indices,
                      indicesLength,
                      match$2[1]
                    ], /* tuple */[
                      DataViewCommon$Wonderjs.writeUint16_1,
                      _getUint16_1
                    ]);
        }), /* tuple */[
        dataView,
        0
      ], meshPointDataMap);
  return buffer;
}

export {
  _getFloat1 ,
  _getUint16_1 ,
  _fillBuffer ,
  build ,
  
}
/* SparseMapService-Wonderjs Not a pure module */
