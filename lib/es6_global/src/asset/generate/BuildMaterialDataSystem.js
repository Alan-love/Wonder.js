// Generated by BUCKLESCRIPT VERSION 3.1.4, PLEASE EDIT WITH CARE

import * as Caml_array from "../../../../../node_modules/bs-platform/lib/es6/caml_array.js";
import * as Contract$WonderLog from "../../../../../node_modules/wonder-log/lib/es6_global/src/Contract.js";
import * as ArrayService$Wonderjs from "../../service/atom/ArrayService.js";
import * as StateDataMain$Wonderjs from "../../service/state/main/data/StateDataMain.js";
import * as GenerateCommon$Wonderjs from "./GenerateCommon.js";
import * as SparseMapService$Wonderjs from "../../service/atom/SparseMapService.js";
import * as IsDebugMainService$Wonderjs from "../../service/state/main/state/IsDebugMainService.js";
import * as TextureSizeService$Wonderjs from "../../service/primitive/texture/TextureSizeService.js";
import * as HashMapService$WonderCommonlib from "../../../../../node_modules/wonder-commonlib/lib/es6_global/src/HashMapService.js";
import * as SparseMapService$WonderCommonlib from "../../../../../node_modules/wonder-commonlib/lib/es6_global/src/SparseMapService.js";
import * as OperateLightMaterialMainService$Wonderjs from "../../service/state/main/material/light/OperateLightMaterialMainService.js";
import * as NameBasicSourceTextureMainService$Wonderjs from "../../service/state/main/texture/basic_source/NameBasicSourceTextureMainService.js";
import * as OperateBasicSourceTextureMainService$Wonderjs from "../../service/state/main/texture/basic_source/OperateBasicSourceTextureMainService.js";

function _buildSamplerDataMapKey(wrapS, wrapT, magFilter, minFilter) {
  return wrapS.toString() + (wrapT.toString() + (magFilter.toString() + minFilter.toString()));
}

function _getWrapData(wrap) {
  switch (wrap) {
    case 0 : 
        return 33071;
    case 1 : 
        return 33648;
    case 2 : 
        return 10497;
    
  }
}

function _getFilterData(filter) {
  switch (filter) {
    case 0 : 
        return 9728;
    case 1 : 
        return 9729;
    case 2 : 
        return 9984;
    case 3 : 
        return 9985;
    case 4 : 
        return 9986;
    case 5 : 
        return 9987;
    
  }
}

function _addSamplerData(texture, samplerIndexMap, state, samplerDataArr) {
  var wrapS = OperateBasicSourceTextureMainService$Wonderjs.getWrapS(texture, state);
  var wrapT = OperateBasicSourceTextureMainService$Wonderjs.getWrapT(texture, state);
  var magFilter = OperateBasicSourceTextureMainService$Wonderjs.getMagFilter(texture, state);
  var minFilter = OperateBasicSourceTextureMainService$Wonderjs.getMinFilter(texture, state);
  var key = _buildSamplerDataMapKey(wrapS, wrapT, magFilter, minFilter);
  var match = HashMapService$WonderCommonlib.get(key, samplerIndexMap);
  if (match) {
    return /* tuple */[
            match[0],
            samplerIndexMap,
            samplerDataArr
          ];
  } else {
    var samplerIndex = samplerDataArr.length;
    return /* tuple */[
            samplerIndex,
            HashMapService$WonderCommonlib.set(key, samplerIndex, samplerIndexMap),
            ArrayService$Wonderjs.push(/* record */[
                  /* wrapS */_getWrapData(wrapS),
                  /* wrapT */_getWrapData(wrapT),
                  /* magFilter */_getFilterData(magFilter),
                  /* minFilter */_getFilterData(minFilter)
                ], samplerDataArr)
          ];
  }
}

var _convertImageToBase64 = function (width,height,image){
    var canvas = document.createElement("canvas");
    var ctx = canvas.getContext("2d");
    var dataURL = null;

    canvas.height = width;
    canvas.width = height;

    ctx.drawImage(image, 0, 0);

    return canvas.toDataURL();
    };

function _addImageData(param, imageBase64Map, imageBase64Arr) {
  var imageMap = param[1];
  var texture = param[0];
  var source = OperateBasicSourceTextureMainService$Wonderjs.unsafeGetSource(texture, param[2]);
  var imageIndex = SparseMapService$Wonderjs.indexOf(source, imageMap);
  if (imageIndex === -1) {
    var imageIndex$1 = imageBase64Arr.length;
    var match = SparseMapService$WonderCommonlib.get(texture, imageBase64Map);
    return /* tuple */[
            imageIndex$1,
            SparseMapService$WonderCommonlib.set(imageIndex$1, source, imageMap),
            ArrayService$Wonderjs.push(match ? match[0] : _convertImageToBase64(TextureSizeService$Wonderjs.getWidth(source), TextureSizeService$Wonderjs.getHeight(source), source), imageBase64Arr)
          ];
  } else {
    return /* tuple */[
            imageIndex,
            imageMap,
            imageBase64Arr
          ];
  }
}

function _addTextureData(texture, param, state, textureDataArr) {
  return ArrayService$Wonderjs.push(/* record */[
              /* name */NameBasicSourceTextureMainService$Wonderjs.getName(texture, state),
              /* sampler */param[0],
              /* source */param[1]
            ], textureDataArr);
}

function _buildNoDiffuseMap(param, param$1, param$2, state) {
  var diffuseColor = OperateLightMaterialMainService$Wonderjs.getDiffuseColor(param[0], state);
  return /* tuple */[
          /* tuple */[
            ArrayService$Wonderjs.push(/* record */[
                  /* baseColorFactor : Some */[/* array */[
                      Caml_array.caml_array_get(diffuseColor, 0),
                      Caml_array.caml_array_get(diffuseColor, 1),
                      Caml_array.caml_array_get(diffuseColor, 2),
                      1.0
                    ]],
                  /* baseColorTexture : None */0,
                  /* name */param[1]
                ], param$1[0]),
            param$1[1],
            param$1[2],
            param$1[3]
          ],
          /* tuple */[
            param$2[0],
            param$2[1],
            param$2[2]
          ]
        ];
}

function _buildDiffuseMap(param, param$1, param$2, state) {
  var imageMap = param$2[2];
  var samplerIndexMap = param$2[1];
  var textureIndexMap = param$2[0];
  var imageBase64Arr = param$1[3];
  var samplerDataArr = param$1[2];
  var textureDataArr = param$1[1];
  var materialDataArr = param$1[0];
  var name = param[1];
  var diffuseMap = param[0];
  var match = SparseMapService$WonderCommonlib.get(diffuseMap, textureIndexMap);
  if (match) {
    return /* tuple */[
            /* tuple */[
              ArrayService$Wonderjs.push(/* record */[
                    /* baseColorFactor : None */0,
                    /* baseColorTexture : Some */[match[0]],
                    /* name */name
                  ], materialDataArr),
              textureDataArr,
              samplerDataArr,
              imageBase64Arr
            ],
            /* tuple */[
              textureIndexMap,
              samplerIndexMap,
              imageMap
            ]
          ];
  } else {
    var textureIndex = textureDataArr.length;
    var textureIndexMap$1 = SparseMapService$WonderCommonlib.set(diffuseMap, textureIndex, textureIndexMap);
    var match$1 = _addSamplerData(diffuseMap, samplerIndexMap, state, samplerDataArr);
    var match$2 = _addImageData(/* tuple */[
          diffuseMap,
          imageMap,
          state
        ], param$2[3], imageBase64Arr);
    return /* tuple */[
            /* tuple */[
              ArrayService$Wonderjs.push(/* record */[
                    /* baseColorFactor : None */0,
                    /* baseColorTexture : Some */[textureIndex],
                    /* name */name
                  ], materialDataArr),
              _addTextureData(diffuseMap, /* tuple */[
                    match$1[0],
                    match$2[0]
                  ], state, textureDataArr),
              match$1[2],
              match$2[2]
            ],
            /* tuple */[
              textureIndexMap$1,
              match$1[1],
              match$2[1]
            ]
          ];
  }
}

function build(materialDataMap, imageBase64Map, state) {
  Contract$WonderLog.requireCheck((function () {
          return GenerateCommon$Wonderjs.checkShouldHasNoSlot(materialDataMap);
        }), IsDebugMainService$Wonderjs.getIsDebug(StateDataMain$Wonderjs.stateData));
  var match = SparseMapService$Wonderjs.reduceValid((function (param, param$1) {
          var name = param$1[1];
          var lightMaterial = param$1[0];
          var match = param[1];
          var imageMap = match[2];
          var samplerIndexMap = match[1];
          var textureIndexMap = match[0];
          var match$1 = param[0];
          var imageBase64Arr = match$1[3];
          var samplerDataArr = match$1[2];
          var textureDataArr = match$1[1];
          var materialDataArr = match$1[0];
          var diffuseMap = OperateLightMaterialMainService$Wonderjs.getDiffuseMap(lightMaterial, state);
          if (diffuseMap) {
            return _buildDiffuseMap(/* tuple */[
                        diffuseMap[0],
                        name
                      ], /* tuple */[
                        materialDataArr,
                        textureDataArr,
                        samplerDataArr,
                        imageBase64Arr
                      ], /* tuple */[
                        textureIndexMap,
                        samplerIndexMap,
                        imageMap,
                        imageBase64Map
                      ], state);
          } else {
            return _buildNoDiffuseMap(/* tuple */[
                        lightMaterial,
                        name
                      ], /* tuple */[
                        materialDataArr,
                        textureDataArr,
                        samplerDataArr,
                        imageBase64Arr
                      ], /* tuple */[
                        textureIndexMap,
                        samplerIndexMap,
                        imageMap
                      ], state);
          }
        }), /* tuple */[
        /* tuple */[
          /* array */[],
          /* array */[],
          /* array */[],
          /* array */[]
        ],
        /* tuple */[
          /* array */[],
          HashMapService$WonderCommonlib.createEmpty(/* () */0),
          /* array */[]
        ]
      ], materialDataMap);
  var match$1 = match[0];
  return /* tuple */[
          match$1[0],
          match$1[1],
          match$1[2],
          match$1[3]
        ];
}

export {
  _buildSamplerDataMapKey ,
  _getWrapData ,
  _getFilterData ,
  _addSamplerData ,
  _convertImageToBase64 ,
  _addImageData ,
  _addTextureData ,
  _buildNoDiffuseMap ,
  _buildDiffuseMap ,
  build ,
  
}
/* Contract-WonderLog Not a pure module */
