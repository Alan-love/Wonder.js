// Generated by BUCKLESCRIPT VERSION 3.1.4, PLEASE EDIT WITH CARE

import * as List from "../../../../../node_modules/bs-platform/lib/es6/list.js";
import * as Curry from "../../../../../node_modules/bs-platform/lib/es6/curry.js";
import * as GLTFUtils$Wonderjs from "../utils/GLTFUtils.js";
import * as Json_encode$Wonderjs from "../../external/json/Json_encode.js";
import * as BuildLightDataSystem$Wonderjs from "./BuildLightDataSystem.js";
import * as Base64ArrayBufferCommon$Wonderjs from "./Base64ArrayBufferCommon.js";
import * as NameGameObjectMainService$Wonderjs from "../../service/state/main/gameObject/NameGameObjectMainService.js";

function _encodeNodes(nodeDataArr, state) {
  return /* tuple */[
          "nodes",
          nodeDataArr.map((function (param) {
                  var extensions = param[/* extensions */8];
                  var extras = param[/* extras */7];
                  var camera = param[/* camera */6];
                  var mesh = param[/* mesh */5];
                  var scale = param[/* scale */4];
                  var rotation = param[/* rotation */3];
                  var translation = param[/* translation */2];
                  var children = param[/* children */1];
                  var match = NameGameObjectMainService$Wonderjs.getName(param[/* gameObject */0], state);
                  var list = match ? /* :: */[
                      /* tuple */[
                        "name",
                        match[0]
                      ],
                      /* [] */0
                    ] : /* [] */0;
                  var list$1 = children ? /* :: */[
                      /* tuple */[
                        "children",
                        children[0]
                      ],
                      list
                    ] : list;
                  var list$2 = translation ? /* :: */[
                      /* tuple */[
                        "translation",
                        translation[0]
                      ],
                      list$1
                    ] : list$1;
                  var list$3 = rotation ? /* :: */[
                      /* tuple */[
                        "rotation",
                        rotation[0]
                      ],
                      list$2
                    ] : list$2;
                  var list$4 = scale ? /* :: */[
                      /* tuple */[
                        "scale",
                        scale[0]
                      ],
                      list$3
                    ] : list$3;
                  var list$5 = mesh ? /* :: */[
                      /* tuple */[
                        "mesh",
                        mesh[0]
                      ],
                      list$4
                    ] : list$4;
                  var list$6 = camera ? /* :: */[
                      /* tuple */[
                        "camera",
                        camera[0]
                      ],
                      list$5
                    ] : list$5;
                  var list$7;
                  if (extras) {
                    var material = extras[0][/* material */0];
                    var extraList = material ? /* :: */[
                        /* tuple */[
                          "material",
                          material[0]
                        ],
                        /* [] */0
                      ] : /* [] */0;
                    list$7 = /* :: */[
                      /* tuple */[
                        "extras",
                        Json_encode$Wonderjs.object_(extraList)
                      ],
                      list$6
                    ];
                  } else {
                    list$7 = list$6;
                  }
                  var list$8;
                  if (extensions) {
                    var khr_lights = extensions[0][/* khr_lights */0];
                    var extensionList = khr_lights ? /* :: */[
                        /* tuple */[
                          "KHR_lights",
                          Json_encode$Wonderjs.object_(/* :: */[
                                /* tuple */[
                                  "light",
                                  khr_lights[0][/* light */0]
                                ],
                                /* [] */0
                              ])
                        ],
                        /* [] */0
                      ] : /* [] */0;
                    list$8 = /* :: */[
                      /* tuple */[
                        "extensions",
                        Json_encode$Wonderjs.object_(extensionList)
                      ],
                      list$7
                    ];
                  } else {
                    list$8 = list$7;
                  }
                  return Json_encode$Wonderjs.object_(List.rev(list$8));
                }))
        ];
}

function _encodeCameras(cameraDataArr) {
  return /* tuple */[
          "cameras",
          cameraDataArr.map((function (param) {
                  var perspective = param[/* perspective */1];
                  var aspect = perspective[/* aspect */3];
                  var far = perspective[/* far */1];
                  var perspectiveList_000 = /* tuple */[
                    "znear",
                    perspective[/* near */0]
                  ];
                  var perspectiveList_001 = /* :: */[
                    /* tuple */[
                      "yfov",
                      perspective[/* fovy */2]
                    ],
                    /* [] */0
                  ];
                  var perspectiveList = /* :: */[
                    perspectiveList_000,
                    perspectiveList_001
                  ];
                  var perspectiveList$1 = far ? /* :: */[
                      /* tuple */[
                        "zfar",
                        far[0]
                      ],
                      perspectiveList
                    ] : perspectiveList;
                  var perspectiveList$2 = aspect ? /* :: */[
                      /* tuple */[
                        "aspectRatio",
                        aspect[0]
                      ],
                      perspectiveList$1
                    ] : perspectiveList$1;
                  return Json_encode$Wonderjs.object_(/* :: */[
                              /* tuple */[
                                "type",
                                param[/* type_ */0]
                              ],
                              /* :: */[
                                /* tuple */[
                                  "perspective",
                                  Json_encode$Wonderjs.object_(perspectiveList$2)
                                ],
                                /* [] */0
                              ]
                            ]);
                }))
        ];
}

function _encodeScenes(extensionsUsedArr, lightDataArr, _) {
  var sceneList_000 = /* tuple */[
    "nodes",
    /* array */[0]
  ];
  var sceneList = /* :: */[
    sceneList_000,
    /* [] */0
  ];
  var match = extensionsUsedArr.includes("KHR_lights");
  return /* tuple */[
          "scenes",
          /* array */[Json_encode$Wonderjs.object_(match ? /* :: */[
                    /* tuple */[
                      "extensions",
                      Json_encode$Wonderjs.object_(/* :: */[
                            /* tuple */[
                              "KHR_lights",
                              Json_encode$Wonderjs.object_(/* :: */[
                                    /* tuple */[
                                      "light",
                                      BuildLightDataSystem$Wonderjs.getAmbientLightIndex(lightDataArr)
                                    ],
                                    /* [] */0
                                  ])
                            ],
                            /* [] */0
                          ])
                    ],
                    sceneList
                  ] : sceneList)]
        ];
}

function _encodeMaterials(materialDataArr) {
  return /* tuple */[
          "materials",
          materialDataArr.map((function (param) {
                  var name = param[/* name */2];
                  var baseColorTexture = param[/* baseColorTexture */1];
                  var baseColorFactor = param[/* baseColorFactor */0];
                  var list = name ? /* :: */[
                      /* tuple */[
                        "name",
                        name[0]
                      ],
                      /* [] */0
                    ] : /* [] */0;
                  var pbrMetallicRoughnessList = baseColorFactor ? /* :: */[
                      /* tuple */[
                        "baseColorFactor",
                        baseColorFactor[0]
                      ],
                      /* [] */0
                    ] : /* [] */0;
                  var pbrMetallicRoughnessList$1 = baseColorTexture ? /* :: */[
                      /* tuple */[
                        "baseColorTexture",
                        Json_encode$Wonderjs.object_(/* :: */[
                              /* tuple */[
                                "index",
                                baseColorTexture[0]
                              ],
                              /* [] */0
                            ])
                      ],
                      pbrMetallicRoughnessList
                    ] : pbrMetallicRoughnessList;
                  var list_000 = /* tuple */[
                    "pbrMetallicRoughness",
                    Json_encode$Wonderjs.object_(pbrMetallicRoughnessList$1)
                  ];
                  var list$1 = /* :: */[
                    list_000,
                    list
                  ];
                  return Json_encode$Wonderjs.object_(List.rev(list$1));
                }))
        ];
}

function _encodeTextures(textureDataArr) {
  return /* tuple */[
          "textures",
          textureDataArr.map((function (param) {
                  var name = param[/* name */0];
                  var list = name ? /* :: */[
                      /* tuple */[
                        "name",
                        name[0]
                      ],
                      /* [] */0
                    ] : /* [] */0;
                  return Json_encode$Wonderjs.object_(/* :: */[
                              /* tuple */[
                                "sampler",
                                param[/* sampler */1]
                              ],
                              /* :: */[
                                /* tuple */[
                                  "source",
                                  param[/* source */2]
                                ],
                                list
                              ]
                            ]);
                }))
        ];
}

function _encodeSamplers(samplerDataArr) {
  return /* tuple */[
          "samplers",
          samplerDataArr.map((function (param) {
                  return Json_encode$Wonderjs.object_(/* :: */[
                              /* tuple */[
                                "wrapS",
                                param[/* wrapS */0]
                              ],
                              /* :: */[
                                /* tuple */[
                                  "wrapT",
                                  param[/* wrapT */1]
                                ],
                                /* :: */[
                                  /* tuple */[
                                    "magFilter",
                                    param[/* magFilter */2]
                                  ],
                                  /* :: */[
                                    /* tuple */[
                                      "minFilter",
                                      param[/* minFilter */3]
                                    ],
                                    /* [] */0
                                  ]
                                ]
                              ]
                            ]);
                }))
        ];
}

function _encodeImages(imageBase64Arr) {
  return /* tuple */[
          "images",
          imageBase64Arr.map((function (base64Str) {
                  return Json_encode$Wonderjs.object_(/* :: */[
                              /* tuple */[
                                "uri",
                                base64Str
                              ],
                              /* [] */0
                            ]);
                }))
        ];
}

function _encodeMeshes(meshDataArr) {
  return /* tuple */[
          "meshes",
          meshDataArr.map((function (param) {
                  var primitives = param[/* primitives */0];
                  var attributes = primitives[/* attributes */0];
                  var texCoord_0 = attributes[/* texCoord_0 */2];
                  var normal = attributes[/* normal */1];
                  var material = primitives[/* material */2];
                  var name = param[/* name */1];
                  var attributesList_000 = /* tuple */[
                    "POSITION",
                    attributes[/* position */0]
                  ];
                  var attributesList = /* :: */[
                    attributesList_000,
                    /* [] */0
                  ];
                  var attributesList$1 = normal ? /* :: */[
                      /* tuple */[
                        "NORMAL",
                        normal[0]
                      ],
                      attributesList
                    ] : attributesList;
                  var attributesList$2 = texCoord_0 ? /* :: */[
                      /* tuple */[
                        "TEXCOORD_0",
                        texCoord_0[0]
                      ],
                      attributesList$1
                    ] : attributesList$1;
                  var primitivesList_000 = /* tuple */[
                    "attributes",
                    Json_encode$Wonderjs.object_(List.rev(attributesList$2))
                  ];
                  var primitivesList_001 = /* :: */[
                    /* tuple */[
                      "indices",
                      primitives[/* indices */1]
                    ],
                    /* [] */0
                  ];
                  var primitivesList = /* :: */[
                    primitivesList_000,
                    primitivesList_001
                  ];
                  var primitivesList$1 = material ? List.append(/* :: */[
                          /* tuple */[
                            "material",
                            material[0]
                          ],
                          /* [] */0
                        ], primitivesList) : primitivesList;
                  var primitives_001 = /* array */[Json_encode$Wonderjs.object_(primitivesList$1)];
                  var primitives$1 = /* tuple */[
                    "primitives",
                    primitives_001
                  ];
                  if (name) {
                    return Json_encode$Wonderjs.object_(/* :: */[
                                primitives$1,
                                /* :: */[
                                  /* tuple */[
                                    "name",
                                    name[0]
                                  ],
                                  /* [] */0
                                ]
                              ]);
                  } else {
                    return Json_encode$Wonderjs.object_(/* :: */[
                                primitives$1,
                                /* [] */0
                              ]);
                  }
                }))
        ];
}

function _encodeExtensionsUsed(extensionsUsedArr) {
  return /* tuple */[
          "extensionsUsedArr",
          extensionsUsedArr
        ];
}

function _encodeExtensions(lightDataArr) {
  return /* tuple */[
          "extensions",
          Json_encode$Wonderjs.object_(/* :: */[
                /* tuple */[
                  "KHR_lights",
                  Json_encode$Wonderjs.object_(/* :: */[
                        /* tuple */[
                          "lights",
                          lightDataArr.map((function (param) {
                                  var range = param[/* range */6];
                                  var quadraticAttenuation = param[/* quadraticAttenuation */5];
                                  var linearAttenuation = param[/* linearAttenuation */4];
                                  var constantAttenuation = param[/* constantAttenuation */3];
                                  var intensity = param[/* intensity */2];
                                  var color = param[/* color */1];
                                  var khrLightsExtensionList_000 = /* tuple */[
                                    "type",
                                    param[/* type_ */0]
                                  ];
                                  var khrLightsExtensionList = /* :: */[
                                    khrLightsExtensionList_000,
                                    /* [] */0
                                  ];
                                  var khrLightsExtensionList$1 = color ? /* :: */[
                                      /* tuple */[
                                        "color",
                                        color[0]
                                      ],
                                      khrLightsExtensionList
                                    ] : khrLightsExtensionList;
                                  var khrLightsExtensionList$2 = intensity ? /* :: */[
                                      /* tuple */[
                                        "intensity",
                                        intensity[0]
                                      ],
                                      khrLightsExtensionList$1
                                    ] : khrLightsExtensionList$1;
                                  var khrLightsExtensionList$3 = constantAttenuation ? /* :: */[
                                      /* tuple */[
                                        "constantAttenuation",
                                        constantAttenuation[0]
                                      ],
                                      khrLightsExtensionList$2
                                    ] : khrLightsExtensionList$2;
                                  var khrLightsExtensionList$4 = linearAttenuation ? /* :: */[
                                      /* tuple */[
                                        "linearAttenuation",
                                        linearAttenuation[0]
                                      ],
                                      khrLightsExtensionList$3
                                    ] : khrLightsExtensionList$3;
                                  var khrLightsExtensionList$5 = quadraticAttenuation ? /* :: */[
                                      /* tuple */[
                                        "quadraticAttenuation",
                                        quadraticAttenuation[0]
                                      ],
                                      khrLightsExtensionList$4
                                    ] : khrLightsExtensionList$4;
                                  return Json_encode$Wonderjs.object_(range ? /* :: */[
                                                /* tuple */[
                                                  "range",
                                                  range[0]
                                                ],
                                                khrLightsExtensionList$5
                                              ] : khrLightsExtensionList$5);
                                }))
                        ],
                        /* [] */0
                      ])
                ],
                /* [] */0
              ])
        ];
}

function _hasExtensions(lightDataArr) {
  return lightDataArr.length > 0;
}

function encode(param, param$1, state) {
  var extensionsUsedArr = param$1[10];
  var lightDataArr = param$1[9];
  var list_000 = /* tuple */[
    "asset",
    Json_encode$Wonderjs.object_(/* :: */[
          /* tuple */[
            "version",
            "2.0"
          ],
          /* :: */[
            /* tuple */[
              "generator",
              GLTFUtils$Wonderjs.getGenerator(/* () */0)
            ],
            /* [] */0
          ]
        ])
  ];
  var list_001 = /* :: */[
    /* tuple */[
      "scene",
      0
    ],
    /* :: */[
      _encodeScenes(extensionsUsedArr, lightDataArr, state),
      /* :: */[
        _encodeCameras(param$1[8]),
        /* :: */[
          _encodeNodes(param$1[0], state),
          /* :: */[
            _encodeMaterials(param$1[4]),
            /* :: */[
              _encodeTextures(param$1[5]),
              /* :: */[
                _encodeSamplers(param$1[6]),
                /* :: */[
                  _encodeImages(param$1[7]),
                  /* :: */[
                    /* tuple */[
                      "buffers",
                      /* array */[Json_encode$Wonderjs.object_(/* :: */[
                              /* tuple */[
                                "byteLength",
                                param[1]
                              ],
                              /* :: */[
                                /* tuple */[
                                  "uri",
                                  Curry._1(Base64ArrayBufferCommon$Wonderjs.encode, param[0])
                                ],
                                /* [] */0
                              ]
                            ])]
                    ],
                    /* :: */[
                      /* tuple */[
                        "bufferViews",
                        param$1[1].map((function (param) {
                                return Json_encode$Wonderjs.object_(/* :: */[
                                            /* tuple */[
                                              "buffer",
                                              param[/* buffer */0]
                                            ],
                                            /* :: */[
                                              /* tuple */[
                                                "byteOffset",
                                                param[/* byteOffset */1]
                                              ],
                                              /* :: */[
                                                /* tuple */[
                                                  "byteLength",
                                                  param[/* byteLength */2]
                                                ],
                                                /* [] */0
                                              ]
                                            ]
                                          ]);
                              }))
                      ],
                      /* :: */[
                        /* tuple */[
                          "accessors",
                          param$1[2].map((function (param) {
                                  return Json_encode$Wonderjs.object_(/* :: */[
                                              /* tuple */[
                                                "bufferView",
                                                param[/* bufferView */0]
                                              ],
                                              /* :: */[
                                                /* tuple */[
                                                  "componentType",
                                                  param[/* componentType */1]
                                                ],
                                                /* :: */[
                                                  /* tuple */[
                                                    "count",
                                                    param[/* count */2]
                                                  ],
                                                  /* :: */[
                                                    /* tuple */[
                                                      "type",
                                                      param[/* type_ */3]
                                                    ],
                                                    /* [] */0
                                                  ]
                                                ]
                                              ]
                                            ]);
                                }))
                        ],
                        /* :: */[
                          _encodeMeshes(param$1[3]),
                          /* [] */0
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ]
  ];
  var list = /* :: */[
    list_000,
    list_001
  ];
  var match = extensionsUsedArr.length > 0;
  var list$1 = match ? /* :: */[
      /* tuple */[
        "extensionsUsedArr",
        extensionsUsedArr
      ],
      list
    ] : list;
  var match$1 = lightDataArr.length > 0;
  return Json_encode$Wonderjs.object_(match$1 ? /* :: */[
                _encodeExtensions(lightDataArr),
                list$1
              ] : list$1);
}

export {
  _encodeNodes ,
  _encodeCameras ,
  _encodeScenes ,
  _encodeMaterials ,
  _encodeTextures ,
  _encodeSamplers ,
  _encodeImages ,
  _encodeMeshes ,
  _encodeExtensionsUsed ,
  _encodeExtensions ,
  _hasExtensions ,
  encode ,
  
}
/* Json_encode-Wonderjs Not a pure module */
