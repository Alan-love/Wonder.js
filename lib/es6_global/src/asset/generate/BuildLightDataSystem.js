// Generated by BUCKLESCRIPT VERSION 3.1.4, PLEASE EDIT WITH CARE

import * as SceneAPI$Wonderjs from "../../api/SceneAPI.js";
import * as Contract$WonderLog from "../../../../../node_modules/wonder-log/lib/es6_global/src/Contract.js";
import * as ArrayService$Wonderjs from "../../service/atom/ArrayService.js";
import * as StateDataMain$Wonderjs from "../../service/state/main/data/StateDataMain.js";
import * as Caml_builtin_exceptions from "../../../../../node_modules/bs-platform/lib/es6/caml_builtin_exceptions.js";
import * as GenerateCommon$Wonderjs from "./GenerateCommon.js";
import * as SparseMapService$Wonderjs from "../../service/atom/SparseMapService.js";
import * as IsDebugMainService$Wonderjs from "../../service/state/main/state/IsDebugMainService.js";
import * as OperatePointLightService$Wonderjs from "../../service/record/main/light/point/OperatePointLightService.js";
import * as OperateDirectionLightService$Wonderjs from "../../service/record/main/light/direction/OperateDirectionLightService.js";

function getAmbientLightIndex(lightDataArr) {
  return lightDataArr.length - 1 | 0;
}

function build(lightDataMap, state) {
  var directionLightRecord = state[/* directionLightRecord */20];
  var pointLightRecord = state[/* pointLightRecord */21];
  Contract$WonderLog.requireCheck((function () {
          return GenerateCommon$Wonderjs.checkShouldHasNoSlot(lightDataMap);
        }), IsDebugMainService$Wonderjs.getIsDebug(StateDataMain$Wonderjs.stateData));
  return ArrayService$Wonderjs.push(/* record */[
              /* type_ */"ambient",
              /* color : Some */[SceneAPI$Wonderjs.getAmbientLightColor(state)],
              /* intensity : None */0,
              /* constantAttenuation : None */0,
              /* linearAttenuation : None */0,
              /* quadraticAttenuation : None */0,
              /* range : None */0
            ], SparseMapService$Wonderjs.reduceValid((function (lightDataArr, param) {
                    var light = param[1];
                    var type_ = param[0];
                    switch (type_) {
                      case "directional" : 
                          return ArrayService$Wonderjs.push(/* record */[
                                      /* type_ */type_,
                                      /* color : Some */[OperateDirectionLightService$Wonderjs.getColor(light, directionLightRecord)],
                                      /* intensity : Some */[OperateDirectionLightService$Wonderjs.getIntensity(light, directionLightRecord)],
                                      /* constantAttenuation : None */0,
                                      /* linearAttenuation : None */0,
                                      /* quadraticAttenuation : None */0,
                                      /* range : None */0
                                    ], lightDataArr);
                      case "point" : 
                          return ArrayService$Wonderjs.push(/* record */[
                                      /* type_ */type_,
                                      /* color : Some */[OperatePointLightService$Wonderjs.getColor(light, pointLightRecord)],
                                      /* intensity : Some */[OperatePointLightService$Wonderjs.getIntensity(light, pointLightRecord)],
                                      /* constantAttenuation : Some */[OperatePointLightService$Wonderjs.getConstant(light, pointLightRecord)],
                                      /* linearAttenuation : Some */[OperatePointLightService$Wonderjs.getLinear(light, pointLightRecord)],
                                      /* quadraticAttenuation : Some */[OperatePointLightService$Wonderjs.getQuadratic(light, pointLightRecord)],
                                      /* range : Some */[OperatePointLightService$Wonderjs.getRange(light, pointLightRecord)]
                                    ], lightDataArr);
                      default:
                        throw [
                              Caml_builtin_exceptions.match_failure,
                              [
                                "BuildLightDataSystem.re",
                                20,
                                9
                              ]
                            ];
                    }
                  }), /* array */[], lightDataMap));
}

export {
  getAmbientLightIndex ,
  build ,
  
}
/* SceneAPI-Wonderjs Not a pure module */
