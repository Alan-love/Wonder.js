// Generated by BUCKLESCRIPT VERSION 3.1.4, PLEASE EDIT WITH CARE

import * as Caml_int32 from "../../../../../node_modules/bs-platform/lib/es6/caml_int32.js";
import * as Contract$WonderLog from "../../../../../node_modules/wonder-log/lib/es6_global/src/Contract.js";
import * as ArrayService$Wonderjs from "../../service/atom/ArrayService.js";
import * as OptionService$Wonderjs from "../../service/atom/OptionService.js";
import * as StateDataMain$Wonderjs from "../../service/state/main/data/StateDataMain.js";
import * as GenerateCommon$Wonderjs from "./GenerateCommon.js";
import * as SparseMapService$Wonderjs from "../../service/atom/SparseMapService.js";
import * as IsDebugMainService$Wonderjs from "../../service/state/main/state/IsDebugMainService.js";

function _addBufferViewData(param, param$1) {
  var accessorDataArr = param$1[2];
  var bufferViewDataArr = param$1[1];
  var bufferViewOffset = param$1[0];
  var pointType = param[3];
  var pointsLength = param[0];
  if (pointsLength !== 0) {
    var bufferViewByteLength = Caml_int32.imul(pointsLength, param[2]);
    return /* tuple */[
            /* Some */[accessorDataArr.length],
            ArrayService$Wonderjs.push(/* record */[
                  /* bufferView */bufferViewDataArr.length,
                  /* componentType */pointType >= 3 ? 5123 : 5126,
                  /* count */param[1],
                  /* type_ */pointType !== 2 ? (
                      pointType >= 3 ? "SCALAR" : "VEC3"
                    ) : "VEC2"
                ], accessorDataArr),
            ArrayService$Wonderjs.push(/* record */[
                  /* buffer */0,
                  /* byteOffset */bufferViewOffset,
                  /* byteLength */bufferViewByteLength
                ], bufferViewDataArr),
            bufferViewOffset + bufferViewByteLength | 0
          ];
  } else {
    return /* tuple */[
            /* None */0,
            accessorDataArr,
            bufferViewDataArr,
            bufferViewOffset
          ];
  }
}

function _addAllPointData(param, param$1, param$2, _) {
  var match = param$2[1];
  var indicesLength = param$1[3];
  var texCoordsLength = param$1[2];
  var normalsLength = param$1[1];
  var verticesLength = param$1[0];
  var verticesCount = Caml_int32.div(verticesLength, param[0]);
  var normalsCount = Caml_int32.div(normalsLength, param[1]);
  var texCoordsCount = Caml_int32.div(texCoordsLength, param[2]);
  var indicesCount = Caml_int32.div(indicesLength, param[3]);
  var match$1 = _addBufferViewData(/* tuple */[
        verticesLength,
        verticesCount,
        Float32Array.BYTES_PER_ELEMENT,
        /* VERTEX */0
      ], /* tuple */[
        param$2[0],
        match[0],
        match[1]
      ]);
  var match$2 = _addBufferViewData(/* tuple */[
        normalsLength,
        normalsCount,
        Float32Array.BYTES_PER_ELEMENT,
        /* NORMAL */1
      ], /* tuple */[
        match$1[3],
        match$1[2],
        match$1[1]
      ]);
  var match$3 = _addBufferViewData(/* tuple */[
        texCoordsLength,
        texCoordsCount,
        Float32Array.BYTES_PER_ELEMENT,
        /* TEXCOORD */2
      ], /* tuple */[
        match$2[3],
        match$2[2],
        match$2[1]
      ]);
  var match$4 = _addBufferViewData(/* tuple */[
        indicesLength,
        indicesCount,
        Uint16Array.BYTES_PER_ELEMENT,
        /* INDEX */3
      ], /* tuple */[
        match$3[3],
        match$3[2],
        match$3[1]
      ]);
  return /* tuple */[
          /* tuple */[
            match$1[0],
            match$2[0],
            match$3[0],
            match$4[0]
          ],
          match$4[1],
          match$4[2],
          match$4[3]
        ];
}

function build(meshPointDataMap) {
  Contract$WonderLog.requireCheck((function () {
          return GenerateCommon$Wonderjs.checkShouldHasNoSlot(meshPointDataMap);
        }), IsDebugMainService$Wonderjs.getIsDebug(StateDataMain$Wonderjs.stateData));
  var match = SparseMapService$Wonderjs.reduceiValid((function (param, param$1, _) {
          var indices = param$1[3];
          var texCoords = param$1[2];
          var normals = param$1[1];
          var vertices = param$1[0];
          var match = param[1];
          var match$1 = param[0];
          var verticesLength = vertices.length;
          var normalsLength = normals.length;
          var texCoordsLength = texCoords ? texCoords[0].length : 0;
          var indicesLength = indices.length;
          var match$2 = _addAllPointData(/* tuple */[
                3,
                3,
                2,
                1
              ], /* tuple */[
                verticesLength,
                normalsLength,
                texCoordsLength,
                indicesLength
              ], /* tuple */[
                match$1[1],
                /* tuple */[
                  match[0],
                  match[1]
                ]
              ], /* tuple */[
                vertices,
                normals,
                texCoords,
                indices
              ]);
          var match$3 = match$2[0];
          return /* tuple */[
                  /* tuple */[
                    match$1[0] + (Caml_int32.imul(Float32Array.BYTES_PER_ELEMENT, (verticesLength + normalsLength | 0) + texCoordsLength | 0) + Caml_int32.imul(Uint16Array.BYTES_PER_ELEMENT, indicesLength) | 0) | 0,
                    match$2[3]
                  ],
                  /* tuple */[
                    match$2[2],
                    match$2[1],
                    ArrayService$Wonderjs.push(/* record */[
                          /* primitives : record */[
                            /* attributes : record */[
                              /* position */OptionService$Wonderjs.unsafeGet(match$3[0]),
                              /* normal */match$3[1],
                              /* texCoord_0 */texCoords ? match$3[2] : /* None */0
                            ],
                            /* indices */OptionService$Wonderjs.unsafeGet(match$3[3]),
                            /* material : None */0
                          ],
                          /* name : None */0
                        ], match[2])
                  ]
                ];
        }), /* tuple */[
        /* tuple */[
          0,
          0
        ],
        /* tuple */[
          /* array */[],
          /* array */[],
          /* array */[]
        ]
      ], meshPointDataMap);
  var match$1 = match[1];
  return /* tuple */[
          match[0][0],
          /* tuple */[
            match$1[0],
            match$1[1],
            match$1[2]
          ]
        ];
}

export {
  _addBufferViewData ,
  _addAllPointData ,
  build ,
  
}
/* Contract-WonderLog Not a pure module */
