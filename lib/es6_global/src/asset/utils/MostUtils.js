// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as Most                         from "most";
import * as Curry                        from "../../../../../node_modules/bs-platform/lib/es6/curry.js";
import * as Caml_array                   from "../../../../../node_modules/bs-platform/lib/es6/caml_array.js";
import * as ArrayService$WonderCommonlib from "../../../../../node_modules/wonder-commonlib/lib/es6_global/src/ArrayService.js";

var _isFromEventStream = (
  function(stream) {
    var source = stream.source;
    return !!source.event && !!source.source;
  }
  );

function concatArray(streamArr) {
  return ArrayService$WonderCommonlib.reduceOneParam((function (stream1, stream2) {
                +(Curry._1(_isFromEventStream, stream1) === true);
                return stream1.concat(stream2);
              }), Caml_array.caml_array_get(streamArr, 0), streamArr.slice(1));
}

function concatStreamFuncArray(stateData, streamFuncArr) {
  return ArrayService$WonderCommonlib.reduceOneParam((function (stream1, streamFunc2) {
                return Most.concatMap((function (e) {
                              return Curry._2(streamFunc2, e, stateData);
                            }), stream1);
              }), Curry._2(Caml_array.caml_array_get(streamFuncArr, 0), /* None */0, stateData), streamFuncArr.slice(1));
}

function callFunc(func) {
  return Most.map((function (func) {
                return Curry._1(func, /* () */0);
              }), Most.just(func));
}

export {
  _isFromEventStream    ,
  concatArray           ,
  concatStreamFuncArray ,
  callFunc              ,
  
}
/* _isFromEventStream Not a pure module */
