// Generated by BUCKLESCRIPT VERSION 3.1.4, PLEASE EDIT WITH CARE

import * as Most from "most";
import * as Curry from "../../../../../node_modules/bs-platform/lib/es6/curry.js";
import * as Caml_array from "../../../../../node_modules/bs-platform/lib/es6/caml_array.js";
import * as Log$WonderLog from "../../../../../node_modules/wonder-log/lib/es6_global/src/Log.js";
import * as PathService$Wonderjs from "../../service/primitive/PathService.js";
import * as ArrayService$Wonderjs from "../../service/atom/ArrayService.js";
import * as ConvertCommon$Wonderjs from "../converter/ConvertCommon.js";
import * as LoadImageSystem$Wonderjs from "../loader/LoadImageSystem.js";
import * as BatchCreateSystem$Wonderjs from "./BatchCreateSystem.js";
import * as BatchOperateSystem$Wonderjs from "./BatchOperateSystem.js";
import * as ArrayService$WonderCommonlib from "../../../../../node_modules/wonder-commonlib/lib/es6_global/src/ArrayService.js";
import * as BuildSceneGameObjectSystem$Wonderjs from "./BuildSceneGameObjectSystem.js";

function _getSourcePath(filePath, sourceRelativePath) {
  return Curry._2(PathService$Wonderjs.resolve, filePath, sourceRelativePath);
}

function _buildImageArray(images) {
  var imageArr = /* array */[];
  return Most.drain(Most.mergeArray(ArrayService$WonderCommonlib.reduceOneParam((function (streamArr, param) {
                          var uri = param[/* uri */0];
                          var match = ConvertCommon$Wonderjs.isBase64(uri);
                          if (match) {
                            return ArrayService$Wonderjs.push(Most.tap((function (image) {
                                              ArrayService$Wonderjs.push(image, imageArr);
                                              return /* () */0;
                                            }), LoadImageSystem$Wonderjs.loadBase64Image(uri)), streamArr);
                          } else {
                            return Log$WonderLog.fatal(Log$WonderLog.buildFatalMessage("_buildImageArray", "only support base64 uri", "", "", ""));
                          }
                        }), /* array */[], images))).then((function () {
                return Promise.resolve(imageArr);
              }));
}

function _decodeArrayBuffer(base64Str) {
  var arr = base64Str.split(",");
  var match = arr.length > 1;
  var base64 = match ? Caml_array.caml_array_get(arr, 1) : Caml_array.caml_array_get(arr, 0);
  var decodedString = atob(base64);
  var bufferLength = decodedString.length;
  var arrayBuffer = new ArrayBuffer(bufferLength);
  var typeArr = new Uint8Array(arrayBuffer);
  for(var i = 0 ,i_finish = bufferLength - 1 | 0; i <= i_finish; ++i){
    typeArr[i] = decodedString.charCodeAt(i);
  }
  return typeArr.buffer;
}

function _buildBufferArray(buffers) {
  return ArrayService$WonderCommonlib.reduceOneParam((function (arrayBufferArr, param) {
                var uri = param[/* uri */0];
                var match = ConvertCommon$Wonderjs.isBase64(uri);
                if (match) {
                  return ArrayService$Wonderjs.push(_decodeArrayBuffer(uri), arrayBufferArr);
                } else {
                  return Log$WonderLog.fatal(Log$WonderLog.buildFatalMessage("_buildBufferArray", "only support base64 uri", "", "", ""));
                }
              }), /* array */[], buffers);
}

function assemble(wdRecord, state) {
  var buffers = wdRecord[/* buffers */7];
  return Most.fromPromise(_buildImageArray(wdRecord[/* images */4]).then((function (imageArr) {
                    return Promise.resolve(BuildSceneGameObjectSystem$Wonderjs.build(wdRecord, BatchOperateSystem$Wonderjs.batchOperate(wdRecord, imageArr, _buildBufferArray(buffers), BatchCreateSystem$Wonderjs.batchCreate(wdRecord, state))));
                  })));
}

export {
  _getSourcePath ,
  _buildImageArray ,
  _decodeArrayBuffer ,
  _buildBufferArray ,
  assemble ,
  
}
/* most Not a pure module */
