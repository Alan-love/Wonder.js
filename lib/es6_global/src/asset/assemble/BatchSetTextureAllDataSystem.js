// Generated by BUCKLESCRIPT VERSION 3.1.4, PLEASE EDIT WITH CARE

import * as Caml_array from "../../../../../node_modules/bs-platform/lib/es6/caml_array.js";
import * as ArrayService$WonderCommonlib from "../../../../../node_modules/wonder-commonlib/lib/es6_global/src/ArrayService.js";
import * as BufferSettingService$Wonderjs from "../../service/record/main/setting/BufferSettingService.js";
import * as RecordLightMaterialMainService$Wonderjs from "../../service/state/main/material/light/RecordLightMaterialMainService.js";
import * as TextureCountMapMaterialService$Wonderjs from "../../service/record/main/material/TextureCountMapMaterialService.js";
import * as RecordBasicSourceTextureMainService$Wonderjs from "../../service/state/main/texture/basic_source/RecordBasicSourceTextureMainService.js";
import * as OperateBasicSourceTextureMainService$Wonderjs from "../../service/state/main/texture/basic_source/OperateBasicSourceTextureMainService.js";
import * as OperateTypeArrayLightMaterialService$Wonderjs from "../../service/record/all/material/light/OperateTypeArrayLightMaterialService.js";
import * as OperateTypeArrayBasicSourceTextureService$Wonderjs from "../../service/record/all/texture/basic_source/OperateTypeArrayBasicSourceTextureService.js";

function _batchSetNewMap(param, param$1, param$2) {
  var textureCountPerMaterial = param$2[0];
  var setTextureIndexFunc = param$1[1];
  var setMapUnitFunc = param$1[0];
  var mapCount = param[2];
  var textureArr = param[1];
  var newTextureCount = mapCount + 1 | 0;
  return ArrayService$WonderCommonlib.reduceOneParami((function (param, material, index) {
                var texture = textureArr[index];
                return /* tuple */[
                        setTextureIndexFunc(/* tuple */[
                              material,
                              mapCount,
                              textureCountPerMaterial
                            ], texture, param[0]),
                        setMapUnitFunc(material, mapCount, param[1]),
                        TextureCountMapMaterialService$Wonderjs.setCount(material, newTextureCount, param[2])
                      ];
              }), /* tuple */[
              param$2[1],
              param$2[2],
              param$2[3]
            ], param[0]);
}

function _batchSetNewDiffueMaps(diffuseMapLightMaterials, lightMaterialDiffuseMaps, state) {
  var lightMaterialRecord = RecordLightMaterialMainService$Wonderjs.getRecord(state);
  var match = _batchSetNewMap(/* tuple */[
        diffuseMapLightMaterials,
        lightMaterialDiffuseMaps,
        0
      ], /* tuple */[
        OperateTypeArrayLightMaterialService$Wonderjs.setDiffuseMapUnit,
        OperateTypeArrayLightMaterialService$Wonderjs.setTextureIndex
      ], /* tuple */[
        BufferSettingService$Wonderjs.getTextureCountPerMaterial(state[/* settingRecord */0]),
        lightMaterialRecord[/* textureIndices */6],
        lightMaterialRecord[/* diffuseMapUnits */7],
        lightMaterialRecord[/* textureCountMap */9]
      ]);
  var newrecord = Caml_array.caml_array_dup(state);
  newrecord[/* lightMaterialRecord */16] = /* Some */[/* record */[
      /* index */lightMaterialRecord[/* index */0],
      /* buffer */lightMaterialRecord[/* buffer */1],
      /* shaderIndices */lightMaterialRecord[/* shaderIndices */2],
      /* diffuseColors */lightMaterialRecord[/* diffuseColors */3],
      /* specularColors */lightMaterialRecord[/* specularColors */4],
      /* shininess */lightMaterialRecord[/* shininess */5],
      /* textureIndices */match[0],
      /* diffuseMapUnits */match[1],
      /* specularMapUnits */lightMaterialRecord[/* specularMapUnits */8],
      /* textureCountMap */match[2],
      /* defaultDiffuseColor */lightMaterialRecord[/* defaultDiffuseColor */10],
      /* defaultSpecularColor */lightMaterialRecord[/* defaultSpecularColor */11],
      /* defaultShininess */lightMaterialRecord[/* defaultShininess */12],
      /* gameObjectMap */lightMaterialRecord[/* gameObjectMap */13],
      /* groupCountMap */lightMaterialRecord[/* groupCountMap */14],
      /* disposedIndexArray */lightMaterialRecord[/* disposedIndexArray */15],
      /* nameMap */lightMaterialRecord[/* nameMap */16],
      /* materialArrayForWorkerInit */lightMaterialRecord[/* materialArrayForWorkerInit */17]
    ]];
  return newrecord;
}

function _batchSetTextureData(samplerBasicSourceTextures, basicSourceTextureSamplers, state) {
  var basicSourceTextureRecord = RecordBasicSourceTextureMainService$Wonderjs.getRecord(state);
  var match = ArrayService$WonderCommonlib.reduceOneParami((function (param, basicSourceTexture, index) {
          var match = basicSourceTextureSamplers[index];
          return /* tuple */[
                  OperateTypeArrayBasicSourceTextureService$Wonderjs.setWrapS(basicSourceTexture, match[/* wrapS */2], param[0]),
                  OperateTypeArrayBasicSourceTextureService$Wonderjs.setWrapT(basicSourceTexture, match[/* wrapT */3], param[1]),
                  OperateTypeArrayBasicSourceTextureService$Wonderjs.setMagFilter(basicSourceTexture, match[/* magFilter */0], param[2]),
                  OperateTypeArrayBasicSourceTextureService$Wonderjs.setMinFilter(basicSourceTexture, match[/* minFilter */1], param[3])
                ];
        }), /* tuple */[
        basicSourceTextureRecord[/* wrapSs */1],
        basicSourceTextureRecord[/* wrapTs */2],
        basicSourceTextureRecord[/* magFilters */3],
        basicSourceTextureRecord[/* minFilters */4]
      ], samplerBasicSourceTextures);
  var newrecord = Caml_array.caml_array_dup(state);
  newrecord[/* basicSourceTextureRecord */18] = /* Some */[/* record */[
      /* index */basicSourceTextureRecord[/* index */0],
      /* wrapSs */match[0],
      /* wrapTs */match[1],
      /* magFilters */match[2],
      /* minFilters */match[3],
      /* formats */basicSourceTextureRecord[/* formats */5],
      /* types */basicSourceTextureRecord[/* types */6],
      /* isNeedUpdates */basicSourceTextureRecord[/* isNeedUpdates */7],
      /* flipYs */basicSourceTextureRecord[/* flipYs */8],
      /* sourceMap */basicSourceTextureRecord[/* sourceMap */9],
      /* glTextureMap */basicSourceTextureRecord[/* glTextureMap */10],
      /* bindTextureUnitCacheMap */basicSourceTextureRecord[/* bindTextureUnitCacheMap */11],
      /* disposedIndexArray */basicSourceTextureRecord[/* disposedIndexArray */12],
      /* needAddedSourceArray */basicSourceTextureRecord[/* needAddedSourceArray */13],
      /* needInitedTextureIndexArray */basicSourceTextureRecord[/* needInitedTextureIndexArray */14],
      /* nameMap */basicSourceTextureRecord[/* nameMap */15]
    ]];
  return newrecord;
}

function _batchSetTextureSources(imageBasicSourceTextures, basicSourceTextureImages, state) {
  return ArrayService$WonderCommonlib.reduceOneParami((function (state, basicSourceTexture, index) {
                var image = basicSourceTextureImages[index];
                return OperateBasicSourceTextureMainService$Wonderjs.setSource(basicSourceTexture, image, state);
              }), state, imageBasicSourceTextures);
}

function batchSet(param, param$1, param$2, state) {
  return _batchSetTextureSources(param$2[0], param$2[1], _batchSetTextureData(param$1[0], param$1[1], _batchSetNewDiffueMaps(param[0], param[1], state)));
}

export {
  _batchSetNewMap ,
  _batchSetNewDiffueMaps ,
  _batchSetTextureData ,
  _batchSetTextureSources ,
  batchSet ,
  
}
/* ArrayService-WonderCommonlib Not a pure module */
