// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as Caml_array                  from "../../../../node_modules/bs-platform/lib/es6/caml_array.js";
import * as Contract$Wonderjs           from "../definition/Contract.js";
import * as ArraySystem$WonderCommonlib from "../../../../node_modules/wonder-commonlib/lib/es6_global/src/ArraySystem.js";

function deleteBySwap(index, lastIndex, arr) {
  Contract$Wonderjs.requireCheck((function () {
          return Contract$Wonderjs.test("lastIndex should == arr.length", (function () {
                        return Contract$Wonderjs.assertEqual(/* Int */0, arr.length - 1 | 0, lastIndex);
                      }));
        }));
  arr[index] = arr[lastIndex];
  arr.pop();
  return /* () */0;
}

function range(a, b) {
  var result = ArraySystem$WonderCommonlib.createEmpty(/* () */0);
  for(var i = a; i <= b; ++i){
    result.push(i);
  }
  return result;
}

function reduceState(func, state, arr) {
  var mutableState = state;
  for(var i = 0 ,i_finish = arr.length - 1 | 0; i <= i_finish; ++i){
    mutableState = func(mutableState, arr[i]);
  }
  return mutableState;
}

function reduceStatei(func, state, arr) {
  var mutableState = state;
  for(var i = 0 ,i_finish = arr.length - 1 | 0; i <= i_finish; ++i){
    mutableState = func(mutableState, arr[i], i);
  }
  return mutableState;
}

function join(arr) {
  var output = "";
  for(var i = 0 ,i_finish = arr.length; i <= i_finish; ++i){
    output = output + Caml_array.caml_array_get(arr, i);
  }
  return output;
}

function push(item, arr) {
  arr.push(item);
  return arr;
}

export {
  deleteBySwap ,
  range        ,
  reduceState  ,
  reduceStatei ,
  join         ,
  push         ,
  
}
/* ArraySystem-WonderCommonlib Not a pure module */
