// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as Js_primitive                    from "../../../../../node_modules/bs-platform/lib/es6/js_primitive.js";
import * as SparseMapSystem$Wonderjs        from "../SparseMapSystem.js";
import * as SparseMapSystem$WonderCommonlib from "../../../../../node_modules/wonder-commonlib/lib/es6_global/src/SparseMapSystem.js";

function getTypeArrayPoolData(state) {
  return state[/* typeArrayPoolData */26];
}

function getFloat32ArrayPoolMap(state) {
  return state[/* typeArrayPoolData */26][/* float32ArrayPoolMap */0];
}

function getUint16ArrayPoolMap(state) {
  return state[/* typeArrayPoolData */26][/* uint16ArrayPoolMap */1];
}

function _addTypeArrayToPool(count, typeArray, maxSize, map) {
  var match = SparseMapSystem$WonderCommonlib.get(count, map);
  if (match) {
    var arr = match[0];
    var len = arr.length;
    if (len >= maxSize) {
      return map;
    } else {
      arr.push(typeArray);
      return map;
    }
  } else {
    return SparseMapSystem$WonderCommonlib.set(count, /* array */[typeArray], map);
  }
}

function addFloat32TypeArrayToPool(typeArray, maxSize, map) {
  return _addTypeArrayToPool(typeArray.length, typeArray, maxSize, map);
}

function addUint16TypeArrayToPool(typeArray, maxSize, map) {
  return _addTypeArrayToPool(typeArray.length, typeArray, maxSize, map);
}

function _getTypeArrayFromPool(count, map) {
  var match = SparseMapSystem$WonderCommonlib.get(count, map);
  if (match) {
    var arr = match[0];
    var match$1 = arr.length;
    if (match$1 !== 0) {
      return Js_primitive.undefined_to_opt(arr.pop());
    } else {
      return /* None */0;
    }
  } else {
    return /* None */0;
  }
}

function getFloat32TypeArrayFromPool(count, state) {
  return _getTypeArrayFromPool(count, state[/* typeArrayPoolData */26][/* float32ArrayPoolMap */0]);
}

function getUint16TypeArrayFromPool(count, state) {
  return _getTypeArrayFromPool(count, state[/* typeArrayPoolData */26][/* uint16ArrayPoolMap */1]);
}

function addAllFloat32TypeArrayToPool(typeArrayMap, maxSize, map) {
  SparseMapSystem$Wonderjs.forEachValid((function (typeArray) {
          addFloat32TypeArrayToPool(typeArray, maxSize, map);
          return /* () */0;
        }), typeArrayMap);
  return map;
}

function addAllUint16TypeArrayToPool(typeArrayMap, maxSize, map) {
  SparseMapSystem$Wonderjs.forEachValid((function (typeArray) {
          addUint16TypeArrayToPool(typeArray, maxSize, map);
          return /* () */0;
        }), typeArrayMap);
  return map;
}

function deepCopyStateForRestore(state) {
  var newrecord = state.slice();
  newrecord[/* typeArrayPoolData */26] = /* record */[
    /* float32ArrayPoolMap */SparseMapSystem$WonderCommonlib.createEmpty(/* () */0),
    /* uint16ArrayPoolMap */SparseMapSystem$WonderCommonlib.createEmpty(/* () */0)
  ];
  return newrecord;
}

function restore(_, param, targetState) {
  var newrecord = targetState.slice();
  newrecord[/* typeArrayPoolData */26] = /* record */[
    /* float32ArrayPoolMap */param[/* float32ArrayPoolMap */1],
    /* uint16ArrayPoolMap */param[/* uint16ArrayPoolMap */2]
  ];
  return newrecord;
}

export {
  getTypeArrayPoolData         ,
  getFloat32ArrayPoolMap       ,
  getUint16ArrayPoolMap        ,
  _addTypeArrayToPool          ,
  addFloat32TypeArrayToPool    ,
  addUint16TypeArrayToPool     ,
  _getTypeArrayFromPool        ,
  getFloat32TypeArrayFromPool  ,
  getUint16TypeArrayFromPool   ,
  addAllFloat32TypeArrayToPool ,
  addAllUint16TypeArrayToPool  ,
  deepCopyStateForRestore      ,
  restore                      ,
  
}
/* SparseMapSystem-Wonderjs Not a pure module */
