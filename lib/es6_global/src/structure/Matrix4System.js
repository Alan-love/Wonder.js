// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as Contract$Wonderjs              from "../definition/Contract.js";
import * as ExceptionHandleSystem$Wonderjs from "../exception/ExceptionHandleSystem.js";

function createIdentityMatrix4() {
  return new Float32Array(/* float array */[
              1,
              0,
              0,
              0,
              0,
              1,
              0,
              0,
              0,
              0,
              1,
              0,
              0,
              0,
              0,
              1
            ]);
}

function fromTranslation(positionTypeArr, resultFloat32Arr) {
  resultFloat32Arr[0] = 1;
  resultFloat32Arr[1] = 0;
  resultFloat32Arr[2] = 0;
  resultFloat32Arr[3] = 0;
  resultFloat32Arr[4] = 0;
  resultFloat32Arr[5] = 1;
  resultFloat32Arr[6] = 0;
  resultFloat32Arr[7] = 0;
  resultFloat32Arr[8] = 0;
  resultFloat32Arr[9] = 0;
  resultFloat32Arr[10] = 1;
  resultFloat32Arr[11] = 0;
  resultFloat32Arr[12] = positionTypeArr[0];
  resultFloat32Arr[13] = positionTypeArr[1];
  resultFloat32Arr[14] = positionTypeArr[2];
  resultFloat32Arr[15] = 1;
  return resultFloat32Arr;
}

function getTranslationTypeArray(matTypeArr) {
  return new Float32Array(/* float array */[
              matTypeArr[12],
              matTypeArr[13],
              matTypeArr[14]
            ]);
}

function getTranslationTuple(matTypeArr) {
  return /* tuple */[
          matTypeArr[12],
          matTypeArr[13],
          matTypeArr[14]
        ];
}

function multiply(aMatTypeArr, bMatTypeArr, resultFloat32Arr) {
  var a00 = aMatTypeArr[0];
  var a01 = aMatTypeArr[1];
  var a02 = aMatTypeArr[2];
  var a03 = aMatTypeArr[3];
  var a10 = aMatTypeArr[4];
  var a11 = aMatTypeArr[5];
  var a12 = aMatTypeArr[6];
  var a13 = aMatTypeArr[7];
  var a20 = aMatTypeArr[8];
  var a21 = aMatTypeArr[9];
  var a22 = aMatTypeArr[10];
  var a23 = aMatTypeArr[11];
  var a30 = aMatTypeArr[12];
  var a31 = aMatTypeArr[13];
  var a32 = aMatTypeArr[14];
  var a33 = aMatTypeArr[15];
  var b0 = bMatTypeArr[0];
  var b1 = bMatTypeArr[1];
  var b2 = bMatTypeArr[2];
  var b3 = bMatTypeArr[3];
  resultFloat32Arr[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
  resultFloat32Arr[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
  resultFloat32Arr[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
  resultFloat32Arr[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
  b0 = bMatTypeArr[4];
  b1 = bMatTypeArr[5];
  b2 = bMatTypeArr[6];
  b3 = bMatTypeArr[7];
  resultFloat32Arr[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
  resultFloat32Arr[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
  resultFloat32Arr[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
  resultFloat32Arr[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
  b0 = bMatTypeArr[8];
  b1 = bMatTypeArr[9];
  b2 = bMatTypeArr[10];
  b3 = bMatTypeArr[11];
  resultFloat32Arr[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
  resultFloat32Arr[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
  resultFloat32Arr[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
  resultFloat32Arr[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
  b0 = bMatTypeArr[12];
  b1 = bMatTypeArr[13];
  b2 = bMatTypeArr[14];
  b3 = bMatTypeArr[15];
  resultFloat32Arr[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
  resultFloat32Arr[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
  resultFloat32Arr[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
  resultFloat32Arr[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
  return resultFloat32Arr;
}

function buildPerspective(param, resultFloat32Arr) {
  var far = param[3];
  var near = param[2];
  var fovy = param[0];
  Contract$Wonderjs.requireCheck((function () {
          return Contract$Wonderjs.test("frustum shouldn't be null", (function () {
                        var fovy$1 = Math.PI * fovy / 180 / 2;
                        return Contract$Wonderjs.Operators[/* <>=. */4](Math.sin(fovy$1), 0);
                      }));
        }));
  var fovy$1 = Math.PI * fovy / 180 / 2;
  var s = Math.sin(fovy$1);
  var rd = 1 / (far - near);
  var ct = Math.cos(fovy$1) / s;
  resultFloat32Arr[0] = ct / param[1];
  resultFloat32Arr[1] = 0;
  resultFloat32Arr[2] = 0;
  resultFloat32Arr[3] = 0;
  resultFloat32Arr[4] = 0;
  resultFloat32Arr[5] = ct;
  resultFloat32Arr[6] = 0;
  resultFloat32Arr[7] = 0;
  resultFloat32Arr[8] = 0;
  resultFloat32Arr[9] = 0;
  resultFloat32Arr[10] = -(far + near) * rd;
  resultFloat32Arr[11] = -1;
  resultFloat32Arr[12] = 0;
  resultFloat32Arr[13] = 0;
  resultFloat32Arr[14] = -2 * far * near * rd;
  resultFloat32Arr[15] = 0;
  return /* () */0;
}

function invert(mat, resultFloat32Arr) {
  var a00 = mat[0];
  var a01 = mat[1];
  var a02 = mat[2];
  var a03 = mat[3];
  var a10 = mat[4];
  var a11 = mat[5];
  var a12 = mat[6];
  var a13 = mat[7];
  var a20 = mat[8];
  var a21 = mat[9];
  var a22 = mat[10];
  var a23 = mat[11];
  var a30 = mat[12];
  var a31 = mat[13];
  var a32 = mat[14];
  var a33 = mat[15];
  var b00 = a00 * a11 - a01 * a10;
  var b01 = a00 * a12 - a02 * a10;
  var b02 = a00 * a13 - a03 * a10;
  var b03 = a01 * a12 - a02 * a11;
  var b04 = a01 * a13 - a03 * a11;
  var b05 = a02 * a13 - a03 * a12;
  var b06 = a20 * a31 - a21 * a30;
  var b07 = a20 * a32 - a22 * a30;
  var b08 = a20 * a33 - a23 * a30;
  var b09 = a21 * a32 - a22 * a31;
  var b10 = a21 * a33 - a23 * a31;
  var b11 = a22 * a33 - a23 * a32;
  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
  var match = det;
  if (match !== 0) {
    det = 1.0 / det;
    resultFloat32Arr[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
    resultFloat32Arr[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
    resultFloat32Arr[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
    resultFloat32Arr[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;
    resultFloat32Arr[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
    resultFloat32Arr[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
    resultFloat32Arr[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
    resultFloat32Arr[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;
    resultFloat32Arr[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
    resultFloat32Arr[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
    resultFloat32Arr[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
    resultFloat32Arr[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;
    resultFloat32Arr[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;
    resultFloat32Arr[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;
    resultFloat32Arr[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;
    resultFloat32Arr[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;
    return resultFloat32Arr;
  } else {
    return ExceptionHandleSystem$Wonderjs.throwMessage("det shouldn't be 0.");
  }
}

export {
  createIdentityMatrix4   ,
  fromTranslation         ,
  getTranslationTypeArray ,
  getTranslationTuple     ,
  multiply                ,
  buildPerspective        ,
  invert                  ,
  
}
/* No side effect */
