// Generated by BUCKLESCRIPT VERSION 3.1.4, PLEASE EDIT WITH CARE

import * as Log$WonderLog from "../../../../../../../node_modules/wonder-log/lib/es6_global/src/Log.js";
import * as Contract$WonderLog from "../../../../../../../node_modules/wonder-log/lib/es6_global/src/Contract.js";
import * as StateDataMain$Wonderjs from "../../main/data/StateDataMain.js";
import * as IsDebugMainService$Wonderjs from "../../main/state/IsDebugMainService.js";
import * as SparseMapService$WonderCommonlib from "../../../../../../../node_modules/wonder-commonlib/lib/es6_global/src/SparseMapService.js";
import * as GetBoxGeometryIndicesRenderService$Wonderjs from "../geometry/box/GetBoxGeometryIndicesRenderService.js";
import * as GetBoxGeometryNormalsRenderService$Wonderjs from "../geometry/box/GetBoxGeometryNormalsRenderService.js";
import * as GetBoxGeometryVerticesRenderService$Wonderjs from "../geometry/box/GetBoxGeometryVerticesRenderService.js";
import * as GetBoxGeometryTexCoordsRenderService$Wonderjs from "../geometry/box/GetBoxGeometryTexCoordsRenderService.js";
import * as GetCustomGeometryIndicesRenderService$Wonderjs from "../geometry/custom/GetCustomGeometryIndicesRenderService.js";
import * as GetCustomGeometryNormalsRenderService$Wonderjs from "../geometry/custom/GetCustomGeometryNormalsRenderService.js";
import * as GetCustomGeometryVerticesRenderService$Wonderjs from "../geometry/custom/GetCustomGeometryVerticesRenderService.js";
import * as GetCustomGeometryTexCoordsRenderService$Wonderjs from "../geometry/custom/GetCustomGeometryTexCoordsRenderService.js";

var addToMap = SparseMapService$WonderCommonlib.set;

var removeFromMap = SparseMapService$WonderCommonlib.deleteVal;

var getComponentData = SparseMapService$WonderCommonlib.get;

function unsafeGetComponentData(uid, currentComponentDataMap) {
  return Contract$WonderLog.ensureCheck((function (r) {
                return Contract$WonderLog.test(Log$WonderLog.buildAssertMessage("has component", "not"), (function () {
                              return Contract$WonderLog.assertNullableExist(r);
                            }));
              }), IsDebugMainService$Wonderjs.getIsDebug(StateDataMain$Wonderjs.stateData), SparseMapService$WonderCommonlib.unsafeGet(uid, currentComponentDataMap));
}

function hasComponent(uid, currentComponentDataMap, targetType_) {
  var match = SparseMapService$WonderCommonlib.get(uid, currentComponentDataMap);
  if (match) {
    return match[0][1] === targetType_;
  } else {
    return false;
  }
}

function getBoxGeometryType() {
  return 0;
}

function getCustomGeometryType() {
  return 1;
}

function getCurrentGeometryBufferMapAndGetPointsFuncs(type_, vboBufferRecord) {
  if (type_ === 0) {
    return /* tuple */[
            /* tuple */[
              vboBufferRecord[/* boxGeometryVertexBufferMap */0],
              vboBufferRecord[/* boxGeometryTexCoordBufferMap */1],
              vboBufferRecord[/* boxGeometryNormalBufferMap */2],
              vboBufferRecord[/* boxGeometryElementArrayBufferMap */3]
            ],
            /* tuple */[
              GetBoxGeometryVerticesRenderService$Wonderjs.getVertices,
              GetBoxGeometryTexCoordsRenderService$Wonderjs.getTexCoords,
              GetBoxGeometryNormalsRenderService$Wonderjs.getNormals,
              GetBoxGeometryIndicesRenderService$Wonderjs.getIndices
            ]
          ];
  } else if (type_ === 1) {
    return /* tuple */[
            /* tuple */[
              vboBufferRecord[/* customGeometryVertexBufferMap */4],
              vboBufferRecord[/* customGeometryTexCoordBufferMap */5],
              vboBufferRecord[/* customGeometryNormalBufferMap */6],
              vboBufferRecord[/* customGeometryElementArrayBufferMap */7]
            ],
            /* tuple */[
              GetCustomGeometryVerticesRenderService$Wonderjs.getVertices,
              GetCustomGeometryTexCoordsRenderService$Wonderjs.getTexCoords,
              GetCustomGeometryNormalsRenderService$Wonderjs.getNormals,
              GetCustomGeometryIndicesRenderService$Wonderjs.getIndices
            ]
          ];
  } else {
    return Log$WonderLog.fatal(Log$WonderLog.buildFatalMessage("getCurrentGeometryBufferMapAndGetPointsFuncs", "unknown type_: " + (String(type_) + ""), "", "", ""));
  }
}

function getGetIndicesCountFunc(type_) {
  if (type_ === 0) {
    return GetBoxGeometryIndicesRenderService$Wonderjs.getIndicesCount;
  } else {
    return GetCustomGeometryIndicesRenderService$Wonderjs.getIndicesCount;
  }
}

export {
  addToMap ,
  removeFromMap ,
  getComponentData ,
  unsafeGetComponentData ,
  hasComponent ,
  getBoxGeometryType ,
  getCustomGeometryType ,
  getCurrentGeometryBufferMapAndGetPointsFuncs ,
  getGetIndicesCountFunc ,
  
}
/* Log-WonderLog Not a pure module */
