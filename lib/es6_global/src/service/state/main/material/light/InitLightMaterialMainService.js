// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as JobConfigService$Wonderjs                    from "../../../../primitiive/JobConfigService.js";
import * as ReduceStateMainService$Wonderjs              from "../../array/ReduceStateMainService.js";
import * as InitMaterialMainService$Wonderjs             from "../InitMaterialMainService.js";
import * as RenderConfigMainService$Wonderjs             from "../../renderConfig/RenderConfigMainService.js";
import * as ShaderIndexLightMaterialMainService$Wonderjs from "./ShaderIndexLightMaterialMainService.js";

function _getShaderLibs(param) {
  var shaderName = "front_render_light";
  return JobConfigService$Wonderjs.unsafeFindFirst(param[/* material_shaders */2], shaderName, (function (param) {
                  return JobConfigService$Wonderjs.filterTargetName(param[/* name */0], shaderName);
                }))[/* shader_libs */1];
}

function _getShaderTuple(materialIndex, state) {
  var shaderRecord = RenderConfigMainService$Wonderjs.getShaders(state);
  return /* tuple */[
          materialIndex,
          _getShaderLibs(shaderRecord),
          shaderRecord
        ];
}

function _getStateTuple(state) {
  var lightMaterialRecord = state[/* lightMaterialRecord */16];
  return /* tuple */[
          lightMaterialRecord[/* gameObjectMap */5],
          lightMaterialRecord[/* shaderIndexMap */1],
          state
        ];
}

function initMaterial(gl, materialIndex, state) {
  return InitMaterialMainService$Wonderjs.initMaterial(gl, _getShaderTuple(materialIndex, state), ShaderIndexLightMaterialMainService$Wonderjs.setShaderIndex, _getStateTuple(state));
}

function initMaterials(materialIndexArr, gl, state) {
  return ReduceStateMainService$Wonderjs.reduceState((function (state, materialIndex) {
                return initMaterial(gl, materialIndex, state);
              }), state, materialIndexArr);
}

function handleInitComponent(gl, index, state) {
  return InitMaterialMainService$Wonderjs.handleInitComponent(gl, _getShaderTuple(index, state), ShaderIndexLightMaterialMainService$Wonderjs.setShaderIndex, _getStateTuple(state));
}

function init(gl, state) {
  var lightMaterialRecord = state[/* lightMaterialRecord */16];
  return InitMaterialMainService$Wonderjs.init(gl, /* tuple */[
              lightMaterialRecord[/* index */0],
              lightMaterialRecord[/* disposedIndexArray */7]
            ], initMaterial, state);
}

export {
  _getShaderLibs      ,
  _getShaderTuple     ,
  _getStateTuple      ,
  initMaterial        ,
  initMaterials       ,
  handleInitComponent ,
  init                ,
  
}
/* JobConfigService-Wonderjs Not a pure module */
