// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as Log$WonderLog                         from "../../../../../../../node_modules/wonder-log/lib/es6_global/src/Log.js";
import * as Contract$WonderLog                    from "../../../../../../../node_modules/wonder-log/lib/es6_global/src/Contract.js";
import * as ArrayService$Wonderjs                 from "../../../atom/ArrayService.js";
import * as MainStateData$Wonderjs                from "../data/MainStateData.js";
import * as IsDebugMainService$Wonderjs           from "../state/IsDebugMainService.js";
import * as GameObjectMapService$Wonderjs         from "../../../primitiive/GameObjectMapService.js";
import * as InitShaderMainService$Wonderjs        from "../shader/InitShaderMainService.js";
import * as ShaderIndexMapService$Wonderjs        from "../../../primitiive/material/ShaderIndexMapService.js";
import * as DisposeMaterialService$Wonderjs       from "../../../record/material/DisposeMaterialService.js";
import * as ReduceStateMainService$Wonderjs       from "../array/ReduceStateMainService.js";
import * as RenderConfigMainService$Wonderjs      from "../renderConfig/RenderConfigMainService.js";
import * as BuildShaderSourceMainService$Wonderjs from "../shader/BuildShaderSourceMainService.js";

function _initMaterialShader(gl, param, param$1, param$2) {
  var state = param$2[2];
  var materialIndex = param[0];
  var match = ShaderIndexMapService$Wonderjs.hasShaderIndex(materialIndex, param$2[1]);
  if (match !== 0) {
    return state;
  } else {
    return param$1[1](materialIndex, InitShaderMainService$Wonderjs.initMaterialShader(materialIndex, /* tuple */[
                    gl,
                    RenderConfigMainService$Wonderjs.getMaterialShaderLibDataArr(GameObjectMapService$Wonderjs.unsafeGetGameObject(materialIndex, param$2[0]), /* tuple */[
                          param[2],
                          param[1],
                          RenderConfigMainService$Wonderjs.getShaderLibs(state)
                        ], state)
                  ], param$1[0], state), state);
  }
}

function initMaterial(gl, shaderTuple, setShaderIndexFunc, stateTuple) {
  return _initMaterialShader(gl, shaderTuple, /* tuple */[
              BuildShaderSourceMainService$Wonderjs.buildGLSLSource,
              setShaderIndexFunc
            ], stateTuple);
}

var handleInitComponent = initMaterial;

function init(gl, param, initMaterialFunc, state) {
  var disposedIndexArray = param[1];
  Contract$WonderLog.requireCheck((function () {
          return Contract$WonderLog.test(Log$WonderLog.buildAssertMessage("not dispose any material before init", "do"), (function () {
                        return Contract$WonderLog.assertTrue(DisposeMaterialService$Wonderjs.isNotDisposed(disposedIndexArray));
                      }));
        }), IsDebugMainService$Wonderjs.getIsDebug(MainStateData$Wonderjs.stateData));
  return ReduceStateMainService$Wonderjs.reduceState((function (state, materialIndex) {
                return initMaterialFunc(gl, materialIndex, state);
              }), state, ArrayService$Wonderjs.range(0, param[0] - 1 | 0));
}

export {
  _initMaterialShader ,
  initMaterial        ,
  handleInitComponent ,
  init                ,
  
}
/* Log-WonderLog Not a pure module */
