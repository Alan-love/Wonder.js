// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as Caml_int32                                    from "../../../../../../../../node_modules/bs-platform/lib/es6/caml_int32.js";
import * as OptionService$Wonderjs                        from "../../../../atom/OptionService.js";
import * as SparseMapService$Wonderjs                     from "../../../../atom/SparseMapService.js";
import * as ArrayService$WonderCommonlib                  from "../../../../../../../../node_modules/wonder-commonlib/lib/es6_global/src/ArrayService.js";
import * as BufferSettingService$Wonderjs                 from "../../../../record/main/setting/BufferSettingService.js";
import * as CopyTypeArrayService$Wonderjs                 from "../../../../primitive/copy/CopyTypeArrayService.js";
import * as ShaderIndicesService$Wonderjs                 from "../../../../primitive/material/ShaderIndicesService.js";
import * as SparseMapService$WonderCommonlib              from "../../../../../../../../node_modules/wonder-commonlib/lib/es6_global/src/SparseMapService.js";
import * as BufferBasicMaterialService$Wonderjs           from "../../../../record/main/material/basic/BufferBasicMaterialService.js";
import * as DefaultTypeArrayValueService$Wonderjs         from "../../../../primitive/buffer/DefaultTypeArrayValueService.js";
import * as CreateTypeArrayBasicMaterialService$Wonderjs  from "../../../../record/all/material/basic/CreateTypeArrayBasicMaterialService.js";
import * as OperateTypeArrayBasicMaterialService$Wonderjs from "../../../../record/main/material/basic/OperateTypeArrayBasicMaterialService.js";

function getRecord(param) {
  return OptionService$Wonderjs.unsafeGet(param[/* basicMaterialRecord */15]);
}

function setDefaultTypeArrData(count, defaultShaderIndex, defaultColor, param) {
  return ArrayService$WonderCommonlib.reduceOneParam((function (param, index) {
                return /* tuple */[
                        ShaderIndicesService$Wonderjs.setShaderIndex(index, defaultShaderIndex, param[0]),
                        OperateTypeArrayBasicMaterialService$Wonderjs.setColor(index, defaultColor, param[1])
                      ];
              }), /* tuple */[
              param[0],
              param[1]
            ], ArrayService$WonderCommonlib.range(0, count - 1 | 0));
}

function _setDefaultTypeArrData(count, defaultShaderIndex, defaultColor, param) {
  return /* tuple */[
          param[0],
          setDefaultTypeArrData(count, defaultShaderIndex, defaultColor, /* tuple */[
                param[1],
                param[2]
              ])
        ];
}

function _initBufferData(count, defaultShaderIndex, defaultColor) {
  var buffer = BufferBasicMaterialService$Wonderjs.createBuffer(count);
  var match = CreateTypeArrayBasicMaterialService$Wonderjs.createTypeArrays(buffer, count);
  return _setDefaultTypeArrData(count, defaultShaderIndex, defaultColor, /* tuple */[
              buffer,
              match[0],
              match[1]
            ]);
}

function create(state) {
  var basicMaterialDataBufferCount = BufferSettingService$Wonderjs.getBasicMaterialDataBufferCount(state[/* settingRecord */0]);
  var defaultShaderIndex = DefaultTypeArrayValueService$Wonderjs.getDefaultShaderIndex(/* () */0);
  var defaultColor = /* float array */[
    1,
    1,
    1
  ];
  var match = _initBufferData(basicMaterialDataBufferCount, defaultShaderIndex, defaultColor);
  var match$1 = match[1];
  state[/* basicMaterialRecord */15] = /* Some */[/* record */[
      /* index */0,
      /* buffer */match[0],
      /* shaderIndices */match$1[0],
      /* colors */match$1[1],
      /* defaultShaderIndex */defaultShaderIndex,
      /* defaultColor */defaultColor,
      /* gameObjectMap */SparseMapService$WonderCommonlib.createEmpty(/* () */0),
      /* groupCountMap */SparseMapService$WonderCommonlib.createEmpty(/* () */0),
      /* disposedIndexArray */ArrayService$WonderCommonlib.createEmpty(/* () */0),
      /* materialArrayForWorkerInit */ArrayService$WonderCommonlib.createEmpty(/* () */0)
    ]];
  return state;
}

function deepCopyForRestore(state) {
  var record = getRecord(state);
  var index = record[/* index */0];
  var materialArrayForWorkerInit = record[/* materialArrayForWorkerInit */9];
  var newrecord = state.slice();
  newrecord[/* basicMaterialRecord */15] = /* Some */[/* record */[
      /* index */index,
      /* buffer */record[/* buffer */1],
      /* shaderIndices */CopyTypeArrayService$Wonderjs.copyUint32ArrayWithEndIndex(Caml_int32.imul(index, BufferBasicMaterialService$Wonderjs.getShaderIndicesSize(/* () */0)), record[/* shaderIndices */2]),
      /* colors */CopyTypeArrayService$Wonderjs.copyFloat32ArrayWithEndIndex(Caml_int32.imul(index, BufferBasicMaterialService$Wonderjs.getColorsSize(/* () */0)), record[/* colors */3]),
      /* defaultShaderIndex */record[/* defaultShaderIndex */4],
      /* defaultColor */record[/* defaultColor */5],
      /* gameObjectMap */SparseMapService$Wonderjs.copy(record[/* gameObjectMap */6]),
      /* groupCountMap */SparseMapService$Wonderjs.copy(record[/* groupCountMap */7]),
      /* disposedIndexArray */record[/* disposedIndexArray */8].slice(),
      /* materialArrayForWorkerInit */materialArrayForWorkerInit.slice()
    ]];
  return newrecord;
}

export {
  getRecord              ,
  setDefaultTypeArrData  ,
  _setDefaultTypeArrData ,
  _initBufferData        ,
  create                 ,
  deepCopyForRestore     ,
  
}
/* OptionService-Wonderjs Not a pure module */
