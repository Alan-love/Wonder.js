// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as TypeArrayService$Wonderjs               from "../../../primitive/buffer/TypeArrayService.js";
import * as AliveMaterialService$Wonderjs           from "../../../primitive/material/AliveMaterialService.js";
import * as RestoreMaterialService$Wonderjs         from "../../../record/main/material/RestoreMaterialService.js";
import * as InitBasicMaterialMainService$Wonderjs   from "../material/basic/InitBasicMaterialMainService.js";
import * as RecordBasicMaterialMainService$Wonderjs from "../material/basic/RecordBasicMaterialMainService.js";

function _resetShaderIndices(state) {
  var record = RecordBasicMaterialMainService$Wonderjs.getRecord(state);
  var newrecord = state.slice();
  var newrecord$1 = record.slice();
  newrecord[/* basicMaterialRecord */15] = /* Some */[(newrecord$1[/* shaderIndices */2] = RestoreMaterialService$Wonderjs.resetShaderIndices(record[/* index */0], record[/* defaultShaderIndex */4], record[/* shaderIndices */2]), newrecord$1)];
  return newrecord;
}

function _restoreTypeArrays(currentBasicMaterialRecord, targetBasicMaterialRecord) {
  var match = +(currentBasicMaterialRecord[/* shaderIndices */2] === targetBasicMaterialRecord[/* shaderIndices */2] && currentBasicMaterialRecord[/* colors */3] === targetBasicMaterialRecord[/* colors */3]);
  if (match !== 0) {
    return /* tuple */[
            currentBasicMaterialRecord,
            targetBasicMaterialRecord
          ];
  } else {
    RecordBasicMaterialMainService$Wonderjs.setDefaultTypeArrData(currentBasicMaterialRecord[/* index */0], currentBasicMaterialRecord[/* defaultShaderIndex */4], currentBasicMaterialRecord[/* defaultColor */5], /* tuple */[
          currentBasicMaterialRecord[/* shaderIndices */2],
          currentBasicMaterialRecord[/* colors */3]
        ]);
    TypeArrayService$Wonderjs.fillUint32ArrayWithUint32Array(/* tuple */[
          currentBasicMaterialRecord[/* shaderIndices */2],
          0
        ], /* tuple */[
          targetBasicMaterialRecord[/* shaderIndices */2],
          0
        ], targetBasicMaterialRecord[/* shaderIndices */2].length);
    TypeArrayService$Wonderjs.fillFloat32ArrayWithFloat32Array(/* tuple */[
          currentBasicMaterialRecord[/* colors */3],
          0
        ], /* tuple */[
          targetBasicMaterialRecord[/* colors */3],
          0
        ], targetBasicMaterialRecord[/* colors */3].length);
    return /* tuple */[
            currentBasicMaterialRecord,
            targetBasicMaterialRecord
          ];
  }
}

function restore(gl, currentState, targetState) {
  var targetState$1 = _resetShaderIndices(targetState);
  var targetState$2 = InitBasicMaterialMainService$Wonderjs.initMaterials(AliveMaterialService$Wonderjs.getAllAliveMaterials(RecordBasicMaterialMainService$Wonderjs.getRecord(targetState$1)[/* gameObjectMap */6]), gl, targetState$1);
  var currentBasicMaterialRecord = RecordBasicMaterialMainService$Wonderjs.getRecord(currentState);
  var targetBasicMaterialRecord = RecordBasicMaterialMainService$Wonderjs.getRecord(targetState$2);
  var match = _restoreTypeArrays(currentBasicMaterialRecord, targetBasicMaterialRecord);
  var currentBasicMaterialRecord$1 = match[0];
  var newrecord = targetState$2.slice();
  var newrecord$1 = match[1].slice();
  newrecord[/* basicMaterialRecord */15] = /* Some */[(newrecord$1[/* buffer */1] = currentBasicMaterialRecord$1[/* buffer */1], newrecord$1[/* shaderIndices */2] = currentBasicMaterialRecord$1[/* shaderIndices */2], newrecord$1[/* colors */3] = currentBasicMaterialRecord$1[/* colors */3], newrecord$1)];
  return newrecord;
}

export {
  _resetShaderIndices ,
  _restoreTypeArrays  ,
  restore             ,
  
}
/* TypeArrayService-Wonderjs Not a pure module */
