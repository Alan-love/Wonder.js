// Generated by BUCKLESCRIPT VERSION 3.1.4, PLEASE EDIT WITH CARE

import * as Caml_array from "../../../../../../../node_modules/bs-platform/lib/es6/caml_array.js";
import * as TypeArrayService$Wonderjs from "../../../primitive/buffer/TypeArrayService.js";
import * as RecordTransformMainService$Wonderjs from "../transform/RecordTransformMainService.js";

function _restoreTypeArrays(currentTransformRecord, targetTransformRecord) {
  var match = currentTransformRecord[/* localPositions */3] === targetTransformRecord[/* localPositions */3] && currentTransformRecord[/* localToWorldMatrices */2] === targetTransformRecord[/* localToWorldMatrices */2];
  if (match) {
    return /* tuple */[
            currentTransformRecord,
            targetTransformRecord
          ];
  } else {
    RecordTransformMainService$Wonderjs.setAllTypeArrDataToDefault(currentTransformRecord[/* index */0], currentTransformRecord[/* defaultLocalToWorldMatrix */7], currentTransformRecord[/* defaultLocalPosition */8], /* tuple */[
          currentTransformRecord[/* localToWorldMatrices */2],
          currentTransformRecord[/* localPositions */3]
        ]);
    TypeArrayService$Wonderjs.fillFloat32ArrayWithFloat32Array(/* tuple */[
          currentTransformRecord[/* localPositions */3],
          0
        ], /* tuple */[
          targetTransformRecord[/* localPositions */3],
          0
        ], targetTransformRecord[/* localPositions */3].length);
    TypeArrayService$Wonderjs.fillFloat32ArrayWithFloat32Array(/* tuple */[
          currentTransformRecord[/* localToWorldMatrices */2],
          0
        ], /* tuple */[
          targetTransformRecord[/* localToWorldMatrices */2],
          0
        ], targetTransformRecord[/* localToWorldMatrices */2].length);
    return /* tuple */[
            currentTransformRecord,
            targetTransformRecord
          ];
  }
}

function restore(currentState, targetState) {
  var currentTransformRecord = RecordTransformMainService$Wonderjs.getRecord(currentState);
  var targetTransformRecord = RecordTransformMainService$Wonderjs.getRecord(targetState);
  var match = _restoreTypeArrays(currentTransformRecord, targetTransformRecord);
  var targetTransformRecord$1 = match[1];
  var currentTransformRecord$1 = match[0];
  var newrecord = Caml_array.caml_array_dup(targetState);
  newrecord[/* transformRecord */11] = /* Some */[/* record */[
      /* index */targetTransformRecord$1[/* index */0],
      /* buffer */currentTransformRecord$1[/* buffer */1],
      /* localToWorldMatrices */currentTransformRecord$1[/* localToWorldMatrices */2],
      /* localPositions */currentTransformRecord$1[/* localPositions */3],
      /* copiedBuffer */targetTransformRecord$1[/* copiedBuffer */4],
      /* copiedLocalToWorldMatrices */targetTransformRecord$1[/* copiedLocalToWorldMatrices */5],
      /* copiedLocalPositions */targetTransformRecord$1[/* copiedLocalPositions */6],
      /* defaultLocalToWorldMatrix */targetTransformRecord$1[/* defaultLocalToWorldMatrix */7],
      /* defaultLocalPosition */targetTransformRecord$1[/* defaultLocalPosition */8],
      /* parentMap */targetTransformRecord$1[/* parentMap */9],
      /* childMap */targetTransformRecord$1[/* childMap */10],
      /* gameObjectMap */targetTransformRecord$1[/* gameObjectMap */11],
      /* dirtyMap */targetTransformRecord$1[/* dirtyMap */12],
      /* localToWorldMatrixCacheMap */targetTransformRecord$1[/* localToWorldMatrixCacheMap */13],
      /* normalMatrixCacheMap */targetTransformRecord$1[/* normalMatrixCacheMap */14],
      /* disposedIndexArray */targetTransformRecord$1[/* disposedIndexArray */15]
    ]];
  return newrecord;
}

export {
  _restoreTypeArrays ,
  restore ,
  
}
/* TypeArrayService-Wonderjs Not a pure module */
