// Generated by BUCKLESCRIPT VERSION 3.1.4, PLEASE EDIT WITH CARE

import * as Caml_array from "../../../../../../../../node_modules/bs-platform/lib/es6/caml_array.js";
import * as Caml_int32 from "../../../../../../../../node_modules/bs-platform/lib/es6/caml_int32.js";
import * as OptionService$Wonderjs from "../../../../atom/OptionService.js";
import * as SparseMapService$Wonderjs from "../../../../atom/SparseMapService.js";
import * as ArrayService$WonderCommonlib from "../../../../../../../../node_modules/wonder-commonlib/lib/es6_global/src/ArrayService.js";
import * as BufferSettingService$Wonderjs from "../../../../record/main/setting/BufferSettingService.js";
import * as CopyTypeArrayService$Wonderjs from "../../../../primitive/copy/CopyTypeArrayService.js";
import * as SparseMapService$WonderCommonlib from "../../../../../../../../node_modules/wonder-commonlib/lib/es6_global/src/SparseMapService.js";
import * as BufferCustomGeometryService$Wonderjs from "../../../../record/main/geometry/custom/BufferCustomGeometryService.js";
import * as CreateTypeArrayCustomGeometryService$Wonderjs from "../../../../record/all/geometry/custom/CreateTypeArrayCustomGeometryService.js";

function getRecord(param) {
  return OptionService$Wonderjs.unsafeGet(param[/* customGeometryRecord */24]);
}

function setAllTypeArrDataToDefault(geometryCount, geometryPointCount, param) {
  return /* tuple */[
          param[0].fill(0, 0, Caml_int32.imul(Caml_int32.imul(geometryCount, geometryPointCount), BufferCustomGeometryService$Wonderjs.getVertexSize(/* () */0))),
          param[1].fill(0, 0, Caml_int32.imul(Caml_int32.imul(geometryCount, geometryPointCount), BufferCustomGeometryService$Wonderjs.getTexCoordsSize(/* () */0))),
          param[2].fill(0, 0, Caml_int32.imul(Caml_int32.imul(geometryCount, geometryPointCount), BufferCustomGeometryService$Wonderjs.getVertexSize(/* () */0))),
          param[3].fill(0, 0, Caml_int32.imul(Caml_int32.imul(geometryCount, geometryPointCount), BufferCustomGeometryService$Wonderjs.getIndexSize(/* () */0)))
        ];
}

function _initBufferData(geometryPointCount, geometryCount) {
  var buffer = BufferCustomGeometryService$Wonderjs.createBuffer(geometryPointCount, geometryCount);
  var match = CreateTypeArrayCustomGeometryService$Wonderjs.createTypeArrays(buffer, geometryPointCount, geometryCount);
  return /* tuple */[
          buffer,
          match[0],
          match[1],
          match[2],
          match[3],
          match[4],
          match[5],
          match[6],
          match[7]
        ];
}

function create(state) {
  var settingRecord = state[/* settingRecord */0];
  var geometryPointCount = BufferSettingService$Wonderjs.getCustomGeometryPointCount(settingRecord);
  var geometryCount = BufferSettingService$Wonderjs.getCustomGeometryCount(settingRecord);
  var match = _initBufferData(geometryPointCount, geometryCount);
  state[/* customGeometryRecord */24] = /* Some */[/* record */[
      /* index */0,
      /* buffer */match[0],
      /* vertices */match[1],
      /* texCoords */match[2],
      /* normals */match[3],
      /* indices */match[4],
      /* verticesInfos */match[5],
      /* texCoordsInfos */match[6],
      /* normalsInfos */match[7],
      /* indicesInfos */match[8],
      /* verticesOffset */0,
      /* texCoordsOffset */0,
      /* normalsOffset */0,
      /* indicesOffset */0,
      /* disposeCount */0,
      /* gameObjectMap */SparseMapService$WonderCommonlib.createEmpty(/* () */0),
      /* groupCountMap */SparseMapService$WonderCommonlib.createEmpty(/* () */0),
      /* disposedIndexArray */ArrayService$WonderCommonlib.createEmpty(/* () */0),
      /* disposedIndexMap */SparseMapService$WonderCommonlib.createEmpty(/* () */0),
      /* aliveIndexArray */ArrayService$WonderCommonlib.createEmpty(/* () */0)
    ]];
  return state;
}

function deepCopyForRestore(state) {
  var record = getRecord(state);
  var index = record[/* index */0];
  var verticesOffset = record[/* verticesOffset */10];
  var texCoordsOffset = record[/* texCoordsOffset */11];
  var normalsOffset = record[/* normalsOffset */12];
  var indicesOffset = record[/* indicesOffset */13];
  var disposeCount = record[/* disposeCount */14];
  var disposedIndexArray = record[/* disposedIndexArray */17];
  var disposedIndexMap = record[/* disposedIndexMap */18];
  var newrecord = Caml_array.caml_array_dup(state);
  newrecord[/* customGeometryRecord */24] = /* Some */[/* record */[
      /* index */index,
      /* buffer */record[/* buffer */1],
      /* vertices */CopyTypeArrayService$Wonderjs.copyFloat32ArrayWithEndIndex(Caml_int32.imul(index, BufferCustomGeometryService$Wonderjs.getVertexSize(/* () */0)), record[/* vertices */2]),
      /* texCoords */CopyTypeArrayService$Wonderjs.copyFloat32ArrayWithEndIndex(Caml_int32.imul(index, BufferCustomGeometryService$Wonderjs.getTexCoordsSize(/* () */0)), record[/* texCoords */3]),
      /* normals */CopyTypeArrayService$Wonderjs.copyFloat32ArrayWithEndIndex(Caml_int32.imul(index, BufferCustomGeometryService$Wonderjs.getVertexSize(/* () */0)), record[/* normals */4]),
      /* indices */CopyTypeArrayService$Wonderjs.copyUint16ArrayWithEndIndex(Caml_int32.imul(index, BufferCustomGeometryService$Wonderjs.getIndexSize(/* () */0)), record[/* indices */5]),
      /* verticesInfos */record[/* verticesInfos */6],
      /* texCoordsInfos */record[/* texCoordsInfos */7],
      /* normalsInfos */record[/* normalsInfos */8],
      /* indicesInfos */record[/* indicesInfos */9],
      /* verticesOffset */verticesOffset,
      /* texCoordsOffset */texCoordsOffset,
      /* normalsOffset */normalsOffset,
      /* indicesOffset */indicesOffset,
      /* disposeCount */disposeCount,
      /* gameObjectMap */SparseMapService$Wonderjs.copy(record[/* gameObjectMap */15]),
      /* groupCountMap */SparseMapService$Wonderjs.copy(record[/* groupCountMap */16]),
      /* disposedIndexArray */disposedIndexArray.slice(),
      /* disposedIndexMap */SparseMapService$Wonderjs.copy(disposedIndexMap),
      /* aliveIndexArray */record[/* aliveIndexArray */19].slice()
    ]];
  return newrecord;
}

export {
  getRecord ,
  setAllTypeArrDataToDefault ,
  _initBufferData ,
  create ,
  deepCopyForRestore ,
  
}
/* OptionService-Wonderjs Not a pure module */
