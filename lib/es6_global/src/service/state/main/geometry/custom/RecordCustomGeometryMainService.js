// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as OptionService$Wonderjs                        from "../../../../atom/OptionService.js";
import * as SparseMapService$Wonderjs                     from "../../../../atom/SparseMapService.js";
import * as ArrayService$WonderCommonlib                  from "../../../../../../../../node_modules/wonder-commonlib/lib/es6_global/src/ArrayService.js";
import * as BufferSettingService$Wonderjs                 from "../../../../record/main/setting/BufferSettingService.js";
import * as CopyArrayBufferService$Wonderjs               from "../../../../primitive/copy/CopyArrayBufferService.js";
import * as SparseMapService$WonderCommonlib              from "../../../../../../../../node_modules/wonder-commonlib/lib/es6_global/src/SparseMapService.js";
import * as BufferCustomGeometryService$Wonderjs          from "../../../../record/main/geometry/custom/BufferCustomGeometryService.js";
import * as CreateTypeArrayCustomGeometryService$Wonderjs from "../../../../record/all/geometry/custom/CreateTypeArrayCustomGeometryService.js";

function getRecord(param) {
  return OptionService$Wonderjs.unsafeGet(param[/* customGeometryRecord */21]);
}

function _initBufferData(count) {
  var buffer = BufferCustomGeometryService$Wonderjs.createBuffer(count);
  var match = CreateTypeArrayCustomGeometryService$Wonderjs.createTypeArrays(buffer, count);
  return /* tuple */[
          buffer,
          match[0],
          match[1],
          match[2],
          match[3],
          match[4],
          match[5]
        ];
}

function create(state) {
  var geometryDataBufferCount = BufferSettingService$Wonderjs.getCustomGeometryPointDataBufferCount(state[/* settingRecord */0]);
  var match = _initBufferData(geometryDataBufferCount);
  state[/* customGeometryRecord */21] = /* Some */[/* record */[
      /* index */0,
      /* buffer */match[0],
      /* vertices */match[1],
      /* normals */match[2],
      /* indices */match[3],
      /* verticesInfos */match[4],
      /* normalsInfos */match[5],
      /* indicesInfos */match[6],
      /* verticesOffset */0,
      /* normalsOffset */0,
      /* indicesOffset */0,
      /* disposeCount */0,
      /* gameObjectMap */SparseMapService$WonderCommonlib.createEmpty(/* () */0),
      /* groupCountMap */SparseMapService$WonderCommonlib.createEmpty(/* () */0),
      /* disposedIndexArray */ArrayService$WonderCommonlib.createEmpty(/* () */0),
      /* disposedIndexMap */SparseMapService$WonderCommonlib.createEmpty(/* () */0),
      /* aliveIndexArray */ArrayService$WonderCommonlib.createEmpty(/* () */0)
    ]];
  return state;
}

function deepCopyForRestore(state) {
  var record = getRecord(state);
  var index = record[/* index */0];
  var verticesOffset = record[/* verticesOffset */8];
  var normalsOffset = record[/* normalsOffset */9];
  var indicesOffset = record[/* indicesOffset */10];
  var disposeCount = record[/* disposeCount */11];
  var disposedIndexArray = record[/* disposedIndexArray */14];
  var disposedIndexMap = record[/* disposedIndexMap */15];
  var newrecord = state.slice();
  newrecord[/* customGeometryRecord */21] = /* Some */[/* record */[
      /* index */index,
      /* buffer */CopyArrayBufferService$Wonderjs.copyArrayBuffer(record[/* buffer */1], BufferCustomGeometryService$Wonderjs.getTotalByteLength(index)),
      /* vertices */record[/* vertices */2],
      /* normals */record[/* normals */3],
      /* indices */record[/* indices */4],
      /* verticesInfos */record[/* verticesInfos */5],
      /* normalsInfos */record[/* normalsInfos */6],
      /* indicesInfos */record[/* indicesInfos */7],
      /* verticesOffset */verticesOffset,
      /* normalsOffset */normalsOffset,
      /* indicesOffset */indicesOffset,
      /* disposeCount */disposeCount,
      /* gameObjectMap */SparseMapService$Wonderjs.copy(record[/* gameObjectMap */12]),
      /* groupCountMap */SparseMapService$Wonderjs.copy(record[/* groupCountMap */13]),
      /* disposedIndexArray */disposedIndexArray.slice(),
      /* disposedIndexMap */SparseMapService$Wonderjs.copy(disposedIndexMap),
      /* aliveIndexArray */record[/* aliveIndexArray */16].slice()
    ]];
  return newrecord;
}

export {
  getRecord          ,
  _initBufferData    ,
  create             ,
  deepCopyForRestore ,
  
}
/* OptionService-Wonderjs Not a pure module */
