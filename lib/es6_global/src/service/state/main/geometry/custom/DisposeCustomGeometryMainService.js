// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as Contract$WonderLog                       from "../../../../../../../../node_modules/wonder-log/lib/es6_global/src/Contract.js";
import * as ArrayService$Wonderjs                    from "../../../../atom/ArrayService.js";
import * as StateDataMain$Wonderjs                   from "../../data/StateDataMain.js";
import * as IsDebugMainService$Wonderjs              from "../../state/IsDebugMainService.js";
import * as ArrayService$WonderCommonlib             from "../../../../../../../../node_modules/wonder-commonlib/lib/es6_global/src/ArrayService.js";
import * as DisposeComponentService$Wonderjs         from "../../../../primitive/component/DisposeComponentService.js";
import * as SparseMapService$WonderCommonlib         from "../../../../../../../../node_modules/wonder-commonlib/lib/es6_global/src/SparseMapService.js";
import * as GroupCustomGeometryService$Wonderjs      from "../../../../record/main/geometry/custom/GroupCustomGeometryService.js";
import * as RecordCustomGeometryMainService$Wonderjs from "./RecordCustomGeometryMainService.js";

function isAlive(geometry, param) {
  var disposedIndexArray = param[/* disposedIndexArray */17];
  return DisposeComponentService$Wonderjs.isAlive(geometry, disposedIndexArray);
}

function _disposeData(geometry, customGeometryRecord) {
  var disposeCount = customGeometryRecord[/* disposeCount */14];
  var disposedIndexArray = customGeometryRecord[/* disposedIndexArray */17];
  var disposedIndexMap = customGeometryRecord[/* disposedIndexMap */18];
  var newrecord = customGeometryRecord.slice();
  newrecord[/* disposeCount */14] = disposeCount + 1 | 0;
  newrecord[/* gameObjectMap */15] = DisposeComponentService$Wonderjs.disposeSparseMapData(geometry, customGeometryRecord[/* gameObjectMap */15]);
  newrecord[/* groupCountMap */16] = DisposeComponentService$Wonderjs.disposeSparseMapData(geometry, customGeometryRecord[/* groupCountMap */16]);
  newrecord[/* disposedIndexArray */17] = ArrayService$Wonderjs.push(geometry, disposedIndexArray);
  newrecord[/* disposedIndexMap */18] = SparseMapService$WonderCommonlib.set(geometry, /* true */1, disposedIndexMap);
  return newrecord;
}

function handleBatchDisposeComponent(geometryArray, state) {
  Contract$WonderLog.requireCheck((function () {
          return DisposeComponentService$Wonderjs.checkComponentShouldAliveWithBatchDispose(geometryArray, isAlive, RecordCustomGeometryMainService$Wonderjs.getRecord(state));
        }), IsDebugMainService$Wonderjs.getIsDebug(StateDataMain$Wonderjs.stateData));
  var customGeometryRecord = RecordCustomGeometryMainService$Wonderjs.getRecord(state);
  var match = ArrayService$WonderCommonlib.reduceOneParam((function (param, geometry) {
          var customGeometryRecord = param[1];
          var geometryNeedDisposeVboBufferArr = param[0];
          var match = GroupCustomGeometryService$Wonderjs.isGroupGeometry(geometry, customGeometryRecord);
          if (match !== 0) {
            return /* tuple */[
                    geometryNeedDisposeVboBufferArr,
                    GroupCustomGeometryService$Wonderjs.decreaseGroupCount(geometry, customGeometryRecord)
                  ];
          } else {
            return /* tuple */[
                    ArrayService$Wonderjs.push(geometry, geometryNeedDisposeVboBufferArr),
                    _disposeData(geometry, customGeometryRecord)
                  ];
          }
        }), /* tuple */[
        /* int array */[],
        customGeometryRecord
      ], geometryArray);
  var newrecord = state.slice();
  return /* tuple */[
          (newrecord[/* customGeometryRecord */24] = /* Some */[match[1]], newrecord),
          match[0]
        ];
}

function isNotDisposed(param) {
  var disposedIndexArray = param[/* disposedIndexArray */17];
  return +(disposedIndexArray.length === 0);
}

export {
  isAlive                     ,
  _disposeData                ,
  handleBatchDisposeComponent ,
  isNotDisposed               ,
  
}
/* Contract-WonderLog Not a pure module */
