// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as Contract$WonderLog                    from "../../../../../../../node_modules/wonder-log/lib/es6_global/src/Contract.js";
import * as ArrayService$Wonderjs                 from "../../../atom/ArrayService.js";
import * as MainStateData$Wonderjs                from "../data/MainStateData.js";
import * as IsDebugMainService$Wonderjs           from "../state/IsDebugMainService.js";
import * as ArrayService$WonderCommonlib          from "../../../../../../../node_modules/wonder-commonlib/lib/es6_global/src/ArrayService.js";
import * as GroupGeometryService$Wonderjs         from "../../../record/geometry/GroupGeometryService.js";
import * as PoolVboBufferService$Wonderjs         from "../../../record/vboBuffer/PoolVboBufferService.js";
import * as DisposeComponentService$Wonderjs      from "../../../primitiive/component/DisposeComponentService.js";
import * as DisposeVboBufferService$Wonderjs      from "../../../record/vboBuffer/DisposeVboBufferService.js";
import * as SparseMapService$WonderCommonlib      from "../../../../../../../node_modules/wonder-commonlib/lib/es6_global/src/SparseMapService.js";
import * as TypeArrayPoolGeometryService$Wonderjs from "../../../record/geometry/TypeArrayPoolGeometryService.js";

function isAlive(transform, param) {
  return DisposeComponentService$Wonderjs.isAlive(transform, param[/* disposedIndexArray */7]);
}

function _disposeData(geometry, maxTypeArrayPoolSize, param) {
  var boxGeometryRecord = param[2];
  var indicesMap = boxGeometryRecord[/* indicesMap */3];
  var normalsMap = boxGeometryRecord[/* normalsMap */2];
  var verticesMap = boxGeometryRecord[/* verticesMap */1];
  var vboBufferRecord = DisposeVboBufferService$Wonderjs.disposeGeometryBufferData(geometry, param[0]);
  var typeArrayPoolRecord = TypeArrayPoolGeometryService$Wonderjs.addTypeArrayToPool(geometry, maxTypeArrayPoolSize, /* tuple */[
        verticesMap,
        normalsMap,
        indicesMap
      ], param[1]);
  return /* tuple */[
          vboBufferRecord,
          typeArrayPoolRecord,
          /* record */[
            /* index */boxGeometryRecord[/* index */0],
            /* verticesMap */DisposeComponentService$Wonderjs.disposeSparseMapData(geometry, verticesMap),
            /* normalsMap */DisposeComponentService$Wonderjs.disposeSparseMapData(geometry, normalsMap),
            /* indicesMap */DisposeComponentService$Wonderjs.disposeSparseMapData(geometry, indicesMap),
            /* computeDataFuncMap */DisposeComponentService$Wonderjs.disposeSparseMapData(geometry, boxGeometryRecord[/* computeDataFuncMap */4]),
            /* configDataMap */DisposeComponentService$Wonderjs.disposeSparseMapData(geometry, boxGeometryRecord[/* configDataMap */5]),
            /* gameObjectMap */DisposeComponentService$Wonderjs.disposeSparseMapData(geometry, boxGeometryRecord[/* gameObjectMap */6]),
            /* disposedIndexArray */boxGeometryRecord[/* disposedIndexArray */7],
            /* isInitMap */DisposeComponentService$Wonderjs.disposeSparseMapData(geometry, boxGeometryRecord[/* isInitMap */8]),
            /* groupCountMap */SparseMapService$WonderCommonlib.set(geometry, 0, boxGeometryRecord[/* groupCountMap */9])
          ]
        ];
}

function handleDisposeComponent(geometry, maxTypeArrayPoolSize, state) {
  var boxGeometryRecord = state[/* boxGeometryRecord */20];
  Contract$WonderLog.requireCheck((function () {
          return DisposeComponentService$Wonderjs.checkComponentShouldAlive(geometry, isAlive, boxGeometryRecord);
        }), IsDebugMainService$Wonderjs.getIsDebug(MainStateData$Wonderjs.stateData));
  var match = GroupGeometryService$Wonderjs.isGroupGeometry(geometry, boxGeometryRecord);
  if (match !== 0) {
    var newrecord = state.slice();
    newrecord[/* boxGeometryRecord */20] = GroupGeometryService$Wonderjs.decreaseGroupCount(geometry, boxGeometryRecord);
    return newrecord;
  } else {
    var vboBufferRecord = PoolVboBufferService$Wonderjs.addGeometryBufferToPool(geometry, state[/* vboBufferRecord */30]);
    var match$1 = _disposeData(geometry, maxTypeArrayPoolSize, /* tuple */[
          vboBufferRecord,
          state[/* typeArrayPoolRecord */32],
          boxGeometryRecord
        ]);
    var newrecord$1 = state.slice();
    var newrecord$2 = match$1[2].slice();
    newrecord$2[/* disposedIndexArray */7] = ArrayService$Wonderjs.push(geometry, boxGeometryRecord[/* disposedIndexArray */7]);
    newrecord$1[/* boxGeometryRecord */20] = newrecord$2;
    newrecord$1[/* vboBufferRecord */30] = match$1[0];
    newrecord$1[/* typeArrayPoolRecord */32] = match$1[1];
    return newrecord$1;
  }
}

function handleBatchDisposeComponent(geometryArray, _, maxTypeArrayPoolSize, state) {
  var boxGeometryRecord = state[/* boxGeometryRecord */20];
  Contract$WonderLog.requireCheck((function () {
          return DisposeComponentService$Wonderjs.checkComponentShouldAliveWithBatchDispose(geometryArray, isAlive, boxGeometryRecord);
        }), IsDebugMainService$Wonderjs.getIsDebug(MainStateData$Wonderjs.stateData));
  var disposedIndexArray = boxGeometryRecord[/* disposedIndexArray */7];
  var match = ArrayService$WonderCommonlib.reduceOneParam((function (param, geometry) {
          var boxGeometryRecord = param[2];
          var typeArrayPoolRecord = param[1];
          var vboBufferRecord = param[0];
          var match = GroupGeometryService$Wonderjs.isGroupGeometry(geometry, boxGeometryRecord);
          if (match !== 0) {
            return /* tuple */[
                    vboBufferRecord,
                    typeArrayPoolRecord,
                    GroupGeometryService$Wonderjs.decreaseGroupCount(geometry, boxGeometryRecord)
                  ];
          } else {
            var vboBufferRecord$1 = PoolVboBufferService$Wonderjs.addGeometryBufferToPool(geometry, vboBufferRecord);
            var newrecord = boxGeometryRecord.slice();
            newrecord[/* disposedIndexArray */7] = ArrayService$Wonderjs.push(geometry, disposedIndexArray);
            return _disposeData(geometry, maxTypeArrayPoolSize, /* tuple */[
                        vboBufferRecord$1,
                        typeArrayPoolRecord,
                        newrecord
                      ]);
          }
        }), /* tuple */[
        state[/* vboBufferRecord */30],
        state[/* typeArrayPoolRecord */32],
        boxGeometryRecord
      ], geometryArray);
  var newrecord = state.slice();
  newrecord[/* boxGeometryRecord */20] = match[2];
  newrecord[/* vboBufferRecord */30] = match[0];
  newrecord[/* typeArrayPoolRecord */32] = match[1];
  return newrecord;
}

function isNotDisposed(param) {
  return +(param[/* boxGeometryRecord */20][/* disposedIndexArray */7].length === 0);
}

export {
  isAlive                     ,
  _disposeData                ,
  handleDisposeComponent      ,
  handleBatchDisposeComponent ,
  isNotDisposed               ,
  
}
/* Contract-WonderLog Not a pure module */
