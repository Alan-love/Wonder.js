// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as Curry                                             from "../../../../../../../node_modules/bs-platform/lib/es6/curry.js";
import * as Contract$WonderLog                                from "../../../../../../../node_modules/wonder-log/lib/es6_global/src/Contract.js";
import * as ArrayService$Wonderjs                             from "../../../atom/ArrayService.js";
import * as MainStateData$Wonderjs                            from "../data/MainStateData.js";
import * as IsDebugMainService$Wonderjs                       from "../state/IsDebugMainService.js";
import * as MemorySettingService$Wonderjs                     from "../../../record/setting/MemorySettingService.js";
import * as PoolVboBufferService$Wonderjs                     from "../../../record/vboBuffer/PoolVboBufferService.js";
import * as TypeArrayPoolService$Wonderjs                     from "../../../record/typeArrayPool/TypeArrayPoolService.js";
import * as ReduceStateMainService$Wonderjs                   from "../array/ReduceStateMainService.js";
import * as DisposeComponentService$Wonderjs                  from "../../../primitiive/component/DisposeComponentService.js";
import * as DisposeVboBufferService$Wonderjs                  from "../../../record/vboBuffer/DisposeVboBufferService.js";
import * as SparseMapService$WonderCommonlib                  from "../../../../../../../node_modules/wonder-commonlib/lib/es6_global/src/SparseMapService.js";
import * as ObjectInstanceArraySourceInstanceService$Wonderjs from "../../../record/instance/sourceInstance/ObjectInstanceArraySourceInstanceService.js";

function isAlive(sourceInstance, param) {
  return DisposeComponentService$Wonderjs.isAlive(sourceInstance, param[/* disposedIndexArray */6]);
}

function _disposeObjectInstanceGameObject(sourceInstance, batchDisposeGameObjectFunc, state) {
  var objectInstanceGameObjectArr = ObjectInstanceArraySourceInstanceService$Wonderjs.unsafeGetObjectInstanceArray(sourceInstance, state[/* sourceInstanceRecord */6][/* objectInstanceArrayMap */1]).slice();
  return Curry._2(batchDisposeGameObjectFunc, objectInstanceGameObjectArr, state);
}

function _disposeData(sourceInstance, batchDisposeGameObjectFunc, state) {
  var newrecord = state.slice();
  var state$1 = _disposeObjectInstanceGameObject(sourceInstance, batchDisposeGameObjectFunc, (newrecord[/* vboBufferRecord */30] = DisposeVboBufferService$Wonderjs.disposeInstanceBufferData(sourceInstance, state[/* vboBufferRecord */30]), newrecord));
  var sourceInstanceRecord = state$1[/* sourceInstanceRecord */6];
  var matrixFloat32ArrayMap = sourceInstanceRecord[/* matrixFloat32ArrayMap */3];
  var match = SparseMapService$WonderCommonlib.get(sourceInstance, matrixFloat32ArrayMap);
  if (match) {
    TypeArrayPoolService$Wonderjs.addFloat32TypeArrayToPool(match[0], MemorySettingService$Wonderjs.getMaxBigTypeArrayPoolSize(state$1[/* settingRecord */0]), TypeArrayPoolService$Wonderjs.getFloat32ArrayPoolMap(state$1[/* typeArrayPoolRecord */32]));
  }
  var newrecord$1 = state$1.slice();
  newrecord$1[/* sourceInstanceRecord */6] = /* record */[
    /* index */sourceInstanceRecord[/* index */0],
    /* objectInstanceArrayMap */DisposeComponentService$Wonderjs.disposeSparseMapData(sourceInstance, sourceInstanceRecord[/* objectInstanceArrayMap */1]),
    /* matrixInstanceBufferCapacityMap */DisposeComponentService$Wonderjs.disposeSparseMapData(sourceInstance, sourceInstanceRecord[/* matrixInstanceBufferCapacityMap */2]),
    /* matrixFloat32ArrayMap */DisposeComponentService$Wonderjs.disposeSparseMapData(sourceInstance, matrixFloat32ArrayMap),
    /* isTransformStaticMap */DisposeComponentService$Wonderjs.disposeSparseMapData(sourceInstance, sourceInstanceRecord[/* isTransformStaticMap */4]),
    /* isSendTransformMatrixDataMap */DisposeComponentService$Wonderjs.disposeSparseMapData(sourceInstance, sourceInstanceRecord[/* isSendTransformMatrixDataMap */5]),
    /* disposedIndexArray */sourceInstanceRecord[/* disposedIndexArray */6],
    /* gameObjectMap */DisposeComponentService$Wonderjs.disposeSparseMapData(sourceInstance, sourceInstanceRecord[/* gameObjectMap */7])
  ];
  return newrecord$1;
}

function handleDisposeComponent(sourceInstance, batchDisposeGameObjectFunc, state) {
  var sourceInstanceRecord = state[/* sourceInstanceRecord */6];
  Contract$WonderLog.requireCheck((function () {
          return DisposeComponentService$Wonderjs.checkComponentShouldAlive(sourceInstance, isAlive, sourceInstanceRecord);
        }), IsDebugMainService$Wonderjs.getIsDebug(MainStateData$Wonderjs.stateData));
  var newrecord = state.slice();
  newrecord[/* vboBufferRecord */30] = PoolVboBufferService$Wonderjs.addInstanceBufferToPool(sourceInstance, state[/* vboBufferRecord */30]);
  var state$1 = _disposeData(sourceInstance, batchDisposeGameObjectFunc, newrecord);
  var newrecord$1 = state$1.slice();
  var newrecord$2 = state$1[/* sourceInstanceRecord */6].slice();
  newrecord$2[/* disposedIndexArray */6] = ArrayService$Wonderjs.push(sourceInstance, sourceInstanceRecord[/* disposedIndexArray */6]);
  newrecord$1[/* sourceInstanceRecord */6] = newrecord$2;
  return newrecord$1;
}

function handleBatchDisposeComponent(sourceInstanceArray, _, batchDisposeGameObjectFunc, state) {
  var vboBufferRecord = state[/* vboBufferRecord */30];
  var sourceInstanceRecord = state[/* sourceInstanceRecord */6];
  Contract$WonderLog.requireCheck((function () {
          return DisposeComponentService$Wonderjs.checkComponentShouldAliveWithBatchDispose(sourceInstanceArray, isAlive, sourceInstanceRecord);
        }), IsDebugMainService$Wonderjs.getIsDebug(MainStateData$Wonderjs.stateData));
  var newrecord = state.slice();
  var newrecord$1 = sourceInstanceRecord.slice();
  newrecord$1[/* disposedIndexArray */6] = sourceInstanceRecord[/* disposedIndexArray */6].concat(sourceInstanceArray);
  newrecord[/* sourceInstanceRecord */6] = newrecord$1;
  return ReduceStateMainService$Wonderjs.reduceState((function (state, sourceInstance) {
                var newrecord = state.slice();
                return _disposeData(sourceInstance, batchDisposeGameObjectFunc, (newrecord[/* vboBufferRecord */30] = PoolVboBufferService$Wonderjs.addInstanceBufferToPool(sourceInstance, vboBufferRecord), newrecord));
              }), newrecord, sourceInstanceArray);
}

export {
  isAlive                          ,
  _disposeObjectInstanceGameObject ,
  _disposeData                     ,
  handleDisposeComponent           ,
  handleBatchDisposeComponent      ,
  
}
/* Contract-WonderLog Not a pure module */
