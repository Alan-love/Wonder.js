// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as Caml_array                                        from "../../../../../../../node_modules/bs-platform/lib/es6/caml_array.js";
import * as Log$WonderLog                                     from "../../../../../../../node_modules/wonder-log/lib/es6_global/src/Log.js";
import * as Contract$WonderLog                                from "../../../../../../../node_modules/wonder-log/lib/es6_global/src/Contract.js";
import * as ArrayService$Wonderjs                             from "../../../atom/ArrayService.js";
import * as MainStateData$Wonderjs                            from "../data/MainStateData.js";
import * as DisposeECSService$Wonderjs                        from "../../../primitiive/ecs/DisposeECSService.js";
import * as IsDebugMainService$Wonderjs                       from "../state/IsDebugMainService.js";
import * as ArrayService$WonderCommonlib                      from "../../../../../../../node_modules/wonder-commonlib/lib/es6_global/src/ArrayService.js";
import * as ReduceStateMainService$Wonderjs                   from "../array/ReduceStateMainService.js";
import * as DisposeComponentService$Wonderjs                  from "../../../primitiive/component/DisposeComponentService.js";
import * as SparseMapService$WonderCommonlib                  from "../../../../../../../node_modules/wonder-commonlib/lib/es6_global/src/SparseMapService.js";
import * as GameObjectObjectInstanceService$Wonderjs          from "../../../record/instance/objectInstance/GameObjectObjectInstanceService.js";
import * as ObjectInstanceArraySourceInstanceService$Wonderjs from "../../../record/instance/sourceInstance/ObjectInstanceArraySourceInstanceService.js";

function isAlive(objectInstance, objectInstanceRecord) {
  return DisposeComponentService$Wonderjs.isAlive(objectInstance, objectInstanceRecord[/* disposedIndexArray */2]);
}

function _unsafeGetSourceInstance(objectInstance, param) {
  return Contract$WonderLog.ensureCheck((function (sourceInstance) {
                return Contract$WonderLog.test(Log$WonderLog.buildAssertMessage("souceInstance exist", "not"), (function () {
                              return Contract$WonderLog.assertNullableExist(sourceInstance);
                            }));
              }), IsDebugMainService$Wonderjs.getIsDebug(MainStateData$Wonderjs.stateData), SparseMapService$WonderCommonlib.unsafeGet(objectInstance, param[/* sourceInstanceMap */1]));
}

function _disposeData(objectInstance, state) {
  var objectInstanceRecord = state[/* objectInstanceRecord */7];
  var newrecord = state.slice();
  newrecord[/* objectInstanceRecord */7] = /* record */[
    /* index */objectInstanceRecord[/* index */0],
    /* sourceInstanceMap */DisposeComponentService$Wonderjs.disposeSparseMapData(objectInstance, objectInstanceRecord[/* sourceInstanceMap */1]),
    /* disposedIndexArray */objectInstanceRecord[/* disposedIndexArray */2],
    /* gameObjectMap */DisposeComponentService$Wonderjs.disposeSparseMapData(objectInstance, objectInstanceRecord[/* gameObjectMap */3])
  ];
  return newrecord;
}

function _disposeObjectInstance(sourceInstance, objectInstanceUid, state) {
  DisposeComponentService$Wonderjs.removeFromArray(objectInstanceUid, ObjectInstanceArraySourceInstanceService$Wonderjs.unsafeGetObjectInstanceArray(sourceInstance, state[/* sourceInstanceRecord */6][/* objectInstanceArrayMap */1]));
  return state;
}

function handleDisposeComponent(objectInstance, state) {
  var objectInstanceRecord = state[/* objectInstanceRecord */7];
  Contract$WonderLog.requireCheck((function () {
          return DisposeComponentService$Wonderjs.checkComponentShouldAlive(objectInstance, isAlive, objectInstanceRecord);
        }), IsDebugMainService$Wonderjs.getIsDebug(MainStateData$Wonderjs.stateData));
  var state$1 = _disposeData(objectInstance, _disposeObjectInstance(_unsafeGetSourceInstance(objectInstance, objectInstanceRecord), GameObjectObjectInstanceService$Wonderjs.unsafeGetGameObject(objectInstance, objectInstanceRecord), state));
  var newrecord = state$1.slice();
  newrecord[/* objectInstanceRecord */7] = /* record */[
    /* index */objectInstanceRecord[/* index */0],
    /* sourceInstanceMap */objectInstanceRecord[/* sourceInstanceMap */1],
    /* disposedIndexArray */ArrayService$Wonderjs.push(objectInstance, objectInstanceRecord[/* disposedIndexArray */2]),
    /* gameObjectMap */objectInstanceRecord[/* gameObjectMap */3]
  ];
  return newrecord;
}

function _batchDisposeObjectInstance(sourceInstance, isUidDisposedMap, disposedUidArr, state) {
  SparseMapService$WonderCommonlib.set(sourceInstance, DisposeComponentService$Wonderjs.batchRemoveFromArray(isUidDisposedMap, disposedUidArr), state[/* sourceInstanceRecord */6][/* objectInstanceArrayMap */1]);
  return state;
}

function handleBatchDisposeComponent(objectInstanceArray, _, state) {
  var objectInstanceRecord = state[/* objectInstanceRecord */7];
  Contract$WonderLog.requireCheck((function () {
          var objectInstanceLen = objectInstanceArray.length;
          Contract$WonderLog.test(Log$WonderLog.buildAssertMessage("objectInstanceArray has one objectInstance at least", "" + (String(objectInstanceLen) + "")), (function () {
                  return Contract$WonderLog.Operators[/* > */5](objectInstanceLen, 0);
                }));
          return Contract$WonderLog.test(Log$WonderLog.buildAssertMessage("all objectInstance belong to the same sourceInstance", "not"), (function () {
                        var sourceInstance = _unsafeGetSourceInstance(Caml_array.caml_array_get(objectInstanceArray, 0), objectInstanceRecord);
                        return ArrayService$WonderCommonlib.forEach((function (objectInstance) {
                                      return Contract$WonderLog.Operators[/* = */0](_unsafeGetSourceInstance(objectInstance, objectInstanceRecord), sourceInstance);
                                    }), objectInstanceArray);
                      }));
        }), IsDebugMainService$Wonderjs.getIsDebug(MainStateData$Wonderjs.stateData));
  var objectInstanceRecord_000 = /* index */objectInstanceRecord[/* index */0];
  var objectInstanceRecord_001 = /* sourceInstanceMap */objectInstanceRecord[/* sourceInstanceMap */1];
  var objectInstanceRecord_002 = /* disposedIndexArray */objectInstanceRecord[/* disposedIndexArray */2].concat(objectInstanceArray);
  var objectInstanceRecord_003 = /* gameObjectMap */objectInstanceRecord[/* gameObjectMap */3];
  var objectInstanceRecord$1 = /* record */[
    objectInstanceRecord_000,
    objectInstanceRecord_001,
    objectInstanceRecord_002,
    objectInstanceRecord_003
  ];
  var disposedUidArr = objectInstanceArray.map((function (objectInstance) {
          return GameObjectObjectInstanceService$Wonderjs.unsafeGetGameObject(objectInstance, objectInstanceRecord$1);
        }));
  var isGameObjectDisposedMap = DisposeECSService$Wonderjs.buildMapFromArray(disposedUidArr, SparseMapService$WonderCommonlib.createEmpty(/* () */0));
  var sourceInstance = _unsafeGetSourceInstance(Caml_array.caml_array_get(objectInstanceArray, 0), objectInstanceRecord$1);
  var newrecord = state.slice();
  newrecord[/* objectInstanceRecord */7] = objectInstanceRecord$1;
  var state$1 = _batchDisposeObjectInstance(sourceInstance, isGameObjectDisposedMap, disposedUidArr, newrecord);
  return ReduceStateMainService$Wonderjs.reduceState((function (state, objectInstance) {
                return _disposeData(objectInstance, state);
              }), state$1, objectInstanceArray);
}

export {
  isAlive                     ,
  _unsafeGetSourceInstance    ,
  _disposeData                ,
  _disposeObjectInstance      ,
  handleDisposeComponent      ,
  _batchDisposeObjectInstance ,
  handleBatchDisposeComponent ,
  
}
/* Log-WonderLog Not a pure module */
