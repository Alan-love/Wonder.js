// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as Log$WonderLog                                           from "../../../../../../../../node_modules/wonder-log/lib/es6_global/src/Log.js";
import * as Contract$WonderLog                                      from "../../../../../../../../node_modules/wonder-log/lib/es6_global/src/Contract.js";
import * as MainStateData$Wonderjs                                  from "../../data/MainStateData.js";
import * as IsDebugMainService$Wonderjs                             from "../../state/IsDebugMainService.js";
import * as ArrayService$WonderCommonlib                            from "../../../../../../../../node_modules/wonder-commonlib/lib/es6_global/src/ArrayService.js";
import * as GLSLLocationMainService$Wonderjs                        from "../../location/GLSLLocationMainService.js";
import * as SendGLSLDataMainService$Wonderjs                        from "../SendGLSLDataMainService.js";
import * as SparseMapService$WonderCommonlib                        from "../../../../../../../../node_modules/wonder-commonlib/lib/es6_global/src/SparseMapService.js";
import * as HandleShaderConfigDataMapService$Wonderjs               from "../../../../primitiive/sender/HandleShaderConfigDataMapService.js";
import * as HandleUniformShaderCachableMainService$Wonderjs         from "./HandleUniformShaderCachableMainService.js";
import * as HandleLightUniformConfigDataMainService$Wonderjs        from "./light/HandleLightUniformConfigDataMainService.js";
import * as HandleModelUniformConfigDataMainService$Wonderjs        from "./model/HandleModelUniformConfigDataMainService.js";
import * as HandleCameraUniformConfigDataMainService$Wonderjs       from "./camera/HandleCameraUniformConfigDataMainService.js";
import * as HandleUniformShaderNoCachableMainService$Wonderjs       from "./HandleUniformShaderNoCachableMainService.js";
import * as HandleUniformRenderObjectModelMainService$Wonderjs      from "./HandleUniformRenderObjectModelMainService.js";
import * as HandleMaterialUniformConfigDataMainService$Wonderjs     from "./material/HandleMaterialUniformConfigDataMainService.js";
import * as HandleUniformInstanceNoCachableMainService$Wonderjs     from "./HandleUniformInstanceNoCachableMainService.js";
import * as HandleUniformRenderObjectMaterialMainService$Wonderjs   from "./HandleUniformRenderObjectMaterialMainService.js";
import * as HandleUniformShaderCachableFunctionMainService$Wonderjs from "./HandleUniformShaderCachableFunctionMainService.js";

function _setToUniformSendMap(shaderIndex, param, state, param$1) {
  HandleUniformRenderObjectModelMainService$Wonderjs.setToUniformSendMap(shaderIndex, param[/* uniformRenderObjectSendModelDataMap */3], param$1[0]);
  HandleUniformRenderObjectMaterialMainService$Wonderjs.setToUniformSendMap(shaderIndex, param[/* uniformRenderObjectSendMaterialDataMap */4], param$1[1]);
  HandleUniformShaderNoCachableMainService$Wonderjs.setToUniformSendMap(shaderIndex, param[/* uniformShaderSendNoCachableDataMap */5], param$1[2]);
  HandleUniformShaderCachableMainService$Wonderjs.setToUniformSendMap(shaderIndex, param[/* uniformShaderSendCachableDataMap */6], param$1[3]);
  HandleUniformShaderCachableFunctionMainService$Wonderjs.setToUniformSendMap(shaderIndex, param[/* uniformShaderSendCachableFunctionDataMap */7], param$1[4]);
  HandleUniformInstanceNoCachableMainService$Wonderjs.setToUniformSendMap(shaderIndex, param[/* uniformInstanceSendNoCachableDataMap */8], param$1[5]);
  return state;
}

function _readUniforms(param, sendDataArrTuple, uniforms) {
  if (uniforms) {
    var uniformCacheMap = param[3];
    var uniformLocationMap = param[2];
    var program = param[1];
    var gl = param[0];
    return ArrayService$WonderCommonlib.reduceOneParam((function (sendDataArrTuple, param) {
                  var from = param[/* from */3];
                  var type_ = param[/* type_ */2];
                  var field = param[/* field */1];
                  var name = param[/* name */0];
                  switch (from) {
                    case "ambientLight" : 
                        return HandleLightUniformConfigDataMainService$Wonderjs.addAmbientLightSendData(/* tuple */[
                                    field,
                                    program,
                                    uniformCacheMap,
                                    uniformLocationMap
                                  ], sendDataArrTuple);
                    case "basicMaterial" : 
                        return HandleMaterialUniformConfigDataMainService$Wonderjs.addBasicMaterialSendData(/* tuple */[
                                    field,
                                    GLSLLocationMainService$Wonderjs.getUniformLocation(program, name, uniformLocationMap, gl),
                                    name,
                                    type_,
                                    uniformCacheMap
                                  ], sendDataArrTuple);
                    case "camera" : 
                        return HandleCameraUniformConfigDataMainService$Wonderjs.addCameraSendData(/* tuple */[
                                    field,
                                    GLSLLocationMainService$Wonderjs.getUniformLocation(program, name, uniformLocationMap, gl),
                                    name,
                                    type_,
                                    uniformCacheMap
                                  ], sendDataArrTuple);
                    case "directionLight" : 
                        return HandleLightUniformConfigDataMainService$Wonderjs.addDirectionLightSendData(/* tuple */[
                                    field,
                                    program,
                                    uniformCacheMap,
                                    uniformLocationMap
                                  ], sendDataArrTuple);
                    case "lightMaterial" : 
                        return HandleMaterialUniformConfigDataMainService$Wonderjs.addLightMaterialSendData(/* tuple */[
                                    field,
                                    GLSLLocationMainService$Wonderjs.getUniformLocation(program, name, uniformLocationMap, gl),
                                    name,
                                    type_,
                                    uniformCacheMap
                                  ], sendDataArrTuple);
                    case "model" : 
                        return HandleModelUniformConfigDataMainService$Wonderjs.addModelSendData(/* tuple */[
                                    field,
                                    GLSLLocationMainService$Wonderjs.getUniformLocation(program, name, uniformLocationMap, gl),
                                    name,
                                    type_,
                                    uniformCacheMap
                                  ], sendDataArrTuple);
                    case "pointLight" : 
                        return HandleLightUniformConfigDataMainService$Wonderjs.addPointLightSendData(/* tuple */[
                                    field,
                                    program,
                                    uniformCacheMap,
                                    uniformLocationMap
                                  ], sendDataArrTuple);
                    default:
                      return Log$WonderLog.fatal(Log$WonderLog.buildFatalMessage("_readUniforms", "unknow from:" + (String(from) + ""), "", "", ""));
                  }
                }), sendDataArrTuple, uniforms[0]);
  } else {
    return sendDataArrTuple;
  }
}

function _readUniformSendData(shaderLibDataArr, gl, program, param) {
  var uniformCacheMap = param[1];
  var uniformLocationMap = param[0];
  return ArrayService$WonderCommonlib.reduceOneParam((function (sendDataArrTuple, param) {
                var variables = param[/* variables */2];
                if (variables) {
                  return _readUniforms(/* tuple */[
                              gl,
                              program,
                              uniformLocationMap,
                              uniformCacheMap
                            ], sendDataArrTuple, variables[0][/* uniforms */0]);
                } else {
                  return sendDataArrTuple;
                }
              }), /* tuple */[
              /* array */[],
              /* array */[],
              /* array */[],
              /* array */[],
              /* array */[],
              /* array */[]
            ], shaderLibDataArr);
}

function _checkShouldNotAddBefore(shaderIndex, state) {
  return Contract$WonderLog.requireCheck((function () {
                return Contract$WonderLog.test(Log$WonderLog.buildAssertMessage("not be added before", "be"), (function () {
                              return Contract$WonderLog.assertNotExist(SparseMapService$WonderCommonlib.get(shaderIndex, state[/* glslSenderRecord */26][/* uniformRenderObjectSendModelDataMap */3]));
                            }));
              }), IsDebugMainService$Wonderjs.getIsDebug(MainStateData$Wonderjs.stateData));
}

function addUniformSendData(gl, param, state) {
  var shaderIndex = param[1];
  _checkShouldNotAddBefore(shaderIndex, state);
  var record = state[/* glslSenderRecord */26];
  var uniformLocationMap = HandleShaderConfigDataMapService$Wonderjs.getOrCreateHashMap(GLSLLocationMainService$Wonderjs.getUniformLocationMap(shaderIndex, state));
  return GLSLLocationMainService$Wonderjs.setUniformLocationMap(shaderIndex, uniformLocationMap, _setToUniformSendMap(shaderIndex, record, state, _readUniformSendData(param[2], gl, param[0], /* tuple */[
                      uniformLocationMap,
                      HandleShaderConfigDataMapService$Wonderjs.getOrCreateHashMap(SendGLSLDataMainService$Wonderjs.getCacheMap(shaderIndex, record))
                    ])));
}

export {
  _setToUniformSendMap     ,
  _readUniforms            ,
  _readUniformSendData     ,
  _checkShouldNotAddBefore ,
  addUniformSendData       ,
  
}
/* Log-WonderLog Not a pure module */
