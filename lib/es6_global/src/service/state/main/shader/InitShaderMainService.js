// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as Caml_array                                    from "../../../../../../../node_modules/bs-platform/lib/es6/caml_array.js";
import * as ProgramService$Wonderjs                       from "../../../record/program/ProgramService.js";
import * as HashMapService$WonderCommonlib                from "../../../../../../../node_modules/wonder-commonlib/lib/es6_global/src/HashMapService.js";
import * as HandleUniformConfigDataMainService$Wonderjs   from "../sender/uniform/HandleUniformConfigDataMainService.js";
import * as HandleAttributeConfigDataMainService$Wonderjs from "../sender/attribute/HandleAttributeConfigDataMainService.js";

function _genereateShaderIndex(record) {
  var index = record[/* index */0];
  record[/* index */0] = index + 1 | 0;
  return index;
}

function _getShaderIndex(key, param) {
  var shaderIndexMap = param[/* shaderIndexMap */1];
  return HashMapService$WonderCommonlib.get(key, shaderIndexMap);
}

function _setShaderIndex(key, shaderIndex, param) {
  var shaderIndexMap = param[/* shaderIndexMap */1];
  return HashMapService$WonderCommonlib.set(key, shaderIndex, shaderIndexMap);
}

function _join(array) {
  var output = "";
  for(var i = 0 ,i_finish = array.length - 1 | 0; i <= i_finish; ++i){
    output = output + Caml_array.caml_array_get(array, i)[/* name */0];
  }
  return output;
}

var _buildShaderIndexMapKey = _join;

function initMaterialShader(materialIndex, param, buildGLSLSource, state) {
  var shaderLibDataArr = param[1];
  var gl = param[0];
  var shaderRecord = state[/* shaderRecord */22];
  var key = _join(shaderLibDataArr);
  var match = _getShaderIndex(key, shaderRecord);
  if (match) {
    return match[0];
  } else {
    var shaderIndex = _genereateShaderIndex(shaderRecord);
    _setShaderIndex(key, shaderIndex, shaderRecord);
    var match$1 = buildGLSLSource(materialIndex, shaderLibDataArr, state);
    var program = ProgramService$Wonderjs.initShader(match$1[0], match$1[1], gl, ProgramService$Wonderjs.registerProgram(shaderIndex, state[/* programRecord */24], gl.createProgram()));
    HandleUniformConfigDataMainService$Wonderjs.addUniformSendData(gl, /* tuple */[
          program,
          shaderIndex,
          shaderLibDataArr
        ], HandleAttributeConfigDataMainService$Wonderjs.addAttributeSendData(/* tuple */[
              gl,
              shaderIndex,
              program
            ], shaderLibDataArr, state));
    return shaderIndex;
  }
}

export {
  _genereateShaderIndex   ,
  _getShaderIndex         ,
  _setShaderIndex         ,
  _join                   ,
  _buildShaderIndexMapKey ,
  initMaterialShader      ,
  
}
/* ProgramService-Wonderjs Not a pure module */
