// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as DisposeECSService$Wonderjs                     from "../../../primitive/ecs/DisposeECSService.js";
import * as ArrayService$WonderCommonlib                   from "../../../../../../../node_modules/wonder-commonlib/lib/es6_global/src/ArrayService.js";
import * as DisposeGameObjectComponentMainService$Wonderjs from "./DisposeGameObjectComponentMainService.js";

function batchDispose(param, uidArray, isKeepOrder, state) {
  var record = state[/* gameObjectRecord */10];
  var disposeCount = record[/* disposeCount */1];
  var disposedUidMap = record[/* disposedUidMap */2];
  record[/* disposeCount */1] = disposeCount + uidArray.length | 0;
  var match = DisposeGameObjectComponentMainService$Wonderjs.batchDispose(/* tuple */[
        uidArray,
        DisposeECSService$Wonderjs.buildMapFromArray(uidArray, disposedUidMap),
        isKeepOrder
      ], /* tuple */[
        param[0],
        param[1],
        batchDispose
      ], state);
  return /* tuple */[
          match[0],
          match[1],
          match[2],
          match[3]
        ];
}

function deferBatchDispose(uidArray, state) {
  state[/* gameObjectRecord */10][/* disposedUidArray */3] = state[/* gameObjectRecord */10][/* disposedUidArray */3].concat(uidArray);
  return state;
}

function deferBatchDisposeKeepOrder(uidArray, state) {
  state[/* gameObjectRecord */10][/* disposedUidArrayForKeepOrder */4] = state[/* gameObjectRecord */10][/* disposedUidArrayForKeepOrder */4].concat(uidArray);
  return state;
}

function clearDeferDisposeData(state) {
  var newrecord = state.slice();
  var init = state[/* gameObjectRecord */10];
  newrecord[/* gameObjectRecord */10] = /* record */[
    /* uid */init[/* uid */0],
    /* disposeCount */init[/* disposeCount */1],
    /* disposedUidMap */init[/* disposedUidMap */2],
    /* disposedUidArray */ArrayService$WonderCommonlib.createEmpty(/* () */0),
    /* disposedUidArrayForKeepOrder */ArrayService$WonderCommonlib.createEmpty(/* () */0),
    /* disposedBasicCameraViewArray */ArrayService$WonderCommonlib.createEmpty(/* () */0),
    /* disposedTransformArray */ArrayService$WonderCommonlib.createEmpty(/* () */0),
    /* disposedTransformArrayForKeepOrder */ArrayService$WonderCommonlib.createEmpty(/* () */0),
    /* disposedPerspectiveCameraProjectionArray */ArrayService$WonderCommonlib.createEmpty(/* () */0),
    /* disposedBasicMaterialArray */ArrayService$WonderCommonlib.createEmpty(/* () */0),
    /* disposedLightMaterialArray */ArrayService$WonderCommonlib.createEmpty(/* () */0),
    /* disposedBoxGeometryArray */ArrayService$WonderCommonlib.createEmpty(/* () */0),
    /* disposedCustomGeometryArray */ArrayService$WonderCommonlib.createEmpty(/* () */0),
    /* disposedSourceInstanceArray */ArrayService$WonderCommonlib.createEmpty(/* () */0),
    /* disposedObjectInstanceArray */ArrayService$WonderCommonlib.createEmpty(/* () */0),
    /* disposedAmbientLightArray */ArrayService$WonderCommonlib.createEmpty(/* () */0),
    /* disposedDirectionLightArray */ArrayService$WonderCommonlib.createEmpty(/* () */0),
    /* disposedPointLightArray */ArrayService$WonderCommonlib.createEmpty(/* () */0),
    /* disposedMeshRendererComponentArray */ArrayService$WonderCommonlib.createEmpty(/* () */0),
    /* disposedMeshRendererUidArray */ArrayService$WonderCommonlib.createEmpty(/* () */0),
    /* aliveUidArray */init[/* aliveUidArray */20],
    /* currentGeometryDataMap */init[/* currentGeometryDataMap */21],
    /* transformMap */init[/* transformMap */22],
    /* basicCameraViewMap */init[/* basicCameraViewMap */23],
    /* perspectiveCameraProjectionMap */init[/* perspectiveCameraProjectionMap */24],
    /* meshRendererMap */init[/* meshRendererMap */25],
    /* basicMaterialMap */init[/* basicMaterialMap */26],
    /* lightMaterialMap */init[/* lightMaterialMap */27],
    /* sourceInstanceMap */init[/* sourceInstanceMap */28],
    /* objectInstanceMap */init[/* objectInstanceMap */29],
    /* ambientLightMap */init[/* ambientLightMap */30],
    /* directionLightMap */init[/* directionLightMap */31],
    /* pointLightMap */init[/* pointLightMap */32]
  ];
  return newrecord;
}

function deferDispose(uid, state) {
  return deferBatchDispose(/* int array */[uid], state);
}

function deferDisposeKeepOrder(uid, state) {
  return deferBatchDisposeKeepOrder(/* int array */[uid], state);
}

export {
  batchDispose               ,
  deferBatchDispose          ,
  deferBatchDisposeKeepOrder ,
  clearDeferDisposeData      ,
  deferDispose               ,
  deferDisposeKeepOrder      ,
  
}
/* DisposeECSService-Wonderjs Not a pure module */
