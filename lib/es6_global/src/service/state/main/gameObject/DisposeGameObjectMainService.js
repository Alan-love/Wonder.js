// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as DisposeECSService$Wonderjs                     from "../../../primitiive/ecs/DisposeECSService.js";
import * as QueryCPUMemoryService$Wonderjs                 from "../../../record/memory/QueryCPUMemoryService.js";
import * as SparseMapService$WonderCommonlib               from "../../../../../../../node_modules/wonder-commonlib/lib/es6_global/src/SparseMapService.js";
import * as ReallocateGameObjectCPUMemoryService$Wonderjs  from "../../../record/memory/ReallocateGameObjectCPUMemoryService.js";
import * as DisposeGameObjectComponentMainService$Wonderjs from "./DisposeGameObjectComponentMainService.js";

function _handleByDisposeCount(record, state) {
  if (QueryCPUMemoryService$Wonderjs.isDisposeTooMany(record[/* disposeCount */1], state[/* settingRecord */0])) {
    record[/* disposeCount */1] = 0;
    var newrecord = state.slice();
    newrecord[/* gameObjectRecord */10] = ReallocateGameObjectCPUMemoryService$Wonderjs.reAllocateGameObject(state[/* gameObjectRecord */10]);
    return newrecord;
  } else {
    return state;
  }
}

function batchDispose(uidArray, state) {
  var record = state[/* gameObjectRecord */10];
  var disposeCount = record[/* disposeCount */1];
  var disposedUidMap = record[/* disposedUidMap */2];
  record[/* disposeCount */1] = disposeCount + uidArray.length | 0;
  return _handleByDisposeCount(record, DisposeGameObjectComponentMainService$Wonderjs.batchDispose(uidArray, DisposeECSService$Wonderjs.buildMapFromArray(uidArray, disposedUidMap), batchDispose, state));
}

function dispose(uid, state) {
  var record = state[/* gameObjectRecord */10];
  var disposeCount = record[/* disposeCount */1];
  var disposedUidMap = record[/* disposedUidMap */2];
  record[/* disposeCount */1] = disposeCount + 1 | 0;
  SparseMapService$WonderCommonlib.set(uid, /* true */1, disposedUidMap);
  return _handleByDisposeCount(record, DisposeGameObjectComponentMainService$Wonderjs.dispose(uid, batchDispose, state));
}

function disposeKeepOrder(uid, state) {
  var record = state[/* gameObjectRecord */10];
  var disposeCount = record[/* disposeCount */1];
  var disposedUidMap = record[/* disposedUidMap */2];
  record[/* disposeCount */1] = disposeCount + 1 | 0;
  SparseMapService$WonderCommonlib.set(uid, /* true */1, disposedUidMap);
  return _handleByDisposeCount(record, DisposeGameObjectComponentMainService$Wonderjs.disposeKeepOrder(uid, batchDispose, state));
}

export {
  _handleByDisposeCount ,
  batchDispose          ,
  dispose               ,
  disposeKeepOrder      ,
  
}
/* DisposeECSService-Wonderjs Not a pure module */
