// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as ComponentMapService$Wonderjs                       from "../../../primitiive/ComponentMapService.js";
import * as MemorySettingService$Wonderjs                      from "../../../record/setting/MemorySettingService.js";
import * as DisposePointLightService$Wonderjs                  from "../../../record/light/point/DisposePointLightService.js";
import * as DisposeAmbientLightService$Wonderjs                from "../../../record/light/ambient/DisposeAmbientLightService.js";
import * as DisposeGeometryMainService$Wonderjs                from "../geometry/DisposeGeometryMainService.js";
import * as DisposeMeshRendererService$Wonderjs                from "../../../record/meshRenderer/DisposeMeshRendererService.js";
import * as DisposeBasicMaterialService$Wonderjs               from "../../../record/material/basic/DisposeBasicMaterialService.js";
import * as DisposeLightMaterialService$Wonderjs               from "../../../record/material/light/DisposeLightMaterialService.js";
import * as DisposeTransformMainService$Wonderjs               from "../transform/DisposeTransformMainService.js";
import * as DisposeDirectionLightService$Wonderjs              from "../../../record/light/direction/DisposeDirectionLightService.js";
import * as DisposeBasicCameraViewService$Wonderjs             from "../../../record/basic_camera_view/DisposeBasicCameraViewService.js";
import * as DisposeObjectInstanceMainService$Wonderjs          from "../instance/DisposeObjectInstanceMainService.js";
import * as DisposeSourceInstanceMainService$Wonderjs          from "../instance/DisposeSourceInstanceMainService.js";
import * as DisposePerspectiveCameraProjectionService$Wonderjs from "../../../record/perspective_camera_projection/DisposePerspectiveCameraProjectionService.js";

function disposeBasicCameraViewComponent(_, component, state) {
  var newrecord = state.slice();
  newrecord[/* basicCameraViewRecord */13] = DisposeBasicCameraViewService$Wonderjs.handleDisposeComponent(component, state[/* basicCameraViewRecord */13]);
  return newrecord;
}

function disposeMeshRendererComponent(uid, component, state) {
  var newrecord = state.slice();
  newrecord[/* meshRendererRecord */21] = DisposeMeshRendererService$Wonderjs.handleDisposeComponent(component, uid, state[/* meshRendererRecord */21]);
  return newrecord;
}

function disposeTransformComponent(_, component, isKeepOrder, state) {
  return DisposeTransformMainService$Wonderjs.handleDisposeComponent(component, MemorySettingService$Wonderjs.getMaxTypeArrayPoolSize(state[/* settingRecord */0]), isKeepOrder, state);
}

function disposeBoxGeometryComponent(_, component, state) {
  return DisposeGeometryMainService$Wonderjs.handleDisposeComponent(component, MemorySettingService$Wonderjs.getMaxTypeArrayPoolSize(state[/* settingRecord */0]), state);
}

function disposePerspectiveCameraProjectionComponent(_, component, state) {
  var newrecord = state.slice();
  newrecord[/* perspectiveCameraProjectionRecord */14] = DisposePerspectiveCameraProjectionService$Wonderjs.handleDisposeComponent(component, state[/* perspectiveCameraProjectionRecord */14]);
  return newrecord;
}

function disposeBasicMaterialComponent(_, component, state) {
  var newrecord = state.slice();
  newrecord[/* basicMaterialRecord */15] = DisposeBasicMaterialService$Wonderjs.handleDisposeComponent(component, state[/* basicMaterialRecord */15]);
  return newrecord;
}

function disposeLightMaterialComponent(_, component, state) {
  var newrecord = state.slice();
  newrecord[/* lightMaterialRecord */16] = DisposeLightMaterialService$Wonderjs.handleDisposeComponent(component, state[/* lightMaterialRecord */16]);
  return newrecord;
}

function disposeAmbientLightComponent(_, component, state) {
  var newrecord = state.slice();
  newrecord[/* ambientLightRecord */17] = DisposeAmbientLightService$Wonderjs.handleDisposeComponent(component, state[/* ambientLightRecord */17]);
  return newrecord;
}

function disposeDirectionLightComponent(_, component, state) {
  var newrecord = state.slice();
  newrecord[/* directionLightRecord */18] = DisposeDirectionLightService$Wonderjs.handleDisposeComponent(component, state[/* directionLightRecord */18]);
  return newrecord;
}

function disposePointLightComponent(_, component, state) {
  var newrecord = state.slice();
  newrecord[/* pointLightRecord */19] = DisposePointLightService$Wonderjs.handleDisposeComponent(component, state[/* pointLightRecord */19]);
  return newrecord;
}

function disposeSourceInstanceComponent(_, component, batchDisposeGameObjectFunc, state) {
  return DisposeSourceInstanceMainService$Wonderjs.handleDisposeComponent(component, batchDisposeGameObjectFunc, state);
}

function disposeObjectInstanceComponent(_, component, state) {
  return DisposeObjectInstanceMainService$Wonderjs.handleDisposeComponent(component, state);
}

function batchDisposeBasicCameraViewComponent(uidMap, state, componentArray) {
  var newrecord = state.slice();
  newrecord[/* basicCameraViewRecord */13] = ComponentMapService$Wonderjs.batchDisposeComponent(uidMap, state[/* basicCameraViewRecord */13], DisposeBasicCameraViewService$Wonderjs.handleBatchDisposeComponent, componentArray);
  return newrecord;
}

function batchDisposePerspectiveCameraProjectionComponent(uidMap, state, componentArray) {
  var newrecord = state.slice();
  newrecord[/* perspectiveCameraProjectionRecord */14] = ComponentMapService$Wonderjs.batchDisposeComponent(uidMap, state[/* perspectiveCameraProjectionRecord */14], DisposePerspectiveCameraProjectionService$Wonderjs.handleBatchDisposeComponent, componentArray);
  return newrecord;
}

function batchDisposeMeshRendererComponent(uidMap, state, componentArray) {
  var newrecord = state.slice();
  newrecord[/* meshRendererRecord */21] = ComponentMapService$Wonderjs.batchDisposeComponent(uidMap, state[/* meshRendererRecord */21], DisposeMeshRendererService$Wonderjs.handleBatchDisposeComponent, componentArray);
  return newrecord;
}

function batchDisposeTransformComponent(uidMap, state, componentArray) {
  return DisposeTransformMainService$Wonderjs.handleBatchDisposeComponent(componentArray, uidMap, MemorySettingService$Wonderjs.getMaxTypeArrayPoolSize(state[/* settingRecord */0]), state);
}

function batchDisposeBoxGeometryComponent(uidMap, state, componentArray) {
  return DisposeGeometryMainService$Wonderjs.handleBatchDisposeComponent(componentArray, uidMap, MemorySettingService$Wonderjs.getMaxTypeArrayPoolSize(state[/* settingRecord */0]), state);
}

function batchDisposeBasicMaterialComponent(uidMap, state, componentArray) {
  var newrecord = state.slice();
  newrecord[/* basicMaterialRecord */15] = ComponentMapService$Wonderjs.batchDisposeComponent(uidMap, state[/* basicMaterialRecord */15], DisposeBasicMaterialService$Wonderjs.handleBatchDisposeComponent, componentArray);
  return newrecord;
}

function batchDisposeLightMaterialComponent(uidMap, state, componentArray) {
  var newrecord = state.slice();
  newrecord[/* lightMaterialRecord */16] = ComponentMapService$Wonderjs.batchDisposeComponent(uidMap, state[/* lightMaterialRecord */16], DisposeLightMaterialService$Wonderjs.handleBatchDisposeComponent, componentArray);
  return newrecord;
}

function batchDisposeAmbientLightComponent(uidMap, state, componentArray) {
  var newrecord = state.slice();
  newrecord[/* ambientLightRecord */17] = ComponentMapService$Wonderjs.batchDisposeComponent(uidMap, state[/* ambientLightRecord */17], DisposeAmbientLightService$Wonderjs.handleBatchDisposeComponent, componentArray);
  return newrecord;
}

function batchDisposeDirectionLightComponent(uidMap, state, componentArray) {
  var newrecord = state.slice();
  newrecord[/* directionLightRecord */18] = ComponentMapService$Wonderjs.batchDisposeComponent(uidMap, state[/* directionLightRecord */18], DisposeDirectionLightService$Wonderjs.handleBatchDisposeComponent, componentArray);
  return newrecord;
}

function batchDisposePointLightComponent(uidMap, state, componentArray) {
  var newrecord = state.slice();
  newrecord[/* pointLightRecord */19] = ComponentMapService$Wonderjs.batchDisposeComponent(uidMap, state[/* pointLightRecord */19], DisposePointLightService$Wonderjs.handleBatchDisposeComponent, componentArray);
  return newrecord;
}

function batchDisposeSourceInstanceComponent(uidMap, state, disposeGameObjectFunc, componentArray) {
  return DisposeSourceInstanceMainService$Wonderjs.handleBatchDisposeComponent(componentArray, uidMap, disposeGameObjectFunc, state);
}

function batchDisposeObjectInstanceComponent(uidMap, state, componentArray) {
  var match = componentArray.length;
  if (match !== 0) {
    return DisposeObjectInstanceMainService$Wonderjs.handleBatchDisposeComponent(componentArray, uidMap, state);
  } else {
    return state;
  }
}

export {
  disposeBasicCameraViewComponent                  ,
  disposeMeshRendererComponent                     ,
  disposeTransformComponent                        ,
  disposeBoxGeometryComponent                      ,
  disposePerspectiveCameraProjectionComponent      ,
  disposeBasicMaterialComponent                    ,
  disposeLightMaterialComponent                    ,
  disposeAmbientLightComponent                     ,
  disposeDirectionLightComponent                   ,
  disposePointLightComponent                       ,
  disposeSourceInstanceComponent                   ,
  disposeObjectInstanceComponent                   ,
  batchDisposeBasicCameraViewComponent             ,
  batchDisposePerspectiveCameraProjectionComponent ,
  batchDisposeMeshRendererComponent                ,
  batchDisposeTransformComponent                   ,
  batchDisposeBoxGeometryComponent                 ,
  batchDisposeBasicMaterialComponent               ,
  batchDisposeLightMaterialComponent               ,
  batchDisposeAmbientLightComponent                ,
  batchDisposeDirectionLightComponent              ,
  batchDisposePointLightComponent                  ,
  batchDisposeSourceInstanceComponent              ,
  batchDisposeObjectInstanceComponent              ,
  
}
/* ComponentMapService-Wonderjs Not a pure module */
