// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as Caml_array                                   from "../../../../../../../node_modules/bs-platform/lib/es6/caml_array.js";
import * as Log$WonderLog                                from "../../../../../../../node_modules/wonder-log/lib/es6_global/src/Log.js";
import * as Contract$WonderLog                           from "../../../../../../../node_modules/wonder-log/lib/es6_global/src/Contract.js";
import * as ArrayService$Wonderjs                        from "../../../atom/ArrayService.js";
import * as MainStateData$Wonderjs                       from "../data/MainStateData.js";
import * as OptionService$Wonderjs                       from "../../../atom/OptionService.js";
import * as IsDebugMainService$Wonderjs                  from "../state/IsDebugMainService.js";
import * as ArrayService$WonderCommonlib                 from "../../../../../../../node_modules/wonder-commonlib/lib/es6_global/src/ArrayService.js";
import * as ReduceStateMainService$Wonderjs              from "../array/ReduceStateMainService.js";
import * as HierachyTransformService$Wonderjs            from "../../../record/transform/HierachyTransformService.js";
import * as GameObjectTransformService$Wonderjs          from "../../../record/transform/GameObjectTransformService.js";
import * as GetComponentGameObjectService$Wonderjs       from "../../../record/gameObject/GetComponentGameObjectService.js";
import * as HasComponentGameObjectService$Wonderjs       from "../../../record/gameObject/HasComponentGameObjectService.js";
import * as CreateGameObjectGameObjectService$Wonderjs   from "../../../record/gameObject/CreateGameObjectGameObjectService.js";
import * as CloneGameObjectComponentMainService$Wonderjs from "./CloneGameObjectComponentMainService.js";

function _createGameObjectArr(countRangeArr, gameObjectRecord) {
  return ArrayService$WonderCommonlib.reduceOneParam((function (param, _) {
                var match = CreateGameObjectGameObjectService$Wonderjs.create(param[0]);
                return /* tuple */[
                        match[0],
                        ArrayService$Wonderjs.push(match[1], param[1])
                      ];
              }), /* tuple */[
              gameObjectRecord,
              /* int array */[]
            ], countRangeArr);
}

function _setParent(clonedParentTransformArr, clonedTransformArr, transformRecord) {
  return ArrayService$WonderCommonlib.reduceOneParami((function (transformRecord, clonedParentTransform, i) {
                return HierachyTransformService$Wonderjs.setParentNotMarkDirty(/* Some */[clonedParentTransform], Caml_array.caml_array_get(clonedTransformArr, i), transformRecord);
              }), transformRecord, clonedParentTransformArr);
}

function _clone(param, isShareMaterial, state) {
  var countRangeArr = param[2];
  var transform = param[1];
  var match = _createGameObjectArr(countRangeArr, state[/* gameObjectRecord */10]);
  var clonedGameObjectArr = match[1];
  var totalClonedGameObjectArr = ArrayService$Wonderjs.push(clonedGameObjectArr, param[4]);
  var newrecord = state.slice();
  newrecord[/* gameObjectRecord */10] = match[0];
  var match$1 = CloneGameObjectComponentMainService$Wonderjs.clone(/* tuple */[
        param[0],
        transform,
        countRangeArr,
        clonedGameObjectArr
      ], isShareMaterial, newrecord);
  var clonedTransformArr = match$1[1];
  var state$1 = match$1[0];
  ReduceStateMainService$Wonderjs.reduceState((function (state, childTransform) {
          return _clone(/* tuple */[
                      GameObjectTransformService$Wonderjs.unsafeGetGameObject(childTransform, state[/* transformRecord */11]),
                      childTransform,
                      countRangeArr,
                      clonedTransformArr,
                      totalClonedGameObjectArr
                    ], isShareMaterial, state);
        }), state$1, HierachyTransformService$Wonderjs.unsafeGetChildren(transform, _setParent(param[3], clonedTransformArr, state$1[/* transformRecord */11])));
  return state$1;
}

function clone(uid, count, isShareMaterial, state) {
  Contract$WonderLog.requireCheck((function () {
          Contract$WonderLog.test(Log$WonderLog.buildAssertMessage("not clone sourceInstance gameObject", "do"), (function () {
                  return Contract$WonderLog.assertFalse(HasComponentGameObjectService$Wonderjs.hasSourceInstanceComponent(uid, state[/* gameObjectRecord */10]));
                }));
          return Contract$WonderLog.test(Log$WonderLog.buildAssertMessage("not clone objectInstance gameObject", "do"), (function () {
                        return Contract$WonderLog.assertFalse(HasComponentGameObjectService$Wonderjs.hasObjectInstanceComponent(uid, state[/* gameObjectRecord */10]));
                      }));
        }), IsDebugMainService$Wonderjs.getIsDebug(MainStateData$Wonderjs.stateData));
  var totalClonedGameObjectArr = /* array */[];
  return /* tuple */[
          _clone(/* tuple */[
                uid,
                OptionService$Wonderjs.unsafeGet(GetComponentGameObjectService$Wonderjs.getTransformComponent(uid, state[/* gameObjectRecord */10])),
                ArrayService$Wonderjs.range(0, count - 1 | 0),
                /* int array */[],
                totalClonedGameObjectArr
              ], isShareMaterial, state),
          totalClonedGameObjectArr
        ];
}

export {
  _createGameObjectArr ,
  _setParent           ,
  _clone               ,
  clone                ,
  
}
/* Log-WonderLog Not a pure module */
