// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as ClonePointLightService$Wonderjs                  from "../../../record/light/point/ClonePointLightService.js";
import * as CloneAmbientLightService$Wonderjs                from "../../../record/light/ambient/CloneAmbientLightService.js";
import * as CloneMeshRendererService$Wonderjs                from "../../../record/meshRenderer/CloneMeshRendererService.js";
import * as CloneTransformMainService$Wonderjs               from "../transform/CloneTransformMainService.js";
import * as CloneDirectionLightService$Wonderjs              from "../../../record/light/direction/CloneDirectionLightService.js";
import * as CloneBasicCameraViewService$Wonderjs             from "../../../record/basic_camera_view/CloneBasicCameraViewService.js";
import * as CloneBoxGeometryMainService$Wonderjs             from "../geometry/CloneBoxGeometryMainService.js";
import * as CloneBasicMaterialMainService$Wonderjs           from "../material/basic/CloneBasicMaterialMainService.js";
import * as CloneLightMaterialMainService$Wonderjs           from "../material/light/CloneLightMaterialMainService.js";
import * as ClonePerspectiveCameraProjectionService$Wonderjs from "../../../record/perspective_camera_projection/ClonePerspectiveCameraProjectionService.js";

function cloneBasicCameraViewComponent(sourceComponent, countRangeArr, state) {
  var match = CloneBasicCameraViewService$Wonderjs.handleCloneComponent(sourceComponent, countRangeArr, state[/* basicCameraViewRecord */13]);
  var newrecord = state.slice();
  return /* tuple */[
          (newrecord[/* basicCameraViewRecord */13] = match[0], newrecord),
          match[1]
        ];
}

function clonePerspectiveCameraProjectionComponent(sourceComponent, countRangeArr, state) {
  var match = ClonePerspectiveCameraProjectionService$Wonderjs.handleCloneComponent(sourceComponent, countRangeArr, state[/* perspectiveCameraProjectionRecord */14]);
  var newrecord = state.slice();
  return /* tuple */[
          (newrecord[/* perspectiveCameraProjectionRecord */14] = match[0], newrecord),
          match[1]
        ];
}

var cloneTransformComponent = CloneTransformMainService$Wonderjs.handleCloneComponent;

function cloneMeshRendererComponent(sourceComponent, countRangeArr, state) {
  var match = CloneMeshRendererService$Wonderjs.handleCloneComponent(sourceComponent, countRangeArr, state[/* meshRendererRecord */21]);
  var newrecord = state.slice();
  return /* tuple */[
          (newrecord[/* meshRendererRecord */21] = match[0], newrecord),
          match[1]
        ];
}

function cloneBoxGeometryComponent(sourceComponent, countRangeArr, state) {
  var match = CloneBoxGeometryMainService$Wonderjs.handleCloneComponent(sourceComponent, countRangeArr, state[/* boxGeometryRecord */20]);
  var newrecord = state.slice();
  return /* tuple */[
          (newrecord[/* boxGeometryRecord */20] = match[0], newrecord),
          match[1]
        ];
}

function cloneBasicMaterialComponent(isShareMaterial, sourceComponent, countRangeArr, state) {
  return CloneBasicMaterialMainService$Wonderjs.handleCloneComponent(sourceComponent, countRangeArr, isShareMaterial, state);
}

function cloneLightMaterialComponent(isShareMaterial, sourceComponent, countRangeArr, state) {
  return CloneLightMaterialMainService$Wonderjs.handleCloneComponent(sourceComponent, countRangeArr, isShareMaterial, state);
}

function cloneAmbientLightComponent(sourceComponent, countRangeArr, state) {
  var match = CloneAmbientLightService$Wonderjs.handleCloneComponent(sourceComponent, countRangeArr, state[/* ambientLightRecord */17]);
  var newrecord = state.slice();
  return /* tuple */[
          (newrecord[/* ambientLightRecord */17] = match[0], newrecord),
          match[1]
        ];
}

function cloneDirectionLightComponent(sourceComponent, countRangeArr, state) {
  var match = CloneDirectionLightService$Wonderjs.handleCloneComponent(sourceComponent, countRangeArr, state[/* directionLightRecord */18]);
  var newrecord = state.slice();
  return /* tuple */[
          (newrecord[/* directionLightRecord */18] = match[0], newrecord),
          match[1]
        ];
}

function clonePointLightComponent(sourceComponent, countRangeArr, state) {
  var match = ClonePointLightService$Wonderjs.handleCloneComponent(sourceComponent, countRangeArr, state[/* pointLightRecord */19]);
  var newrecord = state.slice();
  return /* tuple */[
          (newrecord[/* pointLightRecord */19] = match[0], newrecord),
          match[1]
        ];
}

export {
  cloneBasicCameraViewComponent             ,
  clonePerspectiveCameraProjectionComponent ,
  cloneTransformComponent                   ,
  cloneMeshRendererComponent                ,
  cloneBoxGeometryComponent                 ,
  cloneBasicMaterialComponent               ,
  cloneLightMaterialComponent               ,
  cloneAmbientLightComponent                ,
  cloneDirectionLightComponent              ,
  clonePointLightComponent                  ,
  
}
/* ClonePointLightService-Wonderjs Not a pure module */
