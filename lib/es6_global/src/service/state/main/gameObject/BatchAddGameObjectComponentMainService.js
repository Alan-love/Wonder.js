// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as Log$WonderLog                                  from "../../../../../../../node_modules/wonder-log/lib/es6_global/src/Log.js";
import * as Contract$WonderLog                             from "../../../../../../../node_modules/wonder-log/lib/es6_global/src/Contract.js";
import * as MainStateData$Wonderjs                         from "../data/MainStateData.js";
import * as IsDebugMainService$Wonderjs                    from "../state/IsDebugMainService.js";
import * as AddTransformService$Wonderjs                   from "../../../record/transform/AddTransformService.js";
import * as ArrayService$WonderCommonlib                   from "../../../../../../../node_modules/wonder-commonlib/lib/es6_global/src/ArrayService.js";
import * as ComponentMapService$Wonderjs                   from "../../../primitiive/ComponentMapService.js";
import * as AddPointLightService$Wonderjs                  from "../../../record/light/point/AddPointLightService.js";
import * as GroupGeometryService$Wonderjs                  from "../../../record/geometry/GroupGeometryService.js";
import * as AddAmbientLightService$Wonderjs                from "../../../record/light/ambient/AddAmbientLightService.js";
import * as AddMeshRendererService$Wonderjs                from "../../../record/meshRenderer/AddMeshRendererService.js";
import * as AddBasicMaterialService$Wonderjs               from "../../../record/material/basic/AddBasicMaterialService.js";
import * as AddLightMaterialService$Wonderjs               from "../../../record/material/light/AddLightMaterialService.js";
import * as AddDirectionLightService$Wonderjs              from "../../../record/light/direction/AddDirectionLightService.js";
import * as AddBasicCameraViewService$Wonderjs             from "../../../record/basic_camera_view/AddBasicCameraViewService.js";
import * as GroupBasicMaterialService$Wonderjs             from "../../../record/material/basic/GroupBasicMaterialService.js";
import * as GroupLightMaterialService$Wonderjs             from "../../../record/material/light/GroupLightMaterialService.js";
import * as AddPerspectiveCameraProjectionService$Wonderjs from "../../../record/perspective_camera_projection/AddPerspectiveCameraProjectionService.js";

function _checkBatchAdd(uidArr, componentArr) {
  return Contract$WonderLog.requireCheck((function () {
                var gameObjectCount = uidArr.length;
                var componentCount = componentArr.length;
                return Contract$WonderLog.test(Log$WonderLog.buildAssertMessage("one gameObject should add one component", "" + (String(gameObjectCount) + (" gameObject add " + (String(componentCount) + " components")))), (function () {
                              return Contract$WonderLog.Operators[/* = */0](gameObjectCount, componentCount);
                            }));
              }), IsDebugMainService$Wonderjs.getIsDebug(MainStateData$Wonderjs.stateData));
}

function _batchAddComponent(param, handleAddComponentFunc, componentRecord) {
  var componentMap = param[2];
  var componentArr = param[1];
  var uidArr = param[0];
  _checkBatchAdd(uidArr, componentArr);
  return ArrayService$WonderCommonlib.reduceOneParami((function (componentRecord, uid, index) {
                var component = componentArr[index];
                ComponentMapService$Wonderjs.addComponent(uid, component, componentMap);
                return handleAddComponentFunc(component, uid, componentRecord);
              }), componentRecord, uidArr);
}

function batchAddBasicCameraViewComponentForClone(uidArr, componentArr, state) {
  var newrecord = state.slice();
  newrecord[/* basicCameraViewRecord */13] = _batchAddComponent(/* tuple */[
        uidArr,
        componentArr,
        state[/* gameObjectRecord */10][/* basicCameraViewMap */5]
      ], AddBasicCameraViewService$Wonderjs.handleAddComponent, state[/* basicCameraViewRecord */13]);
  return newrecord;
}

function batchAddPerspectiveCameraProjectionComponentForClone(uidArr, componentArr, state) {
  var newrecord = state.slice();
  newrecord[/* perspectiveCameraProjectionRecord */14] = _batchAddComponent(/* tuple */[
        uidArr,
        componentArr,
        state[/* gameObjectRecord */10][/* perspectiveCameraProjectionMap */6]
      ], AddPerspectiveCameraProjectionService$Wonderjs.handleAddComponent, state[/* perspectiveCameraProjectionRecord */14]);
  return newrecord;
}

function batchAddTransformComponentForClone(uidArr, componentArr, state) {
  var newrecord = state.slice();
  newrecord[/* transformRecord */11] = _batchAddComponent(/* tuple */[
        uidArr,
        componentArr,
        state[/* gameObjectRecord */10][/* transformMap */4]
      ], AddTransformService$Wonderjs.handleAddComponent, state[/* transformRecord */11]);
  return newrecord;
}

function batchAddMeshRendererComponentForClone(uidArr, componentArr, state) {
  var newrecord = state.slice();
  newrecord[/* meshRendererRecord */21] = _batchAddComponent(/* tuple */[
        uidArr,
        componentArr,
        state[/* gameObjectRecord */10][/* meshRendererMap */8]
      ], AddMeshRendererService$Wonderjs.handleAddComponent, state[/* meshRendererRecord */21]);
  return newrecord;
}

function _batchAddSharableComponent(param, increaseGroupCountFunc, record) {
  var componentMap = param[2];
  var componentArr = param[1];
  var uidArr = param[0];
  _checkBatchAdd(uidArr, componentArr);
  return ArrayService$WonderCommonlib.reduceOneParami((function (record, uid, index) {
                var component = componentArr[index];
                ComponentMapService$Wonderjs.addComponent(uid, component, componentMap);
                return increaseGroupCountFunc(component, record);
              }), record, uidArr);
}

function batchAddBoxGeometryComponentForClone(uidArr, componentArr, state) {
  var newrecord = state.slice();
  newrecord[/* boxGeometryRecord */20] = _batchAddSharableComponent(/* tuple */[
        uidArr,
        componentArr,
        state[/* gameObjectRecord */10][/* boxGeometryMap */7]
      ], GroupGeometryService$Wonderjs.increaseGroupCount, state[/* boxGeometryRecord */20]);
  return newrecord;
}

function _batchAddMaterialComponentForClone(isShareBasicMaterial, param, param$1, record) {
  var componentMap = param[2];
  var componentArr = param[1];
  var uidArr = param[0];
  if (isShareBasicMaterial !== 0) {
    return _batchAddSharableComponent(/* tuple */[
                uidArr,
                componentArr,
                componentMap
              ], param$1[0], record);
  } else {
    return _batchAddComponent(/* tuple */[
                uidArr,
                componentArr,
                componentMap
              ], param$1[1], record);
  }
}

function batchAddBasicMaterialComponentForClone(isShareMaterial, uidArr, componentArr, state) {
  var newrecord = state.slice();
  newrecord[/* basicMaterialRecord */15] = _batchAddMaterialComponentForClone(isShareMaterial, /* tuple */[
        uidArr,
        componentArr,
        state[/* gameObjectRecord */10][/* basicMaterialMap */9]
      ], /* tuple */[
        GroupBasicMaterialService$Wonderjs.increaseGroupCount,
        AddBasicMaterialService$Wonderjs.handleAddComponent
      ], state[/* basicMaterialRecord */15]);
  return newrecord;
}

function batchAddLightMaterialComponentForClone(isShareMaterial, uidArr, componentArr, state) {
  var newrecord = state.slice();
  newrecord[/* lightMaterialRecord */16] = _batchAddMaterialComponentForClone(isShareMaterial, /* tuple */[
        uidArr,
        componentArr,
        state[/* gameObjectRecord */10][/* lightMaterialMap */10]
      ], /* tuple */[
        GroupLightMaterialService$Wonderjs.increaseGroupCount,
        AddLightMaterialService$Wonderjs.handleAddComponent
      ], state[/* lightMaterialRecord */16]);
  return newrecord;
}

function batchAddAmbientLightComponentForClone(uidArr, componentArr, state) {
  var newrecord = state.slice();
  newrecord[/* ambientLightRecord */17] = _batchAddComponent(/* tuple */[
        uidArr,
        componentArr,
        state[/* gameObjectRecord */10][/* ambientLightMap */13]
      ], AddAmbientLightService$Wonderjs.handleAddComponent, state[/* ambientLightRecord */17]);
  return newrecord;
}

function batchAddDirectionLightComponentForClone(uidArr, componentArr, state) {
  var newrecord = state.slice();
  newrecord[/* directionLightRecord */18] = _batchAddComponent(/* tuple */[
        uidArr,
        componentArr,
        state[/* gameObjectRecord */10][/* directionLightMap */14]
      ], AddDirectionLightService$Wonderjs.handleAddComponent, state[/* directionLightRecord */18]);
  return newrecord;
}

function batchAddPointLightComponentForClone(uidArr, componentArr, state) {
  var newrecord = state.slice();
  newrecord[/* pointLightRecord */19] = _batchAddComponent(/* tuple */[
        uidArr,
        componentArr,
        state[/* gameObjectRecord */10][/* pointLightMap */15]
      ], AddPointLightService$Wonderjs.handleAddComponent, state[/* pointLightRecord */19]);
  return newrecord;
}

export {
  _checkBatchAdd                                       ,
  _batchAddComponent                                   ,
  batchAddBasicCameraViewComponentForClone             ,
  batchAddPerspectiveCameraProjectionComponentForClone ,
  batchAddTransformComponentForClone                   ,
  batchAddMeshRendererComponentForClone                ,
  _batchAddSharableComponent                           ,
  batchAddBoxGeometryComponentForClone                 ,
  _batchAddMaterialComponentForClone                   ,
  batchAddBasicMaterialComponentForClone               ,
  batchAddLightMaterialComponentForClone               ,
  batchAddAmbientLightComponentForClone                ,
  batchAddDirectionLightComponentForClone              ,
  batchAddPointLightComponentForClone                  ,
  
}
/* Log-WonderLog Not a pure module */
