// Generated by BUCKLESCRIPT VERSION 3.1.4, PLEASE EDIT WITH CARE

import * as Caml_array from "../../../../../../../node_modules/bs-platform/lib/es6/caml_array.js";
import * as Log$WonderLog from "../../../../../../../node_modules/wonder-log/lib/es6_global/src/Log.js";
import * as Contract$WonderLog from "../../../../../../../node_modules/wonder-log/lib/es6_global/src/Contract.js";
import * as StateDataMain$Wonderjs from "../data/StateDataMain.js";
import * as IsDebugMainService$Wonderjs from "../state/IsDebugMainService.js";
import * as AddTransformService$Wonderjs from "../../../record/main/transform/AddTransformService.js";
import * as ArrayService$WonderCommonlib from "../../../../../../../node_modules/wonder-commonlib/lib/es6_global/src/ArrayService.js";
import * as ComponentMapService$Wonderjs from "../../../primitive/gameObject/ComponentMapService.js";
import * as AddPointLightService$Wonderjs from "../../../record/main/light/point/AddPointLightService.js";
import * as AddBoxGeometryService$Wonderjs from "../../../record/main/geometry/box/AddBoxGeometryService.js";
import * as AddBasicMaterialService$Wonderjs from "../../../record/main/material/basic/AddBasicMaterialService.js";
import * as AddLightMaterialService$Wonderjs from "../../../record/main/material/light/AddLightMaterialService.js";
import * as GroupBoxGeometryService$Wonderjs from "../../../record/main/geometry/box/GroupBoxGeometryService.js";
import * as AddCustomGeometryService$Wonderjs from "../../../record/main/geometry/custom/AddCustomGeometryService.js";
import * as AddDirectionLightService$Wonderjs from "../../../record/main/light/direction/AddDirectionLightService.js";
import * as AddBasicCameraViewService$Wonderjs from "../../../record/main/basic_camera_view/AddBasicCameraViewService.js";
import * as GroupBasicMaterialService$Wonderjs from "../../../record/main/material/basic/GroupBasicMaterialService.js";
import * as GroupLightMaterialService$Wonderjs from "../../../record/main/material/light/GroupLightMaterialService.js";
import * as AddMeshRendererMainService$Wonderjs from "../meshRenderer/AddMeshRendererMainService.js";
import * as GroupCustomGeometryService$Wonderjs from "../../../record/main/geometry/custom/GroupCustomGeometryService.js";
import * as RecordTransformMainService$Wonderjs from "../transform/RecordTransformMainService.js";
import * as RecordBoxGeometryMainService$Wonderjs from "../geometry/box/RecordBoxGeometryMainService.js";
import * as CurrentComponentDataMapService$Wonderjs from "../../../record/all/gameObject/CurrentComponentDataMapService.js";
import * as RecordBasicMaterialMainService$Wonderjs from "../material/basic/RecordBasicMaterialMainService.js";
import * as RecordLightMaterialMainService$Wonderjs from "../material/light/RecordLightMaterialMainService.js";
import * as RecordCustomGeometryMainService$Wonderjs from "../geometry/custom/RecordCustomGeometryMainService.js";
import * as CurrentComponentDataMapRenderService$Wonderjs from "../../render/gameObject/CurrentComponentDataMapRenderService.js";
import * as AddPerspectiveCameraProjectionService$Wonderjs from "../../../record/main/perspective_camera_projection/AddPerspectiveCameraProjectionService.js";

function _checkBatchAdd(uidArr, componentArr) {
  return Contract$WonderLog.requireCheck((function () {
                var gameObjectCount = uidArr.length;
                var componentCount = componentArr.length;
                return Contract$WonderLog.test(Log$WonderLog.buildAssertMessage("one gameObject should add one component", "" + (String(gameObjectCount) + (" gameObject add " + (String(componentCount) + " components")))), (function () {
                              return Contract$WonderLog.Operators[/* = */0](gameObjectCount, componentCount);
                            }));
              }), IsDebugMainService$Wonderjs.getIsDebug(StateDataMain$Wonderjs.stateData));
}

function _batchAddComponent(param, handleAddComponentFunc, componentRecord) {
  var componentMap = param[2];
  var componentArr = param[1];
  var uidArr = param[0];
  _checkBatchAdd(uidArr, componentArr);
  return ArrayService$WonderCommonlib.reduceOneParami((function (componentRecord, uid, index) {
                var component = componentArr[index];
                ComponentMapService$Wonderjs.addComponent(uid, component, componentMap);
                return handleAddComponentFunc(component, uid, componentRecord);
              }), componentRecord, uidArr);
}

function _batchAddComponentWithState(param, handleAddComponentFunc, state) {
  var componentMap = param[2];
  var componentArr = param[1];
  var uidArr = param[0];
  _checkBatchAdd(uidArr, componentArr);
  return ArrayService$WonderCommonlib.reduceOneParami((function (state, uid, index) {
                var component = componentArr[index];
                ComponentMapService$Wonderjs.addComponent(uid, component, componentMap);
                return handleAddComponentFunc(component, uid, state);
              }), state, uidArr);
}

function _batchAddBasicCameraViewComponent(uidArr, componentArr, state) {
  var gameObjectRecord = state[/* gameObjectRecord */10];
  var basicCameraViewRecord = state[/* basicCameraViewRecord */13];
  var newrecord = Caml_array.caml_array_dup(state);
  newrecord[/* basicCameraViewRecord */13] = _batchAddComponent(/* tuple */[
        uidArr,
        componentArr,
        gameObjectRecord[/* basicCameraViewMap */23]
      ], AddBasicCameraViewService$Wonderjs.handleAddComponent, basicCameraViewRecord);
  return newrecord;
}

function _batchAddPerspectiveCameraProjectionComponent(uidArr, componentArr, state) {
  var gameObjectRecord = state[/* gameObjectRecord */10];
  var perspectiveCameraProjectionRecord = state[/* perspectiveCameraProjectionRecord */14];
  var newrecord = Caml_array.caml_array_dup(state);
  newrecord[/* perspectiveCameraProjectionRecord */14] = _batchAddComponent(/* tuple */[
        uidArr,
        componentArr,
        gameObjectRecord[/* perspectiveCameraProjectionMap */24]
      ], AddPerspectiveCameraProjectionService$Wonderjs.handleAddComponent, perspectiveCameraProjectionRecord);
  return newrecord;
}

function _batchAddTransformComponent(uidArr, componentArr, state) {
  var gameObjectRecord = state[/* gameObjectRecord */10];
  var newrecord = Caml_array.caml_array_dup(state);
  newrecord[/* transformRecord */11] = /* Some */[_batchAddComponent(/* tuple */[
          uidArr,
          componentArr,
          gameObjectRecord[/* transformMap */22]
        ], AddTransformService$Wonderjs.handleAddComponent, RecordTransformMainService$Wonderjs.getRecord(state))];
  return newrecord;
}

function _batchAddMeshRendererComponent(uidArr, componentArr, state) {
  var gameObjectRecord = state[/* gameObjectRecord */10];
  return _batchAddComponentWithState(/* tuple */[
              uidArr,
              componentArr,
              gameObjectRecord[/* meshRendererMap */25]
            ], AddMeshRendererMainService$Wonderjs.handleAddComponent, state);
}

function _batchAddSharableComponent(param, param$1, record) {
  var handleAddComponentFunc = param$1[1];
  var increaseGroupCountFunc = param$1[0];
  var componentMap = param[2];
  var componentArr = param[1];
  var uidArr = param[0];
  _checkBatchAdd(uidArr, componentArr);
  return ArrayService$WonderCommonlib.reduceOneParami((function (record, uid, index) {
                var component = componentArr[index];
                ComponentMapService$Wonderjs.addComponent(uid, component, componentMap);
                var record$1 = increaseGroupCountFunc(component, record);
                return handleAddComponentFunc(component, uid, record$1);
              }), record, uidArr);
}

function _batchAddSharableGeometryComponent(param, param$1, record) {
  var batchAddComponentDataFunc = param$1[2];
  var handleAddComponentFunc = param$1[1];
  var increaseGroupCountFunc = param$1[0];
  var dataTupleForBatchAddComponentDataFunc = param[2];
  var componentArr = param[1];
  var uidArr = param[0];
  _checkBatchAdd(uidArr, componentArr);
  return ArrayService$WonderCommonlib.reduceOneParami((function (record, uid, index) {
                var component = componentArr[index];
                batchAddComponentDataFunc(dataTupleForBatchAddComponentDataFunc, component, uid);
                var record$1 = increaseGroupCountFunc(component, record);
                return handleAddComponentFunc(component, uid, record$1);
              }), record, uidArr);
}

function _batchAddBoxGeometryComponentDataForClone(param, component, uid) {
  return CurrentComponentDataMapRenderService$Wonderjs.addToMap(uid, /* tuple */[
              component,
              param[1]
            ], param[0]);
}

function batchAddBoxGeometryComponentForClone(uidArr, componentArr, state) {
  var gameObjectRecord = state[/* gameObjectRecord */10];
  var newrecord = Caml_array.caml_array_dup(state);
  newrecord[/* boxGeometryRecord */22] = _batchAddSharableGeometryComponent(/* tuple */[
        uidArr,
        componentArr,
        /* tuple */[
          gameObjectRecord[/* geometryDataMap */21],
          CurrentComponentDataMapService$Wonderjs.getBoxGeometryType(/* () */0)
        ]
      ], /* tuple */[
        GroupBoxGeometryService$Wonderjs.increaseGroupCount,
        AddBoxGeometryService$Wonderjs.handleAddComponent,
        _batchAddBoxGeometryComponentDataForClone
      ], RecordBoxGeometryMainService$Wonderjs.getRecord(state));
  return newrecord;
}

function _batchAddCustomGeometryComponentData(param, component, uid) {
  return CurrentComponentDataMapRenderService$Wonderjs.addToMap(uid, /* tuple */[
              component,
              param[1]
            ], param[0]);
}

function _batchAddCustomGeometryComponent(uidArr, componentArr, state) {
  var gameObjectRecord = state[/* gameObjectRecord */10];
  var newrecord = Caml_array.caml_array_dup(state);
  newrecord[/* customGeometryRecord */23] = /* Some */[_batchAddSharableGeometryComponent(/* tuple */[
          uidArr,
          componentArr,
          /* tuple */[
            gameObjectRecord[/* geometryDataMap */21],
            CurrentComponentDataMapService$Wonderjs.getCustomGeometryType(/* () */0)
          ]
        ], /* tuple */[
          GroupCustomGeometryService$Wonderjs.increaseGroupCount,
          AddCustomGeometryService$Wonderjs.handleAddComponent,
          _batchAddCustomGeometryComponentData
        ], RecordCustomGeometryMainService$Wonderjs.getRecord(state))];
  return newrecord;
}

function _batchAddMaterialComponent(param, funcTuple, record) {
  return _batchAddSharableComponent(/* tuple */[
              param[0],
              param[1],
              param[2]
            ], funcTuple, record);
}

function batchAddBasicMaterialComponentForClone(uidArr, componentArr, state) {
  var gameObjectRecord = state[/* gameObjectRecord */10];
  var newrecord = Caml_array.caml_array_dup(state);
  newrecord[/* basicMaterialRecord */15] = /* Some */[_batchAddMaterialComponent(/* tuple */[
          uidArr,
          componentArr,
          gameObjectRecord[/* basicMaterialMap */26]
        ], /* tuple */[
          GroupBasicMaterialService$Wonderjs.increaseGroupCount,
          AddBasicMaterialService$Wonderjs.handleAddComponent
        ], RecordBasicMaterialMainService$Wonderjs.getRecord(state))];
  return newrecord;
}

function _batchAddLightMaterialComponent(uidArr, componentArr, state) {
  var gameObjectRecord = state[/* gameObjectRecord */10];
  var newrecord = Caml_array.caml_array_dup(state);
  newrecord[/* lightMaterialRecord */16] = /* Some */[_batchAddMaterialComponent(/* tuple */[
          uidArr,
          componentArr,
          gameObjectRecord[/* lightMaterialMap */27]
        ], /* tuple */[
          GroupLightMaterialService$Wonderjs.increaseGroupCount,
          AddLightMaterialService$Wonderjs.handleAddComponent
        ], RecordLightMaterialMainService$Wonderjs.getRecord(state))];
  return newrecord;
}

function _batchAddDirectionLightComponent(uidArr, componentArr, state) {
  var gameObjectRecord = state[/* gameObjectRecord */10];
  var directionLightRecord = state[/* directionLightRecord */20];
  var newrecord = Caml_array.caml_array_dup(state);
  newrecord[/* directionLightRecord */20] = _batchAddComponent(/* tuple */[
        uidArr,
        componentArr,
        gameObjectRecord[/* directionLightMap */30]
      ], AddDirectionLightService$Wonderjs.handleAddComponent, directionLightRecord);
  return newrecord;
}

function _batchAddPointLightComponent(uidArr, componentArr, state) {
  var gameObjectRecord = state[/* gameObjectRecord */10];
  var pointLightRecord = state[/* pointLightRecord */21];
  var newrecord = Caml_array.caml_array_dup(state);
  newrecord[/* pointLightRecord */21] = _batchAddComponent(/* tuple */[
        uidArr,
        componentArr,
        gameObjectRecord[/* pointLightMap */31]
      ], AddPointLightService$Wonderjs.handleAddComponent, pointLightRecord);
  return newrecord;
}

var batchAddBasicCameraViewComponentForClone = _batchAddBasicCameraViewComponent;

var batchAddPerspectiveCameraProjectionComponentForClone = _batchAddPerspectiveCameraProjectionComponent;

var batchAddTransformComponentForClone = _batchAddTransformComponent;

var batchAddMeshRendererComponentForClone = _batchAddMeshRendererComponent;

var batchAddCustomGeometryComponentForClone = _batchAddCustomGeometryComponent;

var batchAddLightMaterialComponentForClone = _batchAddLightMaterialComponent;

var batchAddDirectionLightComponentForClone = _batchAddDirectionLightComponent;

var batchAddPointLightComponentForClone = _batchAddPointLightComponent;

var batchAddTransformComponentForCreate = _batchAddTransformComponent;

var batchAddCustomGeometryComponentForCreate = _batchAddCustomGeometryComponent;

var batchAddBasicCameraViewComponentForCreate = _batchAddBasicCameraViewComponent;

var batchAddPerspectiveCameraProjectionComponentForCreate = _batchAddPerspectiveCameraProjectionComponent;

var batchAddLightMaterialComponentForCreate = _batchAddLightMaterialComponent;

var batchAddMeshRendererComponentForCreate = _batchAddMeshRendererComponent;

var batchAddDirectionLightComponentForCreate = _batchAddDirectionLightComponent;

var batchAddPointLightComponentForCreate = _batchAddPointLightComponent;

export {
  _checkBatchAdd ,
  _batchAddComponent ,
  _batchAddComponentWithState ,
  _batchAddBasicCameraViewComponent ,
  batchAddBasicCameraViewComponentForClone ,
  _batchAddPerspectiveCameraProjectionComponent ,
  batchAddPerspectiveCameraProjectionComponentForClone ,
  _batchAddTransformComponent ,
  batchAddTransformComponentForClone ,
  _batchAddMeshRendererComponent ,
  batchAddMeshRendererComponentForClone ,
  _batchAddSharableComponent ,
  _batchAddSharableGeometryComponent ,
  _batchAddBoxGeometryComponentDataForClone ,
  batchAddBoxGeometryComponentForClone ,
  _batchAddCustomGeometryComponentData ,
  _batchAddCustomGeometryComponent ,
  batchAddCustomGeometryComponentForClone ,
  _batchAddMaterialComponent ,
  batchAddBasicMaterialComponentForClone ,
  _batchAddLightMaterialComponent ,
  batchAddLightMaterialComponentForClone ,
  _batchAddDirectionLightComponent ,
  batchAddDirectionLightComponentForClone ,
  _batchAddPointLightComponent ,
  batchAddPointLightComponentForClone ,
  batchAddTransformComponentForCreate ,
  batchAddCustomGeometryComponentForCreate ,
  batchAddBasicCameraViewComponentForCreate ,
  batchAddPerspectiveCameraProjectionComponentForCreate ,
  batchAddLightMaterialComponentForCreate ,
  batchAddMeshRendererComponentForCreate ,
  batchAddDirectionLightComponentForCreate ,
  batchAddPointLightComponentForCreate ,
  
}
/* Log-WonderLog Not a pure module */
