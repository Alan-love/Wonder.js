// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as Log$WonderLog                                  from "../../../../../../../node_modules/wonder-log/lib/es6_global/src/Log.js";
import * as Contract$WonderLog                             from "../../../../../../../node_modules/wonder-log/lib/es6_global/src/Contract.js";
import * as StateDataMain$Wonderjs                         from "../data/StateDataMain.js";
import * as IsDebugMainService$Wonderjs                    from "../state/IsDebugMainService.js";
import * as AddTransformService$Wonderjs                   from "../../../record/main/transform/AddTransformService.js";
import * as ArrayService$WonderCommonlib                   from "../../../../../../../node_modules/wonder-commonlib/lib/es6_global/src/ArrayService.js";
import * as ComponentMapService$Wonderjs                   from "../../../primitive/gameObject/ComponentMapService.js";
import * as AddPointLightService$Wonderjs                  from "../../../record/main/light/point/AddPointLightService.js";
import * as AddAmbientLightService$Wonderjs                from "../../../record/main/light/ambient/AddAmbientLightService.js";
import * as AddBasicMaterialService$Wonderjs               from "../../../record/main/material/basic/AddBasicMaterialService.js";
import * as AddLightMaterialService$Wonderjs               from "../../../record/main/material/light/AddLightMaterialService.js";
import * as GroupBoxGeometryService$Wonderjs               from "../../../record/main/geometry/box/GroupBoxGeometryService.js";
import * as AddDirectionLightService$Wonderjs              from "../../../record/main/light/direction/AddDirectionLightService.js";
import * as AddBasicCameraViewService$Wonderjs             from "../../../record/main/basic_camera_view/AddBasicCameraViewService.js";
import * as GroupBasicMaterialService$Wonderjs             from "../../../record/main/material/basic/GroupBasicMaterialService.js";
import * as GroupLightMaterialService$Wonderjs             from "../../../record/main/material/light/GroupLightMaterialService.js";
import * as AddMeshRendererMainService$Wonderjs            from "../meshRenderer/AddMeshRendererMainService.js";
import * as GroupCustomGeometryService$Wonderjs            from "../../../record/main/geometry/custom/GroupCustomGeometryService.js";
import * as RecordTransformMainService$Wonderjs            from "../transform/RecordTransformMainService.js";
import * as RecordBoxGeometryMainService$Wonderjs          from "../geometry/box/RecordBoxGeometryMainService.js";
import * as RecordBasicMaterialMainService$Wonderjs        from "../material/basic/RecordBasicMaterialMainService.js";
import * as RecordLightMaterialMainService$Wonderjs        from "../material/light/RecordLightMaterialMainService.js";
import * as RecordCustomGeometryMainService$Wonderjs       from "../geometry/custom/RecordCustomGeometryMainService.js";
import * as CurrentComponentDataMapRenderService$Wonderjs  from "../../render/gameObject/CurrentComponentDataMapRenderService.js";
import * as AddPerspectiveCameraProjectionService$Wonderjs from "../../../record/main/perspective_camera_projection/AddPerspectiveCameraProjectionService.js";

function _checkBatchAdd(uidArr, componentArr) {
  return Contract$WonderLog.requireCheck((function () {
                var gameObjectCount = uidArr.length;
                var componentCount = componentArr.length;
                return Contract$WonderLog.test(Log$WonderLog.buildAssertMessage("one gameObject should add one component", "" + (String(gameObjectCount) + (" gameObject add " + (String(componentCount) + " components")))), (function () {
                              return Contract$WonderLog.Operators[/* = */0](gameObjectCount, componentCount);
                            }));
              }), IsDebugMainService$Wonderjs.getIsDebug(StateDataMain$Wonderjs.stateData));
}

function _batchAddComponent(param, handleAddComponentFunc, componentRecord) {
  var componentMap = param[2];
  var componentArr = param[1];
  var uidArr = param[0];
  _checkBatchAdd(uidArr, componentArr);
  return ArrayService$WonderCommonlib.reduceOneParami((function (componentRecord, uid, index) {
                var component = componentArr[index];
                ComponentMapService$Wonderjs.addComponent(uid, component, componentMap);
                return handleAddComponentFunc(component, uid, componentRecord);
              }), componentRecord, uidArr);
}

function _batchAddComponentWithState(param, handleAddComponentFunc, state) {
  var componentMap = param[2];
  var componentArr = param[1];
  var uidArr = param[0];
  _checkBatchAdd(uidArr, componentArr);
  return ArrayService$WonderCommonlib.reduceOneParami((function (state, uid, index) {
                var component = componentArr[index];
                ComponentMapService$Wonderjs.addComponent(uid, component, componentMap);
                return handleAddComponentFunc(component, uid, state);
              }), state, uidArr);
}

function batchAddBasicCameraViewComponentForClone(uidArr, componentArr, state) {
  var gameObjectRecord = state[/* gameObjectRecord */10];
  var basicCameraViewRecord = state[/* basicCameraViewRecord */13];
  var newrecord = state.slice();
  newrecord[/* basicCameraViewRecord */13] = _batchAddComponent(/* tuple */[
        uidArr,
        componentArr,
        gameObjectRecord[/* basicCameraViewMap */23]
      ], AddBasicCameraViewService$Wonderjs.handleAddComponent, basicCameraViewRecord);
  return newrecord;
}

function batchAddPerspectiveCameraProjectionComponentForClone(uidArr, componentArr, state) {
  var gameObjectRecord = state[/* gameObjectRecord */10];
  var perspectiveCameraProjectionRecord = state[/* perspectiveCameraProjectionRecord */14];
  var newrecord = state.slice();
  newrecord[/* perspectiveCameraProjectionRecord */14] = _batchAddComponent(/* tuple */[
        uidArr,
        componentArr,
        gameObjectRecord[/* perspectiveCameraProjectionMap */24]
      ], AddPerspectiveCameraProjectionService$Wonderjs.handleAddComponent, perspectiveCameraProjectionRecord);
  return newrecord;
}

function batchAddTransformComponentForClone(uidArr, componentArr, state) {
  var gameObjectRecord = state[/* gameObjectRecord */10];
  var newrecord = state.slice();
  newrecord[/* transformRecord */11] = /* Some */[_batchAddComponent(/* tuple */[
          uidArr,
          componentArr,
          gameObjectRecord[/* transformMap */22]
        ], AddTransformService$Wonderjs.handleAddComponent, RecordTransformMainService$Wonderjs.getRecord(state))];
  return newrecord;
}

function batchAddMeshRendererComponentForClone(uidArr, componentArr, state) {
  var gameObjectRecord = state[/* gameObjectRecord */10];
  return _batchAddComponentWithState(/* tuple */[
              uidArr,
              componentArr,
              gameObjectRecord[/* meshRendererMap */25]
            ], AddMeshRendererMainService$Wonderjs.handleAddComponent, state);
}

function _batchAddSharableComponent(param, increaseGroupCountFunc, record) {
  var componentMap = param[2];
  var componentArr = param[1];
  var uidArr = param[0];
  _checkBatchAdd(uidArr, componentArr);
  return ArrayService$WonderCommonlib.reduceOneParami((function (record, uid, index) {
                var component = componentArr[index];
                ComponentMapService$Wonderjs.addComponent(uid, component, componentMap);
                return increaseGroupCountFunc(component, record);
              }), record, uidArr);
}

function _batchAddSharableGeometryComponent(param, increaseGroupCountFunc, batchAddComponentDataFunc, record) {
  var dataTupleForBatchAddComponentDataFunc = param[2];
  var componentArr = param[1];
  var uidArr = param[0];
  _checkBatchAdd(uidArr, componentArr);
  return ArrayService$WonderCommonlib.reduceOneParami((function (record, uid, index) {
                var component = componentArr[index];
                batchAddComponentDataFunc(dataTupleForBatchAddComponentDataFunc, component, uid);
                return increaseGroupCountFunc(component, record);
              }), record, uidArr);
}

function _batchAddBoxGeometryComponentDataForClone(param, component, uid) {
  return CurrentComponentDataMapRenderService$Wonderjs.addToMap(uid, /* tuple */[
              component,
              param[1]
            ], param[0]);
}

function batchAddBoxGeometryComponentForClone(uidArr, componentArr, state) {
  var gameObjectRecord = state[/* gameObjectRecord */10];
  var newrecord = state.slice();
  newrecord[/* boxGeometryRecord */20] = _batchAddSharableGeometryComponent(/* tuple */[
        uidArr,
        componentArr,
        /* tuple */[
          gameObjectRecord[/* currentGeometryDataMap */21],
          CurrentComponentDataMapRenderService$Wonderjs.getBoxGeometryType(/* () */0)
        ]
      ], GroupBoxGeometryService$Wonderjs.increaseGroupCount, _batchAddBoxGeometryComponentDataForClone, RecordBoxGeometryMainService$Wonderjs.getRecord(state));
  return newrecord;
}

function _batchAddCustomGeometryComponentDataForClone(param, component, uid) {
  return CurrentComponentDataMapRenderService$Wonderjs.addToMap(uid, /* tuple */[
              component,
              param[1]
            ], param[0]);
}

function batchAddCustomGeometryComponentForClone(uidArr, componentArr, state) {
  var gameObjectRecord = state[/* gameObjectRecord */10];
  var newrecord = state.slice();
  newrecord[/* customGeometryRecord */21] = /* Some */[_batchAddSharableGeometryComponent(/* tuple */[
          uidArr,
          componentArr,
          /* tuple */[
            gameObjectRecord[/* currentGeometryDataMap */21],
            CurrentComponentDataMapRenderService$Wonderjs.getCustomGeometryType(/* () */0)
          ]
        ], GroupCustomGeometryService$Wonderjs.increaseGroupCount, _batchAddCustomGeometryComponentDataForClone, RecordCustomGeometryMainService$Wonderjs.getRecord(state))];
  return newrecord;
}

function _batchAddMaterialComponentForClone(isShareBasicMaterial, param, param$1, record) {
  var componentMap = param[2];
  var componentArr = param[1];
  var uidArr = param[0];
  if (isShareBasicMaterial !== 0) {
    return _batchAddSharableComponent(/* tuple */[
                uidArr,
                componentArr,
                componentMap
              ], param$1[0], record);
  } else {
    return _batchAddComponent(/* tuple */[
                uidArr,
                componentArr,
                componentMap
              ], param$1[1], record);
  }
}

function batchAddBasicMaterialComponentForClone(isShareMaterial, uidArr, componentArr, state) {
  var gameObjectRecord = state[/* gameObjectRecord */10];
  var newrecord = state.slice();
  newrecord[/* basicMaterialRecord */15] = /* Some */[_batchAddMaterialComponentForClone(isShareMaterial, /* tuple */[
          uidArr,
          componentArr,
          gameObjectRecord[/* basicMaterialMap */26]
        ], /* tuple */[
          GroupBasicMaterialService$Wonderjs.increaseGroupCount,
          AddBasicMaterialService$Wonderjs.handleAddComponent
        ], RecordBasicMaterialMainService$Wonderjs.getRecord(state))];
  return newrecord;
}

function batchAddLightMaterialComponentForClone(isShareMaterial, uidArr, componentArr, state) {
  var gameObjectRecord = state[/* gameObjectRecord */10];
  var newrecord = state.slice();
  newrecord[/* lightMaterialRecord */16] = /* Some */[_batchAddMaterialComponentForClone(isShareMaterial, /* tuple */[
          uidArr,
          componentArr,
          gameObjectRecord[/* lightMaterialMap */27]
        ], /* tuple */[
          GroupLightMaterialService$Wonderjs.increaseGroupCount,
          AddLightMaterialService$Wonderjs.handleAddComponent
        ], RecordLightMaterialMainService$Wonderjs.getRecord(state))];
  return newrecord;
}

function batchAddAmbientLightComponentForClone(uidArr, componentArr, state) {
  var gameObjectRecord = state[/* gameObjectRecord */10];
  var ambientLightRecord = state[/* ambientLightRecord */17];
  var newrecord = state.slice();
  newrecord[/* ambientLightRecord */17] = _batchAddComponent(/* tuple */[
        uidArr,
        componentArr,
        gameObjectRecord[/* ambientLightMap */30]
      ], AddAmbientLightService$Wonderjs.handleAddComponent, ambientLightRecord);
  return newrecord;
}

function batchAddDirectionLightComponentForClone(uidArr, componentArr, state) {
  var gameObjectRecord = state[/* gameObjectRecord */10];
  var directionLightRecord = state[/* directionLightRecord */18];
  var newrecord = state.slice();
  newrecord[/* directionLightRecord */18] = _batchAddComponent(/* tuple */[
        uidArr,
        componentArr,
        gameObjectRecord[/* directionLightMap */31]
      ], AddDirectionLightService$Wonderjs.handleAddComponent, directionLightRecord);
  return newrecord;
}

function batchAddPointLightComponentForClone(uidArr, componentArr, state) {
  var gameObjectRecord = state[/* gameObjectRecord */10];
  var pointLightRecord = state[/* pointLightRecord */19];
  var newrecord = state.slice();
  newrecord[/* pointLightRecord */19] = _batchAddComponent(/* tuple */[
        uidArr,
        componentArr,
        gameObjectRecord[/* pointLightMap */32]
      ], AddPointLightService$Wonderjs.handleAddComponent, pointLightRecord);
  return newrecord;
}

export {
  _checkBatchAdd                                       ,
  _batchAddComponent                                   ,
  _batchAddComponentWithState                          ,
  batchAddBasicCameraViewComponentForClone             ,
  batchAddPerspectiveCameraProjectionComponentForClone ,
  batchAddTransformComponentForClone                   ,
  batchAddMeshRendererComponentForClone                ,
  _batchAddSharableComponent                           ,
  _batchAddSharableGeometryComponent                   ,
  _batchAddBoxGeometryComponentDataForClone            ,
  batchAddBoxGeometryComponentForClone                 ,
  _batchAddCustomGeometryComponentDataForClone         ,
  batchAddCustomGeometryComponentForClone              ,
  _batchAddMaterialComponentForClone                   ,
  batchAddBasicMaterialComponentForClone               ,
  batchAddLightMaterialComponentForClone               ,
  batchAddAmbientLightComponentForClone                ,
  batchAddDirectionLightComponentForClone              ,
  batchAddPointLightComponentForClone                  ,
  
}
/* Log-WonderLog Not a pure module */
