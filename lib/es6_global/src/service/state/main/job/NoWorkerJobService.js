// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as List                               from "../../../../../../../node_modules/bs-platform/lib/es6/list.js";
import * as Curry                              from "../../../../../../../node_modules/bs-platform/lib/es6/curry.js";
import * as Pervasives                         from "../../../../../../../node_modules/bs-platform/lib/es6/pervasives.js";
import * as JobService$Wonderjs                from "../../../primitiive/job/JobService.js";
import * as ArrayService$WonderCommonlib       from "../../../../../../../node_modules/wonder-commonlib/lib/es6_global/src/ArrayService.js";
import * as HashMapService$WonderCommonlib     from "../../../../../../../node_modules/wonder-commonlib/lib/es6_global/src/HashMapService.js";
import * as TimeControllerService$Wonderjs     from "../../../record/timeController/TimeControllerService.js";
import * as NoWorkerJobHandleSystem$Wonderjs   from "../../../../job/no_worker/NoWorkerJobHandleSystem.js";
import * as OperateNoWorkerJobService$Wonderjs from "../../../record/noWorkerJob/OperateNoWorkerJobService.js";

function _getAllNoWorkerJobs(executableJobs, jobHandleMap, _) {
  return ArrayService$WonderCommonlib.reduceOneParam((function (list, param) {
                var name = param[/* name */0];
                var match = HashMapService$WonderCommonlib.get(name, jobHandleMap);
                if (match) {
                  return Pervasives.$at(list, /* :: */[
                              /* tuple */[
                                name,
                                Curry._1(match[0], param[/* flags */1])
                              ],
                              /* [] */0
                            ]);
                } else {
                  return JobService$Wonderjs.handleGetNoneJob(name, jobHandleMap);
                }
              }), /* [] */0, executableJobs);
}

function _getNoWorkerInitJobList(state) {
  return state[/* jobRecord */1][/* noWorkerInitJobList */0];
}

function _getNoWorkerLoopJobList(state) {
  return state[/* jobRecord */1][/* noWorkerLoopJobList */1];
}

function execNoWorkerInitJobs(state) {
  return List.fold_left((function (state, param) {
                return Curry._1(param[1], state);
              }), state, state[/* jobRecord */1][/* noWorkerInitJobList */0]);
}

function execNoWorkerLoopJobs(state) {
  return List.fold_left((function (state, param) {
                return Curry._2(param[1], TimeControllerService$Wonderjs.getElapsed(state[/* timeControllerRecord */29]), state);
              }), state, state[/* jobRecord */1][/* noWorkerLoopJobList */1]);
}

function init(state) {
  var newrecord = state.slice();
  newrecord[/* jobRecord */1] = /* record */[
    /* noWorkerInitJobList */_getAllNoWorkerJobs(OperateNoWorkerJobService$Wonderjs.getInitPipelineExecutableJobs(OperateNoWorkerJobService$Wonderjs.getSetting(state[/* noWorkerJobRecord */2]), OperateNoWorkerJobService$Wonderjs.getInitPipelines(state[/* noWorkerJobRecord */2]), OperateNoWorkerJobService$Wonderjs.getInitJobs(state[/* noWorkerJobRecord */2])), NoWorkerJobHandleSystem$Wonderjs.createInitJobHandleMap(/* () */0), state),
    /* noWorkerLoopJobList */_getAllNoWorkerJobs(OperateNoWorkerJobService$Wonderjs.getLoopPipelineExecutableJobs(OperateNoWorkerJobService$Wonderjs.getSetting(state[/* noWorkerJobRecord */2]), OperateNoWorkerJobService$Wonderjs.getLoopPipelines(state[/* noWorkerJobRecord */2]), OperateNoWorkerJobService$Wonderjs.getLoopJobs(state[/* noWorkerJobRecord */2])), NoWorkerJobHandleSystem$Wonderjs.createLoopJobHandleMap(/* () */0), state)
  ];
  return newrecord;
}

function addNoWorkerInitJob(targetJobName, afterJobName, targetHandleFunc, state) {
  var newrecord = state.slice();
  var init = state[/* jobRecord */1];
  newrecord[/* jobRecord */1] = /* record */[
    /* noWorkerInitJobList */JobService$Wonderjs.addJob(/* tuple */[
          targetJobName,
          afterJobName,
          targetHandleFunc
        ], state[/* jobRecord */1][/* noWorkerInitJobList */0]),
    /* noWorkerLoopJobList */init[/* noWorkerLoopJobList */1]
  ];
  return newrecord;
}

function addNoWorkerLoopJob(targetJobName, afterJobName, targetHandleFunc, state) {
  var newrecord = state.slice();
  var init = state[/* jobRecord */1];
  newrecord[/* jobRecord */1] = /* record */[
    /* noWorkerInitJobList */init[/* noWorkerInitJobList */0],
    /* noWorkerLoopJobList */JobService$Wonderjs.addJob(/* tuple */[
          targetJobName,
          afterJobName,
          targetHandleFunc
        ], state[/* jobRecord */1][/* noWorkerLoopJobList */1])
  ];
  return newrecord;
}

function removeNoWorkerInitJob(targetJobName, state) {
  var newrecord = state.slice();
  var init = state[/* jobRecord */1];
  newrecord[/* jobRecord */1] = /* record */[
    /* noWorkerInitJobList */JobService$Wonderjs.removeJob(targetJobName, state[/* jobRecord */1][/* noWorkerInitJobList */0]),
    /* noWorkerLoopJobList */init[/* noWorkerLoopJobList */1]
  ];
  return newrecord;
}

function removeNoWorkerLoopJob(targetJobName, state) {
  var newrecord = state.slice();
  var init = state[/* jobRecord */1];
  newrecord[/* jobRecord */1] = /* record */[
    /* noWorkerInitJobList */init[/* noWorkerInitJobList */0],
    /* noWorkerLoopJobList */JobService$Wonderjs.removeJob(targetJobName, state[/* jobRecord */1][/* noWorkerLoopJobList */1])
  ];
  return newrecord;
}

export {
  _getAllNoWorkerJobs     ,
  _getNoWorkerInitJobList ,
  _getNoWorkerLoopJobList ,
  execNoWorkerInitJobs    ,
  execNoWorkerLoopJobs    ,
  init                    ,
  addNoWorkerInitJob      ,
  addNoWorkerLoopJob      ,
  removeNoWorkerInitJob   ,
  removeNoWorkerLoopJob   ,
  
}
/* JobService-Wonderjs Not a pure module */
