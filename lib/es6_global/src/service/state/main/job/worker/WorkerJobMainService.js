// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as Curry                                        from "../../../../../../../../node_modules/bs-platform/lib/es6/curry.js";
import * as HashMapService$WonderCommonlib               from "../../../../../../../../node_modules/wonder-commonlib/lib/es6_global/src/HashMapService.js";
import * as OperateRenderWorkerJobService$Wonderjs       from "../../../../record/main/workerJob/OperateRenderWorkerJobService.js";
import * as OperateMainInitWorkerJobMainService$Wonderjs from "./OperateMainInitWorkerJobMainService.js";
import * as OperateMainLoopWorkerJobMainService$Wonderjs from "./OperateMainLoopWorkerJobMainService.js";

function getMainInitJobStream(stateData, param, state) {
  return OperateMainInitWorkerJobMainService$Wonderjs.getMainInitJobStream(Curry._1(param[0], /* () */0), stateData, param[1], state);
}

function getMainLoopJobStream(stateData, param, state) {
  return OperateMainLoopWorkerJobMainService$Wonderjs.getMainLoopJobStream(Curry._1(param[0], /* () */0), stateData, param[1], state);
}

function getRenderWorkerJobStreamArr(pipelineJobs, workerJobs, param, stateData) {
  return OperateRenderWorkerJobService$Wonderjs.getRenderWorkerJobStreamArr(/* tuple */[
              pipelineJobs,
              workerJobs
            ], Curry._1(param[0], /* () */0), stateData, param[1]);
}

function addWorkerMainInitJob(param, action, targetHandleFunc, state) {
  var sourceJobName = param[1];
  var targetJobName = param[0];
  var newrecord = state.slice();
  var newrecord$1 = state[/* jobRecord */1].slice();
  newrecord$1[/* workerCustomMainInitTargetJobMap */2] = HashMapService$WonderCommonlib.set(sourceJobName, /* tuple */[
        targetJobName,
        action,
        targetHandleFunc
      ], state[/* jobRecord */1][/* workerCustomMainInitTargetJobMap */2]);
  newrecord$1[/* workerCustomMainInitSourceJobMap */3] = HashMapService$WonderCommonlib.set(targetJobName, sourceJobName, state[/* jobRecord */1][/* workerCustomMainInitSourceJobMap */3]);
  newrecord[/* jobRecord */1] = newrecord$1;
  return newrecord;
}

function removeWorkerMainInitJob(targetJobName, state) {
  var match = HashMapService$WonderCommonlib.get(targetJobName, state[/* jobRecord */1][/* workerCustomMainInitSourceJobMap */3]);
  if (match) {
    var newrecord = state.slice();
    var newrecord$1 = state[/* jobRecord */1].slice();
    newrecord$1[/* workerCustomMainInitTargetJobMap */2] = HashMapService$WonderCommonlib.deleteVal(match[0], state[/* jobRecord */1][/* workerCustomMainInitTargetJobMap */2]);
    newrecord[/* jobRecord */1] = newrecord$1;
    return newrecord;
  } else {
    var newrecord$2 = state.slice();
    var newrecord$3 = state[/* jobRecord */1].slice();
    newrecord$3[/* workerCustomMainInitRemovedDefaultJobMap */4] = HashMapService$WonderCommonlib.set(targetJobName, /* true */1, state[/* jobRecord */1][/* workerCustomMainInitRemovedDefaultJobMap */4]);
    newrecord$2[/* jobRecord */1] = newrecord$3;
    return newrecord$2;
  }
}

function addWorkerMainLoopJob(param, action, targetHandleFunc, state) {
  var sourceJobName = param[1];
  var targetJobName = param[0];
  var newrecord = state.slice();
  var newrecord$1 = state[/* jobRecord */1].slice();
  newrecord$1[/* workerCustomMainLoopTargetJobMap */5] = HashMapService$WonderCommonlib.set(sourceJobName, /* tuple */[
        targetJobName,
        action,
        targetHandleFunc
      ], state[/* jobRecord */1][/* workerCustomMainLoopTargetJobMap */5]);
  newrecord$1[/* workerCustomMainLoopSourceJobMap */6] = HashMapService$WonderCommonlib.set(targetJobName, sourceJobName, state[/* jobRecord */1][/* workerCustomMainLoopSourceJobMap */6]);
  newrecord[/* jobRecord */1] = newrecord$1;
  return newrecord;
}

function removeWorkerMainLoopJob(targetJobName, state) {
  var match = HashMapService$WonderCommonlib.get(targetJobName, state[/* jobRecord */1][/* workerCustomMainLoopSourceJobMap */6]);
  if (match) {
    var newrecord = state.slice();
    var newrecord$1 = state[/* jobRecord */1].slice();
    newrecord$1[/* workerCustomMainLoopTargetJobMap */5] = HashMapService$WonderCommonlib.deleteVal(match[0], state[/* jobRecord */1][/* workerCustomMainLoopTargetJobMap */5]);
    newrecord[/* jobRecord */1] = newrecord$1;
    return newrecord;
  } else {
    var newrecord$2 = state.slice();
    var newrecord$3 = state[/* jobRecord */1].slice();
    newrecord$3[/* workerCustomMainLoopRemovedDefaultJobMap */7] = HashMapService$WonderCommonlib.set(targetJobName, /* true */1, state[/* jobRecord */1][/* workerCustomMainLoopRemovedDefaultJobMap */7]);
    newrecord$2[/* jobRecord */1] = newrecord$3;
    return newrecord$2;
  }
}

export {
  getMainInitJobStream        ,
  getMainLoopJobStream        ,
  getRenderWorkerJobStreamArr ,
  addWorkerMainInitJob        ,
  removeWorkerMainInitJob     ,
  addWorkerMainLoopJob        ,
  removeWorkerMainLoopJob     ,
  
}
/* HashMapService-WonderCommonlib Not a pure module */
