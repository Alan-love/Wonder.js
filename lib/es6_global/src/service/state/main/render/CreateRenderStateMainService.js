// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as BufferSettingService$Wonderjs              from "../../../record/main/setting/BufferSettingService.js";
import * as CopyTransformService$Wonderjs              from "../../../record/main/transform/CopyTransformService.js";
import * as OperateSettingService$Wonderjs             from "../../../record/main/setting/OperateSettingService.js";
import * as WorkerDetectMainService$Wonderjs           from "../workerDetect/WorkerDetectMainService.js";
import * as OperateRenderMainService$Wonderjs          from "./OperateRenderMainService.js";
import * as PositionLightMainService$Wonderjs          from "../light/PositionLightMainService.js";
import * as RecordTransformMainService$Wonderjs        from "../transform/RecordTransformMainService.js";
import * as RecordBoxGeometryMainService$Wonderjs      from "../geometry/box/RecordBoxGeometryMainService.js";
import * as PositionPointLightMainService$Wonderjs     from "../light/point/PositionPointLightMainService.js";
import * as RecordBasicMaterialMainService$Wonderjs    from "../material/basic/RecordBasicMaterialMainService.js";
import * as RecordLightMaterialMainService$Wonderjs    from "../material/light/RecordLightMaterialMainService.js";
import * as RecordCustomGeometryMainService$Wonderjs   from "../geometry/custom/RecordCustomGeometryMainService.js";
import * as RecordSourceInstanceMainService$Wonderjs   from "../instance/RecordSourceInstanceMainService.js";
import * as PositionDirectionLightMainService$Wonderjs from "../light/direction/PositionDirectionLightMainService.js";

function createRenderState(state) {
  var settingRecord = state[/* settingRecord */0];
  var ambientLightRecord = state[/* ambientLightRecord */17];
  var directionLightRecord = state[/* directionLightRecord */18];
  var pointLightRecord = state[/* pointLightRecord */19];
  var transformRecord = RecordTransformMainService$Wonderjs.getRecord(state);
  var localToWorldMatrices = transformRecord[/* localToWorldMatrices */2];
  var localPositions = transformRecord[/* localPositions */3];
  var localToWorldMatrixCacheMap = transformRecord[/* localToWorldMatrixCacheMap */13];
  var normalMatrixCacheMap = transformRecord[/* normalMatrixCacheMap */14];
  var boxGeometryRecord = RecordBoxGeometryMainService$Wonderjs.getRecord(state);
  var customGeometryRecord = RecordCustomGeometryMainService$Wonderjs.getRecord(state);
  var basicMaterialRecord = RecordBasicMaterialMainService$Wonderjs.getRecord(state);
  var lightMaterialRecord = RecordLightMaterialMainService$Wonderjs.getRecord(state);
  var sourceInstanceRecord = RecordSourceInstanceMainService$Wonderjs.getRecord(state);
  var isUseWorker = WorkerDetectMainService$Wonderjs.isUseWorker(state);
  var renderStateTransformRecord = isUseWorker !== 0 ? /* record */[
      /* localToWorldMatrices */CopyTransformService$Wonderjs.unsafeGetCopiedLocalToWorldMatrices(transformRecord),
      /* localPositions */CopyTransformService$Wonderjs.unsafeGetCopiedLocalPositions(transformRecord),
      /* localToWorldMatrixCacheMap */localToWorldMatrixCacheMap,
      /* normalMatrixCacheMap */normalMatrixCacheMap
    ] : /* record */[
      /* localToWorldMatrices */localToWorldMatrices,
      /* localPositions */localPositions,
      /* localToWorldMatrixCacheMap */localToWorldMatrixCacheMap,
      /* normalMatrixCacheMap */normalMatrixCacheMap
    ];
  return /* record */[
          /* vboBufferRecord */state[/* vboBufferRecord */31],
          /* typeArrayPoolRecord */state[/* typeArrayPoolRecord */33],
          /* glslSenderRecord */state[/* glslSenderRecord */27],
          /* programRecord */state[/* programRecord */25],
          /* boxGeometryRecord : record */[
            /* vertices */boxGeometryRecord[/* vertices */1],
            /* normals */boxGeometryRecord[/* normals */2],
            /* indices */boxGeometryRecord[/* indices */3]
          ],
          /* customGeometryRecord : record */[
            /* vertices */customGeometryRecord[/* vertices */2],
            /* normals */customGeometryRecord[/* normals */3],
            /* indices */customGeometryRecord[/* indices */4],
            /* verticesInfos */customGeometryRecord[/* verticesInfos */5],
            /* normalsInfos */customGeometryRecord[/* normalsInfos */6],
            /* indicesInfos */customGeometryRecord[/* indicesInfos */7]
          ],
          /* cameraRecord */OperateRenderMainService$Wonderjs.getCameraRecord(state),
          /* basicMaterialRecord : record */[
            /* shaderIndices */basicMaterialRecord[/* shaderIndices */2],
            /* colors */basicMaterialRecord[/* colors */3]
          ],
          /* lightMaterialRecord : record */[
            /* shaderIndices */lightMaterialRecord[/* shaderIndices */2],
            /* diffuseColors */lightMaterialRecord[/* diffuseColors */3],
            /* specularColors */lightMaterialRecord[/* specularColors */4],
            /* shininess */lightMaterialRecord[/* shininess */5]
          ],
          /* ambientLightRecord : record */[
            /* index */ambientLightRecord[/* index */0],
            /* colors */ambientLightRecord[/* colors */2]
          ],
          /* directionLightRecord : record */[
            /* index */directionLightRecord[/* index */0],
            /* colors */directionLightRecord[/* colors */2],
            /* intensities */directionLightRecord[/* intensities */3],
            /* positionMap */PositionLightMainService$Wonderjs.buildPositionMap(directionLightRecord[/* index */0], PositionDirectionLightMainService$Wonderjs.getPosition, state)
          ],
          /* pointLightRecord : record */[
            /* index */pointLightRecord[/* index */0],
            /* colors */pointLightRecord[/* colors */2],
            /* intensities */pointLightRecord[/* intensities */3],
            /* constants */pointLightRecord[/* constants */4],
            /* linears */pointLightRecord[/* linears */5],
            /* quadratics */pointLightRecord[/* quadratics */6],
            /* ranges */pointLightRecord[/* ranges */7],
            /* positionMap */PositionLightMainService$Wonderjs.buildPositionMap(pointLightRecord[/* index */0], PositionPointLightMainService$Wonderjs.getPosition, state)
          ],
          /* transformRecord */renderStateTransformRecord,
          /* sourceInstanceRecord : record */[
            /* objectInstanceTransformIndexMap */sourceInstanceRecord[/* objectInstanceTransformIndexMap */1],
            /* objectInstanceTransformCollections */sourceInstanceRecord[/* objectInstanceTransformCollections */4],
            /* isTransformStatics */sourceInstanceRecord[/* isTransformStatics */3],
            /* matrixInstanceBufferCapacityMap */sourceInstanceRecord[/* matrixInstanceBufferCapacityMap */5],
            /* matrixFloat32ArrayMap */sourceInstanceRecord[/* matrixFloat32ArrayMap */6],
            /* isSendTransformMatrixDataMap */sourceInstanceRecord[/* isSendTransformMatrixDataMap */7]
          ],
          /* gpuDetectRecord */state[/* gpuDetectRecord */5],
          /* globalTempRecord */state[/* globalTempRecord */32],
          /* deviceManagerRecord */state[/* deviceManagerRecord */9],
          /* shaderRecord : record */[/* index */state[/* shaderRecord */23][/* index */0]],
          /* settingRecord : record */[
            /* gpu : Some */[OperateSettingService$Wonderjs.unsafeGetGPU(settingRecord)],
            /* instanceBuffer : Some */[/* record */[/* objectInstanceCountPerSourceInstance */BufferSettingService$Wonderjs.getObjectInstanceCountPerSourceInstance(settingRecord)]]
          ],
          /* workerDetectRecord : record */[/* isUseWorker */isUseWorker]
        ];
}

export {
  createRenderState ,
  
}
/* BufferSettingService-Wonderjs Not a pure module */
