// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as OptionService$Wonderjs                   from "../../../atom/OptionService.js";
import * as SparseMapService$Wonderjs                from "../../../atom/SparseMapService.js";
import * as TypeArrayService$Wonderjs                from "../../../primitive/buffer/TypeArrayService.js";
import * as ArrayService$WonderCommonlib             from "../../../../../../../node_modules/wonder-commonlib/lib/es6_global/src/ArrayService.js";
import * as BufferSettingService$Wonderjs            from "../../../record/main/setting/BufferSettingService.js";
import * as CopyTypeArrayService$Wonderjs            from "../../../primitive/copy/CopyTypeArrayService.js";
import * as BufferTransformService$Wonderjs          from "../../../record/main/transform/BufferTransformService.js";
import * as CopyArrayBufferService$Wonderjs          from "../../../primitive/copy/CopyArrayBufferService.js";
import * as SparseMapService$WonderCommonlib         from "../../../../../../../node_modules/wonder-commonlib/lib/es6_global/src/SparseMapService.js";
import * as WorkerDetectMainService$Wonderjs         from "../workerDetect/WorkerDetectMainService.js";
import * as CreateTypeArrayTransformService$Wonderjs from "../../../record/all/transform/CreateTypeArrayTransformService.js";

function getRecord(param) {
  return OptionService$Wonderjs.unsafeGet(param[/* transformRecord */11]);
}

function getLocalToWorldMatrixTypeArray(index, typeArr) {
  return TypeArrayService$Wonderjs.getFloat16TypeArray(BufferTransformService$Wonderjs.getLocalToWorldMatrixIndex(index), typeArr);
}

function getLocalToWorldMatrix(index, typeArr) {
  return TypeArrayService$Wonderjs.getFloat16(BufferTransformService$Wonderjs.getLocalToWorldMatrixIndex(index), typeArr);
}

function setLocalToWorldMatrix(index, data, typeArr) {
  return TypeArrayService$Wonderjs.setFloat16(BufferTransformService$Wonderjs.getLocalToWorldMatrixIndex(index), data, typeArr);
}

function getLocalPositionTuple(index, typeArr) {
  return TypeArrayService$Wonderjs.getFloat3Tuple(BufferTransformService$Wonderjs.getLocalPositionIndex(index), typeArr);
}

function getLocalPositionTypeArray(index, typeArr) {
  return TypeArrayService$Wonderjs.getFloat3TypeArray(BufferTransformService$Wonderjs.getLocalPositionIndex(index), typeArr);
}

function setLocalPosition(index, data, typeArr) {
  return TypeArrayService$Wonderjs.setFloat3(BufferTransformService$Wonderjs.getLocalPositionIndex(index), data, typeArr);
}

function setLocalPositionByTuple(index, dataTuple, typeArr) {
  return TypeArrayService$Wonderjs.setFloat3ByTuple(BufferTransformService$Wonderjs.getLocalPositionIndex(index), dataTuple, typeArr);
}

function _setDefaultTypeArrData(count, defaultLocalToWorldMatrix, defaultLocalPosition, param) {
  return /* tuple */[
          param[0],
          ArrayService$WonderCommonlib.reduceOneParam((function (param, index) {
                  return /* tuple */[
                          setLocalToWorldMatrix(index, defaultLocalToWorldMatrix, param[0]),
                          setLocalPosition(index, defaultLocalPosition, param[1])
                        ];
                }), /* tuple */[
                param[1],
                param[2]
              ], ArrayService$WonderCommonlib.range(0, count - 1 | 0))
        ];
}

function _initBufferData(count, defaultLocalToWorldMatrix, defaultLocalPosition) {
  var buffer = BufferTransformService$Wonderjs.createBuffer(count);
  var match = CreateTypeArrayTransformService$Wonderjs.createTypeArrays(buffer, count);
  return _setDefaultTypeArrData(count, defaultLocalToWorldMatrix, defaultLocalPosition, /* tuple */[
              buffer,
              match[0],
              match[1]
            ]);
}

function create(state) {
  var transformDataBufferCount = BufferSettingService$Wonderjs.getTransformDataBufferCount(state[/* settingRecord */0]);
  var defaultLocalToWorldMatrix = /* float array */[
    1,
    0,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    0,
    1
  ];
  var defaultLocalPosition = /* float array */[
    0,
    0,
    0
  ];
  var match = _initBufferData(transformDataBufferCount, defaultLocalToWorldMatrix, defaultLocalPosition);
  var match$1 = match[1];
  var localPositions = match$1[1];
  var localToWorldMatrices = match$1[0];
  var buffer = match[0];
  var match$2 = WorkerDetectMainService$Wonderjs.isUseWorker(state);
  if (match$2 !== 0) {
    var match$3 = _initBufferData(transformDataBufferCount, defaultLocalToWorldMatrix, defaultLocalPosition);
    var match$4 = match$3[1];
    state[/* transformRecord */11] = /* Some */[/* record */[
        /* index */0,
        /* buffer */buffer,
        /* localToWorldMatrices */localToWorldMatrices,
        /* localPositions */localPositions,
        /* copiedBuffer : Some */[match$3[0]],
        /* copiedLocalToWorldMatrices : Some */[match$4[0]],
        /* copiedLocalPositions : Some */[match$4[1]],
        /* defaultLocalToWorldMatrix */defaultLocalToWorldMatrix,
        /* defaultLocalPosition */defaultLocalPosition,
        /* parentMap */SparseMapService$WonderCommonlib.createEmpty(/* () */0),
        /* childMap */SparseMapService$WonderCommonlib.createEmpty(/* () */0),
        /* gameObjectMap */SparseMapService$WonderCommonlib.createEmpty(/* () */0),
        /* dirtyMap */SparseMapService$WonderCommonlib.createEmpty(/* () */0),
        /* localToWorldMatrixCacheMap */SparseMapService$WonderCommonlib.createEmpty(/* () */0),
        /* normalMatrixCacheMap */SparseMapService$WonderCommonlib.createEmpty(/* () */0),
        /* disposedIndexArray */ArrayService$WonderCommonlib.createEmpty(/* () */0)
      ]];
  } else {
    state[/* transformRecord */11] = /* Some */[/* record */[
        /* index */0,
        /* buffer */buffer,
        /* localToWorldMatrices */localToWorldMatrices,
        /* localPositions */localPositions,
        /* copiedBuffer : None */0,
        /* copiedLocalToWorldMatrices : None */0,
        /* copiedLocalPositions : None */0,
        /* defaultLocalToWorldMatrix */defaultLocalToWorldMatrix,
        /* defaultLocalPosition */defaultLocalPosition,
        /* parentMap */SparseMapService$WonderCommonlib.createEmpty(/* () */0),
        /* childMap */SparseMapService$WonderCommonlib.createEmpty(/* () */0),
        /* gameObjectMap */SparseMapService$WonderCommonlib.createEmpty(/* () */0),
        /* dirtyMap */SparseMapService$WonderCommonlib.createEmpty(/* () */0),
        /* localToWorldMatrixCacheMap */SparseMapService$WonderCommonlib.createEmpty(/* () */0),
        /* normalMatrixCacheMap */SparseMapService$WonderCommonlib.createEmpty(/* () */0),
        /* disposedIndexArray */ArrayService$WonderCommonlib.createEmpty(/* () */0)
      ]];
  }
  return state;
}

function deepCopyForRestore(state) {
  var record = getRecord(state);
  var index = record[/* index */0];
  var parentMap = record[/* parentMap */9];
  var childMap = record[/* childMap */10];
  var gameObjectMap = record[/* gameObjectMap */11];
  var dirtyMap = record[/* dirtyMap */12];
  var disposedIndexArray = record[/* disposedIndexArray */15];
  var newrecord = state.slice();
  newrecord[/* transformRecord */11] = /* Some */[/* record */[
      /* index */record[/* index */0],
      /* buffer */CopyArrayBufferService$Wonderjs.copyArrayBuffer(record[/* buffer */1], BufferTransformService$Wonderjs.getTotalByteLength(index)),
      /* localToWorldMatrices */record[/* localToWorldMatrices */2],
      /* localPositions */record[/* localPositions */3],
      /* copiedBuffer */record[/* copiedBuffer */4],
      /* copiedLocalToWorldMatrices */record[/* copiedLocalToWorldMatrices */5],
      /* copiedLocalPositions */record[/* copiedLocalPositions */6],
      /* defaultLocalToWorldMatrix */record[/* defaultLocalToWorldMatrix */7],
      /* defaultLocalPosition */record[/* defaultLocalPosition */8],
      /* parentMap */SparseMapService$Wonderjs.copy(parentMap),
      /* childMap */CopyTypeArrayService$Wonderjs.deepCopyArrayArray(childMap),
      /* gameObjectMap */SparseMapService$Wonderjs.copy(gameObjectMap),
      /* dirtyMap */SparseMapService$Wonderjs.copy(dirtyMap),
      /* localToWorldMatrixCacheMap */SparseMapService$WonderCommonlib.createEmpty(/* () */0),
      /* normalMatrixCacheMap */SparseMapService$WonderCommonlib.createEmpty(/* () */0),
      /* disposedIndexArray */disposedIndexArray.slice()
    ]];
  return newrecord;
}

export {
  getRecord                      ,
  getLocalToWorldMatrixTypeArray ,
  getLocalToWorldMatrix          ,
  setLocalToWorldMatrix          ,
  getLocalPositionTuple          ,
  getLocalPositionTypeArray      ,
  setLocalPosition               ,
  setLocalPositionByTuple        ,
  _setDefaultTypeArrData         ,
  _initBufferData                ,
  create                         ,
  deepCopyForRestore             ,
  
}
/* OptionService-Wonderjs Not a pure module */
