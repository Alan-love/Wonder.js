// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as Matrix4Service$Wonderjs              from "../../../atom/Matrix4Service.js";
import * as GlobalTempService$Wonderjs           from "../../../record/all/globalTemp/GlobalTempService.js";
import * as DirtyTransformService$Wonderjs       from "../../../record/main/transform/DirtyTransformService.js";
import * as SparseMapService$WonderCommonlib     from "../../../../../../../node_modules/wonder-commonlib/lib/es6_global/src/SparseMapService.js";
import * as HierachyTransformService$Wonderjs    from "../../../record/main/transform/HierachyTransformService.js";
import * as ModelMatrixTransformService$Wonderjs from "../../../record/main/transform/ModelMatrixTransformService.js";

function _clearCache(transform, record) {
  var normalMatrixCacheMap = record[/* normalMatrixCacheMap */14];
  SparseMapService$WonderCommonlib.deleteVal(transform, normalMatrixCacheMap);
  return record;
}

function update(transform, globalTempRecord, transformRecord) {
  var localPositions = transformRecord[/* localPositions */3];
  var match = DirtyTransformService$Wonderjs.isDirty(transform, transformRecord);
  if (match !== 0) {
    var transformRecord$1 = _clearCache(transform, DirtyTransformService$Wonderjs.mark(transform, /* false */0, transformRecord));
    var match$1 = HierachyTransformService$Wonderjs.getParent(transform, transformRecord$1);
    if (match$1) {
      var parent = match$1[0];
      var transformRecord$2 = update(parent, globalTempRecord, transformRecord$1);
      var parentLocalToWorldMatrix = ModelMatrixTransformService$Wonderjs.getLocalToWorldMatrixTypeArray(parent, transformRecord$2[/* localToWorldMatrices */2], transformRecord$2[/* localToWorldMatrixCacheMap */13]);
      var childLocalToWorldMatrix = ModelMatrixTransformService$Wonderjs.getLocalToWorldMatrixTypeArray(transform, transformRecord$2[/* localToWorldMatrices */2], transformRecord$2[/* localToWorldMatrixCacheMap */13]);
      Matrix4Service$Wonderjs.multiply(parentLocalToWorldMatrix, Matrix4Service$Wonderjs.fromTranslation(ModelMatrixTransformService$Wonderjs.getLocalPositionTuple(transform, localPositions), GlobalTempService$Wonderjs.getFloat32Array1(globalTempRecord)), childLocalToWorldMatrix);
      return transformRecord$2;
    } else {
      var localToWorldMatrix = ModelMatrixTransformService$Wonderjs.getLocalToWorldMatrixTypeArray(transform, transformRecord$1[/* localToWorldMatrices */2], transformRecord$1[/* localToWorldMatrixCacheMap */13]);
      Matrix4Service$Wonderjs.fromTranslation(ModelMatrixTransformService$Wonderjs.getLocalPositionTuple(transform, localPositions), localToWorldMatrix);
      return transformRecord$1;
    }
  } else {
    return transformRecord;
  }
}

function _updateAndGetPosition(transform, getTranslationFunc, globalTempRecord, record) {
  var match = update(transform, globalTempRecord, record);
  var localToWorldMatrices = match[/* localToWorldMatrices */2];
  var localToWorldMatrixCacheMap = match[/* localToWorldMatrixCacheMap */13];
  var localToWorldMatrix = ModelMatrixTransformService$Wonderjs.getLocalToWorldMatrixTypeArray(transform, localToWorldMatrices, localToWorldMatrixCacheMap);
  return getTranslationFunc(localToWorldMatrix);
}

function updateAndGetPositionTypeArray(transform, globalTempRecord, record) {
  return _updateAndGetPosition(transform, Matrix4Service$Wonderjs.getTranslationTypeArray, globalTempRecord, record);
}

function updateAndGetPositionTuple(transform, globalTempRecord, record) {
  return _updateAndGetPosition(transform, Matrix4Service$Wonderjs.getTranslationTuple, globalTempRecord, record);
}

function updateAndGetLocalToWorldMatrixTypeArray(transform, globalTempRecord, record) {
  var record$1 = update(transform, globalTempRecord, record);
  return ModelMatrixTransformService$Wonderjs.getLocalToWorldMatrixTypeArray(transform, record$1[/* localToWorldMatrices */2], record$1[/* localToWorldMatrixCacheMap */13]);
}

function updateAndGetNormalMatrixTypeArray(transform, globalTempRecord, record) {
  var match = update(transform, globalTempRecord, record);
  var localToWorldMatrices = match[/* localToWorldMatrices */2];
  var localToWorldMatrixCacheMap = match[/* localToWorldMatrixCacheMap */13];
  var normalMatrixCacheMap = match[/* normalMatrixCacheMap */14];
  return ModelMatrixTransformService$Wonderjs.getNormalMatrixTypeArray(transform, localToWorldMatrices, /* tuple */[
              localToWorldMatrixCacheMap,
              normalMatrixCacheMap
            ]);
}

function updateAndSetPositionByTuple(transform, position, globalTempRecord, record) {
  var match = HierachyTransformService$Wonderjs.getParent(transform, record);
  var tmp;
  if (match) {
    var parent = match[0];
    var record$1 = update(parent, globalTempRecord, record);
    tmp = ModelMatrixTransformService$Wonderjs.setPositionByTuple(transform, parent, position, /* tuple */[
          globalTempRecord,
          record$1
        ]);
  } else {
    tmp = ModelMatrixTransformService$Wonderjs.setLocalPositionByTuple(transform, position, record);
  }
  return HierachyTransformService$Wonderjs.markHierachyDirty(transform, tmp);
}

export {
  _clearCache                             ,
  update                                  ,
  _updateAndGetPosition                   ,
  updateAndGetPositionTypeArray           ,
  updateAndGetPositionTuple               ,
  updateAndGetLocalToWorldMatrixTypeArray ,
  updateAndGetNormalMatrixTypeArray       ,
  updateAndSetPositionByTuple             ,
  
}
/* Matrix4Service-Wonderjs Not a pure module */
