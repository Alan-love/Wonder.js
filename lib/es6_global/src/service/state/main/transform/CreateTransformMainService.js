// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as TypeArrayService$Wonderjs        from "../../../primitiive/TypeArrayService.js";
import * as ArrayService$WonderCommonlib     from "../../../../../../../node_modules/wonder-commonlib/lib/es6_global/src/ArrayService.js";
import * as TypeArrayPoolService$Wonderjs    from "../../../record/typeArrayPool/TypeArrayPoolService.js";
import * as DirtyTransformService$Wonderjs   from "../../../record/transform/DirtyTransformService.js";
import * as IndexComponentService$Wonderjs   from "../../../primitiive/component/IndexComponentService.js";
import * as SparseMapService$WonderCommonlib from "../../../../../../../node_modules/wonder-commonlib/lib/es6_global/src/SparseMapService.js";

function _setDefaultChildren(index, childMap) {
  return SparseMapService$WonderCommonlib.set(index, ArrayService$WonderCommonlib.createEmpty(/* () */0), childMap);
}

function _setDefaultLocalToWorldMatrix(index, localToWorldMatrixMap, typeArrayPoolRecord) {
  var defaultMatrixArr = /* float array */[
    1,
    0,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    0,
    1
  ];
  var match = TypeArrayPoolService$Wonderjs.getFloat32TypeArrayFromPool(16, typeArrayPoolRecord);
  var defaultMatrixTypeArr = match ? TypeArrayService$Wonderjs.setFloat16(0, defaultMatrixArr, match[0]) : new Float32Array(defaultMatrixArr);
  return /* tuple */[
          typeArrayPoolRecord,
          SparseMapService$WonderCommonlib.set(index, defaultMatrixTypeArr, localToWorldMatrixMap)
        ];
}

function _setDefaultLocalPosition(index, localPositionMap, typeArrayPoolRecord) {
  var defaultLocalPositionArr = /* float array */[
    0,
    0,
    0
  ];
  var match = TypeArrayPoolService$Wonderjs.getFloat32TypeArrayFromPool(3, typeArrayPoolRecord);
  var defaultLocalPositionTypeArr = match ? TypeArrayService$Wonderjs.setFloat3(0, defaultLocalPositionArr, match[0]) : new Float32Array(defaultLocalPositionArr);
  return /* tuple */[
          typeArrayPoolRecord,
          SparseMapService$WonderCommonlib.set(index, defaultLocalPositionTypeArr, localPositionMap)
        ];
}

var _isNotNeedInitData = SparseMapService$WonderCommonlib.has;

function _initDataWhenCreate(index, typeArrayPoolRecord, transformRecord) {
  var childMap = transformRecord[/* childMap */2];
  var match = SparseMapService$WonderCommonlib.has(index, childMap);
  if (match !== 0) {
    return /* tuple */[
            typeArrayPoolRecord,
            transformRecord
          ];
  } else {
    var match$1 = _setDefaultLocalToWorldMatrix(index, transformRecord[/* localToWorldMatrixMap */4], typeArrayPoolRecord);
    var match$2 = _setDefaultLocalPosition(index, transformRecord[/* localPositionMap */5], match$1[0]);
    return /* tuple */[
            match$2[0],
            /* record */[
              /* index */transformRecord[/* index */0],
              /* parentMap */transformRecord[/* parentMap */1],
              /* childMap */_setDefaultChildren(index, childMap),
              /* gameObjectMap */transformRecord[/* gameObjectMap */3],
              /* localToWorldMatrixMap */match$1[1],
              /* localPositionMap */match$2[1],
              /* dirtyMap */transformRecord[/* dirtyMap */6],
              /* normalMatrixCacheMap */transformRecord[/* normalMatrixCacheMap */7],
              /* disposedIndexArray */transformRecord[/* disposedIndexArray */8]
            ]
          ];
  }
}

function createWithoutMarkNotDirty(state) {
  var transformRecord = state[/* transformRecord */11];
  var index = transformRecord[/* index */0];
  var match = IndexComponentService$Wonderjs.generateIndex(index, transformRecord[/* disposedIndexArray */8]);
  var index$1 = match[0];
  transformRecord[/* index */0] = match[1];
  var match$1 = _initDataWhenCreate(index$1, state[/* typeArrayPoolRecord */32], transformRecord);
  var newrecord = state.slice();
  var newrecord$1 = match$1[1].slice();
  newrecord$1[/* disposedIndexArray */8] = match[2];
  newrecord[/* transformRecord */11] = newrecord$1;
  return /* tuple */[
          (newrecord[/* typeArrayPoolRecord */32] = match$1[0], newrecord),
          index$1
        ];
}

function create(state) {
  var match = createWithoutMarkNotDirty(state);
  var index = match[1];
  var newrecord = match[0].slice();
  return /* tuple */[
          (newrecord[/* transformRecord */11] = DirtyTransformService$Wonderjs.mark(index, /* false */0, state[/* transformRecord */11]), newrecord[/* typeArrayPoolRecord */32] = state[/* typeArrayPoolRecord */32], newrecord),
          index
        ];
}

export {
  _setDefaultChildren           ,
  _setDefaultLocalToWorldMatrix ,
  _setDefaultLocalPosition      ,
  _isNotNeedInitData            ,
  _initDataWhenCreate           ,
  createWithoutMarkNotDirty     ,
  create                        ,
  
}
/* TypeArrayService-Wonderjs Not a pure module */
