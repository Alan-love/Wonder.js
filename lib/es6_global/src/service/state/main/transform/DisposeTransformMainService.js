// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as Contract$WonderLog                     from "../../../../../../../node_modules/wonder-log/lib/es6_global/src/Contract.js";
import * as ArrayService$Wonderjs                  from "../../../atom/ArrayService.js";
import * as MainStateData$Wonderjs                 from "../data/MainStateData.js";
import * as IsDebugMainService$Wonderjs            from "../state/IsDebugMainService.js";
import * as ArrayService$WonderCommonlib           from "../../../../../../../node_modules/wonder-commonlib/lib/es6_global/src/ArrayService.js";
import * as DisposeComponentService$Wonderjs       from "../../../primitiive/component/DisposeComponentService.js";
import * as HierachyTransformService$Wonderjs      from "../../../record/transform/HierachyTransformService.js";
import * as TypeArrayPoolTransformService$Wonderjs from "../../../record/transform/TypeArrayPoolTransformService.js";

function isAlive(transform, param) {
  return DisposeComponentService$Wonderjs.isAlive(transform, param[/* disposedIndexArray */8]);
}

function _disposeFromParentAndChildMap(transform, isKeepOrder, record) {
  ArrayService$WonderCommonlib.reduceOneParam((function (record, child) {
          return HierachyTransformService$Wonderjs.removeFromParentMap(child, record);
        }), record, HierachyTransformService$Wonderjs.unsafeGetChildren(transform, record));
  var match = HierachyTransformService$Wonderjs.getParent(transform, record);
  if (match) {
    return HierachyTransformService$Wonderjs.removeFromChildMap(match[0], transform, isKeepOrder, record);
  } else {
    return record;
  }
}

function _disposeData(transform, maxTypeArrayPoolSize, isKeepOrder, param) {
  var transformRecord = param[1];
  var localPositionMap = transformRecord[/* localPositionMap */5];
  var localToWorldMatrixMap = transformRecord[/* localToWorldMatrixMap */4];
  var transformRecord$1 = _disposeFromParentAndChildMap(transform, isKeepOrder, transformRecord);
  var typeArrayPoolRecord = TypeArrayPoolTransformService$Wonderjs.addTypeArrayToPool(transform, maxTypeArrayPoolSize, /* tuple */[
        localToWorldMatrixMap,
        localPositionMap
      ], param[0]);
  return /* tuple */[
          typeArrayPoolRecord,
          /* record */[
            /* index */transformRecord$1[/* index */0],
            /* parentMap */DisposeComponentService$Wonderjs.disposeSparseMapData(transform, transformRecord[/* parentMap */1]),
            /* childMap */DisposeComponentService$Wonderjs.disposeSparseMapData(transform, transformRecord[/* childMap */2]),
            /* gameObjectMap */DisposeComponentService$Wonderjs.disposeSparseMapData(transform, transformRecord[/* gameObjectMap */3]),
            /* localToWorldMatrixMap */DisposeComponentService$Wonderjs.disposeSparseMapData(transform, localToWorldMatrixMap),
            /* localPositionMap */DisposeComponentService$Wonderjs.disposeSparseMapData(transform, localPositionMap),
            /* dirtyMap */DisposeComponentService$Wonderjs.disposeSparseMapData(transform, transformRecord[/* dirtyMap */6]),
            /* normalMatrixCacheMap */transformRecord$1[/* normalMatrixCacheMap */7],
            /* disposedIndexArray */transformRecord$1[/* disposedIndexArray */8]
          ]
        ];
}

function handleDisposeComponent(transform, maxTypeArrayPoolSize, isKeepOrder, state) {
  var transformRecord = state[/* transformRecord */11];
  Contract$WonderLog.requireCheck((function () {
          return DisposeComponentService$Wonderjs.checkComponentShouldAlive(transform, isAlive, transformRecord);
        }), IsDebugMainService$Wonderjs.getIsDebug(MainStateData$Wonderjs.stateData));
  var match = _disposeData(transform, maxTypeArrayPoolSize, isKeepOrder, /* tuple */[
        state[/* typeArrayPoolRecord */32],
        transformRecord
      ]);
  var transformRecord$1 = match[1];
  var newrecord = state.slice();
  var newrecord$1 = transformRecord$1.slice();
  newrecord$1[/* disposedIndexArray */8] = ArrayService$Wonderjs.push(transform, transformRecord$1[/* disposedIndexArray */8]);
  newrecord[/* transformRecord */11] = newrecord$1;
  newrecord[/* typeArrayPoolRecord */32] = match[0];
  return newrecord;
}

function handleBatchDisposeComponent(transformArray, _, maxTypeArrayPoolSize, state) {
  var transformRecord = state[/* transformRecord */11];
  Contract$WonderLog.requireCheck((function () {
          return DisposeComponentService$Wonderjs.checkComponentShouldAliveWithBatchDispose(transformArray, isAlive, transformRecord);
        }), IsDebugMainService$Wonderjs.getIsDebug(MainStateData$Wonderjs.stateData));
  var newrecord = transformRecord.slice();
  newrecord[/* disposedIndexArray */8] = transformRecord[/* disposedIndexArray */8].concat(transformArray);
  var match = ArrayService$WonderCommonlib.reduceOneParam((function (recordTuple, transform) {
          return _disposeData(transform, maxTypeArrayPoolSize, /* false */0, recordTuple);
        }), /* tuple */[
        state[/* typeArrayPoolRecord */32],
        newrecord
      ], transformArray);
  var newrecord$1 = state.slice();
  newrecord$1[/* transformRecord */11] = match[1];
  newrecord$1[/* typeArrayPoolRecord */32] = match[0];
  return newrecord$1;
}

export {
  isAlive                       ,
  _disposeFromParentAndChildMap ,
  _disposeData                  ,
  handleDisposeComponent        ,
  handleBatchDisposeComponent   ,
  
}
/* Contract-WonderLog Not a pure module */
