// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as ArrayService$Wonderjs                from "../../../atom/ArrayService.js";
import * as ArrayService$WonderCommonlib         from "../../../../../../../node_modules/wonder-commonlib/lib/es6_global/src/ArrayService.js";
import * as DirtyTransformService$Wonderjs       from "../../../record/transform/DirtyTransformService.js";
import * as CreateTransformMainService$Wonderjs  from "./CreateTransformMainService.js";
import * as ModelMatrixTransformService$Wonderjs from "../../../record/transform/ModelMatrixTransformService.js";

function handleCloneComponent(sourceComponent, countRangeArr, state) {
  var localPosition = ModelMatrixTransformService$Wonderjs.getLocalPositionTuple(sourceComponent, state[/* transformRecord */11][/* localPositionMap */5]);
  var match = ArrayService$WonderCommonlib.reduceOneParam((function (param, _) {
          var match = CreateTransformMainService$Wonderjs.createWithoutMarkNotDirty(param[0]);
          var index = match[1];
          var state = match[0];
          var newrecord = state.slice();
          return /* tuple */[
                  (newrecord[/* transformRecord */11] = DirtyTransformService$Wonderjs.mark(index, /* true */1, ModelMatrixTransformService$Wonderjs.setLocalPositionByTuple(index, localPosition, state[/* transformRecord */11])), newrecord),
                  ArrayService$Wonderjs.push(index, param[1])
                ];
        }), /* tuple */[
        state,
        /* int array */[]
      ], countRangeArr);
  var state$1 = match[0];
  var newrecord = state$1.slice();
  return /* tuple */[
          (newrecord[/* transformRecord */11] = DirtyTransformService$Wonderjs.mark(sourceComponent, /* true */1, state$1[/* transformRecord */11]), newrecord),
          match[1]
        ];
}

export {
  handleCloneComponent ,
  
}
/* ArrayService-Wonderjs Not a pure module */
