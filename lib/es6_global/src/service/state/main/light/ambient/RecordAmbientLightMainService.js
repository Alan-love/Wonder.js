// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as Caml_int32                                  from "../../../../../../../../node_modules/bs-platform/lib/es6/caml_int32.js";
import * as SparseMapService$Wonderjs                   from "../../../../atom/SparseMapService.js";
import * as TypeArrayService$Wonderjs                   from "../../../../primitive/buffer/TypeArrayService.js";
import * as ArrayService$WonderCommonlib                from "../../../../../../../../node_modules/wonder-commonlib/lib/es6_global/src/ArrayService.js";
import * as CopyTypeArrayService$Wonderjs               from "../../../../primitive/copy/CopyTypeArrayService.js";
import * as SparseMapService$WonderCommonlib            from "../../../../../../../../node_modules/wonder-commonlib/lib/es6_global/src/SparseMapService.js";
import * as BufferAmbientLightService$Wonderjs          from "../../../../record/main/light/ambient/BufferAmbientLightService.js";
import * as CreateTypeArrayAmbientLightService$Wonderjs from "../../../../record/all/light/ambient/CreateTypeArrayAmbientLightService.js";

function getColor(index, typeArr) {
  return TypeArrayService$Wonderjs.getFloat3(BufferAmbientLightService$Wonderjs.getColorIndex(index), typeArr);
}

function setColor(index, color, typeArr) {
  return TypeArrayService$Wonderjs.setFloat3(BufferAmbientLightService$Wonderjs.getColorIndex(index), color, typeArr);
}

function getDefaultColor() {
  return /* float array */[
          1,
          1,
          1
        ];
}

function setDefaultTypeArrData(count, colors) {
  var defaultColor = /* float array */[
    1,
    1,
    1
  ];
  return ArrayService$WonderCommonlib.reduceOneParam((function (colors, index) {
                return setColor(index, defaultColor, colors);
              }), colors, ArrayService$WonderCommonlib.range(0, count - 1 | 0));
}

function _setDefaultTypeArrData(count, param) {
  return /* tuple */[
          param[0],
          setDefaultTypeArrData(count, param[1])
        ];
}

function _initBufferData() {
  var count = BufferAmbientLightService$Wonderjs.getBufferMaxCount(/* () */0);
  var buffer = BufferAmbientLightService$Wonderjs.createBuffer(count);
  var offset = 0;
  var typeArrayLength = Caml_int32.imul(count, BufferAmbientLightService$Wonderjs.getColorsSize(/* () */0));
  var colors = CreateTypeArrayAmbientLightService$Wonderjs.createTypeArrays(buffer, count);
  offset = Caml_int32.imul(typeArrayLength, Float32Array.BYTES_PER_ELEMENT);
  return _setDefaultTypeArrData(count, /* tuple */[
              buffer,
              colors
            ]);
}

function create() {
  var match = _initBufferData(/* () */0);
  return /* record */[
          /* index */0,
          /* buffer */match[0],
          /* colors */match[1],
          /* mappedIndexMap */SparseMapService$WonderCommonlib.createEmpty(/* () */0),
          /* gameObjectMap */SparseMapService$WonderCommonlib.createEmpty(/* () */0)
        ];
}

function deepCopyForRestore(state) {
  var ambientLightRecord = state[/* ambientLightRecord */17];
  var index = ambientLightRecord[/* index */0];
  var newrecord = state.slice();
  newrecord[/* ambientLightRecord */17] = /* record */[
    /* index */index,
    /* buffer */ambientLightRecord[/* buffer */1],
    /* colors */CopyTypeArrayService$Wonderjs.copyFloat32ArrayWithEndIndex(Caml_int32.imul(index, BufferAmbientLightService$Wonderjs.getColorsSize(/* () */0)), ambientLightRecord[/* colors */2]),
    /* mappedIndexMap */SparseMapService$Wonderjs.copy(ambientLightRecord[/* mappedIndexMap */3]),
    /* gameObjectMap */SparseMapService$Wonderjs.copy(ambientLightRecord[/* gameObjectMap */4])
  ];
  return newrecord;
}

export {
  getColor               ,
  setColor               ,
  getDefaultColor        ,
  setDefaultTypeArrData  ,
  _setDefaultTypeArrData ,
  _initBufferData        ,
  create                 ,
  deepCopyForRestore     ,
  
}
/* SparseMapService-Wonderjs Not a pure module */
