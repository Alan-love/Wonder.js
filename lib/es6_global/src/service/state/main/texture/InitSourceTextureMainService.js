// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as ArrayService$Wonderjs                                  from "../../../atom/ArrayService.js";
import * as InitTextureService$Wonderjs                            from "../../../primitive/texture/InitTextureService.js";
import * as DeviceManagerService$Wonderjs                          from "../../../record/all/device/DeviceManagerService.js";
import * as WorkerDetectMainService$Wonderjs                       from "../workerDetect/WorkerDetectMainService.js";
import * as IndexSourceTextureService$Wonderjs                     from "../../../record/all/texture/IndexSourceTextureService.js";
import * as IndexSourceTextureMainService$Wonderjs                 from "./IndexSourceTextureMainService.js";
import * as RecordBasicSourceTextureMainService$Wonderjs           from "./basic_source/RecordBasicSourceTextureMainService.js";
import * as RecordArrayBufferViewSourceTextureMainService$Wonderjs from "./arrayBufferView_source/RecordArrayBufferViewSourceTextureMainService.js";

function _handleInitTextureWorker(texture, state) {
  if (texture) {
    var texture$1 = texture[0];
    return IndexSourceTextureService$Wonderjs.handleByJudgeSourceTextureIndex(texture$1, IndexSourceTextureMainService$Wonderjs.getArrayBufferViewSourceTextureIndexOffset(state), state, /* tuple */[
                (function (_, state) {
                    ArrayService$Wonderjs.push(texture$1, RecordBasicSourceTextureMainService$Wonderjs.getRecord(state)[/* needInitedTextureIndexArray */13]);
                    return state;
                  }),
                (function (_, state) {
                    ArrayService$Wonderjs.push(texture$1, RecordArrayBufferViewSourceTextureMainService$Wonderjs.getRecord(state)[/* needInitedTextureIndexArray */15]);
                    return state;
                  })
              ]);
  } else {
    return state;
  }
}

function _handleInitTextureNoWorker(texture, state) {
  if (texture) {
    return IndexSourceTextureService$Wonderjs.handleByJudgeSourceTextureIndex(texture[0], IndexSourceTextureMainService$Wonderjs.getArrayBufferViewSourceTextureIndexOffset(state), state, /* tuple */[
                (function (basicSourceTextureInTypeArray, state) {
                    InitTextureService$Wonderjs.initTexture(DeviceManagerService$Wonderjs.unsafeGetGl(state[/* deviceManagerRecord */9]), basicSourceTextureInTypeArray, RecordBasicSourceTextureMainService$Wonderjs.getRecord(state)[/* glTextureMap */9]);
                    return state;
                  }),
                (function (arrayBufferViewTextureInTypeArray, state) {
                    InitTextureService$Wonderjs.initTexture(DeviceManagerService$Wonderjs.unsafeGetGl(state[/* deviceManagerRecord */9]), arrayBufferViewTextureInTypeArray, RecordArrayBufferViewSourceTextureMainService$Wonderjs.getRecord(state)[/* glTextureMap */11]);
                    return state;
                  })
              ]);
  } else {
    return state;
  }
}

function initTexture(texture, state) {
  var match = WorkerDetectMainService$Wonderjs.isUseWorker(state);
  if (match !== 0) {
    return _handleInitTextureWorker(texture, state);
  } else {
    return _handleInitTextureNoWorker(texture, state);
  }
}

function clearNeedInitedTextureIndexArray(state) {
  var newrecord = state.slice();
  var newrecord$1 = RecordBasicSourceTextureMainService$Wonderjs.getRecord(state).slice();
  newrecord[/* basicSourceTextureRecord */18] = /* Some */[(newrecord$1[/* needInitedTextureIndexArray */13] = /* int array */[], newrecord$1)];
  var newrecord$2 = RecordArrayBufferViewSourceTextureMainService$Wonderjs.getRecord(state).slice();
  newrecord[/* arrayBufferViewSourceTextureRecord */19] = /* Some */[(newrecord$2[/* needInitedTextureIndexArray */15] = /* int array */[], newrecord$2)];
  return newrecord;
}

export {
  _handleInitTextureWorker         ,
  _handleInitTextureNoWorker       ,
  initTexture                      ,
  clearNeedInitedTextureIndexArray ,
  
}
/* ArrayService-Wonderjs Not a pure module */
