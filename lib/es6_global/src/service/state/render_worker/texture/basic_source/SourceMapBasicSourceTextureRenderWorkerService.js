// Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE

import * as Most from "most";
import * as Curry from "../../../../../../../../node_modules/bs-platform/lib/es6/curry.js";
import * as Log$WonderLog from "../../../../../../../../node_modules/wonder-log/lib/es6_global/src/Log.js";
import * as Contract$WonderLog from "../../../../../../../../node_modules/wonder-log/lib/es6_global/src/Contract.js";
import * as OptionService$Wonderjs from "../../../../atom/OptionService.js";
import * as StateDataMain$Wonderjs from "../../../main/data/StateDataMain.js";
import * as IsDebugMainService$Wonderjs from "../../../main/state/IsDebugMainService.js";
import * as TextureSourceMapService$Wonderjs from "../../../../primitive/texture/TextureSourceMapService.js";
import * as RecordBrowserDetectAllService$Wonderjs from "../../../../record/all/browserDetect/RecordBrowserDetectAllService.js";
import * as RecordBrowserDetectRenderWorkerService$Wonderjs from "../../browserDetect/RecordBrowserDetectRenderWorkerService.js";
import * as OperateTypeArrayBasicSourceTextureService$Wonderjs from "../../../../record/all/texture/basic_source/OperateTypeArrayBasicSourceTextureService.js";
import * as RecordBasicSourceTextureRenderWorkerService$Wonderjs from "./RecordBasicSourceTextureRenderWorkerService.js";

var _createImageBitmapForChrome = (
    function(imageData, config){
        return createImageBitmap(imageData, config)
    }
    );

var _createImageBitmapForFirefox = (
    function(imageData){
        return createImageBitmap(imageData)
    }
    );

function _createImageBitmap(texture, imageData, state) {
  var match = RecordBrowserDetectRenderWorkerService$Wonderjs.getRecord(state);
  var browser = match[/* browser */0];
  if (browser !== 1) {
    if (browser !== 0) {
      return RecordBrowserDetectAllService$Wonderjs.fatalUnknownBrowser("_createImageBitmap", browser);
    } else {
      var match$1 = RecordBasicSourceTextureRenderWorkerService$Wonderjs.getRecord(state);
      var flipY = OperateTypeArrayBasicSourceTextureService$Wonderjs.isFlipY(texture, OptionService$Wonderjs.unsafeGet(match$1[/* flipYs */7]));
      var match$2 = flipY === true;
      return Curry._2(_createImageBitmapForChrome, imageData, {
                  imageOrientation: match$2 ? "flipY" : "none"
                });
    }
  } else {
    return Curry._1(_createImageBitmapForFirefox, imageData);
  }
}

function _addSource(texture, imageBitmap, state) {
  Contract$WonderLog.requireCheck((function () {
          var match = RecordBasicSourceTextureRenderWorkerService$Wonderjs.getRecord(state);
          var sourceMap = match[/* sourceMap */8];
          return Contract$WonderLog.test(Log$WonderLog.buildAssertMessage("sourceMap shouldn\'t has source before", "has"), (function () {
                        return Contract$WonderLog.assertFalse(TextureSourceMapService$Wonderjs.hasSource(texture, sourceMap));
                      }));
        }), IsDebugMainService$Wonderjs.getIsDebug(StateDataMain$Wonderjs.stateData));
  var match = RecordBasicSourceTextureRenderWorkerService$Wonderjs.getRecord(state);
  TextureSourceMapService$Wonderjs.addSource(texture, imageBitmap, match[/* sourceMap */8]);
  return state;
}

function _convertImageSrcToImageBitmapStream(imageArrayBufferIndexSizeDataArr, state) {
  return Most.flatMap((function (param) {
                var texture = param[3];
                return Most.map((function (imageBitmap) {
                              return _addSource(texture, imageBitmap, state);
                            }), Most.fromPromise(_createImageBitmap(texture, new ImageData(new Uint8ClampedArray(param[0]), param[1], param[2]), state)));
              }), Most.from(imageArrayBufferIndexSizeDataArr));
}

var addSourceFromImageDataStream = _convertImageSrcToImageBitmapStream;

export {
  _createImageBitmapForChrome ,
  _createImageBitmapForFirefox ,
  _createImageBitmap ,
  _addSource ,
  _convertImageSrcToImageBitmapStream ,
  addSourceFromImageDataStream ,
  
}
/* _createImageBitmapForChrome Not a pure module */
