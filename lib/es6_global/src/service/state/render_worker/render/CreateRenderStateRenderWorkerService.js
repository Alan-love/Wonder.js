// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as OptionService$Wonderjs                           from "../../../atom/OptionService.js";
import * as BufferRenderWorkerSettingService$Wonderjs        from "../../../record/render_worker/setting/BufferRenderWorkerSettingService.js";
import * as OperateRenderRenderWorkerService$Wonderjs        from "./OperateRenderRenderWorkerService.js";
import * as RecordTransformRenderWorkerService$Wonderjs      from "../transform/RecordTransformRenderWorkerService.js";
import * as RecordPointLightRenderWorkerService$Wonderjs     from "../light/point/RecordPointLightRenderWorkerService.js";
import * as RecordRenderWorkerPointLightService$Wonderjs     from "../../../record/render_worker/light/point/RecordRenderWorkerPointLightService.js";
import * as RecordBoxGeometryRenderWorkerService$Wonderjs    from "../geometry/box/RecordBoxGeometryRenderWorkerService.js";
import * as RecordAmbientLightRenderWorkerService$Wonderjs   from "../light/ambient/RecordAmbientLightRenderWorkerService.js";
import * as RecordWorkerDetectRenderWorkerService$Wonderjs   from "../workerDetect/RecordWorkerDetectRenderWorkerService.js";
import * as RecordBasicMaterialRenderWorkerService$Wonderjs  from "../material/basic/RecordBasicMaterialRenderWorkerService.js";
import * as RecordLightMaterialRenderWorkerService$Wonderjs  from "../material/light/RecordLightMaterialRenderWorkerService.js";
import * as RecordCustomGeometryRenderWorkerService$Wonderjs from "../geometry/custom/RecordCustomGeometryRenderWorkerService.js";
import * as RecordDirectionLightRenderWorkerService$Wonderjs from "../light/direction/RecordDirectionLightRenderWorkerService.js";
import * as RecordRenderWorkerDirectionLightService$Wonderjs from "../../../record/render_worker/light/direction/RecordRenderWorkerDirectionLightService.js";
import * as RecordRenderWorkerSourceInstanceService$Wonderjs from "../../../record/render_worker/instance/RecordRenderWorkerSourceInstanceService.js";

function createRenderState(state) {
  var settingRecord = state[/* settingRecord */0];
  var gpuDetectRecord = state[/* gpuDetectRecord */2];
  var deviceManagerRecord = state[/* deviceManagerRecord */3];
  var shaderRecord = state[/* shaderRecord */4];
  var programRecord = state[/* programRecord */5];
  var glslSenderRecord = state[/* glslSenderRecord */7];
  var sourceInstanceRecord = state[/* sourceInstanceRecord */10];
  var typeArrayPoolRecord = state[/* typeArrayPoolRecord */20];
  var vboBufferRecord = state[/* vboBufferRecord */21];
  var globalTempRecord = state[/* globalTempRecord */22];
  var transformRecord = RecordTransformRenderWorkerService$Wonderjs.getRecord(state);
  var boxGeometryRecord = RecordBoxGeometryRenderWorkerService$Wonderjs.getRecord(state);
  var customGeometryRecord = RecordCustomGeometryRenderWorkerService$Wonderjs.getRecord(state);
  var basicMaterialRecord = RecordBasicMaterialRenderWorkerService$Wonderjs.getRecord(state);
  var lightMaterialRecord = RecordLightMaterialRenderWorkerService$Wonderjs.getRecord(state);
  var ambientLightRecord = RecordAmbientLightRenderWorkerService$Wonderjs.getRecord(state);
  var directionLightRecord = RecordDirectionLightRenderWorkerService$Wonderjs.getRecord(state);
  var pointLightRecord = RecordPointLightRenderWorkerService$Wonderjs.getRecord(state);
  var workerDetectRecord = RecordWorkerDetectRenderWorkerService$Wonderjs.getRecord(state);
  return /* record */[
          /* vboBufferRecord */vboBufferRecord,
          /* typeArrayPoolRecord */typeArrayPoolRecord,
          /* glslSenderRecord */glslSenderRecord,
          /* programRecord */programRecord,
          /* boxGeometryRecord : record */[
            /* vertices */boxGeometryRecord[/* vertices */0],
            /* normals */boxGeometryRecord[/* normals */1],
            /* indices */boxGeometryRecord[/* indices */2]
          ],
          /* customGeometryRecord : record */[
            /* vertices */customGeometryRecord[/* vertices */0],
            /* normals */customGeometryRecord[/* normals */1],
            /* indices */customGeometryRecord[/* indices */2],
            /* verticesInfos */customGeometryRecord[/* verticesInfos */3],
            /* normalsInfos */customGeometryRecord[/* normalsInfos */4],
            /* indicesInfos */customGeometryRecord[/* indicesInfos */5]
          ],
          /* cameraRecord */OperateRenderRenderWorkerService$Wonderjs.getCameraRecord(state),
          /* basicMaterialRecord : record */[
            /* shaderIndices */RecordBasicMaterialRenderWorkerService$Wonderjs.unsafeGetShaderIndices(state),
            /* colors */OptionService$Wonderjs.unsafeGet(basicMaterialRecord[/* colors */2])
          ],
          /* lightMaterialRecord : record */[
            /* shaderIndices */RecordLightMaterialRenderWorkerService$Wonderjs.unsafeGetShaderIndices(state),
            /* diffuseColors */OptionService$Wonderjs.unsafeGet(lightMaterialRecord[/* diffuseColors */2]),
            /* specularColors */OptionService$Wonderjs.unsafeGet(lightMaterialRecord[/* specularColors */3]),
            /* shininess */OptionService$Wonderjs.unsafeGet(lightMaterialRecord[/* shininess */4])
          ],
          /* ambientLightRecord : record */[
            /* index */ambientLightRecord[/* index */0],
            /* colors */ambientLightRecord[/* colors */1]
          ],
          /* directionLightRecord : record */[
            /* index */directionLightRecord[/* index */0],
            /* colors */directionLightRecord[/* colors */2],
            /* intensities */directionLightRecord[/* intensities */3],
            /* positionMap */RecordRenderWorkerDirectionLightService$Wonderjs.getPositionMap(directionLightRecord)
          ],
          /* pointLightRecord : record */[
            /* index */pointLightRecord[/* index */0],
            /* colors */pointLightRecord[/* colors */2],
            /* intensities */pointLightRecord[/* intensities */3],
            /* constants */pointLightRecord[/* constants */4],
            /* linears */pointLightRecord[/* linears */5],
            /* quadratics */pointLightRecord[/* quadratics */6],
            /* ranges */pointLightRecord[/* ranges */7],
            /* positionMap */RecordRenderWorkerPointLightService$Wonderjs.getPositionMap(pointLightRecord)
          ],
          /* transformRecord : record */[
            /* localToWorldMatrices */transformRecord[/* localToWorldMatrices */0],
            /* localPositions */transformRecord[/* localPositions */1],
            /* localToWorldMatrixCacheMap */transformRecord[/* localToWorldMatrixCacheMap */2],
            /* normalMatrixCacheMap */transformRecord[/* normalMatrixCacheMap */3]
          ],
          /* sourceInstanceRecord : record */[
            /* objectInstanceTransformIndexMap */RecordRenderWorkerSourceInstanceService$Wonderjs.unsafeGetObjectInstanceTransformIndexMap(sourceInstanceRecord),
            /* objectInstanceTransformCollections */RecordRenderWorkerSourceInstanceService$Wonderjs.unsafeGetObjectInstanceTransformCollections(sourceInstanceRecord),
            /* isTransformStatics */RecordRenderWorkerSourceInstanceService$Wonderjs.unsafeGetIsTransformStaticMap(sourceInstanceRecord),
            /* matrixInstanceBufferCapacityMap */sourceInstanceRecord[/* matrixInstanceBufferCapacityMap */3],
            /* matrixFloat32ArrayMap */sourceInstanceRecord[/* matrixFloat32ArrayMap */4],
            /* isSendTransformMatrixDataMap */sourceInstanceRecord[/* isSendTransformMatrixDataMap */5]
          ],
          /* gpuDetectRecord */gpuDetectRecord,
          /* globalTempRecord */globalTempRecord,
          /* deviceManagerRecord */deviceManagerRecord,
          /* shaderRecord : record */[/* index */shaderRecord[/* index */0]],
          /* settingRecord : record */[
            /* gpu */settingRecord[/* gpu */0],
            /* instanceBuffer : Some */[/* record */[/* objectInstanceCountPerSourceInstance */BufferRenderWorkerSettingService$Wonderjs.getObjectInstanceCountPerSourceInstance(settingRecord)]]
          ],
          /* workerDetectRecord : record */[/* isUseWorker */workerDetectRecord[/* isUseWorker */0]]
        ];
}

export {
  createRenderState ,
  
}
/* OptionService-Wonderjs Not a pure module */
