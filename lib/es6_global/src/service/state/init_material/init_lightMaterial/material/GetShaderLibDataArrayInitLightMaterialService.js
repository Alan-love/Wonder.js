// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as Log$WonderLog                                     from "../../../../../../../../node_modules/wonder-log/lib/es6_global/src/Log.js";
import * as ArrayService$Wonderjs                             from "../../../../atom/ArrayService.js";
import * as MapUnitService$Wonderjs                           from "../../../../primitive/material/MapUnitService.js";
import * as JobConfigService$Wonderjs                         from "../../../../primitive/JobConfigService.js";
import * as ArrayService$WonderCommonlib                      from "../../../../../../../../node_modules/wonder-commonlib/lib/es6_global/src/ArrayService.js";
import * as OperateTypeArrayLightMaterialService$Wonderjs     from "../../../../record/all/material/light/OperateTypeArrayLightMaterialService.js";
import * as GetShaderLibDataArrayInitMaterialService$Wonderjs from "../../material/GetShaderLibDataArrayInitMaterialService.js";

function _getMaterialShaderLibDataArrByStaticBranch(param, param$1, resultDataArr) {
  var staticBranchs = param$1[0];
  var name = param[0];
  var exit = 0;
  switch (name) {
    case "modelMatrix_instance" : 
    case "normalMatrix_instance" : 
        exit = 1;
        break;
    default:
      return GetShaderLibDataArrayInitMaterialService$Wonderjs.handleUnknownNameWhenGetMaterialShaderLibDataArrByStaticBranch(name, staticBranchs);
  }
  if (exit === 1) {
    var match = JobConfigService$Wonderjs.unsafeFindFirst(staticBranchs, name, (function (item) {
            return JobConfigService$Wonderjs.filterTargetName(item[/* name */0], name);
          }));
    return GetShaderLibDataArrayInitMaterialService$Wonderjs.getMaterialShaderLibDataArrByStaticBranchInstance(/* tuple */[
                param[1],
                param[2]
              ], /* tuple */[
                param$1[1],
                match[/* value */1]
              ], resultDataArr);
  }
  
}

function _isPass(materialIndex, condition, state) {
  var materialRecord = state[/* materialRecord */0];
  switch (condition) {
    case "has_diffuse_map" : 
        return MapUnitService$Wonderjs.hasMap(OperateTypeArrayLightMaterialService$Wonderjs.getDiffuseMapUnit(materialIndex, materialRecord[/* diffuseMapUnits */3]));
    case "has_specular_map" : 
        return MapUnitService$Wonderjs.hasMap(OperateTypeArrayLightMaterialService$Wonderjs.getSpecularMapUnit(materialIndex, materialRecord[/* specularMapUnits */4]));
    case "light_has_map" : 
        if (MapUnitService$Wonderjs.hasMap(OperateTypeArrayLightMaterialService$Wonderjs.getDiffuseMapUnit(materialIndex, materialRecord[/* diffuseMapUnits */3]))) {
          return /* true */1;
        } else {
          return MapUnitService$Wonderjs.hasMap(OperateTypeArrayLightMaterialService$Wonderjs.getSpecularMapUnit(materialIndex, materialRecord[/* specularMapUnits */4]));
        }
    default:
      return Log$WonderLog.fatal(Log$WonderLog.buildFatalMessage("_isPass", "unknown condition:" + (String(condition) + ""), "", "", ""));
  }
}

function getMaterialShaderLibDataArr(materialIndex, param, param$1, state) {
  var shaderLibs = param$1[2];
  var match = param$1[0];
  var groups = match[/* groups */2];
  var dynamicBranchs = match[/* dynamicBranchs */1];
  var staticBranchs = match[/* staticBranchs */0];
  var isSupportInstance = param[1];
  var isSourceInstance = param[0];
  return ArrayService$WonderCommonlib.reduceOneParam((function (resultDataArr, param) {
                var name = param[/* name */1];
                var type_ = param[/* type_ */0];
                if (type_) {
                  return GetShaderLibDataArrayInitMaterialService$Wonderjs.getMaterialShaderLibDataArrByType(/* tuple */[
                              materialIndex,
                              type_[0],
                              groups,
                              name,
                              isSourceInstance,
                              isSupportInstance
                            ], /* tuple */[
                              shaderLibs,
                              staticBranchs,
                              dynamicBranchs,
                              state
                            ], /* tuple */[
                              _getMaterialShaderLibDataArrByStaticBranch,
                              _isPass
                            ], resultDataArr);
                } else {
                  return ArrayService$Wonderjs.push(GetShaderLibDataArrayInitMaterialService$Wonderjs.findFirstShaderData(name, shaderLibs), resultDataArr);
                }
              }), ArrayService$WonderCommonlib.createEmpty(/* () */0), param$1[1]);
}

export {
  _getMaterialShaderLibDataArrByStaticBranch ,
  _isPass                                    ,
  getMaterialShaderLibDataArr                ,
  
}
/* Log-WonderLog Not a pure module */
