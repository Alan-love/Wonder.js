// Generated by BUCKLESCRIPT VERSION 3.1.4, PLEASE EDIT WITH CARE


function conjugate(param) {
  return /* tuple */[
          param[0] * -1.0,
          param[1] * -1.0,
          param[2] * -1.0,
          param[3]
        ];
}

function length(param) {
  var w = param[3];
  var z = param[2];
  var y = param[1];
  var x = param[0];
  return Math.sqrt(x * x + y * y + z * z + w * w);
}

function normalize(tuple) {
  var len = length(tuple);
  if (len !== 0) {
    return /* tuple */[
            tuple[0] / len,
            tuple[1] / len,
            tuple[2] / len,
            tuple[3] / len
          ];
  } else {
    return /* tuple */[
            0,
            0,
            0,
            1
          ];
  }
}

function invert(tuple) {
  return normalize(conjugate(tuple));
}

function multiply(param, param$1) {
  var q2w = param$1[3];
  var q2z = param$1[2];
  var q2y = param$1[1];
  var q2x = param$1[0];
  var q1w = param[3];
  var q1z = param[2];
  var q1y = param[1];
  var q1x = param[0];
  return /* tuple */[
          q1w * q2x + q1x * q2w + q1y * q2z - q1z * q2y,
          q1w * q2y + q1y * q2w + q1z * q2x - q1x * q2z,
          q1w * q2z + q1z * q2w + q1x * q2y - q1y * q2x,
          q1w * q2w - q1x * q2x - q1y * q2y - q1z * q2z
        ];
}

export {
  conjugate ,
  length ,
  normalize ,
  invert ,
  multiply ,
  
}
/* No side effect */
