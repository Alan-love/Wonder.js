// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as Js_option                        from "../../../../../node_modules/bs-platform/lib/es6/js_option.js";
import * as Log$WonderLog                    from "../../../../../node_modules/wonder-log/lib/es6_global/src/Log.js";
import * as Contract$WonderLog               from "../../../../../node_modules/wonder-log/lib/es6_global/src/Contract.js";
import * as ArrayService$Wonderjs            from "../atom/ArrayService.js";
import * as MainStateData$Wonderjs           from "../state/main/data/MainStateData.js";
import * as OptionService$Wonderjs           from "../atom/OptionService.js";
import * as IsDebugMainService$Wonderjs      from "../state/main/state/IsDebugMainService.js";
import * as ArrayService$WonderCommonlib     from "../../../../../node_modules/wonder-commonlib/lib/es6_global/src/ArrayService.js";
import * as SparseMapService$WonderCommonlib from "../../../../../node_modules/wonder-commonlib/lib/es6_global/src/SparseMapService.js";

var getComponent = SparseMapService$WonderCommonlib.get;

function unsafeGetComponent(uid, componentMap) {
  return OptionService$Wonderjs.unsafeGet(SparseMapService$WonderCommonlib.get(uid, componentMap));
}

function addComponent(uid, component, componentMap) {
  Contract$WonderLog.requireCheck((function () {
          return Contract$WonderLog.test(Log$WonderLog.buildAssertMessage("this type of the component shouldn\'t be added before", "not"), (function () {
                        return Contract$WonderLog.assertFalse(Js_option.isSome(SparseMapService$WonderCommonlib.get(uid, componentMap)));
                      }));
        }), IsDebugMainService$Wonderjs.getIsDebug(MainStateData$Wonderjs.stateData));
  SparseMapService$WonderCommonlib.set(uid, component, componentMap);
  return /* () */0;
}

function hasComponent(uid, componentMap) {
  return Js_option.isSome(SparseMapService$WonderCommonlib.get(uid, componentMap));
}

function batchGetComponent(uidArray, componentMap) {
  return ArrayService$WonderCommonlib.reduceOneParam((function (arr, uid) {
                var match = SparseMapService$WonderCommonlib.get(uid, componentMap);
                if (match) {
                  return ArrayService$Wonderjs.push(match[0], arr);
                } else {
                  return arr;
                }
              }), /* int array */[], uidArray);
}

function batchDisposeComponent(uidMap, componentRecord, handleFunc, componentArray) {
  return handleFunc(componentArray, uidMap, componentRecord);
}

export {
  getComponent          ,
  unsafeGetComponent    ,
  addComponent          ,
  hasComponent          ,
  batchGetComponent     ,
  batchDisposeComponent ,
  
}
/* Log-WonderLog Not a pure module */
