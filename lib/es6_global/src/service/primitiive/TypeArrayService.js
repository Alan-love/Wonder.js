// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as Log$WonderLog               from "../../../../../node_modules/wonder-log/lib/es6_global/src/Log.js";
import * as Contract$WonderLog          from "../../../../../node_modules/wonder-log/lib/es6_global/src/Contract.js";
import * as MainStateData$Wonderjs      from "../state/main/data/MainStateData.js";
import * as IsDebugMainService$Wonderjs from "../state/main/state/IsDebugMainService.js";

function getFloat3(index, typeArray) {
  return /* float array */[
          typeArray[index],
          typeArray[index + 1 | 0],
          typeArray[index + 2 | 0]
        ];
}

function setFloat3(index, record, typeArray) {
  Contract$WonderLog.requireCheck((function () {
          var len = record.length;
          return Contract$WonderLog.test(Log$WonderLog.buildAssertMessage("record.length === 3", "is " + (String(len) + "")), (function () {
                        return Contract$WonderLog.Operators[/* = */0](len, 3);
                      }));
        }), IsDebugMainService$Wonderjs.getIsDebug(MainStateData$Wonderjs.stateData));
  for(var i = index ,i_finish = index + 2 | 0; i <= i_finish; ++i){
    typeArray[i] = record[i - index | 0];
  }
  return typeArray;
}

function setFloat16(index, record, typeArray) {
  Contract$WonderLog.requireCheck((function () {
          var len = record.length;
          return Contract$WonderLog.test(Log$WonderLog.buildAssertMessage("record.length === 16", "is " + (String(len) + "")), (function () {
                        return Contract$WonderLog.Operators[/* = */0](len, 16);
                      }));
        }), IsDebugMainService$Wonderjs.getIsDebug(MainStateData$Wonderjs.stateData));
  for(var i = index ,i_finish = index + 15 | 0; i <= i_finish; ++i){
    typeArray[i] = record[i - index | 0];
  }
  return typeArray;
}

function fillFloat32Array(typeArr, dataArr, startIndex) {
  Contract$WonderLog.requireCheck((function () {
          var actualLen = dataArr.length + startIndex | 0;
          var range = typeArr.length;
          return Contract$WonderLog.test(Log$WonderLog.buildAssertMessage("not exceed Float32Array range:" + (String(range) + ""), "is " + (String(actualLen) + "")), (function () {
                        return Contract$WonderLog.Operators[/* <= */11](actualLen, range);
                      }));
        }), IsDebugMainService$Wonderjs.getIsDebug(MainStateData$Wonderjs.stateData));
  var dataArrIndex = 0;
  for(var i = startIndex ,i_finish = (startIndex + dataArr.length | 0) - 1 | 0; i <= i_finish; ++i){
    typeArr[i] = dataArr[dataArrIndex];
    dataArrIndex = dataArrIndex + 1 | 0;
  }
  return typeArr;
}

function fillFloat32ArrayWithOffset(targetTypeArr, sourceTypeArr, offset) {
  Contract$WonderLog.requireCheck((function () {
          Contract$WonderLog.test(Log$WonderLog.buildAssertMessage("offset should >= 0", "is " + (String(offset) + "")), (function () {
                  return Contract$WonderLog.Operators[/* >= */7](offset, 0);
                }));
          var sourceTypeArrLen = sourceTypeArr.length;
          var targetTypeArrLen = targetTypeArr.length;
          return Contract$WonderLog.test(Log$WonderLog.buildAssertMessage("sourceTypeArr.length:" + (String(sourceTypeArrLen) + (" + offset:" + (String(offset) + (" <= targetTypeArr.length:" + (String(targetTypeArrLen) + ""))))), ""), (function () {
                        return Contract$WonderLog.Operators[/* <= */11](sourceTypeArrLen + offset | 0, targetTypeArrLen);
                      }));
        }), IsDebugMainService$Wonderjs.getIsDebug(MainStateData$Wonderjs.stateData));
  targetTypeArr.set(sourceTypeArr, offset);
  return /* () */0;
}

function fillUint16Array(typeArr, dataArr, startIndex) {
  Contract$WonderLog.requireCheck((function () {
          var actualLen = dataArr.length + startIndex | 0;
          var range = typeArr.length;
          return Contract$WonderLog.test(Log$WonderLog.buildAssertMessage("not exceed Uint16Array range:" + (String(range) + ""), "is " + (String(actualLen) + "")), (function () {
                        return Contract$WonderLog.Operators[/* <= */11](actualLen, range);
                      }));
        }), IsDebugMainService$Wonderjs.getIsDebug(MainStateData$Wonderjs.stateData));
  var dataArrIndex = 0;
  for(var i = startIndex ,i_finish = (startIndex + dataArr.length | 0) - 1 | 0; i <= i_finish; ++i){
    typeArr[i] = dataArr[dataArrIndex];
    dataArrIndex = dataArrIndex + 1 | 0;
  }
  return typeArr;
}

function _setFloat32ArrayWithFloat32Array(targetTypeArr, sourceTypeArr, typeArrIndex, i) {
  targetTypeArr[typeArrIndex] = sourceTypeArr[i];
  return /* () */0;
}

function _setUint16ArrayWithUint16Array(targetTypeArr, sourceTypeArr, typeArrIndex, i) {
  targetTypeArr[typeArrIndex] = sourceTypeArr[i];
  return /* () */0;
}

function _fillTypeArrayWithTypeArray(param, param$1, endIndex, _setTypeArrayWithTypeArray) {
  var sourceTypeArr = param$1[0];
  var targetTypeArr = param[0];
  var typeArrIndex = param[1];
  for(var i = param$1[1] ,i_finish = endIndex - 1 | 0; i <= i_finish; ++i){
    _setTypeArrayWithTypeArray(targetTypeArr, sourceTypeArr, typeArrIndex, i);
    typeArrIndex = typeArrIndex + 1 | 0;
  }
  return typeArrIndex;
}

function fillFloat32ArrayWithFloat32Array(targetData, sourceData, endIndex) {
  return _fillTypeArrayWithTypeArray(targetData, sourceData, endIndex, _setFloat32ArrayWithFloat32Array);
}

function makeFloat32Array(record) {
  return new Float32Array(record);
}

function makeUint16Array(record) {
  return new Uint16Array(record);
}

export {
  getFloat3                        ,
  setFloat3                        ,
  setFloat16                       ,
  fillFloat32Array                 ,
  fillFloat32ArrayWithOffset       ,
  fillUint16Array                  ,
  _setFloat32ArrayWithFloat32Array ,
  _setUint16ArrayWithUint16Array   ,
  _fillTypeArrayWithTypeArray      ,
  fillFloat32ArrayWithFloat32Array ,
  makeFloat32Array                 ,
  makeUint16Array                  ,
  
}
/* Log-WonderLog Not a pure module */
