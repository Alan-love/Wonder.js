// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as Log$WonderLog                                      from "../../../../../../node_modules/wonder-log/lib/es6_global/src/Log.js";
import * as Matrix4Service$Wonderjs                            from "../../atom/Matrix4Service.js";
import * as PMatrixService$Wonderjs                            from "../../primitiive/PMatrixService.js";
import * as DirtyArrayService$Wonderjs                         from "../../primitiive/DirtyArrayService.js";
import * as ArrayService$WonderCommonlib                       from "../../../../../../node_modules/wonder-commonlib/lib/es6_global/src/ArrayService.js";
import * as FrustumPerspectiveCameraProjectionService$Wonderjs from "./FrustumPerspectiveCameraProjectionService.js";

function updateCameraProjection(index, record) {
  var match = FrustumPerspectiveCameraProjectionService$Wonderjs.getFovy(index, record);
  var match$1 = FrustumPerspectiveCameraProjectionService$Wonderjs.getAspect(index, record);
  var match$2 = FrustumPerspectiveCameraProjectionService$Wonderjs.getNear(index, record);
  var match$3 = FrustumPerspectiveCameraProjectionService$Wonderjs.getFar(index, record);
  var exit = 0;
  if (match) {
    if (match$1) {
      if (match$2) {
        if (match$3) {
          Matrix4Service$Wonderjs.buildPerspective(/* tuple */[
                match[0],
                match$1[0],
                match$2[0],
                match$3[0]
              ], PMatrixService$Wonderjs.unsafeGetPMatrix(index, record[/* pMatrixMap */2]));
          return record;
        } else {
          exit = 1;
        }
      } else {
        exit = 1;
      }
    } else {
      exit = 1;
    }
  } else {
    exit = 1;
  }
  if (exit === 1) {
    Log$WonderLog.fatal(Log$WonderLog.buildFatalMessage("update", "fovy,aspect,near,far should all exist", "", "", "cameraProjection: " + (String(index) + "")));
    return record;
  }
  
}

function _clearDirtyArray(record) {
  var newrecord = record.slice();
  newrecord[/* dirtyArray */1] = DirtyArrayService$Wonderjs.create(/* () */0);
  return newrecord;
}

function update(record) {
  return _clearDirtyArray(ArrayService$WonderCommonlib.reduceOneParam((function (record, dirtyIndex) {
                    return updateCameraProjection(dirtyIndex, record);
                  }), record, ArrayService$WonderCommonlib.removeDuplicateItems(record[/* dirtyArray */1])));
}

export {
  updateCameraProjection ,
  _clearDirtyArray       ,
  update                 ,
  
}
/* Log-WonderLog Not a pure module */
