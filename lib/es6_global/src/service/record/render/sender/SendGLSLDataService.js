// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as Log$WonderLog                    from "../../../../../../../node_modules/wonder-log/lib/es6_global/src/Log.js";
import * as Caml_builtin_exceptions          from "../../../../../../../node_modules/bs-platform/lib/es6/caml_builtin_exceptions.js";
import * as ArrayService$WonderCommonlib     from "../../../../../../../node_modules/wonder-commonlib/lib/es6_global/src/ArrayService.js";
import * as HashMapService$WonderCommonlib   from "../../../../../../../node_modules/wonder-commonlib/lib/es6_global/src/HashMapService.js";
import * as SparseMapService$WonderCommonlib from "../../../../../../../node_modules/wonder-commonlib/lib/es6_global/src/SparseMapService.js";

function getBufferSizeByType(type_) {
  switch (type_) {
    case "vec2" : 
        return 2;
    case "vec3" : 
        return 3;
    default:
      return Log$WonderLog.fatal(Log$WonderLog.buildFatalMessage("getBufferSizeByType", "invalide type_: " + (String(type_) + ""), "", "", ""));
  }
}

function enableVertexAttribArray(gl, pos, vertexAttribHistoryArray) {
  var match = ArrayService$WonderCommonlib.isNotEqual(pos, /* true */1, vertexAttribHistoryArray);
  if (match !== 0) {
    gl.enableVertexAttribArray(pos);
    vertexAttribHistoryArray[pos] = /* true */1;
    return /* () */0;
  } else {
    return /* () */0;
  }
}

function sendMatrix3(gl, pos, data) {
  gl.uniformMatrix3fv(pos, false, data);
  return /* () */0;
}

function sendMatrix4(gl, pos, data) {
  gl.uniformMatrix4fv(pos, false, data);
  return /* () */0;
}

function _getCache(shaderCacheMap, name) {
  return HashMapService$WonderCommonlib.get(name, shaderCacheMap);
}

function _setCache(shaderCacheMap, name, record) {
  return HashMapService$WonderCommonlib.set(name, record, shaderCacheMap);
}

var getCacheMap = SparseMapService$WonderCommonlib.get;

function _queryIsNotCacheWithCache(cache, x, y, z) {
  var isNotCached = /* false */0;
  if (cache[0] !== x) {
    cache[0] = x;
    isNotCached = /* true */1;
  }
  if (cache[1] !== y) {
    cache[1] = y;
    isNotCached = /* true */1;
  }
  if (cache[2] !== z) {
    cache[2] = z;
    isNotCached = /* true */1;
  }
  return isNotCached;
}

function _isNotCacheVector3AndSetCache(shaderCacheMap, name, param) {
  var z = param[2];
  var y = param[1];
  var x = param[0];
  var match = HashMapService$WonderCommonlib.get(name, shaderCacheMap);
  if (match) {
    return _queryIsNotCacheWithCache(match[0], x, y, z);
  } else {
    HashMapService$WonderCommonlib.set(name, /* float array */[
          x,
          y,
          z
        ], shaderCacheMap);
    return /* true */1;
  }
}

function _isNotCacheFloatAndSetCache(shaderCacheMap, name, value) {
  var match = HashMapService$WonderCommonlib.get(name, shaderCacheMap);
  if (match) {
    return +(match[0] !== value);
  } else {
    HashMapService$WonderCommonlib.set(name, value, shaderCacheMap);
    return /* true */1;
  }
}

function sendFloat(gl, shaderCacheMap, param, value) {
  if (_isNotCacheFloatAndSetCache(shaderCacheMap, param[0], value)) {
    gl.uniform1f(param[1], value);
    return /* () */0;
  } else {
    return /* () */0;
  }
}

function _isNotCacheIntAndSetCache(shaderCacheMap, name, value) {
  var match = HashMapService$WonderCommonlib.get(name, shaderCacheMap);
  if (match) {
    return +(match[0] !== value);
  } else {
    HashMapService$WonderCommonlib.set(name, value, shaderCacheMap);
    return /* true */1;
  }
}

function sendInt(gl, shaderCacheMap, param, value) {
  if (_isNotCacheIntAndSetCache(shaderCacheMap, param[0], value)) {
    gl.uniform1i(param[1], value);
    return /* () */0;
  } else {
    return /* () */0;
  }
}

function sendFloat3(gl, shaderCacheMap, param, param$1) {
  if (param$1.length !== 3) {
    throw [
          Caml_builtin_exceptions.match_failure,
          [
            "/Users/y/Github/Wonder.js/src/service/record/render/sender/SendGLSLDataService.re",
            140,
            2
          ]
        ];
  } else {
    var x = param$1[0];
    var y = param$1[1];
    var z = param$1[2];
    if (_isNotCacheVector3AndSetCache(shaderCacheMap, param[0], /* tuple */[
            x,
            y,
            z
          ])) {
      gl.uniform3f(param[1], x, y, z);
      return /* () */0;
    } else {
      return /* () */0;
    }
  }
}

function sendVec3(gl, shaderCacheMap, param, dataTuple) {
  if (_isNotCacheVector3AndSetCache(shaderCacheMap, param[0], dataTuple)) {
    gl.uniform3f(param[1], dataTuple[0], dataTuple[1], dataTuple[2]);
    return /* () */0;
  } else {
    return /* () */0;
  }
}

export {
  getBufferSizeByType           ,
  enableVertexAttribArray       ,
  sendMatrix3                   ,
  sendMatrix4                   ,
  _getCache                     ,
  _setCache                     ,
  getCacheMap                   ,
  _queryIsNotCacheWithCache     ,
  _isNotCacheVector3AndSetCache ,
  _isNotCacheFloatAndSetCache   ,
  sendFloat                     ,
  _isNotCacheIntAndSetCache     ,
  sendInt                       ,
  sendFloat3                    ,
  sendVec3                      ,
  
}
/* Log-WonderLog Not a pure module */
