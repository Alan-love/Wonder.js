// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as Matrix4Service$Wonderjs              from "../../atom/Matrix4Service.js";
import * as GlobalTempService$Wonderjs           from "../globalTemp/GlobalTempService.js";
import * as DirtyTransformService$Wonderjs       from "./DirtyTransformService.js";
import * as SparseMapService$WonderCommonlib     from "../../../../../../node_modules/wonder-commonlib/lib/es6_global/src/SparseMapService.js";
import * as HierachyTransformService$Wonderjs    from "./HierachyTransformService.js";
import * as ModelMatrixTransformService$Wonderjs from "./ModelMatrixTransformService.js";

function _clearCache(record) {
  record[/* normalMatrixCacheMap */7] = SparseMapService$WonderCommonlib.createEmpty(/* () */0);
  return record;
}

function update(transform, globalTempRecord, transformRecord) {
  var localPositionMap = transformRecord[/* localPositionMap */5];
  var match = DirtyTransformService$Wonderjs.isDirty(transform, transformRecord);
  if (match !== 0) {
    var transformRecord$1 = _clearCache(DirtyTransformService$Wonderjs.mark(transform, /* false */0, transformRecord));
    var match$1 = HierachyTransformService$Wonderjs.getParent(transform, transformRecord$1);
    if (match$1) {
      var parent = match$1[0];
      var transformRecord$2 = update(parent, globalTempRecord, transformRecord$1);
      Matrix4Service$Wonderjs.multiply(ModelMatrixTransformService$Wonderjs.getLocalToWorldMatrixTypeArray(parent, transformRecord$2), Matrix4Service$Wonderjs.fromTranslation(ModelMatrixTransformService$Wonderjs.getLocalPositionTypeArray(transform, localPositionMap), GlobalTempService$Wonderjs.getFloat32Array1(globalTempRecord)), ModelMatrixTransformService$Wonderjs.getLocalToWorldMatrixTypeArray(transform, transformRecord$2));
      return transformRecord$2;
    } else {
      Matrix4Service$Wonderjs.fromTranslation(ModelMatrixTransformService$Wonderjs.getLocalPositionTypeArray(transform, localPositionMap), ModelMatrixTransformService$Wonderjs.getLocalToWorldMatrixTypeArray(transform, transformRecord$1));
      return transformRecord$1;
    }
  } else {
    return transformRecord;
  }
}

function _updateAndGetPosition(transform, getTranslationFunc, globalTempRecord, record) {
  return getTranslationFunc(ModelMatrixTransformService$Wonderjs.getLocalToWorldMatrixTypeArray(transform, update(transform, globalTempRecord, record)));
}

function updateAndGetPositionTypeArray(transform, globalTempRecord, record) {
  return _updateAndGetPosition(transform, Matrix4Service$Wonderjs.getTranslationTypeArray, globalTempRecord, record);
}

function updateAndGetPositionTuple(transform, globalTempRecord, record) {
  return _updateAndGetPosition(transform, Matrix4Service$Wonderjs.getTranslationTuple, globalTempRecord, record);
}

function updateAndGetLocalToWorldMatrixTypeArray(transform, globalTempRecord, record) {
  return ModelMatrixTransformService$Wonderjs.getLocalToWorldMatrixTypeArray(transform, update(transform, globalTempRecord, record));
}

function updateAndGetNormalMatrixTypeArray(transform, globalTempRecord, record) {
  return ModelMatrixTransformService$Wonderjs.getNormalMatrixTypeArray(transform, update(transform, globalTempRecord, record));
}

function updateAndSetPositionByTuple(transform, position, globalTempRecord, record) {
  var match = HierachyTransformService$Wonderjs.getParent(transform, record);
  var tmp;
  if (match) {
    var parent = match[0];
    var record$1 = update(parent, globalTempRecord, record);
    tmp = ModelMatrixTransformService$Wonderjs.setPositionByTuple(transform, parent, position, /* tuple */[
          globalTempRecord,
          record$1
        ]);
  } else {
    tmp = ModelMatrixTransformService$Wonderjs.setLocalPositionByTuple(transform, position, record);
  }
  return HierachyTransformService$Wonderjs.markHierachyDirty(transform, tmp);
}

export {
  _clearCache                             ,
  update                                  ,
  _updateAndGetPosition                   ,
  updateAndGetPositionTypeArray           ,
  updateAndGetPositionTuple               ,
  updateAndGetLocalToWorldMatrixTypeArray ,
  updateAndGetNormalMatrixTypeArray       ,
  updateAndSetPositionByTuple             ,
  
}
/* Matrix4Service-Wonderjs Not a pure module */
