// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as Contract$WonderLog                 from "../../../../../../../node_modules/wonder-log/lib/es6_global/src/Contract.js";
import * as MainStateData$Wonderjs             from "../../../state/main/data/MainStateData.js";
import * as IsDebugMainService$Wonderjs        from "../../../state/main/state/IsDebugMainService.js";
import * as ArrayService$WonderCommonlib       from "../../../../../../../node_modules/wonder-commonlib/lib/es6_global/src/ArrayService.js";
import * as DisposeMaterialService$Wonderjs    from "../DisposeMaterialService.js";
import * as DisposeComponentService$Wonderjs   from "../../../primitiive/component/DisposeComponentService.js";
import * as GroupLightMaterialService$Wonderjs from "./GroupLightMaterialService.js";

function isAlive(material, param) {
  return DisposeComponentService$Wonderjs.isAlive(material, param[/* disposedIndexArray */7]);
}

function _disposeData(material, record) {
  var match = DisposeMaterialService$Wonderjs.disposeData(material, /* tuple */[
        record[/* shaderIndexMap */1],
        record[/* groupCountMap */6],
        record[/* gameObjectMap */5]
      ]);
  return /* record */[
          /* index */record[/* index */0],
          /* shaderIndexMap */match[0],
          /* diffuseColorMap */DisposeComponentService$Wonderjs.disposeSparseMapData(material, record[/* diffuseColorMap */2]),
          /* specularColorMap */DisposeComponentService$Wonderjs.disposeSparseMapData(material, record[/* specularColorMap */3]),
          /* shininessMap */DisposeComponentService$Wonderjs.disposeSparseMapData(material, record[/* shininessMap */4]),
          /* gameObjectMap */match[2],
          /* groupCountMap */match[1],
          /* disposedIndexArray */record[/* disposedIndexArray */7]
        ];
}

function _handleDispose(disposedIndexArray, material, record) {
  var match = GroupLightMaterialService$Wonderjs.isGroupMaterial(material, record);
  if (match !== 0) {
    return GroupLightMaterialService$Wonderjs.decreaseGroupCount(material, record);
  } else {
    var newrecord = _disposeData(material, record).slice();
    newrecord[/* disposedIndexArray */7] = DisposeMaterialService$Wonderjs.addDisposeIndex(material, disposedIndexArray);
    return newrecord;
  }
}

function handleDisposeComponent(material, record) {
  Contract$WonderLog.requireCheck((function () {
          return DisposeComponentService$Wonderjs.checkComponentShouldAlive(material, isAlive, record);
        }), IsDebugMainService$Wonderjs.getIsDebug(MainStateData$Wonderjs.stateData));
  return _handleDispose(record[/* disposedIndexArray */7], material, record);
}

function handleBatchDisposeComponent(materialArray, _, record) {
  var disposedIndexArray = record[/* disposedIndexArray */7];
  Contract$WonderLog.requireCheck((function () {
          return DisposeComponentService$Wonderjs.checkComponentShouldAliveWithBatchDispose(materialArray, isAlive, record);
        }), IsDebugMainService$Wonderjs.getIsDebug(MainStateData$Wonderjs.stateData));
  return ArrayService$WonderCommonlib.reduceOneParam((function (record, material) {
                return _handleDispose(disposedIndexArray, material, record);
              }), record, materialArray);
}

export {
  isAlive                     ,
  _disposeData                ,
  _handleDispose              ,
  handleDisposeComponent      ,
  handleBatchDisposeComponent ,
  
}
/* Contract-WonderLog Not a pure module */
