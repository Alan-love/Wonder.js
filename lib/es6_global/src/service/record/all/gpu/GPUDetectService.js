// Generated by BUCKLESCRIPT VERSION 3.1.4, PLEASE EDIT WITH CARE

import * as Js_option from "../../../../../../../node_modules/bs-platform/lib/es6/js_option.js";
import * as Log$WonderLog from "../../../../../../../node_modules/wonder-log/lib/es6_global/src/Log.js";
import * as Contract$WonderLog from "../../../../../../../node_modules/wonder-log/lib/es6_global/src/Contract.js";
import * as OptionService$Wonderjs from "../../../atom/OptionService.js";
import * as StateDataMain$Wonderjs from "../../../state/main/data/StateDataMain.js";
import * as IsDebugMainService$Wonderjs from "../../../state/main/state/IsDebugMainService.js";

function _getExtension(name, gl) {
  var tmp = name === "instanced_arrays" ? gl.getExtension("ANGLE_instanced_arrays") : gl.getExtension(name);
  if (tmp == null) {
    return /* None */0;
  } else {
    return [tmp];
  }
}

function _detectExtension(gl, record) {
  return /* record */[
          /* extensionInstancedArrays */_getExtension("instanced_arrays", gl),
          /* precision */record[/* precision */1],
          /* maxTextureUnit */record[/* maxTextureUnit */2]
        ];
}

function _detectPrecision(gl, record) {
  var vertexShader = gl.VERTEX_SHADER;
  var fragmentShader = gl.FRAGMENT_SHADER;
  var highFloat = gl.HIGH_FLOAT;
  var mediumFloat = gl.MEDIUM_FLOAT;
  var vertexShaderPrecisionHighpFloat = gl.getShaderPrecisionFormat(vertexShader, highFloat);
  var vertexShaderPrecisionMediumpFloat = gl.getShaderPrecisionFormat(vertexShader, mediumFloat);
  var fragmentShaderPrecisionHighpFloat = gl.getShaderPrecisionFormat(fragmentShader, highFloat);
  var fragmentShaderPrecisionMediumpFloat = gl.getShaderPrecisionFormat(fragmentShader, mediumFloat);
  var highpAvailable = vertexShaderPrecisionHighpFloat.precision > 0 && fragmentShaderPrecisionHighpFloat.precision > 0;
  var mediumpAvailable = vertexShaderPrecisionMediumpFloat.precision > 0 && fragmentShaderPrecisionMediumpFloat.precision > 0;
  if (highpAvailable) {
    return /* record */[
            /* extensionInstancedArrays */record[/* extensionInstancedArrays */0],
            /* precision : Some */[/* HIGHP */0],
            /* maxTextureUnit */record[/* maxTextureUnit */2]
          ];
  } else if (mediumpAvailable) {
    Log$WonderLog.warn("not support highp, using mediump instead");
    return /* record */[
            /* extensionInstancedArrays */record[/* extensionInstancedArrays */0],
            /* precision : Some */[/* MEDIUMP */1],
            /* maxTextureUnit */record[/* maxTextureUnit */2]
          ];
  } else {
    Log$WonderLog.warn("not support highp and mediump, using lowp instead");
    return /* record */[
            /* extensionInstancedArrays */record[/* extensionInstancedArrays */0],
            /* precision : Some */[/* LOWP */2],
            /* maxTextureUnit */record[/* maxTextureUnit */2]
          ];
  }
}

function _getTextureCapability(gl, textureCountPerMaterial, record) {
  return Contract$WonderLog.ensureCheck((function (param) {
                var maxTextureUnit = OptionService$Wonderjs.unsafeGet(param[/* maxTextureUnit */2]);
                return Contract$WonderLog.test(Log$WonderLog.buildAssertMessage("maxTextureUnit:" + (String(maxTextureUnit) + (" >= textureCountPerMaterial:" + (String(textureCountPerMaterial) + ""))), "not"), (function () {
                              return Contract$WonderLog.Operators[/* >= */7](maxTextureUnit, textureCountPerMaterial);
                            }));
              }), IsDebugMainService$Wonderjs.getIsDebug(StateDataMain$Wonderjs.stateData), /* record */[
              /* extensionInstancedArrays */record[/* extensionInstancedArrays */0],
              /* precision */record[/* precision */1],
              /* maxTextureUnit : Some */[gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS)]
            ]);
}

function _detectCapability(gl, textureCountPerMaterial, record) {
  return _detectPrecision(gl, _getTextureCapability(gl, textureCountPerMaterial, record));
}

function detect(gl, textureCountPerMaterial, record) {
  return _detectCapability(gl, textureCountPerMaterial, _detectExtension(gl, record));
}

var hasExtension = Js_option.isSome;

function unsafeGetInstanceExtension(record) {
  Contract$WonderLog.requireCheck((function () {
          return Contract$WonderLog.test(Log$WonderLog.buildAssertMessage("extensionInstancedArrays exist", "not"), (function () {
                        return Contract$WonderLog.assertExist(record[/* extensionInstancedArrays */0]);
                      }));
        }), IsDebugMainService$Wonderjs.getIsDebug(StateDataMain$Wonderjs.stateData));
  return OptionService$Wonderjs.unsafeGet(record[/* extensionInstancedArrays */0]);
}

export {
  _getExtension ,
  _detectExtension ,
  _detectPrecision ,
  _getTextureCapability ,
  _detectCapability ,
  detect ,
  hasExtension ,
  unsafeGetInstanceExtension ,
  
}
/* Log-WonderLog Not a pure module */
