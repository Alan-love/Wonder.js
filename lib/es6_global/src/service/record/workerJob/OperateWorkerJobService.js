// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as Most                         from "most";
import * as Curry                        from "../../../../../../node_modules/bs-platform/lib/es6/curry.js";
import * as Log$WonderLog                from "../../../../../../node_modules/wonder-log/lib/es6_global/src/Log.js";
import * as Contract$WonderLog           from "../../../../../../node_modules/wonder-log/lib/es6_global/src/Contract.js";
import * as MostUtils$Wonderjs           from "../../../asset/utils/MostUtils.js";
import * as ArrayService$Wonderjs        from "../../atom/ArrayService.js";
import * as MainStateData$Wonderjs       from "../../state/main/data/MainStateData.js";
import * as OptionService$Wonderjs       from "../../atom/OptionService.js";
import * as Caml_builtin_exceptions      from "../../../../../../node_modules/bs-platform/lib/es6/caml_builtin_exceptions.js";
import * as JobConfigService$Wonderjs    from "../../primitiive/JobConfigService.js";
import * as IsDebugMainService$Wonderjs  from "../../state/main/state/IsDebugMainService.js";
import * as ArrayService$WonderCommonlib from "../../../../../../node_modules/wonder-commonlib/lib/es6_global/src/ArrayService.js";

function _unsafeGetWorkerJobConfig(record) {
  Contract$WonderLog.requireCheck((function () {
          return Contract$WonderLog.test(Log$WonderLog.buildAssertMessage("render job config exist", "not"), (function () {
                        return Contract$WonderLog.assertExist(record);
                      }));
        }), IsDebugMainService$Wonderjs.getIsDebug(MainStateData$Wonderjs.stateData));
  return OptionService$Wonderjs.unsafeGet(record);
}

function _getExecutableJob(jobs, jobItemName) {
  return JobConfigService$Wonderjs.unsafeFindFirst(jobs, jobItemName, (function (param) {
                return JobConfigService$Wonderjs.filterTargetName(param[/* name */0], jobItemName);
              }));
}

function _buildStreamArr(param, findFunc, getJobHandleFunc) {
  var jobs = param[4];
  var stateData = param[3];
  var pipelineJobs = param[1];
  var jobHandleMap = param[0];
  return ArrayService$WonderCommonlib.reduceOneParam((function (streamArr, param) {
                var subJobName = param[/* name */0];
                var match = JobConfigService$Wonderjs.findFirst(pipelineJobs, subJobName, (function (param) {
                        return JobConfigService$Wonderjs.filterTargetName(param[/* name */0], subJobName);
                      }));
                var tmp;
                if (match) {
                  tmp = Curry._2(findFunc, /* tuple */[
                        match[0],
                        pipelineJobs,
                        jobHandleMap,
                        jobs,
                        stateData
                      ], getJobHandleFunc);
                } else {
                  var match$1 = _getExecutableJob(jobs, subJobName);
                  var handleFunc = Curry._2(getJobHandleFunc, subJobName, jobHandleMap);
                  tmp = Curry._2(handleFunc, match$1[/* flags */1], stateData);
                }
                return ArrayService$Wonderjs.push(tmp, streamArr);
              }), /* array */[], param[2]);
}

function _find(param, getJobHandleFunc) {
  var stateData = param[4];
  var mainInitJobs = param[3];
  var jobHandleMap = param[2];
  var pipelineJobs = param[1];
  var match = param[0];
  var pipelineSubJobs = match[/* jobs */2];
  switch (match[/* link */1]) {
    case "concat" : 
        return MostUtils$Wonderjs.concatArray(_buildStreamArr(/* tuple */[
                        jobHandleMap,
                        pipelineJobs,
                        pipelineSubJobs,
                        stateData,
                        mainInitJobs
                      ], _find, getJobHandleFunc));
    case "merge" : 
        return Most.mergeArray(_buildStreamArr(/* tuple */[
                        jobHandleMap,
                        pipelineJobs,
                        pipelineSubJobs,
                        stateData,
                        mainInitJobs
                      ], _find, getJobHandleFunc));
    default:
      throw [
            Caml_builtin_exceptions.match_failure,
            [
              "/Users/y/Github/Wonder.js/src/service/record/workerJob/OperateWorkerJobService.re",
              74,
              2
            ]
          ];
  }
}

function getMainInitJobStream(jobHandleMap, stateData, record, getJobHandleFunc) {
  var match = OptionService$Wonderjs.unsafeGet(record);
  var setting = match[/* setting */0];
  var match$1 = JobConfigService$Wonderjs.unsafeFindFirst(match[/* mainInitPipelines */1], setting[/* mainInitPipeline */1], (function (param) {
          return JobConfigService$Wonderjs.filterTargetName(param[/* name */0], setting[/* mainInitPipeline */1]);
        }));
  var jobs = match$1[/* jobs */1];
  var jobName = "frame";
  return _find(/* tuple */[
              JobConfigService$Wonderjs.unsafeFindFirst(jobs, jobName, (function (param) {
                      return JobConfigService$Wonderjs.filterTargetName(param[/* name */0], jobName);
                    })),
              jobs,
              jobHandleMap,
              match[/* mainInitJobs */3],
              stateData
            ], getJobHandleFunc);
}

function getSetting(record) {
  return _unsafeGetWorkerJobConfig(record)[/* setting */0];
}

function _getWorkerPipelineJobs(record) {
  var match = _unsafeGetWorkerJobConfig(record);
  var setting = match[/* setting */0];
  return JobConfigService$Wonderjs.unsafeFindFirst(match[/* workerPipelines */2], setting[/* workerPipeline */2], (function (param) {
                  return JobConfigService$Wonderjs.filterTargetName(param[/* name */0], setting[/* workerPipeline */2]);
                }))[/* jobs */1];
}

function getRenderWorkerPipelineJobs(record) {
  return _getWorkerPipelineJobs(record)[/* render */0];
}

function getWorkerJobs(record) {
  return _unsafeGetWorkerJobConfig(record)[/* workerJobs */4];
}

function _getExecutableWorkerJob(jobs, jobItemName) {
  return JobConfigService$Wonderjs.unsafeFindFirst(jobs, jobItemName, (function (param) {
                return JobConfigService$Wonderjs.filterTargetName(param[/* name */0], jobItemName);
              }));
}

function _buildWorkerStreamFuncArr(param, getJobHandleFunc) {
  var jobs = param[3];
  var jobHandleMap = param[0];
  return ArrayService$WonderCommonlib.reduceOneParam((function (streamArr, param) {
                var jobName = param[/* name */0];
                var match = _getExecutableWorkerJob(jobs, jobName);
                var handleFunc = Curry._2(getJobHandleFunc, jobName, jobHandleMap);
                return ArrayService$Wonderjs.push(Curry._1(handleFunc, match[/* flags */1]), streamArr);
              }), /* array */[], param[1]);
}

function getRenderWorkerJobStreamArr(pipelineJobs, workerJobs, jobHandleMap, stateData, getJobHandleFunc) {
  return ArrayService$WonderCommonlib.reduceOneParam((function (streamArr, jobs) {
                return ArrayService$Wonderjs.push(MostUtils$Wonderjs.concatStreamFuncArray(stateData, _buildWorkerStreamFuncArr(/* tuple */[
                                    jobHandleMap,
                                    jobs,
                                    stateData,
                                    workerJobs
                                  ], getJobHandleFunc)), streamArr);
              }), /* array */[], pipelineJobs);
}

export {
  _unsafeGetWorkerJobConfig   ,
  _getExecutableJob           ,
  _buildStreamArr             ,
  _find                       ,
  getMainInitJobStream        ,
  getSetting                  ,
  _getWorkerPipelineJobs      ,
  getRenderWorkerPipelineJobs ,
  getWorkerJobs               ,
  _getExecutableWorkerJob     ,
  _buildWorkerStreamFuncArr   ,
  getRenderWorkerJobStreamArr ,
  
}
/* most Not a pure module */
