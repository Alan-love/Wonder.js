// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as SparseMapService$Wonderjs        from "../../atom/SparseMapService.js";
import * as ArrayService$WonderCommonlib     from "../../../../../../node_modules/wonder-commonlib/lib/es6_global/src/ArrayService.js";
import * as SparseMapService$WonderCommonlib from "../../../../../../node_modules/wonder-commonlib/lib/es6_global/src/SparseMapService.js";

function create() {
  return /* record */[
          /* uid */0,
          /* disposeCount */0,
          /* disposedUidMap */SparseMapService$WonderCommonlib.createEmpty(/* () */0),
          /* aliveUidArray */ArrayService$WonderCommonlib.createEmpty(/* () */0),
          /* transformMap */SparseMapService$WonderCommonlib.createEmpty(/* () */0),
          /* basicCameraViewMap */SparseMapService$WonderCommonlib.createEmpty(/* () */0),
          /* perspectiveCameraProjectionMap */SparseMapService$WonderCommonlib.createEmpty(/* () */0),
          /* boxGeometryMap */SparseMapService$WonderCommonlib.createEmpty(/* () */0),
          /* meshRendererMap */SparseMapService$WonderCommonlib.createEmpty(/* () */0),
          /* basicMaterialMap */SparseMapService$WonderCommonlib.createEmpty(/* () */0),
          /* lightMaterialMap */SparseMapService$WonderCommonlib.createEmpty(/* () */0),
          /* sourceInstanceMap */SparseMapService$WonderCommonlib.createEmpty(/* () */0),
          /* objectInstanceMap */SparseMapService$WonderCommonlib.createEmpty(/* () */0),
          /* ambientLightMap */SparseMapService$WonderCommonlib.createEmpty(/* () */0),
          /* directionLightMap */SparseMapService$WonderCommonlib.createEmpty(/* () */0),
          /* pointLightMap */SparseMapService$WonderCommonlib.createEmpty(/* () */0)
        ];
}

function deepCopyForRestore(record) {
  var uid = record[/* uid */0];
  var disposeCount = record[/* disposeCount */1];
  var disposedUidMap = record[/* disposedUidMap */2];
  var aliveUidArray = record[/* aliveUidArray */3];
  var transformMap = record[/* transformMap */4];
  var basicCameraViewMap = record[/* basicCameraViewMap */5];
  var perspectiveCameraProjectionMap = record[/* perspectiveCameraProjectionMap */6];
  var boxGeometryMap = record[/* boxGeometryMap */7];
  var meshRendererMap = record[/* meshRendererMap */8];
  var basicMaterialMap = record[/* basicMaterialMap */9];
  var lightMaterialMap = record[/* lightMaterialMap */10];
  var sourceInstanceMap = record[/* sourceInstanceMap */11];
  var objectInstanceMap = record[/* objectInstanceMap */12];
  var ambientLightMap = record[/* ambientLightMap */13];
  var directionLightMap = record[/* directionLightMap */14];
  var pointLightMap = record[/* pointLightMap */15];
  return /* record */[
          /* uid */uid,
          /* disposeCount */disposeCount,
          /* disposedUidMap */SparseMapService$Wonderjs.copy(disposedUidMap),
          /* aliveUidArray */SparseMapService$Wonderjs.copy(aliveUidArray),
          /* transformMap */SparseMapService$Wonderjs.copy(transformMap),
          /* basicCameraViewMap */SparseMapService$Wonderjs.copy(basicCameraViewMap),
          /* perspectiveCameraProjectionMap */SparseMapService$Wonderjs.copy(perspectiveCameraProjectionMap),
          /* boxGeometryMap */SparseMapService$Wonderjs.copy(boxGeometryMap),
          /* meshRendererMap */SparseMapService$Wonderjs.copy(meshRendererMap),
          /* basicMaterialMap */SparseMapService$Wonderjs.copy(basicMaterialMap),
          /* lightMaterialMap */SparseMapService$Wonderjs.copy(lightMaterialMap),
          /* sourceInstanceMap */SparseMapService$Wonderjs.copy(sourceInstanceMap),
          /* objectInstanceMap */SparseMapService$Wonderjs.copy(objectInstanceMap),
          /* ambientLightMap */SparseMapService$Wonderjs.copy(ambientLightMap),
          /* directionLightMap */SparseMapService$Wonderjs.copy(directionLightMap),
          /* pointLightMap */SparseMapService$Wonderjs.copy(pointLightMap)
        ];
}

export {
  create             ,
  deepCopyForRestore ,
  
}
/* SparseMapService-Wonderjs Not a pure module */
