// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as ArrayService$WonderCommonlib     from "../../../../../../node_modules/wonder-commonlib/lib/es6_global/src/ArrayService.js";
import * as SparseMapService$WonderCommonlib from "../../../../../../node_modules/wonder-commonlib/lib/es6_global/src/SparseMapService.js";

var _isDisposed = SparseMapService$WonderCommonlib.has;

function _setNewDataToState(newAliveUidArray, record, param) {
  return /* record */[
          /* uid */record[/* uid */0],
          /* disposeCount */record[/* disposeCount */1],
          /* disposedUidMap */SparseMapService$WonderCommonlib.createEmpty(/* () */0),
          /* aliveUidArray */newAliveUidArray,
          /* transformMap */param[0],
          /* basicCameraViewMap */param[3],
          /* perspectiveCameraProjectionMap */record[/* perspectiveCameraProjectionMap */6],
          /* boxGeometryMap */param[2],
          /* meshRendererMap */param[1],
          /* basicMaterialMap */param[4],
          /* lightMaterialMap */param[5],
          /* sourceInstanceMap */param[9],
          /* objectInstanceMap */param[10],
          /* ambientLightMap */param[6],
          /* directionLightMap */param[7],
          /* pointLightMap */param[8]
        ];
}

function _setNewMap(uid, oldMap, newMap) {
  var match = SparseMapService$WonderCommonlib.get(uid, oldMap);
  if (match) {
    return SparseMapService$WonderCommonlib.set(uid, match[0], newMap);
  } else {
    return newMap;
  }
}

function _allocateNewMaps(newAliveUidArray, record) {
  var transformMap = record[/* transformMap */4];
  var basicCameraViewMap = record[/* basicCameraViewMap */5];
  var boxGeometryMap = record[/* boxGeometryMap */7];
  var meshRendererMap = record[/* meshRendererMap */8];
  var basicMaterialMap = record[/* basicMaterialMap */9];
  var lightMaterialMap = record[/* lightMaterialMap */10];
  var sourceInstanceMap = record[/* sourceInstanceMap */11];
  var objectInstanceMap = record[/* objectInstanceMap */12];
  var ambientLightMap = record[/* ambientLightMap */13];
  var directionLightMap = record[/* directionLightMap */14];
  var pointLightMap = record[/* pointLightMap */15];
  return ArrayService$WonderCommonlib.reduceOneParam((function (param, uid) {
                return /* tuple */[
                        SparseMapService$WonderCommonlib.set(uid, SparseMapService$WonderCommonlib.unsafeGet(uid, transformMap), param[0]),
                        _setNewMap(uid, meshRendererMap, param[1]),
                        _setNewMap(uid, boxGeometryMap, param[2]),
                        _setNewMap(uid, basicCameraViewMap, param[3]),
                        _setNewMap(uid, basicMaterialMap, param[4]),
                        _setNewMap(uid, lightMaterialMap, param[5]),
                        _setNewMap(uid, ambientLightMap, param[6]),
                        _setNewMap(uid, directionLightMap, param[7]),
                        _setNewMap(uid, pointLightMap, param[8]),
                        _setNewMap(uid, sourceInstanceMap, param[9]),
                        _setNewMap(uid, objectInstanceMap, param[10])
                      ];
              }), /* tuple */[
              SparseMapService$WonderCommonlib.createEmpty(/* () */0),
              SparseMapService$WonderCommonlib.createEmpty(/* () */0),
              SparseMapService$WonderCommonlib.createEmpty(/* () */0),
              SparseMapService$WonderCommonlib.createEmpty(/* () */0),
              SparseMapService$WonderCommonlib.createEmpty(/* () */0),
              SparseMapService$WonderCommonlib.createEmpty(/* () */0),
              SparseMapService$WonderCommonlib.createEmpty(/* () */0),
              SparseMapService$WonderCommonlib.createEmpty(/* () */0),
              SparseMapService$WonderCommonlib.createEmpty(/* () */0),
              SparseMapService$WonderCommonlib.createEmpty(/* () */0),
              SparseMapService$WonderCommonlib.createEmpty(/* () */0)
            ], newAliveUidArray);
}

function reAllocateGameObject(record) {
  var disposedUidMap = record[/* disposedUidMap */2];
  var aliveUidArray = record[/* aliveUidArray */3];
  var newAliveUidArray = aliveUidArray.filter((function (aliveUid) {
          return 1 - SparseMapService$WonderCommonlib.has(aliveUid, disposedUidMap);
        }));
  return _setNewDataToState(newAliveUidArray, record, _allocateNewMaps(newAliveUidArray, record));
}

export {
  _isDisposed          ,
  _setNewDataToState   ,
  _setNewMap           ,
  _allocateNewMaps     ,
  reAllocateGameObject ,
  
}
/* ArrayService-WonderCommonlib Not a pure module */
