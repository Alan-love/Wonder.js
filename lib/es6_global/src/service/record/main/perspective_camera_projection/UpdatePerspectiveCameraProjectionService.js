// Generated by BUCKLESCRIPT VERSION 3.1.4, PLEASE EDIT WITH CARE

import * as Log$WonderLog from "../../../../../../../node_modules/wonder-log/lib/es6_global/src/Log.js";
import * as Matrix4Service$Wonderjs from "../../../atom/Matrix4Service.js";
import * as PMatrixService$Wonderjs from "../../../primitive/PMatrixService.js";
import * as DirtyArrayService$Wonderjs from "../../../primitive/DirtyArrayService.js";
import * as ArrayService$WonderCommonlib from "../../../../../../../node_modules/wonder-commonlib/lib/es6_global/src/ArrayService.js";
import * as FrustumPerspectiveCameraProjectionService$Wonderjs from "./FrustumPerspectiveCameraProjectionService.js";

function updateCameraProjection(index, record) {
  var match = FrustumPerspectiveCameraProjectionService$Wonderjs.getFovy(index, record);
  var match$1 = FrustumPerspectiveCameraProjectionService$Wonderjs.getAspect(index, record);
  var match$2 = FrustumPerspectiveCameraProjectionService$Wonderjs.getNear(index, record);
  var match$3 = FrustumPerspectiveCameraProjectionService$Wonderjs.getFar(index, record);
  var exit = 0;
  if (match && match$1 && match$2 && match$3) {
    Matrix4Service$Wonderjs.buildPerspective(/* tuple */[
          match[0],
          match$1[0],
          match$2[0],
          match$3[0]
        ], PMatrixService$Wonderjs.unsafeGetPMatrix(index, record[/* pMatrixMap */2]));
    return record;
  } else {
    exit = 1;
  }
  if (exit === 1) {
    Log$WonderLog.fatal(Log$WonderLog.buildFatalMessage("update", "fovy,aspect,near,far should all exist", "", "", "cameraProjection: " + (String(index) + "")));
    return record;
  }
  
}

function _clearDirtyArray(record) {
  return /* record */[
          /* index */record[/* index */0],
          /* dirtyArray */DirtyArrayService$Wonderjs.create(/* () */0),
          /* pMatrixMap */record[/* pMatrixMap */2],
          /* nearMap */record[/* nearMap */3],
          /* farMap */record[/* farMap */4],
          /* fovyMap */record[/* fovyMap */5],
          /* aspectMap */record[/* aspectMap */6],
          /* gameObjectMap */record[/* gameObjectMap */7],
          /* disposedIndexArray */record[/* disposedIndexArray */8]
        ];
}

function update(record) {
  return _clearDirtyArray(ArrayService$WonderCommonlib.reduceOneParam((function (record, dirtyIndex) {
                    return updateCameraProjection(dirtyIndex, record);
                  }), record, ArrayService$WonderCommonlib.removeDuplicateItems(record[/* dirtyArray */1])));
}

export {
  updateCameraProjection ,
  _clearDirtyArray ,
  update ,
  
}
/* Log-WonderLog Not a pure module */
