// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as Log$WonderLog                    from "../../../../../../../node_modules/wonder-log/lib/es6_global/src/Log.js";
import * as Contract$WonderLog               from "../../../../../../../node_modules/wonder-log/lib/es6_global/src/Contract.js";
import * as ArrayService$Wonderjs            from "../../../atom/ArrayService.js";
import * as StateDataMain$Wonderjs           from "../../../state/main/data/StateDataMain.js";
import * as SparseMapService$Wonderjs        from "../../../atom/SparseMapService.js";
import * as IsDebugMainService$Wonderjs      from "../../../state/main/state/IsDebugMainService.js";
import * as SparseMapService$WonderCommonlib from "../../../../../../../node_modules/wonder-commonlib/lib/es6_global/src/SparseMapService.js";

function _getBufferAndSetBufferMap(gl, bufferPool) {
  var match = bufferPool.pop();
  if (match !== undefined) {
    return match;
  } else {
    return gl.createBuffer();
  }
}

function getArrayBuffer(gl, param) {
  return _getBufferAndSetBufferMap(gl, param[/* vertexArrayBufferPool */7]);
}

function getElementArrayBuffer(gl, param) {
  return _getBufferAndSetBufferMap(gl, param[/* elementArrayBufferPool */8]);
}

function getInstanceBuffer(gl, param) {
  return _getBufferAndSetBufferMap(gl, param[/* matrixInstanceBufferPool */9]);
}

function addAllBufferToPool(param) {
  var matrixInstanceBufferPool = param[/* matrixInstanceBufferPool */9];
  var elementArrayBufferPool = param[/* elementArrayBufferPool */8];
  var vertexArrayBufferPool = param[/* vertexArrayBufferPool */7];
  SparseMapService$Wonderjs.forEachValid((function (buffer) {
          vertexArrayBufferPool.push(buffer);
          return /* () */0;
        }), param[/* boxGeometryVertexBufferMap */0]);
  SparseMapService$Wonderjs.forEachValid((function (buffer) {
          vertexArrayBufferPool.push(buffer);
          return /* () */0;
        }), param[/* boxGeometryNormalBufferMap */1]);
  SparseMapService$Wonderjs.forEachValid((function (buffer) {
          elementArrayBufferPool.push(buffer);
          return /* () */0;
        }), param[/* boxGeometryElementArrayBufferMap */2]);
  SparseMapService$Wonderjs.forEachValid((function (buffer) {
          vertexArrayBufferPool.push(buffer);
          return /* () */0;
        }), param[/* customGeometryVertexBufferMap */3]);
  SparseMapService$Wonderjs.forEachValid((function (buffer) {
          vertexArrayBufferPool.push(buffer);
          return /* () */0;
        }), param[/* customGeometryNormalBufferMap */4]);
  SparseMapService$Wonderjs.forEachValid((function (buffer) {
          elementArrayBufferPool.push(buffer);
          return /* () */0;
        }), param[/* customGeometryElementArrayBufferMap */5]);
  SparseMapService$Wonderjs.forEachValid((function (buffer) {
          matrixInstanceBufferPool.push(buffer);
          return /* () */0;
        }), param[/* matrixInstanceBufferMap */6]);
  return /* tuple */[
          vertexArrayBufferPool,
          elementArrayBufferPool,
          matrixInstanceBufferPool
        ];
}

var _getBufferFromBufferMap = SparseMapService$WonderCommonlib.get;

function _addBufferToPool(geometryIndex, bufferMap, pool) {
  var match = SparseMapService$WonderCommonlib.get(geometryIndex, bufferMap);
  if (match) {
    return ArrayService$Wonderjs.push(match[0], pool);
  } else {
    return pool;
  }
}

function addBoxGeometryBufferToPool(geometryIndex, record) {
  var newrecord = record.slice();
  newrecord[/* vertexArrayBufferPool */7] = _addBufferToPool(geometryIndex, record[/* boxGeometryNormalBufferMap */1], _addBufferToPool(geometryIndex, record[/* boxGeometryVertexBufferMap */0], record[/* vertexArrayBufferPool */7]));
  newrecord[/* elementArrayBufferPool */8] = _addBufferToPool(geometryIndex, record[/* boxGeometryElementArrayBufferMap */2], record[/* elementArrayBufferPool */8]);
  return newrecord;
}

function addCustomGeometryBufferToPool(geometryIndex, record) {
  var newrecord = record.slice();
  newrecord[/* vertexArrayBufferPool */7] = _addBufferToPool(geometryIndex, record[/* customGeometryNormalBufferMap */4], _addBufferToPool(geometryIndex, record[/* customGeometryVertexBufferMap */3], record[/* vertexArrayBufferPool */7]));
  newrecord[/* elementArrayBufferPool */8] = _addBufferToPool(geometryIndex, record[/* customGeometryElementArrayBufferMap */5], record[/* elementArrayBufferPool */8]);
  return newrecord;
}

function _unsafeGetBufferFromBufferMap(index, bufferMap) {
  return Contract$WonderLog.ensureCheck((function () {
                return Contract$WonderLog.test(Log$WonderLog.buildAssertMessage("buffer exist in bufferMap", "not"), (function () {
                              return Contract$WonderLog.assertTrue(SparseMapService$WonderCommonlib.has(index, bufferMap));
                            }));
              }), IsDebugMainService$Wonderjs.getIsDebug(StateDataMain$Wonderjs.stateData), SparseMapService$WonderCommonlib.unsafeGet(index, bufferMap));
}

function addInstanceBufferToPool(sourceInstanceIndex, record) {
  var newrecord = record.slice();
  newrecord[/* matrixInstanceBufferPool */9] = ArrayService$Wonderjs.push(_unsafeGetBufferFromBufferMap(sourceInstanceIndex, record[/* matrixInstanceBufferMap */6]), record[/* matrixInstanceBufferPool */9]);
  return newrecord;
}

export {
  _getBufferAndSetBufferMap     ,
  getArrayBuffer                ,
  getElementArrayBuffer         ,
  getInstanceBuffer             ,
  addAllBufferToPool            ,
  _getBufferFromBufferMap       ,
  _addBufferToPool              ,
  addBoxGeometryBufferToPool    ,
  addCustomGeometryBufferToPool ,
  _unsafeGetBufferFromBufferMap ,
  addInstanceBufferToPool       ,
  
}
/* Log-WonderLog Not a pure module */
