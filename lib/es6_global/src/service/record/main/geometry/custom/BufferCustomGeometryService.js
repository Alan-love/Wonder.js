// Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE

import * as Caml_int32 from "../../../../../../../../node_modules/bs-platform/lib/es6/caml_int32.js";
import * as Worker$Wonderjs from "../../../../../external/Worker.js";

function getVertexSize() {
  return 3;
}

function getTexCoordsSize() {
  return 2;
}

function getVertexLength(customGeometryPointCount) {
  return Caml_int32.imul(customGeometryPointCount, 3);
}

function getTexCoordsLength(customGeometryPointCount) {
  return (customGeometryPointCount << 1);
}

function getVerticesOffset() {
  return 0;
}

function getTexCoordsOffset(customGeometryPointCount) {
  return 0 + Caml_int32.imul(Caml_int32.imul(customGeometryPointCount, 3), Float32Array.BYTES_PER_ELEMENT) | 0;
}

function getNormalsOffset(customGeometryPointCount) {
  return getTexCoordsOffset(customGeometryPointCount) + Caml_int32.imul((customGeometryPointCount << 1), Float32Array.BYTES_PER_ELEMENT) | 0;
}

function getIndexSize() {
  return 1;
}

function getIndicesLength(customGeometryPointCount) {
  return (customGeometryPointCount << 0);
}

function getIndicesOffset(customGeometryPointCount) {
  return getNormalsOffset(customGeometryPointCount) + Caml_int32.imul(Caml_int32.imul(customGeometryPointCount, 3), Float32Array.BYTES_PER_ELEMENT) | 0;
}

function getInfoSize() {
  return 2;
}

function getVerticesInfosLength(customGeometryCount) {
  return (customGeometryCount << 1);
}

function getVerticesInfosOffset(customGeometryPointCount) {
  return getIndicesOffset(customGeometryPointCount) + Caml_int32.imul((customGeometryPointCount << 0), Uint16Array.BYTES_PER_ELEMENT) | 0;
}

function getTexCoordsInfosLength(customGeometryCount) {
  return (customGeometryCount << 1);
}

function getTexCoordsInfosOffset(customGeometryPointCount, customGeometryCount) {
  return getVerticesInfosOffset(customGeometryPointCount) + Caml_int32.imul((customGeometryCount << 1), Uint32Array.BYTES_PER_ELEMENT) | 0;
}

function getNormalsInfosLength(customGeometryCount) {
  return (customGeometryCount << 1);
}

function getNormalsInfosOffset(customGeometryPointCount, customGeometryCount) {
  return getTexCoordsInfosOffset(customGeometryPointCount, customGeometryCount) + Caml_int32.imul((customGeometryCount << 1), Uint32Array.BYTES_PER_ELEMENT) | 0;
}

function getIndicesInfosLength(customGeometryCount) {
  return (customGeometryCount << 1);
}

function getIndicesInfosOffset(customGeometryPointCount, customGeometryCount) {
  return getNormalsInfosOffset(customGeometryPointCount, customGeometryCount) + Caml_int32.imul((customGeometryCount << 1), Uint32Array.BYTES_PER_ELEMENT) | 0;
}

function getVertexIndex(index) {
  return Caml_int32.imul(index, 3);
}

function getTexCoordIndex(index) {
  return (index << 1);
}

function getIndexIndex(index) {
  return (index << 0);
}

function getInfoIndex(index) {
  return (index << 1);
}

function getTotalByteLength(customGeometryPointCount, customGeometryCount) {
  return Caml_int32.imul(customGeometryPointCount, ((Caml_int32.imul(Float32Array.BYTES_PER_ELEMENT, 3) << 1) + (Float32Array.BYTES_PER_ELEMENT << 1) | 0) + (Uint16Array.BYTES_PER_ELEMENT << 0) | 0) + (Caml_int32.imul(customGeometryCount, Uint32Array.BYTES_PER_ELEMENT) << 3) | 0;
}

function createBuffer(customGeometryPointCount, customGeometryCount) {
  return Worker$Wonderjs.newSharedArrayBuffer(getTotalByteLength(customGeometryPointCount, customGeometryCount));
}

export {
  getVertexSize ,
  getTexCoordsSize ,
  getVertexLength ,
  getTexCoordsLength ,
  getVerticesOffset ,
  getTexCoordsOffset ,
  getNormalsOffset ,
  getIndexSize ,
  getIndicesLength ,
  getIndicesOffset ,
  getInfoSize ,
  getVerticesInfosLength ,
  getVerticesInfosOffset ,
  getTexCoordsInfosLength ,
  getTexCoordsInfosOffset ,
  getNormalsInfosLength ,
  getNormalsInfosOffset ,
  getIndicesInfosLength ,
  getIndicesInfosOffset ,
  getVertexIndex ,
  getTexCoordIndex ,
  getIndexIndex ,
  getInfoIndex ,
  getTotalByteLength ,
  createBuffer ,
  
}
/* Worker-Wonderjs Not a pure module */
