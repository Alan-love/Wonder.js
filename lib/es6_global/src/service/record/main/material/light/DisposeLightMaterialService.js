// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as Contract$WonderLog                  from "../../../../../../../../node_modules/wonder-log/lib/es6_global/src/Contract.js";
import * as StateDataMain$Wonderjs              from "../../../../state/main/data/StateDataMain.js";
import * as IsDebugMainService$Wonderjs         from "../../../../state/main/state/IsDebugMainService.js";
import * as ArrayService$WonderCommonlib        from "../../../../../../../../node_modules/wonder-commonlib/lib/es6_global/src/ArrayService.js";
import * as DisposeMaterialService$Wonderjs     from "../DisposeMaterialService.js";
import * as DisposeComponentService$Wonderjs    from "../../../../primitive/component/DisposeComponentService.js";
import * as DisposeTypeArrayService$Wonderjs    from "../../../../primitive/buffer/DisposeTypeArrayService.js";
import * as GroupLightMaterialService$Wonderjs  from "./GroupLightMaterialService.js";
import * as BufferLightMaterialService$Wonderjs from "./BufferLightMaterialService.js";

function isAlive(material, param) {
  return DisposeComponentService$Wonderjs.isAlive(material, param[/* disposedIndexArray */12]);
}

function _disposeData(material, record) {
  var match = DisposeMaterialService$Wonderjs.disposeData(material, /* tuple */[
        record[/* shaderIndices */2],
        record[/* groupCountMap */11],
        record[/* gameObjectMap */10]
      ], record[/* defaultShaderIndex */6]);
  return /* record */[
          /* index */record[/* index */0],
          /* buffer */record[/* buffer */1],
          /* shaderIndices */match[0],
          /* diffuseColors */DisposeTypeArrayService$Wonderjs.deleteAndResetFloat32TypeArr(BufferLightMaterialService$Wonderjs.getDiffuseColorIndex(material), BufferLightMaterialService$Wonderjs.getDiffuseColorsSize(/* () */0), record[/* defaultDiffuseColor */7], record[/* diffuseColors */3]),
          /* specularColors */DisposeTypeArrayService$Wonderjs.deleteAndResetFloat32TypeArr(BufferLightMaterialService$Wonderjs.getSpecularColorIndex(material), BufferLightMaterialService$Wonderjs.getSpecularColorsSize(/* () */0), record[/* defaultSpecularColor */8], record[/* specularColors */4]),
          /* shininess */DisposeTypeArrayService$Wonderjs.deleteAndResetFloat32(BufferLightMaterialService$Wonderjs.getShininessIndex(material), record[/* defaultShininess */9], record[/* shininess */5]),
          /* defaultShaderIndex */record[/* defaultShaderIndex */6],
          /* defaultDiffuseColor */record[/* defaultDiffuseColor */7],
          /* defaultSpecularColor */record[/* defaultSpecularColor */8],
          /* defaultShininess */record[/* defaultShininess */9],
          /* gameObjectMap */match[2],
          /* groupCountMap */match[1],
          /* disposedIndexArray */record[/* disposedIndexArray */12],
          /* materialArrayForWorkerInit */record[/* materialArrayForWorkerInit */13]
        ];
}

function _handleDispose(disposedIndexArray, material, record) {
  var match = GroupLightMaterialService$Wonderjs.isGroupMaterial(material, record);
  if (match !== 0) {
    return GroupLightMaterialService$Wonderjs.decreaseGroupCount(material, record);
  } else {
    var newrecord = _disposeData(material, record).slice();
    newrecord[/* disposedIndexArray */12] = DisposeMaterialService$Wonderjs.addDisposeIndex(material, disposedIndexArray);
    return newrecord;
  }
}

function handleBatchDisposeComponent(materialArray, record) {
  var disposedIndexArray = record[/* disposedIndexArray */12];
  Contract$WonderLog.requireCheck((function () {
          return DisposeComponentService$Wonderjs.checkComponentShouldAliveWithBatchDispose(materialArray, isAlive, record);
        }), IsDebugMainService$Wonderjs.getIsDebug(StateDataMain$Wonderjs.stateData));
  return ArrayService$WonderCommonlib.reduceOneParam((function (record, material) {
                return _handleDispose(disposedIndexArray, material, record);
              }), record, materialArray);
}

export {
  isAlive                     ,
  _disposeData                ,
  _handleDispose              ,
  handleBatchDisposeComponent ,
  
}
/* Contract-WonderLog Not a pure module */
