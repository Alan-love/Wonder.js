// Generated by BUCKLESCRIPT VERSION 3.1.4, PLEASE EDIT WITH CARE

import * as Matrix3Service$Wonderjs from "../../../atom/Matrix3Service.js";
import * as Matrix4Service$Wonderjs from "../../../atom/Matrix4Service.js";
import * as Vector3Service$Wonderjs from "../../../atom/Vector3Service.js";
import * as GlobalTempService$Wonderjs from "../../all/globalTemp/GlobalTempService.js";
import * as SparseMapService$WonderCommonlib from "../../../../../../../node_modules/wonder-commonlib/lib/es6_global/src/SparseMapService.js";
import * as HierachyTransformService$Wonderjs from "./HierachyTransformService.js";
import * as RecordTransformMainService$Wonderjs from "../../../state/main/transform/RecordTransformMainService.js";

function getLocalToWorldMatrixTypeArray(transform, localToWorldMatrices, localToWorldMatrixCacheMap) {
  var match = SparseMapService$WonderCommonlib.get(transform, localToWorldMatrixCacheMap);
  if (match) {
    return match[0];
  } else {
    var matrix = RecordTransformMainService$Wonderjs.getLocalToWorldMatrixTypeArray(transform, localToWorldMatrices);
    SparseMapService$WonderCommonlib.set(transform, matrix, localToWorldMatrixCacheMap);
    return matrix;
  }
}

function _getNormalMatrixTypeArray(transform, localToWorldMatrices, param, getLocalToWorldMatrixTypeArrayFunc) {
  return Matrix3Service$Wonderjs.transposeSelf(Matrix4Service$Wonderjs.invertTo3x3(getLocalToWorldMatrixTypeArrayFunc(transform, localToWorldMatrices, param[0]), param[1]));
}

function getNormalMatrixTypeArray(transform, localToWorldMatrices, param) {
  var normalMatrixCacheMap = param[1];
  var match = SparseMapService$WonderCommonlib.get(transform, normalMatrixCacheMap);
  if (match) {
    return match[0];
  } else {
    var matrix = _getNormalMatrixTypeArray(transform, localToWorldMatrices, /* tuple */[
          param[0],
          Matrix3Service$Wonderjs.createIdentityMatrix3(/* () */0)
        ], getLocalToWorldMatrixTypeArray);
    SparseMapService$WonderCommonlib.set(transform, matrix, normalMatrixCacheMap);
    return matrix;
  }
}

var getLocalPositionTypeArray = RecordTransformMainService$Wonderjs.getLocalPositionTypeArray;

var getLocalPositionTuple = RecordTransformMainService$Wonderjs.getLocalPositionTuple;

function setLocalPositionByTuple(transform, dataTuple, record) {
  var localPositions = record[/* localPositions */3];
  RecordTransformMainService$Wonderjs.setLocalPositionByTuple(transform, dataTuple, localPositions);
  return HierachyTransformService$Wonderjs.markHierachyDirty(transform, record);
}

function setPositionByTuple(transform, parent, position, param) {
  var record = param[1];
  var localToWorldMatrixCacheMap = record[/* localToWorldMatrixCacheMap */13];
  var localToWorldMatrix = getLocalToWorldMatrixTypeArray(parent, record[/* localToWorldMatrices */2], localToWorldMatrixCacheMap);
  return setLocalPositionByTuple(transform, Vector3Service$Wonderjs.transformMat4Tuple(position, Matrix4Service$Wonderjs.invert(localToWorldMatrix, GlobalTempService$Wonderjs.getFloat32Array1(param[0]))), record);
}

export {
  getLocalToWorldMatrixTypeArray ,
  _getNormalMatrixTypeArray ,
  getNormalMatrixTypeArray ,
  getLocalPositionTypeArray ,
  getLocalPositionTuple ,
  setLocalPositionByTuple ,
  setPositionByTuple ,
  
}
/* Matrix4Service-Wonderjs Not a pure module */
