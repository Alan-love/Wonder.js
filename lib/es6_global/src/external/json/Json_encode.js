// Generated by BUCKLESCRIPT VERSION 3.1.4, PLEASE EDIT WITH CARE

import * as List from "../../../../../node_modules/bs-platform/lib/es6/list.js";
import * as $$Array from "../../../../../node_modules/bs-platform/lib/es6/array.js";
import * as Curry from "../../../../../node_modules/bs-platform/lib/es6/curry.js";
import * as $$String from "../../../../../node_modules/bs-platform/lib/es6/string.js";
import * as Js_dict from "../../../../../node_modules/bs-platform/lib/es6/js_dict.js";

function $$char(c) {
  return $$String.make(1, c);
}

function date(d) {
  return d.toJSON();
}

function nullable(encode, param) {
  if (param) {
    return Curry._1(encode, param[0]);
  } else {
    return null;
  }
}

function withDefault(d, encode, param) {
  if (param) {
    return Curry._1(encode, param[0]);
  } else {
    return d;
  }
}

var object_ = Js_dict.fromList;

var array = $$Array.map;

function list(encode, l) {
  return $$Array.of_list(List.map(encode, l));
}

function pair(encodeA, encodeB, param) {
  return /* array */[
          Curry._1(encodeA, param[0]),
          Curry._1(encodeB, param[1])
        ];
}

function tuple3(encodeA, encodeB, encodeC, param) {
  return /* array */[
          Curry._1(encodeA, param[0]),
          Curry._1(encodeB, param[1]),
          Curry._1(encodeC, param[2])
        ];
}

function tuple4(encodeA, encodeB, encodeC, encodeD, param) {
  return /* array */[
          Curry._1(encodeA, param[0]),
          Curry._1(encodeB, param[1]),
          Curry._1(encodeC, param[2]),
          Curry._1(encodeD, param[3])
        ];
}

var arrayOf = array;

var tuple2 = pair;

export {
  $$char ,
  date ,
  nullable ,
  withDefault ,
  object_ ,
  array ,
  arrayOf ,
  list ,
  pair ,
  tuple2 ,
  tuple3 ,
  tuple4 ,
  
}
/* Js_dict Not a pure module */
