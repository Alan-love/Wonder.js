// Generated by BUCKLESCRIPT VERSION 3.1.4, PLEASE EDIT WITH CARE

import * as Caml_array from "../../../../../node_modules/bs-platform/lib/es6/caml_array.js";
import * as Contract$WonderLog from "../../../../../node_modules/wonder-log/lib/es6_global/src/Contract.js";
import * as StateDataMain$Wonderjs from "../../service/state/main/data/StateDataMain.js";
import * as IsDebugMainService$Wonderjs from "../../service/state/main/state/IsDebugMainService.js";
import * as MappedIndexService$Wonderjs from "../../service/primitive/MappedIndexService.js";
import * as AliveComponentService$Wonderjs from "../../service/primitive/component/AliveComponentService.js";
import * as IndexPointLightService$Wonderjs from "../../service/record/main/light/point/IndexPointLightService.js";
import * as CreatePointLightService$Wonderjs from "../../service/record/main/light/point/CreatePointLightService.js";
import * as DisposePointLightService$Wonderjs from "../../service/record/main/light/point/DisposePointLightService.js";
import * as OperatePointLightService$Wonderjs from "../../service/record/main/light/point/OperatePointLightService.js";
import * as GameObjectPointLightService$Wonderjs from "../../service/record/main/light/point/GameObjectPointLightService.js";

function createPointLight(state) {
  var match = CreatePointLightService$Wonderjs.create(state[/* pointLightRecord */22]);
  state[/* pointLightRecord */22] = match[0];
  return /* tuple */[
          state,
          match[1]
        ];
}

function unsafeGetPointLightGameObject(light, state) {
  Contract$WonderLog.requireCheck((function () {
          return AliveComponentService$Wonderjs.checkComponentShouldAlive(light, DisposePointLightService$Wonderjs.isAlive, state[/* pointLightRecord */22]);
        }), IsDebugMainService$Wonderjs.getIsDebug(StateDataMain$Wonderjs.stateData));
  return GameObjectPointLightService$Wonderjs.unsafeGetGameObject(MappedIndexService$Wonderjs.getMappedIndex(light, IndexPointLightService$Wonderjs.getMappedIndexMap(state[/* pointLightRecord */22])), state[/* pointLightRecord */22]);
}

function getPointLightColor(light, state) {
  Contract$WonderLog.requireCheck((function () {
          return AliveComponentService$Wonderjs.checkComponentShouldAlive(light, DisposePointLightService$Wonderjs.isAlive, state[/* pointLightRecord */22]);
        }), IsDebugMainService$Wonderjs.getIsDebug(StateDataMain$Wonderjs.stateData));
  return OperatePointLightService$Wonderjs.getColor(MappedIndexService$Wonderjs.getMappedIndex(light, IndexPointLightService$Wonderjs.getMappedIndexMap(state[/* pointLightRecord */22])), state[/* pointLightRecord */22]);
}

function setPointLightColor(light, color, state) {
  Contract$WonderLog.requireCheck((function () {
          return AliveComponentService$Wonderjs.checkComponentShouldAlive(light, DisposePointLightService$Wonderjs.isAlive, state[/* pointLightRecord */22]);
        }), IsDebugMainService$Wonderjs.getIsDebug(StateDataMain$Wonderjs.stateData));
  var newrecord = Caml_array.caml_array_dup(state);
  newrecord[/* pointLightRecord */22] = OperatePointLightService$Wonderjs.setColor(MappedIndexService$Wonderjs.getMappedIndex(light, IndexPointLightService$Wonderjs.getMappedIndexMap(state[/* pointLightRecord */22])), color, state[/* pointLightRecord */22]);
  return newrecord;
}

function getPointLightIntensity(light, state) {
  Contract$WonderLog.requireCheck((function () {
          return AliveComponentService$Wonderjs.checkComponentShouldAlive(light, DisposePointLightService$Wonderjs.isAlive, state[/* pointLightRecord */22]);
        }), IsDebugMainService$Wonderjs.getIsDebug(StateDataMain$Wonderjs.stateData));
  return OperatePointLightService$Wonderjs.getIntensity(MappedIndexService$Wonderjs.getMappedIndex(light, IndexPointLightService$Wonderjs.getMappedIndexMap(state[/* pointLightRecord */22])), state[/* pointLightRecord */22]);
}

function setPointLightIntensity(light, color, state) {
  Contract$WonderLog.requireCheck((function () {
          return AliveComponentService$Wonderjs.checkComponentShouldAlive(light, DisposePointLightService$Wonderjs.isAlive, state[/* pointLightRecord */22]);
        }), IsDebugMainService$Wonderjs.getIsDebug(StateDataMain$Wonderjs.stateData));
  var newrecord = Caml_array.caml_array_dup(state);
  newrecord[/* pointLightRecord */22] = OperatePointLightService$Wonderjs.setIntensity(MappedIndexService$Wonderjs.getMappedIndex(light, IndexPointLightService$Wonderjs.getMappedIndexMap(state[/* pointLightRecord */22])), color, state[/* pointLightRecord */22]);
  return newrecord;
}

function getPointLightConstant(light, state) {
  Contract$WonderLog.requireCheck((function () {
          return AliveComponentService$Wonderjs.checkComponentShouldAlive(light, DisposePointLightService$Wonderjs.isAlive, state[/* pointLightRecord */22]);
        }), IsDebugMainService$Wonderjs.getIsDebug(StateDataMain$Wonderjs.stateData));
  return OperatePointLightService$Wonderjs.getConstant(MappedIndexService$Wonderjs.getMappedIndex(light, IndexPointLightService$Wonderjs.getMappedIndexMap(state[/* pointLightRecord */22])), state[/* pointLightRecord */22]);
}

function setPointLightConstant(light, color, state) {
  Contract$WonderLog.requireCheck((function () {
          return AliveComponentService$Wonderjs.checkComponentShouldAlive(light, DisposePointLightService$Wonderjs.isAlive, state[/* pointLightRecord */22]);
        }), IsDebugMainService$Wonderjs.getIsDebug(StateDataMain$Wonderjs.stateData));
  var newrecord = Caml_array.caml_array_dup(state);
  newrecord[/* pointLightRecord */22] = OperatePointLightService$Wonderjs.setConstant(MappedIndexService$Wonderjs.getMappedIndex(light, IndexPointLightService$Wonderjs.getMappedIndexMap(state[/* pointLightRecord */22])), color, state[/* pointLightRecord */22]);
  return newrecord;
}

function getPointLightLinear(light, state) {
  Contract$WonderLog.requireCheck((function () {
          return AliveComponentService$Wonderjs.checkComponentShouldAlive(light, DisposePointLightService$Wonderjs.isAlive, state[/* pointLightRecord */22]);
        }), IsDebugMainService$Wonderjs.getIsDebug(StateDataMain$Wonderjs.stateData));
  return OperatePointLightService$Wonderjs.getLinear(MappedIndexService$Wonderjs.getMappedIndex(light, IndexPointLightService$Wonderjs.getMappedIndexMap(state[/* pointLightRecord */22])), state[/* pointLightRecord */22]);
}

function setPointLightLinear(light, color, state) {
  Contract$WonderLog.requireCheck((function () {
          return AliveComponentService$Wonderjs.checkComponentShouldAlive(light, DisposePointLightService$Wonderjs.isAlive, state[/* pointLightRecord */22]);
        }), IsDebugMainService$Wonderjs.getIsDebug(StateDataMain$Wonderjs.stateData));
  var newrecord = Caml_array.caml_array_dup(state);
  newrecord[/* pointLightRecord */22] = OperatePointLightService$Wonderjs.setLinear(MappedIndexService$Wonderjs.getMappedIndex(light, IndexPointLightService$Wonderjs.getMappedIndexMap(state[/* pointLightRecord */22])), color, state[/* pointLightRecord */22]);
  return newrecord;
}

function getPointLightQuadratic(light, state) {
  Contract$WonderLog.requireCheck((function () {
          return AliveComponentService$Wonderjs.checkComponentShouldAlive(light, DisposePointLightService$Wonderjs.isAlive, state[/* pointLightRecord */22]);
        }), IsDebugMainService$Wonderjs.getIsDebug(StateDataMain$Wonderjs.stateData));
  return OperatePointLightService$Wonderjs.getQuadratic(MappedIndexService$Wonderjs.getMappedIndex(light, IndexPointLightService$Wonderjs.getMappedIndexMap(state[/* pointLightRecord */22])), state[/* pointLightRecord */22]);
}

function setPointLightQuadratic(light, color, state) {
  Contract$WonderLog.requireCheck((function () {
          return AliveComponentService$Wonderjs.checkComponentShouldAlive(light, DisposePointLightService$Wonderjs.isAlive, state[/* pointLightRecord */22]);
        }), IsDebugMainService$Wonderjs.getIsDebug(StateDataMain$Wonderjs.stateData));
  var newrecord = Caml_array.caml_array_dup(state);
  newrecord[/* pointLightRecord */22] = OperatePointLightService$Wonderjs.setQuadratic(MappedIndexService$Wonderjs.getMappedIndex(light, IndexPointLightService$Wonderjs.getMappedIndexMap(state[/* pointLightRecord */22])), color, state[/* pointLightRecord */22]);
  return newrecord;
}

function getPointLightRange(light, state) {
  Contract$WonderLog.requireCheck((function () {
          return AliveComponentService$Wonderjs.checkComponentShouldAlive(light, DisposePointLightService$Wonderjs.isAlive, state[/* pointLightRecord */22]);
        }), IsDebugMainService$Wonderjs.getIsDebug(StateDataMain$Wonderjs.stateData));
  return OperatePointLightService$Wonderjs.getRange(MappedIndexService$Wonderjs.getMappedIndex(light, IndexPointLightService$Wonderjs.getMappedIndexMap(state[/* pointLightRecord */22])), state[/* pointLightRecord */22]);
}

function setPointLightRange(light, range, state) {
  Contract$WonderLog.requireCheck((function () {
          return AliveComponentService$Wonderjs.checkComponentShouldAlive(light, DisposePointLightService$Wonderjs.isAlive, state[/* pointLightRecord */22]);
        }), IsDebugMainService$Wonderjs.getIsDebug(StateDataMain$Wonderjs.stateData));
  var newrecord = Caml_array.caml_array_dup(state);
  newrecord[/* pointLightRecord */22] = OperatePointLightService$Wonderjs.setRange(MappedIndexService$Wonderjs.getMappedIndex(light, IndexPointLightService$Wonderjs.getMappedIndexMap(state[/* pointLightRecord */22])), range, state[/* pointLightRecord */22]);
  return newrecord;
}

function setPointLightRangeLevel(light, level, state) {
  Contract$WonderLog.requireCheck((function () {
          return AliveComponentService$Wonderjs.checkComponentShouldAlive(light, DisposePointLightService$Wonderjs.isAlive, state[/* pointLightRecord */22]);
        }), IsDebugMainService$Wonderjs.getIsDebug(StateDataMain$Wonderjs.stateData));
  var newrecord = Caml_array.caml_array_dup(state);
  newrecord[/* pointLightRecord */22] = OperatePointLightService$Wonderjs.setRangeLevel(MappedIndexService$Wonderjs.getMappedIndex(light, IndexPointLightService$Wonderjs.getMappedIndexMap(state[/* pointLightRecord */22])), level, state[/* pointLightRecord */22]);
  return newrecord;
}

export {
  createPointLight ,
  unsafeGetPointLightGameObject ,
  getPointLightColor ,
  setPointLightColor ,
  getPointLightIntensity ,
  setPointLightIntensity ,
  getPointLightConstant ,
  setPointLightConstant ,
  getPointLightLinear ,
  setPointLightLinear ,
  getPointLightQuadratic ,
  setPointLightQuadratic ,
  getPointLightRange ,
  setPointLightRange ,
  setPointLightRangeLevel ,
  
}
/* Contract-WonderLog Not a pure module */
