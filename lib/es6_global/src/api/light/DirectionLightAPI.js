// Generated by BUCKLESCRIPT VERSION 3.1.4, PLEASE EDIT WITH CARE

import * as Caml_array from "../../../../../node_modules/bs-platform/lib/es6/caml_array.js";
import * as Contract$WonderLog from "../../../../../node_modules/wonder-log/lib/es6_global/src/Contract.js";
import * as StateDataMain$Wonderjs from "../../service/state/main/data/StateDataMain.js";
import * as IsDebugMainService$Wonderjs from "../../service/state/main/state/IsDebugMainService.js";
import * as MappedIndexService$Wonderjs from "../../service/primitive/MappedIndexService.js";
import * as AliveComponentService$Wonderjs from "../../service/primitive/component/AliveComponentService.js";
import * as IndexDirectionLightService$Wonderjs from "../../service/record/main/light/direction/IndexDirectionLightService.js";
import * as CreateDirectionLightService$Wonderjs from "../../service/record/main/light/direction/CreateDirectionLightService.js";
import * as DisposeDirectionLightService$Wonderjs from "../../service/record/main/light/direction/DisposeDirectionLightService.js";
import * as OperateDirectionLightService$Wonderjs from "../../service/record/main/light/direction/OperateDirectionLightService.js";
import * as GameObjectDirectionLightService$Wonderjs from "../../service/record/main/light/direction/GameObjectDirectionLightService.js";

function createDirectionLight(state) {
  var match = CreateDirectionLightService$Wonderjs.create(state[/* directionLightRecord */21]);
  state[/* directionLightRecord */21] = match[0];
  return /* tuple */[
          state,
          match[1]
        ];
}

function unsafeGetDirectionLightGameObject(light, state) {
  Contract$WonderLog.requireCheck((function () {
          return AliveComponentService$Wonderjs.checkComponentShouldAlive(light, DisposeDirectionLightService$Wonderjs.isAlive, state[/* directionLightRecord */21]);
        }), IsDebugMainService$Wonderjs.getIsDebug(StateDataMain$Wonderjs.stateData));
  return GameObjectDirectionLightService$Wonderjs.unsafeGetGameObject(MappedIndexService$Wonderjs.getMappedIndex(light, IndexDirectionLightService$Wonderjs.getMappedIndexMap(state[/* directionLightRecord */21])), state[/* directionLightRecord */21]);
}

function getDirectionLightColor(light, state) {
  Contract$WonderLog.requireCheck((function () {
          return AliveComponentService$Wonderjs.checkComponentShouldAlive(light, DisposeDirectionLightService$Wonderjs.isAlive, state[/* directionLightRecord */21]);
        }), IsDebugMainService$Wonderjs.getIsDebug(StateDataMain$Wonderjs.stateData));
  return OperateDirectionLightService$Wonderjs.getColor(MappedIndexService$Wonderjs.getMappedIndex(light, IndexDirectionLightService$Wonderjs.getMappedIndexMap(state[/* directionLightRecord */21])), state[/* directionLightRecord */21]);
}

function setDirectionLightColor(light, color, state) {
  Contract$WonderLog.requireCheck((function () {
          return AliveComponentService$Wonderjs.checkComponentShouldAlive(light, DisposeDirectionLightService$Wonderjs.isAlive, state[/* directionLightRecord */21]);
        }), IsDebugMainService$Wonderjs.getIsDebug(StateDataMain$Wonderjs.stateData));
  var newrecord = Caml_array.caml_array_dup(state);
  newrecord[/* directionLightRecord */21] = OperateDirectionLightService$Wonderjs.setColor(MappedIndexService$Wonderjs.getMappedIndex(light, IndexDirectionLightService$Wonderjs.getMappedIndexMap(state[/* directionLightRecord */21])), color, state[/* directionLightRecord */21]);
  return newrecord;
}

function getDirectionLightIntensity(light, state) {
  Contract$WonderLog.requireCheck((function () {
          return AliveComponentService$Wonderjs.checkComponentShouldAlive(light, DisposeDirectionLightService$Wonderjs.isAlive, state[/* directionLightRecord */21]);
        }), IsDebugMainService$Wonderjs.getIsDebug(StateDataMain$Wonderjs.stateData));
  return OperateDirectionLightService$Wonderjs.getIntensity(MappedIndexService$Wonderjs.getMappedIndex(light, IndexDirectionLightService$Wonderjs.getMappedIndexMap(state[/* directionLightRecord */21])), state[/* directionLightRecord */21]);
}

function setDirectionLightIntensity(light, color, state) {
  Contract$WonderLog.requireCheck((function () {
          return AliveComponentService$Wonderjs.checkComponentShouldAlive(light, DisposeDirectionLightService$Wonderjs.isAlive, state[/* directionLightRecord */21]);
        }), IsDebugMainService$Wonderjs.getIsDebug(StateDataMain$Wonderjs.stateData));
  var newrecord = Caml_array.caml_array_dup(state);
  newrecord[/* directionLightRecord */21] = OperateDirectionLightService$Wonderjs.setIntensity(MappedIndexService$Wonderjs.getMappedIndex(light, IndexDirectionLightService$Wonderjs.getMappedIndexMap(state[/* directionLightRecord */21])), color, state[/* directionLightRecord */21]);
  return newrecord;
}

export {
  createDirectionLight ,
  unsafeGetDirectionLightGameObject ,
  getDirectionLightColor ,
  setDirectionLightColor ,
  getDirectionLightIntensity ,
  setDirectionLightIntensity ,
  
}
/* Contract-WonderLog Not a pure module */
