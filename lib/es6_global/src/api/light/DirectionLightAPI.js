// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as Contract$WonderLog                       from "../../../../../node_modules/wonder-log/lib/es6_global/src/Contract.js";
import * as MainStateData$Wonderjs                   from "../../service/state/main/data/MainStateData.js";
import * as IsDebugMainService$Wonderjs              from "../../service/state/main/state/IsDebugMainService.js";
import * as MappedIndexService$Wonderjs              from "../../service/primitiive/MappedIndexService.js";
import * as AliveComponentService$Wonderjs           from "../../service/primitiive/component/AliveComponentService.js";
import * as IndexDirectionLightService$Wonderjs      from "../../service/record/light/direction/IndexDirectionLightService.js";
import * as CreateDirectionLightService$Wonderjs     from "../../service/record/light/direction/CreateDirectionLightService.js";
import * as DisposeDirectionLightService$Wonderjs    from "../../service/record/light/direction/DisposeDirectionLightService.js";
import * as OperateDirectionLightService$Wonderjs    from "../../service/record/light/direction/OperateDirectionLightService.js";
import * as GameObjectDirectionLightService$Wonderjs from "../../service/record/light/direction/GameObjectDirectionLightService.js";

function createDirectionLight(state) {
  var match = CreateDirectionLightService$Wonderjs.create(state[/* directionLightRecord */18]);
  var newrecord = state.slice();
  return /* tuple */[
          (newrecord[/* directionLightRecord */18] = match[0], newrecord),
          match[1]
        ];
}

function unsafeGetDirectionLightGameObject(light, state) {
  Contract$WonderLog.requireCheck((function () {
          return AliveComponentService$Wonderjs.checkComponentShouldAlive(light, DisposeDirectionLightService$Wonderjs.isAlive, state[/* directionLightRecord */18]);
        }), IsDebugMainService$Wonderjs.getIsDebug(MainStateData$Wonderjs.stateData));
  return GameObjectDirectionLightService$Wonderjs.unsafeGetGameObject(MappedIndexService$Wonderjs.getMappedIndex(light, IndexDirectionLightService$Wonderjs.getMappedIndexMap(state[/* directionLightRecord */18])), state[/* directionLightRecord */18]);
}

function getDirectionLightColor(light, state) {
  Contract$WonderLog.requireCheck((function () {
          return AliveComponentService$Wonderjs.checkComponentShouldAlive(light, DisposeDirectionLightService$Wonderjs.isAlive, state[/* directionLightRecord */18]);
        }), IsDebugMainService$Wonderjs.getIsDebug(MainStateData$Wonderjs.stateData));
  return OperateDirectionLightService$Wonderjs.getColor(MappedIndexService$Wonderjs.getMappedIndex(light, IndexDirectionLightService$Wonderjs.getMappedIndexMap(state[/* directionLightRecord */18])), state[/* directionLightRecord */18]);
}

function setDirectionLightColor(light, color, state) {
  Contract$WonderLog.requireCheck((function () {
          return AliveComponentService$Wonderjs.checkComponentShouldAlive(light, DisposeDirectionLightService$Wonderjs.isAlive, state[/* directionLightRecord */18]);
        }), IsDebugMainService$Wonderjs.getIsDebug(MainStateData$Wonderjs.stateData));
  var newrecord = state.slice();
  newrecord[/* directionLightRecord */18] = OperateDirectionLightService$Wonderjs.setColor(MappedIndexService$Wonderjs.getMappedIndex(light, IndexDirectionLightService$Wonderjs.getMappedIndexMap(state[/* directionLightRecord */18])), color, state[/* directionLightRecord */18]);
  return newrecord;
}

function getDirectionLightIntensity(light, state) {
  Contract$WonderLog.requireCheck((function () {
          return AliveComponentService$Wonderjs.checkComponentShouldAlive(light, DisposeDirectionLightService$Wonderjs.isAlive, state[/* directionLightRecord */18]);
        }), IsDebugMainService$Wonderjs.getIsDebug(MainStateData$Wonderjs.stateData));
  return OperateDirectionLightService$Wonderjs.getIntensity(MappedIndexService$Wonderjs.getMappedIndex(light, IndexDirectionLightService$Wonderjs.getMappedIndexMap(state[/* directionLightRecord */18])), state[/* directionLightRecord */18]);
}

function setDirectionLightIntensity(light, color, state) {
  Contract$WonderLog.requireCheck((function () {
          return AliveComponentService$Wonderjs.checkComponentShouldAlive(light, DisposeDirectionLightService$Wonderjs.isAlive, state[/* directionLightRecord */18]);
        }), IsDebugMainService$Wonderjs.getIsDebug(MainStateData$Wonderjs.stateData));
  var newrecord = state.slice();
  newrecord[/* directionLightRecord */18] = OperateDirectionLightService$Wonderjs.setIntensity(MappedIndexService$Wonderjs.getMappedIndex(light, IndexDirectionLightService$Wonderjs.getMappedIndexMap(state[/* directionLightRecord */18])), color, state[/* directionLightRecord */18]);
  return newrecord;
}

export {
  createDirectionLight              ,
  unsafeGetDirectionLightGameObject ,
  getDirectionLightColor            ,
  setDirectionLightColor            ,
  getDirectionLightIntensity        ,
  setDirectionLightIntensity        ,
  
}
/* Contract-WonderLog Not a pure module */
