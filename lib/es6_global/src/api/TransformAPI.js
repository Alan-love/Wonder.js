// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as Js_null_undefined                    from "../../../../node_modules/bs-platform/lib/es6/js_null_undefined.js";
import * as Contract$WonderLog                   from "../../../../node_modules/wonder-log/lib/es6_global/src/Contract.js";
import * as MainStateData$Wonderjs               from "../service/state/main/data/MainStateData.js";
import * as IsDebugMainService$Wonderjs          from "../service/state/main/state/IsDebugMainService.js";
import * as AliveComponentService$Wonderjs       from "../service/primitiive/component/AliveComponentService.js";
import * as UpdateTransformService$Wonderjs      from "../service/record/transform/UpdateTransformService.js";
import * as HierachyTransformService$Wonderjs    from "../service/record/transform/HierachyTransformService.js";
import * as CreateTransformMainService$Wonderjs  from "../service/state/main/transform/CreateTransformMainService.js";
import * as GameObjectTransformService$Wonderjs  from "../service/record/transform/GameObjectTransformService.js";
import * as DisposeTransformMainService$Wonderjs from "../service/state/main/transform/DisposeTransformMainService.js";
import * as ModelMatrixTransformService$Wonderjs from "../service/record/transform/ModelMatrixTransformService.js";

function unsafeGetTransformGameObject(transform, state) {
  Contract$WonderLog.requireCheck((function () {
          return AliveComponentService$Wonderjs.checkComponentShouldAlive(transform, DisposeTransformMainService$Wonderjs.isAlive, state[/* transformRecord */11]);
        }), IsDebugMainService$Wonderjs.getIsDebug(MainStateData$Wonderjs.stateData));
  return GameObjectTransformService$Wonderjs.unsafeGetGameObject(transform, state[/* transformRecord */11]);
}

function unsafeGetTransformParent(transform, state) {
  Contract$WonderLog.requireCheck((function () {
          return AliveComponentService$Wonderjs.checkComponentShouldAlive(transform, DisposeTransformMainService$Wonderjs.isAlive, state[/* transformRecord */11]);
        }), IsDebugMainService$Wonderjs.getIsDebug(MainStateData$Wonderjs.stateData));
  return HierachyTransformService$Wonderjs.unsafeGetParent(transform, state[/* transformRecord */11]);
}

function _checkParentAndChildTransformShouldAlive(parent, child, state) {
  return Contract$WonderLog.requireCheck((function () {
                Js_null_undefined.iter(parent, (function (parent) {
                        return AliveComponentService$Wonderjs.checkComponentShouldAlive(parent, DisposeTransformMainService$Wonderjs.isAlive, state[/* transformRecord */11]);
                      }));
                return AliveComponentService$Wonderjs.checkComponentShouldAlive(child, DisposeTransformMainService$Wonderjs.isAlive, state[/* transformRecord */11]);
              }), IsDebugMainService$Wonderjs.getIsDebug(MainStateData$Wonderjs.stateData));
}

function setTransformParent(parent, child, state) {
  _checkParentAndChildTransformShouldAlive(parent, child, state);
  var newrecord = state.slice();
  newrecord[/* transformRecord */11] = HierachyTransformService$Wonderjs.setParent((parent == null) ? /* None */0 : [parent], child, state[/* transformRecord */11]);
  return newrecord;
}

function setTransformParentKeepOrder(parent, child, state) {
  _checkParentAndChildTransformShouldAlive(parent, child, state);
  var newrecord = state.slice();
  newrecord[/* transformRecord */11] = HierachyTransformService$Wonderjs.setParentKeepOrder((parent == null) ? /* None */0 : [parent], child, state[/* transformRecord */11]);
  return newrecord;
}

function unsafeGetTransformChildren(transform, state) {
  Contract$WonderLog.requireCheck((function () {
          return AliveComponentService$Wonderjs.checkComponentShouldAlive(transform, DisposeTransformMainService$Wonderjs.isAlive, state[/* transformRecord */11]);
        }), IsDebugMainService$Wonderjs.getIsDebug(MainStateData$Wonderjs.stateData));
  return HierachyTransformService$Wonderjs.unsafeGetChildren(transform, state[/* transformRecord */11]);
}

function getTransformLocalPosition(transform, state) {
  Contract$WonderLog.requireCheck((function () {
          return AliveComponentService$Wonderjs.checkComponentShouldAlive(transform, DisposeTransformMainService$Wonderjs.isAlive, state[/* transformRecord */11]);
        }), IsDebugMainService$Wonderjs.getIsDebug(MainStateData$Wonderjs.stateData));
  return ModelMatrixTransformService$Wonderjs.getLocalPositionTuple(transform, state[/* transformRecord */11][/* localPositionMap */5]);
}

function setTransformLocalPosition(transform, localPosition, state) {
  Contract$WonderLog.requireCheck((function () {
          return AliveComponentService$Wonderjs.checkComponentShouldAlive(transform, DisposeTransformMainService$Wonderjs.isAlive, state[/* transformRecord */11]);
        }), IsDebugMainService$Wonderjs.getIsDebug(MainStateData$Wonderjs.stateData));
  var newrecord = state.slice();
  newrecord[/* transformRecord */11] = ModelMatrixTransformService$Wonderjs.setLocalPositionByTuple(transform, localPosition, state[/* transformRecord */11]);
  return newrecord;
}

function getTransformPosition(transform, state) {
  Contract$WonderLog.requireCheck((function () {
          return AliveComponentService$Wonderjs.checkComponentShouldAlive(transform, DisposeTransformMainService$Wonderjs.isAlive, state[/* transformRecord */11]);
        }), IsDebugMainService$Wonderjs.getIsDebug(MainStateData$Wonderjs.stateData));
  return UpdateTransformService$Wonderjs.updateAndGetPositionTuple(transform, state[/* globalTempRecord */31], state[/* transformRecord */11]);
}

function setTransformPosition(transform, position, state) {
  Contract$WonderLog.requireCheck((function () {
          return AliveComponentService$Wonderjs.checkComponentShouldAlive(transform, DisposeTransformMainService$Wonderjs.isAlive, state[/* transformRecord */11]);
        }), IsDebugMainService$Wonderjs.getIsDebug(MainStateData$Wonderjs.stateData));
  var newrecord = state.slice();
  newrecord[/* transformRecord */11] = UpdateTransformService$Wonderjs.updateAndSetPositionByTuple(transform, position, state[/* globalTempRecord */31], state[/* transformRecord */11]);
  return newrecord;
}

var createTransform = CreateTransformMainService$Wonderjs.create;

export {
  createTransform                          ,
  unsafeGetTransformGameObject             ,
  unsafeGetTransformParent                 ,
  _checkParentAndChildTransformShouldAlive ,
  setTransformParent                       ,
  setTransformParentKeepOrder              ,
  unsafeGetTransformChildren               ,
  getTransformLocalPosition                ,
  setTransformLocalPosition                ,
  getTransformPosition                     ,
  setTransformPosition                     ,
  
}
/* Contract-WonderLog Not a pure module */
