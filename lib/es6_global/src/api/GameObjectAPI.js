// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as Log$WonderLog                                  from "../../../../node_modules/wonder-log/lib/es6_global/src/Log.js";
import * as Contract$WonderLog                             from "../../../../node_modules/wonder-log/lib/es6_global/src/Contract.js";
import * as MainStateData$Wonderjs                         from "../service/state/main/data/MainStateData.js";
import * as IsDebugMainService$Wonderjs                    from "../service/state/main/state/IsDebugMainService.js";
import * as ArrayService$WonderCommonlib                   from "../../../../node_modules/wonder-commonlib/lib/es6_global/src/ArrayService.js";
import * as InitGameObjectMainService$Wonderjs             from "../service/state/main/gameObject/InitGameObjectMainService.js";
import * as AliveGameObjectMainService$Wonderjs            from "../service/state/main/gameObject/AliveGameObjectMainService.js";
import * as CloneGameObjectMainService$Wonderjs            from "../service/state/main/gameObject/CloneGameObjectMainService.js";
import * as CreateGameObjectMainService$Wonderjs           from "../service/state/main/gameObject/CreateGameObjectMainService.js";
import * as DisposeGameObjectMainService$Wonderjs          from "../service/state/main/gameObject/DisposeGameObjectMainService.js";
import * as GetComponentGameObjectService$Wonderjs         from "../service/record/gameObject/GetComponentGameObjectService.js";
import * as HasComponentGameObjectService$Wonderjs         from "../service/record/gameObject/HasComponentGameObjectService.js";
import * as AddGameObjectComponentMainService$Wonderjs     from "../service/state/main/gameObject/AddGameObjectComponentMainService.js";
import * as DisposeComponentGameObjectMainService$Wonderjs from "../service/state/main/gameObject/DisposeComponentGameObjectMainService.js";

var createGameObject = CreateGameObjectMainService$Wonderjs.create;

function _checkGameObjectShouldAlive(gameObject, state) {
  return Contract$WonderLog.test(Log$WonderLog.buildAssertMessage("gameObject alive", "not"), (function () {
                return Contract$WonderLog.assertTrue(AliveGameObjectMainService$Wonderjs.isAlive(gameObject, state));
              }));
}

function addGameObjectBasicCameraViewComponent(gameObject, component, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), IsDebugMainService$Wonderjs.getIsDebug(MainStateData$Wonderjs.stateData));
  return AddGameObjectComponentMainService$Wonderjs.addBasicCameraViewComponent(gameObject, component, state);
}

function disposeGameObjectBasicCameraViewComponent(gameObject, component, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), IsDebugMainService$Wonderjs.getIsDebug(MainStateData$Wonderjs.stateData));
  return DisposeComponentGameObjectMainService$Wonderjs.disposeBasicCameraViewComponent(gameObject, component, state);
}

function unsafeGetGameObjectBasicCameraViewComponent(gameObject, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), IsDebugMainService$Wonderjs.getIsDebug(MainStateData$Wonderjs.stateData));
  return GetComponentGameObjectService$Wonderjs.unsafeGetBasicCameraViewComponent(gameObject, state[/* gameObjectRecord */10]);
}

function hasGameObjectBasicCameraViewComponent(gameObject, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), IsDebugMainService$Wonderjs.getIsDebug(MainStateData$Wonderjs.stateData));
  return HasComponentGameObjectService$Wonderjs.hasBasicCameraViewComponent(gameObject, state[/* gameObjectRecord */10]);
}

function addGameObjectPerspectiveCameraProjectionComponent(gameObject, component, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), IsDebugMainService$Wonderjs.getIsDebug(MainStateData$Wonderjs.stateData));
  return AddGameObjectComponentMainService$Wonderjs.addPerspectiveCameraProjectionComponent(gameObject, component, state);
}

function disposeGameObjectPerspectiveCameraProjectionComponent(gameObject, component, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), IsDebugMainService$Wonderjs.getIsDebug(MainStateData$Wonderjs.stateData));
  return DisposeComponentGameObjectMainService$Wonderjs.disposePerspectiveCameraProjectionComponent(gameObject, component, state);
}

function unsafeGetGameObjectPerspectiveCameraProjectionComponent(gameObject, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), IsDebugMainService$Wonderjs.getIsDebug(MainStateData$Wonderjs.stateData));
  return GetComponentGameObjectService$Wonderjs.unsafeGetPerspectiveCameraProjectionComponent(gameObject, state[/* gameObjectRecord */10]);
}

function hasGameObjectPerspectiveCameraProjectionComponent(gameObject, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), IsDebugMainService$Wonderjs.getIsDebug(MainStateData$Wonderjs.stateData));
  return HasComponentGameObjectService$Wonderjs.hasPerspectiveCameraProjectionComponent(gameObject, state[/* gameObjectRecord */10]);
}

function addGameObjectTransformComponent(gameObject, component, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), IsDebugMainService$Wonderjs.getIsDebug(MainStateData$Wonderjs.stateData));
  return AddGameObjectComponentMainService$Wonderjs.addTransformComponent(gameObject, component, state);
}

function disposeGameObjectTransformComponent(gameObject, component, isKeepOrder, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), IsDebugMainService$Wonderjs.getIsDebug(MainStateData$Wonderjs.stateData));
  return DisposeComponentGameObjectMainService$Wonderjs.disposeTransformComponent(gameObject, component, isKeepOrder, state);
}

function unsafeGetGameObjectTransformComponent(gameObject, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), IsDebugMainService$Wonderjs.getIsDebug(MainStateData$Wonderjs.stateData));
  return GetComponentGameObjectService$Wonderjs.unsafeGetTransformComponent(gameObject, state[/* gameObjectRecord */10]);
}

function hasGameObjectTransformComponent(gameObject, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), IsDebugMainService$Wonderjs.getIsDebug(MainStateData$Wonderjs.stateData));
  return HasComponentGameObjectService$Wonderjs.hasTransformComponent(gameObject, state[/* gameObjectRecord */10]);
}

function addGameObjectBoxGeometryComponent(gameObject, component, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), IsDebugMainService$Wonderjs.getIsDebug(MainStateData$Wonderjs.stateData));
  return AddGameObjectComponentMainService$Wonderjs.addBoxGeometryComponent(gameObject, component, state);
}

function disposeGameObjectBoxGeometryComponent(gameObject, component, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), IsDebugMainService$Wonderjs.getIsDebug(MainStateData$Wonderjs.stateData));
  return DisposeComponentGameObjectMainService$Wonderjs.disposeBoxGeometryComponent(gameObject, component, state);
}

function unsafeGetGameObjectBoxGeometryComponent(gameObject, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), IsDebugMainService$Wonderjs.getIsDebug(MainStateData$Wonderjs.stateData));
  return GetComponentGameObjectService$Wonderjs.unsafeGetBoxGeometryComponent(gameObject, state[/* gameObjectRecord */10]);
}

function hasGameObjectBoxGeometryComponent(gameObject, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), IsDebugMainService$Wonderjs.getIsDebug(MainStateData$Wonderjs.stateData));
  return HasComponentGameObjectService$Wonderjs.hasBoxGeometryComponent(gameObject, state[/* gameObjectRecord */10]);
}

function addGameObjectBasicMaterialComponent(gameObject, component, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), IsDebugMainService$Wonderjs.getIsDebug(MainStateData$Wonderjs.stateData));
  return AddGameObjectComponentMainService$Wonderjs.addBasicMaterialComponent(gameObject, component, state);
}

function disposeGameObjectBasicMaterialComponent(gameObject, component, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), IsDebugMainService$Wonderjs.getIsDebug(MainStateData$Wonderjs.stateData));
  return DisposeComponentGameObjectMainService$Wonderjs.disposeBasicMaterialComponent(gameObject, component, state);
}

function unsafeGetGameObjectBasicMaterialComponent(gameObject, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), IsDebugMainService$Wonderjs.getIsDebug(MainStateData$Wonderjs.stateData));
  return GetComponentGameObjectService$Wonderjs.unsafeGetBasicMaterialComponent(gameObject, state[/* gameObjectRecord */10]);
}

function hasGameObjectBasicMaterialComponent(gameObject, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), IsDebugMainService$Wonderjs.getIsDebug(MainStateData$Wonderjs.stateData));
  return HasComponentGameObjectService$Wonderjs.hasBasicMaterialComponent(gameObject, state[/* gameObjectRecord */10]);
}

function addGameObjectLightMaterialComponent(gameObject, component, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), IsDebugMainService$Wonderjs.getIsDebug(MainStateData$Wonderjs.stateData));
  return AddGameObjectComponentMainService$Wonderjs.addLightMaterialComponent(gameObject, component, state);
}

function disposeGameObjectLightMaterialComponent(gameObject, component, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), IsDebugMainService$Wonderjs.getIsDebug(MainStateData$Wonderjs.stateData));
  return DisposeComponentGameObjectMainService$Wonderjs.disposeLightMaterialComponent(gameObject, component, state);
}

function unsafeGetGameObjectLightMaterialComponent(gameObject, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), IsDebugMainService$Wonderjs.getIsDebug(MainStateData$Wonderjs.stateData));
  return GetComponentGameObjectService$Wonderjs.unsafeGetLightMaterialComponent(gameObject, state[/* gameObjectRecord */10]);
}

function hasGameObjectLightMaterialComponent(gameObject, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), IsDebugMainService$Wonderjs.getIsDebug(MainStateData$Wonderjs.stateData));
  return HasComponentGameObjectService$Wonderjs.hasLightMaterialComponent(gameObject, state[/* gameObjectRecord */10]);
}

function addGameObjectMeshRendererComponent(gameObject, component, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), IsDebugMainService$Wonderjs.getIsDebug(MainStateData$Wonderjs.stateData));
  return AddGameObjectComponentMainService$Wonderjs.addMeshRendererComponent(gameObject, component, state);
}

function disposeGameObjectMeshRendererComponent(gameObject, component, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), IsDebugMainService$Wonderjs.getIsDebug(MainStateData$Wonderjs.stateData));
  return DisposeComponentGameObjectMainService$Wonderjs.disposeMeshRendererComponent(gameObject, component, state);
}

function unsafeGetGameObjectMeshRendererComponent(gameObject, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), IsDebugMainService$Wonderjs.getIsDebug(MainStateData$Wonderjs.stateData));
  return GetComponentGameObjectService$Wonderjs.unsafeGetMeshRendererComponent(gameObject, state[/* gameObjectRecord */10]);
}

function hasGameObjectMeshRendererComponent(gameObject, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), IsDebugMainService$Wonderjs.getIsDebug(MainStateData$Wonderjs.stateData));
  return HasComponentGameObjectService$Wonderjs.hasMeshRendererComponent(gameObject, state[/* gameObjectRecord */10]);
}

function addGameObjectAmbientLightComponent(gameObject, component, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), IsDebugMainService$Wonderjs.getIsDebug(MainStateData$Wonderjs.stateData));
  return AddGameObjectComponentMainService$Wonderjs.addAmbientLightComponent(gameObject, component, state);
}

function disposeGameObjectAmbientLightComponent(gameObject, component, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), IsDebugMainService$Wonderjs.getIsDebug(MainStateData$Wonderjs.stateData));
  return DisposeComponentGameObjectMainService$Wonderjs.disposeAmbientLightComponent(gameObject, component, state);
}

function unsafeGetGameObjectAmbientLightComponent(gameObject, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), IsDebugMainService$Wonderjs.getIsDebug(MainStateData$Wonderjs.stateData));
  return GetComponentGameObjectService$Wonderjs.unsafeGetAmbientLightComponent(gameObject, state[/* gameObjectRecord */10]);
}

function hasGameObjectAmbientLightComponent(gameObject, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), IsDebugMainService$Wonderjs.getIsDebug(MainStateData$Wonderjs.stateData));
  return HasComponentGameObjectService$Wonderjs.hasAmbientLightComponent(gameObject, state[/* gameObjectRecord */10]);
}

function addGameObjectDirectionLightComponent(gameObject, component, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), IsDebugMainService$Wonderjs.getIsDebug(MainStateData$Wonderjs.stateData));
  return AddGameObjectComponentMainService$Wonderjs.addDirectionLightComponent(gameObject, component, state);
}

function disposeGameObjectDirectionLightComponent(gameObject, component, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), IsDebugMainService$Wonderjs.getIsDebug(MainStateData$Wonderjs.stateData));
  return DisposeComponentGameObjectMainService$Wonderjs.disposeDirectionLightComponent(gameObject, component, state);
}

function unsafeGetGameObjectDirectionLightComponent(gameObject, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), IsDebugMainService$Wonderjs.getIsDebug(MainStateData$Wonderjs.stateData));
  return GetComponentGameObjectService$Wonderjs.unsafeGetDirectionLightComponent(gameObject, state[/* gameObjectRecord */10]);
}

function hasGameObjectDirectionLightComponent(gameObject, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), IsDebugMainService$Wonderjs.getIsDebug(MainStateData$Wonderjs.stateData));
  return HasComponentGameObjectService$Wonderjs.hasDirectionLightComponent(gameObject, state[/* gameObjectRecord */10]);
}

function addGameObjectPointLightComponent(gameObject, component, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), IsDebugMainService$Wonderjs.getIsDebug(MainStateData$Wonderjs.stateData));
  return AddGameObjectComponentMainService$Wonderjs.addPointLightComponent(gameObject, component, state);
}

function disposeGameObjectPointLightComponent(gameObject, component, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), IsDebugMainService$Wonderjs.getIsDebug(MainStateData$Wonderjs.stateData));
  return DisposeComponentGameObjectMainService$Wonderjs.disposePointLightComponent(gameObject, component, state);
}

function unsafeGetGameObjectPointLightComponent(gameObject, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), IsDebugMainService$Wonderjs.getIsDebug(MainStateData$Wonderjs.stateData));
  return GetComponentGameObjectService$Wonderjs.unsafeGetPointLightComponent(gameObject, state[/* gameObjectRecord */10]);
}

function hasGameObjectPointLightComponent(gameObject, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), IsDebugMainService$Wonderjs.getIsDebug(MainStateData$Wonderjs.stateData));
  return HasComponentGameObjectService$Wonderjs.hasPointLightComponent(gameObject, state[/* gameObjectRecord */10]);
}

function addGameObjectSourceInstanceComponent(gameObject, component, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), IsDebugMainService$Wonderjs.getIsDebug(MainStateData$Wonderjs.stateData));
  return AddGameObjectComponentMainService$Wonderjs.addSourceInstanceComponent(gameObject, component, state);
}

function unsafeGetGameObjectSourceInstanceComponent(gameObject, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), IsDebugMainService$Wonderjs.getIsDebug(MainStateData$Wonderjs.stateData));
  return GetComponentGameObjectService$Wonderjs.unsafeGetSourceInstanceComponent(gameObject, state[/* gameObjectRecord */10]);
}

function hasGameObjectSourceInstanceComponent(gameObject, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), IsDebugMainService$Wonderjs.getIsDebug(MainStateData$Wonderjs.stateData));
  return HasComponentGameObjectService$Wonderjs.hasSourceInstanceComponent(gameObject, state[/* gameObjectRecord */10]);
}

function disposeGameObjectSourceInstanceComponent(gameObject, component, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), IsDebugMainService$Wonderjs.getIsDebug(MainStateData$Wonderjs.stateData));
  return DisposeComponentGameObjectMainService$Wonderjs.disposeSourceInstanceComponent(gameObject, component, DisposeGameObjectMainService$Wonderjs.batchDispose, state);
}

function addGameObjectObjectInstanceComponent(gameObject, component, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), IsDebugMainService$Wonderjs.getIsDebug(MainStateData$Wonderjs.stateData));
  return AddGameObjectComponentMainService$Wonderjs.addObjectInstanceComponent(gameObject, component, state);
}

function unsafeGetGameObjectObjectInstanceComponent(gameObject, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), IsDebugMainService$Wonderjs.getIsDebug(MainStateData$Wonderjs.stateData));
  return GetComponentGameObjectService$Wonderjs.unsafeGetObjectInstanceComponent(gameObject, state[/* gameObjectRecord */10]);
}

function disposeGameObjectObjectInstanceComponent(gameObject, component, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), IsDebugMainService$Wonderjs.getIsDebug(MainStateData$Wonderjs.stateData));
  return DisposeComponentGameObjectMainService$Wonderjs.disposeObjectInstanceComponent(gameObject, component, state);
}

var isGameObjectAlive = AliveGameObjectMainService$Wonderjs.isAlive;

function disposeGameObject(gameObject, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), IsDebugMainService$Wonderjs.getIsDebug(MainStateData$Wonderjs.stateData));
  return DisposeGameObjectMainService$Wonderjs.dispose(gameObject, state);
}

function disposeGameObjectKeepOrder(gameObject, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), IsDebugMainService$Wonderjs.getIsDebug(MainStateData$Wonderjs.stateData));
  return DisposeGameObjectMainService$Wonderjs.disposeKeepOrder(gameObject, state);
}

function initGameObject(gameObject, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), IsDebugMainService$Wonderjs.getIsDebug(MainStateData$Wonderjs.stateData));
  return InitGameObjectMainService$Wonderjs.initGameObject(gameObject, state);
}

function batchDisposeGameObject(gameObjectArray, state) {
  Contract$WonderLog.requireCheck((function () {
          return ArrayService$WonderCommonlib.forEach((function (gameObject) {
                        return _checkGameObjectShouldAlive(gameObject, state);
                      }), gameObjectArray);
        }), IsDebugMainService$Wonderjs.getIsDebug(MainStateData$Wonderjs.stateData));
  return DisposeGameObjectMainService$Wonderjs.batchDispose(gameObjectArray, state);
}

function cloneGameObject(gameObject, count, isShareMaterial, state) {
  return CloneGameObjectMainService$Wonderjs.clone(gameObject, count, +isShareMaterial, state);
}

export {
  createGameObject                                        ,
  _checkGameObjectShouldAlive                             ,
  addGameObjectBasicCameraViewComponent                   ,
  disposeGameObjectBasicCameraViewComponent               ,
  unsafeGetGameObjectBasicCameraViewComponent             ,
  hasGameObjectBasicCameraViewComponent                   ,
  addGameObjectPerspectiveCameraProjectionComponent       ,
  disposeGameObjectPerspectiveCameraProjectionComponent   ,
  unsafeGetGameObjectPerspectiveCameraProjectionComponent ,
  hasGameObjectPerspectiveCameraProjectionComponent       ,
  addGameObjectTransformComponent                         ,
  disposeGameObjectTransformComponent                     ,
  unsafeGetGameObjectTransformComponent                   ,
  hasGameObjectTransformComponent                         ,
  addGameObjectBoxGeometryComponent                       ,
  disposeGameObjectBoxGeometryComponent                   ,
  unsafeGetGameObjectBoxGeometryComponent                 ,
  hasGameObjectBoxGeometryComponent                       ,
  addGameObjectBasicMaterialComponent                     ,
  disposeGameObjectBasicMaterialComponent                 ,
  unsafeGetGameObjectBasicMaterialComponent               ,
  hasGameObjectBasicMaterialComponent                     ,
  addGameObjectLightMaterialComponent                     ,
  disposeGameObjectLightMaterialComponent                 ,
  unsafeGetGameObjectLightMaterialComponent               ,
  hasGameObjectLightMaterialComponent                     ,
  addGameObjectMeshRendererComponent                      ,
  disposeGameObjectMeshRendererComponent                  ,
  unsafeGetGameObjectMeshRendererComponent                ,
  hasGameObjectMeshRendererComponent                      ,
  addGameObjectAmbientLightComponent                      ,
  disposeGameObjectAmbientLightComponent                  ,
  unsafeGetGameObjectAmbientLightComponent                ,
  hasGameObjectAmbientLightComponent                      ,
  addGameObjectDirectionLightComponent                    ,
  disposeGameObjectDirectionLightComponent                ,
  unsafeGetGameObjectDirectionLightComponent              ,
  hasGameObjectDirectionLightComponent                    ,
  addGameObjectPointLightComponent                        ,
  disposeGameObjectPointLightComponent                    ,
  unsafeGetGameObjectPointLightComponent                  ,
  hasGameObjectPointLightComponent                        ,
  addGameObjectSourceInstanceComponent                    ,
  unsafeGetGameObjectSourceInstanceComponent              ,
  hasGameObjectSourceInstanceComponent                    ,
  disposeGameObjectSourceInstanceComponent                ,
  addGameObjectObjectInstanceComponent                    ,
  unsafeGetGameObjectObjectInstanceComponent              ,
  disposeGameObjectObjectInstanceComponent                ,
  isGameObjectAlive                                       ,
  disposeGameObject                                       ,
  disposeGameObjectKeepOrder                              ,
  initGameObject                                          ,
  batchDisposeGameObject                                  ,
  cloneGameObject                                         ,
  
}
/* Log-WonderLog Not a pure module */
