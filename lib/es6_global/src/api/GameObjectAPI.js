// Generated by BUCKLESCRIPT VERSION 3.1.4, PLEASE EDIT WITH CARE

import * as Log$WonderLog from "../../../../node_modules/wonder-log/lib/es6_global/src/Log.js";
import * as Contract$WonderLog from "../../../../node_modules/wonder-log/lib/es6_global/src/Contract.js";
import * as StateDataMain$Wonderjs from "../service/state/main/data/StateDataMain.js";
import * as IsDebugMainService$Wonderjs from "../service/state/main/state/IsDebugMainService.js";
import * as ArrayService$WonderCommonlib from "../../../../node_modules/wonder-commonlib/lib/es6_global/src/ArrayService.js";
import * as InitGameObjectMainService$Wonderjs from "../service/state/main/gameObject/InitGameObjectMainService.js";
import * as NameGameObjectMainService$Wonderjs from "../service/state/main/gameObject/NameGameObjectMainService.js";
import * as AliveGameObjectMainService$Wonderjs from "../service/state/main/gameObject/AliveGameObjectMainService.js";
import * as CloneGameObjectMainService$Wonderjs from "../service/state/main/gameObject/CloneGameObjectMainService.js";
import * as CreateGameObjectMainService$Wonderjs from "../service/state/main/gameObject/CreateGameObjectMainService.js";
import * as DisposeGameObjectMainService$Wonderjs from "../service/state/main/gameObject/DisposeGameObjectMainService.js";
import * as GetComponentGameObjectService$Wonderjs from "../service/record/main/gameObject/GetComponentGameObjectService.js";
import * as HasComponentGameObjectService$Wonderjs from "../service/record/main/gameObject/HasComponentGameObjectService.js";
import * as AddComponentGameObjectMainService$Wonderjs from "../service/state/main/gameObject/AddComponentGameObjectMainService.js";
import * as DisposeComponentGameObjectMainService$Wonderjs from "../service/state/main/gameObject/DisposeComponentGameObjectMainService.js";

var createGameObject = CreateGameObjectMainService$Wonderjs.create;

function _checkGameObjectShouldAlive(gameObject, state) {
  return Contract$WonderLog.test(Log$WonderLog.buildAssertMessage("gameObject alive", "not"), (function () {
                return Contract$WonderLog.assertTrue(AliveGameObjectMainService$Wonderjs.isAlive(gameObject, state));
              }));
}

function addGameObjectBasicCameraViewComponent(gameObject, component, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), IsDebugMainService$Wonderjs.getIsDebug(StateDataMain$Wonderjs.stateData));
  return AddComponentGameObjectMainService$Wonderjs.addBasicCameraViewComponent(gameObject, component, state);
}

function disposeGameObjectBasicCameraViewComponent(gameObject, component, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), IsDebugMainService$Wonderjs.getIsDebug(StateDataMain$Wonderjs.stateData));
  return DisposeComponentGameObjectMainService$Wonderjs.deferDisposeBasicCameraViewComponent(gameObject, component, state);
}

function unsafeGetGameObjectBasicCameraViewComponent(gameObject, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), IsDebugMainService$Wonderjs.getIsDebug(StateDataMain$Wonderjs.stateData));
  return GetComponentGameObjectService$Wonderjs.unsafeGetBasicCameraViewComponent(gameObject, state[/* gameObjectRecord */10]);
}

function hasGameObjectBasicCameraViewComponent(gameObject, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), IsDebugMainService$Wonderjs.getIsDebug(StateDataMain$Wonderjs.stateData));
  return HasComponentGameObjectService$Wonderjs.hasBasicCameraViewComponent(gameObject, state[/* gameObjectRecord */10]);
}

function addGameObjectPerspectiveCameraProjectionComponent(gameObject, component, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), IsDebugMainService$Wonderjs.getIsDebug(StateDataMain$Wonderjs.stateData));
  return AddComponentGameObjectMainService$Wonderjs.addPerspectiveCameraProjectionComponent(gameObject, component, state);
}

function disposeGameObjectPerspectiveCameraProjectionComponent(gameObject, component, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), IsDebugMainService$Wonderjs.getIsDebug(StateDataMain$Wonderjs.stateData));
  return DisposeComponentGameObjectMainService$Wonderjs.deferDisposePerspectiveCameraProjectionComponent(gameObject, component, state);
}

function unsafeGetGameObjectPerspectiveCameraProjectionComponent(gameObject, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), IsDebugMainService$Wonderjs.getIsDebug(StateDataMain$Wonderjs.stateData));
  return GetComponentGameObjectService$Wonderjs.unsafeGetPerspectiveCameraProjectionComponent(gameObject, state[/* gameObjectRecord */10]);
}

function hasGameObjectPerspectiveCameraProjectionComponent(gameObject, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), IsDebugMainService$Wonderjs.getIsDebug(StateDataMain$Wonderjs.stateData));
  return HasComponentGameObjectService$Wonderjs.hasPerspectiveCameraProjectionComponent(gameObject, state[/* gameObjectRecord */10]);
}

function addGameObjectArcballCameraControllerComponent(gameObject, component, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), IsDebugMainService$Wonderjs.getIsDebug(StateDataMain$Wonderjs.stateData));
  return AddComponentGameObjectMainService$Wonderjs.addArcballCameraControllerComponent(gameObject, component, state);
}

function disposeGameObjectArcballCameraControllerComponent(gameObject, component, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), IsDebugMainService$Wonderjs.getIsDebug(StateDataMain$Wonderjs.stateData));
  return DisposeComponentGameObjectMainService$Wonderjs.deferDisposeArcballCameraControllerComponent(gameObject, component, state);
}

function unsafeGetGameObjectArcballCameraControllerComponent(gameObject, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), IsDebugMainService$Wonderjs.getIsDebug(StateDataMain$Wonderjs.stateData));
  return GetComponentGameObjectService$Wonderjs.unsafeGetArcballCameraControllerComponent(gameObject, state[/* gameObjectRecord */10]);
}

function hasGameObjectArcballCameraControllerComponent(gameObject, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), IsDebugMainService$Wonderjs.getIsDebug(StateDataMain$Wonderjs.stateData));
  return HasComponentGameObjectService$Wonderjs.hasArcballCameraControllerComponent(gameObject, state[/* gameObjectRecord */10]);
}

function addGameObjectTransformComponent(gameObject, component, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), IsDebugMainService$Wonderjs.getIsDebug(StateDataMain$Wonderjs.stateData));
  return AddComponentGameObjectMainService$Wonderjs.addTransformComponent(gameObject, component, state);
}

function disposeGameObjectTransformComponent(gameObject, component, isKeepOrder, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), IsDebugMainService$Wonderjs.getIsDebug(StateDataMain$Wonderjs.stateData));
  if (isKeepOrder) {
    return DisposeComponentGameObjectMainService$Wonderjs.deferDisposeTransformComponentForKeepOrder(gameObject, component, state);
  } else {
    return DisposeComponentGameObjectMainService$Wonderjs.deferDisposeTransformComponent(gameObject, component, state);
  }
}

function unsafeGetGameObjectTransformComponent(gameObject, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), IsDebugMainService$Wonderjs.getIsDebug(StateDataMain$Wonderjs.stateData));
  return GetComponentGameObjectService$Wonderjs.unsafeGetTransformComponent(gameObject, state[/* gameObjectRecord */10]);
}

function hasGameObjectTransformComponent(gameObject, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), IsDebugMainService$Wonderjs.getIsDebug(StateDataMain$Wonderjs.stateData));
  return HasComponentGameObjectService$Wonderjs.hasTransformComponent(gameObject, state[/* gameObjectRecord */10]);
}

function addGameObjectBoxGeometryComponent(gameObject, component, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), IsDebugMainService$Wonderjs.getIsDebug(StateDataMain$Wonderjs.stateData));
  return AddComponentGameObjectMainService$Wonderjs.addBoxGeometryComponent(gameObject, component, state);
}

function disposeGameObjectBoxGeometryComponent(gameObject, component, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), IsDebugMainService$Wonderjs.getIsDebug(StateDataMain$Wonderjs.stateData));
  return DisposeComponentGameObjectMainService$Wonderjs.deferDisposeBoxGeometryComponent(gameObject, component, state);
}

function hasGameObjectBoxGeometryComponent(gameObject, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), IsDebugMainService$Wonderjs.getIsDebug(StateDataMain$Wonderjs.stateData));
  return HasComponentGameObjectService$Wonderjs.hasBoxGeometryComponent(gameObject, state[/* gameObjectRecord */10]);
}

function addGameObjectCustomGeometryComponent(gameObject, component, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), IsDebugMainService$Wonderjs.getIsDebug(StateDataMain$Wonderjs.stateData));
  return AddComponentGameObjectMainService$Wonderjs.addCustomGeometryComponent(gameObject, component, state);
}

function disposeGameObjectCustomGeometryComponent(gameObject, component, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), IsDebugMainService$Wonderjs.getIsDebug(StateDataMain$Wonderjs.stateData));
  return DisposeComponentGameObjectMainService$Wonderjs.deferDisposeCustomGeometryComponent(gameObject, component, state);
}

function unsafeGetGameObjectGeometryComponent(gameObject, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), IsDebugMainService$Wonderjs.getIsDebug(StateDataMain$Wonderjs.stateData));
  return GetComponentGameObjectService$Wonderjs.unsafeGetGeometryComponent(gameObject, state[/* gameObjectRecord */10]);
}

function hasGameObjectGeometryComponent(gameObject, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), IsDebugMainService$Wonderjs.getIsDebug(StateDataMain$Wonderjs.stateData));
  return HasComponentGameObjectService$Wonderjs.hasGeometryComponent(gameObject, state[/* gameObjectRecord */10]);
}

function addGameObjectBasicMaterialComponent(gameObject, component, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), IsDebugMainService$Wonderjs.getIsDebug(StateDataMain$Wonderjs.stateData));
  return AddComponentGameObjectMainService$Wonderjs.addBasicMaterialComponent(gameObject, component, state);
}

function disposeGameObjectBasicMaterialComponent(gameObject, component, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), IsDebugMainService$Wonderjs.getIsDebug(StateDataMain$Wonderjs.stateData));
  return DisposeComponentGameObjectMainService$Wonderjs.deferDisposeBasicMaterialComponent(gameObject, component, state);
}

function unsafeGetGameObjectBasicMaterialComponent(gameObject, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), IsDebugMainService$Wonderjs.getIsDebug(StateDataMain$Wonderjs.stateData));
  return GetComponentGameObjectService$Wonderjs.unsafeGetBasicMaterialComponent(gameObject, state[/* gameObjectRecord */10]);
}

function hasGameObjectBasicMaterialComponent(gameObject, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), IsDebugMainService$Wonderjs.getIsDebug(StateDataMain$Wonderjs.stateData));
  return HasComponentGameObjectService$Wonderjs.hasBasicMaterialComponent(gameObject, state[/* gameObjectRecord */10]);
}

function addGameObjectLightMaterialComponent(gameObject, component, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), IsDebugMainService$Wonderjs.getIsDebug(StateDataMain$Wonderjs.stateData));
  return AddComponentGameObjectMainService$Wonderjs.addLightMaterialComponent(gameObject, component, state);
}

function disposeGameObjectLightMaterialComponent(gameObject, component, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), IsDebugMainService$Wonderjs.getIsDebug(StateDataMain$Wonderjs.stateData));
  return DisposeComponentGameObjectMainService$Wonderjs.deferDisposeLightMaterialComponent(gameObject, component, state);
}

function unsafeGetGameObjectLightMaterialComponent(gameObject, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), IsDebugMainService$Wonderjs.getIsDebug(StateDataMain$Wonderjs.stateData));
  return GetComponentGameObjectService$Wonderjs.unsafeGetLightMaterialComponent(gameObject, state[/* gameObjectRecord */10]);
}

function hasGameObjectLightMaterialComponent(gameObject, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), IsDebugMainService$Wonderjs.getIsDebug(StateDataMain$Wonderjs.stateData));
  return HasComponentGameObjectService$Wonderjs.hasLightMaterialComponent(gameObject, state[/* gameObjectRecord */10]);
}

function addGameObjectMeshRendererComponent(gameObject, component, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), IsDebugMainService$Wonderjs.getIsDebug(StateDataMain$Wonderjs.stateData));
  return AddComponentGameObjectMainService$Wonderjs.addMeshRendererComponent(gameObject, component, state);
}

function disposeGameObjectMeshRendererComponent(gameObject, component, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), IsDebugMainService$Wonderjs.getIsDebug(StateDataMain$Wonderjs.stateData));
  return DisposeComponentGameObjectMainService$Wonderjs.deferDisposeMeshRendererComponent(gameObject, component, state);
}

function unsafeGetGameObjectMeshRendererComponent(gameObject, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), IsDebugMainService$Wonderjs.getIsDebug(StateDataMain$Wonderjs.stateData));
  return GetComponentGameObjectService$Wonderjs.unsafeGetMeshRendererComponent(gameObject, state[/* gameObjectRecord */10]);
}

function hasGameObjectMeshRendererComponent(gameObject, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), IsDebugMainService$Wonderjs.getIsDebug(StateDataMain$Wonderjs.stateData));
  return HasComponentGameObjectService$Wonderjs.hasMeshRendererComponent(gameObject, state[/* gameObjectRecord */10]);
}

function addGameObjectDirectionLightComponent(gameObject, component, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), IsDebugMainService$Wonderjs.getIsDebug(StateDataMain$Wonderjs.stateData));
  return AddComponentGameObjectMainService$Wonderjs.addDirectionLightComponent(gameObject, component, state);
}

function disposeGameObjectDirectionLightComponent(gameObject, component, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), IsDebugMainService$Wonderjs.getIsDebug(StateDataMain$Wonderjs.stateData));
  return DisposeComponentGameObjectMainService$Wonderjs.deferDisposeDirectionLightComponent(gameObject, component, state);
}

function unsafeGetGameObjectDirectionLightComponent(gameObject, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), IsDebugMainService$Wonderjs.getIsDebug(StateDataMain$Wonderjs.stateData));
  return GetComponentGameObjectService$Wonderjs.unsafeGetDirectionLightComponent(gameObject, state[/* gameObjectRecord */10]);
}

function hasGameObjectDirectionLightComponent(gameObject, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), IsDebugMainService$Wonderjs.getIsDebug(StateDataMain$Wonderjs.stateData));
  return HasComponentGameObjectService$Wonderjs.hasDirectionLightComponent(gameObject, state[/* gameObjectRecord */10]);
}

function addGameObjectPointLightComponent(gameObject, component, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), IsDebugMainService$Wonderjs.getIsDebug(StateDataMain$Wonderjs.stateData));
  return AddComponentGameObjectMainService$Wonderjs.addPointLightComponent(gameObject, component, state);
}

function disposeGameObjectPointLightComponent(gameObject, component, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), IsDebugMainService$Wonderjs.getIsDebug(StateDataMain$Wonderjs.stateData));
  return DisposeComponentGameObjectMainService$Wonderjs.deferDisposePointLightComponent(gameObject, component, state);
}

function unsafeGetGameObjectPointLightComponent(gameObject, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), IsDebugMainService$Wonderjs.getIsDebug(StateDataMain$Wonderjs.stateData));
  return GetComponentGameObjectService$Wonderjs.unsafeGetPointLightComponent(gameObject, state[/* gameObjectRecord */10]);
}

function hasGameObjectPointLightComponent(gameObject, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), IsDebugMainService$Wonderjs.getIsDebug(StateDataMain$Wonderjs.stateData));
  return HasComponentGameObjectService$Wonderjs.hasPointLightComponent(gameObject, state[/* gameObjectRecord */10]);
}

function addGameObjectSourceInstanceComponent(gameObject, component, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), IsDebugMainService$Wonderjs.getIsDebug(StateDataMain$Wonderjs.stateData));
  return AddComponentGameObjectMainService$Wonderjs.addSourceInstanceComponent(gameObject, component, state);
}

function unsafeGetGameObjectSourceInstanceComponent(gameObject, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), IsDebugMainService$Wonderjs.getIsDebug(StateDataMain$Wonderjs.stateData));
  return GetComponentGameObjectService$Wonderjs.unsafeGetSourceInstanceComponent(gameObject, state[/* gameObjectRecord */10]);
}

function hasGameObjectSourceInstanceComponent(gameObject, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), IsDebugMainService$Wonderjs.getIsDebug(StateDataMain$Wonderjs.stateData));
  return HasComponentGameObjectService$Wonderjs.hasSourceInstanceComponent(gameObject, state[/* gameObjectRecord */10]);
}

function disposeGameObjectSourceInstanceComponent(gameObject, component, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), IsDebugMainService$Wonderjs.getIsDebug(StateDataMain$Wonderjs.stateData));
  return DisposeComponentGameObjectMainService$Wonderjs.deferDisposeSourceInstanceComponent(gameObject, component, state);
}

function addGameObjectObjectInstanceComponent(gameObject, component, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), IsDebugMainService$Wonderjs.getIsDebug(StateDataMain$Wonderjs.stateData));
  return AddComponentGameObjectMainService$Wonderjs.addObjectInstanceComponent(gameObject, component, state);
}

function unsafeGetGameObjectObjectInstanceComponent(gameObject, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), IsDebugMainService$Wonderjs.getIsDebug(StateDataMain$Wonderjs.stateData));
  return GetComponentGameObjectService$Wonderjs.unsafeGetObjectInstanceComponent(gameObject, state[/* gameObjectRecord */10]);
}

function disposeGameObjectObjectInstanceComponent(gameObject, component, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), IsDebugMainService$Wonderjs.getIsDebug(StateDataMain$Wonderjs.stateData));
  return DisposeComponentGameObjectMainService$Wonderjs.deferDisposeObjectInstanceComponent(gameObject, component, state);
}

var isGameObjectAlive = AliveGameObjectMainService$Wonderjs.isAlive;

function disposeGameObject(gameObject, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), IsDebugMainService$Wonderjs.getIsDebug(StateDataMain$Wonderjs.stateData));
  return DisposeGameObjectMainService$Wonderjs.deferDispose(gameObject, state);
}

function disposeGameObjectKeepOrder(gameObject, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), IsDebugMainService$Wonderjs.getIsDebug(StateDataMain$Wonderjs.stateData));
  return DisposeGameObjectMainService$Wonderjs.deferDisposeKeepOrder(gameObject, state);
}

function initGameObject(gameObject, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), IsDebugMainService$Wonderjs.getIsDebug(StateDataMain$Wonderjs.stateData));
  return InitGameObjectMainService$Wonderjs.initGameObject(gameObject, state);
}

function batchDisposeGameObject(gameObjectArray, state) {
  Contract$WonderLog.requireCheck((function () {
          return ArrayService$WonderCommonlib.forEach((function (gameObject) {
                        return _checkGameObjectShouldAlive(gameObject, state);
                      }), gameObjectArray);
        }), IsDebugMainService$Wonderjs.getIsDebug(StateDataMain$Wonderjs.stateData));
  return DisposeGameObjectMainService$Wonderjs.deferBatchDispose(gameObjectArray, state);
}

function batchDisposeGameObjectKeepOrder(gameObjectArray, state) {
  Contract$WonderLog.requireCheck((function () {
          return ArrayService$WonderCommonlib.forEach((function (gameObject) {
                        return _checkGameObjectShouldAlive(gameObject, state);
                      }), gameObjectArray);
        }), IsDebugMainService$Wonderjs.getIsDebug(StateDataMain$Wonderjs.stateData));
  return DisposeGameObjectMainService$Wonderjs.deferBatchDisposeKeepOrder(gameObjectArray, state);
}

var cloneGameObject = CloneGameObjectMainService$Wonderjs.clone;

function getGameObjectName(gameObject, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), IsDebugMainService$Wonderjs.getIsDebug(StateDataMain$Wonderjs.stateData));
  return NameGameObjectMainService$Wonderjs.getName(gameObject, state);
}

function unsafeGetGameObjectName(gameObject, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), IsDebugMainService$Wonderjs.getIsDebug(StateDataMain$Wonderjs.stateData));
  return NameGameObjectMainService$Wonderjs.unsafeGetName(gameObject, state);
}

function setGameObjectName(gameObject, name, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), IsDebugMainService$Wonderjs.getIsDebug(StateDataMain$Wonderjs.stateData));
  return NameGameObjectMainService$Wonderjs.setName(gameObject, name, state);
}

export {
  createGameObject ,
  _checkGameObjectShouldAlive ,
  addGameObjectBasicCameraViewComponent ,
  disposeGameObjectBasicCameraViewComponent ,
  unsafeGetGameObjectBasicCameraViewComponent ,
  hasGameObjectBasicCameraViewComponent ,
  addGameObjectPerspectiveCameraProjectionComponent ,
  disposeGameObjectPerspectiveCameraProjectionComponent ,
  unsafeGetGameObjectPerspectiveCameraProjectionComponent ,
  hasGameObjectPerspectiveCameraProjectionComponent ,
  addGameObjectArcballCameraControllerComponent ,
  disposeGameObjectArcballCameraControllerComponent ,
  unsafeGetGameObjectArcballCameraControllerComponent ,
  hasGameObjectArcballCameraControllerComponent ,
  addGameObjectTransformComponent ,
  disposeGameObjectTransformComponent ,
  unsafeGetGameObjectTransformComponent ,
  hasGameObjectTransformComponent ,
  addGameObjectBoxGeometryComponent ,
  disposeGameObjectBoxGeometryComponent ,
  hasGameObjectBoxGeometryComponent ,
  addGameObjectCustomGeometryComponent ,
  disposeGameObjectCustomGeometryComponent ,
  unsafeGetGameObjectGeometryComponent ,
  hasGameObjectGeometryComponent ,
  addGameObjectBasicMaterialComponent ,
  disposeGameObjectBasicMaterialComponent ,
  unsafeGetGameObjectBasicMaterialComponent ,
  hasGameObjectBasicMaterialComponent ,
  addGameObjectLightMaterialComponent ,
  disposeGameObjectLightMaterialComponent ,
  unsafeGetGameObjectLightMaterialComponent ,
  hasGameObjectLightMaterialComponent ,
  addGameObjectMeshRendererComponent ,
  disposeGameObjectMeshRendererComponent ,
  unsafeGetGameObjectMeshRendererComponent ,
  hasGameObjectMeshRendererComponent ,
  addGameObjectDirectionLightComponent ,
  disposeGameObjectDirectionLightComponent ,
  unsafeGetGameObjectDirectionLightComponent ,
  hasGameObjectDirectionLightComponent ,
  addGameObjectPointLightComponent ,
  disposeGameObjectPointLightComponent ,
  unsafeGetGameObjectPointLightComponent ,
  hasGameObjectPointLightComponent ,
  addGameObjectSourceInstanceComponent ,
  unsafeGetGameObjectSourceInstanceComponent ,
  hasGameObjectSourceInstanceComponent ,
  disposeGameObjectSourceInstanceComponent ,
  addGameObjectObjectInstanceComponent ,
  unsafeGetGameObjectObjectInstanceComponent ,
  disposeGameObjectObjectInstanceComponent ,
  isGameObjectAlive ,
  disposeGameObject ,
  disposeGameObjectKeepOrder ,
  initGameObject ,
  batchDisposeGameObject ,
  batchDisposeGameObjectKeepOrder ,
  cloneGameObject ,
  getGameObjectName ,
  unsafeGetGameObjectName ,
  setGameObjectName ,
  
}
/* Log-WonderLog Not a pure module */
