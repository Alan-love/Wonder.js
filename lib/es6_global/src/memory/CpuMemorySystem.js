// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as MemoryUtils$Wonderjs            from "./MemoryUtils.js";
import * as ArraySystem$WonderCommonlib     from "../../../../node_modules/wonder-commonlib/lib/es6_global/src/ArraySystem.js";
import * as GameObjectAdminAci$Wonderjs     from "../ecs/admin/avoid_circle_import/GameObjectAdminAci.js";
import * as SparseMapSystem$WonderCommonlib from "../../../../node_modules/wonder-commonlib/lib/es6_global/src/SparseMapSystem.js";

function reAllocateGameObject(state) {
  var data = GameObjectAdminAci$Wonderjs.getData(state);
  var disposedUidMap = data[/* disposedUidMap */2];
  var aliveUidArray = data[/* aliveUidArray */3];
  var transformMap = data[/* transformMap */4];
  var cameraControllerMap = data[/* cameraControllerMap */5];
  var geometryMap = data[/* geometryMap */6];
  var meshRendererMap = data[/* meshRendererMap */7];
  var materialMap = data[/* materialMap */8];
  var sourceInstanceMap = data[/* sourceInstanceMap */9];
  var objectInstanceMap = data[/* objectInstanceMap */10];
  var newTransformMap = SparseMapSystem$WonderCommonlib.createEmpty(/* () */0);
  var newMeshRendererMap = SparseMapSystem$WonderCommonlib.createEmpty(/* () */0);
  var newGeometryMap = SparseMapSystem$WonderCommonlib.createEmpty(/* () */0);
  var newCameraControllerMap = SparseMapSystem$WonderCommonlib.createEmpty(/* () */0);
  var newMaterialMap = SparseMapSystem$WonderCommonlib.createEmpty(/* () */0);
  var newSourceInstanceMap = SparseMapSystem$WonderCommonlib.createEmpty(/* () */0);
  var newObjectInstanceMap = SparseMapSystem$WonderCommonlib.createEmpty(/* () */0);
  var newAliveUidArray = aliveUidArray.filter((function (aliveUid) {
          return 1 - MemoryUtils$Wonderjs.isDisposed(aliveUid, disposedUidMap);
        }));
  ArraySystem$WonderCommonlib.forEach((function (uid) {
          SparseMapSystem$WonderCommonlib.set(uid, SparseMapSystem$WonderCommonlib.unsafeGet(uid, transformMap), newTransformMap);
          var match = SparseMapSystem$WonderCommonlib.get(uid, meshRendererMap);
          if (match) {
            SparseMapSystem$WonderCommonlib.set(uid, match[0], newMeshRendererMap);
          }
          var match$1 = SparseMapSystem$WonderCommonlib.get(uid, geometryMap);
          if (match$1) {
            SparseMapSystem$WonderCommonlib.set(uid, match$1[0], newGeometryMap);
          }
          var match$2 = SparseMapSystem$WonderCommonlib.get(uid, materialMap);
          if (match$2) {
            SparseMapSystem$WonderCommonlib.set(uid, match$2[0], newMaterialMap);
          }
          var match$3 = SparseMapSystem$WonderCommonlib.get(uid, cameraControllerMap);
          if (match$3) {
            SparseMapSystem$WonderCommonlib.set(uid, match$3[0], newCameraControllerMap);
          }
          var match$4 = SparseMapSystem$WonderCommonlib.get(uid, sourceInstanceMap);
          if (match$4) {
            SparseMapSystem$WonderCommonlib.set(uid, match$4[0], newSourceInstanceMap);
          }
          var match$5 = SparseMapSystem$WonderCommonlib.get(uid, objectInstanceMap);
          if (match$5) {
            SparseMapSystem$WonderCommonlib.set(uid, match$5[0], newObjectInstanceMap);
            return /* () */0;
          } else {
            return /* () */0;
          }
        }), newAliveUidArray);
  data[/* disposedUidMap */2] = SparseMapSystem$WonderCommonlib.createEmpty(/* () */0);
  data[/* aliveUidArray */3] = newAliveUidArray;
  data[/* transformMap */4] = newTransformMap;
  data[/* meshRendererMap */7] = newMeshRendererMap;
  data[/* geometryMap */6] = newGeometryMap;
  data[/* materialMap */8] = newMaterialMap;
  data[/* cameraControllerMap */5] = newCameraControllerMap;
  data[/* sourceInstanceMap */9] = newSourceInstanceMap;
  data[/* objectInstanceMap */10] = newObjectInstanceMap;
  return state;
}

export {
  reAllocateGameObject ,
  
}
/* ArraySystem-WonderCommonlib Not a pure module */
