// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as MemoryUtils$Wonderjs            from "./MemoryUtils.js";
import * as ArraySystem$WonderCommonlib     from "../../../../node_modules/wonder-commonlib/lib/es6_global/src/ArraySystem.js";
import * as GameObjectAdminAci$Wonderjs     from "../ecs/admin/avoid_circle_import/GameObjectAdminAci.js";
import * as SparseMapSystem$WonderCommonlib from "../../../../node_modules/wonder-commonlib/lib/es6_global/src/SparseMapSystem.js";

function _setNewDataToState(newAliveUidArray, state, param) {
  var newrecord = state.slice();
  var init = state[/* gameObjectData */12];
  newrecord[/* gameObjectData */12] = /* record */[
    /* uid */init[/* uid */0],
    /* disposeCount */init[/* disposeCount */1],
    /* disposedUidMap */SparseMapSystem$WonderCommonlib.createEmpty(/* () */0),
    /* aliveUidArray */newAliveUidArray,
    /* transformMap */param[0],
    /* cameraControllerMap */param[3],
    /* geometryMap */param[2],
    /* meshRendererMap */param[1],
    /* basicMaterialMap */param[4],
    /* lightMaterialMap */param[5],
    /* sourceInstanceMap */param[9],
    /* objectInstanceMap */param[10],
    /* ambientLightMap */param[6],
    /* directionLightMap */param[7],
    /* pointLightMap */param[8]
  ];
  return newrecord;
}

function _setNewMap(uid, oldMap, newMap) {
  var match = SparseMapSystem$WonderCommonlib.get(uid, oldMap);
  if (match) {
    return SparseMapSystem$WonderCommonlib.set(uid, match[0], newMap);
  } else {
    return newMap;
  }
}

function _allocateNewMaps(newAliveUidArray, state) {
  var match = GameObjectAdminAci$Wonderjs.getData(state);
  var transformMap = match[/* transformMap */4];
  var cameraControllerMap = match[/* cameraControllerMap */5];
  var geometryMap = match[/* geometryMap */6];
  var meshRendererMap = match[/* meshRendererMap */7];
  var basicMaterialMap = match[/* basicMaterialMap */8];
  var lightMaterialMap = match[/* lightMaterialMap */9];
  var sourceInstanceMap = match[/* sourceInstanceMap */10];
  var objectInstanceMap = match[/* objectInstanceMap */11];
  var ambientLightMap = match[/* ambientLightMap */12];
  var directionLightMap = match[/* directionLightMap */13];
  var pointLightMap = match[/* pointLightMap */14];
  return ArraySystem$WonderCommonlib.reduceOneParam((function (param, uid) {
                return /* tuple */[
                        SparseMapSystem$WonderCommonlib.set(uid, SparseMapSystem$WonderCommonlib.unsafeGet(uid, transformMap), param[0]),
                        _setNewMap(uid, meshRendererMap, param[1]),
                        _setNewMap(uid, geometryMap, param[2]),
                        _setNewMap(uid, cameraControllerMap, param[3]),
                        _setNewMap(uid, basicMaterialMap, param[4]),
                        _setNewMap(uid, lightMaterialMap, param[5]),
                        _setNewMap(uid, ambientLightMap, param[6]),
                        _setNewMap(uid, directionLightMap, param[7]),
                        _setNewMap(uid, pointLightMap, param[8]),
                        _setNewMap(uid, sourceInstanceMap, param[9]),
                        _setNewMap(uid, objectInstanceMap, param[10])
                      ];
              }), /* tuple */[
              SparseMapSystem$WonderCommonlib.createEmpty(/* () */0),
              SparseMapSystem$WonderCommonlib.createEmpty(/* () */0),
              SparseMapSystem$WonderCommonlib.createEmpty(/* () */0),
              SparseMapSystem$WonderCommonlib.createEmpty(/* () */0),
              SparseMapSystem$WonderCommonlib.createEmpty(/* () */0),
              SparseMapSystem$WonderCommonlib.createEmpty(/* () */0),
              SparseMapSystem$WonderCommonlib.createEmpty(/* () */0),
              SparseMapSystem$WonderCommonlib.createEmpty(/* () */0),
              SparseMapSystem$WonderCommonlib.createEmpty(/* () */0),
              SparseMapSystem$WonderCommonlib.createEmpty(/* () */0),
              SparseMapSystem$WonderCommonlib.createEmpty(/* () */0)
            ], newAliveUidArray);
}

function reAllocateGameObject(state) {
  var data = GameObjectAdminAci$Wonderjs.getData(state);
  var disposedUidMap = data[/* disposedUidMap */2];
  var aliveUidArray = data[/* aliveUidArray */3];
  var newAliveUidArray = aliveUidArray.filter((function (aliveUid) {
          return 1 - MemoryUtils$Wonderjs.isDisposed(aliveUid, disposedUidMap);
        }));
  return _setNewDataToState(newAliveUidArray, state, _allocateNewMaps(newAliveUidArray, state));
}

export {
  _setNewDataToState   ,
  _setNewMap           ,
  _allocateNewMaps     ,
  reAllocateGameObject ,
  
}
/* ArraySystem-WonderCommonlib Not a pure module */
