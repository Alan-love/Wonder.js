// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as MemoryUtils$Wonderjs            from "./MemoryUtils.js";
import * as ArraySystem$WonderCommonlib     from "../../../../node_modules/wonder-commonlib/lib/es6_global/src/ArraySystem.js";
import * as GameObjectAdminAci$Wonderjs     from "../ecs/admin/avoid_circle_import/GameObjectAdminAci.js";
import * as SparseMapSystem$WonderCommonlib from "../../../../node_modules/wonder-commonlib/lib/es6_global/src/SparseMapSystem.js";

function _setNewDataToState(newAliveUidArray, state, param) {
  var newrecord = state.slice();
  var init = state[/* gameObjectData */10];
  newrecord[/* gameObjectData */10] = /* record */[
    /* uid */init[/* uid */0],
    /* disposeCount */init[/* disposeCount */1],
    /* disposedUidMap */SparseMapSystem$WonderCommonlib.createEmpty(/* () */0),
    /* aliveUidArray */newAliveUidArray,
    /* transformMap */param[0],
    /* cameraControllerMap */param[3],
    /* geometryMap */param[2],
    /* meshRendererMap */param[1],
    /* materialMap */param[4],
    /* sourceInstanceMap */param[5],
    /* objectInstanceMap */param[6]
  ];
  return newrecord;
}

function _allocateNewMaps(newAliveUidArray, state) {
  var match = GameObjectAdminAci$Wonderjs.getData(state);
  var transformMap = match[/* transformMap */4];
  var cameraControllerMap = match[/* cameraControllerMap */5];
  var geometryMap = match[/* geometryMap */6];
  var meshRendererMap = match[/* meshRendererMap */7];
  var materialMap = match[/* materialMap */8];
  var sourceInstanceMap = match[/* sourceInstanceMap */9];
  var objectInstanceMap = match[/* objectInstanceMap */10];
  return ArraySystem$WonderCommonlib.reduceOneParam((function (param, uid) {
                var newObjectInstanceMap = param[6];
                var newSourceInstanceMap = param[5];
                var newMaterialMap = param[4];
                var newCameraControllerMap = param[3];
                var newGeometryMap = param[2];
                var newMeshRendererMap = param[1];
                var match = SparseMapSystem$WonderCommonlib.get(uid, meshRendererMap);
                var match$1 = SparseMapSystem$WonderCommonlib.get(uid, geometryMap);
                var match$2 = SparseMapSystem$WonderCommonlib.get(uid, cameraControllerMap);
                var match$3 = SparseMapSystem$WonderCommonlib.get(uid, materialMap);
                var match$4 = SparseMapSystem$WonderCommonlib.get(uid, sourceInstanceMap);
                var match$5 = SparseMapSystem$WonderCommonlib.get(uid, objectInstanceMap);
                return /* tuple */[
                        SparseMapSystem$WonderCommonlib.set(uid, SparseMapSystem$WonderCommonlib.unsafeGet(uid, transformMap), param[0]),
                        match ? SparseMapSystem$WonderCommonlib.set(uid, match[0], newMeshRendererMap) : newMeshRendererMap,
                        match$1 ? SparseMapSystem$WonderCommonlib.set(uid, match$1[0], newGeometryMap) : newGeometryMap,
                        match$2 ? SparseMapSystem$WonderCommonlib.set(uid, match$2[0], newCameraControllerMap) : newCameraControllerMap,
                        match$3 ? SparseMapSystem$WonderCommonlib.set(uid, match$3[0], newMaterialMap) : newMaterialMap,
                        match$4 ? SparseMapSystem$WonderCommonlib.set(uid, match$4[0], newSourceInstanceMap) : newSourceInstanceMap,
                        match$5 ? SparseMapSystem$WonderCommonlib.set(uid, match$5[0], newObjectInstanceMap) : newObjectInstanceMap
                      ];
              }), /* tuple */[
              SparseMapSystem$WonderCommonlib.createEmpty(/* () */0),
              SparseMapSystem$WonderCommonlib.createEmpty(/* () */0),
              SparseMapSystem$WonderCommonlib.createEmpty(/* () */0),
              SparseMapSystem$WonderCommonlib.createEmpty(/* () */0),
              SparseMapSystem$WonderCommonlib.createEmpty(/* () */0),
              SparseMapSystem$WonderCommonlib.createEmpty(/* () */0),
              SparseMapSystem$WonderCommonlib.createEmpty(/* () */0)
            ], newAliveUidArray);
}

function reAllocateGameObject(state) {
  var data = GameObjectAdminAci$Wonderjs.getData(state);
  var disposedUidMap = data[/* disposedUidMap */2];
  var aliveUidArray = data[/* aliveUidArray */3];
  var newAliveUidArray = aliveUidArray.filter((function (aliveUid) {
          return 1 - MemoryUtils$Wonderjs.isDisposed(aliveUid, disposedUidMap);
        }));
  return _setNewDataToState(newAliveUidArray, state, _allocateNewMaps(newAliveUidArray, state));
}

export {
  _setNewDataToState   ,
  _allocateNewMaps     ,
  reAllocateGameObject ,
  
}
/* ArraySystem-WonderCommonlib Not a pure module */
