// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as Caml_array                    from "../../../../../../../node_modules/bs-platform/lib/es6/caml_array.js";
import * as Log$WonderLog                 from "../../../../../../../node_modules/wonder-log/lib/es6_global/src/Log.js";
import * as Contract$WonderLog            from "../../../../../../../node_modules/wonder-log/lib/es6_global/src/Contract.js";
import * as StateData$Wonderjs            from "../../../../core/StateData.js";
import * as ArraySystem$Wonderjs          from "../../../../structure/ArraySystem.js";
import * as GLSLSenderSystem$Wonderjs     from "../../../../renderer/shader/sender/GLSLSenderSystem.js";
import * as ArraySystem$WonderCommonlib   from "../../../../../../../node_modules/wonder-commonlib/lib/es6_global/src/ArraySystem.js";
import * as GLSLLocationSystem$Wonderjs   from "../../../../renderer/shader/location/GLSLLocationSystem.js";
import * as DirectionLightAdmin$Wonderjs  from "../../../../ecs/admin/component/light/DirectionLightAdmin.js";
import * as DirectionLightHelper$Wonderjs from "../../../../ecs/component/data/light/direction/DirectionLightHelper.js";

function send(gl, param, state) {
  var uniformLocationMap = param[2];
  var uniformCacheMap = param[1];
  var program = param[0];
  Contract$WonderLog.requireCheck((function () {
          var maxCount = DirectionLightHelper$Wonderjs.getBufferMaxCount(/* () */0);
          return Contract$WonderLog.test(Log$WonderLog.buildAssertMessage("max buffer count === 4", "is " + (String(maxCount) + "")), (function () {
                        return Contract$WonderLog.Operators[/* = */0](maxCount, 4);
                      }));
        }), StateData$Wonderjs.stateData[/* isDebug */1]);
  var match = DirectionLightAdmin$Wonderjs.getLightData(state);
  var lightGLSLDataStructureMemberNameArr = /* array */[
    /* record */[
      /* position */"u_directionLights[0].position",
      /* color */"u_directionLights[0].color",
      /* intensity */"u_directionLights[0].intensity"
    ],
    /* record */[
      /* position */"u_directionLights[1].position",
      /* color */"u_directionLights[1].color",
      /* intensity */"u_directionLights[1].intensity"
    ],
    /* record */[
      /* position */"u_directionLights[2].position",
      /* color */"u_directionLights[2].color",
      /* intensity */"u_directionLights[2].intensity"
    ],
    /* record */[
      /* position */"u_directionLights[3].position",
      /* color */"u_directionLights[3].color",
      /* intensity */"u_directionLights[3].intensity"
    ]
  ];
  return ArraySystem$Wonderjs.reduceState((function (state, index) {
                var match = Caml_array.caml_array_get(lightGLSLDataStructureMemberNameArr, index);
                var intensity = match[/* intensity */2];
                var color = match[/* color */1];
                var position = match[/* position */0];
                GLSLSenderSystem$Wonderjs.sendVec3(gl, uniformCacheMap, /* tuple */[
                      position,
                      GLSLLocationSystem$Wonderjs.getUniformLocation(program, position, uniformLocationMap, gl)
                    ], DirectionLightAdmin$Wonderjs.getPosition(index, state));
                GLSLSenderSystem$Wonderjs.sendFloat3(gl, uniformCacheMap, /* tuple */[
                      color,
                      GLSLLocationSystem$Wonderjs.getUniformLocation(program, color, uniformLocationMap, gl)
                    ], DirectionLightAdmin$Wonderjs.getColor(index, state));
                GLSLSenderSystem$Wonderjs.sendFloat(gl, uniformCacheMap, /* tuple */[
                      intensity,
                      GLSLLocationSystem$Wonderjs.getUniformLocation(program, intensity, uniformLocationMap, gl)
                    ], DirectionLightAdmin$Wonderjs.getIntensity(index, state));
                return state;
              }), state, ArraySystem$WonderCommonlib.range(0, match[/* index */0] - 1 | 0));
}

export {
  send ,
  
}
/* Log-WonderLog Not a pure module */
