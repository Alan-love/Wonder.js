// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as Caml_int32                                from "../../../../../../../../../node_modules/bs-platform/lib/es6/caml_int32.js";
import * as ArraySystem$Wonderjs                      from "../../../../../../structure/ArraySystem.js";
import * as GeometryAdmin$Wonderjs                    from "../../../../../../ecs/admin/component/GeometryAdmin.js";
import * as GPUDetectSystem$Wonderjs                  from "../../../../../../renderer/device/gpu/GPUDetectSystem.js";
import * as ArraySystem$WonderCommonlib               from "../../../../../../../../../node_modules/wonder-commonlib/lib/es6_global/src/ArraySystem.js";
import * as GLSLSenderDrawUtils$Wonderjs              from "../../../../../../renderer/shader/sender/utils/GLSLSenderDrawUtils.js";
import * as SourceInstanceAdmin$Wonderjs              from "../../../../../../ecs/admin/component/instance/SourceInstanceAdmin.js";
import * as GLSLSenderStateUtils$Wonderjs             from "../../../../../../renderer/shader/sender/utils/GLSLSenderStateUtils.js";
import * as InstanceBufferSystem$Wonderjs             from "../../../../../../renderer/buffer/InstanceBufferSystem.js";
import * as GLSLSenderSendDataUtils$Wonderjs          from "../../../../../../renderer/shader/sender/utils/GLSLSenderSendDataUtils.js";
import * as VboBufferGetStateDataUtils$Wonderjs       from "../../../../../../renderer/buffer/VboBufferGetStateDataUtils.js";
import * as GameObjectGetComponentCommon$Wonderjs     from "../../../../../../ecs/admin/GameObjectGetComponentCommon.js";
import * as GLSLSenderConfigDataHandleSystem$Wonderjs from "../../../../../../renderer/shader/sender/GLSLSenderConfigDataHandleSystem.js";

function _fillObjectInstanceData(objectInstanceArray, matricesArrayForInstance, fillMatrixTypeArrFunc, stateOffsetTuple) {
  return ArraySystem$WonderCommonlib.reduceOneParam((function (stateOffsetTuple, objectInstance) {
                  return fillMatrixTypeArrFunc(objectInstance, matricesArrayForInstance, stateOffsetTuple);
                }), stateOffsetTuple, objectInstanceArray)[0];
}

function _sendTransformMatrixDataBuffer(param, param$1, state) {
  var match = param$1[0];
  var pos = match[/* pos */0];
  var gl = param[0];
  gl.vertexAttribPointer(pos, match[/* size */1], gl.FLOAT, false, param$1[1], match[/* getOffsetFunc */2](param$1[2]));
  param[1].vertexAttribDivisorANGLE(pos, 1);
  return GLSLSenderSendDataUtils$Wonderjs.enableVertexAttribArray(gl, pos, GLSLSenderStateUtils$Wonderjs.getGLSLSenderData(state)[/* vertexAttribHistoryArray */9], state);
}

function _sendTransformMatrixDataBufferData(glDataTuple, shaderIndex, stride, state) {
  return ArraySystem$Wonderjs.reduceStatei((function (state, sendData, index) {
                return _sendTransformMatrixDataBuffer(glDataTuple, /* tuple */[
                            sendData,
                            stride,
                            index
                          ], state);
              }), state, GLSLSenderConfigDataHandleSystem$Wonderjs.unsafeGetInstanceAttributeSendData(shaderIndex, state));
}

function _updateAndSendTransformMatrixDataBufferData(glDataTuple, shaderIndex, param, state) {
  InstanceBufferSystem$Wonderjs.updateData(glDataTuple[0], param[1], param[2]);
  return _sendTransformMatrixDataBufferData(glDataTuple, shaderIndex, param[0], state);
}

function _sendTransformMatrixData(param, fillMatrixTypeArrFunc, state) {
  var match = param[2];
  var matrixFloat32ArrayMap = match[2];
  var matrixInstanceBufferMap = match[1];
  var matrixInstanceBufferCapacityMap = match[0];
  var match$1 = param[1];
  var defaultCapacity = match$1[2];
  var sourceInstance = match$1[1];
  var match$2 = param[0];
  var gl = match$2[0];
  var matrixInstanceBuffer = InstanceBufferSystem$Wonderjs.getOrCreateBuffer(/* tuple */[
        gl,
        sourceInstance,
        defaultCapacity
      ], /* tuple */[
        matrixInstanceBufferCapacityMap,
        matrixInstanceBufferMap
      ], state);
  var matricesArrayForInstance = InstanceBufferSystem$Wonderjs.getOrCreateMatrixFloat32Array(sourceInstance, defaultCapacity, /* tuple */[
        matrixInstanceBufferCapacityMap,
        matrixFloat32ArrayMap
      ], state);
  var match$3 = InstanceBufferSystem$Wonderjs.setCapacityAndUpdateBufferTypeArray(/* tuple */[
        gl,
        sourceInstance,
        Caml_int32.imul(match$1[6], match$1[3]),
        defaultCapacity
      ], /* tuple */[
        matrixInstanceBuffer,
        matricesArrayForInstance
      ], /* tuple */[
        matrixInstanceBufferMap,
        matrixFloat32ArrayMap,
        matrixInstanceBufferCapacityMap
      ], state);
  var matricesArrayForInstance$1 = match$3[1];
  return _updateAndSendTransformMatrixDataBufferData(/* tuple */[
              gl,
              match$2[1]
            ], match$2[2], /* tuple */[
              match$1[4],
              matricesArrayForInstance$1,
              match$3[0]
            ], _fillObjectInstanceData(match$1[5], matricesArrayForInstance$1, fillMatrixTypeArrFunc, fillMatrixTypeArrFunc(match$1[0], matricesArrayForInstance$1, /* tuple */[
                      state,
                      0
                    ])));
}

function _sendStaticTransformMatrixData(dataTuple, fillMatrixTypeArrFunc, state) {
  var match = dataTuple[2];
  var match$1 = dataTuple[1];
  var sourceInstance = match$1[1];
  var match$2 = dataTuple[0];
  var gl = match$2[0];
  var match$3 = SourceInstanceAdmin$Wonderjs.isSendTransformMatrixData(sourceInstance, state);
  if (match$3 !== 0) {
    InstanceBufferSystem$Wonderjs.bind(gl, InstanceBufferSystem$Wonderjs.getOrCreateBuffer(/* tuple */[
              gl,
              sourceInstance,
              match$1[2]
            ], /* tuple */[
              match[0],
              match[1]
            ], state));
    return _sendTransformMatrixDataBufferData(/* tuple */[
                gl,
                match$2[1]
              ], match$2[2], match$1[4], state);
  } else {
    return SourceInstanceAdmin$Wonderjs.markIsSendTransformMatrixData(sourceInstance, /* true */1, _sendTransformMatrixData(dataTuple, fillMatrixTypeArrFunc, state));
  }
}

function _sendDynamicTransformMatrixData(dataTuple, fillMatrixTypeArrFunc, state) {
  return _sendTransformMatrixData(dataTuple, fillMatrixTypeArrFunc, SourceInstanceAdmin$Wonderjs.markIsSendTransformMatrixData(dataTuple[1][1], /* false */0, state));
}

function _geMatrixMapTuple(state) {
  var match = VboBufferGetStateDataUtils$Wonderjs.getVboBufferData(state);
  var match$1 = SourceInstanceAdmin$Wonderjs.getSourceInstanceData(state);
  return /* tuple */[
          match$1[/* matrixInstanceBufferCapacityMap */2],
          match[/* matrixInstanceBufferMap */3],
          match$1[/* matrixFloat32ArrayMap */3]
        ];
}

function _renderSourceInstanceGameObject(gl, uid, renderFunc, state) {
  return renderFunc(gl, uid, state);
}

function _prepareData(gl, shaderIndex, param, state) {
  var uid = param[0];
  var extension = GPUDetectSystem$Wonderjs.unsafeGetInstanceExtension(state);
  var sourceInstance = GameObjectGetComponentCommon$Wonderjs.unsafeGetSourceInstanceComponent(uid, state);
  var objectInstanceArray = SourceInstanceAdmin$Wonderjs.getObjectInstanceArray(sourceInstance, state);
  var instanceRenderListCount = objectInstanceArray.length + 1 | 0;
  return /* tuple */[
          /* tuple */[
            gl,
            extension,
            shaderIndex
          ],
          /* tuple */[
            uid,
            sourceInstance,
            param[1],
            param[2],
            param[3],
            objectInstanceArray,
            instanceRenderListCount
          ],
          _geMatrixMapTuple(state)
        ];
}

function render(gl, param, param$1, state) {
  var fillMatrixTypeArrFunc = param$1[1];
  var uid = param[0];
  var match = _renderSourceInstanceGameObject(gl, uid, param$1[0], state);
  var state$1 = match[0];
  var dataTuple = _prepareData(gl, match[1], /* tuple */[
        uid,
        param[1],
        param[2],
        param[3]
      ], state$1);
  var match$1 = dataTuple[1];
  var match$2 = dataTuple[0];
  var gl$1 = match$2[0];
  var match$3 = SourceInstanceAdmin$Wonderjs.isTransformStatic(match$1[1], state$1);
  var state$2 = match$3 !== 0 ? _sendStaticTransformMatrixData(dataTuple, fillMatrixTypeArrFunc, state$1) : _sendDynamicTransformMatrixData(dataTuple, fillMatrixTypeArrFunc, state$1);
  GLSLSenderDrawUtils$Wonderjs.drawElementsInstancedANGLE(/* tuple */[
        GeometryAdmin$Wonderjs.getDrawMode(gl$1),
        GeometryAdmin$Wonderjs.getIndexType(gl$1),
        GeometryAdmin$Wonderjs.getIndexTypeSize(gl$1),
        GeometryAdmin$Wonderjs.getIndicesCount(match[2], state$2),
        match$1[6]
      ], match$2[1]);
  return state$2;
}

export {
  _fillObjectInstanceData                     ,
  _sendTransformMatrixDataBuffer              ,
  _sendTransformMatrixDataBufferData          ,
  _updateAndSendTransformMatrixDataBufferData ,
  _sendTransformMatrixData                    ,
  _sendStaticTransformMatrixData              ,
  _sendDynamicTransformMatrixData             ,
  _geMatrixMapTuple                           ,
  _renderSourceInstanceGameObject             ,
  _prepareData                                ,
  render                                      ,
  
}
/* ArraySystem-Wonderjs Not a pure module */
