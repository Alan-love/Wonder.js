// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as List                          from "../../../../../../node_modules/bs-platform/lib/es6/list.js";
import * as Curry                         from "../../../../../../node_modules/bs-platform/lib/es6/curry.js";
import * as Pervasives                    from "../../../../../../node_modules/bs-platform/lib/es6/pervasives.js";
import * as JobSystem$Wonderjs            from "../JobSystem.js";
import * as ArraySystem$WonderCommonlib   from "../../../../../../node_modules/wonder-commonlib/lib/es6_global/src/ArraySystem.js";
import * as HashMapSystem$WonderCommonlib from "../../../../../../node_modules/wonder-commonlib/lib/es6_global/src/HashMapSystem.js";
import * as LogicJobConfigSystem$Wonderjs from "./LogicJobConfigSystem.js";
import * as LogicJobHandleSystem$Wonderjs from "./LogicJobHandleSystem.js";

function _getAllLogicJobs(executableJobs, jobHandleMap, _) {
  return ArraySystem$WonderCommonlib.reduceOneParam((function (list, param) {
                var name = param[/* name */0];
                var match = HashMapSystem$WonderCommonlib.get(name, jobHandleMap);
                if (match) {
                  return Pervasives.$at(list, /* :: */[
                              /* tuple */[
                                name,
                                match[0]
                              ],
                              /* [] */0
                            ]);
                } else {
                  return JobSystem$Wonderjs.handleGetNoneJob(name, jobHandleMap);
                }
              }), /* [] */0, executableJobs);
}

function _getLogicInitJobList(state) {
  return state[/* jobData */3][/* logicInitJobList */0];
}

function _getLogicUpdateJobList(state) {
  return state[/* jobData */3][/* logicUpdateJobList */2];
}

function execLogicInitJobs(state) {
  return List.fold_left((function (state, param) {
                return Curry._1(param[1], state);
              }), state, state[/* jobData */3][/* logicInitJobList */0]);
}

function execLogicUpdateJobs(elapsed, state) {
  return List.fold_left((function (state, param) {
                return Curry._2(param[1], elapsed, state);
              }), state, state[/* jobData */3][/* logicUpdateJobList */2]);
}

function init(state) {
  var newrecord = state.slice();
  var init$1 = state[/* jobData */3];
  newrecord[/* jobData */3] = /* record */[
    /* logicInitJobList */_getAllLogicJobs(LogicJobConfigSystem$Wonderjs.getInitPipelineExecutableJobs(LogicJobConfigSystem$Wonderjs.getLogicSetting(state), LogicJobConfigSystem$Wonderjs.getInitPipelines(state), LogicJobConfigSystem$Wonderjs.getInitJobs(state)), LogicJobHandleSystem$Wonderjs.createInitJobHandleMap(/* () */0), state),
    /* renderInitJobList */init$1[/* renderInitJobList */1],
    /* logicUpdateJobList */_getAllLogicJobs(LogicJobConfigSystem$Wonderjs.getUpdatePipelineExecutableJobs(LogicJobConfigSystem$Wonderjs.getLogicSetting(state), LogicJobConfigSystem$Wonderjs.getUpdatePipelines(state), LogicJobConfigSystem$Wonderjs.getUpdateJobs(state)), LogicJobHandleSystem$Wonderjs.createUpdateJobHandleMap(/* () */0), state),
    /* renderRenderJobList */init$1[/* renderRenderJobList */3]
  ];
  return newrecord;
}

function addLogicInitJob(targetJobName, afterJobName, targetHandleFunc, state) {
  var newrecord = state.slice();
  var init = state[/* jobData */3];
  newrecord[/* jobData */3] = /* record */[
    /* logicInitJobList */JobSystem$Wonderjs.addJob(/* tuple */[
          targetJobName,
          afterJobName,
          targetHandleFunc
        ], state[/* jobData */3][/* logicInitJobList */0]),
    /* renderInitJobList */init[/* renderInitJobList */1],
    /* logicUpdateJobList */init[/* logicUpdateJobList */2],
    /* renderRenderJobList */init[/* renderRenderJobList */3]
  ];
  return newrecord;
}

function addLogicUpdateJob(targetJobName, afterJobName, targetHandleFunc, state) {
  var newrecord = state.slice();
  var init = state[/* jobData */3];
  newrecord[/* jobData */3] = /* record */[
    /* logicInitJobList */init[/* logicInitJobList */0],
    /* renderInitJobList */init[/* renderInitJobList */1],
    /* logicUpdateJobList */JobSystem$Wonderjs.addJob(/* tuple */[
          targetJobName,
          afterJobName,
          targetHandleFunc
        ], state[/* jobData */3][/* logicUpdateJobList */2]),
    /* renderRenderJobList */init[/* renderRenderJobList */3]
  ];
  return newrecord;
}

function removeLogicInitJob(targetJobName, state) {
  var newrecord = state.slice();
  var init = state[/* jobData */3];
  newrecord[/* jobData */3] = /* record */[
    /* logicInitJobList */JobSystem$Wonderjs.removeJob(targetJobName, state[/* jobData */3][/* logicInitJobList */0]),
    /* renderInitJobList */init[/* renderInitJobList */1],
    /* logicUpdateJobList */init[/* logicUpdateJobList */2],
    /* renderRenderJobList */init[/* renderRenderJobList */3]
  ];
  return newrecord;
}

function removeLogicUpdateJob(targetJobName, state) {
  var newrecord = state.slice();
  var init = state[/* jobData */3];
  newrecord[/* jobData */3] = /* record */[
    /* logicInitJobList */init[/* logicInitJobList */0],
    /* renderInitJobList */init[/* renderInitJobList */1],
    /* logicUpdateJobList */JobSystem$Wonderjs.removeJob(targetJobName, state[/* jobData */3][/* logicUpdateJobList */2]),
    /* renderRenderJobList */init[/* renderRenderJobList */3]
  ];
  return newrecord;
}

export {
  _getAllLogicJobs       ,
  _getLogicInitJobList   ,
  _getLogicUpdateJobList ,
  execLogicInitJobs      ,
  execLogicUpdateJobs    ,
  init                   ,
  addLogicInitJob        ,
  addLogicUpdateJob      ,
  removeLogicInitJob     ,
  removeLogicUpdateJob   ,
  
}
/* JobSystem-Wonderjs Not a pure module */
