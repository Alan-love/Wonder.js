// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as Curry                           from "../../../../../../../node_modules/bs-platform/lib/es6/curry.js";
import * as Js_primitive                    from "../../../../../../../node_modules/bs-platform/lib/es6/js_primitive.js";
import * as Log$WonderLog                   from "../../../../../../../node_modules/wonder-log/lib/es6_global/src/Log.js";
import * as Contract$WonderLog              from "../../../../../../../node_modules/wonder-log/lib/es6_global/src/Contract.js";
import * as StateData$Wonderjs              from "../../../../core/StateData.js";
import * as SparseMapSystem$WonderCommonlib from "../../../../../../../node_modules/wonder-commonlib/lib/es6_global/src/SparseMapSystem.js";

var addComponentToGameObjectMap = SparseMapSystem$WonderCommonlib.set;

var getComponentGameObject = SparseMapSystem$WonderCommonlib.get;

function unsafeGetComponentGameObject(component, gameObjectMap) {
  return Contract$WonderLog.ensureCheck((function (gameObject) {
                return Contract$WonderLog.test(Log$WonderLog.buildAssertMessage("component\'s gameObject exist", "not"), (function () {
                              return Contract$WonderLog.assertNullableExist(gameObject);
                            }));
              }), StateData$Wonderjs.stateData[/* isDebug */1], SparseMapSystem$WonderCommonlib.unsafeGet(component, gameObjectMap));
}

function checkComponentShouldAlive(component, isAliveFunc, state) {
  return Contract$WonderLog.test(Log$WonderLog.buildAssertMessage("component alive", "not"), (function () {
                return Contract$WonderLog.assertTrue(Curry._2(isAliveFunc, component, state));
              }));
}

function _getDisposedIndex(disposedIndexArray) {
  return /* tuple */[
          disposedIndexArray,
          Js_primitive.undefined_to_opt(disposedIndexArray.pop())
        ];
}

function generateIndex(index, disposedIndexArray) {
  var match = _getDisposedIndex(disposedIndexArray);
  var match$1 = match[1];
  var disposedIndexArray$1 = match[0];
  if (match$1) {
    return /* tuple */[
            match$1[0],
            index,
            disposedIndexArray$1
          ];
  } else {
    return /* tuple */[
            index,
            index + 1 | 0,
            disposedIndexArray$1
          ];
  }
}

export {
  addComponentToGameObjectMap  ,
  getComponentGameObject       ,
  unsafeGetComponentGameObject ,
  checkComponentShouldAlive    ,
  _getDisposedIndex            ,
  generateIndex                ,
  
}
/* Log-WonderLog Not a pure module */
