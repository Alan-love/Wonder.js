// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as Log$WonderLog                           from "../../../../../../../node_modules/wonder-log/lib/es6_global/src/Log.js";
import * as Contract$WonderLog                      from "../../../../../../../node_modules/wonder-log/lib/es6_global/src/Contract.js";
import * as StateData$Wonderjs                      from "../../../../core/StateData.js";
import * as Matrix4System$Wonderjs                  from "../../../../structure/Matrix4System.js";
import * as SparseMapSystem$WonderCommonlib         from "../../../../../../../node_modules/wonder-commonlib/lib/es6_global/src/SparseMapSystem.js";
import * as CameraControllerStateCommon$Wonderjs    from "./CameraControllerStateCommon.js";
import * as PerspectiveCameraOperateCommon$Wonderjs from "./PerspectiveCameraOperateCommon.js";

function setDefaultPMatrix(cameraController, pMatrixMap) {
  return SparseMapSystem$WonderCommonlib.set(cameraController, Matrix4System$Wonderjs.createIdentityMatrix4(/* () */0), pMatrixMap);
}

function _unsafeGetPMatrix(cameraController, cameraControllerData) {
  return Contract$WonderLog.ensureCheck((function (pMatrix) {
                return Contract$WonderLog.test(Log$WonderLog.buildAssertMessage("pMatrix exist", "not"), (function () {
                              return Contract$WonderLog.assertNullableExist(pMatrix);
                            }));
              }), StateData$Wonderjs.stateData[/* isDebug */1], SparseMapSystem$WonderCommonlib.unsafeGet(cameraController, cameraControllerData[/* pMatrixMap */3]));
}

function update(index, cameraControllerData) {
  var cameraData = CameraControllerStateCommon$Wonderjs.getPerspectiveCameraDataFromCameraControllerData(cameraControllerData);
  var match = PerspectiveCameraOperateCommon$Wonderjs.getFovy(index, cameraData);
  var match$1 = PerspectiveCameraOperateCommon$Wonderjs.getAspect(index, cameraData);
  var match$2 = PerspectiveCameraOperateCommon$Wonderjs.getNear(index, cameraData);
  var match$3 = PerspectiveCameraOperateCommon$Wonderjs.getFar(index, cameraData);
  var exit = 0;
  if (match) {
    if (match$1) {
      if (match$2) {
        if (match$3) {
          Matrix4System$Wonderjs.buildPerspective(/* tuple */[
                match[0],
                match$1[0],
                match$2[0],
                match$3[0]
              ], _unsafeGetPMatrix(index, cameraControllerData));
          return cameraControllerData;
        } else {
          exit = 1;
        }
      } else {
        exit = 1;
      }
    } else {
      exit = 1;
    }
  } else {
    exit = 1;
  }
  if (exit === 1) {
    Log$WonderLog.fatal(Log$WonderLog.buildFatalMessage("update", "fovy,aspect,near,far should all exist", "", "", "cameraController: " + (String(index) + "")));
    return cameraControllerData;
  }
  
}

var init = update;

var getFovy = PerspectiveCameraOperateCommon$Wonderjs.getFovy;

var setFovy = PerspectiveCameraOperateCommon$Wonderjs.setFovy;

var getAspect = PerspectiveCameraOperateCommon$Wonderjs.getAspect;

var setAspect = PerspectiveCameraOperateCommon$Wonderjs.setAspect;

var getFar = PerspectiveCameraOperateCommon$Wonderjs.getFar;

var setFar = PerspectiveCameraOperateCommon$Wonderjs.setFar;

var getNear = PerspectiveCameraOperateCommon$Wonderjs.getNear;

var setNear = PerspectiveCameraOperateCommon$Wonderjs.setNear;

export {
  getFovy           ,
  setFovy           ,
  getAspect         ,
  setAspect         ,
  getFar            ,
  setFar            ,
  getNear           ,
  setNear           ,
  setDefaultPMatrix ,
  _unsafeGetPMatrix ,
  update            ,
  init              ,
  
}
/* Log-WonderLog Not a pure module */
