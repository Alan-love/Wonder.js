// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as Contract$Wonderjs                       from "../../../../definition/Contract.js";
import * as Matrix4System$Wonderjs                  from "../../../../structure/Matrix4System.js";
import * as ExceptionHandleSystem$Wonderjs          from "../../../../exception/ExceptionHandleSystem.js";
import * as SparseMapSystem$WonderCommonlib         from "../../../../../../../node_modules/wonder-commonlib/lib/es6_global/src/SparseMapSystem.js";
import * as CameraControllerStateCommon$Wonderjs    from "./CameraControllerStateCommon.js";
import * as PerspectiveCameraOperateCommon$Wonderjs from "./PerspectiveCameraOperateCommon.js";

function setDefaultPMatrix(cameraController, cameraControllerData) {
  SparseMapSystem$WonderCommonlib.set(cameraController, Matrix4System$Wonderjs.createIdentityMatrix4(/* () */0), cameraControllerData[/* pMatrixMap */3]);
  return cameraControllerData;
}

function _unsafeGetPMatrix(cameraController, cameraControllerData) {
  return Contract$Wonderjs.ensureCheck((function () {
                return Contract$Wonderjs.test("pMatrix should exist", (function () {
                              return Contract$Wonderjs.assertExist(SparseMapSystem$WonderCommonlib.get(cameraController, cameraControllerData[/* pMatrixMap */3]));
                            }));
              }), SparseMapSystem$WonderCommonlib.unsafeGet(cameraController, cameraControllerData[/* pMatrixMap */3]));
}

function update(index, cameraControllerData) {
  var cameraData = CameraControllerStateCommon$Wonderjs.getPerspectiveCameraDataFromCameraControllerData(cameraControllerData);
  var match = PerspectiveCameraOperateCommon$Wonderjs.getFovy(index, cameraData);
  var match$1 = PerspectiveCameraOperateCommon$Wonderjs.getAspect(index, cameraData);
  var match$2 = PerspectiveCameraOperateCommon$Wonderjs.getNear(index, cameraData);
  var match$3 = PerspectiveCameraOperateCommon$Wonderjs.getFar(index, cameraData);
  if (match && match$1 && match$2 && match$3) {
    Matrix4System$Wonderjs.buildPerspective(match[0], match$1[0], match$2[0], match$3[0], _unsafeGetPMatrix(index, cameraControllerData));
  } else {
    ExceptionHandleSystem$Wonderjs.throwMessage("fovy,aspect,near,far should all exist");
  }
  return /* () */0;
}

var init = update;

var getFovy = PerspectiveCameraOperateCommon$Wonderjs.getFovy;

var setFovy = PerspectiveCameraOperateCommon$Wonderjs.setFovy;

var getAspect = PerspectiveCameraOperateCommon$Wonderjs.getAspect;

var setAspect = PerspectiveCameraOperateCommon$Wonderjs.setAspect;

var getFar = PerspectiveCameraOperateCommon$Wonderjs.getFar;

var setFar = PerspectiveCameraOperateCommon$Wonderjs.setFar;

var getNear = PerspectiveCameraOperateCommon$Wonderjs.getNear;

var setNear = PerspectiveCameraOperateCommon$Wonderjs.setNear;

export {
  getFovy           ,
  setFovy           ,
  getAspect         ,
  setAspect         ,
  getFar            ,
  setFar            ,
  getNear           ,
  setNear           ,
  setDefaultPMatrix ,
  _unsafeGetPMatrix ,
  update            ,
  init              ,
  
}
/* CameraControllerStateCommon-Wonderjs Not a pure module */
