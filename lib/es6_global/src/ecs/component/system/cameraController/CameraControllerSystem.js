// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as Curry                                           from "../../../../../../../node_modules/bs-platform/lib/es6/curry.js";
import * as Log$WonderLog                                   from "../../../../../../../node_modules/wonder-log/lib/es6_global/src/Log.js";
import * as Contract$WonderLog                              from "../../../../../../../node_modules/wonder-log/lib/es6_global/src/Contract.js";
import * as StateData$Wonderjs                              from "../../../../core/StateData.js";
import * as Matrix4System$Wonderjs                          from "../../../../structure/Matrix4System.js";
import * as ComponentSystem$Wonderjs                        from "../component/ComponentSystem.js";
import * as TransformSystem$Wonderjs                        from "../transform/TransformSystem.js";
import * as ArraySystem$WonderCommonlib                     from "../../../../../../../node_modules/wonder-commonlib/lib/es6_global/src/ArraySystem.js";
import * as SparseMapSystem$WonderCommonlib                 from "../../../../../../../node_modules/wonder-commonlib/lib/es6_global/src/SparseMapSystem.js";
import * as PerspectiveCameraSystem$Wonderjs                from "./PerspectiveCameraSystem.js";
import * as CameraControllerDirtyCommon$Wonderjs            from "./CameraControllerDirtyCommon.js";
import * as CameraControllerStateCommon$Wonderjs            from "./CameraControllerStateCommon.js";
import * as CameraControllerCreateCommon$Wonderjs           from "./CameraControllerCreateCommon.js";
import * as CameraControllerDisposeComponentCommon$Wonderjs from "./CameraControllerDisposeComponentCommon.js";

var create = CameraControllerCreateCommon$Wonderjs.create;

function getCurrentCameraController(state) {
  Contract$WonderLog.requireCheck((function () {
          return Contract$WonderLog.test(Log$WonderLog.buildAssertMessage("has at least one camera", "has 0"), (function () {
                        var match = CameraControllerStateCommon$Wonderjs.getCameraControllerData(state);
                        var cameraArray = match[/* cameraArray */1];
                        return Contract$WonderLog.Operators[/* > */5](cameraArray.length, 0);
                      }));
        }), StateData$Wonderjs.stateData[/* isDebug */1]);
  var match = CameraControllerStateCommon$Wonderjs.getCameraControllerData(state);
  var cameraArray = match[/* cameraArray */1];
  return ArraySystem$WonderCommonlib.get(0, cameraArray);
}

var _initCameraController = PerspectiveCameraSystem$Wonderjs.init;

function init(state) {
  var cameraControllerData = CameraControllerStateCommon$Wonderjs.getCameraControllerData(state);
  var dirtyArray = cameraControllerData[/* dirtyArray */2];
  var match = dirtyArray.length;
  if (match !== 0) {
    ArraySystem$WonderCommonlib.removeDuplicateItems(dirtyArray).forEach((function (dirtyIndex) {
            PerspectiveCameraSystem$Wonderjs.init(dirtyIndex, cameraControllerData);
            return /* () */0;
          }));
    return state;
  } else {
    return state;
  }
}

function setPerspectiveCamera(cameraController, state) {
  var cameraControllerData = CameraControllerStateCommon$Wonderjs.getCameraControllerData(state);
  SparseMapSystem$WonderCommonlib.set(cameraController, PerspectiveCameraSystem$Wonderjs.update, cameraControllerData[/* updateCameraFuncMap */5]);
  return state;
}

function _updateCamera(index, cameraControllerData) {
  var updateFunc = SparseMapSystem$WonderCommonlib.unsafeGet(index, cameraControllerData[/* updateCameraFuncMap */5]);
  Curry._2(updateFunc, index, cameraControllerData);
  return /* () */0;
}

function update(state) {
  var cameraControllerData = CameraControllerStateCommon$Wonderjs.getCameraControllerData(state);
  var dirtyArray = cameraControllerData[/* dirtyArray */2];
  ArraySystem$WonderCommonlib.removeDuplicateItems(dirtyArray).forEach((function (dirtyIndex) {
          return _updateCamera(dirtyIndex, cameraControllerData);
        }));
  CameraControllerDirtyCommon$Wonderjs.cleanDirtyArray(cameraControllerData);
  return state;
}

function getGameObject(cameraController, state) {
  return ComponentSystem$Wonderjs.getComponentGameObject(cameraController, CameraControllerStateCommon$Wonderjs.getCameraControllerData(state)[/* gameObjectMap */4]);
}

var _getCameraToWorldMatrixByTransform = TransformSystem$Wonderjs.getLocalToWorldMatrixTypeArray;

var _getCameraToWorldMatrix = TransformSystem$Wonderjs.getLocalToWorldMatrixTypeArray;

function getWorldToCameraMatrix(transform, state) {
  return Matrix4System$Wonderjs.invert(TransformSystem$Wonderjs.getLocalToWorldMatrixTypeArray(transform, state), Matrix4System$Wonderjs.createIdentityMatrix4(/* () */0));
}

function unsafeGetPMatrix(cameraController, state) {
  return Contract$WonderLog.ensureCheck((function (pMatrix) {
                return Contract$WonderLog.test(Log$WonderLog.buildAssertMessage("pMatrix exist", "not"), (function () {
                              return Contract$WonderLog.assertNullableExist(pMatrix);
                            }));
              }), StateData$Wonderjs.stateData[/* isDebug */1], SparseMapSystem$WonderCommonlib.unsafeGet(cameraController, CameraControllerStateCommon$Wonderjs.getCameraControllerData(state)[/* pMatrixMap */3]));
}

var isAlive = CameraControllerDisposeComponentCommon$Wonderjs.isAlive;

var getCameraControllerData = CameraControllerStateCommon$Wonderjs.getCameraControllerData;

var deepCopyStateForRestore = CameraControllerStateCommon$Wonderjs.deepCopyStateForRestore;

export {
  create                             ,
  getCameraControllerData            ,
  getCurrentCameraController         ,
  _initCameraController              ,
  init                               ,
  setPerspectiveCamera               ,
  _updateCamera                      ,
  update                             ,
  getGameObject                      ,
  _getCameraToWorldMatrixByTransform ,
  _getCameraToWorldMatrix            ,
  getWorldToCameraMatrix             ,
  unsafeGetPMatrix                   ,
  isAlive                            ,
  deepCopyStateForRestore            ,
  
}
/* Log-WonderLog Not a pure module */
