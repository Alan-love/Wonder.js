// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as Log$WonderLog                      from "../../../../../../../../node_modules/wonder-log/lib/es6_global/src/Log.js";
import * as Contract$WonderLog                 from "../../../../../../../../node_modules/wonder-log/lib/es6_global/src/Contract.js";
import * as StateData$Wonderjs                 from "../../../../../core/StateData.js";
import * as SparseMapSystem$WonderCommonlib    from "../../../../../../../../node_modules/wonder-commonlib/lib/es6_global/src/SparseMapSystem.js";
import * as SourceInstanceStateCommon$Wonderjs from "./SourceInstanceStateCommon.js";

function markModelMatrixIsStatic(sourceInstance, isStatic, state) {
  var data = SourceInstanceStateCommon$Wonderjs.getSourceInstanceData(state);
  var newrecord = state.slice();
  var newrecord$1 = data.slice();
  newrecord$1[/* isTransformStaticMap */4] = SparseMapSystem$WonderCommonlib.set(sourceInstance, isStatic, data[/* isTransformStaticMap */4]);
  newrecord[/* sourceInstanceData */7] = newrecord$1;
  return newrecord;
}

function isTransformStatic(sourceInstance, state) {
  return Contract$WonderLog.ensureCheck((function (isStatic) {
                return Contract$WonderLog.test(Log$WonderLog.buildAssertMessage("isStatic exist", "not"), (function () {
                              return Contract$WonderLog.assertNullableExist(isStatic);
                            }));
              }), StateData$Wonderjs.stateData[/* isDebug */1], SparseMapSystem$WonderCommonlib.unsafeGet(sourceInstance, SourceInstanceStateCommon$Wonderjs.getSourceInstanceData(state)[/* isTransformStaticMap */4]));
}

function markIsSendTransformMatrixData(sourceInstance, isSend, state) {
  var data = SourceInstanceStateCommon$Wonderjs.getSourceInstanceData(state);
  var newrecord = state.slice();
  var newrecord$1 = data.slice();
  newrecord$1[/* isSendTransformMatrixDataMap */5] = SparseMapSystem$WonderCommonlib.set(sourceInstance, isSend, data[/* isSendTransformMatrixDataMap */5]);
  newrecord[/* sourceInstanceData */7] = newrecord$1;
  return newrecord;
}

function isSendTransformMatrixData(sourceInstance, state) {
  return Contract$WonderLog.ensureCheck((function (isSend) {
                return Contract$WonderLog.test(Log$WonderLog.buildAssertMessage("isSend exist", "not"), (function () {
                              return Contract$WonderLog.assertNullableExist(isSend);
                            }));
              }), StateData$Wonderjs.stateData[/* isDebug */1], SparseMapSystem$WonderCommonlib.unsafeGet(sourceInstance, SourceInstanceStateCommon$Wonderjs.getSourceInstanceData(state)[/* isSendTransformMatrixDataMap */5]));
}

export {
  markModelMatrixIsStatic       ,
  isTransformStatic             ,
  markIsSendTransformMatrixData ,
  isSendTransformMatrixData     ,
  
}
/* Log-WonderLog Not a pure module */
