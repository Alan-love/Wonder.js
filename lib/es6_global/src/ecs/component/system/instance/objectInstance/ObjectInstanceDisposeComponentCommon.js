// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as Caml_array                               from "../../../../../../../../node_modules/bs-platform/lib/es6/caml_array.js";
import * as Log$WonderLog                            from "../../../../../../../../node_modules/wonder-log/lib/es6_global/src/Log.js";
import * as Contract$WonderLog                       from "../../../../../../../../node_modules/wonder-log/lib/es6_global/src/Contract.js";
import * as StateData$Wonderjs                       from "../../../../../core/StateData.js";
import * as ArraySystem$Wonderjs                     from "../../../../../structure/ArraySystem.js";
import * as ECSDisposeUtils$Wonderjs                 from "../../../../utils/ECSDisposeUtils.js";
import * as ArraySystem$WonderCommonlib              from "../../../../../../../../node_modules/wonder-commonlib/lib/es6_global/src/ArraySystem.js";
import * as SparseMapSystem$WonderCommonlib          from "../../../../../../../../node_modules/wonder-commonlib/lib/es6_global/src/SparseMapSystem.js";
import * as ObjectInstanceStateCommon$Wonderjs       from "./ObjectInstanceStateCommon.js";
import * as InstanceDisposeComponentUtils$Wonderjs   from "../utils/InstanceDisposeComponentUtils.js";
import * as ObjectInstanceGameObjectCommon$Wonderjs  from "./ObjectInstanceGameObjectCommon.js";
import * as ComponentDisposeComponentCommon$Wonderjs from "../../component/ComponentDisposeComponentCommon.js";

function isAlive(objectInstance, state) {
  return ComponentDisposeComponentCommon$Wonderjs.isAlive(objectInstance, ObjectInstanceStateCommon$Wonderjs.getObjectInstanceData(state)[/* disposedIndexArray */2]);
}

function _unsafeGetSourceInstance(objectInstance, param) {
  return Contract$WonderLog.ensureCheck((function (sourceInstance) {
                return Contract$WonderLog.test(Log$WonderLog.buildAssertMessage("souceInstance exist", "not"), (function () {
                              return Contract$WonderLog.assertNullableExist(sourceInstance);
                            }));
              }), StateData$Wonderjs.stateData[/* isDebug */1], SparseMapSystem$WonderCommonlib.unsafeGet(objectInstance, param[/* sourceInstanceMap */1]));
}

function _disposeData(objectInstance, state) {
  var data = ObjectInstanceStateCommon$Wonderjs.getObjectInstanceData(state);
  var newrecord = state.slice();
  newrecord[/* objectInstanceData */8] = /* record */[
    /* index */data[/* index */0],
    /* sourceInstanceMap */ComponentDisposeComponentCommon$Wonderjs.disposeSparseMapData(objectInstance, data[/* sourceInstanceMap */1]),
    /* disposedIndexArray */data[/* disposedIndexArray */2],
    /* gameObjectMap */ComponentDisposeComponentCommon$Wonderjs.disposeSparseMapData(objectInstance, data[/* gameObjectMap */3])
  ];
  return newrecord;
}

function handleDisposeComponent(objectInstance, state) {
  Contract$WonderLog.requireCheck((function () {
          return ComponentDisposeComponentCommon$Wonderjs.checkComponentShouldAlive(objectInstance, isAlive, state);
        }), StateData$Wonderjs.stateData[/* isDebug */1]);
  var data = ObjectInstanceStateCommon$Wonderjs.getObjectInstanceData(state);
  var state$1 = _disposeData(objectInstance, InstanceDisposeComponentUtils$Wonderjs.disposeObjectInstance(_unsafeGetSourceInstance(objectInstance, data), ObjectInstanceGameObjectCommon$Wonderjs.unsafeGetGameObject(objectInstance, state), state));
  var newrecord = state$1.slice();
  newrecord[/* objectInstanceData */8] = /* record */[
    /* index */data[/* index */0],
    /* sourceInstanceMap */data[/* sourceInstanceMap */1],
    /* disposedIndexArray */ArraySystem$Wonderjs.push(objectInstance, data[/* disposedIndexArray */2]),
    /* gameObjectMap */data[/* gameObjectMap */3]
  ];
  return newrecord;
}

function handleBatchDisposeComponent(objectInstanceArray, _, state) {
  Contract$WonderLog.requireCheck((function () {
          var objectInstanceLen = objectInstanceArray.length;
          Contract$WonderLog.test(Log$WonderLog.buildAssertMessage("objectInstanceArray has one objectInstance at least", "" + (String(objectInstanceLen) + "")), (function () {
                  return Contract$WonderLog.Operators[/* > */5](objectInstanceLen, 0);
                }));
          return Contract$WonderLog.test(Log$WonderLog.buildAssertMessage("all objectInstance belong to the same sourceInstance", "not"), (function () {
                        var data = ObjectInstanceStateCommon$Wonderjs.getObjectInstanceData(state);
                        var sourceInstance = _unsafeGetSourceInstance(Caml_array.caml_array_get(objectInstanceArray, 0), data);
                        return ArraySystem$WonderCommonlib.forEach((function (objectInstance) {
                                      return Contract$WonderLog.Operators[/* = */0](_unsafeGetSourceInstance(objectInstance, data), sourceInstance);
                                    }), objectInstanceArray);
                      }));
        }), StateData$Wonderjs.stateData[/* isDebug */1]);
  var data = ObjectInstanceStateCommon$Wonderjs.getObjectInstanceData(state);
  var data_000 = /* index */data[/* index */0];
  var data_001 = /* sourceInstanceMap */data[/* sourceInstanceMap */1];
  var data_002 = /* disposedIndexArray */data[/* disposedIndexArray */2].concat(objectInstanceArray);
  var data_003 = /* gameObjectMap */data[/* gameObjectMap */3];
  var data$1 = /* record */[
    data_000,
    data_001,
    data_002,
    data_003
  ];
  var disposedUidArr = objectInstanceArray.map((function (objectInstance) {
          return ObjectInstanceGameObjectCommon$Wonderjs.unsafeGetGameObject(objectInstance, state);
        }));
  var disposedUidMap = ECSDisposeUtils$Wonderjs.buildMapFromArray(disposedUidArr, SparseMapSystem$WonderCommonlib.createEmpty(/* () */0));
  var sourceInstance = _unsafeGetSourceInstance(Caml_array.caml_array_get(objectInstanceArray, 0), data$1);
  var state$1 = InstanceDisposeComponentUtils$Wonderjs.batchDisposeObjectInstance(sourceInstance, disposedUidMap, disposedUidArr, state);
  return ArraySystem$Wonderjs.reduceState((function (state, objectInstance) {
                return _disposeData(objectInstance, state);
              }), state$1, objectInstanceArray);
}

export {
  isAlive                     ,
  _unsafeGetSourceInstance    ,
  _disposeData                ,
  handleDisposeComponent      ,
  handleBatchDisposeComponent ,
  
}
/* Log-WonderLog Not a pure module */
