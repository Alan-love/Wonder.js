// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as Caml_array                               from "../../../../../../../../node_modules/bs-platform/lib/es6/caml_array.js";
import * as Contract$Wonderjs                        from "../../../../../definition/Contract.js";
import * as ArraySystem$Wonderjs                     from "../../../../../structure/ArraySystem.js";
import * as ECSDisposeUtils$Wonderjs                 from "../../../../utils/ECSDisposeUtils.js";
import * as ArraySystem$WonderCommonlib              from "../../../../../../../../node_modules/wonder-commonlib/lib/es6_global/src/ArraySystem.js";
import * as SparseMapSystem$WonderCommonlib          from "../../../../../../../../node_modules/wonder-commonlib/lib/es6_global/src/SparseMapSystem.js";
import * as ObjectInstanceStateCommon$Wonderjs       from "./ObjectInstanceStateCommon.js";
import * as InstanceDisposeComponentUtils$Wonderjs   from "../utils/InstanceDisposeComponentUtils.js";
import * as ObjectInstanceGameObjectCommon$Wonderjs  from "./ObjectInstanceGameObjectCommon.js";
import * as ComponentDisposeComponentCommon$Wonderjs from "../../component/ComponentDisposeComponentCommon.js";

function isAlive(objectInstance, state) {
  return ComponentDisposeComponentCommon$Wonderjs.isAlive(objectInstance, ObjectInstanceStateCommon$Wonderjs.getObjectInstanceData(state)[/* disposedIndexArray */2]);
}

function _getSourceInstance(objectInstance, param) {
  var sourceInstanceMap = param[/* sourceInstanceMap */1];
  return Contract$Wonderjs.ensureCheck((function () {
                return Contract$Wonderjs.test("sourceInstance should exist", (function () {
                              return Contract$Wonderjs.assertExist(SparseMapSystem$WonderCommonlib.get(objectInstance, sourceInstanceMap));
                            }));
              }), SparseMapSystem$WonderCommonlib.unsafeGet(objectInstance, sourceInstanceMap));
}

function _disposeData(objectInstance, state) {
  var match = ObjectInstanceStateCommon$Wonderjs.getObjectInstanceData(state);
  ComponentDisposeComponentCommon$Wonderjs.disposeSparseMapData(objectInstance, match[/* sourceInstanceMap */1]);
  ComponentDisposeComponentCommon$Wonderjs.disposeSparseMapData(objectInstance, match[/* gameObjectMap */3]);
  return state;
}

function handleDisposeComponent(objectInstance, state) {
  Contract$Wonderjs.requireCheck((function () {
          return ComponentDisposeComponentCommon$Wonderjs.checkComponentShouldAlive(objectInstance, isAlive, state);
        }));
  var data = ObjectInstanceStateCommon$Wonderjs.getObjectInstanceData(state);
  var disposedIndexArray = data[/* disposedIndexArray */2];
  disposedIndexArray.push(objectInstance);
  return _disposeData(objectInstance, InstanceDisposeComponentUtils$Wonderjs.disposeObjectInstance(_getSourceInstance(objectInstance, data), ObjectInstanceGameObjectCommon$Wonderjs.unsafeGetGameObject(objectInstance, state), state));
}

function handleBatchDisposeComponent(objectInstanceArray, _, state) {
  Contract$Wonderjs.requireCheck((function () {
          ArraySystem$WonderCommonlib.forEach((function (objectInstance) {
                  return ComponentDisposeComponentCommon$Wonderjs.checkComponentShouldAlive(objectInstance, isAlive, state);
                }), objectInstanceArray);
          Contract$Wonderjs.test("objectInstanceArray should has one objectInstance at least", (function () {
                  return Contract$Wonderjs.Operators[/* > */5](objectInstanceArray.length, 0);
                }));
          return Contract$Wonderjs.test("all objectInstance should belong to the same sourceInstance", (function () {
                        var data = ObjectInstanceStateCommon$Wonderjs.getObjectInstanceData(state);
                        var sourceInstance = _getSourceInstance(Caml_array.caml_array_get(objectInstanceArray, 0), data);
                        return ArraySystem$WonderCommonlib.forEach((function (objectInstance) {
                                      return Contract$Wonderjs.Operators[/* = */0](_getSourceInstance(objectInstance, data), sourceInstance);
                                    }), objectInstanceArray);
                      }));
        }));
  var data = ObjectInstanceStateCommon$Wonderjs.getObjectInstanceData(state);
  var disposedIndexArray = data[/* disposedIndexArray */2];
  data[/* disposedIndexArray */2] = disposedIndexArray.concat(objectInstanceArray);
  var disposedUidArr = objectInstanceArray.map((function (objectInstance) {
          return ObjectInstanceGameObjectCommon$Wonderjs.unsafeGetGameObject(objectInstance, state);
        }));
  var disposedUidMap = ECSDisposeUtils$Wonderjs.buildMapFromArray(disposedUidArr, SparseMapSystem$WonderCommonlib.createEmpty(/* () */0));
  var sourceInstance = _getSourceInstance(Caml_array.caml_array_get(objectInstanceArray, 0), data);
  var state$1 = InstanceDisposeComponentUtils$Wonderjs.batchDisposeObjectInstance(sourceInstance, disposedUidMap, disposedUidArr, state);
  return ArraySystem$Wonderjs.reduceState((function (state, objectInstance) {
                return _disposeData(objectInstance, state);
              }), state$1, objectInstanceArray);
}

export {
  isAlive                     ,
  _getSourceInstance          ,
  _disposeData                ,
  handleDisposeComponent      ,
  handleBatchDisposeComponent ,
  
}
/* ArraySystem-Wonderjs Not a pure module */
