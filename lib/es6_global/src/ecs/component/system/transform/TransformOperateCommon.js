// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as Log$WonderLog                    from "../../../../../../../node_modules/wonder-log/lib/es6_global/src/Log.js";
import * as Contract$WonderLog               from "../../../../../../../node_modules/wonder-log/lib/es6_global/src/Contract.js";
import * as StateData$Wonderjs               from "../../../../core/StateData.js";
import * as Matrix3System$Wonderjs           from "../../../../structure/Matrix3System.js";
import * as Matrix4System$Wonderjs           from "../../../../structure/Matrix4System.js";
import * as Vector3System$Wonderjs           from "../../../../structure/Vector3System.js";
import * as GlobalTempSystem$Wonderjs        from "../../../../definition/global_temp/GlobalTempSystem.js";
import * as TransformDirtyCommon$Wonderjs    from "./TransformDirtyCommon.js";
import * as TransformStateCommon$Wonderjs    from "./TransformStateCommon.js";
import * as SparseMapSystem$WonderCommonlib  from "../../../../../../../node_modules/wonder-commonlib/lib/es6_global/src/SparseMapSystem.js";
import * as TransformHierachyCommon$Wonderjs from "./TransformHierachyCommon.js";

function getLocalToWorldMatrixTypeArray(transform, localToWorlMatrixMap) {
  return Contract$WonderLog.ensureCheck((function (localToWorldMatrix) {
                return Contract$WonderLog.test(Log$WonderLog.buildAssertMessage("localToWorldMatrix exist", "not"), (function () {
                              return Contract$WonderLog.assertNullableExist(localToWorldMatrix);
                            }));
              }), StateData$Wonderjs.stateData[/* isDebug */1], SparseMapSystem$WonderCommonlib.unsafeGet(transform, localToWorlMatrixMap));
}

function getNormalMatrixTypeArray(transform, localToWorlMatrixMap, normalMatrixCacheMap) {
  var match = SparseMapSystem$WonderCommonlib.get(transform, normalMatrixCacheMap);
  if (match) {
    return /* tuple */[
            match[0],
            normalMatrixCacheMap
          ];
  } else {
    var normalMatrix = Matrix3System$Wonderjs.transposeSelf(Matrix4System$Wonderjs.invertTo3x3(getLocalToWorldMatrixTypeArray(transform, localToWorlMatrixMap), Matrix3System$Wonderjs.createIdentityMatrix3(/* () */0)));
    return /* tuple */[
            normalMatrix,
            SparseMapSystem$WonderCommonlib.set(transform, normalMatrix, normalMatrixCacheMap)
          ];
  }
}

function getLocalPositionTypeArray(transform, localPositionMap) {
  return Contract$WonderLog.ensureCheck((function (localPosition) {
                return Contract$WonderLog.test(Log$WonderLog.buildAssertMessage("localPosition exist", "not"), (function () {
                              return Contract$WonderLog.assertNullableExist(localPosition);
                            }));
              }), StateData$Wonderjs.stateData[/* isDebug */1], SparseMapSystem$WonderCommonlib.unsafeGet(transform, localPositionMap));
}

function getLocalPositionTuple(transform, localPositionMap) {
  var typeArr = getLocalPositionTypeArray(transform, localPositionMap);
  return /* tuple */[
          typeArr[0],
          typeArr[1],
          typeArr[2]
        ];
}

function setLocalPositionByTuple(transform, param, data) {
  var typeArr = getLocalPositionTypeArray(transform, data[/* localPositionMap */5]);
  typeArr[0] = param[0];
  typeArr[1] = param[1];
  typeArr[2] = param[2];
  return data;
}

function clearCache(data) {
  data[/* normalMatrixCacheMap */7] = SparseMapSystem$WonderCommonlib.createEmpty(/* () */0);
  return data;
}

function update(transform, state) {
  var data = TransformStateCommon$Wonderjs.getTransformData(state);
  var localPositionMap = data[/* localPositionMap */5];
  var localToWorldMatrixMap = data[/* localToWorldMatrixMap */4];
  var match = TransformDirtyCommon$Wonderjs.isDirty(transform, data);
  if (match !== 0) {
    var data$1 = clearCache(TransformDirtyCommon$Wonderjs.mark(transform, /* false */0, data));
    var match$1 = TransformHierachyCommon$Wonderjs.getParent(transform, data$1);
    if (match$1) {
      var parent = match$1[0];
      var state$1 = update(parent, state);
      Matrix4System$Wonderjs.multiply(getLocalToWorldMatrixTypeArray(parent, localToWorldMatrixMap), Matrix4System$Wonderjs.fromTranslation(getLocalPositionTypeArray(transform, localPositionMap), GlobalTempSystem$Wonderjs.getFloat32Array1(state$1)), getLocalToWorldMatrixTypeArray(transform, localToWorldMatrixMap));
      return state$1;
    } else {
      Matrix4System$Wonderjs.fromTranslation(getLocalPositionTypeArray(transform, localPositionMap), getLocalToWorldMatrixTypeArray(transform, localToWorldMatrixMap));
      return state;
    }
  } else {
    return state;
  }
}

function _getPosition(transform, getTranslationFunc, state) {
  var match = TransformStateCommon$Wonderjs.getTransformData(update(transform, state));
  return getTranslationFunc(getLocalToWorldMatrixTypeArray(transform, match[/* localToWorldMatrixMap */4]));
}

function getPositionTypeArray(transform, state) {
  return _getPosition(transform, Matrix4System$Wonderjs.getTranslationTypeArray, state);
}

function getPositionTuple(transform, state) {
  return _getPosition(transform, Matrix4System$Wonderjs.getTranslationTuple, state);
}

function setPositionByTuple(transform, position, data, state) {
  var match = TransformHierachyCommon$Wonderjs.getParent(transform, data);
  if (match) {
    var parent = match[0];
    var data$1 = TransformStateCommon$Wonderjs.getTransformData(update(parent, state));
    return setLocalPositionByTuple(transform, Vector3System$Wonderjs.transformMat4Tuple(position, Matrix4System$Wonderjs.invert(getLocalToWorldMatrixTypeArray(parent, data$1[/* localToWorldMatrixMap */4]), GlobalTempSystem$Wonderjs.getFloat32Array1(state))), data$1);
  } else {
    return setLocalPositionByTuple(transform, position, data);
  }
}

export {
  getLocalToWorldMatrixTypeArray ,
  getNormalMatrixTypeArray       ,
  getLocalPositionTypeArray      ,
  getLocalPositionTuple          ,
  setLocalPositionByTuple        ,
  clearCache                     ,
  update                         ,
  _getPosition                   ,
  getPositionTypeArray           ,
  getPositionTuple               ,
  setPositionByTuple             ,
  
}
/* Log-WonderLog Not a pure module */
