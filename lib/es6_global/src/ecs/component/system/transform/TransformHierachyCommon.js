// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as Js_primitive                    from "../../../../../../../node_modules/bs-platform/lib/es6/js_primitive.js";
import * as Log$WonderLog                   from "../../../../../../../node_modules/wonder-log/lib/es6_global/src/Log.js";
import * as Contract$WonderLog              from "../../../../../../../node_modules/wonder-log/lib/es6_global/src/Contract.js";
import * as StateData$Wonderjs              from "../../../../core/StateData.js";
import * as ArraySystem$Wonderjs            from "../../../../structure/ArraySystem.js";
import * as TransformJudgeCommon$Wonderjs   from "./TransformJudgeCommon.js";
import * as SparseMapSystem$WonderCommonlib from "../../../../../../../node_modules/wonder-commonlib/lib/es6_global/src/SparseMapSystem.js";

function _unsafeGetParent(transform, transformData) {
  return SparseMapSystem$WonderCommonlib.unsafeGet(transform, transformData[/* parentMap */1]);
}

function getParent(transform, transformData) {
  return Js_primitive.undefined_to_opt(SparseMapSystem$WonderCommonlib.unsafeGet(transform, transformData[/* parentMap */1]));
}

function removeFromParentMap(child, transformData) {
  SparseMapSystem$WonderCommonlib.deleteVal(child, transformData[/* parentMap */1]);
  return transformData;
}

function unsafeGetChildren(transform, transformData) {
  return Contract$WonderLog.ensureCheck((function (children) {
                return Contract$WonderLog.test(Log$WonderLog.buildAssertMessage("children exist", "not"), (function () {
                              return Contract$WonderLog.assertNullableExist(children);
                            }));
              }), StateData$Wonderjs.stateData[/* isDebug */1], SparseMapSystem$WonderCommonlib.unsafeGet(transform, transformData[/* childMap */2]));
}

function _setChildren(transformData, parent, children) {
  SparseMapSystem$WonderCommonlib.set(parent, children, transformData[/* childMap */2]);
  return transformData;
}

function _removeChild(child, _, children) {
  return ArraySystem$Wonderjs.deleteBySwap(children.indexOf(child), children.length - 1 | 0, children);
}

function removeFromChildMap(parent, child, isKeepOrder, transformData) {
  if (isKeepOrder !== 0) {
    return _setChildren(transformData, parent, unsafeGetChildren(parent, transformData).filter((function (transform) {
                      return +(transform !== child);
                    })));
  } else {
    _removeChild(child, isKeepOrder, unsafeGetChildren(parent, transformData));
    return transformData;
  }
}

function _removeFromParent(currentParent, child, isKeepOrder, transformData) {
  return removeFromChildMap(currentParent, child, isKeepOrder, removeFromParentMap(child, transformData));
}

function _setParent(parent, child, transformData) {
  SparseMapSystem$WonderCommonlib.set(child, parent, transformData[/* parentMap */1]);
  return transformData;
}

function _addChild(parent, child, transformData) {
  unsafeGetChildren(parent, transformData).push(child);
  return transformData;
}

function _addToParent(parent, child, transformData) {
  Contract$WonderLog.requireCheck((function () {
          Contract$WonderLog.test(Log$WonderLog.buildAssertMessage("child not has parent", "has"), (function () {
                  return Contract$WonderLog.assertNotExist(getParent(child, transformData));
                }));
          return Contract$WonderLog.test(Log$WonderLog.buildAssertMessage("parent not already has the child", "has"), (function () {
                        return Contract$WonderLog.assertFalse(+unsafeGetChildren(parent, transformData).includes(child));
                      }));
        }), StateData$Wonderjs.stateData[/* isDebug */1]);
  return _addChild(parent, child, _setParent(parent, child, transformData));
}

function _setNewParent(parent, child, isKeepOrder, transformData) {
  var match = getParent(child, transformData);
  if (match) {
    var currentParent = match[0];
    var match$1 = 1 - TransformJudgeCommon$Wonderjs.isSame(currentParent, parent);
    if (match$1 !== 0) {
      return _addToParent(parent, child, _removeFromParent(currentParent, child, isKeepOrder, transformData));
    } else {
      return transformData;
    }
  } else {
    return _addToParent(parent, child, transformData);
  }
}

function _setParent$1(parent, child, isKeepOrder, transformData) {
  if (parent) {
    return _setNewParent(parent[0], child, isKeepOrder, transformData);
  } else {
    var match = getParent(child, transformData);
    if (match) {
      return _removeFromParent(match[0], child, isKeepOrder, transformData);
    } else {
      return transformData;
    }
  }
}

function setParent(parent, child, transformData) {
  return _setParent$1(parent, child, /* false */0, transformData);
}

function setParentKeepOrder(parent, child, transformData) {
  return _setParent$1(parent, child, /* true */1, transformData);
}

export {
  _unsafeGetParent    ,
  getParent           ,
  removeFromParentMap ,
  unsafeGetChildren   ,
  _setChildren        ,
  _removeChild        ,
  removeFromChildMap  ,
  _removeFromParent   ,
  _addChild           ,
  _addToParent        ,
  _setNewParent       ,
  _setParent$1          as _setParent,
  setParent           ,
  setParentKeepOrder  ,
  
}
/* Log-WonderLog Not a pure module */
