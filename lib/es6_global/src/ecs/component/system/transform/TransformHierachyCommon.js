// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as Js_primitive                    from "../../../../../../../node_modules/bs-platform/lib/es6/js_primitive.js";
import * as Contract$Wonderjs               from "../../../../definition/Contract.js";
import * as ArraySystem$Wonderjs            from "../../../../structure/ArraySystem.js";
import * as TransformJudgeCommon$Wonderjs   from "./TransformJudgeCommon.js";
import * as SparseMapSystem$WonderCommonlib from "../../../../../../../node_modules/wonder-commonlib/lib/es6_global/src/SparseMapSystem.js";

function _unsafeGetParent(index, transformData) {
  return SparseMapSystem$WonderCommonlib.unsafeGet(index, transformData[/* parentMap */1]);
}

function getParent(index, transformData) {
  return Js_primitive.undefined_to_opt(SparseMapSystem$WonderCommonlib.unsafeGet(index, transformData[/* parentMap */1]));
}

function removeFromParentMap(childIndex, transformData) {
  SparseMapSystem$WonderCommonlib.deleteVal(childIndex, transformData[/* parentMap */1]);
  return transformData;
}

function unsafeGetChildren(index, transformData) {
  return Contract$Wonderjs.ensureCheck((function () {
                return Contract$Wonderjs.test("children should exist", (function () {
                              return Contract$Wonderjs.assertExist(SparseMapSystem$WonderCommonlib.get(index, transformData[/* childMap */2]));
                            }));
              }), SparseMapSystem$WonderCommonlib.unsafeGet(index, transformData[/* childMap */2]));
}

function _removeChild(childIndex, children) {
  return ArraySystem$Wonderjs.deleteBySwap(children.indexOf(childIndex), children.length - 1 | 0, children);
}

function removeFromChildMap(parentIndex, childIndex, transformData) {
  _removeChild(childIndex, unsafeGetChildren(parentIndex, transformData));
  return transformData;
}

function _removeFromParent(currentParentIndex, child, transformData) {
  return removeFromChildMap(currentParentIndex, child, removeFromParentMap(child, transformData));
}

function _setParent(parent, childIndex, transformData) {
  SparseMapSystem$WonderCommonlib.set(childIndex, parent, transformData[/* parentMap */1]);
  return transformData;
}

function _addChild(parentIndex, child, transformData) {
  unsafeGetChildren(parentIndex, transformData).push(child);
  return transformData;
}

function _addToParent(parent, child, transformData) {
  Contract$Wonderjs.requireCheck((function () {
          Contract$Wonderjs.test("child shouldn't has parent", (function () {
                  return Contract$Wonderjs.assertNotExist(getParent(child, transformData));
                }));
          return Contract$Wonderjs.test("parent shouldn't already has the child", (function () {
                        return Contract$Wonderjs.assertFalse(+unsafeGetChildren(parent, transformData).includes(child));
                      }));
        }));
  return _addChild(parent, child, _setParent(parent, child, transformData));
}

function setParent(parent, child, transformData) {
  if (parent) {
    var newParent = parent[0];
    var match = getParent(child, transformData);
    if (match) {
      var currentParent = match[0];
      var match$1 = 1 - TransformJudgeCommon$Wonderjs.isSame(currentParent, newParent);
      if (match$1 !== 0) {
        return _addToParent(newParent, child, _removeFromParent(currentParent, child, transformData));
      } else {
        return transformData;
      }
    } else {
      return _addToParent(newParent, child, transformData);
    }
  } else {
    var match$2 = getParent(child, transformData);
    if (match$2) {
      return _removeFromParent(match$2[0], child, transformData);
    } else {
      return transformData;
    }
  }
}

export {
  _unsafeGetParent    ,
  getParent           ,
  removeFromParentMap ,
  unsafeGetChildren   ,
  _removeChild        ,
  removeFromChildMap  ,
  _removeFromParent   ,
  _setParent          ,
  _addChild           ,
  _addToParent        ,
  setParent           ,
  
}
/* ArraySystem-Wonderjs Not a pure module */
