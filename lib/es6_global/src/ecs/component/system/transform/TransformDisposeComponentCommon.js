// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as Contract$Wonderjs                        from "../../../../definition/Contract.js";
import * as ArraySystem$WonderCommonlib              from "../../../../../../../node_modules/wonder-commonlib/lib/es6_global/src/ArraySystem.js";
import * as MemoryConfigSystem$Wonderjs              from "../../../../config/MemoryConfigSystem.js";
import * as TransformStateCommon$Wonderjs            from "./TransformStateCommon.js";
import * as TransformHierachyCommon$Wonderjs         from "./TransformHierachyCommon.js";
import * as TransformTypeArrayPoolCommon$Wonderjs    from "./TransformTypeArrayPoolCommon.js";
import * as ComponentDisposeComponentCommon$Wonderjs from "../component/ComponentDisposeComponentCommon.js";

function isAlive(transform, state) {
  return ComponentDisposeComponentCommon$Wonderjs.isAlive(transform, TransformStateCommon$Wonderjs.getTransformData(state)[/* disposedIndexArray */7]);
}

function _disposeFromParentAndChildMap(transform, data) {
  ArraySystem$WonderCommonlib.forEach((function (child) {
          TransformHierachyCommon$Wonderjs.removeFromParentMap(child, data);
          return /* () */0;
        }), TransformHierachyCommon$Wonderjs.unsafeGetChildren(transform, data));
  var match = TransformHierachyCommon$Wonderjs.getParent(transform, data);
  if (match) {
    TransformHierachyCommon$Wonderjs.removeFromChildMap(match[0], transform, data);
  }
  return data;
}

function _disposeData(transform, state) {
  var data = TransformStateCommon$Wonderjs.getTransformData(state);
  var localPositionMap = data[/* localPositionMap */5];
  var localToWorldMatrixMap = data[/* localToWorldMatrixMap */4];
  _disposeFromParentAndChildMap(transform, data);
  var state$1 = TransformTypeArrayPoolCommon$Wonderjs.addTypeArrayToPool(transform, MemoryConfigSystem$Wonderjs.getMaxTypeArrayPoolSize(state), /* tuple */[
        localToWorldMatrixMap,
        localPositionMap
      ], state);
  ComponentDisposeComponentCommon$Wonderjs.disposeSparseMapData(transform, localToWorldMatrixMap);
  ComponentDisposeComponentCommon$Wonderjs.disposeSparseMapData(transform, localPositionMap);
  ComponentDisposeComponentCommon$Wonderjs.disposeSparseMapData(transform, data[/* parentMap */1]);
  ComponentDisposeComponentCommon$Wonderjs.disposeSparseMapData(transform, data[/* childMap */2]);
  ComponentDisposeComponentCommon$Wonderjs.disposeSparseMapData(transform, data[/* dirtyMap */6]);
  ComponentDisposeComponentCommon$Wonderjs.disposeSparseMapData(transform, data[/* gameObjectMap */3]);
  return state$1;
}

function handleDisposeComponent(transform, state) {
  Contract$Wonderjs.requireCheck((function () {
          return ComponentDisposeComponentCommon$Wonderjs.checkComponentShouldAlive(transform, isAlive, state);
        }));
  var data = TransformStateCommon$Wonderjs.getTransformData(state);
  var disposedIndexArray = data[/* disposedIndexArray */7];
  disposedIndexArray.push(transform);
  return _disposeData(transform, state);
}

function handleBatchDisposeComponent(transformArray, _, state) {
  Contract$Wonderjs.requireCheck((function () {
          return ArraySystem$WonderCommonlib.forEach((function (transform) {
                        return ComponentDisposeComponentCommon$Wonderjs.checkComponentShouldAlive(transform, isAlive, state);
                      }), transformArray);
        }));
  var data = TransformStateCommon$Wonderjs.getTransformData(state);
  var disposedIndexArray = data[/* disposedIndexArray */7];
  data[/* disposedIndexArray */7] = disposedIndexArray.concat(transformArray);
  ArraySystem$WonderCommonlib.forEach((function (transform) {
          return _disposeData(transform, state);
        }), transformArray);
  return state;
}

export {
  isAlive                       ,
  _disposeFromParentAndChildMap ,
  _disposeData                  ,
  handleDisposeComponent        ,
  handleBatchDisposeComponent   ,
  
}
/* ArraySystem-WonderCommonlib Not a pure module */
