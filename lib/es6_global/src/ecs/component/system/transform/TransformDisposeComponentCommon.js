// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as Contract$WonderLog                       from "../../../../../../../node_modules/wonder-log/lib/es6_global/src/Contract.js";
import * as StateData$Wonderjs                       from "../../../../core/StateData.js";
import * as ArraySystem$Wonderjs                     from "../../../../structure/ArraySystem.js";
import * as ArraySystem$WonderCommonlib              from "../../../../../../../node_modules/wonder-commonlib/lib/es6_global/src/ArraySystem.js";
import * as MemoryConfigSystem$Wonderjs              from "../../../../config/MemoryConfigSystem.js";
import * as TransformStateCommon$Wonderjs            from "./TransformStateCommon.js";
import * as TransformHierachyCommon$Wonderjs         from "./TransformHierachyCommon.js";
import * as TransformTypeArrayPoolCommon$Wonderjs    from "./TransformTypeArrayPoolCommon.js";
import * as ComponentDisposeComponentCommon$Wonderjs from "../component/ComponentDisposeComponentCommon.js";

function isAlive(transform, state) {
  return ComponentDisposeComponentCommon$Wonderjs.isAlive(transform, TransformStateCommon$Wonderjs.getTransformData(state)[/* disposedIndexArray */8]);
}

function _disposeFromParentAndChildMap(transform, data) {
  ArraySystem$WonderCommonlib.reduceOneParam((function (data, child) {
          return TransformHierachyCommon$Wonderjs.removeFromParentMap(child, data);
        }), data, TransformHierachyCommon$Wonderjs.unsafeGetChildren(transform, data));
  var match = TransformHierachyCommon$Wonderjs.getParent(transform, data);
  if (match) {
    return TransformHierachyCommon$Wonderjs.removeFromChildMap(match[0], transform, /* false */0, data);
  } else {
    return data;
  }
}

function _disposeData(transform, state) {
  var newrecord = state.slice();
  newrecord[/* transformData */13] = _disposeFromParentAndChildMap(transform, TransformStateCommon$Wonderjs.getTransformData(state));
  var data = TransformStateCommon$Wonderjs.getTransformData(newrecord);
  var localPositionMap = data[/* localPositionMap */5];
  var localToWorldMatrixMap = data[/* localToWorldMatrixMap */4];
  var state$1 = TransformTypeArrayPoolCommon$Wonderjs.addTypeArrayToPool(transform, MemoryConfigSystem$Wonderjs.getMaxTypeArrayPoolSize(newrecord), /* tuple */[
        localToWorldMatrixMap,
        localPositionMap
      ], newrecord);
  var newrecord$1 = state$1.slice();
  newrecord$1[/* transformData */13] = /* record */[
    /* index */data[/* index */0],
    /* parentMap */ComponentDisposeComponentCommon$Wonderjs.disposeSparseMapData(transform, data[/* parentMap */1]),
    /* childMap */ComponentDisposeComponentCommon$Wonderjs.disposeSparseMapData(transform, data[/* childMap */2]),
    /* gameObjectMap */ComponentDisposeComponentCommon$Wonderjs.disposeSparseMapData(transform, data[/* gameObjectMap */3]),
    /* localToWorldMatrixMap */ComponentDisposeComponentCommon$Wonderjs.disposeSparseMapData(transform, localToWorldMatrixMap),
    /* localPositionMap */ComponentDisposeComponentCommon$Wonderjs.disposeSparseMapData(transform, localPositionMap),
    /* dirtyMap */ComponentDisposeComponentCommon$Wonderjs.disposeSparseMapData(transform, data[/* dirtyMap */6]),
    /* normalMatrixCacheMap */data[/* normalMatrixCacheMap */7],
    /* disposedIndexArray */data[/* disposedIndexArray */8]
  ];
  return newrecord$1;
}

function handleDisposeComponent(transform, state) {
  Contract$WonderLog.requireCheck((function () {
          return ComponentDisposeComponentCommon$Wonderjs.checkComponentShouldAlive(transform, isAlive, state);
        }), StateData$Wonderjs.stateData[/* isDebug */1]);
  var state$1 = _disposeData(transform, state);
  var data = TransformStateCommon$Wonderjs.getTransformData(state$1);
  var newrecord = state$1.slice();
  var newrecord$1 = data.slice();
  newrecord$1[/* disposedIndexArray */8] = ArraySystem$Wonderjs.push(transform, data[/* disposedIndexArray */8]);
  newrecord[/* transformData */13] = newrecord$1;
  return newrecord;
}

function handleBatchDisposeComponent(transformArray, _, state) {
  Contract$WonderLog.requireCheck((function () {
          return ComponentDisposeComponentCommon$Wonderjs.checkComponentShouldAliveWithBatchDispose(transformArray, isAlive, state);
        }), StateData$Wonderjs.stateData[/* isDebug */1]);
  var data = TransformStateCommon$Wonderjs.getTransformData(state);
  var newrecord = state.slice();
  var newrecord$1 = data.slice();
  newrecord$1[/* disposedIndexArray */8] = data[/* disposedIndexArray */8].concat(transformArray);
  newrecord[/* transformData */13] = newrecord$1;
  return ArraySystem$Wonderjs.reduceState((function (state, transform) {
                return _disposeData(transform, state);
              }), newrecord, transformArray);
}

export {
  isAlive                       ,
  _disposeFromParentAndChildMap ,
  _disposeData                  ,
  handleDisposeComponent        ,
  handleBatchDisposeComponent   ,
  
}
/* Contract-WonderLog Not a pure module */
