// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as TransformDirtyCommon$Wonderjs            from "./TransformDirtyCommon.js";
import * as TransformStateCommon$Wonderjs            from "./TransformStateCommon.js";
import * as TransformCreateCommon$Wonderjs           from "./TransformCreateCommon.js";
import * as TransformOperateCommon$Wonderjs          from "./TransformOperateCommon.js";
import * as TransformHierachyCommon$Wonderjs         from "./TransformHierachyCommon.js";
import * as TransformGameObjectCommon$Wonderjs       from "./TransformGameObjectCommon.js";
import * as TransformAddComponentCommon$Wonderjs     from "./TransformAddComponentCommon.js";
import * as TransformDisposeComponentCommon$Wonderjs from "./TransformDisposeComponentCommon.js";

var isAlive = TransformDisposeComponentCommon$Wonderjs.isAlive;

function getLocalToWorldMatrixTypeArray(transform, state) {
  var match = TransformStateCommon$Wonderjs.getTransformData(TransformOperateCommon$Wonderjs.update(transform, state));
  return TransformOperateCommon$Wonderjs.getLocalToWorldMatrixTypeArray(transform, match[/* localToWorldMatrixMap */4]);
}

function getNormalMatrixTypeArray(transform, state) {
  var match = TransformStateCommon$Wonderjs.getTransformData(TransformOperateCommon$Wonderjs.update(transform, state));
  var normalMatrixCacheMap = match[/* normalMatrixCacheMap */7];
  return TransformOperateCommon$Wonderjs.getNormalMatrixTypeArray(transform, match[/* localToWorldMatrixMap */4], normalMatrixCacheMap);
}

function create(state) {
  var match = TransformCreateCommon$Wonderjs.create(state);
  var index = match[1];
  var state$1 = match[0];
  var newrecord = state$1.slice();
  return /* tuple */[
          (newrecord[/* transformData */13] = TransformDirtyCommon$Wonderjs.mark(index, /* false */0, TransformStateCommon$Wonderjs.getTransformData(state$1)), newrecord),
          index
        ];
}

function getParent(child, state) {
  return TransformHierachyCommon$Wonderjs.getParent(child, TransformStateCommon$Wonderjs.getTransformData(state));
}

var setParentNotMarkDirty = TransformHierachyCommon$Wonderjs.setParent;

var setParentKeepOrderNotMarkDirty = TransformHierachyCommon$Wonderjs.setParentKeepOrder;

function _setParent(parent, child, isKeepOrder, transformData) {
  return TransformDirtyCommon$Wonderjs.markHierachyDirty(child, isKeepOrder !== 0 ? TransformHierachyCommon$Wonderjs.setParentKeepOrder((parent == null) ? /* None */0 : [parent], child, transformData) : TransformHierachyCommon$Wonderjs.setParent((parent == null) ? /* None */0 : [parent], child, transformData));
}

function setParent(parent, child, state) {
  var newrecord = state.slice();
  newrecord[/* transformData */13] = _setParent(parent, child, /* false */0, TransformStateCommon$Wonderjs.getTransformData(state));
  return newrecord;
}

function setParentKeepOrder(parent, child, state) {
  var newrecord = state.slice();
  newrecord[/* transformData */13] = _setParent(parent, child, /* true */1, TransformStateCommon$Wonderjs.getTransformData(state));
  return newrecord;
}

function getChildren(transform, state) {
  return TransformHierachyCommon$Wonderjs.unsafeGetChildren(transform, TransformStateCommon$Wonderjs.getTransformData(state));
}

var unsafeGetChildren = TransformHierachyCommon$Wonderjs.unsafeGetChildren;

function getLocalPositionTypeArray(transform, state) {
  return TransformOperateCommon$Wonderjs.getLocalPositionTypeArray(transform, TransformStateCommon$Wonderjs.getTransformData(state)[/* localPositionMap */5]);
}

function getLocalPositionTuple(transform, state) {
  return TransformOperateCommon$Wonderjs.getLocalPositionTuple(transform, TransformStateCommon$Wonderjs.getTransformData(state)[/* localPositionMap */5]);
}

function setLocalPositionByTuple(transform, localPosition, state) {
  TransformDirtyCommon$Wonderjs.markHierachyDirty(transform, TransformOperateCommon$Wonderjs.setLocalPositionByTuple(transform, localPosition, TransformStateCommon$Wonderjs.getTransformData(state)));
  return state;
}

var getPositionTypeArray = TransformOperateCommon$Wonderjs.getPositionTypeArray;

var getPositionTuple = TransformOperateCommon$Wonderjs.getPositionTuple;

function setPositionByTuple(transform, position, state) {
  TransformDirtyCommon$Wonderjs.markHierachyDirty(transform, TransformOperateCommon$Wonderjs.setPositionByTuple(transform, position, TransformStateCommon$Wonderjs.getTransformData(state), state));
  return state;
}

function getGameObject(transform, state) {
  return TransformGameObjectCommon$Wonderjs.getGameObject(transform, TransformStateCommon$Wonderjs.getTransformData(state));
}

var getTransformData = TransformStateCommon$Wonderjs.getTransformData;

var handleAddComponent = TransformAddComponentCommon$Wonderjs.handleAddComponent;

var deepCopyStateForRestore = TransformStateCommon$Wonderjs.deepCopyStateForRestore;

var restore = TransformStateCommon$Wonderjs.restore;

export {
  getTransformData               ,
  handleAddComponent             ,
  isAlive                        ,
  getLocalToWorldMatrixTypeArray ,
  getNormalMatrixTypeArray       ,
  create                         ,
  getParent                      ,
  setParentNotMarkDirty          ,
  setParentKeepOrderNotMarkDirty ,
  _setParent                     ,
  setParent                      ,
  setParentKeepOrder             ,
  getChildren                    ,
  unsafeGetChildren              ,
  getLocalPositionTypeArray      ,
  getLocalPositionTuple          ,
  setLocalPositionByTuple        ,
  getPositionTypeArray           ,
  getPositionTuple               ,
  setPositionByTuple             ,
  getGameObject                  ,
  deepCopyStateForRestore        ,
  restore                        ,
  
}
/* TransformDirtyCommon-Wonderjs Not a pure module */
