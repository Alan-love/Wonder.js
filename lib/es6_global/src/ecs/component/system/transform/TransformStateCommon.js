// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as CopyStateUtils$Wonderjs               from "../../utils/CopyStateUtils.js";
import * as SparseMapSystem$Wonderjs              from "../../../../structure/SparseMapSystem.js";
import * as MemoryConfigSystem$Wonderjs           from "../../../../config/MemoryConfigSystem.js";
import * as SparseMapSystem$WonderCommonlib       from "../../../../../../../node_modules/wonder-commonlib/lib/es6_global/src/SparseMapSystem.js";
import * as TransformTypeArrayPoolCommon$Wonderjs from "./TransformTypeArrayPoolCommon.js";

function getTransformData(state) {
  return state[/* transformData */13];
}

function deepCopyStateForRestore(state) {
  var match = state[/* transformData */13];
  var index = match[/* index */0];
  var newrecord = state.slice();
  newrecord[/* transformData */13] = /* record */[
    /* index */index,
    /* parentMap */SparseMapSystem$Wonderjs.copy(match[/* parentMap */1]),
    /* childMap */CopyStateUtils$Wonderjs.deepCopyArrayArray(match[/* childMap */2]),
    /* gameObjectMap */SparseMapSystem$Wonderjs.copy(match[/* gameObjectMap */3]),
    /* localToWorldMatrixMap */CopyStateUtils$Wonderjs.deepCopyFloat32ArrayArray(match[/* localToWorldMatrixMap */4]),
    /* localPositionMap */CopyStateUtils$Wonderjs.deepCopyFloat32ArrayArray(match[/* localPositionMap */5]),
    /* dirtyMap */SparseMapSystem$Wonderjs.copy(match[/* dirtyMap */6]),
    /* normalMatrixCacheMap */SparseMapSystem$WonderCommonlib.createEmpty(/* () */0),
    /* disposedIndexArray */match[/* disposedIndexArray */8].slice()
  ];
  return newrecord;
}

function restore(currentState, sharedData, targetState) {
  var match = currentState[/* transformData */13];
  var float32ArrayPoolMap = TransformTypeArrayPoolCommon$Wonderjs.addAllTypeArrayToPool(MemoryConfigSystem$Wonderjs.getMaxTypeArrayPoolSize(targetState), match[/* localToWorldMatrixMap */4], match[/* localPositionMap */5], sharedData[/* float32ArrayPoolMap */1]);
  return /* tuple */[
          targetState,
          /* record */[
            /* gl */sharedData[/* gl */0],
            /* float32ArrayPoolMap */float32ArrayPoolMap,
            /* uint16ArrayPoolMap */sharedData[/* uint16ArrayPoolMap */2]
          ]
        ];
}

export {
  getTransformData        ,
  deepCopyStateForRestore ,
  restore                 ,
  
}
/* CopyStateUtils-Wonderjs Not a pure module */
