// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as TypeArrayUtils$Wonderjs             from "../../../../../utils/TypeArrayUtils.js";
import * as TypeArrayPoolSystem$Wonderjs        from "../../../../../structure/pool/TypeArrayPoolSystem.js";
import * as GeometryOperateCommon$Wonderjs      from "./GeometryOperateCommon.js";
import * as GeometryGetStateDataCommon$Wonderjs from "../GeometryGetStateDataCommon.js";

function getNormals(index, state) {
  return GeometryOperateCommon$Wonderjs.getPoints(index, GeometryGetStateDataCommon$Wonderjs.getGeometryData(state)[/* normalsMap */2]);
}

function unsafeGetNormals(index, state) {
  return GeometryOperateCommon$Wonderjs.unsafeGetPoints(index, GeometryGetStateDataCommon$Wonderjs.getGeometryData(state)[/* normalsMap */2]);
}

function setNormalsWithArray(index, data, state) {
  var geometryData = GeometryGetStateDataCommon$Wonderjs.getGeometryData(state);
  var newrecord = state.slice();
  var newrecord$1 = geometryData.slice();
  newrecord$1[/* normalsMap */2] = GeometryOperateCommon$Wonderjs.setPointsWithArray(/* tuple */[
        index,
        getNormals(index, state),
        data,
        geometryData[/* normalsMap */2]
      ], /* tuple */[
        TypeArrayPoolSystem$Wonderjs.getFloat32TypeArrayFromPool,
        TypeArrayUtils$Wonderjs.fillFloat32Array,
        TypeArrayUtils$Wonderjs.makeFloat32Array
      ], state);
  newrecord[/* geometryData */20] = newrecord$1;
  return newrecord;
}

function setNormals(index, data, state) {
  var geometryData = GeometryGetStateDataCommon$Wonderjs.getGeometryData(state);
  var newrecord = state.slice();
  var newrecord$1 = geometryData.slice();
  newrecord$1[/* normalsMap */2] = GeometryOperateCommon$Wonderjs.setPoints(index, data, geometryData[/* normalsMap */2]);
  newrecord[/* geometryData */20] = newrecord$1;
  return newrecord;
}

export {
  getNormals          ,
  unsafeGetNormals    ,
  setNormalsWithArray ,
  setNormals          ,
  
}
/* TypeArrayUtils-Wonderjs Not a pure module */
