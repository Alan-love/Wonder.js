// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as SparseMapSystem$Wonderjs             from "../../../../structure/SparseMapSystem.js";
import * as MemoryConfigSystem$Wonderjs          from "../../../../config/MemoryConfigSystem.js";
import * as GeometryGetStateDataCommon$Wonderjs  from "./GeometryGetStateDataCommon.js";
import * as GeometryTypeArrayPoolCommon$Wonderjs from "./GeometryTypeArrayPoolCommon.js";

function deepCopyStateForRestore(state) {
  var match = GeometryGetStateDataCommon$Wonderjs.getGeometryData(state);
  var index = match[/* index */0];
  var computeDataFuncMap = match[/* computeDataFuncMap */3];
  var configDataMap = match[/* configDataMap */4];
  var gameObjectMap = match[/* gameObjectMap */5];
  var disposedIndexArray = match[/* disposedIndexArray */6];
  var isInitMap = match[/* isInitMap */7];
  var groupCountMap = match[/* groupCountMap */8];
  var newrecord = state.slice();
  newrecord[/* geometryData */16] = /* Some */[/* record */[
      /* index */index,
      /* verticesMap */SparseMapSystem$Wonderjs.copy(match[/* verticesMap */1]),
      /* indicesMap */SparseMapSystem$Wonderjs.copy(match[/* indicesMap */2]),
      /* computeDataFuncMap */SparseMapSystem$Wonderjs.copy(computeDataFuncMap),
      /* configDataMap */SparseMapSystem$Wonderjs.copy(configDataMap),
      /* gameObjectMap */SparseMapSystem$Wonderjs.copy(gameObjectMap),
      /* disposedIndexArray */disposedIndexArray.slice(),
      /* isInitMap */SparseMapSystem$Wonderjs.copy(isInitMap),
      /* groupCountMap */SparseMapSystem$Wonderjs.copy(groupCountMap)
    ]];
  return newrecord;
}

function restore(currentState, sharedData, targetState) {
  var match = GeometryGetStateDataCommon$Wonderjs.getGeometryData(currentState);
  var match$1 = GeometryTypeArrayPoolCommon$Wonderjs.addAllTypeArrayToPool(MemoryConfigSystem$Wonderjs.getMaxTypeArrayPoolSize(targetState), /* tuple */[
        match[/* verticesMap */1],
        match[/* indicesMap */2]
      ], /* tuple */[
        sharedData[/* float32ArrayPoolMap */1],
        sharedData[/* uint16ArrayPoolMap */2]
      ]);
  return /* tuple */[
          targetState,
          /* record */[
            /* gl */sharedData[/* gl */0],
            /* float32ArrayPoolMap */match$1[0],
            /* uint16ArrayPoolMap */match$1[1]
          ]
        ];
}

export {
  deepCopyStateForRestore ,
  restore                 ,
  
}
/* SparseMapSystem-Wonderjs Not a pure module */
