// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as Contract$Wonderjs                   from "../../../../definition/Contract.js";
import * as TypeArrayUtils$Wonderjs             from "../../../../utils/TypeArrayUtils.js";
import * as TypeArrayPoolSystem$Wonderjs        from "../../../../structure/pool/TypeArrayPoolSystem.js";
import * as SparseMapSystem$WonderCommonlib     from "../../../../../../../node_modules/wonder-commonlib/lib/es6_global/src/SparseMapSystem.js";
import * as GeometryGetStateDataCommon$Wonderjs from "./GeometryGetStateDataCommon.js";

function getVertices(index, state) {
  var match = GeometryGetStateDataCommon$Wonderjs.getGeometryData(state);
  return SparseMapSystem$WonderCommonlib.get(index, match[/* verticesMap */1]);
}

function unsafeGetVertices(index, state) {
  var match = GeometryGetStateDataCommon$Wonderjs.getGeometryData(state);
  var verticesMap = match[/* verticesMap */1];
  return Contract$Wonderjs.ensureCheck((function () {
                return Contract$Wonderjs.test("vertices should exist", (function () {
                              return Contract$Wonderjs.assertExist(SparseMapSystem$WonderCommonlib.get(index, verticesMap));
                            }));
              }), SparseMapSystem$WonderCommonlib.unsafeGet(index, verticesMap));
}

function getVerticesCount(index, state) {
  return unsafeGetVertices(index, state).length;
}

function setVerticesWithArray(index, data, state) {
  var match = GeometryGetStateDataCommon$Wonderjs.getGeometryData(state);
  var match$1 = getVertices(index, state);
  if (match$1) {
    TypeArrayUtils$Wonderjs.fillFloat32Array(match$1[0], data, 0);
    return state;
  } else {
    var match$2 = TypeArrayPoolSystem$Wonderjs.getFloat32TypeArrayFromPool(data.length, state);
    var typeArr = match$2 ? TypeArrayUtils$Wonderjs.fillFloat32Array(match$2[0], data, 0) : new Float32Array(data);
    SparseMapSystem$WonderCommonlib.set(index, typeArr, match[/* verticesMap */1]);
    return state;
  }
}

function setVertices(index, data, state) {
  var match = GeometryGetStateDataCommon$Wonderjs.getGeometryData(state);
  SparseMapSystem$WonderCommonlib.set(index, data, match[/* verticesMap */1]);
  return state;
}

function getIndices(index, state) {
  var match = GeometryGetStateDataCommon$Wonderjs.getGeometryData(state);
  return SparseMapSystem$WonderCommonlib.get(index, match[/* indicesMap */2]);
}

function unsafeGetIndices(index, state) {
  var match = GeometryGetStateDataCommon$Wonderjs.getGeometryData(state);
  var indicesMap = match[/* indicesMap */2];
  return Contract$Wonderjs.ensureCheck((function () {
                return Contract$Wonderjs.test("indices should exist", (function () {
                              return Contract$Wonderjs.assertExist(SparseMapSystem$WonderCommonlib.get(index, indicesMap));
                            }));
              }), SparseMapSystem$WonderCommonlib.unsafeGet(index, indicesMap));
}

function getIndicesCount(index, state) {
  return unsafeGetIndices(index, state).length;
}

function setIndicesWithArray(index, data, state) {
  var match = GeometryGetStateDataCommon$Wonderjs.getGeometryData(state);
  var match$1 = getIndices(index, state);
  if (match$1) {
    TypeArrayUtils$Wonderjs.fillUint16Array(match$1[0], data, 0);
    return state;
  } else {
    var match$2 = TypeArrayPoolSystem$Wonderjs.getUint16TypeArrayFromPool(data.length, state);
    var typeArr = match$2 ? TypeArrayUtils$Wonderjs.fillUint16Array(match$2[0], data, 0) : new Uint16Array(data);
    SparseMapSystem$WonderCommonlib.set(index, typeArr, match[/* indicesMap */2]);
    return state;
  }
}

function setIndices(index, data, state) {
  var match = GeometryGetStateDataCommon$Wonderjs.getGeometryData(state);
  SparseMapSystem$WonderCommonlib.set(index, data, match[/* indicesMap */2]);
  return state;
}

export {
  getVertices          ,
  unsafeGetVertices    ,
  getVerticesCount     ,
  setVerticesWithArray ,
  setVertices          ,
  getIndices           ,
  unsafeGetIndices     ,
  getIndicesCount      ,
  setIndicesWithArray  ,
  setIndices           ,
  
}
/* TypeArrayPoolSystem-Wonderjs Not a pure module */
