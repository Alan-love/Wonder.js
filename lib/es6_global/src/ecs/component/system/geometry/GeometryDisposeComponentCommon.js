// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as Contract$WonderLog                       from "../../../../../../../node_modules/wonder-log/lib/es6_global/src/Contract.js";
import * as StateData$Wonderjs                       from "../../../../core/StateData.js";
import * as ArraySystem$Wonderjs                     from "../../../../structure/ArraySystem.js";
import * as VboBufferSystem$Wonderjs                 from "../../../../renderer/buffer/VboBufferSystem.js";
import * as MemoryConfigSystem$Wonderjs              from "../../../../config/MemoryConfigSystem.js";
import * as GeometryGroupCommon$Wonderjs             from "./GeometryGroupCommon.js";
import * as SparseMapSystem$WonderCommonlib          from "../../../../../../../node_modules/wonder-commonlib/lib/es6_global/src/SparseMapSystem.js";
import * as VboBufferDisposeSystem$Wonderjs          from "../../../../renderer/buffer/VboBufferDisposeSystem.js";
import * as GeometryGetStateDataCommon$Wonderjs      from "./GeometryGetStateDataCommon.js";
import * as GeometryTypeArrayPoolCommon$Wonderjs     from "./GeometryTypeArrayPoolCommon.js";
import * as ComponentDisposeComponentCommon$Wonderjs from "../component/ComponentDisposeComponentCommon.js";

function isAlive(geometry, state) {
  return ComponentDisposeComponentCommon$Wonderjs.isAlive(geometry, GeometryGetStateDataCommon$Wonderjs.getGeometryData(state)[/* disposedIndexArray */7]);
}

function _disposeData(geometry, state) {
  var data = GeometryGetStateDataCommon$Wonderjs.getGeometryData(state);
  var indicesMap = data[/* indicesMap */3];
  var normalsMap = data[/* normalsMap */2];
  var verticesMap = data[/* verticesMap */1];
  var state$1 = GeometryTypeArrayPoolCommon$Wonderjs.addTypeArrayToPool(geometry, MemoryConfigSystem$Wonderjs.getMaxTypeArrayPoolSize(state), /* tuple */[
        verticesMap,
        normalsMap,
        indicesMap
      ], VboBufferDisposeSystem$Wonderjs.disposeGeometryBufferData(geometry, state));
  var newrecord = state$1.slice();
  newrecord[/* geometryData */20] = /* record */[
    /* index */data[/* index */0],
    /* verticesMap */ComponentDisposeComponentCommon$Wonderjs.disposeSparseMapData(geometry, verticesMap),
    /* normalsMap */ComponentDisposeComponentCommon$Wonderjs.disposeSparseMapData(geometry, normalsMap),
    /* indicesMap */ComponentDisposeComponentCommon$Wonderjs.disposeSparseMapData(geometry, indicesMap),
    /* computeDataFuncMap */ComponentDisposeComponentCommon$Wonderjs.disposeSparseMapData(geometry, data[/* computeDataFuncMap */4]),
    /* configDataMap */ComponentDisposeComponentCommon$Wonderjs.disposeSparseMapData(geometry, data[/* configDataMap */5]),
    /* gameObjectMap */ComponentDisposeComponentCommon$Wonderjs.disposeSparseMapData(geometry, data[/* gameObjectMap */6]),
    /* disposedIndexArray */data[/* disposedIndexArray */7],
    /* isInitMap */ComponentDisposeComponentCommon$Wonderjs.disposeSparseMapData(geometry, data[/* isInitMap */8]),
    /* groupCountMap */SparseMapSystem$WonderCommonlib.set(geometry, 0, data[/* groupCountMap */9])
  ];
  return newrecord;
}

function handleDisposeComponent(geometry, state) {
  Contract$WonderLog.requireCheck((function () {
          return ComponentDisposeComponentCommon$Wonderjs.checkComponentShouldAlive(geometry, isAlive, state);
        }), StateData$Wonderjs.stateData[/* isDebug */1]);
  var data = GeometryGetStateDataCommon$Wonderjs.getGeometryData(state);
  var match = GeometryGroupCommon$Wonderjs.isGroupGeometry(geometry, state);
  if (match !== 0) {
    return GeometryGroupCommon$Wonderjs.decreaseGroupCount(geometry, state);
  } else {
    var state$1 = _disposeData(geometry, VboBufferSystem$Wonderjs.addGeometryBufferToPool(geometry, state));
    var newrecord = state$1.slice();
    var newrecord$1 = data.slice();
    newrecord$1[/* disposedIndexArray */7] = ArraySystem$Wonderjs.push(geometry, data[/* disposedIndexArray */7]);
    newrecord[/* geometryData */20] = newrecord$1;
    return newrecord;
  }
}

function handleBatchDisposeComponent(geometryArray, _, state) {
  Contract$WonderLog.requireCheck((function () {
          return ComponentDisposeComponentCommon$Wonderjs.checkComponentShouldAliveWithBatchDispose(geometryArray, isAlive, state);
        }), StateData$Wonderjs.stateData[/* isDebug */1]);
  var data = GeometryGetStateDataCommon$Wonderjs.getGeometryData(state);
  var disposedIndexArray = data[/* disposedIndexArray */7];
  return ArraySystem$Wonderjs.reduceState((function (state, geometry) {
                var match = GeometryGroupCommon$Wonderjs.isGroupGeometry(geometry, state);
                if (match !== 0) {
                  return GeometryGroupCommon$Wonderjs.decreaseGroupCount(geometry, state);
                } else {
                  var state$1 = _disposeData(geometry, VboBufferSystem$Wonderjs.addGeometryBufferToPool(geometry, state));
                  var newrecord = state$1.slice();
                  var newrecord$1 = GeometryGetStateDataCommon$Wonderjs.getGeometryData(state$1).slice();
                  newrecord$1[/* disposedIndexArray */7] = ArraySystem$Wonderjs.push(geometry, disposedIndexArray);
                  newrecord[/* geometryData */20] = newrecord$1;
                  return newrecord;
                }
              }), state, geometryArray);
}

function isNotDisposed(param) {
  return +(param[/* disposedIndexArray */7].length === 0);
}

export {
  isAlive                     ,
  _disposeData                ,
  handleDisposeComponent      ,
  handleBatchDisposeComponent ,
  isNotDisposed               ,
  
}
/* Contract-WonderLog Not a pure module */
