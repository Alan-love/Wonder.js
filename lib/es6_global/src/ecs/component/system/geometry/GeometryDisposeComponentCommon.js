// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as Contract$Wonderjs                        from "../../../../definition/Contract.js";
import * as ArraySystem$Wonderjs                     from "../../../../structure/ArraySystem.js";
import * as VboBufferSystem$Wonderjs                 from "../../../../renderer/buffer/VboBufferSystem.js";
import * as ArraySystem$WonderCommonlib              from "../../../../../../../node_modules/wonder-commonlib/lib/es6_global/src/ArraySystem.js";
import * as MemoryConfigSystem$Wonderjs              from "../../../../config/MemoryConfigSystem.js";
import * as GeometryGroupCommon$Wonderjs             from "./GeometryGroupCommon.js";
import * as SparseMapSystem$WonderCommonlib          from "../../../../../../../node_modules/wonder-commonlib/lib/es6_global/src/SparseMapSystem.js";
import * as VboBufferDisposeSystem$Wonderjs          from "../../../../renderer/buffer/VboBufferDisposeSystem.js";
import * as GeometryGetStateDataCommon$Wonderjs      from "./GeometryGetStateDataCommon.js";
import * as GeometryTypeArrayPoolCommon$Wonderjs     from "./GeometryTypeArrayPoolCommon.js";
import * as ComponentDisposeComponentCommon$Wonderjs from "../component/ComponentDisposeComponentCommon.js";

function isAlive(geometry, state) {
  return ComponentDisposeComponentCommon$Wonderjs.isAlive(geometry, GeometryGetStateDataCommon$Wonderjs.getGeometryData(state)[/* disposedIndexArray */6]);
}

function _disposeData(geometry, state) {
  var match = GeometryGetStateDataCommon$Wonderjs.getGeometryData(state);
  var indicesMap = match[/* indicesMap */2];
  var verticesMap = match[/* verticesMap */1];
  var computeDataFuncMap = match[/* computeDataFuncMap */3];
  var configDataMap = match[/* configDataMap */4];
  var gameObjectMap = match[/* gameObjectMap */5];
  var isInitMap = match[/* isInitMap */7];
  var groupCountMap = match[/* groupCountMap */8];
  var state$1 = GeometryTypeArrayPoolCommon$Wonderjs.addTypeArrayToPool(geometry, MemoryConfigSystem$Wonderjs.getMaxTypeArrayPoolSize(state), verticesMap, indicesMap, VboBufferDisposeSystem$Wonderjs.disposeGeometryBufferData(geometry, state));
  SparseMapSystem$WonderCommonlib.set(geometry, 0, groupCountMap);
  ComponentDisposeComponentCommon$Wonderjs.disposeSparseMapData(geometry, verticesMap);
  ComponentDisposeComponentCommon$Wonderjs.disposeSparseMapData(geometry, indicesMap);
  ComponentDisposeComponentCommon$Wonderjs.disposeSparseMapData(geometry, configDataMap);
  ComponentDisposeComponentCommon$Wonderjs.disposeSparseMapData(geometry, isInitMap);
  ComponentDisposeComponentCommon$Wonderjs.disposeSparseMapData(geometry, computeDataFuncMap);
  ComponentDisposeComponentCommon$Wonderjs.disposeSparseMapData(geometry, groupCountMap);
  ComponentDisposeComponentCommon$Wonderjs.disposeSparseMapData(geometry, gameObjectMap);
  return state$1;
}

function handleDisposeComponent(geometry, state) {
  Contract$Wonderjs.requireCheck((function () {
          return ComponentDisposeComponentCommon$Wonderjs.checkComponentShouldAlive(geometry, isAlive, state);
        }));
  var match = GeometryGetStateDataCommon$Wonderjs.getGeometryData(state);
  var disposedIndexArray = match[/* disposedIndexArray */6];
  var match$1 = GeometryGroupCommon$Wonderjs.isGroupGeometry(geometry, state);
  if (match$1 !== 0) {
    return GeometryGroupCommon$Wonderjs.decreaseGroupCount(geometry, state);
  } else {
    var state$1 = _disposeData(geometry, VboBufferSystem$Wonderjs.addGeometryBufferToPool(geometry, state));
    disposedIndexArray.push(geometry);
    return state$1;
  }
}

function handleBatchDisposeComponent(geometryArray, _, state) {
  Contract$Wonderjs.requireCheck((function () {
          return ArraySystem$WonderCommonlib.forEach((function (geometry) {
                        return ComponentDisposeComponentCommon$Wonderjs.checkComponentShouldAlive(geometry, isAlive, state);
                      }), geometryArray);
        }));
  var data = GeometryGetStateDataCommon$Wonderjs.getGeometryData(state);
  var disposedIndexArray = data[/* disposedIndexArray */6];
  return ArraySystem$Wonderjs.reduceState((function (state, geometry) {
                var match = GeometryGroupCommon$Wonderjs.isGroupGeometry(geometry, state);
                if (match !== 0) {
                  return GeometryGroupCommon$Wonderjs.decreaseGroupCount(geometry, state);
                } else {
                  disposedIndexArray.push(geometry);
                  return _disposeData(geometry, VboBufferSystem$Wonderjs.addGeometryBufferToPool(geometry, state));
                }
              }), state, geometryArray);
}

function isNotDisposed(param) {
  var disposedIndexArray = param[/* disposedIndexArray */6];
  return +(disposedIndexArray.length === 0);
}

export {
  isAlive                     ,
  _disposeData                ,
  handleDisposeComponent      ,
  handleBatchDisposeComponent ,
  isNotDisposed               ,
  
}
/* ArraySystem-Wonderjs Not a pure module */
