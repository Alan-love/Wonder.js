// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as Log$WonderLog                  from "../../../../../../../../node_modules/wonder-log/lib/es6_global/src/Log.js";
import * as PointLightHelper$Wonderjs      from "../../../data/light/point/PointLightHelper.js";
import * as PointLightStateCommon$Wonderjs from "./PointLightStateCommon.js";

function getColor(mappedIndex, state) {
  return PointLightHelper$Wonderjs.getColor(mappedIndex, PointLightStateCommon$Wonderjs.getLightData(state)[/* colors */2]);
}

function setColor(mappedIndex, color, state) {
  var newrecord = state.slice();
  var newrecord$1 = PointLightStateCommon$Wonderjs.getLightData(state).slice();
  newrecord$1[/* colors */2] = PointLightHelper$Wonderjs.setColor(mappedIndex, color, PointLightStateCommon$Wonderjs.getLightData(state)[/* colors */2]);
  newrecord[/* pointLightData */19] = newrecord$1;
  return newrecord;
}

function getIntensity(mappedIndex, state) {
  return PointLightHelper$Wonderjs.getIntensity(mappedIndex, PointLightStateCommon$Wonderjs.getLightData(state)[/* intensities */3]);
}

function setIntensity(mappedIndex, intensity, state) {
  var newrecord = state.slice();
  var newrecord$1 = PointLightStateCommon$Wonderjs.getLightData(state).slice();
  newrecord$1[/* intensities */3] = PointLightHelper$Wonderjs.setIntensity(mappedIndex, intensity, PointLightStateCommon$Wonderjs.getLightData(state)[/* intensities */3]);
  newrecord[/* pointLightData */19] = newrecord$1;
  return newrecord;
}

function getConstant(mappedIndex, state) {
  return PointLightHelper$Wonderjs.getIntensity(mappedIndex, PointLightStateCommon$Wonderjs.getLightData(state)[/* constants */4]);
}

function setConstant(mappedIndex, constant, state) {
  var newrecord = state.slice();
  var newrecord$1 = PointLightStateCommon$Wonderjs.getLightData(state).slice();
  newrecord$1[/* constants */4] = PointLightHelper$Wonderjs.setConstant(mappedIndex, constant, PointLightStateCommon$Wonderjs.getLightData(state)[/* constants */4]);
  newrecord[/* pointLightData */19] = newrecord$1;
  return newrecord;
}

function getLinear(mappedIndex, state) {
  return PointLightHelper$Wonderjs.getIntensity(mappedIndex, PointLightStateCommon$Wonderjs.getLightData(state)[/* linears */5]);
}

function setLinear(mappedIndex, linear, state) {
  var newrecord = state.slice();
  var newrecord$1 = PointLightStateCommon$Wonderjs.getLightData(state).slice();
  newrecord$1[/* linears */5] = PointLightHelper$Wonderjs.setIntensity(mappedIndex, linear, PointLightStateCommon$Wonderjs.getLightData(state)[/* linears */5]);
  newrecord[/* pointLightData */19] = newrecord$1;
  return newrecord;
}

function getQuadratic(mappedIndex, state) {
  return PointLightHelper$Wonderjs.getQuadratic(mappedIndex, PointLightStateCommon$Wonderjs.getLightData(state)[/* quadratics */6]);
}

function setQuadratic(mappedIndex, quadratic, state) {
  var newrecord = state.slice();
  var newrecord$1 = PointLightStateCommon$Wonderjs.getLightData(state).slice();
  newrecord$1[/* quadratics */6] = PointLightHelper$Wonderjs.setQuadratic(mappedIndex, quadratic, PointLightStateCommon$Wonderjs.getLightData(state)[/* quadratics */6]);
  newrecord[/* pointLightData */19] = newrecord$1;
  return newrecord;
}

function getRange(mappedIndex, state) {
  return PointLightHelper$Wonderjs.getIntensity(mappedIndex, PointLightStateCommon$Wonderjs.getLightData(state)[/* ranges */7]);
}

function setRange(mappedIndex, range, state) {
  var newrecord = state.slice();
  var newrecord$1 = PointLightStateCommon$Wonderjs.getLightData(state).slice();
  newrecord$1[/* ranges */7] = PointLightHelper$Wonderjs.setRange(mappedIndex, range, PointLightStateCommon$Wonderjs.getLightData(state)[/* ranges */7]);
  newrecord[/* pointLightData */19] = newrecord$1;
  return newrecord;
}

function setRangeLevel(mappedIndex, level, state) {
  if (level > 11 || level < 0) {
    return Log$WonderLog.fatal(Log$WonderLog.buildFatalMessage("setRangeLevel", "shouldn\'t exceed point light range", "level is too large", "level should in [0, 11]", "level: " + (String(level) + "")));
  } else {
    switch (level) {
      case 0 : 
          setRange(mappedIndex, 7, state);
          setLinear(mappedIndex, 0.7, state);
          return setQuadratic(mappedIndex, 1.8, state);
      case 1 : 
          setRange(mappedIndex, 13, state);
          setLinear(mappedIndex, 0.35, state);
          return setQuadratic(mappedIndex, 0.44, state);
      case 2 : 
          setRange(mappedIndex, 20, state);
          setLinear(mappedIndex, 0.22, state);
          return setQuadratic(mappedIndex, 0.20, state);
      case 3 : 
          setRange(mappedIndex, 32, state);
          setLinear(mappedIndex, 0.14, state);
          return setQuadratic(mappedIndex, 0.07, state);
      case 4 : 
          setRange(mappedIndex, 50, state);
          setLinear(mappedIndex, 0.09, state);
          return setQuadratic(mappedIndex, 0.032, state);
      case 5 : 
          setRange(mappedIndex, 65, state);
          setLinear(mappedIndex, 0.07, state);
          return setQuadratic(mappedIndex, 0.017, state);
      case 6 : 
          setRange(mappedIndex, 100, state);
          setLinear(mappedIndex, 0.045, state);
          return setQuadratic(mappedIndex, 0.0075, state);
      case 7 : 
          setRange(mappedIndex, 160, state);
          setLinear(mappedIndex, 0.027, state);
          return setQuadratic(mappedIndex, 0.0028, state);
      case 8 : 
          setRange(mappedIndex, 200, state);
          setLinear(mappedIndex, 0.022, state);
          return setQuadratic(mappedIndex, 0.0019, state);
      case 9 : 
          setRange(mappedIndex, 325, state);
          setLinear(mappedIndex, 0.014, state);
          return setQuadratic(mappedIndex, 0.0007, state);
      case 10 : 
          setRange(mappedIndex, 600, state);
          setLinear(mappedIndex, 0.007, state);
          return setQuadratic(mappedIndex, 0.0002, state);
      case 11 : 
          setRange(mappedIndex, 3250, state);
          setLinear(mappedIndex, 0.0014, state);
          return setQuadratic(mappedIndex, 0.000007, state);
      
    }
  }
}

export {
  getColor      ,
  setColor      ,
  getIntensity  ,
  setIntensity  ,
  getConstant   ,
  setConstant   ,
  getLinear     ,
  setLinear     ,
  getQuadratic  ,
  setQuadratic  ,
  getRange      ,
  setRange      ,
  setRangeLevel ,
  
}
/* Log-WonderLog Not a pure module */
