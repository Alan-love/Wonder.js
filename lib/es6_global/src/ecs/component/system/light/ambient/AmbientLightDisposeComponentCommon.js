// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as LightIndexCommon$Wonderjs            from "../LightIndexCommon.js";
import * as AmbientLightHelper$Wonderjs          from "../../../data/light/ambient/AmbientLightHelper.js";
import * as AmbientLightIndexCommon$Wonderjs     from "./AmbientLightIndexCommon.js";
import * as AmbientLightStateCommon$Wonderjs     from "./AmbientLightStateCommon.js";
import * as LightDisposeComponentCommon$Wonderjs from "../LightDisposeComponentCommon.js";

function isAlive(light, state) {
  return LightDisposeComponentCommon$Wonderjs.isAlive(light, AmbientLightIndexCommon$Wonderjs.getMappedIndexMap(state));
}

function _disposeData(sourceIndex, data) {
  var mappedIndexMap = data[/* mappedIndexMap */3];
  var index = data[/* index */0];
  var gameObjectMap = LightDisposeComponentCommon$Wonderjs.disposeData(sourceIndex, data[/* gameObjectMap */4]);
  var colorDataSize = AmbientLightHelper$Wonderjs.getColorDataSize(/* () */0);
  var lastComponentIndex = index - 1 | 0;
  var mappedSourceIndex = LightIndexCommon$Wonderjs.getMappedIndex(sourceIndex, mappedIndexMap);
  return /* record */[
          /* index */index - 1 | 0,
          /* buffer */data[/* buffer */1],
          /* colors */LightDisposeComponentCommon$Wonderjs.swapData(/* tuple */[
                mappedSourceIndex,
                lastComponentIndex
              ], /* tuple */[
                mappedIndexMap,
                colorDataSize,
                AmbientLightHelper$Wonderjs.getDefaultColor(/* () */0)
              ], LightDisposeComponentCommon$Wonderjs.deleteBySwapAndResetFloat32TypeArr, data[/* colors */2]),
          /* mappedIndexMap */LightDisposeComponentCommon$Wonderjs.setMappedIndexMap(sourceIndex, mappedSourceIndex, lastComponentIndex, mappedIndexMap),
          /* gameObjectMap */gameObjectMap
        ];
}

function _handleDispose(light, state) {
  var newrecord = state.slice();
  newrecord[/* ambientLightData */17] = _disposeData(light, AmbientLightStateCommon$Wonderjs.getLightData(state));
  return newrecord;
}

function handleDisposeComponent(light, state) {
  return LightDisposeComponentCommon$Wonderjs.handleDisposeComponent(light, /* tuple */[
              isAlive,
              _handleDispose
            ], state);
}

function handleBatchDisposeComponent(lightArray, _, state) {
  return LightDisposeComponentCommon$Wonderjs.handleBatchDisposeComponent(lightArray, /* tuple */[
              isAlive,
              _handleDispose
            ], state);
}

export {
  isAlive                     ,
  _disposeData                ,
  _handleDispose              ,
  handleDisposeComponent      ,
  handleBatchDisposeComponent ,
  
}
/* AmbientLightHelper-Wonderjs Not a pure module */
