// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as Curry                              from "../../../../../../../node_modules/bs-platform/lib/es6/curry.js";
import * as ArraySystem$Wonderjs               from "../../../../structure/ArraySystem.js";
import * as MaterialJudgeCommon$Wonderjs       from "./MaterialJudgeCommon.js";
import * as ExceptionHandleSystem$Wonderjs     from "../../../../exception/ExceptionHandleSystem.js";
import * as MaterialOperateCommon$Wonderjs     from "./MaterialOperateCommon.js";
import * as BasicMaterialCreateCommon$Wonderjs from "./basic_material/BasicMaterialCreateCommon.js";
import * as MaterialShaderIndexCommon$Wonderjs from "./MaterialShaderIndexCommon.js";

function _handleShareMaterial(sourceComponent, countRangeArr, state) {
  return /* tuple */[
          state,
          countRangeArr.map((function () {
                  return sourceComponent;
                }))
        ];
}

function _handleNotShareMaterial(sourceComponent, countRangeArr, state) {
  var hasShaderIndex = MaterialShaderIndexCommon$Wonderjs.hasShaderIndex(sourceComponent, state);
  var shaderIndex = hasShaderIndex !== 0 ? MaterialShaderIndexCommon$Wonderjs.unsafeGetShaderIndex(sourceComponent, state) : -1;
  var createFunc = MaterialJudgeCommon$Wonderjs.isBasicMaterial(sourceComponent, state) ? BasicMaterialCreateCommon$Wonderjs.create : ExceptionHandleSystem$Wonderjs.throwMessage("unknown material:" + (String(sourceComponent) + ""));
  var color = MaterialOperateCommon$Wonderjs.unsafeGetColor(sourceComponent, state);
  var componentArr = /* int array */[];
  var state$1 = ArraySystem$Wonderjs.reduceState((function (state, _) {
          var match = Curry._1(createFunc, state);
          var index = match[1];
          componentArr.push(index);
          var state$1 = MaterialOperateCommon$Wonderjs.setColor(index, color, match[0]);
          if (hasShaderIndex !== 0) {
            return MaterialShaderIndexCommon$Wonderjs.setShaderIndex(index, shaderIndex, state$1);
          } else {
            return state$1;
          }
        }), state, countRangeArr);
  return /* tuple */[
          state$1,
          componentArr
        ];
}

function handleCloneComponent(sourceComponent, countRangeArr, isShareMaterial, state) {
  if (isShareMaterial !== 0) {
    return _handleShareMaterial(sourceComponent, countRangeArr, state);
  } else {
    return _handleNotShareMaterial(sourceComponent, countRangeArr, state);
  }
}

export {
  _handleShareMaterial    ,
  _handleNotShareMaterial ,
  handleCloneComponent    ,
  
}
/* ArraySystem-Wonderjs Not a pure module */
