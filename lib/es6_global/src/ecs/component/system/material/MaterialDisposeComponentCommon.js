// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as Contract$Wonderjs                        from "../../../../definition/Contract.js";
import * as ArraySystem$Wonderjs                     from "../../../../structure/ArraySystem.js";
import * as ArraySystem$WonderCommonlib              from "../../../../../../../node_modules/wonder-commonlib/lib/es6_global/src/ArraySystem.js";
import * as MaterialGroupCommon$Wonderjs             from "./MaterialGroupCommon.js";
import * as MaterialStateCommon$Wonderjs             from "./MaterialStateCommon.js";
import * as SparseMapSystem$WonderCommonlib          from "../../../../../../../node_modules/wonder-commonlib/lib/es6_global/src/SparseMapSystem.js";
import * as ComponentDisposeComponentCommon$Wonderjs from "../component/ComponentDisposeComponentCommon.js";

function isAlive(material, state) {
  return ComponentDisposeComponentCommon$Wonderjs.isAlive(material, MaterialStateCommon$Wonderjs.getMaterialData(state)[/* disposedIndexArray */5]);
}

function _disposeData(material, state) {
  var data = MaterialStateCommon$Wonderjs.getMaterialData(state);
  SparseMapSystem$WonderCommonlib.set(material, 0, data[/* groupCountMap */4]);
  ComponentDisposeComponentCommon$Wonderjs.disposeSparseMapData(material, data[/* colorMap */2]);
  ComponentDisposeComponentCommon$Wonderjs.disposeSparseMapData(material, data[/* shaderIndexMap */1]);
  ComponentDisposeComponentCommon$Wonderjs.disposeSparseMapData(material, data[/* gameObjectMap */3]);
  return state;
}

function _handleDispose(disposedIndexArray, material, state) {
  var match = MaterialGroupCommon$Wonderjs.isGroupMaterial(material, state);
  if (match !== 0) {
    return MaterialGroupCommon$Wonderjs.decreaseGroupCount(material, state);
  } else {
    disposedIndexArray.push(material);
    return _disposeData(material, state);
  }
}

function handleDisposeComponent(material, state) {
  Contract$Wonderjs.requireCheck((function () {
          return ComponentDisposeComponentCommon$Wonderjs.checkComponentShouldAlive(material, isAlive, state);
        }));
  return _handleDispose(MaterialStateCommon$Wonderjs.getMaterialData(state)[/* disposedIndexArray */5], material, state);
}

function handleBatchDisposeComponent(materialArray, _, state) {
  Contract$Wonderjs.requireCheck((function () {
          return ArraySystem$WonderCommonlib.forEach((function (material) {
                        return ComponentDisposeComponentCommon$Wonderjs.checkComponentShouldAlive(material, isAlive, state);
                      }), materialArray);
        }));
  var data = MaterialStateCommon$Wonderjs.getMaterialData(state);
  var disposedIndexArray = data[/* disposedIndexArray */5];
  return ArraySystem$Wonderjs.reduceState((function (state, material) {
                return _handleDispose(disposedIndexArray, material, state);
              }), state, materialArray);
}

function isNotDisposed(param) {
  var disposedIndexArray = param[/* disposedIndexArray */5];
  return +(disposedIndexArray.length === 0);
}

export {
  isAlive                     ,
  _disposeData                ,
  _handleDispose              ,
  handleDisposeComponent      ,
  handleBatchDisposeComponent ,
  isNotDisposed               ,
  
}
/* ArraySystem-Wonderjs Not a pure module */
