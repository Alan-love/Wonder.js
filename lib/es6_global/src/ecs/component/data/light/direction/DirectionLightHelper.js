// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as Caml_int32                      from "../../../../../../../../node_modules/bs-platform/lib/es6/caml_int32.js";
import * as TypeArrayUtils$Wonderjs         from "../../../../../utils/TypeArrayUtils.js";
import * as ArraySystem$WonderCommonlib     from "../../../../../../../../node_modules/wonder-commonlib/lib/es6_global/src/ArraySystem.js";
import * as SparseMapSystem$WonderCommonlib from "../../../../../../../../node_modules/wonder-commonlib/lib/es6_global/src/SparseMapSystem.js";

function getBufferMaxCount() {
  return 4;
}

function getColorDataSize() {
  return 3;
}

function getIntensityDataSize() {
  return 1;
}

function _getColorIndex(index) {
  return Caml_int32.imul(index, 3);
}

function _getIntensityIndex(index) {
  return (index << 0);
}

function getColor(index, typeArr) {
  return TypeArrayUtils$Wonderjs.getFloat3(Caml_int32.imul(index, 3), typeArr);
}

function setColor(index, color, typeArr) {
  return TypeArrayUtils$Wonderjs.setFloat3(Caml_int32.imul(index, 3), color, typeArr);
}

function getIntensity(index, typeArr) {
  return typeArr[index];
}

function setIntensity(index, intensity, typeArr) {
  typeArr[index] = intensity;
  return typeArr;
}

function getDefaultColor() {
  return /* float array */[
          1,
          1,
          1
        ];
}

function getDefaultIntensity() {
  return 1;
}

function _setDefaultTypeArrData(count, param) {
  var defaultColor = /* float array */[
    1,
    1,
    1
  ];
  return /* tuple */[
          param[0],
          ArraySystem$WonderCommonlib.reduceOneParam((function (param, index) {
                  return /* tuple */[
                          setColor(index, defaultColor, param[0]),
                          setIntensity(index, 1, param[1])
                        ];
                }), /* tuple */[
                param[1],
                param[2]
              ], ArraySystem$WonderCommonlib.range(0, count - 1 | 0))
        ];
}

function getColorsOffset() {
  return 0;
}

function getColorsLength() {
  return 12;
}

function getIntensitiesOffset() {
  return Caml_int32.imul(getColorsLength(/* () */0), Float32Array.BYTES_PER_ELEMENT);
}

function getIntensitiesLength() {
  return 4;
}

function _initBufferData() {
  var buffer = new ArrayBuffer(((Float32Array.BYTES_PER_ELEMENT << 2) << 2));
  var colors = new Float32Array(buffer, 0, getColorsLength(/* () */0));
  var intensities = new Float32Array(buffer, Caml_int32.imul(getColorsLength(/* () */0), Float32Array.BYTES_PER_ELEMENT), getIntensitiesLength(/* () */0));
  return _setDefaultTypeArrData(4, /* tuple */[
              buffer,
              colors,
              intensities
            ]);
}

function initData() {
  var match = _initBufferData(/* () */0);
  var match$1 = match[1];
  return /* record */[
          /* index */0,
          /* buffer */match[0],
          /* colors */match$1[0],
          /* intensities */match$1[1],
          /* mappedIndexMap */SparseMapSystem$WonderCommonlib.createEmpty(/* () */0),
          /* gameObjectMap */SparseMapSystem$WonderCommonlib.createEmpty(/* () */0)
        ];
}

export {
  getBufferMaxCount      ,
  getColorDataSize       ,
  getIntensityDataSize   ,
  _getColorIndex         ,
  _getIntensityIndex     ,
  getColor               ,
  setColor               ,
  getIntensity           ,
  setIntensity           ,
  getDefaultColor        ,
  getDefaultIntensity    ,
  _setDefaultTypeArrData ,
  getColorsOffset        ,
  getColorsLength        ,
  getIntensitiesOffset   ,
  getIntensitiesLength   ,
  _initBufferData        ,
  initData               ,
  
}
/* TypeArrayUtils-Wonderjs Not a pure module */
