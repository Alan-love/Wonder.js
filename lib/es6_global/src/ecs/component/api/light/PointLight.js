// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as Js_option                 from "../../../../../../../node_modules/bs-platform/lib/es6/js_option.js";
import * as Contract$WonderLog        from "../../../../../../../node_modules/wonder-log/lib/es6_global/src/Contract.js";
import * as StateData$Wonderjs        from "../../../../core/StateData.js";
import * as ComponentSystem$Wonderjs  from "../../system/component/ComponentSystem.js";
import * as PointLightSystem$Wonderjs from "../../system/light/point/PointLightSystem.js";

function getPointLightGameObject(light, state) {
  Contract$WonderLog.requireCheck((function () {
          return ComponentSystem$Wonderjs.checkComponentShouldAlive(light, PointLightSystem$Wonderjs.isAlive, state);
        }), StateData$Wonderjs.stateData[/* isDebug */1]);
  return Js_option.getExn(PointLightSystem$Wonderjs.getGameObject(PointLightSystem$Wonderjs.getMappedIndex(light, PointLightSystem$Wonderjs.getMappedIndexMap(state)), state));
}

function getPointLightColor(light, state) {
  Contract$WonderLog.requireCheck((function () {
          return ComponentSystem$Wonderjs.checkComponentShouldAlive(light, PointLightSystem$Wonderjs.isAlive, state);
        }), StateData$Wonderjs.stateData[/* isDebug */1]);
  return PointLightSystem$Wonderjs.getColor(PointLightSystem$Wonderjs.getMappedIndex(light, PointLightSystem$Wonderjs.getMappedIndexMap(state)), state);
}

function setPointLightColor(light, color, state) {
  Contract$WonderLog.requireCheck((function () {
          return ComponentSystem$Wonderjs.checkComponentShouldAlive(light, PointLightSystem$Wonderjs.isAlive, state);
        }), StateData$Wonderjs.stateData[/* isDebug */1]);
  return PointLightSystem$Wonderjs.setColor(PointLightSystem$Wonderjs.getMappedIndex(light, PointLightSystem$Wonderjs.getMappedIndexMap(state)), color, state);
}

function getPointLightIntensity(light, state) {
  Contract$WonderLog.requireCheck((function () {
          return ComponentSystem$Wonderjs.checkComponentShouldAlive(light, PointLightSystem$Wonderjs.isAlive, state);
        }), StateData$Wonderjs.stateData[/* isDebug */1]);
  return PointLightSystem$Wonderjs.getIntensity(PointLightSystem$Wonderjs.getMappedIndex(light, PointLightSystem$Wonderjs.getMappedIndexMap(state)), state);
}

function setPointLightIntensity(light, color, state) {
  Contract$WonderLog.requireCheck((function () {
          return ComponentSystem$Wonderjs.checkComponentShouldAlive(light, PointLightSystem$Wonderjs.isAlive, state);
        }), StateData$Wonderjs.stateData[/* isDebug */1]);
  return PointLightSystem$Wonderjs.setIntensity(PointLightSystem$Wonderjs.getMappedIndex(light, PointLightSystem$Wonderjs.getMappedIndexMap(state)), color, state);
}

function getPointLightConstant(light, state) {
  Contract$WonderLog.requireCheck((function () {
          return ComponentSystem$Wonderjs.checkComponentShouldAlive(light, PointLightSystem$Wonderjs.isAlive, state);
        }), StateData$Wonderjs.stateData[/* isDebug */1]);
  return PointLightSystem$Wonderjs.getConstant(PointLightSystem$Wonderjs.getMappedIndex(light, PointLightSystem$Wonderjs.getMappedIndexMap(state)), state);
}

function setPointLightConstant(light, constant, state) {
  Contract$WonderLog.requireCheck((function () {
          return ComponentSystem$Wonderjs.checkComponentShouldAlive(light, PointLightSystem$Wonderjs.isAlive, state);
        }), StateData$Wonderjs.stateData[/* isDebug */1]);
  return PointLightSystem$Wonderjs.setConstant(PointLightSystem$Wonderjs.getMappedIndex(light, PointLightSystem$Wonderjs.getMappedIndexMap(state)), constant, state);
}

function getPointLightLinear(light, state) {
  Contract$WonderLog.requireCheck((function () {
          return ComponentSystem$Wonderjs.checkComponentShouldAlive(light, PointLightSystem$Wonderjs.isAlive, state);
        }), StateData$Wonderjs.stateData[/* isDebug */1]);
  return PointLightSystem$Wonderjs.getLinear(PointLightSystem$Wonderjs.getMappedIndex(light, PointLightSystem$Wonderjs.getMappedIndexMap(state)), state);
}

function setPointLightLinear(light, linear, state) {
  Contract$WonderLog.requireCheck((function () {
          return ComponentSystem$Wonderjs.checkComponentShouldAlive(light, PointLightSystem$Wonderjs.isAlive, state);
        }), StateData$Wonderjs.stateData[/* isDebug */1]);
  return PointLightSystem$Wonderjs.setLinear(PointLightSystem$Wonderjs.getMappedIndex(light, PointLightSystem$Wonderjs.getMappedIndexMap(state)), linear, state);
}

function getPointLightQuadratic(light, state) {
  Contract$WonderLog.requireCheck((function () {
          return ComponentSystem$Wonderjs.checkComponentShouldAlive(light, PointLightSystem$Wonderjs.isAlive, state);
        }), StateData$Wonderjs.stateData[/* isDebug */1]);
  return PointLightSystem$Wonderjs.getQuadratic(PointLightSystem$Wonderjs.getMappedIndex(light, PointLightSystem$Wonderjs.getMappedIndexMap(state)), state);
}

function setPointLightQuadratic(light, quadratic, state) {
  Contract$WonderLog.requireCheck((function () {
          return ComponentSystem$Wonderjs.checkComponentShouldAlive(light, PointLightSystem$Wonderjs.isAlive, state);
        }), StateData$Wonderjs.stateData[/* isDebug */1]);
  return PointLightSystem$Wonderjs.setQuadratic(PointLightSystem$Wonderjs.getMappedIndex(light, PointLightSystem$Wonderjs.getMappedIndexMap(state)), quadratic, state);
}

function getPointLightRange(light, state) {
  Contract$WonderLog.requireCheck((function () {
          return ComponentSystem$Wonderjs.checkComponentShouldAlive(light, PointLightSystem$Wonderjs.isAlive, state);
        }), StateData$Wonderjs.stateData[/* isDebug */1]);
  return PointLightSystem$Wonderjs.getRange(PointLightSystem$Wonderjs.getMappedIndex(light, PointLightSystem$Wonderjs.getMappedIndexMap(state)), state);
}

function setPointLightRange(light, range, state) {
  Contract$WonderLog.requireCheck((function () {
          return ComponentSystem$Wonderjs.checkComponentShouldAlive(light, PointLightSystem$Wonderjs.isAlive, state);
        }), StateData$Wonderjs.stateData[/* isDebug */1]);
  return PointLightSystem$Wonderjs.setRange(PointLightSystem$Wonderjs.getMappedIndex(light, PointLightSystem$Wonderjs.getMappedIndexMap(state)), range, state);
}

function setPointLightRangeLevel(light, level, state) {
  Contract$WonderLog.requireCheck((function () {
          return ComponentSystem$Wonderjs.checkComponentShouldAlive(light, PointLightSystem$Wonderjs.isAlive, state);
        }), StateData$Wonderjs.stateData[/* isDebug */1]);
  return PointLightSystem$Wonderjs.setRangeLevel(PointLightSystem$Wonderjs.getMappedIndex(light, PointLightSystem$Wonderjs.getMappedIndexMap(state)), level, state);
}

var createPointLight = PointLightSystem$Wonderjs.create;

export {
  createPointLight        ,
  getPointLightGameObject ,
  getPointLightColor      ,
  setPointLightColor      ,
  getPointLightIntensity  ,
  setPointLightIntensity  ,
  getPointLightConstant   ,
  setPointLightConstant   ,
  getPointLightLinear     ,
  setPointLightLinear     ,
  getPointLightQuadratic  ,
  setPointLightQuadratic  ,
  getPointLightRange      ,
  setPointLightRange      ,
  setPointLightRangeLevel ,
  
}
/* Contract-WonderLog Not a pure module */
