// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as Js_option                                 from "../../../../../node_modules/bs-platform/lib/es6/js_option.js";
import * as Caml_array                                from "../../../../../node_modules/bs-platform/lib/es6/caml_array.js";
import * as Contract$Wonderjs                         from "../../definition/Contract.js";
import * as ArraySystem$Wonderjs                      from "../../structure/ArraySystem.js";
import * as MemoryUtils$Wonderjs                      from "../../memory/MemoryUtils.js";
import * as MaterialAdmin$Wonderjs                    from "./component/material/MaterialAdmin.js";
import * as GeometryHelper$Wonderjs                   from "../component/data/geometry/GeometryHelper.js";
import * as GeometrySystem$Wonderjs                   from "../component/system/geometry/GeometrySystem.js";
import * as MaterialSystem$Wonderjs                   from "../component/system/material/MaterialSystem.js";
import * as CpuMemorySystem$Wonderjs                  from "../../memory/CpuMemorySystem.js";
import * as ECSDisposeUtils$Wonderjs                  from "../utils/ECSDisposeUtils.js";
import * as TransformHelper$Wonderjs                  from "../component/data/transform/TransformHelper.js";
import * as TransformSystem$Wonderjs                  from "../component/system/transform/TransformSystem.js";
import * as DeviceManagerSystem$Wonderjs              from "../../renderer/device/DeviceManagerSystem.js";
import * as GameObjectStateCommon$Wonderjs            from "./GameObjectStateCommon.js";
import * as CameraControllerSystem$Wonderjs           from "../component/system/cameraController/CameraControllerSystem.js";
import * as GameObjectCreateCommon$Wonderjs           from "./GameObjectCreateCommon.js";
import * as SparseMapSystem$WonderCommonlib           from "../../../../../node_modules/wonder-commonlib/lib/es6_global/src/SparseMapSystem.js";
import * as GameObjectAddComponentCommon$Wonderjs     from "./GameObjectAddComponentCommon.js";
import * as GameObjectGetComponentCommon$Wonderjs     from "./GameObjectGetComponentCommon.js";
import * as GameObjectHasComponentCommon$Wonderjs     from "./GameObjectHasComponentCommon.js";
import * as GameObjectCloneComponentCommon$Wonderjs   from "./GameObjectCloneComponentCommon.js";
import * as GameObjectDisposeComponentCommon$Wonderjs from "./GameObjectDisposeComponentCommon.js";

function init(state) {
  return GeometrySystem$Wonderjs.init(CameraControllerSystem$Wonderjs.init(state));
}

function initDataFromState(state) {
  return GeometryHelper$Wonderjs.initData(MaterialAdmin$Wonderjs.initData(TransformHelper$Wonderjs.initData(state)));
}

function update(_, state) {
  return CameraControllerSystem$Wonderjs.update(state);
}

function create(state) {
  var match = GameObjectCreateCommon$Wonderjs.create(state);
  var uid = match[1];
  var match$1 = TransformSystem$Wonderjs.create(match[0]);
  return /* tuple */[
          GameObjectAddComponentCommon$Wonderjs.addTransformComponent(uid, match$1[1], match$1[0]),
          uid
        ];
}

function batchDispose(uidArray, state) {
  var data = GameObjectStateCommon$Wonderjs.getGameObjectData(state);
  var disposeCount = data[/* disposeCount */1];
  var disposedUidMap = data[/* disposedUidMap */2];
  var disposedUidMap$1 = ECSDisposeUtils$Wonderjs.buildMapFromArray(uidArray, disposedUidMap);
  data[/* disposeCount */1] = disposeCount + uidArray.length | 0;
  var state$1 = GameObjectDisposeComponentCommon$Wonderjs.batchDisposeObjectInstanceComponent(disposedUidMap$1, state, GameObjectGetComponentCommon$Wonderjs.batchGetObjectInstanceComponent(uidArray, GameObjectDisposeComponentCommon$Wonderjs.batchDisposeSourceInstanceComponent(disposedUidMap$1, state, batchDispose, GameObjectGetComponentCommon$Wonderjs.batchGetSourceInstanceComponent(uidArray, GameObjectDisposeComponentCommon$Wonderjs.batchDisposeCameraControllerComponent(disposedUidMap$1, state, GameObjectGetComponentCommon$Wonderjs.batchGetCameraControllerComponent(uidArray, GameObjectDisposeComponentCommon$Wonderjs.batchDisposeGeometryComponent(disposedUidMap$1, state, GameObjectGetComponentCommon$Wonderjs.batchGetGeometryComponent(uidArray, GameObjectDisposeComponentCommon$Wonderjs.batchDisposeMaterialComponent(disposedUidMap$1, state, GameObjectGetComponentCommon$Wonderjs.batchGetMaterialComponent(uidArray, GameObjectDisposeComponentCommon$Wonderjs.batchDisposeTransformComponent(disposedUidMap$1, state, GameObjectGetComponentCommon$Wonderjs.batchGetTransformComponent(uidArray, GameObjectDisposeComponentCommon$Wonderjs.batchDisposeMeshRendererComponent(disposedUidMap$1, state, GameObjectGetComponentCommon$Wonderjs.batchGetMeshRendererComponent(uidArray, state))))))))))))));
  if (MemoryUtils$Wonderjs.isDisposeTooMany(data[/* disposeCount */1], state$1)) {
    data[/* disposeCount */1] = 0;
    return CpuMemorySystem$Wonderjs.reAllocateGameObject(state$1);
  } else {
    return state$1;
  }
}

function dispose(uid, state) {
  var data = GameObjectStateCommon$Wonderjs.getGameObjectData(state);
  var disposeCount = data[/* disposeCount */1];
  var disposedUidMap = data[/* disposedUidMap */2];
  data[/* disposeCount */1] = disposeCount + 1 | 0;
  SparseMapSystem$WonderCommonlib.set(uid, /* true */1, disposedUidMap);
  var match = GameObjectGetComponentCommon$Wonderjs.getTransformComponent(uid, state);
  var state$1 = match ? GameObjectDisposeComponentCommon$Wonderjs.disposeTransformComponent(uid, match[0], state) : state;
  var match$1 = GameObjectGetComponentCommon$Wonderjs.getMeshRendererComponent(uid, state$1);
  var state$2 = match$1 ? GameObjectDisposeComponentCommon$Wonderjs.disposeMeshRendererComponent(uid, match$1[0], state$1) : state$1;
  var match$2 = GameObjectGetComponentCommon$Wonderjs.getMaterialComponent(uid, state$2);
  var state$3 = match$2 ? GameObjectDisposeComponentCommon$Wonderjs.disposeMaterialComponent(uid, match$2[0], state$2) : state$2;
  var match$3 = GameObjectGetComponentCommon$Wonderjs.getGeometryComponent(uid, state$3);
  var state$4 = match$3 ? GameObjectDisposeComponentCommon$Wonderjs.disposeGeometryComponent(uid, match$3[0], state$3) : state$3;
  var match$4 = GameObjectGetComponentCommon$Wonderjs.getCameraControllerComponent(uid, state$4);
  var state$5 = match$4 ? GameObjectDisposeComponentCommon$Wonderjs.disposeCameraControllerComponent(uid, match$4[0], state$4) : state$4;
  var match$5 = GameObjectGetComponentCommon$Wonderjs.getSourceInstanceComponent(uid, state$5);
  var state$6 = match$5 ? GameObjectDisposeComponentCommon$Wonderjs.disposeSourceInstanceComponent(uid, match$5[0], batchDispose, state$5) : state$5;
  var match$6 = GameObjectGetComponentCommon$Wonderjs.getObjectInstanceComponent(uid, state$6);
  var state$7 = match$6 ? GameObjectDisposeComponentCommon$Wonderjs.disposeObjectInstanceComponent(uid, match$6[0], state$6) : state$6;
  if (MemoryUtils$Wonderjs.isDisposeTooMany(data[/* disposeCount */1], state$7)) {
    data[/* disposeCount */1] = 0;
    return CpuMemorySystem$Wonderjs.reAllocateGameObject(state$7);
  } else {
    return state$7;
  }
}

function clone(uid, count, isShareMaterial, state) {
  Contract$Wonderjs.requireCheck((function () {
          Contract$Wonderjs.test("shouldn't clone sourceInstance gameObject", (function () {
                  return Contract$Wonderjs.assertFalse(GameObjectHasComponentCommon$Wonderjs.hasSourceInstanceComponent(uid, state));
                }));
          return Contract$Wonderjs.test("shouldn't clone objectInstance gameObject", (function () {
                        return Contract$Wonderjs.assertFalse(GameObjectHasComponentCommon$Wonderjs.hasObjectInstanceComponent(uid, state));
                      }));
        }));
  var countRangeArr = ArraySystem$Wonderjs.range(0, count - 1 | 0);
  var totalClonedGameObjectArr = /* array */[];
  var _clone = function (uid, transform, countRangeArr, clonedParentTransformArr, totalClonedGameObjectArr, state) {
    var clonedGameObjectArr = /* array */[];
    var state$1 = ArraySystem$Wonderjs.reduceState((function (state, _) {
            var match = GameObjectCreateCommon$Wonderjs.create(state);
            clonedGameObjectArr.push(match[1]);
            return match[0];
          }), state, countRangeArr);
    totalClonedGameObjectArr.push(clonedGameObjectArr);
    var match = GameObjectGetComponentCommon$Wonderjs.getMeshRendererComponent(uid, state$1);
    var state$2;
    if (match) {
      var match$1 = GameObjectCloneComponentCommon$Wonderjs.cloneMeshRendererComponent(match[0], countRangeArr, state$1);
      state$2 = GameObjectAddComponentCommon$Wonderjs.batchAddMeshRendererComponentForClone(clonedGameObjectArr, match$1[1], match$1[0]);
    } else {
      state$2 = state$1;
    }
    var match$2 = GameObjectGetComponentCommon$Wonderjs.getGeometryComponent(uid, state$2);
    var state$3;
    if (match$2) {
      var match$3 = GameObjectCloneComponentCommon$Wonderjs.cloneGeometryComponent(match$2[0], countRangeArr, state$2);
      state$3 = GameObjectAddComponentCommon$Wonderjs.batchAddGeometryComponentForClone(clonedGameObjectArr, match$3[1], match$3[0]);
    } else {
      state$3 = state$2;
    }
    var match$4 = GameObjectGetComponentCommon$Wonderjs.getMaterialComponent(uid, state$3);
    var state$4;
    if (match$4) {
      var match$5 = GameObjectCloneComponentCommon$Wonderjs.cloneMaterialComponent(match$4[0], countRangeArr, isShareMaterial, state$3);
      state$4 = GameObjectAddComponentCommon$Wonderjs.batchAddMaterialComponentForClone(clonedGameObjectArr, match$5[1], isShareMaterial, match$5[0]);
    } else {
      state$4 = state$3;
    }
    var match$6 = GameObjectGetComponentCommon$Wonderjs.getCameraControllerComponent(uid, state$4);
    var state$5;
    if (match$6) {
      var match$7 = GameObjectCloneComponentCommon$Wonderjs.cloneCameraControllerComponent(match$6[0], countRangeArr, state$4);
      state$5 = GameObjectAddComponentCommon$Wonderjs.batchAddCameraControllerComponentForClone(clonedGameObjectArr, match$7[1], match$7[0]);
    } else {
      state$5 = state$4;
    }
    var match$8 = GameObjectCloneComponentCommon$Wonderjs.cloneTransformComponent(transform, countRangeArr, state$5);
    var clonedTransformArr = match$8[1];
    var state$6 = match$8[0];
    GameObjectAddComponentCommon$Wonderjs.batchAddTransformComponentForClone(clonedGameObjectArr, clonedTransformArr, state$6);
    ArraySystem$Wonderjs.reduceState((function (state, childTransform) {
            return _clone(Js_option.getExn(TransformSystem$Wonderjs.getGameObject(childTransform, state)), childTransform, countRangeArr, clonedTransformArr, totalClonedGameObjectArr, state);
          }), state$6, TransformSystem$Wonderjs.unsafeGetChildren(transform, ArraySystem$Wonderjs.reduceOneParami((function (transformData, clonedParentTransform, i) {
                    return TransformSystem$Wonderjs.setParentNotMarkDirty(/* Some */[clonedParentTransform], Caml_array.caml_array_get(clonedTransformArr, i), transformData);
                  }), TransformSystem$Wonderjs.getTransformData(state$6), clonedParentTransformArr)));
    return state$6;
  };
  return /* tuple */[
          _clone(uid, Js_option.getExn(GameObjectGetComponentCommon$Wonderjs.getTransformComponent(uid, state)), countRangeArr, /* int array */[], totalClonedGameObjectArr, state),
          totalClonedGameObjectArr
        ];
}

function isAlive(uid, state) {
  var match = GameObjectStateCommon$Wonderjs.getGameObjectData(state);
  var disposedUidMap = match[/* disposedUidMap */2];
  var transformMap = match[/* transformMap */4];
  var match$1 = SparseMapSystem$WonderCommonlib.has(uid, disposedUidMap);
  if (match$1 !== 0) {
    return /* false */0;
  } else {
    var match$2 = SparseMapSystem$WonderCommonlib.has(uid, transformMap);
    if (match$2 !== 0) {
      return /* true */1;
    } else {
      return /* false */0;
    }
  }
}

function initGameObject(uid, state) {
  var match = GameObjectGetComponentCommon$Wonderjs.getGeometryComponent(uid, state);
  var state$1 = match ? GeometrySystem$Wonderjs.handleInitComponent(match[0], state) : state;
  var match$1 = GameObjectGetComponentCommon$Wonderjs.getMaterialComponent(uid, state$1);
  if (match$1) {
    return MaterialSystem$Wonderjs.handleInitComponent(DeviceManagerSystem$Wonderjs.getGl(state$1), match$1[0], state$1);
  } else {
    return state$1;
  }
}

var hasSourceInstanceComponent = GameObjectHasComponentCommon$Wonderjs.hasSourceInstanceComponent;

var getSourceInstanceComponent = GameObjectGetComponentCommon$Wonderjs.getSourceInstanceComponent;

var addSourceInstanceComponent = GameObjectAddComponentCommon$Wonderjs.addSourceInstanceComponent;

var disposeSourceInstanceComponent = GameObjectDisposeComponentCommon$Wonderjs.disposeSourceInstanceComponent;

var hasObjectInstanceComponent = GameObjectHasComponentCommon$Wonderjs.hasObjectInstanceComponent;

var getObjectInstanceComponent = GameObjectGetComponentCommon$Wonderjs.getObjectInstanceComponent;

var addObjectInstanceComponent = GameObjectAddComponentCommon$Wonderjs.addObjectInstanceComponent;

var disposeObjectInstanceComponent = GameObjectDisposeComponentCommon$Wonderjs.disposeObjectInstanceComponent;

var hasCameraControllerComponent = GameObjectHasComponentCommon$Wonderjs.hasCameraControllerComponent;

var getCameraControllerComponent = GameObjectGetComponentCommon$Wonderjs.getCameraControllerComponent;

var addCameraControllerComponent = GameObjectAddComponentCommon$Wonderjs.addCameraControllerComponent;

var disposeCameraControllerComponent = GameObjectDisposeComponentCommon$Wonderjs.disposeCameraControllerComponent;

var hasTransformComponent = GameObjectHasComponentCommon$Wonderjs.hasTransformComponent;

var getTransformComponent = GameObjectGetComponentCommon$Wonderjs.getTransformComponent;

var unsafeGetTransformComponent = GameObjectGetComponentCommon$Wonderjs.unsafeGetTransformComponent;

var addTransformComponent = GameObjectAddComponentCommon$Wonderjs.addTransformComponent;

var disposeTransformComponent = GameObjectDisposeComponentCommon$Wonderjs.disposeTransformComponent;

var hasGeometryComponent = GameObjectHasComponentCommon$Wonderjs.hasGeometryComponent;

var getGeometryComponent = GameObjectGetComponentCommon$Wonderjs.getGeometryComponent;

var unsafeGetGeometryComponent = GameObjectGetComponentCommon$Wonderjs.unsafeGetGeometryComponent;

var addGeometryComponent = GameObjectAddComponentCommon$Wonderjs.addGeometryComponent;

var disposeGeometryComponent = GameObjectDisposeComponentCommon$Wonderjs.disposeGeometryComponent;

var hasMeshRendererComponent = GameObjectHasComponentCommon$Wonderjs.hasMeshRendererComponent;

var getMeshRendererComponent = GameObjectGetComponentCommon$Wonderjs.getMeshRendererComponent;

var addMeshRendererComponent = GameObjectAddComponentCommon$Wonderjs.addMeshRendererComponent;

var disposeMeshRendererComponent = GameObjectDisposeComponentCommon$Wonderjs.disposeMeshRendererComponent;

var hasMaterialComponent = GameObjectHasComponentCommon$Wonderjs.hasMaterialComponent;

var getMaterialComponent = GameObjectGetComponentCommon$Wonderjs.getMaterialComponent;

var unsafeGetMaterialComponent = GameObjectGetComponentCommon$Wonderjs.unsafeGetMaterialComponent;

var addMaterialComponent = GameObjectAddComponentCommon$Wonderjs.addMaterialComponent;

var disposeMaterialComponent = GameObjectDisposeComponentCommon$Wonderjs.disposeMaterialComponent;

var deepCopyStateForRestore = GameObjectStateCommon$Wonderjs.deepCopyStateForRestore;

export {
  init                             ,
  initDataFromState                ,
  update                           ,
  hasSourceInstanceComponent       ,
  getSourceInstanceComponent       ,
  addSourceInstanceComponent       ,
  disposeSourceInstanceComponent   ,
  hasObjectInstanceComponent       ,
  getObjectInstanceComponent       ,
  addObjectInstanceComponent       ,
  disposeObjectInstanceComponent   ,
  hasCameraControllerComponent     ,
  getCameraControllerComponent     ,
  addCameraControllerComponent     ,
  disposeCameraControllerComponent ,
  hasTransformComponent            ,
  getTransformComponent            ,
  unsafeGetTransformComponent      ,
  addTransformComponent            ,
  disposeTransformComponent        ,
  hasGeometryComponent             ,
  getGeometryComponent             ,
  unsafeGetGeometryComponent       ,
  addGeometryComponent             ,
  disposeGeometryComponent         ,
  hasMeshRendererComponent         ,
  getMeshRendererComponent         ,
  addMeshRendererComponent         ,
  disposeMeshRendererComponent     ,
  hasMaterialComponent             ,
  getMaterialComponent             ,
  unsafeGetMaterialComponent       ,
  addMaterialComponent             ,
  disposeMaterialComponent         ,
  create                           ,
  batchDispose                     ,
  dispose                          ,
  clone                            ,
  isAlive                          ,
  initGameObject                   ,
  deepCopyStateForRestore          ,
  
}
/* ArraySystem-Wonderjs Not a pure module */
