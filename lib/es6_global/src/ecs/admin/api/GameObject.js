// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as Js_option                   from "../../../../../../node_modules/bs-platform/lib/es6/js_option.js";
import * as Log$WonderLog               from "../../../../../../node_modules/wonder-log/lib/es6_global/src/Log.js";
import * as Contract$WonderLog          from "../../../../../../node_modules/wonder-log/lib/es6_global/src/Contract.js";
import * as StateData$Wonderjs          from "../../../core/StateData.js";
import * as GameObjectAdmin$Wonderjs    from "../GameObjectAdmin.js";
import * as ArraySystem$WonderCommonlib from "../../../../../../node_modules/wonder-commonlib/lib/es6_global/src/ArraySystem.js";

var createGameObject = GameObjectAdmin$Wonderjs.create;

function _checkGameObjectShouldAlive(gameObject, state) {
  return Contract$WonderLog.test(Log$WonderLog.buildAssertMessage("gameObject alive", "not"), (function () {
                return Contract$WonderLog.assertTrue(GameObjectAdmin$Wonderjs.isAlive(gameObject, state));
              }));
}

function addGameObjectTransformComponent(gameObject, component, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), StateData$Wonderjs.stateData[/* isDebug */1]);
  return GameObjectAdmin$Wonderjs.addTransformComponent(gameObject, component, state);
}

function disposeGameObjectTransformComponent(gameObject, component, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), StateData$Wonderjs.stateData[/* isDebug */1]);
  return GameObjectAdmin$Wonderjs.disposeTransformComponent(gameObject, component, state);
}

function getGameObjectTransformComponent(gameObject, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), StateData$Wonderjs.stateData[/* isDebug */1]);
  return Js_option.getExn(GameObjectAdmin$Wonderjs.getTransformComponent(gameObject, state));
}

function hasGameObjectTransformComponent(gameObject, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), StateData$Wonderjs.stateData[/* isDebug */1]);
  return GameObjectAdmin$Wonderjs.hasTransformComponent(gameObject, state);
}

function addGameObjectCameraControllerComponent(gameObject, component, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), StateData$Wonderjs.stateData[/* isDebug */1]);
  return GameObjectAdmin$Wonderjs.addCameraControllerComponent(gameObject, component, state);
}

function disposeGameObjectCameraControllerComponent(gameObject, component, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), StateData$Wonderjs.stateData[/* isDebug */1]);
  return GameObjectAdmin$Wonderjs.disposeCameraControllerComponent(gameObject, component, state);
}

function getGameObjectCameraControllerComponent(gameObject, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), StateData$Wonderjs.stateData[/* isDebug */1]);
  return Js_option.getExn(GameObjectAdmin$Wonderjs.getCameraControllerComponent(gameObject, state));
}

function hasGameObjectCameraControllerComponent(gameObject, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), StateData$Wonderjs.stateData[/* isDebug */1]);
  return GameObjectAdmin$Wonderjs.hasCameraControllerComponent(gameObject, state);
}

function addGameObjectBasicMaterialComponent(gameObject, component, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), StateData$Wonderjs.stateData[/* isDebug */1]);
  return GameObjectAdmin$Wonderjs.addBasicMaterialComponent(gameObject, component, state);
}

function disposeGameObjectBasicMaterialComponent(gameObject, component, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), StateData$Wonderjs.stateData[/* isDebug */1]);
  return GameObjectAdmin$Wonderjs.disposeBasicMaterialComponent(gameObject, component, state);
}

function getGameObjectBasicMaterialComponent(gameObject, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), StateData$Wonderjs.stateData[/* isDebug */1]);
  return GameObjectAdmin$Wonderjs.unsafeGetBasicMaterialComponent(gameObject, state);
}

function hasGameObjectBasicMaterialComponent(gameObject, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), StateData$Wonderjs.stateData[/* isDebug */1]);
  return GameObjectAdmin$Wonderjs.hasBasicMaterialComponent(gameObject, state);
}

function addGameObjectLightMaterialComponent(gameObject, component, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), StateData$Wonderjs.stateData[/* isDebug */1]);
  return GameObjectAdmin$Wonderjs.addLightMaterialComponent(gameObject, component, state);
}

function disposeGameObjectLightMaterialComponent(gameObject, component, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), StateData$Wonderjs.stateData[/* isDebug */1]);
  return GameObjectAdmin$Wonderjs.disposeLightMaterialComponent(gameObject, component, state);
}

function getGameObjectLightMaterialComponent(gameObject, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), StateData$Wonderjs.stateData[/* isDebug */1]);
  return GameObjectAdmin$Wonderjs.unsafeGetLightMaterialComponent(gameObject, state);
}

function hasGameObjectLightMaterialComponent(gameObject, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), StateData$Wonderjs.stateData[/* isDebug */1]);
  return GameObjectAdmin$Wonderjs.hasLightMaterialComponent(gameObject, state);
}

function addGameObjectMeshRendererComponent(gameObject, component, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), StateData$Wonderjs.stateData[/* isDebug */1]);
  return GameObjectAdmin$Wonderjs.addMeshRendererComponent(gameObject, component, state);
}

function disposeGameObjectMeshRendererComponent(gameObject, component, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), StateData$Wonderjs.stateData[/* isDebug */1]);
  return GameObjectAdmin$Wonderjs.disposeMeshRendererComponent(gameObject, component, state);
}

function getGameObjectMeshRendererComponent(gameObject, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), StateData$Wonderjs.stateData[/* isDebug */1]);
  return Js_option.getExn(GameObjectAdmin$Wonderjs.getMeshRendererComponent(gameObject, state));
}

function hasGameObjectMeshRendererComponent(gameObject, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), StateData$Wonderjs.stateData[/* isDebug */1]);
  return GameObjectAdmin$Wonderjs.hasMeshRendererComponent(gameObject, state);
}

function addGameObjectGeometryComponent(gameObject, component, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), StateData$Wonderjs.stateData[/* isDebug */1]);
  return GameObjectAdmin$Wonderjs.addGeometryComponent(gameObject, component, state);
}

function disposeGameObjectGeometryComponent(gameObject, component, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), StateData$Wonderjs.stateData[/* isDebug */1]);
  return GameObjectAdmin$Wonderjs.disposeGeometryComponent(gameObject, component, state);
}

function getGameObjectGeometryComponent(gameObject, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), StateData$Wonderjs.stateData[/* isDebug */1]);
  return Js_option.getExn(GameObjectAdmin$Wonderjs.getGeometryComponent(gameObject, state));
}

function hasGameObjectGeometryComponent(gameObject, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), StateData$Wonderjs.stateData[/* isDebug */1]);
  return GameObjectAdmin$Wonderjs.hasGeometryComponent(gameObject, state);
}

function addGameObjectSourceInstanceComponent(gameObject, component, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), StateData$Wonderjs.stateData[/* isDebug */1]);
  return GameObjectAdmin$Wonderjs.addSourceInstanceComponent(gameObject, component, state);
}

function getGameObjectSourceInstanceComponent(gameObject, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), StateData$Wonderjs.stateData[/* isDebug */1]);
  return GameObjectAdmin$Wonderjs.getSourceInstanceComponent(gameObject, state);
}

function hasGameObjectSourceInstanceComponent(gameObject, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), StateData$Wonderjs.stateData[/* isDebug */1]);
  return GameObjectAdmin$Wonderjs.hasSourceInstanceComponent(gameObject, state);
}

function disposeGameObjectSourceInstanceComponent(gameObject, component, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), StateData$Wonderjs.stateData[/* isDebug */1]);
  return GameObjectAdmin$Wonderjs.disposeSourceInstanceComponent(gameObject, component, GameObjectAdmin$Wonderjs.batchDispose, state);
}

function addGameObjectObjectInstanceComponent(gameObject, component, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), StateData$Wonderjs.stateData[/* isDebug */1]);
  return GameObjectAdmin$Wonderjs.addObjectInstanceComponent(gameObject, component, state);
}

function getGameObjectObjectInstanceComponent(gameObject, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), StateData$Wonderjs.stateData[/* isDebug */1]);
  return GameObjectAdmin$Wonderjs.getObjectInstanceComponent(gameObject, state);
}

function disposeGameObjectObjectInstanceComponent(gameObject, component, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), StateData$Wonderjs.stateData[/* isDebug */1]);
  return GameObjectAdmin$Wonderjs.disposeObjectInstanceComponent(gameObject, component, state);
}

function addGameObjectAmbientLightComponent(gameObject, component, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), StateData$Wonderjs.stateData[/* isDebug */1]);
  return GameObjectAdmin$Wonderjs.addAmbientLightComponent(gameObject, component, state);
}

function disposeGameObjectAmbientLightComponent(gameObject, component, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), StateData$Wonderjs.stateData[/* isDebug */1]);
  return GameObjectAdmin$Wonderjs.disposeAmbientLightComponent(gameObject, component, state);
}

function getGameObjectAmbientLightComponent(gameObject, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), StateData$Wonderjs.stateData[/* isDebug */1]);
  return GameObjectAdmin$Wonderjs.unsafeGetAmbientLightComponent(gameObject, state);
}

function hasGameObjectAmbientLightComponent(gameObject, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), StateData$Wonderjs.stateData[/* isDebug */1]);
  return GameObjectAdmin$Wonderjs.hasAmbientLightComponent(gameObject, state);
}

function addGameObjectDirectionLightComponent(gameObject, component, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), StateData$Wonderjs.stateData[/* isDebug */1]);
  return GameObjectAdmin$Wonderjs.addDirectionLightComponent(gameObject, component, state);
}

function disposeGameObjectDirectionLightComponent(gameObject, component, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), StateData$Wonderjs.stateData[/* isDebug */1]);
  return GameObjectAdmin$Wonderjs.disposeDirectionLightComponent(gameObject, component, state);
}

function getGameObjectDirectionLightComponent(gameObject, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), StateData$Wonderjs.stateData[/* isDebug */1]);
  return GameObjectAdmin$Wonderjs.unsafeGetDirectionLightComponent(gameObject, state);
}

function hasGameObjectDirectionLightComponent(gameObject, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), StateData$Wonderjs.stateData[/* isDebug */1]);
  return GameObjectAdmin$Wonderjs.hasDirectionLightComponent(gameObject, state);
}

function addGameObjectPointLightComponent(gameObject, component, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), StateData$Wonderjs.stateData[/* isDebug */1]);
  return GameObjectAdmin$Wonderjs.addPointLightComponent(gameObject, component, state);
}

function disposeGameObjectPointLightComponent(gameObject, component, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), StateData$Wonderjs.stateData[/* isDebug */1]);
  return GameObjectAdmin$Wonderjs.disposePointLightComponent(gameObject, component, state);
}

function getGameObjectPointLightComponent(gameObject, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), StateData$Wonderjs.stateData[/* isDebug */1]);
  return GameObjectAdmin$Wonderjs.unsafeGetPointLightComponent(gameObject, state);
}

function hasGameObjectPointLightComponent(gameObject, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), StateData$Wonderjs.stateData[/* isDebug */1]);
  return GameObjectAdmin$Wonderjs.hasPointLightComponent(gameObject, state);
}

var isGameObjectAlive = GameObjectAdmin$Wonderjs.isAlive;

function disposeGameObject(gameObject, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), StateData$Wonderjs.stateData[/* isDebug */1]);
  return GameObjectAdmin$Wonderjs.dispose(gameObject, state);
}

function initGameObject(gameObject, state) {
  Contract$WonderLog.requireCheck((function () {
          return _checkGameObjectShouldAlive(gameObject, state);
        }), StateData$Wonderjs.stateData[/* isDebug */1]);
  return GameObjectAdmin$Wonderjs.initGameObject(gameObject, state);
}

function batchDisposeGameObject(gameObjectArray, state) {
  Contract$WonderLog.requireCheck((function () {
          return ArraySystem$WonderCommonlib.forEach((function (gameObject) {
                        return _checkGameObjectShouldAlive(gameObject, state);
                      }), gameObjectArray);
        }), StateData$Wonderjs.stateData[/* isDebug */1]);
  return GameObjectAdmin$Wonderjs.batchDispose(gameObjectArray, state);
}

function cloneGameObject(gameObject, count, isShareMaterial, state) {
  return GameObjectAdmin$Wonderjs.clone(gameObject, count, +isShareMaterial, state);
}

export {
  createGameObject                           ,
  _checkGameObjectShouldAlive                ,
  addGameObjectTransformComponent            ,
  disposeGameObjectTransformComponent        ,
  getGameObjectTransformComponent            ,
  hasGameObjectTransformComponent            ,
  addGameObjectCameraControllerComponent     ,
  disposeGameObjectCameraControllerComponent ,
  getGameObjectCameraControllerComponent     ,
  hasGameObjectCameraControllerComponent     ,
  addGameObjectBasicMaterialComponent        ,
  disposeGameObjectBasicMaterialComponent    ,
  getGameObjectBasicMaterialComponent        ,
  hasGameObjectBasicMaterialComponent        ,
  addGameObjectLightMaterialComponent        ,
  disposeGameObjectLightMaterialComponent    ,
  getGameObjectLightMaterialComponent        ,
  hasGameObjectLightMaterialComponent        ,
  addGameObjectMeshRendererComponent         ,
  disposeGameObjectMeshRendererComponent     ,
  getGameObjectMeshRendererComponent         ,
  hasGameObjectMeshRendererComponent         ,
  addGameObjectGeometryComponent             ,
  disposeGameObjectGeometryComponent         ,
  getGameObjectGeometryComponent             ,
  hasGameObjectGeometryComponent             ,
  addGameObjectSourceInstanceComponent       ,
  getGameObjectSourceInstanceComponent       ,
  hasGameObjectSourceInstanceComponent       ,
  disposeGameObjectSourceInstanceComponent   ,
  addGameObjectObjectInstanceComponent       ,
  getGameObjectObjectInstanceComponent       ,
  disposeGameObjectObjectInstanceComponent   ,
  addGameObjectAmbientLightComponent         ,
  disposeGameObjectAmbientLightComponent     ,
  getGameObjectAmbientLightComponent         ,
  hasGameObjectAmbientLightComponent         ,
  addGameObjectDirectionLightComponent       ,
  disposeGameObjectDirectionLightComponent   ,
  getGameObjectDirectionLightComponent       ,
  hasGameObjectDirectionLightComponent       ,
  addGameObjectPointLightComponent           ,
  disposeGameObjectPointLightComponent       ,
  getGameObjectPointLightComponent           ,
  hasGameObjectPointLightComponent           ,
  isGameObjectAlive                          ,
  disposeGameObject                          ,
  initGameObject                             ,
  batchDisposeGameObject                     ,
  cloneGameObject                            ,
  
}
/* Log-WonderLog Not a pure module */
