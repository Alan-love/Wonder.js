// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as Log$WonderLog                               from "../../../../../node_modules/wonder-log/lib/es6_global/src/Log.js";
import * as Contract$WonderLog                          from "../../../../../node_modules/wonder-log/lib/es6_global/src/Contract.js";
import * as StateData$Wonderjs                          from "../../core/StateData.js";
import * as ArraySystem$WonderCommonlib                 from "../../../../../node_modules/wonder-commonlib/lib/es6_global/src/ArraySystem.js";
import * as GeometryGroupCommon$Wonderjs                from "../component/system/geometry/GeometryGroupCommon.js";
import * as GameObjectStateCommon$Wonderjs              from "./GameObjectStateCommon.js";
import * as SparseMapSystem$WonderCommonlib             from "../../../../../node_modules/wonder-commonlib/lib/es6_global/src/SparseMapSystem.js";
import * as BasicMaterialGroupCommon$Wonderjs           from "../component/system/material/basic/BasicMaterialGroupCommon.js";
import * as GeometryGameObjectCommon$Wonderjs           from "../component/system/geometry/GeometryGameObjectCommon.js";
import * as LightMaterialGroupCommon$Wonderjs           from "../component/system/material/light/LightMaterialGroupCommon.js";
import * as GameObjectComponentCommon$Wonderjs          from "./GameObjectComponentCommon.js";
import * as GeometryAddComponentCommon$Wonderjs         from "../component/system/geometry/GeometryAddComponentCommon.js";
import * as TransformAddComponentCommon$Wonderjs        from "../component/system/transform/TransformAddComponentCommon.js";
import * as PointLightAddComponentCommon$Wonderjs       from "../component/system/light/point/PointLightAddComponentCommon.js";
import * as BasicMaterialGameObjectCommon$Wonderjs      from "../component/system/material/basic/BasicMaterialGameObjectCommon.js";
import * as LightMaterialGameObjectCommon$Wonderjs      from "../component/system/material/light/LightMaterialGameObjectCommon.js";
import * as AmbientLightAddComponentCommon$Wonderjs     from "../component/system/light/ambient/AmbientLightAddComponentCommon.js";
import * as MeshRendererAddComponentCommon$Wonderjs     from "../component/system/meshRenderer/MeshRendererAddComponentCommon.js";
import * as BasicMaterialAddComponentCommon$Wonderjs    from "../component/system/material/basic/BasicMaterialAddComponentCommon.js";
import * as LightMaterialAddComponentCommon$Wonderjs    from "../component/system/material/light/LightMaterialAddComponentCommon.js";
import * as DirectionLightAddComponentCommon$Wonderjs   from "../component/system/light/direction/DirectionLightAddComponentCommon.js";
import * as ObjectInstanceAddComponentCommon$Wonderjs   from "../component/system/instance/objectInstance/ObjectInstanceAddComponentCommon.js";
import * as SourceInstanceAddComponentCommon$Wonderjs   from "../component/system/instance/sourceInstance/SourceInstanceAddComponentCommon.js";
import * as CameraControllerAddComponentCommon$Wonderjs from "../component/system/cameraController/CameraControllerAddComponentCommon.js";

function _addComponent(uid, component, componentMap) {
  Contract$WonderLog.requireCheck((function () {
          return Contract$WonderLog.test(Log$WonderLog.buildAssertMessage("this type of the component shouldn\'t be added before", "not"), (function () {
                        return Contract$WonderLog.assertFalse(GameObjectComponentCommon$Wonderjs.hasComponent(uid, componentMap));
                      }));
        }), StateData$Wonderjs.stateData[/* isDebug */1]);
  SparseMapSystem$WonderCommonlib.set(uid, component, componentMap);
  return /* () */0;
}

function _addCommonComponent(param, handleAddComponentFunc, state) {
  var component = param[1];
  var uid = param[0];
  _addComponent(uid, component, param[2]);
  return handleAddComponentFunc(component, uid, state);
}

function _addSharableComponent(param, param$1, state) {
  var component = param[1];
  var uid = param[0];
  _addComponent(uid, component, param[2]);
  if (param[3]) {
    return param$1[0](component, state);
  } else {
    return param$1[1](component, uid, state);
  }
}

function addSourceInstanceComponent(uid, component, state) {
  return _addCommonComponent(/* tuple */[
              uid,
              component,
              GameObjectStateCommon$Wonderjs.getGameObjectData(state)[/* sourceInstanceMap */10]
            ], SourceInstanceAddComponentCommon$Wonderjs.handleAddComponent, state);
}

function addObjectInstanceComponent(uid, component, state) {
  return _addCommonComponent(/* tuple */[
              uid,
              component,
              GameObjectStateCommon$Wonderjs.getGameObjectData(state)[/* objectInstanceMap */11]
            ], ObjectInstanceAddComponentCommon$Wonderjs.handleAddComponent, state);
}

function addCameraControllerComponent(uid, component, state) {
  return _addCommonComponent(/* tuple */[
              uid,
              component,
              GameObjectStateCommon$Wonderjs.getGameObjectData(state)[/* cameraControllerMap */5]
            ], CameraControllerAddComponentCommon$Wonderjs.handleAddComponent, state);
}

function addTransformComponent(uid, component, state) {
  return _addCommonComponent(/* tuple */[
              uid,
              component,
              GameObjectStateCommon$Wonderjs.getGameObjectData(state)[/* transformMap */4]
            ], TransformAddComponentCommon$Wonderjs.handleAddComponent, state);
}

function addMeshRendererComponent(uid, component, state) {
  return _addCommonComponent(/* tuple */[
              uid,
              component,
              GameObjectStateCommon$Wonderjs.getGameObjectData(state)[/* meshRendererMap */7]
            ], MeshRendererAddComponentCommon$Wonderjs.handleAddComponent, state);
}

function addGeometryComponent(uid, component, state) {
  return _addSharableComponent(/* tuple */[
              uid,
              component,
              GameObjectStateCommon$Wonderjs.getGameObjectData(state)[/* geometryMap */6],
              GeometryGameObjectCommon$Wonderjs.getGameObject(component, state)
            ], /* tuple */[
              GeometryGroupCommon$Wonderjs.increaseGroupCount,
              GeometryAddComponentCommon$Wonderjs.handleAddComponent
            ], state);
}

function addBasicMaterialComponent(uid, component, state) {
  return _addSharableComponent(/* tuple */[
              uid,
              component,
              GameObjectStateCommon$Wonderjs.getGameObjectData(state)[/* basicMaterialMap */8],
              BasicMaterialGameObjectCommon$Wonderjs.getGameObject(component, state)
            ], /* tuple */[
              BasicMaterialGroupCommon$Wonderjs.increaseGroupCount,
              BasicMaterialAddComponentCommon$Wonderjs.handleAddComponent
            ], state);
}

function addLightMaterialComponent(uid, component, state) {
  return _addSharableComponent(/* tuple */[
              uid,
              component,
              GameObjectStateCommon$Wonderjs.getGameObjectData(state)[/* lightMaterialMap */9],
              LightMaterialGameObjectCommon$Wonderjs.getGameObject(component, state)
            ], /* tuple */[
              LightMaterialGroupCommon$Wonderjs.increaseGroupCount,
              LightMaterialAddComponentCommon$Wonderjs.handleAddComponent
            ], state);
}

function addAmbientLightComponent(uid, component, state) {
  return _addCommonComponent(/* tuple */[
              uid,
              component,
              GameObjectStateCommon$Wonderjs.getGameObjectData(state)[/* ambientLightMap */12]
            ], AmbientLightAddComponentCommon$Wonderjs.handleAddComponent, state);
}

function addDirectionLightComponent(uid, component, state) {
  return _addCommonComponent(/* tuple */[
              uid,
              component,
              GameObjectStateCommon$Wonderjs.getGameObjectData(state)[/* directionLightMap */13]
            ], DirectionLightAddComponentCommon$Wonderjs.handleAddComponent, state);
}

function addPointLightComponent(uid, component, state) {
  return _addCommonComponent(/* tuple */[
              uid,
              component,
              GameObjectStateCommon$Wonderjs.getGameObjectData(state)[/* pointLightMap */14]
            ], PointLightAddComponentCommon$Wonderjs.handleAddComponent, state);
}

function _checkBatchAdd(uidArr, componentArr) {
  return Contract$WonderLog.requireCheck((function () {
                var gameObjectCount = uidArr.length;
                var componentCount = componentArr.length;
                return Contract$WonderLog.test(Log$WonderLog.buildAssertMessage("one gameObject should add one component", "" + (String(gameObjectCount) + (" gameObject add " + (String(componentCount) + " components")))), (function () {
                              return Contract$WonderLog.Operators[/* = */0](gameObjectCount, componentCount);
                            }));
              }), StateData$Wonderjs.stateData[/* isDebug */1]);
}

function _batchAddComponent(param, handleAddComponentFunc, state) {
  var componentMap = param[2];
  var componentArr = param[1];
  var uidArr = param[0];
  _checkBatchAdd(uidArr, componentArr);
  return ArraySystem$WonderCommonlib.reduceOneParami((function (state, uid, index) {
                var component = componentArr[index];
                _addComponent(uid, component, componentMap);
                return handleAddComponentFunc(component, uid, state);
              }), state, uidArr);
}

function _batchAddSharableComponent(param, increaseGroupCountFunc, state) {
  var componentMap = param[2];
  var componentArr = param[1];
  var uidArr = param[0];
  _checkBatchAdd(uidArr, componentArr);
  return ArraySystem$WonderCommonlib.reduceOneParami((function (state, uid, index) {
                var component = componentArr[index];
                _addComponent(uid, component, componentMap);
                return increaseGroupCountFunc(component, state);
              }), state, uidArr);
}

function batchAddTransformComponentForClone(uidArr, componentArr, state) {
  return _batchAddComponent(/* tuple */[
              uidArr,
              componentArr,
              GameObjectStateCommon$Wonderjs.getGameObjectData(state)[/* transformMap */4]
            ], TransformAddComponentCommon$Wonderjs.handleAddComponent, state);
}

function batchAddMeshRendererComponentForClone(uidArr, componentArr, state) {
  return _batchAddComponent(/* tuple */[
              uidArr,
              componentArr,
              GameObjectStateCommon$Wonderjs.getGameObjectData(state)[/* meshRendererMap */7]
            ], MeshRendererAddComponentCommon$Wonderjs.handleAddComponent, state);
}

function batchAddGeometryComponentForClone(uidArr, componentArr, state) {
  return _batchAddSharableComponent(/* tuple */[
              uidArr,
              componentArr,
              GameObjectStateCommon$Wonderjs.getGameObjectData(state)[/* geometryMap */6]
            ], GeometryGroupCommon$Wonderjs.increaseGroupCount, state);
}

function _batchAddMaterialComponentForClone(isShareBasicMaterial, param, param$1, state) {
  var componentMap = param[2];
  var componentArr = param[1];
  var uidArr = param[0];
  if (isShareBasicMaterial !== 0) {
    return _batchAddSharableComponent(/* tuple */[
                uidArr,
                componentArr,
                componentMap
              ], param$1[0], state);
  } else {
    return _batchAddComponent(/* tuple */[
                uidArr,
                componentArr,
                componentMap
              ], param$1[1], state);
  }
}

function batchAddBasicMaterialComponentForClone(isShareMaterial, uidArr, componentArr, state) {
  GameObjectStateCommon$Wonderjs.getGameObjectData(state)[/* basicMaterialMap */8];
  return _batchAddMaterialComponentForClone(isShareMaterial, /* tuple */[
              uidArr,
              componentArr,
              GameObjectStateCommon$Wonderjs.getGameObjectData(state)[/* basicMaterialMap */8]
            ], /* tuple */[
              BasicMaterialGroupCommon$Wonderjs.increaseGroupCount,
              BasicMaterialAddComponentCommon$Wonderjs.handleAddComponent
            ], state);
}

function batchAddLightMaterialComponentForClone(isShareMaterial, uidArr, componentArr, state) {
  return _batchAddMaterialComponentForClone(isShareMaterial, /* tuple */[
              uidArr,
              componentArr,
              GameObjectStateCommon$Wonderjs.getGameObjectData(state)[/* lightMaterialMap */9]
            ], /* tuple */[
              LightMaterialGroupCommon$Wonderjs.increaseGroupCount,
              LightMaterialAddComponentCommon$Wonderjs.handleAddComponent
            ], state);
}

function batchAddCameraControllerComponentForClone(uidArr, componentArr, state) {
  return _batchAddComponent(/* tuple */[
              uidArr,
              componentArr,
              GameObjectStateCommon$Wonderjs.getGameObjectData(state)[/* cameraControllerMap */5]
            ], CameraControllerAddComponentCommon$Wonderjs.handleAddComponent, state);
}

function batchAddAmbientLightComponentForClone(uidArr, componentArr, state) {
  return _batchAddComponent(/* tuple */[
              uidArr,
              componentArr,
              GameObjectStateCommon$Wonderjs.getGameObjectData(state)[/* ambientLightMap */12]
            ], AmbientLightAddComponentCommon$Wonderjs.handleAddComponent, state);
}

function batchAddDirectionLightComponentForClone(uidArr, componentArr, state) {
  return _batchAddComponent(/* tuple */[
              uidArr,
              componentArr,
              GameObjectStateCommon$Wonderjs.getGameObjectData(state)[/* directionLightMap */13]
            ], DirectionLightAddComponentCommon$Wonderjs.handleAddComponent, state);
}

function batchAddPointLightComponentForClone(uidArr, componentArr, state) {
  return _batchAddComponent(/* tuple */[
              uidArr,
              componentArr,
              GameObjectStateCommon$Wonderjs.getGameObjectData(state)[/* pointLightMap */14]
            ], PointLightAddComponentCommon$Wonderjs.handleAddComponent, state);
}

export {
  _addComponent                             ,
  _addCommonComponent                       ,
  _addSharableComponent                     ,
  addSourceInstanceComponent                ,
  addObjectInstanceComponent                ,
  addCameraControllerComponent              ,
  addTransformComponent                     ,
  addMeshRendererComponent                  ,
  addGeometryComponent                      ,
  addBasicMaterialComponent                 ,
  addLightMaterialComponent                 ,
  addAmbientLightComponent                  ,
  addDirectionLightComponent                ,
  addPointLightComponent                    ,
  _checkBatchAdd                            ,
  _batchAddComponent                        ,
  _batchAddSharableComponent                ,
  batchAddTransformComponentForClone        ,
  batchAddMeshRendererComponentForClone     ,
  batchAddGeometryComponentForClone         ,
  _batchAddMaterialComponentForClone        ,
  batchAddBasicMaterialComponentForClone    ,
  batchAddLightMaterialComponentForClone    ,
  batchAddCameraControllerComponentForClone ,
  batchAddAmbientLightComponentForClone     ,
  batchAddDirectionLightComponentForClone   ,
  batchAddPointLightComponentForClone       ,
  
}
/* Log-WonderLog Not a pure module */
