// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as Contract$Wonderjs                           from "../../definition/Contract.js";
import * as ArraySystem$Wonderjs                        from "../../structure/ArraySystem.js";
import * as GeometryGroupCommon$Wonderjs                from "../component/system/geometry/GeometryGroupCommon.js";
import * as MaterialGroupCommon$Wonderjs                from "../component/system/material/MaterialGroupCommon.js";
import * as GameObjectStateCommon$Wonderjs              from "./GameObjectStateCommon.js";
import * as SparseMapSystem$WonderCommonlib             from "../../../../../node_modules/wonder-commonlib/lib/es6_global/src/SparseMapSystem.js";
import * as GeometryGameObjectCommon$Wonderjs           from "../component/system/geometry/GeometryGameObjectCommon.js";
import * as MaterialGameObjectCommon$Wonderjs           from "../component/system/material/MaterialGameObjectCommon.js";
import * as GameObjectComponentCommon$Wonderjs          from "./GameObjectComponentCommon.js";
import * as GeometryAddComponentCommon$Wonderjs         from "../component/system/geometry/GeometryAddComponentCommon.js";
import * as MaterialAddComponentCommon$Wonderjs         from "../component/system/material/MaterialAddComponentCommon.js";
import * as TransformAddComponentCommon$Wonderjs        from "../component/system/transform/TransformAddComponentCommon.js";
import * as MeshRendererAddComponentCommon$Wonderjs     from "../component/system/meshRenderer/MeshRendererAddComponentCommon.js";
import * as ObjectInstanceAddComponentCommon$Wonderjs   from "../component/system/instance/objectInstance/ObjectInstanceAddComponentCommon.js";
import * as SourceInstanceAddComponentCommon$Wonderjs   from "../component/system/instance/sourceInstance/SourceInstanceAddComponentCommon.js";
import * as CameraControllerAddComponentCommon$Wonderjs from "../component/system/cameraController/CameraControllerAddComponentCommon.js";

function _addComponent(uid, component, componentMap) {
  Contract$Wonderjs.requireCheck((function () {
          return Contract$Wonderjs.test("this type of component is already exist, shouldn't add again", (function () {
                        return Contract$Wonderjs.assertFalse(GameObjectComponentCommon$Wonderjs.hasComponent(uid, componentMap));
                      }));
        }));
  SparseMapSystem$WonderCommonlib.set(uid, component, componentMap);
  return /* () */0;
}

function _addCommonComponent(param, handleAddComponentFunc, state) {
  var component = param[1];
  var uid = param[0];
  _addComponent(uid, component, param[2]);
  return handleAddComponentFunc(component, uid, state);
}

function _addSharableComponent(param, param$1, state) {
  var component = param[1];
  var uid = param[0];
  _addComponent(uid, component, param[2]);
  if (param[3]) {
    return param$1[0](component, state);
  } else {
    return param$1[1](component, uid, state);
  }
}

function addSourceInstanceComponent(uid, component, state) {
  return _addCommonComponent(/* tuple */[
              uid,
              component,
              GameObjectStateCommon$Wonderjs.getGameObjectData(state)[/* sourceInstanceMap */9]
            ], SourceInstanceAddComponentCommon$Wonderjs.handleAddComponent, state);
}

function addObjectInstanceComponent(uid, component, state) {
  return _addCommonComponent(/* tuple */[
              uid,
              component,
              GameObjectStateCommon$Wonderjs.getGameObjectData(state)[/* objectInstanceMap */10]
            ], ObjectInstanceAddComponentCommon$Wonderjs.handleAddComponent, state);
}

function addCameraControllerComponent(uid, component, state) {
  return _addCommonComponent(/* tuple */[
              uid,
              component,
              GameObjectStateCommon$Wonderjs.getGameObjectData(state)[/* cameraControllerMap */5]
            ], CameraControllerAddComponentCommon$Wonderjs.handleAddComponent, state);
}

function addTransformComponent(uid, component, state) {
  return _addCommonComponent(/* tuple */[
              uid,
              component,
              GameObjectStateCommon$Wonderjs.getGameObjectData(state)[/* transformMap */4]
            ], TransformAddComponentCommon$Wonderjs.handleAddComponent, state);
}

function addMeshRendererComponent(uid, component, state) {
  return _addCommonComponent(/* tuple */[
              uid,
              component,
              GameObjectStateCommon$Wonderjs.getGameObjectData(state)[/* meshRendererMap */7]
            ], MeshRendererAddComponentCommon$Wonderjs.handleAddComponent, state);
}

function addGeometryComponent(uid, component, state) {
  return _addSharableComponent(/* tuple */[
              uid,
              component,
              GameObjectStateCommon$Wonderjs.getGameObjectData(state)[/* geometryMap */6],
              GeometryGameObjectCommon$Wonderjs.getGameObject(component, state)
            ], /* tuple */[
              GeometryGroupCommon$Wonderjs.increaseGroupCount,
              GeometryAddComponentCommon$Wonderjs.handleAddComponent
            ], state);
}

function addMaterialComponent(uid, component, state) {
  return _addSharableComponent(/* tuple */[
              uid,
              component,
              GameObjectStateCommon$Wonderjs.getGameObjectData(state)[/* materialMap */8],
              MaterialGameObjectCommon$Wonderjs.getGameObject(component, state)
            ], /* tuple */[
              MaterialGroupCommon$Wonderjs.increaseGroupCount,
              MaterialAddComponentCommon$Wonderjs.handleAddComponent
            ], state);
}

function _batchAddComponent(param, handleAddComponentFunc, state) {
  var componentMap = param[2];
  var componentArr = param[1];
  var uidArray = param[0];
  Contract$Wonderjs.requireCheck((function () {
          return Contract$Wonderjs.test("one gameObject should add one component", (function () {
                        return Contract$Wonderjs.Operators[/* = */0](uidArray.length, componentArr.length);
                      }));
        }));
  return ArraySystem$Wonderjs.reduceOneParami((function (state, uid, index) {
                var component = componentArr[index];
                _addComponent(uid, component, componentMap);
                return handleAddComponentFunc(component, uid, state);
              }), state, uidArray);
}

function _batchAddSharableComponent(param, increaseGroupCountFunc, state) {
  var componentMap = param[2];
  var componentArr = param[1];
  var uidArray = param[0];
  Contract$Wonderjs.requireCheck((function () {
          return Contract$Wonderjs.test("one gameObject should add one component", (function () {
                        return Contract$Wonderjs.Operators[/* = */0](uidArray.length, componentArr.length);
                      }));
        }));
  return ArraySystem$Wonderjs.reduceOneParami((function (state, uid, index) {
                var component = componentArr[index];
                _addComponent(uid, component, componentMap);
                return increaseGroupCountFunc(component, state);
              }), state, uidArray);
}

function batchAddTransformComponentForClone(uidArray, componentArr, state) {
  return _batchAddComponent(/* tuple */[
              uidArray,
              componentArr,
              GameObjectStateCommon$Wonderjs.getGameObjectData(state)[/* transformMap */4]
            ], TransformAddComponentCommon$Wonderjs.handleAddComponent, state);
}

function batchAddMeshRendererComponentForClone(uidArray, componentArr, state) {
  return _batchAddComponent(/* tuple */[
              uidArray,
              componentArr,
              GameObjectStateCommon$Wonderjs.getGameObjectData(state)[/* meshRendererMap */7]
            ], MeshRendererAddComponentCommon$Wonderjs.handleAddComponent, state);
}

function batchAddGeometryComponentForClone(uidArray, componentArr, state) {
  return _batchAddSharableComponent(/* tuple */[
              uidArray,
              componentArr,
              GameObjectStateCommon$Wonderjs.getGameObjectData(state)[/* geometryMap */6]
            ], GeometryGroupCommon$Wonderjs.increaseGroupCount, state);
}

function batchAddMaterialComponentForClone(isShareMaterial, uidArray, componentArr, state) {
  var componentMap = GameObjectStateCommon$Wonderjs.getGameObjectData(state)[/* materialMap */8];
  if (isShareMaterial !== 0) {
    return _batchAddSharableComponent(/* tuple */[
                uidArray,
                componentArr,
                componentMap
              ], MaterialGroupCommon$Wonderjs.increaseGroupCount, state);
  } else {
    return _batchAddComponent(/* tuple */[
                uidArray,
                componentArr,
                componentMap
              ], MaterialAddComponentCommon$Wonderjs.handleAddComponent, state);
  }
}

function batchAddCameraControllerComponentForClone(uidArray, componentArr, state) {
  return _batchAddComponent(/* tuple */[
              uidArray,
              componentArr,
              GameObjectStateCommon$Wonderjs.getGameObjectData(state)[/* cameraControllerMap */5]
            ], CameraControllerAddComponentCommon$Wonderjs.handleAddComponent, state);
}

export {
  _addComponent                             ,
  _addCommonComponent                       ,
  _addSharableComponent                     ,
  addSourceInstanceComponent                ,
  addObjectInstanceComponent                ,
  addCameraControllerComponent              ,
  addTransformComponent                     ,
  addMeshRendererComponent                  ,
  addGeometryComponent                      ,
  addMaterialComponent                      ,
  _batchAddComponent                        ,
  _batchAddSharableComponent                ,
  batchAddTransformComponentForClone        ,
  batchAddMeshRendererComponentForClone     ,
  batchAddGeometryComponentForClone         ,
  batchAddMaterialComponentForClone         ,
  batchAddCameraControllerComponentForClone ,
  
}
/* ArraySystem-Wonderjs Not a pure module */
