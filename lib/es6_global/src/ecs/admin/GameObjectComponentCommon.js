// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as Js_option                                       from "../../../../../node_modules/bs-platform/lib/es6/js_option.js";
import * as Contract$Wonderjs                               from "../../definition/Contract.js";
import * as ArraySystem$Wonderjs                            from "../../structure/ArraySystem.js";
import * as GeometryGroupCommon$Wonderjs                    from "../component/system/geometry/GeometryGroupCommon.js";
import * as MaterialGroupCommon$Wonderjs                    from "../component/system/material/MaterialGroupCommon.js";
import * as GameObjectStateCommon$Wonderjs                  from "./GameObjectStateCommon.js";
import * as SparseMapSystem$WonderCommonlib                 from "../../../../../node_modules/wonder-commonlib/lib/es6_global/src/SparseMapSystem.js";
import * as GeometryGameObjectCommon$Wonderjs               from "../component/system/geometry/GeometryGameObjectCommon.js";
import * as MaterialGameObjectCommon$Wonderjs               from "../component/system/material/MaterialGameObjectCommon.js";
import * as GeometryAddComponentCommon$Wonderjs             from "../component/system/geometry/GeometryAddComponentCommon.js";
import * as MaterialAddComponentCommon$Wonderjs             from "../component/system/material/MaterialAddComponentCommon.js";
import * as TransformAddComponentCommon$Wonderjs            from "../component/system/transform/TransformAddComponentCommon.js";
import * as GeometryCloneComponentCommon$Wonderjs           from "../component/system/geometry/GeometryCloneComponentCommon.js";
import * as MaterialCloneComponentCommon$Wonderjs           from "../component/system/material/MaterialCloneComponentCommon.js";
import * as TransformCloneComponentCommon$Wonderjs          from "../component/system/transform/TransformCloneComponentCommon.js";
import * as GeometryDisposeComponentCommon$Wonderjs         from "../component/system/geometry/GeometryDisposeComponentCommon.js";
import * as MaterialDisposeComponentCommon$Wonderjs         from "../component/system/material/MaterialDisposeComponentCommon.js";
import * as MeshRendererAddComponentCommon$Wonderjs         from "../component/system/meshRenderer/MeshRendererAddComponentCommon.js";
import * as TransformDisposeComponentCommon$Wonderjs        from "../component/system/transform/TransformDisposeComponentCommon.js";
import * as MeshRendererCloneComponentCommon$Wonderjs       from "../component/system/meshRenderer/MeshRendererCloneComponentCommon.js";
import * as ObjectInstanceAddComponentCommon$Wonderjs       from "../component/system/instance/objectInstance/ObjectInstanceAddComponentCommon.js";
import * as SourceInstanceAddComponentCommon$Wonderjs       from "../component/system/instance/sourceInstance/SourceInstanceAddComponentCommon.js";
import * as CameraControllerAddComponentCommon$Wonderjs     from "../component/system/cameraController/CameraControllerAddComponentCommon.js";
import * as MeshRendererDisposeComponentCommon$Wonderjs     from "../component/system/meshRenderer/MeshRendererDisposeComponentCommon.js";
import * as CameraControllerCloneComponentCommon$Wonderjs   from "../component/system/cameraController/CameraControllerCloneComponentCommon.js";
import * as ObjectInstanceDisposeComponentCommon$Wonderjs   from "../component/system/instance/objectInstance/ObjectInstanceDisposeComponentCommon.js";
import * as SourceInstanceDisposeComponentCommon$Wonderjs   from "../component/system/instance/sourceInstance/SourceInstanceDisposeComponentCommon.js";
import * as CameraControllerDisposeComponentCommon$Wonderjs from "../component/system/cameraController/CameraControllerDisposeComponentCommon.js";

function _unsafeGetComponent(uid, componentMap) {
  return Contract$Wonderjs.ensureCheck((function () {
                return Contract$Wonderjs.test("component should exist", (function () {
                              return Contract$Wonderjs.assertExist(SparseMapSystem$WonderCommonlib.get(uid, componentMap));
                            }));
              }), SparseMapSystem$WonderCommonlib.unsafeGet(uid, componentMap));
}

var _getComponent = SparseMapSystem$WonderCommonlib.get;

function _hasComponent(uid, componentMap) {
  return Js_option.isSome(SparseMapSystem$WonderCommonlib.get(uid, componentMap));
}

function _addComponent(uid, component, componentMap) {
  Contract$Wonderjs.requireCheck((function () {
          return Contract$Wonderjs.test("this type of component is already exist, shouldn't add again", (function () {
                        return Contract$Wonderjs.assertFalse(Js_option.isSome(SparseMapSystem$WonderCommonlib.get(uid, componentMap)));
                      }));
        }));
  SparseMapSystem$WonderCommonlib.set(uid, component, componentMap);
  return /* () */0;
}

function hasSourceInstanceComponent(uid, state) {
  var componentMap = GameObjectStateCommon$Wonderjs.getGameObjectData(state)[/* sourceInstanceMap */9];
  return Js_option.isSome(SparseMapSystem$WonderCommonlib.get(uid, componentMap));
}

function getSourceInstanceComponent(uid, state) {
  var componentMap = GameObjectStateCommon$Wonderjs.getGameObjectData(state)[/* sourceInstanceMap */9];
  return SparseMapSystem$WonderCommonlib.get(uid, componentMap);
}

function unsafeGetSourceInstanceComponent(uid, state) {
  return _unsafeGetComponent(uid, GameObjectStateCommon$Wonderjs.getGameObjectData(state)[/* sourceInstanceMap */9]);
}

function addSourceInstanceComponent(uid, component, state) {
  _addComponent(uid, component, GameObjectStateCommon$Wonderjs.getGameObjectData(state)[/* sourceInstanceMap */9]);
  return SourceInstanceAddComponentCommon$Wonderjs.handleAddComponent(component, uid, state);
}

function disposeSourceInstanceComponent(_, component, batchDisposeGameObjectFunc, state) {
  return SourceInstanceDisposeComponentCommon$Wonderjs.handleDisposeComponent(component, batchDisposeGameObjectFunc, state);
}

function hasObjectInstanceComponent(uid, state) {
  var componentMap = GameObjectStateCommon$Wonderjs.getGameObjectData(state)[/* objectInstanceMap */10];
  return Js_option.isSome(SparseMapSystem$WonderCommonlib.get(uid, componentMap));
}

function getObjectInstanceComponent(uid, state) {
  var componentMap = GameObjectStateCommon$Wonderjs.getGameObjectData(state)[/* objectInstanceMap */10];
  return SparseMapSystem$WonderCommonlib.get(uid, componentMap);
}

function unsafeGetObjectInstanceComponent(uid, state) {
  return _unsafeGetComponent(uid, GameObjectStateCommon$Wonderjs.getGameObjectData(state)[/* objectInstanceMap */10]);
}

function addObjectInstanceComponent(uid, component, state) {
  _addComponent(uid, component, GameObjectStateCommon$Wonderjs.getGameObjectData(state)[/* objectInstanceMap */10]);
  return ObjectInstanceAddComponentCommon$Wonderjs.handleAddComponent(component, uid, state);
}

function disposeObjectInstanceComponent(_, component, state) {
  return ObjectInstanceDisposeComponentCommon$Wonderjs.handleDisposeComponent(component, state);
}

function hasCameraControllerComponent(uid, state) {
  var componentMap = GameObjectStateCommon$Wonderjs.getGameObjectData(state)[/* cameraControllerMap */5];
  return Js_option.isSome(SparseMapSystem$WonderCommonlib.get(uid, componentMap));
}

function getCameraControllerComponent(uid, state) {
  var componentMap = GameObjectStateCommon$Wonderjs.getGameObjectData(state)[/* cameraControllerMap */5];
  return SparseMapSystem$WonderCommonlib.get(uid, componentMap);
}

function addCameraControllerComponent(uid, component, state) {
  _addComponent(uid, component, GameObjectStateCommon$Wonderjs.getGameObjectData(state)[/* cameraControllerMap */5]);
  return CameraControllerAddComponentCommon$Wonderjs.handleAddComponent(component, uid, state);
}

function disposeCameraControllerComponent(_, component, state) {
  return CameraControllerDisposeComponentCommon$Wonderjs.handleDisposeComponent(component, state);
}

function hasTransformComponent(uid, state) {
  var componentMap = GameObjectStateCommon$Wonderjs.getGameObjectData(state)[/* transformMap */4];
  return Js_option.isSome(SparseMapSystem$WonderCommonlib.get(uid, componentMap));
}

function getTransformComponent(uid, state) {
  var componentMap = GameObjectStateCommon$Wonderjs.getGameObjectData(state)[/* transformMap */4];
  return SparseMapSystem$WonderCommonlib.get(uid, componentMap);
}

function unsafeGetTransformComponent(uid, state) {
  return _unsafeGetComponent(uid, GameObjectStateCommon$Wonderjs.getGameObjectData(state)[/* transformMap */4]);
}

function addTransformComponent(uid, component, state) {
  _addComponent(uid, component, GameObjectStateCommon$Wonderjs.getGameObjectData(state)[/* transformMap */4]);
  return TransformAddComponentCommon$Wonderjs.handleAddComponent(component, uid, state);
}

function disposeTransformComponent(_, component, state) {
  return TransformDisposeComponentCommon$Wonderjs.handleDisposeComponent(component, state);
}

function hasGeometryComponent(uid, state) {
  var componentMap = GameObjectStateCommon$Wonderjs.getGameObjectData(state)[/* geometryMap */6];
  return Js_option.isSome(SparseMapSystem$WonderCommonlib.get(uid, componentMap));
}

function getGeometryComponent(uid, state) {
  var componentMap = GameObjectStateCommon$Wonderjs.getGameObjectData(state)[/* geometryMap */6];
  return SparseMapSystem$WonderCommonlib.get(uid, componentMap);
}

function unsafeGetGeometryComponent(uid, state) {
  return _unsafeGetComponent(uid, GameObjectStateCommon$Wonderjs.getGameObjectData(state)[/* geometryMap */6]);
}

function addGeometryComponent(uid, component, state) {
  _addComponent(uid, component, GameObjectStateCommon$Wonderjs.getGameObjectData(state)[/* geometryMap */6]);
  var match = GeometryGameObjectCommon$Wonderjs.getGameObject(component, state);
  if (match) {
    return GeometryGroupCommon$Wonderjs.increaseGroupCount(component, state);
  } else {
    return GeometryAddComponentCommon$Wonderjs.handleAddComponent(component, uid, state);
  }
}

function disposeGeometryComponent(_, component, state) {
  return GeometryDisposeComponentCommon$Wonderjs.handleDisposeComponent(component, state);
}

function hasMeshRendererComponent(uid, state) {
  var componentMap = GameObjectStateCommon$Wonderjs.getGameObjectData(state)[/* meshRendererMap */7];
  return Js_option.isSome(SparseMapSystem$WonderCommonlib.get(uid, componentMap));
}

function getMeshRendererComponent(uid, state) {
  var componentMap = GameObjectStateCommon$Wonderjs.getGameObjectData(state)[/* meshRendererMap */7];
  return SparseMapSystem$WonderCommonlib.get(uid, componentMap);
}

function addMeshRendererComponent(uid, component, state) {
  _addComponent(uid, component, GameObjectStateCommon$Wonderjs.getGameObjectData(state)[/* meshRendererMap */7]);
  return MeshRendererAddComponentCommon$Wonderjs.handleAddComponent(component, uid, state);
}

function disposeMeshRendererComponent(uid, component, state) {
  return MeshRendererDisposeComponentCommon$Wonderjs.handleDisposeComponent(component, uid, state);
}

function hasMaterialComponent(uid, state) {
  var componentMap = GameObjectStateCommon$Wonderjs.getGameObjectData(state)[/* materialMap */8];
  return Js_option.isSome(SparseMapSystem$WonderCommonlib.get(uid, componentMap));
}

function getMaterialComponent(uid, state) {
  var componentMap = GameObjectStateCommon$Wonderjs.getGameObjectData(state)[/* materialMap */8];
  return SparseMapSystem$WonderCommonlib.get(uid, componentMap);
}

function unsafeGetMaterialComponent(uid, state) {
  return _unsafeGetComponent(uid, GameObjectStateCommon$Wonderjs.getGameObjectData(state)[/* materialMap */8]);
}

function addMaterialComponent(uid, component, state) {
  _addComponent(uid, component, GameObjectStateCommon$Wonderjs.getGameObjectData(state)[/* materialMap */8]);
  var match = MaterialGameObjectCommon$Wonderjs.getGameObject(component, state);
  if (match) {
    return MaterialGroupCommon$Wonderjs.increaseGroupCount(component, state);
  } else {
    return MaterialAddComponentCommon$Wonderjs.handleAddComponent(component, uid, state);
  }
}

function disposeMaterialComponent(_, component, state) {
  return MaterialDisposeComponentCommon$Wonderjs.handleDisposeComponent(component, state);
}

function _batchGetComponent(uidArray, componentMap, _) {
  return ArraySystem$Wonderjs.reduceOneParam((function (arr, uid) {
                var match = SparseMapSystem$WonderCommonlib.get(uid, componentMap);
                if (match) {
                  arr.push(match[0]);
                  return arr;
                } else {
                  return arr;
                }
              }), /* int array */[], uidArray);
}

function batchGetTransformComponent(uidArray, state) {
  return _batchGetComponent(uidArray, GameObjectStateCommon$Wonderjs.getGameObjectData(state)[/* transformMap */4], state);
}

function _batchDisposeComponent(uidMap, state, handleFunc, componentArray) {
  return handleFunc(componentArray, uidMap, state);
}

function batchDisposeTransformComponent(uidMap, state, componentArray) {
  return _batchDisposeComponent(uidMap, state, TransformDisposeComponentCommon$Wonderjs.handleBatchDisposeComponent, componentArray);
}

function batchGetMeshRendererComponent(uidArray, state) {
  return _batchGetComponent(uidArray, GameObjectStateCommon$Wonderjs.getGameObjectData(state)[/* meshRendererMap */7], state);
}

function batchDisposeMeshRendererComponent(uidMap, state, componentArray) {
  return _batchDisposeComponent(uidMap, state, MeshRendererDisposeComponentCommon$Wonderjs.handleBatchDisposeComponent, componentArray);
}

function batchGetMaterialComponent(uidArray, state) {
  return _batchGetComponent(uidArray, GameObjectStateCommon$Wonderjs.getGameObjectData(state)[/* materialMap */8], state);
}

function batchDisposeMaterialComponent(uidMap, state, componentArray) {
  return _batchDisposeComponent(uidMap, state, MaterialDisposeComponentCommon$Wonderjs.handleBatchDisposeComponent, componentArray);
}

function batchGetGeometryComponent(uidArray, state) {
  return _batchGetComponent(uidArray, GameObjectStateCommon$Wonderjs.getGameObjectData(state)[/* geometryMap */6], state);
}

function batchDisposeGeometryComponent(uidMap, state, componentArray) {
  return _batchDisposeComponent(uidMap, state, GeometryDisposeComponentCommon$Wonderjs.handleBatchDisposeComponent, componentArray);
}

function batchGetCameraControllerComponent(uidArray, state) {
  return _batchGetComponent(uidArray, GameObjectStateCommon$Wonderjs.getGameObjectData(state)[/* cameraControllerMap */5], state);
}

function batchDisposeCameraControllerComponent(uidMap, state, componentArray) {
  return _batchDisposeComponent(uidMap, state, CameraControllerDisposeComponentCommon$Wonderjs.handleBatchDisposeComponent, componentArray);
}

function batchGetSourceInstanceComponent(uidArray, state) {
  return _batchGetComponent(uidArray, GameObjectStateCommon$Wonderjs.getGameObjectData(state)[/* sourceInstanceMap */9], state);
}

function batchDisposeSourceInstanceComponent(uidMap, state, disposeGameObjectFunc, componentArray) {
  return SourceInstanceDisposeComponentCommon$Wonderjs.handleBatchDisposeComponent(componentArray, uidMap, disposeGameObjectFunc, state);
}

function batchGetObjectInstanceComponent(uidArray, state) {
  return _batchGetComponent(uidArray, GameObjectStateCommon$Wonderjs.getGameObjectData(state)[/* objectInstanceMap */10], state);
}

function batchDisposeObjectInstanceComponent(uidMap, state, componentArray) {
  var match = componentArray.length;
  if (match !== 0) {
    return _batchDisposeComponent(uidMap, state, ObjectInstanceDisposeComponentCommon$Wonderjs.handleBatchDisposeComponent, componentArray);
  } else {
    return state;
  }
}

function _batchAddComponent(uidArray, componentArr, componentMap, handleAddComponentFunc, state) {
  Contract$Wonderjs.requireCheck((function () {
          return Contract$Wonderjs.test("one gameObject should add one component", (function () {
                        return Contract$Wonderjs.Operators[/* = */0](uidArray.length, componentArr.length);
                      }));
        }));
  return ArraySystem$Wonderjs.reduceOneParami((function (state, uid, index) {
                var component = componentArr[index];
                _addComponent(uid, component, componentMap);
                return handleAddComponentFunc(component, uid, state);
              }), state, uidArray);
}

function _batchAddSharableComponent(uidArray, componentArr, componentMap, increaseGroupCountFunc, state) {
  Contract$Wonderjs.requireCheck((function () {
          return Contract$Wonderjs.test("one gameObject should add one component", (function () {
                        return Contract$Wonderjs.Operators[/* = */0](uidArray.length, componentArr.length);
                      }));
        }));
  return ArraySystem$Wonderjs.reduceOneParami((function (state, uid, index) {
                var component = componentArr[index];
                _addComponent(uid, component, componentMap);
                return increaseGroupCountFunc(component, state);
              }), state, uidArray);
}

function batchAddTransformComponentForClone(uidArray, componentArr, state) {
  return _batchAddComponent(uidArray, componentArr, GameObjectStateCommon$Wonderjs.getGameObjectData(state)[/* transformMap */4], TransformAddComponentCommon$Wonderjs.handleAddComponent, state);
}

function batchAddMeshRendererComponentForClone(uidArray, componentArr, state) {
  return _batchAddComponent(uidArray, componentArr, GameObjectStateCommon$Wonderjs.getGameObjectData(state)[/* meshRendererMap */7], MeshRendererAddComponentCommon$Wonderjs.handleAddComponent, state);
}

function batchAddGeometryComponentForClone(uidArray, componentArr, state) {
  return _batchAddSharableComponent(uidArray, componentArr, GameObjectStateCommon$Wonderjs.getGameObjectData(state)[/* geometryMap */6], GeometryGroupCommon$Wonderjs.increaseGroupCount, state);
}

function batchAddMaterialComponentForClone(uidArray, componentArr, isShareMaterial, state) {
  var componentMap = GameObjectStateCommon$Wonderjs.getGameObjectData(state)[/* materialMap */8];
  if (isShareMaterial !== 0) {
    return _batchAddSharableComponent(uidArray, componentArr, componentMap, MaterialGroupCommon$Wonderjs.increaseGroupCount, state);
  } else {
    return _batchAddComponent(uidArray, componentArr, componentMap, MaterialAddComponentCommon$Wonderjs.handleAddComponent, state);
  }
}

function batchAddCameraControllerComponentForClone(uidArray, componentArr, state) {
  return _batchAddComponent(uidArray, componentArr, GameObjectStateCommon$Wonderjs.getGameObjectData(state)[/* cameraControllerMap */5], CameraControllerAddComponentCommon$Wonderjs.handleAddComponent, state);
}

var cloneTransformComponent = TransformCloneComponentCommon$Wonderjs.handleCloneComponent;

function cloneMeshRendererComponent(_, countRangeArr, state) {
  return MeshRendererCloneComponentCommon$Wonderjs.handleCloneComponent(countRangeArr, state);
}

var cloneGeometryComponent = GeometryCloneComponentCommon$Wonderjs.handleCloneComponent;

var cloneMaterialComponent = MaterialCloneComponentCommon$Wonderjs.handleCloneComponent;

var cloneCameraControllerComponent = CameraControllerCloneComponentCommon$Wonderjs.handleCloneComponent;

export {
  _unsafeGetComponent                       ,
  _getComponent                             ,
  _hasComponent                             ,
  _addComponent                             ,
  hasSourceInstanceComponent                ,
  getSourceInstanceComponent                ,
  unsafeGetSourceInstanceComponent          ,
  addSourceInstanceComponent                ,
  disposeSourceInstanceComponent            ,
  hasObjectInstanceComponent                ,
  getObjectInstanceComponent                ,
  unsafeGetObjectInstanceComponent          ,
  addObjectInstanceComponent                ,
  disposeObjectInstanceComponent            ,
  hasCameraControllerComponent              ,
  getCameraControllerComponent              ,
  addCameraControllerComponent              ,
  disposeCameraControllerComponent          ,
  hasTransformComponent                     ,
  getTransformComponent                     ,
  unsafeGetTransformComponent               ,
  addTransformComponent                     ,
  disposeTransformComponent                 ,
  hasGeometryComponent                      ,
  getGeometryComponent                      ,
  unsafeGetGeometryComponent                ,
  addGeometryComponent                      ,
  disposeGeometryComponent                  ,
  hasMeshRendererComponent                  ,
  getMeshRendererComponent                  ,
  addMeshRendererComponent                  ,
  disposeMeshRendererComponent              ,
  hasMaterialComponent                      ,
  getMaterialComponent                      ,
  unsafeGetMaterialComponent                ,
  addMaterialComponent                      ,
  disposeMaterialComponent                  ,
  _batchGetComponent                        ,
  batchGetTransformComponent                ,
  _batchDisposeComponent                    ,
  batchDisposeTransformComponent            ,
  batchGetMeshRendererComponent             ,
  batchDisposeMeshRendererComponent         ,
  batchGetMaterialComponent                 ,
  batchDisposeMaterialComponent             ,
  batchGetGeometryComponent                 ,
  batchDisposeGeometryComponent             ,
  batchGetCameraControllerComponent         ,
  batchDisposeCameraControllerComponent     ,
  batchGetSourceInstanceComponent           ,
  batchDisposeSourceInstanceComponent       ,
  batchGetObjectInstanceComponent           ,
  batchDisposeObjectInstanceComponent       ,
  _batchAddComponent                        ,
  _batchAddSharableComponent                ,
  batchAddTransformComponentForClone        ,
  batchAddMeshRendererComponentForClone     ,
  batchAddGeometryComponentForClone         ,
  batchAddMaterialComponentForClone         ,
  batchAddCameraControllerComponentForClone ,
  cloneTransformComponent                   ,
  cloneMeshRendererComponent                ,
  cloneGeometryComponent                    ,
  cloneMaterialComponent                    ,
  cloneCameraControllerComponent            ,
  
}
/* ArraySystem-Wonderjs Not a pure module */
