// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as Curry                                         from "../../../../../node_modules/bs-platform/lib/es6/curry.js";
import * as GameObjectAddComponentCommon$Wonderjs         from "./GameObjectAddComponentCommon.js";
import * as GameObjectGetComponentCommon$Wonderjs         from "./GameObjectGetComponentCommon.js";
import * as GeometryCloneComponentCommon$Wonderjs         from "../component/system/geometry/GeometryCloneComponentCommon.js";
import * as TransformCloneComponentCommon$Wonderjs        from "../component/system/transform/TransformCloneComponentCommon.js";
import * as PointLightCloneComponentCommon$Wonderjs       from "../component/system/light/point/PointLightCloneComponentCommon.js";
import * as AmbientLightCloneComponentCommon$Wonderjs     from "../component/system/light/ambient/AmbientLightCloneComponentCommon.js";
import * as MeshRendererCloneComponentCommon$Wonderjs     from "../component/system/meshRenderer/MeshRendererCloneComponentCommon.js";
import * as BasicMaterialCloneComponentCommon$Wonderjs    from "../component/system/material/basic/BasicMaterialCloneComponentCommon.js";
import * as LightMaterialCloneComponentCommon$Wonderjs    from "../component/system/material/light/LightMaterialCloneComponentCommon.js";
import * as DirectionLightCloneComponentCommon$Wonderjs   from "../component/system/light/direction/DirectionLightCloneComponentCommon.js";
import * as CameraControllerCloneComponentCommon$Wonderjs from "../component/system/cameraController/CameraControllerCloneComponentCommon.js";

var cloneTransformComponent = TransformCloneComponentCommon$Wonderjs.handleCloneComponent;

function cloneMeshRendererComponent(_, countRangeArr, state) {
  return MeshRendererCloneComponentCommon$Wonderjs.handleCloneComponent(countRangeArr, state);
}

var cloneGeometryComponent = GeometryCloneComponentCommon$Wonderjs.handleCloneComponent;

function cloneBasicMaterialComponent(isShareMaterial, sourceComponent, countRangeArr, state) {
  return BasicMaterialCloneComponentCommon$Wonderjs.handleCloneComponent(sourceComponent, countRangeArr, isShareMaterial, state);
}

function cloneLightMaterialComponent(isShareMaterial, sourceComponent, countRangeArr, state) {
  return LightMaterialCloneComponentCommon$Wonderjs.handleCloneComponent(sourceComponent, countRangeArr, isShareMaterial, state);
}

var cloneAmbientLightComponent = AmbientLightCloneComponentCommon$Wonderjs.handleCloneComponent;

var cloneDirectionLightComponent = DirectionLightCloneComponentCommon$Wonderjs.handleCloneComponent;

var clonePointLightComponent = PointLightCloneComponentCommon$Wonderjs.handleCloneComponent;

function _cloneComponent(param, param$1, state) {
  var component = param[1];
  if (component) {
    var match = Curry._3(param$1[0], component[0], param[2], state);
    return Curry._3(param$1[1], param[3], match[1], match[0]);
  } else {
    return state;
  }
}

var cloneCameraControllerComponent = CameraControllerCloneComponentCommon$Wonderjs.handleCloneComponent;

function cloneComponent(param, isShareMaterial, state) {
  var clonedGameObjectArr = param[3];
  var countRangeArr = param[2];
  var uid = param[0];
  var state$1 = _cloneComponent(/* tuple */[
        uid,
        GameObjectGetComponentCommon$Wonderjs.getPointLightComponent(uid, state),
        countRangeArr,
        clonedGameObjectArr
      ], /* tuple */[
        clonePointLightComponent,
        GameObjectAddComponentCommon$Wonderjs.batchAddPointLightComponentForClone
      ], _cloneComponent(/* tuple */[
            uid,
            GameObjectGetComponentCommon$Wonderjs.getDirectionLightComponent(uid, state),
            countRangeArr,
            clonedGameObjectArr
          ], /* tuple */[
            cloneDirectionLightComponent,
            GameObjectAddComponentCommon$Wonderjs.batchAddDirectionLightComponentForClone
          ], _cloneComponent(/* tuple */[
                uid,
                GameObjectGetComponentCommon$Wonderjs.getAmbientLightComponent(uid, state),
                countRangeArr,
                clonedGameObjectArr
              ], /* tuple */[
                cloneAmbientLightComponent,
                GameObjectAddComponentCommon$Wonderjs.batchAddAmbientLightComponentForClone
              ], _cloneComponent(/* tuple */[
                    uid,
                    GameObjectGetComponentCommon$Wonderjs.getCameraControllerComponent(uid, state),
                    countRangeArr,
                    clonedGameObjectArr
                  ], /* tuple */[
                    cloneCameraControllerComponent,
                    GameObjectAddComponentCommon$Wonderjs.batchAddCameraControllerComponentForClone
                  ], _cloneComponent(/* tuple */[
                        uid,
                        GameObjectGetComponentCommon$Wonderjs.getLightMaterialComponent(uid, state),
                        countRangeArr,
                        clonedGameObjectArr
                      ], /* tuple */[
                        (function (param, param$1, param$2) {
                            return cloneLightMaterialComponent(isShareMaterial, param, param$1, param$2);
                          }),
                        (function (param, param$1, param$2) {
                            return GameObjectAddComponentCommon$Wonderjs.batchAddLightMaterialComponentForClone(isShareMaterial, param, param$1, param$2);
                          })
                      ], _cloneComponent(/* tuple */[
                            uid,
                            GameObjectGetComponentCommon$Wonderjs.getBasicMaterialComponent(uid, state),
                            countRangeArr,
                            clonedGameObjectArr
                          ], /* tuple */[
                            (function (param, param$1, param$2) {
                                return cloneBasicMaterialComponent(isShareMaterial, param, param$1, param$2);
                              }),
                            (function (param, param$1, param$2) {
                                return GameObjectAddComponentCommon$Wonderjs.batchAddBasicMaterialComponentForClone(isShareMaterial, param, param$1, param$2);
                              })
                          ], _cloneComponent(/* tuple */[
                                uid,
                                GameObjectGetComponentCommon$Wonderjs.getGeometryComponent(uid, state),
                                countRangeArr,
                                clonedGameObjectArr
                              ], /* tuple */[
                                cloneGeometryComponent,
                                GameObjectAddComponentCommon$Wonderjs.batchAddGeometryComponentForClone
                              ], _cloneComponent(/* tuple */[
                                    uid,
                                    GameObjectGetComponentCommon$Wonderjs.getMeshRendererComponent(uid, state),
                                    countRangeArr,
                                    clonedGameObjectArr
                                  ], /* tuple */[
                                    cloneMeshRendererComponent,
                                    GameObjectAddComponentCommon$Wonderjs.batchAddMeshRendererComponentForClone
                                  ], state))))))));
  var match = TransformCloneComponentCommon$Wonderjs.handleCloneComponent(param[1], countRangeArr, state$1);
  var clonedTransformArr = match[1];
  return /* tuple */[
          GameObjectAddComponentCommon$Wonderjs.batchAddTransformComponentForClone(clonedGameObjectArr, clonedTransformArr, match[0]),
          clonedTransformArr
        ];
}

export {
  cloneTransformComponent        ,
  cloneMeshRendererComponent     ,
  cloneGeometryComponent         ,
  cloneBasicMaterialComponent    ,
  cloneLightMaterialComponent    ,
  cloneAmbientLightComponent     ,
  cloneDirectionLightComponent   ,
  clonePointLightComponent       ,
  _cloneComponent                ,
  cloneCameraControllerComponent ,
  cloneComponent                 ,
  
}
/* GameObjectAddComponentCommon-Wonderjs Not a pure module */
