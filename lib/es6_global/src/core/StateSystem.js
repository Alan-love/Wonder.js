// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as Js_option                       from "../../../../node_modules/bs-platform/lib/es6/js_option.js";
import * as JobHelper$Wonderjs              from "../job/JobHelper.js";
import * as ShaderHelper$Wonderjs           from "../renderer/shader/ShaderHelper.js";
import * as ShaderSystem$Wonderjs           from "../renderer/shader/ShaderSystem.js";
import * as GeometryAdmin$Wonderjs          from "../ecs/admin/component/GeometryAdmin.js";
import * as MaterialAdmin$Wonderjs          from "../ecs/admin/component/material/MaterialAdmin.js";
import * as ProgramHelper$Wonderjs          from "../renderer/shader/program/ProgramHelper.js";
import * as ProgramSystem$Wonderjs          from "../renderer/shader/program/ProgramSystem.js";
import * as TransformAdmin$Wonderjs         from "../ecs/admin/component/TransformAdmin.js";
import * as GameObjectAdmin$Wonderjs        from "../ecs/admin/GameObjectAdmin.js";
import * as VboBufferHelper$Wonderjs        from "../renderer/buffer/VboBufferHelper.js";
import * as VboBufferSystem$Wonderjs        from "../renderer/buffer/VboBufferSystem.js";
import * as GLSLSenderHelper$Wonderjs       from "../renderer/shader/sender/GLSLSenderHelper.js";
import * as GLSLSenderSystem$Wonderjs       from "../renderer/shader/sender/GLSLSenderSystem.js";
import * as GameObjectHelper$Wonderjs       from "../ecs/admin/data/GameObjectHelper.js";
import * as GlobalTempHelper$Wonderjs       from "../definition/global_temp/GlobalTempHelper.js";
import * as GlobalTempSystem$Wonderjs       from "../definition/global_temp/GlobalTempSystem.js";
import * as RenderDataHelper$Wonderjs       from "../renderer/render/RenderDataHelper.js";
import * as RenderDataSystem$Wonderjs       from "../renderer/render/RenderDataSystem.js";
import * as MeshRendererAdmin$Wonderjs      from "../ecs/admin/component/MeshRendererAdmin.js";
import * as ShaderChunkSystem$Wonderjs      from "../renderer/shader/glsl/ShaderChunkSystem.js";
import * as GLSLLocationHelper$Wonderjs     from "../renderer/shader/location/GLSLLocationHelper.js";
import * as GLSLLocationSystem$Wonderjs     from "../renderer/shader/location/GLSLLocationSystem.js";
import * as MemoryConfigSystem$Wonderjs     from "../config/MemoryConfigSystem.js";
import * as MeshRendererHelper$Wonderjs     from "../ecs/component/data/meshRenderer/MeshRendererHelper.js";
import * as DeviceManagerSystem$Wonderjs    from "../renderer/device/DeviceManagerSystem.js";
import * as ObjectInstanceAdmin$Wonderjs    from "../ecs/admin/component/instance/ObjectInstanceAdmin.js";
import * as SourceInstanceAdmin$Wonderjs    from "../ecs/admin/component/instance/SourceInstanceAdmin.js";
import * as TypeArrayPoolHelper$Wonderjs    from "../structure/pool/TypeArrayPoolHelper.js";
import * as TypeArrayPoolSystem$Wonderjs    from "../structure/pool/TypeArrayPoolSystem.js";
import * as ObjectInstanceHelper$Wonderjs   from "../ecs/component/data/instance/ObjectInstanceHelper.js";
import * as SourceInstanceHelper$Wonderjs   from "../ecs/component/data/instance/SourceInstanceHelper.js";
import * as TimeControllerHelper$Wonderjs   from "./timeController/TimeControllerHelper.js";
import * as CameraControllerAdmin$Wonderjs  from "../ecs/admin/component/CameraControllerAdmin.js";
import * as CameraControllerHelper$Wonderjs from "../ecs/component/data/cameraController/CameraControllerHelper.js";

function getState(stateData) {
  return Js_option.getExn(stateData[/* state */0]);
}

function setState(stateData, state) {
  stateData[/* state */0] = /* Some */[state];
  return state;
}

function deepCopyStateForRestore(state) {
  return GameObjectAdmin$Wonderjs.deepCopyStateForRestore(ObjectInstanceAdmin$Wonderjs.deepCopyStateForRestore(SourceInstanceAdmin$Wonderjs.deepCopyStateForRestore(TypeArrayPoolSystem$Wonderjs.deepCopyStateForRestore(DeviceManagerSystem$Wonderjs.deepCopyStateForRestore(GLSLLocationSystem$Wonderjs.deepCopyStateForRestore(ProgramSystem$Wonderjs.deepCopyStateForRestore(ShaderSystem$Wonderjs.deepCopyStateForRestore(MaterialAdmin$Wonderjs.deepCopyStateForRestore(GLSLSenderSystem$Wonderjs.deepCopyStateForRestore(VboBufferSystem$Wonderjs.deepCopyStateForRestore(GeometryAdmin$Wonderjs.deepCopyStateForRestore(CameraControllerAdmin$Wonderjs.deepCopyStateForRestore(TransformAdmin$Wonderjs.deepCopyStateForRestore(MeshRendererAdmin$Wonderjs.deepCopyStateForRestore(state)))))))))))))));
}

function _getSharedData(currentState) {
  return /* record */[
          /* gl */DeviceManagerSystem$Wonderjs.unsafeGetGl(currentState),
          /* float32ArrayPoolMap */TypeArrayPoolSystem$Wonderjs.getFloat32ArrayPoolMap(currentState),
          /* uint16ArrayPoolMap */TypeArrayPoolSystem$Wonderjs.getUint16ArrayPoolMap(currentState)
        ];
}

function restore(stateData, currentState, targetState) {
  var intersectShaderIndexDataArray = ShaderSystem$Wonderjs.getIntersectShaderIndexDataArray(currentState, targetState);
  var sharedData = _getSharedData(currentState);
  var match = GeometryAdmin$Wonderjs.restore(currentState, sharedData, targetState);
  var match$1 = TransformAdmin$Wonderjs.restore(currentState, match[1], match[0]);
  var match$2 = SourceInstanceAdmin$Wonderjs.restore(currentState, match$1[1], match$1[0]);
  var sharedData$1 = match$2[1];
  var targetState$1 = DeviceManagerSystem$Wonderjs.restore(currentState, sharedData$1, match$2[0]);
  var gl = DeviceManagerSystem$Wonderjs.unsafeGetGl(targetState$1);
  return setState(stateData, GlobalTempSystem$Wonderjs.restore(currentState, RenderDataSystem$Wonderjs.restore(currentState, MaterialAdmin$Wonderjs.restore(gl, currentState, GLSLSenderSystem$Wonderjs.restore(intersectShaderIndexDataArray, currentState, GLSLLocationSystem$Wonderjs.restore(intersectShaderIndexDataArray, currentState, ProgramSystem$Wonderjs.restore(intersectShaderIndexDataArray, currentState, ShaderSystem$Wonderjs.restore(currentState, VboBufferSystem$Wonderjs.restore(currentState, TypeArrayPoolSystem$Wonderjs.restore(currentState, sharedData$1, targetState$1))))))))));
}

function createState() {
  return /* record */[
          /* bufferConfig : None */0,
          /* gpuConfig : None */0,
          /* memoryConfig */MemoryConfigSystem$Wonderjs.initData(/* () */0),
          /* jobData */JobHelper$Wonderjs.initData(/* () */0),
          /* logicJobConfig : None */0,
          /* renderJobConfig : None */0,
          /* gpuDetectData : record */[
            /* extensionInstancedArrays : None */0,
            /* precision : None */0
          ],
          /* sourceInstanceData */SourceInstanceHelper$Wonderjs.initData(/* () */0),
          /* objectInstanceData */ObjectInstanceHelper$Wonderjs.initData(/* () */0),
          /* viewData : record */[
            /* canvas : None */0,
            /* contextConfig : None */0
          ],
          /* initConfig : record */[/* isDebug : false */0],
          /* deviceManagerData : record */[
            /* gl : None */0,
            /* colorWrite : None */0,
            /* clearColor : None */0,
            /* viewport : None */0
          ],
          /* gameObjectData */GameObjectHelper$Wonderjs.initData(/* () */0),
          /* transformData : None */0,
          /* cameraControllerData */CameraControllerHelper$Wonderjs.initData(/* () */0),
          /* materialData : None */0,
          /* geometryData : None */0,
          /* meshRendererData */MeshRendererHelper$Wonderjs.initData(/* () */0),
          /* shaderData */ShaderHelper$Wonderjs.initData(/* () */0),
          /* programData */ProgramHelper$Wonderjs.initData(/* () */0),
          /* glslLocationData */GLSLLocationHelper$Wonderjs.initData(/* () */0),
          /* glslSenderData */GLSLSenderHelper$Wonderjs.initData(/* () */0),
          /* glslChunkData */ShaderChunkSystem$Wonderjs.initData(/* () */0),
          /* renderData */RenderDataHelper$Wonderjs.initData(/* () */0),
          /* timeControllerData */TimeControllerHelper$Wonderjs.initData(/* () */0),
          /* vboBufferData */VboBufferHelper$Wonderjs.initData(/* () */0),
          /* globalTempData */GlobalTempHelper$Wonderjs.initData(/* () */0),
          /* typeArrayPoolData */TypeArrayPoolHelper$Wonderjs.initData(/* () */0)
        ];
}

export {
  getState                ,
  setState                ,
  deepCopyStateForRestore ,
  _getSharedData          ,
  restore                 ,
  createState             ,
  
}
/* ShaderHelper-Wonderjs Not a pure module */
