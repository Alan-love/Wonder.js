// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as Most                             from "most";
import * as Js_boolean                       from "../../../../node_modules/bs-platform/lib/es6/js_boolean.js";
import * as Log$WonderLog                    from "../../../../node_modules/wonder-log/lib/es6_global/src/Log.js";
import * as MostUtils$Wonderjs               from "../asset/utils/MostUtils.js";
import * as MainStateData$Wonderjs           from "../service/state/main/data/MainStateData.js";
import * as WorkerService$Wonderjs           from "../service/primitiive/worker/WorkerService.js";
import * as WorkerJobService$Wonderjs        from "../service/state/main/job/WorkerJobService.js";
import * as NoWorkerJobService$Wonderjs      from "../service/state/main/job/NoWorkerJobService.js";
import * as WonderMostAnimationFrame         from "wonder-most-animation-frame";
import * as StateDataMainService$Wonderjs    from "../service/state/main/state/StateDataMainService.js";
import * as TimeControllerService$Wonderjs   from "../service/record/timeController/TimeControllerService.js";
import * as WorkerInstanceService$Wonderjs   from "../service/record/workerInstance/WorkerInstanceService.js";
import * as WorkerDetectMainService$Wonderjs from "../service/state/main/workerDetect/WorkerDetectMainService.js";

var _workerInit = WorkerJobService$Wonderjs.getMainInitJobStream;

var _noWorkerInit = NoWorkerJobService$Wonderjs.execNoWorkerInitJobs;

function _createWorkerLoopStream() {
  return Most.continueWith((function () {
                return _createWorkerLoopStream(/* () */0);
              }), Most.flatMap((function (time) {
                    Log$WonderLog.log("time: " + (String(time) + ""));
                    return Most.mergeArray(/* array */[
                                MostUtils$Wonderjs.callFunc((function () {
                                        var state = StateDataMainService$Wonderjs.getState(MainStateData$Wonderjs.stateData);
                                        return WorkerService$Wonderjs.postMessage({
                                                    operateType: "loop"
                                                  }, WorkerInstanceService$Wonderjs.unsafeGetRenderWorker(state[/* workerInstanceRecord */33]));
                                      })),
                                Most.tap((function () {
                                        return Log$WonderLog.log("**in main worker** get message from other worker: finish_loop");
                                      }), Most.map((function () {
                                            return /* () */0;
                                          }), Most.take(1, Most.filter((function (e) {
                                                    return Js_boolean.to_js_boolean(+(e.record.operateType === "finish_loop"));
                                                  }), Most.fromEvent("message", WorkerInstanceService$Wonderjs.unsafeGetRenderWorker(StateDataMainService$Wonderjs.getState(MainStateData$Wonderjs.stateData)[/* workerInstanceRecord */33]))))))
                              ]);
                  }), WonderMostAnimationFrame.nextAnimationFrame()));
}

function _run(time, state) {
  var newrecord = state.slice();
  return NoWorkerJobService$Wonderjs.execNoWorkerLoopJobs((newrecord[/* timeControllerRecord */29] = TimeControllerService$Wonderjs.computeElapseTime(time, state[/* timeControllerRecord */29]), newrecord));
}

var loopBody = _run;

function _noWorkerLoop(_, state) {
  return requestAnimationFrame((function (time) {
                _noWorkerLoop(time, StateDataMainService$Wonderjs.setState(MainStateData$Wonderjs.stateData, _run(time, state)));
                return /* () */0;
              }));
}

function start(state) {
  var match = WorkerDetectMainService$Wonderjs.isUseWorker(state);
  if (match !== 0) {
    var state$1 = StateDataMainService$Wonderjs.setState(MainStateData$Wonderjs.stateData, state);
    Most.drain(WorkerJobService$Wonderjs.getMainInitJobStream(MainStateData$Wonderjs.stateData, state$1).concat(_createWorkerLoopStream(/* () */0)));
    return /* () */0;
  } else {
    _noWorkerLoop(0, NoWorkerJobService$Wonderjs.execNoWorkerInitJobs(state));
    return /* () */0;
  }
}

var init = _noWorkerInit;

export {
  _workerInit             ,
  _noWorkerInit           ,
  init                    ,
  _createWorkerLoopStream ,
  _run                    ,
  loopBody                ,
  _noWorkerLoop           ,
  start                   ,
  
}
/* most Not a pure module */
