// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as Curry                           from "../../../../../node_modules/bs-platform/lib/es6/curry.js";
import * as Log$WonderLog                   from "../../../../../node_modules/wonder-log/lib/es6_global/src/Log.js";
import * as Contract$WonderLog              from "../../../../../node_modules/wonder-log/lib/es6_global/src/Contract.js";
import * as StateData$Wonderjs              from "../StateData.js";
import * as ArraySystem$Wonderjs            from "../../structure/ArraySystem.js";
import * as ArraySystem$WonderCommonlib     from "../../../../../node_modules/wonder-commonlib/lib/es6_global/src/ArraySystem.js";
import * as ScheduleStateCommon$Wonderjs    from "./ScheduleStateCommon.js";
import * as ScheduleLoopItemCommon$Wonderjs from "./ScheduleLoopItemCommon.js";

function _remove(index, state) {
  var data = ScheduleStateCommon$Wonderjs.getSchedulerData(state);
  var count = data[/* count */0];
  ArraySystem$Wonderjs.deleteBySwap(index, count - 1 | 0, data[/* funcRecordArray */1]);
  data[/* count */0] = data[/* count */0] - 1 | 0;
  return state;
}

function _getFuncRecord(index, funcRecordArray) {
  Contract$WonderLog.requireCheck((function () {
          return Contract$WonderLog.test(Log$WonderLog.buildAssertMessage("" + (String(funcRecordArray) + ("[" + (String(index) + "] exist"))), "not"), (function () {
                        return Contract$WonderLog.assertExist(ArraySystem$WonderCommonlib.get(index, funcRecordArray));
                      }));
        }), StateData$Wonderjs.stateData[/* isDebug */1]);
  return funcRecordArray[index];
}

function update(elapsed, state) {
  var match = ScheduleStateCommon$Wonderjs.getSchedulerData(state);
  var count = match[/* count */0];
  var funcRecordArray = match[/* funcRecordArray */1];
  return ArraySystem$Wonderjs.reduceState((function (state, index) {
                var match = _getFuncRecord(index, funcRecordArray);
                var state$1 = Curry._2(match[/* update */0], elapsed, state);
                if (Curry._1(match[/* isFinish */1], state$1)) {
                  return _remove(index, state$1);
                } else {
                  return state$1;
                }
              }), state, ArraySystem$Wonderjs.range(0, count - 1 | 0));
}

function start(state) {
  var data = ScheduleStateCommon$Wonderjs.getSchedulerData(state);
  var count = data[/* count */0];
  var funcRecordArray = data[/* funcRecordArray */1];
  return ArraySystem$Wonderjs.reduceState((function (state, index) {
                var match = _getFuncRecord(index, funcRecordArray);
                return Curry._1(match[/* start */2], state);
              }), state, ArraySystem$Wonderjs.range(0, count - 1 | 0));
}

function scheduleLoop(taskFunc, state) {
  var data = ScheduleStateCommon$Wonderjs.getSchedulerData(state);
  var index = data[/* count */0];
  data[/* funcRecordArray */1][index] = /* record */[
    /* update */(function (param, param$1) {
        return ScheduleLoopItemCommon$Wonderjs.update(taskFunc, param, param$1);
      }),
    /* isFinish */(function (param) {
        return ScheduleLoopItemCommon$Wonderjs.isFinish(index, param);
      }),
    /* start */ScheduleLoopItemCommon$Wonderjs.start
  ];
  data[/* count */0] = data[/* count */0] + 1 | 0;
  return state;
}

var deepCopyStateForRestore = ScheduleStateCommon$Wonderjs.deepCopyStateForRestore;

export {
  _remove                 ,
  _getFuncRecord          ,
  update                  ,
  start                   ,
  scheduleLoop            ,
  deepCopyStateForRestore ,
  
}
/* Log-WonderLog Not a pure module */
