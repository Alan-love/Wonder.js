// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as StateData$Wonderjs           from "./StateData.js";
import * as JsObjUtils$Wonderjs          from "../utils/JsObjUtils.js";
import * as ViewSystem$Wonderjs          from "../renderer/device/ViewSystem.js";
import * as GPUDetectSystem$Wonderjs     from "../renderer/device/gpu/GPUDetectSystem.js";
import * as GpuConfigSystem$Wonderjs     from "../config/GpuConfigSystem.js";
import * as InitConfigSystem$Wonderjs    from "../renderer/config/init/InitConfigSystem.js";
import * as InitDeviceSystem$Wonderjs    from "../renderer/device/InitDeviceSystem.js";
import * as BufferConfigSystem$Wonderjs  from "../config/BufferConfigSystem.js";
import * as DeviceManagerSystem$Wonderjs from "../renderer/device/DeviceManagerSystem.js";

function _changeToContextConfigRecord(contextConfigObj) {
  return /* record */[
          /* alpha */+JsObjUtils$Wonderjs.getValueFromJsObj(contextConfigObj.alpha, true),
          /* depth */+JsObjUtils$Wonderjs.getValueFromJsObj(contextConfigObj.depth, true),
          /* stencil */+JsObjUtils$Wonderjs.getValueFromJsObj(contextConfigObj.stencil, false),
          /* antialias */+JsObjUtils$Wonderjs.getValueFromJsObj(contextConfigObj.antialias, true),
          /* premultipliedAlpha */+JsObjUtils$Wonderjs.getValueFromJsObj(contextConfigObj.premultipliedAlpha, true),
          /* preserveDrawingBuffer */+JsObjUtils$Wonderjs.getValueFromJsObj(contextConfigObj.preserveDrawingBuffer, false)
        ];
}

function _changeToBufferConfigRecord(bufferConfigObj) {
  return /* record */[/* geometryPointDataBufferCount */JsObjUtils$Wonderjs.getValueFromJsObj(bufferConfigObj.geometryPointDataBufferCount, 1000000)];
}

function _changeToGpuConfigRecord(gpuConfigObj) {
  return /* record */[/* useHardwareInstance */+JsObjUtils$Wonderjs.getValueFromJsObj(gpuConfigObj.useHardwareInstance, true)];
}

function _changeConfigToRecord(config) {
  var match = config.contextConfig;
  var match$1 = config.bufferConfig;
  var match$2 = config.gpuConfig;
  return /* record */[
          /* canvasId */JsObjUtils$Wonderjs.getOptionValueFromJsObj(config.canvasId),
          /* isDebug */+JsObjUtils$Wonderjs.getValueFromJsObj(config.isDebug, false),
          /* contextConfig */(match == null) ? /* record */[
              /* alpha : true */1,
              /* depth : true */1,
              /* stencil : false */0,
              /* antialias : true */1,
              /* premultipliedAlpha : true */1,
              /* preserveDrawingBuffer : false */0
            ] : _changeToContextConfigRecord(match),
          /* bufferConfig */(match$1 == null) ? /* record */[/* geometryPointDataBufferCount */1000000] : _changeToBufferConfigRecord(match$1),
          /* gpuConfig */(match$2 == null) ? /* record */[/* useHardwareInstance : true */1] : _changeToGpuConfigRecord(match$2)
        ];
}

function setConfig(config, state) {
  var config$1 = _changeConfigToRecord(config);
  InitConfigSystem$Wonderjs.setIsDebug(config$1[/* isDebug */1], StateData$Wonderjs.stateData);
  return /* tuple */[
          config$1,
          state
        ];
}

function init(param) {
  var config = param[0];
  var canvas = InitDeviceSystem$Wonderjs.createCanvas(config);
  var gl = DeviceManagerSystem$Wonderjs.createGl(config[/* contextConfig */2], canvas);
  var match = InitDeviceSystem$Wonderjs.setToFullScreen(InitDeviceSystem$Wonderjs.getFullScreenData(/* () */0), gl, canvas, param[1]);
  return GPUDetectSystem$Wonderjs.detect(gl, GpuConfigSystem$Wonderjs.setConfig(config[/* gpuConfig */4], BufferConfigSystem$Wonderjs.setConfig(config[/* bufferConfig */3], ViewSystem$Wonderjs.setContextConfig(config[/* contextConfig */2], ViewSystem$Wonderjs.setCanvas(match[1], DeviceManagerSystem$Wonderjs.setGl(gl, match[0]))))));
}

export {
  _changeToContextConfigRecord ,
  _changeToBufferConfigRecord  ,
  _changeToGpuConfigRecord     ,
  _changeConfigToRecord        ,
  setConfig                    ,
  init                         ,
  
}
/* GPUDetectSystem-Wonderjs Not a pure module */
