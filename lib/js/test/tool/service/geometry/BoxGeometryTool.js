// Generated by BUCKLESCRIPT VERSION 3.1.4, PLEASE EDIT WITH CARE
'use strict';

var Log$WonderLog = require("wonder-log/lib/js/src/Log.js");
var TestTool$Wonderjs = require("../../TestTool.js");
var Contract$WonderLog = require("wonder-log/lib/js/src/Contract.js");
var GameObjectAPI$Wonderjs = require("../../../../src/api/GameObjectAPI.js");
var StateDataMain$Wonderjs = require("../../../../src/service/state/main/data/StateDataMain.js");
var BoxGeometryAPI$Wonderjs = require("../../../../src/api/geometry/BoxGeometryAPI.js");
var GameObjectTool$Wonderjs = require("../gameObject/GameObjectTool.js");
var IsDebugMainService$Wonderjs = require("../../../../src/service/state/main/state/IsDebugMainService.js");
var GroupBoxGeometryService$Wonderjs = require("../../../../src/service/record/main/geometry/box/GroupBoxGeometryService.js");
var RecordBoxGeometryMainService$Wonderjs = require("../../../../src/service/state/main/geometry/box/RecordBoxGeometryMainService.js");
var DisposeBoxGeometryMainService$Wonderjs = require("../../../../src/service/state/main/geometry/box/DisposeBoxGeometryMainService.js");
var GetComponentGameObjectService$Wonderjs = require("../../../../src/service/record/main/gameObject/GetComponentGameObjectService.js");
var GetBoxGeometryIndicesRenderService$Wonderjs = require("../../../../src/service/state/render/geometry/box/GetBoxGeometryIndicesRenderService.js");
var CurrentComponentDataMapRenderService$Wonderjs = require("../../../../src/service/state/render/gameObject/CurrentComponentDataMapRenderService.js");

var getRecord = RecordBoxGeometryMainService$Wonderjs.getRecord;

function buildBoxGeometryConfigDataJsObj($staropt$star, $staropt$star$1, $staropt$star$2, $staropt$star$3, $staropt$star$4, $staropt$star$5, _) {
  var width = $staropt$star ? $staropt$star[0] : undefined;
  var height = $staropt$star$1 ? $staropt$star$1[0] : undefined;
  var depth = $staropt$star$2 ? $staropt$star$2[0] : undefined;
  var widthSegment = $staropt$star$3 ? $staropt$star$3[0] : undefined;
  var heightSegment = $staropt$star$4 ? $staropt$star$4[0] : undefined;
  var depthSegment = $staropt$star$5 ? $staropt$star$5[0] : undefined;
  return {
          width: width,
          height: height,
          depth: depth,
          widthSegment: widthSegment,
          heightSegment: heightSegment,
          depthSegment: depthSegment
        };
}

function getIndicesCount(index, state) {
  return GetBoxGeometryIndicesRenderService$Wonderjs.getIndicesCount(index, state);
}

function buildBufferConfig(count) {
  return {
          boxGeometryPointCount: count
        };
}

function disposeGeometryByCloseContractCheck(gameObject, geometry, state) {
  TestTool$Wonderjs.closeContractCheck(/* () */0);
  var state$1 = GameObjectTool$Wonderjs.disposeGameObjectBoxGeometryComponentWithoutVboBuffer(gameObject, geometry, state);
  TestTool$Wonderjs.openContractCheck(/* () */0);
  return state$1;
}

function isGeometryDisposed(geometry, state) {
  return !DisposeBoxGeometryMainService$Wonderjs.isAlive(geometry, RecordBoxGeometryMainService$Wonderjs.getRecord(state));
}

function getDefaultIndicesArray() {
  return /* array */[
          0,
          2,
          1,
          2,
          3,
          1,
          4,
          6,
          5,
          6,
          7,
          5,
          8,
          10,
          9,
          10,
          11,
          9,
          12,
          14,
          13,
          14,
          15,
          13,
          16,
          18,
          17,
          18,
          19,
          17,
          20,
          22,
          21,
          22,
          23,
          21
        ];
}

function getDefaultIndices() {
  return new Uint16Array(getDefaultIndicesArray(/* () */0));
}

function getDefaultVertices() {
  return new Float32Array(/* array */[
              -5,
              -5,
              5,
              -5,
              5,
              5,
              5,
              -5,
              5,
              5,
              5,
              5,
              5,
              -5,
              -5,
              5,
              5,
              -5,
              -5,
              -5,
              -5,
              -5,
              5,
              -5,
              -5,
              5,
              5,
              -5,
              5,
              -5,
              5,
              5,
              5,
              5,
              5,
              -5,
              5,
              -5,
              5,
              5,
              -5,
              -5,
              -5,
              -5,
              5,
              -5,
              -5,
              -5,
              5,
              -5,
              5,
              5,
              5,
              5,
              5,
              -5,
              -5,
              5,
              5,
              -5,
              -5,
              -5,
              -5,
              -5,
              5,
              -5,
              -5,
              -5,
              5,
              -5,
              5,
              5
            ]);
}

function getDefaultTexCoords() {
  return new Float32Array(/* array */[
              0,
              0,
              0,
              1,
              1,
              0,
              1,
              1,
              0,
              0,
              0,
              1,
              1,
              0,
              1,
              1,
              0,
              0,
              0,
              1,
              1,
              0,
              1,
              1,
              0,
              0,
              0,
              1,
              1,
              0,
              1,
              1,
              0,
              0,
              0,
              1,
              1,
              0,
              1,
              1,
              0,
              0,
              0,
              1,
              1,
              0,
              1,
              1
            ]);
}

function getDefaultNormals() {
  return new Float32Array(/* array */[
              0,
              0,
              1,
              0,
              0,
              1,
              0,
              0,
              1,
              0,
              0,
              1,
              0,
              0,
              -1,
              0,
              0,
              -1,
              0,
              0,
              -1,
              0,
              0,
              -1,
              0,
              1,
              0,
              0,
              1,
              0,
              0,
              1,
              0,
              0,
              1,
              0,
              0,
              -1,
              0,
              0,
              -1,
              0,
              0,
              -1,
              0,
              0,
              -1,
              0,
              1,
              0,
              0,
              1,
              0,
              0,
              1,
              0,
              0,
              1,
              0,
              0,
              -1,
              0,
              0,
              -1,
              0,
              0,
              -1,
              0,
              0,
              -1,
              0,
              0
            ]);
}

function createBoxGeometry(state) {
  var match = BoxGeometryAPI$Wonderjs.createBoxGeometry(state);
  return /* tuple */[
          match[0],
          match[1]
        ];
}

function createGameObject(state) {
  var match = createBoxGeometry(state);
  var geometry = match[1];
  var match$1 = GameObjectAPI$Wonderjs.createGameObject(match[0]);
  var gameObject = match$1[1];
  var state$1 = GameObjectAPI$Wonderjs.addGameObjectBoxGeometryComponent(gameObject, geometry, match$1[0]);
  return /* tuple */[
          state$1,
          gameObject,
          geometry
        ];
}

function getGroupCount(geometry, state) {
  return GroupBoxGeometryService$Wonderjs.getGroupCount(geometry, RecordBoxGeometryMainService$Wonderjs.getRecord(state));
}

function unsafeGetBoxGeometryComponent(uid, param) {
  var gameObjectRecord = param[/* gameObjectRecord */10];
  return Contract$WonderLog.ensureCheck((function () {
                return Contract$WonderLog.test(Log$WonderLog.buildAssertMessage("type_ is box", "not"), (function () {
                              var match = GetComponentGameObjectService$Wonderjs.unsafeGetCustomGeometryComponentData(uid, gameObjectRecord);
                              return Contract$WonderLog.Operators[/* = */0](match[1], CurrentComponentDataMapRenderService$Wonderjs.getBoxGeometryType(/* () */0));
                            }));
              }), IsDebugMainService$Wonderjs.getIsDebug(StateDataMain$Wonderjs.stateData), GetComponentGameObjectService$Wonderjs.unsafeGetCustomGeometryComponent(uid, gameObjectRecord));
}

exports.getRecord = getRecord;
exports.buildBoxGeometryConfigDataJsObj = buildBoxGeometryConfigDataJsObj;
exports.getIndicesCount = getIndicesCount;
exports.buildBufferConfig = buildBufferConfig;
exports.disposeGeometryByCloseContractCheck = disposeGeometryByCloseContractCheck;
exports.isGeometryDisposed = isGeometryDisposed;
exports.getDefaultIndicesArray = getDefaultIndicesArray;
exports.getDefaultIndices = getDefaultIndices;
exports.getDefaultVertices = getDefaultVertices;
exports.getDefaultTexCoords = getDefaultTexCoords;
exports.getDefaultNormals = getDefaultNormals;
exports.createBoxGeometry = createBoxGeometry;
exports.createGameObject = createGameObject;
exports.getGroupCount = getGroupCount;
exports.unsafeGetBoxGeometryComponent = unsafeGetBoxGeometryComponent;
/* Log-WonderLog Not a pure module */
