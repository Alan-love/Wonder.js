// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var Curry                            = require("bs-platform/lib/js/curry.js");
var Sinon                            = require("wonder-bs-sinon/lib/js/src/sinon.js");
var Sinon$1                          = require("sinon");
var Wonder_jest                      = require("wonder-bs-jest/lib/js/src/wonder_jest.js");
var TestTool$Wonderjs                = require("../../../../tool/TestTool.js");
var GameObjectAPI$Wonderjs           = require("../../../../../src/api/GameObjectAPI.js");
var MainStateTool$Wonderjs           = require("../../../../tool/service/state/MainStateTool.js");
var GameObjectTool$Wonderjs          = require("../../../../tool/service/gameObject/GameObjectTool.js");
var MeshRendererAPI$Wonderjs         = require("../../../../../src/api/MeshRendererAPI.js");
var MeshRendererTool$Wonderjs        = require("../../../../tool/service/meshRenderer/MeshRendererTool.js");
var SparseMapService$WonderCommonlib = require("wonder-commonlib/lib/js/src/SparseMapService.js");

describe("MeshRenderer", (function () {
        var sandbox = Sinon.getSandboxDefaultVal(/* () */0);
        var state = [MainStateTool$Wonderjs.createState(/* () */0)];
        var _prepareTwo = function (state) {
          var match = MeshRendererTool$Wonderjs.createBasicMaterialGameObject(state);
          var match$1 = MeshRendererTool$Wonderjs.createBasicMaterialGameObject(match[0]);
          return /* tuple */[
                  match$1[0],
                  match[1],
                  match[2],
                  match$1[1],
                  match$1[2]
                ];
        };
        var _prepareThree = function (state) {
          var match = MeshRendererTool$Wonderjs.createBasicMaterialGameObject(state);
          var match$1 = MeshRendererTool$Wonderjs.createBasicMaterialGameObject(match[0]);
          var match$2 = MeshRendererTool$Wonderjs.createLightMaterialGameObject(match$1[0]);
          return /* tuple */[
                  match$2[0],
                  match[1],
                  match[2],
                  match$1[1],
                  match$1[2],
                  match$2[1],
                  match$2[2]
                ];
        };
        beforeEach((function () {
                sandbox[0] = Sinon$1.sandbox.create();
                state[0] = TestTool$Wonderjs.init(sandbox, /* None */0, /* None */0, /* () */0);
                return /* () */0;
              }));
        afterEach((function () {
                return Curry._1(Sinon.restoreSandbox, sandbox[0]);
              }));
        describe("getBasicMaterialRenderArray", (function () {
                return Wonder_jest.test("get array of gameObject which has meshRenderer component and basicMaterial component", (function () {
                              var match = _prepareThree(state[0]);
                              return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](MeshRendererTool$Wonderjs.getBasicMaterialRenderArray(match[0])), /* int array */[
                                          match[1],
                                          match[3]
                                        ]);
                            }));
              }));
        describe("getLightMaterialRenderArray", (function () {
                return Wonder_jest.test("get array of gameObject which has meshRenderer component and lightMaterial component", (function () {
                              var match = _prepareThree(state[0]);
                              return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](MeshRendererTool$Wonderjs.getLightMaterialRenderArray(match[0])), /* int array */[match[5]]);
                            }));
              }));
        describe("test add component", (function () {
                describe("should add meshRenderer component after add material component", (function () {
                        Wonder_jest.test("test basic material", (function () {
                                var match = MeshRendererAPI$Wonderjs.createMeshRenderer(state[0]);
                                var meshRenderer = match[1];
                                var match$1 = GameObjectAPI$Wonderjs.createGameObject(match[0]);
                                var gameObject = match$1[1];
                                var state$1 = match$1[0];
                                return Wonder_jest.Expect[/* toThrowMessage */20]("should add material component before add meshRenderer component", Wonder_jest.Expect[/* expect */0]((function () {
                                                  GameObjectAPI$Wonderjs.addGameObjectMeshRendererComponent(gameObject, meshRenderer, state$1);
                                                  return /* () */0;
                                                })));
                              }));
                        return Wonder_jest.test("test light material", (function () {
                                      var match = MeshRendererAPI$Wonderjs.createMeshRenderer(state[0]);
                                      var meshRenderer = match[1];
                                      var match$1 = GameObjectAPI$Wonderjs.createGameObject(match[0]);
                                      var gameObject = match$1[1];
                                      var state$1 = match$1[0];
                                      return Wonder_jest.Expect[/* toThrowMessage */20]("should add material component before add meshRenderer component", Wonder_jest.Expect[/* expect */0]((function () {
                                                        GameObjectAPI$Wonderjs.addGameObjectMeshRendererComponent(gameObject, meshRenderer, state$1);
                                                        return /* () */0;
                                                      })));
                                    }));
                      }));
                return /* () */0;
              }));
        describe("disposeComponent", (function () {
                describe("dispose data", (function () {
                        Wonder_jest.test("remove from gameObjectMap", (function () {
                                var match = MeshRendererTool$Wonderjs.createBasicMaterialGameObject(state[0]);
                                var meshRenderer1 = match[2];
                                var state$1 = GameObjectTool$Wonderjs.disposeGameObjectMeshRendererComponent(match[1], meshRenderer1, match[0]);
                                var match$1 = MeshRendererTool$Wonderjs.getMeshRendererRecord(state$1);
                                return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](SparseMapService$WonderCommonlib.has(meshRenderer1, match$1[/* gameObjectMap */3])), /* false */0);
                              }));
                        describe("remove from basicMaterialRenderGameObjectArray", (function () {
                                Wonder_jest.test("test getBasicMaterialRenderArray", (function () {
                                        var match = _prepareTwo(state[0]);
                                        var state$1 = GameObjectTool$Wonderjs.disposeGameObjectMeshRendererComponent(match[1], match[2], match[0]);
                                        return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](MeshRendererTool$Wonderjs.getBasicMaterialRenderArray(state$1)), /* int array */[match[3]]);
                                      }));
                                return Wonder_jest.test("test add gameObject after dispose", (function () {
                                              var match = MeshRendererTool$Wonderjs.createBasicMaterialGameObject(state[0]);
                                              var state$1 = GameObjectTool$Wonderjs.disposeGameObjectMeshRendererComponent(match[1], match[2], match[0]);
                                              var match$1 = MeshRendererTool$Wonderjs.createBasicMaterialGameObject(state$1);
                                              return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](MeshRendererTool$Wonderjs.getBasicMaterialRenderArray(match$1[0])), /* int array */[match$1[1]]);
                                            }));
                              }));
                        describe("remove from lightMaterialRenderGameObjectArray", (function () {
                                var _prepare = function (state) {
                                  var match = MeshRendererTool$Wonderjs.createBasicMaterialGameObject(state);
                                  var match$1 = MeshRendererTool$Wonderjs.createLightMaterialGameObject(match[0]);
                                  var match$2 = MeshRendererTool$Wonderjs.createLightMaterialGameObject(match$1[0]);
                                  return /* tuple */[
                                          match$2[0],
                                          match[1],
                                          match[2],
                                          match$1[1],
                                          match$1[2],
                                          match$2[1],
                                          match$2[2]
                                        ];
                                };
                                Wonder_jest.test("test getLightMaterialRenderArray", (function () {
                                        var match = _prepare(state[0]);
                                        var state$1 = GameObjectTool$Wonderjs.disposeGameObjectMeshRendererComponent(match[3], match[4], match[0]);
                                        return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](MeshRendererTool$Wonderjs.getLightMaterialRenderArray(state$1)), /* int array */[match[5]]);
                                      }));
                                return Wonder_jest.test("test add gameObject after dispose", (function () {
                                              var match = _prepare(state[0]);
                                              var state$1 = GameObjectTool$Wonderjs.disposeGameObjectMeshRendererComponent(match[3], match[4], match[0]);
                                              var match$1 = MeshRendererTool$Wonderjs.createLightMaterialGameObject(state$1);
                                              return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](MeshRendererTool$Wonderjs.getLightMaterialRenderArray(match$1[0])), /* int array */[
                                                          match[5],
                                                          match$1[1]
                                                        ]);
                                            }));
                              }));
                        return /* () */0;
                      }));
                Wonder_jest.test("the disposed meshRenderer shouldn't affect other alive ones' record", (function () {
                        var match = _prepareTwo(state[0]);
                        var state$1 = GameObjectTool$Wonderjs.disposeGameObjectMeshRendererComponent(match[1], match[2], match[0]);
                        return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](MeshRendererAPI$Wonderjs.unsafeGetMeshRendererGameObject(match[4], state$1)), match[3]);
                      }));
                describe("test add new one after dispose old one", (function () {
                        Wonder_jest.test("use disposed index as new index firstly", (function () {
                                var match = _prepareTwo(state[0]);
                                var meshRenderer1 = match[2];
                                var state$1 = GameObjectTool$Wonderjs.disposeGameObjectMeshRendererComponent(match[1], meshRenderer1, match[0]);
                                var match$1 = MeshRendererAPI$Wonderjs.createMeshRenderer(state$1);
                                return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](match$1[1]), meshRenderer1);
                              }));
                        return Wonder_jest.test("if has no disposed index, get index from meshRendererRecord.index", (function () {
                                      var match = _prepareTwo(state[0]);
                                      var meshRenderer2 = match[4];
                                      var state$1 = GameObjectTool$Wonderjs.disposeGameObjectMeshRendererComponent(match[3], meshRenderer2, match[0]);
                                      var match$1 = MeshRendererAPI$Wonderjs.createMeshRenderer(state$1);
                                      var match$2 = MeshRendererAPI$Wonderjs.createMeshRenderer(match$1[0]);
                                      return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](/* tuple */[
                                                      match$1[1],
                                                      match$2[1]
                                                    ]), /* tuple */[
                                                  meshRenderer2,
                                                  meshRenderer2 + 1 | 0
                                                ]);
                                    }));
                      }));
                describe("contract check", (function () {
                        return Wonder_jest.test("expect dispose the alive component, but actual not", (function () {
                                      var match = _prepareTwo(state[0]);
                                      var meshRenderer1 = match[2];
                                      var gameObject1 = match[1];
                                      var state$1 = GameObjectTool$Wonderjs.disposeGameObjectMeshRendererComponent(gameObject1, meshRenderer1, match[0]);
                                      return Wonder_jest.Expect[/* toThrowMessage */20]("expect dispose the alive component, but actual not", Wonder_jest.Expect[/* expect */0]((function () {
                                                        GameObjectTool$Wonderjs.disposeGameObjectMeshRendererComponent(gameObject1, meshRenderer1, state$1);
                                                        return /* () */0;
                                                      })));
                                    }));
                      }));
                return /* () */0;
              }));
        describe("contract check: is alive", (function () {
                describe("if meshRenderer is disposed", (function () {
                        return Wonder_jest.test("unsafeGetMeshRendererGameObject should error", (function () {
                                      var match = MeshRendererTool$Wonderjs.createBasicMaterialGameObject(state[0]);
                                      var meshRenderer1 = match[2];
                                      var state$1 = GameObjectTool$Wonderjs.disposeGameObjectMeshRendererComponent(match[1], meshRenderer1, match[0]);
                                      return Wonder_jest.Expect[/* toThrowMessage */20]("expect component alive, but actual not", Wonder_jest.Expect[/* expect */0]((function () {
                                                        return MeshRendererAPI$Wonderjs.unsafeGetMeshRendererGameObject(meshRenderer1, state$1);
                                                      })));
                                    }));
                      }));
                return /* () */0;
              }));
        return /* () */0;
      }));

/*  Not a pure module */
