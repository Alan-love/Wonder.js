// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var Curry                            = require("bs-platform/lib/js/curry.js");
var Sinon                            = require("wonder-bs-sinon/lib/js/src/sinon.js");
var Sinon$1                          = require("sinon");
var Wonder_jest                      = require("wonder-bs-jest/lib/js/src/wonder_jest.js");
var TestTool$Wonderjs                = require("../../../../tool/TestTool.js");
var GameObjectAPI$Wonderjs           = require("../../../../../src/api/GameObjectAPI.js");
var MainStateTool$Wonderjs           = require("../../../../tool/service/state/MainStateTool.js");
var TypeArrayTool$Wonderjs           = require("../../../../tool/service/primitive/TypeArrayTool.js");
var GameObjectTool$Wonderjs          = require("../../../../tool/service/gameObject/GameObjectTool.js");
var AllMaterialTool$Wonderjs         = require("../../../../tool/service/material/AllMaterialTool.js");
var LightMaterialAPI$Wonderjs        = require("../../../../../src/api/material/LightMaterialAPI.js");
var LightMaterialTool$Wonderjs       = require("../../../../tool/service/material/LightMaterialTool.js");
var SparseMapService$WonderCommonlib = require("wonder-commonlib/lib/js/src/SparseMapService.js");

describe("LightMaterial", (function () {
        var sandbox = Sinon.getSandboxDefaultVal(/* () */0);
        var state = [MainStateTool$Wonderjs.createState(/* () */0)];
        beforeEach((function () {
                sandbox[0] = Sinon$1.sandbox.create();
                state[0] = TestTool$Wonderjs.init(sandbox, /* None */0, /* None */0, /* () */0);
                return /* () */0;
              }));
        afterEach((function () {
                return Curry._1(Sinon.restoreSandbox, sandbox[0]);
              }));
        describe("createLightMaterial", (function () {
                return Wonder_jest.test("create a new material which is just index(int)", (function () {
                              var match = LightMaterialAPI$Wonderjs.createLightMaterial(state[0]);
                              return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](match[1]), 0);
                            }));
              }));
        describe("unsafeGetLightMaterialGameObject", (function () {
                return Wonder_jest.test("get material's gameObject", (function () {
                              var match = LightMaterialAPI$Wonderjs.createLightMaterial(state[0]);
                              var material = match[1];
                              var match$1 = GameObjectAPI$Wonderjs.createGameObject(match[0]);
                              var gameObject = match$1[1];
                              var state$1 = GameObjectAPI$Wonderjs.addGameObjectLightMaterialComponent(gameObject, material, match$1[0]);
                              return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](LightMaterialAPI$Wonderjs.unsafeGetLightMaterialGameObject(material, state$1)), gameObject);
                            }));
              }));
        describe("operate data", (function () {
                Wonder_jest.test("get the data from array buffer may not equal to the value which is setted", (function () {
                        var match = LightMaterialAPI$Wonderjs.createLightMaterial(state[0]);
                        var material = match[1];
                        var color = /* float array */[
                          0.2,
                          0.3,
                          0.5
                        ];
                        var state$1 = LightMaterialAPI$Wonderjs.setLightMaterialDiffuseColor(material, color, match[0]);
                        return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](LightMaterialAPI$Wonderjs.getLightMaterialDiffuseColor(material, state$1)), /* float array */[
                                    0.20000000298023224,
                                    0.30000001192092896,
                                    0.5
                                  ]);
                      }));
                describe("getLightMaterialDiffuseColor", (function () {
                        return Wonder_jest.test("test default color", (function () {
                                      var match = LightMaterialAPI$Wonderjs.createLightMaterial(state[0]);
                                      return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](LightMaterialAPI$Wonderjs.getLightMaterialDiffuseColor(match[1], match[0])), /* float array */[
                                                  1,
                                                  1,
                                                  1
                                                ]);
                                    }));
                      }));
                describe("setLightMaterialDiffuseColor", (function () {
                        return Wonder_jest.test("test set color", (function () {
                                      var match = LightMaterialAPI$Wonderjs.createLightMaterial(state[0]);
                                      var material = match[1];
                                      var color = /* float array */[
                                        0.2,
                                        0.3,
                                        0.5
                                      ];
                                      var state$1 = LightMaterialAPI$Wonderjs.setLightMaterialDiffuseColor(material, color, match[0]);
                                      return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](TypeArrayTool$Wonderjs.truncateArray(LightMaterialAPI$Wonderjs.getLightMaterialDiffuseColor(material, state$1))), color);
                                    }));
                      }));
                describe("getLightMaterialSpecularColor", (function () {
                        return Wonder_jest.test("test default color", (function () {
                                      var match = LightMaterialAPI$Wonderjs.createLightMaterial(state[0]);
                                      return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](LightMaterialAPI$Wonderjs.getLightMaterialSpecularColor(match[1], match[0])), /* float array */[
                                                  1,
                                                  1,
                                                  1
                                                ]);
                                    }));
                      }));
                describe("setLightMaterialSpecularColor", (function () {
                        return Wonder_jest.test("test set color", (function () {
                                      var match = LightMaterialAPI$Wonderjs.createLightMaterial(state[0]);
                                      var material = match[1];
                                      var color = /* float array */[
                                        0.2,
                                        0.3,
                                        0.5
                                      ];
                                      var state$1 = LightMaterialAPI$Wonderjs.setLightMaterialSpecularColor(material, color, match[0]);
                                      return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](TypeArrayTool$Wonderjs.truncateArray(LightMaterialAPI$Wonderjs.getLightMaterialSpecularColor(material, state$1))), color);
                                    }));
                      }));
                describe("getLightMaterialShininess", (function () {
                        return Wonder_jest.test("test default shininess", (function () {
                                      var match = LightMaterialAPI$Wonderjs.createLightMaterial(state[0]);
                                      return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](LightMaterialAPI$Wonderjs.getLightMaterialShininess(match[1], match[0])), 32);
                                    }));
                      }));
                describe("setLightMaterialShininess", (function () {
                        return Wonder_jest.test("test set shininess", (function () {
                                      var match = LightMaterialAPI$Wonderjs.createLightMaterial(state[0]);
                                      var material = match[1];
                                      var state$1 = LightMaterialAPI$Wonderjs.setLightMaterialShininess(material, 30, match[0]);
                                      return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](LightMaterialAPI$Wonderjs.getLightMaterialShininess(material, state$1)), 30);
                                    }));
                      }));
                return /* () */0;
              }));
        describe("disposeComponent", (function () {
                describe("dispose data", (function () {
                        Wonder_jest.test("remove from gameObjectMap", (function () {
                                var match = LightMaterialTool$Wonderjs.createGameObject(state[0]);
                                var material1 = match[2];
                                var state$1 = GameObjectTool$Wonderjs.disposeGameObjectLightMaterialComponent(match[1], material1, match[0]);
                                var match$1 = LightMaterialTool$Wonderjs.getRecord(state$1);
                                return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](SparseMapService$WonderCommonlib.has(material1, match$1[/* gameObjectMap */10])), /* false */0);
                              }));
                        describe("test remove from type array", (function () {
                                var _testRemoveFromTypeArr = function (state, valueTuple, defaultValue, param) {
                                  return AllMaterialTool$Wonderjs.testRemoveFromTypeArr(state, valueTuple, defaultValue, /* tuple */[
                                              GameObjectTool$Wonderjs.disposeGameObjectLightMaterialComponent,
                                              param[0],
                                              param[1],
                                              param[2]
                                            ]);
                                };
                                describe("remove from shaderIndices", (function () {
                                        return Wonder_jest.test("reset removed one's value", (function () {
                                                      return _testRemoveFromTypeArr(state, /* tuple */[
                                                                  1,
                                                                  2
                                                                ], LightMaterialTool$Wonderjs.getDefaultShaderIndex(state[0]), /* tuple */[
                                                                  LightMaterialTool$Wonderjs.createGameObject,
                                                                  LightMaterialTool$Wonderjs.getShaderIndex,
                                                                  LightMaterialTool$Wonderjs.setShaderIndex
                                                                ]);
                                                    }));
                                      }));
                                describe("remove from diffuseColors", (function () {
                                        return Wonder_jest.test("reset removed one's value", (function () {
                                                      return _testRemoveFromTypeArr(state, /* tuple */[
                                                                  /* float array */[
                                                                    1,
                                                                    0.2,
                                                                    0.3
                                                                  ],
                                                                  /* float array */[
                                                                    0,
                                                                    0.2,
                                                                    0.3
                                                                  ]
                                                                ], LightMaterialTool$Wonderjs.getDefaultDiffuseColor(state[0]), /* tuple */[
                                                                  LightMaterialTool$Wonderjs.createGameObject,
                                                                  (function (material, state) {
                                                                      return TypeArrayTool$Wonderjs.truncateArray(LightMaterialAPI$Wonderjs.getLightMaterialDiffuseColor(material, state));
                                                                    }),
                                                                  LightMaterialAPI$Wonderjs.setLightMaterialDiffuseColor
                                                                ]);
                                                    }));
                                      }));
                                describe("remove from specularColors", (function () {
                                        return Wonder_jest.test("reset removed one's value", (function () {
                                                      return _testRemoveFromTypeArr(state, /* tuple */[
                                                                  /* float array */[
                                                                    1,
                                                                    0.2,
                                                                    0.3
                                                                  ],
                                                                  /* float array */[
                                                                    0,
                                                                    0.2,
                                                                    0.3
                                                                  ]
                                                                ], LightMaterialTool$Wonderjs.getDefaultSpecularColor(state[0]), /* tuple */[
                                                                  LightMaterialTool$Wonderjs.createGameObject,
                                                                  (function (material, state) {
                                                                      return TypeArrayTool$Wonderjs.truncateArray(LightMaterialAPI$Wonderjs.getLightMaterialSpecularColor(material, state));
                                                                    }),
                                                                  LightMaterialAPI$Wonderjs.setLightMaterialSpecularColor
                                                                ]);
                                                    }));
                                      }));
                                describe("remove from shininess", (function () {
                                        return Wonder_jest.test("reset removed one's value", (function () {
                                                      return _testRemoveFromTypeArr(state, /* tuple */[
                                                                  1,
                                                                  2
                                                                ], LightMaterialTool$Wonderjs.getDefaultShininess(state[0]), /* tuple */[
                                                                  LightMaterialTool$Wonderjs.createGameObject,
                                                                  LightMaterialAPI$Wonderjs.getLightMaterialShininess,
                                                                  LightMaterialAPI$Wonderjs.setLightMaterialShininess
                                                                ]);
                                                    }));
                                      }));
                                return /* () */0;
                              }));
                        return Wonder_jest.test("reset group count", (function () {
                                      var match = LightMaterialAPI$Wonderjs.createLightMaterial(state[0]);
                                      var material1 = match[1];
                                      var match$1 = GameObjectAPI$Wonderjs.createGameObject(match[0]);
                                      var gameObject1 = match$1[1];
                                      var state$1 = GameObjectAPI$Wonderjs.addGameObjectLightMaterialComponent(gameObject1, material1, match$1[0]);
                                      var match$2 = GameObjectAPI$Wonderjs.createGameObject(state$1);
                                      var state$2 = GameObjectAPI$Wonderjs.addGameObjectLightMaterialComponent(match$2[1], material1, match$2[0]);
                                      var state$3 = GameObjectTool$Wonderjs.disposeGameObjectLightMaterialComponent(gameObject1, material1, state$2);
                                      return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](LightMaterialTool$Wonderjs.getGroupCount(material1, state$3)), 0);
                                    }));
                      }));
                return /* () */0;
              }));
        describe("contract check: is alive", (function () {
                describe("if material is disposed", (function () {
                        var _testGetFunc = function (getFunc) {
                          var match = LightMaterialAPI$Wonderjs.createLightMaterial(state[0]);
                          var material = match[1];
                          var match$1 = GameObjectAPI$Wonderjs.createGameObject(match[0]);
                          var gameObject = match$1[1];
                          var state$1 = GameObjectAPI$Wonderjs.addGameObjectLightMaterialComponent(gameObject, material, match$1[0]);
                          var state$2 = GameObjectTool$Wonderjs.disposeGameObjectLightMaterialComponent(gameObject, material, state$1);
                          return Wonder_jest.Expect[/* toThrowMessage */20]("expect component alive, but actual not", Wonder_jest.Expect[/* expect */0]((function () {
                                            return Curry._2(getFunc, material, state$2);
                                          })));
                        };
                        Wonder_jest.test("unsafeGetLightMaterialGameObject should error", (function () {
                                return _testGetFunc(LightMaterialAPI$Wonderjs.unsafeGetLightMaterialGameObject);
                              }));
                        Wonder_jest.test("getLightMaterialDiffuseColor should error", (function () {
                                return _testGetFunc(LightMaterialAPI$Wonderjs.getLightMaterialDiffuseColor);
                              }));
                        return Wonder_jest.test("getLightMaterialSpecularColor should error", (function () {
                                      return _testGetFunc(LightMaterialAPI$Wonderjs.getLightMaterialSpecularColor);
                                    }));
                      }));
                return /* () */0;
              }));
        return /* () */0;
      }));

/*  Not a pure module */
