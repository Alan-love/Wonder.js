// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var Curry                                       = require("bs-platform/lib/js/curry.js");
var Sinon                                       = require("wonder-bs-sinon/lib/js/src/sinon.js");
var Sinon$1                                     = require("sinon");
var Wonder_jest                                 = require("wonder-bs-jest/lib/js/src/wonder_jest.js");
var SettingTool$Wonderjs                        = require("../../../../tool/service/setting/SettingTool.js");
var MainStateTool$Wonderjs                      = require("../../../../tool/service/state/MainStateTool.js");
var SettingWorkerTool$Wonderjs                  = require("../../../../integration/worker/tool/SettingWorkerTool.js");
var TestMainWorkerTool$Wonderjs                 = require("../../../../integration/worker/job/main_worker/tool/TestMainWorkerTool.js");
var WorkerJobWorkerTool$Wonderjs                = require("../../../../integration/worker/tool/WorkerJobWorkerTool.js");
var RenderWorkerStateTool$Wonderjs              = require("../../../../tool/service/state/RenderWorkerStateTool.js");
var MainInitJobMainWorkerTool$Wonderjs          = require("../../../../integration/worker/job/main_worker/tool/MainInitJobMainWorkerTool.js");
var WorkerDetectMainWorkerTool$Wonderjs         = require("../main_worker/tool/WorkerDetectMainWorkerTool.js");
var SendInitRenderDataWorkerTool$Wonderjs       = require("../../../../integration/worker/job/tool/SendInitRenderDataWorkerTool.js");
var WorkerDetectRenderWorkerTool$Wonderjs       = require("./tool/WorkerDetectRenderWorkerTool.js");
var WorkerInstanceMainWorkerTool$Wonderjs       = require("../../../../integration/worker/job/main_worker/tool/WorkerInstanceMainWorkerTool.js");
var GetWorkerDetectDataRenderWorkerJob$Wonderjs = require("../../../../../src/job/worker/render/init/GetWorkerDetectDataRenderWorkerJob.js");

describe("GetWorkerDetectDataRenderWorkerJob", (function () {
        var sandbox = Sinon.getSandboxDefaultVal(/* () */0);
        var state = [MainStateTool$Wonderjs.createState(/* () */0)];
        beforeEach((function () {
                sandbox[0] = Sinon$1.sandbox.create();
                state[0] = TestMainWorkerTool$Wonderjs.initWithJobConfig(sandbox, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[SettingTool$Wonderjs.buildBufferConfigStr(/* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* () */0)], /* () */0);
                return /* () */0;
              }));
        afterEach((function () {
                return Curry._1(Sinon.restoreSandbox, sandbox[0]);
              }));
        describe("get worker detect data and set to main state data", (function () {
                return Wonder_jest.testPromise("test", (function () {
                              RenderWorkerStateTool$Wonderjs.createStateAndSetToStateData(/* () */0);
                              return WorkerJobWorkerTool$Wonderjs.execRenderWorkerJob(GetWorkerDetectDataRenderWorkerJob$Wonderjs.execJob, (function (state) {
                                            return Promise.resolve(Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](WorkerDetectRenderWorkerTool$Wonderjs.getRecord(state)[/* isUseWorker */0]), /* true */1));
                                          }), /* Some */[/* Some */[{
                                              data: {
                                                workerDetectData: {
                                                  isUseWorker: /* true */1
                                                }
                                              }
                                            }]], /* None */0, /* () */0);
                            }));
              }));
        describe("test sended init render data->workerDetectData", (function () {
                beforeEach((function () {
                        return SettingWorkerTool$Wonderjs.buildFakeCanvasForNotPassCanvasId(sandbox);
                      }));
                return Wonder_jest.testPromise("test", (function () {
                              var state$1 = SettingTool$Wonderjs.setUseWorker(/* false */0, WorkerDetectMainWorkerTool$Wonderjs.markIsSupportRenderWorkerAndSharedArrayBuffer(/* false */0, state[0]));
                              MainStateTool$Wonderjs.setState(state$1);
                              return MainInitJobMainWorkerTool$Wonderjs.test(sandbox, WorkerInstanceMainWorkerTool$Wonderjs.unsafeGetRenderWorker, (function (postMessageToRenderWorker) {
                                            return Sinon.toCalledWith(/* array */[SendInitRenderDataWorkerTool$Wonderjs.buildInitRenderData(/* None */0, /* None */0, /* Some */[{
                                                                isUseWorker: /* false */0
                                                              }], /* () */0)], Wonder_jest.Expect[/* expect */0](postMessageToRenderWorker));
                                          }), MainInitJobMainWorkerTool$Wonderjs.prepare(/* () */0));
                            }));
              }));
        return /* () */0;
      }));

/*  Not a pure module */
