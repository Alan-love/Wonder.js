// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var Most                                          = require("most");
var Curry                                         = require("bs-platform/lib/js/curry.js");
var Sinon                                         = require("wonder-bs-sinon/lib/js/src/sinon.js");
var Sinon$1                                       = require("sinon");
var Caml_array                                    = require("bs-platform/lib/js/caml_array.js");
var Wonder_jest                                   = require("wonder-bs-jest/lib/js/src/wonder_jest.js");
var OptionTool$Wonderjs                           = require("../../../../tool/service/atom/OptionTool.js");
var WorkerWorkerTool$Wonderjs                     = require("../../../../integration/worker/tool/WorkerWorkerTool.js");
var RenderWorkerStateTool$Wonderjs                = require("../../../../tool/service/state/RenderWorkerStateTool.js");
var WorkerRenderWorkerTool$Wonderjs               = require("./tool/WorkerRenderWorkerTool.js");
var SendFinishSendJobDataRenderWorkerJob$Wonderjs = require("../../../../../src/job/worker/render/init/SendFinishSendJobDataRenderWorkerJob.js");

describe("SendFinishSendJobRenderWorkerJob", (function () {
        var sandbox = Sinon.getSandboxDefaultVal(/* () */0);
        beforeEach((function () {
                sandbox[0] = Sinon$1.sandbox.create();
                return /* () */0;
              }));
        afterEach((function () {
                return Curry._1(Sinon.restoreSandbox, sandbox[0]);
              }));
        describe("send data to main worker", (function () {
                return Wonder_jest.testPromise("test send data", (function () {
                              var worker = Curry._1(WorkerRenderWorkerTool$Wonderjs.getSelf, /* () */0);
                              var postMessageToWorker = WorkerWorkerTool$Wonderjs.stubPostMessage(sandbox, worker);
                              var flag = /* Some */[/* array */["FINISH_SEND_JOB_DATA"]];
                              return Most.drain(SendFinishSendJobDataRenderWorkerJob$Wonderjs.execJob(flag, /* None */0, RenderWorkerStateTool$Wonderjs.getStateData(/* () */0))).then((function () {
                                            return Promise.resolve(Sinon.toCalledOnce(Wonder_jest.Expect[/* expect */0](Sinon.withOneArg({
                                                                    operateType: Caml_array.caml_array_get(OptionTool$Wonderjs.unsafeGet(flag), 0)
                                                                  }, postMessageToWorker))));
                                          }));
                            }));
              }));
        return /* () */0;
      }));

/*  Not a pure module */
