// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var Curry                    = require("bs-platform/lib/js/curry.js");
var Sinon                    = require("wonder-bs-sinon/lib/js/src/sinon.js");
var Sinon$1                  = require("sinon");
var Wonder_jest              = require("wonder-bs-jest/lib/js/src/wonder_jest.js");
var StateAPI$Wonderjs        = require("../../../../../src/api/StateAPI.js");
var TestTool$Wonderjs        = require("../../../../tool/TestTool.js");
var FakeGlTool$Wonderjs      = require("../../../../tool/gl/FakeGlTool.js");
var GameObjectAPI$Wonderjs   = require("../../../../../src/api/GameObjectAPI.js");
var MainStateTool$Wonderjs   = require("../../../../tool/service/state/MainStateTool.js");
var BoxGeometryAPI$Wonderjs  = require("../../../../../src/api/geometry/BoxGeometryAPI.js");
var GameObjectTool$Wonderjs  = require("../../../../tool/service/gameObject/GameObjectTool.js");
var BoxGeometryTool$Wonderjs = require("../../../../tool/service/geometry/BoxGeometryTool.js");

describe("fix redo,undo bug", (function () {
        var sandbox = Sinon.getSandboxDefaultVal(/* () */0);
        var state = [MainStateTool$Wonderjs.createState(/* () */0)];
        beforeEach((function () {
                sandbox[0] = Sinon$1.sandbox.create();
                state[0] = TestTool$Wonderjs.initWithJobConfig(sandbox, /* None */0, /* None */0, /* None */0, /* None */0, /* () */0);
                return /* () */0;
              }));
        afterEach((function () {
                return Curry._1(Sinon.restoreSandbox, sandbox[0]);
              }));
        return Wonder_jest.test("fix \"1.create box1; 2.get copied state by deepCopyForRestore; 3.dispose box1; 4.add box2; 5.restore to copied state. the box1's vertices from copied state is wrong!\" bug", (function () {
                      var match = BoxGeometryTool$Wonderjs.createGameObject(state[0]);
                      var boxGameObject = match[1];
                      var state$1 = GameObjectAPI$Wonderjs.initGameObject(boxGameObject, match[0]);
                      var state$2 = FakeGlTool$Wonderjs.setFakeGl(FakeGlTool$Wonderjs.buildFakeGl(sandbox, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* () */0), state$1);
                      var copiedState = StateAPI$Wonderjs.deepCopyForRestore(state$2);
                      var state$3 = GameObjectTool$Wonderjs.disposeGameObject(boxGameObject, state$2);
                      var match$1 = BoxGeometryTool$Wonderjs.createGameObject(state$3);
                      GameObjectAPI$Wonderjs.initGameObject(match$1[1], match$1[0]);
                      return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](BoxGeometryAPI$Wonderjs.getBoxGeometryVertices(copiedState)), BoxGeometryTool$Wonderjs.getDefaultVertices(/* () */0));
                    }));
      }));

/*  Not a pure module */
