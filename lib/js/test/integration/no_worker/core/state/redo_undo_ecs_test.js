// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var Curry                                    = require("bs-platform/lib/js/curry.js");
var Sinon                                    = require("wonder-bs-sinon/lib/js/src/sinon.js");
var Sinon$1                                  = require("sinon");
var Wonder_jest                              = require("wonder-bs-jest/lib/js/src/wonder_jest.js");
var Js_primitive                             = require("bs-platform/lib/js/js_primitive.js");
var TestTool$Wonderjs                        = require("../../../../tool/TestTool.js");
var CameraTool$Wonderjs                      = require("../../../../tool/service/camera/CameraTool.js");
var FakeGlTool$Wonderjs                      = require("../../../../tool/gl/FakeGlTool.js");
var SettingTool$Wonderjs                     = require("../../../../tool/service/setting/SettingTool.js");
var TransformAPI$Wonderjs                    = require("../../../../../src/api/TransformAPI.js");
var MainStateTool$Wonderjs                   = require("../../../../tool/service/state/MainStateTool.js");
var PointLightAPI$Wonderjs                   = require("../../../../../src/api/light/PointLightAPI.js");
var TransformTool$Wonderjs                   = require("../../../../tool/service/transform/TransformTool.js");
var GameObjectTool$Wonderjs                  = require("../../../../tool/service/gameObject/GameObjectTool.js");
var PointLightTool$Wonderjs                  = require("../../../../tool/service/light/PointLightTool.js");
var AllMaterialTool$Wonderjs                 = require("../../../../tool/service/material/AllMaterialTool.js");
var AmbientLightAPI$Wonderjs                 = require("../../../../../src/api/light/AmbientLightAPI.js");
var MeshRendererAPI$Wonderjs                 = require("../../../../../src/api/MeshRendererAPI.js");
var AmbientLightTool$Wonderjs                = require("../../../../tool/service/light/AmbientLightTool.js");
var BasicMaterialAPI$Wonderjs                = require("../../../../../src/api/material/BasicMaterialAPI.js");
var LightMaterialAPI$Wonderjs                = require("../../../../../src/api/material/LightMaterialAPI.js");
var MeshRendererTool$Wonderjs                = require("../../../../tool/service/meshRenderer/MeshRendererTool.js");
var BasicMaterialTool$Wonderjs               = require("../../../../tool/service/material/BasicMaterialTool.js");
var CustomGeometryAPI$Wonderjs               = require("../../../../../src/api/geometry/CustomGeometryAPI.js");
var DirectionLightAPI$Wonderjs               = require("../../../../../src/api/light/DirectionLightAPI.js");
var LightMaterialTool$Wonderjs               = require("../../../../tool/service/material/LightMaterialTool.js");
var CustomGeometryTool$Wonderjs              = require("../../../../tool/service/geometry/CustomGeometryTool.js");
var DirectionLightTool$Wonderjs              = require("../../../../tool/service/light/DirectionLightTool.js");
var ObjectInstanceTool$Wonderjs              = require("../../../../tool/service/instance/ObjectInstanceTool.js");
var SourceInstanceTool$Wonderjs              = require("../../../../tool/service/instance/SourceInstanceTool.js");
var StaticTransformTool$Wonderjs             = require("../../../../tool/service/primitive/StaticTransformTool.js");
var SparseMapService$WonderCommonlib         = require("wonder-commonlib/lib/js/src/SparseMapService.js");
var PerspectiveCameraProjectionAPI$Wonderjs  = require("../../../../../src/api/PerspectiveCameraProjectionAPI.js");
var PerspectiveCameraProjectionTool$Wonderjs = require("../../../../tool/service/camera/PerspectiveCameraProjectionTool.js");

describe("test redo,undo component record", (function () {
        var sandbox = Sinon.getSandboxDefaultVal(/* () */0);
        var state = [MainStateTool$Wonderjs.createState(/* () */0)];
        var _prepareMeshRendererData = function (state) {
          var match = MeshRendererTool$Wonderjs.createBasicMaterialGameObject(state[0]);
          var match$1 = MeshRendererTool$Wonderjs.createLightMaterialGameObject(match[0]);
          var match$2 = MeshRendererTool$Wonderjs.createBasicMaterialGameObject(match$1[0]);
          var meshRenderer3 = match$2[2];
          var gameObject3 = match$2[1];
          var state$1 = GameObjectTool$Wonderjs.disposeGameObjectMeshRendererComponent(gameObject3, meshRenderer3, match$2[0]);
          return /* tuple */[
                  state$1,
                  match[1],
                  match$1[1],
                  gameObject3,
                  match[2],
                  match$1[2],
                  meshRenderer3
                ];
        };
        var _prepareTransformMatrixData = function (state) {
          var match = GameObjectTool$Wonderjs.createGameObject(state[0]);
          var transform1 = match[2];
          var match$1 = GameObjectTool$Wonderjs.createGameObject(match[0]);
          var transform2 = match$1[2];
          var match$2 = GameObjectTool$Wonderjs.createGameObject(match$1[0]);
          var transform3 = match$2[2];
          var gameObject3 = match$2[1];
          var state$1 = TransformAPI$Wonderjs.setTransformParent(transform1, transform2, match$2[0]);
          var state$2 = TransformAPI$Wonderjs.setTransformLocalPosition(transform1, /* tuple */[
                1,
                2,
                3
              ], state$1);
          var state$3 = TransformAPI$Wonderjs.setTransformLocalPosition(transform2, /* tuple */[
                2,
                4,
                10
              ], state$2);
          var state$4 = TransformAPI$Wonderjs.setTransformLocalPosition(transform3, /* tuple */[
                -1,
                4,
                5
              ], state$3);
          var state$5 = GameObjectTool$Wonderjs.disposeGameObjectTransformComponent(gameObject3, transform3, /* false */0, state$4);
          return /* tuple */[
                  state$5,
                  match[1],
                  match$1[1],
                  gameObject3,
                  transform1,
                  transform2,
                  transform3
                ];
        };
        var _prepareBasicCameraViewData = function (state) {
          var match = CameraTool$Wonderjs.createCameraGameObject(state[0]);
          var match$1 = CameraTool$Wonderjs.createCameraGameObject(match[0]);
          var match$2 = CameraTool$Wonderjs.createCameraGameObject(match$1[0]);
          var basicCameraView3 = match$2[3][0];
          var gameObject3 = match$2[1];
          var state$1 = GameObjectTool$Wonderjs.disposeGameObjectBasicCameraViewComponent(gameObject3, basicCameraView3, match$2[0]);
          return /* tuple */[
                  state$1,
                  match[1],
                  match$1[1],
                  gameObject3,
                  match[3][0],
                  match$1[3][0],
                  basicCameraView3
                ];
        };
        var _preparePerspectiveCameraProjectionData = function (state) {
          var match = CameraTool$Wonderjs.createCameraGameObject(state[0]);
          var perspectiveCameraProjection1 = match[3][1];
          var match$1 = CameraTool$Wonderjs.createCameraGameObject(match[0]);
          var perspectiveCameraProjection2 = match$1[3][1];
          var match$2 = CameraTool$Wonderjs.createCameraGameObject(match$1[0]);
          var perspectiveCameraProjection3 = match$2[3][1];
          var gameObject3 = match$2[1];
          var state$1 = PerspectiveCameraProjectionAPI$Wonderjs.setPerspectiveCameraNear(perspectiveCameraProjection2, 0.2, match$2[0]);
          var state$2 = PerspectiveCameraProjectionAPI$Wonderjs.setPerspectiveCameraFar(perspectiveCameraProjection2, 100, state$1);
          var state$3 = PerspectiveCameraProjectionAPI$Wonderjs.setPerspectiveCameraFar(perspectiveCameraProjection3, 100, state$2);
          var state$4 = PerspectiveCameraProjectionAPI$Wonderjs.setPerspectiveCameraAspect(perspectiveCameraProjection1, 1, state$3);
          var state$5 = PerspectiveCameraProjectionAPI$Wonderjs.setPerspectiveCameraAspect(perspectiveCameraProjection2, 2, state$4);
          var state$6 = PerspectiveCameraProjectionAPI$Wonderjs.setPerspectiveCameraFovy(perspectiveCameraProjection2, 60, state$5);
          var state$7 = PerspectiveCameraProjectionTool$Wonderjs.update(state$6);
          var state$8 = GameObjectTool$Wonderjs.disposeGameObjectPerspectiveCameraProjectionComponent(gameObject3, perspectiveCameraProjection3, state$7);
          return /* tuple */[
                  state$8,
                  match[1],
                  match$1[1],
                  gameObject3,
                  perspectiveCameraProjection1,
                  perspectiveCameraProjection2,
                  perspectiveCameraProjection3
                ];
        };
        var _prepareBasicMaterialData = function (state) {
          var match = BasicMaterialTool$Wonderjs.createGameObject(state[0]);
          var match$1 = BasicMaterialTool$Wonderjs.createGameObject(match[0]);
          var material2 = match$1[2];
          var match$2 = BasicMaterialTool$Wonderjs.createGameObject(match$1[0]);
          var state$1 = AllMaterialTool$Wonderjs.prepareForInit(match$2[0]);
          var state$2 = BasicMaterialAPI$Wonderjs.setBasicMaterialColor(material2, /* float array */[
                1,
                0.5,
                0.0
              ], state$1);
          return /* tuple */[
                  state$2,
                  match[1],
                  match$1[1],
                  match$2[1],
                  match[2],
                  material2,
                  match$2[2]
                ];
        };
        var _prepareLightMaterialData = function (state) {
          var match = LightMaterialTool$Wonderjs.createGameObject(state[0]);
          var match$1 = LightMaterialTool$Wonderjs.createGameObject(match[0]);
          var material2 = match$1[2];
          var match$2 = LightMaterialTool$Wonderjs.createGameObject(match$1[0]);
          var state$1 = AllMaterialTool$Wonderjs.prepareForInit(match$2[0]);
          var diffuseColor2 = /* float array */[
            1,
            0.5,
            0.0
          ];
          var state$2 = LightMaterialAPI$Wonderjs.setLightMaterialDiffuseColor(material2, diffuseColor2, state$1);
          return /* tuple */[
                  state$2,
                  match[1],
                  match$1[1],
                  match$2[1],
                  match[2],
                  material2,
                  match$2[2]
                ];
        };
        beforeEach((function () {
                sandbox[0] = Sinon$1.sandbox.create();
                state[0] = TestTool$Wonderjs.initWithJobConfig(sandbox, /* None */0, /* None */0, /* None */0, /* None */0, /* () */0);
                return /* () */0;
              }));
        afterEach((function () {
                return Curry._1(Sinon.restoreSandbox, sandbox[0]);
              }));
        describe("deep copy meshRenderer record", (function () {
                Wonder_jest.test("copied record should equal to source record", (function () {
                        var match = _prepareMeshRendererData(state);
                        var gameObject2 = match[2];
                        var gameObject1 = match[1];
                        var copiedState = MainStateTool$Wonderjs.deepCopyForRestore(match[0]);
                        return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](MeshRendererTool$Wonderjs.getMeshRendererRecord(copiedState)), /* record */[
                                    /* index */3,
                                    /* basicMaterialRenderGameObjectArray : int array */[gameObject1],
                                    /* lightMaterialRenderGameObjectArray : int array */[gameObject2],
                                    /* gameObjectMap : int array */[
                                      gameObject1,
                                      gameObject2,
                                      undefined
                                    ],
                                    /* disposedIndexArray : int array */[match[6]]
                                  ]);
                      }));
                return Wonder_jest.test("changing copied state shouldn't affect source state", (function () {
                              var match = _prepareMeshRendererData(state);
                              var gameObject2 = match[2];
                              var gameObject1 = match[1];
                              var state$1 = match[0];
                              var copiedState = MainStateTool$Wonderjs.deepCopyForRestore(state$1);
                              var record = MeshRendererTool$Wonderjs.getMeshRendererRecord(copiedState);
                              Js_primitive.undefined_to_opt(record[/* basicMaterialRenderGameObjectArray */1].pop());
                              Js_primitive.undefined_to_opt(record[/* lightMaterialRenderGameObjectArray */2].pop());
                              Js_primitive.undefined_to_opt(record[/* disposedIndexArray */4].pop());
                              SparseMapService$WonderCommonlib.deleteVal(match[5], record[/* gameObjectMap */3]);
                              return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](MeshRendererTool$Wonderjs.getMeshRendererRecord(state$1)), /* record */[
                                          /* index */3,
                                          /* basicMaterialRenderGameObjectArray : int array */[gameObject1],
                                          /* lightMaterialRenderGameObjectArray : int array */[gameObject2],
                                          /* gameObjectMap : int array */[
                                            gameObject1,
                                            gameObject2,
                                            undefined
                                          ],
                                          /* disposedIndexArray : int array */[match[6]]
                                        ]);
                            }));
              }));
        describe("deepCopyForRestore", (function () {
                describe("deep copy transform record", (function () {
                        Wonder_jest.test("deep copy childMap", (function () {
                                var match = _prepareTransformMatrixData(state);
                                var transform2 = match[5];
                                var state$1 = match[0];
                                TransformAPI$Wonderjs.getTransformPosition(transform2, state$1);
                                var copiedState = MainStateTool$Wonderjs.deepCopyForRestore(state$1);
                                var match$1 = TransformAPI$Wonderjs.createTransform(copiedState);
                                TransformAPI$Wonderjs.setTransformParent(match$1[1], transform2, match$1[0]);
                                return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](TransformAPI$Wonderjs.unsafeGetTransformChildren(match[4], state$1)), /* int array */[transform2]);
                              }));
                        return Wonder_jest.test("clean localToWorldMatrixCacheMap, normalMatrixCacheMap", (function () {
                                      var match = _prepareTransformMatrixData(state);
                                      var state$1 = match[0];
                                      TransformTool$Wonderjs.updateAndGetNormalMatrixTypeArray(match[5], state$1);
                                      var copiedState = MainStateTool$Wonderjs.deepCopyForRestore(state$1);
                                      var match$1 = TransformAPI$Wonderjs.createTransform(copiedState);
                                      var match$2 = TransformTool$Wonderjs.getRecord(match$1[0]);
                                      var localToWorldMatrixCacheMap = match$2[/* localToWorldMatrixCacheMap */13];
                                      var normalMatrixCacheMap = match$2[/* normalMatrixCacheMap */14];
                                      return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](/* tuple */[
                                                      localToWorldMatrixCacheMap,
                                                      normalMatrixCacheMap
                                                    ]), /* tuple */[
                                                  SparseMapService$WonderCommonlib.createEmpty(/* () */0),
                                                  SparseMapService$WonderCommonlib.createEmpty(/* () */0)
                                                ]);
                                    }));
                      }));
                describe("deep copy material record", (function () {
                        describe("test basic material", (function () {
                                return Wonder_jest.test("shadow copy materialArrayForWorkerInit", (function () {
                                              return MainStateTool$Wonderjs.testShadowCopyArrayLikeMapData((function (state) {
                                                            var match = BasicMaterialTool$Wonderjs.getRecord(state);
                                                            return /* array */[match[/* materialArrayForWorkerInit */9]];
                                                          }), state[0]);
                                            }));
                              }));
                        describe("test light material", (function () {
                                return Wonder_jest.test("shadow copy materialArrayForWorkerInit", (function () {
                                              return MainStateTool$Wonderjs.testShadowCopyArrayLikeMapData((function (state) {
                                                            var match = LightMaterialTool$Wonderjs.getRecord(state);
                                                            return /* array */[match[/* materialArrayForWorkerInit */13]];
                                                          }), state[0]);
                                            }));
                              }));
                        return /* () */0;
                      }));
                describe("deep copy light record", (function () {
                        describe("test ambient light", (function () {
                                return Wonder_jest.test("shadow copy mappedIndexMap, gameObjectMap", (function () {
                                              return MainStateTool$Wonderjs.testShadowCopyArrayLikeMapData((function (state) {
                                                            var match = AmbientLightTool$Wonderjs.getRecord(state);
                                                            return /* array */[
                                                                    match[/* mappedIndexMap */3],
                                                                    match[/* gameObjectMap */4]
                                                                  ];
                                                          }), state[0]);
                                            }));
                              }));
                        describe("test direction light", (function () {
                                return Wonder_jest.test("shadow copy mappedIndexMap, gameObjectMap", (function () {
                                              return MainStateTool$Wonderjs.testShadowCopyArrayLikeMapData((function (state) {
                                                            var match = DirectionLightTool$Wonderjs.getRecord(state);
                                                            return /* array */[
                                                                    match[/* mappedIndexMap */4],
                                                                    match[/* gameObjectMap */5]
                                                                  ];
                                                          }), state[0]);
                                            }));
                              }));
                        describe("test point light", (function () {
                                return Wonder_jest.test("shadow copy mappedIndexMap, gameObjectMap", (function () {
                                              return MainStateTool$Wonderjs.testShadowCopyArrayLikeMapData((function (state) {
                                                            var match = PointLightTool$Wonderjs.getRecord(state);
                                                            return /* array */[
                                                                    match[/* mappedIndexMap */8],
                                                                    match[/* gameObjectMap */9]
                                                                  ];
                                                          }), state[0]);
                                            }));
                              }));
                        return /* () */0;
                      }));
                describe("deep copy sourceInstance record", (function () {
                        Wonder_jest.test("deep copy matrixFloat32ArrayMap", (function () {
                                var match = SourceInstanceTool$Wonderjs.createSourceInstanceGameObject(state[0]);
                                var sourceInstance1 = match[2];
                                var state$1 = match[0];
                                var match$1 = SourceInstanceTool$Wonderjs.getRecord(state$1);
                                var originMatrixFloat32Array = new Float32Array(/* float array */[1]);
                                SparseMapService$WonderCommonlib.set(sourceInstance1, originMatrixFloat32Array, match$1[/* matrixFloat32ArrayMap */6]);
                                var copiedState = MainStateTool$Wonderjs.deepCopyForRestore(state$1);
                                var match$2 = SourceInstanceTool$Wonderjs.getRecord(copiedState);
                                var matrixFloat32Array = SparseMapService$WonderCommonlib.unsafeGet(sourceInstance1, match$2[/* matrixFloat32ArrayMap */6]);
                                matrixFloat32Array[0] = 1000;
                                var match$3 = SourceInstanceTool$Wonderjs.getRecord(state$1);
                                return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](SparseMapService$WonderCommonlib.unsafeGet(sourceInstance1, match$3[/* matrixFloat32ArrayMap */6])), originMatrixFloat32Array);
                              }));
                        return Wonder_jest.test("shadow copy objectInstanceTransformIndexMap, matrixInstanceBufferCapacityMap, gameObjectMap, disposedIndexArray", (function () {
                                      return MainStateTool$Wonderjs.testShadowCopyArrayLikeMapData((function (state) {
                                                    var match = SourceInstanceTool$Wonderjs.getRecord(state);
                                                    return /* array */[
                                                            match[/* objectInstanceTransformIndexMap */1],
                                                            match[/* matrixInstanceBufferCapacityMap */5],
                                                            match[/* gameObjectMap */9],
                                                            match[/* disposedIndexArray */8]
                                                          ];
                                                  }), state[0]);
                                    }));
                      }));
                describe("deep copy gameObject record", (function () {
                        return Wonder_jest.test("shadow copy disposedUidMap,\n\n        disposedUidArray,\n        disposedUidArrayForKeepOrder,\n        disposedBasicCameraViewArray,\n        disposedTransformArray,\n        disposedTransformArrayForKeepOrder,\n        disposedPerspectiveCameraProjectionArray,\n        disposedBasicMaterialArray,\n        disposedLightMaterialArray,\n        disposedBoxGeometryArray,\n        disposedCustomGeometryArray,\n        disposedSourceInstanceArray,\n        disposedObjectInstanceArray,\n        disposedAmbientLightArray,\n        disposedDirectionLightArray,\n        disposedPointLightArray,\n        disposedMeshRendererComponentArray,\n        disposedMeshRendererUidArray,\n                \n                \n                aliveUidArray, transformMap, basicCameraViewMap, currentGeometryDataMap, meshRendererMap, basicMaterialMap, lightMaterialMap, ambientLightMap, directionLightMap, pointLightMap, sourceInstanceMap, objectInstanceMap", (function () {
                                      return MainStateTool$Wonderjs.testShadowCopyArrayLikeMapData((function (state) {
                                                    var match = GameObjectTool$Wonderjs.getGameObjectRecord(state);
                                                    var disposedUidMap = match[/* disposedUidMap */2];
                                                    var disposedUidArray = match[/* disposedUidArray */3];
                                                    var disposedUidArrayForKeepOrder = match[/* disposedUidArrayForKeepOrder */4];
                                                    var disposedBasicCameraViewArray = match[/* disposedBasicCameraViewArray */5];
                                                    var disposedTransformArray = match[/* disposedTransformArray */6];
                                                    var disposedTransformArrayForKeepOrder = match[/* disposedTransformArrayForKeepOrder */7];
                                                    var disposedPerspectiveCameraProjectionArray = match[/* disposedPerspectiveCameraProjectionArray */8];
                                                    var disposedBasicMaterialArray = match[/* disposedBasicMaterialArray */9];
                                                    var disposedLightMaterialArray = match[/* disposedLightMaterialArray */10];
                                                    var disposedBoxGeometryArray = match[/* disposedBoxGeometryArray */11];
                                                    var disposedCustomGeometryArray = match[/* disposedCustomGeometryArray */12];
                                                    var disposedSourceInstanceArray = match[/* disposedSourceInstanceArray */13];
                                                    var disposedObjectInstanceArray = match[/* disposedObjectInstanceArray */14];
                                                    var disposedAmbientLightArray = match[/* disposedAmbientLightArray */15];
                                                    var disposedDirectionLightArray = match[/* disposedDirectionLightArray */16];
                                                    var disposedPointLightArray = match[/* disposedPointLightArray */17];
                                                    var disposedMeshRendererComponentArray = match[/* disposedMeshRendererComponentArray */18];
                                                    var disposedMeshRendererUidArray = match[/* disposedMeshRendererUidArray */19];
                                                    var aliveUidArray = match[/* aliveUidArray */20];
                                                    var currentGeometryDataMap = match[/* currentGeometryDataMap */21];
                                                    var transformMap = match[/* transformMap */22];
                                                    var basicCameraViewMap = match[/* basicCameraViewMap */23];
                                                    var meshRendererMap = match[/* meshRendererMap */25];
                                                    var basicMaterialMap = match[/* basicMaterialMap */26];
                                                    var lightMaterialMap = match[/* lightMaterialMap */27];
                                                    var sourceInstanceMap = match[/* sourceInstanceMap */28];
                                                    var objectInstanceMap = match[/* objectInstanceMap */29];
                                                    var ambientLightMap = match[/* ambientLightMap */30];
                                                    var directionLightMap = match[/* directionLightMap */31];
                                                    var pointLightMap = match[/* pointLightMap */32];
                                                    return /* array */[
                                                            disposedUidMap,
                                                            disposedUidArray,
                                                            disposedUidArrayForKeepOrder,
                                                            disposedBasicCameraViewArray,
                                                            disposedTransformArray,
                                                            disposedTransformArrayForKeepOrder,
                                                            disposedPerspectiveCameraProjectionArray,
                                                            disposedBasicMaterialArray,
                                                            disposedLightMaterialArray,
                                                            disposedBoxGeometryArray,
                                                            disposedCustomGeometryArray,
                                                            disposedSourceInstanceArray,
                                                            disposedObjectInstanceArray,
                                                            disposedAmbientLightArray,
                                                            disposedDirectionLightArray,
                                                            disposedPointLightArray,
                                                            disposedMeshRendererComponentArray,
                                                            disposedMeshRendererUidArray,
                                                            aliveUidArray,
                                                            transformMap,
                                                            basicCameraViewMap,
                                                            currentGeometryDataMap,
                                                            meshRendererMap,
                                                            basicMaterialMap,
                                                            lightMaterialMap,
                                                            ambientLightMap,
                                                            directionLightMap,
                                                            pointLightMap,
                                                            sourceInstanceMap,
                                                            objectInstanceMap
                                                          ];
                                                  }), state[0]);
                                    }));
                      }));
                describe("deep copy objectInstance record", (function () {
                        return Wonder_jest.test("shadow copy sourceInstanceMap, gameObjectMap, disposedIndexArray", (function () {
                                      return MainStateTool$Wonderjs.testShadowCopyArrayLikeMapData((function (state) {
                                                    var match = ObjectInstanceTool$Wonderjs.getObjectInstanceRecord(state);
                                                    return /* array */[
                                                            match[/* sourceInstanceMap */1],
                                                            match[/* gameObjectMap */3],
                                                            match[/* disposedIndexArray */2]
                                                          ];
                                                  }), state[0]);
                                    }));
                      }));
                describe("deep copy basicCameraView record", (function () {
                        return Wonder_jest.test("shadow copy gameObjectMap, disposedIndexArray", (function () {
                                      return MainStateTool$Wonderjs.testShadowCopyArrayLikeMapData((function (state) {
                                                    var match = state[/* basicCameraViewRecord */13];
                                                    return /* array */[
                                                            match[/* gameObjectMap */1],
                                                            match[/* disposedIndexArray */2]
                                                          ];
                                                  }), state[0]);
                                    }));
                      }));
                describe("deep copy basicCameraView record", (function () {
                        Wonder_jest.test("shadow copy dirtyArray, nearMap, farMap, fovyMap, aspectMap, gameObjectMap, disposedIndexArray", (function () {
                                return MainStateTool$Wonderjs.testShadowCopyArrayLikeMapData((function (state) {
                                              var match = state[/* perspectiveCameraProjectionRecord */14];
                                              return /* array */[
                                                      match[/* dirtyArray */1],
                                                      match[/* nearMap */3],
                                                      match[/* farMap */4],
                                                      match[/* fovyMap */5],
                                                      match[/* aspectMap */6],
                                                      match[/* gameObjectMap */7],
                                                      match[/* disposedIndexArray */8]
                                                    ];
                                            }), state[0]);
                              }));
                        return Wonder_jest.test("deep copy pMatrixMap", (function () {
                                      var match = _preparePerspectiveCameraProjectionData(state);
                                      var state$1 = match[0];
                                      var copiedState = MainStateTool$Wonderjs.deepCopyForRestore(state$1);
                                      var record = copiedState[/* perspectiveCameraProjectionRecord */14];
                                      var newrecord = record.slice();
                                      newrecord[/* index */0] = 0;
                                      SparseMapService$WonderCommonlib.unsafeGet(0, record[/* pMatrixMap */2])[1] = 10.0;
                                      var oldPMatrix = SparseMapService$WonderCommonlib.unsafeGet(0, state$1[/* perspectiveCameraProjectionRecord */14][/* pMatrixMap */2]);
                                      return Curry._2(Wonder_jest.Expect[/* Operators */23][/* <> */6], Wonder_jest.Expect[/* expect */0](oldPMatrix[1]), 10.0);
                                    }));
                      }));
                return /* () */0;
              }));
        describe("restore", (function () {
                var _testRestoreStateEqualTargetState = function (state, prepareDataFunc, getDataFunc) {
                  var match = Curry._1(prepareDataFunc, state);
                  var state$1 = match[0];
                  var currentState = MainStateTool$Wonderjs.createNewCompleteStateWithRenderConfig(sandbox);
                  var match$1 = Curry._1(prepareDataFunc, [currentState]);
                  MainStateTool$Wonderjs.restore(match$1[0], state$1);
                  return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](Curry._1(getDataFunc, MainStateTool$Wonderjs.unsafeGetState(/* () */0))), Curry._1(getDataFunc, state$1));
                };
                describe("restore meshRenderer record to target state", (function () {
                        var _prepare = function (state) {
                          var match = _prepareMeshRendererData(state);
                          var state$1 = AllMaterialTool$Wonderjs.prepareForInit(match[0]);
                          var match$1 = MeshRendererTool$Wonderjs.createBasicMaterialGameObject(MainStateTool$Wonderjs.createNewCompleteState(sandbox));
                          var currentState = AllMaterialTool$Wonderjs.pregetGLSLData(match$1[0]);
                          return /* tuple */[
                                  /* tuple */[
                                    state$1,
                                    match[1],
                                    match[2],
                                    match[3],
                                    match[4],
                                    match[5],
                                    match[6]
                                  ],
                                  /* tuple */[
                                    currentState,
                                    match$1[1],
                                    match$1[2]
                                  ]
                                ];
                        };
                        Wonder_jest.test("set restored state to stateData", (function () {
                                var match = _prepare(state);
                                var currentState = MainStateTool$Wonderjs.restore(match[1][0], match[0][0]);
                                return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](MainStateTool$Wonderjs.unsafeGetState(/* () */0)), currentState);
                              }));
                        Wonder_jest.test("change restored state should affect source state", (function () {
                                var match = _prepare(state);
                                var state$1 = match[0][0];
                                MainStateTool$Wonderjs.restore(match[1][0], state$1);
                                var match$1 = MeshRendererTool$Wonderjs.createBasicMaterialGameObject(MainStateTool$Wonderjs.createNewCompleteState(sandbox));
                                return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](MeshRendererAPI$Wonderjs.unsafeGetMeshRendererGameObject(match$1[2], state$1)), match$1[1]);
                              }));
                        return Wonder_jest.test("changing restored state which is restored from deep copied state shouldn't affect source state", (function () {
                                      var match = _prepare(state);
                                      var match$1 = match[0];
                                      var state$1 = match$1[0];
                                      var currentState = MainStateTool$Wonderjs.restore(match[1][0], MainStateTool$Wonderjs.deepCopyForRestore(state$1));
                                      MeshRendererTool$Wonderjs.createBasicMaterialGameObject(currentState);
                                      return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](/* tuple */[
                                                      MeshRendererTool$Wonderjs.getMeshRendererRecord(state$1)[/* basicMaterialRenderGameObjectArray */1],
                                                      MeshRendererTool$Wonderjs.getMeshRendererRecord(state$1)[/* lightMaterialRenderGameObjectArray */2]
                                                    ]), /* tuple */[
                                                  /* int array */[match$1[1]],
                                                  /* int array */[match$1[2]]
                                                ]);
                                    }));
                      }));
                describe("restore transform record to target state", (function () {
                        return Wonder_jest.test("get target buffer to current buffer", (function () {
                                      state[0] = TestTool$Wonderjs.initWithJobConfigWithoutBuildFakeDom(sandbox, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[SettingTool$Wonderjs.buildBufferConfigStr(/* None */0, /* Some */[5], /* None */0, /* None */0, /* None */0, /* None */0, /* () */0)], /* None */0, /* None */0, /* () */0);
                                      var match = _prepareTransformMatrixData(state);
                                      var state$1 = TransformTool$Wonderjs.update(match[4], match[0]);
                                      var state$2 = TransformTool$Wonderjs.update(match[5], state$1);
                                      var copiedState = MainStateTool$Wonderjs.deepCopyForRestore(state$2);
                                      var match$1 = GameObjectTool$Wonderjs.createGameObject(MainStateTool$Wonderjs.createNewCompleteState(sandbox));
                                      var currentState = TransformAPI$Wonderjs.setTransformLocalPosition(match$1[2], /* tuple */[
                                            -1,
                                            4,
                                            5
                                          ], match$1[0]);
                                      MainStateTool$Wonderjs.restore(currentState, copiedState);
                                      var match$2 = TransformTool$Wonderjs.getRecord(MainStateTool$Wonderjs.unsafeGetState(/* () */0));
                                      var localToWorldMatrices = match$2[/* localToWorldMatrices */2];
                                      var localPositions = match$2[/* localPositions */3];
                                      return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](/* tuple */[
                                                      localToWorldMatrices,
                                                      localPositions
                                                    ]), /* tuple */[
                                                  new Float32Array(/* float array */[
                                                        1,
                                                        0,
                                                        0,
                                                        0,
                                                        0,
                                                        1,
                                                        0,
                                                        0,
                                                        0,
                                                        0,
                                                        1,
                                                        0,
                                                        1,
                                                        2,
                                                        3,
                                                        1,
                                                        1,
                                                        0,
                                                        0,
                                                        0,
                                                        0,
                                                        1,
                                                        0,
                                                        0,
                                                        0,
                                                        0,
                                                        1,
                                                        0,
                                                        3,
                                                        6,
                                                        13,
                                                        1,
                                                        1,
                                                        0,
                                                        0,
                                                        0,
                                                        0,
                                                        1,
                                                        0,
                                                        0,
                                                        0,
                                                        0,
                                                        1,
                                                        0,
                                                        0,
                                                        0,
                                                        0,
                                                        1,
                                                        1,
                                                        0,
                                                        0,
                                                        0,
                                                        0,
                                                        1,
                                                        0,
                                                        0,
                                                        0,
                                                        0,
                                                        1,
                                                        0,
                                                        0,
                                                        0,
                                                        0,
                                                        1,
                                                        1,
                                                        0,
                                                        0,
                                                        0,
                                                        0,
                                                        1,
                                                        0,
                                                        0,
                                                        0,
                                                        0,
                                                        1,
                                                        0,
                                                        0,
                                                        0,
                                                        0,
                                                        1
                                                      ]),
                                                  new Float32Array(/* float array */[
                                                        1,
                                                        2,
                                                        3,
                                                        2,
                                                        4,
                                                        10,
                                                        0,
                                                        0,
                                                        0,
                                                        0,
                                                        0,
                                                        0,
                                                        0,
                                                        0,
                                                        0
                                                      ])
                                                ]);
                                    }));
                      }));
                describe("restore customGeometry record to target state", (function () {
                        return Wonder_jest.test("get target buffer to current buffer", (function () {
                                      state[0] = TestTool$Wonderjs.initWithJobConfigWithoutBuildFakeDom(sandbox, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[SettingTool$Wonderjs.buildBufferConfigStr(/* Some */[2], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* () */0)], /* None */0, /* None */0, /* () */0);
                                      var match = CustomGeometryTool$Wonderjs.createGameObjectAndSetPointData(state[0]);
                                      var copiedState = MainStateTool$Wonderjs.deepCopyForRestore(match[0]);
                                      var match$1 = CustomGeometryTool$Wonderjs.createGameObject(MainStateTool$Wonderjs.createNewCompleteState(sandbox));
                                      var vertices2 = new Float32Array(/* float array */[
                                            2,
                                            3,
                                            40
                                          ]);
                                      var currentState = CustomGeometryAPI$Wonderjs.setCustomGeometryVertices(match$1[2], vertices2, match$1[0]);
                                      MainStateTool$Wonderjs.restore(currentState, copiedState);
                                      var match$2 = CustomGeometryTool$Wonderjs.getRecord(MainStateTool$Wonderjs.unsafeGetState(/* () */0));
                                      return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](match$2[/* vertices */2]), new Float32Array(/* float array */[
                                                      10,
                                                      0,
                                                      0,
                                                      0,
                                                      0,
                                                      0
                                                    ]));
                                    }));
                      }));
                describe("restore material record to target state", (function () {
                        describe("test basic material", (function () {
                                return Wonder_jest.test("get target buffer to current buffer", (function () {
                                              state[0] = TestTool$Wonderjs.initWithJobConfigWithoutBuildFakeDom(sandbox, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[SettingTool$Wonderjs.buildBufferConfigStr(/* None */0, /* None */0, /* Some */[3], /* None */0, /* None */0, /* None */0, /* () */0)], /* None */0, /* None */0, /* () */0);
                                              var match = _prepareBasicMaterialData(state);
                                              var copiedState = MainStateTool$Wonderjs.deepCopyForRestore(match[0]);
                                              var match$1 = BasicMaterialTool$Wonderjs.createGameObject(MainStateTool$Wonderjs.createNewCompleteState(sandbox));
                                              var currentState = BasicMaterialAPI$Wonderjs.setBasicMaterialColor(match$1[2], /* float array */[
                                                    1,
                                                    0.1,
                                                    1
                                                  ], match$1[0]);
                                              var currentState$1 = AllMaterialTool$Wonderjs.pregetGLSLData(currentState);
                                              MainStateTool$Wonderjs.restore(currentState$1, copiedState);
                                              var match$2 = BasicMaterialTool$Wonderjs.getRecord(MainStateTool$Wonderjs.unsafeGetState(/* () */0));
                                              return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](match$2[/* colors */3]), new Float32Array(/* float array */[
                                                              1,
                                                              1,
                                                              1,
                                                              1,
                                                              0.5,
                                                              0,
                                                              1,
                                                              1,
                                                              1
                                                            ]));
                                            }));
                              }));
                        describe("test light material", (function () {
                                return Wonder_jest.test("get target buffer to current buffer", (function () {
                                              state[0] = TestTool$Wonderjs.initWithJobConfigWithoutBuildFakeDom(sandbox, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[SettingTool$Wonderjs.buildBufferConfigStr(/* None */0, /* None */0, /* None */0, /* Some */[3], /* None */0, /* None */0, /* () */0)], /* None */0, /* None */0, /* () */0);
                                              var match = _prepareLightMaterialData(state);
                                              var copiedState = MainStateTool$Wonderjs.deepCopyForRestore(match[0]);
                                              var match$1 = LightMaterialTool$Wonderjs.createGameObject(MainStateTool$Wonderjs.createNewCompleteState(sandbox));
                                              var currentState = LightMaterialAPI$Wonderjs.setLightMaterialDiffuseColor(match$1[2], /* float array */[
                                                    1,
                                                    0.1,
                                                    1
                                                  ], match$1[0]);
                                              var currentState$1 = AllMaterialTool$Wonderjs.pregetGLSLData(currentState);
                                              MainStateTool$Wonderjs.restore(currentState$1, copiedState);
                                              var match$2 = LightMaterialTool$Wonderjs.getRecord(MainStateTool$Wonderjs.unsafeGetState(/* () */0));
                                              return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](match$2[/* diffuseColors */3]), new Float32Array(/* float array */[
                                                              1,
                                                              1,
                                                              1,
                                                              1,
                                                              0.5,
                                                              0,
                                                              1,
                                                              1,
                                                              1
                                                            ]));
                                            }));
                              }));
                        return /* () */0;
                      }));
                describe("restore light record to target state", (function () {
                        var _prepareLightData = function (createGameObjectFunc, state) {
                          var match = Curry._1(createGameObjectFunc, state[0]);
                          var match$1 = Curry._1(createGameObjectFunc, match[0]);
                          var match$2 = Curry._1(createGameObjectFunc, match$1[0]);
                          var state$1 = AllMaterialTool$Wonderjs.prepareForInit(match$2[0]);
                          var state$2 = FakeGlTool$Wonderjs.setFakeGl(FakeGlTool$Wonderjs.buildFakeGl(sandbox, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* () */0), state$1);
                          return /* tuple */[
                                  state$2,
                                  match[1],
                                  match$1[1],
                                  match$2[1],
                                  match[2],
                                  match$1[2],
                                  match$2[2]
                                ];
                        };
                        describe("test ambient light", (function () {
                                return Wonder_jest.test("get target buffer to current buffer", (function () {
                                              var match = _prepareLightData(AmbientLightTool$Wonderjs.createGameObject, state);
                                              var state$1 = AmbientLightAPI$Wonderjs.setAmbientLightColor(match[5], /* float array */[
                                                    0,
                                                    0.5,
                                                    0
                                                  ], match[0]);
                                              var copiedState = MainStateTool$Wonderjs.deepCopyForRestore(state$1);
                                              var match$1 = AmbientLightTool$Wonderjs.createGameObject(MainStateTool$Wonderjs.createNewCompleteState(sandbox));
                                              var currentState = AmbientLightAPI$Wonderjs.setAmbientLightColor(match$1[2], /* float array */[
                                                    1,
                                                    0.1,
                                                    1
                                                  ], match$1[0]);
                                              var currentState$1 = AllMaterialTool$Wonderjs.pregetGLSLData(currentState);
                                              MainStateTool$Wonderjs.restore(currentState$1, copiedState);
                                              var match$2 = AmbientLightTool$Wonderjs.getRecord(MainStateTool$Wonderjs.unsafeGetState(/* () */0));
                                              return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](match$2[/* colors */2]), new Float32Array(/* float array */[
                                                              1,
                                                              1,
                                                              1,
                                                              0,
                                                              0.5,
                                                              0,
                                                              1,
                                                              1,
                                                              1
                                                            ]));
                                            }));
                              }));
                        describe("test direction light", (function () {
                                return Wonder_jest.test("get target buffer to current buffer", (function () {
                                              var match = _prepareLightData(DirectionLightTool$Wonderjs.createGameObject, state);
                                              var state$1 = DirectionLightAPI$Wonderjs.setDirectionLightColor(match[5], /* float array */[
                                                    0,
                                                    0.5,
                                                    0
                                                  ], match[0]);
                                              var copiedState = MainStateTool$Wonderjs.deepCopyForRestore(state$1);
                                              var match$1 = DirectionLightTool$Wonderjs.createGameObject(MainStateTool$Wonderjs.createNewCompleteState(sandbox));
                                              var currentState = DirectionLightAPI$Wonderjs.setDirectionLightColor(match$1[2], /* float array */[
                                                    1,
                                                    0.1,
                                                    1
                                                  ], match$1[0]);
                                              var currentState$1 = AllMaterialTool$Wonderjs.pregetGLSLData(currentState);
                                              MainStateTool$Wonderjs.restore(currentState$1, copiedState);
                                              var match$2 = DirectionLightTool$Wonderjs.getRecord(MainStateTool$Wonderjs.unsafeGetState(/* () */0));
                                              return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](match$2[/* colors */2]), new Float32Array(/* float array */[
                                                              1,
                                                              1,
                                                              1,
                                                              0,
                                                              0.5,
                                                              0,
                                                              1,
                                                              1,
                                                              1,
                                                              1,
                                                              1,
                                                              1
                                                            ]));
                                            }));
                              }));
                        describe("test point light", (function () {
                                return Wonder_jest.test("get target buffer to current buffer", (function () {
                                              var match = _prepareLightData(PointLightTool$Wonderjs.createGameObject, state);
                                              var state$1 = PointLightAPI$Wonderjs.setPointLightColor(match[5], /* float array */[
                                                    0,
                                                    0.5,
                                                    0
                                                  ], match[0]);
                                              var copiedState = MainStateTool$Wonderjs.deepCopyForRestore(state$1);
                                              var match$1 = PointLightTool$Wonderjs.createGameObject(MainStateTool$Wonderjs.createNewCompleteState(sandbox));
                                              var currentState = PointLightAPI$Wonderjs.setPointLightColor(match$1[2], /* float array */[
                                                    1,
                                                    0.1,
                                                    1
                                                  ], match$1[0]);
                                              var currentState$1 = AllMaterialTool$Wonderjs.pregetGLSLData(currentState);
                                              MainStateTool$Wonderjs.restore(currentState$1, copiedState);
                                              var match$2 = PointLightTool$Wonderjs.getRecord(MainStateTool$Wonderjs.unsafeGetState(/* () */0));
                                              return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](match$2[/* colors */2]), new Float32Array(/* float array */[
                                                              1,
                                                              1,
                                                              1,
                                                              0,
                                                              0.5,
                                                              0,
                                                              1,
                                                              1,
                                                              1,
                                                              1,
                                                              1,
                                                              1
                                                            ]));
                                            }));
                              }));
                        return /* () */0;
                      }));
                describe("restore sourceInstance record to target state", (function () {
                        Wonder_jest.test("get target buffer to current buffer", (function () {
                                var state = TestTool$Wonderjs.initWithJobConfigWithoutBuildFakeDom(sandbox, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[SettingTool$Wonderjs.buildBufferConfigStr(/* None */0, /* None */0, /* None */0, /* None */0, /* Some */[3], /* Some */[3], /* () */0)], /* None */0, /* None */0, /* () */0);
                                var match = ObjectInstanceTool$Wonderjs.createObjectInstanceGameObjectArr(2, state);
                                var match$1 = ObjectInstanceTool$Wonderjs.createObjectInstanceGameObjectArr(3, match[0]);
                                var state$1 = StaticTransformTool$Wonderjs.markModelMatrixIsStatic(match$1[2], /* false */0, StaticTransformTool$Wonderjs.markModelMatrixIsStatic(match[2], /* true */1, match$1[0]));
                                var copiedState = MainStateTool$Wonderjs.deepCopyForRestore(state$1);
                                var currentState = MainStateTool$Wonderjs.createNewCompleteState(sandbox);
                                var match$2 = ObjectInstanceTool$Wonderjs.createObjectInstanceGameObjectArr(1, currentState);
                                var currentState$1 = StaticTransformTool$Wonderjs.markModelMatrixIsStatic(match$2[2], /* true */1, match$2[0]);
                                MainStateTool$Wonderjs.restore(currentState$1, copiedState);
                                var match$3 = SourceInstanceTool$Wonderjs.getRecord(MainStateTool$Wonderjs.unsafeGetState(/* () */0));
                                return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](/* tuple */[
                                                match$3[/* isTransformStatics */3],
                                                match$3[/* objectInstanceTransformCollections */4]
                                              ]), /* tuple */[
                                            new Uint8Array(/* int array */[
                                                  1,
                                                  0,
                                                  1
                                                ]),
                                            new Uint32Array(/* array */[
                                                  1,
                                                  2,
                                                  0,
                                                  4,
                                                  5,
                                                  6,
                                                  0,
                                                  0,
                                                  0
                                                ])
                                          ]);
                              }));
                        Wonder_jest.test("add current state->sourceInstanceRecord->matrixFloat32ArrayMap typeArr to pool", (function () {
                                var state$1 = state[0];
                                var currentState = MainStateTool$Wonderjs.createNewCompleteState(sandbox);
                                var match = SourceInstanceTool$Wonderjs.getRecord(currentState);
                                var typeArr = new Float32Array(/* float array */[1]);
                                SparseMapService$WonderCommonlib.set(0, typeArr, match[/* matrixFloat32ArrayMap */6]);
                                MainStateTool$Wonderjs.restore(currentState, state$1);
                                var match$1 = MainStateTool$Wonderjs.unsafeGetState(/* () */0)[/* typeArrayPoolRecord */33];
                                return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](SparseMapService$WonderCommonlib.unsafeGet(typeArr.length, match$1[/* float32ArrayPoolMap */0])), /* array */[typeArr]);
                              }));
                        return Wonder_jest.test("mark is-not-send-modelMatrixData", (function () {
                                      var state$1 = state[0];
                                      var match = SourceInstanceTool$Wonderjs.getRecord(state$1);
                                      SparseMapService$WonderCommonlib.set(1, /* false */0, SparseMapService$WonderCommonlib.set(0, /* true */1, match[/* isSendTransformMatrixDataMap */7]));
                                      MainStateTool$Wonderjs.restore(MainStateTool$Wonderjs.createNewCompleteState(sandbox), state$1);
                                      var match$1 = SourceInstanceTool$Wonderjs.getRecord(MainStateTool$Wonderjs.unsafeGetState(/* () */0));
                                      return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](match$1[/* isSendTransformMatrixDataMap */7]), /* int array */[
                                                  /* false */0,
                                                  /* false */0
                                                ]);
                                    }));
                      }));
                Wonder_jest.test("restore basicCameraView record to target state", (function () {
                        return _testRestoreStateEqualTargetState(state, _prepareBasicCameraViewData, (function (state) {
                                      return state[/* basicCameraViewRecord */13];
                                    }));
                      }));
                return Wonder_jest.test("restore perspectiveCameraProjection record to target state", (function () {
                              return _testRestoreStateEqualTargetState(state, _preparePerspectiveCameraProjectionData, (function (state) {
                                            return state[/* perspectiveCameraProjectionRecord */14];
                                          }));
                            }));
              }));
        return /* () */0;
      }));

/*  Not a pure module */
