// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var Curry                          = require("bs-platform/lib/js/curry.js");
var Sinon                          = require("wonder-bs-sinon/lib/js/src/sinon.js");
var Sinon$1                        = require("sinon");
var Wonder_jest                    = require("wonder-bs-jest/lib/js/src/wonder_jest.js");
var TestTool$Wonderjs              = require("../../../../tool/TestTool.js");
var FakeGlTool$Wonderjs            = require("../../../../tool/gl/FakeGlTool.js");
var SettingTool$Wonderjs           = require("../../../../tool/service/setting/SettingTool.js");
var DirectorTool$Wonderjs          = require("../../../../tool/core/DirectorTool.js");
var GPUDetectTool$Wonderjs         = require("../../../../tool/service/gpu/GPUDetectTool.js");
var NoWorkerJobConfigTool$Wonderjs = require("../../../../tool/service/noWorkerJob/NoWorkerJobConfigTool.js");

describe("test detect gl job", (function () {
        var sandbox = Sinon.getSandboxDefaultVal(/* () */0);
        var _buildNoWorkerJobConfig = function () {
          return NoWorkerJobConfigTool$Wonderjs.buildNoWorkerJobConfig(/* None */0, /* Some */["\n        [\n    {\n      \"name\": \"default\",\n      \"jobs\": [\n        {\n          \"name\": \"detect_gl\"\n        }\n      ]\n    }\n  ]\n        "], /* None */0, /* Some */["\n\n[\n\n        {\n          \"name\": \"detect_gl\"\n        }\n]\n        "], /* None */0, /* () */0);
        };
        var _exec = function (fakeGl) {
          return DirectorTool$Wonderjs.init(FakeGlTool$Wonderjs.setFakeGl(fakeGl, TestTool$Wonderjs.initWithJobConfigWithoutBuildFakeDom(sandbox, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[_buildNoWorkerJobConfig(/* () */0)], /* None */0, /* () */0)));
        };
        beforeEach((function () {
                sandbox[0] = Sinon$1.sandbox.create();
                return /* () */0;
              }));
        afterEach((function () {
                return Curry._1(Sinon.restoreSandbox, sandbox[0]);
              }));
        describe("detect extension", (function () {
                return Wonder_jest.test("detect instanced_arrays", (function () {
                              var match = SettingTool$Wonderjs.buildFakeDomForNotPassCanvasId(sandbox);
                              var fakeGl = match[1];
                              _exec(fakeGl);
                              return Sinon.toCalledOnce(Wonder_jest.Expect[/* expect */0](fakeGl.getExtension));
                            }));
              }));
        describe("detect capabilty", (function () {
                var _prepare = function (sandbox) {
                  var warn = Sinon.createMethodStubWithJsObjSandbox(sandbox, console, "warn");
                  var match = SettingTool$Wonderjs.buildFakeDomForNotPassCanvasId(sandbox);
                  var fakeGl = match[1];
                  Sinon.returns({
                        precision: 0
                      }, fakeGl.getShaderPrecisionFormat);
                  return /* tuple */[
                          fakeGl,
                          warn,
                          0,
                          1,
                          2,
                          3
                        ];
                };
                Wonder_jest.test("if highp is available, use highp", (function () {
                        var match = _prepare(sandbox);
                        var highFloat = match[4];
                        var fakeGl = match[0];
                        Sinon.returns({
                              precision: 1
                            }, Sinon.withTwoArgs(match[2], highFloat, fakeGl.getShaderPrecisionFormat));
                        Sinon.returns({
                              precision: 1
                            }, Sinon.withTwoArgs(match[3], highFloat, fakeGl.getShaderPrecisionFormat));
                        var state = _exec(fakeGl);
                        return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](GPUDetectTool$Wonderjs.getRecord(state)[/* precision */1]), /* Some */[/* HIGHP */0]);
                      }));
                Wonder_jest.test("else if mediump is available, warn and use mediump", (function () {
                        var match = _prepare(sandbox);
                        var mediumFloat = match[5];
                        var fakeGl = match[0];
                        Sinon.returns({
                              precision: 1
                            }, Sinon.withTwoArgs(match[2], mediumFloat, fakeGl.getShaderPrecisionFormat));
                        Sinon.returns({
                              precision: 1
                            }, Sinon.withTwoArgs(match[3], mediumFloat, fakeGl.getShaderPrecisionFormat));
                        var state = _exec(fakeGl);
                        return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](/* tuple */[
                                        Sinon.getCallCount(match[1]),
                                        GPUDetectTool$Wonderjs.getRecord(state)[/* precision */1]
                                      ]), /* tuple */[
                                    1,
                                    /* Some */[/* MEDIUMP */1]
                                  ]);
                      }));
                return Wonder_jest.test("else, warn and use lowp", (function () {
                              var match = _prepare(sandbox);
                              var state = _exec(match[0]);
                              return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](/* tuple */[
                                              Sinon.getCallCount(match[1]),
                                              GPUDetectTool$Wonderjs.getRecord(state)[/* precision */1]
                                            ]), /* tuple */[
                                          1,
                                          /* Some */[/* LOWP */2]
                                        ]);
                            }));
              }));
        return /* () */0;
      }));

/*  Not a pure module */
