// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var Curry                             = require("bs-platform/lib/js/curry.js");
var Sinon                             = require("wonder-bs-sinon/lib/js/src/sinon.js");
var Sinon$1                           = require("sinon");
var Wonder_jest                       = require("wonder-bs-jest/lib/js/src/wonder_jest.js");
var GLSLTool$Wonderjs                 = require("../../../../tool/render/core/GLSLTool.js");
var FakeGlTool$Wonderjs               = require("../../../../tool/gl/FakeGlTool.js");
var MainStateTool$Wonderjs            = require("../../../../tool/service/state/MainStateTool.js");
var GLSLLocationTool$Wonderjs         = require("../../../../tool/service/location/GLSLLocationTool.js");
var InitMaterialTool$Wonderjs         = require("../../../../tool/job/no_worker/init/InitMaterialTool.js");
var InitMaterialJobTool$Wonderjs      = require("../../../../tool/job/no_worker/init/InitMaterialJobTool.js");
var NoWorkerJobConfigTool$Wonderjs    = require("../../../../tool/service/noWorkerJob/NoWorkerJobConfigTool.js");
var InitBasicMaterialJobTool$Wonderjs = require("../../../../tool/job/no_worker/init/InitBasicMaterialJobTool.js");

describe("test init basic material job", (function () {
        var sandbox = Sinon.getSandboxDefaultVal(/* () */0);
        var state = [MainStateTool$Wonderjs.createState(/* () */0)];
        var _buildNoWorkerJobConfig = function () {
          return NoWorkerJobConfigTool$Wonderjs.buildNoWorkerJobConfig(/* None */0, /* Some */["\n        [\n    {\n      \"name\": \"default\",\n      \"jobs\": [\n        {\n          \"name\": \"preget_glslData\"\n        },\n        {\n          \"name\": \"init_basic_material\"\n        }\n      ]\n    }\n  ]\n        "], /* None */0, /* Some */["\n[\n        {\n          \"name\": \"preget_glslData\"\n        },\n        {\n          \"name\": \"init_basic_material\"\n        }\n]\n        "], /* None */0, /* () */0);
        };
        beforeEach((function () {
                sandbox[0] = Sinon$1.sandbox.create();
                state[0] = InitBasicMaterialJobTool$Wonderjs.initWithJobConfig(sandbox, _buildNoWorkerJobConfig(/* () */0));
                return /* () */0;
              }));
        afterEach((function () {
                return Curry._1(Sinon.restoreSandbox, sandbox[0]);
              }));
        describe("test get attribute location", (function () {
                describe("test get a_position location", (function () {
                        Wonder_jest.test("test get location", (function () {
                                var match = InitBasicMaterialJobTool$Wonderjs.prepareGameObject(sandbox, state[0]);
                                var getAttribLocation = GLSLLocationTool$Wonderjs.getAttribLocation(/* None */0, sandbox, "a_position");
                                var state$1 = FakeGlTool$Wonderjs.setFakeGl(FakeGlTool$Wonderjs.buildFakeGl(sandbox, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[getAttribLocation], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* () */0), match[0]);
                                InitBasicMaterialJobTool$Wonderjs.exec(state$1);
                                return Sinon.toCalledOnce(Wonder_jest.Expect[/* expect */0](Sinon.withTwoArgs(Sinon$1.match.any, "a_position", getAttribLocation)));
                              }));
                        describe("test cache", (function () {
                                return Wonder_jest.test("if cached, not query gl location", (function () {
                                              var match = InitBasicMaterialJobTool$Wonderjs.prepareGameObject(sandbox, state[0]);
                                              var match$1 = InitBasicMaterialJobTool$Wonderjs.prepareGameObject(sandbox, match[0]);
                                              var getAttribLocation = GLSLLocationTool$Wonderjs.getAttribLocation(/* None */0, sandbox, "a_position");
                                              var state$1 = FakeGlTool$Wonderjs.setFakeGl(FakeGlTool$Wonderjs.buildFakeGl(sandbox, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[getAttribLocation], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* () */0), match$1[0]);
                                              InitBasicMaterialJobTool$Wonderjs.exec(state$1);
                                              return Sinon.toCalledOnce(Wonder_jest.Expect[/* expect */0](Sinon.withTwoArgs(Sinon$1.match.any, "a_position", getAttribLocation)));
                                            }));
                              }));
                        return /* () */0;
                      }));
                return /* () */0;
              }));
        describe("test get uniform location", (function () {
                var _testGetLocation = function (name) {
                  return InitMaterialTool$Wonderjs.testGetLocation(sandbox, name, /* tuple */[
                              InitBasicMaterialJobTool$Wonderjs.prepareGameObject,
                              InitBasicMaterialJobTool$Wonderjs.exec
                            ], state);
                };
                describe("test get u_mMatrix location", (function () {
                        Wonder_jest.test("test get location", (function () {
                                return _testGetLocation("u_mMatrix");
                              }));
                        describe("test cache", (function () {
                                return Wonder_jest.test("if cached, not query gl location", (function () {
                                              return InitMaterialTool$Wonderjs.testLocationCache(sandbox, "u_mMatrix", /* tuple */[
                                                          InitBasicMaterialJobTool$Wonderjs.prepareGameObject,
                                                          InitBasicMaterialJobTool$Wonderjs.exec
                                                        ], state);
                                            }));
                              }));
                        return /* () */0;
                      }));
                return Wonder_jest.test("test get u_color location", (function () {
                              return _testGetLocation("u_color");
                            }));
              }));
        describe("test glsl", (function () {
                Wonder_jest.test("glsl only set glPosition,glFragColor once", (function () {
                        return InitMaterialTool$Wonderjs.testOnlySeGlPositionGlFragColorOnce(sandbox, InitBasicMaterialJobTool$Wonderjs.prepareForJudgeGLSL, state);
                      }));
                describe("test shader lib's glsl", (function () {
                        Wonder_jest.test("test common shader lib's glsl", (function () {
                                return InitMaterialTool$Wonderjs.testCommonShaderLibGlsl(sandbox, InitBasicMaterialJobTool$Wonderjs.prepareForJudgeGLSL, state);
                              }));
                        Wonder_jest.test("test vertex shader lib's glsl", (function () {
                                return InitMaterialTool$Wonderjs.testVertexShaderLibGlsl(sandbox, InitBasicMaterialJobTool$Wonderjs.prepareForJudgeGLSL, state);
                              }));
                        describe("test modelMatrix instance shader libs", (function () {
                                return InitMaterialJobTool$Wonderjs.testModelMatrixInstanceShaderLibs(sandbox, /* tuple */[
                                            InitBasicMaterialJobTool$Wonderjs.prepareForJudgeGLSL,
                                            InitBasicMaterialJobTool$Wonderjs.prepareForJudgeGLSLNotExec,
                                            InitBasicMaterialJobTool$Wonderjs.exec
                                          ], state);
                              }));
                        describe("test basic shader lib's glsl", (function () {
                                Wonder_jest.test("test vs glsl", (function () {
                                        var shaderSource = InitBasicMaterialJobTool$Wonderjs.prepareForJudgeGLSL(sandbox, state[0]);
                                        return Wonder_jest.Expect[/* toContainString */11]("gl_Position = u_pMatrix * u_vMatrix * mMatrix * vec4(a_position, 1.0);")(Wonder_jest.Expect[/* expect */0](GLSLTool$Wonderjs.getVsSource(shaderSource)));
                                      }));
                                return Wonder_jest.test("test fs glsl", (function () {
                                              var shaderSource = InitBasicMaterialJobTool$Wonderjs.prepareForJudgeGLSL(sandbox, state[0]);
                                              return Curry._2(Wonder_jest.Expect[/* Operators */23][/* = */5], Wonder_jest.Expect[/* expect */0](GLSLTool$Wonderjs.containMultiline(GLSLTool$Wonderjs.getFsSource(shaderSource), /* :: */[
                                                                  "uniform vec3 u_color;",
                                                                  /* :: */[
                                                                    "vec4 totalColor = vec4(u_color, 1.0);\n         ",
                                                                    /* [] */0
                                                                  ]
                                                                ])), /* true */1);
                                            }));
                              }));
                        return Wonder_jest.test("test basic_end shader lib's glsl", (function () {
                                      var shaderSource = InitBasicMaterialJobTool$Wonderjs.prepareForJudgeGLSL(sandbox, state[0]);
                                      return Wonder_jest.Expect[/* toContainString */11]("gl_FragColor = vec4(totalColor.rgb, totalColor.a);")(Wonder_jest.Expect[/* expect */0](GLSLTool$Wonderjs.getFsSource(shaderSource)));
                                    }));
                      }));
                return /* () */0;
              }));
        return /* () */0;
      }));

/*  Not a pure module */
