describe("ui", function () {
    var sandbox = null;
    var plainFont;
    var renderer;
    var uiObject;
    var director;

    function createFont() {
        plainFont = wd.PlainFont.create();


        var uiObject = wd.UIObject.create();

        uiObject.addComponent(plainFont);


        renderer = wd.UIRenderer.create();


        uiObject.addComponent(renderer);


        return uiObject;
    }

    beforeEach(function () {
        sandbox = sinon.sandbox.create();

        testTool.openContractCheck(sandbox);

        director = wd.Director.getInstance();

        sandbox.stub(wd.DeviceManager.getInstance(), "view", {
            x: 0,
            y: 0,
            width:1000,
            height: 500
        });

        uiObject = createFont();

        sandbox.stub(wd.DeviceManager.getInstance(), "gl", testTool.buildFakeGl(sandbox));
    });
    afterEach(function () {
        testTool.clearInstance();
        uiObject.dispose();
        sandbox.restore();
    });

    describe("if ui not change, not clear ui canvas and not update ui", function(){
        it("test uiObject only has PlainFont component", function(){
            sandbox.spy(plainFont, "update");
            director.scene.addChild(uiObject);

            director._init();

            sandbox.stub(renderer.context, "clearRect");

            director._loopBody(1);
            director._loopBody(2);

            expect(renderer.context.clearRect).toCalledOnce();
            expect(plainFont.update).toCalledOnce();
        });

        //todo test more ui
    });

    describe("if any ui component dirty, firstly clear canvas once, then update every one", function(){
        function createUIUIObject(font, uiRenderer){
            var renderer;
            var fontComponent;

            var fontUIObject = wd.UIObject.create();
            if(font){
                fontComponent = font;
            }
            else{
                fontComponent = wd.PlainFont.create();
            }

            fontUIObject.addComponent(fontComponent);

            if(uiRenderer || uiRenderer === "no"){
                renderer = uiRenderer;
            }
            else{
                renderer = wd.UIRenderer.create();
            }

            fontUIObject.addComponent(renderer);


            return {
                uiObject:fontUIObject,
                font:fontComponent,
                renderer:renderer
            }
        }

        it("test ui component with the same UIRenderer", function(){
            var bitmapFont = wd.BitmapFont.create();

            uiObject.addComponent(bitmapFont);

            var data = createUIUIObject(wd.CharFont.create(), uiObject.getComponent(wd.UIRenderer));

            var charFontUIObject = data.uiObject;
            var charFont = data.font;


            uiObject.addChild(charFontUIObject);

            sandbox.spy(plainFont, "update");
            sandbox.spy(bitmapFont, "update");
            sandbox.spy(charFont, "update");





            director.scene.addChild(uiObject);

            director._init();

            sandbox.stub(renderer.context, "clearRect");

            plainFont.dirty = false;
            bitmapFont.dirty = true;
            charFont.dirty = true;



            director._loopBody(1);


            expect(renderer.context.clearRect).toCalledOnce();
            expect(renderer.context.clearRect).toCalledBefore(plainFont.update);
            expect(plainFont.update).toCalledBefore(bitmapFont.update);
            expect(bitmapFont.update).toCalledBefore(charFont.update);

            expect(plainFont.update).toCalledOnce();
            expect(bitmapFont.update).toCalledOnce();
            expect(charFont.update).toCalledOnce();
        });
        it("test BitmapFont component and CharFont component which is generated by the BitmapFont component", function(){
            uiObject.removeComponent(wd.PlainFont);


            var bitmapFont = wd.BitmapFont.create();

            uiObject.addComponent(bitmapFont);

            var data = createUIUIObject(wd.CharFont.create(), uiObject.getComponent(wd.UIRenderer));

            var charFontUIObject = data.uiObject;
            var charFont = data.font;


            uiObject.addChild(charFontUIObject);

            sandbox.spy(bitmapFont, "update");
            sandbox.spy(charFont, "update");





            director.scene.addChild(uiObject);

            director._init();

            sandbox.stub(renderer.context, "clearRect");

            bitmapFont.dirty = false;
            charFont.dirty = true;



            director._loopBody(1);


            expect(renderer.context.clearRect).toCalledOnce();
            expect(renderer.context.clearRect).toCalledBefore(bitmapFont.update);
            expect(bitmapFont.update).toCalledBefore(charFont.update);

            expect(bitmapFont.update).toCalledOnce();
            expect(charFont.update).toCalledOnce();
        });
        it("test ui component with different UIRenderers, so that each UIRenderer can clear conce", function(){
            var bitmapFont = wd.BitmapFont.create();

            uiObject.addComponent(bitmapFont);





            var data1 = createUIUIObject();

            var plainFontUIObject2 = data1.uiObject;
            var plainFont2 = data1.font;
            var renderer2 = data1.renderer;



            var bitmapFont2 = wd.BitmapFont.create();

            plainFontUIObject2.addComponent(bitmapFont2);


            uiObject.addChild(plainFontUIObject2);






            sandbox.spy(plainFont, "update");
            sandbox.spy(bitmapFont, "update");
            sandbox.spy(bitmapFont2, "update");
            sandbox.spy(plainFont2, "update");





            director.scene.addChild(uiObject);

            director._init();

            sandbox.stub(renderer.context, "clearRect");
            sandbox.stub(renderer2.context, "clearRect");

            plainFont.dirty = false;
            plainFont2.dirty = false;
            bitmapFont.dirty = true;
            bitmapFont2.dirty = true;



            director._loopBody(1);


            expect(renderer.context.clearRect).toCalledOnce();
            expect(renderer.context.clearRect).toCalledBefore(plainFont.update);
            expect(plainFont.update).toCalledBefore(bitmapFont.update);

            expect(plainFont.update).toCalledOnce();
            expect(bitmapFont.update).toCalledOnce();



            expect(renderer2.context.clearRect).toCalledOnce();
            expect(renderer2.context.clearRect).toCalledAfter(bitmapFont.update);
            expect(renderer2.context.clearRect).toCalledBefore(plainFont2.update);
            expect(plainFont2.update).toCalledBefore(bitmapFont2.update);

            expect(plainFont2.update).toCalledOnce();
            expect(bitmapFont2.update).toCalledOnce();
        });

        //todo test more ui
    });
});

