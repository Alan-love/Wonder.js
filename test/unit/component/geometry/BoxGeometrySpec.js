describe("BoxGeometry", function() {
    var sandbox = null;
    var geo = null;

    beforeEach(function () {
        sandbox = sinon.sandbox.create();
        geo = new dy.BoxGeometry();
    });
    afterEach(function () {
        testTool.clearInstance();
        sandbox.restore();
    });

    describe("init", function(){
        function judgeOneSegemets(){
            geo.width = 10;
            geo.height = 20;
            geo.depth = 30;

            geo.init();

            var data = geo.buffers.geometryData;
            expect(testTool.getValues(data.vertices)).toEqual(
                [-10, -20, 30, -10, 20, 30, 10, -20, 30, 10, 20, 30, 10, -20, -30, 10, 20, -30, -10, -20, -30, -10, 20, -30, -10, 20, 30, -10, 20, -30, 10, 20, 30, 10, 20, -30, 10, -20, 30, 10, -20, -30, -10, -20, 30, -10, -20, -30, 10, -20, 30, 10, 20, 30, 10, -20, -30, 10, 20, -30, -10, -20, -30, -10, 20, -30, -10, -20, 30, -10, 20, 30 ]
            )
            expect(testTool.getValues(data.texCoords)).toEqual(
                [
                    0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1
                ]
            )
            expect(data.indices).toEqual(
                [
                    0, 2, 1, 2, 3, 1, 4, 6, 5, 6, 7, 5, 8, 10, 9, 10, 11, 9, 12, 14, 13, 14, 15, 13, 16, 18, 17, 18, 19, 17, 20, 22, 21, 22, 23, 21
                ])
            expect(data.normals).toEqual(
                [
                    0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0
                ])
        }

        beforeEach(function(){
            geo.material = {
                init: sandbox.stub(),
                shading: dy.Shading.FLAT
            }
        });

        it("test with 1 segemets", function(){
            judgeOneSegemets();
        });
        it("test with 2 segemets", function(){
            geo.width = 10;
            geo.height = 20;
            geo.depth = 30;
            geo.widthSegments = 2;
            geo.heightSegments = 2;
            geo.depthSegments = 2;

            geo.init();

            var data = geo.buffers.geometryData;
            expect(testTool.getValues(data.vertices)).toEqual(
                [-10,-20,30,-10,0,30,-10,20,30,0,-20,30,0,0,30,0,20,30,10,-20,30,10,0,30,10,20,30,10,-20,-30,10,0,-30,10,20,-30,0,-20,-30,0,0,-30,0,20,-30,-10,-20,-30,-10,0,-30,-10,20,-30,-10,20,30,-10,20,0,-10,20,-30,0,20,30,0,20,0,0,20,-30,10,20,30,10,20,0,10,20,-30,10,-20,30,10,-20,0,10,-20,-30,0,-20,30,0,-20,0,0,-20,-30,-10,-20,30,-10,-20,0,-10,-20,-30,10,-20,30,10,0,30,10,20,30,10,-20,0,10,0,0,10,20,0,10,-20,-30,10,0,-30,10,20,-30,-10,-20,-30,-10,0,-30,-10,20,-30,-10,-20,0,-10,0,0,-10,20,0,-10,-20,30,-10,0,30,-10,20,30]
            )
            expect(testTool.getValues(data.texCoords)).toEqual(
                [
                    0,0,0,0.5,0,1,0.5,0,0.5,0.5,0.5,1,1,0,1,0.5,1,1,0,0,0,0.5,0,1,0.5,0,0.5,0.5,0.5,1,1,0,1,0.5,1,1,0,0,0,0.5,0,1,0.5,0,0.5,0.5,0.5,1,1,0,1,0.5,1,1,0,0,0,0.5,0,1,0.5,0,0.5,0.5,0.5,1,1,0,1,0.5,1,1,0,0,0,0.5,0,1,0.5,0,0.5,0.5,0.5,1,1,0,1,0.5,1,1,0,0,0,0.5,0,1,0.5,0,0.5,0.5,0.5,1,1,0,1,0.5,1,1
                ]
            )
            expect(data.indices).toEqual(
            [
            0,3,1,3,4,1,1,4,2,4,5,2,3,6,4,6,7,4,4,7,5,7,8,5,9,12,10,12,13,10,10,13,11,13,14,11,12,15,13,15,16,13,13,16,14,16,17,14,18,21,19,21,22,19,19,22,20,22,23,20,21,24,22,24,25,22,22,25,23,25,26,23,27,30,28,30,31,28,28,31,29,31,32,29,30,33,31,33,34,31,31,34,32,34,35,32,36,39,37,39,40,37,37,40,38,40,41,38,39,42,40,42,43,40,40,43,41,43,44,41,45,48,46,48,49,46,46,49,47,49,50,47,48,51,49,51,52,49,49,52,50,52,53,50
            ])
            expect(data.normals).toEqual(
                [
            0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0
                ])
        });
        it("test smooth shading", function(){
            geo.material.shading = dy.Shading.SMOOTH;

            judgeOneSegemets();
        });
    });
});

